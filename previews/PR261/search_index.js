var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip060\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip060)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip061\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip060)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip062\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.88 2211.02,1261.88 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.92 2211.02,1003.92 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.971 2211.02,745.971 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.017 2211.02,488.017 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.063 2211.02,230.063 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.88 423.181,1261.88 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.92 423.181,1003.92 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.971 423.181,745.971 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.017 423.181,488.017 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.063 423.181,230.063 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M356.339 1247.68 Q352.728 1247.68 350.899 1251.24 Q349.094 1254.78 349.094 1261.91 Q349.094 1269.02 350.899 1272.58 Q352.728 1276.13 356.339 1276.13 Q359.973 1276.13 361.779 1272.58 Q363.608 1269.02 363.608 1261.91 Q363.608 1254.78 361.779 1251.24 Q359.973 1247.68 356.339 1247.68 M356.339 1243.97 Q362.149 1243.97 365.205 1248.58 Q368.284 1253.16 368.284 1261.91 Q368.284 1270.64 365.205 1275.25 Q362.149 1279.83 356.339 1279.83 Q350.529 1279.83 347.45 1275.25 Q344.395 1270.64 344.395 1261.91 Q344.395 1253.16 347.45 1248.58 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M290.043 1017.27 L306.363 1017.27 L306.363 1021.2 L284.418 1021.2 L284.418 1017.27 Q287.08 1014.51 291.664 1009.89 Q296.27 1005.23 297.451 1003.89 Q299.696 1001.37 300.576 999.631 Q301.478 997.871 301.478 996.182 Q301.478 993.427 299.534 991.691 Q297.613 989.955 294.511 989.955 Q292.312 989.955 289.858 990.719 Q287.427 991.483 284.65 993.034 L284.65 988.311 Q287.474 987.177 289.927 986.598 Q292.381 986.02 294.418 986.02 Q299.789 986.02 302.983 988.705 Q306.177 991.39 306.177 995.881 Q306.177 998.01 305.367 999.932 Q304.58 1001.83 302.474 1004.42 Q301.895 1005.09 298.793 1008.31 Q295.691 1011.51 290.043 1017.27 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M316.224 986.645 L334.58 986.645 L334.58 990.58 L320.506 990.58 L320.506 999.052 Q321.524 998.705 322.543 998.543 Q323.562 998.358 324.58 998.358 Q330.367 998.358 333.747 1001.53 Q337.126 1004.7 337.126 1010.12 Q337.126 1015.7 333.654 1018.8 Q330.182 1021.88 323.862 1021.88 Q321.687 1021.88 319.418 1021.51 Q317.173 1021.14 314.765 1020.39 L314.765 1015.7 Q316.849 1016.83 319.071 1017.39 Q321.293 1017.94 323.77 1017.94 Q327.774 1017.94 330.112 1015.83 Q332.45 1013.73 332.45 1010.12 Q332.45 1006.51 330.112 1004.4 Q327.774 1002.29 323.77 1002.29 Q321.895 1002.29 320.02 1002.71 Q318.168 1003.13 316.224 1004.01 L316.224 986.645 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 989.723 Q352.728 989.723 350.899 993.288 Q349.094 996.83 349.094 1003.96 Q349.094 1011.07 350.899 1014.63 Q352.728 1018.17 356.339 1018.17 Q359.973 1018.17 361.779 1014.63 Q363.608 1011.07 363.608 1003.96 Q363.608 996.83 361.779 993.288 Q359.973 989.723 356.339 989.723 M356.339 986.02 Q362.149 986.02 365.205 990.626 Q368.284 995.209 368.284 1003.96 Q368.284 1012.69 365.205 1017.29 Q362.149 1021.88 356.339 1021.88 Q350.529 1021.88 347.45 1017.29 Q344.395 1012.69 344.395 1003.96 Q344.395 995.209 347.45 990.626 Q350.529 986.02 356.339 986.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M286.062 728.691 L304.418 728.691 L304.418 732.626 L290.344 732.626 L290.344 741.098 Q291.363 740.751 292.381 740.589 Q293.4 740.404 294.418 740.404 Q300.205 740.404 303.585 743.575 Q306.964 746.746 306.964 752.163 Q306.964 757.742 303.492 760.843 Q300.02 763.922 293.701 763.922 Q291.525 763.922 289.256 763.552 Q287.011 763.181 284.603 762.441 L284.603 757.742 Q286.687 758.876 288.909 759.431 Q291.131 759.987 293.608 759.987 Q297.613 759.987 299.951 757.88 Q302.288 755.774 302.288 752.163 Q302.288 748.552 299.951 746.445 Q297.613 744.339 293.608 744.339 Q291.733 744.339 289.858 744.756 Q288.006 745.172 286.062 746.052 L286.062 728.691 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M326.177 731.77 Q322.566 731.77 320.737 735.334 Q318.932 738.876 318.932 746.006 Q318.932 753.112 320.737 756.677 Q322.566 760.218 326.177 760.218 Q329.811 760.218 331.617 756.677 Q333.446 753.112 333.446 746.006 Q333.446 738.876 331.617 735.334 Q329.811 731.77 326.177 731.77 M326.177 728.066 Q331.987 728.066 335.043 732.672 Q338.122 737.256 338.122 746.006 Q338.122 754.732 335.043 759.339 Q331.987 763.922 326.177 763.922 Q320.367 763.922 317.288 759.339 Q314.233 754.732 314.233 746.006 Q314.233 737.256 317.288 732.672 Q320.367 728.066 326.177 728.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 731.77 Q352.728 731.77 350.899 735.334 Q349.094 738.876 349.094 746.006 Q349.094 753.112 350.899 756.677 Q352.728 760.218 356.339 760.218 Q359.973 760.218 361.779 756.677 Q363.608 753.112 363.608 746.006 Q363.608 738.876 361.779 735.334 Q359.973 731.77 356.339 731.77 M356.339 728.066 Q362.149 728.066 365.205 732.672 Q368.284 737.256 368.284 746.006 Q368.284 754.732 365.205 759.339 Q362.149 763.922 356.339 763.922 Q350.529 763.922 347.45 759.339 Q344.395 754.732 344.395 746.006 Q344.395 737.256 347.45 732.672 Q350.529 728.066 356.339 728.066 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M284.835 470.737 L307.057 470.737 L307.057 472.728 L294.511 505.297 L289.627 505.297 L301.432 474.672 L284.835 474.672 L284.835 470.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M316.224 470.737 L334.58 470.737 L334.58 474.672 L320.506 474.672 L320.506 483.144 Q321.524 482.797 322.543 482.635 Q323.562 482.45 324.58 482.45 Q330.367 482.45 333.747 485.621 Q337.126 488.792 337.126 494.209 Q337.126 499.788 333.654 502.89 Q330.182 505.968 323.862 505.968 Q321.687 505.968 319.418 505.598 Q317.173 505.228 314.765 504.487 L314.765 499.788 Q316.849 500.922 319.071 501.478 Q321.293 502.033 323.77 502.033 Q327.774 502.033 330.112 499.927 Q332.45 497.82 332.45 494.209 Q332.45 490.598 330.112 488.491 Q327.774 486.385 323.77 486.385 Q321.895 486.385 320.02 486.802 Q318.168 487.218 316.224 488.098 L316.224 470.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 473.816 Q352.728 473.816 350.899 477.38 Q349.094 480.922 349.094 488.052 Q349.094 495.158 350.899 498.723 Q352.728 502.265 356.339 502.265 Q359.973 502.265 361.779 498.723 Q363.608 495.158 363.608 488.052 Q363.608 480.922 361.779 477.38 Q359.973 473.816 356.339 473.816 M356.339 470.112 Q362.149 470.112 365.205 474.718 Q368.284 479.302 368.284 488.052 Q368.284 496.778 365.205 501.385 Q362.149 505.968 356.339 505.968 Q350.529 505.968 347.45 501.385 Q344.395 496.778 344.395 488.052 Q344.395 479.302 347.45 474.718 Q350.529 470.112 356.339 470.112 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M256.664 243.408 L264.303 243.408 L264.303 217.042 L255.992 218.709 L255.992 214.45 L264.256 212.783 L268.932 212.783 L268.932 243.408 L276.571 243.408 L276.571 247.343 L256.664 247.343 L256.664 243.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M296.015 215.862 Q292.404 215.862 290.576 219.427 Q288.77 222.968 288.77 230.098 Q288.77 237.204 290.576 240.769 Q292.404 244.311 296.015 244.311 Q299.65 244.311 301.455 240.769 Q303.284 237.204 303.284 230.098 Q303.284 222.968 301.455 219.427 Q299.65 215.862 296.015 215.862 M296.015 212.158 Q301.826 212.158 304.881 216.765 Q307.96 221.348 307.96 230.098 Q307.96 238.825 304.881 243.431 Q301.826 248.014 296.015 248.014 Q290.205 248.014 287.127 243.431 Q284.071 238.825 284.071 230.098 Q284.071 221.348 287.127 216.765 Q290.205 212.158 296.015 212.158 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M326.177 215.862 Q322.566 215.862 320.737 219.427 Q318.932 222.968 318.932 230.098 Q318.932 237.204 320.737 240.769 Q322.566 244.311 326.177 244.311 Q329.811 244.311 331.617 240.769 Q333.446 237.204 333.446 230.098 Q333.446 222.968 331.617 219.427 Q329.811 215.862 326.177 215.862 M326.177 212.158 Q331.987 212.158 335.043 216.765 Q338.122 221.348 338.122 230.098 Q338.122 238.825 335.043 243.431 Q331.987 248.014 326.177 248.014 Q320.367 248.014 317.288 243.431 Q314.233 238.825 314.233 230.098 Q314.233 221.348 317.288 216.765 Q320.367 212.158 326.177 212.158 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M356.339 215.862 Q352.728 215.862 350.899 219.427 Q349.094 222.968 349.094 230.098 Q349.094 237.204 350.899 240.769 Q352.728 244.311 356.339 244.311 Q359.973 244.311 361.779 240.769 Q363.608 237.204 363.608 230.098 Q363.608 222.968 361.779 219.427 Q359.973 215.862 356.339 215.862 M356.339 212.158 Q362.149 212.158 365.205 216.765 Q368.284 221.348 368.284 230.098 Q368.284 238.825 365.205 243.431 Q362.149 248.014 356.339 248.014 Q350.529 248.014 347.45 243.431 Q344.395 238.825 344.395 230.098 Q344.395 221.348 347.45 216.765 Q350.529 212.158 356.339 212.158 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip062)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.063 4017.76,230.063 \"/>\n<polyline clip-path=\"url(#clip062)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.5 456.554,1249.38 457.123,1248.27 457.691,1246.13 458.259,1246.11 458.828,1244.97 459.396,1244.75 459.964,1244.43 460.533,1244.03 461.101,1243.54 461.669,1243.01 462.238,1242.38 462.806,1241.67 463.375,1240.83 463.943,1239.9 464.511,1236.78 465.08,1234.63 465.648,1233.48 466.216,1231.14 466.785,1229.78 467.353,1226.27 467.921,1224.74 468.49,1223.02 469.058,1221.2 469.626,1218.2 470.195,1215.09 470.763,1212.87 471.331,1210.46 471.9,1205.84 472.468,1203.23 473.036,1200.39 473.605,1197.37 474.173,1193.1 474.741,1189.68 475.31,1186.12 475.878,1182.35 476.446,1178.41 477.015,1171.09 477.583,1165.74 478.152,1160.22 478.72,1154.62 479.288,1148.66 479.857,1143.63 480.425,1137.34 480.993,1130.76 481.562,1124.17 482.13,1117.33 482.698,1110.37 483.267,1104.22 483.835,1097.86 484.403,1089.24 484.972,1077.46 485.54,1068.76 486.108,1060.69 486.677,1053.39 487.245,1044.98 487.813,1036.38 488.382,1026.61 488.95,1017.76 489.518,1006.56 490.087,994.404 490.655,986.263 491.224,978.062 491.792,967.604 492.36,959.129 492.929,946.518 493.497,937.054 494.065,927.311 494.634,917.543 495.202,904.739 495.77,895.07 496.339,885.457 496.907,874.749 497.475,863.943 498.044,852.342 498.612,842.662 499.18,832.88 499.749,824.246 500.317,814.338 500.885,805.497 501.454,795.598 502.022,785.653 502.59,775.674 503.159,763.652 503.727,751.91 504.295,741.141 504.864,730.612 505.432,722.014 506.001,712.455 506.569,701.946 507.137,690.549 507.706,682.294 508.274,674.095 508.842,663.955 509.411,653.873 509.979,646.278 510.547,638.437 511.116,628.623 511.684,619.832 512.252,612.272 512.821,601.813 513.389,590.483 513.957,582.605 514.526,574.751 515.094,567.848 515.662,560.046 516.231,551.309 516.799,541.82 517.367,534.569 517.936,530.578 518.504,522.246 519.072,515.258 519.641,508.22 520.209,501.422 520.778,495.792 521.346,490.052 521.914,484.548 522.483,480.042 523.051,471.581 523.619,465.23 524.188,458.263 524.756,453.52 525.324,448.809 525.893,442.745 526.461,437.191 527.029,432.581 527.598,424.983 528.166,418.457 528.734,414.479 529.303,409.257 529.871,402.233 530.439,394.364 531.008,389.917 531.576,385.604 532.144,381.399 532.713,378.491 533.281,375.634 533.85,375.37 534.418,373.279 534.986,367.857 535.555,363.859 536.123,358.946 536.691,356.084 537.26,352.187 537.828,350.756 538.396,346.151 538.965,344.458 539.533,341.671 540.101,337.914 540.67,333.576 541.238,331.396 541.806,327.993 542.375,324.571 542.943,321.563 543.511,318.423 544.08,315.344 544.648,311.715 545.216,308.081 545.785,305.714 546.353,304.674 546.921,303.198 547.49,300.667 548.058,298.074 548.627,294.829 549.195,293.632 549.763,292.668 550.332,291.833 550.9,288.806 551.468,288.044 552.037,286.114 552.605,286.273 553.173,285.415 553.742,283.718 554.31,283.179 554.878,283.357 555.447,283.474 556.015,282.37 556.583,279.535 557.152,276.706 557.72,274.92 558.288,273.362 558.857,272.83 559.425,271.436 559.993,268.122 560.562,268.72 561.13,269.281 561.698,266.743 562.267,267.687 562.835,267.344 563.404,264.575 563.972,264.202 564.54,263.838 565.109,262.622 565.677,263.363 566.245,262.135 566.814,263.019 567.382,263.659 567.95,263.214 568.519,262.647 569.087,262.995 569.655,262.33 570.224,261.834 570.792,258.057 571.36,257.698 571.929,254.025 572.497,254.886 573.065,255.663 573.634,256.244 574.202,253.896 574.77,251.458 575.339,251.414 575.907,251.175 576.476,252.239 577.044,249.709 577.612,248.589 578.181,245.349 578.749,245.741 579.317,246.966 579.886,248.991 580.454,248.812 581.022,248.673 581.591,247.472 582.159,245.249 582.727,245.428 583.296,246.637 583.864,247.622 584.432,246.476 585.001,244.191 585.569,244.447 586.137,244.574 586.706,242.637 587.274,242.798 587.842,241.777 588.411,240.877 588.979,241.106 589.547,241.387 590.116,236.427 590.684,236.989 591.253,236.413 591.821,238.092 592.389,240.547 592.958,239.679 593.526,239.982 594.094,240.045 594.663,241.214 595.231,240.296 595.799,240.51 596.368,240.571 596.936,237.838 597.504,237.029 598.073,235.293 598.641,233.548 599.209,235.267 599.778,236.601 600.346,234.071 600.914,234.812 601.483,236.504 602.051,235.912 602.619,238.326 603.188,236.537 603.756,234.92 604.325,235.57 604.893,235.104 605.461,236.709 606.03,237.342 606.598,237.52 607.166,237.969 607.735,238.262 608.303,236.64 608.871,235.053 609.44,235.761 610.008,235.258 610.576,235.037 611.145,234.481 611.713,235.03 612.281,236.843 612.85,236.33 613.418,235.748 613.986,236.133 614.555,235.461 615.123,230.876 615.691,230.703 616.26,232.486 616.828,233.283 617.396,234.967 617.965,233.525 618.533,232.992 619.102,234.949 619.67,235.532 620.238,234.878 620.807,236.448 621.375,237.747 621.943,236.952 622.512,236.568 623.08,238.922 623.648,240.086 624.217,240.287 624.785,239.193 625.353,236.043 625.922,237.231 626.49,236.388 627.058,236.593 627.627,238.062 628.195,236.113 628.763,235.345 629.332,235.965 629.9,236.105 630.468,236.318 631.037,237.512 631.605,239.76 632.173,239.928 632.742,239.758 633.31,239.875 633.879,239.993 634.447,240.94 635.015,241.044 635.584,239.936 636.152,238.806 636.72,239.919 637.289,239.016 637.857,241.092 638.425,239.996 638.994,242.938 639.562,243.766 640.13,241.234 640.699,243.952 641.267,242.385 641.835,242.202 642.404,242.783 642.972,241.333 643.54,241.984 644.109,241.52 644.677,241.171 645.245,242.749 645.814,243.212 646.382,242.943 646.951,242.363 647.519,243.143 648.087,241.344 648.656,238.812 649.224,240.786 649.792,240.358 650.361,240.722 650.929,236.349 651.497,234.277 652.066,233.517 652.634,233.705 653.202,232.985 653.771,235.16 654.339,235.133 654.907,234.11 655.476,233.116 656.044,231.351 656.612,230.592 657.181,232.101 657.749,232.273 658.317,233.495 658.886,233.69 659.454,233.807 660.022,233.655 660.591,234.888 661.159,234.751 661.728,232.807 662.296,232.991 662.864,232.357 663.433,233.598 664.001,233.574 664.569,232.491 665.138,230.71 665.706,230.978 666.274,231.218 666.843,231.414 667.411,229.336 667.979,230.799 668.548,231.935 669.116,235.2 669.684,235.126 670.253,235.267 670.821,234.038 671.389,232.614 671.958,233.711 672.526,235.845 673.094,235.72 673.663,233.555 674.231,231.742 674.799,231.032 675.368,231.243 675.936,234.392 676.505,233.273 677.073,234.21 677.641,235.147 678.21,235.015 678.778,233.895 679.346,233.976 679.915,236.978 680.483,235.594 681.051,234.637 681.62,233.221 682.188,231.235 682.756,230.534 683.325,230.897 683.893,231.29 684.461,230.272 685.03,231.22 685.598,233.282 686.166,235.287 686.735,235.231 687.303,232.968 687.871,231.968 688.44,231.221 689.008,231.5 689.577,231.792 690.145,233.873 690.713,233.713 691.282,232.735 691.85,229.645 692.418,229.165 692.987,231.871 693.555,230.863 694.123,231.155 694.692,231.247 695.26,232.451 695.828,237.862 696.397,236.471 696.965,235.452 697.533,234.22 698.102,235.299 698.67,235.134 699.238,232.825 699.807,232.845 700.375,233.16 700.943,231.136 701.512,230.252 702.08,231.46 702.648,231.593 703.217,229.534 703.785,228.043 704.354,227.517 704.922,227.911 705.49,230.435 706.059,229.655 706.627,232.9 707.195,234.748 707.764,233.509 708.332,233.489 708.9,234.537 709.469,235.442 710.037,234.44 710.605,234.297 711.174,234.272 711.742,236.239 712.31,237.049 712.879,235.607 713.447,235.459 714.015,236.109 714.584,236.69 715.152,235.435 715.72,232.961 716.289,231.794 716.857,232.837 717.425,231.877 717.994,231.87 718.562,231.741 719.131,231.72 719.699,232.755 720.267,232.489 720.836,231.422 721.404,232.367 721.972,233.306 722.541,232.291 723.109,232.239 723.677,232.404 724.246,231.248 724.814,232.475 725.382,232.43 725.951,234.519 726.519,234.468 727.087,236.177 727.656,234.708 728.224,234.55 728.792,234.371 729.361,235.069 729.929,233.858 730.497,233.683 731.066,233.691 731.634,234.709 732.203,234.566 732.771,234.328 733.339,235.13 733.908,236.939 734.476,237.539 735.044,236.98 735.613,237.366 736.181,235.791 736.749,235.586 737.318,235.29 737.886,235.124 738.454,234.766 739.023,234.228 739.591,234.025 740.159,231.67 740.728,229.539 741.296,230.682 741.864,227.62 742.433,227.759 743.001,226.886 743.569,226.202 744.138,224.399 744.706,225.186 745.274,225.563 745.843,225.978 746.411,227.437 746.98,228.518 747.548,228.634 748.116,228.916 748.685,229.314 749.253,228.617 749.821,227.788 750.39,226.126 750.958,226.473 751.526,226.7 752.095,228.225 752.663,228.644 753.231,226.858 753.8,227.453 754.368,229.715 754.936,229.921 755.505,230.089 756.073,228.048 756.641,225.329 757.21,222.821 757.778,224.565 758.346,227.051 758.915,225.036 759.483,225.571 760.052,226.967 760.62,227.227 761.188,228.527 761.757,227.431 762.325,227.858 762.893,228.352 763.462,229.94 764.03,230.136 764.598,229.433 765.167,229.548 765.735,229.767 766.303,230.079 766.872,228.063 767.44,229.25 768.008,230.249 768.577,231.518 769.145,232.706 769.713,233.776 770.282,232.582 770.85,232.677 771.418,232.787 771.987,232.853 772.555,232.895 773.123,232.944 773.692,231.977 774.26,233.331 774.829,232.637 775.397,230.697 775.965,228.91 776.534,232.481 777.102,232.513 777.67,232.587 778.239,231.509 778.807,230.652 779.375,230.625 779.944,231.939 780.512,230.692 781.08,231.769 781.649,231.025 782.217,231.155 782.785,232.277 783.354,232.382 783.922,234.472 784.49,235.393 785.059,236.436 785.627,239.471 786.195,238.059 786.764,238.674 787.332,238.135 787.9,236.616 788.469,236.237 789.037,235.826 789.606,237.719 790.174,238.249 790.742,237.732 791.311,237.041 791.879,234.482 792.447,238.248 793.016,235.626 793.584,237.55 794.152,238.089 794.721,238.701 795.289,237.235 795.857,237.913 796.426,237.264 796.994,236.522 797.562,235.991 798.131,235.529 798.699,234.117 799.267,234.984 799.836,232.564 800.404,235.509 800.972,237.126 801.541,235.481 802.109,234.187 802.678,230.811 803.246,231.706 803.814,232.766 804.383,232.472 804.951,231.398 805.519,230.312 806.088,229.465 806.656,229.561 807.224,231.48 807.793,232.383 808.361,232.271 808.929,229.657 809.498,227.716 810.066,228.747 810.634,228.654 811.203,228.825 811.771,227.872 812.339,227.831 812.908,228.14 813.476,228.977 814.044,227.842 814.613,224.694 815.181,224.149 815.749,224.592 816.318,224.065 816.886,224.499 817.455,222.76 818.023,223.353 818.591,221.717 819.16,222.379 819.728,223.096 820.296,224.625 820.865,225.135 821.433,225.614 822.001,225.844 822.57,227.074 823.138,228.353 823.706,228.78 824.275,227.906 824.843,230.06 825.411,228.176 825.98,229.393 826.548,228.231 827.116,226.341 827.685,225.711 828.253,227.139 828.821,226.493 829.39,228.844 829.958,228.195 830.526,227.479 831.095,226.839 831.663,227.32 832.232,228.838 832.8,230.275 833.368,230.402 833.937,230.578 834.505,229.521 835.073,230.69 835.642,231.847 836.21,231.931 836.778,230.86 837.347,231.053 837.915,232.035 838.483,232.018 839.052,231.089 839.62,233.151 840.188,232.06 840.757,232.046 841.325,232.05 841.893,231.218 842.462,230.251 843.03,228.363 843.598,229.498 844.167,231.788 844.735,233.883 845.304,233.849 845.872,233.633 846.44,231.665 847.009,230.667 847.577,231.704 848.145,231.772 848.714,232.835 849.282,232.046 849.85,230.071 850.419,231.087 850.987,233.238 851.555,234.149 852.124,234.992 852.692,235.865 853.26,235.588 853.829,236.224 854.397,235.809 854.965,236.615 855.534,237.944 856.102,235.251 856.67,234.803 857.239,234.409 857.807,234.255 858.375,233.9 858.944,234.672 859.512,231.105 860.081,231.123 860.649,227.988 861.217,227.111 861.786,225.35 862.354,226.622 862.922,227.739 863.491,228.149 864.059,227.552 864.627,228.702 865.196,229.106 865.764,229.228 866.332,229.255 866.901,231.418 867.469,230.35 868.037,229.544 868.606,229.865 869.174,228.832 869.742,230.05 870.311,230.054 870.879,231.208 871.447,231.108 872.016,233.132 872.584,232.922 873.152,234.656 873.721,234.474 874.289,232.332 874.858,230.955 875.426,232 875.994,229.94 876.563,230.175 877.131,231.189 877.699,230.123 878.268,230.223 878.836,230.183 879.404,231.288 879.973,231.249 880.541,231.02 881.109,230.061 881.678,229.139 882.246,229.106 882.814,228.159 883.383,228.1 883.951,226.095 884.519,225.439 885.088,226.886 885.656,226.166 886.224,224.25 886.793,224.738 887.361,227.016 887.93,229.271 888.498,230.272 889.066,228.382 889.635,228.209 890.203,229.459 890.771,229.477 891.34,230.838 891.908,228.628 892.476,229.813 893.045,230.954 893.613,230.893 894.181,231.821 894.75,230.777 895.318,230.803 895.886,229.927 896.455,229.756 897.023,230.874 897.591,229.738 898.16,229.954 898.728,230.189 899.296,230.307 899.865,232.353 900.433,231.227 901.001,230.056 901.57,229.061 902.138,227.183 902.707,225.404 903.275,223.81 903.843,225.435 904.412,222.72 904.98,224.402 905.548,225.045 906.117,225.558 906.685,227.13 907.253,226.45 907.822,224.88 908.39,223.498 908.958,223.002 909.527,224.874 910.095,224.171 910.663,224.837 911.232,225.394 911.8,225.97 912.368,226.337 912.937,227.865 913.505,231.284 914.073,230.266 914.642,229.43 915.21,230.866 915.779,231.047 916.347,229.127 916.915,230.559 917.484,230.759 918.052,231.974 918.62,232.172 919.189,232.296 919.757,233.443 920.325,234.625 920.894,234.464 921.462,235.283 922.03,235.171 922.599,233.845 923.167,232.713 923.735,234.865 924.304,234.741 924.872,235.687 925.44,233.318 926.009,232.398 926.577,232.631 927.145,231.548 927.714,231.789 928.282,233.866 928.85,233.562 929.419,232.216 929.987,232.931 930.556,234.051 931.124,234.847 931.692,234.575 932.261,233.468 932.829,232.221 933.397,232.16 933.966,232.157 934.534,231.013 935.102,228.922 935.671,229.096 936.239,231.298 936.807,231.116 937.376,229.206 937.944,228.308 938.512,227.677 939.081,226.778 939.649,226.918 940.217,226.102 940.786,225.337 941.354,226.877 941.922,229.292 942.491,229.119 943.059,230.339 943.627,229.532 944.196,229.606 944.764,230.929 945.333,229.961 945.901,229.89 946.469,232.263 947.038,229.18 947.606,228.19 948.174,230.423 948.743,230.53 949.311,227.422 949.879,228.723 950.448,226.686 951.016,224.023 951.584,227.481 952.153,226.56 952.721,227.978 953.289,228.203 953.858,229.382 954.426,227.68 954.994,228.787 955.563,228.296 956.131,229.507 956.699,230.484 957.268,230.538 957.836,228.767 958.405,227.957 958.973,228.326 959.541,229.526 960.11,232.711 960.678,233.747 961.246,233.705 961.815,231.456 962.383,230.238 962.951,228.09 963.52,228.572 964.088,227.555 964.656,227.211 965.225,230.639 965.793,229.719 966.361,231.909 966.93,233.95 967.498,231.808 968.066,230.924 968.635,228.856 969.203,229.096 969.771,226.365 970.34,228.844 970.908,227.014 971.476,228.433 972.045,229.549 972.613,229.681 973.182,231.976 973.75,231.078 974.318,233.056 974.887,233.147 975.455,232.988 976.023,234.196 976.592,235.119 977.16,236.942 977.728,236.558 978.297,235.185 978.865,234.875 979.433,233.472 980.002,234.632 980.57,233.257 981.138,235.404 981.707,235.984 982.275,236.683 982.843,234.111 983.412,236.132 983.98,236.072 984.548,232.821 985.117,235.034 985.685,234.624 986.253,236.309 986.822,235.718 987.39,235.329 987.959,233.965 988.527,233.641 989.095,234.635 989.664,234.456 990.232,233.058 990.8,233.96 991.369,232.791 991.937,231.493 992.505,229.402 993.074,227.41 993.642,227.538 994.21,227.877 994.779,228.04 995.347,230.174 995.915,231.287 996.484,232.141 997.052,231.976 997.62,233.889 998.189,232.523 998.757,234.496 999.325,235.034 999.894,234.706 1000.46,234.119 1001.03,234.797 1001.6,233.353 1002.17,233.179 1002.74,230.728 1003.3,231.73 1003.87,232.697 1004.44,230.386 1005.01,230.392 1005.58,230.448 1006.15,232.273 1006.71,232.364 1007.28,234.163 1007.85,231.963 1008.42,231.651 1008.99,231.543 1009.56,229.549 1010.12,230.603 1010.69,231.645 1011.26,231.5 1011.83,230.178 1012.4,231.085 1012.97,229.764 1013.53,231.041 1014.1,230.814 1014.67,230.737 1015.24,232.619 1015.81,233.46 1016.38,233.035 1016.94,231.912 1017.51,232.624 1018.08,235.605 1018.65,237.143 1019.22,235.561 1019.79,234.951 1020.35,235.527 1020.92,234.806 1021.49,236.238 1022.06,236.819 1022.63,235.114 1023.2,235.665 1023.76,233.994 1024.33,233.51 1024.9,232.117 1025.47,232.686 1026.04,232.187 1026.61,229.805 1027.17,229.687 1027.74,229.736 1028.31,229.571 1028.88,228.282 1029.45,230.37 1030.02,231.344 1030.58,231.949 1031.15,230.639 1031.72,230.468 1032.29,230.172 1032.86,229.825 1033.43,229.81 1033.99,227.873 1034.56,227.934 1035.13,230.022 1035.7,228.813 1036.27,229.714 1036.84,229.673 1037.4,227.59 1037.97,226.608 1038.54,225.594 1039.11,224.993 1039.68,226.479 1040.25,226.813 1040.81,226.109 1041.38,223.154 1041.95,224.42 1042.52,224.572 1043.09,222.812 1043.66,222.141 1044.22,221.573 1044.79,221.994 1045.36,223.514 1045.93,225.095 1046.5,226.581 1047.07,226.925 1047.63,227.127 1048.2,229.379 1048.77,229.326 1049.34,226.335 1049.91,227.752 1050.48,226.811 1051.05,229.13 1051.61,229.962 1052.18,231.958 1052.75,231.88 1053.32,231.718 1053.89,233.589 1054.46,232.391 1055.02,233.22 1055.59,231.84 1056.16,231.764 1056.73,231.599 1057.3,230.314 1057.87,227.241 1058.43,226.375 1059,227.613 1059.57,229.012 1060.14,230.987 1060.71,230.8 1061.28,229.687 1061.84,233.753 1062.41,233.595 1062.98,231.311 1063.55,233.178 1064.12,232.175 1064.69,230.007 1065.25,230.202 1065.82,230.107 1066.39,229.044 1066.96,229.976 1067.53,229.004 1068.1,230.007 1068.66,231.065 1069.23,229.881 1069.8,232.857 1070.37,232.666 1070.94,233.498 1071.51,233.068 1072.07,233.033 1072.64,231.905 1073.21,231.748 1073.78,231.373 1074.35,231.225 1074.92,232.036 1075.48,232.597 1076.05,232.376 1076.62,232.16 1077.19,232.163 1077.76,232.877 1078.33,232.419 1078.89,232.053 1079.46,229.937 1080.03,226.771 1080.6,226.135 1081.17,224.947 1081.74,225.321 1082.3,227.812 1082.87,230.119 1083.44,230.024 1084.01,229.835 1084.58,231.82 1085.15,231.712 1085.71,231.607 1086.28,230.416 1086.85,230.52 1087.42,231.539 1087.99,230.481 1088.56,230.141 1089.12,227.966 1089.69,228.033 1090.26,228.191 1090.83,227.394 1091.4,227.738 1091.97,226.946 1092.53,227.011 1093.1,226.032 1093.67,228.361 1094.24,229.538 1094.81,230.587 1095.38,230.377 1095.94,229.231 1096.51,228.486 1097.08,229.43 1097.65,227.533 1098.22,228.249 1098.79,229.48 1099.35,229.28 1099.92,229.195 1100.49,232.411 1101.06,232.198 1101.63,230.898 1102.2,232.817 1102.76,230.473 1103.33,228.3 1103.9,229.438 1104.47,229.543 1105.04,227.537 1105.61,228.922 1106.17,230.306 1106.74,231.403 1107.31,231.473 1107.88,231.152 1108.45,231.836 1109.02,232.814 1109.58,231.674 1110.15,233.549 1110.72,233.186 1111.29,231.968 1111.86,232.728 1112.43,231.558 1112.99,230.413 1113.56,229.148 1114.13,229.244 1114.7,229.158 1115.27,227.987 1115.84,226.968 1116.4,226.153 1116.97,227.451 1117.54,226.728 1118.11,224.755 1118.68,224.012 1119.25,225.617 1119.81,228.936 1120.38,229.001 1120.95,229.958 1121.52,228.923 1122.09,230.07 1122.66,230.91 1123.23,231.737 1123.79,232.653 1124.36,233.426 1124.93,231.226 1125.5,231.159 1126.07,230.941 1126.64,229.87 1127.2,231.725 1127.77,230.451 1128.34,230.174 1128.91,231.002 1129.48,234.834 1130.05,234.41 1130.61,233.948 1131.18,231.351 1131.75,229.266 1132.32,226.286 1132.89,226.662 1133.46,224.86 1134.02,222.217 1134.59,223.872 1135.16,222.229 1135.73,221.774 1136.3,226.416 1136.87,225.627 1137.43,225.145 1138,225.435 1138.57,224.93 1139.14,227.436 1139.71,225.747 1140.28,224.095 1140.84,224.656 1141.41,225.069 1141.98,226.61 1142.55,224.787 1143.12,224.084 1143.69,225.555 1144.25,225.955 1144.82,226.321 1145.39,226.54 1145.96,228.185 1146.53,226.362 1147.1,227.645 1147.66,226.878 1148.23,228.123 1148.8,228.329 1149.37,227.558 1149.94,228.857 1150.51,226.081 1151.07,225.46 1151.64,226.917 1152.21,227.482 1152.78,229.973 1153.35,229.102 1153.92,230.423 1154.48,231.47 1155.05,232.494 1155.62,232.658 1156.19,233.735 1156.76,233.791 1157.33,234.669 1157.89,234.396 1158.46,233.302 1159.03,232.147 1159.6,233.045 1160.17,235.122 1160.74,235.854 1161.3,233.429 1161.87,233.144 1162.44,234.156 1163.01,232.778 1163.58,232.471 1164.15,233.176 1164.71,232.129 1165.28,233.12 1165.85,234.803 1166.42,234.632 1166.99,234.499 1167.56,234.135 1168.12,234.001 1168.69,234.693 1169.26,234.477 1169.83,235.084 1170.4,234.86 1170.97,233.732 1171.53,232.542 1172.1,232.538 1172.67,231.377 1173.24,234.5 1173.81,233.193 1174.38,233.209 1174.94,235.22 1175.51,234.662 1176.08,234.12 1176.65,233.75 1177.22,233.495 1177.79,233.236 1178.35,235.027 1178.92,236.734 1179.49,235.146 1180.06,234.869 1180.63,234.332 1181.2,234.077 1181.76,234.753 1182.33,233.437 1182.9,234.139 1183.47,234.535 1184.04,233.136 1184.61,231.941 1185.17,232.736 1185.74,231.651 1186.31,231.512 1186.88,233.611 1187.45,232.254 1188.02,233.102 1188.58,234.797 1189.15,234.253 1189.72,235.194 1190.29,235.588 1190.86,234.179 1191.43,234.001 1192,233.534 1192.56,235.228 1193.13,235.673 1193.7,235.359 1194.27,233.836 1194.84,233.427 1195.41,230.988 1195.97,230.696 1196.54,230.614 1197.11,231.488 1197.68,230.097 1198.25,227.841 1198.82,228.989 1199.38,231.079 1199.95,231.768 1200.52,232.118 1201.09,230.632 1201.66,229.338 1202.23,229.16 1202.79,229.098 1203.36,229.801 1203.93,229.732 1204.5,230.662 1205.07,228.472 1205.64,227.381 1206.2,229.489 1206.77,229.379 1207.34,228.275 1207.91,226.015 1208.48,224.778 1209.05,226.085 1209.61,227.097 1210.18,225.1 1210.75,224.299 1211.32,222.585 1211.89,220.789 1212.46,220.275 1213.02,220.822 1213.59,219.895 1214.16,220.468 1214.73,219.928 1215.3,222.603 1215.87,222.236 1216.43,221.661 1217,222.179 1217.57,223.634 1218.14,222.833 1218.71,224.525 1219.28,223.755 1219.84,224.435 1220.41,222.977 1220.98,221.435 1221.55,222.024 1222.12,222.724 1222.69,223.244 1223.25,222.846 1223.82,224.534 1224.39,226.058 1224.96,225.312 1225.53,224.626 1226.1,226.057 1226.66,226.348 1227.23,229.76 1227.8,226.933 1228.37,227.2 1228.94,228.554 1229.51,227.731 1230.07,227.029 1230.64,227.45 1231.21,226.812 1231.78,227.075 1232.35,226.577 1232.92,226.936 1233.48,227.628 1234.05,226.661 1234.62,226.152 1235.19,227.699 1235.76,226.976 1236.33,229.474 1236.89,228.723 1237.46,230.089 1238.03,231.42 1238.6,232.641 1239.17,232.465 1239.74,232.638 1240.3,232.768 1240.87,231.914 1241.44,229.983 1242.01,230.362 1242.58,229.425 1243.15,228.537 1243.71,229.725 1244.28,232.086 1244.85,232.202 1245.42,232.171 1245.99,232.244 1246.56,231.041 1247.12,230.208 1247.69,229.632 1248.26,229.93 1248.83,231.418 1249.4,231.505 1249.97,230.508 1250.53,231.64 1251.1,232.9 1251.67,230.799 1252.24,232.038 1252.81,231.773 1253.38,231.875 1253.94,233.015 1254.51,231.829 1255.08,230.909 1255.65,228.841 1256.22,232.094 1256.79,229.967 1257.35,234.024 1257.92,234.968 1258.49,232.596 1259.06,232.574 1259.63,232.577 1260.2,232.31 1260.76,233.265 1261.33,233.163 1261.9,231.978 1262.47,230.966 1263.04,231.185 1263.61,230.159 1264.18,229.377 1264.74,227.536 1265.31,226.681 1265.88,225.925 1266.45,226.058 1267.02,227.172 1267.59,228.541 1268.15,229.499 1268.72,230.614 1269.29,229.476 1269.86,227.488 1270.43,226.534 1271,224.583 1271.56,226.222 1272.13,227.612 1272.7,228.919 1273.27,232.287 1273.84,232.395 1274.41,232.16 1274.97,232.179 1275.54,231.372 1276.11,231.229 1276.68,234.232 1277.25,234.124 1277.82,233.965 1278.38,232.959 1278.95,233.879 1279.52,232.789 1280.09,235.933 1280.66,235.598 1281.23,234.061 1281.79,234.866 1282.36,234.554 1282.93,235.233 1283.5,233.758 1284.07,234.444 1284.64,233.05 1285.2,232.855 1285.77,232.533 1286.34,233.611 1286.91,235.206 1287.48,233.558 1288.05,230.45 1288.61,230.578 1289.18,231.624 1289.75,233.5 1290.32,233.182 1290.89,231.748 1291.46,232.591 1292.02,230.408 1292.59,231.478 1293.16,231.361 1293.73,230.309 1294.3,229.164 1294.87,228.187 1295.43,231.619 1296,232.409 1296.57,232.199 1297.14,231.901 1297.71,231.611 1298.28,232.482 1298.84,233.18 1299.41,233.875 1299.98,233.708 1300.55,234.46 1301.12,233.088 1301.69,232.039 1302.25,231.979 1302.82,232.036 1303.39,231.961 1303.96,231.972 1304.53,231.842 1305.1,231.567 1305.66,230.27 1306.23,232.176 1306.8,230.739 1307.37,231.616 1307.94,232.502 1308.51,231.342 1309.07,232.23 1309.64,231.055 1310.21,232.855 1310.78,234.484 1311.35,235.031 1311.92,235.395 1312.48,236.839 1313.05,236.323 1313.62,235.661 1314.19,234.253 1314.76,232.846 1315.33,231.492 1315.89,230.179 1316.46,230.134 1317.03,229.894 1317.6,228.844 1318.17,228.795 1318.74,231.857 1319.3,231.563 1319.87,227.281 1320.44,227.479 1321.01,226.651 1321.58,226.859 1322.15,226.925 1322.71,229.06 1323.28,227.837 1323.85,227.731 1324.42,227.016 1324.99,227.182 1325.56,227.504 1326.12,226.664 1326.69,227.026 1327.26,226.003 1327.83,228.215 1328.4,228.027 1328.97,228.179 1329.53,229.432 1330.1,230.256 1330.67,229.325 1331.24,228.589 1331.81,228.521 1332.38,229.56 1332.94,229.434 1333.51,229.652 1334.08,226.38 1334.65,226.72 1335.22,226.868 1335.79,227.132 1336.36,225.119 1336.92,225.363 1337.49,226.664 1338.06,226.83 1338.63,227.915 1339.2,228.01 1339.77,227.176 1340.33,226.044 1340.9,226.375 1341.47,226.822 1342.04,227.198 1342.61,226.138 1343.18,224.334 1343.74,225.795 1344.31,225.112 1344.88,225.419 1345.45,227.913 1346.02,225.039 1346.59,226.643 1347.15,227.953 1347.72,227.079 1348.29,226.496 1348.86,227.082 1349.43,228.67 1350,227.888 1350.56,230.124 1351.13,232.567 1351.7,234.536 1352.27,238.415 1352.84,238.008 1353.41,237.457 1353.97,236.898 1354.54,238.438 1355.11,238.955 1355.68,240.366 1356.25,239.478 1356.82,237.741 1357.38,236.003 1357.95,235.584 1358.52,237.356 1359.09,235.834 1359.66,235.546 1360.23,234.931 1360.79,234.7 1361.36,234.141 1361.93,230.686 1362.5,226.277 1363.07,229.731 1363.64,229.611 1364.2,227.673 1364.77,226.623 1365.34,226.783 1365.91,226.631 1366.48,225.755 1367.05,222.924 1367.61,222.522 1368.18,223.991 1368.75,222.51 1369.32,223.024 1369.89,222.48 1370.46,220.841 1371.02,221.48 1371.59,221.365 1372.16,225.248 1372.73,225.66 1373.3,227.386 1373.87,230.787 1374.43,227.774 1375,225.99 1375.57,226.615 1376.14,228.886 1376.71,229.963 1377.28,229.993 1377.84,230.183 1378.41,229.2 1378.98,228.09 1379.55,228.268 1380.12,228.393 1380.69,229.575 1381.25,229.578 1381.82,230.61 1382.39,230.61 1382.96,232.513 1383.53,234.413 1384.1,230.944 1384.66,231.239 1385.23,231.424 1385.8,229.202 1386.37,233.264 1386.94,233.055 1387.51,233.886 1388.07,232.512 1388.64,232.355 1389.21,233.161 1389.78,234.969 1390.35,236.577 1390.92,236.845 1391.48,235.235 1392.05,231.611 1392.62,232.606 1393.19,236.54 1393.76,236.16 1394.33,237.826 1394.89,237.257 1395.46,235.588 1396.03,235.164 1396.6,234.974 1397.17,232.547 1397.74,232.06 1398.3,230.634 1398.87,231.71 1399.44,229.48 1400.01,229.42 1400.58,227.403 1401.15,225.323 1401.71,225.624 1402.28,223.751 1402.85,223.277 1403.42,225.91 1403.99,225.218 1404.56,225.614 1405.13,227.866 1405.69,228.899 1406.26,233.136 1406.83,233.602 1407.4,233.297 1407.97,231.909 1408.54,230.691 1409.1,229.565 1409.67,230.484 1410.24,230.327 1410.81,228.29 1411.38,225.416 1411.95,224.754 1412.51,222.145 1413.08,221.689 1413.65,224.252 1414.22,223.545 1414.79,224.153 1415.36,226.778 1415.92,226.331 1416.49,224.51 1417.06,227.758 1417.63,225.969 1418.2,226.13 1418.77,226.449 1419.33,225.752 1419.9,228.093 1420.47,227.42 1421.04,228.556 1421.61,228.66 1422.18,227.797 1422.74,226.175 1423.31,224.443 1423.88,224.799 1424.45,224.36 1425.02,223.993 1425.59,224.596 1426.15,225.064 1426.72,226.365 1427.29,225.809 1427.86,228.083 1428.43,229.347 1429,229.584 1429.56,231.823 1430.13,231.462 1430.7,229.342 1431.27,229.425 1431.84,227.678 1432.41,227.903 1432.97,228.073 1433.54,227.338 1434.11,228.651 1434.68,229.882 1435.25,229.168 1435.82,229.309 1436.38,230.586 1436.95,230.661 1437.52,232.523 1438.09,232.627 1438.66,233.479 1439.23,234.411 1439.79,235.161 1440.36,234.769 1440.93,235.531 1441.5,233.185 1442.07,230.826 1442.64,231.73 1443.2,228.628 1443.77,230.964 1444.34,229.918 1444.91,229.152 1445.48,229.506 1446.05,229.729 1446.61,228.82 1447.18,228.876 1447.75,229.091 1448.32,230.267 1448.89,229.456 1449.46,230.8 1450.02,229.731 1450.59,229.079 1451.16,231.296 1451.73,232.135 1452.3,233.072 1452.87,234.175 1453.43,234.863 1454,233.606 1454.57,232.401 1455.14,234.384 1455.71,236.274 1456.28,236.825 1456.84,238.614 1457.41,239.035 1457.98,238.355 1458.55,237.671 1459.12,236.064 1459.69,232.62 1460.25,232.518 1460.82,231.175 1461.39,233.18 1461.96,230.924 1462.53,231.939 1463.1,231.889 1463.66,232.047 1464.23,230.98 1464.8,229.684 1465.37,229.816 1465.94,229.946 1466.51,228.602 1467.07,228.372 1467.64,230.548 1468.21,231.319 1468.78,231.337 1469.35,232.258 1469.92,232.499 1470.48,234.235 1471.05,233.828 1471.62,233.524 1472.19,234.336 1472.76,233.844 1473.33,231.451 1473.89,231.379 1474.46,232.349 1475.03,233.294 1475.6,231.138 1476.17,231.002 1476.74,229.819 1477.31,229.624 1477.87,228.629 1478.44,226.797 1479.01,227.98 1479.58,230.181 1480.15,230.044 1480.72,231.11 1481.28,231.964 1481.85,234.035 1482.42,233.495 1482.99,236.329 1483.56,235.944 1484.13,234.455 1484.69,236.063 1485.26,236.422 1485.83,235.825 1486.4,234.265 1486.97,232.84 1487.54,231.426 1488.1,231.297 1488.67,230.872 1489.24,230.691 1489.81,231.578 1490.38,230.466 1490.95,230.581 1491.51,230.456 1492.08,231.237 1492.65,230.299 1493.22,230.219 1493.79,231.911 1494.36,231.76 1494.92,231.569 1495.49,232.397 1496.06,233.201 1496.63,231.791 1497.2,231.399 1497.77,231.109 1498.33,230.74 1498.9,229.501 1499.47,229.457 1500.04,231.276 1500.61,231.229 1501.18,232.018 1501.74,231.56 1502.31,231.285 1502.88,232.05 1503.45,233.898 1504.02,232.41 1504.59,232.096 1505.15,233.84 1505.72,233.521 1506.29,234.147 1506.86,234.529 1507.43,232.866 1508,231.418 1508.56,230.058 1509.13,230.015 1509.7,226.937 1510.27,227.12 1510.84,228.298 1511.41,227.218 1511.97,227.013 1512.54,228.1 1513.11,226.015 1513.68,225.051 1514.25,227.375 1514.82,226.298 1515.38,226.482 1515.95,230.9 1516.52,231.635 1517.09,229.202 1517.66,228.299 1518.23,228.136 1518.79,228.105 1519.36,230.027 1519.93,228.877 1520.5,227.731 1521.07,229.94 1521.64,231.682 1522.2,231.437 1522.77,231.193 1523.34,229.221 1523.91,228.098 1524.48,226.851 1525.05,227.011 1525.61,227.047 1526.18,227.366 1526.75,227.25 1527.32,228.338 1527.89,226.332 1528.46,226.361 1529.02,227.527 1529.59,227.619 1530.16,226.69 1530.73,225.694 1531.3,226.771 1531.87,227.936 1532.43,226.991 1533,227.246 1533.57,227.453 1534.14,228.597 1534.71,229.514 1535.28,230.616 1535.84,230.535 1536.41,230.337 1536.98,232.439 1537.55,232.165 1538.12,232.167 1538.69,232.157 1539.25,232.08 1539.82,230.807 1540.39,230.762 1540.96,230.672 1541.53,231.548 1542.1,233.539 1542.66,234.193 1543.23,233.676 1543.8,233.373 1544.37,233.217 1544.94,232.775 1545.51,231.323 1546.08,232.027 1546.64,231.702 1547.21,231.563 1547.78,228.087 1548.35,226.015 1548.92,226.146 1549.49,226.301 1550.05,228.405 1550.62,226.097 1551.19,225.328 1551.76,225.543 1552.33,225.726 1552.9,227.08 1553.46,226.227 1554.03,226.334 1554.6,224.667 1555.17,224.935 1555.74,224.305 1556.31,224.82 1556.87,228.6 1557.44,228.819 1558.01,228.64 1558.58,229.538 1559.15,229.587 1559.72,230.644 1560.28,229.492 1560.85,229.482 1561.42,228.246 1561.99,229.413 1562.56,228.343 1563.13,230.474 1563.69,228.431 1564.26,230.666 1564.83,230.652 1565.4,228.524 1565.97,228.632 1566.54,228.747 1567.1,226.773 1567.67,230.036 1568.24,231.035 1568.81,227.822 1569.38,226.861 1569.95,227.136 1570.51,225.256 1571.08,225.48 1571.65,226.403 1572.22,226.786 1572.79,225.936 1573.36,225.288 1573.92,226.64 1574.49,227.988 1575.06,228.278 1575.63,228.695 1576.2,231.843 1576.77,231.567 1577.33,232.63 1577.9,232.545 1578.47,233.522 1579.04,233.302 1579.61,232.141 1580.18,231.814 1580.74,232.674 1581.31,233.611 1581.88,232.155 1582.45,233.089 1583.02,232.993 1583.59,231.814 1584.15,232.49 1584.72,233.297 1585.29,234.251 1585.86,234.883 1586.43,233.375 1587,232.081 1587.56,231.789 1588.13,232.598 1588.7,233.426 1589.27,235.105 1589.84,234.021 1590.41,233.603 1590.97,234.31 1591.54,232.747 1592.11,230.491 1592.68,230.316 1593.25,229.322 1593.82,229.249 1594.38,230.664 1594.95,230.65 1595.52,230.733 1596.09,229.567 1596.66,230.612 1597.23,230.716 1597.79,226.315 1598.36,226.735 1598.93,227 1599.5,226.125 1600.07,225.309 1600.64,223.56 1601.2,223.907 1601.77,226.304 1602.34,227.67 1602.91,227.595 1603.48,227.88 1604.05,228.05 1604.61,228.156 1605.18,228.358 1605.75,227.348 1606.32,226.709 1606.89,228.118 1607.46,230.323 1608.02,231.361 1608.59,230.272 1609.16,229.141 1609.73,228.176 1610.3,228.23 1610.87,228.731 1611.43,228.029 1612,226.088 1612.57,226.337 1613.14,227.825 1613.71,227.753 1614.28,225.859 1614.84,225.974 1615.41,227.251 1615.98,227.689 1616.55,227.038 1617.12,227.252 1617.69,225.637 1618.26,226.081 1618.82,225.078 1619.39,225.552 1619.96,224.546 1620.53,227.182 1621.1,230.582 1621.67,230.835 1622.23,229.901 1622.8,230.979 1623.37,231.169 1623.94,230.957 1624.51,231.893 1625.08,231.869 1625.64,229.815 1626.21,231.955 1626.78,231.901 1627.35,230.908 1627.92,231.022 1628.49,232.17 1629.05,232.039 1629.62,231.834 1630.19,232.968 1630.76,232.76 1631.33,231.662 1631.9,230.788 1632.46,230.913 1633.03,229.914 1633.6,232.032 1634.17,230.878 1634.74,231.929 1635.31,229.855 1635.87,229.945 1636.44,228.789 1637.01,228.868 1637.58,226.974 1638.15,225.203 1638.72,225.47 1639.28,225.149 1639.85,224.56 1640.42,225.995 1640.99,226.422 1641.56,225.839 1642.13,224.327 1642.69,225.865 1643.26,227.231 1643.83,227.61 1644.4,229.816 1644.97,231.244 1645.54,229.256 1646.1,229.383 1646.67,231.649 1647.24,232.745 1647.81,231.707 1648.38,233.956 1648.95,233.845 1649.51,234.649 1650.08,232.463 1650.65,232.524 1651.22,233.387 1651.79,233.459 1652.36,233.266 1652.92,231.975 1653.49,231.849 1654.06,232.616 1654.63,232.529 1655.2,232.214 1655.77,231.284 1656.33,231.18 1656.9,230.916 1657.47,233.834 1658.04,235.534 1658.61,236.217 1659.18,236.114 1659.74,234.532 1660.31,235.067 1660.88,233.827 1661.45,233.327 1662.02,233.034 1662.59,230.826 1663.15,230.74 1663.72,230.71 1664.29,231.711 1664.86,230.439 1665.43,234.516 1666,235.352 1666.56,236.022 1667.13,232.48 1667.7,233.294 1668.27,232.913 1668.84,230.324 1669.41,230.044 1669.97,228.05 1670.54,230.193 1671.11,229.358 1671.68,230.55 1672.25,227.385 1672.82,229.672 1673.38,230.786 1673.95,228.714 1674.52,227.816 1675.09,227.794 1675.66,228.967 1676.23,229.14 1676.79,229.318 1677.36,228.256 1677.93,227.368 1678.5,227.63 1679.07,226.911 1679.64,228.253 1680.2,226.2 1680.77,226.637 1681.34,228.08 1681.91,229.207 1682.48,229.257 1683.05,228.281 1683.61,227.32 1684.18,224.448 1684.75,224.735 1685.32,227.365 1685.89,228.596 1686.46,228.735 1687.02,228.664 1687.59,229.882 1688.16,228.75 1688.73,228.774 1689.3,230.755 1689.87,229.625 1690.44,228.6 1691,231.849 1691.57,232.077 1692.14,233.043 1692.71,234.951 1693.28,233.586 1693.85,233.189 1694.41,232.976 1694.98,232.795 1695.55,233.629 1696.12,233.285 1696.69,231.965 1697.26,232.034 1697.82,232.13 1698.39,232.091 1698.96,234.173 1699.53,232.823 1700.1,234.553 1700.67,233.256 1701.23,233.117 1701.8,234.627 1702.37,233.336 1702.94,235.134 1703.51,231.539 1704.08,231.385 1704.64,230.273 1705.21,230.39 1705.78,228.265 1706.35,228.374 1706.92,227.531 1707.49,227.914 1708.05,226.983 1708.62,228.291 1709.19,228.486 1709.76,229.601 1710.33,229.554 1710.9,228.324 1711.46,226.304 1712.03,226.683 1712.6,226.87 1713.17,226.051 1713.74,224.358 1714.31,225.651 1714.87,226.04 1715.44,226.407 1716.01,225.921 1716.58,225.375 1717.15,225.796 1717.72,224.199 1718.28,222.555 1718.85,220.078 1719.42,222.726 1719.99,221.204 1720.56,222.131 1721.13,222.934 1721.69,225.604 1722.26,226.159 1722.83,226.553 1723.4,228.077 1723.97,229.425 1724.54,231.589 1725.1,231.638 1725.67,231.791 1726.24,231.617 1726.81,232.684 1727.38,231.546 1727.95,231.506 1728.51,231.428 1729.08,231.469 1729.65,232.743 1730.22,232.589 1730.79,235.782 1731.36,234.377 1731.92,230.227 1732.49,231.565 1733.06,230.578 1733.63,231.624 1734.2,234.649 1734.77,232.67 1735.33,230.501 1735.9,230.39 1736.47,230.37 1737.04,228.327 1737.61,227.624 1738.18,229.888 1738.74,232.997 1739.31,230.574 1739.88,231.6 1740.45,234.512 1741.02,235.38 1741.59,235.995 1742.15,233.493 1742.72,231.221 1743.29,231.189 1743.86,232.161 1744.43,231.988 1745,232.048 1745.56,232.955 1746.13,234.498 1746.7,235.819 1747.27,235.373 1747.84,234.064 1748.41,234.817 1748.97,235.58 1749.54,236.107 1750.11,235.624 1750.68,236.438 1751.25,234.936 1751.82,231.429 1752.38,232.194 1752.95,231.743 1753.52,228.658 1754.09,228.751 1754.66,227.648 1755.23,225.954 1755.79,226.162 1756.36,227.599 1756.93,229.057 1757.5,228.857 1758.07,226.996 1758.64,227.13 1759.21,225.178 1759.77,225.284 1760.34,225.459 1760.91,223.678 1761.48,223.015 1762.05,224.518 1762.62,225.039 1763.18,225.132 1763.75,224.551 1764.32,225.102 1764.89,226.569 1765.46,228.071 1766.03,228.148 1766.59,228.378 1767.16,228.771 1767.73,226.912 1768.3,226.126 1768.87,225.511 1769.44,227.939 1770,232.382 1770.57,231.293 1771.14,232.343 1771.71,233.31 1772.28,232.18 1772.85,231.971 1773.41,230.825 1773.98,231.051 1774.55,231.846 1775.12,230.775 1775.69,231.978 1776.26,229.858 1776.82,230.042 1777.39,231.973 1777.96,230.742 1778.53,230.058 1779.1,225.713 1779.67,229.368 1780.23,227.448 1780.8,228.66 1781.37,229.572 1781.94,227.7 1782.51,230.872 1783.08,232.014 1783.64,231.829 1784.21,232.821 1784.78,231.44 1785.35,231.255 1785.92,231.09 1786.49,232.068 1787.05,233.309 1787.62,233.117 1788.19,233.098 1788.76,231.892 1789.33,230.835 1789.9,232.017 1790.46,231.907 1791.03,230.818 1791.6,232.588 1792.17,236.476 1792.74,235.908 1793.31,235.39 1793.87,234.028 1794.44,233.805 1795.01,233.791 1795.58,235.768 1796.15,236.371 1796.72,235.992 1797.28,234.671 1797.85,233.14 1798.42,234.804 1798.99,235.63 1799.56,235.383 1800.13,234.706 1800.69,235.24 1801.26,234.842 1801.83,233.444 1802.4,232.273 1802.97,229.893 1803.54,228.791 1804.1,229.731 1804.67,228.582 1805.24,229.643 1805.81,228.448 1806.38,226.67 1806.95,226.872 1807.51,228.164 1808.08,229.274 1808.65,228.267 1809.22,228.482 1809.79,228.738 1810.36,226.803 1810.92,226.162 1811.49,221.405 1812.06,221.906 1812.63,224.492 1813.2,224.723 1813.77,225.037 1814.33,227.481 1814.9,227.592 1815.47,229.685 1816.04,229.459 1816.61,229.417 1817.18,228.516 1817.74,230.744 1818.31,231.75 1818.88,230.505 1819.45,232.358 1820.02,231.162 1820.59,232.149 1821.15,230.097 1821.72,231.235 1822.29,231.068 1822.86,232.085 1823.43,230.776 1824,229.43 1824.56,228.324 1825.13,229.273 1825.7,228.437 1826.27,228.722 1826.84,228.684 1827.41,229.743 1827.97,226.608 1828.54,226.738 1829.11,225.583 1829.68,224.854 1830.25,227.323 1830.82,227.411 1831.39,225.662 1831.95,224.034 1832.52,223.501 1833.09,222.023 1833.66,221.648 1834.23,223.287 1834.8,224.77 1835.36,225.23 1835.93,225.685 1836.5,229.091 1837.07,230.155 1837.64,230.337 1838.21,231.467 1838.77,229.376 1839.34,230.472 1839.91,230.556 1840.48,231.311 1841.05,229.995 1841.62,231.069 1842.18,229.048 1842.75,230.351 1843.32,230.438 1843.89,232.385 1844.46,231.29 1845.03,231.393 1845.59,234.455 1846.16,233.433 1846.73,232.29 1847.3,231.373 1847.87,233.326 1848.44,233.077 1849,232.903 1849.57,233.922 1850.14,235.724 1850.71,236.291 1851.28,238.845 1851.85,239.184 1852.41,237.442 1852.98,238.047 1853.55,236.578 1854.12,230.966 1854.69,229.689 1855.26,228.494 1855.82,227.444 1856.39,228.687 1856.96,230.853 1857.53,229.983 1858.1,231.159 1858.67,228.009 1859.23,229.231 1859.8,230.291 1860.37,231.232 1860.94,230.825 1861.51,230.811 1862.08,232.64 1862.64,231.404 1863.21,232.205 1863.78,230.082 1864.35,229.08 1864.92,227.225 1865.49,227.544 1866.05,229.703 1866.62,230.609 1867.19,230.569 1867.76,231.611 1868.33,230.371 1868.9,230.215 1869.46,231.315 1870.03,229.979 1870.6,229.854 1871.17,228.921 1871.74,226.705 1872.31,229.021 1872.87,229.412 1873.44,230.44 1874.01,231.433 1874.58,231.353 1875.15,228.071 1875.72,226.24 1876.28,225.537 1876.85,227.127 1877.42,229.232 1877.99,229.325 1878.56,230.563 1879.13,230.521 1879.69,229.255 1880.26,230.393 1880.83,231.316 1881.4,232.29 1881.97,230.91 1882.54,229.916 1883.1,229.983 1883.67,232.117 1884.24,231.908 1884.81,232.673 1885.38,232.303 1885.95,230.222 1886.51,230.34 1887.08,230.19 1887.65,231.187 1888.22,231.98 1888.79,232.076 1889.36,231.979 1889.92,230.535 1890.49,232.635 1891.06,231.487 1891.63,231.29 1892.2,230.217 1892.77,228.02 1893.33,230.185 1893.9,229.079 1894.47,230.295 1895.04,231.428 1895.61,232.242 1896.18,232.135 1896.74,230.204 1897.31,232.166 1897.88,231.996 1898.45,232.847 1899.02,228.471 1899.59,228.642 1900.16,228.695 1900.72,228.938 1901.29,228.162 1901.86,227.358 1902.43,227.531 1903,225.687 1903.57,225.126 1904.13,226.766 1904.7,226.217 1905.27,226.449 1905.84,226.539 1906.41,227.77 1906.98,226.923 1907.54,227.02 1908.11,228.046 1908.68,228.26 1909.25,231.55 1909.82,230.401 1910.39,229.539 1910.95,230.598 1911.52,231.444 1912.09,232.049 1912.66,233.085 1913.23,231.828 1913.8,230.653 1914.36,230.375 1914.93,230.323 1915.5,229.352 1916.07,228.118 1916.64,228.237 1917.21,229.387 1917.77,231.532 1918.34,231.421 1918.91,231.295 1919.48,231.13 1920.05,228.942 1920.62,232.295 1921.18,231.98 1921.75,231.945 1922.32,231.748 1922.89,230.593 1923.46,230.61 1924.03,229.474 1924.59,229.369 1925.16,229.465 1925.73,229.407 1926.3,229.528 1926.87,229.694 1927.44,229.574 1928,230.51 1928.57,228.258 1929.14,227.31 1929.71,225.357 1930.28,224.813 1930.85,225.264 1931.41,223.497 1931.98,226.151 1932.55,227.521 1933.12,227.805 1933.69,226.922 1934.26,226.323 1934.82,226.571 1935.39,226.723 1935.96,227.175 1936.53,224.513 1937.1,225.107 1937.67,226.588 1938.23,226.776 1938.8,226.15 1939.37,225.539 1939.94,227.788 1940.51,229.139 1941.08,228.195 1941.64,228.4 1942.21,229.773 1942.78,231.174 1943.35,231.192 1943.92,232.246 1944.49,232.239 1945.05,235.349 1945.62,235.112 1946.19,235.933 1946.76,236.575 1947.33,235.057 1947.9,234.671 1948.46,234.369 1949.03,235.098 1949.6,235.638 1950.17,236.442 1950.74,237.021 1951.31,238.756 1951.87,237.122 1952.44,235.579 1953.01,236.199 1953.58,230.639 1954.15,231.713 1954.72,232.628 1955.28,232.424 1955.85,232.132 1956.42,231.886 1956.99,232.751 1957.56,233.705 1958.13,234.44 1958.69,233.728 1959.26,232.433 1959.83,232.297 1960.4,230.99 1960.97,229.751 1961.54,228.737 1962.1,228.013 1962.67,228.104 1963.24,228.318 1963.81,228.531 1964.38,228.822 1964.95,228.825 1965.51,226.845 1966.08,230.11 1966.65,228.061 1967.22,228.147 1967.79,228.208 1968.36,228.255 1968.92,230.358 1969.49,229.187 1970.06,227.299 1970.63,228.344 1971.2,228.547 1971.77,228.831 1972.34,229.013 1972.9,230.229 1973.47,230.327 1974.04,231.312 1974.61,230.301 1975.18,230.149 1975.75,229.248 1976.31,230.248 1976.88,230.347 1977.45,229.33 1978.02,232.606 1978.59,232.483 1979.16,233.334 1979.72,232.931 1980.29,231.604 1980.86,234.283 1981.43,234.974 1982,235.62 1982.57,236.172 1983.13,237.732 1983.7,236.007 1984.27,236.552 1984.84,235.102 1985.41,232.488 1985.98,230.843 1986.54,229.746 1987.11,231.737 1987.68,233.54 1988.25,232.326 1988.82,231.981 1989.39,230.562 1989.95,230.335 1990.52,231.517 1991.09,231.457 1991.66,232.286 1992.23,231.893 1992.8,231.618 1993.36,231.335 1993.93,232.21 1994.5,229.847 1995.07,228.492 1995.64,228.49 1996.21,229.468 1996.77,230.176 1997.34,228.031 1997.91,227.057 1998.48,227.129 1999.05,226.847 1999.62,226.003 2000.18,226.406 2000.75,227.516 2001.32,226.746 2001.89,229.979 2002.46,225.75 2003.03,223.029 2003.59,224.257 2004.16,225.772 2004.73,226.104 2005.3,225.317 2005.87,225.597 2006.44,224.664 2007,223.049 2007.57,222.553 2008.14,225.203 2008.71,228.638 2009.28,227.893 2009.85,227.079 2010.41,228.566 2010.98,227.914 2011.55,228.198 2012.12,230.439 2012.69,229.447 2013.26,230.397 2013.82,229.323 2014.39,228.528 2014.96,228.664 2015.53,227.639 2016.1,229.049 2016.67,230.041 2017.23,229.103 2017.8,227.048 2018.37,228.534 2018.94,228.97 2019.51,228.864 2020.08,227.8 2020.64,228.995 2021.21,230.198 2021.78,231.438 2022.35,233.655 2022.92,229.505 2023.49,229.503 2024.05,228.31 2024.62,230.699 2025.19,229.623 2025.76,228.658 2026.33,230.951 2026.9,231.182 2027.46,232.085 2028.03,231.063 2028.6,230.002 2029.17,231.176 2029.74,230.326 2030.31,232.263 2030.87,232.015 2031.44,232.752 2032.01,231.325 2032.58,228.252 2033.15,227.343 2033.72,227.572 2034.28,227.854 2034.85,227.966 2035.42,227.13 2035.99,224.177 2036.56,225.777 2037.13,229.069 2037.69,230.036 2038.26,229.83 2038.83,229.728 2039.4,228.84 2039.97,227.037 2040.54,225.368 2041.11,225.617 2041.67,227.137 2042.24,226.384 2042.81,226.652 2043.38,226.908 2043.95,227.212 2044.52,225.476 2045.08,224.646 2045.65,225.095 2046.22,225.416 2046.79,230.084 2047.36,228.276 2047.93,230.402 2048.49,228.457 2049.06,227.768 2049.63,227.045 2050.2,228.427 2050.77,227.674 2051.34,227.934 2051.9,225.095 2052.47,227.518 2053.04,228.752 2053.61,232.978 2054.18,233.058 2054.75,235.068 2055.31,232.992 2055.88,231.744 2056.45,232.901 2057.02,232.822 2057.59,234.745 2058.16,234.49 2058.72,235.305 2059.29,236.168 2059.86,236.781 2060.43,237.299 2061,237.849 2061.57,237.438 2062.13,237.859 2062.7,239.17 2063.27,237.514 2063.84,238.068 2064.41,236.503 2064.98,235.88 2065.54,232.33 2066.11,233.157 2066.68,237.074 2067.25,236.39 2067.82,237.154 2068.39,237.589 2068.95,235.981 2069.52,235.307 2070.09,234.836 2070.66,235.407 2071.23,234.99 2071.8,235.761 2072.36,234.094 2072.93,230.572 2073.5,230.333 2074.07,234.28 2074.64,233.802 2075.21,235.48 2075.77,234.067 2076.34,235.727 2076.91,236.036 2077.48,231.198 2078.05,231.246 2078.62,229.792 2079.18,227.661 2079.75,226.65 2080.32,228.791 2080.89,229.679 2081.46,227.479 2082.03,227.464 2082.59,225.474 2083.16,225.596 2083.73,225.939 2084.3,222.9 2084.87,223.336 2085.44,223.679 2086,224.885 2086.57,224.13 2087.14,224.415 2087.71,225.906 2088.28,226.436 2088.85,226.886 2089.41,225.986 2089.98,225.248 2090.55,225.586 2091.12,228.002 2091.69,228.118 2092.26,231.305 2092.82,231.125 2093.39,233.037 2093.96,232.952 2094.53,232.708 2095.1,231.541 2095.67,231.525 2096.23,235.536 2096.8,235.171 2097.37,233.562 2097.94,234.049 2098.51,232.381 2099.08,234.205 2099.64,235.639 2100.21,236.139 2100.78,233.325 2101.35,234.037 2101.92,234.739 2102.49,233.44 2103.05,232.148 2103.62,231.836 2104.19,231.71 2104.76,232.77 2105.33,231.602 2105.9,230.283 2106.46,228.978 2107.03,229.078 2107.6,228.042 2108.17,227.926 2108.74,227.009 2109.31,229.225 2109.87,230.301 2110.44,230.066 2111.01,227.785 2111.58,228.851 2112.15,230.011 2112.72,231.128 2113.29,229.686 2113.85,229.734 2114.42,227.643 2114.99,228.662 2115.56,226.468 2116.13,225.558 2116.7,227.024 2117.26,227.947 2117.83,228.94 2118.4,227.805 2118.97,226.892 2119.54,227.271 2120.11,228.388 2120.67,228.353 2121.24,228.707 2121.81,227.777 2122.38,229.901 2122.95,229.663 2123.52,230.561 2124.08,230.587 2124.65,230.66 2125.22,229.295 2125.79,229.312 2126.36,228.268 2126.93,228.43 2127.49,228.655 2128.06,227.638 2128.63,226.554 2129.2,226.799 2129.77,225.877 2130.34,227.267 2130.9,227.777 2131.47,227.897 2132.04,227.012 2132.61,228.292 2133.18,229.641 2133.75,231.79 2134.31,231.604 2134.88,228.426 2135.45,229.702 2136.02,231.72 2136.59,229.573 2137.16,228.326 2137.72,230.583 2138.29,230.635 2138.86,231.715 2139.43,229.421 2140,228.163 2140.57,230.378 2141.13,229.482 2141.7,224.457 2142.27,227.928 2142.84,228.08 2143.41,230.365 2143.98,230.583 2144.54,230.539 2145.11,231.336 2145.68,230.274 2146.25,228.316 2146.82,227.39 2147.39,227.568 2147.95,228.833 2148.52,230.161 2149.09,230.36 2149.66,230.322 2150.23,230.354 2150.8,230.302 2151.36,229.455 2151.93,229.575 2152.5,229.695 2153.07,230.589 2153.64,230.513 2154.21,229.48 2154.77,228.556 2155.34,227.864 2155.91,228.245 2156.48,228.231 2157.05,226.167 2157.62,226.441 2158.18,225.777 2158.75,226.142 2159.32,226.313 2159.89,227.637 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip060)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip060)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip060)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip060)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.024\n  with uncertainty of ± 0.0021477375225830613\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01529 ± (0.00214622, 0.0021487) (MC)\n  95% confidence interval: [-4.01939, -4.01131]) (MC)\n  linear error propagation: -4.01524 ± 0.00212641\n  |δ_y| = |0.00153962| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.01528857105364, val_l = 0.00410539956185918, val_u = 0.003974687169186808)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip090\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip090)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip091\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip090)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip092\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1133.05 2211.02,1133.05 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,939.428 2211.02,939.428 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,745.803 2211.02,745.803 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,552.177 2211.02,552.177 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,358.552 2211.02,358.552 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1133.05 365.751,1133.05 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,939.428 365.751,939.428 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,745.803 365.751,745.803 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,552.177 365.751,552.177 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,358.552 365.751,358.552 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M298.909 1118.85 Q295.298 1118.85 293.469 1122.42 Q291.664 1125.96 291.664 1133.09 Q291.664 1140.19 293.469 1143.76 Q295.298 1147.3 298.909 1147.3 Q302.543 1147.3 304.349 1143.76 Q306.177 1140.19 306.177 1133.09 Q306.177 1125.96 304.349 1122.42 Q302.543 1118.85 298.909 1118.85 M298.909 1115.15 Q304.719 1115.15 307.775 1119.76 Q310.853 1124.34 310.853 1133.09 Q310.853 1141.82 307.775 1146.42 Q304.719 1151 298.909 1151 Q293.099 1151 290.02 1146.42 Q286.964 1141.82 286.964 1133.09 Q286.964 1124.34 290.02 1119.76 Q293.099 1115.15 298.909 1115.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M259.557 952.773 L267.196 952.773 L267.196 926.407 L258.886 928.074 L258.886 923.815 L267.15 922.148 L271.826 922.148 L271.826 952.773 L279.465 952.773 L279.465 956.708 L259.557 956.708 L259.557 952.773 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 925.227 Q295.298 925.227 293.469 928.792 Q291.664 932.333 291.664 939.463 Q291.664 946.569 293.469 950.134 Q295.298 953.676 298.909 953.676 Q302.543 953.676 304.349 950.134 Q306.177 946.569 306.177 939.463 Q306.177 932.333 304.349 928.792 Q302.543 925.227 298.909 925.227 M298.909 921.523 Q304.719 921.523 307.775 926.13 Q310.853 930.713 310.853 939.463 Q310.853 948.19 307.775 952.796 Q304.719 957.379 298.909 957.379 Q293.099 957.379 290.02 952.796 Q286.964 948.19 286.964 939.463 Q286.964 930.713 290.02 926.13 Q293.099 921.523 298.909 921.523 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M262.775 759.148 L279.094 759.148 L279.094 763.083 L257.15 763.083 L257.15 759.148 Q259.812 756.393 264.395 751.763 Q269.002 747.111 270.182 745.768 Q272.428 743.245 273.307 741.509 Q274.21 739.75 274.21 738.06 Q274.21 735.305 272.266 733.569 Q270.344 731.833 267.242 731.833 Q265.043 731.833 262.59 732.597 Q260.159 733.361 257.381 734.912 L257.381 730.189 Q260.205 729.055 262.659 728.477 Q265.113 727.898 267.15 727.898 Q272.52 727.898 275.715 730.583 Q278.909 733.268 278.909 737.759 Q278.909 739.888 278.099 741.81 Q277.312 743.708 275.205 746.3 Q274.627 746.972 271.525 750.189 Q268.423 753.384 262.775 759.148 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 731.602 Q295.298 731.602 293.469 735.166 Q291.664 738.708 291.664 745.838 Q291.664 752.944 293.469 756.509 Q295.298 760.05 298.909 760.05 Q302.543 760.05 304.349 756.509 Q306.177 752.944 306.177 745.838 Q306.177 738.708 304.349 735.166 Q302.543 731.602 298.909 731.602 M298.909 727.898 Q304.719 727.898 307.775 732.504 Q310.853 737.088 310.853 745.838 Q310.853 754.564 307.775 759.171 Q304.719 763.754 298.909 763.754 Q293.099 763.754 290.02 759.171 Q286.964 754.564 286.964 745.838 Q286.964 737.088 290.02 732.504 Q293.099 727.898 298.909 727.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M272.914 550.823 Q276.27 551.541 278.145 553.809 Q280.043 556.078 280.043 559.411 Q280.043 564.527 276.525 567.328 Q273.006 570.129 266.525 570.129 Q264.349 570.129 262.034 569.689 Q259.742 569.272 257.289 568.416 L257.289 563.902 Q259.233 565.036 261.548 565.615 Q263.863 566.194 266.386 566.194 Q270.784 566.194 273.076 564.457 Q275.39 562.721 275.39 559.411 Q275.39 556.356 273.238 554.643 Q271.108 552.907 267.289 552.907 L263.261 552.907 L263.261 549.064 L267.474 549.064 Q270.923 549.064 272.752 547.698 Q274.58 546.309 274.58 543.717 Q274.58 541.055 272.682 539.643 Q270.807 538.208 267.289 538.208 Q265.367 538.208 263.168 538.624 Q260.969 539.041 258.33 539.921 L258.33 535.754 Q260.992 535.013 263.307 534.643 Q265.645 534.272 267.705 534.272 Q273.029 534.272 276.131 536.703 Q279.233 539.11 279.233 543.231 Q279.233 546.101 277.59 548.092 Q275.946 550.059 272.914 550.823 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 537.976 Q295.298 537.976 293.469 541.541 Q291.664 545.083 291.664 552.212 Q291.664 559.319 293.469 562.883 Q295.298 566.425 298.909 566.425 Q302.543 566.425 304.349 562.883 Q306.177 559.319 306.177 552.212 Q306.177 545.083 304.349 541.541 Q302.543 537.976 298.909 537.976 M298.909 534.272 Q304.719 534.272 307.775 538.879 Q310.853 543.462 310.853 552.212 Q310.853 560.939 307.775 565.545 Q304.719 570.129 298.909 570.129 Q293.099 570.129 290.02 565.545 Q286.964 560.939 286.964 552.212 Q286.964 543.462 290.02 538.879 Q293.099 534.272 298.909 534.272 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M271.594 345.346 L259.789 363.795 L271.594 363.795 L271.594 345.346 M270.367 341.272 L276.247 341.272 L276.247 363.795 L281.177 363.795 L281.177 367.684 L276.247 367.684 L276.247 375.832 L271.594 375.832 L271.594 367.684 L255.992 367.684 L255.992 363.17 L270.367 341.272 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M298.909 344.351 Q295.298 344.351 293.469 347.916 Q291.664 351.457 291.664 358.587 Q291.664 365.693 293.469 369.258 Q295.298 372.8 298.909 372.8 Q302.543 372.8 304.349 369.258 Q306.177 365.693 306.177 358.587 Q306.177 351.457 304.349 347.916 Q302.543 344.351 298.909 344.351 M298.909 340.647 Q304.719 340.647 307.775 345.254 Q310.853 349.837 310.853 358.587 Q310.853 367.314 307.775 371.92 Q304.719 376.503 298.909 376.503 Q293.099 376.503 290.02 371.92 Q286.964 367.314 286.964 358.587 Q286.964 349.837 290.02 345.254 Q293.099 340.647 298.909 340.647 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip092)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1140.97 400.199,1004.62 400.786,1013.4 401.372,1011.6 401.958,1108.11 402.545,981.058 403.131,961.807 403.718,854.303 404.304,756.547 404.891,665.897 405.477,583.63 406.063,503.392 406.65,431.248 407.236,364.959 407.823,307.3 408.409,255.395 408.995,345.841 409.582,360.674 410.168,313.185 410.755,327.096 411.341,286.341 411.927,342.995 412.514,305.234 413.1,273.873 413.687,244.428 414.273,256.79 414.86,267.471 415.446,244.742 416.032,226.238 416.619,269.398 417.205,250.816 417.792,236.785 418.378,225.192 418.964,240.597 419.551,233.359 420.137,226.925 420.724,222.75 421.31,219.895 421.896,274.755 422.483,289.893 423.069,304.584 423.656,317.509 424.242,332.879 424.829,332.994 425.415,347.842 426.001,363.614 426.588,377.2 427.174,391.45 427.761,404.848 428.347,408.239 428.933,412.539 429.52,436.478 430.106,485.412 430.693,504.907 431.279,517.685 431.865,523.347 432.452,536.247 433.038,549.377 433.625,569.279 434.211,581.809 434.798,608.04 435.384,638.277 435.97,643.825 436.557,649.258 437.143,666.441 437.73,672.439 438.316,698.93 438.902,708.927 439.489,719.812 440.075,730.392 440.662,754.075 441.248,763.414 441.835,772.249 442.421,785.327 443.007,798.454 443.594,814.339 444.18,822.621 444.767,831.162 445.353,835.456 445.939,844.26 446.526,849.287 447.112,857.918 447.699,866.658 448.285,875.468 448.871,890.75 449.458,905.001 450.044,916.185 450.631,926.629 451.217,931.429 451.804,939.091 452.39,949.503 452.976,962.402 453.563,966.757 454.149,971.081 454.736,980.674 455.322,990.19 455.908,993.419 456.495,997.415 457.081,1006.49 457.668,1013.14 458.254,1016.94 458.84,1027.84 459.427,1040.89 460.013,1046.01 460.6,1051.22 461.186,1054.42 461.773,1059.8 462.359,1067.41 462.945,1076.81 463.532,1081.5 464.118,1079.31 464.705,1086.54 465.291,1091.09 465.877,1095.89 466.464,1100.34 467.05,1102.54 467.637,1105.11 468.223,1107.35 468.809,1107.7 469.396,1116.12 469.982,1120.5 470.569,1126.25 471.155,1127.8 471.742,1129.42 472.328,1133.78 472.914,1137.31 473.501,1139.17 474.087,1146.81 474.674,1152.6 475.26,1153.79 475.846,1157.39 476.433,1164.45 477.019,1173.19 477.606,1175.89 478.192,1178.47 478.778,1180.97 479.365,1181.27 479.951,1181.56 480.538,1177.32 481.124,1176.34 481.711,1181.32 482.297,1183.93 482.883,1188.25 483.47,1189.12 484.056,1191.86 484.643,1190.44 485.229,1194.55 485.815,1193.78 486.402,1194.93 486.988,1197.82 487.575,1201.8 488.161,1202.23 488.748,1204.8 489.334,1207.49 489.92,1209.57 490.507,1211.96 491.093,1214.34 491.68,1217.71 492.266,1221.19 492.852,1222.67 493.439,1222.03 494.025,1222.14 494.612,1224.02 495.198,1226.08 495.784,1229.28 496.371,1229.23 496.957,1228.83 497.544,1228.25 498.13,1231.26 498.717,1230.68 499.303,1232.02 499.889,1230.03 500.476,1229.69 501.062,1230.72 501.649,1229.94 502.235,1228.01 502.821,1226.18 503.408,1226.32 503.994,1229.27 504.581,1232.29 505.167,1233.72 505.753,1234.84 506.34,1234.36 506.926,1235.27 507.513,1239.28 508.099,1237.17 508.686,1235.09 509.272,1237.93 509.858,1235.3 510.445,1234.7 511.031,1237.95 511.618,1237.49 512.204,1237.02 512.79,1237.92 513.377,1235.75 513.963,1236.67 514.55,1234.3 515.136,1232.28 515.722,1231.96 516.309,1231.84 516.895,1230.3 517.482,1230.35 518.068,1230.15 518.655,1235.13 519.241,1234.85 519.827,1239.77 520.414,1237.7 521,1235.72 521.587,1234.03 522.173,1236.92 522.759,1240.01 523.346,1239.43 523.932,1239.16 524.519,1236.85 525.105,1240.13 525.691,1241.29 526.278,1245.77 526.864,1244.7 527.451,1242.32 528.037,1238.65 528.624,1238.35 529.21,1238 529.796,1239.31 530.383,1242.24 530.969,1241.51 531.556,1239.16 532.142,1237.12 532.728,1238.38 533.315,1241.43 533.901,1240.61 534.488,1239.97 535.074,1242.54 535.661,1241.91 536.247,1243.11 536.833,1244.15 537.42,1243.47 538.006,1242.7 538.593,1250.02 539.179,1248.96 539.765,1249.64 540.352,1246.86 540.938,1242.82 541.525,1243.85 542.111,1243.09 542.697,1242.7 543.284,1240.59 543.87,1241.67 544.457,1241.03 545.043,1240.62 545.63,1244.53 546.216,1245.54 546.802,1248 547.389,1250.53 547.975,1247.78 548.562,1245.57 549.148,1249.27 549.734,1248.01 550.321,1245.26 550.907,1245.98 551.494,1242.08 552.08,1244.59 552.666,1246.88 553.253,1245.74 553.839,1246.29 554.426,1243.67 555.012,1242.49 555.599,1241.99 556.185,1241.08 556.771,1240.39 557.358,1242.64 557.944,1244.89 558.531,1243.65 559.117,1244.25 559.703,1244.43 560.29,1245.14 560.876,1244.16 561.463,1241.22 562.049,1241.81 562.635,1242.51 563.222,1241.75 563.808,1242.6 564.395,1249.48 564.981,1249.72 565.568,1246.97 566.154,1245.67 566.74,1242.99 567.327,1245.06 567.913,1245.77 568.5,1242.67 569.086,1241.63 569.672,1242.47 570.259,1239.91 570.845,1237.72 571.432,1238.71 572.018,1239.09 572.605,1235.27 573.191,1233.2 573.777,1232.59 574.364,1233.97 574.95,1238.55 575.537,1236.54 576.123,1237.62 576.709,1237.12 577.296,1234.66 577.882,1237.42 578.469,1238.42 579.055,1237.31 579.641,1236.91 580.228,1236.4 580.814,1234.38 581.401,1230.68 581.987,1230.13 582.574,1230.09 583.16,1229.62 583.746,1229.14 584.333,1227.38 584.919,1226.89 585.506,1228.27 586.092,1229.72 586.678,1227.73 587.265,1228.83 587.851,1225.35 588.438,1226.72 589.024,1221.86 589.61,1220.19 590.197,1223.7 590.783,1219.15 591.37,1221.16 591.956,1221.07 592.543,1219.8 593.129,1221.66 593.715,1220.31 594.302,1220.67 594.888,1220.87 595.475,1218.09 596.061,1216.99 596.647,1217.01 597.234,1217.52 597.82,1215.94 598.407,1218.33 598.993,1221.9 599.579,1218.59 600.166,1218.93 600.752,1218.05 601.339,1224.48 601.925,1227.48 602.512,1228.52 603.098,1228.13 603.684,1229.13 604.271,1225.7 604.857,1225.58 605.444,1227.01 606.03,1228.41 606.616,1231.03 607.203,1232.15 607.789,1229.82 608.376,1229.5 608.962,1227.55 609.548,1227.15 610.135,1226.86 610.721,1226.98 611.308,1224.98 611.894,1225.05 612.481,1227.89 613.067,1227.53 613.653,1228.41 614.24,1226.44 614.826,1226.37 615.413,1227.93 615.999,1230.58 616.585,1230.15 617.172,1229.76 617.758,1229.42 618.345,1232.57 618.931,1230.35 619.518,1228.58 620.104,1223.51 620.69,1223.47 621.277,1223.1 621.863,1224.83 622.45,1226.9 623.036,1225.14 623.622,1221.75 624.209,1221.77 624.795,1224.93 625.382,1227.6 625.968,1228.64 626.554,1228.29 627.141,1223.42 627.727,1225.01 628.314,1223.47 628.9,1221.91 629.487,1221.96 630.073,1223.53 630.659,1223.29 631.246,1218.55 631.832,1220.48 632.419,1221.78 633.005,1223.82 633.591,1226.77 634.178,1227.81 634.764,1227.24 635.351,1226.61 635.937,1228.14 636.523,1226.68 637.11,1223.48 637.696,1220.3 638.283,1220.23 638.869,1223.55 639.456,1225 640.042,1226.09 640.628,1225.63 641.215,1225.13 641.801,1221.89 642.388,1222.02 642.974,1223.41 643.56,1228.07 644.147,1228.81 644.733,1224.7 645.32,1226.19 645.906,1225.71 646.492,1225.54 647.079,1223.66 647.665,1215.26 648.252,1217.17 648.838,1218.55 649.425,1220.28 650.011,1218.5 650.597,1218.59 651.184,1221.99 651.77,1221.87 652.357,1221.31 652.943,1224.32 653.529,1225.64 654.116,1223.78 654.702,1223.54 655.289,1226.65 655.875,1228.94 656.462,1229.81 657.048,1229.28 657.634,1225.48 658.221,1226.67 658.807,1221.71 659.394,1218.78 659.98,1220.54 660.566,1220.47 661.153,1218.76 661.739,1217.23 662.326,1218.61 662.912,1218.7 663.498,1218.61 664.085,1215.45 664.671,1214.02 665.258,1216.03 665.844,1216.09 666.431,1214.93 667.017,1213.85 667.603,1215.59 668.19,1219.23 668.776,1220.93 669.363,1219.28 669.949,1220.67 670.535,1220.62 671.122,1220.77 671.708,1220.75 672.295,1219.11 672.881,1219.44 673.467,1221 674.054,1219.51 674.64,1218 675.227,1219.46 675.813,1219.48 676.4,1219.16 676.986,1220.86 677.572,1218.94 678.159,1218.94 678.745,1215.66 679.332,1215.6 679.918,1212.84 680.504,1214.92 681.091,1215.02 681.677,1215.16 682.264,1213.96 682.85,1215.67 683.436,1215.82 684.023,1215.7 684.609,1214.03 685.196,1214.11 685.782,1214.34 686.369,1212.98 686.955,1210.04 687.541,1208.91 688.128,1209.54 688.714,1208.74 689.301,1210.95 689.887,1211.09 690.473,1211.38 691.06,1211.48 691.646,1211.88 692.233,1212.56 692.819,1212.75 693.405,1216.24 693.992,1219.46 694.578,1217.73 695.165,1222.39 695.751,1222.25 696.338,1223.66 696.924,1224.79 697.51,1227.66 698.097,1226.63 698.683,1226.2 699.27,1225.7 699.856,1223.6 700.442,1222.02 701.029,1221.89 701.615,1221.51 702.202,1220.93 702.788,1222.02 703.375,1223.33 703.961,1225.93 704.547,1225.52 705.134,1225.29 705.72,1223.06 706.307,1222.47 706.893,1225.24 707.479,1224.43 708.066,1221.05 708.652,1220.74 709.239,1220.49 709.825,1223.61 710.411,1227.82 710.998,1231.78 711.584,1229.35 712.171,1225.72 712.757,1228.88 713.344,1228.22 713.93,1226.22 714.516,1225.92 715.103,1224.02 715.689,1225.74 716.276,1225.17 716.862,1224.48 717.448,1222.1 718.035,1221.8 718.621,1222.88 719.208,1222.72 719.794,1222.4 720.38,1221.93 720.967,1225.01 721.553,1223.26 722.14,1221.75 722.726,1219.8 723.313,1217.94 723.899,1216.21 724.485,1217.94 725.072,1217.71 725.658,1217.47 726.245,1217.28 726.831,1217.13 727.417,1216.97 728.004,1218.37 728.59,1216.24 729.177,1217.2 729.763,1220.1 730.349,1222.82 730.936,1217.38 731.522,1217.26 732.109,1217.07 732.695,1218.65 733.282,1219.92 733.868,1219.95 734.454,1217.91 735.041,1219.77 735.627,1218.1 736.214,1219.19 736.8,1218.96 737.386,1217.21 737.973,1216.98 738.559,1213.7 739.146,1212.15 739.732,1210.38 740.318,1205.51 740.905,1207.4 741.491,1206.21 742.078,1206.79 742.664,1208.88 743.251,1209.27 743.837,1209.72 744.423,1206.63 745.01,1205.58 745.596,1206.13 746.183,1206.96 746.769,1210.69 747.355,1204.76 747.942,1208.55 748.528,1205.42 749.115,1204.36 749.701,1203.18 750.288,1205.18 750.874,1203.92 751.46,1204.68 752.047,1205.61 752.633,1206.23 753.22,1206.77 753.806,1208.77 754.392,1207.32 754.979,1210.89 755.565,1206.29 756.152,1203.63 756.738,1205.95 757.324,1207.78 757.911,1212.84 758.497,1211.44 759.084,1209.77 759.67,1210.14 760.257,1211.71 760.843,1213.34 761.429,1214.63 762.016,1214.5 762.602,1211.57 763.189,1210.14 763.775,1210.25 764.361,1214.19 764.948,1217.17 765.534,1215.66 766.121,1215.84 766.707,1215.62 767.293,1217.12 767.88,1217.25 768.466,1216.84 769.053,1215.62 769.639,1217.39 770.226,1222.26 770.812,1223.25 771.398,1222.75 771.985,1223.72 772.571,1223.23 773.158,1226.05 773.744,1225.36 774.33,1228.05 774.917,1227.3 775.503,1226.44 776.09,1224.32 776.676,1223.7 777.262,1223.12 777.849,1222.9 778.435,1221.15 779.022,1219.29 779.608,1218.69 780.195,1220.06 780.781,1216.83 781.367,1219.71 781.954,1217.91 782.54,1219.71 783.127,1222.65 783.713,1223.72 784.299,1221.67 784.886,1222.74 785.472,1219.26 786.059,1220.29 786.645,1221.44 787.232,1222.49 787.818,1221.86 788.404,1219.62 788.991,1217.46 789.577,1217.25 790.164,1216.98 790.75,1218.58 791.336,1216.8 791.923,1215.01 792.509,1214.83 793.096,1216.42 793.682,1216.1 794.268,1214.56 794.855,1214.53 795.441,1215.89 796.028,1212.7 796.614,1214.28 797.201,1214.24 797.787,1214.17 798.373,1215.39 798.96,1216.84 799.546,1219.72 800.133,1218.04 800.719,1214.54 801.305,1211.28 801.892,1211.21 802.478,1211.43 803.065,1214.35 803.651,1215.83 804.237,1214.22 804.824,1214.07 805.41,1212.38 805.997,1213.51 806.583,1216.48 807.17,1214.92 807.756,1211.59 808.342,1210.09 808.929,1208.68 809.515,1207.18 810.102,1207.44 810.688,1206.29 811.274,1206.74 811.861,1205.33 812.447,1203.08 813.034,1206.99 813.62,1207.53 814.206,1207.99 814.793,1208.1 815.379,1208.52 815.966,1207.21 816.552,1212.55 817.139,1212.49 817.725,1217.26 818.311,1218.66 818.898,1221.44 819.484,1219.64 820.071,1218.04 820.657,1217.48 821.243,1218.45 821.83,1216.77 822.416,1216.19 823.003,1216.03 823.589,1216.01 824.175,1212.73 824.762,1214.32 825.348,1215.55 825.935,1215.07 826.521,1216.66 827.108,1214.83 827.694,1214.83 828.28,1213.06 828.867,1213.18 829.453,1210.04 830.04,1210.27 830.626,1207.52 831.212,1207.66 831.799,1210.82 832.385,1212.86 832.972,1211.23 833.558,1214.33 834.145,1213.98 834.731,1212.42 835.317,1214.02 835.904,1213.86 836.49,1213.92 837.077,1212.22 837.663,1212.25 838.249,1212.56 838.836,1214 839.422,1215.41 840.009,1215.49 840.595,1216.97 841.181,1217.12 841.768,1220.24 842.354,1221.36 842.941,1219.29 843.527,1220.48 844.114,1223.52 844.7,1222.95 845.286,1219.63 845.873,1216.28 846.459,1214.77 847.046,1217.66 847.632,1217.97 848.218,1216.11 848.805,1216.1 849.391,1214.04 849.978,1217.4 850.564,1215.63 851.15,1213.89 851.737,1213.95 852.323,1212.51 852.91,1214.05 853.496,1213.99 854.083,1215.31 854.669,1215.58 855.255,1213.88 855.842,1215.59 856.428,1215.27 857.015,1214.91 857.601,1214.73 858.187,1211.58 858.774,1213.24 859.36,1215 859.947,1216.52 860.533,1219.43 861.119,1222.23 861.706,1224.79 862.292,1222.51 862.879,1226.78 863.465,1224.44 864.052,1223.63 864.638,1223 865.224,1220.73 865.811,1221.86 866.397,1224.36 866.984,1226.62 867.57,1227.57 868.156,1224.93 868.743,1226.16 869.329,1225.32 869.916,1224.63 870.502,1223.89 871.089,1223.45 871.675,1221.23 872.261,1216.06 872.848,1217.59 873.434,1218.86 874.021,1216.68 874.607,1216.38 875.193,1219.29 875.78,1217.13 876.366,1216.81 876.953,1214.92 877.539,1214.56 878.125,1214.31 878.712,1212.48 879.298,1210.56 879.885,1210.67 880.471,1209.28 881.058,1209.29 881.644,1211.18 882.23,1212.8 882.817,1209.42 883.403,1209.46 883.99,1207.87 884.576,1211.34 885.162,1212.65 885.749,1212.23 886.335,1213.81 886.922,1213.4 887.508,1210.16 888.094,1210.51 888.681,1212.47 889.267,1211.31 889.854,1209.5 890.44,1208.16 891.027,1208.43 891.613,1210 892.199,1211.81 892.786,1211.84 893.372,1211.78 893.959,1213.47 894.545,1216.64 895.131,1216.41 895.718,1213.07 896.304,1213.31 896.891,1216.2 897.477,1217.6 898.063,1218.62 898.65,1220.06 899.236,1219.95 899.823,1221.29 900.409,1222.57 900.996,1220.37 901.582,1216.77 902.168,1217.06 902.755,1215.22 903.341,1216.45 903.928,1216.35 904.514,1214.34 905.1,1215.79 905.687,1215.91 906.273,1212.28 906.86,1216.93 907.446,1218.47 908.032,1215.11 908.619,1214.94 909.205,1219.68 909.792,1217.77 910.378,1220.92 910.965,1225.08 911.551,1219.99 912.137,1221.47 912.724,1219.41 913.31,1219.13 913.897,1217.38 914.483,1220.01 915.069,1218.39 915.656,1219.17 916.242,1217.37 916.829,1215.9 917.415,1215.8 918.002,1218.5 918.588,1219.77 919.174,1219.27 919.761,1217.49 920.347,1212.62 920.934,1210.95 921.52,1210.91 922.106,1214.25 922.693,1216.07 923.279,1219.36 923.866,1218.68 924.452,1220.28 925.038,1220.88 925.625,1215.72 926.211,1217.11 926.798,1213.77 927.384,1210.58 927.971,1213.75 928.557,1215.05 929.143,1218.19 929.73,1217.86 930.316,1222.06 930.903,1218.39 931.489,1221.22 932.075,1219.14 932.662,1217.48 933.248,1217.3 933.835,1213.79 934.421,1215.11 935.007,1212.05 935.594,1211.82 936.18,1211.97 936.767,1210.02 937.353,1208.48 937.94,1205.52 938.526,1205.9 939.112,1207.82 939.699,1208.15 940.285,1210.16 940.872,1208.27 941.458,1210.25 942.044,1206.85 942.631,1205.8 943.217,1204.54 943.804,1208.3 944.39,1205.07 944.976,1204.98 945.563,1209.8 946.149,1206.31 946.736,1206.79 947.322,1204.06 947.909,1204.79 948.495,1205.22 949.081,1207.15 949.668,1207.53 950.254,1205.9 950.841,1206.04 951.427,1208.05 952.013,1206.58 952.6,1208.25 953.186,1210.16 953.773,1213.33 954.359,1216.39 954.945,1216.27 955.532,1215.83 956.118,1215.65 956.705,1212.45 957.291,1210.74 957.878,1209.39 958.464,1209.58 959.05,1206.59 959.637,1208.57 960.223,1205.46 960.81,1204.5 961.396,1204.86 961.982,1205.62 962.569,1204.46 963.155,1206.53 963.742,1206.7 964.328,1210.37 964.915,1208.81 965.501,1207.28 966.087,1210.74 966.674,1210.72 967.26,1210.63 967.847,1207.82 968.433,1207.61 969.019,1204.78 969.606,1208.03 970.192,1208.46 970.779,1208.57 971.365,1211.58 971.951,1209.99 972.538,1208.37 973.124,1208.55 973.711,1210.53 974.297,1209.14 974.884,1211.13 975.47,1209.18 976.056,1209.5 976.643,1209.6 977.229,1206.69 977.816,1205.32 978.402,1205.87 978.988,1207.51 979.575,1206.36 980.161,1201.7 980.748,1199.16 981.334,1201.39 981.92,1202.16 982.507,1201.13 983.093,1202.07 983.68,1199.72 984.266,1198.64 984.853,1201.06 985.439,1200.06 986.025,1202.47 986.612,1203.09 987.198,1205.13 987.785,1204.19 988.371,1204.88 988.957,1208.47 989.544,1208.65 990.13,1208.59 990.717,1208.85 991.303,1210.84 991.889,1207.7 992.476,1206.2 993.062,1205.23 993.649,1207.18 994.235,1207.43 994.822,1207.87 995.408,1208.4 995.994,1208.43 996.581,1211.4 997.167,1211.37 997.754,1208.24 998.34,1210.09 998.926,1208.75 999.513,1208.82 1000.1,1212.02 1000.69,1213.59 1001.27,1215.24 1001.86,1216.29 1002.44,1214.18 1003.03,1213.78 1003.62,1214.95 1004.2,1219.57 1004.79,1217.85 1005.38,1217.78 1005.96,1220.63 1006.55,1221.87 1007.14,1222.96 1007.72,1222.58 1008.31,1220.51 1008.9,1218.3 1009.48,1216.18 1010.07,1215.76 1010.65,1215.55 1011.24,1212.19 1011.83,1212.29 1012.41,1216.88 1013,1214.83 1013.59,1216.34 1014.17,1212.89 1014.76,1211.65 1015.35,1208.59 1015.93,1208.65 1016.52,1208.85 1017.11,1205.93 1017.69,1207.66 1018.28,1206.32 1018.86,1208.34 1019.45,1208.4 1020.04,1208.61 1020.62,1210.53 1021.21,1215.22 1021.8,1216.63 1022.38,1214.85 1022.97,1212.78 1023.56,1209.79 1024.14,1210.05 1024.73,1211.73 1025.32,1205.51 1025.9,1205.64 1026.49,1209.04 1027.07,1206.13 1027.66,1207.58 1028.25,1210.84 1028.83,1210.54 1029.42,1210.69 1030.01,1212.31 1030.59,1210.91 1031.18,1212.41 1031.77,1210.9 1032.35,1209.28 1032.94,1211.07 1033.52,1206.51 1034.11,1206.72 1034.7,1205.36 1035.28,1205.92 1035.87,1205.88 1036.46,1207.52 1037.04,1207.71 1037.63,1208.23 1038.22,1208.42 1038.8,1207.14 1039.39,1206.22 1039.98,1206.49 1040.56,1206.75 1041.15,1206.68 1041.73,1205.52 1042.32,1206.14 1042.91,1206.63 1043.49,1209.82 1044.08,1214.66 1044.67,1215.73 1045.25,1217.66 1045.84,1217.24 1046.43,1213.58 1047.01,1210.12 1047.6,1210.26 1048.19,1210.55 1048.77,1207.52 1049.36,1207.63 1049.94,1207.74 1050.53,1209.52 1051.12,1209.35 1051.7,1207.78 1052.29,1209.35 1052.88,1209.86 1053.46,1213.19 1054.05,1213.15 1054.64,1212.97 1055.22,1214.24 1055.81,1213.8 1056.39,1215.07 1056.98,1215.07 1057.57,1216.65 1058.15,1213.22 1058.74,1211.47 1059.33,1209.88 1059.91,1210.18 1060.5,1211.93 1061.09,1213.09 1061.67,1211.7 1062.26,1214.62 1062.85,1213.6 1063.43,1211.77 1064.02,1212.09 1064.6,1212.25 1065.19,1207.35 1065.78,1207.6 1066.36,1209.53 1066.95,1206.56 1067.54,1210.07 1068.12,1213.39 1068.71,1211.7 1069.3,1211.56 1069.88,1214.64 1070.47,1212.6 1071.06,1210.51 1071.64,1208.83 1072.23,1208.68 1072.81,1209.13 1073.4,1208.05 1073.99,1206.49 1074.57,1208.16 1075.16,1205.23 1075.75,1205.69 1076.33,1207.46 1076.92,1206.24 1077.51,1207.95 1078.09,1209.66 1078.68,1211.59 1079.26,1211.47 1079.85,1211.63 1080.44,1213.44 1081.02,1215.06 1081.61,1216.4 1082.2,1214.53 1082.78,1215.72 1083.37,1218.82 1083.96,1220.12 1084.54,1217.85 1085.13,1212.92 1085.72,1212.85 1086.3,1211.42 1086.89,1213.01 1087.47,1211.28 1088.06,1210 1088.65,1208.7 1089.23,1207.25 1089.82,1205.98 1090.41,1209.26 1090.99,1209.33 1091.58,1209.63 1092.17,1211.24 1092.75,1208.4 1093.34,1210.31 1093.93,1210.72 1094.51,1209.45 1095.1,1203.53 1095.68,1204.04 1096.27,1204.62 1096.86,1208.49 1097.44,1211.65 1098.03,1216.23 1098.62,1215.76 1099.2,1218.61 1099.79,1222.79 1100.38,1220.51 1100.96,1223.19 1101.55,1224.12 1102.14,1217.3 1102.72,1218.61 1103.31,1219.48 1103.89,1219.19 1104.48,1220.09 1105.07,1216.43 1105.65,1219.08 1106.24,1221.73 1106.83,1221.05 1107.41,1220.58 1108,1218.38 1108.59,1221.27 1109.17,1222.5 1109.76,1220.43 1110.34,1219.96 1110.93,1219.52 1111.52,1219.3 1112.1,1216.89 1112.69,1219.73 1113.28,1217.89 1113.86,1219.13 1114.45,1217.32 1115.04,1217.07 1115.62,1218.3 1116.21,1216.39 1116.8,1220.66 1117.38,1221.73 1117.97,1219.65 1118.55,1218.88 1119.14,1215.15 1119.73,1216.48 1120.31,1214.49 1120.9,1212.87 1121.49,1211.26 1122.07,1210.93 1122.66,1209.2 1123.25,1209.01 1123.83,1207.54 1124.42,1207.82 1125.01,1209.38 1125.59,1211.05 1126.18,1209.61 1126.76,1206.33 1127.35,1205.05 1127.94,1208.6 1128.52,1208.94 1129.11,1207.29 1129.7,1209.29 1130.28,1209.68 1130.87,1208.52 1131.46,1210.04 1132.04,1208.45 1132.63,1205.77 1133.21,1205.89 1133.8,1205.96 1134.39,1206.39 1134.97,1206.47 1135.56,1205.29 1136.15,1205.48 1136.73,1204.41 1137.32,1204.61 1137.91,1206.2 1138.49,1207.92 1139.08,1207.85 1139.67,1209.55 1140.25,1204.72 1140.84,1206.59 1141.42,1206.48 1142.01,1203.29 1142.6,1203.99 1143.18,1204.69 1143.77,1205.13 1144.36,1205.41 1144.94,1205.71 1145.53,1202.86 1146.12,1200.08 1146.7,1202.33 1147.29,1202.6 1147.88,1203.28 1148.46,1203.55 1149.05,1202.39 1149.63,1204.27 1150.22,1203.09 1150.81,1202.36 1151.39,1204.37 1151.98,1206.11 1152.57,1204.84 1153.15,1206.42 1153.74,1206.59 1154.33,1203.32 1154.91,1205.3 1155.5,1203.93 1156.09,1201.23 1156.67,1201.93 1157.26,1200.35 1157.84,1199.59 1158.43,1201.59 1159.02,1201.74 1159.6,1202.34 1160.19,1199.63 1160.78,1198.79 1161.36,1199.11 1161.95,1201.29 1162.54,1201.81 1163.12,1205.45 1163.71,1205.87 1164.29,1205.97 1164.88,1204.62 1165.47,1206.71 1166.05,1210.16 1166.64,1208.47 1167.23,1205.3 1167.81,1204.21 1168.4,1203.62 1168.99,1205.84 1169.57,1207.8 1170.16,1208.1 1170.75,1208.22 1171.33,1207.17 1171.92,1207.29 1172.5,1205.87 1173.09,1209.21 1173.68,1210.92 1174.26,1207.78 1174.85,1207.97 1175.44,1209.68 1176.02,1213.18 1176.61,1215.19 1177.2,1213.35 1177.78,1211.93 1178.37,1215.06 1178.96,1216.43 1179.54,1219.21 1180.13,1222.16 1180.71,1223.22 1181.3,1222.68 1181.89,1224.36 1182.47,1223.8 1183.06,1224.91 1183.65,1221.15 1184.23,1221.93 1184.82,1223.03 1185.41,1222.5 1185.99,1220.52 1186.58,1221.93 1187.16,1219.57 1187.75,1220.91 1188.34,1220.07 1188.92,1222.45 1189.51,1225.01 1190.1,1224.37 1190.68,1223.55 1191.27,1222.98 1191.86,1223.79 1192.44,1221.43 1193.03,1219.28 1193.62,1220.54 1194.2,1221.72 1194.79,1219.7 1195.37,1219.38 1195.96,1214.28 1196.55,1218.61 1197.13,1218.29 1197.72,1216.31 1198.31,1217.61 1198.89,1218.76 1199.48,1218.2 1200.07,1219.26 1200.65,1218.95 1201.24,1219.8 1201.83,1219.36 1202.41,1218.4 1203,1219.95 1203.58,1220.82 1204.17,1218.58 1204.76,1219.75 1205.34,1216.03 1205.93,1217.2 1206.52,1215.15 1207.1,1213.11 1207.69,1211.19 1208.28,1211.38 1208.86,1211.05 1209.45,1210.77 1210.03,1212 1210.62,1214.9 1211.21,1214.32 1211.79,1215.75 1212.38,1217.13 1212.97,1215.35 1213.55,1211.75 1214.14,1211.51 1214.73,1211.49 1215.31,1211.32 1215.9,1213.1 1216.49,1214.34 1217.07,1215.22 1217.66,1214.78 1218.24,1212.5 1218.83,1212.33 1219.42,1213.81 1220,1212.06 1220.59,1210.08 1221.18,1213.22 1221.76,1211.3 1222.35,1211.65 1222.94,1211.44 1223.52,1209.63 1224.11,1211.37 1224.7,1212.72 1225.28,1215.86 1225.87,1210.92 1226.45,1214.12 1227.04,1207.89 1227.63,1206.32 1228.21,1209.82 1228.8,1209.78 1229.39,1209.7 1229.97,1210.03 1230.56,1208.5 1231.15,1208.56 1231.73,1210.29 1232.32,1211.78 1232.91,1211.42 1233.49,1212.95 1234.08,1214.15 1234.66,1216.98 1235.25,1218.37 1235.84,1219.62 1236.42,1219.54 1237.01,1217.96 1237.6,1215.96 1238.18,1214.54 1238.77,1212.85 1239.36,1214.57 1239.94,1217.63 1240.53,1219.16 1241.11,1222.24 1241.7,1219.91 1242.29,1217.9 1242.87,1215.98 1243.46,1210.85 1244.05,1210.62 1244.63,1210.91 1245.22,1210.82 1245.81,1211.99 1246.39,1212.17 1246.98,1207.53 1247.57,1207.57 1248.15,1207.69 1248.74,1209.12 1249.32,1207.62 1249.91,1209.18 1250.5,1204.26 1251.08,1204.6 1251.67,1206.8 1252.26,1205.44 1252.84,1205.78 1253.43,1204.59 1254.02,1206.71 1254.6,1205.54 1255.19,1207.55 1255.78,1207.76 1256.36,1208.17 1256.95,1206.44 1257.53,1203.88 1258.12,1206.26 1258.71,1210.93 1259.29,1210.72 1259.88,1209.1 1260.47,1206.17 1261.05,1206.56 1261.64,1208.66 1262.23,1207.32 1262.81,1210.59 1263.4,1208.94 1263.98,1209.08 1264.57,1210.65 1265.16,1212.4 1265.74,1213.92 1266.33,1208.72 1266.92,1207.46 1267.5,1207.71 1268.09,1208.11 1268.68,1208.5 1269.26,1207.11 1269.85,1205.97 1270.44,1204.81 1271.02,1204.95 1271.61,1203.68 1272.19,1205.66 1272.78,1207.18 1273.37,1207.21 1273.95,1207.07 1274.54,1207.12 1275.13,1207.05 1275.71,1207.19 1276.3,1207.56 1276.89,1209.5 1277.47,1206.57 1278.06,1208.71 1278.65,1207.35 1279.23,1205.94 1279.82,1207.65 1280.4,1206.25 1280.99,1207.98 1281.58,1205.19 1282.16,1202.61 1282.75,1201.63 1283.34,1200.92 1283.92,1198.54 1284.51,1199.13 1285.1,1199.96 1285.68,1201.96 1286.27,1203.99 1286.86,1205.99 1287.44,1207.96 1288.03,1208.02 1288.61,1208.39 1289.2,1210 1289.79,1210.11 1290.37,1205.46 1290.96,1205.86 1291.55,1212.36 1292.13,1212.14 1292.72,1213.49 1293.31,1213.27 1293.89,1213.27 1294.48,1210.1 1295.06,1212 1295.65,1212.23 1296.24,1213.39 1296.82,1213.23 1297.41,1212.82 1298,1214.18 1298.58,1213.73 1299.17,1215.38 1299.76,1212.13 1300.34,1212.47 1300.93,1212.3 1301.52,1210.44 1302.1,1209.19 1302.69,1210.61 1303.27,1211.76 1303.86,1211.91 1304.45,1210.37 1305.03,1210.57 1305.62,1210.26 1306.21,1215.27 1306.79,1214.86 1307.38,1214.74 1307.97,1214.43 1308.55,1217.59 1309.14,1217.37 1309.73,1215.52 1310.31,1215.37 1310.9,1213.81 1311.48,1213.73 1312.07,1215.07 1312.66,1216.88 1313.24,1216.5 1313.83,1215.92 1314.42,1215.45 1315,1217.15 1315.59,1220.02 1316.18,1217.96 1316.76,1219.13 1317.35,1218.81 1317.93,1215.15 1318.52,1219.6 1319.11,1217.3 1319.69,1215.4 1320.28,1216.8 1320.87,1217.78 1321.45,1216.99 1322.04,1214.65 1322.63,1215.89 1323.21,1212.54 1323.8,1208.79 1324.39,1205.69 1324.97,1199.58 1325.56,1199.95 1326.14,1200.56 1326.73,1201.2 1327.32,1198.62 1327.9,1197.57 1328.49,1195.12 1329.08,1196.18 1329.66,1198.58 1330.25,1201.03 1330.84,1201.5 1331.42,1198.6 1332.01,1200.73 1332.6,1201 1333.18,1201.78 1333.77,1201.98 1334.35,1202.71 1334.94,1207.89 1335.53,1214.61 1336.11,1209.44 1336.7,1209.64 1337.29,1212.61 1337.87,1214.29 1338.46,1214.15 1339.05,1214.48 1339.63,1215.92 1340.22,1220.36 1340.8,1221.18 1341.39,1219.17 1341.98,1221.61 1342.56,1221.05 1343.15,1222.09 1343.74,1224.81 1344.32,1224.11 1344.91,1224.54 1345.5,1218.9 1346.08,1218.41 1346.67,1215.91 1347.26,1210.79 1347.84,1215.37 1348.43,1218.17 1349.01,1217.34 1349.6,1213.97 1350.19,1212.36 1350.77,1212.31 1351.36,1212.03 1351.95,1213.53 1352.53,1215.25 1353.12,1215.04 1353.71,1214.9 1354.29,1213.14 1354.88,1213.15 1355.47,1211.58 1356.05,1211.57 1356.64,1208.63 1357.22,1205.64 1357.81,1210.84 1358.4,1210.36 1358.98,1210.04 1359.57,1213.4 1360.16,1207.2 1360.74,1207.42 1361.33,1206.06 1361.92,1208.05 1362.5,1208.22 1363.09,1206.91 1363.68,1204.04 1364.26,1201.42 1364.85,1200.81 1365.43,1203.08 1366.02,1208.5 1366.61,1206.92 1367.19,1200.8 1367.78,1201.19 1368.37,1198.43 1368.95,1199.08 1369.54,1201.43 1370.13,1201.92 1370.71,1202.06 1371.3,1205.64 1371.88,1206.31 1372.47,1208.44 1373.06,1206.77 1373.64,1210.14 1374.23,1210.25 1374.82,1213.35 1375.4,1216.6 1375.99,1216.29 1376.58,1219.27 1377.16,1220.19 1377.75,1216.38 1378.34,1217.56 1378.92,1217.1 1379.51,1213.79 1380.09,1212.28 1380.68,1205.82 1381.27,1205.01 1381.85,1205.38 1382.44,1207.41 1383.03,1209.22 1383.61,1210.93 1384.2,1209.53 1384.79,1209.76 1385.37,1212.87 1385.96,1217.31 1386.55,1218.46 1387.13,1222.59 1387.72,1223.52 1388.3,1219.87 1388.89,1221.12 1389.48,1220.39 1390.06,1216.57 1390.65,1217.35 1391.24,1220.23 1391.82,1215.45 1392.41,1218.25 1393,1218.12 1393.58,1217.75 1394.17,1218.93 1394.75,1215.48 1395.34,1216.57 1395.93,1214.91 1396.51,1214.8 1397.1,1216.16 1397.69,1218.7 1398.27,1221.46 1398.86,1221.08 1399.45,1221.91 1400.03,1222.64 1400.62,1221.9 1401.21,1221.35 1401.79,1219.52 1402.38,1220.48 1402.96,1217.14 1403.55,1215.26 1404.14,1214.92 1404.72,1211.5 1405.31,1212.01 1405.9,1215.21 1406.48,1215.11 1407.07,1217.8 1407.66,1217.52 1408.24,1217.33 1408.83,1218.51 1409.42,1216.59 1410,1214.75 1410.59,1215.84 1411.17,1215.65 1411.76,1213.72 1412.35,1213.59 1412.93,1210.72 1413.52,1210.48 1414.11,1209.1 1414.69,1207.56 1415.28,1206.28 1415.87,1206.73 1416.45,1205.42 1417.04,1208.86 1417.63,1212.38 1418.21,1210.97 1418.8,1215.67 1419.38,1212.14 1419.97,1213.72 1420.56,1214.89 1421.14,1214.38 1421.73,1214.05 1422.32,1215.45 1422.9,1215.41 1423.49,1215.11 1424.08,1213.34 1424.66,1214.58 1425.25,1212.54 1425.83,1214.15 1426.42,1215.16 1427.01,1211.8 1427.59,1210.47 1428.18,1208.97 1428.77,1207.19 1429.35,1206 1429.94,1207.79 1430.53,1209.54 1431.11,1206.42 1431.7,1203.38 1432.29,1202.34 1432.87,1199.38 1433.46,1198.47 1434.04,1199.25 1434.63,1200.06 1435.22,1202.3 1435.8,1207.42 1436.39,1207.5 1436.98,1209.49 1437.56,1206.38 1438.15,1209.74 1438.74,1208.16 1439.32,1208.18 1439.91,1207.88 1440.5,1209.46 1441.08,1211.42 1441.67,1211.23 1442.25,1211.04 1442.84,1213.1 1443.43,1213.49 1444.01,1210.21 1444.6,1209.02 1445.19,1208.95 1445.77,1207.5 1446.36,1207.06 1446.95,1204.32 1447.53,1204.82 1448.12,1205.18 1448.7,1203.83 1449.29,1204.45 1449.88,1208.01 1450.46,1208.08 1451.05,1206.56 1451.64,1205.03 1452.22,1208.25 1452.81,1208.42 1453.4,1210.21 1453.98,1210.51 1454.57,1212.05 1455.16,1214.89 1455.74,1213.18 1456.33,1209.88 1456.91,1210.08 1457.5,1208.45 1458.09,1207.11 1458.67,1203.87 1459.26,1204.58 1459.85,1200.12 1460.43,1200.52 1461.02,1202.64 1461.61,1200.03 1462.19,1199.3 1462.78,1200.02 1463.37,1202.25 1463.95,1204.31 1464.54,1206.4 1465.12,1206.56 1465.71,1207.17 1466.3,1207.42 1466.88,1206.05 1467.47,1207.71 1468.06,1207.52 1468.64,1207.69 1469.23,1206.48 1469.82,1207.89 1470.4,1208 1470.99,1205.4 1471.57,1205.58 1472.16,1205.82 1472.75,1204.51 1473.33,1203.2 1473.92,1205.27 1474.51,1205.82 1475.09,1206.22 1475.68,1206.76 1476.27,1208.64 1476.85,1208.72 1477.44,1205.95 1478.03,1205.99 1478.61,1204.74 1479.2,1205.39 1479.78,1205.76 1480.37,1204.55 1480.96,1201.66 1481.54,1203.83 1482.13,1204.24 1482.72,1201.5 1483.3,1201.88 1483.89,1200.81 1484.48,1200.1 1485.06,1202.52 1485.65,1204.66 1486.24,1206.7 1486.82,1206.77 1487.41,1211.47 1487.99,1211.29 1488.58,1209.58 1489.17,1211.28 1489.75,1211.68 1490.34,1210.11 1490.93,1213.35 1491.51,1214.94 1492.1,1211.55 1492.69,1213.27 1493.27,1213.1 1493.86,1206.45 1494.45,1205.3 1495.03,1208.98 1495.62,1210.39 1496.2,1210.69 1496.79,1210.8 1497.38,1207.91 1497.96,1209.68 1498.55,1211.46 1499.14,1208.15 1499.72,1205.49 1500.31,1205.82 1500.9,1206.15 1501.48,1209.14 1502.07,1210.88 1502.65,1212.84 1503.24,1212.69 1503.83,1212.73 1504.41,1212.33 1505,1212.59 1505.59,1211.01 1506.17,1214.13 1506.76,1214.2 1507.35,1212.53 1507.93,1212.46 1508.52,1213.95 1509.11,1215.57 1509.69,1214.06 1510.28,1212.38 1510.86,1213.89 1511.45,1213.59 1512.04,1213.36 1512.62,1211.69 1513.21,1210.33 1513.8,1208.66 1514.38,1208.77 1514.97,1209.06 1515.56,1205.83 1516.14,1206.17 1516.73,1206.11 1517.32,1206.06 1517.9,1206.12 1518.49,1208.01 1519.07,1208.05 1519.66,1208.17 1520.25,1206.81 1520.83,1203.71 1521.42,1202.6 1522.01,1203.27 1522.59,1203.63 1523.18,1203.77 1523.77,1204.35 1524.35,1206.5 1524.94,1205.38 1525.52,1205.82 1526.11,1205.98 1526.7,1211.26 1527.28,1214.48 1527.87,1214.4 1528.46,1214.28 1529.04,1211.18 1529.63,1214.76 1530.22,1216.05 1530.8,1215.86 1531.39,1215.72 1531.98,1213.78 1532.56,1215.18 1533.15,1215.13 1533.73,1217.78 1534.32,1217.53 1534.91,1218.65 1535.49,1218.03 1536.08,1212.42 1536.67,1212.13 1537.25,1212.44 1537.84,1211.11 1538.43,1211.05 1539.01,1209.45 1539.6,1211.19 1540.19,1211.23 1540.77,1213.13 1541.36,1211.4 1541.94,1213.06 1542.53,1209.85 1543.12,1212.96 1543.7,1209.59 1544.29,1209.6 1544.88,1212.84 1545.46,1212.72 1546.05,1212.58 1546.64,1215.64 1547.22,1210.75 1547.81,1209.22 1548.4,1214.11 1548.98,1215.64 1549.57,1215.32 1550.15,1218.27 1550.74,1218.08 1551.33,1216.81 1551.91,1216.33 1552.5,1217.73 1553.09,1218.84 1553.67,1216.92 1554.26,1214.96 1554.85,1214.58 1555.43,1214 1556.02,1209.22 1556.6,1209.59 1557.19,1207.91 1557.78,1207.96 1558.36,1206.39 1558.95,1206.62 1559.54,1208.31 1560.12,1208.75 1560.71,1207.38 1561.3,1205.86 1561.88,1207.99 1562.47,1206.49 1563.06,1206.55 1563.64,1208.27 1564.23,1207.18 1564.81,1205.87 1565.4,1204.3 1565.99,1203.2 1566.57,1205.38 1567.16,1207.27 1567.75,1207.65 1568.33,1206.36 1568.92,1205.01 1569.51,1202.33 1570.09,1203.84 1570.68,1204.37 1571.27,1203.17 1571.85,1205.45 1572.44,1208.83 1573.02,1209.08 1573.61,1210.6 1574.2,1210.73 1574.78,1208.59 1575.37,1208.59 1575.96,1208.45 1576.54,1210.21 1577.13,1208.63 1577.72,1208.45 1578.3,1215.16 1578.89,1214.63 1579.47,1214.33 1580.06,1215.76 1580.65,1217.12 1581.23,1219.92 1581.82,1219.59 1582.41,1216.12 1582.99,1214.15 1583.58,1214.33 1584.17,1213.97 1584.75,1213.78 1585.34,1213.68 1585.93,1213.43 1586.51,1215.02 1587.1,1216.08 1587.68,1214.03 1588.27,1210.71 1588.86,1209.11 1589.44,1210.74 1590.03,1212.47 1590.62,1213.97 1591.2,1213.94 1591.79,1213.23 1592.38,1214.35 1592.96,1217.37 1593.55,1217.11 1594.14,1214.95 1594.72,1215.13 1595.31,1218.09 1595.89,1218.04 1596.48,1216.21 1597.07,1215.63 1597.65,1216.69 1598.24,1216.46 1598.83,1219.01 1599.41,1218.46 1600,1220.11 1600.59,1219.53 1601.17,1221.2 1601.76,1217.35 1602.34,1212.24 1602.93,1211.83 1603.52,1213.24 1604.1,1211.59 1604.69,1211.27 1605.28,1211.57 1605.86,1210.1 1606.45,1210.08 1607.04,1213.18 1607.62,1209.91 1608.21,1209.93 1608.8,1211.4 1609.38,1211.2 1609.97,1209.41 1610.55,1209.55 1611.14,1209.8 1611.73,1208.01 1612.31,1208.24 1612.9,1209.85 1613.49,1211.14 1614.07,1210.92 1614.66,1212.43 1615.25,1209.19 1615.83,1210.9 1616.42,1209.26 1617.01,1212.38 1617.59,1212.25 1618.18,1214.02 1618.76,1213.94 1619.35,1216.87 1619.94,1219.67 1620.52,1219.4 1621.11,1220.03 1621.7,1221.08 1622.28,1219.05 1622.87,1218.52 1623.46,1219.52 1624.04,1221.95 1624.63,1219.78 1625.22,1217.82 1625.8,1217.33 1626.39,1214.03 1626.97,1211.85 1627.56,1214.86 1628.15,1214.69 1628.73,1211.24 1629.32,1209.51 1629.91,1211.02 1630.49,1207.52 1631.08,1207.57 1631.67,1206.22 1632.25,1209.44 1632.84,1209.28 1633.42,1207.88 1634.01,1207.67 1634.6,1207.86 1635.18,1209.75 1635.77,1209.88 1636.36,1208.65 1636.94,1208.71 1637.53,1209.12 1638.12,1210.48 1638.7,1210.6 1639.29,1210.97 1639.88,1206.47 1640.46,1203.74 1641.05,1202.52 1641.63,1202.5 1642.22,1204.75 1642.81,1203.79 1643.39,1205.55 1643.98,1206.2 1644.57,1206.56 1645.15,1209.85 1645.74,1209.96 1646.33,1209.99 1646.91,1208.43 1647.5,1210.33 1648.09,1204.07 1648.67,1202.64 1649.26,1201.45 1649.84,1206.72 1650.43,1205.4 1651.02,1205.89 1651.6,1209.77 1652.19,1210.19 1652.78,1213.24 1653.36,1210.03 1653.95,1211.3 1654.54,1209.49 1655.12,1214.32 1655.71,1210.91 1656.29,1209.21 1656.88,1212.36 1657.47,1213.77 1658.05,1213.88 1658.64,1212.15 1659.23,1211.92 1659.81,1211.67 1660.4,1213.32 1660.99,1214.73 1661.57,1214.41 1662.16,1215.58 1662.75,1213.63 1663.33,1216.82 1663.92,1216.27 1664.5,1214.16 1665.09,1212.5 1665.68,1212.45 1666.26,1213.97 1666.85,1215.49 1667.44,1219.95 1668.02,1219.68 1668.61,1215.83 1669.2,1214.03 1669.78,1213.86 1670.37,1214.01 1670.96,1212.19 1671.54,1213.93 1672.13,1213.93 1672.71,1210.93 1673.3,1212.64 1673.89,1214.23 1674.47,1209.29 1675.06,1208.89 1675.65,1207.35 1676.23,1204.32 1676.82,1206.28 1677.41,1206.78 1677.99,1207.01 1678.58,1207.2 1679.17,1205.84 1679.75,1206.26 1680.34,1208.19 1680.92,1208.03 1681.51,1207.82 1682.1,1207.82 1682.68,1204.56 1683.27,1206.51 1683.86,1203.77 1684.44,1205.63 1685.03,1205.74 1685.62,1203.33 1686.2,1205.18 1686.79,1202.32 1687.37,1207.69 1687.96,1207.88 1688.55,1209.54 1689.13,1209.36 1689.72,1212.6 1690.31,1212.49 1690.89,1213.82 1691.48,1213.32 1692.07,1214.8 1692.65,1212.9 1693.24,1212.65 1693.83,1210.99 1694.41,1211.08 1695,1212.98 1695.58,1216.11 1696.17,1215.65 1696.76,1215.46 1697.34,1216.81 1697.93,1219.51 1698.52,1217.71 1699.1,1217.25 1699.69,1216.81 1700.28,1217.66 1700.86,1218.62 1701.45,1218.12 1702.04,1220.68 1702.62,1223.35 1703.21,1227.34 1703.79,1223.62 1704.38,1226.15 1704.97,1225 1705.55,1224.02 1706.14,1220.17 1706.73,1219.46 1707.31,1218.97 1707.9,1216.75 1708.49,1214.75 1709.07,1211.45 1709.66,1211.33 1710.24,1211.05 1710.83,1211.26 1711.42,1209.58 1712,1211.25 1712.59,1211.27 1713.18,1211.34 1713.76,1211.24 1714.35,1209.24 1714.94,1209.4 1715.52,1204.41 1716.11,1206.4 1716.7,1212.64 1717.28,1210.58 1717.87,1212.05 1718.45,1210.43 1719.04,1205.74 1719.63,1208.64 1720.21,1211.89 1720.8,1212.05 1721.39,1212.07 1721.97,1215.19 1722.56,1216.31 1723.15,1212.92 1723.73,1208.16 1724.32,1211.79 1724.91,1210.2 1725.49,1205.68 1726.08,1204.21 1726.66,1203.11 1727.25,1206.78 1727.84,1210.16 1728.42,1210.17 1729.01,1208.65 1729.6,1208.85 1730.18,1208.7 1730.77,1207.25 1731.36,1204.79 1731.94,1202.63 1732.53,1203.14 1733.11,1204.99 1733.7,1203.72 1734.29,1202.4 1734.87,1201.42 1735.46,1201.98 1736.05,1200.56 1736.63,1202.68 1737.22,1207.92 1737.81,1206.71 1738.39,1207.33 1738.98,1212.01 1739.57,1211.91 1740.15,1213.63 1740.74,1216.29 1741.32,1216.1 1741.91,1214.02 1742.5,1211.87 1743.08,1212.2 1743.67,1215.08 1744.26,1214.97 1744.84,1218.04 1745.43,1218.02 1746.02,1217.9 1746.6,1220.75 1747.19,1221.95 1747.78,1219.87 1748.36,1219.24 1748.95,1219.25 1749.53,1220.28 1750.12,1219.61 1750.71,1217.52 1751.29,1215.33 1751.88,1215.27 1752.47,1214.98 1753.05,1214.43 1753.64,1217.31 1754.23,1218.6 1754.81,1219.66 1755.4,1216.09 1755.99,1209.35 1756.57,1210.95 1757.16,1209.3 1757.74,1207.75 1758.33,1209.39 1758.92,1209.64 1759.5,1211.34 1760.09,1210.97 1760.68,1209.73 1761.26,1211.31 1761.85,1209.45 1762.44,1212.64 1763.02,1212.36 1763.61,1209.4 1764.19,1211.23 1764.78,1212.26 1765.37,1218.9 1765.95,1213.45 1766.54,1216.4 1767.13,1214.63 1767.71,1213.28 1768.3,1216.15 1768.89,1211.37 1769.47,1209.6 1770.06,1209.82 1770.65,1208.25 1771.23,1210.28 1771.82,1210.52 1772.4,1210.74 1772.99,1209.21 1773.58,1207.25 1774.16,1207.44 1774.75,1207.38 1775.34,1209.14 1775.92,1210.71 1776.51,1208.87 1777.1,1208.98 1777.68,1210.59 1778.27,1207.86 1778.86,1201.8 1779.44,1202.48 1780.03,1203.11 1780.61,1205.04 1781.2,1205.26 1781.79,1205.17 1782.37,1202.02 1782.96,1200.92 1783.55,1201.31 1784.13,1203.17 1784.72,1205.38 1785.31,1202.73 1785.89,1201.32 1786.48,1201.53 1787.06,1202.41 1787.65,1201.45 1788.24,1201.91 1788.82,1203.91 1789.41,1205.61 1790,1209.19 1790.58,1210.88 1791.17,1209.48 1791.76,1211.25 1792.34,1209.67 1792.93,1211.51 1793.52,1214.28 1794.1,1214.07 1794.69,1212.19 1795.27,1210.55 1795.86,1212.11 1796.45,1211.84 1797.03,1211.5 1797.62,1214.49 1798.21,1215.57 1798.79,1222.92 1799.38,1222.42 1799.97,1218.73 1800.55,1218.55 1801.14,1218.23 1801.73,1214.65 1802.31,1214.56 1802.9,1211.43 1803.48,1211.79 1804.07,1211.87 1804.66,1213.27 1805.24,1209.91 1805.83,1208.34 1806.42,1210.2 1807,1207.35 1807.59,1209.11 1808.18,1207.57 1808.76,1210.65 1809.35,1208.9 1809.94,1209.13 1810.52,1207.54 1811.11,1209.48 1811.69,1211.52 1812.28,1213.23 1812.87,1211.83 1813.45,1213.14 1814.04,1212.75 1814.63,1212.85 1815.21,1211.27 1815.8,1216.07 1816.39,1215.97 1816.97,1217.83 1817.56,1219.08 1818.14,1215.47 1818.73,1215.42 1819.32,1218.17 1819.9,1220.78 1820.49,1221.77 1821.08,1224.21 1821.66,1225.02 1822.25,1222.78 1822.84,1220.73 1823.42,1220.19 1824.01,1219.64 1824.6,1214.57 1825.18,1212.97 1825.77,1212.69 1826.35,1210.95 1826.94,1214.11 1827.53,1212.45 1828.11,1212.31 1828.7,1211.14 1829.29,1213.12 1829.87,1211.47 1830.46,1214.54 1831.05,1212.57 1831.63,1212.43 1832.22,1209.43 1832.81,1211.05 1833.39,1210.85 1833.98,1206.11 1834.56,1207.55 1835.15,1209.2 1835.74,1210.54 1836.32,1207.5 1836.91,1207.79 1837.5,1207.97 1838.08,1206.31 1838.67,1203.43 1839.26,1202.38 1839.84,1198.25 1840.43,1197.47 1841.01,1199.88 1841.6,1198.72 1842.19,1200.75 1842.77,1209.18 1843.36,1211.11 1843.95,1212.95 1844.53,1214.6 1845.12,1212.78 1845.71,1209.5 1846.29,1210.81 1846.88,1209.01 1847.47,1213.8 1848.05,1211.99 1848.64,1210.39 1849.22,1208.95 1849.81,1209.53 1850.4,1209.53 1850.98,1206.71 1851.57,1208.53 1852.16,1207.26 1852.74,1210.45 1853.33,1211.98 1853.92,1214.84 1854.5,1214.44 1855.09,1211.22 1855.68,1209.84 1856.26,1209.88 1856.85,1208.27 1857.43,1210.13 1858.02,1210.36 1858.61,1208.66 1859.19,1210.67 1859.78,1210.87 1860.37,1212.3 1860.95,1215.72 1861.54,1212.28 1862.13,1211.72 1862.71,1210.16 1863.3,1208.63 1863.88,1208.71 1864.47,1213.7 1865.06,1216.55 1865.64,1217.74 1866.23,1215.45 1866.82,1212.32 1867.4,1212.2 1867.99,1210.33 1868.58,1210.38 1869.16,1212.3 1869.75,1210.58 1870.34,1209.16 1870.92,1207.63 1871.51,1209.68 1872.09,1211.18 1872.68,1211.08 1873.27,1207.81 1873.85,1208.07 1874.44,1206.84 1875.03,1207.33 1875.61,1210.45 1876.2,1210.26 1876.79,1210.49 1877.37,1208.95 1877.96,1207.71 1878.55,1207.5 1879.13,1207.59 1879.72,1209.74 1880.3,1206.51 1880.89,1208.19 1881.48,1208.45 1882.06,1210.06 1882.65,1213.42 1883.24,1210.17 1883.82,1211.86 1884.41,1210.02 1885,1208.28 1885.58,1206.99 1886.17,1207.09 1886.76,1209.99 1887.34,1206.98 1887.93,1207.17 1888.51,1205.81 1889.1,1212.43 1889.69,1212.22 1890.27,1212.18 1890.86,1211.85 1891.45,1213.07 1892.03,1214.35 1892.62,1214.17 1893.21,1217.06 1893.79,1218.05 1894.38,1215.69 1894.96,1216.63 1895.55,1216.39 1896.14,1216.36 1896.72,1214.59 1897.31,1215.95 1897.9,1215.9 1898.48,1214.42 1899.07,1214.15 1899.66,1209.17 1900.24,1210.89 1900.83,1212.2 1901.42,1210.59 1902,1209.28 1902.59,1208.31 1903.17,1206.66 1903.76,1208.5 1904.35,1210.25 1904.93,1210.65 1905.52,1210.72 1906.11,1212.2 1906.69,1214.11 1907.28,1213.99 1907.87,1212.28 1908.45,1209.02 1909.04,1209.14 1909.63,1209.3 1910.21,1209.51 1910.8,1212.83 1911.38,1207.73 1911.97,1208.14 1912.56,1208.14 1913.14,1208.39 1913.73,1210.1 1914.32,1210.06 1914.9,1211.79 1915.49,1211.96 1916.08,1211.84 1916.66,1211.94 1917.25,1211.78 1917.83,1211.54 1918.42,1211.74 1919.01,1210.32 1919.59,1213.75 1920.18,1215.25 1920.77,1218.32 1921.35,1219.29 1921.94,1218.75 1922.53,1221.59 1923.11,1217.74 1923.7,1215.77 1924.29,1215.41 1924.87,1216.83 1925.46,1217.84 1926.04,1217.57 1926.63,1217.44 1927.22,1216.85 1927.8,1221 1928.39,1220.26 1928.98,1218.15 1929.56,1217.97 1930.15,1219.02 1930.74,1220.07 1931.32,1216.77 1931.91,1214.78 1932.5,1216.25 1933.08,1215.99 1933.67,1213.94 1934.25,1211.8 1934.84,1211.74 1935.43,1210.09 1936.01,1210.04 1936.6,1205.19 1937.19,1205.4 1937.77,1203.98 1938.36,1202.81 1938.95,1204.96 1939.53,1205.4 1940.12,1205.73 1940.71,1204.47 1941.29,1203.49 1941.88,1202.08 1942.46,1201 1943.05,1198.11 1943.64,1200.37 1944.22,1202.54 1944.81,1201.42 1945.4,1209.77 1945.98,1208.11 1946.57,1206.66 1947.16,1206.89 1947.74,1207.27 1948.33,1207.58 1948.91,1206.2 1949.5,1204.66 1950.09,1203.42 1950.67,1204.38 1951.26,1206.26 1951.85,1206.4 1952.43,1208.33 1953.02,1210.2 1953.61,1211.76 1954.19,1212.91 1954.78,1212.83 1955.37,1212.57 1955.95,1212.29 1956.54,1211.89 1957.12,1211.93 1957.71,1214.99 1958.3,1210.09 1958.88,1213.23 1959.47,1213.15 1960.06,1213.12 1960.64,1213.1 1961.23,1209.94 1961.82,1211.72 1962.4,1214.64 1962.99,1213.12 1963.58,1212.86 1964.16,1212.47 1964.75,1212.23 1965.33,1210.4 1965.92,1210.25 1966.51,1208.73 1967.09,1210.24 1967.68,1210.47 1968.27,1211.84 1968.85,1210.34 1969.44,1210.18 1970.03,1211.73 1970.61,1206.73 1971.2,1206.84 1971.78,1205.46 1972.37,1205.98 1972.96,1207.93 1973.54,1203.77 1974.13,1202.58 1974.72,1201.44 1975.3,1200.42 1975.89,1197.84 1976.48,1200.26 1977.06,1199.24 1977.65,1201.28 1978.24,1205.15 1978.82,1207.6 1979.41,1209.25 1979.99,1206.21 1980.58,1203.39 1981.17,1205.15 1981.75,1205.62 1982.34,1207.73 1982.93,1208.07 1983.51,1206.25 1984.1,1206.29 1984.69,1204.98 1985.27,1205.52 1985.86,1205.88 1986.45,1206.27 1987.03,1204.89 1987.62,1208.45 1988.2,1210.53 1988.79,1210.58 1989.38,1209.13 1989.96,1208.06 1990.55,1211.34 1991.14,1212.89 1991.72,1212.87 1992.31,1213.39 1992.9,1214.77 1993.48,1214.28 1994.07,1212.69 1994.65,1213.95 1995.24,1209.1 1995.83,1215.57 1996.41,1219.84 1997,1218.18 1997.59,1216.05 1998.17,1215.67 1998.76,1216.99 1999.35,1216.7 1999.93,1218.26 2000.52,1220.88 2001.11,1221.84 2001.69,1218.04 2002.28,1212.94 2002.86,1214.12 2003.45,1215.43 2004.04,1213.25 2004.62,1214.29 2005.21,1213.92 2005.8,1210.54 2006.38,1212.05 2006.97,1210.61 2007.56,1212.25 2008.14,1213.49 2008.73,1213.33 2009.32,1214.93 2009.9,1212.85 2010.49,1211.36 2011.07,1212.8 2011.66,1215.97 2012.25,1213.79 2012.83,1213.17 2013.42,1213.36 2014.01,1215.03 2014.59,1213.27 2015.18,1211.46 2015.77,1209.55 2016.35,1206.11 2016.94,1212.37 2017.53,1212.38 2018.11,1214.23 2018.7,1210.62 2019.28,1212.25 2019.87,1213.74 2020.46,1210.27 2021.04,1209.89 2021.63,1208.47 2022.22,1209.98 2022.8,1211.58 2023.39,1209.78 2023.98,1211.05 2024.56,1208.07 2025.15,1208.38 2025.73,1207.2 2026.32,1209.3 2026.91,1213.97 2027.49,1215.41 2028.08,1215.14 2028.67,1214.79 2029.25,1214.68 2029.84,1216.02 2030.43,1220.62 2031.01,1218.35 2031.6,1213.45 2032.19,1212 2032.77,1212.32 2033.36,1212.48 2033.94,1213.85 2034.53,1216.64 2035.12,1219.28 2035.7,1219.04 2036.29,1216.85 2036.88,1218.09 2037.46,1217.79 2038.05,1217.51 2038.64,1217.14 2039.22,1219.87 2039.81,1221.27 2040.4,1220.75 2040.98,1220.41 2041.57,1213.42 2042.15,1216.18 2042.74,1212.98 2043.33,1215.95 2043.91,1217.05 2044.5,1218.22 2045.09,1216.2 2045.67,1217.4 2046.26,1217.08 2046.85,1221.47 2047.43,1217.92 2048.02,1216.11 2048.6,1209.68 2049.19,1209.47 2049.78,1206.29 2050.36,1209.33 2050.95,1211.16 2051.54,1209.33 2052.12,1209.37 2052.71,1206.33 2053.3,1206.58 2053.88,1205.19 2054.47,1203.71 2055.06,1202.58 2055.64,1201.58 2056.23,1200.51 2056.81,1200.91 2057.4,1200.04 2057.99,1197.78 2058.57,1200.06 2059.16,1198.98 2059.75,1201.15 2060.33,1201.92 2060.92,1207.2 2061.51,1205.86 2062.09,1199.74 2062.68,1200.59 2063.27,1199.22 2063.85,1198.33 2064.44,1200.58 2065.02,1201.44 2065.61,1202.01 2066.2,1200.99 2066.78,1201.47 2067.37,1200.13 2067.96,1202.53 2068.54,1207.81 2069.13,1208.16 2069.72,1202.1 2070.3,1202.7 2070.89,1200.01 2071.48,1202.02 2072.06,1199.35 2072.65,1198.7 2073.23,1205.96 2073.82,1205.85 2074.41,1208.04 2074.99,1211.31 2075.58,1212.92 2076.17,1209.75 2076.75,1208.43 2077.34,1211.81 2077.93,1211.91 2078.51,1215.02 2079.1,1214.97 2079.68,1214.59 2080.27,1219.34 2080.86,1218.89 2081.44,1218.57 2082.03,1216.92 2082.62,1218.23 2083.2,1217.97 2083.79,1215.87 2084.38,1215.18 2084.96,1214.61 2085.55,1216.07 2086.14,1217.32 2086.72,1216.95 2087.31,1213.4 2087.89,1213.28 2088.48,1208.46 2089.07,1208.7 2089.65,1205.73 2090.24,1205.78 2090.83,1206.06 2091.41,1207.77 2092,1207.76 2092.59,1201.55 2093.17,1201.95 2093.76,1204.27 2094.35,1203.41 2094.93,1205.85 2095.52,1202.98 2096.1,1200.65 2096.69,1199.71 2097.28,1203.86 2097.86,1202.67 2098.45,1201.47 2099.04,1203.33 2099.62,1205.21 2100.21,1205.62 2100.8,1205.76 2101.38,1204.09 2101.97,1205.8 2102.55,1207.77 2103.14,1209.76 2103.73,1209.64 2104.31,1211.26 2104.9,1211.5 2105.49,1212.96 2106.07,1209.66 2106.66,1208.04 2107.25,1208.39 2107.83,1211.88 2108.42,1210.32 2109.01,1208.58 2109.59,1206.87 2110.18,1209.05 2110.76,1208.99 2111.35,1212.2 2111.94,1210.71 2112.52,1214.1 2113.11,1215.6 2113.7,1213.5 2114.28,1212.18 2114.87,1210.73 2115.46,1212.49 2116.04,1213.96 2116.63,1213.47 2117.22,1211.85 2117.8,1211.95 2118.39,1211.46 2118.97,1212.93 2119.56,1209.75 2120.15,1210.12 2120.73,1208.75 2121.32,1208.7 2121.91,1208.57 2122.49,1210.64 2123.08,1210.64 2123.67,1212.26 2124.25,1212.06 2124.84,1211.77 2125.42,1213.37 2126.01,1215.09 2126.6,1214.83 2127.18,1216.33 2127.77,1214.33 2128.36,1213.64 2128.94,1213.52 2129.53,1214.94 2130.12,1213.08 2130.7,1211.07 2131.29,1207.79 2131.88,1208.02 2132.46,1212.84 2133.05,1210.94 2133.63,1207.85 2134.22,1211.09 2134.81,1213.02 2135.39,1209.61 2135.98,1209.52 2136.57,1207.85 2137.15,1211.31 2137.74,1213.26 2138.33,1209.92 2138.91,1211.28 2139.5,1218.97 2140.09,1213.85 2140.67,1213.68 2141.26,1210.24 2141.84,1209.9 2142.43,1209.95 2143.02,1208.72 2143.6,1210.3 2144.19,1213.29 2144.78,1214.76 2145.36,1214.57 2145.95,1212.71 2146.54,1210.72 2147.12,1210.41 2147.71,1210.46 2148.3,1210.4 2148.88,1210.47 2149.47,1211.76 2150.05,1211.6 2150.64,1211.43 2151.23,1210.07 2151.81,1210.17 2152.4,1211.74 2152.99,1213.17 2153.57,1214.27 2154.16,1213.75 2154.75,1213.83 2155.33,1217.04 2155.92,1216.74 2156.5,1217.86 2157.09,1217.43 2157.68,1217.29 2158.26,1215.38 \"/>\n<path clip-path=\"url(#clip092)\" d=\"M986.025 1211.46 L986.612 1211.46 L987.198 1211.46 L987.785 1211.46 L988.371 1211.46 L988.957 1211.46 L989.544 1211.46 L990.13 1211.46 L990.717 1211.46 L991.303 1211.46 L991.889 1211.46 L992.476 1211.46 L993.062 1211.46 L993.649 1211.46 L994.235 1211.46 L994.822 1211.46 L995.408 1211.46 L995.994 1211.46 L996.581 1211.46 L997.167 1211.46 L997.754 1211.46 L998.34 1211.46 L998.926 1211.46 L999.513 1211.46 L1000.1 1211.46 L1000.69 1211.46 L1001.27 1211.46 L1001.86 1211.46 L1002.44 1211.46 L1003.03 1211.46 L1003.62 1211.46 L1004.2 1211.46 L1004.79 1211.46 L1005.38 1211.46 L1005.96 1211.46 L1006.55 1211.46 L1007.14 1211.46 L1007.72 1211.46 L1008.31 1211.46 L1008.9 1211.46 L1009.48 1211.46 L1010.07 1211.46 L1010.65 1211.46 L1011.24 1211.46 L1011.83 1211.46 L1012.41 1211.46 L1013 1211.46 L1013.59 1211.46 L1014.17 1211.46 L1014.76 1211.46 L1015.35 1211.46 L1015.93 1211.46 L1016.52 1211.46 L1017.11 1211.46 L1017.69 1211.46 L1018.28 1211.46 L1018.86 1211.46 L1019.45 1211.46 L1020.04 1211.46 L1020.62 1211.46 L1021.21 1211.46 L1021.8 1211.46 L1022.38 1211.46 L1022.97 1211.46 L1023.56 1211.46 L1024.14 1211.46 L1024.73 1211.46 L1025.32 1211.46 L1025.9 1211.46 L1026.49 1211.46 L1027.07 1211.46 L1027.66 1211.46 L1028.25 1211.46 L1028.83 1211.46 L1029.42 1211.46 L1030.01 1211.46 L1030.59 1211.46 L1031.18 1211.46 L1031.77 1211.46 L1032.35 1211.46 L1032.94 1211.46 L1033.52 1211.46 L1034.11 1211.46 L1034.7 1211.46 L1035.28 1211.46 L1035.87 1211.46 L1036.46 1211.46 L1037.04 1211.46 L1037.63 1211.46 L1038.22 1211.46 L1038.8 1211.46 L1039.39 1211.46 L1039.98 1211.46 L1040.56 1211.46 L1041.15 1211.46 L1041.73 1211.46 L1042.32 1211.46 L1042.91 1211.46 L1043.49 1211.46 L1044.08 1211.46 L1044.67 1211.46 L1045.25 1211.46 L1045.84 1211.46 L1046.43 1211.46 L1047.01 1211.46 L1047.6 1211.46 L1048.19 1211.46 L1048.77 1211.46 L1049.36 1211.46 L1049.94 1211.46 L1050.53 1211.46 L1051.12 1211.46 L1051.7 1211.46 L1052.29 1211.46 L1052.88 1211.46 L1053.46 1211.46 L1054.05 1211.46 L1054.64 1211.46 L1055.22 1211.46 L1055.81 1211.46 L1056.39 1211.46 L1056.98 1211.46 L1057.57 1211.46 L1058.15 1211.46 L1058.74 1211.46 L1059.33 1211.46 L1059.91 1211.46 L1060.5 1211.46 L1061.09 1211.46 L1061.67 1211.46 L1062.26 1211.46 L1062.85 1211.46 L1063.43 1211.46 L1064.02 1211.46 L1064.6 1211.46 L1065.19 1211.46 L1065.78 1211.46 L1066.36 1211.46 L1066.95 1211.46 L1067.54 1211.46 L1068.12 1211.46 L1068.71 1211.46 L1069.3 1211.46 L1069.88 1211.46 L1070.47 1211.46 L1071.06 1211.46 L1071.64 1211.46 L1072.23 1211.46 L1072.81 1211.46 L1073.4 1211.46 L1073.99 1211.46 L1074.57 1211.46 L1075.16 1211.46 L1075.75 1211.46 L1076.33 1211.46 L1076.92 1211.46 L1077.51 1211.46 L1078.09 1211.46 L1078.68 1211.46 L1079.26 1211.46 L1079.85 1211.46 L1080.44 1211.46 L1081.02 1211.46 L1081.61 1211.46 L1082.2 1211.46 L1082.78 1211.46 L1083.37 1211.46 L1083.96 1211.46 L1084.54 1211.46 L1085.13 1211.46 L1085.72 1211.46 L1086.3 1211.46 L1086.89 1211.46 L1087.47 1211.46 L1088.06 1211.46 L1088.65 1211.46 L1089.23 1211.46 L1089.82 1211.46 L1090.41 1211.46 L1090.99 1211.46 L1091.58 1211.46 L1092.17 1211.46 L1092.75 1211.46 L1093.34 1211.46 L1093.93 1211.46 L1094.51 1211.46 L1095.1 1211.46 L1095.68 1211.46 L1096.27 1211.46 L1096.86 1211.46 L1097.44 1211.46 L1098.03 1211.46 L1098.62 1211.46 L1099.2 1211.46 L1099.79 1211.46 L1100.38 1211.46 L1100.96 1211.46 L1101.55 1211.46 L1102.14 1211.46 L1102.72 1211.46 L1103.31 1211.46 L1103.89 1211.46 L1104.48 1211.46 L1105.07 1211.46 L1105.65 1211.46 L1106.24 1211.46 L1106.83 1211.46 L1107.41 1211.46 L1108 1211.46 L1108.59 1211.46 L1109.17 1211.46 L1109.76 1211.46 L1110.34 1211.46 L1110.93 1211.46 L1111.52 1211.46 L1112.1 1211.46 L1112.69 1211.46 L1113.28 1211.46 L1113.86 1211.46 L1114.45 1211.46 L1115.04 1211.46 L1115.62 1211.46 L1116.21 1211.46 L1116.8 1211.46 L1117.38 1211.46 L1117.97 1211.46 L1118.55 1211.46 L1119.14 1211.46 L1119.73 1211.46 L1120.31 1211.46 L1120.9 1211.46 L1121.49 1211.46 L1122.07 1211.46 L1122.66 1211.46 L1123.25 1211.46 L1123.83 1211.46 L1124.42 1211.46 L1125.01 1211.46 L1125.59 1211.46 L1126.18 1211.46 L1126.76 1211.46 L1127.35 1211.46 L1127.94 1211.46 L1128.52 1211.46 L1129.11 1211.46 L1129.7 1211.46 L1130.28 1211.46 L1130.87 1211.46 L1131.46 1211.46 L1132.04 1211.46 L1132.63 1211.46 L1133.21 1211.46 L1133.8 1211.46 L1134.39 1211.46 L1134.97 1211.46 L1135.56 1211.46 L1136.15 1211.46 L1136.73 1211.46 L1137.32 1211.46 L1137.91 1211.46 L1138.49 1211.46 L1139.08 1211.46 L1139.67 1211.46 L1140.25 1211.46 L1140.84 1211.46 L1141.42 1211.46 L1142.01 1211.46 L1142.6 1211.46 L1143.18 1211.46 L1143.77 1211.46 L1144.36 1211.46 L1144.94 1211.46 L1145.53 1211.46 L1146.12 1211.46 L1146.7 1211.46 L1147.29 1211.46 L1147.88 1211.46 L1148.46 1211.46 L1149.05 1211.46 L1149.63 1211.46 L1150.22 1211.46 L1150.81 1211.46 L1151.39 1211.46 L1151.98 1211.46 L1152.57 1211.46 L1153.15 1211.46 L1153.74 1211.46 L1154.33 1211.46 L1154.91 1211.46 L1155.5 1211.46 L1156.09 1211.46 L1156.67 1211.46 L1157.26 1211.46 L1157.84 1211.46 L1158.43 1211.46 L1159.02 1211.46 L1159.6 1211.46 L1160.19 1211.46 L1160.78 1211.46 L1161.36 1211.46 L1161.95 1211.46 L1162.54 1211.46 L1163.12 1211.46 L1163.71 1211.46 L1164.29 1211.46 L1164.88 1211.46 L1165.47 1211.46 L1166.05 1211.46 L1166.64 1211.46 L1167.23 1211.46 L1167.81 1211.46 L1168.4 1211.46 L1168.99 1211.46 L1169.57 1211.46 L1170.16 1211.46 L1170.75 1211.46 L1171.33 1211.46 L1171.92 1211.46 L1172.5 1211.46 L1173.09 1211.46 L1173.68 1211.46 L1174.26 1211.46 L1174.85 1211.46 L1175.44 1211.46 L1176.02 1211.46 L1176.61 1211.46 L1177.2 1211.46 L1177.78 1211.46 L1178.37 1211.46 L1178.96 1211.46 L1179.54 1211.46 L1180.13 1211.46 L1180.71 1211.46 L1181.3 1211.46 L1181.89 1211.46 L1182.47 1211.46 L1183.06 1211.46 L1183.65 1211.46 L1184.23 1211.46 L1184.82 1211.46 L1185.41 1211.46 L1185.99 1211.46 L1186.58 1211.46 L1187.16 1211.46 L1187.75 1211.46 L1188.34 1211.46 L1188.92 1211.46 L1189.51 1211.46 L1190.1 1211.46 L1190.68 1211.46 L1191.27 1211.46 L1191.86 1211.46 L1192.44 1211.46 L1193.03 1211.46 L1193.62 1211.46 L1194.2 1211.46 L1194.79 1211.46 L1195.37 1211.46 L1195.96 1211.46 L1196.55 1211.46 L1197.13 1211.46 L1197.72 1211.46 L1198.31 1211.46 L1198.89 1211.46 L1199.48 1211.46 L1200.07 1211.46 L1200.65 1211.46 L1201.24 1211.46 L1201.83 1211.46 L1202.41 1211.46 L1203 1211.46 L1203.58 1211.46 L1204.17 1211.46 L1204.76 1211.46 L1205.34 1211.46 L1205.93 1211.46 L1206.52 1211.46 L1207.1 1211.46 L1207.69 1211.46 L1208.28 1211.46 L1208.86 1211.46 L1209.45 1211.46 L1210.03 1211.46 L1210.62 1211.46 L1211.21 1211.46 L1211.79 1211.46 L1212.38 1211.46 L1212.97 1211.46 L1213.55 1211.46 L1214.14 1211.46 L1214.73 1211.46 L1215.31 1211.46 L1215.9 1211.46 L1216.49 1211.46 L1217.07 1211.46 L1217.66 1211.46 L1218.24 1211.46 L1218.83 1211.46 L1219.42 1211.46 L1220 1211.46 L1220.59 1211.46 L1221.18 1211.46 L1221.76 1211.46 L1222.35 1211.46 L1222.94 1211.46 L1223.52 1211.46 L1224.11 1211.46 L1224.7 1211.46 L1225.28 1211.46 L1225.87 1211.46 L1226.45 1211.46 L1227.04 1211.46 L1227.63 1211.46 L1228.21 1211.46 L1228.8 1211.46 L1229.39 1211.46 L1229.97 1211.46 L1230.56 1211.46 L1231.15 1211.46 L1231.73 1211.46 L1232.32 1211.46 L1232.91 1211.46 L1233.49 1211.46 L1234.08 1211.46 L1234.66 1211.46 L1235.25 1211.46 L1235.84 1211.46 L1236.42 1211.46 L1237.01 1211.46 L1237.6 1211.46 L1238.18 1211.46 L1238.77 1211.46 L1239.36 1211.46 L1239.94 1211.46 L1240.53 1211.46 L1241.11 1211.46 L1241.7 1211.46 L1242.29 1211.46 L1242.87 1211.46 L1243.46 1211.46 L1244.05 1211.46 L1244.63 1211.46 L1245.22 1211.46 L1245.81 1211.46 L1246.39 1211.46 L1246.98 1211.46 L1247.57 1211.46 L1248.15 1211.46 L1248.74 1211.46 L1249.32 1211.46 L1249.91 1211.46 L1250.5 1211.46 L1251.08 1211.46 L1251.67 1211.46 L1252.26 1211.46 L1252.84 1211.46 L1253.43 1211.46 L1254.02 1211.46 L1254.6 1211.46 L1255.19 1211.46 L1255.78 1211.46 L1256.36 1211.46 L1256.95 1211.46 L1257.53 1211.46 L1258.12 1211.46 L1258.71 1211.46 L1259.29 1211.46 L1259.88 1211.46 L1260.47 1211.46 L1261.05 1211.46 L1261.64 1211.46 L1262.23 1211.46 L1262.81 1211.46 L1263.4 1211.46 L1263.98 1211.46 L1264.57 1211.46 L1265.16 1211.46 L1265.74 1211.46 L1266.33 1211.46 L1266.92 1211.46 L1267.5 1211.46 L1268.09 1211.46 L1268.68 1211.46 L1269.26 1211.46 L1269.85 1211.46 L1270.44 1211.46 L1271.02 1211.46 L1271.61 1211.46 L1272.19 1211.46 L1272.78 1211.46 L1273.37 1211.46 L1273.95 1211.46 L1274.54 1211.46 L1275.13 1211.46 L1275.71 1211.46 L1276.3 1211.46 L1276.89 1211.46 L1277.47 1211.46 L1278.06 1211.46 L1278.65 1211.46 L1279.23 1211.46 L1279.82 1211.46 L1280.4 1211.46 L1280.99 1211.46 L1281.58 1211.46 L1282.16 1211.46 L1282.75 1211.46 L1283.34 1211.46 L1283.92 1211.46 L1284.51 1211.46 L1285.1 1211.46 L1285.68 1211.46 L1286.27 1211.46 L1286.86 1211.46 L1287.44 1211.46 L1288.03 1211.46 L1288.61 1211.46 L1289.2 1211.46 L1289.79 1211.46 L1290.37 1211.46 L1290.96 1211.46 L1291.55 1211.46 L1292.13 1211.46 L1292.72 1211.46 L1293.31 1211.46 L1293.89 1211.46 L1294.48 1211.46 L1295.06 1211.46 L1295.65 1211.46 L1296.24 1211.46 L1296.82 1211.46 L1297.41 1211.46 L1298 1211.46 L1298.58 1211.46 L1299.17 1211.46 L1299.76 1211.46 L1300.34 1211.46 L1300.93 1211.46 L1301.52 1211.46 L1302.1 1211.46 L1302.69 1211.46 L1303.27 1211.46 L1303.86 1211.46 L1304.45 1211.46 L1305.03 1211.46 L1305.62 1211.46 L1306.21 1211.46 L1306.79 1211.46 L1307.38 1211.46 L1307.97 1211.46 L1308.55 1211.46 L1309.14 1211.46 L1309.73 1211.46 L1310.31 1211.46 L1310.9 1211.46 L1311.48 1211.46 L1312.07 1211.46 L1312.66 1211.46 L1313.24 1211.46 L1313.83 1211.46 L1314.42 1211.46 L1315 1211.46 L1315.59 1211.46 L1316.18 1211.46 L1316.76 1211.46 L1317.35 1211.46 L1317.93 1211.46 L1318.52 1211.46 L1319.11 1211.46 L1319.69 1211.46 L1320.28 1211.46 L1320.87 1211.46 L1321.45 1211.46 L1322.04 1211.46 L1322.63 1211.46 L1323.21 1211.46 L1323.8 1211.46 L1324.39 1211.46 L1324.97 1211.46 L1325.56 1211.46 L1326.14 1211.46 L1326.73 1211.46 L1327.32 1211.46 L1327.9 1211.46 L1328.49 1211.46 L1329.08 1211.46 L1329.66 1211.46 L1330.25 1211.46 L1330.84 1211.46 L1331.42 1211.46 L1332.01 1211.46 L1332.6 1211.46 L1333.18 1211.46 L1333.77 1211.46 L1334.35 1211.46 L1334.94 1211.46 L1335.53 1211.46 L1336.11 1211.46 L1336.7 1211.46 L1337.29 1211.46 L1337.87 1211.46 L1338.46 1211.46 L1339.05 1211.46 L1339.63 1211.46 L1340.22 1211.46 L1340.8 1211.46 L1341.39 1211.46 L1341.98 1211.46 L1342.56 1211.46 L1343.15 1211.46 L1343.74 1211.46 L1344.32 1211.46 L1344.91 1211.46 L1345.5 1211.46 L1346.08 1211.46 L1346.67 1211.46 L1347.26 1211.46 L1347.84 1211.46 L1348.43 1211.46 L1349.01 1211.46 L1349.6 1211.46 L1350.19 1211.46 L1350.77 1211.46 L1351.36 1211.46 L1351.95 1211.46 L1352.53 1211.46 L1353.12 1211.46 L1353.71 1211.46 L1354.29 1211.46 L1354.88 1211.46 L1355.47 1211.46 L1356.05 1211.46 L1356.64 1211.46 L1357.22 1211.46 L1357.81 1211.46 L1358.4 1211.46 L1358.98 1211.46 L1359.57 1211.46 L1360.16 1211.46 L1360.74 1211.46 L1361.33 1211.46 L1361.92 1211.46 L1362.5 1211.46 L1363.09 1211.46 L1363.68 1211.46 L1364.26 1211.46 L1364.85 1211.46 L1365.43 1211.46 L1366.02 1211.46 L1366.61 1211.46 L1367.19 1211.46 L1367.78 1211.46 L1368.37 1211.46 L1368.95 1211.46 L1369.54 1211.46 L1370.13 1211.46 L1370.71 1211.46 L1371.3 1211.46 L1371.88 1211.46 L1372.47 1211.46 L1373.06 1211.46 L1373.64 1211.46 L1374.23 1211.46 L1374.82 1211.46 L1375.4 1211.46 L1375.99 1211.46 L1376.58 1211.46 L1377.16 1211.46 L1377.75 1211.46 L1378.34 1211.46 L1378.92 1211.46 L1379.51 1211.46 L1380.09 1211.46 L1380.68 1211.46 L1381.27 1211.46 L1381.85 1211.46 L1382.44 1211.46 L1383.03 1211.46 L1383.61 1211.46 L1384.2 1211.46 L1384.79 1211.46 L1385.37 1211.46 L1385.96 1211.46 L1386.55 1211.46 L1387.13 1211.46 L1387.72 1211.46 L1388.3 1211.46 L1388.89 1211.46 L1389.48 1211.46 L1390.06 1211.46 L1390.65 1211.46 L1391.24 1211.46 L1391.82 1211.46 L1392.41 1211.46 L1393 1211.46 L1393.58 1211.46 L1394.17 1211.46 L1394.75 1211.46 L1395.34 1211.46 L1395.93 1211.46 L1396.51 1211.46 L1397.1 1211.46 L1397.69 1211.46 L1398.27 1211.46 L1398.86 1211.46 L1399.45 1211.46 L1400.03 1211.46 L1400.62 1211.46 L1401.21 1211.46 L1401.79 1211.46 L1402.38 1211.46 L1402.96 1211.46 L1403.55 1211.46 L1404.14 1211.46 L1404.72 1211.46 L1405.31 1211.46 L1405.9 1211.46 L1406.48 1211.46 L1407.07 1211.46 L1407.66 1211.46 L1408.24 1211.46 L1408.83 1211.46 L1409.42 1211.46 L1410 1211.46 L1410.59 1211.46 L1411.17 1211.46 L1411.76 1211.46 L1412.35 1211.46 L1412.93 1211.46 L1413.52 1211.46 L1414.11 1211.46 L1414.69 1211.46 L1415.28 1211.46 L1415.87 1211.46 L1416.45 1211.46 L1417.04 1211.46 L1417.63 1211.46 L1418.21 1211.46 L1418.8 1211.46 L1419.38 1211.46 L1419.97 1211.46 L1420.56 1211.46 L1421.14 1211.46 L1421.73 1211.46 L1422.32 1211.46 L1422.9 1211.46 L1423.49 1211.46 L1424.08 1211.46 L1424.66 1211.46 L1425.25 1211.46 L1425.83 1211.46 L1426.42 1211.46 L1427.01 1211.46 L1427.59 1211.46 L1428.18 1211.46 L1428.77 1211.46 L1429.35 1211.46 L1429.94 1211.46 L1430.53 1211.46 L1431.11 1211.46 L1431.7 1211.46 L1432.29 1211.46 L1432.87 1211.46 L1433.46 1211.46 L1434.04 1211.46 L1434.63 1211.46 L1435.22 1211.46 L1435.8 1211.46 L1436.39 1211.46 L1436.98 1211.46 L1437.56 1211.46 L1438.15 1211.46 L1438.74 1211.46 L1439.32 1211.46 L1439.91 1211.46 L1440.5 1211.46 L1441.08 1211.46 L1441.67 1211.46 L1442.25 1211.46 L1442.84 1211.46 L1443.43 1211.46 L1444.01 1211.46 L1444.6 1211.46 L1445.19 1211.46 L1445.77 1211.46 L1446.36 1211.46 L1446.95 1211.46 L1447.53 1211.46 L1448.12 1211.46 L1448.7 1211.46 L1449.29 1211.46 L1449.88 1211.46 L1450.46 1211.46 L1451.05 1211.46 L1451.64 1211.46 L1452.22 1211.46 L1452.81 1211.46 L1453.4 1211.46 L1453.98 1211.46 L1454.57 1211.46 L1455.16 1211.46 L1455.74 1211.46 L1456.33 1211.46 L1456.91 1211.46 L1457.5 1211.46 L1458.09 1211.46 L1458.67 1211.46 L1459.26 1211.46 L1459.85 1211.46 L1460.43 1211.46 L1461.02 1211.46 L1461.61 1211.46 L1462.19 1211.46 L1462.78 1211.46 L1463.37 1211.46 L1463.95 1211.46 L1464.54 1211.46 L1465.12 1211.46 L1465.71 1211.46 L1466.3 1211.46 L1466.88 1211.46 L1467.47 1211.46 L1468.06 1211.46 L1468.64 1211.46 L1469.23 1211.46 L1469.82 1211.46 L1470.4 1211.46 L1470.99 1211.46 L1471.57 1211.46 L1472.16 1211.46 L1472.75 1211.46 L1473.33 1211.46 L1473.92 1211.46 L1474.51 1211.46 L1475.09 1211.46 L1475.68 1211.46 L1476.27 1211.46 L1476.85 1211.46 L1477.44 1211.46 L1478.03 1211.46 L1478.61 1211.46 L1479.2 1211.46 L1479.78 1211.46 L1480.37 1211.46 L1480.96 1211.46 L1481.54 1211.46 L1482.13 1211.46 L1482.72 1211.46 L1483.3 1211.46 L1483.89 1211.46 L1484.48 1211.46 L1485.06 1211.46 L1485.65 1211.46 L1486.24 1211.46 L1486.82 1211.46 L1487.41 1211.46 L1487.99 1211.46 L1488.58 1211.46 L1489.17 1211.46 L1489.75 1211.46 L1490.34 1211.46 L1490.93 1211.46 L1491.51 1211.46 L1492.1 1211.46 L1492.69 1211.46 L1493.27 1211.46 L1493.86 1211.46 L1494.45 1211.46 L1495.03 1211.46 L1495.62 1211.46 L1496.2 1211.46 L1496.79 1211.46 L1497.38 1211.46 L1497.96 1211.46 L1498.55 1211.46 L1499.14 1211.46 L1499.72 1211.46 L1500.31 1211.46 L1500.9 1211.46 L1501.48 1211.46 L1502.07 1211.46 L1502.65 1211.46 L1503.24 1211.46 L1503.83 1211.46 L1504.41 1211.46 L1505 1211.46 L1505.59 1211.46 L1506.17 1211.46 L1506.76 1211.46 L1507.35 1211.46 L1507.93 1211.46 L1508.52 1211.46 L1509.11 1211.46 L1509.69 1211.46 L1510.28 1211.46 L1510.86 1211.46 L1511.45 1211.46 L1512.04 1211.46 L1512.62 1211.46 L1513.21 1211.46 L1513.8 1211.46 L1514.38 1211.46 L1514.97 1211.46 L1515.56 1211.46 L1516.14 1211.46 L1516.73 1211.46 L1517.32 1211.46 L1517.9 1211.46 L1518.49 1211.46 L1519.07 1211.46 L1519.66 1211.46 L1520.25 1211.46 L1520.83 1211.46 L1521.42 1211.46 L1522.01 1211.46 L1522.59 1211.46 L1523.18 1211.46 L1523.77 1211.46 L1524.35 1211.46 L1524.94 1211.46 L1525.52 1211.46 L1526.11 1211.46 L1526.7 1211.46 L1527.28 1211.46 L1527.87 1211.46 L1528.46 1211.46 L1529.04 1211.46 L1529.63 1211.46 L1530.22 1211.46 L1530.8 1211.46 L1531.39 1211.46 L1531.98 1211.46 L1532.56 1211.46 L1533.15 1211.46 L1533.73 1211.46 L1534.32 1211.46 L1534.91 1211.46 L1535.49 1211.46 L1536.08 1211.46 L1536.67 1211.46 L1537.25 1211.46 L1537.84 1211.46 L1538.43 1211.46 L1539.01 1211.46 L1539.6 1211.46 L1540.19 1211.46 L1540.77 1211.46 L1541.36 1211.46 L1541.94 1211.46 L1542.53 1211.46 L1543.12 1211.46 L1543.7 1211.46 L1544.29 1211.46 L1544.88 1211.46 L1545.46 1211.46 L1546.05 1211.46 L1546.64 1211.46 L1547.22 1211.46 L1547.81 1211.46 L1548.4 1211.46 L1548.98 1211.46 L1549.57 1211.46 L1550.15 1211.46 L1550.74 1211.46 L1551.33 1211.46 L1551.91 1211.46 L1552.5 1211.46 L1553.09 1211.46 L1553.67 1211.46 L1554.26 1211.46 L1554.85 1211.46 L1555.43 1211.46 L1556.02 1211.46 L1556.6 1211.46 L1557.19 1211.46 L1557.78 1211.46 L1558.36 1211.46 L1558.95 1211.46 L1559.54 1211.46 L1560.12 1211.46 L1560.71 1211.46 L1561.3 1211.46 L1561.88 1211.46 L1562.47 1211.46 L1563.06 1211.46 L1563.64 1211.46 L1564.23 1211.46 L1564.81 1211.46 L1565.4 1211.46 L1565.99 1211.46 L1566.57 1211.46 L1567.16 1211.46 L1567.75 1211.46 L1568.33 1211.46 L1568.92 1211.46 L1569.51 1211.46 L1570.09 1211.46 L1570.68 1211.46 L1571.27 1211.46 L1571.85 1211.46 L1572.44 1211.46 L1573.02 1211.46 L1573.61 1211.46 L1574.2 1211.46 L1574.78 1211.46 L1575.37 1211.46 L1575.96 1211.46 L1576.54 1211.46 L1577.13 1211.46 L1577.72 1211.46 L1578.3 1211.46 L1578.89 1211.46 L1579.47 1211.46 L1580.06 1211.46 L1580.65 1211.46 L1581.23 1211.46 L1581.82 1211.46 L1582.41 1211.46 L1582.99 1211.46 L1583.58 1211.46 L1584.17 1211.46 L1584.75 1211.46 L1585.34 1211.46 L1585.93 1211.46 L1586.51 1211.46 L1587.1 1211.46 L1587.68 1211.46 L1588.27 1211.46 L1588.86 1211.46 L1589.44 1211.46 L1590.03 1211.46 L1590.62 1211.46 L1591.2 1211.46 L1591.79 1211.46 L1592.38 1211.46 L1592.96 1211.46 L1593.55 1211.46 L1594.14 1211.46 L1594.72 1211.46 L1595.31 1211.46 L1595.89 1211.46 L1596.48 1211.46 L1597.07 1211.46 L1597.65 1211.46 L1598.24 1211.46 L1598.83 1211.46 L1599.41 1211.46 L1600 1211.46 L1600.59 1211.46 L1601.17 1211.46 L1601.76 1211.46 L1602.34 1211.46 L1602.93 1211.46 L1603.52 1211.46 L1604.1 1211.46 L1604.69 1211.46 L1605.28 1211.46 L1605.86 1211.46 L1606.45 1211.46 L1607.04 1211.46 L1607.62 1211.46 L1608.21 1211.46 L1608.8 1211.46 L1609.38 1211.46 L1609.97 1211.46 L1610.55 1211.46 L1611.14 1211.46 L1611.73 1211.46 L1612.31 1211.46 L1612.9 1211.46 L1613.49 1211.46 L1614.07 1211.46 L1614.66 1211.46 L1615.25 1211.46 L1615.83 1211.46 L1616.42 1211.46 L1617.01 1211.46 L1617.59 1211.46 L1618.18 1211.46 L1618.76 1211.46 L1619.35 1211.46 L1619.94 1211.46 L1620.52 1211.46 L1621.11 1211.46 L1621.7 1211.46 L1622.28 1211.46 L1622.87 1211.46 L1623.46 1211.46 L1624.04 1211.46 L1624.63 1211.46 L1625.22 1211.46 L1625.8 1211.46 L1626.39 1211.46 L1626.97 1211.46 L1627.56 1211.46 L1628.15 1211.46 L1628.73 1211.46 L1629.32 1211.46 L1629.91 1211.46 L1630.49 1211.46 L1631.08 1211.46 L1631.67 1211.46 L1632.25 1211.46 L1632.84 1211.46 L1633.42 1211.46 L1634.01 1211.46 L1634.6 1211.46 L1635.18 1211.46 L1635.77 1211.46 L1636.36 1211.46 L1636.94 1211.46 L1637.53 1211.46 L1638.12 1211.46 L1638.7 1211.46 L1639.29 1211.46 L1639.88 1211.46 L1640.46 1211.46 L1641.05 1211.46 L1641.63 1211.46 L1642.22 1211.46 L1642.81 1211.46 L1643.39 1211.46 L1643.98 1211.46 L1644.57 1211.46 L1645.15 1211.46 L1645.74 1211.46 L1646.33 1211.46 L1646.91 1211.46 L1647.5 1211.46 L1648.09 1211.46 L1648.67 1211.46 L1649.26 1211.46 L1649.84 1211.46 L1650.43 1211.46 L1651.02 1211.46 L1651.6 1211.46 L1652.19 1211.46 L1652.78 1211.46 L1653.36 1211.46 L1653.95 1211.46 L1654.54 1211.46 L1655.12 1211.46 L1655.71 1211.46 L1656.29 1211.46 L1656.88 1211.46 L1657.47 1211.46 L1658.05 1211.46 L1658.64 1211.46 L1659.23 1211.46 L1659.81 1211.46 L1660.4 1211.46 L1660.99 1211.46 L1661.57 1211.46 L1662.16 1211.46 L1662.75 1211.46 L1663.33 1211.46 L1663.92 1211.46 L1664.5 1211.46 L1665.09 1211.46 L1665.68 1211.46 L1666.26 1211.46 L1666.85 1211.46 L1667.44 1211.46 L1668.02 1211.46 L1668.61 1211.46 L1669.2 1211.46 L1669.78 1211.46 L1670.37 1211.46 L1670.96 1211.46 L1671.54 1211.46 L1672.13 1211.46 L1672.71 1211.46 L1673.3 1211.46 L1673.89 1211.46 L1674.47 1211.46 L1675.06 1211.46 L1675.65 1211.46 L1676.23 1211.46 L1676.82 1211.46 L1677.41 1211.46 L1677.99 1211.46 L1678.58 1211.46 L1679.17 1211.46 L1679.75 1211.46 L1680.34 1211.46 L1680.92 1211.46 L1681.51 1211.46 L1682.1 1211.46 L1682.68 1211.46 L1683.27 1211.46 L1683.86 1211.46 L1684.44 1211.46 L1685.03 1211.46 L1685.62 1211.46 L1686.2 1211.46 L1686.79 1211.46 L1687.37 1211.46 L1687.96 1211.46 L1688.55 1211.46 L1689.13 1211.46 L1689.72 1211.46 L1690.31 1211.46 L1690.89 1211.46 L1691.48 1211.46 L1692.07 1211.46 L1692.65 1211.46 L1693.24 1211.46 L1693.83 1211.46 L1694.41 1211.46 L1695 1211.46 L1695.58 1211.46 L1696.17 1211.46 L1696.76 1211.46 L1697.34 1211.46 L1697.93 1211.46 L1698.52 1211.46 L1699.1 1211.46 L1699.69 1211.46 L1700.28 1211.46 L1700.86 1211.46 L1701.45 1211.46 L1702.04 1211.46 L1702.62 1211.46 L1703.21 1211.46 L1703.79 1211.46 L1704.38 1211.46 L1704.97 1211.46 L1705.55 1211.46 L1706.14 1211.46 L1706.73 1211.46 L1707.31 1211.46 L1707.9 1211.46 L1708.49 1211.46 L1709.07 1211.46 L1709.66 1211.46 L1710.24 1211.46 L1710.83 1211.46 L1711.42 1211.46 L1712 1211.46 L1712.59 1211.46 L1713.18 1211.46 L1713.76 1211.46 L1714.35 1211.46 L1714.94 1211.46 L1715.52 1211.46 L1716.11 1211.46 L1716.7 1211.46 L1717.28 1211.46 L1717.87 1211.46 L1718.45 1211.46 L1719.04 1211.46 L1719.63 1211.46 L1720.21 1211.46 L1720.8 1211.46 L1721.39 1211.46 L1721.97 1211.46 L1722.56 1211.46 L1723.15 1211.46 L1723.73 1211.46 L1724.32 1211.46 L1724.91 1211.46 L1725.49 1211.46 L1726.08 1211.46 L1726.66 1211.46 L1727.25 1211.46 L1727.84 1211.46 L1728.42 1211.46 L1729.01 1211.46 L1729.6 1211.46 L1730.18 1211.46 L1730.77 1211.46 L1731.36 1211.46 L1731.94 1211.46 L1732.53 1211.46 L1733.11 1211.46 L1733.7 1211.46 L1734.29 1211.46 L1734.87 1211.46 L1735.46 1211.46 L1736.05 1211.46 L1736.63 1211.46 L1737.22 1211.46 L1737.81 1211.46 L1738.39 1211.46 L1738.98 1211.46 L1739.57 1211.46 L1740.15 1211.46 L1740.74 1211.46 L1741.32 1211.46 L1741.91 1211.46 L1742.5 1211.46 L1743.08 1211.46 L1743.67 1211.46 L1744.26 1211.46 L1744.84 1211.46 L1745.43 1211.46 L1746.02 1211.46 L1746.6 1211.46 L1747.19 1211.46 L1747.78 1211.46 L1748.36 1211.46 L1748.95 1211.46 L1749.53 1211.46 L1750.12 1211.46 L1750.71 1211.46 L1751.29 1211.46 L1751.88 1211.46 L1752.47 1211.46 L1753.05 1211.46 L1753.64 1211.46 L1754.23 1211.46 L1754.81 1211.46 L1755.4 1211.46 L1755.99 1211.46 L1756.57 1211.46 L1757.16 1211.46 L1757.74 1211.46 L1758.33 1211.46 L1758.92 1211.46 L1759.5 1211.46 L1760.09 1211.46 L1760.68 1211.46 L1761.26 1211.46 L1761.85 1211.46 L1762.44 1211.46 L1763.02 1211.46 L1763.61 1211.46 L1764.19 1211.46 L1764.78 1211.46 L1765.37 1211.46 L1765.95 1211.46 L1766.54 1211.46 L1767.13 1211.46 L1767.71 1211.46 L1768.3 1211.46 L1768.89 1211.46 L1769.47 1211.46 L1770.06 1211.46 L1770.65 1211.46 L1771.23 1211.46 L1771.82 1211.46 L1772.4 1211.46 L1772.99 1211.46 L1773.58 1211.46 L1774.16 1211.46 L1774.75 1211.46 L1775.34 1211.46 L1775.92 1211.46 L1776.51 1211.46 L1777.1 1211.46 L1777.68 1211.46 L1778.27 1211.46 L1778.86 1211.46 L1779.44 1211.46 L1780.03 1211.46 L1780.61 1211.46 L1781.2 1211.46 L1781.79 1211.46 L1782.37 1211.46 L1782.96 1211.46 L1783.55 1211.46 L1784.13 1211.46 L1784.72 1211.46 L1785.31 1211.46 L1785.89 1211.46 L1786.48 1211.46 L1787.06 1211.46 L1787.65 1211.46 L1788.24 1211.46 L1788.82 1211.46 L1789.41 1211.46 L1790 1211.46 L1790.58 1211.46 L1791.17 1211.46 L1791.76 1211.46 L1792.34 1211.46 L1792.93 1211.46 L1793.52 1211.46 L1794.1 1211.46 L1794.69 1211.46 L1795.27 1211.46 L1795.86 1211.46 L1796.45 1211.46 L1797.03 1211.46 L1797.62 1211.46 L1798.21 1211.46 L1798.79 1211.46 L1799.38 1211.46 L1799.97 1211.46 L1800.55 1211.46 L1801.14 1211.46 L1801.73 1211.46 L1802.31 1211.46 L1802.9 1211.46 L1803.48 1211.46 L1804.07 1211.46 L1804.66 1211.46 L1805.24 1211.46 L1805.83 1211.46 L1806.42 1211.46 L1807 1211.46 L1807.59 1211.46 L1808.18 1211.46 L1808.76 1211.46 L1809.35 1211.46 L1809.94 1211.46 L1810.52 1211.46 L1811.11 1211.46 L1811.69 1211.46 L1812.28 1211.46 L1812.87 1211.46 L1813.45 1211.46 L1814.04 1211.46 L1814.63 1211.46 L1815.21 1211.46 L1815.8 1211.46 L1816.39 1211.46 L1816.97 1211.46 L1817.56 1211.46 L1818.14 1211.46 L1818.73 1211.46 L1819.32 1211.46 L1819.9 1211.46 L1820.49 1211.46 L1821.08 1211.46 L1821.66 1211.46 L1822.25 1211.46 L1822.84 1211.46 L1823.42 1211.46 L1824.01 1211.46 L1824.6 1211.46 L1825.18 1211.46 L1825.77 1211.46 L1826.35 1211.46 L1826.94 1211.46 L1827.53 1211.46 L1828.11 1211.46 L1828.7 1211.46 L1829.29 1211.46 L1829.87 1211.46 L1830.46 1211.46 L1831.05 1211.46 L1831.63 1211.46 L1832.22 1211.46 L1832.81 1211.46 L1833.39 1211.46 L1833.98 1211.46 L1834.56 1211.46 L1835.15 1211.46 L1835.74 1211.46 L1836.32 1211.46 L1836.91 1211.46 L1837.5 1211.46 L1838.08 1211.46 L1838.67 1211.46 L1839.26 1211.46 L1839.84 1211.46 L1840.43 1211.46 L1841.01 1211.46 L1841.6 1211.46 L1842.19 1211.46 L1842.77 1211.46 L1843.36 1211.46 L1843.95 1211.46 L1844.53 1211.46 L1845.12 1211.46 L1845.71 1211.46 L1846.29 1211.46 L1846.88 1211.46 L1847.47 1211.46 L1848.05 1211.46 L1848.64 1211.46 L1849.22 1211.46 L1849.81 1211.46 L1850.4 1211.46 L1850.98 1211.46 L1851.57 1211.46 L1852.16 1211.46 L1852.74 1211.46 L1853.33 1211.46 L1853.92 1211.46 L1854.5 1211.46 L1855.09 1211.46 L1855.68 1211.46 L1856.26 1211.46 L1856.85 1211.46 L1857.43 1211.46 L1858.02 1211.46 L1858.61 1211.46 L1859.19 1211.46 L1859.78 1211.46 L1860.37 1211.46 L1860.95 1211.46 L1861.54 1211.46 L1862.13 1211.46 L1862.71 1211.46 L1863.3 1211.46 L1863.88 1211.46 L1864.47 1211.46 L1865.06 1211.46 L1865.64 1211.46 L1866.23 1211.46 L1866.82 1211.46 L1867.4 1211.46 L1867.99 1211.46 L1868.58 1211.46 L1869.16 1211.46 L1869.75 1211.46 L1870.34 1211.46 L1870.92 1211.46 L1871.51 1211.46 L1872.09 1211.46 L1872.68 1211.46 L1873.27 1211.46 L1873.85 1211.46 L1874.44 1211.46 L1875.03 1211.46 L1875.61 1211.46 L1876.2 1211.46 L1876.79 1211.46 L1877.37 1211.46 L1877.96 1211.46 L1878.55 1211.46 L1879.13 1211.46 L1879.72 1211.46 L1880.3 1211.46 L1880.89 1211.46 L1881.48 1211.46 L1882.06 1211.46 L1882.65 1211.46 L1883.24 1211.46 L1883.82 1211.46 L1884.41 1211.46 L1885 1211.46 L1885.58 1211.46 L1886.17 1211.46 L1886.76 1211.46 L1887.34 1211.46 L1887.93 1211.46 L1888.51 1211.46 L1889.1 1211.46 L1889.69 1211.46 L1890.27 1211.46 L1890.86 1211.46 L1891.45 1211.46 L1892.03 1211.46 L1892.62 1211.46 L1893.21 1211.46 L1893.79 1211.46 L1894.38 1211.46 L1894.96 1211.46 L1895.55 1211.46 L1896.14 1211.46 L1896.72 1211.46 L1897.31 1211.46 L1897.9 1211.46 L1898.48 1211.46 L1899.07 1211.46 L1899.66 1211.46 L1900.24 1211.46 L1900.83 1211.46 L1901.42 1211.46 L1902 1211.46 L1902.59 1211.46 L1903.17 1211.46 L1903.76 1211.46 L1904.35 1211.46 L1904.93 1211.46 L1905.52 1211.46 L1906.11 1211.46 L1906.69 1211.46 L1907.28 1211.46 L1907.87 1211.46 L1908.45 1211.46 L1909.04 1211.46 L1909.63 1211.46 L1910.21 1211.46 L1910.8 1211.46 L1911.38 1211.46 L1911.97 1211.46 L1912.56 1211.46 L1913.14 1211.46 L1913.73 1211.46 L1914.32 1211.46 L1914.9 1211.46 L1915.49 1211.46 L1916.08 1211.46 L1916.66 1211.46 L1917.25 1211.46 L1917.83 1211.46 L1918.42 1211.46 L1919.01 1211.46 L1919.59 1211.46 L1920.18 1211.46 L1920.77 1211.46 L1921.35 1211.46 L1921.94 1211.46 L1922.53 1211.46 L1923.11 1211.46 L1923.7 1211.46 L1924.29 1211.46 L1924.87 1211.46 L1925.46 1211.46 L1926.04 1211.46 L1926.63 1211.46 L1927.22 1211.46 L1927.8 1211.46 L1928.39 1211.46 L1928.98 1211.46 L1929.56 1211.46 L1930.15 1211.46 L1930.74 1211.46 L1931.32 1211.46 L1931.91 1211.46 L1932.5 1211.46 L1933.08 1211.46 L1933.67 1211.46 L1934.25 1211.46 L1934.84 1211.46 L1935.43 1211.46 L1936.01 1211.46 L1936.6 1211.46 L1937.19 1211.46 L1937.77 1211.46 L1938.36 1211.46 L1938.95 1211.46 L1939.53 1211.46 L1940.12 1211.46 L1940.71 1211.46 L1941.29 1211.46 L1941.88 1211.46 L1942.46 1211.46 L1943.05 1211.46 L1943.64 1211.46 L1944.22 1211.46 L1944.81 1211.46 L1945.4 1211.46 L1945.98 1211.46 L1946.57 1211.46 L1947.16 1211.46 L1947.74 1211.46 L1948.33 1211.46 L1948.91 1211.46 L1949.5 1211.46 L1950.09 1211.46 L1950.67 1211.46 L1951.26 1211.46 L1951.85 1211.46 L1952.43 1211.46 L1953.02 1211.46 L1953.61 1211.46 L1954.19 1211.46 L1954.78 1211.46 L1955.37 1211.46 L1955.95 1211.46 L1956.54 1211.46 L1957.12 1211.46 L1957.71 1211.46 L1958.3 1211.46 L1958.88 1211.46 L1959.47 1211.46 L1960.06 1211.46 L1960.64 1211.46 L1961.23 1211.46 L1961.82 1211.46 L1962.4 1211.46 L1962.99 1211.46 L1963.58 1211.46 L1964.16 1211.46 L1964.75 1211.46 L1965.33 1211.46 L1965.92 1211.46 L1966.51 1211.46 L1967.09 1211.46 L1967.68 1211.46 L1968.27 1211.46 L1968.85 1211.46 L1969.44 1211.46 L1970.03 1211.46 L1970.61 1211.46 L1971.2 1211.46 L1971.78 1211.46 L1972.37 1211.46 L1972.96 1211.46 L1973.54 1211.46 L1974.13 1211.46 L1974.72 1211.46 L1975.3 1211.46 L1975.89 1211.46 L1976.48 1211.46 L1977.06 1211.46 L1977.65 1211.46 L1978.24 1211.46 L1978.82 1211.46 L1979.41 1211.46 L1979.99 1211.46 L1980.58 1211.46 L1981.17 1211.46 L1981.75 1211.46 L1982.34 1211.46 L1982.93 1211.46 L1983.51 1211.46 L1984.1 1211.46 L1984.69 1211.46 L1985.27 1211.46 L1985.86 1211.46 L1986.45 1211.46 L1987.03 1211.46 L1987.62 1211.46 L1988.2 1211.46 L1988.79 1211.46 L1989.38 1211.46 L1989.96 1211.46 L1990.55 1211.46 L1991.14 1211.46 L1991.72 1211.46 L1992.31 1211.46 L1992.9 1211.46 L1993.48 1211.46 L1994.07 1211.46 L1994.65 1211.46 L1995.24 1211.46 L1995.83 1211.46 L1996.41 1211.46 L1997 1211.46 L1997.59 1211.46 L1998.17 1211.46 L1998.76 1211.46 L1999.35 1211.46 L1999.93 1211.46 L2000.52 1211.46 L2001.11 1211.46 L2001.69 1211.46 L2002.28 1211.46 L2002.86 1211.46 L2003.45 1211.46 L2004.04 1211.46 L2004.62 1211.46 L2005.21 1211.46 L2005.8 1211.46 L2006.38 1211.46 L2006.97 1211.46 L2007.56 1211.46 L2008.14 1211.46 L2008.73 1211.46 L2009.32 1211.46 L2009.9 1211.46 L2010.49 1211.46 L2011.07 1211.46 L2011.66 1211.46 L2012.25 1211.46 L2012.83 1211.46 L2013.42 1211.46 L2014.01 1211.46 L2014.59 1211.46 L2015.18 1211.46 L2015.77 1211.46 L2016.35 1211.46 L2016.94 1211.46 L2017.53 1211.46 L2018.11 1211.46 L2018.7 1211.46 L2019.28 1211.46 L2019.87 1211.46 L2020.46 1211.46 L2021.04 1211.46 L2021.63 1211.46 L2022.22 1211.46 L2022.8 1211.46 L2023.39 1211.46 L2023.98 1211.46 L2024.56 1211.46 L2025.15 1211.46 L2025.73 1211.46 L2026.32 1211.46 L2026.91 1211.46 L2027.49 1211.46 L2028.08 1211.46 L2028.67 1211.46 L2029.25 1211.46 L2029.84 1211.46 L2030.43 1211.46 L2031.01 1211.46 L2031.6 1211.46 L2032.19 1211.46 L2032.77 1211.46 L2033.36 1211.46 L2033.94 1211.46 L2034.53 1211.46 L2035.12 1211.46 L2035.7 1211.46 L2036.29 1211.46 L2036.88 1211.46 L2037.46 1211.46 L2038.05 1211.46 L2038.64 1211.46 L2039.22 1211.46 L2039.81 1211.46 L2040.4 1211.46 L2040.98 1211.46 L2041.57 1211.46 L2042.15 1211.46 L2042.74 1211.46 L2043.33 1211.46 L2043.91 1211.46 L2044.5 1211.46 L2045.09 1211.46 L2045.67 1211.46 L2046.26 1211.46 L2046.85 1211.46 L2047.43 1211.46 L2048.02 1211.46 L2048.6 1211.46 L2049.19 1211.46 L2049.78 1211.46 L2050.36 1211.46 L2050.95 1211.46 L2051.54 1211.46 L2052.12 1211.46 L2052.71 1211.46 L2053.3 1211.46 L2053.88 1211.46 L2054.47 1211.46 L2055.06 1211.46 L2055.64 1211.46 L2056.23 1211.46 L2056.81 1211.46 L2057.4 1211.46 L2057.99 1211.46 L2058.57 1211.46 L2059.16 1211.46 L2059.75 1211.46 L2060.33 1211.46 L2060.92 1211.46 L2061.51 1211.46 L2062.09 1211.46 L2062.68 1211.46 L2063.27 1211.46 L2063.85 1211.46 L2064.44 1211.46 L2065.02 1211.46 L2065.61 1211.46 L2066.2 1211.46 L2066.78 1211.46 L2067.37 1211.46 L2067.96 1211.46 L2068.54 1211.46 L2069.13 1211.46 L2069.72 1211.46 L2070.3 1211.46 L2070.89 1211.46 L2071.48 1211.46 L2072.06 1211.46 L2072.65 1211.46 L2073.23 1211.46 L2073.82 1211.46 L2074.41 1211.46 L2074.99 1211.46 L2075.58 1211.46 L2076.17 1211.46 L2076.75 1211.46 L2077.34 1211.46 L2077.93 1211.46 L2078.51 1211.46 L2079.1 1211.46 L2079.68 1211.46 L2080.27 1211.46 L2080.86 1211.46 L2081.44 1211.46 L2082.03 1211.46 L2082.62 1211.46 L2083.2 1211.46 L2083.79 1211.46 L2084.38 1211.46 L2084.96 1211.46 L2085.55 1211.46 L2086.14 1211.46 L2086.72 1211.46 L2087.31 1211.46 L2087.89 1211.46 L2088.48 1211.46 L2089.07 1211.46 L2089.65 1211.46 L2090.24 1211.46 L2090.83 1211.46 L2091.41 1211.46 L2092 1211.46 L2092.59 1211.46 L2093.17 1211.46 L2093.76 1211.46 L2094.35 1211.46 L2094.93 1211.46 L2095.52 1211.46 L2096.1 1211.46 L2096.69 1211.46 L2097.28 1211.46 L2097.86 1211.46 L2098.45 1211.46 L2099.04 1211.46 L2099.62 1211.46 L2100.21 1211.46 L2100.8 1211.46 L2101.38 1211.46 L2101.97 1211.46 L2102.55 1211.46 L2103.14 1211.46 L2103.73 1211.46 L2104.31 1211.46 L2104.9 1211.46 L2105.49 1211.46 L2106.07 1211.46 L2106.66 1211.46 L2107.25 1211.46 L2107.83 1211.46 L2108.42 1211.46 L2109.01 1211.46 L2109.59 1211.46 L2110.18 1211.46 L2110.76 1211.46 L2111.35 1211.46 L2111.94 1211.46 L2112.52 1211.46 L2113.11 1211.46 L2113.7 1211.46 L2114.28 1211.46 L2114.87 1211.46 L2115.46 1211.46 L2116.04 1211.46 L2116.63 1211.46 L2117.22 1211.46 L2117.8 1211.46 L2118.39 1211.46 L2118.97 1211.46 L2119.56 1211.46 L2120.15 1211.46 L2120.73 1211.46 L2121.32 1211.46 L2121.91 1211.46 L2122.49 1211.46 L2123.08 1211.46 L2123.67 1211.46 L2124.25 1211.46 L2124.84 1211.46 L2125.42 1211.46 L2126.01 1211.46 L2126.6 1211.46 L2127.18 1211.46 L2127.77 1211.46 L2128.36 1211.46 L2128.94 1211.46 L2129.53 1211.46 L2130.12 1211.46 L2130.7 1211.46 L2131.29 1211.46 L2131.88 1211.46 L2132.46 1211.46 L2133.05 1211.46 L2133.63 1211.46 L2134.22 1211.46 L2134.81 1211.46 L2135.39 1211.46 L2135.98 1211.46 L2136.57 1211.46 L2137.15 1211.46 L2137.74 1211.46 L2138.33 1211.46 L2138.91 1211.46 L2139.5 1211.46 L2140.09 1211.46 L2140.67 1211.46 L2141.26 1211.46 L2141.84 1211.46 L2142.43 1211.46 L2143.02 1211.46 L2143.6 1211.46 L2144.19 1211.46 L2144.78 1211.46 L2145.36 1211.46 L2145.95 1211.46 L2146.54 1211.46 L2147.12 1211.46 L2147.71 1211.46 L2148.3 1211.46 L2148.88 1211.46 L2149.47 1211.46 L2150.05 1211.46 L2150.64 1211.46 L2151.23 1211.46 L2151.81 1211.46 L2152.4 1211.46 L2152.99 1211.46 L2153.57 1211.46 L2154.16 1211.46 L2154.75 1211.46 L2155.33 1211.46 L2155.92 1211.46 L2156.5 1211.46 L2157.09 1211.46 L2157.68 1211.46 L2158.26 1211.46 L2158.26 1210.54 L2157.68 1210.54 L2157.09 1210.54 L2156.5 1210.54 L2155.92 1210.54 L2155.33 1210.54 L2154.75 1210.54 L2154.16 1210.54 L2153.57 1210.54 L2152.99 1210.54 L2152.4 1210.54 L2151.81 1210.54 L2151.23 1210.54 L2150.64 1210.54 L2150.05 1210.54 L2149.47 1210.54 L2148.88 1210.54 L2148.3 1210.54 L2147.71 1210.54 L2147.12 1210.54 L2146.54 1210.54 L2145.95 1210.54 L2145.36 1210.54 L2144.78 1210.54 L2144.19 1210.54 L2143.6 1210.54 L2143.02 1210.54 L2142.43 1210.54 L2141.84 1210.54 L2141.26 1210.54 L2140.67 1210.54 L2140.09 1210.54 L2139.5 1210.54 L2138.91 1210.54 L2138.33 1210.54 L2137.74 1210.54 L2137.15 1210.54 L2136.57 1210.54 L2135.98 1210.54 L2135.39 1210.54 L2134.81 1210.54 L2134.22 1210.54 L2133.63 1210.54 L2133.05 1210.54 L2132.46 1210.54 L2131.88 1210.54 L2131.29 1210.54 L2130.7 1210.54 L2130.12 1210.54 L2129.53 1210.54 L2128.94 1210.54 L2128.36 1210.54 L2127.77 1210.54 L2127.18 1210.54 L2126.6 1210.54 L2126.01 1210.54 L2125.42 1210.54 L2124.84 1210.54 L2124.25 1210.54 L2123.67 1210.54 L2123.08 1210.54 L2122.49 1210.54 L2121.91 1210.54 L2121.32 1210.54 L2120.73 1210.54 L2120.15 1210.54 L2119.56 1210.54 L2118.97 1210.54 L2118.39 1210.54 L2117.8 1210.54 L2117.22 1210.54 L2116.63 1210.54 L2116.04 1210.54 L2115.46 1210.54 L2114.87 1210.54 L2114.28 1210.54 L2113.7 1210.54 L2113.11 1210.54 L2112.52 1210.54 L2111.94 1210.54 L2111.35 1210.54 L2110.76 1210.54 L2110.18 1210.54 L2109.59 1210.54 L2109.01 1210.54 L2108.42 1210.54 L2107.83 1210.54 L2107.25 1210.54 L2106.66 1210.54 L2106.07 1210.54 L2105.49 1210.54 L2104.9 1210.54 L2104.31 1210.54 L2103.73 1210.54 L2103.14 1210.54 L2102.55 1210.54 L2101.97 1210.54 L2101.38 1210.54 L2100.8 1210.54 L2100.21 1210.54 L2099.62 1210.54 L2099.04 1210.54 L2098.45 1210.54 L2097.86 1210.54 L2097.28 1210.54 L2096.69 1210.54 L2096.1 1210.54 L2095.52 1210.54 L2094.93 1210.54 L2094.35 1210.54 L2093.76 1210.54 L2093.17 1210.54 L2092.59 1210.54 L2092 1210.54 L2091.41 1210.54 L2090.83 1210.54 L2090.24 1210.54 L2089.65 1210.54 L2089.07 1210.54 L2088.48 1210.54 L2087.89 1210.54 L2087.31 1210.54 L2086.72 1210.54 L2086.14 1210.54 L2085.55 1210.54 L2084.96 1210.54 L2084.38 1210.54 L2083.79 1210.54 L2083.2 1210.54 L2082.62 1210.54 L2082.03 1210.54 L2081.44 1210.54 L2080.86 1210.54 L2080.27 1210.54 L2079.68 1210.54 L2079.1 1210.54 L2078.51 1210.54 L2077.93 1210.54 L2077.34 1210.54 L2076.75 1210.54 L2076.17 1210.54 L2075.58 1210.54 L2074.99 1210.54 L2074.41 1210.54 L2073.82 1210.54 L2073.23 1210.54 L2072.65 1210.54 L2072.06 1210.54 L2071.48 1210.54 L2070.89 1210.54 L2070.3 1210.54 L2069.72 1210.54 L2069.13 1210.54 L2068.54 1210.54 L2067.96 1210.54 L2067.37 1210.54 L2066.78 1210.54 L2066.2 1210.54 L2065.61 1210.54 L2065.02 1210.54 L2064.44 1210.54 L2063.85 1210.54 L2063.27 1210.54 L2062.68 1210.54 L2062.09 1210.54 L2061.51 1210.54 L2060.92 1210.54 L2060.33 1210.54 L2059.75 1210.54 L2059.16 1210.54 L2058.57 1210.54 L2057.99 1210.54 L2057.4 1210.54 L2056.81 1210.54 L2056.23 1210.54 L2055.64 1210.54 L2055.06 1210.54 L2054.47 1210.54 L2053.88 1210.54 L2053.3 1210.54 L2052.71 1210.54 L2052.12 1210.54 L2051.54 1210.54 L2050.95 1210.54 L2050.36 1210.54 L2049.78 1210.54 L2049.19 1210.54 L2048.6 1210.54 L2048.02 1210.54 L2047.43 1210.54 L2046.85 1210.54 L2046.26 1210.54 L2045.67 1210.54 L2045.09 1210.54 L2044.5 1210.54 L2043.91 1210.54 L2043.33 1210.54 L2042.74 1210.54 L2042.15 1210.54 L2041.57 1210.54 L2040.98 1210.54 L2040.4 1210.54 L2039.81 1210.54 L2039.22 1210.54 L2038.64 1210.54 L2038.05 1210.54 L2037.46 1210.54 L2036.88 1210.54 L2036.29 1210.54 L2035.7 1210.54 L2035.12 1210.54 L2034.53 1210.54 L2033.94 1210.54 L2033.36 1210.54 L2032.77 1210.54 L2032.19 1210.54 L2031.6 1210.54 L2031.01 1210.54 L2030.43 1210.54 L2029.84 1210.54 L2029.25 1210.54 L2028.67 1210.54 L2028.08 1210.54 L2027.49 1210.54 L2026.91 1210.54 L2026.32 1210.54 L2025.73 1210.54 L2025.15 1210.54 L2024.56 1210.54 L2023.98 1210.54 L2023.39 1210.54 L2022.8 1210.54 L2022.22 1210.54 L2021.63 1210.54 L2021.04 1210.54 L2020.46 1210.54 L2019.87 1210.54 L2019.28 1210.54 L2018.7 1210.54 L2018.11 1210.54 L2017.53 1210.54 L2016.94 1210.54 L2016.35 1210.54 L2015.77 1210.54 L2015.18 1210.54 L2014.59 1210.54 L2014.01 1210.54 L2013.42 1210.54 L2012.83 1210.54 L2012.25 1210.54 L2011.66 1210.54 L2011.07 1210.54 L2010.49 1210.54 L2009.9 1210.54 L2009.32 1210.54 L2008.73 1210.54 L2008.14 1210.54 L2007.56 1210.54 L2006.97 1210.54 L2006.38 1210.54 L2005.8 1210.54 L2005.21 1210.54 L2004.62 1210.54 L2004.04 1210.54 L2003.45 1210.54 L2002.86 1210.54 L2002.28 1210.54 L2001.69 1210.54 L2001.11 1210.54 L2000.52 1210.54 L1999.93 1210.54 L1999.35 1210.54 L1998.76 1210.54 L1998.17 1210.54 L1997.59 1210.54 L1997 1210.54 L1996.41 1210.54 L1995.83 1210.54 L1995.24 1210.54 L1994.65 1210.54 L1994.07 1210.54 L1993.48 1210.54 L1992.9 1210.54 L1992.31 1210.54 L1991.72 1210.54 L1991.14 1210.54 L1990.55 1210.54 L1989.96 1210.54 L1989.38 1210.54 L1988.79 1210.54 L1988.2 1210.54 L1987.62 1210.54 L1987.03 1210.54 L1986.45 1210.54 L1985.86 1210.54 L1985.27 1210.54 L1984.69 1210.54 L1984.1 1210.54 L1983.51 1210.54 L1982.93 1210.54 L1982.34 1210.54 L1981.75 1210.54 L1981.17 1210.54 L1980.58 1210.54 L1979.99 1210.54 L1979.41 1210.54 L1978.82 1210.54 L1978.24 1210.54 L1977.65 1210.54 L1977.06 1210.54 L1976.48 1210.54 L1975.89 1210.54 L1975.3 1210.54 L1974.72 1210.54 L1974.13 1210.54 L1973.54 1210.54 L1972.96 1210.54 L1972.37 1210.54 L1971.78 1210.54 L1971.2 1210.54 L1970.61 1210.54 L1970.03 1210.54 L1969.44 1210.54 L1968.85 1210.54 L1968.27 1210.54 L1967.68 1210.54 L1967.09 1210.54 L1966.51 1210.54 L1965.92 1210.54 L1965.33 1210.54 L1964.75 1210.54 L1964.16 1210.54 L1963.58 1210.54 L1962.99 1210.54 L1962.4 1210.54 L1961.82 1210.54 L1961.23 1210.54 L1960.64 1210.54 L1960.06 1210.54 L1959.47 1210.54 L1958.88 1210.54 L1958.3 1210.54 L1957.71 1210.54 L1957.12 1210.54 L1956.54 1210.54 L1955.95 1210.54 L1955.37 1210.54 L1954.78 1210.54 L1954.19 1210.54 L1953.61 1210.54 L1953.02 1210.54 L1952.43 1210.54 L1951.85 1210.54 L1951.26 1210.54 L1950.67 1210.54 L1950.09 1210.54 L1949.5 1210.54 L1948.91 1210.54 L1948.33 1210.54 L1947.74 1210.54 L1947.16 1210.54 L1946.57 1210.54 L1945.98 1210.54 L1945.4 1210.54 L1944.81 1210.54 L1944.22 1210.54 L1943.64 1210.54 L1943.05 1210.54 L1942.46 1210.54 L1941.88 1210.54 L1941.29 1210.54 L1940.71 1210.54 L1940.12 1210.54 L1939.53 1210.54 L1938.95 1210.54 L1938.36 1210.54 L1937.77 1210.54 L1937.19 1210.54 L1936.6 1210.54 L1936.01 1210.54 L1935.43 1210.54 L1934.84 1210.54 L1934.25 1210.54 L1933.67 1210.54 L1933.08 1210.54 L1932.5 1210.54 L1931.91 1210.54 L1931.32 1210.54 L1930.74 1210.54 L1930.15 1210.54 L1929.56 1210.54 L1928.98 1210.54 L1928.39 1210.54 L1927.8 1210.54 L1927.22 1210.54 L1926.63 1210.54 L1926.04 1210.54 L1925.46 1210.54 L1924.87 1210.54 L1924.29 1210.54 L1923.7 1210.54 L1923.11 1210.54 L1922.53 1210.54 L1921.94 1210.54 L1921.35 1210.54 L1920.77 1210.54 L1920.18 1210.54 L1919.59 1210.54 L1919.01 1210.54 L1918.42 1210.54 L1917.83 1210.54 L1917.25 1210.54 L1916.66 1210.54 L1916.08 1210.54 L1915.49 1210.54 L1914.9 1210.54 L1914.32 1210.54 L1913.73 1210.54 L1913.14 1210.54 L1912.56 1210.54 L1911.97 1210.54 L1911.38 1210.54 L1910.8 1210.54 L1910.21 1210.54 L1909.63 1210.54 L1909.04 1210.54 L1908.45 1210.54 L1907.87 1210.54 L1907.28 1210.54 L1906.69 1210.54 L1906.11 1210.54 L1905.52 1210.54 L1904.93 1210.54 L1904.35 1210.54 L1903.76 1210.54 L1903.17 1210.54 L1902.59 1210.54 L1902 1210.54 L1901.42 1210.54 L1900.83 1210.54 L1900.24 1210.54 L1899.66 1210.54 L1899.07 1210.54 L1898.48 1210.54 L1897.9 1210.54 L1897.31 1210.54 L1896.72 1210.54 L1896.14 1210.54 L1895.55 1210.54 L1894.96 1210.54 L1894.38 1210.54 L1893.79 1210.54 L1893.21 1210.54 L1892.62 1210.54 L1892.03 1210.54 L1891.45 1210.54 L1890.86 1210.54 L1890.27 1210.54 L1889.69 1210.54 L1889.1 1210.54 L1888.51 1210.54 L1887.93 1210.54 L1887.34 1210.54 L1886.76 1210.54 L1886.17 1210.54 L1885.58 1210.54 L1885 1210.54 L1884.41 1210.54 L1883.82 1210.54 L1883.24 1210.54 L1882.65 1210.54 L1882.06 1210.54 L1881.48 1210.54 L1880.89 1210.54 L1880.3 1210.54 L1879.72 1210.54 L1879.13 1210.54 L1878.55 1210.54 L1877.96 1210.54 L1877.37 1210.54 L1876.79 1210.54 L1876.2 1210.54 L1875.61 1210.54 L1875.03 1210.54 L1874.44 1210.54 L1873.85 1210.54 L1873.27 1210.54 L1872.68 1210.54 L1872.09 1210.54 L1871.51 1210.54 L1870.92 1210.54 L1870.34 1210.54 L1869.75 1210.54 L1869.16 1210.54 L1868.58 1210.54 L1867.99 1210.54 L1867.4 1210.54 L1866.82 1210.54 L1866.23 1210.54 L1865.64 1210.54 L1865.06 1210.54 L1864.47 1210.54 L1863.88 1210.54 L1863.3 1210.54 L1862.71 1210.54 L1862.13 1210.54 L1861.54 1210.54 L1860.95 1210.54 L1860.37 1210.54 L1859.78 1210.54 L1859.19 1210.54 L1858.61 1210.54 L1858.02 1210.54 L1857.43 1210.54 L1856.85 1210.54 L1856.26 1210.54 L1855.68 1210.54 L1855.09 1210.54 L1854.5 1210.54 L1853.92 1210.54 L1853.33 1210.54 L1852.74 1210.54 L1852.16 1210.54 L1851.57 1210.54 L1850.98 1210.54 L1850.4 1210.54 L1849.81 1210.54 L1849.22 1210.54 L1848.64 1210.54 L1848.05 1210.54 L1847.47 1210.54 L1846.88 1210.54 L1846.29 1210.54 L1845.71 1210.54 L1845.12 1210.54 L1844.53 1210.54 L1843.95 1210.54 L1843.36 1210.54 L1842.77 1210.54 L1842.19 1210.54 L1841.6 1210.54 L1841.01 1210.54 L1840.43 1210.54 L1839.84 1210.54 L1839.26 1210.54 L1838.67 1210.54 L1838.08 1210.54 L1837.5 1210.54 L1836.91 1210.54 L1836.32 1210.54 L1835.74 1210.54 L1835.15 1210.54 L1834.56 1210.54 L1833.98 1210.54 L1833.39 1210.54 L1832.81 1210.54 L1832.22 1210.54 L1831.63 1210.54 L1831.05 1210.54 L1830.46 1210.54 L1829.87 1210.54 L1829.29 1210.54 L1828.7 1210.54 L1828.11 1210.54 L1827.53 1210.54 L1826.94 1210.54 L1826.35 1210.54 L1825.77 1210.54 L1825.18 1210.54 L1824.6 1210.54 L1824.01 1210.54 L1823.42 1210.54 L1822.84 1210.54 L1822.25 1210.54 L1821.66 1210.54 L1821.08 1210.54 L1820.49 1210.54 L1819.9 1210.54 L1819.32 1210.54 L1818.73 1210.54 L1818.14 1210.54 L1817.56 1210.54 L1816.97 1210.54 L1816.39 1210.54 L1815.8 1210.54 L1815.21 1210.54 L1814.63 1210.54 L1814.04 1210.54 L1813.45 1210.54 L1812.87 1210.54 L1812.28 1210.54 L1811.69 1210.54 L1811.11 1210.54 L1810.52 1210.54 L1809.94 1210.54 L1809.35 1210.54 L1808.76 1210.54 L1808.18 1210.54 L1807.59 1210.54 L1807 1210.54 L1806.42 1210.54 L1805.83 1210.54 L1805.24 1210.54 L1804.66 1210.54 L1804.07 1210.54 L1803.48 1210.54 L1802.9 1210.54 L1802.31 1210.54 L1801.73 1210.54 L1801.14 1210.54 L1800.55 1210.54 L1799.97 1210.54 L1799.38 1210.54 L1798.79 1210.54 L1798.21 1210.54 L1797.62 1210.54 L1797.03 1210.54 L1796.45 1210.54 L1795.86 1210.54 L1795.27 1210.54 L1794.69 1210.54 L1794.1 1210.54 L1793.52 1210.54 L1792.93 1210.54 L1792.34 1210.54 L1791.76 1210.54 L1791.17 1210.54 L1790.58 1210.54 L1790 1210.54 L1789.41 1210.54 L1788.82 1210.54 L1788.24 1210.54 L1787.65 1210.54 L1787.06 1210.54 L1786.48 1210.54 L1785.89 1210.54 L1785.31 1210.54 L1784.72 1210.54 L1784.13 1210.54 L1783.55 1210.54 L1782.96 1210.54 L1782.37 1210.54 L1781.79 1210.54 L1781.2 1210.54 L1780.61 1210.54 L1780.03 1210.54 L1779.44 1210.54 L1778.86 1210.54 L1778.27 1210.54 L1777.68 1210.54 L1777.1 1210.54 L1776.51 1210.54 L1775.92 1210.54 L1775.34 1210.54 L1774.75 1210.54 L1774.16 1210.54 L1773.58 1210.54 L1772.99 1210.54 L1772.4 1210.54 L1771.82 1210.54 L1771.23 1210.54 L1770.65 1210.54 L1770.06 1210.54 L1769.47 1210.54 L1768.89 1210.54 L1768.3 1210.54 L1767.71 1210.54 L1767.13 1210.54 L1766.54 1210.54 L1765.95 1210.54 L1765.37 1210.54 L1764.78 1210.54 L1764.19 1210.54 L1763.61 1210.54 L1763.02 1210.54 L1762.44 1210.54 L1761.85 1210.54 L1761.26 1210.54 L1760.68 1210.54 L1760.09 1210.54 L1759.5 1210.54 L1758.92 1210.54 L1758.33 1210.54 L1757.74 1210.54 L1757.16 1210.54 L1756.57 1210.54 L1755.99 1210.54 L1755.4 1210.54 L1754.81 1210.54 L1754.23 1210.54 L1753.64 1210.54 L1753.05 1210.54 L1752.47 1210.54 L1751.88 1210.54 L1751.29 1210.54 L1750.71 1210.54 L1750.12 1210.54 L1749.53 1210.54 L1748.95 1210.54 L1748.36 1210.54 L1747.78 1210.54 L1747.19 1210.54 L1746.6 1210.54 L1746.02 1210.54 L1745.43 1210.54 L1744.84 1210.54 L1744.26 1210.54 L1743.67 1210.54 L1743.08 1210.54 L1742.5 1210.54 L1741.91 1210.54 L1741.32 1210.54 L1740.74 1210.54 L1740.15 1210.54 L1739.57 1210.54 L1738.98 1210.54 L1738.39 1210.54 L1737.81 1210.54 L1737.22 1210.54 L1736.63 1210.54 L1736.05 1210.54 L1735.46 1210.54 L1734.87 1210.54 L1734.29 1210.54 L1733.7 1210.54 L1733.11 1210.54 L1732.53 1210.54 L1731.94 1210.54 L1731.36 1210.54 L1730.77 1210.54 L1730.18 1210.54 L1729.6 1210.54 L1729.01 1210.54 L1728.42 1210.54 L1727.84 1210.54 L1727.25 1210.54 L1726.66 1210.54 L1726.08 1210.54 L1725.49 1210.54 L1724.91 1210.54 L1724.32 1210.54 L1723.73 1210.54 L1723.15 1210.54 L1722.56 1210.54 L1721.97 1210.54 L1721.39 1210.54 L1720.8 1210.54 L1720.21 1210.54 L1719.63 1210.54 L1719.04 1210.54 L1718.45 1210.54 L1717.87 1210.54 L1717.28 1210.54 L1716.7 1210.54 L1716.11 1210.54 L1715.52 1210.54 L1714.94 1210.54 L1714.35 1210.54 L1713.76 1210.54 L1713.18 1210.54 L1712.59 1210.54 L1712 1210.54 L1711.42 1210.54 L1710.83 1210.54 L1710.24 1210.54 L1709.66 1210.54 L1709.07 1210.54 L1708.49 1210.54 L1707.9 1210.54 L1707.31 1210.54 L1706.73 1210.54 L1706.14 1210.54 L1705.55 1210.54 L1704.97 1210.54 L1704.38 1210.54 L1703.79 1210.54 L1703.21 1210.54 L1702.62 1210.54 L1702.04 1210.54 L1701.45 1210.54 L1700.86 1210.54 L1700.28 1210.54 L1699.69 1210.54 L1699.1 1210.54 L1698.52 1210.54 L1697.93 1210.54 L1697.34 1210.54 L1696.76 1210.54 L1696.17 1210.54 L1695.58 1210.54 L1695 1210.54 L1694.41 1210.54 L1693.83 1210.54 L1693.24 1210.54 L1692.65 1210.54 L1692.07 1210.54 L1691.48 1210.54 L1690.89 1210.54 L1690.31 1210.54 L1689.72 1210.54 L1689.13 1210.54 L1688.55 1210.54 L1687.96 1210.54 L1687.37 1210.54 L1686.79 1210.54 L1686.2 1210.54 L1685.62 1210.54 L1685.03 1210.54 L1684.44 1210.54 L1683.86 1210.54 L1683.27 1210.54 L1682.68 1210.54 L1682.1 1210.54 L1681.51 1210.54 L1680.92 1210.54 L1680.34 1210.54 L1679.75 1210.54 L1679.17 1210.54 L1678.58 1210.54 L1677.99 1210.54 L1677.41 1210.54 L1676.82 1210.54 L1676.23 1210.54 L1675.65 1210.54 L1675.06 1210.54 L1674.47 1210.54 L1673.89 1210.54 L1673.3 1210.54 L1672.71 1210.54 L1672.13 1210.54 L1671.54 1210.54 L1670.96 1210.54 L1670.37 1210.54 L1669.78 1210.54 L1669.2 1210.54 L1668.61 1210.54 L1668.02 1210.54 L1667.44 1210.54 L1666.85 1210.54 L1666.26 1210.54 L1665.68 1210.54 L1665.09 1210.54 L1664.5 1210.54 L1663.92 1210.54 L1663.33 1210.54 L1662.75 1210.54 L1662.16 1210.54 L1661.57 1210.54 L1660.99 1210.54 L1660.4 1210.54 L1659.81 1210.54 L1659.23 1210.54 L1658.64 1210.54 L1658.05 1210.54 L1657.47 1210.54 L1656.88 1210.54 L1656.29 1210.54 L1655.71 1210.54 L1655.12 1210.54 L1654.54 1210.54 L1653.95 1210.54 L1653.36 1210.54 L1652.78 1210.54 L1652.19 1210.54 L1651.6 1210.54 L1651.02 1210.54 L1650.43 1210.54 L1649.84 1210.54 L1649.26 1210.54 L1648.67 1210.54 L1648.09 1210.54 L1647.5 1210.54 L1646.91 1210.54 L1646.33 1210.54 L1645.74 1210.54 L1645.15 1210.54 L1644.57 1210.54 L1643.98 1210.54 L1643.39 1210.54 L1642.81 1210.54 L1642.22 1210.54 L1641.63 1210.54 L1641.05 1210.54 L1640.46 1210.54 L1639.88 1210.54 L1639.29 1210.54 L1638.7 1210.54 L1638.12 1210.54 L1637.53 1210.54 L1636.94 1210.54 L1636.36 1210.54 L1635.77 1210.54 L1635.18 1210.54 L1634.6 1210.54 L1634.01 1210.54 L1633.42 1210.54 L1632.84 1210.54 L1632.25 1210.54 L1631.67 1210.54 L1631.08 1210.54 L1630.49 1210.54 L1629.91 1210.54 L1629.32 1210.54 L1628.73 1210.54 L1628.15 1210.54 L1627.56 1210.54 L1626.97 1210.54 L1626.39 1210.54 L1625.8 1210.54 L1625.22 1210.54 L1624.63 1210.54 L1624.04 1210.54 L1623.46 1210.54 L1622.87 1210.54 L1622.28 1210.54 L1621.7 1210.54 L1621.11 1210.54 L1620.52 1210.54 L1619.94 1210.54 L1619.35 1210.54 L1618.76 1210.54 L1618.18 1210.54 L1617.59 1210.54 L1617.01 1210.54 L1616.42 1210.54 L1615.83 1210.54 L1615.25 1210.54 L1614.66 1210.54 L1614.07 1210.54 L1613.49 1210.54 L1612.9 1210.54 L1612.31 1210.54 L1611.73 1210.54 L1611.14 1210.54 L1610.55 1210.54 L1609.97 1210.54 L1609.38 1210.54 L1608.8 1210.54 L1608.21 1210.54 L1607.62 1210.54 L1607.04 1210.54 L1606.45 1210.54 L1605.86 1210.54 L1605.28 1210.54 L1604.69 1210.54 L1604.1 1210.54 L1603.52 1210.54 L1602.93 1210.54 L1602.34 1210.54 L1601.76 1210.54 L1601.17 1210.54 L1600.59 1210.54 L1600 1210.54 L1599.41 1210.54 L1598.83 1210.54 L1598.24 1210.54 L1597.65 1210.54 L1597.07 1210.54 L1596.48 1210.54 L1595.89 1210.54 L1595.31 1210.54 L1594.72 1210.54 L1594.14 1210.54 L1593.55 1210.54 L1592.96 1210.54 L1592.38 1210.54 L1591.79 1210.54 L1591.2 1210.54 L1590.62 1210.54 L1590.03 1210.54 L1589.44 1210.54 L1588.86 1210.54 L1588.27 1210.54 L1587.68 1210.54 L1587.1 1210.54 L1586.51 1210.54 L1585.93 1210.54 L1585.34 1210.54 L1584.75 1210.54 L1584.17 1210.54 L1583.58 1210.54 L1582.99 1210.54 L1582.41 1210.54 L1581.82 1210.54 L1581.23 1210.54 L1580.65 1210.54 L1580.06 1210.54 L1579.47 1210.54 L1578.89 1210.54 L1578.3 1210.54 L1577.72 1210.54 L1577.13 1210.54 L1576.54 1210.54 L1575.96 1210.54 L1575.37 1210.54 L1574.78 1210.54 L1574.2 1210.54 L1573.61 1210.54 L1573.02 1210.54 L1572.44 1210.54 L1571.85 1210.54 L1571.27 1210.54 L1570.68 1210.54 L1570.09 1210.54 L1569.51 1210.54 L1568.92 1210.54 L1568.33 1210.54 L1567.75 1210.54 L1567.16 1210.54 L1566.57 1210.54 L1565.99 1210.54 L1565.4 1210.54 L1564.81 1210.54 L1564.23 1210.54 L1563.64 1210.54 L1563.06 1210.54 L1562.47 1210.54 L1561.88 1210.54 L1561.3 1210.54 L1560.71 1210.54 L1560.12 1210.54 L1559.54 1210.54 L1558.95 1210.54 L1558.36 1210.54 L1557.78 1210.54 L1557.19 1210.54 L1556.6 1210.54 L1556.02 1210.54 L1555.43 1210.54 L1554.85 1210.54 L1554.26 1210.54 L1553.67 1210.54 L1553.09 1210.54 L1552.5 1210.54 L1551.91 1210.54 L1551.33 1210.54 L1550.74 1210.54 L1550.15 1210.54 L1549.57 1210.54 L1548.98 1210.54 L1548.4 1210.54 L1547.81 1210.54 L1547.22 1210.54 L1546.64 1210.54 L1546.05 1210.54 L1545.46 1210.54 L1544.88 1210.54 L1544.29 1210.54 L1543.7 1210.54 L1543.12 1210.54 L1542.53 1210.54 L1541.94 1210.54 L1541.36 1210.54 L1540.77 1210.54 L1540.19 1210.54 L1539.6 1210.54 L1539.01 1210.54 L1538.43 1210.54 L1537.84 1210.54 L1537.25 1210.54 L1536.67 1210.54 L1536.08 1210.54 L1535.49 1210.54 L1534.91 1210.54 L1534.32 1210.54 L1533.73 1210.54 L1533.15 1210.54 L1532.56 1210.54 L1531.98 1210.54 L1531.39 1210.54 L1530.8 1210.54 L1530.22 1210.54 L1529.63 1210.54 L1529.04 1210.54 L1528.46 1210.54 L1527.87 1210.54 L1527.28 1210.54 L1526.7 1210.54 L1526.11 1210.54 L1525.52 1210.54 L1524.94 1210.54 L1524.35 1210.54 L1523.77 1210.54 L1523.18 1210.54 L1522.59 1210.54 L1522.01 1210.54 L1521.42 1210.54 L1520.83 1210.54 L1520.25 1210.54 L1519.66 1210.54 L1519.07 1210.54 L1518.49 1210.54 L1517.9 1210.54 L1517.32 1210.54 L1516.73 1210.54 L1516.14 1210.54 L1515.56 1210.54 L1514.97 1210.54 L1514.38 1210.54 L1513.8 1210.54 L1513.21 1210.54 L1512.62 1210.54 L1512.04 1210.54 L1511.45 1210.54 L1510.86 1210.54 L1510.28 1210.54 L1509.69 1210.54 L1509.11 1210.54 L1508.52 1210.54 L1507.93 1210.54 L1507.35 1210.54 L1506.76 1210.54 L1506.17 1210.54 L1505.59 1210.54 L1505 1210.54 L1504.41 1210.54 L1503.83 1210.54 L1503.24 1210.54 L1502.65 1210.54 L1502.07 1210.54 L1501.48 1210.54 L1500.9 1210.54 L1500.31 1210.54 L1499.72 1210.54 L1499.14 1210.54 L1498.55 1210.54 L1497.96 1210.54 L1497.38 1210.54 L1496.79 1210.54 L1496.2 1210.54 L1495.62 1210.54 L1495.03 1210.54 L1494.45 1210.54 L1493.86 1210.54 L1493.27 1210.54 L1492.69 1210.54 L1492.1 1210.54 L1491.51 1210.54 L1490.93 1210.54 L1490.34 1210.54 L1489.75 1210.54 L1489.17 1210.54 L1488.58 1210.54 L1487.99 1210.54 L1487.41 1210.54 L1486.82 1210.54 L1486.24 1210.54 L1485.65 1210.54 L1485.06 1210.54 L1484.48 1210.54 L1483.89 1210.54 L1483.3 1210.54 L1482.72 1210.54 L1482.13 1210.54 L1481.54 1210.54 L1480.96 1210.54 L1480.37 1210.54 L1479.78 1210.54 L1479.2 1210.54 L1478.61 1210.54 L1478.03 1210.54 L1477.44 1210.54 L1476.85 1210.54 L1476.27 1210.54 L1475.68 1210.54 L1475.09 1210.54 L1474.51 1210.54 L1473.92 1210.54 L1473.33 1210.54 L1472.75 1210.54 L1472.16 1210.54 L1471.57 1210.54 L1470.99 1210.54 L1470.4 1210.54 L1469.82 1210.54 L1469.23 1210.54 L1468.64 1210.54 L1468.06 1210.54 L1467.47 1210.54 L1466.88 1210.54 L1466.3 1210.54 L1465.71 1210.54 L1465.12 1210.54 L1464.54 1210.54 L1463.95 1210.54 L1463.37 1210.54 L1462.78 1210.54 L1462.19 1210.54 L1461.61 1210.54 L1461.02 1210.54 L1460.43 1210.54 L1459.85 1210.54 L1459.26 1210.54 L1458.67 1210.54 L1458.09 1210.54 L1457.5 1210.54 L1456.91 1210.54 L1456.33 1210.54 L1455.74 1210.54 L1455.16 1210.54 L1454.57 1210.54 L1453.98 1210.54 L1453.4 1210.54 L1452.81 1210.54 L1452.22 1210.54 L1451.64 1210.54 L1451.05 1210.54 L1450.46 1210.54 L1449.88 1210.54 L1449.29 1210.54 L1448.7 1210.54 L1448.12 1210.54 L1447.53 1210.54 L1446.95 1210.54 L1446.36 1210.54 L1445.77 1210.54 L1445.19 1210.54 L1444.6 1210.54 L1444.01 1210.54 L1443.43 1210.54 L1442.84 1210.54 L1442.25 1210.54 L1441.67 1210.54 L1441.08 1210.54 L1440.5 1210.54 L1439.91 1210.54 L1439.32 1210.54 L1438.74 1210.54 L1438.15 1210.54 L1437.56 1210.54 L1436.98 1210.54 L1436.39 1210.54 L1435.8 1210.54 L1435.22 1210.54 L1434.63 1210.54 L1434.04 1210.54 L1433.46 1210.54 L1432.87 1210.54 L1432.29 1210.54 L1431.7 1210.54 L1431.11 1210.54 L1430.53 1210.54 L1429.94 1210.54 L1429.35 1210.54 L1428.77 1210.54 L1428.18 1210.54 L1427.59 1210.54 L1427.01 1210.54 L1426.42 1210.54 L1425.83 1210.54 L1425.25 1210.54 L1424.66 1210.54 L1424.08 1210.54 L1423.49 1210.54 L1422.9 1210.54 L1422.32 1210.54 L1421.73 1210.54 L1421.14 1210.54 L1420.56 1210.54 L1419.97 1210.54 L1419.38 1210.54 L1418.8 1210.54 L1418.21 1210.54 L1417.63 1210.54 L1417.04 1210.54 L1416.45 1210.54 L1415.87 1210.54 L1415.28 1210.54 L1414.69 1210.54 L1414.11 1210.54 L1413.52 1210.54 L1412.93 1210.54 L1412.35 1210.54 L1411.76 1210.54 L1411.17 1210.54 L1410.59 1210.54 L1410 1210.54 L1409.42 1210.54 L1408.83 1210.54 L1408.24 1210.54 L1407.66 1210.54 L1407.07 1210.54 L1406.48 1210.54 L1405.9 1210.54 L1405.31 1210.54 L1404.72 1210.54 L1404.14 1210.54 L1403.55 1210.54 L1402.96 1210.54 L1402.38 1210.54 L1401.79 1210.54 L1401.21 1210.54 L1400.62 1210.54 L1400.03 1210.54 L1399.45 1210.54 L1398.86 1210.54 L1398.27 1210.54 L1397.69 1210.54 L1397.1 1210.54 L1396.51 1210.54 L1395.93 1210.54 L1395.34 1210.54 L1394.75 1210.54 L1394.17 1210.54 L1393.58 1210.54 L1393 1210.54 L1392.41 1210.54 L1391.82 1210.54 L1391.24 1210.54 L1390.65 1210.54 L1390.06 1210.54 L1389.48 1210.54 L1388.89 1210.54 L1388.3 1210.54 L1387.72 1210.54 L1387.13 1210.54 L1386.55 1210.54 L1385.96 1210.54 L1385.37 1210.54 L1384.79 1210.54 L1384.2 1210.54 L1383.61 1210.54 L1383.03 1210.54 L1382.44 1210.54 L1381.85 1210.54 L1381.27 1210.54 L1380.68 1210.54 L1380.09 1210.54 L1379.51 1210.54 L1378.92 1210.54 L1378.34 1210.54 L1377.75 1210.54 L1377.16 1210.54 L1376.58 1210.54 L1375.99 1210.54 L1375.4 1210.54 L1374.82 1210.54 L1374.23 1210.54 L1373.64 1210.54 L1373.06 1210.54 L1372.47 1210.54 L1371.88 1210.54 L1371.3 1210.54 L1370.71 1210.54 L1370.13 1210.54 L1369.54 1210.54 L1368.95 1210.54 L1368.37 1210.54 L1367.78 1210.54 L1367.19 1210.54 L1366.61 1210.54 L1366.02 1210.54 L1365.43 1210.54 L1364.85 1210.54 L1364.26 1210.54 L1363.68 1210.54 L1363.09 1210.54 L1362.5 1210.54 L1361.92 1210.54 L1361.33 1210.54 L1360.74 1210.54 L1360.16 1210.54 L1359.57 1210.54 L1358.98 1210.54 L1358.4 1210.54 L1357.81 1210.54 L1357.22 1210.54 L1356.64 1210.54 L1356.05 1210.54 L1355.47 1210.54 L1354.88 1210.54 L1354.29 1210.54 L1353.71 1210.54 L1353.12 1210.54 L1352.53 1210.54 L1351.95 1210.54 L1351.36 1210.54 L1350.77 1210.54 L1350.19 1210.54 L1349.6 1210.54 L1349.01 1210.54 L1348.43 1210.54 L1347.84 1210.54 L1347.26 1210.54 L1346.67 1210.54 L1346.08 1210.54 L1345.5 1210.54 L1344.91 1210.54 L1344.32 1210.54 L1343.74 1210.54 L1343.15 1210.54 L1342.56 1210.54 L1341.98 1210.54 L1341.39 1210.54 L1340.8 1210.54 L1340.22 1210.54 L1339.63 1210.54 L1339.05 1210.54 L1338.46 1210.54 L1337.87 1210.54 L1337.29 1210.54 L1336.7 1210.54 L1336.11 1210.54 L1335.53 1210.54 L1334.94 1210.54 L1334.35 1210.54 L1333.77 1210.54 L1333.18 1210.54 L1332.6 1210.54 L1332.01 1210.54 L1331.42 1210.54 L1330.84 1210.54 L1330.25 1210.54 L1329.66 1210.54 L1329.08 1210.54 L1328.49 1210.54 L1327.9 1210.54 L1327.32 1210.54 L1326.73 1210.54 L1326.14 1210.54 L1325.56 1210.54 L1324.97 1210.54 L1324.39 1210.54 L1323.8 1210.54 L1323.21 1210.54 L1322.63 1210.54 L1322.04 1210.54 L1321.45 1210.54 L1320.87 1210.54 L1320.28 1210.54 L1319.69 1210.54 L1319.11 1210.54 L1318.52 1210.54 L1317.93 1210.54 L1317.35 1210.54 L1316.76 1210.54 L1316.18 1210.54 L1315.59 1210.54 L1315 1210.54 L1314.42 1210.54 L1313.83 1210.54 L1313.24 1210.54 L1312.66 1210.54 L1312.07 1210.54 L1311.48 1210.54 L1310.9 1210.54 L1310.31 1210.54 L1309.73 1210.54 L1309.14 1210.54 L1308.55 1210.54 L1307.97 1210.54 L1307.38 1210.54 L1306.79 1210.54 L1306.21 1210.54 L1305.62 1210.54 L1305.03 1210.54 L1304.45 1210.54 L1303.86 1210.54 L1303.27 1210.54 L1302.69 1210.54 L1302.1 1210.54 L1301.52 1210.54 L1300.93 1210.54 L1300.34 1210.54 L1299.76 1210.54 L1299.17 1210.54 L1298.58 1210.54 L1298 1210.54 L1297.41 1210.54 L1296.82 1210.54 L1296.24 1210.54 L1295.65 1210.54 L1295.06 1210.54 L1294.48 1210.54 L1293.89 1210.54 L1293.31 1210.54 L1292.72 1210.54 L1292.13 1210.54 L1291.55 1210.54 L1290.96 1210.54 L1290.37 1210.54 L1289.79 1210.54 L1289.2 1210.54 L1288.61 1210.54 L1288.03 1210.54 L1287.44 1210.54 L1286.86 1210.54 L1286.27 1210.54 L1285.68 1210.54 L1285.1 1210.54 L1284.51 1210.54 L1283.92 1210.54 L1283.34 1210.54 L1282.75 1210.54 L1282.16 1210.54 L1281.58 1210.54 L1280.99 1210.54 L1280.4 1210.54 L1279.82 1210.54 L1279.23 1210.54 L1278.65 1210.54 L1278.06 1210.54 L1277.47 1210.54 L1276.89 1210.54 L1276.3 1210.54 L1275.71 1210.54 L1275.13 1210.54 L1274.54 1210.54 L1273.95 1210.54 L1273.37 1210.54 L1272.78 1210.54 L1272.19 1210.54 L1271.61 1210.54 L1271.02 1210.54 L1270.44 1210.54 L1269.85 1210.54 L1269.26 1210.54 L1268.68 1210.54 L1268.09 1210.54 L1267.5 1210.54 L1266.92 1210.54 L1266.33 1210.54 L1265.74 1210.54 L1265.16 1210.54 L1264.57 1210.54 L1263.98 1210.54 L1263.4 1210.54 L1262.81 1210.54 L1262.23 1210.54 L1261.64 1210.54 L1261.05 1210.54 L1260.47 1210.54 L1259.88 1210.54 L1259.29 1210.54 L1258.71 1210.54 L1258.12 1210.54 L1257.53 1210.54 L1256.95 1210.54 L1256.36 1210.54 L1255.78 1210.54 L1255.19 1210.54 L1254.6 1210.54 L1254.02 1210.54 L1253.43 1210.54 L1252.84 1210.54 L1252.26 1210.54 L1251.67 1210.54 L1251.08 1210.54 L1250.5 1210.54 L1249.91 1210.54 L1249.32 1210.54 L1248.74 1210.54 L1248.15 1210.54 L1247.57 1210.54 L1246.98 1210.54 L1246.39 1210.54 L1245.81 1210.54 L1245.22 1210.54 L1244.63 1210.54 L1244.05 1210.54 L1243.46 1210.54 L1242.87 1210.54 L1242.29 1210.54 L1241.7 1210.54 L1241.11 1210.54 L1240.53 1210.54 L1239.94 1210.54 L1239.36 1210.54 L1238.77 1210.54 L1238.18 1210.54 L1237.6 1210.54 L1237.01 1210.54 L1236.42 1210.54 L1235.84 1210.54 L1235.25 1210.54 L1234.66 1210.54 L1234.08 1210.54 L1233.49 1210.54 L1232.91 1210.54 L1232.32 1210.54 L1231.73 1210.54 L1231.15 1210.54 L1230.56 1210.54 L1229.97 1210.54 L1229.39 1210.54 L1228.8 1210.54 L1228.21 1210.54 L1227.63 1210.54 L1227.04 1210.54 L1226.45 1210.54 L1225.87 1210.54 L1225.28 1210.54 L1224.7 1210.54 L1224.11 1210.54 L1223.52 1210.54 L1222.94 1210.54 L1222.35 1210.54 L1221.76 1210.54 L1221.18 1210.54 L1220.59 1210.54 L1220 1210.54 L1219.42 1210.54 L1218.83 1210.54 L1218.24 1210.54 L1217.66 1210.54 L1217.07 1210.54 L1216.49 1210.54 L1215.9 1210.54 L1215.31 1210.54 L1214.73 1210.54 L1214.14 1210.54 L1213.55 1210.54 L1212.97 1210.54 L1212.38 1210.54 L1211.79 1210.54 L1211.21 1210.54 L1210.62 1210.54 L1210.03 1210.54 L1209.45 1210.54 L1208.86 1210.54 L1208.28 1210.54 L1207.69 1210.54 L1207.1 1210.54 L1206.52 1210.54 L1205.93 1210.54 L1205.34 1210.54 L1204.76 1210.54 L1204.17 1210.54 L1203.58 1210.54 L1203 1210.54 L1202.41 1210.54 L1201.83 1210.54 L1201.24 1210.54 L1200.65 1210.54 L1200.07 1210.54 L1199.48 1210.54 L1198.89 1210.54 L1198.31 1210.54 L1197.72 1210.54 L1197.13 1210.54 L1196.55 1210.54 L1195.96 1210.54 L1195.37 1210.54 L1194.79 1210.54 L1194.2 1210.54 L1193.62 1210.54 L1193.03 1210.54 L1192.44 1210.54 L1191.86 1210.54 L1191.27 1210.54 L1190.68 1210.54 L1190.1 1210.54 L1189.51 1210.54 L1188.92 1210.54 L1188.34 1210.54 L1187.75 1210.54 L1187.16 1210.54 L1186.58 1210.54 L1185.99 1210.54 L1185.41 1210.54 L1184.82 1210.54 L1184.23 1210.54 L1183.65 1210.54 L1183.06 1210.54 L1182.47 1210.54 L1181.89 1210.54 L1181.3 1210.54 L1180.71 1210.54 L1180.13 1210.54 L1179.54 1210.54 L1178.96 1210.54 L1178.37 1210.54 L1177.78 1210.54 L1177.2 1210.54 L1176.61 1210.54 L1176.02 1210.54 L1175.44 1210.54 L1174.85 1210.54 L1174.26 1210.54 L1173.68 1210.54 L1173.09 1210.54 L1172.5 1210.54 L1171.92 1210.54 L1171.33 1210.54 L1170.75 1210.54 L1170.16 1210.54 L1169.57 1210.54 L1168.99 1210.54 L1168.4 1210.54 L1167.81 1210.54 L1167.23 1210.54 L1166.64 1210.54 L1166.05 1210.54 L1165.47 1210.54 L1164.88 1210.54 L1164.29 1210.54 L1163.71 1210.54 L1163.12 1210.54 L1162.54 1210.54 L1161.95 1210.54 L1161.36 1210.54 L1160.78 1210.54 L1160.19 1210.54 L1159.6 1210.54 L1159.02 1210.54 L1158.43 1210.54 L1157.84 1210.54 L1157.26 1210.54 L1156.67 1210.54 L1156.09 1210.54 L1155.5 1210.54 L1154.91 1210.54 L1154.33 1210.54 L1153.74 1210.54 L1153.15 1210.54 L1152.57 1210.54 L1151.98 1210.54 L1151.39 1210.54 L1150.81 1210.54 L1150.22 1210.54 L1149.63 1210.54 L1149.05 1210.54 L1148.46 1210.54 L1147.88 1210.54 L1147.29 1210.54 L1146.7 1210.54 L1146.12 1210.54 L1145.53 1210.54 L1144.94 1210.54 L1144.36 1210.54 L1143.77 1210.54 L1143.18 1210.54 L1142.6 1210.54 L1142.01 1210.54 L1141.42 1210.54 L1140.84 1210.54 L1140.25 1210.54 L1139.67 1210.54 L1139.08 1210.54 L1138.49 1210.54 L1137.91 1210.54 L1137.32 1210.54 L1136.73 1210.54 L1136.15 1210.54 L1135.56 1210.54 L1134.97 1210.54 L1134.39 1210.54 L1133.8 1210.54 L1133.21 1210.54 L1132.63 1210.54 L1132.04 1210.54 L1131.46 1210.54 L1130.87 1210.54 L1130.28 1210.54 L1129.7 1210.54 L1129.11 1210.54 L1128.52 1210.54 L1127.94 1210.54 L1127.35 1210.54 L1126.76 1210.54 L1126.18 1210.54 L1125.59 1210.54 L1125.01 1210.54 L1124.42 1210.54 L1123.83 1210.54 L1123.25 1210.54 L1122.66 1210.54 L1122.07 1210.54 L1121.49 1210.54 L1120.9 1210.54 L1120.31 1210.54 L1119.73 1210.54 L1119.14 1210.54 L1118.55 1210.54 L1117.97 1210.54 L1117.38 1210.54 L1116.8 1210.54 L1116.21 1210.54 L1115.62 1210.54 L1115.04 1210.54 L1114.45 1210.54 L1113.86 1210.54 L1113.28 1210.54 L1112.69 1210.54 L1112.1 1210.54 L1111.52 1210.54 L1110.93 1210.54 L1110.34 1210.54 L1109.76 1210.54 L1109.17 1210.54 L1108.59 1210.54 L1108 1210.54 L1107.41 1210.54 L1106.83 1210.54 L1106.24 1210.54 L1105.65 1210.54 L1105.07 1210.54 L1104.48 1210.54 L1103.89 1210.54 L1103.31 1210.54 L1102.72 1210.54 L1102.14 1210.54 L1101.55 1210.54 L1100.96 1210.54 L1100.38 1210.54 L1099.79 1210.54 L1099.2 1210.54 L1098.62 1210.54 L1098.03 1210.54 L1097.44 1210.54 L1096.86 1210.54 L1096.27 1210.54 L1095.68 1210.54 L1095.1 1210.54 L1094.51 1210.54 L1093.93 1210.54 L1093.34 1210.54 L1092.75 1210.54 L1092.17 1210.54 L1091.58 1210.54 L1090.99 1210.54 L1090.41 1210.54 L1089.82 1210.54 L1089.23 1210.54 L1088.65 1210.54 L1088.06 1210.54 L1087.47 1210.54 L1086.89 1210.54 L1086.3 1210.54 L1085.72 1210.54 L1085.13 1210.54 L1084.54 1210.54 L1083.96 1210.54 L1083.37 1210.54 L1082.78 1210.54 L1082.2 1210.54 L1081.61 1210.54 L1081.02 1210.54 L1080.44 1210.54 L1079.85 1210.54 L1079.26 1210.54 L1078.68 1210.54 L1078.09 1210.54 L1077.51 1210.54 L1076.92 1210.54 L1076.33 1210.54 L1075.75 1210.54 L1075.16 1210.54 L1074.57 1210.54 L1073.99 1210.54 L1073.4 1210.54 L1072.81 1210.54 L1072.23 1210.54 L1071.64 1210.54 L1071.06 1210.54 L1070.47 1210.54 L1069.88 1210.54 L1069.3 1210.54 L1068.71 1210.54 L1068.12 1210.54 L1067.54 1210.54 L1066.95 1210.54 L1066.36 1210.54 L1065.78 1210.54 L1065.19 1210.54 L1064.6 1210.54 L1064.02 1210.54 L1063.43 1210.54 L1062.85 1210.54 L1062.26 1210.54 L1061.67 1210.54 L1061.09 1210.54 L1060.5 1210.54 L1059.91 1210.54 L1059.33 1210.54 L1058.74 1210.54 L1058.15 1210.54 L1057.57 1210.54 L1056.98 1210.54 L1056.39 1210.54 L1055.81 1210.54 L1055.22 1210.54 L1054.64 1210.54 L1054.05 1210.54 L1053.46 1210.54 L1052.88 1210.54 L1052.29 1210.54 L1051.7 1210.54 L1051.12 1210.54 L1050.53 1210.54 L1049.94 1210.54 L1049.36 1210.54 L1048.77 1210.54 L1048.19 1210.54 L1047.6 1210.54 L1047.01 1210.54 L1046.43 1210.54 L1045.84 1210.54 L1045.25 1210.54 L1044.67 1210.54 L1044.08 1210.54 L1043.49 1210.54 L1042.91 1210.54 L1042.32 1210.54 L1041.73 1210.54 L1041.15 1210.54 L1040.56 1210.54 L1039.98 1210.54 L1039.39 1210.54 L1038.8 1210.54 L1038.22 1210.54 L1037.63 1210.54 L1037.04 1210.54 L1036.46 1210.54 L1035.87 1210.54 L1035.28 1210.54 L1034.7 1210.54 L1034.11 1210.54 L1033.52 1210.54 L1032.94 1210.54 L1032.35 1210.54 L1031.77 1210.54 L1031.18 1210.54 L1030.59 1210.54 L1030.01 1210.54 L1029.42 1210.54 L1028.83 1210.54 L1028.25 1210.54 L1027.66 1210.54 L1027.07 1210.54 L1026.49 1210.54 L1025.9 1210.54 L1025.32 1210.54 L1024.73 1210.54 L1024.14 1210.54 L1023.56 1210.54 L1022.97 1210.54 L1022.38 1210.54 L1021.8 1210.54 L1021.21 1210.54 L1020.62 1210.54 L1020.04 1210.54 L1019.45 1210.54 L1018.86 1210.54 L1018.28 1210.54 L1017.69 1210.54 L1017.11 1210.54 L1016.52 1210.54 L1015.93 1210.54 L1015.35 1210.54 L1014.76 1210.54 L1014.17 1210.54 L1013.59 1210.54 L1013 1210.54 L1012.41 1210.54 L1011.83 1210.54 L1011.24 1210.54 L1010.65 1210.54 L1010.07 1210.54 L1009.48 1210.54 L1008.9 1210.54 L1008.31 1210.54 L1007.72 1210.54 L1007.14 1210.54 L1006.55 1210.54 L1005.96 1210.54 L1005.38 1210.54 L1004.79 1210.54 L1004.2 1210.54 L1003.62 1210.54 L1003.03 1210.54 L1002.44 1210.54 L1001.86 1210.54 L1001.27 1210.54 L1000.69 1210.54 L1000.1 1210.54 L999.513 1210.54 L998.926 1210.54 L998.34 1210.54 L997.754 1210.54 L997.167 1210.54 L996.581 1210.54 L995.994 1210.54 L995.408 1210.54 L994.822 1210.54 L994.235 1210.54 L993.649 1210.54 L993.062 1210.54 L992.476 1210.54 L991.889 1210.54 L991.303 1210.54 L990.717 1210.54 L990.13 1210.54 L989.544 1210.54 L988.957 1210.54 L988.371 1210.54 L987.785 1210.54 L987.198 1210.54 L986.612 1210.54 L986.025 1210.54  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211 986.612,1211 987.198,1211 987.785,1211 988.371,1211 988.957,1211 989.544,1211 990.13,1211 990.717,1211 991.303,1211 991.889,1211 992.476,1211 993.062,1211 993.649,1211 994.235,1211 994.822,1211 995.408,1211 995.994,1211 996.581,1211 997.167,1211 997.754,1211 998.34,1211 998.926,1211 999.513,1211 1000.1,1211 1000.69,1211 1001.27,1211 1001.86,1211 1002.44,1211 1003.03,1211 1003.62,1211 1004.2,1211 1004.79,1211 1005.38,1211 1005.96,1211 1006.55,1211 1007.14,1211 1007.72,1211 1008.31,1211 1008.9,1211 1009.48,1211 1010.07,1211 1010.65,1211 1011.24,1211 1011.83,1211 1012.41,1211 1013,1211 1013.59,1211 1014.17,1211 1014.76,1211 1015.35,1211 1015.93,1211 1016.52,1211 1017.11,1211 1017.69,1211 1018.28,1211 1018.86,1211 1019.45,1211 1020.04,1211 1020.62,1211 1021.21,1211 1021.8,1211 1022.38,1211 1022.97,1211 1023.56,1211 1024.14,1211 1024.73,1211 1025.32,1211 1025.9,1211 1026.49,1211 1027.07,1211 1027.66,1211 1028.25,1211 1028.83,1211 1029.42,1211 1030.01,1211 1030.59,1211 1031.18,1211 1031.77,1211 1032.35,1211 1032.94,1211 1033.52,1211 1034.11,1211 1034.7,1211 1035.28,1211 1035.87,1211 1036.46,1211 1037.04,1211 1037.63,1211 1038.22,1211 1038.8,1211 1039.39,1211 1039.98,1211 1040.56,1211 1041.15,1211 1041.73,1211 1042.32,1211 1042.91,1211 1043.49,1211 1044.08,1211 1044.67,1211 1045.25,1211 1045.84,1211 1046.43,1211 1047.01,1211 1047.6,1211 1048.19,1211 1048.77,1211 1049.36,1211 1049.94,1211 1050.53,1211 1051.12,1211 1051.7,1211 1052.29,1211 1052.88,1211 1053.46,1211 1054.05,1211 1054.64,1211 1055.22,1211 1055.81,1211 1056.39,1211 1056.98,1211 1057.57,1211 1058.15,1211 1058.74,1211 1059.33,1211 1059.91,1211 1060.5,1211 1061.09,1211 1061.67,1211 1062.26,1211 1062.85,1211 1063.43,1211 1064.02,1211 1064.6,1211 1065.19,1211 1065.78,1211 1066.36,1211 1066.95,1211 1067.54,1211 1068.12,1211 1068.71,1211 1069.3,1211 1069.88,1211 1070.47,1211 1071.06,1211 1071.64,1211 1072.23,1211 1072.81,1211 1073.4,1211 1073.99,1211 1074.57,1211 1075.16,1211 1075.75,1211 1076.33,1211 1076.92,1211 1077.51,1211 1078.09,1211 1078.68,1211 1079.26,1211 1079.85,1211 1080.44,1211 1081.02,1211 1081.61,1211 1082.2,1211 1082.78,1211 1083.37,1211 1083.96,1211 1084.54,1211 1085.13,1211 1085.72,1211 1086.3,1211 1086.89,1211 1087.47,1211 1088.06,1211 1088.65,1211 1089.23,1211 1089.82,1211 1090.41,1211 1090.99,1211 1091.58,1211 1092.17,1211 1092.75,1211 1093.34,1211 1093.93,1211 1094.51,1211 1095.1,1211 1095.68,1211 1096.27,1211 1096.86,1211 1097.44,1211 1098.03,1211 1098.62,1211 1099.2,1211 1099.79,1211 1100.38,1211 1100.96,1211 1101.55,1211 1102.14,1211 1102.72,1211 1103.31,1211 1103.89,1211 1104.48,1211 1105.07,1211 1105.65,1211 1106.24,1211 1106.83,1211 1107.41,1211 1108,1211 1108.59,1211 1109.17,1211 1109.76,1211 1110.34,1211 1110.93,1211 1111.52,1211 1112.1,1211 1112.69,1211 1113.28,1211 1113.86,1211 1114.45,1211 1115.04,1211 1115.62,1211 1116.21,1211 1116.8,1211 1117.38,1211 1117.97,1211 1118.55,1211 1119.14,1211 1119.73,1211 1120.31,1211 1120.9,1211 1121.49,1211 1122.07,1211 1122.66,1211 1123.25,1211 1123.83,1211 1124.42,1211 1125.01,1211 1125.59,1211 1126.18,1211 1126.76,1211 1127.35,1211 1127.94,1211 1128.52,1211 1129.11,1211 1129.7,1211 1130.28,1211 1130.87,1211 1131.46,1211 1132.04,1211 1132.63,1211 1133.21,1211 1133.8,1211 1134.39,1211 1134.97,1211 1135.56,1211 1136.15,1211 1136.73,1211 1137.32,1211 1137.91,1211 1138.49,1211 1139.08,1211 1139.67,1211 1140.25,1211 1140.84,1211 1141.42,1211 1142.01,1211 1142.6,1211 1143.18,1211 1143.77,1211 1144.36,1211 1144.94,1211 1145.53,1211 1146.12,1211 1146.7,1211 1147.29,1211 1147.88,1211 1148.46,1211 1149.05,1211 1149.63,1211 1150.22,1211 1150.81,1211 1151.39,1211 1151.98,1211 1152.57,1211 1153.15,1211 1153.74,1211 1154.33,1211 1154.91,1211 1155.5,1211 1156.09,1211 1156.67,1211 1157.26,1211 1157.84,1211 1158.43,1211 1159.02,1211 1159.6,1211 1160.19,1211 1160.78,1211 1161.36,1211 1161.95,1211 1162.54,1211 1163.12,1211 1163.71,1211 1164.29,1211 1164.88,1211 1165.47,1211 1166.05,1211 1166.64,1211 1167.23,1211 1167.81,1211 1168.4,1211 1168.99,1211 1169.57,1211 1170.16,1211 1170.75,1211 1171.33,1211 1171.92,1211 1172.5,1211 1173.09,1211 1173.68,1211 1174.26,1211 1174.85,1211 1175.44,1211 1176.02,1211 1176.61,1211 1177.2,1211 1177.78,1211 1178.37,1211 1178.96,1211 1179.54,1211 1180.13,1211 1180.71,1211 1181.3,1211 1181.89,1211 1182.47,1211 1183.06,1211 1183.65,1211 1184.23,1211 1184.82,1211 1185.41,1211 1185.99,1211 1186.58,1211 1187.16,1211 1187.75,1211 1188.34,1211 1188.92,1211 1189.51,1211 1190.1,1211 1190.68,1211 1191.27,1211 1191.86,1211 1192.44,1211 1193.03,1211 1193.62,1211 1194.2,1211 1194.79,1211 1195.37,1211 1195.96,1211 1196.55,1211 1197.13,1211 1197.72,1211 1198.31,1211 1198.89,1211 1199.48,1211 1200.07,1211 1200.65,1211 1201.24,1211 1201.83,1211 1202.41,1211 1203,1211 1203.58,1211 1204.17,1211 1204.76,1211 1205.34,1211 1205.93,1211 1206.52,1211 1207.1,1211 1207.69,1211 1208.28,1211 1208.86,1211 1209.45,1211 1210.03,1211 1210.62,1211 1211.21,1211 1211.79,1211 1212.38,1211 1212.97,1211 1213.55,1211 1214.14,1211 1214.73,1211 1215.31,1211 1215.9,1211 1216.49,1211 1217.07,1211 1217.66,1211 1218.24,1211 1218.83,1211 1219.42,1211 1220,1211 1220.59,1211 1221.18,1211 1221.76,1211 1222.35,1211 1222.94,1211 1223.52,1211 1224.11,1211 1224.7,1211 1225.28,1211 1225.87,1211 1226.45,1211 1227.04,1211 1227.63,1211 1228.21,1211 1228.8,1211 1229.39,1211 1229.97,1211 1230.56,1211 1231.15,1211 1231.73,1211 1232.32,1211 1232.91,1211 1233.49,1211 1234.08,1211 1234.66,1211 1235.25,1211 1235.84,1211 1236.42,1211 1237.01,1211 1237.6,1211 1238.18,1211 1238.77,1211 1239.36,1211 1239.94,1211 1240.53,1211 1241.11,1211 1241.7,1211 1242.29,1211 1242.87,1211 1243.46,1211 1244.05,1211 1244.63,1211 1245.22,1211 1245.81,1211 1246.39,1211 1246.98,1211 1247.57,1211 1248.15,1211 1248.74,1211 1249.32,1211 1249.91,1211 1250.5,1211 1251.08,1211 1251.67,1211 1252.26,1211 1252.84,1211 1253.43,1211 1254.02,1211 1254.6,1211 1255.19,1211 1255.78,1211 1256.36,1211 1256.95,1211 1257.53,1211 1258.12,1211 1258.71,1211 1259.29,1211 1259.88,1211 1260.47,1211 1261.05,1211 1261.64,1211 1262.23,1211 1262.81,1211 1263.4,1211 1263.98,1211 1264.57,1211 1265.16,1211 1265.74,1211 1266.33,1211 1266.92,1211 1267.5,1211 1268.09,1211 1268.68,1211 1269.26,1211 1269.85,1211 1270.44,1211 1271.02,1211 1271.61,1211 1272.19,1211 1272.78,1211 1273.37,1211 1273.95,1211 1274.54,1211 1275.13,1211 1275.71,1211 1276.3,1211 1276.89,1211 1277.47,1211 1278.06,1211 1278.65,1211 1279.23,1211 1279.82,1211 1280.4,1211 1280.99,1211 1281.58,1211 1282.16,1211 1282.75,1211 1283.34,1211 1283.92,1211 1284.51,1211 1285.1,1211 1285.68,1211 1286.27,1211 1286.86,1211 1287.44,1211 1288.03,1211 1288.61,1211 1289.2,1211 1289.79,1211 1290.37,1211 1290.96,1211 1291.55,1211 1292.13,1211 1292.72,1211 1293.31,1211 1293.89,1211 1294.48,1211 1295.06,1211 1295.65,1211 1296.24,1211 1296.82,1211 1297.41,1211 1298,1211 1298.58,1211 1299.17,1211 1299.76,1211 1300.34,1211 1300.93,1211 1301.52,1211 1302.1,1211 1302.69,1211 1303.27,1211 1303.86,1211 1304.45,1211 1305.03,1211 1305.62,1211 1306.21,1211 1306.79,1211 1307.38,1211 1307.97,1211 1308.55,1211 1309.14,1211 1309.73,1211 1310.31,1211 1310.9,1211 1311.48,1211 1312.07,1211 1312.66,1211 1313.24,1211 1313.83,1211 1314.42,1211 1315,1211 1315.59,1211 1316.18,1211 1316.76,1211 1317.35,1211 1317.93,1211 1318.52,1211 1319.11,1211 1319.69,1211 1320.28,1211 1320.87,1211 1321.45,1211 1322.04,1211 1322.63,1211 1323.21,1211 1323.8,1211 1324.39,1211 1324.97,1211 1325.56,1211 1326.14,1211 1326.73,1211 1327.32,1211 1327.9,1211 1328.49,1211 1329.08,1211 1329.66,1211 1330.25,1211 1330.84,1211 1331.42,1211 1332.01,1211 1332.6,1211 1333.18,1211 1333.77,1211 1334.35,1211 1334.94,1211 1335.53,1211 1336.11,1211 1336.7,1211 1337.29,1211 1337.87,1211 1338.46,1211 1339.05,1211 1339.63,1211 1340.22,1211 1340.8,1211 1341.39,1211 1341.98,1211 1342.56,1211 1343.15,1211 1343.74,1211 1344.32,1211 1344.91,1211 1345.5,1211 1346.08,1211 1346.67,1211 1347.26,1211 1347.84,1211 1348.43,1211 1349.01,1211 1349.6,1211 1350.19,1211 1350.77,1211 1351.36,1211 1351.95,1211 1352.53,1211 1353.12,1211 1353.71,1211 1354.29,1211 1354.88,1211 1355.47,1211 1356.05,1211 1356.64,1211 1357.22,1211 1357.81,1211 1358.4,1211 1358.98,1211 1359.57,1211 1360.16,1211 1360.74,1211 1361.33,1211 1361.92,1211 1362.5,1211 1363.09,1211 1363.68,1211 1364.26,1211 1364.85,1211 1365.43,1211 1366.02,1211 1366.61,1211 1367.19,1211 1367.78,1211 1368.37,1211 1368.95,1211 1369.54,1211 1370.13,1211 1370.71,1211 1371.3,1211 1371.88,1211 1372.47,1211 1373.06,1211 1373.64,1211 1374.23,1211 1374.82,1211 1375.4,1211 1375.99,1211 1376.58,1211 1377.16,1211 1377.75,1211 1378.34,1211 1378.92,1211 1379.51,1211 1380.09,1211 1380.68,1211 1381.27,1211 1381.85,1211 1382.44,1211 1383.03,1211 1383.61,1211 1384.2,1211 1384.79,1211 1385.37,1211 1385.96,1211 1386.55,1211 1387.13,1211 1387.72,1211 1388.3,1211 1388.89,1211 1389.48,1211 1390.06,1211 1390.65,1211 1391.24,1211 1391.82,1211 1392.41,1211 1393,1211 1393.58,1211 1394.17,1211 1394.75,1211 1395.34,1211 1395.93,1211 1396.51,1211 1397.1,1211 1397.69,1211 1398.27,1211 1398.86,1211 1399.45,1211 1400.03,1211 1400.62,1211 1401.21,1211 1401.79,1211 1402.38,1211 1402.96,1211 1403.55,1211 1404.14,1211 1404.72,1211 1405.31,1211 1405.9,1211 1406.48,1211 1407.07,1211 1407.66,1211 1408.24,1211 1408.83,1211 1409.42,1211 1410,1211 1410.59,1211 1411.17,1211 1411.76,1211 1412.35,1211 1412.93,1211 1413.52,1211 1414.11,1211 1414.69,1211 1415.28,1211 1415.87,1211 1416.45,1211 1417.04,1211 1417.63,1211 1418.21,1211 1418.8,1211 1419.38,1211 1419.97,1211 1420.56,1211 1421.14,1211 1421.73,1211 1422.32,1211 1422.9,1211 1423.49,1211 1424.08,1211 1424.66,1211 1425.25,1211 1425.83,1211 1426.42,1211 1427.01,1211 1427.59,1211 1428.18,1211 1428.77,1211 1429.35,1211 1429.94,1211 1430.53,1211 1431.11,1211 1431.7,1211 1432.29,1211 1432.87,1211 1433.46,1211 1434.04,1211 1434.63,1211 1435.22,1211 1435.8,1211 1436.39,1211 1436.98,1211 1437.56,1211 1438.15,1211 1438.74,1211 1439.32,1211 1439.91,1211 1440.5,1211 1441.08,1211 1441.67,1211 1442.25,1211 1442.84,1211 1443.43,1211 1444.01,1211 1444.6,1211 1445.19,1211 1445.77,1211 1446.36,1211 1446.95,1211 1447.53,1211 1448.12,1211 1448.7,1211 1449.29,1211 1449.88,1211 1450.46,1211 1451.05,1211 1451.64,1211 1452.22,1211 1452.81,1211 1453.4,1211 1453.98,1211 1454.57,1211 1455.16,1211 1455.74,1211 1456.33,1211 1456.91,1211 1457.5,1211 1458.09,1211 1458.67,1211 1459.26,1211 1459.85,1211 1460.43,1211 1461.02,1211 1461.61,1211 1462.19,1211 1462.78,1211 1463.37,1211 1463.95,1211 1464.54,1211 1465.12,1211 1465.71,1211 1466.3,1211 1466.88,1211 1467.47,1211 1468.06,1211 1468.64,1211 1469.23,1211 1469.82,1211 1470.4,1211 1470.99,1211 1471.57,1211 1472.16,1211 1472.75,1211 1473.33,1211 1473.92,1211 1474.51,1211 1475.09,1211 1475.68,1211 1476.27,1211 1476.85,1211 1477.44,1211 1478.03,1211 1478.61,1211 1479.2,1211 1479.78,1211 1480.37,1211 1480.96,1211 1481.54,1211 1482.13,1211 1482.72,1211 1483.3,1211 1483.89,1211 1484.48,1211 1485.06,1211 1485.65,1211 1486.24,1211 1486.82,1211 1487.41,1211 1487.99,1211 1488.58,1211 1489.17,1211 1489.75,1211 1490.34,1211 1490.93,1211 1491.51,1211 1492.1,1211 1492.69,1211 1493.27,1211 1493.86,1211 1494.45,1211 1495.03,1211 1495.62,1211 1496.2,1211 1496.79,1211 1497.38,1211 1497.96,1211 1498.55,1211 1499.14,1211 1499.72,1211 1500.31,1211 1500.9,1211 1501.48,1211 1502.07,1211 1502.65,1211 1503.24,1211 1503.83,1211 1504.41,1211 1505,1211 1505.59,1211 1506.17,1211 1506.76,1211 1507.35,1211 1507.93,1211 1508.52,1211 1509.11,1211 1509.69,1211 1510.28,1211 1510.86,1211 1511.45,1211 1512.04,1211 1512.62,1211 1513.21,1211 1513.8,1211 1514.38,1211 1514.97,1211 1515.56,1211 1516.14,1211 1516.73,1211 1517.32,1211 1517.9,1211 1518.49,1211 1519.07,1211 1519.66,1211 1520.25,1211 1520.83,1211 1521.42,1211 1522.01,1211 1522.59,1211 1523.18,1211 1523.77,1211 1524.35,1211 1524.94,1211 1525.52,1211 1526.11,1211 1526.7,1211 1527.28,1211 1527.87,1211 1528.46,1211 1529.04,1211 1529.63,1211 1530.22,1211 1530.8,1211 1531.39,1211 1531.98,1211 1532.56,1211 1533.15,1211 1533.73,1211 1534.32,1211 1534.91,1211 1535.49,1211 1536.08,1211 1536.67,1211 1537.25,1211 1537.84,1211 1538.43,1211 1539.01,1211 1539.6,1211 1540.19,1211 1540.77,1211 1541.36,1211 1541.94,1211 1542.53,1211 1543.12,1211 1543.7,1211 1544.29,1211 1544.88,1211 1545.46,1211 1546.05,1211 1546.64,1211 1547.22,1211 1547.81,1211 1548.4,1211 1548.98,1211 1549.57,1211 1550.15,1211 1550.74,1211 1551.33,1211 1551.91,1211 1552.5,1211 1553.09,1211 1553.67,1211 1554.26,1211 1554.85,1211 1555.43,1211 1556.02,1211 1556.6,1211 1557.19,1211 1557.78,1211 1558.36,1211 1558.95,1211 1559.54,1211 1560.12,1211 1560.71,1211 1561.3,1211 1561.88,1211 1562.47,1211 1563.06,1211 1563.64,1211 1564.23,1211 1564.81,1211 1565.4,1211 1565.99,1211 1566.57,1211 1567.16,1211 1567.75,1211 1568.33,1211 1568.92,1211 1569.51,1211 1570.09,1211 1570.68,1211 1571.27,1211 1571.85,1211 1572.44,1211 1573.02,1211 1573.61,1211 1574.2,1211 1574.78,1211 1575.37,1211 1575.96,1211 1576.54,1211 1577.13,1211 1577.72,1211 1578.3,1211 1578.89,1211 1579.47,1211 1580.06,1211 1580.65,1211 1581.23,1211 1581.82,1211 1582.41,1211 1582.99,1211 1583.58,1211 1584.17,1211 1584.75,1211 1585.34,1211 1585.93,1211 1586.51,1211 1587.1,1211 1587.68,1211 1588.27,1211 1588.86,1211 1589.44,1211 1590.03,1211 1590.62,1211 1591.2,1211 1591.79,1211 1592.38,1211 1592.96,1211 1593.55,1211 1594.14,1211 1594.72,1211 1595.31,1211 1595.89,1211 1596.48,1211 1597.07,1211 1597.65,1211 1598.24,1211 1598.83,1211 1599.41,1211 1600,1211 1600.59,1211 1601.17,1211 1601.76,1211 1602.34,1211 1602.93,1211 1603.52,1211 1604.1,1211 1604.69,1211 1605.28,1211 1605.86,1211 1606.45,1211 1607.04,1211 1607.62,1211 1608.21,1211 1608.8,1211 1609.38,1211 1609.97,1211 1610.55,1211 1611.14,1211 1611.73,1211 1612.31,1211 1612.9,1211 1613.49,1211 1614.07,1211 1614.66,1211 1615.25,1211 1615.83,1211 1616.42,1211 1617.01,1211 1617.59,1211 1618.18,1211 1618.76,1211 1619.35,1211 1619.94,1211 1620.52,1211 1621.11,1211 1621.7,1211 1622.28,1211 1622.87,1211 1623.46,1211 1624.04,1211 1624.63,1211 1625.22,1211 1625.8,1211 1626.39,1211 1626.97,1211 1627.56,1211 1628.15,1211 1628.73,1211 1629.32,1211 1629.91,1211 1630.49,1211 1631.08,1211 1631.67,1211 1632.25,1211 1632.84,1211 1633.42,1211 1634.01,1211 1634.6,1211 1635.18,1211 1635.77,1211 1636.36,1211 1636.94,1211 1637.53,1211 1638.12,1211 1638.7,1211 1639.29,1211 1639.88,1211 1640.46,1211 1641.05,1211 1641.63,1211 1642.22,1211 1642.81,1211 1643.39,1211 1643.98,1211 1644.57,1211 1645.15,1211 1645.74,1211 1646.33,1211 1646.91,1211 1647.5,1211 1648.09,1211 1648.67,1211 1649.26,1211 1649.84,1211 1650.43,1211 1651.02,1211 1651.6,1211 1652.19,1211 1652.78,1211 1653.36,1211 1653.95,1211 1654.54,1211 1655.12,1211 1655.71,1211 1656.29,1211 1656.88,1211 1657.47,1211 1658.05,1211 1658.64,1211 1659.23,1211 1659.81,1211 1660.4,1211 1660.99,1211 1661.57,1211 1662.16,1211 1662.75,1211 1663.33,1211 1663.92,1211 1664.5,1211 1665.09,1211 1665.68,1211 1666.26,1211 1666.85,1211 1667.44,1211 1668.02,1211 1668.61,1211 1669.2,1211 1669.78,1211 1670.37,1211 1670.96,1211 1671.54,1211 1672.13,1211 1672.71,1211 1673.3,1211 1673.89,1211 1674.47,1211 1675.06,1211 1675.65,1211 1676.23,1211 1676.82,1211 1677.41,1211 1677.99,1211 1678.58,1211 1679.17,1211 1679.75,1211 1680.34,1211 1680.92,1211 1681.51,1211 1682.1,1211 1682.68,1211 1683.27,1211 1683.86,1211 1684.44,1211 1685.03,1211 1685.62,1211 1686.2,1211 1686.79,1211 1687.37,1211 1687.96,1211 1688.55,1211 1689.13,1211 1689.72,1211 1690.31,1211 1690.89,1211 1691.48,1211 1692.07,1211 1692.65,1211 1693.24,1211 1693.83,1211 1694.41,1211 1695,1211 1695.58,1211 1696.17,1211 1696.76,1211 1697.34,1211 1697.93,1211 1698.52,1211 1699.1,1211 1699.69,1211 1700.28,1211 1700.86,1211 1701.45,1211 1702.04,1211 1702.62,1211 1703.21,1211 1703.79,1211 1704.38,1211 1704.97,1211 1705.55,1211 1706.14,1211 1706.73,1211 1707.31,1211 1707.9,1211 1708.49,1211 1709.07,1211 1709.66,1211 1710.24,1211 1710.83,1211 1711.42,1211 1712,1211 1712.59,1211 1713.18,1211 1713.76,1211 1714.35,1211 1714.94,1211 1715.52,1211 1716.11,1211 1716.7,1211 1717.28,1211 1717.87,1211 1718.45,1211 1719.04,1211 1719.63,1211 1720.21,1211 1720.8,1211 1721.39,1211 1721.97,1211 1722.56,1211 1723.15,1211 1723.73,1211 1724.32,1211 1724.91,1211 1725.49,1211 1726.08,1211 1726.66,1211 1727.25,1211 1727.84,1211 1728.42,1211 1729.01,1211 1729.6,1211 1730.18,1211 1730.77,1211 1731.36,1211 1731.94,1211 1732.53,1211 1733.11,1211 1733.7,1211 1734.29,1211 1734.87,1211 1735.46,1211 1736.05,1211 1736.63,1211 1737.22,1211 1737.81,1211 1738.39,1211 1738.98,1211 1739.57,1211 1740.15,1211 1740.74,1211 1741.32,1211 1741.91,1211 1742.5,1211 1743.08,1211 1743.67,1211 1744.26,1211 1744.84,1211 1745.43,1211 1746.02,1211 1746.6,1211 1747.19,1211 1747.78,1211 1748.36,1211 1748.95,1211 1749.53,1211 1750.12,1211 1750.71,1211 1751.29,1211 1751.88,1211 1752.47,1211 1753.05,1211 1753.64,1211 1754.23,1211 1754.81,1211 1755.4,1211 1755.99,1211 1756.57,1211 1757.16,1211 1757.74,1211 1758.33,1211 1758.92,1211 1759.5,1211 1760.09,1211 1760.68,1211 1761.26,1211 1761.85,1211 1762.44,1211 1763.02,1211 1763.61,1211 1764.19,1211 1764.78,1211 1765.37,1211 1765.95,1211 1766.54,1211 1767.13,1211 1767.71,1211 1768.3,1211 1768.89,1211 1769.47,1211 1770.06,1211 1770.65,1211 1771.23,1211 1771.82,1211 1772.4,1211 1772.99,1211 1773.58,1211 1774.16,1211 1774.75,1211 1775.34,1211 1775.92,1211 1776.51,1211 1777.1,1211 1777.68,1211 1778.27,1211 1778.86,1211 1779.44,1211 1780.03,1211 1780.61,1211 1781.2,1211 1781.79,1211 1782.37,1211 1782.96,1211 1783.55,1211 1784.13,1211 1784.72,1211 1785.31,1211 1785.89,1211 1786.48,1211 1787.06,1211 1787.65,1211 1788.24,1211 1788.82,1211 1789.41,1211 1790,1211 1790.58,1211 1791.17,1211 1791.76,1211 1792.34,1211 1792.93,1211 1793.52,1211 1794.1,1211 1794.69,1211 1795.27,1211 1795.86,1211 1796.45,1211 1797.03,1211 1797.62,1211 1798.21,1211 1798.79,1211 1799.38,1211 1799.97,1211 1800.55,1211 1801.14,1211 1801.73,1211 1802.31,1211 1802.9,1211 1803.48,1211 1804.07,1211 1804.66,1211 1805.24,1211 1805.83,1211 1806.42,1211 1807,1211 1807.59,1211 1808.18,1211 1808.76,1211 1809.35,1211 1809.94,1211 1810.52,1211 1811.11,1211 1811.69,1211 1812.28,1211 1812.87,1211 1813.45,1211 1814.04,1211 1814.63,1211 1815.21,1211 1815.8,1211 1816.39,1211 1816.97,1211 1817.56,1211 1818.14,1211 1818.73,1211 1819.32,1211 1819.9,1211 1820.49,1211 1821.08,1211 1821.66,1211 1822.25,1211 1822.84,1211 1823.42,1211 1824.01,1211 1824.6,1211 1825.18,1211 1825.77,1211 1826.35,1211 1826.94,1211 1827.53,1211 1828.11,1211 1828.7,1211 1829.29,1211 1829.87,1211 1830.46,1211 1831.05,1211 1831.63,1211 1832.22,1211 1832.81,1211 1833.39,1211 1833.98,1211 1834.56,1211 1835.15,1211 1835.74,1211 1836.32,1211 1836.91,1211 1837.5,1211 1838.08,1211 1838.67,1211 1839.26,1211 1839.84,1211 1840.43,1211 1841.01,1211 1841.6,1211 1842.19,1211 1842.77,1211 1843.36,1211 1843.95,1211 1844.53,1211 1845.12,1211 1845.71,1211 1846.29,1211 1846.88,1211 1847.47,1211 1848.05,1211 1848.64,1211 1849.22,1211 1849.81,1211 1850.4,1211 1850.98,1211 1851.57,1211 1852.16,1211 1852.74,1211 1853.33,1211 1853.92,1211 1854.5,1211 1855.09,1211 1855.68,1211 1856.26,1211 1856.85,1211 1857.43,1211 1858.02,1211 1858.61,1211 1859.19,1211 1859.78,1211 1860.37,1211 1860.95,1211 1861.54,1211 1862.13,1211 1862.71,1211 1863.3,1211 1863.88,1211 1864.47,1211 1865.06,1211 1865.64,1211 1866.23,1211 1866.82,1211 1867.4,1211 1867.99,1211 1868.58,1211 1869.16,1211 1869.75,1211 1870.34,1211 1870.92,1211 1871.51,1211 1872.09,1211 1872.68,1211 1873.27,1211 1873.85,1211 1874.44,1211 1875.03,1211 1875.61,1211 1876.2,1211 1876.79,1211 1877.37,1211 1877.96,1211 1878.55,1211 1879.13,1211 1879.72,1211 1880.3,1211 1880.89,1211 1881.48,1211 1882.06,1211 1882.65,1211 1883.24,1211 1883.82,1211 1884.41,1211 1885,1211 1885.58,1211 1886.17,1211 1886.76,1211 1887.34,1211 1887.93,1211 1888.51,1211 1889.1,1211 1889.69,1211 1890.27,1211 1890.86,1211 1891.45,1211 1892.03,1211 1892.62,1211 1893.21,1211 1893.79,1211 1894.38,1211 1894.96,1211 1895.55,1211 1896.14,1211 1896.72,1211 1897.31,1211 1897.9,1211 1898.48,1211 1899.07,1211 1899.66,1211 1900.24,1211 1900.83,1211 1901.42,1211 1902,1211 1902.59,1211 1903.17,1211 1903.76,1211 1904.35,1211 1904.93,1211 1905.52,1211 1906.11,1211 1906.69,1211 1907.28,1211 1907.87,1211 1908.45,1211 1909.04,1211 1909.63,1211 1910.21,1211 1910.8,1211 1911.38,1211 1911.97,1211 1912.56,1211 1913.14,1211 1913.73,1211 1914.32,1211 1914.9,1211 1915.49,1211 1916.08,1211 1916.66,1211 1917.25,1211 1917.83,1211 1918.42,1211 1919.01,1211 1919.59,1211 1920.18,1211 1920.77,1211 1921.35,1211 1921.94,1211 1922.53,1211 1923.11,1211 1923.7,1211 1924.29,1211 1924.87,1211 1925.46,1211 1926.04,1211 1926.63,1211 1927.22,1211 1927.8,1211 1928.39,1211 1928.98,1211 1929.56,1211 1930.15,1211 1930.74,1211 1931.32,1211 1931.91,1211 1932.5,1211 1933.08,1211 1933.67,1211 1934.25,1211 1934.84,1211 1935.43,1211 1936.01,1211 1936.6,1211 1937.19,1211 1937.77,1211 1938.36,1211 1938.95,1211 1939.53,1211 1940.12,1211 1940.71,1211 1941.29,1211 1941.88,1211 1942.46,1211 1943.05,1211 1943.64,1211 1944.22,1211 1944.81,1211 1945.4,1211 1945.98,1211 1946.57,1211 1947.16,1211 1947.74,1211 1948.33,1211 1948.91,1211 1949.5,1211 1950.09,1211 1950.67,1211 1951.26,1211 1951.85,1211 1952.43,1211 1953.02,1211 1953.61,1211 1954.19,1211 1954.78,1211 1955.37,1211 1955.95,1211 1956.54,1211 1957.12,1211 1957.71,1211 1958.3,1211 1958.88,1211 1959.47,1211 1960.06,1211 1960.64,1211 1961.23,1211 1961.82,1211 1962.4,1211 1962.99,1211 1963.58,1211 1964.16,1211 1964.75,1211 1965.33,1211 1965.92,1211 1966.51,1211 1967.09,1211 1967.68,1211 1968.27,1211 1968.85,1211 1969.44,1211 1970.03,1211 1970.61,1211 1971.2,1211 1971.78,1211 1972.37,1211 1972.96,1211 1973.54,1211 1974.13,1211 1974.72,1211 1975.3,1211 1975.89,1211 1976.48,1211 1977.06,1211 1977.65,1211 1978.24,1211 1978.82,1211 1979.41,1211 1979.99,1211 1980.58,1211 1981.17,1211 1981.75,1211 1982.34,1211 1982.93,1211 1983.51,1211 1984.1,1211 1984.69,1211 1985.27,1211 1985.86,1211 1986.45,1211 1987.03,1211 1987.62,1211 1988.2,1211 1988.79,1211 1989.38,1211 1989.96,1211 1990.55,1211 1991.14,1211 1991.72,1211 1992.31,1211 1992.9,1211 1993.48,1211 1994.07,1211 1994.65,1211 1995.24,1211 1995.83,1211 1996.41,1211 1997,1211 1997.59,1211 1998.17,1211 1998.76,1211 1999.35,1211 1999.93,1211 2000.52,1211 2001.11,1211 2001.69,1211 2002.28,1211 2002.86,1211 2003.45,1211 2004.04,1211 2004.62,1211 2005.21,1211 2005.8,1211 2006.38,1211 2006.97,1211 2007.56,1211 2008.14,1211 2008.73,1211 2009.32,1211 2009.9,1211 2010.49,1211 2011.07,1211 2011.66,1211 2012.25,1211 2012.83,1211 2013.42,1211 2014.01,1211 2014.59,1211 2015.18,1211 2015.77,1211 2016.35,1211 2016.94,1211 2017.53,1211 2018.11,1211 2018.7,1211 2019.28,1211 2019.87,1211 2020.46,1211 2021.04,1211 2021.63,1211 2022.22,1211 2022.8,1211 2023.39,1211 2023.98,1211 2024.56,1211 2025.15,1211 2025.73,1211 2026.32,1211 2026.91,1211 2027.49,1211 2028.08,1211 2028.67,1211 2029.25,1211 2029.84,1211 2030.43,1211 2031.01,1211 2031.6,1211 2032.19,1211 2032.77,1211 2033.36,1211 2033.94,1211 2034.53,1211 2035.12,1211 2035.7,1211 2036.29,1211 2036.88,1211 2037.46,1211 2038.05,1211 2038.64,1211 2039.22,1211 2039.81,1211 2040.4,1211 2040.98,1211 2041.57,1211 2042.15,1211 2042.74,1211 2043.33,1211 2043.91,1211 2044.5,1211 2045.09,1211 2045.67,1211 2046.26,1211 2046.85,1211 2047.43,1211 2048.02,1211 2048.6,1211 2049.19,1211 2049.78,1211 2050.36,1211 2050.95,1211 2051.54,1211 2052.12,1211 2052.71,1211 2053.3,1211 2053.88,1211 2054.47,1211 2055.06,1211 2055.64,1211 2056.23,1211 2056.81,1211 2057.4,1211 2057.99,1211 2058.57,1211 2059.16,1211 2059.75,1211 2060.33,1211 2060.92,1211 2061.51,1211 2062.09,1211 2062.68,1211 2063.27,1211 2063.85,1211 2064.44,1211 2065.02,1211 2065.61,1211 2066.2,1211 2066.78,1211 2067.37,1211 2067.96,1211 2068.54,1211 2069.13,1211 2069.72,1211 2070.3,1211 2070.89,1211 2071.48,1211 2072.06,1211 2072.65,1211 2073.23,1211 2073.82,1211 2074.41,1211 2074.99,1211 2075.58,1211 2076.17,1211 2076.75,1211 2077.34,1211 2077.93,1211 2078.51,1211 2079.1,1211 2079.68,1211 2080.27,1211 2080.86,1211 2081.44,1211 2082.03,1211 2082.62,1211 2083.2,1211 2083.79,1211 2084.38,1211 2084.96,1211 2085.55,1211 2086.14,1211 2086.72,1211 2087.31,1211 2087.89,1211 2088.48,1211 2089.07,1211 2089.65,1211 2090.24,1211 2090.83,1211 2091.41,1211 2092,1211 2092.59,1211 2093.17,1211 2093.76,1211 2094.35,1211 2094.93,1211 2095.52,1211 2096.1,1211 2096.69,1211 2097.28,1211 2097.86,1211 2098.45,1211 2099.04,1211 2099.62,1211 2100.21,1211 2100.8,1211 2101.38,1211 2101.97,1211 2102.55,1211 2103.14,1211 2103.73,1211 2104.31,1211 2104.9,1211 2105.49,1211 2106.07,1211 2106.66,1211 2107.25,1211 2107.83,1211 2108.42,1211 2109.01,1211 2109.59,1211 2110.18,1211 2110.76,1211 2111.35,1211 2111.94,1211 2112.52,1211 2113.11,1211 2113.7,1211 2114.28,1211 2114.87,1211 2115.46,1211 2116.04,1211 2116.63,1211 2117.22,1211 2117.8,1211 2118.39,1211 2118.97,1211 2119.56,1211 2120.15,1211 2120.73,1211 2121.32,1211 2121.91,1211 2122.49,1211 2123.08,1211 2123.67,1211 2124.25,1211 2124.84,1211 2125.42,1211 2126.01,1211 2126.6,1211 2127.18,1211 2127.77,1211 2128.36,1211 2128.94,1211 2129.53,1211 2130.12,1211 2130.7,1211 2131.29,1211 2131.88,1211 2132.46,1211 2133.05,1211 2133.63,1211 2134.22,1211 2134.81,1211 2135.39,1211 2135.98,1211 2136.57,1211 2137.15,1211 2137.74,1211 2138.33,1211 2138.91,1211 2139.5,1211 2140.09,1211 2140.67,1211 2141.26,1211 2141.84,1211 2142.43,1211 2143.02,1211 2143.6,1211 2144.19,1211 2144.78,1211 2145.36,1211 2145.95,1211 2146.54,1211 2147.12,1211 2147.71,1211 2148.3,1211 2148.88,1211 2149.47,1211 2150.05,1211 2150.64,1211 2151.23,1211 2151.81,1211 2152.4,1211 2152.99,1211 2153.57,1211 2154.16,1211 2154.75,1211 2155.33,1211 2155.92,1211 2156.5,1211 2157.09,1211 2157.68,1211 2158.26,1211 \"/>\n<path clip-path=\"url(#clip092)\" d=\"M986.025 1210.88 L986.612 1210.88 L987.198 1210.88 L987.785 1210.88 L988.371 1210.88 L988.957 1210.88 L989.544 1210.88 L990.13 1210.88 L990.717 1210.88 L991.303 1210.88 L991.889 1210.88 L992.476 1210.88 L993.062 1210.88 L993.649 1210.88 L994.235 1210.88 L994.822 1210.88 L995.408 1210.88 L995.994 1210.88 L996.581 1210.88 L997.167 1210.88 L997.754 1210.88 L998.34 1210.88 L998.926 1210.88 L999.513 1210.88 L1000.1 1210.88 L1000.69 1210.88 L1001.27 1210.88 L1001.86 1210.88 L1002.44 1210.88 L1003.03 1210.88 L1003.62 1210.88 L1004.2 1210.88 L1004.79 1210.88 L1005.38 1210.88 L1005.96 1210.88 L1006.55 1210.88 L1007.14 1210.88 L1007.72 1210.88 L1008.31 1210.88 L1008.9 1210.88 L1009.48 1210.88 L1010.07 1210.88 L1010.65 1210.88 L1011.24 1210.88 L1011.83 1210.88 L1012.41 1210.88 L1013 1210.88 L1013.59 1210.88 L1014.17 1210.88 L1014.76 1210.88 L1015.35 1210.88 L1015.93 1210.88 L1016.52 1210.88 L1017.11 1210.88 L1017.69 1210.88 L1018.28 1210.88 L1018.86 1210.88 L1019.45 1210.88 L1020.04 1210.88 L1020.62 1210.88 L1021.21 1210.88 L1021.8 1210.88 L1022.38 1210.88 L1022.97 1210.88 L1023.56 1210.88 L1024.14 1210.88 L1024.73 1210.88 L1025.32 1210.88 L1025.9 1210.88 L1026.49 1210.88 L1027.07 1210.88 L1027.66 1210.88 L1028.25 1210.88 L1028.83 1210.88 L1029.42 1210.88 L1030.01 1210.88 L1030.59 1210.88 L1031.18 1210.88 L1031.77 1210.88 L1032.35 1210.88 L1032.94 1210.88 L1033.52 1210.88 L1034.11 1210.88 L1034.7 1210.88 L1035.28 1210.88 L1035.87 1210.88 L1036.46 1210.88 L1037.04 1210.88 L1037.63 1210.88 L1038.22 1210.88 L1038.8 1210.88 L1039.39 1210.88 L1039.98 1210.88 L1040.56 1210.88 L1041.15 1210.88 L1041.73 1210.88 L1042.32 1210.88 L1042.91 1210.88 L1043.49 1210.88 L1044.08 1210.88 L1044.67 1210.88 L1045.25 1210.88 L1045.84 1210.88 L1046.43 1210.88 L1047.01 1210.88 L1047.6 1210.88 L1048.19 1210.88 L1048.77 1210.88 L1049.36 1210.88 L1049.94 1210.88 L1050.53 1210.88 L1051.12 1210.88 L1051.7 1210.88 L1052.29 1210.88 L1052.88 1210.88 L1053.46 1210.88 L1054.05 1210.88 L1054.64 1210.88 L1055.22 1210.88 L1055.81 1210.88 L1056.39 1210.88 L1056.98 1210.88 L1057.57 1210.88 L1058.15 1210.88 L1058.74 1210.88 L1059.33 1210.88 L1059.91 1210.88 L1060.5 1210.88 L1061.09 1210.88 L1061.67 1210.88 L1062.26 1210.88 L1062.85 1210.88 L1063.43 1210.88 L1064.02 1210.88 L1064.6 1210.88 L1065.19 1210.88 L1065.78 1210.88 L1066.36 1210.88 L1066.95 1210.88 L1067.54 1210.88 L1068.12 1210.88 L1068.71 1210.88 L1069.3 1210.88 L1069.88 1210.88 L1070.47 1210.88 L1071.06 1210.88 L1071.64 1210.88 L1072.23 1210.88 L1072.81 1210.88 L1073.4 1210.88 L1073.99 1210.88 L1074.57 1210.88 L1075.16 1210.88 L1075.75 1210.88 L1076.33 1210.88 L1076.92 1210.88 L1077.51 1210.88 L1078.09 1210.88 L1078.68 1210.88 L1079.26 1210.88 L1079.85 1210.88 L1080.44 1210.88 L1081.02 1210.88 L1081.61 1210.88 L1082.2 1210.88 L1082.78 1210.88 L1083.37 1210.88 L1083.96 1210.88 L1084.54 1210.88 L1085.13 1210.88 L1085.72 1210.88 L1086.3 1210.88 L1086.89 1210.88 L1087.47 1210.88 L1088.06 1210.88 L1088.65 1210.88 L1089.23 1210.88 L1089.82 1210.88 L1090.41 1210.88 L1090.99 1210.88 L1091.58 1210.88 L1092.17 1210.88 L1092.75 1210.88 L1093.34 1210.88 L1093.93 1210.88 L1094.51 1210.88 L1095.1 1210.88 L1095.68 1210.88 L1096.27 1210.88 L1096.86 1210.88 L1097.44 1210.88 L1098.03 1210.88 L1098.62 1210.88 L1099.2 1210.88 L1099.79 1210.88 L1100.38 1210.88 L1100.96 1210.88 L1101.55 1210.88 L1102.14 1210.88 L1102.72 1210.88 L1103.31 1210.88 L1103.89 1210.88 L1104.48 1210.88 L1105.07 1210.88 L1105.65 1210.88 L1106.24 1210.88 L1106.83 1210.88 L1107.41 1210.88 L1108 1210.88 L1108.59 1210.88 L1109.17 1210.88 L1109.76 1210.88 L1110.34 1210.88 L1110.93 1210.88 L1111.52 1210.88 L1112.1 1210.88 L1112.69 1210.88 L1113.28 1210.88 L1113.86 1210.88 L1114.45 1210.88 L1115.04 1210.88 L1115.62 1210.88 L1116.21 1210.88 L1116.8 1210.88 L1117.38 1210.88 L1117.97 1210.88 L1118.55 1210.88 L1119.14 1210.88 L1119.73 1210.88 L1120.31 1210.88 L1120.9 1210.88 L1121.49 1210.88 L1122.07 1210.88 L1122.66 1210.88 L1123.25 1210.88 L1123.83 1210.88 L1124.42 1210.88 L1125.01 1210.88 L1125.59 1210.88 L1126.18 1210.88 L1126.76 1210.88 L1127.35 1210.88 L1127.94 1210.88 L1128.52 1210.88 L1129.11 1210.88 L1129.7 1210.88 L1130.28 1210.88 L1130.87 1210.88 L1131.46 1210.88 L1132.04 1210.88 L1132.63 1210.88 L1133.21 1210.88 L1133.8 1210.88 L1134.39 1210.88 L1134.97 1210.88 L1135.56 1210.88 L1136.15 1210.88 L1136.73 1210.88 L1137.32 1210.88 L1137.91 1210.88 L1138.49 1210.88 L1139.08 1210.88 L1139.67 1210.88 L1140.25 1210.88 L1140.84 1210.88 L1141.42 1210.88 L1142.01 1210.88 L1142.6 1210.88 L1143.18 1210.88 L1143.77 1210.88 L1144.36 1210.88 L1144.94 1210.88 L1145.53 1210.88 L1146.12 1210.88 L1146.7 1210.88 L1147.29 1210.88 L1147.88 1210.88 L1148.46 1210.88 L1149.05 1210.88 L1149.63 1210.88 L1150.22 1210.88 L1150.81 1210.88 L1151.39 1210.88 L1151.98 1210.88 L1152.57 1210.88 L1153.15 1210.88 L1153.74 1210.88 L1154.33 1210.88 L1154.91 1210.88 L1155.5 1210.88 L1156.09 1210.88 L1156.67 1210.88 L1157.26 1210.88 L1157.84 1210.88 L1158.43 1210.88 L1159.02 1210.88 L1159.6 1210.88 L1160.19 1210.88 L1160.78 1210.88 L1161.36 1210.88 L1161.95 1210.88 L1162.54 1210.88 L1163.12 1210.88 L1163.71 1210.88 L1164.29 1210.88 L1164.88 1210.88 L1165.47 1210.88 L1166.05 1210.88 L1166.64 1210.88 L1167.23 1210.88 L1167.81 1210.88 L1168.4 1210.88 L1168.99 1210.88 L1169.57 1210.88 L1170.16 1210.88 L1170.75 1210.88 L1171.33 1210.88 L1171.92 1210.88 L1172.5 1210.88 L1173.09 1210.88 L1173.68 1210.88 L1174.26 1210.88 L1174.85 1210.88 L1175.44 1210.88 L1176.02 1210.88 L1176.61 1210.88 L1177.2 1210.88 L1177.78 1210.88 L1178.37 1210.88 L1178.96 1210.88 L1179.54 1210.88 L1180.13 1210.88 L1180.71 1210.88 L1181.3 1210.88 L1181.89 1210.88 L1182.47 1210.88 L1183.06 1210.88 L1183.65 1210.88 L1184.23 1210.88 L1184.82 1210.88 L1185.41 1210.88 L1185.99 1210.88 L1186.58 1210.88 L1187.16 1210.88 L1187.75 1210.88 L1188.34 1210.88 L1188.92 1210.88 L1189.51 1210.88 L1190.1 1210.88 L1190.68 1210.88 L1191.27 1210.88 L1191.86 1210.88 L1192.44 1210.88 L1193.03 1210.88 L1193.62 1210.88 L1194.2 1210.88 L1194.79 1210.88 L1195.37 1210.88 L1195.96 1210.88 L1196.55 1210.88 L1197.13 1210.88 L1197.72 1210.88 L1198.31 1210.88 L1198.89 1210.88 L1199.48 1210.88 L1200.07 1210.88 L1200.65 1210.88 L1201.24 1210.88 L1201.83 1210.88 L1202.41 1210.88 L1203 1210.88 L1203.58 1210.88 L1204.17 1210.88 L1204.76 1210.88 L1205.34 1210.88 L1205.93 1210.88 L1206.52 1210.88 L1207.1 1210.88 L1207.69 1210.88 L1208.28 1210.88 L1208.86 1210.88 L1209.45 1210.88 L1210.03 1210.88 L1210.62 1210.88 L1211.21 1210.88 L1211.79 1210.88 L1212.38 1210.88 L1212.97 1210.88 L1213.55 1210.88 L1214.14 1210.88 L1214.73 1210.88 L1215.31 1210.88 L1215.9 1210.88 L1216.49 1210.88 L1217.07 1210.88 L1217.66 1210.88 L1218.24 1210.88 L1218.83 1210.88 L1219.42 1210.88 L1220 1210.88 L1220.59 1210.88 L1221.18 1210.88 L1221.76 1210.88 L1222.35 1210.88 L1222.94 1210.88 L1223.52 1210.88 L1224.11 1210.88 L1224.7 1210.88 L1225.28 1210.88 L1225.87 1210.88 L1226.45 1210.88 L1227.04 1210.88 L1227.63 1210.88 L1228.21 1210.88 L1228.8 1210.88 L1229.39 1210.88 L1229.97 1210.88 L1230.56 1210.88 L1231.15 1210.88 L1231.73 1210.88 L1232.32 1210.88 L1232.91 1210.88 L1233.49 1210.88 L1234.08 1210.88 L1234.66 1210.88 L1235.25 1210.88 L1235.84 1210.88 L1236.42 1210.88 L1237.01 1210.88 L1237.6 1210.88 L1238.18 1210.88 L1238.77 1210.88 L1239.36 1210.88 L1239.94 1210.88 L1240.53 1210.88 L1241.11 1210.88 L1241.7 1210.88 L1242.29 1210.88 L1242.87 1210.88 L1243.46 1210.88 L1244.05 1210.88 L1244.63 1210.88 L1245.22 1210.88 L1245.81 1210.88 L1246.39 1210.88 L1246.98 1210.88 L1247.57 1210.88 L1248.15 1210.88 L1248.74 1210.88 L1249.32 1210.88 L1249.91 1210.88 L1250.5 1210.88 L1251.08 1210.88 L1251.67 1210.88 L1252.26 1210.88 L1252.84 1210.88 L1253.43 1210.88 L1254.02 1210.88 L1254.6 1210.88 L1255.19 1210.88 L1255.78 1210.88 L1256.36 1210.88 L1256.95 1210.88 L1257.53 1210.88 L1258.12 1210.88 L1258.71 1210.88 L1259.29 1210.88 L1259.88 1210.88 L1260.47 1210.88 L1261.05 1210.88 L1261.64 1210.88 L1262.23 1210.88 L1262.81 1210.88 L1263.4 1210.88 L1263.98 1210.88 L1264.57 1210.88 L1265.16 1210.88 L1265.74 1210.88 L1266.33 1210.88 L1266.92 1210.88 L1267.5 1210.88 L1268.09 1210.88 L1268.68 1210.88 L1269.26 1210.88 L1269.85 1210.88 L1270.44 1210.88 L1271.02 1210.88 L1271.61 1210.88 L1272.19 1210.88 L1272.78 1210.88 L1273.37 1210.88 L1273.95 1210.88 L1274.54 1210.88 L1275.13 1210.88 L1275.71 1210.88 L1276.3 1210.88 L1276.89 1210.88 L1277.47 1210.88 L1278.06 1210.88 L1278.65 1210.88 L1279.23 1210.88 L1279.82 1210.88 L1280.4 1210.88 L1280.99 1210.88 L1281.58 1210.88 L1282.16 1210.88 L1282.75 1210.88 L1283.34 1210.88 L1283.92 1210.88 L1284.51 1210.88 L1285.1 1210.88 L1285.68 1210.88 L1286.27 1210.88 L1286.86 1210.88 L1287.44 1210.88 L1288.03 1210.88 L1288.61 1210.88 L1289.2 1210.88 L1289.79 1210.88 L1290.37 1210.88 L1290.96 1210.88 L1291.55 1210.88 L1292.13 1210.88 L1292.72 1210.88 L1293.31 1210.88 L1293.89 1210.88 L1294.48 1210.88 L1295.06 1210.88 L1295.65 1210.88 L1296.24 1210.88 L1296.82 1210.88 L1297.41 1210.88 L1298 1210.88 L1298.58 1210.88 L1299.17 1210.88 L1299.76 1210.88 L1300.34 1210.88 L1300.93 1210.88 L1301.52 1210.88 L1302.1 1210.88 L1302.69 1210.88 L1303.27 1210.88 L1303.86 1210.88 L1304.45 1210.88 L1305.03 1210.88 L1305.62 1210.88 L1306.21 1210.88 L1306.79 1210.88 L1307.38 1210.88 L1307.97 1210.88 L1308.55 1210.88 L1309.14 1210.88 L1309.73 1210.88 L1310.31 1210.88 L1310.9 1210.88 L1311.48 1210.88 L1312.07 1210.88 L1312.66 1210.88 L1313.24 1210.88 L1313.83 1210.88 L1314.42 1210.88 L1315 1210.88 L1315.59 1210.88 L1316.18 1210.88 L1316.76 1210.88 L1317.35 1210.88 L1317.93 1210.88 L1318.52 1210.88 L1319.11 1210.88 L1319.69 1210.88 L1320.28 1210.88 L1320.87 1210.88 L1321.45 1210.88 L1322.04 1210.88 L1322.63 1210.88 L1323.21 1210.88 L1323.8 1210.88 L1324.39 1210.88 L1324.97 1210.88 L1325.56 1210.88 L1326.14 1210.88 L1326.73 1210.88 L1327.32 1210.88 L1327.9 1210.88 L1328.49 1210.88 L1329.08 1210.88 L1329.66 1210.88 L1330.25 1210.88 L1330.84 1210.88 L1331.42 1210.88 L1332.01 1210.88 L1332.6 1210.88 L1333.18 1210.88 L1333.77 1210.88 L1334.35 1210.88 L1334.94 1210.88 L1335.53 1210.88 L1336.11 1210.88 L1336.7 1210.88 L1337.29 1210.88 L1337.87 1210.88 L1338.46 1210.88 L1339.05 1210.88 L1339.63 1210.88 L1340.22 1210.88 L1340.8 1210.88 L1341.39 1210.88 L1341.98 1210.88 L1342.56 1210.88 L1343.15 1210.88 L1343.74 1210.88 L1344.32 1210.88 L1344.91 1210.88 L1345.5 1210.88 L1346.08 1210.88 L1346.67 1210.88 L1347.26 1210.88 L1347.84 1210.88 L1348.43 1210.88 L1349.01 1210.88 L1349.6 1210.88 L1350.19 1210.88 L1350.77 1210.88 L1351.36 1210.88 L1351.95 1210.88 L1352.53 1210.88 L1353.12 1210.88 L1353.71 1210.88 L1354.29 1210.88 L1354.88 1210.88 L1355.47 1210.88 L1356.05 1210.88 L1356.64 1210.88 L1357.22 1210.88 L1357.81 1210.88 L1358.4 1210.88 L1358.98 1210.88 L1359.57 1210.88 L1360.16 1210.88 L1360.74 1210.88 L1361.33 1210.88 L1361.92 1210.88 L1362.5 1210.88 L1363.09 1210.88 L1363.68 1210.88 L1364.26 1210.88 L1364.85 1210.88 L1365.43 1210.88 L1366.02 1210.88 L1366.61 1210.88 L1367.19 1210.88 L1367.78 1210.88 L1368.37 1210.88 L1368.95 1210.88 L1369.54 1210.88 L1370.13 1210.88 L1370.71 1210.88 L1371.3 1210.88 L1371.88 1210.88 L1372.47 1210.88 L1373.06 1210.88 L1373.64 1210.88 L1374.23 1210.88 L1374.82 1210.88 L1375.4 1210.88 L1375.99 1210.88 L1376.58 1210.88 L1377.16 1210.88 L1377.75 1210.88 L1378.34 1210.88 L1378.92 1210.88 L1379.51 1210.88 L1380.09 1210.88 L1380.68 1210.88 L1381.27 1210.88 L1381.85 1210.88 L1382.44 1210.88 L1383.03 1210.88 L1383.61 1210.88 L1384.2 1210.88 L1384.79 1210.88 L1385.37 1210.88 L1385.96 1210.88 L1386.55 1210.88 L1387.13 1210.88 L1387.72 1210.88 L1388.3 1210.88 L1388.89 1210.88 L1389.48 1210.88 L1390.06 1210.88 L1390.65 1210.88 L1391.24 1210.88 L1391.82 1210.88 L1392.41 1210.88 L1393 1210.88 L1393.58 1210.88 L1394.17 1210.88 L1394.75 1210.88 L1395.34 1210.88 L1395.93 1210.88 L1396.51 1210.88 L1397.1 1210.88 L1397.69 1210.88 L1398.27 1210.88 L1398.86 1210.88 L1399.45 1210.88 L1400.03 1210.88 L1400.62 1210.88 L1401.21 1210.88 L1401.79 1210.88 L1402.38 1210.88 L1402.96 1210.88 L1403.55 1210.88 L1404.14 1210.88 L1404.72 1210.88 L1405.31 1210.88 L1405.9 1210.88 L1406.48 1210.88 L1407.07 1210.88 L1407.66 1210.88 L1408.24 1210.88 L1408.83 1210.88 L1409.42 1210.88 L1410 1210.88 L1410.59 1210.88 L1411.17 1210.88 L1411.76 1210.88 L1412.35 1210.88 L1412.93 1210.88 L1413.52 1210.88 L1414.11 1210.88 L1414.69 1210.88 L1415.28 1210.88 L1415.87 1210.88 L1416.45 1210.88 L1417.04 1210.88 L1417.63 1210.88 L1418.21 1210.88 L1418.8 1210.88 L1419.38 1210.88 L1419.97 1210.88 L1420.56 1210.88 L1421.14 1210.88 L1421.73 1210.88 L1422.32 1210.88 L1422.9 1210.88 L1423.49 1210.88 L1424.08 1210.88 L1424.66 1210.88 L1425.25 1210.88 L1425.83 1210.88 L1426.42 1210.88 L1427.01 1210.88 L1427.59 1210.88 L1428.18 1210.88 L1428.77 1210.88 L1429.35 1210.88 L1429.94 1210.88 L1430.53 1210.88 L1431.11 1210.88 L1431.7 1210.88 L1432.29 1210.88 L1432.87 1210.88 L1433.46 1210.88 L1434.04 1210.88 L1434.63 1210.88 L1435.22 1210.88 L1435.8 1210.88 L1436.39 1210.88 L1436.98 1210.88 L1437.56 1210.88 L1438.15 1210.88 L1438.74 1210.88 L1439.32 1210.88 L1439.91 1210.88 L1440.5 1210.88 L1441.08 1210.88 L1441.67 1210.88 L1442.25 1210.88 L1442.84 1210.88 L1443.43 1210.88 L1444.01 1210.88 L1444.6 1210.88 L1445.19 1210.88 L1445.77 1210.88 L1446.36 1210.88 L1446.95 1210.88 L1447.53 1210.88 L1448.12 1210.88 L1448.7 1210.88 L1449.29 1210.88 L1449.88 1210.88 L1450.46 1210.88 L1451.05 1210.88 L1451.64 1210.88 L1452.22 1210.88 L1452.81 1210.88 L1453.4 1210.88 L1453.98 1210.88 L1454.57 1210.88 L1455.16 1210.88 L1455.74 1210.88 L1456.33 1210.88 L1456.91 1210.88 L1457.5 1210.88 L1458.09 1210.88 L1458.67 1210.88 L1459.26 1210.88 L1459.85 1210.88 L1460.43 1210.88 L1461.02 1210.88 L1461.61 1210.88 L1462.19 1210.88 L1462.78 1210.88 L1463.37 1210.88 L1463.95 1210.88 L1464.54 1210.88 L1465.12 1210.88 L1465.71 1210.88 L1466.3 1210.88 L1466.88 1210.88 L1467.47 1210.88 L1468.06 1210.88 L1468.64 1210.88 L1469.23 1210.88 L1469.82 1210.88 L1470.4 1210.88 L1470.99 1210.88 L1471.57 1210.88 L1472.16 1210.88 L1472.75 1210.88 L1473.33 1210.88 L1473.92 1210.88 L1474.51 1210.88 L1475.09 1210.88 L1475.68 1210.88 L1476.27 1210.88 L1476.85 1210.88 L1477.44 1210.88 L1478.03 1210.88 L1478.61 1210.88 L1479.2 1210.88 L1479.78 1210.88 L1480.37 1210.88 L1480.96 1210.88 L1481.54 1210.88 L1482.13 1210.88 L1482.72 1210.88 L1483.3 1210.88 L1483.89 1210.88 L1484.48 1210.88 L1485.06 1210.88 L1485.65 1210.88 L1486.24 1210.88 L1486.82 1210.88 L1487.41 1210.88 L1487.99 1210.88 L1488.58 1210.88 L1489.17 1210.88 L1489.75 1210.88 L1490.34 1210.88 L1490.93 1210.88 L1491.51 1210.88 L1492.1 1210.88 L1492.69 1210.88 L1493.27 1210.88 L1493.86 1210.88 L1494.45 1210.88 L1495.03 1210.88 L1495.62 1210.88 L1496.2 1210.88 L1496.79 1210.88 L1497.38 1210.88 L1497.96 1210.88 L1498.55 1210.88 L1499.14 1210.88 L1499.72 1210.88 L1500.31 1210.88 L1500.9 1210.88 L1501.48 1210.88 L1502.07 1210.88 L1502.65 1210.88 L1503.24 1210.88 L1503.83 1210.88 L1504.41 1210.88 L1505 1210.88 L1505.59 1210.88 L1506.17 1210.88 L1506.76 1210.88 L1507.35 1210.88 L1507.93 1210.88 L1508.52 1210.88 L1509.11 1210.88 L1509.69 1210.88 L1510.28 1210.88 L1510.86 1210.88 L1511.45 1210.88 L1512.04 1210.88 L1512.62 1210.88 L1513.21 1210.88 L1513.8 1210.88 L1514.38 1210.88 L1514.97 1210.88 L1515.56 1210.88 L1516.14 1210.88 L1516.73 1210.88 L1517.32 1210.88 L1517.9 1210.88 L1518.49 1210.88 L1519.07 1210.88 L1519.66 1210.88 L1520.25 1210.88 L1520.83 1210.88 L1521.42 1210.88 L1522.01 1210.88 L1522.59 1210.88 L1523.18 1210.88 L1523.77 1210.88 L1524.35 1210.88 L1524.94 1210.88 L1525.52 1210.88 L1526.11 1210.88 L1526.7 1210.88 L1527.28 1210.88 L1527.87 1210.88 L1528.46 1210.88 L1529.04 1210.88 L1529.63 1210.88 L1530.22 1210.88 L1530.8 1210.88 L1531.39 1210.88 L1531.98 1210.88 L1532.56 1210.88 L1533.15 1210.88 L1533.73 1210.88 L1534.32 1210.88 L1534.91 1210.88 L1535.49 1210.88 L1536.08 1210.88 L1536.67 1210.88 L1537.25 1210.88 L1537.84 1210.88 L1538.43 1210.88 L1539.01 1210.88 L1539.6 1210.88 L1540.19 1210.88 L1540.77 1210.88 L1541.36 1210.88 L1541.94 1210.88 L1542.53 1210.88 L1543.12 1210.88 L1543.7 1210.88 L1544.29 1210.88 L1544.88 1210.88 L1545.46 1210.88 L1546.05 1210.88 L1546.64 1210.88 L1547.22 1210.88 L1547.81 1210.88 L1548.4 1210.88 L1548.98 1210.88 L1549.57 1210.88 L1550.15 1210.88 L1550.74 1210.88 L1551.33 1210.88 L1551.91 1210.88 L1552.5 1210.88 L1553.09 1210.88 L1553.67 1210.88 L1554.26 1210.88 L1554.85 1210.88 L1555.43 1210.88 L1556.02 1210.88 L1556.6 1210.88 L1557.19 1210.88 L1557.78 1210.88 L1558.36 1210.88 L1558.95 1210.88 L1559.54 1210.88 L1560.12 1210.88 L1560.71 1210.88 L1561.3 1210.88 L1561.88 1210.88 L1562.47 1210.88 L1563.06 1210.88 L1563.64 1210.88 L1564.23 1210.88 L1564.81 1210.88 L1565.4 1210.88 L1565.99 1210.88 L1566.57 1210.88 L1567.16 1210.88 L1567.75 1210.88 L1568.33 1210.88 L1568.92 1210.88 L1569.51 1210.88 L1570.09 1210.88 L1570.68 1210.88 L1571.27 1210.88 L1571.85 1210.88 L1572.44 1210.88 L1573.02 1210.88 L1573.61 1210.88 L1574.2 1210.88 L1574.78 1210.88 L1575.37 1210.88 L1575.96 1210.88 L1576.54 1210.88 L1577.13 1210.88 L1577.72 1210.88 L1578.3 1210.88 L1578.89 1210.88 L1579.47 1210.88 L1580.06 1210.88 L1580.65 1210.88 L1581.23 1210.88 L1581.82 1210.88 L1582.41 1210.88 L1582.99 1210.88 L1583.58 1210.88 L1584.17 1210.88 L1584.75 1210.88 L1585.34 1210.88 L1585.93 1210.88 L1586.51 1210.88 L1587.1 1210.88 L1587.68 1210.88 L1588.27 1210.88 L1588.86 1210.88 L1589.44 1210.88 L1590.03 1210.88 L1590.62 1210.88 L1591.2 1210.88 L1591.79 1210.88 L1592.38 1210.88 L1592.96 1210.88 L1593.55 1210.88 L1594.14 1210.88 L1594.72 1210.88 L1595.31 1210.88 L1595.89 1210.88 L1596.48 1210.88 L1597.07 1210.88 L1597.65 1210.88 L1598.24 1210.88 L1598.83 1210.88 L1599.41 1210.88 L1600 1210.88 L1600.59 1210.88 L1601.17 1210.88 L1601.76 1210.88 L1602.34 1210.88 L1602.93 1210.88 L1603.52 1210.88 L1604.1 1210.88 L1604.69 1210.88 L1605.28 1210.88 L1605.86 1210.88 L1606.45 1210.88 L1607.04 1210.88 L1607.62 1210.88 L1608.21 1210.88 L1608.8 1210.88 L1609.38 1210.88 L1609.97 1210.88 L1610.55 1210.88 L1611.14 1210.88 L1611.73 1210.88 L1612.31 1210.88 L1612.9 1210.88 L1613.49 1210.88 L1614.07 1210.88 L1614.66 1210.88 L1615.25 1210.88 L1615.83 1210.88 L1616.42 1210.88 L1617.01 1210.88 L1617.59 1210.88 L1618.18 1210.88 L1618.76 1210.88 L1619.35 1210.88 L1619.94 1210.88 L1620.52 1210.88 L1621.11 1210.88 L1621.7 1210.88 L1622.28 1210.88 L1622.87 1210.88 L1623.46 1210.88 L1624.04 1210.88 L1624.63 1210.88 L1625.22 1210.88 L1625.8 1210.88 L1626.39 1210.88 L1626.97 1210.88 L1627.56 1210.88 L1628.15 1210.88 L1628.73 1210.88 L1629.32 1210.88 L1629.91 1210.88 L1630.49 1210.88 L1631.08 1210.88 L1631.67 1210.88 L1632.25 1210.88 L1632.84 1210.88 L1633.42 1210.88 L1634.01 1210.88 L1634.6 1210.88 L1635.18 1210.88 L1635.77 1210.88 L1636.36 1210.88 L1636.94 1210.88 L1637.53 1210.88 L1638.12 1210.88 L1638.7 1210.88 L1639.29 1210.88 L1639.88 1210.88 L1640.46 1210.88 L1641.05 1210.88 L1641.63 1210.88 L1642.22 1210.88 L1642.81 1210.88 L1643.39 1210.88 L1643.98 1210.88 L1644.57 1210.88 L1645.15 1210.88 L1645.74 1210.88 L1646.33 1210.88 L1646.91 1210.88 L1647.5 1210.88 L1648.09 1210.88 L1648.67 1210.88 L1649.26 1210.88 L1649.84 1210.88 L1650.43 1210.88 L1651.02 1210.88 L1651.6 1210.88 L1652.19 1210.88 L1652.78 1210.88 L1653.36 1210.88 L1653.95 1210.88 L1654.54 1210.88 L1655.12 1210.88 L1655.71 1210.88 L1656.29 1210.88 L1656.88 1210.88 L1657.47 1210.88 L1658.05 1210.88 L1658.64 1210.88 L1659.23 1210.88 L1659.81 1210.88 L1660.4 1210.88 L1660.99 1210.88 L1661.57 1210.88 L1662.16 1210.88 L1662.75 1210.88 L1663.33 1210.88 L1663.92 1210.88 L1664.5 1210.88 L1665.09 1210.88 L1665.68 1210.88 L1666.26 1210.88 L1666.85 1210.88 L1667.44 1210.88 L1668.02 1210.88 L1668.61 1210.88 L1669.2 1210.88 L1669.78 1210.88 L1670.37 1210.88 L1670.96 1210.88 L1671.54 1210.88 L1672.13 1210.88 L1672.71 1210.88 L1673.3 1210.88 L1673.89 1210.88 L1674.47 1210.88 L1675.06 1210.88 L1675.65 1210.88 L1676.23 1210.88 L1676.82 1210.88 L1677.41 1210.88 L1677.99 1210.88 L1678.58 1210.88 L1679.17 1210.88 L1679.75 1210.88 L1680.34 1210.88 L1680.92 1210.88 L1681.51 1210.88 L1682.1 1210.88 L1682.68 1210.88 L1683.27 1210.88 L1683.86 1210.88 L1684.44 1210.88 L1685.03 1210.88 L1685.62 1210.88 L1686.2 1210.88 L1686.79 1210.88 L1687.37 1210.88 L1687.96 1210.88 L1688.55 1210.88 L1689.13 1210.88 L1689.72 1210.88 L1690.31 1210.88 L1690.89 1210.88 L1691.48 1210.88 L1692.07 1210.88 L1692.65 1210.88 L1693.24 1210.88 L1693.83 1210.88 L1694.41 1210.88 L1695 1210.88 L1695.58 1210.88 L1696.17 1210.88 L1696.76 1210.88 L1697.34 1210.88 L1697.93 1210.88 L1698.52 1210.88 L1699.1 1210.88 L1699.69 1210.88 L1700.28 1210.88 L1700.86 1210.88 L1701.45 1210.88 L1702.04 1210.88 L1702.62 1210.88 L1703.21 1210.88 L1703.79 1210.88 L1704.38 1210.88 L1704.97 1210.88 L1705.55 1210.88 L1706.14 1210.88 L1706.73 1210.88 L1707.31 1210.88 L1707.9 1210.88 L1708.49 1210.88 L1709.07 1210.88 L1709.66 1210.88 L1710.24 1210.88 L1710.83 1210.88 L1711.42 1210.88 L1712 1210.88 L1712.59 1210.88 L1713.18 1210.88 L1713.76 1210.88 L1714.35 1210.88 L1714.94 1210.88 L1715.52 1210.88 L1716.11 1210.88 L1716.7 1210.88 L1717.28 1210.88 L1717.87 1210.88 L1718.45 1210.88 L1719.04 1210.88 L1719.63 1210.88 L1720.21 1210.88 L1720.8 1210.88 L1721.39 1210.88 L1721.97 1210.88 L1722.56 1210.88 L1723.15 1210.88 L1723.73 1210.88 L1724.32 1210.88 L1724.91 1210.88 L1725.49 1210.88 L1726.08 1210.88 L1726.66 1210.88 L1727.25 1210.88 L1727.84 1210.88 L1728.42 1210.88 L1729.01 1210.88 L1729.6 1210.88 L1730.18 1210.88 L1730.77 1210.88 L1731.36 1210.88 L1731.94 1210.88 L1732.53 1210.88 L1733.11 1210.88 L1733.7 1210.88 L1734.29 1210.88 L1734.87 1210.88 L1735.46 1210.88 L1736.05 1210.88 L1736.63 1210.88 L1737.22 1210.88 L1737.81 1210.88 L1738.39 1210.88 L1738.98 1210.88 L1739.57 1210.88 L1740.15 1210.88 L1740.74 1210.88 L1741.32 1210.88 L1741.91 1210.88 L1742.5 1210.88 L1743.08 1210.88 L1743.67 1210.88 L1744.26 1210.88 L1744.84 1210.88 L1745.43 1210.88 L1746.02 1210.88 L1746.6 1210.88 L1747.19 1210.88 L1747.78 1210.88 L1748.36 1210.88 L1748.95 1210.88 L1749.53 1210.88 L1750.12 1210.88 L1750.71 1210.88 L1751.29 1210.88 L1751.88 1210.88 L1752.47 1210.88 L1753.05 1210.88 L1753.64 1210.88 L1754.23 1210.88 L1754.81 1210.88 L1755.4 1210.88 L1755.99 1210.88 L1756.57 1210.88 L1757.16 1210.88 L1757.74 1210.88 L1758.33 1210.88 L1758.92 1210.88 L1759.5 1210.88 L1760.09 1210.88 L1760.68 1210.88 L1761.26 1210.88 L1761.85 1210.88 L1762.44 1210.88 L1763.02 1210.88 L1763.61 1210.88 L1764.19 1210.88 L1764.78 1210.88 L1765.37 1210.88 L1765.95 1210.88 L1766.54 1210.88 L1767.13 1210.88 L1767.71 1210.88 L1768.3 1210.88 L1768.89 1210.88 L1769.47 1210.88 L1770.06 1210.88 L1770.65 1210.88 L1771.23 1210.88 L1771.82 1210.88 L1772.4 1210.88 L1772.99 1210.88 L1773.58 1210.88 L1774.16 1210.88 L1774.75 1210.88 L1775.34 1210.88 L1775.92 1210.88 L1776.51 1210.88 L1777.1 1210.88 L1777.68 1210.88 L1778.27 1210.88 L1778.86 1210.88 L1779.44 1210.88 L1780.03 1210.88 L1780.61 1210.88 L1781.2 1210.88 L1781.79 1210.88 L1782.37 1210.88 L1782.96 1210.88 L1783.55 1210.88 L1784.13 1210.88 L1784.72 1210.88 L1785.31 1210.88 L1785.89 1210.88 L1786.48 1210.88 L1787.06 1210.88 L1787.65 1210.88 L1788.24 1210.88 L1788.82 1210.88 L1789.41 1210.88 L1790 1210.88 L1790.58 1210.88 L1791.17 1210.88 L1791.76 1210.88 L1792.34 1210.88 L1792.93 1210.88 L1793.52 1210.88 L1794.1 1210.88 L1794.69 1210.88 L1795.27 1210.88 L1795.86 1210.88 L1796.45 1210.88 L1797.03 1210.88 L1797.62 1210.88 L1798.21 1210.88 L1798.79 1210.88 L1799.38 1210.88 L1799.97 1210.88 L1800.55 1210.88 L1801.14 1210.88 L1801.73 1210.88 L1802.31 1210.88 L1802.9 1210.88 L1803.48 1210.88 L1804.07 1210.88 L1804.66 1210.88 L1805.24 1210.88 L1805.83 1210.88 L1806.42 1210.88 L1807 1210.88 L1807.59 1210.88 L1808.18 1210.88 L1808.76 1210.88 L1809.35 1210.88 L1809.94 1210.88 L1810.52 1210.88 L1811.11 1210.88 L1811.69 1210.88 L1812.28 1210.88 L1812.87 1210.88 L1813.45 1210.88 L1814.04 1210.88 L1814.63 1210.88 L1815.21 1210.88 L1815.8 1210.88 L1816.39 1210.88 L1816.97 1210.88 L1817.56 1210.88 L1818.14 1210.88 L1818.73 1210.88 L1819.32 1210.88 L1819.9 1210.88 L1820.49 1210.88 L1821.08 1210.88 L1821.66 1210.88 L1822.25 1210.88 L1822.84 1210.88 L1823.42 1210.88 L1824.01 1210.88 L1824.6 1210.88 L1825.18 1210.88 L1825.77 1210.88 L1826.35 1210.88 L1826.94 1210.88 L1827.53 1210.88 L1828.11 1210.88 L1828.7 1210.88 L1829.29 1210.88 L1829.87 1210.88 L1830.46 1210.88 L1831.05 1210.88 L1831.63 1210.88 L1832.22 1210.88 L1832.81 1210.88 L1833.39 1210.88 L1833.98 1210.88 L1834.56 1210.88 L1835.15 1210.88 L1835.74 1210.88 L1836.32 1210.88 L1836.91 1210.88 L1837.5 1210.88 L1838.08 1210.88 L1838.67 1210.88 L1839.26 1210.88 L1839.84 1210.88 L1840.43 1210.88 L1841.01 1210.88 L1841.6 1210.88 L1842.19 1210.88 L1842.77 1210.88 L1843.36 1210.88 L1843.95 1210.88 L1844.53 1210.88 L1845.12 1210.88 L1845.71 1210.88 L1846.29 1210.88 L1846.88 1210.88 L1847.47 1210.88 L1848.05 1210.88 L1848.64 1210.88 L1849.22 1210.88 L1849.81 1210.88 L1850.4 1210.88 L1850.98 1210.88 L1851.57 1210.88 L1852.16 1210.88 L1852.74 1210.88 L1853.33 1210.88 L1853.92 1210.88 L1854.5 1210.88 L1855.09 1210.88 L1855.68 1210.88 L1856.26 1210.88 L1856.85 1210.88 L1857.43 1210.88 L1858.02 1210.88 L1858.61 1210.88 L1859.19 1210.88 L1859.78 1210.88 L1860.37 1210.88 L1860.95 1210.88 L1861.54 1210.88 L1862.13 1210.88 L1862.71 1210.88 L1863.3 1210.88 L1863.88 1210.88 L1864.47 1210.88 L1865.06 1210.88 L1865.64 1210.88 L1866.23 1210.88 L1866.82 1210.88 L1867.4 1210.88 L1867.99 1210.88 L1868.58 1210.88 L1869.16 1210.88 L1869.75 1210.88 L1870.34 1210.88 L1870.92 1210.88 L1871.51 1210.88 L1872.09 1210.88 L1872.68 1210.88 L1873.27 1210.88 L1873.85 1210.88 L1874.44 1210.88 L1875.03 1210.88 L1875.61 1210.88 L1876.2 1210.88 L1876.79 1210.88 L1877.37 1210.88 L1877.96 1210.88 L1878.55 1210.88 L1879.13 1210.88 L1879.72 1210.88 L1880.3 1210.88 L1880.89 1210.88 L1881.48 1210.88 L1882.06 1210.88 L1882.65 1210.88 L1883.24 1210.88 L1883.82 1210.88 L1884.41 1210.88 L1885 1210.88 L1885.58 1210.88 L1886.17 1210.88 L1886.76 1210.88 L1887.34 1210.88 L1887.93 1210.88 L1888.51 1210.88 L1889.1 1210.88 L1889.69 1210.88 L1890.27 1210.88 L1890.86 1210.88 L1891.45 1210.88 L1892.03 1210.88 L1892.62 1210.88 L1893.21 1210.88 L1893.79 1210.88 L1894.38 1210.88 L1894.96 1210.88 L1895.55 1210.88 L1896.14 1210.88 L1896.72 1210.88 L1897.31 1210.88 L1897.9 1210.88 L1898.48 1210.88 L1899.07 1210.88 L1899.66 1210.88 L1900.24 1210.88 L1900.83 1210.88 L1901.42 1210.88 L1902 1210.88 L1902.59 1210.88 L1903.17 1210.88 L1903.76 1210.88 L1904.35 1210.88 L1904.93 1210.88 L1905.52 1210.88 L1906.11 1210.88 L1906.69 1210.88 L1907.28 1210.88 L1907.87 1210.88 L1908.45 1210.88 L1909.04 1210.88 L1909.63 1210.88 L1910.21 1210.88 L1910.8 1210.88 L1911.38 1210.88 L1911.97 1210.88 L1912.56 1210.88 L1913.14 1210.88 L1913.73 1210.88 L1914.32 1210.88 L1914.9 1210.88 L1915.49 1210.88 L1916.08 1210.88 L1916.66 1210.88 L1917.25 1210.88 L1917.83 1210.88 L1918.42 1210.88 L1919.01 1210.88 L1919.59 1210.88 L1920.18 1210.88 L1920.77 1210.88 L1921.35 1210.88 L1921.94 1210.88 L1922.53 1210.88 L1923.11 1210.88 L1923.7 1210.88 L1924.29 1210.88 L1924.87 1210.88 L1925.46 1210.88 L1926.04 1210.88 L1926.63 1210.88 L1927.22 1210.88 L1927.8 1210.88 L1928.39 1210.88 L1928.98 1210.88 L1929.56 1210.88 L1930.15 1210.88 L1930.74 1210.88 L1931.32 1210.88 L1931.91 1210.88 L1932.5 1210.88 L1933.08 1210.88 L1933.67 1210.88 L1934.25 1210.88 L1934.84 1210.88 L1935.43 1210.88 L1936.01 1210.88 L1936.6 1210.88 L1937.19 1210.88 L1937.77 1210.88 L1938.36 1210.88 L1938.95 1210.88 L1939.53 1210.88 L1940.12 1210.88 L1940.71 1210.88 L1941.29 1210.88 L1941.88 1210.88 L1942.46 1210.88 L1943.05 1210.88 L1943.64 1210.88 L1944.22 1210.88 L1944.81 1210.88 L1945.4 1210.88 L1945.98 1210.88 L1946.57 1210.88 L1947.16 1210.88 L1947.74 1210.88 L1948.33 1210.88 L1948.91 1210.88 L1949.5 1210.88 L1950.09 1210.88 L1950.67 1210.88 L1951.26 1210.88 L1951.85 1210.88 L1952.43 1210.88 L1953.02 1210.88 L1953.61 1210.88 L1954.19 1210.88 L1954.78 1210.88 L1955.37 1210.88 L1955.95 1210.88 L1956.54 1210.88 L1957.12 1210.88 L1957.71 1210.88 L1958.3 1210.88 L1958.88 1210.88 L1959.47 1210.88 L1960.06 1210.88 L1960.64 1210.88 L1961.23 1210.88 L1961.82 1210.88 L1962.4 1210.88 L1962.99 1210.88 L1963.58 1210.88 L1964.16 1210.88 L1964.75 1210.88 L1965.33 1210.88 L1965.92 1210.88 L1966.51 1210.88 L1967.09 1210.88 L1967.68 1210.88 L1968.27 1210.88 L1968.85 1210.88 L1969.44 1210.88 L1970.03 1210.88 L1970.61 1210.88 L1971.2 1210.88 L1971.78 1210.88 L1972.37 1210.88 L1972.96 1210.88 L1973.54 1210.88 L1974.13 1210.88 L1974.72 1210.88 L1975.3 1210.88 L1975.89 1210.88 L1976.48 1210.88 L1977.06 1210.88 L1977.65 1210.88 L1978.24 1210.88 L1978.82 1210.88 L1979.41 1210.88 L1979.99 1210.88 L1980.58 1210.88 L1981.17 1210.88 L1981.75 1210.88 L1982.34 1210.88 L1982.93 1210.88 L1983.51 1210.88 L1984.1 1210.88 L1984.69 1210.88 L1985.27 1210.88 L1985.86 1210.88 L1986.45 1210.88 L1987.03 1210.88 L1987.62 1210.88 L1988.2 1210.88 L1988.79 1210.88 L1989.38 1210.88 L1989.96 1210.88 L1990.55 1210.88 L1991.14 1210.88 L1991.72 1210.88 L1992.31 1210.88 L1992.9 1210.88 L1993.48 1210.88 L1994.07 1210.88 L1994.65 1210.88 L1995.24 1210.88 L1995.83 1210.88 L1996.41 1210.88 L1997 1210.88 L1997.59 1210.88 L1998.17 1210.88 L1998.76 1210.88 L1999.35 1210.88 L1999.93 1210.88 L2000.52 1210.88 L2001.11 1210.88 L2001.69 1210.88 L2002.28 1210.88 L2002.86 1210.88 L2003.45 1210.88 L2004.04 1210.88 L2004.62 1210.88 L2005.21 1210.88 L2005.8 1210.88 L2006.38 1210.88 L2006.97 1210.88 L2007.56 1210.88 L2008.14 1210.88 L2008.73 1210.88 L2009.32 1210.88 L2009.9 1210.88 L2010.49 1210.88 L2011.07 1210.88 L2011.66 1210.88 L2012.25 1210.88 L2012.83 1210.88 L2013.42 1210.88 L2014.01 1210.88 L2014.59 1210.88 L2015.18 1210.88 L2015.77 1210.88 L2016.35 1210.88 L2016.94 1210.88 L2017.53 1210.88 L2018.11 1210.88 L2018.7 1210.88 L2019.28 1210.88 L2019.87 1210.88 L2020.46 1210.88 L2021.04 1210.88 L2021.63 1210.88 L2022.22 1210.88 L2022.8 1210.88 L2023.39 1210.88 L2023.98 1210.88 L2024.56 1210.88 L2025.15 1210.88 L2025.73 1210.88 L2026.32 1210.88 L2026.91 1210.88 L2027.49 1210.88 L2028.08 1210.88 L2028.67 1210.88 L2029.25 1210.88 L2029.84 1210.88 L2030.43 1210.88 L2031.01 1210.88 L2031.6 1210.88 L2032.19 1210.88 L2032.77 1210.88 L2033.36 1210.88 L2033.94 1210.88 L2034.53 1210.88 L2035.12 1210.88 L2035.7 1210.88 L2036.29 1210.88 L2036.88 1210.88 L2037.46 1210.88 L2038.05 1210.88 L2038.64 1210.88 L2039.22 1210.88 L2039.81 1210.88 L2040.4 1210.88 L2040.98 1210.88 L2041.57 1210.88 L2042.15 1210.88 L2042.74 1210.88 L2043.33 1210.88 L2043.91 1210.88 L2044.5 1210.88 L2045.09 1210.88 L2045.67 1210.88 L2046.26 1210.88 L2046.85 1210.88 L2047.43 1210.88 L2048.02 1210.88 L2048.6 1210.88 L2049.19 1210.88 L2049.78 1210.88 L2050.36 1210.88 L2050.95 1210.88 L2051.54 1210.88 L2052.12 1210.88 L2052.71 1210.88 L2053.3 1210.88 L2053.88 1210.88 L2054.47 1210.88 L2055.06 1210.88 L2055.64 1210.88 L2056.23 1210.88 L2056.81 1210.88 L2057.4 1210.88 L2057.99 1210.88 L2058.57 1210.88 L2059.16 1210.88 L2059.75 1210.88 L2060.33 1210.88 L2060.92 1210.88 L2061.51 1210.88 L2062.09 1210.88 L2062.68 1210.88 L2063.27 1210.88 L2063.85 1210.88 L2064.44 1210.88 L2065.02 1210.88 L2065.61 1210.88 L2066.2 1210.88 L2066.78 1210.88 L2067.37 1210.88 L2067.96 1210.88 L2068.54 1210.88 L2069.13 1210.88 L2069.72 1210.88 L2070.3 1210.88 L2070.89 1210.88 L2071.48 1210.88 L2072.06 1210.88 L2072.65 1210.88 L2073.23 1210.88 L2073.82 1210.88 L2074.41 1210.88 L2074.99 1210.88 L2075.58 1210.88 L2076.17 1210.88 L2076.75 1210.88 L2077.34 1210.88 L2077.93 1210.88 L2078.51 1210.88 L2079.1 1210.88 L2079.68 1210.88 L2080.27 1210.88 L2080.86 1210.88 L2081.44 1210.88 L2082.03 1210.88 L2082.62 1210.88 L2083.2 1210.88 L2083.79 1210.88 L2084.38 1210.88 L2084.96 1210.88 L2085.55 1210.88 L2086.14 1210.88 L2086.72 1210.88 L2087.31 1210.88 L2087.89 1210.88 L2088.48 1210.88 L2089.07 1210.88 L2089.65 1210.88 L2090.24 1210.88 L2090.83 1210.88 L2091.41 1210.88 L2092 1210.88 L2092.59 1210.88 L2093.17 1210.88 L2093.76 1210.88 L2094.35 1210.88 L2094.93 1210.88 L2095.52 1210.88 L2096.1 1210.88 L2096.69 1210.88 L2097.28 1210.88 L2097.86 1210.88 L2098.45 1210.88 L2099.04 1210.88 L2099.62 1210.88 L2100.21 1210.88 L2100.8 1210.88 L2101.38 1210.88 L2101.97 1210.88 L2102.55 1210.88 L2103.14 1210.88 L2103.73 1210.88 L2104.31 1210.88 L2104.9 1210.88 L2105.49 1210.88 L2106.07 1210.88 L2106.66 1210.88 L2107.25 1210.88 L2107.83 1210.88 L2108.42 1210.88 L2109.01 1210.88 L2109.59 1210.88 L2110.18 1210.88 L2110.76 1210.88 L2111.35 1210.88 L2111.94 1210.88 L2112.52 1210.88 L2113.11 1210.88 L2113.7 1210.88 L2114.28 1210.88 L2114.87 1210.88 L2115.46 1210.88 L2116.04 1210.88 L2116.63 1210.88 L2117.22 1210.88 L2117.8 1210.88 L2118.39 1210.88 L2118.97 1210.88 L2119.56 1210.88 L2120.15 1210.88 L2120.73 1210.88 L2121.32 1210.88 L2121.91 1210.88 L2122.49 1210.88 L2123.08 1210.88 L2123.67 1210.88 L2124.25 1210.88 L2124.84 1210.88 L2125.42 1210.88 L2126.01 1210.88 L2126.6 1210.88 L2127.18 1210.88 L2127.77 1210.88 L2128.36 1210.88 L2128.94 1210.88 L2129.53 1210.88 L2130.12 1210.88 L2130.7 1210.88 L2131.29 1210.88 L2131.88 1210.88 L2132.46 1210.88 L2133.05 1210.88 L2133.63 1210.88 L2134.22 1210.88 L2134.81 1210.88 L2135.39 1210.88 L2135.98 1210.88 L2136.57 1210.88 L2137.15 1210.88 L2137.74 1210.88 L2138.33 1210.88 L2138.91 1210.88 L2139.5 1210.88 L2140.09 1210.88 L2140.67 1210.88 L2141.26 1210.88 L2141.84 1210.88 L2142.43 1210.88 L2143.02 1210.88 L2143.6 1210.88 L2144.19 1210.88 L2144.78 1210.88 L2145.36 1210.88 L2145.95 1210.88 L2146.54 1210.88 L2147.12 1210.88 L2147.71 1210.88 L2148.3 1210.88 L2148.88 1210.88 L2149.47 1210.88 L2150.05 1210.88 L2150.64 1210.88 L2151.23 1210.88 L2151.81 1210.88 L2152.4 1210.88 L2152.99 1210.88 L2153.57 1210.88 L2154.16 1210.88 L2154.75 1210.88 L2155.33 1210.88 L2155.92 1210.88 L2156.5 1210.88 L2157.09 1210.88 L2157.68 1210.88 L2158.26 1210.88 L2158.26 1210.72 L2157.68 1210.72 L2157.09 1210.72 L2156.5 1210.72 L2155.92 1210.72 L2155.33 1210.72 L2154.75 1210.72 L2154.16 1210.72 L2153.57 1210.72 L2152.99 1210.72 L2152.4 1210.72 L2151.81 1210.72 L2151.23 1210.72 L2150.64 1210.72 L2150.05 1210.72 L2149.47 1210.72 L2148.88 1210.72 L2148.3 1210.72 L2147.71 1210.72 L2147.12 1210.72 L2146.54 1210.72 L2145.95 1210.72 L2145.36 1210.72 L2144.78 1210.72 L2144.19 1210.72 L2143.6 1210.72 L2143.02 1210.72 L2142.43 1210.72 L2141.84 1210.72 L2141.26 1210.72 L2140.67 1210.72 L2140.09 1210.72 L2139.5 1210.72 L2138.91 1210.72 L2138.33 1210.72 L2137.74 1210.72 L2137.15 1210.72 L2136.57 1210.72 L2135.98 1210.72 L2135.39 1210.72 L2134.81 1210.72 L2134.22 1210.72 L2133.63 1210.72 L2133.05 1210.72 L2132.46 1210.72 L2131.88 1210.72 L2131.29 1210.72 L2130.7 1210.72 L2130.12 1210.72 L2129.53 1210.72 L2128.94 1210.72 L2128.36 1210.72 L2127.77 1210.72 L2127.18 1210.72 L2126.6 1210.72 L2126.01 1210.72 L2125.42 1210.72 L2124.84 1210.72 L2124.25 1210.72 L2123.67 1210.72 L2123.08 1210.72 L2122.49 1210.72 L2121.91 1210.72 L2121.32 1210.72 L2120.73 1210.72 L2120.15 1210.72 L2119.56 1210.72 L2118.97 1210.72 L2118.39 1210.72 L2117.8 1210.72 L2117.22 1210.72 L2116.63 1210.72 L2116.04 1210.72 L2115.46 1210.72 L2114.87 1210.72 L2114.28 1210.72 L2113.7 1210.72 L2113.11 1210.72 L2112.52 1210.72 L2111.94 1210.72 L2111.35 1210.72 L2110.76 1210.72 L2110.18 1210.72 L2109.59 1210.72 L2109.01 1210.72 L2108.42 1210.72 L2107.83 1210.72 L2107.25 1210.72 L2106.66 1210.72 L2106.07 1210.72 L2105.49 1210.72 L2104.9 1210.72 L2104.31 1210.72 L2103.73 1210.72 L2103.14 1210.72 L2102.55 1210.72 L2101.97 1210.72 L2101.38 1210.72 L2100.8 1210.72 L2100.21 1210.72 L2099.62 1210.72 L2099.04 1210.72 L2098.45 1210.72 L2097.86 1210.72 L2097.28 1210.72 L2096.69 1210.72 L2096.1 1210.72 L2095.52 1210.72 L2094.93 1210.72 L2094.35 1210.72 L2093.76 1210.72 L2093.17 1210.72 L2092.59 1210.72 L2092 1210.72 L2091.41 1210.72 L2090.83 1210.72 L2090.24 1210.72 L2089.65 1210.72 L2089.07 1210.72 L2088.48 1210.72 L2087.89 1210.72 L2087.31 1210.72 L2086.72 1210.72 L2086.14 1210.72 L2085.55 1210.72 L2084.96 1210.72 L2084.38 1210.72 L2083.79 1210.72 L2083.2 1210.72 L2082.62 1210.72 L2082.03 1210.72 L2081.44 1210.72 L2080.86 1210.72 L2080.27 1210.72 L2079.68 1210.72 L2079.1 1210.72 L2078.51 1210.72 L2077.93 1210.72 L2077.34 1210.72 L2076.75 1210.72 L2076.17 1210.72 L2075.58 1210.72 L2074.99 1210.72 L2074.41 1210.72 L2073.82 1210.72 L2073.23 1210.72 L2072.65 1210.72 L2072.06 1210.72 L2071.48 1210.72 L2070.89 1210.72 L2070.3 1210.72 L2069.72 1210.72 L2069.13 1210.72 L2068.54 1210.72 L2067.96 1210.72 L2067.37 1210.72 L2066.78 1210.72 L2066.2 1210.72 L2065.61 1210.72 L2065.02 1210.72 L2064.44 1210.72 L2063.85 1210.72 L2063.27 1210.72 L2062.68 1210.72 L2062.09 1210.72 L2061.51 1210.72 L2060.92 1210.72 L2060.33 1210.72 L2059.75 1210.72 L2059.16 1210.72 L2058.57 1210.72 L2057.99 1210.72 L2057.4 1210.72 L2056.81 1210.72 L2056.23 1210.72 L2055.64 1210.72 L2055.06 1210.72 L2054.47 1210.72 L2053.88 1210.72 L2053.3 1210.72 L2052.71 1210.72 L2052.12 1210.72 L2051.54 1210.72 L2050.95 1210.72 L2050.36 1210.72 L2049.78 1210.72 L2049.19 1210.72 L2048.6 1210.72 L2048.02 1210.72 L2047.43 1210.72 L2046.85 1210.72 L2046.26 1210.72 L2045.67 1210.72 L2045.09 1210.72 L2044.5 1210.72 L2043.91 1210.72 L2043.33 1210.72 L2042.74 1210.72 L2042.15 1210.72 L2041.57 1210.72 L2040.98 1210.72 L2040.4 1210.72 L2039.81 1210.72 L2039.22 1210.72 L2038.64 1210.72 L2038.05 1210.72 L2037.46 1210.72 L2036.88 1210.72 L2036.29 1210.72 L2035.7 1210.72 L2035.12 1210.72 L2034.53 1210.72 L2033.94 1210.72 L2033.36 1210.72 L2032.77 1210.72 L2032.19 1210.72 L2031.6 1210.72 L2031.01 1210.72 L2030.43 1210.72 L2029.84 1210.72 L2029.25 1210.72 L2028.67 1210.72 L2028.08 1210.72 L2027.49 1210.72 L2026.91 1210.72 L2026.32 1210.72 L2025.73 1210.72 L2025.15 1210.72 L2024.56 1210.72 L2023.98 1210.72 L2023.39 1210.72 L2022.8 1210.72 L2022.22 1210.72 L2021.63 1210.72 L2021.04 1210.72 L2020.46 1210.72 L2019.87 1210.72 L2019.28 1210.72 L2018.7 1210.72 L2018.11 1210.72 L2017.53 1210.72 L2016.94 1210.72 L2016.35 1210.72 L2015.77 1210.72 L2015.18 1210.72 L2014.59 1210.72 L2014.01 1210.72 L2013.42 1210.72 L2012.83 1210.72 L2012.25 1210.72 L2011.66 1210.72 L2011.07 1210.72 L2010.49 1210.72 L2009.9 1210.72 L2009.32 1210.72 L2008.73 1210.72 L2008.14 1210.72 L2007.56 1210.72 L2006.97 1210.72 L2006.38 1210.72 L2005.8 1210.72 L2005.21 1210.72 L2004.62 1210.72 L2004.04 1210.72 L2003.45 1210.72 L2002.86 1210.72 L2002.28 1210.72 L2001.69 1210.72 L2001.11 1210.72 L2000.52 1210.72 L1999.93 1210.72 L1999.35 1210.72 L1998.76 1210.72 L1998.17 1210.72 L1997.59 1210.72 L1997 1210.72 L1996.41 1210.72 L1995.83 1210.72 L1995.24 1210.72 L1994.65 1210.72 L1994.07 1210.72 L1993.48 1210.72 L1992.9 1210.72 L1992.31 1210.72 L1991.72 1210.72 L1991.14 1210.72 L1990.55 1210.72 L1989.96 1210.72 L1989.38 1210.72 L1988.79 1210.72 L1988.2 1210.72 L1987.62 1210.72 L1987.03 1210.72 L1986.45 1210.72 L1985.86 1210.72 L1985.27 1210.72 L1984.69 1210.72 L1984.1 1210.72 L1983.51 1210.72 L1982.93 1210.72 L1982.34 1210.72 L1981.75 1210.72 L1981.17 1210.72 L1980.58 1210.72 L1979.99 1210.72 L1979.41 1210.72 L1978.82 1210.72 L1978.24 1210.72 L1977.65 1210.72 L1977.06 1210.72 L1976.48 1210.72 L1975.89 1210.72 L1975.3 1210.72 L1974.72 1210.72 L1974.13 1210.72 L1973.54 1210.72 L1972.96 1210.72 L1972.37 1210.72 L1971.78 1210.72 L1971.2 1210.72 L1970.61 1210.72 L1970.03 1210.72 L1969.44 1210.72 L1968.85 1210.72 L1968.27 1210.72 L1967.68 1210.72 L1967.09 1210.72 L1966.51 1210.72 L1965.92 1210.72 L1965.33 1210.72 L1964.75 1210.72 L1964.16 1210.72 L1963.58 1210.72 L1962.99 1210.72 L1962.4 1210.72 L1961.82 1210.72 L1961.23 1210.72 L1960.64 1210.72 L1960.06 1210.72 L1959.47 1210.72 L1958.88 1210.72 L1958.3 1210.72 L1957.71 1210.72 L1957.12 1210.72 L1956.54 1210.72 L1955.95 1210.72 L1955.37 1210.72 L1954.78 1210.72 L1954.19 1210.72 L1953.61 1210.72 L1953.02 1210.72 L1952.43 1210.72 L1951.85 1210.72 L1951.26 1210.72 L1950.67 1210.72 L1950.09 1210.72 L1949.5 1210.72 L1948.91 1210.72 L1948.33 1210.72 L1947.74 1210.72 L1947.16 1210.72 L1946.57 1210.72 L1945.98 1210.72 L1945.4 1210.72 L1944.81 1210.72 L1944.22 1210.72 L1943.64 1210.72 L1943.05 1210.72 L1942.46 1210.72 L1941.88 1210.72 L1941.29 1210.72 L1940.71 1210.72 L1940.12 1210.72 L1939.53 1210.72 L1938.95 1210.72 L1938.36 1210.72 L1937.77 1210.72 L1937.19 1210.72 L1936.6 1210.72 L1936.01 1210.72 L1935.43 1210.72 L1934.84 1210.72 L1934.25 1210.72 L1933.67 1210.72 L1933.08 1210.72 L1932.5 1210.72 L1931.91 1210.72 L1931.32 1210.72 L1930.74 1210.72 L1930.15 1210.72 L1929.56 1210.72 L1928.98 1210.72 L1928.39 1210.72 L1927.8 1210.72 L1927.22 1210.72 L1926.63 1210.72 L1926.04 1210.72 L1925.46 1210.72 L1924.87 1210.72 L1924.29 1210.72 L1923.7 1210.72 L1923.11 1210.72 L1922.53 1210.72 L1921.94 1210.72 L1921.35 1210.72 L1920.77 1210.72 L1920.18 1210.72 L1919.59 1210.72 L1919.01 1210.72 L1918.42 1210.72 L1917.83 1210.72 L1917.25 1210.72 L1916.66 1210.72 L1916.08 1210.72 L1915.49 1210.72 L1914.9 1210.72 L1914.32 1210.72 L1913.73 1210.72 L1913.14 1210.72 L1912.56 1210.72 L1911.97 1210.72 L1911.38 1210.72 L1910.8 1210.72 L1910.21 1210.72 L1909.63 1210.72 L1909.04 1210.72 L1908.45 1210.72 L1907.87 1210.72 L1907.28 1210.72 L1906.69 1210.72 L1906.11 1210.72 L1905.52 1210.72 L1904.93 1210.72 L1904.35 1210.72 L1903.76 1210.72 L1903.17 1210.72 L1902.59 1210.72 L1902 1210.72 L1901.42 1210.72 L1900.83 1210.72 L1900.24 1210.72 L1899.66 1210.72 L1899.07 1210.72 L1898.48 1210.72 L1897.9 1210.72 L1897.31 1210.72 L1896.72 1210.72 L1896.14 1210.72 L1895.55 1210.72 L1894.96 1210.72 L1894.38 1210.72 L1893.79 1210.72 L1893.21 1210.72 L1892.62 1210.72 L1892.03 1210.72 L1891.45 1210.72 L1890.86 1210.72 L1890.27 1210.72 L1889.69 1210.72 L1889.1 1210.72 L1888.51 1210.72 L1887.93 1210.72 L1887.34 1210.72 L1886.76 1210.72 L1886.17 1210.72 L1885.58 1210.72 L1885 1210.72 L1884.41 1210.72 L1883.82 1210.72 L1883.24 1210.72 L1882.65 1210.72 L1882.06 1210.72 L1881.48 1210.72 L1880.89 1210.72 L1880.3 1210.72 L1879.72 1210.72 L1879.13 1210.72 L1878.55 1210.72 L1877.96 1210.72 L1877.37 1210.72 L1876.79 1210.72 L1876.2 1210.72 L1875.61 1210.72 L1875.03 1210.72 L1874.44 1210.72 L1873.85 1210.72 L1873.27 1210.72 L1872.68 1210.72 L1872.09 1210.72 L1871.51 1210.72 L1870.92 1210.72 L1870.34 1210.72 L1869.75 1210.72 L1869.16 1210.72 L1868.58 1210.72 L1867.99 1210.72 L1867.4 1210.72 L1866.82 1210.72 L1866.23 1210.72 L1865.64 1210.72 L1865.06 1210.72 L1864.47 1210.72 L1863.88 1210.72 L1863.3 1210.72 L1862.71 1210.72 L1862.13 1210.72 L1861.54 1210.72 L1860.95 1210.72 L1860.37 1210.72 L1859.78 1210.72 L1859.19 1210.72 L1858.61 1210.72 L1858.02 1210.72 L1857.43 1210.72 L1856.85 1210.72 L1856.26 1210.72 L1855.68 1210.72 L1855.09 1210.72 L1854.5 1210.72 L1853.92 1210.72 L1853.33 1210.72 L1852.74 1210.72 L1852.16 1210.72 L1851.57 1210.72 L1850.98 1210.72 L1850.4 1210.72 L1849.81 1210.72 L1849.22 1210.72 L1848.64 1210.72 L1848.05 1210.72 L1847.47 1210.72 L1846.88 1210.72 L1846.29 1210.72 L1845.71 1210.72 L1845.12 1210.72 L1844.53 1210.72 L1843.95 1210.72 L1843.36 1210.72 L1842.77 1210.72 L1842.19 1210.72 L1841.6 1210.72 L1841.01 1210.72 L1840.43 1210.72 L1839.84 1210.72 L1839.26 1210.72 L1838.67 1210.72 L1838.08 1210.72 L1837.5 1210.72 L1836.91 1210.72 L1836.32 1210.72 L1835.74 1210.72 L1835.15 1210.72 L1834.56 1210.72 L1833.98 1210.72 L1833.39 1210.72 L1832.81 1210.72 L1832.22 1210.72 L1831.63 1210.72 L1831.05 1210.72 L1830.46 1210.72 L1829.87 1210.72 L1829.29 1210.72 L1828.7 1210.72 L1828.11 1210.72 L1827.53 1210.72 L1826.94 1210.72 L1826.35 1210.72 L1825.77 1210.72 L1825.18 1210.72 L1824.6 1210.72 L1824.01 1210.72 L1823.42 1210.72 L1822.84 1210.72 L1822.25 1210.72 L1821.66 1210.72 L1821.08 1210.72 L1820.49 1210.72 L1819.9 1210.72 L1819.32 1210.72 L1818.73 1210.72 L1818.14 1210.72 L1817.56 1210.72 L1816.97 1210.72 L1816.39 1210.72 L1815.8 1210.72 L1815.21 1210.72 L1814.63 1210.72 L1814.04 1210.72 L1813.45 1210.72 L1812.87 1210.72 L1812.28 1210.72 L1811.69 1210.72 L1811.11 1210.72 L1810.52 1210.72 L1809.94 1210.72 L1809.35 1210.72 L1808.76 1210.72 L1808.18 1210.72 L1807.59 1210.72 L1807 1210.72 L1806.42 1210.72 L1805.83 1210.72 L1805.24 1210.72 L1804.66 1210.72 L1804.07 1210.72 L1803.48 1210.72 L1802.9 1210.72 L1802.31 1210.72 L1801.73 1210.72 L1801.14 1210.72 L1800.55 1210.72 L1799.97 1210.72 L1799.38 1210.72 L1798.79 1210.72 L1798.21 1210.72 L1797.62 1210.72 L1797.03 1210.72 L1796.45 1210.72 L1795.86 1210.72 L1795.27 1210.72 L1794.69 1210.72 L1794.1 1210.72 L1793.52 1210.72 L1792.93 1210.72 L1792.34 1210.72 L1791.76 1210.72 L1791.17 1210.72 L1790.58 1210.72 L1790 1210.72 L1789.41 1210.72 L1788.82 1210.72 L1788.24 1210.72 L1787.65 1210.72 L1787.06 1210.72 L1786.48 1210.72 L1785.89 1210.72 L1785.31 1210.72 L1784.72 1210.72 L1784.13 1210.72 L1783.55 1210.72 L1782.96 1210.72 L1782.37 1210.72 L1781.79 1210.72 L1781.2 1210.72 L1780.61 1210.72 L1780.03 1210.72 L1779.44 1210.72 L1778.86 1210.72 L1778.27 1210.72 L1777.68 1210.72 L1777.1 1210.72 L1776.51 1210.72 L1775.92 1210.72 L1775.34 1210.72 L1774.75 1210.72 L1774.16 1210.72 L1773.58 1210.72 L1772.99 1210.72 L1772.4 1210.72 L1771.82 1210.72 L1771.23 1210.72 L1770.65 1210.72 L1770.06 1210.72 L1769.47 1210.72 L1768.89 1210.72 L1768.3 1210.72 L1767.71 1210.72 L1767.13 1210.72 L1766.54 1210.72 L1765.95 1210.72 L1765.37 1210.72 L1764.78 1210.72 L1764.19 1210.72 L1763.61 1210.72 L1763.02 1210.72 L1762.44 1210.72 L1761.85 1210.72 L1761.26 1210.72 L1760.68 1210.72 L1760.09 1210.72 L1759.5 1210.72 L1758.92 1210.72 L1758.33 1210.72 L1757.74 1210.72 L1757.16 1210.72 L1756.57 1210.72 L1755.99 1210.72 L1755.4 1210.72 L1754.81 1210.72 L1754.23 1210.72 L1753.64 1210.72 L1753.05 1210.72 L1752.47 1210.72 L1751.88 1210.72 L1751.29 1210.72 L1750.71 1210.72 L1750.12 1210.72 L1749.53 1210.72 L1748.95 1210.72 L1748.36 1210.72 L1747.78 1210.72 L1747.19 1210.72 L1746.6 1210.72 L1746.02 1210.72 L1745.43 1210.72 L1744.84 1210.72 L1744.26 1210.72 L1743.67 1210.72 L1743.08 1210.72 L1742.5 1210.72 L1741.91 1210.72 L1741.32 1210.72 L1740.74 1210.72 L1740.15 1210.72 L1739.57 1210.72 L1738.98 1210.72 L1738.39 1210.72 L1737.81 1210.72 L1737.22 1210.72 L1736.63 1210.72 L1736.05 1210.72 L1735.46 1210.72 L1734.87 1210.72 L1734.29 1210.72 L1733.7 1210.72 L1733.11 1210.72 L1732.53 1210.72 L1731.94 1210.72 L1731.36 1210.72 L1730.77 1210.72 L1730.18 1210.72 L1729.6 1210.72 L1729.01 1210.72 L1728.42 1210.72 L1727.84 1210.72 L1727.25 1210.72 L1726.66 1210.72 L1726.08 1210.72 L1725.49 1210.72 L1724.91 1210.72 L1724.32 1210.72 L1723.73 1210.72 L1723.15 1210.72 L1722.56 1210.72 L1721.97 1210.72 L1721.39 1210.72 L1720.8 1210.72 L1720.21 1210.72 L1719.63 1210.72 L1719.04 1210.72 L1718.45 1210.72 L1717.87 1210.72 L1717.28 1210.72 L1716.7 1210.72 L1716.11 1210.72 L1715.52 1210.72 L1714.94 1210.72 L1714.35 1210.72 L1713.76 1210.72 L1713.18 1210.72 L1712.59 1210.72 L1712 1210.72 L1711.42 1210.72 L1710.83 1210.72 L1710.24 1210.72 L1709.66 1210.72 L1709.07 1210.72 L1708.49 1210.72 L1707.9 1210.72 L1707.31 1210.72 L1706.73 1210.72 L1706.14 1210.72 L1705.55 1210.72 L1704.97 1210.72 L1704.38 1210.72 L1703.79 1210.72 L1703.21 1210.72 L1702.62 1210.72 L1702.04 1210.72 L1701.45 1210.72 L1700.86 1210.72 L1700.28 1210.72 L1699.69 1210.72 L1699.1 1210.72 L1698.52 1210.72 L1697.93 1210.72 L1697.34 1210.72 L1696.76 1210.72 L1696.17 1210.72 L1695.58 1210.72 L1695 1210.72 L1694.41 1210.72 L1693.83 1210.72 L1693.24 1210.72 L1692.65 1210.72 L1692.07 1210.72 L1691.48 1210.72 L1690.89 1210.72 L1690.31 1210.72 L1689.72 1210.72 L1689.13 1210.72 L1688.55 1210.72 L1687.96 1210.72 L1687.37 1210.72 L1686.79 1210.72 L1686.2 1210.72 L1685.62 1210.72 L1685.03 1210.72 L1684.44 1210.72 L1683.86 1210.72 L1683.27 1210.72 L1682.68 1210.72 L1682.1 1210.72 L1681.51 1210.72 L1680.92 1210.72 L1680.34 1210.72 L1679.75 1210.72 L1679.17 1210.72 L1678.58 1210.72 L1677.99 1210.72 L1677.41 1210.72 L1676.82 1210.72 L1676.23 1210.72 L1675.65 1210.72 L1675.06 1210.72 L1674.47 1210.72 L1673.89 1210.72 L1673.3 1210.72 L1672.71 1210.72 L1672.13 1210.72 L1671.54 1210.72 L1670.96 1210.72 L1670.37 1210.72 L1669.78 1210.72 L1669.2 1210.72 L1668.61 1210.72 L1668.02 1210.72 L1667.44 1210.72 L1666.85 1210.72 L1666.26 1210.72 L1665.68 1210.72 L1665.09 1210.72 L1664.5 1210.72 L1663.92 1210.72 L1663.33 1210.72 L1662.75 1210.72 L1662.16 1210.72 L1661.57 1210.72 L1660.99 1210.72 L1660.4 1210.72 L1659.81 1210.72 L1659.23 1210.72 L1658.64 1210.72 L1658.05 1210.72 L1657.47 1210.72 L1656.88 1210.72 L1656.29 1210.72 L1655.71 1210.72 L1655.12 1210.72 L1654.54 1210.72 L1653.95 1210.72 L1653.36 1210.72 L1652.78 1210.72 L1652.19 1210.72 L1651.6 1210.72 L1651.02 1210.72 L1650.43 1210.72 L1649.84 1210.72 L1649.26 1210.72 L1648.67 1210.72 L1648.09 1210.72 L1647.5 1210.72 L1646.91 1210.72 L1646.33 1210.72 L1645.74 1210.72 L1645.15 1210.72 L1644.57 1210.72 L1643.98 1210.72 L1643.39 1210.72 L1642.81 1210.72 L1642.22 1210.72 L1641.63 1210.72 L1641.05 1210.72 L1640.46 1210.72 L1639.88 1210.72 L1639.29 1210.72 L1638.7 1210.72 L1638.12 1210.72 L1637.53 1210.72 L1636.94 1210.72 L1636.36 1210.72 L1635.77 1210.72 L1635.18 1210.72 L1634.6 1210.72 L1634.01 1210.72 L1633.42 1210.72 L1632.84 1210.72 L1632.25 1210.72 L1631.67 1210.72 L1631.08 1210.72 L1630.49 1210.72 L1629.91 1210.72 L1629.32 1210.72 L1628.73 1210.72 L1628.15 1210.72 L1627.56 1210.72 L1626.97 1210.72 L1626.39 1210.72 L1625.8 1210.72 L1625.22 1210.72 L1624.63 1210.72 L1624.04 1210.72 L1623.46 1210.72 L1622.87 1210.72 L1622.28 1210.72 L1621.7 1210.72 L1621.11 1210.72 L1620.52 1210.72 L1619.94 1210.72 L1619.35 1210.72 L1618.76 1210.72 L1618.18 1210.72 L1617.59 1210.72 L1617.01 1210.72 L1616.42 1210.72 L1615.83 1210.72 L1615.25 1210.72 L1614.66 1210.72 L1614.07 1210.72 L1613.49 1210.72 L1612.9 1210.72 L1612.31 1210.72 L1611.73 1210.72 L1611.14 1210.72 L1610.55 1210.72 L1609.97 1210.72 L1609.38 1210.72 L1608.8 1210.72 L1608.21 1210.72 L1607.62 1210.72 L1607.04 1210.72 L1606.45 1210.72 L1605.86 1210.72 L1605.28 1210.72 L1604.69 1210.72 L1604.1 1210.72 L1603.52 1210.72 L1602.93 1210.72 L1602.34 1210.72 L1601.76 1210.72 L1601.17 1210.72 L1600.59 1210.72 L1600 1210.72 L1599.41 1210.72 L1598.83 1210.72 L1598.24 1210.72 L1597.65 1210.72 L1597.07 1210.72 L1596.48 1210.72 L1595.89 1210.72 L1595.31 1210.72 L1594.72 1210.72 L1594.14 1210.72 L1593.55 1210.72 L1592.96 1210.72 L1592.38 1210.72 L1591.79 1210.72 L1591.2 1210.72 L1590.62 1210.72 L1590.03 1210.72 L1589.44 1210.72 L1588.86 1210.72 L1588.27 1210.72 L1587.68 1210.72 L1587.1 1210.72 L1586.51 1210.72 L1585.93 1210.72 L1585.34 1210.72 L1584.75 1210.72 L1584.17 1210.72 L1583.58 1210.72 L1582.99 1210.72 L1582.41 1210.72 L1581.82 1210.72 L1581.23 1210.72 L1580.65 1210.72 L1580.06 1210.72 L1579.47 1210.72 L1578.89 1210.72 L1578.3 1210.72 L1577.72 1210.72 L1577.13 1210.72 L1576.54 1210.72 L1575.96 1210.72 L1575.37 1210.72 L1574.78 1210.72 L1574.2 1210.72 L1573.61 1210.72 L1573.02 1210.72 L1572.44 1210.72 L1571.85 1210.72 L1571.27 1210.72 L1570.68 1210.72 L1570.09 1210.72 L1569.51 1210.72 L1568.92 1210.72 L1568.33 1210.72 L1567.75 1210.72 L1567.16 1210.72 L1566.57 1210.72 L1565.99 1210.72 L1565.4 1210.72 L1564.81 1210.72 L1564.23 1210.72 L1563.64 1210.72 L1563.06 1210.72 L1562.47 1210.72 L1561.88 1210.72 L1561.3 1210.72 L1560.71 1210.72 L1560.12 1210.72 L1559.54 1210.72 L1558.95 1210.72 L1558.36 1210.72 L1557.78 1210.72 L1557.19 1210.72 L1556.6 1210.72 L1556.02 1210.72 L1555.43 1210.72 L1554.85 1210.72 L1554.26 1210.72 L1553.67 1210.72 L1553.09 1210.72 L1552.5 1210.72 L1551.91 1210.72 L1551.33 1210.72 L1550.74 1210.72 L1550.15 1210.72 L1549.57 1210.72 L1548.98 1210.72 L1548.4 1210.72 L1547.81 1210.72 L1547.22 1210.72 L1546.64 1210.72 L1546.05 1210.72 L1545.46 1210.72 L1544.88 1210.72 L1544.29 1210.72 L1543.7 1210.72 L1543.12 1210.72 L1542.53 1210.72 L1541.94 1210.72 L1541.36 1210.72 L1540.77 1210.72 L1540.19 1210.72 L1539.6 1210.72 L1539.01 1210.72 L1538.43 1210.72 L1537.84 1210.72 L1537.25 1210.72 L1536.67 1210.72 L1536.08 1210.72 L1535.49 1210.72 L1534.91 1210.72 L1534.32 1210.72 L1533.73 1210.72 L1533.15 1210.72 L1532.56 1210.72 L1531.98 1210.72 L1531.39 1210.72 L1530.8 1210.72 L1530.22 1210.72 L1529.63 1210.72 L1529.04 1210.72 L1528.46 1210.72 L1527.87 1210.72 L1527.28 1210.72 L1526.7 1210.72 L1526.11 1210.72 L1525.52 1210.72 L1524.94 1210.72 L1524.35 1210.72 L1523.77 1210.72 L1523.18 1210.72 L1522.59 1210.72 L1522.01 1210.72 L1521.42 1210.72 L1520.83 1210.72 L1520.25 1210.72 L1519.66 1210.72 L1519.07 1210.72 L1518.49 1210.72 L1517.9 1210.72 L1517.32 1210.72 L1516.73 1210.72 L1516.14 1210.72 L1515.56 1210.72 L1514.97 1210.72 L1514.38 1210.72 L1513.8 1210.72 L1513.21 1210.72 L1512.62 1210.72 L1512.04 1210.72 L1511.45 1210.72 L1510.86 1210.72 L1510.28 1210.72 L1509.69 1210.72 L1509.11 1210.72 L1508.52 1210.72 L1507.93 1210.72 L1507.35 1210.72 L1506.76 1210.72 L1506.17 1210.72 L1505.59 1210.72 L1505 1210.72 L1504.41 1210.72 L1503.83 1210.72 L1503.24 1210.72 L1502.65 1210.72 L1502.07 1210.72 L1501.48 1210.72 L1500.9 1210.72 L1500.31 1210.72 L1499.72 1210.72 L1499.14 1210.72 L1498.55 1210.72 L1497.96 1210.72 L1497.38 1210.72 L1496.79 1210.72 L1496.2 1210.72 L1495.62 1210.72 L1495.03 1210.72 L1494.45 1210.72 L1493.86 1210.72 L1493.27 1210.72 L1492.69 1210.72 L1492.1 1210.72 L1491.51 1210.72 L1490.93 1210.72 L1490.34 1210.72 L1489.75 1210.72 L1489.17 1210.72 L1488.58 1210.72 L1487.99 1210.72 L1487.41 1210.72 L1486.82 1210.72 L1486.24 1210.72 L1485.65 1210.72 L1485.06 1210.72 L1484.48 1210.72 L1483.89 1210.72 L1483.3 1210.72 L1482.72 1210.72 L1482.13 1210.72 L1481.54 1210.72 L1480.96 1210.72 L1480.37 1210.72 L1479.78 1210.72 L1479.2 1210.72 L1478.61 1210.72 L1478.03 1210.72 L1477.44 1210.72 L1476.85 1210.72 L1476.27 1210.72 L1475.68 1210.72 L1475.09 1210.72 L1474.51 1210.72 L1473.92 1210.72 L1473.33 1210.72 L1472.75 1210.72 L1472.16 1210.72 L1471.57 1210.72 L1470.99 1210.72 L1470.4 1210.72 L1469.82 1210.72 L1469.23 1210.72 L1468.64 1210.72 L1468.06 1210.72 L1467.47 1210.72 L1466.88 1210.72 L1466.3 1210.72 L1465.71 1210.72 L1465.12 1210.72 L1464.54 1210.72 L1463.95 1210.72 L1463.37 1210.72 L1462.78 1210.72 L1462.19 1210.72 L1461.61 1210.72 L1461.02 1210.72 L1460.43 1210.72 L1459.85 1210.72 L1459.26 1210.72 L1458.67 1210.72 L1458.09 1210.72 L1457.5 1210.72 L1456.91 1210.72 L1456.33 1210.72 L1455.74 1210.72 L1455.16 1210.72 L1454.57 1210.72 L1453.98 1210.72 L1453.4 1210.72 L1452.81 1210.72 L1452.22 1210.72 L1451.64 1210.72 L1451.05 1210.72 L1450.46 1210.72 L1449.88 1210.72 L1449.29 1210.72 L1448.7 1210.72 L1448.12 1210.72 L1447.53 1210.72 L1446.95 1210.72 L1446.36 1210.72 L1445.77 1210.72 L1445.19 1210.72 L1444.6 1210.72 L1444.01 1210.72 L1443.43 1210.72 L1442.84 1210.72 L1442.25 1210.72 L1441.67 1210.72 L1441.08 1210.72 L1440.5 1210.72 L1439.91 1210.72 L1439.32 1210.72 L1438.74 1210.72 L1438.15 1210.72 L1437.56 1210.72 L1436.98 1210.72 L1436.39 1210.72 L1435.8 1210.72 L1435.22 1210.72 L1434.63 1210.72 L1434.04 1210.72 L1433.46 1210.72 L1432.87 1210.72 L1432.29 1210.72 L1431.7 1210.72 L1431.11 1210.72 L1430.53 1210.72 L1429.94 1210.72 L1429.35 1210.72 L1428.77 1210.72 L1428.18 1210.72 L1427.59 1210.72 L1427.01 1210.72 L1426.42 1210.72 L1425.83 1210.72 L1425.25 1210.72 L1424.66 1210.72 L1424.08 1210.72 L1423.49 1210.72 L1422.9 1210.72 L1422.32 1210.72 L1421.73 1210.72 L1421.14 1210.72 L1420.56 1210.72 L1419.97 1210.72 L1419.38 1210.72 L1418.8 1210.72 L1418.21 1210.72 L1417.63 1210.72 L1417.04 1210.72 L1416.45 1210.72 L1415.87 1210.72 L1415.28 1210.72 L1414.69 1210.72 L1414.11 1210.72 L1413.52 1210.72 L1412.93 1210.72 L1412.35 1210.72 L1411.76 1210.72 L1411.17 1210.72 L1410.59 1210.72 L1410 1210.72 L1409.42 1210.72 L1408.83 1210.72 L1408.24 1210.72 L1407.66 1210.72 L1407.07 1210.72 L1406.48 1210.72 L1405.9 1210.72 L1405.31 1210.72 L1404.72 1210.72 L1404.14 1210.72 L1403.55 1210.72 L1402.96 1210.72 L1402.38 1210.72 L1401.79 1210.72 L1401.21 1210.72 L1400.62 1210.72 L1400.03 1210.72 L1399.45 1210.72 L1398.86 1210.72 L1398.27 1210.72 L1397.69 1210.72 L1397.1 1210.72 L1396.51 1210.72 L1395.93 1210.72 L1395.34 1210.72 L1394.75 1210.72 L1394.17 1210.72 L1393.58 1210.72 L1393 1210.72 L1392.41 1210.72 L1391.82 1210.72 L1391.24 1210.72 L1390.65 1210.72 L1390.06 1210.72 L1389.48 1210.72 L1388.89 1210.72 L1388.3 1210.72 L1387.72 1210.72 L1387.13 1210.72 L1386.55 1210.72 L1385.96 1210.72 L1385.37 1210.72 L1384.79 1210.72 L1384.2 1210.72 L1383.61 1210.72 L1383.03 1210.72 L1382.44 1210.72 L1381.85 1210.72 L1381.27 1210.72 L1380.68 1210.72 L1380.09 1210.72 L1379.51 1210.72 L1378.92 1210.72 L1378.34 1210.72 L1377.75 1210.72 L1377.16 1210.72 L1376.58 1210.72 L1375.99 1210.72 L1375.4 1210.72 L1374.82 1210.72 L1374.23 1210.72 L1373.64 1210.72 L1373.06 1210.72 L1372.47 1210.72 L1371.88 1210.72 L1371.3 1210.72 L1370.71 1210.72 L1370.13 1210.72 L1369.54 1210.72 L1368.95 1210.72 L1368.37 1210.72 L1367.78 1210.72 L1367.19 1210.72 L1366.61 1210.72 L1366.02 1210.72 L1365.43 1210.72 L1364.85 1210.72 L1364.26 1210.72 L1363.68 1210.72 L1363.09 1210.72 L1362.5 1210.72 L1361.92 1210.72 L1361.33 1210.72 L1360.74 1210.72 L1360.16 1210.72 L1359.57 1210.72 L1358.98 1210.72 L1358.4 1210.72 L1357.81 1210.72 L1357.22 1210.72 L1356.64 1210.72 L1356.05 1210.72 L1355.47 1210.72 L1354.88 1210.72 L1354.29 1210.72 L1353.71 1210.72 L1353.12 1210.72 L1352.53 1210.72 L1351.95 1210.72 L1351.36 1210.72 L1350.77 1210.72 L1350.19 1210.72 L1349.6 1210.72 L1349.01 1210.72 L1348.43 1210.72 L1347.84 1210.72 L1347.26 1210.72 L1346.67 1210.72 L1346.08 1210.72 L1345.5 1210.72 L1344.91 1210.72 L1344.32 1210.72 L1343.74 1210.72 L1343.15 1210.72 L1342.56 1210.72 L1341.98 1210.72 L1341.39 1210.72 L1340.8 1210.72 L1340.22 1210.72 L1339.63 1210.72 L1339.05 1210.72 L1338.46 1210.72 L1337.87 1210.72 L1337.29 1210.72 L1336.7 1210.72 L1336.11 1210.72 L1335.53 1210.72 L1334.94 1210.72 L1334.35 1210.72 L1333.77 1210.72 L1333.18 1210.72 L1332.6 1210.72 L1332.01 1210.72 L1331.42 1210.72 L1330.84 1210.72 L1330.25 1210.72 L1329.66 1210.72 L1329.08 1210.72 L1328.49 1210.72 L1327.9 1210.72 L1327.32 1210.72 L1326.73 1210.72 L1326.14 1210.72 L1325.56 1210.72 L1324.97 1210.72 L1324.39 1210.72 L1323.8 1210.72 L1323.21 1210.72 L1322.63 1210.72 L1322.04 1210.72 L1321.45 1210.72 L1320.87 1210.72 L1320.28 1210.72 L1319.69 1210.72 L1319.11 1210.72 L1318.52 1210.72 L1317.93 1210.72 L1317.35 1210.72 L1316.76 1210.72 L1316.18 1210.72 L1315.59 1210.72 L1315 1210.72 L1314.42 1210.72 L1313.83 1210.72 L1313.24 1210.72 L1312.66 1210.72 L1312.07 1210.72 L1311.48 1210.72 L1310.9 1210.72 L1310.31 1210.72 L1309.73 1210.72 L1309.14 1210.72 L1308.55 1210.72 L1307.97 1210.72 L1307.38 1210.72 L1306.79 1210.72 L1306.21 1210.72 L1305.62 1210.72 L1305.03 1210.72 L1304.45 1210.72 L1303.86 1210.72 L1303.27 1210.72 L1302.69 1210.72 L1302.1 1210.72 L1301.52 1210.72 L1300.93 1210.72 L1300.34 1210.72 L1299.76 1210.72 L1299.17 1210.72 L1298.58 1210.72 L1298 1210.72 L1297.41 1210.72 L1296.82 1210.72 L1296.24 1210.72 L1295.65 1210.72 L1295.06 1210.72 L1294.48 1210.72 L1293.89 1210.72 L1293.31 1210.72 L1292.72 1210.72 L1292.13 1210.72 L1291.55 1210.72 L1290.96 1210.72 L1290.37 1210.72 L1289.79 1210.72 L1289.2 1210.72 L1288.61 1210.72 L1288.03 1210.72 L1287.44 1210.72 L1286.86 1210.72 L1286.27 1210.72 L1285.68 1210.72 L1285.1 1210.72 L1284.51 1210.72 L1283.92 1210.72 L1283.34 1210.72 L1282.75 1210.72 L1282.16 1210.72 L1281.58 1210.72 L1280.99 1210.72 L1280.4 1210.72 L1279.82 1210.72 L1279.23 1210.72 L1278.65 1210.72 L1278.06 1210.72 L1277.47 1210.72 L1276.89 1210.72 L1276.3 1210.72 L1275.71 1210.72 L1275.13 1210.72 L1274.54 1210.72 L1273.95 1210.72 L1273.37 1210.72 L1272.78 1210.72 L1272.19 1210.72 L1271.61 1210.72 L1271.02 1210.72 L1270.44 1210.72 L1269.85 1210.72 L1269.26 1210.72 L1268.68 1210.72 L1268.09 1210.72 L1267.5 1210.72 L1266.92 1210.72 L1266.33 1210.72 L1265.74 1210.72 L1265.16 1210.72 L1264.57 1210.72 L1263.98 1210.72 L1263.4 1210.72 L1262.81 1210.72 L1262.23 1210.72 L1261.64 1210.72 L1261.05 1210.72 L1260.47 1210.72 L1259.88 1210.72 L1259.29 1210.72 L1258.71 1210.72 L1258.12 1210.72 L1257.53 1210.72 L1256.95 1210.72 L1256.36 1210.72 L1255.78 1210.72 L1255.19 1210.72 L1254.6 1210.72 L1254.02 1210.72 L1253.43 1210.72 L1252.84 1210.72 L1252.26 1210.72 L1251.67 1210.72 L1251.08 1210.72 L1250.5 1210.72 L1249.91 1210.72 L1249.32 1210.72 L1248.74 1210.72 L1248.15 1210.72 L1247.57 1210.72 L1246.98 1210.72 L1246.39 1210.72 L1245.81 1210.72 L1245.22 1210.72 L1244.63 1210.72 L1244.05 1210.72 L1243.46 1210.72 L1242.87 1210.72 L1242.29 1210.72 L1241.7 1210.72 L1241.11 1210.72 L1240.53 1210.72 L1239.94 1210.72 L1239.36 1210.72 L1238.77 1210.72 L1238.18 1210.72 L1237.6 1210.72 L1237.01 1210.72 L1236.42 1210.72 L1235.84 1210.72 L1235.25 1210.72 L1234.66 1210.72 L1234.08 1210.72 L1233.49 1210.72 L1232.91 1210.72 L1232.32 1210.72 L1231.73 1210.72 L1231.15 1210.72 L1230.56 1210.72 L1229.97 1210.72 L1229.39 1210.72 L1228.8 1210.72 L1228.21 1210.72 L1227.63 1210.72 L1227.04 1210.72 L1226.45 1210.72 L1225.87 1210.72 L1225.28 1210.72 L1224.7 1210.72 L1224.11 1210.72 L1223.52 1210.72 L1222.94 1210.72 L1222.35 1210.72 L1221.76 1210.72 L1221.18 1210.72 L1220.59 1210.72 L1220 1210.72 L1219.42 1210.72 L1218.83 1210.72 L1218.24 1210.72 L1217.66 1210.72 L1217.07 1210.72 L1216.49 1210.72 L1215.9 1210.72 L1215.31 1210.72 L1214.73 1210.72 L1214.14 1210.72 L1213.55 1210.72 L1212.97 1210.72 L1212.38 1210.72 L1211.79 1210.72 L1211.21 1210.72 L1210.62 1210.72 L1210.03 1210.72 L1209.45 1210.72 L1208.86 1210.72 L1208.28 1210.72 L1207.69 1210.72 L1207.1 1210.72 L1206.52 1210.72 L1205.93 1210.72 L1205.34 1210.72 L1204.76 1210.72 L1204.17 1210.72 L1203.58 1210.72 L1203 1210.72 L1202.41 1210.72 L1201.83 1210.72 L1201.24 1210.72 L1200.65 1210.72 L1200.07 1210.72 L1199.48 1210.72 L1198.89 1210.72 L1198.31 1210.72 L1197.72 1210.72 L1197.13 1210.72 L1196.55 1210.72 L1195.96 1210.72 L1195.37 1210.72 L1194.79 1210.72 L1194.2 1210.72 L1193.62 1210.72 L1193.03 1210.72 L1192.44 1210.72 L1191.86 1210.72 L1191.27 1210.72 L1190.68 1210.72 L1190.1 1210.72 L1189.51 1210.72 L1188.92 1210.72 L1188.34 1210.72 L1187.75 1210.72 L1187.16 1210.72 L1186.58 1210.72 L1185.99 1210.72 L1185.41 1210.72 L1184.82 1210.72 L1184.23 1210.72 L1183.65 1210.72 L1183.06 1210.72 L1182.47 1210.72 L1181.89 1210.72 L1181.3 1210.72 L1180.71 1210.72 L1180.13 1210.72 L1179.54 1210.72 L1178.96 1210.72 L1178.37 1210.72 L1177.78 1210.72 L1177.2 1210.72 L1176.61 1210.72 L1176.02 1210.72 L1175.44 1210.72 L1174.85 1210.72 L1174.26 1210.72 L1173.68 1210.72 L1173.09 1210.72 L1172.5 1210.72 L1171.92 1210.72 L1171.33 1210.72 L1170.75 1210.72 L1170.16 1210.72 L1169.57 1210.72 L1168.99 1210.72 L1168.4 1210.72 L1167.81 1210.72 L1167.23 1210.72 L1166.64 1210.72 L1166.05 1210.72 L1165.47 1210.72 L1164.88 1210.72 L1164.29 1210.72 L1163.71 1210.72 L1163.12 1210.72 L1162.54 1210.72 L1161.95 1210.72 L1161.36 1210.72 L1160.78 1210.72 L1160.19 1210.72 L1159.6 1210.72 L1159.02 1210.72 L1158.43 1210.72 L1157.84 1210.72 L1157.26 1210.72 L1156.67 1210.72 L1156.09 1210.72 L1155.5 1210.72 L1154.91 1210.72 L1154.33 1210.72 L1153.74 1210.72 L1153.15 1210.72 L1152.57 1210.72 L1151.98 1210.72 L1151.39 1210.72 L1150.81 1210.72 L1150.22 1210.72 L1149.63 1210.72 L1149.05 1210.72 L1148.46 1210.72 L1147.88 1210.72 L1147.29 1210.72 L1146.7 1210.72 L1146.12 1210.72 L1145.53 1210.72 L1144.94 1210.72 L1144.36 1210.72 L1143.77 1210.72 L1143.18 1210.72 L1142.6 1210.72 L1142.01 1210.72 L1141.42 1210.72 L1140.84 1210.72 L1140.25 1210.72 L1139.67 1210.72 L1139.08 1210.72 L1138.49 1210.72 L1137.91 1210.72 L1137.32 1210.72 L1136.73 1210.72 L1136.15 1210.72 L1135.56 1210.72 L1134.97 1210.72 L1134.39 1210.72 L1133.8 1210.72 L1133.21 1210.72 L1132.63 1210.72 L1132.04 1210.72 L1131.46 1210.72 L1130.87 1210.72 L1130.28 1210.72 L1129.7 1210.72 L1129.11 1210.72 L1128.52 1210.72 L1127.94 1210.72 L1127.35 1210.72 L1126.76 1210.72 L1126.18 1210.72 L1125.59 1210.72 L1125.01 1210.72 L1124.42 1210.72 L1123.83 1210.72 L1123.25 1210.72 L1122.66 1210.72 L1122.07 1210.72 L1121.49 1210.72 L1120.9 1210.72 L1120.31 1210.72 L1119.73 1210.72 L1119.14 1210.72 L1118.55 1210.72 L1117.97 1210.72 L1117.38 1210.72 L1116.8 1210.72 L1116.21 1210.72 L1115.62 1210.72 L1115.04 1210.72 L1114.45 1210.72 L1113.86 1210.72 L1113.28 1210.72 L1112.69 1210.72 L1112.1 1210.72 L1111.52 1210.72 L1110.93 1210.72 L1110.34 1210.72 L1109.76 1210.72 L1109.17 1210.72 L1108.59 1210.72 L1108 1210.72 L1107.41 1210.72 L1106.83 1210.72 L1106.24 1210.72 L1105.65 1210.72 L1105.07 1210.72 L1104.48 1210.72 L1103.89 1210.72 L1103.31 1210.72 L1102.72 1210.72 L1102.14 1210.72 L1101.55 1210.72 L1100.96 1210.72 L1100.38 1210.72 L1099.79 1210.72 L1099.2 1210.72 L1098.62 1210.72 L1098.03 1210.72 L1097.44 1210.72 L1096.86 1210.72 L1096.27 1210.72 L1095.68 1210.72 L1095.1 1210.72 L1094.51 1210.72 L1093.93 1210.72 L1093.34 1210.72 L1092.75 1210.72 L1092.17 1210.72 L1091.58 1210.72 L1090.99 1210.72 L1090.41 1210.72 L1089.82 1210.72 L1089.23 1210.72 L1088.65 1210.72 L1088.06 1210.72 L1087.47 1210.72 L1086.89 1210.72 L1086.3 1210.72 L1085.72 1210.72 L1085.13 1210.72 L1084.54 1210.72 L1083.96 1210.72 L1083.37 1210.72 L1082.78 1210.72 L1082.2 1210.72 L1081.61 1210.72 L1081.02 1210.72 L1080.44 1210.72 L1079.85 1210.72 L1079.26 1210.72 L1078.68 1210.72 L1078.09 1210.72 L1077.51 1210.72 L1076.92 1210.72 L1076.33 1210.72 L1075.75 1210.72 L1075.16 1210.72 L1074.57 1210.72 L1073.99 1210.72 L1073.4 1210.72 L1072.81 1210.72 L1072.23 1210.72 L1071.64 1210.72 L1071.06 1210.72 L1070.47 1210.72 L1069.88 1210.72 L1069.3 1210.72 L1068.71 1210.72 L1068.12 1210.72 L1067.54 1210.72 L1066.95 1210.72 L1066.36 1210.72 L1065.78 1210.72 L1065.19 1210.72 L1064.6 1210.72 L1064.02 1210.72 L1063.43 1210.72 L1062.85 1210.72 L1062.26 1210.72 L1061.67 1210.72 L1061.09 1210.72 L1060.5 1210.72 L1059.91 1210.72 L1059.33 1210.72 L1058.74 1210.72 L1058.15 1210.72 L1057.57 1210.72 L1056.98 1210.72 L1056.39 1210.72 L1055.81 1210.72 L1055.22 1210.72 L1054.64 1210.72 L1054.05 1210.72 L1053.46 1210.72 L1052.88 1210.72 L1052.29 1210.72 L1051.7 1210.72 L1051.12 1210.72 L1050.53 1210.72 L1049.94 1210.72 L1049.36 1210.72 L1048.77 1210.72 L1048.19 1210.72 L1047.6 1210.72 L1047.01 1210.72 L1046.43 1210.72 L1045.84 1210.72 L1045.25 1210.72 L1044.67 1210.72 L1044.08 1210.72 L1043.49 1210.72 L1042.91 1210.72 L1042.32 1210.72 L1041.73 1210.72 L1041.15 1210.72 L1040.56 1210.72 L1039.98 1210.72 L1039.39 1210.72 L1038.8 1210.72 L1038.22 1210.72 L1037.63 1210.72 L1037.04 1210.72 L1036.46 1210.72 L1035.87 1210.72 L1035.28 1210.72 L1034.7 1210.72 L1034.11 1210.72 L1033.52 1210.72 L1032.94 1210.72 L1032.35 1210.72 L1031.77 1210.72 L1031.18 1210.72 L1030.59 1210.72 L1030.01 1210.72 L1029.42 1210.72 L1028.83 1210.72 L1028.25 1210.72 L1027.66 1210.72 L1027.07 1210.72 L1026.49 1210.72 L1025.9 1210.72 L1025.32 1210.72 L1024.73 1210.72 L1024.14 1210.72 L1023.56 1210.72 L1022.97 1210.72 L1022.38 1210.72 L1021.8 1210.72 L1021.21 1210.72 L1020.62 1210.72 L1020.04 1210.72 L1019.45 1210.72 L1018.86 1210.72 L1018.28 1210.72 L1017.69 1210.72 L1017.11 1210.72 L1016.52 1210.72 L1015.93 1210.72 L1015.35 1210.72 L1014.76 1210.72 L1014.17 1210.72 L1013.59 1210.72 L1013 1210.72 L1012.41 1210.72 L1011.83 1210.72 L1011.24 1210.72 L1010.65 1210.72 L1010.07 1210.72 L1009.48 1210.72 L1008.9 1210.72 L1008.31 1210.72 L1007.72 1210.72 L1007.14 1210.72 L1006.55 1210.72 L1005.96 1210.72 L1005.38 1210.72 L1004.79 1210.72 L1004.2 1210.72 L1003.62 1210.72 L1003.03 1210.72 L1002.44 1210.72 L1001.86 1210.72 L1001.27 1210.72 L1000.69 1210.72 L1000.1 1210.72 L999.513 1210.72 L998.926 1210.72 L998.34 1210.72 L997.754 1210.72 L997.167 1210.72 L996.581 1210.72 L995.994 1210.72 L995.408 1210.72 L994.822 1210.72 L994.235 1210.72 L993.649 1210.72 L993.062 1210.72 L992.476 1210.72 L991.889 1210.72 L991.303 1210.72 L990.717 1210.72 L990.13 1210.72 L989.544 1210.72 L988.957 1210.72 L988.371 1210.72 L987.785 1210.72 L987.198 1210.72 L986.612 1210.72 L986.025 1210.72  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.8 986.612,1210.8 987.198,1210.8 987.785,1210.8 988.371,1210.8 988.957,1210.8 989.544,1210.8 990.13,1210.8 990.717,1210.8 991.303,1210.8 991.889,1210.8 992.476,1210.8 993.062,1210.8 993.649,1210.8 994.235,1210.8 994.822,1210.8 995.408,1210.8 995.994,1210.8 996.581,1210.8 997.167,1210.8 997.754,1210.8 998.34,1210.8 998.926,1210.8 999.513,1210.8 1000.1,1210.8 1000.69,1210.8 1001.27,1210.8 1001.86,1210.8 1002.44,1210.8 1003.03,1210.8 1003.62,1210.8 1004.2,1210.8 1004.79,1210.8 1005.38,1210.8 1005.96,1210.8 1006.55,1210.8 1007.14,1210.8 1007.72,1210.8 1008.31,1210.8 1008.9,1210.8 1009.48,1210.8 1010.07,1210.8 1010.65,1210.8 1011.24,1210.8 1011.83,1210.8 1012.41,1210.8 1013,1210.8 1013.59,1210.8 1014.17,1210.8 1014.76,1210.8 1015.35,1210.8 1015.93,1210.8 1016.52,1210.8 1017.11,1210.8 1017.69,1210.8 1018.28,1210.8 1018.86,1210.8 1019.45,1210.8 1020.04,1210.8 1020.62,1210.8 1021.21,1210.8 1021.8,1210.8 1022.38,1210.8 1022.97,1210.8 1023.56,1210.8 1024.14,1210.8 1024.73,1210.8 1025.32,1210.8 1025.9,1210.8 1026.49,1210.8 1027.07,1210.8 1027.66,1210.8 1028.25,1210.8 1028.83,1210.8 1029.42,1210.8 1030.01,1210.8 1030.59,1210.8 1031.18,1210.8 1031.77,1210.8 1032.35,1210.8 1032.94,1210.8 1033.52,1210.8 1034.11,1210.8 1034.7,1210.8 1035.28,1210.8 1035.87,1210.8 1036.46,1210.8 1037.04,1210.8 1037.63,1210.8 1038.22,1210.8 1038.8,1210.8 1039.39,1210.8 1039.98,1210.8 1040.56,1210.8 1041.15,1210.8 1041.73,1210.8 1042.32,1210.8 1042.91,1210.8 1043.49,1210.8 1044.08,1210.8 1044.67,1210.8 1045.25,1210.8 1045.84,1210.8 1046.43,1210.8 1047.01,1210.8 1047.6,1210.8 1048.19,1210.8 1048.77,1210.8 1049.36,1210.8 1049.94,1210.8 1050.53,1210.8 1051.12,1210.8 1051.7,1210.8 1052.29,1210.8 1052.88,1210.8 1053.46,1210.8 1054.05,1210.8 1054.64,1210.8 1055.22,1210.8 1055.81,1210.8 1056.39,1210.8 1056.98,1210.8 1057.57,1210.8 1058.15,1210.8 1058.74,1210.8 1059.33,1210.8 1059.91,1210.8 1060.5,1210.8 1061.09,1210.8 1061.67,1210.8 1062.26,1210.8 1062.85,1210.8 1063.43,1210.8 1064.02,1210.8 1064.6,1210.8 1065.19,1210.8 1065.78,1210.8 1066.36,1210.8 1066.95,1210.8 1067.54,1210.8 1068.12,1210.8 1068.71,1210.8 1069.3,1210.8 1069.88,1210.8 1070.47,1210.8 1071.06,1210.8 1071.64,1210.8 1072.23,1210.8 1072.81,1210.8 1073.4,1210.8 1073.99,1210.8 1074.57,1210.8 1075.16,1210.8 1075.75,1210.8 1076.33,1210.8 1076.92,1210.8 1077.51,1210.8 1078.09,1210.8 1078.68,1210.8 1079.26,1210.8 1079.85,1210.8 1080.44,1210.8 1081.02,1210.8 1081.61,1210.8 1082.2,1210.8 1082.78,1210.8 1083.37,1210.8 1083.96,1210.8 1084.54,1210.8 1085.13,1210.8 1085.72,1210.8 1086.3,1210.8 1086.89,1210.8 1087.47,1210.8 1088.06,1210.8 1088.65,1210.8 1089.23,1210.8 1089.82,1210.8 1090.41,1210.8 1090.99,1210.8 1091.58,1210.8 1092.17,1210.8 1092.75,1210.8 1093.34,1210.8 1093.93,1210.8 1094.51,1210.8 1095.1,1210.8 1095.68,1210.8 1096.27,1210.8 1096.86,1210.8 1097.44,1210.8 1098.03,1210.8 1098.62,1210.8 1099.2,1210.8 1099.79,1210.8 1100.38,1210.8 1100.96,1210.8 1101.55,1210.8 1102.14,1210.8 1102.72,1210.8 1103.31,1210.8 1103.89,1210.8 1104.48,1210.8 1105.07,1210.8 1105.65,1210.8 1106.24,1210.8 1106.83,1210.8 1107.41,1210.8 1108,1210.8 1108.59,1210.8 1109.17,1210.8 1109.76,1210.8 1110.34,1210.8 1110.93,1210.8 1111.52,1210.8 1112.1,1210.8 1112.69,1210.8 1113.28,1210.8 1113.86,1210.8 1114.45,1210.8 1115.04,1210.8 1115.62,1210.8 1116.21,1210.8 1116.8,1210.8 1117.38,1210.8 1117.97,1210.8 1118.55,1210.8 1119.14,1210.8 1119.73,1210.8 1120.31,1210.8 1120.9,1210.8 1121.49,1210.8 1122.07,1210.8 1122.66,1210.8 1123.25,1210.8 1123.83,1210.8 1124.42,1210.8 1125.01,1210.8 1125.59,1210.8 1126.18,1210.8 1126.76,1210.8 1127.35,1210.8 1127.94,1210.8 1128.52,1210.8 1129.11,1210.8 1129.7,1210.8 1130.28,1210.8 1130.87,1210.8 1131.46,1210.8 1132.04,1210.8 1132.63,1210.8 1133.21,1210.8 1133.8,1210.8 1134.39,1210.8 1134.97,1210.8 1135.56,1210.8 1136.15,1210.8 1136.73,1210.8 1137.32,1210.8 1137.91,1210.8 1138.49,1210.8 1139.08,1210.8 1139.67,1210.8 1140.25,1210.8 1140.84,1210.8 1141.42,1210.8 1142.01,1210.8 1142.6,1210.8 1143.18,1210.8 1143.77,1210.8 1144.36,1210.8 1144.94,1210.8 1145.53,1210.8 1146.12,1210.8 1146.7,1210.8 1147.29,1210.8 1147.88,1210.8 1148.46,1210.8 1149.05,1210.8 1149.63,1210.8 1150.22,1210.8 1150.81,1210.8 1151.39,1210.8 1151.98,1210.8 1152.57,1210.8 1153.15,1210.8 1153.74,1210.8 1154.33,1210.8 1154.91,1210.8 1155.5,1210.8 1156.09,1210.8 1156.67,1210.8 1157.26,1210.8 1157.84,1210.8 1158.43,1210.8 1159.02,1210.8 1159.6,1210.8 1160.19,1210.8 1160.78,1210.8 1161.36,1210.8 1161.95,1210.8 1162.54,1210.8 1163.12,1210.8 1163.71,1210.8 1164.29,1210.8 1164.88,1210.8 1165.47,1210.8 1166.05,1210.8 1166.64,1210.8 1167.23,1210.8 1167.81,1210.8 1168.4,1210.8 1168.99,1210.8 1169.57,1210.8 1170.16,1210.8 1170.75,1210.8 1171.33,1210.8 1171.92,1210.8 1172.5,1210.8 1173.09,1210.8 1173.68,1210.8 1174.26,1210.8 1174.85,1210.8 1175.44,1210.8 1176.02,1210.8 1176.61,1210.8 1177.2,1210.8 1177.78,1210.8 1178.37,1210.8 1178.96,1210.8 1179.54,1210.8 1180.13,1210.8 1180.71,1210.8 1181.3,1210.8 1181.89,1210.8 1182.47,1210.8 1183.06,1210.8 1183.65,1210.8 1184.23,1210.8 1184.82,1210.8 1185.41,1210.8 1185.99,1210.8 1186.58,1210.8 1187.16,1210.8 1187.75,1210.8 1188.34,1210.8 1188.92,1210.8 1189.51,1210.8 1190.1,1210.8 1190.68,1210.8 1191.27,1210.8 1191.86,1210.8 1192.44,1210.8 1193.03,1210.8 1193.62,1210.8 1194.2,1210.8 1194.79,1210.8 1195.37,1210.8 1195.96,1210.8 1196.55,1210.8 1197.13,1210.8 1197.72,1210.8 1198.31,1210.8 1198.89,1210.8 1199.48,1210.8 1200.07,1210.8 1200.65,1210.8 1201.24,1210.8 1201.83,1210.8 1202.41,1210.8 1203,1210.8 1203.58,1210.8 1204.17,1210.8 1204.76,1210.8 1205.34,1210.8 1205.93,1210.8 1206.52,1210.8 1207.1,1210.8 1207.69,1210.8 1208.28,1210.8 1208.86,1210.8 1209.45,1210.8 1210.03,1210.8 1210.62,1210.8 1211.21,1210.8 1211.79,1210.8 1212.38,1210.8 1212.97,1210.8 1213.55,1210.8 1214.14,1210.8 1214.73,1210.8 1215.31,1210.8 1215.9,1210.8 1216.49,1210.8 1217.07,1210.8 1217.66,1210.8 1218.24,1210.8 1218.83,1210.8 1219.42,1210.8 1220,1210.8 1220.59,1210.8 1221.18,1210.8 1221.76,1210.8 1222.35,1210.8 1222.94,1210.8 1223.52,1210.8 1224.11,1210.8 1224.7,1210.8 1225.28,1210.8 1225.87,1210.8 1226.45,1210.8 1227.04,1210.8 1227.63,1210.8 1228.21,1210.8 1228.8,1210.8 1229.39,1210.8 1229.97,1210.8 1230.56,1210.8 1231.15,1210.8 1231.73,1210.8 1232.32,1210.8 1232.91,1210.8 1233.49,1210.8 1234.08,1210.8 1234.66,1210.8 1235.25,1210.8 1235.84,1210.8 1236.42,1210.8 1237.01,1210.8 1237.6,1210.8 1238.18,1210.8 1238.77,1210.8 1239.36,1210.8 1239.94,1210.8 1240.53,1210.8 1241.11,1210.8 1241.7,1210.8 1242.29,1210.8 1242.87,1210.8 1243.46,1210.8 1244.05,1210.8 1244.63,1210.8 1245.22,1210.8 1245.81,1210.8 1246.39,1210.8 1246.98,1210.8 1247.57,1210.8 1248.15,1210.8 1248.74,1210.8 1249.32,1210.8 1249.91,1210.8 1250.5,1210.8 1251.08,1210.8 1251.67,1210.8 1252.26,1210.8 1252.84,1210.8 1253.43,1210.8 1254.02,1210.8 1254.6,1210.8 1255.19,1210.8 1255.78,1210.8 1256.36,1210.8 1256.95,1210.8 1257.53,1210.8 1258.12,1210.8 1258.71,1210.8 1259.29,1210.8 1259.88,1210.8 1260.47,1210.8 1261.05,1210.8 1261.64,1210.8 1262.23,1210.8 1262.81,1210.8 1263.4,1210.8 1263.98,1210.8 1264.57,1210.8 1265.16,1210.8 1265.74,1210.8 1266.33,1210.8 1266.92,1210.8 1267.5,1210.8 1268.09,1210.8 1268.68,1210.8 1269.26,1210.8 1269.85,1210.8 1270.44,1210.8 1271.02,1210.8 1271.61,1210.8 1272.19,1210.8 1272.78,1210.8 1273.37,1210.8 1273.95,1210.8 1274.54,1210.8 1275.13,1210.8 1275.71,1210.8 1276.3,1210.8 1276.89,1210.8 1277.47,1210.8 1278.06,1210.8 1278.65,1210.8 1279.23,1210.8 1279.82,1210.8 1280.4,1210.8 1280.99,1210.8 1281.58,1210.8 1282.16,1210.8 1282.75,1210.8 1283.34,1210.8 1283.92,1210.8 1284.51,1210.8 1285.1,1210.8 1285.68,1210.8 1286.27,1210.8 1286.86,1210.8 1287.44,1210.8 1288.03,1210.8 1288.61,1210.8 1289.2,1210.8 1289.79,1210.8 1290.37,1210.8 1290.96,1210.8 1291.55,1210.8 1292.13,1210.8 1292.72,1210.8 1293.31,1210.8 1293.89,1210.8 1294.48,1210.8 1295.06,1210.8 1295.65,1210.8 1296.24,1210.8 1296.82,1210.8 1297.41,1210.8 1298,1210.8 1298.58,1210.8 1299.17,1210.8 1299.76,1210.8 1300.34,1210.8 1300.93,1210.8 1301.52,1210.8 1302.1,1210.8 1302.69,1210.8 1303.27,1210.8 1303.86,1210.8 1304.45,1210.8 1305.03,1210.8 1305.62,1210.8 1306.21,1210.8 1306.79,1210.8 1307.38,1210.8 1307.97,1210.8 1308.55,1210.8 1309.14,1210.8 1309.73,1210.8 1310.31,1210.8 1310.9,1210.8 1311.48,1210.8 1312.07,1210.8 1312.66,1210.8 1313.24,1210.8 1313.83,1210.8 1314.42,1210.8 1315,1210.8 1315.59,1210.8 1316.18,1210.8 1316.76,1210.8 1317.35,1210.8 1317.93,1210.8 1318.52,1210.8 1319.11,1210.8 1319.69,1210.8 1320.28,1210.8 1320.87,1210.8 1321.45,1210.8 1322.04,1210.8 1322.63,1210.8 1323.21,1210.8 1323.8,1210.8 1324.39,1210.8 1324.97,1210.8 1325.56,1210.8 1326.14,1210.8 1326.73,1210.8 1327.32,1210.8 1327.9,1210.8 1328.49,1210.8 1329.08,1210.8 1329.66,1210.8 1330.25,1210.8 1330.84,1210.8 1331.42,1210.8 1332.01,1210.8 1332.6,1210.8 1333.18,1210.8 1333.77,1210.8 1334.35,1210.8 1334.94,1210.8 1335.53,1210.8 1336.11,1210.8 1336.7,1210.8 1337.29,1210.8 1337.87,1210.8 1338.46,1210.8 1339.05,1210.8 1339.63,1210.8 1340.22,1210.8 1340.8,1210.8 1341.39,1210.8 1341.98,1210.8 1342.56,1210.8 1343.15,1210.8 1343.74,1210.8 1344.32,1210.8 1344.91,1210.8 1345.5,1210.8 1346.08,1210.8 1346.67,1210.8 1347.26,1210.8 1347.84,1210.8 1348.43,1210.8 1349.01,1210.8 1349.6,1210.8 1350.19,1210.8 1350.77,1210.8 1351.36,1210.8 1351.95,1210.8 1352.53,1210.8 1353.12,1210.8 1353.71,1210.8 1354.29,1210.8 1354.88,1210.8 1355.47,1210.8 1356.05,1210.8 1356.64,1210.8 1357.22,1210.8 1357.81,1210.8 1358.4,1210.8 1358.98,1210.8 1359.57,1210.8 1360.16,1210.8 1360.74,1210.8 1361.33,1210.8 1361.92,1210.8 1362.5,1210.8 1363.09,1210.8 1363.68,1210.8 1364.26,1210.8 1364.85,1210.8 1365.43,1210.8 1366.02,1210.8 1366.61,1210.8 1367.19,1210.8 1367.78,1210.8 1368.37,1210.8 1368.95,1210.8 1369.54,1210.8 1370.13,1210.8 1370.71,1210.8 1371.3,1210.8 1371.88,1210.8 1372.47,1210.8 1373.06,1210.8 1373.64,1210.8 1374.23,1210.8 1374.82,1210.8 1375.4,1210.8 1375.99,1210.8 1376.58,1210.8 1377.16,1210.8 1377.75,1210.8 1378.34,1210.8 1378.92,1210.8 1379.51,1210.8 1380.09,1210.8 1380.68,1210.8 1381.27,1210.8 1381.85,1210.8 1382.44,1210.8 1383.03,1210.8 1383.61,1210.8 1384.2,1210.8 1384.79,1210.8 1385.37,1210.8 1385.96,1210.8 1386.55,1210.8 1387.13,1210.8 1387.72,1210.8 1388.3,1210.8 1388.89,1210.8 1389.48,1210.8 1390.06,1210.8 1390.65,1210.8 1391.24,1210.8 1391.82,1210.8 1392.41,1210.8 1393,1210.8 1393.58,1210.8 1394.17,1210.8 1394.75,1210.8 1395.34,1210.8 1395.93,1210.8 1396.51,1210.8 1397.1,1210.8 1397.69,1210.8 1398.27,1210.8 1398.86,1210.8 1399.45,1210.8 1400.03,1210.8 1400.62,1210.8 1401.21,1210.8 1401.79,1210.8 1402.38,1210.8 1402.96,1210.8 1403.55,1210.8 1404.14,1210.8 1404.72,1210.8 1405.31,1210.8 1405.9,1210.8 1406.48,1210.8 1407.07,1210.8 1407.66,1210.8 1408.24,1210.8 1408.83,1210.8 1409.42,1210.8 1410,1210.8 1410.59,1210.8 1411.17,1210.8 1411.76,1210.8 1412.35,1210.8 1412.93,1210.8 1413.52,1210.8 1414.11,1210.8 1414.69,1210.8 1415.28,1210.8 1415.87,1210.8 1416.45,1210.8 1417.04,1210.8 1417.63,1210.8 1418.21,1210.8 1418.8,1210.8 1419.38,1210.8 1419.97,1210.8 1420.56,1210.8 1421.14,1210.8 1421.73,1210.8 1422.32,1210.8 1422.9,1210.8 1423.49,1210.8 1424.08,1210.8 1424.66,1210.8 1425.25,1210.8 1425.83,1210.8 1426.42,1210.8 1427.01,1210.8 1427.59,1210.8 1428.18,1210.8 1428.77,1210.8 1429.35,1210.8 1429.94,1210.8 1430.53,1210.8 1431.11,1210.8 1431.7,1210.8 1432.29,1210.8 1432.87,1210.8 1433.46,1210.8 1434.04,1210.8 1434.63,1210.8 1435.22,1210.8 1435.8,1210.8 1436.39,1210.8 1436.98,1210.8 1437.56,1210.8 1438.15,1210.8 1438.74,1210.8 1439.32,1210.8 1439.91,1210.8 1440.5,1210.8 1441.08,1210.8 1441.67,1210.8 1442.25,1210.8 1442.84,1210.8 1443.43,1210.8 1444.01,1210.8 1444.6,1210.8 1445.19,1210.8 1445.77,1210.8 1446.36,1210.8 1446.95,1210.8 1447.53,1210.8 1448.12,1210.8 1448.7,1210.8 1449.29,1210.8 1449.88,1210.8 1450.46,1210.8 1451.05,1210.8 1451.64,1210.8 1452.22,1210.8 1452.81,1210.8 1453.4,1210.8 1453.98,1210.8 1454.57,1210.8 1455.16,1210.8 1455.74,1210.8 1456.33,1210.8 1456.91,1210.8 1457.5,1210.8 1458.09,1210.8 1458.67,1210.8 1459.26,1210.8 1459.85,1210.8 1460.43,1210.8 1461.02,1210.8 1461.61,1210.8 1462.19,1210.8 1462.78,1210.8 1463.37,1210.8 1463.95,1210.8 1464.54,1210.8 1465.12,1210.8 1465.71,1210.8 1466.3,1210.8 1466.88,1210.8 1467.47,1210.8 1468.06,1210.8 1468.64,1210.8 1469.23,1210.8 1469.82,1210.8 1470.4,1210.8 1470.99,1210.8 1471.57,1210.8 1472.16,1210.8 1472.75,1210.8 1473.33,1210.8 1473.92,1210.8 1474.51,1210.8 1475.09,1210.8 1475.68,1210.8 1476.27,1210.8 1476.85,1210.8 1477.44,1210.8 1478.03,1210.8 1478.61,1210.8 1479.2,1210.8 1479.78,1210.8 1480.37,1210.8 1480.96,1210.8 1481.54,1210.8 1482.13,1210.8 1482.72,1210.8 1483.3,1210.8 1483.89,1210.8 1484.48,1210.8 1485.06,1210.8 1485.65,1210.8 1486.24,1210.8 1486.82,1210.8 1487.41,1210.8 1487.99,1210.8 1488.58,1210.8 1489.17,1210.8 1489.75,1210.8 1490.34,1210.8 1490.93,1210.8 1491.51,1210.8 1492.1,1210.8 1492.69,1210.8 1493.27,1210.8 1493.86,1210.8 1494.45,1210.8 1495.03,1210.8 1495.62,1210.8 1496.2,1210.8 1496.79,1210.8 1497.38,1210.8 1497.96,1210.8 1498.55,1210.8 1499.14,1210.8 1499.72,1210.8 1500.31,1210.8 1500.9,1210.8 1501.48,1210.8 1502.07,1210.8 1502.65,1210.8 1503.24,1210.8 1503.83,1210.8 1504.41,1210.8 1505,1210.8 1505.59,1210.8 1506.17,1210.8 1506.76,1210.8 1507.35,1210.8 1507.93,1210.8 1508.52,1210.8 1509.11,1210.8 1509.69,1210.8 1510.28,1210.8 1510.86,1210.8 1511.45,1210.8 1512.04,1210.8 1512.62,1210.8 1513.21,1210.8 1513.8,1210.8 1514.38,1210.8 1514.97,1210.8 1515.56,1210.8 1516.14,1210.8 1516.73,1210.8 1517.32,1210.8 1517.9,1210.8 1518.49,1210.8 1519.07,1210.8 1519.66,1210.8 1520.25,1210.8 1520.83,1210.8 1521.42,1210.8 1522.01,1210.8 1522.59,1210.8 1523.18,1210.8 1523.77,1210.8 1524.35,1210.8 1524.94,1210.8 1525.52,1210.8 1526.11,1210.8 1526.7,1210.8 1527.28,1210.8 1527.87,1210.8 1528.46,1210.8 1529.04,1210.8 1529.63,1210.8 1530.22,1210.8 1530.8,1210.8 1531.39,1210.8 1531.98,1210.8 1532.56,1210.8 1533.15,1210.8 1533.73,1210.8 1534.32,1210.8 1534.91,1210.8 1535.49,1210.8 1536.08,1210.8 1536.67,1210.8 1537.25,1210.8 1537.84,1210.8 1538.43,1210.8 1539.01,1210.8 1539.6,1210.8 1540.19,1210.8 1540.77,1210.8 1541.36,1210.8 1541.94,1210.8 1542.53,1210.8 1543.12,1210.8 1543.7,1210.8 1544.29,1210.8 1544.88,1210.8 1545.46,1210.8 1546.05,1210.8 1546.64,1210.8 1547.22,1210.8 1547.81,1210.8 1548.4,1210.8 1548.98,1210.8 1549.57,1210.8 1550.15,1210.8 1550.74,1210.8 1551.33,1210.8 1551.91,1210.8 1552.5,1210.8 1553.09,1210.8 1553.67,1210.8 1554.26,1210.8 1554.85,1210.8 1555.43,1210.8 1556.02,1210.8 1556.6,1210.8 1557.19,1210.8 1557.78,1210.8 1558.36,1210.8 1558.95,1210.8 1559.54,1210.8 1560.12,1210.8 1560.71,1210.8 1561.3,1210.8 1561.88,1210.8 1562.47,1210.8 1563.06,1210.8 1563.64,1210.8 1564.23,1210.8 1564.81,1210.8 1565.4,1210.8 1565.99,1210.8 1566.57,1210.8 1567.16,1210.8 1567.75,1210.8 1568.33,1210.8 1568.92,1210.8 1569.51,1210.8 1570.09,1210.8 1570.68,1210.8 1571.27,1210.8 1571.85,1210.8 1572.44,1210.8 1573.02,1210.8 1573.61,1210.8 1574.2,1210.8 1574.78,1210.8 1575.37,1210.8 1575.96,1210.8 1576.54,1210.8 1577.13,1210.8 1577.72,1210.8 1578.3,1210.8 1578.89,1210.8 1579.47,1210.8 1580.06,1210.8 1580.65,1210.8 1581.23,1210.8 1581.82,1210.8 1582.41,1210.8 1582.99,1210.8 1583.58,1210.8 1584.17,1210.8 1584.75,1210.8 1585.34,1210.8 1585.93,1210.8 1586.51,1210.8 1587.1,1210.8 1587.68,1210.8 1588.27,1210.8 1588.86,1210.8 1589.44,1210.8 1590.03,1210.8 1590.62,1210.8 1591.2,1210.8 1591.79,1210.8 1592.38,1210.8 1592.96,1210.8 1593.55,1210.8 1594.14,1210.8 1594.72,1210.8 1595.31,1210.8 1595.89,1210.8 1596.48,1210.8 1597.07,1210.8 1597.65,1210.8 1598.24,1210.8 1598.83,1210.8 1599.41,1210.8 1600,1210.8 1600.59,1210.8 1601.17,1210.8 1601.76,1210.8 1602.34,1210.8 1602.93,1210.8 1603.52,1210.8 1604.1,1210.8 1604.69,1210.8 1605.28,1210.8 1605.86,1210.8 1606.45,1210.8 1607.04,1210.8 1607.62,1210.8 1608.21,1210.8 1608.8,1210.8 1609.38,1210.8 1609.97,1210.8 1610.55,1210.8 1611.14,1210.8 1611.73,1210.8 1612.31,1210.8 1612.9,1210.8 1613.49,1210.8 1614.07,1210.8 1614.66,1210.8 1615.25,1210.8 1615.83,1210.8 1616.42,1210.8 1617.01,1210.8 1617.59,1210.8 1618.18,1210.8 1618.76,1210.8 1619.35,1210.8 1619.94,1210.8 1620.52,1210.8 1621.11,1210.8 1621.7,1210.8 1622.28,1210.8 1622.87,1210.8 1623.46,1210.8 1624.04,1210.8 1624.63,1210.8 1625.22,1210.8 1625.8,1210.8 1626.39,1210.8 1626.97,1210.8 1627.56,1210.8 1628.15,1210.8 1628.73,1210.8 1629.32,1210.8 1629.91,1210.8 1630.49,1210.8 1631.08,1210.8 1631.67,1210.8 1632.25,1210.8 1632.84,1210.8 1633.42,1210.8 1634.01,1210.8 1634.6,1210.8 1635.18,1210.8 1635.77,1210.8 1636.36,1210.8 1636.94,1210.8 1637.53,1210.8 1638.12,1210.8 1638.7,1210.8 1639.29,1210.8 1639.88,1210.8 1640.46,1210.8 1641.05,1210.8 1641.63,1210.8 1642.22,1210.8 1642.81,1210.8 1643.39,1210.8 1643.98,1210.8 1644.57,1210.8 1645.15,1210.8 1645.74,1210.8 1646.33,1210.8 1646.91,1210.8 1647.5,1210.8 1648.09,1210.8 1648.67,1210.8 1649.26,1210.8 1649.84,1210.8 1650.43,1210.8 1651.02,1210.8 1651.6,1210.8 1652.19,1210.8 1652.78,1210.8 1653.36,1210.8 1653.95,1210.8 1654.54,1210.8 1655.12,1210.8 1655.71,1210.8 1656.29,1210.8 1656.88,1210.8 1657.47,1210.8 1658.05,1210.8 1658.64,1210.8 1659.23,1210.8 1659.81,1210.8 1660.4,1210.8 1660.99,1210.8 1661.57,1210.8 1662.16,1210.8 1662.75,1210.8 1663.33,1210.8 1663.92,1210.8 1664.5,1210.8 1665.09,1210.8 1665.68,1210.8 1666.26,1210.8 1666.85,1210.8 1667.44,1210.8 1668.02,1210.8 1668.61,1210.8 1669.2,1210.8 1669.78,1210.8 1670.37,1210.8 1670.96,1210.8 1671.54,1210.8 1672.13,1210.8 1672.71,1210.8 1673.3,1210.8 1673.89,1210.8 1674.47,1210.8 1675.06,1210.8 1675.65,1210.8 1676.23,1210.8 1676.82,1210.8 1677.41,1210.8 1677.99,1210.8 1678.58,1210.8 1679.17,1210.8 1679.75,1210.8 1680.34,1210.8 1680.92,1210.8 1681.51,1210.8 1682.1,1210.8 1682.68,1210.8 1683.27,1210.8 1683.86,1210.8 1684.44,1210.8 1685.03,1210.8 1685.62,1210.8 1686.2,1210.8 1686.79,1210.8 1687.37,1210.8 1687.96,1210.8 1688.55,1210.8 1689.13,1210.8 1689.72,1210.8 1690.31,1210.8 1690.89,1210.8 1691.48,1210.8 1692.07,1210.8 1692.65,1210.8 1693.24,1210.8 1693.83,1210.8 1694.41,1210.8 1695,1210.8 1695.58,1210.8 1696.17,1210.8 1696.76,1210.8 1697.34,1210.8 1697.93,1210.8 1698.52,1210.8 1699.1,1210.8 1699.69,1210.8 1700.28,1210.8 1700.86,1210.8 1701.45,1210.8 1702.04,1210.8 1702.62,1210.8 1703.21,1210.8 1703.79,1210.8 1704.38,1210.8 1704.97,1210.8 1705.55,1210.8 1706.14,1210.8 1706.73,1210.8 1707.31,1210.8 1707.9,1210.8 1708.49,1210.8 1709.07,1210.8 1709.66,1210.8 1710.24,1210.8 1710.83,1210.8 1711.42,1210.8 1712,1210.8 1712.59,1210.8 1713.18,1210.8 1713.76,1210.8 1714.35,1210.8 1714.94,1210.8 1715.52,1210.8 1716.11,1210.8 1716.7,1210.8 1717.28,1210.8 1717.87,1210.8 1718.45,1210.8 1719.04,1210.8 1719.63,1210.8 1720.21,1210.8 1720.8,1210.8 1721.39,1210.8 1721.97,1210.8 1722.56,1210.8 1723.15,1210.8 1723.73,1210.8 1724.32,1210.8 1724.91,1210.8 1725.49,1210.8 1726.08,1210.8 1726.66,1210.8 1727.25,1210.8 1727.84,1210.8 1728.42,1210.8 1729.01,1210.8 1729.6,1210.8 1730.18,1210.8 1730.77,1210.8 1731.36,1210.8 1731.94,1210.8 1732.53,1210.8 1733.11,1210.8 1733.7,1210.8 1734.29,1210.8 1734.87,1210.8 1735.46,1210.8 1736.05,1210.8 1736.63,1210.8 1737.22,1210.8 1737.81,1210.8 1738.39,1210.8 1738.98,1210.8 1739.57,1210.8 1740.15,1210.8 1740.74,1210.8 1741.32,1210.8 1741.91,1210.8 1742.5,1210.8 1743.08,1210.8 1743.67,1210.8 1744.26,1210.8 1744.84,1210.8 1745.43,1210.8 1746.02,1210.8 1746.6,1210.8 1747.19,1210.8 1747.78,1210.8 1748.36,1210.8 1748.95,1210.8 1749.53,1210.8 1750.12,1210.8 1750.71,1210.8 1751.29,1210.8 1751.88,1210.8 1752.47,1210.8 1753.05,1210.8 1753.64,1210.8 1754.23,1210.8 1754.81,1210.8 1755.4,1210.8 1755.99,1210.8 1756.57,1210.8 1757.16,1210.8 1757.74,1210.8 1758.33,1210.8 1758.92,1210.8 1759.5,1210.8 1760.09,1210.8 1760.68,1210.8 1761.26,1210.8 1761.85,1210.8 1762.44,1210.8 1763.02,1210.8 1763.61,1210.8 1764.19,1210.8 1764.78,1210.8 1765.37,1210.8 1765.95,1210.8 1766.54,1210.8 1767.13,1210.8 1767.71,1210.8 1768.3,1210.8 1768.89,1210.8 1769.47,1210.8 1770.06,1210.8 1770.65,1210.8 1771.23,1210.8 1771.82,1210.8 1772.4,1210.8 1772.99,1210.8 1773.58,1210.8 1774.16,1210.8 1774.75,1210.8 1775.34,1210.8 1775.92,1210.8 1776.51,1210.8 1777.1,1210.8 1777.68,1210.8 1778.27,1210.8 1778.86,1210.8 1779.44,1210.8 1780.03,1210.8 1780.61,1210.8 1781.2,1210.8 1781.79,1210.8 1782.37,1210.8 1782.96,1210.8 1783.55,1210.8 1784.13,1210.8 1784.72,1210.8 1785.31,1210.8 1785.89,1210.8 1786.48,1210.8 1787.06,1210.8 1787.65,1210.8 1788.24,1210.8 1788.82,1210.8 1789.41,1210.8 1790,1210.8 1790.58,1210.8 1791.17,1210.8 1791.76,1210.8 1792.34,1210.8 1792.93,1210.8 1793.52,1210.8 1794.1,1210.8 1794.69,1210.8 1795.27,1210.8 1795.86,1210.8 1796.45,1210.8 1797.03,1210.8 1797.62,1210.8 1798.21,1210.8 1798.79,1210.8 1799.38,1210.8 1799.97,1210.8 1800.55,1210.8 1801.14,1210.8 1801.73,1210.8 1802.31,1210.8 1802.9,1210.8 1803.48,1210.8 1804.07,1210.8 1804.66,1210.8 1805.24,1210.8 1805.83,1210.8 1806.42,1210.8 1807,1210.8 1807.59,1210.8 1808.18,1210.8 1808.76,1210.8 1809.35,1210.8 1809.94,1210.8 1810.52,1210.8 1811.11,1210.8 1811.69,1210.8 1812.28,1210.8 1812.87,1210.8 1813.45,1210.8 1814.04,1210.8 1814.63,1210.8 1815.21,1210.8 1815.8,1210.8 1816.39,1210.8 1816.97,1210.8 1817.56,1210.8 1818.14,1210.8 1818.73,1210.8 1819.32,1210.8 1819.9,1210.8 1820.49,1210.8 1821.08,1210.8 1821.66,1210.8 1822.25,1210.8 1822.84,1210.8 1823.42,1210.8 1824.01,1210.8 1824.6,1210.8 1825.18,1210.8 1825.77,1210.8 1826.35,1210.8 1826.94,1210.8 1827.53,1210.8 1828.11,1210.8 1828.7,1210.8 1829.29,1210.8 1829.87,1210.8 1830.46,1210.8 1831.05,1210.8 1831.63,1210.8 1832.22,1210.8 1832.81,1210.8 1833.39,1210.8 1833.98,1210.8 1834.56,1210.8 1835.15,1210.8 1835.74,1210.8 1836.32,1210.8 1836.91,1210.8 1837.5,1210.8 1838.08,1210.8 1838.67,1210.8 1839.26,1210.8 1839.84,1210.8 1840.43,1210.8 1841.01,1210.8 1841.6,1210.8 1842.19,1210.8 1842.77,1210.8 1843.36,1210.8 1843.95,1210.8 1844.53,1210.8 1845.12,1210.8 1845.71,1210.8 1846.29,1210.8 1846.88,1210.8 1847.47,1210.8 1848.05,1210.8 1848.64,1210.8 1849.22,1210.8 1849.81,1210.8 1850.4,1210.8 1850.98,1210.8 1851.57,1210.8 1852.16,1210.8 1852.74,1210.8 1853.33,1210.8 1853.92,1210.8 1854.5,1210.8 1855.09,1210.8 1855.68,1210.8 1856.26,1210.8 1856.85,1210.8 1857.43,1210.8 1858.02,1210.8 1858.61,1210.8 1859.19,1210.8 1859.78,1210.8 1860.37,1210.8 1860.95,1210.8 1861.54,1210.8 1862.13,1210.8 1862.71,1210.8 1863.3,1210.8 1863.88,1210.8 1864.47,1210.8 1865.06,1210.8 1865.64,1210.8 1866.23,1210.8 1866.82,1210.8 1867.4,1210.8 1867.99,1210.8 1868.58,1210.8 1869.16,1210.8 1869.75,1210.8 1870.34,1210.8 1870.92,1210.8 1871.51,1210.8 1872.09,1210.8 1872.68,1210.8 1873.27,1210.8 1873.85,1210.8 1874.44,1210.8 1875.03,1210.8 1875.61,1210.8 1876.2,1210.8 1876.79,1210.8 1877.37,1210.8 1877.96,1210.8 1878.55,1210.8 1879.13,1210.8 1879.72,1210.8 1880.3,1210.8 1880.89,1210.8 1881.48,1210.8 1882.06,1210.8 1882.65,1210.8 1883.24,1210.8 1883.82,1210.8 1884.41,1210.8 1885,1210.8 1885.58,1210.8 1886.17,1210.8 1886.76,1210.8 1887.34,1210.8 1887.93,1210.8 1888.51,1210.8 1889.1,1210.8 1889.69,1210.8 1890.27,1210.8 1890.86,1210.8 1891.45,1210.8 1892.03,1210.8 1892.62,1210.8 1893.21,1210.8 1893.79,1210.8 1894.38,1210.8 1894.96,1210.8 1895.55,1210.8 1896.14,1210.8 1896.72,1210.8 1897.31,1210.8 1897.9,1210.8 1898.48,1210.8 1899.07,1210.8 1899.66,1210.8 1900.24,1210.8 1900.83,1210.8 1901.42,1210.8 1902,1210.8 1902.59,1210.8 1903.17,1210.8 1903.76,1210.8 1904.35,1210.8 1904.93,1210.8 1905.52,1210.8 1906.11,1210.8 1906.69,1210.8 1907.28,1210.8 1907.87,1210.8 1908.45,1210.8 1909.04,1210.8 1909.63,1210.8 1910.21,1210.8 1910.8,1210.8 1911.38,1210.8 1911.97,1210.8 1912.56,1210.8 1913.14,1210.8 1913.73,1210.8 1914.32,1210.8 1914.9,1210.8 1915.49,1210.8 1916.08,1210.8 1916.66,1210.8 1917.25,1210.8 1917.83,1210.8 1918.42,1210.8 1919.01,1210.8 1919.59,1210.8 1920.18,1210.8 1920.77,1210.8 1921.35,1210.8 1921.94,1210.8 1922.53,1210.8 1923.11,1210.8 1923.7,1210.8 1924.29,1210.8 1924.87,1210.8 1925.46,1210.8 1926.04,1210.8 1926.63,1210.8 1927.22,1210.8 1927.8,1210.8 1928.39,1210.8 1928.98,1210.8 1929.56,1210.8 1930.15,1210.8 1930.74,1210.8 1931.32,1210.8 1931.91,1210.8 1932.5,1210.8 1933.08,1210.8 1933.67,1210.8 1934.25,1210.8 1934.84,1210.8 1935.43,1210.8 1936.01,1210.8 1936.6,1210.8 1937.19,1210.8 1937.77,1210.8 1938.36,1210.8 1938.95,1210.8 1939.53,1210.8 1940.12,1210.8 1940.71,1210.8 1941.29,1210.8 1941.88,1210.8 1942.46,1210.8 1943.05,1210.8 1943.64,1210.8 1944.22,1210.8 1944.81,1210.8 1945.4,1210.8 1945.98,1210.8 1946.57,1210.8 1947.16,1210.8 1947.74,1210.8 1948.33,1210.8 1948.91,1210.8 1949.5,1210.8 1950.09,1210.8 1950.67,1210.8 1951.26,1210.8 1951.85,1210.8 1952.43,1210.8 1953.02,1210.8 1953.61,1210.8 1954.19,1210.8 1954.78,1210.8 1955.37,1210.8 1955.95,1210.8 1956.54,1210.8 1957.12,1210.8 1957.71,1210.8 1958.3,1210.8 1958.88,1210.8 1959.47,1210.8 1960.06,1210.8 1960.64,1210.8 1961.23,1210.8 1961.82,1210.8 1962.4,1210.8 1962.99,1210.8 1963.58,1210.8 1964.16,1210.8 1964.75,1210.8 1965.33,1210.8 1965.92,1210.8 1966.51,1210.8 1967.09,1210.8 1967.68,1210.8 1968.27,1210.8 1968.85,1210.8 1969.44,1210.8 1970.03,1210.8 1970.61,1210.8 1971.2,1210.8 1971.78,1210.8 1972.37,1210.8 1972.96,1210.8 1973.54,1210.8 1974.13,1210.8 1974.72,1210.8 1975.3,1210.8 1975.89,1210.8 1976.48,1210.8 1977.06,1210.8 1977.65,1210.8 1978.24,1210.8 1978.82,1210.8 1979.41,1210.8 1979.99,1210.8 1980.58,1210.8 1981.17,1210.8 1981.75,1210.8 1982.34,1210.8 1982.93,1210.8 1983.51,1210.8 1984.1,1210.8 1984.69,1210.8 1985.27,1210.8 1985.86,1210.8 1986.45,1210.8 1987.03,1210.8 1987.62,1210.8 1988.2,1210.8 1988.79,1210.8 1989.38,1210.8 1989.96,1210.8 1990.55,1210.8 1991.14,1210.8 1991.72,1210.8 1992.31,1210.8 1992.9,1210.8 1993.48,1210.8 1994.07,1210.8 1994.65,1210.8 1995.24,1210.8 1995.83,1210.8 1996.41,1210.8 1997,1210.8 1997.59,1210.8 1998.17,1210.8 1998.76,1210.8 1999.35,1210.8 1999.93,1210.8 2000.52,1210.8 2001.11,1210.8 2001.69,1210.8 2002.28,1210.8 2002.86,1210.8 2003.45,1210.8 2004.04,1210.8 2004.62,1210.8 2005.21,1210.8 2005.8,1210.8 2006.38,1210.8 2006.97,1210.8 2007.56,1210.8 2008.14,1210.8 2008.73,1210.8 2009.32,1210.8 2009.9,1210.8 2010.49,1210.8 2011.07,1210.8 2011.66,1210.8 2012.25,1210.8 2012.83,1210.8 2013.42,1210.8 2014.01,1210.8 2014.59,1210.8 2015.18,1210.8 2015.77,1210.8 2016.35,1210.8 2016.94,1210.8 2017.53,1210.8 2018.11,1210.8 2018.7,1210.8 2019.28,1210.8 2019.87,1210.8 2020.46,1210.8 2021.04,1210.8 2021.63,1210.8 2022.22,1210.8 2022.8,1210.8 2023.39,1210.8 2023.98,1210.8 2024.56,1210.8 2025.15,1210.8 2025.73,1210.8 2026.32,1210.8 2026.91,1210.8 2027.49,1210.8 2028.08,1210.8 2028.67,1210.8 2029.25,1210.8 2029.84,1210.8 2030.43,1210.8 2031.01,1210.8 2031.6,1210.8 2032.19,1210.8 2032.77,1210.8 2033.36,1210.8 2033.94,1210.8 2034.53,1210.8 2035.12,1210.8 2035.7,1210.8 2036.29,1210.8 2036.88,1210.8 2037.46,1210.8 2038.05,1210.8 2038.64,1210.8 2039.22,1210.8 2039.81,1210.8 2040.4,1210.8 2040.98,1210.8 2041.57,1210.8 2042.15,1210.8 2042.74,1210.8 2043.33,1210.8 2043.91,1210.8 2044.5,1210.8 2045.09,1210.8 2045.67,1210.8 2046.26,1210.8 2046.85,1210.8 2047.43,1210.8 2048.02,1210.8 2048.6,1210.8 2049.19,1210.8 2049.78,1210.8 2050.36,1210.8 2050.95,1210.8 2051.54,1210.8 2052.12,1210.8 2052.71,1210.8 2053.3,1210.8 2053.88,1210.8 2054.47,1210.8 2055.06,1210.8 2055.64,1210.8 2056.23,1210.8 2056.81,1210.8 2057.4,1210.8 2057.99,1210.8 2058.57,1210.8 2059.16,1210.8 2059.75,1210.8 2060.33,1210.8 2060.92,1210.8 2061.51,1210.8 2062.09,1210.8 2062.68,1210.8 2063.27,1210.8 2063.85,1210.8 2064.44,1210.8 2065.02,1210.8 2065.61,1210.8 2066.2,1210.8 2066.78,1210.8 2067.37,1210.8 2067.96,1210.8 2068.54,1210.8 2069.13,1210.8 2069.72,1210.8 2070.3,1210.8 2070.89,1210.8 2071.48,1210.8 2072.06,1210.8 2072.65,1210.8 2073.23,1210.8 2073.82,1210.8 2074.41,1210.8 2074.99,1210.8 2075.58,1210.8 2076.17,1210.8 2076.75,1210.8 2077.34,1210.8 2077.93,1210.8 2078.51,1210.8 2079.1,1210.8 2079.68,1210.8 2080.27,1210.8 2080.86,1210.8 2081.44,1210.8 2082.03,1210.8 2082.62,1210.8 2083.2,1210.8 2083.79,1210.8 2084.38,1210.8 2084.96,1210.8 2085.55,1210.8 2086.14,1210.8 2086.72,1210.8 2087.31,1210.8 2087.89,1210.8 2088.48,1210.8 2089.07,1210.8 2089.65,1210.8 2090.24,1210.8 2090.83,1210.8 2091.41,1210.8 2092,1210.8 2092.59,1210.8 2093.17,1210.8 2093.76,1210.8 2094.35,1210.8 2094.93,1210.8 2095.52,1210.8 2096.1,1210.8 2096.69,1210.8 2097.28,1210.8 2097.86,1210.8 2098.45,1210.8 2099.04,1210.8 2099.62,1210.8 2100.21,1210.8 2100.8,1210.8 2101.38,1210.8 2101.97,1210.8 2102.55,1210.8 2103.14,1210.8 2103.73,1210.8 2104.31,1210.8 2104.9,1210.8 2105.49,1210.8 2106.07,1210.8 2106.66,1210.8 2107.25,1210.8 2107.83,1210.8 2108.42,1210.8 2109.01,1210.8 2109.59,1210.8 2110.18,1210.8 2110.76,1210.8 2111.35,1210.8 2111.94,1210.8 2112.52,1210.8 2113.11,1210.8 2113.7,1210.8 2114.28,1210.8 2114.87,1210.8 2115.46,1210.8 2116.04,1210.8 2116.63,1210.8 2117.22,1210.8 2117.8,1210.8 2118.39,1210.8 2118.97,1210.8 2119.56,1210.8 2120.15,1210.8 2120.73,1210.8 2121.32,1210.8 2121.91,1210.8 2122.49,1210.8 2123.08,1210.8 2123.67,1210.8 2124.25,1210.8 2124.84,1210.8 2125.42,1210.8 2126.01,1210.8 2126.6,1210.8 2127.18,1210.8 2127.77,1210.8 2128.36,1210.8 2128.94,1210.8 2129.53,1210.8 2130.12,1210.8 2130.7,1210.8 2131.29,1210.8 2131.88,1210.8 2132.46,1210.8 2133.05,1210.8 2133.63,1210.8 2134.22,1210.8 2134.81,1210.8 2135.39,1210.8 2135.98,1210.8 2136.57,1210.8 2137.15,1210.8 2137.74,1210.8 2138.33,1210.8 2138.91,1210.8 2139.5,1210.8 2140.09,1210.8 2140.67,1210.8 2141.26,1210.8 2141.84,1210.8 2142.43,1210.8 2143.02,1210.8 2143.6,1210.8 2144.19,1210.8 2144.78,1210.8 2145.36,1210.8 2145.95,1210.8 2146.54,1210.8 2147.12,1210.8 2147.71,1210.8 2148.3,1210.8 2148.88,1210.8 2149.47,1210.8 2150.05,1210.8 2150.64,1210.8 2151.23,1210.8 2151.81,1210.8 2152.4,1210.8 2152.99,1210.8 2153.57,1210.8 2154.16,1210.8 2154.75,1210.8 2155.33,1210.8 2155.92,1210.8 2156.5,1210.8 2157.09,1210.8 2157.68,1210.8 2158.26,1210.8 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.08,1189.2 1399.71,899.083 \"/>\n<polyline clip-path=\"url(#clip092)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1231.8 985.439,1189.2 2158.26,1189.2 2158.26,1231.8 985.439,1231.8 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip090)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip093\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip090)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip090)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip090)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip093)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1431.46 162.114,-1341.37 162.673,-1359.87 163.232,-369.857 163.792,-1673.18 164.351,-1870.67 164.91,-2973.5 165.469,-3976.33 166.029,-4906.28 166.588,-5750.21 167.147,-6573.33 167.706,-7313.42 168.266,-7993.45 168.825,-8584.95 169.384,-9117.42 169.943,-8189.58 170.503,-8037.42 171.062,-8524.58 171.621,-8381.87 172.18,-8799.96 172.74,-8218.78 173.299,-8606.15 173.858,-8927.86 174.417,-9229.93 174.977,-9103.11 175.536,-8993.54 176.095,-9226.7 176.655,-9416.53 177.214,-8973.77 177.773,-9164.39 178.332,-9308.33 178.892,-9427.26 179.451,-9269.22 180.01,-9343.48 180.569,-9409.48 181.129,-9452.31 181.688,-9481.59 182.247,-8918.82 182.806,-8763.53 183.366,-8612.82 183.925,-8480.22 184.484,-8322.55 185.043,-8321.37 185.603,-8169.05 186.162,-8007.25 186.721,-7867.88 187.28,-7721.69 187.84,-7584.26 188.399,-7549.47 188.958,-7505.36 189.517,-7259.78 190.077,-6757.79 190.636,-6557.79 191.195,-6426.71 191.754,-6368.63 192.314,-6236.29 192.873,-6101.59 193.432,-5897.44 193.991,-5768.89 194.551,-5499.8 195.11,-5189.61 195.669,-5132.7 196.228,-5076.96 196.788,-4900.7 197.347,-4839.17 197.906,-4567.41 198.465,-4464.85 199.025,-4353.19 199.584,-4244.65 200.143,-4001.7 200.702,-3905.9 201.262,-3815.26 201.821,-3681.09 202.38,-3546.44 202.939,-3383.48 203.499,-3298.51 204.058,-3210.9 204.617,-3166.85 205.176,-3076.54 205.736,-3024.96 206.295,-2936.42 206.854,-2846.76 207.413,-2756.39 207.973,-2599.62 208.532,-2453.42 209.091,-2338.69 209.65,-2231.55 210.21,-2182.31 210.769,-2103.7 211.328,-1996.9 211.887,-1864.57 212.447,-1819.9 213.006,-1775.54 213.565,-1677.13 214.124,-1579.51 214.684,-1546.38 215.243,-1505.39 215.802,-1412.34 216.361,-1344.04 216.921,-1305.09 217.48,-1193.24 218.039,-1059.37 218.598,-1006.87 219.158,-953.382 219.717,-920.577 220.276,-865.429 220.835,-787.376 221.395,-690.891 221.954,-642.832 222.513,-665.267 223.072,-591.062 223.632,-544.45 224.191,-495.203 224.75,-449.482 225.309,-426.914 225.869,-400.556 226.428,-377.642 226.987,-373.981 227.546,-287.672 228.106,-242.693 228.665,-183.762 229.224,-167.825 229.783,-151.218 230.343,-106.487 230.902,-70.3212 231.461,-51.1803 232.02,27.1942 232.58,86.5567 233.139,98.7444 233.698,135.75 234.257,208.105 234.817,297.778 235.376,325.53 235.935,351.998 236.494,377.665 237.054,380.697 237.613,383.689 238.172,340.169 238.731,330.124 239.291,381.237 239.85,407.987 240.409,452.295 240.968,461.174 241.528,489.356 242.087,474.803 242.646,516.977 243.205,508.997 243.765,520.801 244.324,550.472 244.883,591.299 245.442,595.717 246.002,622.045 246.561,649.636 247.12,671.024 247.679,695.546 248.239,719.905 248.798,754.512 249.357,790.19 249.916,805.377 250.476,798.8 251.035,799.922 251.594,819.286 252.153,840.428 252.713,873.233 253.272,872.686 253.831,868.606 254.39,862.664 254.95,893.54 255.509,887.613 256.068,901.309 256.627,880.916 257.187,877.364 257.746,887.994 258.305,879.952 258.864,860.199 259.424,841.405 259.983,842.79 260.542,873.102 261.101,904.106 261.661,918.761 262.22,930.201 262.779,925.287 263.338,934.661 263.898,975.805 264.457,954.108 265.016,932.819 265.575,961.894 266.135,935.003 266.694,928.787 267.253,962.158 267.812,957.398 268.372,952.62 268.931,961.79 269.49,939.562 270.049,949.067 270.609,924.683 271.168,903.99 271.727,900.691 272.286,899.509 272.846,883.671 273.405,884.153 273.964,882.095 274.523,933.255 275.083,930.301 275.642,980.86 276.201,959.536 276.76,939.279 277.32,921.93 277.879,951.566 278.438,983.291 278.997,977.342 279.557,974.524 280.116,950.885 280.675,984.55 281.234,996.36 281.794,1042.35 282.353,1031.35 282.912,1006.94 283.471,969.31 284.031,966.3 284.59,962.685 285.149,976.106 285.708,1006.18 286.268,998.623 286.827,974.556 287.386,953.672 287.945,966.519 288.505,997.869 289.064,989.4 289.623,982.914 290.182,1009.25 290.742,1002.8 291.301,1015.07 291.86,1025.74 292.419,1018.75 292.979,1010.87 293.538,1085.95 294.097,1075.1 294.656,1082.08 295.216,1053.55 295.775,1012.15 296.334,1022.68 296.893,1014.9 297.453,1010.83 298.012,989.185 298.571,1000.31 299.13,993.732 299.69,989.54 300.249,1029.6 300.808,1040 301.368,1065.28 301.927,1091.18 302.486,1063 303.045,1040.31 303.605,1078.24 304.164,1065.32 304.723,1037.12 305.282,1044.49 305.842,1004.51 306.401,1030.24 306.96,1053.79 307.519,1042.02 308.079,1047.68 308.638,1020.78 309.197,1008.71 309.756,1003.64 310.316,994.236 310.875,987.146 311.434,1010.28 311.993,1033.31 312.553,1020.59 313.112,1026.77 313.671,1028.65 314.23,1035.9 314.79,1025.87 315.349,995.695 315.908,1001.71 316.467,1008.98 317.027,1001.13 317.586,1009.87 318.145,1080.45 318.704,1082.91 319.264,1054.67 319.823,1041.37 320.382,1013.81 320.941,1035.04 321.501,1042.37 322.06,1010.61 322.619,999.899 323.178,1008.53 323.738,982.247 324.297,959.737 324.856,969.93 325.415,973.879 325.975,934.619 326.534,913.42 327.093,907.13 327.652,921.31 328.212,968.341 328.771,947.705 329.33,958.812 329.889,953.619 330.449,928.369 331.008,956.724 331.567,966.983 332.126,955.56 332.686,951.517 333.245,946.283 333.804,925.477 334.363,887.573 334.923,881.906 335.482,881.542 336.041,876.694 336.6,871.78 337.16,853.684 337.719,848.664 338.278,862.835 338.837,877.705 339.397,857.346 339.956,868.619 340.515,832.919 341.074,846.897 341.634,797.098 342.193,779.919 342.752,815.938 343.311,769.247 343.871,789.873 344.43,788.971 344.989,775.969 345.548,795.077 346.108,781.235 346.667,784.924 347.226,786.919 347.785,758.394 348.345,747.103 348.904,747.297 349.463,752.535 350.022,736.321 350.582,760.854 351.141,797.533 351.7,763.522 352.259,766.99 352.819,758.031 353.378,823.999 353.937,854.763 354.496,865.442 355.056,861.421 355.615,871.643 356.174,836.441 356.733,835.294 357.293,849.869 357.852,864.281 358.411,891.13 358.97,902.659 359.53,878.771 360.089,875.432 360.648,855.506 361.207,851.376 361.767,848.407 362.326,849.651 362.885,829.093 363.444,829.768 364.004,858.965 364.563,855.216 365.122,864.303 365.681,844.044 366.241,843.337 366.8,859.317 367.359,886.578 367.918,882.173 368.478,878.107 369.037,874.677 369.596,906.918 370.155,884.159 370.715,866.06 371.274,814.025 371.833,813.602 372.392,809.809 372.952,827.595 373.511,848.808 374.07,830.742 374.629,795.944 375.189,796.124 375.748,828.537 376.307,856.014 376.866,866.657 377.426,863.043 377.985,813.086 378.544,829.397 379.103,813.626 379.663,797.558 380.222,798.08 380.781,814.211 381.34,811.754 381.9,763.147 382.459,782.88 383.018,796.276 383.577,817.198 384.137,847.479 384.696,858.136 385.255,852.288 385.814,845.85 386.374,861.477 386.933,846.506 387.492,813.696 388.051,781.073 388.611,780.356 389.17,814.433 389.729,829.287 390.288,840.449 390.848,835.712 391.407,830.678 391.966,797.359 392.525,798.706 393.085,812.988 393.644,860.763 394.203,868.432 394.762,826.177 395.322,841.472 395.881,836.632 396.44,834.845 396.999,815.538 397.559,729.381 398.118,748.97 398.677,763.094 399.236,780.869 399.796,762.57 400.355,763.545 400.914,798.395 401.473,797.229 402.033,791.409 402.592,822.311 403.151,835.868 403.71,816.826 404.27,814.3 404.829,846.194 405.388,869.752 405.947,878.618 406.507,873.22 407.066,834.269 407.625,846.408 408.184,795.504 408.744,765.487 409.303,783.585 409.862,782.828 410.421,765.255 410.981,749.59 411.54,763.744 412.099,764.637 412.658,763.729 413.218,731.379 413.777,716.661 414.336,737.299 414.895,737.921 415.455,725.979 416.014,714.934 416.573,732.721 417.132,770.077 417.692,787.551 418.251,770.597 418.81,784.855 419.369,784.416 419.929,785.883 420.488,785.702 421.047,768.894 421.606,772.247 422.166,788.292 422.725,773.001 423.284,757.505 423.843,772.486 424.403,772.628 424.962,769.352 425.521,786.818 426.08,767.153 426.64,767.114 427.199,733.465 427.758,732.898 428.318,704.546 428.877,725.852 429.436,726.907 429.995,728.357 430.555,716.008 431.114,733.566 431.673,735.161 432.232,733.914 432.792,716.743 433.351,717.558 433.91,719.932 434.469,705.955 435.029,675.811 435.588,664.193 436.147,670.73 436.706,662.483 437.266,685.121 437.825,686.588 438.384,689.56 438.943,690.557 439.503,694.656 440.062,701.685 440.621,703.605 441.18,739.477 441.74,772.465 442.299,754.682 442.858,802.54 443.417,801.12 443.977,815.51 444.536,827.182 445.095,856.568 445.654,846.009 446.214,841.615 446.773,836.509 447.332,814.907 447.891,798.774 448.451,797.435 449.01,793.448 449.569,787.549 450.128,798.728 450.688,812.168 451.247,838.89 451.806,834.669 452.365,832.226 452.925,809.359 453.484,803.35 454.043,831.786 454.602,823.45 455.162,788.767 455.721,785.646 456.28,783.045 456.839,815.076 457.399,858.268 457.958,898.891 458.517,873.887 459.076,836.678 459.636,869.134 460.195,862.317 460.754,841.853 461.313,838.723 461.873,819.221 462.432,836.876 462.991,830.997 463.55,823.933 464.11,799.53 464.669,796.49 465.228,807.516 465.787,805.896 466.347,802.613 466.906,797.809 467.465,829.44 468.024,811.439 468.584,795.996 469.143,775.997 469.702,756.838 470.261,739.175 470.821,756.841 471.38,754.558 471.939,752.023 472.498,750.141 473.058,748.615 473.617,746.97 474.176,761.319 474.735,739.403 475.295,749.33 475.854,779.054 476.413,806.929 476.972,751.141 477.532,749.893 478.091,747.984 478.65,764.166 479.209,777.189 479.769,777.443 480.328,756.595 480.887,775.639 481.446,758.503 482.006,769.684 482.565,767.344 483.124,749.344 483.683,747.015 484.243,713.359 484.802,697.46 485.361,679.338 485.92,629.335 486.48,648.794 487.039,636.577 487.598,642.451 488.157,663.981 488.717,667.955 489.276,672.531 489.835,640.821 490.394,630.075 490.954,635.724 491.513,644.284 492.072,682.542 492.631,621.66 493.191,660.586 493.75,628.462 494.309,617.612 494.868,605.446 495.428,625.97 495.987,613.033 496.546,620.872 497.105,630.385 497.665,636.775 498.224,642.245 498.783,662.844 499.342,647.909 499.902,684.549 500.461,637.337 501.02,610.094 501.579,633.9 502.139,652.652 502.698,704.539 503.257,690.238 503.816,673.04 504.376,676.835 504.935,692.994 505.494,709.653 506.053,722.88 506.613,721.553 507.172,691.554 507.731,676.902 508.29,677.958 508.85,718.376 509.409,748.956 509.968,733.512 510.527,735.366 511.087,733.118 511.646,748.451 512.205,749.757 512.764,745.613 513.324,733.065 513.883,751.206 514.442,801.152 515.001,811.324 515.561,806.214 516.12,816.132 516.679,811.191 517.238,840.046 517.798,833.037 518.357,860.619 518.916,852.857 519.475,844.029 520.035,822.291 520.594,815.996 521.153,810.012 521.712,807.789 522.272,789.821 522.831,770.703 523.39,764.53 523.949,778.629 524.509,745.488 525.068,775.06 525.627,756.547 526.186,774.989 526.746,805.158 527.305,816.168 527.864,795.141 528.423,806.164 528.983,770.412 529.542,780.966 530.101,792.76 530.66,803.584 531.22,797.046 531.779,774.093 532.338,751.903 532.897,749.838 533.457,746.98 534.016,763.424 534.575,745.218 535.134,726.834 535.694,724.962 536.253,741.231 536.812,737.951 537.371,722.189 537.931,721.851 538.49,735.874 539.049,703.091 539.608,719.326 540.168,718.935 540.727,718.247 541.286,730.729 541.845,745.579 542.405,775.154 542.964,757.865 543.523,722.044 544.082,688.524 544.642,687.876 545.201,690.112 545.76,720.007 546.319,735.199 546.879,718.708 547.438,717.134 547.997,699.877 548.556,711.434 549.116,741.876 549.675,725.913 550.234,691.747 550.793,676.392 551.353,661.832 551.912,646.532 552.471,649.116 553.031,637.365 553.59,642.016 554.149,627.495 554.708,604.457 555.268,644.592 555.827,650.065 556.386,654.814 556.945,655.894 557.505,660.211 558.064,646.843 558.623,701.614 559.182,701 559.742,749.906 560.301,764.285 560.86,792.746 561.419,774.292 561.979,757.848 562.538,752.149 563.097,762.092 563.656,744.833 564.216,738.907 564.775,737.286 565.334,737.12 565.893,703.38 566.453,719.765 567.012,732.335 567.571,727.446 568.13,743.721 568.69,724.979 569.249,724.921 569.808,706.792 570.367,708.009 570.927,675.832 571.486,678.197 572.045,649.973 572.604,651.43 573.164,683.824 573.723,704.788 574.282,688.074 574.841,719.864 575.401,716.215 575.96,700.233 576.519,716.642 577.078,715.06 577.638,715.637 578.197,698.227 578.756,698.469 579.315,701.699 579.875,716.47 580.434,730.957 580.993,731.754 581.552,746.904 582.112,748.419 582.671,780.42 583.23,791.913 583.789,770.68 584.349,782.931 584.908,814.092 585.467,808.25 586.026,774.246 586.586,739.825 587.145,724.344 587.704,753.953 588.263,757.184 588.823,738.143 589.382,738.044 589.941,716.852 590.5,751.314 591.06,733.155 591.619,715.306 592.178,715.988 592.737,701.132 593.297,717.005 593.856,716.385 594.415,729.928 594.974,732.642 595.534,715.18 596.093,732.77 596.652,729.48 597.211,725.823 597.771,723.939 598.33,691.673 598.889,708.694 599.448,726.741 600.008,742.357 600.567,772.116 601.126,800.838 601.685,827.189 602.245,803.714 602.804,847.542 603.363,823.541 603.922,815.229 604.482,808.741 605.041,785.52 605.6,797.079 606.159,822.746 606.719,845.919 607.278,855.671 607.837,828.607 608.396,841.185 608.956,832.592 609.515,825.492 610.074,817.922 610.633,813.439 611.193,790.645 611.752,737.636 612.311,753.263 612.87,766.337 613.43,743.967 613.989,740.88 614.548,770.733 615.107,748.528 615.667,745.242 616.226,725.917 616.785,722.197 617.344,719.598 617.904,700.852 618.463,681.17 619.022,682.293 619.581,668.019 620.141,668.175 620.7,687.511 621.259,704.182 621.818,669.436 622.378,669.908 622.937,653.534 623.496,689.169 624.055,702.652 624.615,698.27 625.174,714.524 625.733,710.277 626.292,677.022 626.852,680.642 627.411,700.762 627.97,688.848 628.529,670.302 629.089,656.513 629.648,659.329 630.207,675.399 630.766,693.997 631.326,694.281 631.885,693.683 632.444,711.042 633.003,743.587 633.563,741.209 634.122,706.91 634.681,709.389 635.24,739.074 635.8,753.429 636.359,763.853 636.918,778.67 637.477,777.493 638.037,791.243 638.596,804.413 639.155,781.774 639.714,744.893 640.274,747.845 640.833,728.975 641.392,741.572 641.951,740.574 642.511,719.921 643.07,734.865 643.629,736.02 644.188,698.76 644.748,746.529 645.307,762.344 645.866,727.856 646.425,726.068 646.985,774.7 647.544,755.117 648.103,787.445 648.662,830.13 649.222,777.894 649.781,793.105 650.34,771.969 650.899,769.081 651.459,751.164 652.018,778.064 652.577,761.443 653.136,769.542 653.696,751.073 654.255,735.907 654.814,734.919 655.373,762.58 655.933,775.683 656.492,770.559 657.051,752.25 657.61,702.332 658.17,685.203 658.729,684.731 659.288,719.018 659.847,737.734 660.407,771.394 660.966,764.434 661.525,780.842 662.084,787.006 662.644,734.09 663.203,748.377 663.762,714.056 664.321,681.332 664.881,713.865 665.44,727.233 665.999,759.443 666.558,756.05 667.118,799.158 667.677,761.448 668.236,790.505 668.795,769.212 669.355,752.2 669.914,750.274 670.473,714.325 671.032,727.858 671.592,696.416 672.151,694.05 672.71,695.604 673.269,675.67 673.829,659.833 674.388,629.464 674.947,633.403 675.506,653.093 676.066,656.401 676.625,677.037 677.184,657.697 677.743,677.963 678.303,643.12 678.862,632.301 679.421,619.437 679.981,658 680.54,624.852 681.099,623.924 681.658,673.347 682.218,637.606 682.777,642.537 683.336,614.525 683.895,621.926 684.455,626.336 685.014,646.224 685.573,650.121 686.132,633.343 686.692,634.757 687.251,655.441 687.81,640.3 688.369,657.517 688.929,677.112 689.488,709.533 690.047,740.976 690.606,739.784 691.166,735.254 691.725,733.363 692.284,700.506 692.843,682.975 693.403,669.157 693.962,671.11 694.521,640.395 695.08,660.739 695.64,628.878 696.199,619.011 696.758,622.665 697.317,630.486 697.877,618.544 698.436,639.854 698.995,641.572 699.554,679.181 700.114,663.232 700.673,647.493 701.232,683.032 701.791,682.834 702.351,681.854 702.91,653.027 703.469,650.914 704.028,621.863 704.588,655.26 705.147,659.573 705.706,660.795 706.265,691.675 706.825,675.271 707.384,658.719 707.943,660.517 708.502,680.86 709.062,666.559 709.621,687.011 710.18,667.038 710.739,670.297 711.299,671.283 711.858,641.462 712.417,627.425 712.976,633.079 713.536,649.836 714.095,638.066 714.654,590.262 715.213,564.235 715.773,587.056 716.332,594.982 716.891,584.383 717.45,594.073 718.01,569.996 718.569,558.907 719.128,583.751 719.687,573.496 720.247,598.136 720.806,604.559 721.365,625.43 721.924,615.838 722.484,622.896 723.043,659.68 723.602,661.613 724.161,660.962 724.721,663.657 725.28,684.033 725.839,651.797 726.398,636.403 726.958,626.48 727.517,646.514 728.076,649.009 728.635,653.548 729.195,658.965 729.754,659.276 730.313,689.744 730.872,689.455 731.432,657.349 731.991,676.34 732.55,662.582 733.109,663.326 733.669,696.124 734.228,712.276 734.787,729.2 735.346,739.972 735.906,718.286 736.465,714.161 737.024,726.173 737.583,773.574 738.143,755.916 738.702,755.277 739.261,784.442 739.82,797.14 740.38,808.417 740.939,804.465 741.498,783.222 742.057,760.538 742.617,738.819 743.176,734.498 743.735,732.311 744.294,697.901 744.854,698.931 745.413,746.047 745.972,725.005 746.531,740.453 747.091,705.098 747.65,692.326 748.209,660.974 748.768,661.616 749.328,663.61 749.887,633.629 750.446,651.417 751.005,637.643 751.565,658.387 752.124,659.039 752.683,661.113 753.242,680.851 753.802,728.972 754.361,743.413 754.92,725.152 755.479,703.961 756.039,673.262 756.598,675.916 757.157,693.178 757.716,629.331 758.276,630.676 758.835,665.543 759.394,635.77 759.953,650.609 760.513,684.047 761.072,680.995 761.631,682.457 762.19,699.121 762.75,684.806 763.309,700.104 763.868,684.682 764.427,668.057 764.987,686.358 765.546,639.611 766.105,641.757 766.664,627.847 767.224,633.563 767.783,633.18 768.342,650.025 768.901,651.942 769.461,657.314 770.02,659.233 770.579,646.127 771.138,636.689 771.698,639.383 772.257,642.068 772.816,641.38 773.375,629.488 773.935,635.834 774.494,640.857 775.053,673.524 775.612,723.205 776.172,734.176 776.731,753.967 777.29,749.697 777.849,712.15 778.409,676.644 778.968,678.121 779.527,681.091 780.086,649.965 780.646,651.127 781.205,652.27 781.764,670.52 782.323,668.767 782.883,652.611 783.442,668.788 784.001,673.996 784.56,708.114 785.12,707.713 785.679,705.851 786.238,718.918 786.797,714.354 787.357,727.48 787.916,727.419 788.475,743.683 789.034,708.441 789.594,690.495 790.153,674.18 790.712,677.317 791.271,695.214 791.831,707.16 792.39,692.831 792.949,722.787 793.508,712.342 794.068,693.575 794.627,696.893 795.186,698.48 795.745,648.185 796.305,650.815 796.864,670.601 797.423,640.154 797.982,676.188 798.542,710.165 799.101,692.852 799.66,691.391 800.219,723.026 800.779,702.077 801.338,680.702 801.897,663.384 802.456,661.865 803.016,666.476 803.575,655.385 804.134,639.438 804.693,656.548 805.253,626.511 805.812,631.166 806.371,649.377 806.931,636.819 807.49,654.421 808.049,671.964 808.608,691.723 809.168,690.491 809.727,692.097 810.286,710.747 810.845,727.349 811.405,741.053 811.964,721.932 812.523,734.059 813.082,765.952 813.642,779.19 814.201,755.971 814.76,705.33 815.319,704.658 815.879,689.966 816.438,706.251 816.997,688.585 817.556,675.381 818.116,662.126 818.675,647.178 819.234,634.214 819.793,667.801 820.353,668.499 820.912,671.587 821.471,688.157 822.03,659.049 822.59,678.568 823.149,682.807 823.708,669.761 824.267,609.098 824.827,614.322 825.386,620.271 825.945,659.963 826.504,692.321 827.064,739.285 827.623,734.553 828.182,763.796 828.741,806.649 829.301,783.227 829.86,810.773 830.419,820.269 830.978,750.305 831.538,763.779 832.097,772.669 832.656,769.658 833.215,778.975 833.775,741.332 834.334,768.577 834.893,795.729 835.452,788.8 836.012,783.998 836.571,761.429 837.13,791.004 837.689,803.607 838.249,782.464 838.808,777.592 839.367,773.121 839.926,770.841 840.486,746.148 841.045,775.286 841.604,756.335 842.163,769.099 842.723,750.559 843.282,747.924 843.841,760.558 844.4,740.96 844.96,784.821 845.519,795.763 846.078,774.375 846.637,766.489 847.197,728.201 847.756,741.908 848.315,721.459 848.874,704.887 849.434,688.336 849.993,685.012 850.552,667.23 851.111,665.225 851.671,650.217 852.23,653.108 852.789,669.016 853.348,686.202 853.908,671.42 854.467,637.754 855.026,624.633 855.585,661.097 856.145,664.557 856.704,647.662 857.263,668.104 857.822,672.104 858.382,660.255 858.941,675.791 859.5,659.544 860.059,632.069 860.619,633.294 861.178,633.993 861.737,638.353 862.296,639.213 862.856,627.086 863.415,629.056 863.974,618.114 864.533,620.11 865.093,636.412 865.652,654.041 866.211,653.328 866.77,670.836 867.33,621.237 867.889,640.485 868.448,639.261 869.007,606.578 869.567,613.795 870.126,620.911 870.685,625.5 871.244,628.376 871.804,631.401 872.363,602.184 872.922,573.686 873.481,596.703 874.041,599.517 874.6,606.501 875.159,609.212 875.718,597.308 876.278,616.606 876.837,604.505 877.396,596.995 877.955,617.667 878.515,635.545 879.074,622.448 879.633,638.703 880.192,640.392 880.752,606.891 881.311,627.174 881.87,613.146 882.429,585.479 882.989,592.605 883.548,576.468 884.107,568.659 884.666,589.185 885.226,590.734 885.785,596.879 886.344,569.076 886.903,560.452 887.463,563.692 888.022,586.078 888.581,591.355 889.14,628.711 889.7,633.017 890.259,634.115 890.818,620.199 891.377,641.629 891.937,677.028 892.496,659.703 893.055,627.206 893.614,616.051 894.174,610.021 894.733,632.756 895.292,652.902 895.851,655.92 896.411,657.172 896.97,646.434 897.529,647.601 898.088,633.093 898.648,667.292 899.207,684.882 899.766,652.654 900.325,654.555 900.885,672.088 901.444,708.042 902.003,728.62 902.562,709.802 903.122,695.18 903.681,727.344 904.24,741.387 904.799,769.911 905.359,800.188 905.918,811.042 906.477,805.519 907.036,822.779 907.596,816.98 908.155,828.334 908.714,789.767 909.273,797.784 909.833,809.139 910.392,803.655 910.951,783.368 911.51,797.85 912.07,773.646 912.629,787.379 913.188,778.691 913.747,803.181 914.307,829.407 914.866,822.869 915.425,814.419 915.984,808.566 916.544,816.869 917.103,792.724 917.662,770.601 918.221,783.497 918.781,795.68 919.34,774.974 919.899,771.654 920.458,719.292 921.018,763.718 921.577,760.502 922.136,740.158 922.695,753.532 923.255,765.247 923.814,759.583 924.373,770.376 924.932,767.261 925.492,775.98 926.051,771.424 926.61,761.547 927.169,777.452 927.729,786.457 928.288,763.438 928.847,775.492 929.406,737.272 929.966,749.236 930.525,728.207 931.084,707.282 931.644,687.636 932.203,689.616 932.762,686.145 933.321,683.316 933.881,695.916 934.44,725.712 934.999,719.778 935.558,734.41 936.118,748.538 936.677,730.353 937.236,693.35 937.795,690.904 938.355,690.733 938.914,688.931 939.473,707.175 940.032,719.973 940.592,728.974 941.151,724.429 941.71,701.078 942.269,699.301 942.829,714.527 943.388,696.582 943.947,676.265 944.506,708.445 945.066,688.731 945.625,692.303 946.184,690.163 946.743,671.655 947.303,689.429 947.862,703.345 948.421,735.572 948.98,684.824 949.54,717.647 950.099,653.825 950.658,637.707 951.217,673.591 951.777,673.15 952.336,672.338 952.895,675.759 953.454,660.031 954.014,660.65 954.573,678.348 955.132,693.68 955.691,689.962 956.251,705.733 956.81,717.983 957.369,747.076 957.928,761.24 958.488,774.113 959.047,773.299 959.606,757.097 960.165,736.525 960.725,721.963 961.284,704.623 961.843,722.329 962.402,753.691 962.962,769.428 963.521,801.019 964.08,777.075 964.639,756.483 965.199,736.742 965.758,684.17 966.317,681.78 966.876,684.751 967.436,683.809 967.995,695.863 968.554,697.709 969.113,650.05 969.673,650.459 970.232,651.714 970.791,666.365 971.35,650.981 971.91,666.98 972.469,616.536 973.028,620.027 973.587,642.572 974.147,628.633 974.706,632.079 975.265,619.97 975.824,641.643 976.384,629.684 976.943,650.303 977.502,652.459 978.061,656.666 978.621,638.926 979.18,612.665 979.739,637.073 980.298,684.92 980.858,682.781 981.417,666.182 981.976,636.15 982.535,640.106 983.095,661.719 983.654,647.93 984.213,681.499 984.772,664.563 985.332,665.966 985.891,682.101 986.45,700.008 987.009,715.617 987.569,662.29 988.128,649.384 988.687,651.955 989.246,655.987 989.806,659.994 990.365,645.794 990.924,634.063 991.483,622.149 992.043,623.599 992.602,610.622 993.161,630.886 993.72,646.48 994.28,646.811 994.839,645.332 995.398,645.888 995.957,645.133 996.517,646.587 997.076,650.376 997.635,670.299 998.194,640.258 998.754,662.214 999.313,648.218 999.872,633.787 1000.43,651.299 1000.99,636.935 1001.55,654.744 1002.11,626.109 1002.67,599.57 1003.23,589.577 1003.79,582.292 1004.35,557.835 1004.91,563.902 1005.46,572.42 1006.02,592.922 1006.58,613.806 1007.14,634.251 1007.7,654.453 1008.26,655.119 1008.82,658.875 1009.38,675.401 1009.94,676.555 1010.5,628.83 1011.06,632.907 1011.62,699.669 1012.18,697.418 1012.73,711.188 1013.29,708.969 1013.85,708.927 1014.41,676.413 1014.97,695.917 1015.53,698.261 1016.09,710.184 1016.65,708.513 1017.21,704.35 1017.77,718.306 1018.33,713.678 1018.89,730.628 1019.45,697.224 1020.01,700.748 1020.56,698.977 1021.12,679.913 1021.68,667.161 1022.24,681.718 1022.8,693.502 1023.36,695.01 1023.92,679.186 1024.48,681.313 1025.04,678.095 1025.6,729.51 1026.16,725.315 1026.72,724.026 1027.28,720.88 1027.83,753.276 1028.39,750.994 1028.95,732.071 1029.51,730.515 1030.07,714.514 1030.63,713.694 1031.19,727.396 1031.75,746.004 1032.31,742.052 1032.87,736.191 1033.43,731.292 1033.99,748.77 1034.55,778.189 1035.1,757.105 1035.66,769.107 1036.22,765.83 1036.78,728.209 1037.34,773.858 1037.9,750.302 1038.46,730.838 1039.02,745.17 1039.58,755.222 1040.14,747.152 1040.7,723.164 1041.26,735.858 1041.82,701.449 1042.38,663.005 1042.93,631.2 1043.49,568.492 1044.05,572.353 1044.61,578.619 1045.17,585.186 1045.73,558.69 1046.29,547.914 1046.85,522.797 1047.41,533.691 1047.97,558.293 1048.53,583.395 1049.09,588.184 1049.65,558.47 1050.2,580.276 1050.76,583.045 1051.32,591.055 1051.88,593.191 1052.44,600.59 1053,653.729 1053.56,722.679 1054.12,669.706 1054.68,671.682 1055.24,702.224 1055.8,719.411 1056.36,717.955 1056.92,721.348 1057.48,736.121 1058.03,781.657 1058.59,790.127 1059.15,769.518 1059.71,794.487 1060.27,788.799 1060.83,799.446 1061.39,827.305 1061.95,820.186 1062.51,824.604 1063.07,766.673 1063.63,761.717 1064.19,736.038 1064.75,683.498 1065.3,730.556 1065.86,759.198 1066.42,750.681 1066.98,716.133 1067.54,699.588 1068.1,699.157 1068.66,696.199 1069.22,711.586 1069.78,729.267 1070.34,727.084 1070.9,725.674 1071.46,707.646 1072.02,707.742 1072.57,691.679 1073.13,691.508 1073.69,661.416 1074.25,630.704 1074.81,683.993 1075.37,679.081 1075.93,675.818 1076.49,710.316 1077.05,646.689 1077.61,648.998 1078.17,634.979 1078.73,655.455 1079.29,657.165 1079.85,643.769 1080.4,614.291 1080.96,587.38 1081.52,581.139 1082.08,604.479 1082.64,659.985 1083.2,643.857 1083.76,580.995 1084.32,585.005 1084.88,556.778 1085.44,563.377 1086,587.536 1086.56,592.526 1087.12,593.946 1087.67,630.688 1088.23,637.587 1088.79,659.403 1089.35,642.316 1089.91,676.846 1090.47,677.974 1091.03,709.808 1091.59,743.172 1092.15,739.922 1092.71,770.566 1093.27,779.905 1093.83,740.843 1094.39,752.945 1094.94,748.231 1095.5,714.338 1096.06,698.817 1096.62,632.555 1097.18,624.258 1097.74,627.978 1098.3,648.844 1098.86,667.431 1099.42,684.919 1099.98,670.638 1100.54,672.98 1101.1,704.869 1101.66,750.423 1102.22,762.203 1102.77,804.547 1103.33,814.084 1103.89,776.68 1104.45,789.497 1105.01,782.007 1105.57,742.776 1106.13,750.774 1106.69,780.399 1107.25,731.281 1107.81,760.003 1108.37,758.747 1108.93,754.955 1109.49,766.979 1110.04,731.644 1110.6,742.788 1111.16,725.795 1111.72,724.633 1112.28,738.588 1112.84,764.697 1113.4,792.973 1113.96,789.134 1114.52,797.608 1115.08,805.102 1115.64,797.538 1116.2,791.903 1116.76,773.096 1117.31,782.93 1117.87,748.621 1118.43,729.402 1118.99,725.906 1119.55,690.86 1120.11,695.996 1120.67,728.879 1121.23,727.793 1121.79,755.399 1122.35,752.604 1122.91,750.596 1123.47,762.729 1124.03,742.985 1124.59,724.101 1125.14,735.358 1125.7,733.427 1126.26,713.604 1126.82,712.261 1127.38,682.783 1127.94,680.395 1128.5,666.171 1129.06,650.426 1129.62,637.241 1130.18,641.868 1130.74,628.388 1131.3,663.698 1131.86,699.858 1132.41,685.402 1132.97,733.621 1133.53,697.382 1134.09,713.549 1134.65,725.608 1135.21,720.333 1135.77,717.013 1136.33,731.379 1136.89,730.886 1137.45,727.88 1138.01,709.701 1138.57,722.383 1139.13,701.456 1139.68,718.02 1140.24,728.36 1140.8,693.841 1141.36,680.258 1141.92,664.856 1142.48,646.546 1143.04,634.416 1143.6,652.765 1144.16,670.66 1144.72,638.679 1145.28,607.506 1145.84,596.884 1146.4,566.48 1146.96,557.162 1147.51,565.166 1148.07,573.42 1148.63,596.475 1149.19,648.96 1149.75,649.765 1150.31,670.145 1150.87,638.241 1151.43,672.796 1151.99,656.562 1152.55,656.762 1153.11,653.72 1153.67,669.884 1154.23,689.969 1154.78,688.019 1155.34,686.057 1155.9,707.191 1156.46,711.236 1157.02,677.599 1157.58,665.327 1158.14,664.653 1158.7,649.766 1159.26,645.299 1159.82,617.188 1160.38,622.324 1160.94,625.947 1161.5,612.091 1162.05,618.516 1162.61,655.046 1163.17,655.751 1163.73,640.081 1164.29,624.483 1164.85,657.433 1165.41,659.23 1165.97,677.532 1166.53,680.669 1167.09,696.426 1167.65,725.571 1168.21,708.055 1168.77,674.141 1169.33,676.268 1169.88,659.519 1170.44,645.764 1171,612.541 1171.56,619.83 1172.12,574.042 1172.68,578.194 1173.24,599.891 1173.8,573.146 1174.36,565.623 1174.92,573.087 1175.48,595.937 1176.04,617.1 1176.6,638.494 1177.15,640.098 1177.71,646.399 1178.27,648.996 1178.83,634.854 1179.39,651.883 1179.95,649.953 1180.51,651.754 1181.07,639.349 1181.63,653.736 1182.19,654.918 1182.75,628.269 1183.31,630.076 1183.87,632.547 1184.43,619.058 1184.98,605.677 1185.54,626.904 1186.1,632.547 1186.66,636.69 1187.22,642.173 1187.78,661.425 1188.34,662.292 1188.9,633.888 1189.46,634.262 1190.02,621.493 1190.58,628.091 1191.14,631.957 1191.7,619.544 1192.25,589.827 1192.81,612.084 1193.37,616.294 1193.93,588.202 1194.49,592.07 1195.05,581.132 1195.61,573.84 1196.17,598.686 1196.73,620.611 1197.29,641.567 1197.85,642.243 1198.41,690.539 1198.97,688.636 1199.52,671.072 1200.08,688.542 1200.64,692.633 1201.2,676.531 1201.76,709.791 1202.32,726.112 1202.88,691.28 1203.44,708.978 1204,707.262 1204.56,639.044 1205.12,627.226 1205.68,664.982 1206.24,679.409 1206.8,682.505 1207.35,683.593 1207.91,654.031 1208.47,672.088 1209.03,690.435 1209.59,656.488 1210.15,629.146 1210.71,632.497 1211.27,635.913 1211.83,666.548 1212.39,684.414 1212.95,704.57 1213.51,703.046 1214.07,703.424 1214.62,699.358 1215.18,702.004 1215.74,685.805 1216.3,717.776 1216.86,718.458 1217.42,701.348 1217.98,700.68 1218.54,715.986 1219.1,732.605 1219.66,717.09 1220.22,699.849 1220.78,715.321 1221.34,712.275 1221.89,709.898 1222.45,692.765 1223.01,678.816 1223.57,661.676 1224.13,662.773 1224.69,665.752 1225.25,632.597 1225.81,636.173 1226.37,635.504 1226.93,635.009 1227.49,635.579 1228.05,654.986 1228.61,655.464 1229.17,656.651 1229.72,642.694 1230.28,610.887 1230.84,599.5 1231.4,606.376 1231.96,610.041 1232.52,611.479 1233.08,617.465 1233.64,639.477 1234.2,628.011 1234.76,632.525 1235.32,634.208 1235.88,688.33 1236.44,721.392 1236.99,720.588 1237.55,719.364 1238.11,687.561 1238.67,724.238 1239.23,737.471 1239.79,735.571 1240.35,734.093 1240.91,714.241 1241.47,728.516 1242.03,728.021 1242.59,755.23 1243.15,752.707 1243.71,764.127 1244.26,757.84 1244.82,700.262 1245.38,697.285 1245.94,700.468 1246.5,686.814 1247.06,686.217 1247.62,669.755 1248.18,687.663 1248.74,688.007 1249.3,707.579 1249.86,689.818 1250.42,706.808 1250.98,673.882 1251.54,705.833 1252.09,671.255 1252.65,671.276 1253.21,704.512 1253.77,703.295 1254.33,701.922 1254.89,733.266 1255.45,683.116 1256.01,667.413 1256.57,717.567 1257.13,733.301 1257.69,729.976 1258.25,760.306 1258.81,758.282 1259.36,745.243 1259.92,740.369 1260.48,754.69 1261.04,766.094 1261.6,746.398 1262.16,726.342 1262.72,722.43 1263.28,716.447 1263.84,667.403 1264.4,671.197 1264.96,654.001 1265.52,654.54 1266.08,638.39 1266.63,640.782 1267.19,658.069 1267.75,662.581 1268.31,648.501 1268.87,632.937 1269.43,654.774 1269.99,639.419 1270.55,639.996 1271.11,657.665 1271.67,646.48 1272.23,633.013 1272.79,616.977 1273.35,605.713 1273.91,628.016 1274.46,647.374 1275.02,651.345 1275.58,638.078 1276.14,624.256 1276.7,596.727 1277.26,612.275 1277.82,617.645 1278.38,605.397 1278.94,628.73 1279.5,663.395 1280.06,666.017 1280.62,681.548 1281.18,682.923 1281.73,660.942 1282.29,660.975 1282.85,659.487 1283.41,677.603 1283.97,661.337 1284.53,659.542 1285.09,728.36 1285.65,722.942 1286.21,719.814 1286.77,734.461 1287.33,748.435 1287.89,777.223 1288.45,773.801 1289,738.216 1289.56,717.976 1290.12,719.892 1290.68,716.174 1291.24,714.191 1291.8,713.152 1292.36,710.564 1292.92,726.919 1293.48,737.757 1294.04,716.719 1294.6,682.712 1295.16,666.31 1295.72,683.022 1296.28,700.719 1296.83,716.139 1297.39,715.88 1297.95,708.586 1298.51,720.013 1299.07,751.028 1299.63,748.36 1300.19,726.2 1300.75,728.013 1301.31,758.384 1301.87,757.873 1302.43,739.134 1302.99,733.142 1303.55,744.072 1304.1,741.656 1304.66,767.803 1305.22,762.21 1305.78,779.115 1306.34,773.236 1306.9,790.35 1307.46,750.816 1308.02,698.349 1308.58,694.211 1309.14,708.652 1309.7,691.757 1310.26,688.49 1310.82,691.485 1311.38,676.479 1311.93,676.292 1312.49,708.033 1313.05,674.457 1313.61,674.723 1314.17,689.79 1314.73,687.726 1315.29,669.379 1315.85,670.785 1316.41,673.404 1316.97,655.007 1317.53,657.382 1318.09,673.838 1318.65,687.083 1319.2,684.892 1319.76,700.336 1320.32,667.08 1320.88,684.625 1321.44,667.839 1322,699.875 1322.56,698.523 1323.12,716.708 1323.68,715.865 1324.24,745.923 1324.8,774.581 1325.36,771.898 1325.92,778.334 1326.47,789.041 1327.03,768.3 1327.59,762.871 1328.15,773.112 1328.71,798.052 1329.27,775.765 1329.83,755.67 1330.39,750.606 1330.95,716.749 1331.51,694.377 1332.07,725.261 1332.63,723.507 1333.19,688.107 1333.75,670.37 1334.3,685.879 1334.86,649.945 1335.42,650.505 1335.98,636.65 1336.54,669.693 1337.1,667.986 1337.66,653.638 1338.22,651.482 1338.78,653.476 1339.34,672.813 1339.9,674.203 1340.46,661.584 1341.02,662.157 1341.57,666.364 1342.13,680.333 1342.69,681.589 1343.25,685.391 1343.81,639.2 1344.37,611.212 1344.93,598.721 1345.49,598.458 1346.05,621.57 1346.61,611.748 1347.17,629.764 1347.73,636.483 1348.29,640.091 1348.84,673.918 1349.4,675.035 1349.96,675.293 1350.52,659.361 1351.08,678.851 1351.64,614.545 1352.2,599.967 1352.76,587.757 1353.32,641.783 1353.88,628.214 1354.44,633.223 1355,673.077 1355.56,677.387 1356.12,708.691 1356.67,675.681 1357.23,688.743 1357.79,670.236 1358.35,719.764 1358.91,684.708 1359.47,667.332 1360.03,699.645 1360.59,714.137 1361.15,715.178 1361.71,697.472 1362.27,695.107 1362.83,692.595 1363.39,709.485 1363.94,723.96 1364.5,720.677 1365.06,732.686 1365.62,712.636 1366.18,745.354 1366.74,739.697 1367.3,718.14 1367.86,701.076 1368.42,700.553 1368.98,716.116 1369.54,731.72 1370.1,777.501 1370.66,774.736 1371.21,735.22 1371.77,716.76 1372.33,715.032 1372.89,716.548 1373.45,697.86 1374.01,715.687 1374.57,715.721 1375.13,685.002 1375.69,702.544 1376.25,718.77 1376.81,668.17 1377.37,664.034 1377.93,648.195 1378.49,617.19 1379.04,637.208 1379.6,642.376 1380.16,644.777 1380.72,646.724 1381.28,632.746 1381.84,637.061 1382.4,656.853 1382.96,655.191 1383.52,653.071 1384.08,653.037 1384.64,619.622 1385.2,639.63 1385.76,611.503 1386.31,630.57 1386.87,631.767 1387.43,607.013 1387.99,625.969 1388.55,596.599 1389.11,651.688 1389.67,653.656 1390.23,670.725 1390.79,668.823 1391.35,702.082 1391.91,700.932 1392.47,714.653 1393.03,709.44 1393.58,724.692 1394.14,705.132 1394.7,702.619 1395.26,685.613 1395.82,686.485 1396.38,705.948 1396.94,738.123 1397.5,733.357 1398.06,731.463 1398.62,745.272 1399.18,772.975 1399.74,754.509 1400.3,749.782 1400.86,745.277 1401.41,753.995 1401.97,763.822 1402.53,758.676 1403.09,784.943 1403.65,812.402 1404.21,853.295 1404.77,815.109 1405.33,841.078 1405.89,829.347 1406.45,819.266 1407.01,779.748 1407.57,772.431 1408.13,767.465 1408.68,744.665 1409.24,724.132 1409.8,690.318 1410.36,689.073 1410.92,686.19 1411.48,688.39 1412.04,671.115 1412.6,688.217 1413.16,688.399 1413.72,689.169 1414.28,688.112 1414.84,667.625 1415.4,669.217 1415.95,618.08 1416.51,638.498 1417.07,702.491 1417.63,681.408 1418.19,696.464 1418.75,679.856 1419.31,631.727 1419.87,661.497 1420.43,694.816 1420.99,696.432 1421.55,696.634 1422.11,728.62 1422.67,740.176 1423.23,705.408 1423.78,656.552 1424.34,693.77 1424.9,677.487 1425.46,631.135 1426.02,616.067 1426.58,604.709 1427.14,642.358 1427.7,677.065 1428.26,677.208 1428.82,661.569 1429.38,663.653 1429.94,662.108 1430.5,647.212 1431.05,621.999 1431.61,599.775 1432.17,605.05 1432.73,624.065 1433.29,610.95 1433.85,597.436 1434.41,587.406 1434.97,593.165 1435.53,578.583 1436.09,600.339 1436.65,654.1 1437.21,641.645 1437.77,648.079 1438.33,696.028 1438.88,695.001 1439.44,712.702 1440,739.971 1440.56,737.976 1441.12,716.679 1441.68,694.571 1442.24,698.015 1442.8,727.556 1443.36,726.399 1443.92,757.85 1444.48,757.691 1445.04,756.424 1445.6,785.667 1446.15,797.978 1446.71,776.675 1447.27,770.232 1447.83,770.321 1448.39,780.929 1448.95,774.001 1449.51,752.575 1450.07,730.121 1450.63,729.522 1451.19,726.508 1451.75,720.872 1452.31,750.403 1452.87,763.677 1453.42,774.505 1453.98,737.883 1454.54,668.746 1455.1,685.16 1455.66,668.262 1456.22,652.335 1456.78,669.13 1457.34,671.756 1457.9,689.202 1458.46,685.415 1459.02,672.605 1459.58,688.899 1460.14,669.757 1460.7,702.499 1461.25,699.672 1461.81,669.307 1462.37,688.084 1462.93,698.62 1463.49,766.741 1464.05,710.791 1464.61,741.118 1465.17,722.928 1465.73,709.047 1466.29,738.562 1466.85,689.492 1467.41,671.288 1467.97,673.592 1468.52,657.431 1469.08,678.316 1469.64,680.802 1470.2,683.03 1470.76,667.335 1471.32,647.175 1471.88,649.191 1472.44,648.555 1473,666.599 1473.56,682.671 1474.12,663.84 1474.68,664.957 1475.24,681.516 1475.79,653.45 1476.35,591.329 1476.91,598.321 1477.47,604.698 1478.03,624.542 1478.59,626.836 1479.15,625.907 1479.71,593.55 1480.27,582.267 1480.83,586.309 1481.39,605.331 1481.95,628.049 1482.51,600.865 1483.07,586.361 1483.62,588.533 1484.18,597.571 1484.74,587.72 1485.3,592.394 1485.86,612.98 1486.42,630.372 1486.98,667.12 1487.54,684.464 1488.1,670.099 1488.66,688.245 1489.22,672.05 1489.78,690.931 1490.34,719.287 1490.89,717.169 1491.45,697.91 1492.01,681.07 1492.57,697.116 1493.13,694.297 1493.69,690.771 1494.25,721.505 1494.81,732.541 1495.37,808.009 1495.93,802.859 1496.49,765.01 1497.05,763.117 1497.61,759.844 1498.16,723.147 1498.72,722.195 1499.28,690.119 1499.84,693.793 1500.4,694.633 1500.96,708.966 1501.52,674.465 1502.08,658.433 1502.64,677.496 1503.2,648.208 1503.76,666.315 1504.32,650.458 1504.88,682.078 1505.44,664.185 1505.99,666.448 1506.55,650.14 1507.11,670.097 1507.67,691.022 1508.23,708.578 1508.79,694.219 1509.35,707.587 1509.91,703.608 1510.47,704.619 1511.03,688.419 1511.59,737.673 1512.15,736.702 1512.71,755.795 1513.26,768.58 1513.82,731.539 1514.38,731.006 1514.94,759.196 1515.5,786.003 1516.06,796.168 1516.62,821.238 1517.18,829.545 1517.74,806.572 1518.3,785.496 1518.86,779.932 1519.42,774.301 1519.98,722.277 1520.53,705.879 1521.09,702.987 1521.65,685.137 1522.21,717.566 1522.77,700.561 1523.33,699.111 1523.89,687.095 1524.45,707.384 1525.01,690.534 1525.57,721.968 1526.13,701.819 1526.69,700.37 1527.25,669.621 1527.81,686.146 1528.36,684.147 1528.92,635.493 1529.48,650.264 1530.04,667.221 1530.6,680.97 1531.16,649.821 1531.72,652.732 1532.28,654.545 1532.84,637.611 1533.4,607.98 1533.96,597.275 1534.52,554.93 1535.08,546.851 1535.63,571.615 1536.19,559.754 1536.75,580.52 1537.31,666.987 1537.87,686.776 1538.43,705.649 1538.99,722.584 1539.55,703.905 1540.11,670.305 1540.67,683.74 1541.23,665.276 1541.79,714.41 1542.35,695.866 1542.9,679.47 1543.46,664.613 1544.02,670.646 1544.58,670.645 1545.14,641.638 1545.7,660.294 1546.26,647.279 1546.82,679.995 1547.38,695.728 1547.94,725.104 1548.5,720.992 1549.06,687.891 1549.62,673.767 1550.18,674.231 1550.73,657.692 1551.29,676.715 1551.85,679.07 1552.41,661.724 1552.97,682.336 1553.53,684.323 1554.09,699.046 1554.65,734.127 1555.21,698.851 1555.77,693.045 1556.33,677.091 1556.89,661.373 1557.45,662.2 1558,713.345 1558.56,742.63 1559.12,754.818 1559.68,731.309 1560.24,699.215 1560.8,698.003 1561.36,678.796 1561.92,679.302 1562.48,699.046 1563.04,681.415 1563.6,666.803 1564.16,651.097 1564.72,672.112 1565.28,687.478 1565.83,686.475 1566.39,652.942 1566.95,655.597 1567.51,642.978 1568.07,648 1568.63,680.035 1569.19,678.137 1569.75,680.405 1570.31,664.695 1570.87,651.878 1571.43,649.769 1571.99,650.687 1572.55,672.794 1573.1,639.623 1573.66,656.887 1574.22,659.555 1574.78,676.047 1575.34,710.473 1575.9,677.131 1576.46,694.458 1577.02,675.656 1577.58,657.776 1578.14,644.542 1578.7,645.557 1579.26,675.289 1579.82,644.391 1580.37,646.422 1580.93,632.421 1581.49,700.345 1582.05,698.154 1582.61,697.765 1583.17,694.363 1583.73,706.886 1584.29,720.07 1584.85,718.199 1585.41,747.841 1585.97,757.962 1586.53,733.813 1587.09,743.424 1587.65,740.979 1588.2,740.678 1588.76,722.477 1589.32,736.459 1589.88,735.904 1590.44,720.759 1591,718.029 1591.56,666.907 1592.12,684.52 1592.68,697.956 1593.24,681.474 1593.8,668.003 1594.36,658.073 1594.92,641.132 1595.47,659.994 1596.03,677.935 1596.59,682.119 1597.15,682.84 1597.71,698.004 1598.27,717.597 1598.83,716.315 1599.39,698.847 1599.95,665.336 1600.51,666.638 1601.07,668.205 1601.63,670.421 1602.19,704.453 1602.74,652.106 1603.3,656.375 1603.86,656.33 1604.42,658.855 1604.98,676.497 1605.54,676.065 1606.1,693.737 1606.66,695.571 1607.22,694.28 1607.78,695.363 1608.34,693.669 1608.9,691.237 1609.46,693.231 1610.02,678.675 1610.57,713.89 1611.13,729.299 1611.69,760.727 1612.25,770.674 1612.81,765.229 1613.37,794.311 1613.93,754.856 1614.49,734.603 1615.05,730.926 1615.61,745.461 1616.17,755.808 1616.73,753.074 1617.29,751.76 1617.84,745.719 1618.4,788.252 1618.96,780.672 1619.52,759.027 1620.08,757.15 1620.64,767.965 1621.2,778.723 1621.76,744.903 1622.32,724.414 1622.88,739.509 1623.44,736.868 1624,715.831 1624.56,693.902 1625.11,693.267 1625.67,676.347 1626.23,675.787 1626.79,626.073 1627.35,628.193 1627.91,613.657 1628.47,601.707 1629.03,623.678 1629.59,628.218 1630.15,631.568 1630.71,618.733 1631.27,608.644 1631.83,594.22 1632.39,583.097 1632.94,553.485 1633.5,576.663 1634.06,598.868 1634.62,587.364 1635.18,673.104 1635.74,656.028 1636.3,641.121 1636.86,643.539 1637.42,647.404 1637.98,650.64 1638.54,636.458 1639.1,620.611 1639.66,607.896 1640.21,617.767 1640.77,637.037 1641.33,638.444 1641.89,658.321 1642.45,677.5 1643.01,693.513 1643.57,705.286 1644.13,704.491 1644.69,701.735 1645.25,698.932 1645.81,694.836 1646.37,695.177 1646.93,726.583 1647.48,676.371 1648.04,708.507 1648.6,707.773 1649.16,707.415 1649.72,707.236 1650.28,674.781 1650.84,693.094 1651.4,722.97 1651.96,707.433 1652.52,704.777 1653.08,700.789 1653.64,698.316 1654.2,679.537 1654.76,677.956 1655.31,662.381 1655.87,677.898 1656.43,680.21 1656.99,694.337 1657.55,678.885 1658.11,677.269 1658.67,693.143 1659.23,641.876 1659.79,643.018 1660.35,628.876 1660.91,634.213 1661.47,654.221 1662.03,611.539 1662.58,599.329 1663.14,587.621 1663.7,577.19 1664.26,550.626 1664.82,575.526 1665.38,565.09 1665.94,585.979 1666.5,625.635 1667.06,650.765 1667.62,667.771 1668.18,636.576 1668.74,607.661 1669.3,625.705 1669.85,630.445 1670.41,652.161 1670.97,655.575 1671.53,636.913 1672.09,637.404 1672.65,623.935 1673.21,629.433 1673.77,633.204 1674.33,637.173 1674.89,623.013 1675.45,659.511 1676.01,680.839 1676.57,681.355 1677.13,666.49 1677.68,655.548 1678.24,689.186 1678.8,705.071 1679.36,704.86 1679.92,710.184 1680.48,724.386 1681.04,719.324 1681.6,703.062 1682.16,715.913 1682.72,666.234 1683.28,732.547 1683.84,776.389 1684.4,759.367 1684.95,737.467 1685.51,733.597 1686.07,747.128 1686.63,744.203 1687.19,760.162 1687.75,787.041 1688.31,796.931 1688.87,757.859 1689.43,705.559 1689.99,717.677 1690.55,731.102 1691.11,708.711 1691.67,719.396 1692.23,715.607 1692.78,681.001 1693.34,696.466 1693.9,681.723 1694.46,698.489 1695.02,711.202 1695.58,709.535 1696.14,726.033 1696.7,704.676 1697.26,689.404 1697.82,704.146 1698.38,736.652 1698.94,714.291 1699.5,707.924 1700.05,709.925 1700.61,726.975 1701.17,708.938 1701.73,690.372 1702.29,670.843 1702.85,635.504 1703.41,699.688 1703.97,699.883 1704.53,718.775 1705.09,681.804 1705.65,698.52 1706.21,713.802 1706.77,678.217 1707.32,674.316 1707.88,659.771 1708.44,675.226 1709,691.589 1709.56,673.157 1710.12,686.169 1710.68,655.626 1711.24,658.848 1711.8,646.647 1712.36,668.278 1712.92,716.153 1713.48,730.957 1714.04,728.194 1714.6,724.552 1715.15,723.477 1715.71,737.221 1716.27,784.317 1716.83,761.109 1717.39,710.848 1717.95,695.965 1718.51,699.206 1719.07,700.881 1719.63,714.922 1720.19,743.575 1720.75,770.621 1721.31,768.173 1721.87,745.741 1722.42,758.429 1722.98,755.374 1723.54,752.415 1724.1,748.624 1724.66,776.667 1725.22,791.057 1725.78,785.698 1726.34,782.209 1726.9,710.471 1727.46,738.836 1728.02,706.012 1728.58,736.444 1729.14,747.739 1729.69,759.783 1730.25,739.051 1730.81,751.352 1731.37,748.012 1731.93,793.109 1732.49,756.71 1733.05,738.15 1733.61,672.113 1734.17,669.962 1734.73,637.339 1735.29,668.534 1735.85,687.282 1736.41,668.548 1736.97,668.911 1737.52,637.749 1738.08,640.326 1738.64,626.088 1739.2,610.844 1739.76,599.271 1740.32,589.003 1740.88,578.055 1741.44,582.152 1742,573.219 1742.56,550.038 1743.12,573.438 1743.68,562.379 1744.24,584.649 1744.79,592.511 1745.35,646.707 1745.91,632.975 1746.47,570.192 1747.03,578.839 1747.59,564.804 1748.15,555.732 1748.71,578.831 1749.27,587.643 1749.83,593.455 1750.39,582.964 1750.95,587.904 1751.51,574.207 1752.06,598.753 1752.62,652.958 1753.18,656.561 1753.74,594.347 1754.3,600.581 1754.86,572.955 1755.42,593.567 1755.98,566.145 1756.54,559.511 1757.1,633.93 1757.66,632.825 1758.22,655.312 1758.78,688.819 1759.34,705.398 1759.89,672.885 1760.45,659.336 1761.01,693.976 1761.57,695.008 1762.13,726.947 1762.69,726.447 1763.25,722.46 1763.81,771.214 1764.37,766.608 1764.93,763.312 1765.49,746.44 1766.05,759.826 1766.61,757.191 1767.16,735.625 1767.72,728.594 1768.28,722.663 1768.84,737.73 1769.4,750.536 1769.96,746.726 1770.52,710.274 1771.08,709.088 1771.64,659.638 1772.2,662.083 1772.76,631.663 1773.32,632.09 1773.88,635.042 1774.43,652.588 1774.99,652.393 1775.55,588.724 1776.11,592.791 1776.67,616.598 1777.23,607.831 1777.79,632.886 1778.35,603.439 1778.91,579.525 1779.47,569.894 1780.03,612.424 1780.59,600.199 1781.15,587.9 1781.71,606.946 1782.26,626.24 1782.82,630.519 1783.38,631.954 1783.94,614.762 1784.5,632.302 1785.06,652.573 1785.62,672.991 1786.18,671.759 1786.74,688.314 1787.3,690.759 1787.86,705.787 1788.42,671.967 1788.98,655.341 1789.53,658.945 1790.09,694.737 1790.65,678.727 1791.21,660.889 1791.77,643.352 1792.33,665.685 1792.89,665.044 1793.45,697.955 1794.01,682.722 1794.57,717.524 1795.13,732.872 1795.69,711.309 1796.25,697.788 1796.8,682.865 1797.36,701.006 1797.92,716.009 1798.48,711.044 1799.04,694.391 1799.6,695.452 1800.16,690.434 1800.72,705.437 1801.28,672.814 1801.84,676.603 1802.4,662.62 1802.96,662.054 1803.52,660.751 1804.08,682.006 1804.63,681.966 1805.19,698.582 1805.75,696.59 1806.31,693.57 1806.87,709.95 1807.43,727.672 1807.99,724.922 1808.55,740.354 1809.11,719.882 1809.67,712.747 1810.23,711.562 1810.79,726.104 1811.35,706.983 1811.9,686.353 1812.46,652.705 1813.02,655.102 1813.58,704.538 1814.14,685.023 1814.7,653.408 1815.26,686.642 1815.82,706.366 1816.38,671.469 1816.94,670.493 1817.5,653.331 1818.06,688.877 1818.62,708.815 1819.18,674.626 1819.73,688.598 1820.29,767.481 1820.85,714.877 1821.41,713.154 1821.97,677.904 1822.53,674.383 1823.09,674.916 1823.65,662.241 1824.21,678.535 1824.77,709.203 1825.33,724.266 1825.89,722.291 1826.45,703.222 1827,682.763 1827.56,679.598 1828.12,680.109 1828.68,679.527 1829.24,680.245 1829.8,693.478 1830.36,691.787 1830.92,690.056 1831.48,676.122 1832.04,677.155 1832.6,693.242 1833.16,707.919 1833.72,719.225 1834.27,713.934 1834.83,714.716 1835.39,747.616 1835.95,744.522 1836.51,756.021 1837.07,751.632 1837.63,750.164 1838.19,730.577 \"/>\n<path clip-path=\"url(#clip093)\" d=\"M720.247 690.423 L720.806 690.423 L721.365 690.423 L721.924 690.423 L722.484 690.423 L723.043 690.423 L723.602 690.423 L724.161 690.423 L724.721 690.423 L725.28 690.423 L725.839 690.423 L726.398 690.423 L726.958 690.423 L727.517 690.423 L728.076 690.423 L728.635 690.423 L729.195 690.423 L729.754 690.423 L730.313 690.423 L730.872 690.423 L731.432 690.423 L731.991 690.423 L732.55 690.423 L733.109 690.423 L733.669 690.423 L734.228 690.423 L734.787 690.423 L735.346 690.423 L735.906 690.423 L736.465 690.423 L737.024 690.423 L737.583 690.423 L738.143 690.423 L738.702 690.423 L739.261 690.423 L739.82 690.423 L740.38 690.423 L740.939 690.423 L741.498 690.423 L742.057 690.423 L742.617 690.423 L743.176 690.423 L743.735 690.423 L744.294 690.423 L744.854 690.423 L745.413 690.423 L745.972 690.423 L746.531 690.423 L747.091 690.423 L747.65 690.423 L748.209 690.423 L748.768 690.423 L749.328 690.423 L749.887 690.423 L750.446 690.423 L751.005 690.423 L751.565 690.423 L752.124 690.423 L752.683 690.423 L753.242 690.423 L753.802 690.423 L754.361 690.423 L754.92 690.423 L755.479 690.423 L756.039 690.423 L756.598 690.423 L757.157 690.423 L757.716 690.423 L758.276 690.423 L758.835 690.423 L759.394 690.423 L759.953 690.423 L760.513 690.423 L761.072 690.423 L761.631 690.423 L762.19 690.423 L762.75 690.423 L763.309 690.423 L763.868 690.423 L764.427 690.423 L764.987 690.423 L765.546 690.423 L766.105 690.423 L766.664 690.423 L767.224 690.423 L767.783 690.423 L768.342 690.423 L768.901 690.423 L769.461 690.423 L770.02 690.423 L770.579 690.423 L771.138 690.423 L771.698 690.423 L772.257 690.423 L772.816 690.423 L773.375 690.423 L773.935 690.423 L774.494 690.423 L775.053 690.423 L775.612 690.423 L776.172 690.423 L776.731 690.423 L777.29 690.423 L777.849 690.423 L778.409 690.423 L778.968 690.423 L779.527 690.423 L780.086 690.423 L780.646 690.423 L781.205 690.423 L781.764 690.423 L782.323 690.423 L782.883 690.423 L783.442 690.423 L784.001 690.423 L784.56 690.423 L785.12 690.423 L785.679 690.423 L786.238 690.423 L786.797 690.423 L787.357 690.423 L787.916 690.423 L788.475 690.423 L789.034 690.423 L789.594 690.423 L790.153 690.423 L790.712 690.423 L791.271 690.423 L791.831 690.423 L792.39 690.423 L792.949 690.423 L793.508 690.423 L794.068 690.423 L794.627 690.423 L795.186 690.423 L795.745 690.423 L796.305 690.423 L796.864 690.423 L797.423 690.423 L797.982 690.423 L798.542 690.423 L799.101 690.423 L799.66 690.423 L800.219 690.423 L800.779 690.423 L801.338 690.423 L801.897 690.423 L802.456 690.423 L803.016 690.423 L803.575 690.423 L804.134 690.423 L804.693 690.423 L805.253 690.423 L805.812 690.423 L806.371 690.423 L806.931 690.423 L807.49 690.423 L808.049 690.423 L808.608 690.423 L809.168 690.423 L809.727 690.423 L810.286 690.423 L810.845 690.423 L811.405 690.423 L811.964 690.423 L812.523 690.423 L813.082 690.423 L813.642 690.423 L814.201 690.423 L814.76 690.423 L815.319 690.423 L815.879 690.423 L816.438 690.423 L816.997 690.423 L817.556 690.423 L818.116 690.423 L818.675 690.423 L819.234 690.423 L819.793 690.423 L820.353 690.423 L820.912 690.423 L821.471 690.423 L822.03 690.423 L822.59 690.423 L823.149 690.423 L823.708 690.423 L824.267 690.423 L824.827 690.423 L825.386 690.423 L825.945 690.423 L826.504 690.423 L827.064 690.423 L827.623 690.423 L828.182 690.423 L828.741 690.423 L829.301 690.423 L829.86 690.423 L830.419 690.423 L830.978 690.423 L831.538 690.423 L832.097 690.423 L832.656 690.423 L833.215 690.423 L833.775 690.423 L834.334 690.423 L834.893 690.423 L835.452 690.423 L836.012 690.423 L836.571 690.423 L837.13 690.423 L837.689 690.423 L838.249 690.423 L838.808 690.423 L839.367 690.423 L839.926 690.423 L840.486 690.423 L841.045 690.423 L841.604 690.423 L842.163 690.423 L842.723 690.423 L843.282 690.423 L843.841 690.423 L844.4 690.423 L844.96 690.423 L845.519 690.423 L846.078 690.423 L846.637 690.423 L847.197 690.423 L847.756 690.423 L848.315 690.423 L848.874 690.423 L849.434 690.423 L849.993 690.423 L850.552 690.423 L851.111 690.423 L851.671 690.423 L852.23 690.423 L852.789 690.423 L853.348 690.423 L853.908 690.423 L854.467 690.423 L855.026 690.423 L855.585 690.423 L856.145 690.423 L856.704 690.423 L857.263 690.423 L857.822 690.423 L858.382 690.423 L858.941 690.423 L859.5 690.423 L860.059 690.423 L860.619 690.423 L861.178 690.423 L861.737 690.423 L862.296 690.423 L862.856 690.423 L863.415 690.423 L863.974 690.423 L864.533 690.423 L865.093 690.423 L865.652 690.423 L866.211 690.423 L866.77 690.423 L867.33 690.423 L867.889 690.423 L868.448 690.423 L869.007 690.423 L869.567 690.423 L870.126 690.423 L870.685 690.423 L871.244 690.423 L871.804 690.423 L872.363 690.423 L872.922 690.423 L873.481 690.423 L874.041 690.423 L874.6 690.423 L875.159 690.423 L875.718 690.423 L876.278 690.423 L876.837 690.423 L877.396 690.423 L877.955 690.423 L878.515 690.423 L879.074 690.423 L879.633 690.423 L880.192 690.423 L880.752 690.423 L881.311 690.423 L881.87 690.423 L882.429 690.423 L882.989 690.423 L883.548 690.423 L884.107 690.423 L884.666 690.423 L885.226 690.423 L885.785 690.423 L886.344 690.423 L886.903 690.423 L887.463 690.423 L888.022 690.423 L888.581 690.423 L889.14 690.423 L889.7 690.423 L890.259 690.423 L890.818 690.423 L891.377 690.423 L891.937 690.423 L892.496 690.423 L893.055 690.423 L893.614 690.423 L894.174 690.423 L894.733 690.423 L895.292 690.423 L895.851 690.423 L896.411 690.423 L896.97 690.423 L897.529 690.423 L898.088 690.423 L898.648 690.423 L899.207 690.423 L899.766 690.423 L900.325 690.423 L900.885 690.423 L901.444 690.423 L902.003 690.423 L902.562 690.423 L903.122 690.423 L903.681 690.423 L904.24 690.423 L904.799 690.423 L905.359 690.423 L905.918 690.423 L906.477 690.423 L907.036 690.423 L907.596 690.423 L908.155 690.423 L908.714 690.423 L909.273 690.423 L909.833 690.423 L910.392 690.423 L910.951 690.423 L911.51 690.423 L912.07 690.423 L912.629 690.423 L913.188 690.423 L913.747 690.423 L914.307 690.423 L914.866 690.423 L915.425 690.423 L915.984 690.423 L916.544 690.423 L917.103 690.423 L917.662 690.423 L918.221 690.423 L918.781 690.423 L919.34 690.423 L919.899 690.423 L920.458 690.423 L921.018 690.423 L921.577 690.423 L922.136 690.423 L922.695 690.423 L923.255 690.423 L923.814 690.423 L924.373 690.423 L924.932 690.423 L925.492 690.423 L926.051 690.423 L926.61 690.423 L927.169 690.423 L927.729 690.423 L928.288 690.423 L928.847 690.423 L929.406 690.423 L929.966 690.423 L930.525 690.423 L931.084 690.423 L931.644 690.423 L932.203 690.423 L932.762 690.423 L933.321 690.423 L933.881 690.423 L934.44 690.423 L934.999 690.423 L935.558 690.423 L936.118 690.423 L936.677 690.423 L937.236 690.423 L937.795 690.423 L938.355 690.423 L938.914 690.423 L939.473 690.423 L940.032 690.423 L940.592 690.423 L941.151 690.423 L941.71 690.423 L942.269 690.423 L942.829 690.423 L943.388 690.423 L943.947 690.423 L944.506 690.423 L945.066 690.423 L945.625 690.423 L946.184 690.423 L946.743 690.423 L947.303 690.423 L947.862 690.423 L948.421 690.423 L948.98 690.423 L949.54 690.423 L950.099 690.423 L950.658 690.423 L951.217 690.423 L951.777 690.423 L952.336 690.423 L952.895 690.423 L953.454 690.423 L954.014 690.423 L954.573 690.423 L955.132 690.423 L955.691 690.423 L956.251 690.423 L956.81 690.423 L957.369 690.423 L957.928 690.423 L958.488 690.423 L959.047 690.423 L959.606 690.423 L960.165 690.423 L960.725 690.423 L961.284 690.423 L961.843 690.423 L962.402 690.423 L962.962 690.423 L963.521 690.423 L964.08 690.423 L964.639 690.423 L965.199 690.423 L965.758 690.423 L966.317 690.423 L966.876 690.423 L967.436 690.423 L967.995 690.423 L968.554 690.423 L969.113 690.423 L969.673 690.423 L970.232 690.423 L970.791 690.423 L971.35 690.423 L971.91 690.423 L972.469 690.423 L973.028 690.423 L973.587 690.423 L974.147 690.423 L974.706 690.423 L975.265 690.423 L975.824 690.423 L976.384 690.423 L976.943 690.423 L977.502 690.423 L978.061 690.423 L978.621 690.423 L979.18 690.423 L979.739 690.423 L980.298 690.423 L980.858 690.423 L981.417 690.423 L981.976 690.423 L982.535 690.423 L983.095 690.423 L983.654 690.423 L984.213 690.423 L984.772 690.423 L985.332 690.423 L985.891 690.423 L986.45 690.423 L987.009 690.423 L987.569 690.423 L988.128 690.423 L988.687 690.423 L989.246 690.423 L989.806 690.423 L990.365 690.423 L990.924 690.423 L991.483 690.423 L992.043 690.423 L992.602 690.423 L993.161 690.423 L993.72 690.423 L994.28 690.423 L994.839 690.423 L995.398 690.423 L995.957 690.423 L996.517 690.423 L997.076 690.423 L997.635 690.423 L998.194 690.423 L998.754 690.423 L999.313 690.423 L999.872 690.423 L1000.43 690.423 L1000.99 690.423 L1001.55 690.423 L1002.11 690.423 L1002.67 690.423 L1003.23 690.423 L1003.79 690.423 L1004.35 690.423 L1004.91 690.423 L1005.46 690.423 L1006.02 690.423 L1006.58 690.423 L1007.14 690.423 L1007.7 690.423 L1008.26 690.423 L1008.82 690.423 L1009.38 690.423 L1009.94 690.423 L1010.5 690.423 L1011.06 690.423 L1011.62 690.423 L1012.18 690.423 L1012.73 690.423 L1013.29 690.423 L1013.85 690.423 L1014.41 690.423 L1014.97 690.423 L1015.53 690.423 L1016.09 690.423 L1016.65 690.423 L1017.21 690.423 L1017.77 690.423 L1018.33 690.423 L1018.89 690.423 L1019.45 690.423 L1020.01 690.423 L1020.56 690.423 L1021.12 690.423 L1021.68 690.423 L1022.24 690.423 L1022.8 690.423 L1023.36 690.423 L1023.92 690.423 L1024.48 690.423 L1025.04 690.423 L1025.6 690.423 L1026.16 690.423 L1026.72 690.423 L1027.28 690.423 L1027.83 690.423 L1028.39 690.423 L1028.95 690.423 L1029.51 690.423 L1030.07 690.423 L1030.63 690.423 L1031.19 690.423 L1031.75 690.423 L1032.31 690.423 L1032.87 690.423 L1033.43 690.423 L1033.99 690.423 L1034.55 690.423 L1035.1 690.423 L1035.66 690.423 L1036.22 690.423 L1036.78 690.423 L1037.34 690.423 L1037.9 690.423 L1038.46 690.423 L1039.02 690.423 L1039.58 690.423 L1040.14 690.423 L1040.7 690.423 L1041.26 690.423 L1041.82 690.423 L1042.38 690.423 L1042.93 690.423 L1043.49 690.423 L1044.05 690.423 L1044.61 690.423 L1045.17 690.423 L1045.73 690.423 L1046.29 690.423 L1046.85 690.423 L1047.41 690.423 L1047.97 690.423 L1048.53 690.423 L1049.09 690.423 L1049.65 690.423 L1050.2 690.423 L1050.76 690.423 L1051.32 690.423 L1051.88 690.423 L1052.44 690.423 L1053 690.423 L1053.56 690.423 L1054.12 690.423 L1054.68 690.423 L1055.24 690.423 L1055.8 690.423 L1056.36 690.423 L1056.92 690.423 L1057.48 690.423 L1058.03 690.423 L1058.59 690.423 L1059.15 690.423 L1059.71 690.423 L1060.27 690.423 L1060.83 690.423 L1061.39 690.423 L1061.95 690.423 L1062.51 690.423 L1063.07 690.423 L1063.63 690.423 L1064.19 690.423 L1064.75 690.423 L1065.3 690.423 L1065.86 690.423 L1066.42 690.423 L1066.98 690.423 L1067.54 690.423 L1068.1 690.423 L1068.66 690.423 L1069.22 690.423 L1069.78 690.423 L1070.34 690.423 L1070.9 690.423 L1071.46 690.423 L1072.02 690.423 L1072.57 690.423 L1073.13 690.423 L1073.69 690.423 L1074.25 690.423 L1074.81 690.423 L1075.37 690.423 L1075.93 690.423 L1076.49 690.423 L1077.05 690.423 L1077.61 690.423 L1078.17 690.423 L1078.73 690.423 L1079.29 690.423 L1079.85 690.423 L1080.4 690.423 L1080.96 690.423 L1081.52 690.423 L1082.08 690.423 L1082.64 690.423 L1083.2 690.423 L1083.76 690.423 L1084.32 690.423 L1084.88 690.423 L1085.44 690.423 L1086 690.423 L1086.56 690.423 L1087.12 690.423 L1087.67 690.423 L1088.23 690.423 L1088.79 690.423 L1089.35 690.423 L1089.91 690.423 L1090.47 690.423 L1091.03 690.423 L1091.59 690.423 L1092.15 690.423 L1092.71 690.423 L1093.27 690.423 L1093.83 690.423 L1094.39 690.423 L1094.94 690.423 L1095.5 690.423 L1096.06 690.423 L1096.62 690.423 L1097.18 690.423 L1097.74 690.423 L1098.3 690.423 L1098.86 690.423 L1099.42 690.423 L1099.98 690.423 L1100.54 690.423 L1101.1 690.423 L1101.66 690.423 L1102.22 690.423 L1102.77 690.423 L1103.33 690.423 L1103.89 690.423 L1104.45 690.423 L1105.01 690.423 L1105.57 690.423 L1106.13 690.423 L1106.69 690.423 L1107.25 690.423 L1107.81 690.423 L1108.37 690.423 L1108.93 690.423 L1109.49 690.423 L1110.04 690.423 L1110.6 690.423 L1111.16 690.423 L1111.72 690.423 L1112.28 690.423 L1112.84 690.423 L1113.4 690.423 L1113.96 690.423 L1114.52 690.423 L1115.08 690.423 L1115.64 690.423 L1116.2 690.423 L1116.76 690.423 L1117.31 690.423 L1117.87 690.423 L1118.43 690.423 L1118.99 690.423 L1119.55 690.423 L1120.11 690.423 L1120.67 690.423 L1121.23 690.423 L1121.79 690.423 L1122.35 690.423 L1122.91 690.423 L1123.47 690.423 L1124.03 690.423 L1124.59 690.423 L1125.14 690.423 L1125.7 690.423 L1126.26 690.423 L1126.82 690.423 L1127.38 690.423 L1127.94 690.423 L1128.5 690.423 L1129.06 690.423 L1129.62 690.423 L1130.18 690.423 L1130.74 690.423 L1131.3 690.423 L1131.86 690.423 L1132.41 690.423 L1132.97 690.423 L1133.53 690.423 L1134.09 690.423 L1134.65 690.423 L1135.21 690.423 L1135.77 690.423 L1136.33 690.423 L1136.89 690.423 L1137.45 690.423 L1138.01 690.423 L1138.57 690.423 L1139.13 690.423 L1139.68 690.423 L1140.24 690.423 L1140.8 690.423 L1141.36 690.423 L1141.92 690.423 L1142.48 690.423 L1143.04 690.423 L1143.6 690.423 L1144.16 690.423 L1144.72 690.423 L1145.28 690.423 L1145.84 690.423 L1146.4 690.423 L1146.96 690.423 L1147.51 690.423 L1148.07 690.423 L1148.63 690.423 L1149.19 690.423 L1149.75 690.423 L1150.31 690.423 L1150.87 690.423 L1151.43 690.423 L1151.99 690.423 L1152.55 690.423 L1153.11 690.423 L1153.67 690.423 L1154.23 690.423 L1154.78 690.423 L1155.34 690.423 L1155.9 690.423 L1156.46 690.423 L1157.02 690.423 L1157.58 690.423 L1158.14 690.423 L1158.7 690.423 L1159.26 690.423 L1159.82 690.423 L1160.38 690.423 L1160.94 690.423 L1161.5 690.423 L1162.05 690.423 L1162.61 690.423 L1163.17 690.423 L1163.73 690.423 L1164.29 690.423 L1164.85 690.423 L1165.41 690.423 L1165.97 690.423 L1166.53 690.423 L1167.09 690.423 L1167.65 690.423 L1168.21 690.423 L1168.77 690.423 L1169.33 690.423 L1169.88 690.423 L1170.44 690.423 L1171 690.423 L1171.56 690.423 L1172.12 690.423 L1172.68 690.423 L1173.24 690.423 L1173.8 690.423 L1174.36 690.423 L1174.92 690.423 L1175.48 690.423 L1176.04 690.423 L1176.6 690.423 L1177.15 690.423 L1177.71 690.423 L1178.27 690.423 L1178.83 690.423 L1179.39 690.423 L1179.95 690.423 L1180.51 690.423 L1181.07 690.423 L1181.63 690.423 L1182.19 690.423 L1182.75 690.423 L1183.31 690.423 L1183.87 690.423 L1184.43 690.423 L1184.98 690.423 L1185.54 690.423 L1186.1 690.423 L1186.66 690.423 L1187.22 690.423 L1187.78 690.423 L1188.34 690.423 L1188.9 690.423 L1189.46 690.423 L1190.02 690.423 L1190.58 690.423 L1191.14 690.423 L1191.7 690.423 L1192.25 690.423 L1192.81 690.423 L1193.37 690.423 L1193.93 690.423 L1194.49 690.423 L1195.05 690.423 L1195.61 690.423 L1196.17 690.423 L1196.73 690.423 L1197.29 690.423 L1197.85 690.423 L1198.41 690.423 L1198.97 690.423 L1199.52 690.423 L1200.08 690.423 L1200.64 690.423 L1201.2 690.423 L1201.76 690.423 L1202.32 690.423 L1202.88 690.423 L1203.44 690.423 L1204 690.423 L1204.56 690.423 L1205.12 690.423 L1205.68 690.423 L1206.24 690.423 L1206.8 690.423 L1207.35 690.423 L1207.91 690.423 L1208.47 690.423 L1209.03 690.423 L1209.59 690.423 L1210.15 690.423 L1210.71 690.423 L1211.27 690.423 L1211.83 690.423 L1212.39 690.423 L1212.95 690.423 L1213.51 690.423 L1214.07 690.423 L1214.62 690.423 L1215.18 690.423 L1215.74 690.423 L1216.3 690.423 L1216.86 690.423 L1217.42 690.423 L1217.98 690.423 L1218.54 690.423 L1219.1 690.423 L1219.66 690.423 L1220.22 690.423 L1220.78 690.423 L1221.34 690.423 L1221.89 690.423 L1222.45 690.423 L1223.01 690.423 L1223.57 690.423 L1224.13 690.423 L1224.69 690.423 L1225.25 690.423 L1225.81 690.423 L1226.37 690.423 L1226.93 690.423 L1227.49 690.423 L1228.05 690.423 L1228.61 690.423 L1229.17 690.423 L1229.72 690.423 L1230.28 690.423 L1230.84 690.423 L1231.4 690.423 L1231.96 690.423 L1232.52 690.423 L1233.08 690.423 L1233.64 690.423 L1234.2 690.423 L1234.76 690.423 L1235.32 690.423 L1235.88 690.423 L1236.44 690.423 L1236.99 690.423 L1237.55 690.423 L1238.11 690.423 L1238.67 690.423 L1239.23 690.423 L1239.79 690.423 L1240.35 690.423 L1240.91 690.423 L1241.47 690.423 L1242.03 690.423 L1242.59 690.423 L1243.15 690.423 L1243.71 690.423 L1244.26 690.423 L1244.82 690.423 L1245.38 690.423 L1245.94 690.423 L1246.5 690.423 L1247.06 690.423 L1247.62 690.423 L1248.18 690.423 L1248.74 690.423 L1249.3 690.423 L1249.86 690.423 L1250.42 690.423 L1250.98 690.423 L1251.54 690.423 L1252.09 690.423 L1252.65 690.423 L1253.21 690.423 L1253.77 690.423 L1254.33 690.423 L1254.89 690.423 L1255.45 690.423 L1256.01 690.423 L1256.57 690.423 L1257.13 690.423 L1257.69 690.423 L1258.25 690.423 L1258.81 690.423 L1259.36 690.423 L1259.92 690.423 L1260.48 690.423 L1261.04 690.423 L1261.6 690.423 L1262.16 690.423 L1262.72 690.423 L1263.28 690.423 L1263.84 690.423 L1264.4 690.423 L1264.96 690.423 L1265.52 690.423 L1266.08 690.423 L1266.63 690.423 L1267.19 690.423 L1267.75 690.423 L1268.31 690.423 L1268.87 690.423 L1269.43 690.423 L1269.99 690.423 L1270.55 690.423 L1271.11 690.423 L1271.67 690.423 L1272.23 690.423 L1272.79 690.423 L1273.35 690.423 L1273.91 690.423 L1274.46 690.423 L1275.02 690.423 L1275.58 690.423 L1276.14 690.423 L1276.7 690.423 L1277.26 690.423 L1277.82 690.423 L1278.38 690.423 L1278.94 690.423 L1279.5 690.423 L1280.06 690.423 L1280.62 690.423 L1281.18 690.423 L1281.73 690.423 L1282.29 690.423 L1282.85 690.423 L1283.41 690.423 L1283.97 690.423 L1284.53 690.423 L1285.09 690.423 L1285.65 690.423 L1286.21 690.423 L1286.77 690.423 L1287.33 690.423 L1287.89 690.423 L1288.45 690.423 L1289 690.423 L1289.56 690.423 L1290.12 690.423 L1290.68 690.423 L1291.24 690.423 L1291.8 690.423 L1292.36 690.423 L1292.92 690.423 L1293.48 690.423 L1294.04 690.423 L1294.6 690.423 L1295.16 690.423 L1295.72 690.423 L1296.28 690.423 L1296.83 690.423 L1297.39 690.423 L1297.95 690.423 L1298.51 690.423 L1299.07 690.423 L1299.63 690.423 L1300.19 690.423 L1300.75 690.423 L1301.31 690.423 L1301.87 690.423 L1302.43 690.423 L1302.99 690.423 L1303.55 690.423 L1304.1 690.423 L1304.66 690.423 L1305.22 690.423 L1305.78 690.423 L1306.34 690.423 L1306.9 690.423 L1307.46 690.423 L1308.02 690.423 L1308.58 690.423 L1309.14 690.423 L1309.7 690.423 L1310.26 690.423 L1310.82 690.423 L1311.38 690.423 L1311.93 690.423 L1312.49 690.423 L1313.05 690.423 L1313.61 690.423 L1314.17 690.423 L1314.73 690.423 L1315.29 690.423 L1315.85 690.423 L1316.41 690.423 L1316.97 690.423 L1317.53 690.423 L1318.09 690.423 L1318.65 690.423 L1319.2 690.423 L1319.76 690.423 L1320.32 690.423 L1320.88 690.423 L1321.44 690.423 L1322 690.423 L1322.56 690.423 L1323.12 690.423 L1323.68 690.423 L1324.24 690.423 L1324.8 690.423 L1325.36 690.423 L1325.92 690.423 L1326.47 690.423 L1327.03 690.423 L1327.59 690.423 L1328.15 690.423 L1328.71 690.423 L1329.27 690.423 L1329.83 690.423 L1330.39 690.423 L1330.95 690.423 L1331.51 690.423 L1332.07 690.423 L1332.63 690.423 L1333.19 690.423 L1333.75 690.423 L1334.3 690.423 L1334.86 690.423 L1335.42 690.423 L1335.98 690.423 L1336.54 690.423 L1337.1 690.423 L1337.66 690.423 L1338.22 690.423 L1338.78 690.423 L1339.34 690.423 L1339.9 690.423 L1340.46 690.423 L1341.02 690.423 L1341.57 690.423 L1342.13 690.423 L1342.69 690.423 L1343.25 690.423 L1343.81 690.423 L1344.37 690.423 L1344.93 690.423 L1345.49 690.423 L1346.05 690.423 L1346.61 690.423 L1347.17 690.423 L1347.73 690.423 L1348.29 690.423 L1348.84 690.423 L1349.4 690.423 L1349.96 690.423 L1350.52 690.423 L1351.08 690.423 L1351.64 690.423 L1352.2 690.423 L1352.76 690.423 L1353.32 690.423 L1353.88 690.423 L1354.44 690.423 L1355 690.423 L1355.56 690.423 L1356.12 690.423 L1356.67 690.423 L1357.23 690.423 L1357.79 690.423 L1358.35 690.423 L1358.91 690.423 L1359.47 690.423 L1360.03 690.423 L1360.59 690.423 L1361.15 690.423 L1361.71 690.423 L1362.27 690.423 L1362.83 690.423 L1363.39 690.423 L1363.94 690.423 L1364.5 690.423 L1365.06 690.423 L1365.62 690.423 L1366.18 690.423 L1366.74 690.423 L1367.3 690.423 L1367.86 690.423 L1368.42 690.423 L1368.98 690.423 L1369.54 690.423 L1370.1 690.423 L1370.66 690.423 L1371.21 690.423 L1371.77 690.423 L1372.33 690.423 L1372.89 690.423 L1373.45 690.423 L1374.01 690.423 L1374.57 690.423 L1375.13 690.423 L1375.69 690.423 L1376.25 690.423 L1376.81 690.423 L1377.37 690.423 L1377.93 690.423 L1378.49 690.423 L1379.04 690.423 L1379.6 690.423 L1380.16 690.423 L1380.72 690.423 L1381.28 690.423 L1381.84 690.423 L1382.4 690.423 L1382.96 690.423 L1383.52 690.423 L1384.08 690.423 L1384.64 690.423 L1385.2 690.423 L1385.76 690.423 L1386.31 690.423 L1386.87 690.423 L1387.43 690.423 L1387.99 690.423 L1388.55 690.423 L1389.11 690.423 L1389.67 690.423 L1390.23 690.423 L1390.79 690.423 L1391.35 690.423 L1391.91 690.423 L1392.47 690.423 L1393.03 690.423 L1393.58 690.423 L1394.14 690.423 L1394.7 690.423 L1395.26 690.423 L1395.82 690.423 L1396.38 690.423 L1396.94 690.423 L1397.5 690.423 L1398.06 690.423 L1398.62 690.423 L1399.18 690.423 L1399.74 690.423 L1400.3 690.423 L1400.86 690.423 L1401.41 690.423 L1401.97 690.423 L1402.53 690.423 L1403.09 690.423 L1403.65 690.423 L1404.21 690.423 L1404.77 690.423 L1405.33 690.423 L1405.89 690.423 L1406.45 690.423 L1407.01 690.423 L1407.57 690.423 L1408.13 690.423 L1408.68 690.423 L1409.24 690.423 L1409.8 690.423 L1410.36 690.423 L1410.92 690.423 L1411.48 690.423 L1412.04 690.423 L1412.6 690.423 L1413.16 690.423 L1413.72 690.423 L1414.28 690.423 L1414.84 690.423 L1415.4 690.423 L1415.95 690.423 L1416.51 690.423 L1417.07 690.423 L1417.63 690.423 L1418.19 690.423 L1418.75 690.423 L1419.31 690.423 L1419.87 690.423 L1420.43 690.423 L1420.99 690.423 L1421.55 690.423 L1422.11 690.423 L1422.67 690.423 L1423.23 690.423 L1423.78 690.423 L1424.34 690.423 L1424.9 690.423 L1425.46 690.423 L1426.02 690.423 L1426.58 690.423 L1427.14 690.423 L1427.7 690.423 L1428.26 690.423 L1428.82 690.423 L1429.38 690.423 L1429.94 690.423 L1430.5 690.423 L1431.05 690.423 L1431.61 690.423 L1432.17 690.423 L1432.73 690.423 L1433.29 690.423 L1433.85 690.423 L1434.41 690.423 L1434.97 690.423 L1435.53 690.423 L1436.09 690.423 L1436.65 690.423 L1437.21 690.423 L1437.77 690.423 L1438.33 690.423 L1438.88 690.423 L1439.44 690.423 L1440 690.423 L1440.56 690.423 L1441.12 690.423 L1441.68 690.423 L1442.24 690.423 L1442.8 690.423 L1443.36 690.423 L1443.92 690.423 L1444.48 690.423 L1445.04 690.423 L1445.6 690.423 L1446.15 690.423 L1446.71 690.423 L1447.27 690.423 L1447.83 690.423 L1448.39 690.423 L1448.95 690.423 L1449.51 690.423 L1450.07 690.423 L1450.63 690.423 L1451.19 690.423 L1451.75 690.423 L1452.31 690.423 L1452.87 690.423 L1453.42 690.423 L1453.98 690.423 L1454.54 690.423 L1455.1 690.423 L1455.66 690.423 L1456.22 690.423 L1456.78 690.423 L1457.34 690.423 L1457.9 690.423 L1458.46 690.423 L1459.02 690.423 L1459.58 690.423 L1460.14 690.423 L1460.7 690.423 L1461.25 690.423 L1461.81 690.423 L1462.37 690.423 L1462.93 690.423 L1463.49 690.423 L1464.05 690.423 L1464.61 690.423 L1465.17 690.423 L1465.73 690.423 L1466.29 690.423 L1466.85 690.423 L1467.41 690.423 L1467.97 690.423 L1468.52 690.423 L1469.08 690.423 L1469.64 690.423 L1470.2 690.423 L1470.76 690.423 L1471.32 690.423 L1471.88 690.423 L1472.44 690.423 L1473 690.423 L1473.56 690.423 L1474.12 690.423 L1474.68 690.423 L1475.24 690.423 L1475.79 690.423 L1476.35 690.423 L1476.91 690.423 L1477.47 690.423 L1478.03 690.423 L1478.59 690.423 L1479.15 690.423 L1479.71 690.423 L1480.27 690.423 L1480.83 690.423 L1481.39 690.423 L1481.95 690.423 L1482.51 690.423 L1483.07 690.423 L1483.62 690.423 L1484.18 690.423 L1484.74 690.423 L1485.3 690.423 L1485.86 690.423 L1486.42 690.423 L1486.98 690.423 L1487.54 690.423 L1488.1 690.423 L1488.66 690.423 L1489.22 690.423 L1489.78 690.423 L1490.34 690.423 L1490.89 690.423 L1491.45 690.423 L1492.01 690.423 L1492.57 690.423 L1493.13 690.423 L1493.69 690.423 L1494.25 690.423 L1494.81 690.423 L1495.37 690.423 L1495.93 690.423 L1496.49 690.423 L1497.05 690.423 L1497.61 690.423 L1498.16 690.423 L1498.72 690.423 L1499.28 690.423 L1499.84 690.423 L1500.4 690.423 L1500.96 690.423 L1501.52 690.423 L1502.08 690.423 L1502.64 690.423 L1503.2 690.423 L1503.76 690.423 L1504.32 690.423 L1504.88 690.423 L1505.44 690.423 L1505.99 690.423 L1506.55 690.423 L1507.11 690.423 L1507.67 690.423 L1508.23 690.423 L1508.79 690.423 L1509.35 690.423 L1509.91 690.423 L1510.47 690.423 L1511.03 690.423 L1511.59 690.423 L1512.15 690.423 L1512.71 690.423 L1513.26 690.423 L1513.82 690.423 L1514.38 690.423 L1514.94 690.423 L1515.5 690.423 L1516.06 690.423 L1516.62 690.423 L1517.18 690.423 L1517.74 690.423 L1518.3 690.423 L1518.86 690.423 L1519.42 690.423 L1519.98 690.423 L1520.53 690.423 L1521.09 690.423 L1521.65 690.423 L1522.21 690.423 L1522.77 690.423 L1523.33 690.423 L1523.89 690.423 L1524.45 690.423 L1525.01 690.423 L1525.57 690.423 L1526.13 690.423 L1526.69 690.423 L1527.25 690.423 L1527.81 690.423 L1528.36 690.423 L1528.92 690.423 L1529.48 690.423 L1530.04 690.423 L1530.6 690.423 L1531.16 690.423 L1531.72 690.423 L1532.28 690.423 L1532.84 690.423 L1533.4 690.423 L1533.96 690.423 L1534.52 690.423 L1535.08 690.423 L1535.63 690.423 L1536.19 690.423 L1536.75 690.423 L1537.31 690.423 L1537.87 690.423 L1538.43 690.423 L1538.99 690.423 L1539.55 690.423 L1540.11 690.423 L1540.67 690.423 L1541.23 690.423 L1541.79 690.423 L1542.35 690.423 L1542.9 690.423 L1543.46 690.423 L1544.02 690.423 L1544.58 690.423 L1545.14 690.423 L1545.7 690.423 L1546.26 690.423 L1546.82 690.423 L1547.38 690.423 L1547.94 690.423 L1548.5 690.423 L1549.06 690.423 L1549.62 690.423 L1550.18 690.423 L1550.73 690.423 L1551.29 690.423 L1551.85 690.423 L1552.41 690.423 L1552.97 690.423 L1553.53 690.423 L1554.09 690.423 L1554.65 690.423 L1555.21 690.423 L1555.77 690.423 L1556.33 690.423 L1556.89 690.423 L1557.45 690.423 L1558 690.423 L1558.56 690.423 L1559.12 690.423 L1559.68 690.423 L1560.24 690.423 L1560.8 690.423 L1561.36 690.423 L1561.92 690.423 L1562.48 690.423 L1563.04 690.423 L1563.6 690.423 L1564.16 690.423 L1564.72 690.423 L1565.28 690.423 L1565.83 690.423 L1566.39 690.423 L1566.95 690.423 L1567.51 690.423 L1568.07 690.423 L1568.63 690.423 L1569.19 690.423 L1569.75 690.423 L1570.31 690.423 L1570.87 690.423 L1571.43 690.423 L1571.99 690.423 L1572.55 690.423 L1573.1 690.423 L1573.66 690.423 L1574.22 690.423 L1574.78 690.423 L1575.34 690.423 L1575.9 690.423 L1576.46 690.423 L1577.02 690.423 L1577.58 690.423 L1578.14 690.423 L1578.7 690.423 L1579.26 690.423 L1579.82 690.423 L1580.37 690.423 L1580.93 690.423 L1581.49 690.423 L1582.05 690.423 L1582.61 690.423 L1583.17 690.423 L1583.73 690.423 L1584.29 690.423 L1584.85 690.423 L1585.41 690.423 L1585.97 690.423 L1586.53 690.423 L1587.09 690.423 L1587.65 690.423 L1588.2 690.423 L1588.76 690.423 L1589.32 690.423 L1589.88 690.423 L1590.44 690.423 L1591 690.423 L1591.56 690.423 L1592.12 690.423 L1592.68 690.423 L1593.24 690.423 L1593.8 690.423 L1594.36 690.423 L1594.92 690.423 L1595.47 690.423 L1596.03 690.423 L1596.59 690.423 L1597.15 690.423 L1597.71 690.423 L1598.27 690.423 L1598.83 690.423 L1599.39 690.423 L1599.95 690.423 L1600.51 690.423 L1601.07 690.423 L1601.63 690.423 L1602.19 690.423 L1602.74 690.423 L1603.3 690.423 L1603.86 690.423 L1604.42 690.423 L1604.98 690.423 L1605.54 690.423 L1606.1 690.423 L1606.66 690.423 L1607.22 690.423 L1607.78 690.423 L1608.34 690.423 L1608.9 690.423 L1609.46 690.423 L1610.02 690.423 L1610.57 690.423 L1611.13 690.423 L1611.69 690.423 L1612.25 690.423 L1612.81 690.423 L1613.37 690.423 L1613.93 690.423 L1614.49 690.423 L1615.05 690.423 L1615.61 690.423 L1616.17 690.423 L1616.73 690.423 L1617.29 690.423 L1617.84 690.423 L1618.4 690.423 L1618.96 690.423 L1619.52 690.423 L1620.08 690.423 L1620.64 690.423 L1621.2 690.423 L1621.76 690.423 L1622.32 690.423 L1622.88 690.423 L1623.44 690.423 L1624 690.423 L1624.56 690.423 L1625.11 690.423 L1625.67 690.423 L1626.23 690.423 L1626.79 690.423 L1627.35 690.423 L1627.91 690.423 L1628.47 690.423 L1629.03 690.423 L1629.59 690.423 L1630.15 690.423 L1630.71 690.423 L1631.27 690.423 L1631.83 690.423 L1632.39 690.423 L1632.94 690.423 L1633.5 690.423 L1634.06 690.423 L1634.62 690.423 L1635.18 690.423 L1635.74 690.423 L1636.3 690.423 L1636.86 690.423 L1637.42 690.423 L1637.98 690.423 L1638.54 690.423 L1639.1 690.423 L1639.66 690.423 L1640.21 690.423 L1640.77 690.423 L1641.33 690.423 L1641.89 690.423 L1642.45 690.423 L1643.01 690.423 L1643.57 690.423 L1644.13 690.423 L1644.69 690.423 L1645.25 690.423 L1645.81 690.423 L1646.37 690.423 L1646.93 690.423 L1647.48 690.423 L1648.04 690.423 L1648.6 690.423 L1649.16 690.423 L1649.72 690.423 L1650.28 690.423 L1650.84 690.423 L1651.4 690.423 L1651.96 690.423 L1652.52 690.423 L1653.08 690.423 L1653.64 690.423 L1654.2 690.423 L1654.76 690.423 L1655.31 690.423 L1655.87 690.423 L1656.43 690.423 L1656.99 690.423 L1657.55 690.423 L1658.11 690.423 L1658.67 690.423 L1659.23 690.423 L1659.79 690.423 L1660.35 690.423 L1660.91 690.423 L1661.47 690.423 L1662.03 690.423 L1662.58 690.423 L1663.14 690.423 L1663.7 690.423 L1664.26 690.423 L1664.82 690.423 L1665.38 690.423 L1665.94 690.423 L1666.5 690.423 L1667.06 690.423 L1667.62 690.423 L1668.18 690.423 L1668.74 690.423 L1669.3 690.423 L1669.85 690.423 L1670.41 690.423 L1670.97 690.423 L1671.53 690.423 L1672.09 690.423 L1672.65 690.423 L1673.21 690.423 L1673.77 690.423 L1674.33 690.423 L1674.89 690.423 L1675.45 690.423 L1676.01 690.423 L1676.57 690.423 L1677.13 690.423 L1677.68 690.423 L1678.24 690.423 L1678.8 690.423 L1679.36 690.423 L1679.92 690.423 L1680.48 690.423 L1681.04 690.423 L1681.6 690.423 L1682.16 690.423 L1682.72 690.423 L1683.28 690.423 L1683.84 690.423 L1684.4 690.423 L1684.95 690.423 L1685.51 690.423 L1686.07 690.423 L1686.63 690.423 L1687.19 690.423 L1687.75 690.423 L1688.31 690.423 L1688.87 690.423 L1689.43 690.423 L1689.99 690.423 L1690.55 690.423 L1691.11 690.423 L1691.67 690.423 L1692.23 690.423 L1692.78 690.423 L1693.34 690.423 L1693.9 690.423 L1694.46 690.423 L1695.02 690.423 L1695.58 690.423 L1696.14 690.423 L1696.7 690.423 L1697.26 690.423 L1697.82 690.423 L1698.38 690.423 L1698.94 690.423 L1699.5 690.423 L1700.05 690.423 L1700.61 690.423 L1701.17 690.423 L1701.73 690.423 L1702.29 690.423 L1702.85 690.423 L1703.41 690.423 L1703.97 690.423 L1704.53 690.423 L1705.09 690.423 L1705.65 690.423 L1706.21 690.423 L1706.77 690.423 L1707.32 690.423 L1707.88 690.423 L1708.44 690.423 L1709 690.423 L1709.56 690.423 L1710.12 690.423 L1710.68 690.423 L1711.24 690.423 L1711.8 690.423 L1712.36 690.423 L1712.92 690.423 L1713.48 690.423 L1714.04 690.423 L1714.6 690.423 L1715.15 690.423 L1715.71 690.423 L1716.27 690.423 L1716.83 690.423 L1717.39 690.423 L1717.95 690.423 L1718.51 690.423 L1719.07 690.423 L1719.63 690.423 L1720.19 690.423 L1720.75 690.423 L1721.31 690.423 L1721.87 690.423 L1722.42 690.423 L1722.98 690.423 L1723.54 690.423 L1724.1 690.423 L1724.66 690.423 L1725.22 690.423 L1725.78 690.423 L1726.34 690.423 L1726.9 690.423 L1727.46 690.423 L1728.02 690.423 L1728.58 690.423 L1729.14 690.423 L1729.69 690.423 L1730.25 690.423 L1730.81 690.423 L1731.37 690.423 L1731.93 690.423 L1732.49 690.423 L1733.05 690.423 L1733.61 690.423 L1734.17 690.423 L1734.73 690.423 L1735.29 690.423 L1735.85 690.423 L1736.41 690.423 L1736.97 690.423 L1737.52 690.423 L1738.08 690.423 L1738.64 690.423 L1739.2 690.423 L1739.76 690.423 L1740.32 690.423 L1740.88 690.423 L1741.44 690.423 L1742 690.423 L1742.56 690.423 L1743.12 690.423 L1743.68 690.423 L1744.24 690.423 L1744.79 690.423 L1745.35 690.423 L1745.91 690.423 L1746.47 690.423 L1747.03 690.423 L1747.59 690.423 L1748.15 690.423 L1748.71 690.423 L1749.27 690.423 L1749.83 690.423 L1750.39 690.423 L1750.95 690.423 L1751.51 690.423 L1752.06 690.423 L1752.62 690.423 L1753.18 690.423 L1753.74 690.423 L1754.3 690.423 L1754.86 690.423 L1755.42 690.423 L1755.98 690.423 L1756.54 690.423 L1757.1 690.423 L1757.66 690.423 L1758.22 690.423 L1758.78 690.423 L1759.34 690.423 L1759.89 690.423 L1760.45 690.423 L1761.01 690.423 L1761.57 690.423 L1762.13 690.423 L1762.69 690.423 L1763.25 690.423 L1763.81 690.423 L1764.37 690.423 L1764.93 690.423 L1765.49 690.423 L1766.05 690.423 L1766.61 690.423 L1767.16 690.423 L1767.72 690.423 L1768.28 690.423 L1768.84 690.423 L1769.4 690.423 L1769.96 690.423 L1770.52 690.423 L1771.08 690.423 L1771.64 690.423 L1772.2 690.423 L1772.76 690.423 L1773.32 690.423 L1773.88 690.423 L1774.43 690.423 L1774.99 690.423 L1775.55 690.423 L1776.11 690.423 L1776.67 690.423 L1777.23 690.423 L1777.79 690.423 L1778.35 690.423 L1778.91 690.423 L1779.47 690.423 L1780.03 690.423 L1780.59 690.423 L1781.15 690.423 L1781.71 690.423 L1782.26 690.423 L1782.82 690.423 L1783.38 690.423 L1783.94 690.423 L1784.5 690.423 L1785.06 690.423 L1785.62 690.423 L1786.18 690.423 L1786.74 690.423 L1787.3 690.423 L1787.86 690.423 L1788.42 690.423 L1788.98 690.423 L1789.53 690.423 L1790.09 690.423 L1790.65 690.423 L1791.21 690.423 L1791.77 690.423 L1792.33 690.423 L1792.89 690.423 L1793.45 690.423 L1794.01 690.423 L1794.57 690.423 L1795.13 690.423 L1795.69 690.423 L1796.25 690.423 L1796.8 690.423 L1797.36 690.423 L1797.92 690.423 L1798.48 690.423 L1799.04 690.423 L1799.6 690.423 L1800.16 690.423 L1800.72 690.423 L1801.28 690.423 L1801.84 690.423 L1802.4 690.423 L1802.96 690.423 L1803.52 690.423 L1804.08 690.423 L1804.63 690.423 L1805.19 690.423 L1805.75 690.423 L1806.31 690.423 L1806.87 690.423 L1807.43 690.423 L1807.99 690.423 L1808.55 690.423 L1809.11 690.423 L1809.67 690.423 L1810.23 690.423 L1810.79 690.423 L1811.35 690.423 L1811.9 690.423 L1812.46 690.423 L1813.02 690.423 L1813.58 690.423 L1814.14 690.423 L1814.7 690.423 L1815.26 690.423 L1815.82 690.423 L1816.38 690.423 L1816.94 690.423 L1817.5 690.423 L1818.06 690.423 L1818.62 690.423 L1819.18 690.423 L1819.73 690.423 L1820.29 690.423 L1820.85 690.423 L1821.41 690.423 L1821.97 690.423 L1822.53 690.423 L1823.09 690.423 L1823.65 690.423 L1824.21 690.423 L1824.77 690.423 L1825.33 690.423 L1825.89 690.423 L1826.45 690.423 L1827 690.423 L1827.56 690.423 L1828.12 690.423 L1828.68 690.423 L1829.24 690.423 L1829.8 690.423 L1830.36 690.423 L1830.92 690.423 L1831.48 690.423 L1832.04 690.423 L1832.6 690.423 L1833.16 690.423 L1833.72 690.423 L1834.27 690.423 L1834.83 690.423 L1835.39 690.423 L1835.95 690.423 L1836.51 690.423 L1837.07 690.423 L1837.63 690.423 L1838.19 690.423 L1838.19 680.998 L1837.63 680.998 L1837.07 680.998 L1836.51 680.998 L1835.95 680.998 L1835.39 680.998 L1834.83 680.998 L1834.27 680.998 L1833.72 680.998 L1833.16 680.998 L1832.6 680.998 L1832.04 680.998 L1831.48 680.998 L1830.92 680.998 L1830.36 680.998 L1829.8 680.998 L1829.24 680.998 L1828.68 680.998 L1828.12 680.998 L1827.56 680.998 L1827 680.998 L1826.45 680.998 L1825.89 680.998 L1825.33 680.998 L1824.77 680.998 L1824.21 680.998 L1823.65 680.998 L1823.09 680.998 L1822.53 680.998 L1821.97 680.998 L1821.41 680.998 L1820.85 680.998 L1820.29 680.998 L1819.73 680.998 L1819.18 680.998 L1818.62 680.998 L1818.06 680.998 L1817.5 680.998 L1816.94 680.998 L1816.38 680.998 L1815.82 680.998 L1815.26 680.998 L1814.7 680.998 L1814.14 680.998 L1813.58 680.998 L1813.02 680.998 L1812.46 680.998 L1811.9 680.998 L1811.35 680.998 L1810.79 680.998 L1810.23 680.998 L1809.67 680.998 L1809.11 680.998 L1808.55 680.998 L1807.99 680.998 L1807.43 680.998 L1806.87 680.998 L1806.31 680.998 L1805.75 680.998 L1805.19 680.998 L1804.63 680.998 L1804.08 680.998 L1803.52 680.998 L1802.96 680.998 L1802.4 680.998 L1801.84 680.998 L1801.28 680.998 L1800.72 680.998 L1800.16 680.998 L1799.6 680.998 L1799.04 680.998 L1798.48 680.998 L1797.92 680.998 L1797.36 680.998 L1796.8 680.998 L1796.25 680.998 L1795.69 680.998 L1795.13 680.998 L1794.57 680.998 L1794.01 680.998 L1793.45 680.998 L1792.89 680.998 L1792.33 680.998 L1791.77 680.998 L1791.21 680.998 L1790.65 680.998 L1790.09 680.998 L1789.53 680.998 L1788.98 680.998 L1788.42 680.998 L1787.86 680.998 L1787.3 680.998 L1786.74 680.998 L1786.18 680.998 L1785.62 680.998 L1785.06 680.998 L1784.5 680.998 L1783.94 680.998 L1783.38 680.998 L1782.82 680.998 L1782.26 680.998 L1781.71 680.998 L1781.15 680.998 L1780.59 680.998 L1780.03 680.998 L1779.47 680.998 L1778.91 680.998 L1778.35 680.998 L1777.79 680.998 L1777.23 680.998 L1776.67 680.998 L1776.11 680.998 L1775.55 680.998 L1774.99 680.998 L1774.43 680.998 L1773.88 680.998 L1773.32 680.998 L1772.76 680.998 L1772.2 680.998 L1771.64 680.998 L1771.08 680.998 L1770.52 680.998 L1769.96 680.998 L1769.4 680.998 L1768.84 680.998 L1768.28 680.998 L1767.72 680.998 L1767.16 680.998 L1766.61 680.998 L1766.05 680.998 L1765.49 680.998 L1764.93 680.998 L1764.37 680.998 L1763.81 680.998 L1763.25 680.998 L1762.69 680.998 L1762.13 680.998 L1761.57 680.998 L1761.01 680.998 L1760.45 680.998 L1759.89 680.998 L1759.34 680.998 L1758.78 680.998 L1758.22 680.998 L1757.66 680.998 L1757.1 680.998 L1756.54 680.998 L1755.98 680.998 L1755.42 680.998 L1754.86 680.998 L1754.3 680.998 L1753.74 680.998 L1753.18 680.998 L1752.62 680.998 L1752.06 680.998 L1751.51 680.998 L1750.95 680.998 L1750.39 680.998 L1749.83 680.998 L1749.27 680.998 L1748.71 680.998 L1748.15 680.998 L1747.59 680.998 L1747.03 680.998 L1746.47 680.998 L1745.91 680.998 L1745.35 680.998 L1744.79 680.998 L1744.24 680.998 L1743.68 680.998 L1743.12 680.998 L1742.56 680.998 L1742 680.998 L1741.44 680.998 L1740.88 680.998 L1740.32 680.998 L1739.76 680.998 L1739.2 680.998 L1738.64 680.998 L1738.08 680.998 L1737.52 680.998 L1736.97 680.998 L1736.41 680.998 L1735.85 680.998 L1735.29 680.998 L1734.73 680.998 L1734.17 680.998 L1733.61 680.998 L1733.05 680.998 L1732.49 680.998 L1731.93 680.998 L1731.37 680.998 L1730.81 680.998 L1730.25 680.998 L1729.69 680.998 L1729.14 680.998 L1728.58 680.998 L1728.02 680.998 L1727.46 680.998 L1726.9 680.998 L1726.34 680.998 L1725.78 680.998 L1725.22 680.998 L1724.66 680.998 L1724.1 680.998 L1723.54 680.998 L1722.98 680.998 L1722.42 680.998 L1721.87 680.998 L1721.31 680.998 L1720.75 680.998 L1720.19 680.998 L1719.63 680.998 L1719.07 680.998 L1718.51 680.998 L1717.95 680.998 L1717.39 680.998 L1716.83 680.998 L1716.27 680.998 L1715.71 680.998 L1715.15 680.998 L1714.6 680.998 L1714.04 680.998 L1713.48 680.998 L1712.92 680.998 L1712.36 680.998 L1711.8 680.998 L1711.24 680.998 L1710.68 680.998 L1710.12 680.998 L1709.56 680.998 L1709 680.998 L1708.44 680.998 L1707.88 680.998 L1707.32 680.998 L1706.77 680.998 L1706.21 680.998 L1705.65 680.998 L1705.09 680.998 L1704.53 680.998 L1703.97 680.998 L1703.41 680.998 L1702.85 680.998 L1702.29 680.998 L1701.73 680.998 L1701.17 680.998 L1700.61 680.998 L1700.05 680.998 L1699.5 680.998 L1698.94 680.998 L1698.38 680.998 L1697.82 680.998 L1697.26 680.998 L1696.7 680.998 L1696.14 680.998 L1695.58 680.998 L1695.02 680.998 L1694.46 680.998 L1693.9 680.998 L1693.34 680.998 L1692.78 680.998 L1692.23 680.998 L1691.67 680.998 L1691.11 680.998 L1690.55 680.998 L1689.99 680.998 L1689.43 680.998 L1688.87 680.998 L1688.31 680.998 L1687.75 680.998 L1687.19 680.998 L1686.63 680.998 L1686.07 680.998 L1685.51 680.998 L1684.95 680.998 L1684.4 680.998 L1683.84 680.998 L1683.28 680.998 L1682.72 680.998 L1682.16 680.998 L1681.6 680.998 L1681.04 680.998 L1680.48 680.998 L1679.92 680.998 L1679.36 680.998 L1678.8 680.998 L1678.24 680.998 L1677.68 680.998 L1677.13 680.998 L1676.57 680.998 L1676.01 680.998 L1675.45 680.998 L1674.89 680.998 L1674.33 680.998 L1673.77 680.998 L1673.21 680.998 L1672.65 680.998 L1672.09 680.998 L1671.53 680.998 L1670.97 680.998 L1670.41 680.998 L1669.85 680.998 L1669.3 680.998 L1668.74 680.998 L1668.18 680.998 L1667.62 680.998 L1667.06 680.998 L1666.5 680.998 L1665.94 680.998 L1665.38 680.998 L1664.82 680.998 L1664.26 680.998 L1663.7 680.998 L1663.14 680.998 L1662.58 680.998 L1662.03 680.998 L1661.47 680.998 L1660.91 680.998 L1660.35 680.998 L1659.79 680.998 L1659.23 680.998 L1658.67 680.998 L1658.11 680.998 L1657.55 680.998 L1656.99 680.998 L1656.43 680.998 L1655.87 680.998 L1655.31 680.998 L1654.76 680.998 L1654.2 680.998 L1653.64 680.998 L1653.08 680.998 L1652.52 680.998 L1651.96 680.998 L1651.4 680.998 L1650.84 680.998 L1650.28 680.998 L1649.72 680.998 L1649.16 680.998 L1648.6 680.998 L1648.04 680.998 L1647.48 680.998 L1646.93 680.998 L1646.37 680.998 L1645.81 680.998 L1645.25 680.998 L1644.69 680.998 L1644.13 680.998 L1643.57 680.998 L1643.01 680.998 L1642.45 680.998 L1641.89 680.998 L1641.33 680.998 L1640.77 680.998 L1640.21 680.998 L1639.66 680.998 L1639.1 680.998 L1638.54 680.998 L1637.98 680.998 L1637.42 680.998 L1636.86 680.998 L1636.3 680.998 L1635.74 680.998 L1635.18 680.998 L1634.62 680.998 L1634.06 680.998 L1633.5 680.998 L1632.94 680.998 L1632.39 680.998 L1631.83 680.998 L1631.27 680.998 L1630.71 680.998 L1630.15 680.998 L1629.59 680.998 L1629.03 680.998 L1628.47 680.998 L1627.91 680.998 L1627.35 680.998 L1626.79 680.998 L1626.23 680.998 L1625.67 680.998 L1625.11 680.998 L1624.56 680.998 L1624 680.998 L1623.44 680.998 L1622.88 680.998 L1622.32 680.998 L1621.76 680.998 L1621.2 680.998 L1620.64 680.998 L1620.08 680.998 L1619.52 680.998 L1618.96 680.998 L1618.4 680.998 L1617.84 680.998 L1617.29 680.998 L1616.73 680.998 L1616.17 680.998 L1615.61 680.998 L1615.05 680.998 L1614.49 680.998 L1613.93 680.998 L1613.37 680.998 L1612.81 680.998 L1612.25 680.998 L1611.69 680.998 L1611.13 680.998 L1610.57 680.998 L1610.02 680.998 L1609.46 680.998 L1608.9 680.998 L1608.34 680.998 L1607.78 680.998 L1607.22 680.998 L1606.66 680.998 L1606.1 680.998 L1605.54 680.998 L1604.98 680.998 L1604.42 680.998 L1603.86 680.998 L1603.3 680.998 L1602.74 680.998 L1602.19 680.998 L1601.63 680.998 L1601.07 680.998 L1600.51 680.998 L1599.95 680.998 L1599.39 680.998 L1598.83 680.998 L1598.27 680.998 L1597.71 680.998 L1597.15 680.998 L1596.59 680.998 L1596.03 680.998 L1595.47 680.998 L1594.92 680.998 L1594.36 680.998 L1593.8 680.998 L1593.24 680.998 L1592.68 680.998 L1592.12 680.998 L1591.56 680.998 L1591 680.998 L1590.44 680.998 L1589.88 680.998 L1589.32 680.998 L1588.76 680.998 L1588.2 680.998 L1587.65 680.998 L1587.09 680.998 L1586.53 680.998 L1585.97 680.998 L1585.41 680.998 L1584.85 680.998 L1584.29 680.998 L1583.73 680.998 L1583.17 680.998 L1582.61 680.998 L1582.05 680.998 L1581.49 680.998 L1580.93 680.998 L1580.37 680.998 L1579.82 680.998 L1579.26 680.998 L1578.7 680.998 L1578.14 680.998 L1577.58 680.998 L1577.02 680.998 L1576.46 680.998 L1575.9 680.998 L1575.34 680.998 L1574.78 680.998 L1574.22 680.998 L1573.66 680.998 L1573.1 680.998 L1572.55 680.998 L1571.99 680.998 L1571.43 680.998 L1570.87 680.998 L1570.31 680.998 L1569.75 680.998 L1569.19 680.998 L1568.63 680.998 L1568.07 680.998 L1567.51 680.998 L1566.95 680.998 L1566.39 680.998 L1565.83 680.998 L1565.28 680.998 L1564.72 680.998 L1564.16 680.998 L1563.6 680.998 L1563.04 680.998 L1562.48 680.998 L1561.92 680.998 L1561.36 680.998 L1560.8 680.998 L1560.24 680.998 L1559.68 680.998 L1559.12 680.998 L1558.56 680.998 L1558 680.998 L1557.45 680.998 L1556.89 680.998 L1556.33 680.998 L1555.77 680.998 L1555.21 680.998 L1554.65 680.998 L1554.09 680.998 L1553.53 680.998 L1552.97 680.998 L1552.41 680.998 L1551.85 680.998 L1551.29 680.998 L1550.73 680.998 L1550.18 680.998 L1549.62 680.998 L1549.06 680.998 L1548.5 680.998 L1547.94 680.998 L1547.38 680.998 L1546.82 680.998 L1546.26 680.998 L1545.7 680.998 L1545.14 680.998 L1544.58 680.998 L1544.02 680.998 L1543.46 680.998 L1542.9 680.998 L1542.35 680.998 L1541.79 680.998 L1541.23 680.998 L1540.67 680.998 L1540.11 680.998 L1539.55 680.998 L1538.99 680.998 L1538.43 680.998 L1537.87 680.998 L1537.31 680.998 L1536.75 680.998 L1536.19 680.998 L1535.63 680.998 L1535.08 680.998 L1534.52 680.998 L1533.96 680.998 L1533.4 680.998 L1532.84 680.998 L1532.28 680.998 L1531.72 680.998 L1531.16 680.998 L1530.6 680.998 L1530.04 680.998 L1529.48 680.998 L1528.92 680.998 L1528.36 680.998 L1527.81 680.998 L1527.25 680.998 L1526.69 680.998 L1526.13 680.998 L1525.57 680.998 L1525.01 680.998 L1524.45 680.998 L1523.89 680.998 L1523.33 680.998 L1522.77 680.998 L1522.21 680.998 L1521.65 680.998 L1521.09 680.998 L1520.53 680.998 L1519.98 680.998 L1519.42 680.998 L1518.86 680.998 L1518.3 680.998 L1517.74 680.998 L1517.18 680.998 L1516.62 680.998 L1516.06 680.998 L1515.5 680.998 L1514.94 680.998 L1514.38 680.998 L1513.82 680.998 L1513.26 680.998 L1512.71 680.998 L1512.15 680.998 L1511.59 680.998 L1511.03 680.998 L1510.47 680.998 L1509.91 680.998 L1509.35 680.998 L1508.79 680.998 L1508.23 680.998 L1507.67 680.998 L1507.11 680.998 L1506.55 680.998 L1505.99 680.998 L1505.44 680.998 L1504.88 680.998 L1504.32 680.998 L1503.76 680.998 L1503.2 680.998 L1502.64 680.998 L1502.08 680.998 L1501.52 680.998 L1500.96 680.998 L1500.4 680.998 L1499.84 680.998 L1499.28 680.998 L1498.72 680.998 L1498.16 680.998 L1497.61 680.998 L1497.05 680.998 L1496.49 680.998 L1495.93 680.998 L1495.37 680.998 L1494.81 680.998 L1494.25 680.998 L1493.69 680.998 L1493.13 680.998 L1492.57 680.998 L1492.01 680.998 L1491.45 680.998 L1490.89 680.998 L1490.34 680.998 L1489.78 680.998 L1489.22 680.998 L1488.66 680.998 L1488.1 680.998 L1487.54 680.998 L1486.98 680.998 L1486.42 680.998 L1485.86 680.998 L1485.3 680.998 L1484.74 680.998 L1484.18 680.998 L1483.62 680.998 L1483.07 680.998 L1482.51 680.998 L1481.95 680.998 L1481.39 680.998 L1480.83 680.998 L1480.27 680.998 L1479.71 680.998 L1479.15 680.998 L1478.59 680.998 L1478.03 680.998 L1477.47 680.998 L1476.91 680.998 L1476.35 680.998 L1475.79 680.998 L1475.24 680.998 L1474.68 680.998 L1474.12 680.998 L1473.56 680.998 L1473 680.998 L1472.44 680.998 L1471.88 680.998 L1471.32 680.998 L1470.76 680.998 L1470.2 680.998 L1469.64 680.998 L1469.08 680.998 L1468.52 680.998 L1467.97 680.998 L1467.41 680.998 L1466.85 680.998 L1466.29 680.998 L1465.73 680.998 L1465.17 680.998 L1464.61 680.998 L1464.05 680.998 L1463.49 680.998 L1462.93 680.998 L1462.37 680.998 L1461.81 680.998 L1461.25 680.998 L1460.7 680.998 L1460.14 680.998 L1459.58 680.998 L1459.02 680.998 L1458.46 680.998 L1457.9 680.998 L1457.34 680.998 L1456.78 680.998 L1456.22 680.998 L1455.66 680.998 L1455.1 680.998 L1454.54 680.998 L1453.98 680.998 L1453.42 680.998 L1452.87 680.998 L1452.31 680.998 L1451.75 680.998 L1451.19 680.998 L1450.63 680.998 L1450.07 680.998 L1449.51 680.998 L1448.95 680.998 L1448.39 680.998 L1447.83 680.998 L1447.27 680.998 L1446.71 680.998 L1446.15 680.998 L1445.6 680.998 L1445.04 680.998 L1444.48 680.998 L1443.92 680.998 L1443.36 680.998 L1442.8 680.998 L1442.24 680.998 L1441.68 680.998 L1441.12 680.998 L1440.56 680.998 L1440 680.998 L1439.44 680.998 L1438.88 680.998 L1438.33 680.998 L1437.77 680.998 L1437.21 680.998 L1436.65 680.998 L1436.09 680.998 L1435.53 680.998 L1434.97 680.998 L1434.41 680.998 L1433.85 680.998 L1433.29 680.998 L1432.73 680.998 L1432.17 680.998 L1431.61 680.998 L1431.05 680.998 L1430.5 680.998 L1429.94 680.998 L1429.38 680.998 L1428.82 680.998 L1428.26 680.998 L1427.7 680.998 L1427.14 680.998 L1426.58 680.998 L1426.02 680.998 L1425.46 680.998 L1424.9 680.998 L1424.34 680.998 L1423.78 680.998 L1423.23 680.998 L1422.67 680.998 L1422.11 680.998 L1421.55 680.998 L1420.99 680.998 L1420.43 680.998 L1419.87 680.998 L1419.31 680.998 L1418.75 680.998 L1418.19 680.998 L1417.63 680.998 L1417.07 680.998 L1416.51 680.998 L1415.95 680.998 L1415.4 680.998 L1414.84 680.998 L1414.28 680.998 L1413.72 680.998 L1413.16 680.998 L1412.6 680.998 L1412.04 680.998 L1411.48 680.998 L1410.92 680.998 L1410.36 680.998 L1409.8 680.998 L1409.24 680.998 L1408.68 680.998 L1408.13 680.998 L1407.57 680.998 L1407.01 680.998 L1406.45 680.998 L1405.89 680.998 L1405.33 680.998 L1404.77 680.998 L1404.21 680.998 L1403.65 680.998 L1403.09 680.998 L1402.53 680.998 L1401.97 680.998 L1401.41 680.998 L1400.86 680.998 L1400.3 680.998 L1399.74 680.998 L1399.18 680.998 L1398.62 680.998 L1398.06 680.998 L1397.5 680.998 L1396.94 680.998 L1396.38 680.998 L1395.82 680.998 L1395.26 680.998 L1394.7 680.998 L1394.14 680.998 L1393.58 680.998 L1393.03 680.998 L1392.47 680.998 L1391.91 680.998 L1391.35 680.998 L1390.79 680.998 L1390.23 680.998 L1389.67 680.998 L1389.11 680.998 L1388.55 680.998 L1387.99 680.998 L1387.43 680.998 L1386.87 680.998 L1386.31 680.998 L1385.76 680.998 L1385.2 680.998 L1384.64 680.998 L1384.08 680.998 L1383.52 680.998 L1382.96 680.998 L1382.4 680.998 L1381.84 680.998 L1381.28 680.998 L1380.72 680.998 L1380.16 680.998 L1379.6 680.998 L1379.04 680.998 L1378.49 680.998 L1377.93 680.998 L1377.37 680.998 L1376.81 680.998 L1376.25 680.998 L1375.69 680.998 L1375.13 680.998 L1374.57 680.998 L1374.01 680.998 L1373.45 680.998 L1372.89 680.998 L1372.33 680.998 L1371.77 680.998 L1371.21 680.998 L1370.66 680.998 L1370.1 680.998 L1369.54 680.998 L1368.98 680.998 L1368.42 680.998 L1367.86 680.998 L1367.3 680.998 L1366.74 680.998 L1366.18 680.998 L1365.62 680.998 L1365.06 680.998 L1364.5 680.998 L1363.94 680.998 L1363.39 680.998 L1362.83 680.998 L1362.27 680.998 L1361.71 680.998 L1361.15 680.998 L1360.59 680.998 L1360.03 680.998 L1359.47 680.998 L1358.91 680.998 L1358.35 680.998 L1357.79 680.998 L1357.23 680.998 L1356.67 680.998 L1356.12 680.998 L1355.56 680.998 L1355 680.998 L1354.44 680.998 L1353.88 680.998 L1353.32 680.998 L1352.76 680.998 L1352.2 680.998 L1351.64 680.998 L1351.08 680.998 L1350.52 680.998 L1349.96 680.998 L1349.4 680.998 L1348.84 680.998 L1348.29 680.998 L1347.73 680.998 L1347.17 680.998 L1346.61 680.998 L1346.05 680.998 L1345.49 680.998 L1344.93 680.998 L1344.37 680.998 L1343.81 680.998 L1343.25 680.998 L1342.69 680.998 L1342.13 680.998 L1341.57 680.998 L1341.02 680.998 L1340.46 680.998 L1339.9 680.998 L1339.34 680.998 L1338.78 680.998 L1338.22 680.998 L1337.66 680.998 L1337.1 680.998 L1336.54 680.998 L1335.98 680.998 L1335.42 680.998 L1334.86 680.998 L1334.3 680.998 L1333.75 680.998 L1333.19 680.998 L1332.63 680.998 L1332.07 680.998 L1331.51 680.998 L1330.95 680.998 L1330.39 680.998 L1329.83 680.998 L1329.27 680.998 L1328.71 680.998 L1328.15 680.998 L1327.59 680.998 L1327.03 680.998 L1326.47 680.998 L1325.92 680.998 L1325.36 680.998 L1324.8 680.998 L1324.24 680.998 L1323.68 680.998 L1323.12 680.998 L1322.56 680.998 L1322 680.998 L1321.44 680.998 L1320.88 680.998 L1320.32 680.998 L1319.76 680.998 L1319.2 680.998 L1318.65 680.998 L1318.09 680.998 L1317.53 680.998 L1316.97 680.998 L1316.41 680.998 L1315.85 680.998 L1315.29 680.998 L1314.73 680.998 L1314.17 680.998 L1313.61 680.998 L1313.05 680.998 L1312.49 680.998 L1311.93 680.998 L1311.38 680.998 L1310.82 680.998 L1310.26 680.998 L1309.7 680.998 L1309.14 680.998 L1308.58 680.998 L1308.02 680.998 L1307.46 680.998 L1306.9 680.998 L1306.34 680.998 L1305.78 680.998 L1305.22 680.998 L1304.66 680.998 L1304.1 680.998 L1303.55 680.998 L1302.99 680.998 L1302.43 680.998 L1301.87 680.998 L1301.31 680.998 L1300.75 680.998 L1300.19 680.998 L1299.63 680.998 L1299.07 680.998 L1298.51 680.998 L1297.95 680.998 L1297.39 680.998 L1296.83 680.998 L1296.28 680.998 L1295.72 680.998 L1295.16 680.998 L1294.6 680.998 L1294.04 680.998 L1293.48 680.998 L1292.92 680.998 L1292.36 680.998 L1291.8 680.998 L1291.24 680.998 L1290.68 680.998 L1290.12 680.998 L1289.56 680.998 L1289 680.998 L1288.45 680.998 L1287.89 680.998 L1287.33 680.998 L1286.77 680.998 L1286.21 680.998 L1285.65 680.998 L1285.09 680.998 L1284.53 680.998 L1283.97 680.998 L1283.41 680.998 L1282.85 680.998 L1282.29 680.998 L1281.73 680.998 L1281.18 680.998 L1280.62 680.998 L1280.06 680.998 L1279.5 680.998 L1278.94 680.998 L1278.38 680.998 L1277.82 680.998 L1277.26 680.998 L1276.7 680.998 L1276.14 680.998 L1275.58 680.998 L1275.02 680.998 L1274.46 680.998 L1273.91 680.998 L1273.35 680.998 L1272.79 680.998 L1272.23 680.998 L1271.67 680.998 L1271.11 680.998 L1270.55 680.998 L1269.99 680.998 L1269.43 680.998 L1268.87 680.998 L1268.31 680.998 L1267.75 680.998 L1267.19 680.998 L1266.63 680.998 L1266.08 680.998 L1265.52 680.998 L1264.96 680.998 L1264.4 680.998 L1263.84 680.998 L1263.28 680.998 L1262.72 680.998 L1262.16 680.998 L1261.6 680.998 L1261.04 680.998 L1260.48 680.998 L1259.92 680.998 L1259.36 680.998 L1258.81 680.998 L1258.25 680.998 L1257.69 680.998 L1257.13 680.998 L1256.57 680.998 L1256.01 680.998 L1255.45 680.998 L1254.89 680.998 L1254.33 680.998 L1253.77 680.998 L1253.21 680.998 L1252.65 680.998 L1252.09 680.998 L1251.54 680.998 L1250.98 680.998 L1250.42 680.998 L1249.86 680.998 L1249.3 680.998 L1248.74 680.998 L1248.18 680.998 L1247.62 680.998 L1247.06 680.998 L1246.5 680.998 L1245.94 680.998 L1245.38 680.998 L1244.82 680.998 L1244.26 680.998 L1243.71 680.998 L1243.15 680.998 L1242.59 680.998 L1242.03 680.998 L1241.47 680.998 L1240.91 680.998 L1240.35 680.998 L1239.79 680.998 L1239.23 680.998 L1238.67 680.998 L1238.11 680.998 L1237.55 680.998 L1236.99 680.998 L1236.44 680.998 L1235.88 680.998 L1235.32 680.998 L1234.76 680.998 L1234.2 680.998 L1233.64 680.998 L1233.08 680.998 L1232.52 680.998 L1231.96 680.998 L1231.4 680.998 L1230.84 680.998 L1230.28 680.998 L1229.72 680.998 L1229.17 680.998 L1228.61 680.998 L1228.05 680.998 L1227.49 680.998 L1226.93 680.998 L1226.37 680.998 L1225.81 680.998 L1225.25 680.998 L1224.69 680.998 L1224.13 680.998 L1223.57 680.998 L1223.01 680.998 L1222.45 680.998 L1221.89 680.998 L1221.34 680.998 L1220.78 680.998 L1220.22 680.998 L1219.66 680.998 L1219.1 680.998 L1218.54 680.998 L1217.98 680.998 L1217.42 680.998 L1216.86 680.998 L1216.3 680.998 L1215.74 680.998 L1215.18 680.998 L1214.62 680.998 L1214.07 680.998 L1213.51 680.998 L1212.95 680.998 L1212.39 680.998 L1211.83 680.998 L1211.27 680.998 L1210.71 680.998 L1210.15 680.998 L1209.59 680.998 L1209.03 680.998 L1208.47 680.998 L1207.91 680.998 L1207.35 680.998 L1206.8 680.998 L1206.24 680.998 L1205.68 680.998 L1205.12 680.998 L1204.56 680.998 L1204 680.998 L1203.44 680.998 L1202.88 680.998 L1202.32 680.998 L1201.76 680.998 L1201.2 680.998 L1200.64 680.998 L1200.08 680.998 L1199.52 680.998 L1198.97 680.998 L1198.41 680.998 L1197.85 680.998 L1197.29 680.998 L1196.73 680.998 L1196.17 680.998 L1195.61 680.998 L1195.05 680.998 L1194.49 680.998 L1193.93 680.998 L1193.37 680.998 L1192.81 680.998 L1192.25 680.998 L1191.7 680.998 L1191.14 680.998 L1190.58 680.998 L1190.02 680.998 L1189.46 680.998 L1188.9 680.998 L1188.34 680.998 L1187.78 680.998 L1187.22 680.998 L1186.66 680.998 L1186.1 680.998 L1185.54 680.998 L1184.98 680.998 L1184.43 680.998 L1183.87 680.998 L1183.31 680.998 L1182.75 680.998 L1182.19 680.998 L1181.63 680.998 L1181.07 680.998 L1180.51 680.998 L1179.95 680.998 L1179.39 680.998 L1178.83 680.998 L1178.27 680.998 L1177.71 680.998 L1177.15 680.998 L1176.6 680.998 L1176.04 680.998 L1175.48 680.998 L1174.92 680.998 L1174.36 680.998 L1173.8 680.998 L1173.24 680.998 L1172.68 680.998 L1172.12 680.998 L1171.56 680.998 L1171 680.998 L1170.44 680.998 L1169.88 680.998 L1169.33 680.998 L1168.77 680.998 L1168.21 680.998 L1167.65 680.998 L1167.09 680.998 L1166.53 680.998 L1165.97 680.998 L1165.41 680.998 L1164.85 680.998 L1164.29 680.998 L1163.73 680.998 L1163.17 680.998 L1162.61 680.998 L1162.05 680.998 L1161.5 680.998 L1160.94 680.998 L1160.38 680.998 L1159.82 680.998 L1159.26 680.998 L1158.7 680.998 L1158.14 680.998 L1157.58 680.998 L1157.02 680.998 L1156.46 680.998 L1155.9 680.998 L1155.34 680.998 L1154.78 680.998 L1154.23 680.998 L1153.67 680.998 L1153.11 680.998 L1152.55 680.998 L1151.99 680.998 L1151.43 680.998 L1150.87 680.998 L1150.31 680.998 L1149.75 680.998 L1149.19 680.998 L1148.63 680.998 L1148.07 680.998 L1147.51 680.998 L1146.96 680.998 L1146.4 680.998 L1145.84 680.998 L1145.28 680.998 L1144.72 680.998 L1144.16 680.998 L1143.6 680.998 L1143.04 680.998 L1142.48 680.998 L1141.92 680.998 L1141.36 680.998 L1140.8 680.998 L1140.24 680.998 L1139.68 680.998 L1139.13 680.998 L1138.57 680.998 L1138.01 680.998 L1137.45 680.998 L1136.89 680.998 L1136.33 680.998 L1135.77 680.998 L1135.21 680.998 L1134.65 680.998 L1134.09 680.998 L1133.53 680.998 L1132.97 680.998 L1132.41 680.998 L1131.86 680.998 L1131.3 680.998 L1130.74 680.998 L1130.18 680.998 L1129.62 680.998 L1129.06 680.998 L1128.5 680.998 L1127.94 680.998 L1127.38 680.998 L1126.82 680.998 L1126.26 680.998 L1125.7 680.998 L1125.14 680.998 L1124.59 680.998 L1124.03 680.998 L1123.47 680.998 L1122.91 680.998 L1122.35 680.998 L1121.79 680.998 L1121.23 680.998 L1120.67 680.998 L1120.11 680.998 L1119.55 680.998 L1118.99 680.998 L1118.43 680.998 L1117.87 680.998 L1117.31 680.998 L1116.76 680.998 L1116.2 680.998 L1115.64 680.998 L1115.08 680.998 L1114.52 680.998 L1113.96 680.998 L1113.4 680.998 L1112.84 680.998 L1112.28 680.998 L1111.72 680.998 L1111.16 680.998 L1110.6 680.998 L1110.04 680.998 L1109.49 680.998 L1108.93 680.998 L1108.37 680.998 L1107.81 680.998 L1107.25 680.998 L1106.69 680.998 L1106.13 680.998 L1105.57 680.998 L1105.01 680.998 L1104.45 680.998 L1103.89 680.998 L1103.33 680.998 L1102.77 680.998 L1102.22 680.998 L1101.66 680.998 L1101.1 680.998 L1100.54 680.998 L1099.98 680.998 L1099.42 680.998 L1098.86 680.998 L1098.3 680.998 L1097.74 680.998 L1097.18 680.998 L1096.62 680.998 L1096.06 680.998 L1095.5 680.998 L1094.94 680.998 L1094.39 680.998 L1093.83 680.998 L1093.27 680.998 L1092.71 680.998 L1092.15 680.998 L1091.59 680.998 L1091.03 680.998 L1090.47 680.998 L1089.91 680.998 L1089.35 680.998 L1088.79 680.998 L1088.23 680.998 L1087.67 680.998 L1087.12 680.998 L1086.56 680.998 L1086 680.998 L1085.44 680.998 L1084.88 680.998 L1084.32 680.998 L1083.76 680.998 L1083.2 680.998 L1082.64 680.998 L1082.08 680.998 L1081.52 680.998 L1080.96 680.998 L1080.4 680.998 L1079.85 680.998 L1079.29 680.998 L1078.73 680.998 L1078.17 680.998 L1077.61 680.998 L1077.05 680.998 L1076.49 680.998 L1075.93 680.998 L1075.37 680.998 L1074.81 680.998 L1074.25 680.998 L1073.69 680.998 L1073.13 680.998 L1072.57 680.998 L1072.02 680.998 L1071.46 680.998 L1070.9 680.998 L1070.34 680.998 L1069.78 680.998 L1069.22 680.998 L1068.66 680.998 L1068.1 680.998 L1067.54 680.998 L1066.98 680.998 L1066.42 680.998 L1065.86 680.998 L1065.3 680.998 L1064.75 680.998 L1064.19 680.998 L1063.63 680.998 L1063.07 680.998 L1062.51 680.998 L1061.95 680.998 L1061.39 680.998 L1060.83 680.998 L1060.27 680.998 L1059.71 680.998 L1059.15 680.998 L1058.59 680.998 L1058.03 680.998 L1057.48 680.998 L1056.92 680.998 L1056.36 680.998 L1055.8 680.998 L1055.24 680.998 L1054.68 680.998 L1054.12 680.998 L1053.56 680.998 L1053 680.998 L1052.44 680.998 L1051.88 680.998 L1051.32 680.998 L1050.76 680.998 L1050.2 680.998 L1049.65 680.998 L1049.09 680.998 L1048.53 680.998 L1047.97 680.998 L1047.41 680.998 L1046.85 680.998 L1046.29 680.998 L1045.73 680.998 L1045.17 680.998 L1044.61 680.998 L1044.05 680.998 L1043.49 680.998 L1042.93 680.998 L1042.38 680.998 L1041.82 680.998 L1041.26 680.998 L1040.7 680.998 L1040.14 680.998 L1039.58 680.998 L1039.02 680.998 L1038.46 680.998 L1037.9 680.998 L1037.34 680.998 L1036.78 680.998 L1036.22 680.998 L1035.66 680.998 L1035.1 680.998 L1034.55 680.998 L1033.99 680.998 L1033.43 680.998 L1032.87 680.998 L1032.31 680.998 L1031.75 680.998 L1031.19 680.998 L1030.63 680.998 L1030.07 680.998 L1029.51 680.998 L1028.95 680.998 L1028.39 680.998 L1027.83 680.998 L1027.28 680.998 L1026.72 680.998 L1026.16 680.998 L1025.6 680.998 L1025.04 680.998 L1024.48 680.998 L1023.92 680.998 L1023.36 680.998 L1022.8 680.998 L1022.24 680.998 L1021.68 680.998 L1021.12 680.998 L1020.56 680.998 L1020.01 680.998 L1019.45 680.998 L1018.89 680.998 L1018.33 680.998 L1017.77 680.998 L1017.21 680.998 L1016.65 680.998 L1016.09 680.998 L1015.53 680.998 L1014.97 680.998 L1014.41 680.998 L1013.85 680.998 L1013.29 680.998 L1012.73 680.998 L1012.18 680.998 L1011.62 680.998 L1011.06 680.998 L1010.5 680.998 L1009.94 680.998 L1009.38 680.998 L1008.82 680.998 L1008.26 680.998 L1007.7 680.998 L1007.14 680.998 L1006.58 680.998 L1006.02 680.998 L1005.46 680.998 L1004.91 680.998 L1004.35 680.998 L1003.79 680.998 L1003.23 680.998 L1002.67 680.998 L1002.11 680.998 L1001.55 680.998 L1000.99 680.998 L1000.43 680.998 L999.872 680.998 L999.313 680.998 L998.754 680.998 L998.194 680.998 L997.635 680.998 L997.076 680.998 L996.517 680.998 L995.957 680.998 L995.398 680.998 L994.839 680.998 L994.28 680.998 L993.72 680.998 L993.161 680.998 L992.602 680.998 L992.043 680.998 L991.483 680.998 L990.924 680.998 L990.365 680.998 L989.806 680.998 L989.246 680.998 L988.687 680.998 L988.128 680.998 L987.569 680.998 L987.009 680.998 L986.45 680.998 L985.891 680.998 L985.332 680.998 L984.772 680.998 L984.213 680.998 L983.654 680.998 L983.095 680.998 L982.535 680.998 L981.976 680.998 L981.417 680.998 L980.858 680.998 L980.298 680.998 L979.739 680.998 L979.18 680.998 L978.621 680.998 L978.061 680.998 L977.502 680.998 L976.943 680.998 L976.384 680.998 L975.824 680.998 L975.265 680.998 L974.706 680.998 L974.147 680.998 L973.587 680.998 L973.028 680.998 L972.469 680.998 L971.91 680.998 L971.35 680.998 L970.791 680.998 L970.232 680.998 L969.673 680.998 L969.113 680.998 L968.554 680.998 L967.995 680.998 L967.436 680.998 L966.876 680.998 L966.317 680.998 L965.758 680.998 L965.199 680.998 L964.639 680.998 L964.08 680.998 L963.521 680.998 L962.962 680.998 L962.402 680.998 L961.843 680.998 L961.284 680.998 L960.725 680.998 L960.165 680.998 L959.606 680.998 L959.047 680.998 L958.488 680.998 L957.928 680.998 L957.369 680.998 L956.81 680.998 L956.251 680.998 L955.691 680.998 L955.132 680.998 L954.573 680.998 L954.014 680.998 L953.454 680.998 L952.895 680.998 L952.336 680.998 L951.777 680.998 L951.217 680.998 L950.658 680.998 L950.099 680.998 L949.54 680.998 L948.98 680.998 L948.421 680.998 L947.862 680.998 L947.303 680.998 L946.743 680.998 L946.184 680.998 L945.625 680.998 L945.066 680.998 L944.506 680.998 L943.947 680.998 L943.388 680.998 L942.829 680.998 L942.269 680.998 L941.71 680.998 L941.151 680.998 L940.592 680.998 L940.032 680.998 L939.473 680.998 L938.914 680.998 L938.355 680.998 L937.795 680.998 L937.236 680.998 L936.677 680.998 L936.118 680.998 L935.558 680.998 L934.999 680.998 L934.44 680.998 L933.881 680.998 L933.321 680.998 L932.762 680.998 L932.203 680.998 L931.644 680.998 L931.084 680.998 L930.525 680.998 L929.966 680.998 L929.406 680.998 L928.847 680.998 L928.288 680.998 L927.729 680.998 L927.169 680.998 L926.61 680.998 L926.051 680.998 L925.492 680.998 L924.932 680.998 L924.373 680.998 L923.814 680.998 L923.255 680.998 L922.695 680.998 L922.136 680.998 L921.577 680.998 L921.018 680.998 L920.458 680.998 L919.899 680.998 L919.34 680.998 L918.781 680.998 L918.221 680.998 L917.662 680.998 L917.103 680.998 L916.544 680.998 L915.984 680.998 L915.425 680.998 L914.866 680.998 L914.307 680.998 L913.747 680.998 L913.188 680.998 L912.629 680.998 L912.07 680.998 L911.51 680.998 L910.951 680.998 L910.392 680.998 L909.833 680.998 L909.273 680.998 L908.714 680.998 L908.155 680.998 L907.596 680.998 L907.036 680.998 L906.477 680.998 L905.918 680.998 L905.359 680.998 L904.799 680.998 L904.24 680.998 L903.681 680.998 L903.122 680.998 L902.562 680.998 L902.003 680.998 L901.444 680.998 L900.885 680.998 L900.325 680.998 L899.766 680.998 L899.207 680.998 L898.648 680.998 L898.088 680.998 L897.529 680.998 L896.97 680.998 L896.411 680.998 L895.851 680.998 L895.292 680.998 L894.733 680.998 L894.174 680.998 L893.614 680.998 L893.055 680.998 L892.496 680.998 L891.937 680.998 L891.377 680.998 L890.818 680.998 L890.259 680.998 L889.7 680.998 L889.14 680.998 L888.581 680.998 L888.022 680.998 L887.463 680.998 L886.903 680.998 L886.344 680.998 L885.785 680.998 L885.226 680.998 L884.666 680.998 L884.107 680.998 L883.548 680.998 L882.989 680.998 L882.429 680.998 L881.87 680.998 L881.311 680.998 L880.752 680.998 L880.192 680.998 L879.633 680.998 L879.074 680.998 L878.515 680.998 L877.955 680.998 L877.396 680.998 L876.837 680.998 L876.278 680.998 L875.718 680.998 L875.159 680.998 L874.6 680.998 L874.041 680.998 L873.481 680.998 L872.922 680.998 L872.363 680.998 L871.804 680.998 L871.244 680.998 L870.685 680.998 L870.126 680.998 L869.567 680.998 L869.007 680.998 L868.448 680.998 L867.889 680.998 L867.33 680.998 L866.77 680.998 L866.211 680.998 L865.652 680.998 L865.093 680.998 L864.533 680.998 L863.974 680.998 L863.415 680.998 L862.856 680.998 L862.296 680.998 L861.737 680.998 L861.178 680.998 L860.619 680.998 L860.059 680.998 L859.5 680.998 L858.941 680.998 L858.382 680.998 L857.822 680.998 L857.263 680.998 L856.704 680.998 L856.145 680.998 L855.585 680.998 L855.026 680.998 L854.467 680.998 L853.908 680.998 L853.348 680.998 L852.789 680.998 L852.23 680.998 L851.671 680.998 L851.111 680.998 L850.552 680.998 L849.993 680.998 L849.434 680.998 L848.874 680.998 L848.315 680.998 L847.756 680.998 L847.197 680.998 L846.637 680.998 L846.078 680.998 L845.519 680.998 L844.96 680.998 L844.4 680.998 L843.841 680.998 L843.282 680.998 L842.723 680.998 L842.163 680.998 L841.604 680.998 L841.045 680.998 L840.486 680.998 L839.926 680.998 L839.367 680.998 L838.808 680.998 L838.249 680.998 L837.689 680.998 L837.13 680.998 L836.571 680.998 L836.012 680.998 L835.452 680.998 L834.893 680.998 L834.334 680.998 L833.775 680.998 L833.215 680.998 L832.656 680.998 L832.097 680.998 L831.538 680.998 L830.978 680.998 L830.419 680.998 L829.86 680.998 L829.301 680.998 L828.741 680.998 L828.182 680.998 L827.623 680.998 L827.064 680.998 L826.504 680.998 L825.945 680.998 L825.386 680.998 L824.827 680.998 L824.267 680.998 L823.708 680.998 L823.149 680.998 L822.59 680.998 L822.03 680.998 L821.471 680.998 L820.912 680.998 L820.353 680.998 L819.793 680.998 L819.234 680.998 L818.675 680.998 L818.116 680.998 L817.556 680.998 L816.997 680.998 L816.438 680.998 L815.879 680.998 L815.319 680.998 L814.76 680.998 L814.201 680.998 L813.642 680.998 L813.082 680.998 L812.523 680.998 L811.964 680.998 L811.405 680.998 L810.845 680.998 L810.286 680.998 L809.727 680.998 L809.168 680.998 L808.608 680.998 L808.049 680.998 L807.49 680.998 L806.931 680.998 L806.371 680.998 L805.812 680.998 L805.253 680.998 L804.693 680.998 L804.134 680.998 L803.575 680.998 L803.016 680.998 L802.456 680.998 L801.897 680.998 L801.338 680.998 L800.779 680.998 L800.219 680.998 L799.66 680.998 L799.101 680.998 L798.542 680.998 L797.982 680.998 L797.423 680.998 L796.864 680.998 L796.305 680.998 L795.745 680.998 L795.186 680.998 L794.627 680.998 L794.068 680.998 L793.508 680.998 L792.949 680.998 L792.39 680.998 L791.831 680.998 L791.271 680.998 L790.712 680.998 L790.153 680.998 L789.594 680.998 L789.034 680.998 L788.475 680.998 L787.916 680.998 L787.357 680.998 L786.797 680.998 L786.238 680.998 L785.679 680.998 L785.12 680.998 L784.56 680.998 L784.001 680.998 L783.442 680.998 L782.883 680.998 L782.323 680.998 L781.764 680.998 L781.205 680.998 L780.646 680.998 L780.086 680.998 L779.527 680.998 L778.968 680.998 L778.409 680.998 L777.849 680.998 L777.29 680.998 L776.731 680.998 L776.172 680.998 L775.612 680.998 L775.053 680.998 L774.494 680.998 L773.935 680.998 L773.375 680.998 L772.816 680.998 L772.257 680.998 L771.698 680.998 L771.138 680.998 L770.579 680.998 L770.02 680.998 L769.461 680.998 L768.901 680.998 L768.342 680.998 L767.783 680.998 L767.224 680.998 L766.664 680.998 L766.105 680.998 L765.546 680.998 L764.987 680.998 L764.427 680.998 L763.868 680.998 L763.309 680.998 L762.75 680.998 L762.19 680.998 L761.631 680.998 L761.072 680.998 L760.513 680.998 L759.953 680.998 L759.394 680.998 L758.835 680.998 L758.276 680.998 L757.716 680.998 L757.157 680.998 L756.598 680.998 L756.039 680.998 L755.479 680.998 L754.92 680.998 L754.361 680.998 L753.802 680.998 L753.242 680.998 L752.683 680.998 L752.124 680.998 L751.565 680.998 L751.005 680.998 L750.446 680.998 L749.887 680.998 L749.328 680.998 L748.768 680.998 L748.209 680.998 L747.65 680.998 L747.091 680.998 L746.531 680.998 L745.972 680.998 L745.413 680.998 L744.854 680.998 L744.294 680.998 L743.735 680.998 L743.176 680.998 L742.617 680.998 L742.057 680.998 L741.498 680.998 L740.939 680.998 L740.38 680.998 L739.82 680.998 L739.261 680.998 L738.702 680.998 L738.143 680.998 L737.583 680.998 L737.024 680.998 L736.465 680.998 L735.906 680.998 L735.346 680.998 L734.787 680.998 L734.228 680.998 L733.669 680.998 L733.109 680.998 L732.55 680.998 L731.991 680.998 L731.432 680.998 L730.872 680.998 L730.313 680.998 L729.754 680.998 L729.195 680.998 L728.635 680.998 L728.076 680.998 L727.517 680.998 L726.958 680.998 L726.398 680.998 L725.839 680.998 L725.28 680.998 L724.721 680.998 L724.161 680.998 L723.602 680.998 L723.043 680.998 L722.484 680.998 L721.924 680.998 L721.365 680.998 L720.806 680.998 L720.247 680.998  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.711 720.806,685.711 721.365,685.711 721.924,685.711 722.484,685.711 723.043,685.711 723.602,685.711 724.161,685.711 724.721,685.711 725.28,685.711 725.839,685.711 726.398,685.711 726.958,685.711 727.517,685.711 728.076,685.711 728.635,685.711 729.195,685.711 729.754,685.711 730.313,685.711 730.872,685.711 731.432,685.711 731.991,685.711 732.55,685.711 733.109,685.711 733.669,685.711 734.228,685.711 734.787,685.711 735.346,685.711 735.906,685.711 736.465,685.711 737.024,685.711 737.583,685.711 738.143,685.711 738.702,685.711 739.261,685.711 739.82,685.711 740.38,685.711 740.939,685.711 741.498,685.711 742.057,685.711 742.617,685.711 743.176,685.711 743.735,685.711 744.294,685.711 744.854,685.711 745.413,685.711 745.972,685.711 746.531,685.711 747.091,685.711 747.65,685.711 748.209,685.711 748.768,685.711 749.328,685.711 749.887,685.711 750.446,685.711 751.005,685.711 751.565,685.711 752.124,685.711 752.683,685.711 753.242,685.711 753.802,685.711 754.361,685.711 754.92,685.711 755.479,685.711 756.039,685.711 756.598,685.711 757.157,685.711 757.716,685.711 758.276,685.711 758.835,685.711 759.394,685.711 759.953,685.711 760.513,685.711 761.072,685.711 761.631,685.711 762.19,685.711 762.75,685.711 763.309,685.711 763.868,685.711 764.427,685.711 764.987,685.711 765.546,685.711 766.105,685.711 766.664,685.711 767.224,685.711 767.783,685.711 768.342,685.711 768.901,685.711 769.461,685.711 770.02,685.711 770.579,685.711 771.138,685.711 771.698,685.711 772.257,685.711 772.816,685.711 773.375,685.711 773.935,685.711 774.494,685.711 775.053,685.711 775.612,685.711 776.172,685.711 776.731,685.711 777.29,685.711 777.849,685.711 778.409,685.711 778.968,685.711 779.527,685.711 780.086,685.711 780.646,685.711 781.205,685.711 781.764,685.711 782.323,685.711 782.883,685.711 783.442,685.711 784.001,685.711 784.56,685.711 785.12,685.711 785.679,685.711 786.238,685.711 786.797,685.711 787.357,685.711 787.916,685.711 788.475,685.711 789.034,685.711 789.594,685.711 790.153,685.711 790.712,685.711 791.271,685.711 791.831,685.711 792.39,685.711 792.949,685.711 793.508,685.711 794.068,685.711 794.627,685.711 795.186,685.711 795.745,685.711 796.305,685.711 796.864,685.711 797.423,685.711 797.982,685.711 798.542,685.711 799.101,685.711 799.66,685.711 800.219,685.711 800.779,685.711 801.338,685.711 801.897,685.711 802.456,685.711 803.016,685.711 803.575,685.711 804.134,685.711 804.693,685.711 805.253,685.711 805.812,685.711 806.371,685.711 806.931,685.711 807.49,685.711 808.049,685.711 808.608,685.711 809.168,685.711 809.727,685.711 810.286,685.711 810.845,685.711 811.405,685.711 811.964,685.711 812.523,685.711 813.082,685.711 813.642,685.711 814.201,685.711 814.76,685.711 815.319,685.711 815.879,685.711 816.438,685.711 816.997,685.711 817.556,685.711 818.116,685.711 818.675,685.711 819.234,685.711 819.793,685.711 820.353,685.711 820.912,685.711 821.471,685.711 822.03,685.711 822.59,685.711 823.149,685.711 823.708,685.711 824.267,685.711 824.827,685.711 825.386,685.711 825.945,685.711 826.504,685.711 827.064,685.711 827.623,685.711 828.182,685.711 828.741,685.711 829.301,685.711 829.86,685.711 830.419,685.711 830.978,685.711 831.538,685.711 832.097,685.711 832.656,685.711 833.215,685.711 833.775,685.711 834.334,685.711 834.893,685.711 835.452,685.711 836.012,685.711 836.571,685.711 837.13,685.711 837.689,685.711 838.249,685.711 838.808,685.711 839.367,685.711 839.926,685.711 840.486,685.711 841.045,685.711 841.604,685.711 842.163,685.711 842.723,685.711 843.282,685.711 843.841,685.711 844.4,685.711 844.96,685.711 845.519,685.711 846.078,685.711 846.637,685.711 847.197,685.711 847.756,685.711 848.315,685.711 848.874,685.711 849.434,685.711 849.993,685.711 850.552,685.711 851.111,685.711 851.671,685.711 852.23,685.711 852.789,685.711 853.348,685.711 853.908,685.711 854.467,685.711 855.026,685.711 855.585,685.711 856.145,685.711 856.704,685.711 857.263,685.711 857.822,685.711 858.382,685.711 858.941,685.711 859.5,685.711 860.059,685.711 860.619,685.711 861.178,685.711 861.737,685.711 862.296,685.711 862.856,685.711 863.415,685.711 863.974,685.711 864.533,685.711 865.093,685.711 865.652,685.711 866.211,685.711 866.77,685.711 867.33,685.711 867.889,685.711 868.448,685.711 869.007,685.711 869.567,685.711 870.126,685.711 870.685,685.711 871.244,685.711 871.804,685.711 872.363,685.711 872.922,685.711 873.481,685.711 874.041,685.711 874.6,685.711 875.159,685.711 875.718,685.711 876.278,685.711 876.837,685.711 877.396,685.711 877.955,685.711 878.515,685.711 879.074,685.711 879.633,685.711 880.192,685.711 880.752,685.711 881.311,685.711 881.87,685.711 882.429,685.711 882.989,685.711 883.548,685.711 884.107,685.711 884.666,685.711 885.226,685.711 885.785,685.711 886.344,685.711 886.903,685.711 887.463,685.711 888.022,685.711 888.581,685.711 889.14,685.711 889.7,685.711 890.259,685.711 890.818,685.711 891.377,685.711 891.937,685.711 892.496,685.711 893.055,685.711 893.614,685.711 894.174,685.711 894.733,685.711 895.292,685.711 895.851,685.711 896.411,685.711 896.97,685.711 897.529,685.711 898.088,685.711 898.648,685.711 899.207,685.711 899.766,685.711 900.325,685.711 900.885,685.711 901.444,685.711 902.003,685.711 902.562,685.711 903.122,685.711 903.681,685.711 904.24,685.711 904.799,685.711 905.359,685.711 905.918,685.711 906.477,685.711 907.036,685.711 907.596,685.711 908.155,685.711 908.714,685.711 909.273,685.711 909.833,685.711 910.392,685.711 910.951,685.711 911.51,685.711 912.07,685.711 912.629,685.711 913.188,685.711 913.747,685.711 914.307,685.711 914.866,685.711 915.425,685.711 915.984,685.711 916.544,685.711 917.103,685.711 917.662,685.711 918.221,685.711 918.781,685.711 919.34,685.711 919.899,685.711 920.458,685.711 921.018,685.711 921.577,685.711 922.136,685.711 922.695,685.711 923.255,685.711 923.814,685.711 924.373,685.711 924.932,685.711 925.492,685.711 926.051,685.711 926.61,685.711 927.169,685.711 927.729,685.711 928.288,685.711 928.847,685.711 929.406,685.711 929.966,685.711 930.525,685.711 931.084,685.711 931.644,685.711 932.203,685.711 932.762,685.711 933.321,685.711 933.881,685.711 934.44,685.711 934.999,685.711 935.558,685.711 936.118,685.711 936.677,685.711 937.236,685.711 937.795,685.711 938.355,685.711 938.914,685.711 939.473,685.711 940.032,685.711 940.592,685.711 941.151,685.711 941.71,685.711 942.269,685.711 942.829,685.711 943.388,685.711 943.947,685.711 944.506,685.711 945.066,685.711 945.625,685.711 946.184,685.711 946.743,685.711 947.303,685.711 947.862,685.711 948.421,685.711 948.98,685.711 949.54,685.711 950.099,685.711 950.658,685.711 951.217,685.711 951.777,685.711 952.336,685.711 952.895,685.711 953.454,685.711 954.014,685.711 954.573,685.711 955.132,685.711 955.691,685.711 956.251,685.711 956.81,685.711 957.369,685.711 957.928,685.711 958.488,685.711 959.047,685.711 959.606,685.711 960.165,685.711 960.725,685.711 961.284,685.711 961.843,685.711 962.402,685.711 962.962,685.711 963.521,685.711 964.08,685.711 964.639,685.711 965.199,685.711 965.758,685.711 966.317,685.711 966.876,685.711 967.436,685.711 967.995,685.711 968.554,685.711 969.113,685.711 969.673,685.711 970.232,685.711 970.791,685.711 971.35,685.711 971.91,685.711 972.469,685.711 973.028,685.711 973.587,685.711 974.147,685.711 974.706,685.711 975.265,685.711 975.824,685.711 976.384,685.711 976.943,685.711 977.502,685.711 978.061,685.711 978.621,685.711 979.18,685.711 979.739,685.711 980.298,685.711 980.858,685.711 981.417,685.711 981.976,685.711 982.535,685.711 983.095,685.711 983.654,685.711 984.213,685.711 984.772,685.711 985.332,685.711 985.891,685.711 986.45,685.711 987.009,685.711 987.569,685.711 988.128,685.711 988.687,685.711 989.246,685.711 989.806,685.711 990.365,685.711 990.924,685.711 991.483,685.711 992.043,685.711 992.602,685.711 993.161,685.711 993.72,685.711 994.28,685.711 994.839,685.711 995.398,685.711 995.957,685.711 996.517,685.711 997.076,685.711 997.635,685.711 998.194,685.711 998.754,685.711 999.313,685.711 999.872,685.711 1000.43,685.711 1000.99,685.711 1001.55,685.711 1002.11,685.711 1002.67,685.711 1003.23,685.711 1003.79,685.711 1004.35,685.711 1004.91,685.711 1005.46,685.711 1006.02,685.711 1006.58,685.711 1007.14,685.711 1007.7,685.711 1008.26,685.711 1008.82,685.711 1009.38,685.711 1009.94,685.711 1010.5,685.711 1011.06,685.711 1011.62,685.711 1012.18,685.711 1012.73,685.711 1013.29,685.711 1013.85,685.711 1014.41,685.711 1014.97,685.711 1015.53,685.711 1016.09,685.711 1016.65,685.711 1017.21,685.711 1017.77,685.711 1018.33,685.711 1018.89,685.711 1019.45,685.711 1020.01,685.711 1020.56,685.711 1021.12,685.711 1021.68,685.711 1022.24,685.711 1022.8,685.711 1023.36,685.711 1023.92,685.711 1024.48,685.711 1025.04,685.711 1025.6,685.711 1026.16,685.711 1026.72,685.711 1027.28,685.711 1027.83,685.711 1028.39,685.711 1028.95,685.711 1029.51,685.711 1030.07,685.711 1030.63,685.711 1031.19,685.711 1031.75,685.711 1032.31,685.711 1032.87,685.711 1033.43,685.711 1033.99,685.711 1034.55,685.711 1035.1,685.711 1035.66,685.711 1036.22,685.711 1036.78,685.711 1037.34,685.711 1037.9,685.711 1038.46,685.711 1039.02,685.711 1039.58,685.711 1040.14,685.711 1040.7,685.711 1041.26,685.711 1041.82,685.711 1042.38,685.711 1042.93,685.711 1043.49,685.711 1044.05,685.711 1044.61,685.711 1045.17,685.711 1045.73,685.711 1046.29,685.711 1046.85,685.711 1047.41,685.711 1047.97,685.711 1048.53,685.711 1049.09,685.711 1049.65,685.711 1050.2,685.711 1050.76,685.711 1051.32,685.711 1051.88,685.711 1052.44,685.711 1053,685.711 1053.56,685.711 1054.12,685.711 1054.68,685.711 1055.24,685.711 1055.8,685.711 1056.36,685.711 1056.92,685.711 1057.48,685.711 1058.03,685.711 1058.59,685.711 1059.15,685.711 1059.71,685.711 1060.27,685.711 1060.83,685.711 1061.39,685.711 1061.95,685.711 1062.51,685.711 1063.07,685.711 1063.63,685.711 1064.19,685.711 1064.75,685.711 1065.3,685.711 1065.86,685.711 1066.42,685.711 1066.98,685.711 1067.54,685.711 1068.1,685.711 1068.66,685.711 1069.22,685.711 1069.78,685.711 1070.34,685.711 1070.9,685.711 1071.46,685.711 1072.02,685.711 1072.57,685.711 1073.13,685.711 1073.69,685.711 1074.25,685.711 1074.81,685.711 1075.37,685.711 1075.93,685.711 1076.49,685.711 1077.05,685.711 1077.61,685.711 1078.17,685.711 1078.73,685.711 1079.29,685.711 1079.85,685.711 1080.4,685.711 1080.96,685.711 1081.52,685.711 1082.08,685.711 1082.64,685.711 1083.2,685.711 1083.76,685.711 1084.32,685.711 1084.88,685.711 1085.44,685.711 1086,685.711 1086.56,685.711 1087.12,685.711 1087.67,685.711 1088.23,685.711 1088.79,685.711 1089.35,685.711 1089.91,685.711 1090.47,685.711 1091.03,685.711 1091.59,685.711 1092.15,685.711 1092.71,685.711 1093.27,685.711 1093.83,685.711 1094.39,685.711 1094.94,685.711 1095.5,685.711 1096.06,685.711 1096.62,685.711 1097.18,685.711 1097.74,685.711 1098.3,685.711 1098.86,685.711 1099.42,685.711 1099.98,685.711 1100.54,685.711 1101.1,685.711 1101.66,685.711 1102.22,685.711 1102.77,685.711 1103.33,685.711 1103.89,685.711 1104.45,685.711 1105.01,685.711 1105.57,685.711 1106.13,685.711 1106.69,685.711 1107.25,685.711 1107.81,685.711 1108.37,685.711 1108.93,685.711 1109.49,685.711 1110.04,685.711 1110.6,685.711 1111.16,685.711 1111.72,685.711 1112.28,685.711 1112.84,685.711 1113.4,685.711 1113.96,685.711 1114.52,685.711 1115.08,685.711 1115.64,685.711 1116.2,685.711 1116.76,685.711 1117.31,685.711 1117.87,685.711 1118.43,685.711 1118.99,685.711 1119.55,685.711 1120.11,685.711 1120.67,685.711 1121.23,685.711 1121.79,685.711 1122.35,685.711 1122.91,685.711 1123.47,685.711 1124.03,685.711 1124.59,685.711 1125.14,685.711 1125.7,685.711 1126.26,685.711 1126.82,685.711 1127.38,685.711 1127.94,685.711 1128.5,685.711 1129.06,685.711 1129.62,685.711 1130.18,685.711 1130.74,685.711 1131.3,685.711 1131.86,685.711 1132.41,685.711 1132.97,685.711 1133.53,685.711 1134.09,685.711 1134.65,685.711 1135.21,685.711 1135.77,685.711 1136.33,685.711 1136.89,685.711 1137.45,685.711 1138.01,685.711 1138.57,685.711 1139.13,685.711 1139.68,685.711 1140.24,685.711 1140.8,685.711 1141.36,685.711 1141.92,685.711 1142.48,685.711 1143.04,685.711 1143.6,685.711 1144.16,685.711 1144.72,685.711 1145.28,685.711 1145.84,685.711 1146.4,685.711 1146.96,685.711 1147.51,685.711 1148.07,685.711 1148.63,685.711 1149.19,685.711 1149.75,685.711 1150.31,685.711 1150.87,685.711 1151.43,685.711 1151.99,685.711 1152.55,685.711 1153.11,685.711 1153.67,685.711 1154.23,685.711 1154.78,685.711 1155.34,685.711 1155.9,685.711 1156.46,685.711 1157.02,685.711 1157.58,685.711 1158.14,685.711 1158.7,685.711 1159.26,685.711 1159.82,685.711 1160.38,685.711 1160.94,685.711 1161.5,685.711 1162.05,685.711 1162.61,685.711 1163.17,685.711 1163.73,685.711 1164.29,685.711 1164.85,685.711 1165.41,685.711 1165.97,685.711 1166.53,685.711 1167.09,685.711 1167.65,685.711 1168.21,685.711 1168.77,685.711 1169.33,685.711 1169.88,685.711 1170.44,685.711 1171,685.711 1171.56,685.711 1172.12,685.711 1172.68,685.711 1173.24,685.711 1173.8,685.711 1174.36,685.711 1174.92,685.711 1175.48,685.711 1176.04,685.711 1176.6,685.711 1177.15,685.711 1177.71,685.711 1178.27,685.711 1178.83,685.711 1179.39,685.711 1179.95,685.711 1180.51,685.711 1181.07,685.711 1181.63,685.711 1182.19,685.711 1182.75,685.711 1183.31,685.711 1183.87,685.711 1184.43,685.711 1184.98,685.711 1185.54,685.711 1186.1,685.711 1186.66,685.711 1187.22,685.711 1187.78,685.711 1188.34,685.711 1188.9,685.711 1189.46,685.711 1190.02,685.711 1190.58,685.711 1191.14,685.711 1191.7,685.711 1192.25,685.711 1192.81,685.711 1193.37,685.711 1193.93,685.711 1194.49,685.711 1195.05,685.711 1195.61,685.711 1196.17,685.711 1196.73,685.711 1197.29,685.711 1197.85,685.711 1198.41,685.711 1198.97,685.711 1199.52,685.711 1200.08,685.711 1200.64,685.711 1201.2,685.711 1201.76,685.711 1202.32,685.711 1202.88,685.711 1203.44,685.711 1204,685.711 1204.56,685.711 1205.12,685.711 1205.68,685.711 1206.24,685.711 1206.8,685.711 1207.35,685.711 1207.91,685.711 1208.47,685.711 1209.03,685.711 1209.59,685.711 1210.15,685.711 1210.71,685.711 1211.27,685.711 1211.83,685.711 1212.39,685.711 1212.95,685.711 1213.51,685.711 1214.07,685.711 1214.62,685.711 1215.18,685.711 1215.74,685.711 1216.3,685.711 1216.86,685.711 1217.42,685.711 1217.98,685.711 1218.54,685.711 1219.1,685.711 1219.66,685.711 1220.22,685.711 1220.78,685.711 1221.34,685.711 1221.89,685.711 1222.45,685.711 1223.01,685.711 1223.57,685.711 1224.13,685.711 1224.69,685.711 1225.25,685.711 1225.81,685.711 1226.37,685.711 1226.93,685.711 1227.49,685.711 1228.05,685.711 1228.61,685.711 1229.17,685.711 1229.72,685.711 1230.28,685.711 1230.84,685.711 1231.4,685.711 1231.96,685.711 1232.52,685.711 1233.08,685.711 1233.64,685.711 1234.2,685.711 1234.76,685.711 1235.32,685.711 1235.88,685.711 1236.44,685.711 1236.99,685.711 1237.55,685.711 1238.11,685.711 1238.67,685.711 1239.23,685.711 1239.79,685.711 1240.35,685.711 1240.91,685.711 1241.47,685.711 1242.03,685.711 1242.59,685.711 1243.15,685.711 1243.71,685.711 1244.26,685.711 1244.82,685.711 1245.38,685.711 1245.94,685.711 1246.5,685.711 1247.06,685.711 1247.62,685.711 1248.18,685.711 1248.74,685.711 1249.3,685.711 1249.86,685.711 1250.42,685.711 1250.98,685.711 1251.54,685.711 1252.09,685.711 1252.65,685.711 1253.21,685.711 1253.77,685.711 1254.33,685.711 1254.89,685.711 1255.45,685.711 1256.01,685.711 1256.57,685.711 1257.13,685.711 1257.69,685.711 1258.25,685.711 1258.81,685.711 1259.36,685.711 1259.92,685.711 1260.48,685.711 1261.04,685.711 1261.6,685.711 1262.16,685.711 1262.72,685.711 1263.28,685.711 1263.84,685.711 1264.4,685.711 1264.96,685.711 1265.52,685.711 1266.08,685.711 1266.63,685.711 1267.19,685.711 1267.75,685.711 1268.31,685.711 1268.87,685.711 1269.43,685.711 1269.99,685.711 1270.55,685.711 1271.11,685.711 1271.67,685.711 1272.23,685.711 1272.79,685.711 1273.35,685.711 1273.91,685.711 1274.46,685.711 1275.02,685.711 1275.58,685.711 1276.14,685.711 1276.7,685.711 1277.26,685.711 1277.82,685.711 1278.38,685.711 1278.94,685.711 1279.5,685.711 1280.06,685.711 1280.62,685.711 1281.18,685.711 1281.73,685.711 1282.29,685.711 1282.85,685.711 1283.41,685.711 1283.97,685.711 1284.53,685.711 1285.09,685.711 1285.65,685.711 1286.21,685.711 1286.77,685.711 1287.33,685.711 1287.89,685.711 1288.45,685.711 1289,685.711 1289.56,685.711 1290.12,685.711 1290.68,685.711 1291.24,685.711 1291.8,685.711 1292.36,685.711 1292.92,685.711 1293.48,685.711 1294.04,685.711 1294.6,685.711 1295.16,685.711 1295.72,685.711 1296.28,685.711 1296.83,685.711 1297.39,685.711 1297.95,685.711 1298.51,685.711 1299.07,685.711 1299.63,685.711 1300.19,685.711 1300.75,685.711 1301.31,685.711 1301.87,685.711 1302.43,685.711 1302.99,685.711 1303.55,685.711 1304.1,685.711 1304.66,685.711 1305.22,685.711 1305.78,685.711 1306.34,685.711 1306.9,685.711 1307.46,685.711 1308.02,685.711 1308.58,685.711 1309.14,685.711 1309.7,685.711 1310.26,685.711 1310.82,685.711 1311.38,685.711 1311.93,685.711 1312.49,685.711 1313.05,685.711 1313.61,685.711 1314.17,685.711 1314.73,685.711 1315.29,685.711 1315.85,685.711 1316.41,685.711 1316.97,685.711 1317.53,685.711 1318.09,685.711 1318.65,685.711 1319.2,685.711 1319.76,685.711 1320.32,685.711 1320.88,685.711 1321.44,685.711 1322,685.711 1322.56,685.711 1323.12,685.711 1323.68,685.711 1324.24,685.711 1324.8,685.711 1325.36,685.711 1325.92,685.711 1326.47,685.711 1327.03,685.711 1327.59,685.711 1328.15,685.711 1328.71,685.711 1329.27,685.711 1329.83,685.711 1330.39,685.711 1330.95,685.711 1331.51,685.711 1332.07,685.711 1332.63,685.711 1333.19,685.711 1333.75,685.711 1334.3,685.711 1334.86,685.711 1335.42,685.711 1335.98,685.711 1336.54,685.711 1337.1,685.711 1337.66,685.711 1338.22,685.711 1338.78,685.711 1339.34,685.711 1339.9,685.711 1340.46,685.711 1341.02,685.711 1341.57,685.711 1342.13,685.711 1342.69,685.711 1343.25,685.711 1343.81,685.711 1344.37,685.711 1344.93,685.711 1345.49,685.711 1346.05,685.711 1346.61,685.711 1347.17,685.711 1347.73,685.711 1348.29,685.711 1348.84,685.711 1349.4,685.711 1349.96,685.711 1350.52,685.711 1351.08,685.711 1351.64,685.711 1352.2,685.711 1352.76,685.711 1353.32,685.711 1353.88,685.711 1354.44,685.711 1355,685.711 1355.56,685.711 1356.12,685.711 1356.67,685.711 1357.23,685.711 1357.79,685.711 1358.35,685.711 1358.91,685.711 1359.47,685.711 1360.03,685.711 1360.59,685.711 1361.15,685.711 1361.71,685.711 1362.27,685.711 1362.83,685.711 1363.39,685.711 1363.94,685.711 1364.5,685.711 1365.06,685.711 1365.62,685.711 1366.18,685.711 1366.74,685.711 1367.3,685.711 1367.86,685.711 1368.42,685.711 1368.98,685.711 1369.54,685.711 1370.1,685.711 1370.66,685.711 1371.21,685.711 1371.77,685.711 1372.33,685.711 1372.89,685.711 1373.45,685.711 1374.01,685.711 1374.57,685.711 1375.13,685.711 1375.69,685.711 1376.25,685.711 1376.81,685.711 1377.37,685.711 1377.93,685.711 1378.49,685.711 1379.04,685.711 1379.6,685.711 1380.16,685.711 1380.72,685.711 1381.28,685.711 1381.84,685.711 1382.4,685.711 1382.96,685.711 1383.52,685.711 1384.08,685.711 1384.64,685.711 1385.2,685.711 1385.76,685.711 1386.31,685.711 1386.87,685.711 1387.43,685.711 1387.99,685.711 1388.55,685.711 1389.11,685.711 1389.67,685.711 1390.23,685.711 1390.79,685.711 1391.35,685.711 1391.91,685.711 1392.47,685.711 1393.03,685.711 1393.58,685.711 1394.14,685.711 1394.7,685.711 1395.26,685.711 1395.82,685.711 1396.38,685.711 1396.94,685.711 1397.5,685.711 1398.06,685.711 1398.62,685.711 1399.18,685.711 1399.74,685.711 1400.3,685.711 1400.86,685.711 1401.41,685.711 1401.97,685.711 1402.53,685.711 1403.09,685.711 1403.65,685.711 1404.21,685.711 1404.77,685.711 1405.33,685.711 1405.89,685.711 1406.45,685.711 1407.01,685.711 1407.57,685.711 1408.13,685.711 1408.68,685.711 1409.24,685.711 1409.8,685.711 1410.36,685.711 1410.92,685.711 1411.48,685.711 1412.04,685.711 1412.6,685.711 1413.16,685.711 1413.72,685.711 1414.28,685.711 1414.84,685.711 1415.4,685.711 1415.95,685.711 1416.51,685.711 1417.07,685.711 1417.63,685.711 1418.19,685.711 1418.75,685.711 1419.31,685.711 1419.87,685.711 1420.43,685.711 1420.99,685.711 1421.55,685.711 1422.11,685.711 1422.67,685.711 1423.23,685.711 1423.78,685.711 1424.34,685.711 1424.9,685.711 1425.46,685.711 1426.02,685.711 1426.58,685.711 1427.14,685.711 1427.7,685.711 1428.26,685.711 1428.82,685.711 1429.38,685.711 1429.94,685.711 1430.5,685.711 1431.05,685.711 1431.61,685.711 1432.17,685.711 1432.73,685.711 1433.29,685.711 1433.85,685.711 1434.41,685.711 1434.97,685.711 1435.53,685.711 1436.09,685.711 1436.65,685.711 1437.21,685.711 1437.77,685.711 1438.33,685.711 1438.88,685.711 1439.44,685.711 1440,685.711 1440.56,685.711 1441.12,685.711 1441.68,685.711 1442.24,685.711 1442.8,685.711 1443.36,685.711 1443.92,685.711 1444.48,685.711 1445.04,685.711 1445.6,685.711 1446.15,685.711 1446.71,685.711 1447.27,685.711 1447.83,685.711 1448.39,685.711 1448.95,685.711 1449.51,685.711 1450.07,685.711 1450.63,685.711 1451.19,685.711 1451.75,685.711 1452.31,685.711 1452.87,685.711 1453.42,685.711 1453.98,685.711 1454.54,685.711 1455.1,685.711 1455.66,685.711 1456.22,685.711 1456.78,685.711 1457.34,685.711 1457.9,685.711 1458.46,685.711 1459.02,685.711 1459.58,685.711 1460.14,685.711 1460.7,685.711 1461.25,685.711 1461.81,685.711 1462.37,685.711 1462.93,685.711 1463.49,685.711 1464.05,685.711 1464.61,685.711 1465.17,685.711 1465.73,685.711 1466.29,685.711 1466.85,685.711 1467.41,685.711 1467.97,685.711 1468.52,685.711 1469.08,685.711 1469.64,685.711 1470.2,685.711 1470.76,685.711 1471.32,685.711 1471.88,685.711 1472.44,685.711 1473,685.711 1473.56,685.711 1474.12,685.711 1474.68,685.711 1475.24,685.711 1475.79,685.711 1476.35,685.711 1476.91,685.711 1477.47,685.711 1478.03,685.711 1478.59,685.711 1479.15,685.711 1479.71,685.711 1480.27,685.711 1480.83,685.711 1481.39,685.711 1481.95,685.711 1482.51,685.711 1483.07,685.711 1483.62,685.711 1484.18,685.711 1484.74,685.711 1485.3,685.711 1485.86,685.711 1486.42,685.711 1486.98,685.711 1487.54,685.711 1488.1,685.711 1488.66,685.711 1489.22,685.711 1489.78,685.711 1490.34,685.711 1490.89,685.711 1491.45,685.711 1492.01,685.711 1492.57,685.711 1493.13,685.711 1493.69,685.711 1494.25,685.711 1494.81,685.711 1495.37,685.711 1495.93,685.711 1496.49,685.711 1497.05,685.711 1497.61,685.711 1498.16,685.711 1498.72,685.711 1499.28,685.711 1499.84,685.711 1500.4,685.711 1500.96,685.711 1501.52,685.711 1502.08,685.711 1502.64,685.711 1503.2,685.711 1503.76,685.711 1504.32,685.711 1504.88,685.711 1505.44,685.711 1505.99,685.711 1506.55,685.711 1507.11,685.711 1507.67,685.711 1508.23,685.711 1508.79,685.711 1509.35,685.711 1509.91,685.711 1510.47,685.711 1511.03,685.711 1511.59,685.711 1512.15,685.711 1512.71,685.711 1513.26,685.711 1513.82,685.711 1514.38,685.711 1514.94,685.711 1515.5,685.711 1516.06,685.711 1516.62,685.711 1517.18,685.711 1517.74,685.711 1518.3,685.711 1518.86,685.711 1519.42,685.711 1519.98,685.711 1520.53,685.711 1521.09,685.711 1521.65,685.711 1522.21,685.711 1522.77,685.711 1523.33,685.711 1523.89,685.711 1524.45,685.711 1525.01,685.711 1525.57,685.711 1526.13,685.711 1526.69,685.711 1527.25,685.711 1527.81,685.711 1528.36,685.711 1528.92,685.711 1529.48,685.711 1530.04,685.711 1530.6,685.711 1531.16,685.711 1531.72,685.711 1532.28,685.711 1532.84,685.711 1533.4,685.711 1533.96,685.711 1534.52,685.711 1535.08,685.711 1535.63,685.711 1536.19,685.711 1536.75,685.711 1537.31,685.711 1537.87,685.711 1538.43,685.711 1538.99,685.711 1539.55,685.711 1540.11,685.711 1540.67,685.711 1541.23,685.711 1541.79,685.711 1542.35,685.711 1542.9,685.711 1543.46,685.711 1544.02,685.711 1544.58,685.711 1545.14,685.711 1545.7,685.711 1546.26,685.711 1546.82,685.711 1547.38,685.711 1547.94,685.711 1548.5,685.711 1549.06,685.711 1549.62,685.711 1550.18,685.711 1550.73,685.711 1551.29,685.711 1551.85,685.711 1552.41,685.711 1552.97,685.711 1553.53,685.711 1554.09,685.711 1554.65,685.711 1555.21,685.711 1555.77,685.711 1556.33,685.711 1556.89,685.711 1557.45,685.711 1558,685.711 1558.56,685.711 1559.12,685.711 1559.68,685.711 1560.24,685.711 1560.8,685.711 1561.36,685.711 1561.92,685.711 1562.48,685.711 1563.04,685.711 1563.6,685.711 1564.16,685.711 1564.72,685.711 1565.28,685.711 1565.83,685.711 1566.39,685.711 1566.95,685.711 1567.51,685.711 1568.07,685.711 1568.63,685.711 1569.19,685.711 1569.75,685.711 1570.31,685.711 1570.87,685.711 1571.43,685.711 1571.99,685.711 1572.55,685.711 1573.1,685.711 1573.66,685.711 1574.22,685.711 1574.78,685.711 1575.34,685.711 1575.9,685.711 1576.46,685.711 1577.02,685.711 1577.58,685.711 1578.14,685.711 1578.7,685.711 1579.26,685.711 1579.82,685.711 1580.37,685.711 1580.93,685.711 1581.49,685.711 1582.05,685.711 1582.61,685.711 1583.17,685.711 1583.73,685.711 1584.29,685.711 1584.85,685.711 1585.41,685.711 1585.97,685.711 1586.53,685.711 1587.09,685.711 1587.65,685.711 1588.2,685.711 1588.76,685.711 1589.32,685.711 1589.88,685.711 1590.44,685.711 1591,685.711 1591.56,685.711 1592.12,685.711 1592.68,685.711 1593.24,685.711 1593.8,685.711 1594.36,685.711 1594.92,685.711 1595.47,685.711 1596.03,685.711 1596.59,685.711 1597.15,685.711 1597.71,685.711 1598.27,685.711 1598.83,685.711 1599.39,685.711 1599.95,685.711 1600.51,685.711 1601.07,685.711 1601.63,685.711 1602.19,685.711 1602.74,685.711 1603.3,685.711 1603.86,685.711 1604.42,685.711 1604.98,685.711 1605.54,685.711 1606.1,685.711 1606.66,685.711 1607.22,685.711 1607.78,685.711 1608.34,685.711 1608.9,685.711 1609.46,685.711 1610.02,685.711 1610.57,685.711 1611.13,685.711 1611.69,685.711 1612.25,685.711 1612.81,685.711 1613.37,685.711 1613.93,685.711 1614.49,685.711 1615.05,685.711 1615.61,685.711 1616.17,685.711 1616.73,685.711 1617.29,685.711 1617.84,685.711 1618.4,685.711 1618.96,685.711 1619.52,685.711 1620.08,685.711 1620.64,685.711 1621.2,685.711 1621.76,685.711 1622.32,685.711 1622.88,685.711 1623.44,685.711 1624,685.711 1624.56,685.711 1625.11,685.711 1625.67,685.711 1626.23,685.711 1626.79,685.711 1627.35,685.711 1627.91,685.711 1628.47,685.711 1629.03,685.711 1629.59,685.711 1630.15,685.711 1630.71,685.711 1631.27,685.711 1631.83,685.711 1632.39,685.711 1632.94,685.711 1633.5,685.711 1634.06,685.711 1634.62,685.711 1635.18,685.711 1635.74,685.711 1636.3,685.711 1636.86,685.711 1637.42,685.711 1637.98,685.711 1638.54,685.711 1639.1,685.711 1639.66,685.711 1640.21,685.711 1640.77,685.711 1641.33,685.711 1641.89,685.711 1642.45,685.711 1643.01,685.711 1643.57,685.711 1644.13,685.711 1644.69,685.711 1645.25,685.711 1645.81,685.711 1646.37,685.711 1646.93,685.711 1647.48,685.711 1648.04,685.711 1648.6,685.711 1649.16,685.711 1649.72,685.711 1650.28,685.711 1650.84,685.711 1651.4,685.711 1651.96,685.711 1652.52,685.711 1653.08,685.711 1653.64,685.711 1654.2,685.711 1654.76,685.711 1655.31,685.711 1655.87,685.711 1656.43,685.711 1656.99,685.711 1657.55,685.711 1658.11,685.711 1658.67,685.711 1659.23,685.711 1659.79,685.711 1660.35,685.711 1660.91,685.711 1661.47,685.711 1662.03,685.711 1662.58,685.711 1663.14,685.711 1663.7,685.711 1664.26,685.711 1664.82,685.711 1665.38,685.711 1665.94,685.711 1666.5,685.711 1667.06,685.711 1667.62,685.711 1668.18,685.711 1668.74,685.711 1669.3,685.711 1669.85,685.711 1670.41,685.711 1670.97,685.711 1671.53,685.711 1672.09,685.711 1672.65,685.711 1673.21,685.711 1673.77,685.711 1674.33,685.711 1674.89,685.711 1675.45,685.711 1676.01,685.711 1676.57,685.711 1677.13,685.711 1677.68,685.711 1678.24,685.711 1678.8,685.711 1679.36,685.711 1679.92,685.711 1680.48,685.711 1681.04,685.711 1681.6,685.711 1682.16,685.711 1682.72,685.711 1683.28,685.711 1683.84,685.711 1684.4,685.711 1684.95,685.711 1685.51,685.711 1686.07,685.711 1686.63,685.711 1687.19,685.711 1687.75,685.711 1688.31,685.711 1688.87,685.711 1689.43,685.711 1689.99,685.711 1690.55,685.711 1691.11,685.711 1691.67,685.711 1692.23,685.711 1692.78,685.711 1693.34,685.711 1693.9,685.711 1694.46,685.711 1695.02,685.711 1695.58,685.711 1696.14,685.711 1696.7,685.711 1697.26,685.711 1697.82,685.711 1698.38,685.711 1698.94,685.711 1699.5,685.711 1700.05,685.711 1700.61,685.711 1701.17,685.711 1701.73,685.711 1702.29,685.711 1702.85,685.711 1703.41,685.711 1703.97,685.711 1704.53,685.711 1705.09,685.711 1705.65,685.711 1706.21,685.711 1706.77,685.711 1707.32,685.711 1707.88,685.711 1708.44,685.711 1709,685.711 1709.56,685.711 1710.12,685.711 1710.68,685.711 1711.24,685.711 1711.8,685.711 1712.36,685.711 1712.92,685.711 1713.48,685.711 1714.04,685.711 1714.6,685.711 1715.15,685.711 1715.71,685.711 1716.27,685.711 1716.83,685.711 1717.39,685.711 1717.95,685.711 1718.51,685.711 1719.07,685.711 1719.63,685.711 1720.19,685.711 1720.75,685.711 1721.31,685.711 1721.87,685.711 1722.42,685.711 1722.98,685.711 1723.54,685.711 1724.1,685.711 1724.66,685.711 1725.22,685.711 1725.78,685.711 1726.34,685.711 1726.9,685.711 1727.46,685.711 1728.02,685.711 1728.58,685.711 1729.14,685.711 1729.69,685.711 1730.25,685.711 1730.81,685.711 1731.37,685.711 1731.93,685.711 1732.49,685.711 1733.05,685.711 1733.61,685.711 1734.17,685.711 1734.73,685.711 1735.29,685.711 1735.85,685.711 1736.41,685.711 1736.97,685.711 1737.52,685.711 1738.08,685.711 1738.64,685.711 1739.2,685.711 1739.76,685.711 1740.32,685.711 1740.88,685.711 1741.44,685.711 1742,685.711 1742.56,685.711 1743.12,685.711 1743.68,685.711 1744.24,685.711 1744.79,685.711 1745.35,685.711 1745.91,685.711 1746.47,685.711 1747.03,685.711 1747.59,685.711 1748.15,685.711 1748.71,685.711 1749.27,685.711 1749.83,685.711 1750.39,685.711 1750.95,685.711 1751.51,685.711 1752.06,685.711 1752.62,685.711 1753.18,685.711 1753.74,685.711 1754.3,685.711 1754.86,685.711 1755.42,685.711 1755.98,685.711 1756.54,685.711 1757.1,685.711 1757.66,685.711 1758.22,685.711 1758.78,685.711 1759.34,685.711 1759.89,685.711 1760.45,685.711 1761.01,685.711 1761.57,685.711 1762.13,685.711 1762.69,685.711 1763.25,685.711 1763.81,685.711 1764.37,685.711 1764.93,685.711 1765.49,685.711 1766.05,685.711 1766.61,685.711 1767.16,685.711 1767.72,685.711 1768.28,685.711 1768.84,685.711 1769.4,685.711 1769.96,685.711 1770.52,685.711 1771.08,685.711 1771.64,685.711 1772.2,685.711 1772.76,685.711 1773.32,685.711 1773.88,685.711 1774.43,685.711 1774.99,685.711 1775.55,685.711 1776.11,685.711 1776.67,685.711 1777.23,685.711 1777.79,685.711 1778.35,685.711 1778.91,685.711 1779.47,685.711 1780.03,685.711 1780.59,685.711 1781.15,685.711 1781.71,685.711 1782.26,685.711 1782.82,685.711 1783.38,685.711 1783.94,685.711 1784.5,685.711 1785.06,685.711 1785.62,685.711 1786.18,685.711 1786.74,685.711 1787.3,685.711 1787.86,685.711 1788.42,685.711 1788.98,685.711 1789.53,685.711 1790.09,685.711 1790.65,685.711 1791.21,685.711 1791.77,685.711 1792.33,685.711 1792.89,685.711 1793.45,685.711 1794.01,685.711 1794.57,685.711 1795.13,685.711 1795.69,685.711 1796.25,685.711 1796.8,685.711 1797.36,685.711 1797.92,685.711 1798.48,685.711 1799.04,685.711 1799.6,685.711 1800.16,685.711 1800.72,685.711 1801.28,685.711 1801.84,685.711 1802.4,685.711 1802.96,685.711 1803.52,685.711 1804.08,685.711 1804.63,685.711 1805.19,685.711 1805.75,685.711 1806.31,685.711 1806.87,685.711 1807.43,685.711 1807.99,685.711 1808.55,685.711 1809.11,685.711 1809.67,685.711 1810.23,685.711 1810.79,685.711 1811.35,685.711 1811.9,685.711 1812.46,685.711 1813.02,685.711 1813.58,685.711 1814.14,685.711 1814.7,685.711 1815.26,685.711 1815.82,685.711 1816.38,685.711 1816.94,685.711 1817.5,685.711 1818.06,685.711 1818.62,685.711 1819.18,685.711 1819.73,685.711 1820.29,685.711 1820.85,685.711 1821.41,685.711 1821.97,685.711 1822.53,685.711 1823.09,685.711 1823.65,685.711 1824.21,685.711 1824.77,685.711 1825.33,685.711 1825.89,685.711 1826.45,685.711 1827,685.711 1827.56,685.711 1828.12,685.711 1828.68,685.711 1829.24,685.711 1829.8,685.711 1830.36,685.711 1830.92,685.711 1831.48,685.711 1832.04,685.711 1832.6,685.711 1833.16,685.711 1833.72,685.711 1834.27,685.711 1834.83,685.711 1835.39,685.711 1835.95,685.711 1836.51,685.711 1837.07,685.711 1837.63,685.711 1838.19,685.711 \"/>\n<path clip-path=\"url(#clip093)\" d=\"M720.247 684.441 L720.806 684.441 L721.365 684.441 L721.924 684.441 L722.484 684.441 L723.043 684.441 L723.602 684.441 L724.161 684.441 L724.721 684.441 L725.28 684.441 L725.839 684.441 L726.398 684.441 L726.958 684.441 L727.517 684.441 L728.076 684.441 L728.635 684.441 L729.195 684.441 L729.754 684.441 L730.313 684.441 L730.872 684.441 L731.432 684.441 L731.991 684.441 L732.55 684.441 L733.109 684.441 L733.669 684.441 L734.228 684.441 L734.787 684.441 L735.346 684.441 L735.906 684.441 L736.465 684.441 L737.024 684.441 L737.583 684.441 L738.143 684.441 L738.702 684.441 L739.261 684.441 L739.82 684.441 L740.38 684.441 L740.939 684.441 L741.498 684.441 L742.057 684.441 L742.617 684.441 L743.176 684.441 L743.735 684.441 L744.294 684.441 L744.854 684.441 L745.413 684.441 L745.972 684.441 L746.531 684.441 L747.091 684.441 L747.65 684.441 L748.209 684.441 L748.768 684.441 L749.328 684.441 L749.887 684.441 L750.446 684.441 L751.005 684.441 L751.565 684.441 L752.124 684.441 L752.683 684.441 L753.242 684.441 L753.802 684.441 L754.361 684.441 L754.92 684.441 L755.479 684.441 L756.039 684.441 L756.598 684.441 L757.157 684.441 L757.716 684.441 L758.276 684.441 L758.835 684.441 L759.394 684.441 L759.953 684.441 L760.513 684.441 L761.072 684.441 L761.631 684.441 L762.19 684.441 L762.75 684.441 L763.309 684.441 L763.868 684.441 L764.427 684.441 L764.987 684.441 L765.546 684.441 L766.105 684.441 L766.664 684.441 L767.224 684.441 L767.783 684.441 L768.342 684.441 L768.901 684.441 L769.461 684.441 L770.02 684.441 L770.579 684.441 L771.138 684.441 L771.698 684.441 L772.257 684.441 L772.816 684.441 L773.375 684.441 L773.935 684.441 L774.494 684.441 L775.053 684.441 L775.612 684.441 L776.172 684.441 L776.731 684.441 L777.29 684.441 L777.849 684.441 L778.409 684.441 L778.968 684.441 L779.527 684.441 L780.086 684.441 L780.646 684.441 L781.205 684.441 L781.764 684.441 L782.323 684.441 L782.883 684.441 L783.442 684.441 L784.001 684.441 L784.56 684.441 L785.12 684.441 L785.679 684.441 L786.238 684.441 L786.797 684.441 L787.357 684.441 L787.916 684.441 L788.475 684.441 L789.034 684.441 L789.594 684.441 L790.153 684.441 L790.712 684.441 L791.271 684.441 L791.831 684.441 L792.39 684.441 L792.949 684.441 L793.508 684.441 L794.068 684.441 L794.627 684.441 L795.186 684.441 L795.745 684.441 L796.305 684.441 L796.864 684.441 L797.423 684.441 L797.982 684.441 L798.542 684.441 L799.101 684.441 L799.66 684.441 L800.219 684.441 L800.779 684.441 L801.338 684.441 L801.897 684.441 L802.456 684.441 L803.016 684.441 L803.575 684.441 L804.134 684.441 L804.693 684.441 L805.253 684.441 L805.812 684.441 L806.371 684.441 L806.931 684.441 L807.49 684.441 L808.049 684.441 L808.608 684.441 L809.168 684.441 L809.727 684.441 L810.286 684.441 L810.845 684.441 L811.405 684.441 L811.964 684.441 L812.523 684.441 L813.082 684.441 L813.642 684.441 L814.201 684.441 L814.76 684.441 L815.319 684.441 L815.879 684.441 L816.438 684.441 L816.997 684.441 L817.556 684.441 L818.116 684.441 L818.675 684.441 L819.234 684.441 L819.793 684.441 L820.353 684.441 L820.912 684.441 L821.471 684.441 L822.03 684.441 L822.59 684.441 L823.149 684.441 L823.708 684.441 L824.267 684.441 L824.827 684.441 L825.386 684.441 L825.945 684.441 L826.504 684.441 L827.064 684.441 L827.623 684.441 L828.182 684.441 L828.741 684.441 L829.301 684.441 L829.86 684.441 L830.419 684.441 L830.978 684.441 L831.538 684.441 L832.097 684.441 L832.656 684.441 L833.215 684.441 L833.775 684.441 L834.334 684.441 L834.893 684.441 L835.452 684.441 L836.012 684.441 L836.571 684.441 L837.13 684.441 L837.689 684.441 L838.249 684.441 L838.808 684.441 L839.367 684.441 L839.926 684.441 L840.486 684.441 L841.045 684.441 L841.604 684.441 L842.163 684.441 L842.723 684.441 L843.282 684.441 L843.841 684.441 L844.4 684.441 L844.96 684.441 L845.519 684.441 L846.078 684.441 L846.637 684.441 L847.197 684.441 L847.756 684.441 L848.315 684.441 L848.874 684.441 L849.434 684.441 L849.993 684.441 L850.552 684.441 L851.111 684.441 L851.671 684.441 L852.23 684.441 L852.789 684.441 L853.348 684.441 L853.908 684.441 L854.467 684.441 L855.026 684.441 L855.585 684.441 L856.145 684.441 L856.704 684.441 L857.263 684.441 L857.822 684.441 L858.382 684.441 L858.941 684.441 L859.5 684.441 L860.059 684.441 L860.619 684.441 L861.178 684.441 L861.737 684.441 L862.296 684.441 L862.856 684.441 L863.415 684.441 L863.974 684.441 L864.533 684.441 L865.093 684.441 L865.652 684.441 L866.211 684.441 L866.77 684.441 L867.33 684.441 L867.889 684.441 L868.448 684.441 L869.007 684.441 L869.567 684.441 L870.126 684.441 L870.685 684.441 L871.244 684.441 L871.804 684.441 L872.363 684.441 L872.922 684.441 L873.481 684.441 L874.041 684.441 L874.6 684.441 L875.159 684.441 L875.718 684.441 L876.278 684.441 L876.837 684.441 L877.396 684.441 L877.955 684.441 L878.515 684.441 L879.074 684.441 L879.633 684.441 L880.192 684.441 L880.752 684.441 L881.311 684.441 L881.87 684.441 L882.429 684.441 L882.989 684.441 L883.548 684.441 L884.107 684.441 L884.666 684.441 L885.226 684.441 L885.785 684.441 L886.344 684.441 L886.903 684.441 L887.463 684.441 L888.022 684.441 L888.581 684.441 L889.14 684.441 L889.7 684.441 L890.259 684.441 L890.818 684.441 L891.377 684.441 L891.937 684.441 L892.496 684.441 L893.055 684.441 L893.614 684.441 L894.174 684.441 L894.733 684.441 L895.292 684.441 L895.851 684.441 L896.411 684.441 L896.97 684.441 L897.529 684.441 L898.088 684.441 L898.648 684.441 L899.207 684.441 L899.766 684.441 L900.325 684.441 L900.885 684.441 L901.444 684.441 L902.003 684.441 L902.562 684.441 L903.122 684.441 L903.681 684.441 L904.24 684.441 L904.799 684.441 L905.359 684.441 L905.918 684.441 L906.477 684.441 L907.036 684.441 L907.596 684.441 L908.155 684.441 L908.714 684.441 L909.273 684.441 L909.833 684.441 L910.392 684.441 L910.951 684.441 L911.51 684.441 L912.07 684.441 L912.629 684.441 L913.188 684.441 L913.747 684.441 L914.307 684.441 L914.866 684.441 L915.425 684.441 L915.984 684.441 L916.544 684.441 L917.103 684.441 L917.662 684.441 L918.221 684.441 L918.781 684.441 L919.34 684.441 L919.899 684.441 L920.458 684.441 L921.018 684.441 L921.577 684.441 L922.136 684.441 L922.695 684.441 L923.255 684.441 L923.814 684.441 L924.373 684.441 L924.932 684.441 L925.492 684.441 L926.051 684.441 L926.61 684.441 L927.169 684.441 L927.729 684.441 L928.288 684.441 L928.847 684.441 L929.406 684.441 L929.966 684.441 L930.525 684.441 L931.084 684.441 L931.644 684.441 L932.203 684.441 L932.762 684.441 L933.321 684.441 L933.881 684.441 L934.44 684.441 L934.999 684.441 L935.558 684.441 L936.118 684.441 L936.677 684.441 L937.236 684.441 L937.795 684.441 L938.355 684.441 L938.914 684.441 L939.473 684.441 L940.032 684.441 L940.592 684.441 L941.151 684.441 L941.71 684.441 L942.269 684.441 L942.829 684.441 L943.388 684.441 L943.947 684.441 L944.506 684.441 L945.066 684.441 L945.625 684.441 L946.184 684.441 L946.743 684.441 L947.303 684.441 L947.862 684.441 L948.421 684.441 L948.98 684.441 L949.54 684.441 L950.099 684.441 L950.658 684.441 L951.217 684.441 L951.777 684.441 L952.336 684.441 L952.895 684.441 L953.454 684.441 L954.014 684.441 L954.573 684.441 L955.132 684.441 L955.691 684.441 L956.251 684.441 L956.81 684.441 L957.369 684.441 L957.928 684.441 L958.488 684.441 L959.047 684.441 L959.606 684.441 L960.165 684.441 L960.725 684.441 L961.284 684.441 L961.843 684.441 L962.402 684.441 L962.962 684.441 L963.521 684.441 L964.08 684.441 L964.639 684.441 L965.199 684.441 L965.758 684.441 L966.317 684.441 L966.876 684.441 L967.436 684.441 L967.995 684.441 L968.554 684.441 L969.113 684.441 L969.673 684.441 L970.232 684.441 L970.791 684.441 L971.35 684.441 L971.91 684.441 L972.469 684.441 L973.028 684.441 L973.587 684.441 L974.147 684.441 L974.706 684.441 L975.265 684.441 L975.824 684.441 L976.384 684.441 L976.943 684.441 L977.502 684.441 L978.061 684.441 L978.621 684.441 L979.18 684.441 L979.739 684.441 L980.298 684.441 L980.858 684.441 L981.417 684.441 L981.976 684.441 L982.535 684.441 L983.095 684.441 L983.654 684.441 L984.213 684.441 L984.772 684.441 L985.332 684.441 L985.891 684.441 L986.45 684.441 L987.009 684.441 L987.569 684.441 L988.128 684.441 L988.687 684.441 L989.246 684.441 L989.806 684.441 L990.365 684.441 L990.924 684.441 L991.483 684.441 L992.043 684.441 L992.602 684.441 L993.161 684.441 L993.72 684.441 L994.28 684.441 L994.839 684.441 L995.398 684.441 L995.957 684.441 L996.517 684.441 L997.076 684.441 L997.635 684.441 L998.194 684.441 L998.754 684.441 L999.313 684.441 L999.872 684.441 L1000.43 684.441 L1000.99 684.441 L1001.55 684.441 L1002.11 684.441 L1002.67 684.441 L1003.23 684.441 L1003.79 684.441 L1004.35 684.441 L1004.91 684.441 L1005.46 684.441 L1006.02 684.441 L1006.58 684.441 L1007.14 684.441 L1007.7 684.441 L1008.26 684.441 L1008.82 684.441 L1009.38 684.441 L1009.94 684.441 L1010.5 684.441 L1011.06 684.441 L1011.62 684.441 L1012.18 684.441 L1012.73 684.441 L1013.29 684.441 L1013.85 684.441 L1014.41 684.441 L1014.97 684.441 L1015.53 684.441 L1016.09 684.441 L1016.65 684.441 L1017.21 684.441 L1017.77 684.441 L1018.33 684.441 L1018.89 684.441 L1019.45 684.441 L1020.01 684.441 L1020.56 684.441 L1021.12 684.441 L1021.68 684.441 L1022.24 684.441 L1022.8 684.441 L1023.36 684.441 L1023.92 684.441 L1024.48 684.441 L1025.04 684.441 L1025.6 684.441 L1026.16 684.441 L1026.72 684.441 L1027.28 684.441 L1027.83 684.441 L1028.39 684.441 L1028.95 684.441 L1029.51 684.441 L1030.07 684.441 L1030.63 684.441 L1031.19 684.441 L1031.75 684.441 L1032.31 684.441 L1032.87 684.441 L1033.43 684.441 L1033.99 684.441 L1034.55 684.441 L1035.1 684.441 L1035.66 684.441 L1036.22 684.441 L1036.78 684.441 L1037.34 684.441 L1037.9 684.441 L1038.46 684.441 L1039.02 684.441 L1039.58 684.441 L1040.14 684.441 L1040.7 684.441 L1041.26 684.441 L1041.82 684.441 L1042.38 684.441 L1042.93 684.441 L1043.49 684.441 L1044.05 684.441 L1044.61 684.441 L1045.17 684.441 L1045.73 684.441 L1046.29 684.441 L1046.85 684.441 L1047.41 684.441 L1047.97 684.441 L1048.53 684.441 L1049.09 684.441 L1049.65 684.441 L1050.2 684.441 L1050.76 684.441 L1051.32 684.441 L1051.88 684.441 L1052.44 684.441 L1053 684.441 L1053.56 684.441 L1054.12 684.441 L1054.68 684.441 L1055.24 684.441 L1055.8 684.441 L1056.36 684.441 L1056.92 684.441 L1057.48 684.441 L1058.03 684.441 L1058.59 684.441 L1059.15 684.441 L1059.71 684.441 L1060.27 684.441 L1060.83 684.441 L1061.39 684.441 L1061.95 684.441 L1062.51 684.441 L1063.07 684.441 L1063.63 684.441 L1064.19 684.441 L1064.75 684.441 L1065.3 684.441 L1065.86 684.441 L1066.42 684.441 L1066.98 684.441 L1067.54 684.441 L1068.1 684.441 L1068.66 684.441 L1069.22 684.441 L1069.78 684.441 L1070.34 684.441 L1070.9 684.441 L1071.46 684.441 L1072.02 684.441 L1072.57 684.441 L1073.13 684.441 L1073.69 684.441 L1074.25 684.441 L1074.81 684.441 L1075.37 684.441 L1075.93 684.441 L1076.49 684.441 L1077.05 684.441 L1077.61 684.441 L1078.17 684.441 L1078.73 684.441 L1079.29 684.441 L1079.85 684.441 L1080.4 684.441 L1080.96 684.441 L1081.52 684.441 L1082.08 684.441 L1082.64 684.441 L1083.2 684.441 L1083.76 684.441 L1084.32 684.441 L1084.88 684.441 L1085.44 684.441 L1086 684.441 L1086.56 684.441 L1087.12 684.441 L1087.67 684.441 L1088.23 684.441 L1088.79 684.441 L1089.35 684.441 L1089.91 684.441 L1090.47 684.441 L1091.03 684.441 L1091.59 684.441 L1092.15 684.441 L1092.71 684.441 L1093.27 684.441 L1093.83 684.441 L1094.39 684.441 L1094.94 684.441 L1095.5 684.441 L1096.06 684.441 L1096.62 684.441 L1097.18 684.441 L1097.74 684.441 L1098.3 684.441 L1098.86 684.441 L1099.42 684.441 L1099.98 684.441 L1100.54 684.441 L1101.1 684.441 L1101.66 684.441 L1102.22 684.441 L1102.77 684.441 L1103.33 684.441 L1103.89 684.441 L1104.45 684.441 L1105.01 684.441 L1105.57 684.441 L1106.13 684.441 L1106.69 684.441 L1107.25 684.441 L1107.81 684.441 L1108.37 684.441 L1108.93 684.441 L1109.49 684.441 L1110.04 684.441 L1110.6 684.441 L1111.16 684.441 L1111.72 684.441 L1112.28 684.441 L1112.84 684.441 L1113.4 684.441 L1113.96 684.441 L1114.52 684.441 L1115.08 684.441 L1115.64 684.441 L1116.2 684.441 L1116.76 684.441 L1117.31 684.441 L1117.87 684.441 L1118.43 684.441 L1118.99 684.441 L1119.55 684.441 L1120.11 684.441 L1120.67 684.441 L1121.23 684.441 L1121.79 684.441 L1122.35 684.441 L1122.91 684.441 L1123.47 684.441 L1124.03 684.441 L1124.59 684.441 L1125.14 684.441 L1125.7 684.441 L1126.26 684.441 L1126.82 684.441 L1127.38 684.441 L1127.94 684.441 L1128.5 684.441 L1129.06 684.441 L1129.62 684.441 L1130.18 684.441 L1130.74 684.441 L1131.3 684.441 L1131.86 684.441 L1132.41 684.441 L1132.97 684.441 L1133.53 684.441 L1134.09 684.441 L1134.65 684.441 L1135.21 684.441 L1135.77 684.441 L1136.33 684.441 L1136.89 684.441 L1137.45 684.441 L1138.01 684.441 L1138.57 684.441 L1139.13 684.441 L1139.68 684.441 L1140.24 684.441 L1140.8 684.441 L1141.36 684.441 L1141.92 684.441 L1142.48 684.441 L1143.04 684.441 L1143.6 684.441 L1144.16 684.441 L1144.72 684.441 L1145.28 684.441 L1145.84 684.441 L1146.4 684.441 L1146.96 684.441 L1147.51 684.441 L1148.07 684.441 L1148.63 684.441 L1149.19 684.441 L1149.75 684.441 L1150.31 684.441 L1150.87 684.441 L1151.43 684.441 L1151.99 684.441 L1152.55 684.441 L1153.11 684.441 L1153.67 684.441 L1154.23 684.441 L1154.78 684.441 L1155.34 684.441 L1155.9 684.441 L1156.46 684.441 L1157.02 684.441 L1157.58 684.441 L1158.14 684.441 L1158.7 684.441 L1159.26 684.441 L1159.82 684.441 L1160.38 684.441 L1160.94 684.441 L1161.5 684.441 L1162.05 684.441 L1162.61 684.441 L1163.17 684.441 L1163.73 684.441 L1164.29 684.441 L1164.85 684.441 L1165.41 684.441 L1165.97 684.441 L1166.53 684.441 L1167.09 684.441 L1167.65 684.441 L1168.21 684.441 L1168.77 684.441 L1169.33 684.441 L1169.88 684.441 L1170.44 684.441 L1171 684.441 L1171.56 684.441 L1172.12 684.441 L1172.68 684.441 L1173.24 684.441 L1173.8 684.441 L1174.36 684.441 L1174.92 684.441 L1175.48 684.441 L1176.04 684.441 L1176.6 684.441 L1177.15 684.441 L1177.71 684.441 L1178.27 684.441 L1178.83 684.441 L1179.39 684.441 L1179.95 684.441 L1180.51 684.441 L1181.07 684.441 L1181.63 684.441 L1182.19 684.441 L1182.75 684.441 L1183.31 684.441 L1183.87 684.441 L1184.43 684.441 L1184.98 684.441 L1185.54 684.441 L1186.1 684.441 L1186.66 684.441 L1187.22 684.441 L1187.78 684.441 L1188.34 684.441 L1188.9 684.441 L1189.46 684.441 L1190.02 684.441 L1190.58 684.441 L1191.14 684.441 L1191.7 684.441 L1192.25 684.441 L1192.81 684.441 L1193.37 684.441 L1193.93 684.441 L1194.49 684.441 L1195.05 684.441 L1195.61 684.441 L1196.17 684.441 L1196.73 684.441 L1197.29 684.441 L1197.85 684.441 L1198.41 684.441 L1198.97 684.441 L1199.52 684.441 L1200.08 684.441 L1200.64 684.441 L1201.2 684.441 L1201.76 684.441 L1202.32 684.441 L1202.88 684.441 L1203.44 684.441 L1204 684.441 L1204.56 684.441 L1205.12 684.441 L1205.68 684.441 L1206.24 684.441 L1206.8 684.441 L1207.35 684.441 L1207.91 684.441 L1208.47 684.441 L1209.03 684.441 L1209.59 684.441 L1210.15 684.441 L1210.71 684.441 L1211.27 684.441 L1211.83 684.441 L1212.39 684.441 L1212.95 684.441 L1213.51 684.441 L1214.07 684.441 L1214.62 684.441 L1215.18 684.441 L1215.74 684.441 L1216.3 684.441 L1216.86 684.441 L1217.42 684.441 L1217.98 684.441 L1218.54 684.441 L1219.1 684.441 L1219.66 684.441 L1220.22 684.441 L1220.78 684.441 L1221.34 684.441 L1221.89 684.441 L1222.45 684.441 L1223.01 684.441 L1223.57 684.441 L1224.13 684.441 L1224.69 684.441 L1225.25 684.441 L1225.81 684.441 L1226.37 684.441 L1226.93 684.441 L1227.49 684.441 L1228.05 684.441 L1228.61 684.441 L1229.17 684.441 L1229.72 684.441 L1230.28 684.441 L1230.84 684.441 L1231.4 684.441 L1231.96 684.441 L1232.52 684.441 L1233.08 684.441 L1233.64 684.441 L1234.2 684.441 L1234.76 684.441 L1235.32 684.441 L1235.88 684.441 L1236.44 684.441 L1236.99 684.441 L1237.55 684.441 L1238.11 684.441 L1238.67 684.441 L1239.23 684.441 L1239.79 684.441 L1240.35 684.441 L1240.91 684.441 L1241.47 684.441 L1242.03 684.441 L1242.59 684.441 L1243.15 684.441 L1243.71 684.441 L1244.26 684.441 L1244.82 684.441 L1245.38 684.441 L1245.94 684.441 L1246.5 684.441 L1247.06 684.441 L1247.62 684.441 L1248.18 684.441 L1248.74 684.441 L1249.3 684.441 L1249.86 684.441 L1250.42 684.441 L1250.98 684.441 L1251.54 684.441 L1252.09 684.441 L1252.65 684.441 L1253.21 684.441 L1253.77 684.441 L1254.33 684.441 L1254.89 684.441 L1255.45 684.441 L1256.01 684.441 L1256.57 684.441 L1257.13 684.441 L1257.69 684.441 L1258.25 684.441 L1258.81 684.441 L1259.36 684.441 L1259.92 684.441 L1260.48 684.441 L1261.04 684.441 L1261.6 684.441 L1262.16 684.441 L1262.72 684.441 L1263.28 684.441 L1263.84 684.441 L1264.4 684.441 L1264.96 684.441 L1265.52 684.441 L1266.08 684.441 L1266.63 684.441 L1267.19 684.441 L1267.75 684.441 L1268.31 684.441 L1268.87 684.441 L1269.43 684.441 L1269.99 684.441 L1270.55 684.441 L1271.11 684.441 L1271.67 684.441 L1272.23 684.441 L1272.79 684.441 L1273.35 684.441 L1273.91 684.441 L1274.46 684.441 L1275.02 684.441 L1275.58 684.441 L1276.14 684.441 L1276.7 684.441 L1277.26 684.441 L1277.82 684.441 L1278.38 684.441 L1278.94 684.441 L1279.5 684.441 L1280.06 684.441 L1280.62 684.441 L1281.18 684.441 L1281.73 684.441 L1282.29 684.441 L1282.85 684.441 L1283.41 684.441 L1283.97 684.441 L1284.53 684.441 L1285.09 684.441 L1285.65 684.441 L1286.21 684.441 L1286.77 684.441 L1287.33 684.441 L1287.89 684.441 L1288.45 684.441 L1289 684.441 L1289.56 684.441 L1290.12 684.441 L1290.68 684.441 L1291.24 684.441 L1291.8 684.441 L1292.36 684.441 L1292.92 684.441 L1293.48 684.441 L1294.04 684.441 L1294.6 684.441 L1295.16 684.441 L1295.72 684.441 L1296.28 684.441 L1296.83 684.441 L1297.39 684.441 L1297.95 684.441 L1298.51 684.441 L1299.07 684.441 L1299.63 684.441 L1300.19 684.441 L1300.75 684.441 L1301.31 684.441 L1301.87 684.441 L1302.43 684.441 L1302.99 684.441 L1303.55 684.441 L1304.1 684.441 L1304.66 684.441 L1305.22 684.441 L1305.78 684.441 L1306.34 684.441 L1306.9 684.441 L1307.46 684.441 L1308.02 684.441 L1308.58 684.441 L1309.14 684.441 L1309.7 684.441 L1310.26 684.441 L1310.82 684.441 L1311.38 684.441 L1311.93 684.441 L1312.49 684.441 L1313.05 684.441 L1313.61 684.441 L1314.17 684.441 L1314.73 684.441 L1315.29 684.441 L1315.85 684.441 L1316.41 684.441 L1316.97 684.441 L1317.53 684.441 L1318.09 684.441 L1318.65 684.441 L1319.2 684.441 L1319.76 684.441 L1320.32 684.441 L1320.88 684.441 L1321.44 684.441 L1322 684.441 L1322.56 684.441 L1323.12 684.441 L1323.68 684.441 L1324.24 684.441 L1324.8 684.441 L1325.36 684.441 L1325.92 684.441 L1326.47 684.441 L1327.03 684.441 L1327.59 684.441 L1328.15 684.441 L1328.71 684.441 L1329.27 684.441 L1329.83 684.441 L1330.39 684.441 L1330.95 684.441 L1331.51 684.441 L1332.07 684.441 L1332.63 684.441 L1333.19 684.441 L1333.75 684.441 L1334.3 684.441 L1334.86 684.441 L1335.42 684.441 L1335.98 684.441 L1336.54 684.441 L1337.1 684.441 L1337.66 684.441 L1338.22 684.441 L1338.78 684.441 L1339.34 684.441 L1339.9 684.441 L1340.46 684.441 L1341.02 684.441 L1341.57 684.441 L1342.13 684.441 L1342.69 684.441 L1343.25 684.441 L1343.81 684.441 L1344.37 684.441 L1344.93 684.441 L1345.49 684.441 L1346.05 684.441 L1346.61 684.441 L1347.17 684.441 L1347.73 684.441 L1348.29 684.441 L1348.84 684.441 L1349.4 684.441 L1349.96 684.441 L1350.52 684.441 L1351.08 684.441 L1351.64 684.441 L1352.2 684.441 L1352.76 684.441 L1353.32 684.441 L1353.88 684.441 L1354.44 684.441 L1355 684.441 L1355.56 684.441 L1356.12 684.441 L1356.67 684.441 L1357.23 684.441 L1357.79 684.441 L1358.35 684.441 L1358.91 684.441 L1359.47 684.441 L1360.03 684.441 L1360.59 684.441 L1361.15 684.441 L1361.71 684.441 L1362.27 684.441 L1362.83 684.441 L1363.39 684.441 L1363.94 684.441 L1364.5 684.441 L1365.06 684.441 L1365.62 684.441 L1366.18 684.441 L1366.74 684.441 L1367.3 684.441 L1367.86 684.441 L1368.42 684.441 L1368.98 684.441 L1369.54 684.441 L1370.1 684.441 L1370.66 684.441 L1371.21 684.441 L1371.77 684.441 L1372.33 684.441 L1372.89 684.441 L1373.45 684.441 L1374.01 684.441 L1374.57 684.441 L1375.13 684.441 L1375.69 684.441 L1376.25 684.441 L1376.81 684.441 L1377.37 684.441 L1377.93 684.441 L1378.49 684.441 L1379.04 684.441 L1379.6 684.441 L1380.16 684.441 L1380.72 684.441 L1381.28 684.441 L1381.84 684.441 L1382.4 684.441 L1382.96 684.441 L1383.52 684.441 L1384.08 684.441 L1384.64 684.441 L1385.2 684.441 L1385.76 684.441 L1386.31 684.441 L1386.87 684.441 L1387.43 684.441 L1387.99 684.441 L1388.55 684.441 L1389.11 684.441 L1389.67 684.441 L1390.23 684.441 L1390.79 684.441 L1391.35 684.441 L1391.91 684.441 L1392.47 684.441 L1393.03 684.441 L1393.58 684.441 L1394.14 684.441 L1394.7 684.441 L1395.26 684.441 L1395.82 684.441 L1396.38 684.441 L1396.94 684.441 L1397.5 684.441 L1398.06 684.441 L1398.62 684.441 L1399.18 684.441 L1399.74 684.441 L1400.3 684.441 L1400.86 684.441 L1401.41 684.441 L1401.97 684.441 L1402.53 684.441 L1403.09 684.441 L1403.65 684.441 L1404.21 684.441 L1404.77 684.441 L1405.33 684.441 L1405.89 684.441 L1406.45 684.441 L1407.01 684.441 L1407.57 684.441 L1408.13 684.441 L1408.68 684.441 L1409.24 684.441 L1409.8 684.441 L1410.36 684.441 L1410.92 684.441 L1411.48 684.441 L1412.04 684.441 L1412.6 684.441 L1413.16 684.441 L1413.72 684.441 L1414.28 684.441 L1414.84 684.441 L1415.4 684.441 L1415.95 684.441 L1416.51 684.441 L1417.07 684.441 L1417.63 684.441 L1418.19 684.441 L1418.75 684.441 L1419.31 684.441 L1419.87 684.441 L1420.43 684.441 L1420.99 684.441 L1421.55 684.441 L1422.11 684.441 L1422.67 684.441 L1423.23 684.441 L1423.78 684.441 L1424.34 684.441 L1424.9 684.441 L1425.46 684.441 L1426.02 684.441 L1426.58 684.441 L1427.14 684.441 L1427.7 684.441 L1428.26 684.441 L1428.82 684.441 L1429.38 684.441 L1429.94 684.441 L1430.5 684.441 L1431.05 684.441 L1431.61 684.441 L1432.17 684.441 L1432.73 684.441 L1433.29 684.441 L1433.85 684.441 L1434.41 684.441 L1434.97 684.441 L1435.53 684.441 L1436.09 684.441 L1436.65 684.441 L1437.21 684.441 L1437.77 684.441 L1438.33 684.441 L1438.88 684.441 L1439.44 684.441 L1440 684.441 L1440.56 684.441 L1441.12 684.441 L1441.68 684.441 L1442.24 684.441 L1442.8 684.441 L1443.36 684.441 L1443.92 684.441 L1444.48 684.441 L1445.04 684.441 L1445.6 684.441 L1446.15 684.441 L1446.71 684.441 L1447.27 684.441 L1447.83 684.441 L1448.39 684.441 L1448.95 684.441 L1449.51 684.441 L1450.07 684.441 L1450.63 684.441 L1451.19 684.441 L1451.75 684.441 L1452.31 684.441 L1452.87 684.441 L1453.42 684.441 L1453.98 684.441 L1454.54 684.441 L1455.1 684.441 L1455.66 684.441 L1456.22 684.441 L1456.78 684.441 L1457.34 684.441 L1457.9 684.441 L1458.46 684.441 L1459.02 684.441 L1459.58 684.441 L1460.14 684.441 L1460.7 684.441 L1461.25 684.441 L1461.81 684.441 L1462.37 684.441 L1462.93 684.441 L1463.49 684.441 L1464.05 684.441 L1464.61 684.441 L1465.17 684.441 L1465.73 684.441 L1466.29 684.441 L1466.85 684.441 L1467.41 684.441 L1467.97 684.441 L1468.52 684.441 L1469.08 684.441 L1469.64 684.441 L1470.2 684.441 L1470.76 684.441 L1471.32 684.441 L1471.88 684.441 L1472.44 684.441 L1473 684.441 L1473.56 684.441 L1474.12 684.441 L1474.68 684.441 L1475.24 684.441 L1475.79 684.441 L1476.35 684.441 L1476.91 684.441 L1477.47 684.441 L1478.03 684.441 L1478.59 684.441 L1479.15 684.441 L1479.71 684.441 L1480.27 684.441 L1480.83 684.441 L1481.39 684.441 L1481.95 684.441 L1482.51 684.441 L1483.07 684.441 L1483.62 684.441 L1484.18 684.441 L1484.74 684.441 L1485.3 684.441 L1485.86 684.441 L1486.42 684.441 L1486.98 684.441 L1487.54 684.441 L1488.1 684.441 L1488.66 684.441 L1489.22 684.441 L1489.78 684.441 L1490.34 684.441 L1490.89 684.441 L1491.45 684.441 L1492.01 684.441 L1492.57 684.441 L1493.13 684.441 L1493.69 684.441 L1494.25 684.441 L1494.81 684.441 L1495.37 684.441 L1495.93 684.441 L1496.49 684.441 L1497.05 684.441 L1497.61 684.441 L1498.16 684.441 L1498.72 684.441 L1499.28 684.441 L1499.84 684.441 L1500.4 684.441 L1500.96 684.441 L1501.52 684.441 L1502.08 684.441 L1502.64 684.441 L1503.2 684.441 L1503.76 684.441 L1504.32 684.441 L1504.88 684.441 L1505.44 684.441 L1505.99 684.441 L1506.55 684.441 L1507.11 684.441 L1507.67 684.441 L1508.23 684.441 L1508.79 684.441 L1509.35 684.441 L1509.91 684.441 L1510.47 684.441 L1511.03 684.441 L1511.59 684.441 L1512.15 684.441 L1512.71 684.441 L1513.26 684.441 L1513.82 684.441 L1514.38 684.441 L1514.94 684.441 L1515.5 684.441 L1516.06 684.441 L1516.62 684.441 L1517.18 684.441 L1517.74 684.441 L1518.3 684.441 L1518.86 684.441 L1519.42 684.441 L1519.98 684.441 L1520.53 684.441 L1521.09 684.441 L1521.65 684.441 L1522.21 684.441 L1522.77 684.441 L1523.33 684.441 L1523.89 684.441 L1524.45 684.441 L1525.01 684.441 L1525.57 684.441 L1526.13 684.441 L1526.69 684.441 L1527.25 684.441 L1527.81 684.441 L1528.36 684.441 L1528.92 684.441 L1529.48 684.441 L1530.04 684.441 L1530.6 684.441 L1531.16 684.441 L1531.72 684.441 L1532.28 684.441 L1532.84 684.441 L1533.4 684.441 L1533.96 684.441 L1534.52 684.441 L1535.08 684.441 L1535.63 684.441 L1536.19 684.441 L1536.75 684.441 L1537.31 684.441 L1537.87 684.441 L1538.43 684.441 L1538.99 684.441 L1539.55 684.441 L1540.11 684.441 L1540.67 684.441 L1541.23 684.441 L1541.79 684.441 L1542.35 684.441 L1542.9 684.441 L1543.46 684.441 L1544.02 684.441 L1544.58 684.441 L1545.14 684.441 L1545.7 684.441 L1546.26 684.441 L1546.82 684.441 L1547.38 684.441 L1547.94 684.441 L1548.5 684.441 L1549.06 684.441 L1549.62 684.441 L1550.18 684.441 L1550.73 684.441 L1551.29 684.441 L1551.85 684.441 L1552.41 684.441 L1552.97 684.441 L1553.53 684.441 L1554.09 684.441 L1554.65 684.441 L1555.21 684.441 L1555.77 684.441 L1556.33 684.441 L1556.89 684.441 L1557.45 684.441 L1558 684.441 L1558.56 684.441 L1559.12 684.441 L1559.68 684.441 L1560.24 684.441 L1560.8 684.441 L1561.36 684.441 L1561.92 684.441 L1562.48 684.441 L1563.04 684.441 L1563.6 684.441 L1564.16 684.441 L1564.72 684.441 L1565.28 684.441 L1565.83 684.441 L1566.39 684.441 L1566.95 684.441 L1567.51 684.441 L1568.07 684.441 L1568.63 684.441 L1569.19 684.441 L1569.75 684.441 L1570.31 684.441 L1570.87 684.441 L1571.43 684.441 L1571.99 684.441 L1572.55 684.441 L1573.1 684.441 L1573.66 684.441 L1574.22 684.441 L1574.78 684.441 L1575.34 684.441 L1575.9 684.441 L1576.46 684.441 L1577.02 684.441 L1577.58 684.441 L1578.14 684.441 L1578.7 684.441 L1579.26 684.441 L1579.82 684.441 L1580.37 684.441 L1580.93 684.441 L1581.49 684.441 L1582.05 684.441 L1582.61 684.441 L1583.17 684.441 L1583.73 684.441 L1584.29 684.441 L1584.85 684.441 L1585.41 684.441 L1585.97 684.441 L1586.53 684.441 L1587.09 684.441 L1587.65 684.441 L1588.2 684.441 L1588.76 684.441 L1589.32 684.441 L1589.88 684.441 L1590.44 684.441 L1591 684.441 L1591.56 684.441 L1592.12 684.441 L1592.68 684.441 L1593.24 684.441 L1593.8 684.441 L1594.36 684.441 L1594.92 684.441 L1595.47 684.441 L1596.03 684.441 L1596.59 684.441 L1597.15 684.441 L1597.71 684.441 L1598.27 684.441 L1598.83 684.441 L1599.39 684.441 L1599.95 684.441 L1600.51 684.441 L1601.07 684.441 L1601.63 684.441 L1602.19 684.441 L1602.74 684.441 L1603.3 684.441 L1603.86 684.441 L1604.42 684.441 L1604.98 684.441 L1605.54 684.441 L1606.1 684.441 L1606.66 684.441 L1607.22 684.441 L1607.78 684.441 L1608.34 684.441 L1608.9 684.441 L1609.46 684.441 L1610.02 684.441 L1610.57 684.441 L1611.13 684.441 L1611.69 684.441 L1612.25 684.441 L1612.81 684.441 L1613.37 684.441 L1613.93 684.441 L1614.49 684.441 L1615.05 684.441 L1615.61 684.441 L1616.17 684.441 L1616.73 684.441 L1617.29 684.441 L1617.84 684.441 L1618.4 684.441 L1618.96 684.441 L1619.52 684.441 L1620.08 684.441 L1620.64 684.441 L1621.2 684.441 L1621.76 684.441 L1622.32 684.441 L1622.88 684.441 L1623.44 684.441 L1624 684.441 L1624.56 684.441 L1625.11 684.441 L1625.67 684.441 L1626.23 684.441 L1626.79 684.441 L1627.35 684.441 L1627.91 684.441 L1628.47 684.441 L1629.03 684.441 L1629.59 684.441 L1630.15 684.441 L1630.71 684.441 L1631.27 684.441 L1631.83 684.441 L1632.39 684.441 L1632.94 684.441 L1633.5 684.441 L1634.06 684.441 L1634.62 684.441 L1635.18 684.441 L1635.74 684.441 L1636.3 684.441 L1636.86 684.441 L1637.42 684.441 L1637.98 684.441 L1638.54 684.441 L1639.1 684.441 L1639.66 684.441 L1640.21 684.441 L1640.77 684.441 L1641.33 684.441 L1641.89 684.441 L1642.45 684.441 L1643.01 684.441 L1643.57 684.441 L1644.13 684.441 L1644.69 684.441 L1645.25 684.441 L1645.81 684.441 L1646.37 684.441 L1646.93 684.441 L1647.48 684.441 L1648.04 684.441 L1648.6 684.441 L1649.16 684.441 L1649.72 684.441 L1650.28 684.441 L1650.84 684.441 L1651.4 684.441 L1651.96 684.441 L1652.52 684.441 L1653.08 684.441 L1653.64 684.441 L1654.2 684.441 L1654.76 684.441 L1655.31 684.441 L1655.87 684.441 L1656.43 684.441 L1656.99 684.441 L1657.55 684.441 L1658.11 684.441 L1658.67 684.441 L1659.23 684.441 L1659.79 684.441 L1660.35 684.441 L1660.91 684.441 L1661.47 684.441 L1662.03 684.441 L1662.58 684.441 L1663.14 684.441 L1663.7 684.441 L1664.26 684.441 L1664.82 684.441 L1665.38 684.441 L1665.94 684.441 L1666.5 684.441 L1667.06 684.441 L1667.62 684.441 L1668.18 684.441 L1668.74 684.441 L1669.3 684.441 L1669.85 684.441 L1670.41 684.441 L1670.97 684.441 L1671.53 684.441 L1672.09 684.441 L1672.65 684.441 L1673.21 684.441 L1673.77 684.441 L1674.33 684.441 L1674.89 684.441 L1675.45 684.441 L1676.01 684.441 L1676.57 684.441 L1677.13 684.441 L1677.68 684.441 L1678.24 684.441 L1678.8 684.441 L1679.36 684.441 L1679.92 684.441 L1680.48 684.441 L1681.04 684.441 L1681.6 684.441 L1682.16 684.441 L1682.72 684.441 L1683.28 684.441 L1683.84 684.441 L1684.4 684.441 L1684.95 684.441 L1685.51 684.441 L1686.07 684.441 L1686.63 684.441 L1687.19 684.441 L1687.75 684.441 L1688.31 684.441 L1688.87 684.441 L1689.43 684.441 L1689.99 684.441 L1690.55 684.441 L1691.11 684.441 L1691.67 684.441 L1692.23 684.441 L1692.78 684.441 L1693.34 684.441 L1693.9 684.441 L1694.46 684.441 L1695.02 684.441 L1695.58 684.441 L1696.14 684.441 L1696.7 684.441 L1697.26 684.441 L1697.82 684.441 L1698.38 684.441 L1698.94 684.441 L1699.5 684.441 L1700.05 684.441 L1700.61 684.441 L1701.17 684.441 L1701.73 684.441 L1702.29 684.441 L1702.85 684.441 L1703.41 684.441 L1703.97 684.441 L1704.53 684.441 L1705.09 684.441 L1705.65 684.441 L1706.21 684.441 L1706.77 684.441 L1707.32 684.441 L1707.88 684.441 L1708.44 684.441 L1709 684.441 L1709.56 684.441 L1710.12 684.441 L1710.68 684.441 L1711.24 684.441 L1711.8 684.441 L1712.36 684.441 L1712.92 684.441 L1713.48 684.441 L1714.04 684.441 L1714.6 684.441 L1715.15 684.441 L1715.71 684.441 L1716.27 684.441 L1716.83 684.441 L1717.39 684.441 L1717.95 684.441 L1718.51 684.441 L1719.07 684.441 L1719.63 684.441 L1720.19 684.441 L1720.75 684.441 L1721.31 684.441 L1721.87 684.441 L1722.42 684.441 L1722.98 684.441 L1723.54 684.441 L1724.1 684.441 L1724.66 684.441 L1725.22 684.441 L1725.78 684.441 L1726.34 684.441 L1726.9 684.441 L1727.46 684.441 L1728.02 684.441 L1728.58 684.441 L1729.14 684.441 L1729.69 684.441 L1730.25 684.441 L1730.81 684.441 L1731.37 684.441 L1731.93 684.441 L1732.49 684.441 L1733.05 684.441 L1733.61 684.441 L1734.17 684.441 L1734.73 684.441 L1735.29 684.441 L1735.85 684.441 L1736.41 684.441 L1736.97 684.441 L1737.52 684.441 L1738.08 684.441 L1738.64 684.441 L1739.2 684.441 L1739.76 684.441 L1740.32 684.441 L1740.88 684.441 L1741.44 684.441 L1742 684.441 L1742.56 684.441 L1743.12 684.441 L1743.68 684.441 L1744.24 684.441 L1744.79 684.441 L1745.35 684.441 L1745.91 684.441 L1746.47 684.441 L1747.03 684.441 L1747.59 684.441 L1748.15 684.441 L1748.71 684.441 L1749.27 684.441 L1749.83 684.441 L1750.39 684.441 L1750.95 684.441 L1751.51 684.441 L1752.06 684.441 L1752.62 684.441 L1753.18 684.441 L1753.74 684.441 L1754.3 684.441 L1754.86 684.441 L1755.42 684.441 L1755.98 684.441 L1756.54 684.441 L1757.1 684.441 L1757.66 684.441 L1758.22 684.441 L1758.78 684.441 L1759.34 684.441 L1759.89 684.441 L1760.45 684.441 L1761.01 684.441 L1761.57 684.441 L1762.13 684.441 L1762.69 684.441 L1763.25 684.441 L1763.81 684.441 L1764.37 684.441 L1764.93 684.441 L1765.49 684.441 L1766.05 684.441 L1766.61 684.441 L1767.16 684.441 L1767.72 684.441 L1768.28 684.441 L1768.84 684.441 L1769.4 684.441 L1769.96 684.441 L1770.52 684.441 L1771.08 684.441 L1771.64 684.441 L1772.2 684.441 L1772.76 684.441 L1773.32 684.441 L1773.88 684.441 L1774.43 684.441 L1774.99 684.441 L1775.55 684.441 L1776.11 684.441 L1776.67 684.441 L1777.23 684.441 L1777.79 684.441 L1778.35 684.441 L1778.91 684.441 L1779.47 684.441 L1780.03 684.441 L1780.59 684.441 L1781.15 684.441 L1781.71 684.441 L1782.26 684.441 L1782.82 684.441 L1783.38 684.441 L1783.94 684.441 L1784.5 684.441 L1785.06 684.441 L1785.62 684.441 L1786.18 684.441 L1786.74 684.441 L1787.3 684.441 L1787.86 684.441 L1788.42 684.441 L1788.98 684.441 L1789.53 684.441 L1790.09 684.441 L1790.65 684.441 L1791.21 684.441 L1791.77 684.441 L1792.33 684.441 L1792.89 684.441 L1793.45 684.441 L1794.01 684.441 L1794.57 684.441 L1795.13 684.441 L1795.69 684.441 L1796.25 684.441 L1796.8 684.441 L1797.36 684.441 L1797.92 684.441 L1798.48 684.441 L1799.04 684.441 L1799.6 684.441 L1800.16 684.441 L1800.72 684.441 L1801.28 684.441 L1801.84 684.441 L1802.4 684.441 L1802.96 684.441 L1803.52 684.441 L1804.08 684.441 L1804.63 684.441 L1805.19 684.441 L1805.75 684.441 L1806.31 684.441 L1806.87 684.441 L1807.43 684.441 L1807.99 684.441 L1808.55 684.441 L1809.11 684.441 L1809.67 684.441 L1810.23 684.441 L1810.79 684.441 L1811.35 684.441 L1811.9 684.441 L1812.46 684.441 L1813.02 684.441 L1813.58 684.441 L1814.14 684.441 L1814.7 684.441 L1815.26 684.441 L1815.82 684.441 L1816.38 684.441 L1816.94 684.441 L1817.5 684.441 L1818.06 684.441 L1818.62 684.441 L1819.18 684.441 L1819.73 684.441 L1820.29 684.441 L1820.85 684.441 L1821.41 684.441 L1821.97 684.441 L1822.53 684.441 L1823.09 684.441 L1823.65 684.441 L1824.21 684.441 L1824.77 684.441 L1825.33 684.441 L1825.89 684.441 L1826.45 684.441 L1827 684.441 L1827.56 684.441 L1828.12 684.441 L1828.68 684.441 L1829.24 684.441 L1829.8 684.441 L1830.36 684.441 L1830.92 684.441 L1831.48 684.441 L1832.04 684.441 L1832.6 684.441 L1833.16 684.441 L1833.72 684.441 L1834.27 684.441 L1834.83 684.441 L1835.39 684.441 L1835.95 684.441 L1836.51 684.441 L1837.07 684.441 L1837.63 684.441 L1838.19 684.441 L1838.19 682.836 L1837.63 682.836 L1837.07 682.836 L1836.51 682.836 L1835.95 682.836 L1835.39 682.836 L1834.83 682.836 L1834.27 682.836 L1833.72 682.836 L1833.16 682.836 L1832.6 682.836 L1832.04 682.836 L1831.48 682.836 L1830.92 682.836 L1830.36 682.836 L1829.8 682.836 L1829.24 682.836 L1828.68 682.836 L1828.12 682.836 L1827.56 682.836 L1827 682.836 L1826.45 682.836 L1825.89 682.836 L1825.33 682.836 L1824.77 682.836 L1824.21 682.836 L1823.65 682.836 L1823.09 682.836 L1822.53 682.836 L1821.97 682.836 L1821.41 682.836 L1820.85 682.836 L1820.29 682.836 L1819.73 682.836 L1819.18 682.836 L1818.62 682.836 L1818.06 682.836 L1817.5 682.836 L1816.94 682.836 L1816.38 682.836 L1815.82 682.836 L1815.26 682.836 L1814.7 682.836 L1814.14 682.836 L1813.58 682.836 L1813.02 682.836 L1812.46 682.836 L1811.9 682.836 L1811.35 682.836 L1810.79 682.836 L1810.23 682.836 L1809.67 682.836 L1809.11 682.836 L1808.55 682.836 L1807.99 682.836 L1807.43 682.836 L1806.87 682.836 L1806.31 682.836 L1805.75 682.836 L1805.19 682.836 L1804.63 682.836 L1804.08 682.836 L1803.52 682.836 L1802.96 682.836 L1802.4 682.836 L1801.84 682.836 L1801.28 682.836 L1800.72 682.836 L1800.16 682.836 L1799.6 682.836 L1799.04 682.836 L1798.48 682.836 L1797.92 682.836 L1797.36 682.836 L1796.8 682.836 L1796.25 682.836 L1795.69 682.836 L1795.13 682.836 L1794.57 682.836 L1794.01 682.836 L1793.45 682.836 L1792.89 682.836 L1792.33 682.836 L1791.77 682.836 L1791.21 682.836 L1790.65 682.836 L1790.09 682.836 L1789.53 682.836 L1788.98 682.836 L1788.42 682.836 L1787.86 682.836 L1787.3 682.836 L1786.74 682.836 L1786.18 682.836 L1785.62 682.836 L1785.06 682.836 L1784.5 682.836 L1783.94 682.836 L1783.38 682.836 L1782.82 682.836 L1782.26 682.836 L1781.71 682.836 L1781.15 682.836 L1780.59 682.836 L1780.03 682.836 L1779.47 682.836 L1778.91 682.836 L1778.35 682.836 L1777.79 682.836 L1777.23 682.836 L1776.67 682.836 L1776.11 682.836 L1775.55 682.836 L1774.99 682.836 L1774.43 682.836 L1773.88 682.836 L1773.32 682.836 L1772.76 682.836 L1772.2 682.836 L1771.64 682.836 L1771.08 682.836 L1770.52 682.836 L1769.96 682.836 L1769.4 682.836 L1768.84 682.836 L1768.28 682.836 L1767.72 682.836 L1767.16 682.836 L1766.61 682.836 L1766.05 682.836 L1765.49 682.836 L1764.93 682.836 L1764.37 682.836 L1763.81 682.836 L1763.25 682.836 L1762.69 682.836 L1762.13 682.836 L1761.57 682.836 L1761.01 682.836 L1760.45 682.836 L1759.89 682.836 L1759.34 682.836 L1758.78 682.836 L1758.22 682.836 L1757.66 682.836 L1757.1 682.836 L1756.54 682.836 L1755.98 682.836 L1755.42 682.836 L1754.86 682.836 L1754.3 682.836 L1753.74 682.836 L1753.18 682.836 L1752.62 682.836 L1752.06 682.836 L1751.51 682.836 L1750.95 682.836 L1750.39 682.836 L1749.83 682.836 L1749.27 682.836 L1748.71 682.836 L1748.15 682.836 L1747.59 682.836 L1747.03 682.836 L1746.47 682.836 L1745.91 682.836 L1745.35 682.836 L1744.79 682.836 L1744.24 682.836 L1743.68 682.836 L1743.12 682.836 L1742.56 682.836 L1742 682.836 L1741.44 682.836 L1740.88 682.836 L1740.32 682.836 L1739.76 682.836 L1739.2 682.836 L1738.64 682.836 L1738.08 682.836 L1737.52 682.836 L1736.97 682.836 L1736.41 682.836 L1735.85 682.836 L1735.29 682.836 L1734.73 682.836 L1734.17 682.836 L1733.61 682.836 L1733.05 682.836 L1732.49 682.836 L1731.93 682.836 L1731.37 682.836 L1730.81 682.836 L1730.25 682.836 L1729.69 682.836 L1729.14 682.836 L1728.58 682.836 L1728.02 682.836 L1727.46 682.836 L1726.9 682.836 L1726.34 682.836 L1725.78 682.836 L1725.22 682.836 L1724.66 682.836 L1724.1 682.836 L1723.54 682.836 L1722.98 682.836 L1722.42 682.836 L1721.87 682.836 L1721.31 682.836 L1720.75 682.836 L1720.19 682.836 L1719.63 682.836 L1719.07 682.836 L1718.51 682.836 L1717.95 682.836 L1717.39 682.836 L1716.83 682.836 L1716.27 682.836 L1715.71 682.836 L1715.15 682.836 L1714.6 682.836 L1714.04 682.836 L1713.48 682.836 L1712.92 682.836 L1712.36 682.836 L1711.8 682.836 L1711.24 682.836 L1710.68 682.836 L1710.12 682.836 L1709.56 682.836 L1709 682.836 L1708.44 682.836 L1707.88 682.836 L1707.32 682.836 L1706.77 682.836 L1706.21 682.836 L1705.65 682.836 L1705.09 682.836 L1704.53 682.836 L1703.97 682.836 L1703.41 682.836 L1702.85 682.836 L1702.29 682.836 L1701.73 682.836 L1701.17 682.836 L1700.61 682.836 L1700.05 682.836 L1699.5 682.836 L1698.94 682.836 L1698.38 682.836 L1697.82 682.836 L1697.26 682.836 L1696.7 682.836 L1696.14 682.836 L1695.58 682.836 L1695.02 682.836 L1694.46 682.836 L1693.9 682.836 L1693.34 682.836 L1692.78 682.836 L1692.23 682.836 L1691.67 682.836 L1691.11 682.836 L1690.55 682.836 L1689.99 682.836 L1689.43 682.836 L1688.87 682.836 L1688.31 682.836 L1687.75 682.836 L1687.19 682.836 L1686.63 682.836 L1686.07 682.836 L1685.51 682.836 L1684.95 682.836 L1684.4 682.836 L1683.84 682.836 L1683.28 682.836 L1682.72 682.836 L1682.16 682.836 L1681.6 682.836 L1681.04 682.836 L1680.48 682.836 L1679.92 682.836 L1679.36 682.836 L1678.8 682.836 L1678.24 682.836 L1677.68 682.836 L1677.13 682.836 L1676.57 682.836 L1676.01 682.836 L1675.45 682.836 L1674.89 682.836 L1674.33 682.836 L1673.77 682.836 L1673.21 682.836 L1672.65 682.836 L1672.09 682.836 L1671.53 682.836 L1670.97 682.836 L1670.41 682.836 L1669.85 682.836 L1669.3 682.836 L1668.74 682.836 L1668.18 682.836 L1667.62 682.836 L1667.06 682.836 L1666.5 682.836 L1665.94 682.836 L1665.38 682.836 L1664.82 682.836 L1664.26 682.836 L1663.7 682.836 L1663.14 682.836 L1662.58 682.836 L1662.03 682.836 L1661.47 682.836 L1660.91 682.836 L1660.35 682.836 L1659.79 682.836 L1659.23 682.836 L1658.67 682.836 L1658.11 682.836 L1657.55 682.836 L1656.99 682.836 L1656.43 682.836 L1655.87 682.836 L1655.31 682.836 L1654.76 682.836 L1654.2 682.836 L1653.64 682.836 L1653.08 682.836 L1652.52 682.836 L1651.96 682.836 L1651.4 682.836 L1650.84 682.836 L1650.28 682.836 L1649.72 682.836 L1649.16 682.836 L1648.6 682.836 L1648.04 682.836 L1647.48 682.836 L1646.93 682.836 L1646.37 682.836 L1645.81 682.836 L1645.25 682.836 L1644.69 682.836 L1644.13 682.836 L1643.57 682.836 L1643.01 682.836 L1642.45 682.836 L1641.89 682.836 L1641.33 682.836 L1640.77 682.836 L1640.21 682.836 L1639.66 682.836 L1639.1 682.836 L1638.54 682.836 L1637.98 682.836 L1637.42 682.836 L1636.86 682.836 L1636.3 682.836 L1635.74 682.836 L1635.18 682.836 L1634.62 682.836 L1634.06 682.836 L1633.5 682.836 L1632.94 682.836 L1632.39 682.836 L1631.83 682.836 L1631.27 682.836 L1630.71 682.836 L1630.15 682.836 L1629.59 682.836 L1629.03 682.836 L1628.47 682.836 L1627.91 682.836 L1627.35 682.836 L1626.79 682.836 L1626.23 682.836 L1625.67 682.836 L1625.11 682.836 L1624.56 682.836 L1624 682.836 L1623.44 682.836 L1622.88 682.836 L1622.32 682.836 L1621.76 682.836 L1621.2 682.836 L1620.64 682.836 L1620.08 682.836 L1619.52 682.836 L1618.96 682.836 L1618.4 682.836 L1617.84 682.836 L1617.29 682.836 L1616.73 682.836 L1616.17 682.836 L1615.61 682.836 L1615.05 682.836 L1614.49 682.836 L1613.93 682.836 L1613.37 682.836 L1612.81 682.836 L1612.25 682.836 L1611.69 682.836 L1611.13 682.836 L1610.57 682.836 L1610.02 682.836 L1609.46 682.836 L1608.9 682.836 L1608.34 682.836 L1607.78 682.836 L1607.22 682.836 L1606.66 682.836 L1606.1 682.836 L1605.54 682.836 L1604.98 682.836 L1604.42 682.836 L1603.86 682.836 L1603.3 682.836 L1602.74 682.836 L1602.19 682.836 L1601.63 682.836 L1601.07 682.836 L1600.51 682.836 L1599.95 682.836 L1599.39 682.836 L1598.83 682.836 L1598.27 682.836 L1597.71 682.836 L1597.15 682.836 L1596.59 682.836 L1596.03 682.836 L1595.47 682.836 L1594.92 682.836 L1594.36 682.836 L1593.8 682.836 L1593.24 682.836 L1592.68 682.836 L1592.12 682.836 L1591.56 682.836 L1591 682.836 L1590.44 682.836 L1589.88 682.836 L1589.32 682.836 L1588.76 682.836 L1588.2 682.836 L1587.65 682.836 L1587.09 682.836 L1586.53 682.836 L1585.97 682.836 L1585.41 682.836 L1584.85 682.836 L1584.29 682.836 L1583.73 682.836 L1583.17 682.836 L1582.61 682.836 L1582.05 682.836 L1581.49 682.836 L1580.93 682.836 L1580.37 682.836 L1579.82 682.836 L1579.26 682.836 L1578.7 682.836 L1578.14 682.836 L1577.58 682.836 L1577.02 682.836 L1576.46 682.836 L1575.9 682.836 L1575.34 682.836 L1574.78 682.836 L1574.22 682.836 L1573.66 682.836 L1573.1 682.836 L1572.55 682.836 L1571.99 682.836 L1571.43 682.836 L1570.87 682.836 L1570.31 682.836 L1569.75 682.836 L1569.19 682.836 L1568.63 682.836 L1568.07 682.836 L1567.51 682.836 L1566.95 682.836 L1566.39 682.836 L1565.83 682.836 L1565.28 682.836 L1564.72 682.836 L1564.16 682.836 L1563.6 682.836 L1563.04 682.836 L1562.48 682.836 L1561.92 682.836 L1561.36 682.836 L1560.8 682.836 L1560.24 682.836 L1559.68 682.836 L1559.12 682.836 L1558.56 682.836 L1558 682.836 L1557.45 682.836 L1556.89 682.836 L1556.33 682.836 L1555.77 682.836 L1555.21 682.836 L1554.65 682.836 L1554.09 682.836 L1553.53 682.836 L1552.97 682.836 L1552.41 682.836 L1551.85 682.836 L1551.29 682.836 L1550.73 682.836 L1550.18 682.836 L1549.62 682.836 L1549.06 682.836 L1548.5 682.836 L1547.94 682.836 L1547.38 682.836 L1546.82 682.836 L1546.26 682.836 L1545.7 682.836 L1545.14 682.836 L1544.58 682.836 L1544.02 682.836 L1543.46 682.836 L1542.9 682.836 L1542.35 682.836 L1541.79 682.836 L1541.23 682.836 L1540.67 682.836 L1540.11 682.836 L1539.55 682.836 L1538.99 682.836 L1538.43 682.836 L1537.87 682.836 L1537.31 682.836 L1536.75 682.836 L1536.19 682.836 L1535.63 682.836 L1535.08 682.836 L1534.52 682.836 L1533.96 682.836 L1533.4 682.836 L1532.84 682.836 L1532.28 682.836 L1531.72 682.836 L1531.16 682.836 L1530.6 682.836 L1530.04 682.836 L1529.48 682.836 L1528.92 682.836 L1528.36 682.836 L1527.81 682.836 L1527.25 682.836 L1526.69 682.836 L1526.13 682.836 L1525.57 682.836 L1525.01 682.836 L1524.45 682.836 L1523.89 682.836 L1523.33 682.836 L1522.77 682.836 L1522.21 682.836 L1521.65 682.836 L1521.09 682.836 L1520.53 682.836 L1519.98 682.836 L1519.42 682.836 L1518.86 682.836 L1518.3 682.836 L1517.74 682.836 L1517.18 682.836 L1516.62 682.836 L1516.06 682.836 L1515.5 682.836 L1514.94 682.836 L1514.38 682.836 L1513.82 682.836 L1513.26 682.836 L1512.71 682.836 L1512.15 682.836 L1511.59 682.836 L1511.03 682.836 L1510.47 682.836 L1509.91 682.836 L1509.35 682.836 L1508.79 682.836 L1508.23 682.836 L1507.67 682.836 L1507.11 682.836 L1506.55 682.836 L1505.99 682.836 L1505.44 682.836 L1504.88 682.836 L1504.32 682.836 L1503.76 682.836 L1503.2 682.836 L1502.64 682.836 L1502.08 682.836 L1501.52 682.836 L1500.96 682.836 L1500.4 682.836 L1499.84 682.836 L1499.28 682.836 L1498.72 682.836 L1498.16 682.836 L1497.61 682.836 L1497.05 682.836 L1496.49 682.836 L1495.93 682.836 L1495.37 682.836 L1494.81 682.836 L1494.25 682.836 L1493.69 682.836 L1493.13 682.836 L1492.57 682.836 L1492.01 682.836 L1491.45 682.836 L1490.89 682.836 L1490.34 682.836 L1489.78 682.836 L1489.22 682.836 L1488.66 682.836 L1488.1 682.836 L1487.54 682.836 L1486.98 682.836 L1486.42 682.836 L1485.86 682.836 L1485.3 682.836 L1484.74 682.836 L1484.18 682.836 L1483.62 682.836 L1483.07 682.836 L1482.51 682.836 L1481.95 682.836 L1481.39 682.836 L1480.83 682.836 L1480.27 682.836 L1479.71 682.836 L1479.15 682.836 L1478.59 682.836 L1478.03 682.836 L1477.47 682.836 L1476.91 682.836 L1476.35 682.836 L1475.79 682.836 L1475.24 682.836 L1474.68 682.836 L1474.12 682.836 L1473.56 682.836 L1473 682.836 L1472.44 682.836 L1471.88 682.836 L1471.32 682.836 L1470.76 682.836 L1470.2 682.836 L1469.64 682.836 L1469.08 682.836 L1468.52 682.836 L1467.97 682.836 L1467.41 682.836 L1466.85 682.836 L1466.29 682.836 L1465.73 682.836 L1465.17 682.836 L1464.61 682.836 L1464.05 682.836 L1463.49 682.836 L1462.93 682.836 L1462.37 682.836 L1461.81 682.836 L1461.25 682.836 L1460.7 682.836 L1460.14 682.836 L1459.58 682.836 L1459.02 682.836 L1458.46 682.836 L1457.9 682.836 L1457.34 682.836 L1456.78 682.836 L1456.22 682.836 L1455.66 682.836 L1455.1 682.836 L1454.54 682.836 L1453.98 682.836 L1453.42 682.836 L1452.87 682.836 L1452.31 682.836 L1451.75 682.836 L1451.19 682.836 L1450.63 682.836 L1450.07 682.836 L1449.51 682.836 L1448.95 682.836 L1448.39 682.836 L1447.83 682.836 L1447.27 682.836 L1446.71 682.836 L1446.15 682.836 L1445.6 682.836 L1445.04 682.836 L1444.48 682.836 L1443.92 682.836 L1443.36 682.836 L1442.8 682.836 L1442.24 682.836 L1441.68 682.836 L1441.12 682.836 L1440.56 682.836 L1440 682.836 L1439.44 682.836 L1438.88 682.836 L1438.33 682.836 L1437.77 682.836 L1437.21 682.836 L1436.65 682.836 L1436.09 682.836 L1435.53 682.836 L1434.97 682.836 L1434.41 682.836 L1433.85 682.836 L1433.29 682.836 L1432.73 682.836 L1432.17 682.836 L1431.61 682.836 L1431.05 682.836 L1430.5 682.836 L1429.94 682.836 L1429.38 682.836 L1428.82 682.836 L1428.26 682.836 L1427.7 682.836 L1427.14 682.836 L1426.58 682.836 L1426.02 682.836 L1425.46 682.836 L1424.9 682.836 L1424.34 682.836 L1423.78 682.836 L1423.23 682.836 L1422.67 682.836 L1422.11 682.836 L1421.55 682.836 L1420.99 682.836 L1420.43 682.836 L1419.87 682.836 L1419.31 682.836 L1418.75 682.836 L1418.19 682.836 L1417.63 682.836 L1417.07 682.836 L1416.51 682.836 L1415.95 682.836 L1415.4 682.836 L1414.84 682.836 L1414.28 682.836 L1413.72 682.836 L1413.16 682.836 L1412.6 682.836 L1412.04 682.836 L1411.48 682.836 L1410.92 682.836 L1410.36 682.836 L1409.8 682.836 L1409.24 682.836 L1408.68 682.836 L1408.13 682.836 L1407.57 682.836 L1407.01 682.836 L1406.45 682.836 L1405.89 682.836 L1405.33 682.836 L1404.77 682.836 L1404.21 682.836 L1403.65 682.836 L1403.09 682.836 L1402.53 682.836 L1401.97 682.836 L1401.41 682.836 L1400.86 682.836 L1400.3 682.836 L1399.74 682.836 L1399.18 682.836 L1398.62 682.836 L1398.06 682.836 L1397.5 682.836 L1396.94 682.836 L1396.38 682.836 L1395.82 682.836 L1395.26 682.836 L1394.7 682.836 L1394.14 682.836 L1393.58 682.836 L1393.03 682.836 L1392.47 682.836 L1391.91 682.836 L1391.35 682.836 L1390.79 682.836 L1390.23 682.836 L1389.67 682.836 L1389.11 682.836 L1388.55 682.836 L1387.99 682.836 L1387.43 682.836 L1386.87 682.836 L1386.31 682.836 L1385.76 682.836 L1385.2 682.836 L1384.64 682.836 L1384.08 682.836 L1383.52 682.836 L1382.96 682.836 L1382.4 682.836 L1381.84 682.836 L1381.28 682.836 L1380.72 682.836 L1380.16 682.836 L1379.6 682.836 L1379.04 682.836 L1378.49 682.836 L1377.93 682.836 L1377.37 682.836 L1376.81 682.836 L1376.25 682.836 L1375.69 682.836 L1375.13 682.836 L1374.57 682.836 L1374.01 682.836 L1373.45 682.836 L1372.89 682.836 L1372.33 682.836 L1371.77 682.836 L1371.21 682.836 L1370.66 682.836 L1370.1 682.836 L1369.54 682.836 L1368.98 682.836 L1368.42 682.836 L1367.86 682.836 L1367.3 682.836 L1366.74 682.836 L1366.18 682.836 L1365.62 682.836 L1365.06 682.836 L1364.5 682.836 L1363.94 682.836 L1363.39 682.836 L1362.83 682.836 L1362.27 682.836 L1361.71 682.836 L1361.15 682.836 L1360.59 682.836 L1360.03 682.836 L1359.47 682.836 L1358.91 682.836 L1358.35 682.836 L1357.79 682.836 L1357.23 682.836 L1356.67 682.836 L1356.12 682.836 L1355.56 682.836 L1355 682.836 L1354.44 682.836 L1353.88 682.836 L1353.32 682.836 L1352.76 682.836 L1352.2 682.836 L1351.64 682.836 L1351.08 682.836 L1350.52 682.836 L1349.96 682.836 L1349.4 682.836 L1348.84 682.836 L1348.29 682.836 L1347.73 682.836 L1347.17 682.836 L1346.61 682.836 L1346.05 682.836 L1345.49 682.836 L1344.93 682.836 L1344.37 682.836 L1343.81 682.836 L1343.25 682.836 L1342.69 682.836 L1342.13 682.836 L1341.57 682.836 L1341.02 682.836 L1340.46 682.836 L1339.9 682.836 L1339.34 682.836 L1338.78 682.836 L1338.22 682.836 L1337.66 682.836 L1337.1 682.836 L1336.54 682.836 L1335.98 682.836 L1335.42 682.836 L1334.86 682.836 L1334.3 682.836 L1333.75 682.836 L1333.19 682.836 L1332.63 682.836 L1332.07 682.836 L1331.51 682.836 L1330.95 682.836 L1330.39 682.836 L1329.83 682.836 L1329.27 682.836 L1328.71 682.836 L1328.15 682.836 L1327.59 682.836 L1327.03 682.836 L1326.47 682.836 L1325.92 682.836 L1325.36 682.836 L1324.8 682.836 L1324.24 682.836 L1323.68 682.836 L1323.12 682.836 L1322.56 682.836 L1322 682.836 L1321.44 682.836 L1320.88 682.836 L1320.32 682.836 L1319.76 682.836 L1319.2 682.836 L1318.65 682.836 L1318.09 682.836 L1317.53 682.836 L1316.97 682.836 L1316.41 682.836 L1315.85 682.836 L1315.29 682.836 L1314.73 682.836 L1314.17 682.836 L1313.61 682.836 L1313.05 682.836 L1312.49 682.836 L1311.93 682.836 L1311.38 682.836 L1310.82 682.836 L1310.26 682.836 L1309.7 682.836 L1309.14 682.836 L1308.58 682.836 L1308.02 682.836 L1307.46 682.836 L1306.9 682.836 L1306.34 682.836 L1305.78 682.836 L1305.22 682.836 L1304.66 682.836 L1304.1 682.836 L1303.55 682.836 L1302.99 682.836 L1302.43 682.836 L1301.87 682.836 L1301.31 682.836 L1300.75 682.836 L1300.19 682.836 L1299.63 682.836 L1299.07 682.836 L1298.51 682.836 L1297.95 682.836 L1297.39 682.836 L1296.83 682.836 L1296.28 682.836 L1295.72 682.836 L1295.16 682.836 L1294.6 682.836 L1294.04 682.836 L1293.48 682.836 L1292.92 682.836 L1292.36 682.836 L1291.8 682.836 L1291.24 682.836 L1290.68 682.836 L1290.12 682.836 L1289.56 682.836 L1289 682.836 L1288.45 682.836 L1287.89 682.836 L1287.33 682.836 L1286.77 682.836 L1286.21 682.836 L1285.65 682.836 L1285.09 682.836 L1284.53 682.836 L1283.97 682.836 L1283.41 682.836 L1282.85 682.836 L1282.29 682.836 L1281.73 682.836 L1281.18 682.836 L1280.62 682.836 L1280.06 682.836 L1279.5 682.836 L1278.94 682.836 L1278.38 682.836 L1277.82 682.836 L1277.26 682.836 L1276.7 682.836 L1276.14 682.836 L1275.58 682.836 L1275.02 682.836 L1274.46 682.836 L1273.91 682.836 L1273.35 682.836 L1272.79 682.836 L1272.23 682.836 L1271.67 682.836 L1271.11 682.836 L1270.55 682.836 L1269.99 682.836 L1269.43 682.836 L1268.87 682.836 L1268.31 682.836 L1267.75 682.836 L1267.19 682.836 L1266.63 682.836 L1266.08 682.836 L1265.52 682.836 L1264.96 682.836 L1264.4 682.836 L1263.84 682.836 L1263.28 682.836 L1262.72 682.836 L1262.16 682.836 L1261.6 682.836 L1261.04 682.836 L1260.48 682.836 L1259.92 682.836 L1259.36 682.836 L1258.81 682.836 L1258.25 682.836 L1257.69 682.836 L1257.13 682.836 L1256.57 682.836 L1256.01 682.836 L1255.45 682.836 L1254.89 682.836 L1254.33 682.836 L1253.77 682.836 L1253.21 682.836 L1252.65 682.836 L1252.09 682.836 L1251.54 682.836 L1250.98 682.836 L1250.42 682.836 L1249.86 682.836 L1249.3 682.836 L1248.74 682.836 L1248.18 682.836 L1247.62 682.836 L1247.06 682.836 L1246.5 682.836 L1245.94 682.836 L1245.38 682.836 L1244.82 682.836 L1244.26 682.836 L1243.71 682.836 L1243.15 682.836 L1242.59 682.836 L1242.03 682.836 L1241.47 682.836 L1240.91 682.836 L1240.35 682.836 L1239.79 682.836 L1239.23 682.836 L1238.67 682.836 L1238.11 682.836 L1237.55 682.836 L1236.99 682.836 L1236.44 682.836 L1235.88 682.836 L1235.32 682.836 L1234.76 682.836 L1234.2 682.836 L1233.64 682.836 L1233.08 682.836 L1232.52 682.836 L1231.96 682.836 L1231.4 682.836 L1230.84 682.836 L1230.28 682.836 L1229.72 682.836 L1229.17 682.836 L1228.61 682.836 L1228.05 682.836 L1227.49 682.836 L1226.93 682.836 L1226.37 682.836 L1225.81 682.836 L1225.25 682.836 L1224.69 682.836 L1224.13 682.836 L1223.57 682.836 L1223.01 682.836 L1222.45 682.836 L1221.89 682.836 L1221.34 682.836 L1220.78 682.836 L1220.22 682.836 L1219.66 682.836 L1219.1 682.836 L1218.54 682.836 L1217.98 682.836 L1217.42 682.836 L1216.86 682.836 L1216.3 682.836 L1215.74 682.836 L1215.18 682.836 L1214.62 682.836 L1214.07 682.836 L1213.51 682.836 L1212.95 682.836 L1212.39 682.836 L1211.83 682.836 L1211.27 682.836 L1210.71 682.836 L1210.15 682.836 L1209.59 682.836 L1209.03 682.836 L1208.47 682.836 L1207.91 682.836 L1207.35 682.836 L1206.8 682.836 L1206.24 682.836 L1205.68 682.836 L1205.12 682.836 L1204.56 682.836 L1204 682.836 L1203.44 682.836 L1202.88 682.836 L1202.32 682.836 L1201.76 682.836 L1201.2 682.836 L1200.64 682.836 L1200.08 682.836 L1199.52 682.836 L1198.97 682.836 L1198.41 682.836 L1197.85 682.836 L1197.29 682.836 L1196.73 682.836 L1196.17 682.836 L1195.61 682.836 L1195.05 682.836 L1194.49 682.836 L1193.93 682.836 L1193.37 682.836 L1192.81 682.836 L1192.25 682.836 L1191.7 682.836 L1191.14 682.836 L1190.58 682.836 L1190.02 682.836 L1189.46 682.836 L1188.9 682.836 L1188.34 682.836 L1187.78 682.836 L1187.22 682.836 L1186.66 682.836 L1186.1 682.836 L1185.54 682.836 L1184.98 682.836 L1184.43 682.836 L1183.87 682.836 L1183.31 682.836 L1182.75 682.836 L1182.19 682.836 L1181.63 682.836 L1181.07 682.836 L1180.51 682.836 L1179.95 682.836 L1179.39 682.836 L1178.83 682.836 L1178.27 682.836 L1177.71 682.836 L1177.15 682.836 L1176.6 682.836 L1176.04 682.836 L1175.48 682.836 L1174.92 682.836 L1174.36 682.836 L1173.8 682.836 L1173.24 682.836 L1172.68 682.836 L1172.12 682.836 L1171.56 682.836 L1171 682.836 L1170.44 682.836 L1169.88 682.836 L1169.33 682.836 L1168.77 682.836 L1168.21 682.836 L1167.65 682.836 L1167.09 682.836 L1166.53 682.836 L1165.97 682.836 L1165.41 682.836 L1164.85 682.836 L1164.29 682.836 L1163.73 682.836 L1163.17 682.836 L1162.61 682.836 L1162.05 682.836 L1161.5 682.836 L1160.94 682.836 L1160.38 682.836 L1159.82 682.836 L1159.26 682.836 L1158.7 682.836 L1158.14 682.836 L1157.58 682.836 L1157.02 682.836 L1156.46 682.836 L1155.9 682.836 L1155.34 682.836 L1154.78 682.836 L1154.23 682.836 L1153.67 682.836 L1153.11 682.836 L1152.55 682.836 L1151.99 682.836 L1151.43 682.836 L1150.87 682.836 L1150.31 682.836 L1149.75 682.836 L1149.19 682.836 L1148.63 682.836 L1148.07 682.836 L1147.51 682.836 L1146.96 682.836 L1146.4 682.836 L1145.84 682.836 L1145.28 682.836 L1144.72 682.836 L1144.16 682.836 L1143.6 682.836 L1143.04 682.836 L1142.48 682.836 L1141.92 682.836 L1141.36 682.836 L1140.8 682.836 L1140.24 682.836 L1139.68 682.836 L1139.13 682.836 L1138.57 682.836 L1138.01 682.836 L1137.45 682.836 L1136.89 682.836 L1136.33 682.836 L1135.77 682.836 L1135.21 682.836 L1134.65 682.836 L1134.09 682.836 L1133.53 682.836 L1132.97 682.836 L1132.41 682.836 L1131.86 682.836 L1131.3 682.836 L1130.74 682.836 L1130.18 682.836 L1129.62 682.836 L1129.06 682.836 L1128.5 682.836 L1127.94 682.836 L1127.38 682.836 L1126.82 682.836 L1126.26 682.836 L1125.7 682.836 L1125.14 682.836 L1124.59 682.836 L1124.03 682.836 L1123.47 682.836 L1122.91 682.836 L1122.35 682.836 L1121.79 682.836 L1121.23 682.836 L1120.67 682.836 L1120.11 682.836 L1119.55 682.836 L1118.99 682.836 L1118.43 682.836 L1117.87 682.836 L1117.31 682.836 L1116.76 682.836 L1116.2 682.836 L1115.64 682.836 L1115.08 682.836 L1114.52 682.836 L1113.96 682.836 L1113.4 682.836 L1112.84 682.836 L1112.28 682.836 L1111.72 682.836 L1111.16 682.836 L1110.6 682.836 L1110.04 682.836 L1109.49 682.836 L1108.93 682.836 L1108.37 682.836 L1107.81 682.836 L1107.25 682.836 L1106.69 682.836 L1106.13 682.836 L1105.57 682.836 L1105.01 682.836 L1104.45 682.836 L1103.89 682.836 L1103.33 682.836 L1102.77 682.836 L1102.22 682.836 L1101.66 682.836 L1101.1 682.836 L1100.54 682.836 L1099.98 682.836 L1099.42 682.836 L1098.86 682.836 L1098.3 682.836 L1097.74 682.836 L1097.18 682.836 L1096.62 682.836 L1096.06 682.836 L1095.5 682.836 L1094.94 682.836 L1094.39 682.836 L1093.83 682.836 L1093.27 682.836 L1092.71 682.836 L1092.15 682.836 L1091.59 682.836 L1091.03 682.836 L1090.47 682.836 L1089.91 682.836 L1089.35 682.836 L1088.79 682.836 L1088.23 682.836 L1087.67 682.836 L1087.12 682.836 L1086.56 682.836 L1086 682.836 L1085.44 682.836 L1084.88 682.836 L1084.32 682.836 L1083.76 682.836 L1083.2 682.836 L1082.64 682.836 L1082.08 682.836 L1081.52 682.836 L1080.96 682.836 L1080.4 682.836 L1079.85 682.836 L1079.29 682.836 L1078.73 682.836 L1078.17 682.836 L1077.61 682.836 L1077.05 682.836 L1076.49 682.836 L1075.93 682.836 L1075.37 682.836 L1074.81 682.836 L1074.25 682.836 L1073.69 682.836 L1073.13 682.836 L1072.57 682.836 L1072.02 682.836 L1071.46 682.836 L1070.9 682.836 L1070.34 682.836 L1069.78 682.836 L1069.22 682.836 L1068.66 682.836 L1068.1 682.836 L1067.54 682.836 L1066.98 682.836 L1066.42 682.836 L1065.86 682.836 L1065.3 682.836 L1064.75 682.836 L1064.19 682.836 L1063.63 682.836 L1063.07 682.836 L1062.51 682.836 L1061.95 682.836 L1061.39 682.836 L1060.83 682.836 L1060.27 682.836 L1059.71 682.836 L1059.15 682.836 L1058.59 682.836 L1058.03 682.836 L1057.48 682.836 L1056.92 682.836 L1056.36 682.836 L1055.8 682.836 L1055.24 682.836 L1054.68 682.836 L1054.12 682.836 L1053.56 682.836 L1053 682.836 L1052.44 682.836 L1051.88 682.836 L1051.32 682.836 L1050.76 682.836 L1050.2 682.836 L1049.65 682.836 L1049.09 682.836 L1048.53 682.836 L1047.97 682.836 L1047.41 682.836 L1046.85 682.836 L1046.29 682.836 L1045.73 682.836 L1045.17 682.836 L1044.61 682.836 L1044.05 682.836 L1043.49 682.836 L1042.93 682.836 L1042.38 682.836 L1041.82 682.836 L1041.26 682.836 L1040.7 682.836 L1040.14 682.836 L1039.58 682.836 L1039.02 682.836 L1038.46 682.836 L1037.9 682.836 L1037.34 682.836 L1036.78 682.836 L1036.22 682.836 L1035.66 682.836 L1035.1 682.836 L1034.55 682.836 L1033.99 682.836 L1033.43 682.836 L1032.87 682.836 L1032.31 682.836 L1031.75 682.836 L1031.19 682.836 L1030.63 682.836 L1030.07 682.836 L1029.51 682.836 L1028.95 682.836 L1028.39 682.836 L1027.83 682.836 L1027.28 682.836 L1026.72 682.836 L1026.16 682.836 L1025.6 682.836 L1025.04 682.836 L1024.48 682.836 L1023.92 682.836 L1023.36 682.836 L1022.8 682.836 L1022.24 682.836 L1021.68 682.836 L1021.12 682.836 L1020.56 682.836 L1020.01 682.836 L1019.45 682.836 L1018.89 682.836 L1018.33 682.836 L1017.77 682.836 L1017.21 682.836 L1016.65 682.836 L1016.09 682.836 L1015.53 682.836 L1014.97 682.836 L1014.41 682.836 L1013.85 682.836 L1013.29 682.836 L1012.73 682.836 L1012.18 682.836 L1011.62 682.836 L1011.06 682.836 L1010.5 682.836 L1009.94 682.836 L1009.38 682.836 L1008.82 682.836 L1008.26 682.836 L1007.7 682.836 L1007.14 682.836 L1006.58 682.836 L1006.02 682.836 L1005.46 682.836 L1004.91 682.836 L1004.35 682.836 L1003.79 682.836 L1003.23 682.836 L1002.67 682.836 L1002.11 682.836 L1001.55 682.836 L1000.99 682.836 L1000.43 682.836 L999.872 682.836 L999.313 682.836 L998.754 682.836 L998.194 682.836 L997.635 682.836 L997.076 682.836 L996.517 682.836 L995.957 682.836 L995.398 682.836 L994.839 682.836 L994.28 682.836 L993.72 682.836 L993.161 682.836 L992.602 682.836 L992.043 682.836 L991.483 682.836 L990.924 682.836 L990.365 682.836 L989.806 682.836 L989.246 682.836 L988.687 682.836 L988.128 682.836 L987.569 682.836 L987.009 682.836 L986.45 682.836 L985.891 682.836 L985.332 682.836 L984.772 682.836 L984.213 682.836 L983.654 682.836 L983.095 682.836 L982.535 682.836 L981.976 682.836 L981.417 682.836 L980.858 682.836 L980.298 682.836 L979.739 682.836 L979.18 682.836 L978.621 682.836 L978.061 682.836 L977.502 682.836 L976.943 682.836 L976.384 682.836 L975.824 682.836 L975.265 682.836 L974.706 682.836 L974.147 682.836 L973.587 682.836 L973.028 682.836 L972.469 682.836 L971.91 682.836 L971.35 682.836 L970.791 682.836 L970.232 682.836 L969.673 682.836 L969.113 682.836 L968.554 682.836 L967.995 682.836 L967.436 682.836 L966.876 682.836 L966.317 682.836 L965.758 682.836 L965.199 682.836 L964.639 682.836 L964.08 682.836 L963.521 682.836 L962.962 682.836 L962.402 682.836 L961.843 682.836 L961.284 682.836 L960.725 682.836 L960.165 682.836 L959.606 682.836 L959.047 682.836 L958.488 682.836 L957.928 682.836 L957.369 682.836 L956.81 682.836 L956.251 682.836 L955.691 682.836 L955.132 682.836 L954.573 682.836 L954.014 682.836 L953.454 682.836 L952.895 682.836 L952.336 682.836 L951.777 682.836 L951.217 682.836 L950.658 682.836 L950.099 682.836 L949.54 682.836 L948.98 682.836 L948.421 682.836 L947.862 682.836 L947.303 682.836 L946.743 682.836 L946.184 682.836 L945.625 682.836 L945.066 682.836 L944.506 682.836 L943.947 682.836 L943.388 682.836 L942.829 682.836 L942.269 682.836 L941.71 682.836 L941.151 682.836 L940.592 682.836 L940.032 682.836 L939.473 682.836 L938.914 682.836 L938.355 682.836 L937.795 682.836 L937.236 682.836 L936.677 682.836 L936.118 682.836 L935.558 682.836 L934.999 682.836 L934.44 682.836 L933.881 682.836 L933.321 682.836 L932.762 682.836 L932.203 682.836 L931.644 682.836 L931.084 682.836 L930.525 682.836 L929.966 682.836 L929.406 682.836 L928.847 682.836 L928.288 682.836 L927.729 682.836 L927.169 682.836 L926.61 682.836 L926.051 682.836 L925.492 682.836 L924.932 682.836 L924.373 682.836 L923.814 682.836 L923.255 682.836 L922.695 682.836 L922.136 682.836 L921.577 682.836 L921.018 682.836 L920.458 682.836 L919.899 682.836 L919.34 682.836 L918.781 682.836 L918.221 682.836 L917.662 682.836 L917.103 682.836 L916.544 682.836 L915.984 682.836 L915.425 682.836 L914.866 682.836 L914.307 682.836 L913.747 682.836 L913.188 682.836 L912.629 682.836 L912.07 682.836 L911.51 682.836 L910.951 682.836 L910.392 682.836 L909.833 682.836 L909.273 682.836 L908.714 682.836 L908.155 682.836 L907.596 682.836 L907.036 682.836 L906.477 682.836 L905.918 682.836 L905.359 682.836 L904.799 682.836 L904.24 682.836 L903.681 682.836 L903.122 682.836 L902.562 682.836 L902.003 682.836 L901.444 682.836 L900.885 682.836 L900.325 682.836 L899.766 682.836 L899.207 682.836 L898.648 682.836 L898.088 682.836 L897.529 682.836 L896.97 682.836 L896.411 682.836 L895.851 682.836 L895.292 682.836 L894.733 682.836 L894.174 682.836 L893.614 682.836 L893.055 682.836 L892.496 682.836 L891.937 682.836 L891.377 682.836 L890.818 682.836 L890.259 682.836 L889.7 682.836 L889.14 682.836 L888.581 682.836 L888.022 682.836 L887.463 682.836 L886.903 682.836 L886.344 682.836 L885.785 682.836 L885.226 682.836 L884.666 682.836 L884.107 682.836 L883.548 682.836 L882.989 682.836 L882.429 682.836 L881.87 682.836 L881.311 682.836 L880.752 682.836 L880.192 682.836 L879.633 682.836 L879.074 682.836 L878.515 682.836 L877.955 682.836 L877.396 682.836 L876.837 682.836 L876.278 682.836 L875.718 682.836 L875.159 682.836 L874.6 682.836 L874.041 682.836 L873.481 682.836 L872.922 682.836 L872.363 682.836 L871.804 682.836 L871.244 682.836 L870.685 682.836 L870.126 682.836 L869.567 682.836 L869.007 682.836 L868.448 682.836 L867.889 682.836 L867.33 682.836 L866.77 682.836 L866.211 682.836 L865.652 682.836 L865.093 682.836 L864.533 682.836 L863.974 682.836 L863.415 682.836 L862.856 682.836 L862.296 682.836 L861.737 682.836 L861.178 682.836 L860.619 682.836 L860.059 682.836 L859.5 682.836 L858.941 682.836 L858.382 682.836 L857.822 682.836 L857.263 682.836 L856.704 682.836 L856.145 682.836 L855.585 682.836 L855.026 682.836 L854.467 682.836 L853.908 682.836 L853.348 682.836 L852.789 682.836 L852.23 682.836 L851.671 682.836 L851.111 682.836 L850.552 682.836 L849.993 682.836 L849.434 682.836 L848.874 682.836 L848.315 682.836 L847.756 682.836 L847.197 682.836 L846.637 682.836 L846.078 682.836 L845.519 682.836 L844.96 682.836 L844.4 682.836 L843.841 682.836 L843.282 682.836 L842.723 682.836 L842.163 682.836 L841.604 682.836 L841.045 682.836 L840.486 682.836 L839.926 682.836 L839.367 682.836 L838.808 682.836 L838.249 682.836 L837.689 682.836 L837.13 682.836 L836.571 682.836 L836.012 682.836 L835.452 682.836 L834.893 682.836 L834.334 682.836 L833.775 682.836 L833.215 682.836 L832.656 682.836 L832.097 682.836 L831.538 682.836 L830.978 682.836 L830.419 682.836 L829.86 682.836 L829.301 682.836 L828.741 682.836 L828.182 682.836 L827.623 682.836 L827.064 682.836 L826.504 682.836 L825.945 682.836 L825.386 682.836 L824.827 682.836 L824.267 682.836 L823.708 682.836 L823.149 682.836 L822.59 682.836 L822.03 682.836 L821.471 682.836 L820.912 682.836 L820.353 682.836 L819.793 682.836 L819.234 682.836 L818.675 682.836 L818.116 682.836 L817.556 682.836 L816.997 682.836 L816.438 682.836 L815.879 682.836 L815.319 682.836 L814.76 682.836 L814.201 682.836 L813.642 682.836 L813.082 682.836 L812.523 682.836 L811.964 682.836 L811.405 682.836 L810.845 682.836 L810.286 682.836 L809.727 682.836 L809.168 682.836 L808.608 682.836 L808.049 682.836 L807.49 682.836 L806.931 682.836 L806.371 682.836 L805.812 682.836 L805.253 682.836 L804.693 682.836 L804.134 682.836 L803.575 682.836 L803.016 682.836 L802.456 682.836 L801.897 682.836 L801.338 682.836 L800.779 682.836 L800.219 682.836 L799.66 682.836 L799.101 682.836 L798.542 682.836 L797.982 682.836 L797.423 682.836 L796.864 682.836 L796.305 682.836 L795.745 682.836 L795.186 682.836 L794.627 682.836 L794.068 682.836 L793.508 682.836 L792.949 682.836 L792.39 682.836 L791.831 682.836 L791.271 682.836 L790.712 682.836 L790.153 682.836 L789.594 682.836 L789.034 682.836 L788.475 682.836 L787.916 682.836 L787.357 682.836 L786.797 682.836 L786.238 682.836 L785.679 682.836 L785.12 682.836 L784.56 682.836 L784.001 682.836 L783.442 682.836 L782.883 682.836 L782.323 682.836 L781.764 682.836 L781.205 682.836 L780.646 682.836 L780.086 682.836 L779.527 682.836 L778.968 682.836 L778.409 682.836 L777.849 682.836 L777.29 682.836 L776.731 682.836 L776.172 682.836 L775.612 682.836 L775.053 682.836 L774.494 682.836 L773.935 682.836 L773.375 682.836 L772.816 682.836 L772.257 682.836 L771.698 682.836 L771.138 682.836 L770.579 682.836 L770.02 682.836 L769.461 682.836 L768.901 682.836 L768.342 682.836 L767.783 682.836 L767.224 682.836 L766.664 682.836 L766.105 682.836 L765.546 682.836 L764.987 682.836 L764.427 682.836 L763.868 682.836 L763.309 682.836 L762.75 682.836 L762.19 682.836 L761.631 682.836 L761.072 682.836 L760.513 682.836 L759.953 682.836 L759.394 682.836 L758.835 682.836 L758.276 682.836 L757.716 682.836 L757.157 682.836 L756.598 682.836 L756.039 682.836 L755.479 682.836 L754.92 682.836 L754.361 682.836 L753.802 682.836 L753.242 682.836 L752.683 682.836 L752.124 682.836 L751.565 682.836 L751.005 682.836 L750.446 682.836 L749.887 682.836 L749.328 682.836 L748.768 682.836 L748.209 682.836 L747.65 682.836 L747.091 682.836 L746.531 682.836 L745.972 682.836 L745.413 682.836 L744.854 682.836 L744.294 682.836 L743.735 682.836 L743.176 682.836 L742.617 682.836 L742.057 682.836 L741.498 682.836 L740.939 682.836 L740.38 682.836 L739.82 682.836 L739.261 682.836 L738.702 682.836 L738.143 682.836 L737.583 682.836 L737.024 682.836 L736.465 682.836 L735.906 682.836 L735.346 682.836 L734.787 682.836 L734.228 682.836 L733.669 682.836 L733.109 682.836 L732.55 682.836 L731.991 682.836 L731.432 682.836 L730.872 682.836 L730.313 682.836 L729.754 682.836 L729.195 682.836 L728.635 682.836 L728.076 682.836 L727.517 682.836 L726.958 682.836 L726.398 682.836 L725.839 682.836 L725.28 682.836 L724.721 682.836 L724.161 682.836 L723.602 682.836 L723.043 682.836 L722.484 682.836 L721.924 682.836 L721.365 682.836 L720.806 682.836 L720.247 682.836  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip093)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.625 720.806,683.625 721.365,683.625 721.924,683.625 722.484,683.625 723.043,683.625 723.602,683.625 724.161,683.625 724.721,683.625 725.28,683.625 725.839,683.625 726.398,683.625 726.958,683.625 727.517,683.625 728.076,683.625 728.635,683.625 729.195,683.625 729.754,683.625 730.313,683.625 730.872,683.625 731.432,683.625 731.991,683.625 732.55,683.625 733.109,683.625 733.669,683.625 734.228,683.625 734.787,683.625 735.346,683.625 735.906,683.625 736.465,683.625 737.024,683.625 737.583,683.625 738.143,683.625 738.702,683.625 739.261,683.625 739.82,683.625 740.38,683.625 740.939,683.625 741.498,683.625 742.057,683.625 742.617,683.625 743.176,683.625 743.735,683.625 744.294,683.625 744.854,683.625 745.413,683.625 745.972,683.625 746.531,683.625 747.091,683.625 747.65,683.625 748.209,683.625 748.768,683.625 749.328,683.625 749.887,683.625 750.446,683.625 751.005,683.625 751.565,683.625 752.124,683.625 752.683,683.625 753.242,683.625 753.802,683.625 754.361,683.625 754.92,683.625 755.479,683.625 756.039,683.625 756.598,683.625 757.157,683.625 757.716,683.625 758.276,683.625 758.835,683.625 759.394,683.625 759.953,683.625 760.513,683.625 761.072,683.625 761.631,683.625 762.19,683.625 762.75,683.625 763.309,683.625 763.868,683.625 764.427,683.625 764.987,683.625 765.546,683.625 766.105,683.625 766.664,683.625 767.224,683.625 767.783,683.625 768.342,683.625 768.901,683.625 769.461,683.625 770.02,683.625 770.579,683.625 771.138,683.625 771.698,683.625 772.257,683.625 772.816,683.625 773.375,683.625 773.935,683.625 774.494,683.625 775.053,683.625 775.612,683.625 776.172,683.625 776.731,683.625 777.29,683.625 777.849,683.625 778.409,683.625 778.968,683.625 779.527,683.625 780.086,683.625 780.646,683.625 781.205,683.625 781.764,683.625 782.323,683.625 782.883,683.625 783.442,683.625 784.001,683.625 784.56,683.625 785.12,683.625 785.679,683.625 786.238,683.625 786.797,683.625 787.357,683.625 787.916,683.625 788.475,683.625 789.034,683.625 789.594,683.625 790.153,683.625 790.712,683.625 791.271,683.625 791.831,683.625 792.39,683.625 792.949,683.625 793.508,683.625 794.068,683.625 794.627,683.625 795.186,683.625 795.745,683.625 796.305,683.625 796.864,683.625 797.423,683.625 797.982,683.625 798.542,683.625 799.101,683.625 799.66,683.625 800.219,683.625 800.779,683.625 801.338,683.625 801.897,683.625 802.456,683.625 803.016,683.625 803.575,683.625 804.134,683.625 804.693,683.625 805.253,683.625 805.812,683.625 806.371,683.625 806.931,683.625 807.49,683.625 808.049,683.625 808.608,683.625 809.168,683.625 809.727,683.625 810.286,683.625 810.845,683.625 811.405,683.625 811.964,683.625 812.523,683.625 813.082,683.625 813.642,683.625 814.201,683.625 814.76,683.625 815.319,683.625 815.879,683.625 816.438,683.625 816.997,683.625 817.556,683.625 818.116,683.625 818.675,683.625 819.234,683.625 819.793,683.625 820.353,683.625 820.912,683.625 821.471,683.625 822.03,683.625 822.59,683.625 823.149,683.625 823.708,683.625 824.267,683.625 824.827,683.625 825.386,683.625 825.945,683.625 826.504,683.625 827.064,683.625 827.623,683.625 828.182,683.625 828.741,683.625 829.301,683.625 829.86,683.625 830.419,683.625 830.978,683.625 831.538,683.625 832.097,683.625 832.656,683.625 833.215,683.625 833.775,683.625 834.334,683.625 834.893,683.625 835.452,683.625 836.012,683.625 836.571,683.625 837.13,683.625 837.689,683.625 838.249,683.625 838.808,683.625 839.367,683.625 839.926,683.625 840.486,683.625 841.045,683.625 841.604,683.625 842.163,683.625 842.723,683.625 843.282,683.625 843.841,683.625 844.4,683.625 844.96,683.625 845.519,683.625 846.078,683.625 846.637,683.625 847.197,683.625 847.756,683.625 848.315,683.625 848.874,683.625 849.434,683.625 849.993,683.625 850.552,683.625 851.111,683.625 851.671,683.625 852.23,683.625 852.789,683.625 853.348,683.625 853.908,683.625 854.467,683.625 855.026,683.625 855.585,683.625 856.145,683.625 856.704,683.625 857.263,683.625 857.822,683.625 858.382,683.625 858.941,683.625 859.5,683.625 860.059,683.625 860.619,683.625 861.178,683.625 861.737,683.625 862.296,683.625 862.856,683.625 863.415,683.625 863.974,683.625 864.533,683.625 865.093,683.625 865.652,683.625 866.211,683.625 866.77,683.625 867.33,683.625 867.889,683.625 868.448,683.625 869.007,683.625 869.567,683.625 870.126,683.625 870.685,683.625 871.244,683.625 871.804,683.625 872.363,683.625 872.922,683.625 873.481,683.625 874.041,683.625 874.6,683.625 875.159,683.625 875.718,683.625 876.278,683.625 876.837,683.625 877.396,683.625 877.955,683.625 878.515,683.625 879.074,683.625 879.633,683.625 880.192,683.625 880.752,683.625 881.311,683.625 881.87,683.625 882.429,683.625 882.989,683.625 883.548,683.625 884.107,683.625 884.666,683.625 885.226,683.625 885.785,683.625 886.344,683.625 886.903,683.625 887.463,683.625 888.022,683.625 888.581,683.625 889.14,683.625 889.7,683.625 890.259,683.625 890.818,683.625 891.377,683.625 891.937,683.625 892.496,683.625 893.055,683.625 893.614,683.625 894.174,683.625 894.733,683.625 895.292,683.625 895.851,683.625 896.411,683.625 896.97,683.625 897.529,683.625 898.088,683.625 898.648,683.625 899.207,683.625 899.766,683.625 900.325,683.625 900.885,683.625 901.444,683.625 902.003,683.625 902.562,683.625 903.122,683.625 903.681,683.625 904.24,683.625 904.799,683.625 905.359,683.625 905.918,683.625 906.477,683.625 907.036,683.625 907.596,683.625 908.155,683.625 908.714,683.625 909.273,683.625 909.833,683.625 910.392,683.625 910.951,683.625 911.51,683.625 912.07,683.625 912.629,683.625 913.188,683.625 913.747,683.625 914.307,683.625 914.866,683.625 915.425,683.625 915.984,683.625 916.544,683.625 917.103,683.625 917.662,683.625 918.221,683.625 918.781,683.625 919.34,683.625 919.899,683.625 920.458,683.625 921.018,683.625 921.577,683.625 922.136,683.625 922.695,683.625 923.255,683.625 923.814,683.625 924.373,683.625 924.932,683.625 925.492,683.625 926.051,683.625 926.61,683.625 927.169,683.625 927.729,683.625 928.288,683.625 928.847,683.625 929.406,683.625 929.966,683.625 930.525,683.625 931.084,683.625 931.644,683.625 932.203,683.625 932.762,683.625 933.321,683.625 933.881,683.625 934.44,683.625 934.999,683.625 935.558,683.625 936.118,683.625 936.677,683.625 937.236,683.625 937.795,683.625 938.355,683.625 938.914,683.625 939.473,683.625 940.032,683.625 940.592,683.625 941.151,683.625 941.71,683.625 942.269,683.625 942.829,683.625 943.388,683.625 943.947,683.625 944.506,683.625 945.066,683.625 945.625,683.625 946.184,683.625 946.743,683.625 947.303,683.625 947.862,683.625 948.421,683.625 948.98,683.625 949.54,683.625 950.099,683.625 950.658,683.625 951.217,683.625 951.777,683.625 952.336,683.625 952.895,683.625 953.454,683.625 954.014,683.625 954.573,683.625 955.132,683.625 955.691,683.625 956.251,683.625 956.81,683.625 957.369,683.625 957.928,683.625 958.488,683.625 959.047,683.625 959.606,683.625 960.165,683.625 960.725,683.625 961.284,683.625 961.843,683.625 962.402,683.625 962.962,683.625 963.521,683.625 964.08,683.625 964.639,683.625 965.199,683.625 965.758,683.625 966.317,683.625 966.876,683.625 967.436,683.625 967.995,683.625 968.554,683.625 969.113,683.625 969.673,683.625 970.232,683.625 970.791,683.625 971.35,683.625 971.91,683.625 972.469,683.625 973.028,683.625 973.587,683.625 974.147,683.625 974.706,683.625 975.265,683.625 975.824,683.625 976.384,683.625 976.943,683.625 977.502,683.625 978.061,683.625 978.621,683.625 979.18,683.625 979.739,683.625 980.298,683.625 980.858,683.625 981.417,683.625 981.976,683.625 982.535,683.625 983.095,683.625 983.654,683.625 984.213,683.625 984.772,683.625 985.332,683.625 985.891,683.625 986.45,683.625 987.009,683.625 987.569,683.625 988.128,683.625 988.687,683.625 989.246,683.625 989.806,683.625 990.365,683.625 990.924,683.625 991.483,683.625 992.043,683.625 992.602,683.625 993.161,683.625 993.72,683.625 994.28,683.625 994.839,683.625 995.398,683.625 995.957,683.625 996.517,683.625 997.076,683.625 997.635,683.625 998.194,683.625 998.754,683.625 999.313,683.625 999.872,683.625 1000.43,683.625 1000.99,683.625 1001.55,683.625 1002.11,683.625 1002.67,683.625 1003.23,683.625 1003.79,683.625 1004.35,683.625 1004.91,683.625 1005.46,683.625 1006.02,683.625 1006.58,683.625 1007.14,683.625 1007.7,683.625 1008.26,683.625 1008.82,683.625 1009.38,683.625 1009.94,683.625 1010.5,683.625 1011.06,683.625 1011.62,683.625 1012.18,683.625 1012.73,683.625 1013.29,683.625 1013.85,683.625 1014.41,683.625 1014.97,683.625 1015.53,683.625 1016.09,683.625 1016.65,683.625 1017.21,683.625 1017.77,683.625 1018.33,683.625 1018.89,683.625 1019.45,683.625 1020.01,683.625 1020.56,683.625 1021.12,683.625 1021.68,683.625 1022.24,683.625 1022.8,683.625 1023.36,683.625 1023.92,683.625 1024.48,683.625 1025.04,683.625 1025.6,683.625 1026.16,683.625 1026.72,683.625 1027.28,683.625 1027.83,683.625 1028.39,683.625 1028.95,683.625 1029.51,683.625 1030.07,683.625 1030.63,683.625 1031.19,683.625 1031.75,683.625 1032.31,683.625 1032.87,683.625 1033.43,683.625 1033.99,683.625 1034.55,683.625 1035.1,683.625 1035.66,683.625 1036.22,683.625 1036.78,683.625 1037.34,683.625 1037.9,683.625 1038.46,683.625 1039.02,683.625 1039.58,683.625 1040.14,683.625 1040.7,683.625 1041.26,683.625 1041.82,683.625 1042.38,683.625 1042.93,683.625 1043.49,683.625 1044.05,683.625 1044.61,683.625 1045.17,683.625 1045.73,683.625 1046.29,683.625 1046.85,683.625 1047.41,683.625 1047.97,683.625 1048.53,683.625 1049.09,683.625 1049.65,683.625 1050.2,683.625 1050.76,683.625 1051.32,683.625 1051.88,683.625 1052.44,683.625 1053,683.625 1053.56,683.625 1054.12,683.625 1054.68,683.625 1055.24,683.625 1055.8,683.625 1056.36,683.625 1056.92,683.625 1057.48,683.625 1058.03,683.625 1058.59,683.625 1059.15,683.625 1059.71,683.625 1060.27,683.625 1060.83,683.625 1061.39,683.625 1061.95,683.625 1062.51,683.625 1063.07,683.625 1063.63,683.625 1064.19,683.625 1064.75,683.625 1065.3,683.625 1065.86,683.625 1066.42,683.625 1066.98,683.625 1067.54,683.625 1068.1,683.625 1068.66,683.625 1069.22,683.625 1069.78,683.625 1070.34,683.625 1070.9,683.625 1071.46,683.625 1072.02,683.625 1072.57,683.625 1073.13,683.625 1073.69,683.625 1074.25,683.625 1074.81,683.625 1075.37,683.625 1075.93,683.625 1076.49,683.625 1077.05,683.625 1077.61,683.625 1078.17,683.625 1078.73,683.625 1079.29,683.625 1079.85,683.625 1080.4,683.625 1080.96,683.625 1081.52,683.625 1082.08,683.625 1082.64,683.625 1083.2,683.625 1083.76,683.625 1084.32,683.625 1084.88,683.625 1085.44,683.625 1086,683.625 1086.56,683.625 1087.12,683.625 1087.67,683.625 1088.23,683.625 1088.79,683.625 1089.35,683.625 1089.91,683.625 1090.47,683.625 1091.03,683.625 1091.59,683.625 1092.15,683.625 1092.71,683.625 1093.27,683.625 1093.83,683.625 1094.39,683.625 1094.94,683.625 1095.5,683.625 1096.06,683.625 1096.62,683.625 1097.18,683.625 1097.74,683.625 1098.3,683.625 1098.86,683.625 1099.42,683.625 1099.98,683.625 1100.54,683.625 1101.1,683.625 1101.66,683.625 1102.22,683.625 1102.77,683.625 1103.33,683.625 1103.89,683.625 1104.45,683.625 1105.01,683.625 1105.57,683.625 1106.13,683.625 1106.69,683.625 1107.25,683.625 1107.81,683.625 1108.37,683.625 1108.93,683.625 1109.49,683.625 1110.04,683.625 1110.6,683.625 1111.16,683.625 1111.72,683.625 1112.28,683.625 1112.84,683.625 1113.4,683.625 1113.96,683.625 1114.52,683.625 1115.08,683.625 1115.64,683.625 1116.2,683.625 1116.76,683.625 1117.31,683.625 1117.87,683.625 1118.43,683.625 1118.99,683.625 1119.55,683.625 1120.11,683.625 1120.67,683.625 1121.23,683.625 1121.79,683.625 1122.35,683.625 1122.91,683.625 1123.47,683.625 1124.03,683.625 1124.59,683.625 1125.14,683.625 1125.7,683.625 1126.26,683.625 1126.82,683.625 1127.38,683.625 1127.94,683.625 1128.5,683.625 1129.06,683.625 1129.62,683.625 1130.18,683.625 1130.74,683.625 1131.3,683.625 1131.86,683.625 1132.41,683.625 1132.97,683.625 1133.53,683.625 1134.09,683.625 1134.65,683.625 1135.21,683.625 1135.77,683.625 1136.33,683.625 1136.89,683.625 1137.45,683.625 1138.01,683.625 1138.57,683.625 1139.13,683.625 1139.68,683.625 1140.24,683.625 1140.8,683.625 1141.36,683.625 1141.92,683.625 1142.48,683.625 1143.04,683.625 1143.6,683.625 1144.16,683.625 1144.72,683.625 1145.28,683.625 1145.84,683.625 1146.4,683.625 1146.96,683.625 1147.51,683.625 1148.07,683.625 1148.63,683.625 1149.19,683.625 1149.75,683.625 1150.31,683.625 1150.87,683.625 1151.43,683.625 1151.99,683.625 1152.55,683.625 1153.11,683.625 1153.67,683.625 1154.23,683.625 1154.78,683.625 1155.34,683.625 1155.9,683.625 1156.46,683.625 1157.02,683.625 1157.58,683.625 1158.14,683.625 1158.7,683.625 1159.26,683.625 1159.82,683.625 1160.38,683.625 1160.94,683.625 1161.5,683.625 1162.05,683.625 1162.61,683.625 1163.17,683.625 1163.73,683.625 1164.29,683.625 1164.85,683.625 1165.41,683.625 1165.97,683.625 1166.53,683.625 1167.09,683.625 1167.65,683.625 1168.21,683.625 1168.77,683.625 1169.33,683.625 1169.88,683.625 1170.44,683.625 1171,683.625 1171.56,683.625 1172.12,683.625 1172.68,683.625 1173.24,683.625 1173.8,683.625 1174.36,683.625 1174.92,683.625 1175.48,683.625 1176.04,683.625 1176.6,683.625 1177.15,683.625 1177.71,683.625 1178.27,683.625 1178.83,683.625 1179.39,683.625 1179.95,683.625 1180.51,683.625 1181.07,683.625 1181.63,683.625 1182.19,683.625 1182.75,683.625 1183.31,683.625 1183.87,683.625 1184.43,683.625 1184.98,683.625 1185.54,683.625 1186.1,683.625 1186.66,683.625 1187.22,683.625 1187.78,683.625 1188.34,683.625 1188.9,683.625 1189.46,683.625 1190.02,683.625 1190.58,683.625 1191.14,683.625 1191.7,683.625 1192.25,683.625 1192.81,683.625 1193.37,683.625 1193.93,683.625 1194.49,683.625 1195.05,683.625 1195.61,683.625 1196.17,683.625 1196.73,683.625 1197.29,683.625 1197.85,683.625 1198.41,683.625 1198.97,683.625 1199.52,683.625 1200.08,683.625 1200.64,683.625 1201.2,683.625 1201.76,683.625 1202.32,683.625 1202.88,683.625 1203.44,683.625 1204,683.625 1204.56,683.625 1205.12,683.625 1205.68,683.625 1206.24,683.625 1206.8,683.625 1207.35,683.625 1207.91,683.625 1208.47,683.625 1209.03,683.625 1209.59,683.625 1210.15,683.625 1210.71,683.625 1211.27,683.625 1211.83,683.625 1212.39,683.625 1212.95,683.625 1213.51,683.625 1214.07,683.625 1214.62,683.625 1215.18,683.625 1215.74,683.625 1216.3,683.625 1216.86,683.625 1217.42,683.625 1217.98,683.625 1218.54,683.625 1219.1,683.625 1219.66,683.625 1220.22,683.625 1220.78,683.625 1221.34,683.625 1221.89,683.625 1222.45,683.625 1223.01,683.625 1223.57,683.625 1224.13,683.625 1224.69,683.625 1225.25,683.625 1225.81,683.625 1226.37,683.625 1226.93,683.625 1227.49,683.625 1228.05,683.625 1228.61,683.625 1229.17,683.625 1229.72,683.625 1230.28,683.625 1230.84,683.625 1231.4,683.625 1231.96,683.625 1232.52,683.625 1233.08,683.625 1233.64,683.625 1234.2,683.625 1234.76,683.625 1235.32,683.625 1235.88,683.625 1236.44,683.625 1236.99,683.625 1237.55,683.625 1238.11,683.625 1238.67,683.625 1239.23,683.625 1239.79,683.625 1240.35,683.625 1240.91,683.625 1241.47,683.625 1242.03,683.625 1242.59,683.625 1243.15,683.625 1243.71,683.625 1244.26,683.625 1244.82,683.625 1245.38,683.625 1245.94,683.625 1246.5,683.625 1247.06,683.625 1247.62,683.625 1248.18,683.625 1248.74,683.625 1249.3,683.625 1249.86,683.625 1250.42,683.625 1250.98,683.625 1251.54,683.625 1252.09,683.625 1252.65,683.625 1253.21,683.625 1253.77,683.625 1254.33,683.625 1254.89,683.625 1255.45,683.625 1256.01,683.625 1256.57,683.625 1257.13,683.625 1257.69,683.625 1258.25,683.625 1258.81,683.625 1259.36,683.625 1259.92,683.625 1260.48,683.625 1261.04,683.625 1261.6,683.625 1262.16,683.625 1262.72,683.625 1263.28,683.625 1263.84,683.625 1264.4,683.625 1264.96,683.625 1265.52,683.625 1266.08,683.625 1266.63,683.625 1267.19,683.625 1267.75,683.625 1268.31,683.625 1268.87,683.625 1269.43,683.625 1269.99,683.625 1270.55,683.625 1271.11,683.625 1271.67,683.625 1272.23,683.625 1272.79,683.625 1273.35,683.625 1273.91,683.625 1274.46,683.625 1275.02,683.625 1275.58,683.625 1276.14,683.625 1276.7,683.625 1277.26,683.625 1277.82,683.625 1278.38,683.625 1278.94,683.625 1279.5,683.625 1280.06,683.625 1280.62,683.625 1281.18,683.625 1281.73,683.625 1282.29,683.625 1282.85,683.625 1283.41,683.625 1283.97,683.625 1284.53,683.625 1285.09,683.625 1285.65,683.625 1286.21,683.625 1286.77,683.625 1287.33,683.625 1287.89,683.625 1288.45,683.625 1289,683.625 1289.56,683.625 1290.12,683.625 1290.68,683.625 1291.24,683.625 1291.8,683.625 1292.36,683.625 1292.92,683.625 1293.48,683.625 1294.04,683.625 1294.6,683.625 1295.16,683.625 1295.72,683.625 1296.28,683.625 1296.83,683.625 1297.39,683.625 1297.95,683.625 1298.51,683.625 1299.07,683.625 1299.63,683.625 1300.19,683.625 1300.75,683.625 1301.31,683.625 1301.87,683.625 1302.43,683.625 1302.99,683.625 1303.55,683.625 1304.1,683.625 1304.66,683.625 1305.22,683.625 1305.78,683.625 1306.34,683.625 1306.9,683.625 1307.46,683.625 1308.02,683.625 1308.58,683.625 1309.14,683.625 1309.7,683.625 1310.26,683.625 1310.82,683.625 1311.38,683.625 1311.93,683.625 1312.49,683.625 1313.05,683.625 1313.61,683.625 1314.17,683.625 1314.73,683.625 1315.29,683.625 1315.85,683.625 1316.41,683.625 1316.97,683.625 1317.53,683.625 1318.09,683.625 1318.65,683.625 1319.2,683.625 1319.76,683.625 1320.32,683.625 1320.88,683.625 1321.44,683.625 1322,683.625 1322.56,683.625 1323.12,683.625 1323.68,683.625 1324.24,683.625 1324.8,683.625 1325.36,683.625 1325.92,683.625 1326.47,683.625 1327.03,683.625 1327.59,683.625 1328.15,683.625 1328.71,683.625 1329.27,683.625 1329.83,683.625 1330.39,683.625 1330.95,683.625 1331.51,683.625 1332.07,683.625 1332.63,683.625 1333.19,683.625 1333.75,683.625 1334.3,683.625 1334.86,683.625 1335.42,683.625 1335.98,683.625 1336.54,683.625 1337.1,683.625 1337.66,683.625 1338.22,683.625 1338.78,683.625 1339.34,683.625 1339.9,683.625 1340.46,683.625 1341.02,683.625 1341.57,683.625 1342.13,683.625 1342.69,683.625 1343.25,683.625 1343.81,683.625 1344.37,683.625 1344.93,683.625 1345.49,683.625 1346.05,683.625 1346.61,683.625 1347.17,683.625 1347.73,683.625 1348.29,683.625 1348.84,683.625 1349.4,683.625 1349.96,683.625 1350.52,683.625 1351.08,683.625 1351.64,683.625 1352.2,683.625 1352.76,683.625 1353.32,683.625 1353.88,683.625 1354.44,683.625 1355,683.625 1355.56,683.625 1356.12,683.625 1356.67,683.625 1357.23,683.625 1357.79,683.625 1358.35,683.625 1358.91,683.625 1359.47,683.625 1360.03,683.625 1360.59,683.625 1361.15,683.625 1361.71,683.625 1362.27,683.625 1362.83,683.625 1363.39,683.625 1363.94,683.625 1364.5,683.625 1365.06,683.625 1365.62,683.625 1366.18,683.625 1366.74,683.625 1367.3,683.625 1367.86,683.625 1368.42,683.625 1368.98,683.625 1369.54,683.625 1370.1,683.625 1370.66,683.625 1371.21,683.625 1371.77,683.625 1372.33,683.625 1372.89,683.625 1373.45,683.625 1374.01,683.625 1374.57,683.625 1375.13,683.625 1375.69,683.625 1376.25,683.625 1376.81,683.625 1377.37,683.625 1377.93,683.625 1378.49,683.625 1379.04,683.625 1379.6,683.625 1380.16,683.625 1380.72,683.625 1381.28,683.625 1381.84,683.625 1382.4,683.625 1382.96,683.625 1383.52,683.625 1384.08,683.625 1384.64,683.625 1385.2,683.625 1385.76,683.625 1386.31,683.625 1386.87,683.625 1387.43,683.625 1387.99,683.625 1388.55,683.625 1389.11,683.625 1389.67,683.625 1390.23,683.625 1390.79,683.625 1391.35,683.625 1391.91,683.625 1392.47,683.625 1393.03,683.625 1393.58,683.625 1394.14,683.625 1394.7,683.625 1395.26,683.625 1395.82,683.625 1396.38,683.625 1396.94,683.625 1397.5,683.625 1398.06,683.625 1398.62,683.625 1399.18,683.625 1399.74,683.625 1400.3,683.625 1400.86,683.625 1401.41,683.625 1401.97,683.625 1402.53,683.625 1403.09,683.625 1403.65,683.625 1404.21,683.625 1404.77,683.625 1405.33,683.625 1405.89,683.625 1406.45,683.625 1407.01,683.625 1407.57,683.625 1408.13,683.625 1408.68,683.625 1409.24,683.625 1409.8,683.625 1410.36,683.625 1410.92,683.625 1411.48,683.625 1412.04,683.625 1412.6,683.625 1413.16,683.625 1413.72,683.625 1414.28,683.625 1414.84,683.625 1415.4,683.625 1415.95,683.625 1416.51,683.625 1417.07,683.625 1417.63,683.625 1418.19,683.625 1418.75,683.625 1419.31,683.625 1419.87,683.625 1420.43,683.625 1420.99,683.625 1421.55,683.625 1422.11,683.625 1422.67,683.625 1423.23,683.625 1423.78,683.625 1424.34,683.625 1424.9,683.625 1425.46,683.625 1426.02,683.625 1426.58,683.625 1427.14,683.625 1427.7,683.625 1428.26,683.625 1428.82,683.625 1429.38,683.625 1429.94,683.625 1430.5,683.625 1431.05,683.625 1431.61,683.625 1432.17,683.625 1432.73,683.625 1433.29,683.625 1433.85,683.625 1434.41,683.625 1434.97,683.625 1435.53,683.625 1436.09,683.625 1436.65,683.625 1437.21,683.625 1437.77,683.625 1438.33,683.625 1438.88,683.625 1439.44,683.625 1440,683.625 1440.56,683.625 1441.12,683.625 1441.68,683.625 1442.24,683.625 1442.8,683.625 1443.36,683.625 1443.92,683.625 1444.48,683.625 1445.04,683.625 1445.6,683.625 1446.15,683.625 1446.71,683.625 1447.27,683.625 1447.83,683.625 1448.39,683.625 1448.95,683.625 1449.51,683.625 1450.07,683.625 1450.63,683.625 1451.19,683.625 1451.75,683.625 1452.31,683.625 1452.87,683.625 1453.42,683.625 1453.98,683.625 1454.54,683.625 1455.1,683.625 1455.66,683.625 1456.22,683.625 1456.78,683.625 1457.34,683.625 1457.9,683.625 1458.46,683.625 1459.02,683.625 1459.58,683.625 1460.14,683.625 1460.7,683.625 1461.25,683.625 1461.81,683.625 1462.37,683.625 1462.93,683.625 1463.49,683.625 1464.05,683.625 1464.61,683.625 1465.17,683.625 1465.73,683.625 1466.29,683.625 1466.85,683.625 1467.41,683.625 1467.97,683.625 1468.52,683.625 1469.08,683.625 1469.64,683.625 1470.2,683.625 1470.76,683.625 1471.32,683.625 1471.88,683.625 1472.44,683.625 1473,683.625 1473.56,683.625 1474.12,683.625 1474.68,683.625 1475.24,683.625 1475.79,683.625 1476.35,683.625 1476.91,683.625 1477.47,683.625 1478.03,683.625 1478.59,683.625 1479.15,683.625 1479.71,683.625 1480.27,683.625 1480.83,683.625 1481.39,683.625 1481.95,683.625 1482.51,683.625 1483.07,683.625 1483.62,683.625 1484.18,683.625 1484.74,683.625 1485.3,683.625 1485.86,683.625 1486.42,683.625 1486.98,683.625 1487.54,683.625 1488.1,683.625 1488.66,683.625 1489.22,683.625 1489.78,683.625 1490.34,683.625 1490.89,683.625 1491.45,683.625 1492.01,683.625 1492.57,683.625 1493.13,683.625 1493.69,683.625 1494.25,683.625 1494.81,683.625 1495.37,683.625 1495.93,683.625 1496.49,683.625 1497.05,683.625 1497.61,683.625 1498.16,683.625 1498.72,683.625 1499.28,683.625 1499.84,683.625 1500.4,683.625 1500.96,683.625 1501.52,683.625 1502.08,683.625 1502.64,683.625 1503.2,683.625 1503.76,683.625 1504.32,683.625 1504.88,683.625 1505.44,683.625 1505.99,683.625 1506.55,683.625 1507.11,683.625 1507.67,683.625 1508.23,683.625 1508.79,683.625 1509.35,683.625 1509.91,683.625 1510.47,683.625 1511.03,683.625 1511.59,683.625 1512.15,683.625 1512.71,683.625 1513.26,683.625 1513.82,683.625 1514.38,683.625 1514.94,683.625 1515.5,683.625 1516.06,683.625 1516.62,683.625 1517.18,683.625 1517.74,683.625 1518.3,683.625 1518.86,683.625 1519.42,683.625 1519.98,683.625 1520.53,683.625 1521.09,683.625 1521.65,683.625 1522.21,683.625 1522.77,683.625 1523.33,683.625 1523.89,683.625 1524.45,683.625 1525.01,683.625 1525.57,683.625 1526.13,683.625 1526.69,683.625 1527.25,683.625 1527.81,683.625 1528.36,683.625 1528.92,683.625 1529.48,683.625 1530.04,683.625 1530.6,683.625 1531.16,683.625 1531.72,683.625 1532.28,683.625 1532.84,683.625 1533.4,683.625 1533.96,683.625 1534.52,683.625 1535.08,683.625 1535.63,683.625 1536.19,683.625 1536.75,683.625 1537.31,683.625 1537.87,683.625 1538.43,683.625 1538.99,683.625 1539.55,683.625 1540.11,683.625 1540.67,683.625 1541.23,683.625 1541.79,683.625 1542.35,683.625 1542.9,683.625 1543.46,683.625 1544.02,683.625 1544.58,683.625 1545.14,683.625 1545.7,683.625 1546.26,683.625 1546.82,683.625 1547.38,683.625 1547.94,683.625 1548.5,683.625 1549.06,683.625 1549.62,683.625 1550.18,683.625 1550.73,683.625 1551.29,683.625 1551.85,683.625 1552.41,683.625 1552.97,683.625 1553.53,683.625 1554.09,683.625 1554.65,683.625 1555.21,683.625 1555.77,683.625 1556.33,683.625 1556.89,683.625 1557.45,683.625 1558,683.625 1558.56,683.625 1559.12,683.625 1559.68,683.625 1560.24,683.625 1560.8,683.625 1561.36,683.625 1561.92,683.625 1562.48,683.625 1563.04,683.625 1563.6,683.625 1564.16,683.625 1564.72,683.625 1565.28,683.625 1565.83,683.625 1566.39,683.625 1566.95,683.625 1567.51,683.625 1568.07,683.625 1568.63,683.625 1569.19,683.625 1569.75,683.625 1570.31,683.625 1570.87,683.625 1571.43,683.625 1571.99,683.625 1572.55,683.625 1573.1,683.625 1573.66,683.625 1574.22,683.625 1574.78,683.625 1575.34,683.625 1575.9,683.625 1576.46,683.625 1577.02,683.625 1577.58,683.625 1578.14,683.625 1578.7,683.625 1579.26,683.625 1579.82,683.625 1580.37,683.625 1580.93,683.625 1581.49,683.625 1582.05,683.625 1582.61,683.625 1583.17,683.625 1583.73,683.625 1584.29,683.625 1584.85,683.625 1585.41,683.625 1585.97,683.625 1586.53,683.625 1587.09,683.625 1587.65,683.625 1588.2,683.625 1588.76,683.625 1589.32,683.625 1589.88,683.625 1590.44,683.625 1591,683.625 1591.56,683.625 1592.12,683.625 1592.68,683.625 1593.24,683.625 1593.8,683.625 1594.36,683.625 1594.92,683.625 1595.47,683.625 1596.03,683.625 1596.59,683.625 1597.15,683.625 1597.71,683.625 1598.27,683.625 1598.83,683.625 1599.39,683.625 1599.95,683.625 1600.51,683.625 1601.07,683.625 1601.63,683.625 1602.19,683.625 1602.74,683.625 1603.3,683.625 1603.86,683.625 1604.42,683.625 1604.98,683.625 1605.54,683.625 1606.1,683.625 1606.66,683.625 1607.22,683.625 1607.78,683.625 1608.34,683.625 1608.9,683.625 1609.46,683.625 1610.02,683.625 1610.57,683.625 1611.13,683.625 1611.69,683.625 1612.25,683.625 1612.81,683.625 1613.37,683.625 1613.93,683.625 1614.49,683.625 1615.05,683.625 1615.61,683.625 1616.17,683.625 1616.73,683.625 1617.29,683.625 1617.84,683.625 1618.4,683.625 1618.96,683.625 1619.52,683.625 1620.08,683.625 1620.64,683.625 1621.2,683.625 1621.76,683.625 1622.32,683.625 1622.88,683.625 1623.44,683.625 1624,683.625 1624.56,683.625 1625.11,683.625 1625.67,683.625 1626.23,683.625 1626.79,683.625 1627.35,683.625 1627.91,683.625 1628.47,683.625 1629.03,683.625 1629.59,683.625 1630.15,683.625 1630.71,683.625 1631.27,683.625 1631.83,683.625 1632.39,683.625 1632.94,683.625 1633.5,683.625 1634.06,683.625 1634.62,683.625 1635.18,683.625 1635.74,683.625 1636.3,683.625 1636.86,683.625 1637.42,683.625 1637.98,683.625 1638.54,683.625 1639.1,683.625 1639.66,683.625 1640.21,683.625 1640.77,683.625 1641.33,683.625 1641.89,683.625 1642.45,683.625 1643.01,683.625 1643.57,683.625 1644.13,683.625 1644.69,683.625 1645.25,683.625 1645.81,683.625 1646.37,683.625 1646.93,683.625 1647.48,683.625 1648.04,683.625 1648.6,683.625 1649.16,683.625 1649.72,683.625 1650.28,683.625 1650.84,683.625 1651.4,683.625 1651.96,683.625 1652.52,683.625 1653.08,683.625 1653.64,683.625 1654.2,683.625 1654.76,683.625 1655.31,683.625 1655.87,683.625 1656.43,683.625 1656.99,683.625 1657.55,683.625 1658.11,683.625 1658.67,683.625 1659.23,683.625 1659.79,683.625 1660.35,683.625 1660.91,683.625 1661.47,683.625 1662.03,683.625 1662.58,683.625 1663.14,683.625 1663.7,683.625 1664.26,683.625 1664.82,683.625 1665.38,683.625 1665.94,683.625 1666.5,683.625 1667.06,683.625 1667.62,683.625 1668.18,683.625 1668.74,683.625 1669.3,683.625 1669.85,683.625 1670.41,683.625 1670.97,683.625 1671.53,683.625 1672.09,683.625 1672.65,683.625 1673.21,683.625 1673.77,683.625 1674.33,683.625 1674.89,683.625 1675.45,683.625 1676.01,683.625 1676.57,683.625 1677.13,683.625 1677.68,683.625 1678.24,683.625 1678.8,683.625 1679.36,683.625 1679.92,683.625 1680.48,683.625 1681.04,683.625 1681.6,683.625 1682.16,683.625 1682.72,683.625 1683.28,683.625 1683.84,683.625 1684.4,683.625 1684.95,683.625 1685.51,683.625 1686.07,683.625 1686.63,683.625 1687.19,683.625 1687.75,683.625 1688.31,683.625 1688.87,683.625 1689.43,683.625 1689.99,683.625 1690.55,683.625 1691.11,683.625 1691.67,683.625 1692.23,683.625 1692.78,683.625 1693.34,683.625 1693.9,683.625 1694.46,683.625 1695.02,683.625 1695.58,683.625 1696.14,683.625 1696.7,683.625 1697.26,683.625 1697.82,683.625 1698.38,683.625 1698.94,683.625 1699.5,683.625 1700.05,683.625 1700.61,683.625 1701.17,683.625 1701.73,683.625 1702.29,683.625 1702.85,683.625 1703.41,683.625 1703.97,683.625 1704.53,683.625 1705.09,683.625 1705.65,683.625 1706.21,683.625 1706.77,683.625 1707.32,683.625 1707.88,683.625 1708.44,683.625 1709,683.625 1709.56,683.625 1710.12,683.625 1710.68,683.625 1711.24,683.625 1711.8,683.625 1712.36,683.625 1712.92,683.625 1713.48,683.625 1714.04,683.625 1714.6,683.625 1715.15,683.625 1715.71,683.625 1716.27,683.625 1716.83,683.625 1717.39,683.625 1717.95,683.625 1718.51,683.625 1719.07,683.625 1719.63,683.625 1720.19,683.625 1720.75,683.625 1721.31,683.625 1721.87,683.625 1722.42,683.625 1722.98,683.625 1723.54,683.625 1724.1,683.625 1724.66,683.625 1725.22,683.625 1725.78,683.625 1726.34,683.625 1726.9,683.625 1727.46,683.625 1728.02,683.625 1728.58,683.625 1729.14,683.625 1729.69,683.625 1730.25,683.625 1730.81,683.625 1731.37,683.625 1731.93,683.625 1732.49,683.625 1733.05,683.625 1733.61,683.625 1734.17,683.625 1734.73,683.625 1735.29,683.625 1735.85,683.625 1736.41,683.625 1736.97,683.625 1737.52,683.625 1738.08,683.625 1738.64,683.625 1739.2,683.625 1739.76,683.625 1740.32,683.625 1740.88,683.625 1741.44,683.625 1742,683.625 1742.56,683.625 1743.12,683.625 1743.68,683.625 1744.24,683.625 1744.79,683.625 1745.35,683.625 1745.91,683.625 1746.47,683.625 1747.03,683.625 1747.59,683.625 1748.15,683.625 1748.71,683.625 1749.27,683.625 1749.83,683.625 1750.39,683.625 1750.95,683.625 1751.51,683.625 1752.06,683.625 1752.62,683.625 1753.18,683.625 1753.74,683.625 1754.3,683.625 1754.86,683.625 1755.42,683.625 1755.98,683.625 1756.54,683.625 1757.1,683.625 1757.66,683.625 1758.22,683.625 1758.78,683.625 1759.34,683.625 1759.89,683.625 1760.45,683.625 1761.01,683.625 1761.57,683.625 1762.13,683.625 1762.69,683.625 1763.25,683.625 1763.81,683.625 1764.37,683.625 1764.93,683.625 1765.49,683.625 1766.05,683.625 1766.61,683.625 1767.16,683.625 1767.72,683.625 1768.28,683.625 1768.84,683.625 1769.4,683.625 1769.96,683.625 1770.52,683.625 1771.08,683.625 1771.64,683.625 1772.2,683.625 1772.76,683.625 1773.32,683.625 1773.88,683.625 1774.43,683.625 1774.99,683.625 1775.55,683.625 1776.11,683.625 1776.67,683.625 1777.23,683.625 1777.79,683.625 1778.35,683.625 1778.91,683.625 1779.47,683.625 1780.03,683.625 1780.59,683.625 1781.15,683.625 1781.71,683.625 1782.26,683.625 1782.82,683.625 1783.38,683.625 1783.94,683.625 1784.5,683.625 1785.06,683.625 1785.62,683.625 1786.18,683.625 1786.74,683.625 1787.3,683.625 1787.86,683.625 1788.42,683.625 1788.98,683.625 1789.53,683.625 1790.09,683.625 1790.65,683.625 1791.21,683.625 1791.77,683.625 1792.33,683.625 1792.89,683.625 1793.45,683.625 1794.01,683.625 1794.57,683.625 1795.13,683.625 1795.69,683.625 1796.25,683.625 1796.8,683.625 1797.36,683.625 1797.92,683.625 1798.48,683.625 1799.04,683.625 1799.6,683.625 1800.16,683.625 1800.72,683.625 1801.28,683.625 1801.84,683.625 1802.4,683.625 1802.96,683.625 1803.52,683.625 1804.08,683.625 1804.63,683.625 1805.19,683.625 1805.75,683.625 1806.31,683.625 1806.87,683.625 1807.43,683.625 1807.99,683.625 1808.55,683.625 1809.11,683.625 1809.67,683.625 1810.23,683.625 1810.79,683.625 1811.35,683.625 1811.9,683.625 1812.46,683.625 1813.02,683.625 1813.58,683.625 1814.14,683.625 1814.7,683.625 1815.26,683.625 1815.82,683.625 1816.38,683.625 1816.94,683.625 1817.5,683.625 1818.06,683.625 1818.62,683.625 1819.18,683.625 1819.73,683.625 1820.29,683.625 1820.85,683.625 1821.41,683.625 1821.97,683.625 1822.53,683.625 1823.09,683.625 1823.65,683.625 1824.21,683.625 1824.77,683.625 1825.33,683.625 1825.89,683.625 1826.45,683.625 1827,683.625 1827.56,683.625 1828.12,683.625 1828.68,683.625 1829.24,683.625 1829.8,683.625 1830.36,683.625 1830.92,683.625 1831.48,683.625 1832.04,683.625 1832.6,683.625 1833.16,683.625 1833.72,683.625 1834.27,683.625 1834.83,683.625 1835.39,683.625 1835.95,683.625 1836.51,683.625 1837.07,683.625 1837.63,683.625 1838.19,683.625 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025787042459228 ± 0.02372253630708929\nProjected Energy: -4.01528857105364 ± (0.00410539956185918, 0.003974687169186808)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.44997</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.6431e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.919e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.107e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.372e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.585e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.944e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
