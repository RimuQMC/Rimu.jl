var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21219384398806002 ± 0.0014860910743206299\n   G2(1) = 0.9172856174402467 ± 0.0008969812707044705\n   G2(2) = 0.9814125789794413 ± 0.0004438955876355199\n   G2(3) = 0.9904097631725629 ± 0.0009272041703404535\n   G2(4) = 0.9814125789794413 ± 0.0004438955876355199\n   G2(5) = 0.9172856174402467 ± 0.0008969812707044705\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.013107379217536 ± 0.13118895136964304\n   Replica 2: -4.051722912940218 ± 0.12787455672732687\n   Replica 3: -4.019194874540523 ± 0.13358976423443059\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip270\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip271\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip270)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip272\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.87 2211.02,1261.87 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.01 2211.02,1004.01 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.146 2211.02,746.146 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.284 2211.02,488.284 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.423 2211.02,230.423 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.87 423.181,1261.87 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.01 423.181,1004.01 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.146 423.181,746.146 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.284 423.181,488.284 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.423 423.181,230.423 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M356.339 1247.67 Q352.728 1247.67 350.899 1251.23 Q349.094 1254.78 349.094 1261.9 Q349.094 1269.01 350.899 1272.58 Q352.728 1276.12 356.339 1276.12 Q359.973 1276.12 361.779 1272.58 Q363.608 1269.01 363.608 1261.9 Q363.608 1254.78 361.779 1251.23 Q359.973 1247.67 356.339 1247.67 M356.339 1243.97 Q362.149 1243.97 365.205 1248.57 Q368.284 1253.16 368.284 1261.9 Q368.284 1270.63 365.205 1275.24 Q362.149 1279.82 356.339 1279.82 Q350.529 1279.82 347.45 1275.24 Q344.395 1270.63 344.395 1261.9 Q344.395 1253.16 347.45 1248.57 Q350.529 1243.97 356.339 1243.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M290.043 1017.35 L306.363 1017.35 L306.363 1021.29 L284.418 1021.29 L284.418 1017.35 Q287.08 1014.6 291.664 1009.97 Q296.27 1005.32 297.451 1003.97 Q299.696 1001.45 300.576 999.714 Q301.478 997.955 301.478 996.265 Q301.478 993.511 299.534 991.775 Q297.613 990.039 294.511 990.039 Q292.312 990.039 289.858 990.802 Q287.427 991.566 284.65 993.117 L284.65 988.395 Q287.474 987.261 289.927 986.682 Q292.381 986.103 294.418 986.103 Q299.789 986.103 302.983 988.789 Q306.177 991.474 306.177 995.964 Q306.177 998.094 305.367 1000.02 Q304.58 1001.91 302.474 1004.51 Q301.895 1005.18 298.793 1008.39 Q295.691 1011.59 290.043 1017.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M316.224 986.728 L334.58 986.728 L334.58 990.664 L320.506 990.664 L320.506 999.136 Q321.524 998.788 322.543 998.626 Q323.562 998.441 324.58 998.441 Q330.367 998.441 333.747 1001.61 Q337.126 1004.78 337.126 1010.2 Q337.126 1015.78 333.654 1018.88 Q330.182 1021.96 323.862 1021.96 Q321.687 1021.96 319.418 1021.59 Q317.173 1021.22 314.765 1020.48 L314.765 1015.78 Q316.849 1016.91 319.071 1017.47 Q321.293 1018.02 323.77 1018.02 Q327.774 1018.02 330.112 1015.92 Q332.45 1013.81 332.45 1010.2 Q332.45 1006.59 330.112 1004.48 Q327.774 1002.38 323.77 1002.38 Q321.895 1002.38 320.02 1002.79 Q318.168 1003.21 316.224 1004.09 L316.224 986.728 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 989.807 Q352.728 989.807 350.899 993.372 Q349.094 996.913 349.094 1004.04 Q349.094 1011.15 350.899 1014.71 Q352.728 1018.26 356.339 1018.26 Q359.973 1018.26 361.779 1014.71 Q363.608 1011.15 363.608 1004.04 Q363.608 996.913 361.779 993.372 Q359.973 989.807 356.339 989.807 M356.339 986.103 Q362.149 986.103 365.205 990.71 Q368.284 995.293 368.284 1004.04 Q368.284 1012.77 365.205 1017.38 Q362.149 1021.96 356.339 1021.96 Q350.529 1021.96 347.45 1017.38 Q344.395 1012.77 344.395 1004.04 Q344.395 995.293 347.45 990.71 Q350.529 986.103 356.339 986.103 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M286.062 728.866 L304.418 728.866 L304.418 732.802 L290.344 732.802 L290.344 741.274 Q291.363 740.927 292.381 740.764 Q293.4 740.579 294.418 740.579 Q300.205 740.579 303.585 743.751 Q306.964 746.922 306.964 752.339 Q306.964 757.917 303.492 761.019 Q300.02 764.098 293.701 764.098 Q291.525 764.098 289.256 763.727 Q287.011 763.357 284.603 762.616 L284.603 757.917 Q286.687 759.051 288.909 759.607 Q291.131 760.163 293.608 760.163 Q297.613 760.163 299.951 758.056 Q302.288 755.95 302.288 752.339 Q302.288 748.727 299.951 746.621 Q297.613 744.514 293.608 744.514 Q291.733 744.514 289.858 744.931 Q288.006 745.348 286.062 746.227 L286.062 728.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M326.177 731.945 Q322.566 731.945 320.737 735.51 Q318.932 739.052 318.932 746.181 Q318.932 753.288 320.737 756.852 Q322.566 760.394 326.177 760.394 Q329.811 760.394 331.617 756.852 Q333.446 753.288 333.446 746.181 Q333.446 739.052 331.617 735.51 Q329.811 731.945 326.177 731.945 M326.177 728.241 Q331.987 728.241 335.043 732.848 Q338.122 737.431 338.122 746.181 Q338.122 754.908 335.043 759.514 Q331.987 764.098 326.177 764.098 Q320.367 764.098 317.288 759.514 Q314.233 754.908 314.233 746.181 Q314.233 737.431 317.288 732.848 Q320.367 728.241 326.177 728.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 731.945 Q352.728 731.945 350.899 735.51 Q349.094 739.052 349.094 746.181 Q349.094 753.288 350.899 756.852 Q352.728 760.394 356.339 760.394 Q359.973 760.394 361.779 756.852 Q363.608 753.288 363.608 746.181 Q363.608 739.052 361.779 735.51 Q359.973 731.945 356.339 731.945 M356.339 728.241 Q362.149 728.241 365.205 732.848 Q368.284 737.431 368.284 746.181 Q368.284 754.908 365.205 759.514 Q362.149 764.098 356.339 764.098 Q350.529 764.098 347.45 759.514 Q344.395 754.908 344.395 746.181 Q344.395 737.431 347.45 732.848 Q350.529 728.241 356.339 728.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M284.835 471.004 L307.057 471.004 L307.057 472.995 L294.511 505.564 L289.627 505.564 L301.432 474.94 L284.835 474.94 L284.835 471.004 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M316.224 471.004 L334.58 471.004 L334.58 474.94 L320.506 474.94 L320.506 483.412 Q321.524 483.065 322.543 482.903 Q323.562 482.717 324.58 482.717 Q330.367 482.717 333.747 485.889 Q337.126 489.06 337.126 494.477 Q337.126 500.055 333.654 503.157 Q330.182 506.236 323.862 506.236 Q321.687 506.236 319.418 505.865 Q317.173 505.495 314.765 504.754 L314.765 500.055 Q316.849 501.19 319.071 501.745 Q321.293 502.301 323.77 502.301 Q327.774 502.301 330.112 500.194 Q332.45 498.088 332.45 494.477 Q332.45 490.865 330.112 488.759 Q327.774 486.653 323.77 486.653 Q321.895 486.653 320.02 487.069 Q318.168 487.486 316.224 488.365 L316.224 471.004 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 474.083 Q352.728 474.083 350.899 477.648 Q349.094 481.19 349.094 488.319 Q349.094 495.426 350.899 498.99 Q352.728 502.532 356.339 502.532 Q359.973 502.532 361.779 498.99 Q363.608 495.426 363.608 488.319 Q363.608 481.19 361.779 477.648 Q359.973 474.083 356.339 474.083 M356.339 470.379 Q362.149 470.379 365.205 474.986 Q368.284 479.569 368.284 488.319 Q368.284 497.046 365.205 501.652 Q362.149 506.236 356.339 506.236 Q350.529 506.236 347.45 501.652 Q344.395 497.046 344.395 488.319 Q344.395 479.569 347.45 474.986 Q350.529 470.379 356.339 470.379 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M256.664 243.767 L264.303 243.767 L264.303 217.402 L255.992 219.068 L255.992 214.809 L264.256 213.143 L268.932 213.143 L268.932 243.767 L276.571 243.767 L276.571 247.703 L256.664 247.703 L256.664 243.767 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M296.015 216.221 Q292.404 216.221 290.576 219.786 Q288.77 223.328 288.77 230.457 Q288.77 237.564 290.576 241.129 Q292.404 244.67 296.015 244.67 Q299.65 244.67 301.455 241.129 Q303.284 237.564 303.284 230.457 Q303.284 223.328 301.455 219.786 Q299.65 216.221 296.015 216.221 M296.015 212.518 Q301.826 212.518 304.881 217.124 Q307.96 221.707 307.96 230.457 Q307.96 239.184 304.881 243.791 Q301.826 248.374 296.015 248.374 Q290.205 248.374 287.127 243.791 Q284.071 239.184 284.071 230.457 Q284.071 221.707 287.127 217.124 Q290.205 212.518 296.015 212.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M326.177 216.221 Q322.566 216.221 320.737 219.786 Q318.932 223.328 318.932 230.457 Q318.932 237.564 320.737 241.129 Q322.566 244.67 326.177 244.67 Q329.811 244.67 331.617 241.129 Q333.446 237.564 333.446 230.457 Q333.446 223.328 331.617 219.786 Q329.811 216.221 326.177 216.221 M326.177 212.518 Q331.987 212.518 335.043 217.124 Q338.122 221.707 338.122 230.457 Q338.122 239.184 335.043 243.791 Q331.987 248.374 326.177 248.374 Q320.367 248.374 317.288 243.791 Q314.233 239.184 314.233 230.457 Q314.233 221.707 317.288 217.124 Q320.367 212.518 326.177 212.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M356.339 216.221 Q352.728 216.221 350.899 219.786 Q349.094 223.328 349.094 230.457 Q349.094 237.564 350.899 241.129 Q352.728 244.67 356.339 244.67 Q359.973 244.67 361.779 241.129 Q363.608 237.564 363.608 230.457 Q363.608 223.328 361.779 219.786 Q359.973 216.221 356.339 216.221 M356.339 212.518 Q362.149 212.518 365.205 217.124 Q368.284 221.707 368.284 230.457 Q368.284 239.184 365.205 243.791 Q362.149 248.374 356.339 248.374 Q350.529 248.374 347.45 243.791 Q344.395 239.184 344.395 230.457 Q344.395 221.707 347.45 217.124 Q350.529 212.518 356.339 212.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip272)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.423 4017.76,230.423 \"/>\n<polyline clip-path=\"url(#clip272)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.52 455.986,1250.53 456.554,1250.44 457.123,1250.28 457.691,1249.03 458.259,1248.79 458.828,1248.45 459.396,1248.06 459.964,1247.57 460.533,1247.03 461.101,1245.4 461.669,1243.7 462.238,1241.98 462.806,1241.21 463.375,1240.34 463.943,1239.37 464.511,1238.34 465.08,1237.19 465.648,1235.96 466.216,1232.56 466.785,1231.07 467.353,1229.52 467.921,1227.81 468.49,1225.95 469.058,1223.96 469.626,1221.82 470.195,1218.52 470.763,1215.03 471.331,1212.43 471.9,1208.61 472.468,1204.63 473.036,1201.57 473.605,1198.27 474.173,1194.77 474.741,1191.08 475.31,1185.12 475.878,1181 476.446,1176.66 477.015,1172.15 477.583,1166.28 478.152,1161.17 478.72,1154.88 479.288,1149.47 479.857,1143.78 480.425,1136.9 480.993,1129.79 481.562,1122.27 482.13,1112.58 482.698,1104.7 483.267,1097.59 483.835,1089.29 484.403,1081.95 484.972,1073.25 485.54,1064.49 486.108,1055.37 486.677,1047.29 487.245,1038.94 487.813,1030.52 488.382,1021.92 488.95,1013.14 489.518,1003.2 490.087,993.077 490.655,978.724 491.224,965.275 491.792,954.941 492.36,944.534 492.929,934.006 493.497,923.432 494.065,913.039 494.634,903.564 495.202,892.77 495.77,881.936 496.339,869.149 496.907,858.353 497.475,848.725 498.044,838.993 498.612,828.186 499.18,818.354 499.749,807.615 500.317,797.026 500.885,786.387 501.454,773.733 502.022,758.017 502.59,745.75 503.159,734.724 503.727,725.875 504.295,714.056 504.864,704.294 505.432,691.58 506.001,680.222 506.569,671.057 507.137,662.011 507.706,653.088 508.274,644.118 508.842,635.208 509.411,624.601 509.979,616.086 510.547,607.57 511.116,599.253 511.684,590.168 512.252,582.117 512.821,575.388 513.389,568.467 513.957,560.575 514.526,551.922 515.094,545.451 515.662,538.98 516.231,529.501 516.799,523.455 517.367,516.226 517.936,510.145 518.504,504.263 519.072,498.481 519.641,491.716 520.209,485.146 520.778,478.525 521.346,471.208 521.914,465.982 522.483,459.847 523.051,451.715 523.619,445.806 524.188,439.265 524.756,433.772 525.324,429.467 525.893,425.095 526.461,419.993 527.029,413.85 527.598,405.074 528.166,402.633 528.734,399.084 529.303,393.521 529.871,389.319 530.439,386.311 531.008,379.204 531.576,373.165 532.144,370.551 532.713,366.017 533.281,362.667 533.85,359.383 534.418,355.259 534.986,351.277 535.555,348.571 536.123,345.792 536.691,343.947 537.26,339.831 537.828,337.098 538.396,333.4 538.965,328.834 539.533,326.829 540.101,324.478 540.67,321.366 541.238,320.267 541.806,322.241 542.375,317.77 542.943,315.467 543.511,310.361 544.08,310.539 544.648,309.627 545.216,306.504 545.785,305.71 546.353,303.98 546.921,302.059 547.49,303.622 548.058,303.674 548.627,302.616 549.195,302.527 549.763,299.287 550.332,296.352 550.9,293.492 551.468,292.696 552.037,291.956 552.605,289.33 553.173,289.92 553.742,290.286 554.31,288.425 554.878,286.582 555.447,284.925 556.015,282.379 556.583,281.008 557.152,278.369 557.72,277.167 558.288,276.878 558.857,276.35 559.425,278.118 559.993,276.476 560.562,272.819 561.13,271.61 561.698,271.438 562.267,270.161 562.835,268.188 563.404,264.89 563.972,263.964 564.54,266.146 565.109,267.123 565.677,266.086 566.245,267.139 566.814,262.909 567.382,261.991 567.95,262.131 568.519,263.39 569.087,264.388 569.655,264.07 570.224,264.96 570.792,264.811 571.36,264.441 571.929,266.557 572.497,265.17 573.065,266.004 573.634,263.669 574.202,261.321 574.77,261.168 575.339,260.829 575.907,259.538 576.476,258.338 577.044,259.237 577.612,259.973 578.181,259.587 578.749,257.202 579.317,253.831 579.886,257.878 580.454,256.571 581.022,256.272 581.591,254.894 582.159,255.376 582.727,255.165 583.296,253.953 583.864,252.646 584.432,251.434 585.001,250.461 585.569,247.504 586.137,247.621 586.706,248.006 587.274,249.143 587.842,248.065 588.411,249.089 588.979,248.303 589.547,249.286 590.116,248.253 590.684,246.999 591.253,244.84 591.821,246.183 592.389,244.261 592.958,245.517 593.526,247.942 594.094,247.821 594.663,247.774 595.231,246.461 595.799,244.143 596.368,244.441 596.936,244.519 597.504,246.722 598.073,243.458 598.641,247.105 599.209,246.086 599.778,245.894 600.346,243.065 600.914,243.045 601.483,243.037 602.051,243.193 602.619,241.214 603.188,240.19 603.756,242.506 604.325,239.691 604.893,240.086 605.461,240.335 606.03,241.765 606.598,244.098 607.166,244.024 607.735,243.903 608.303,243.98 608.871,244.04 609.44,244.086 610.008,242.841 610.576,242.76 611.145,242.796 611.713,241.662 612.281,241.857 612.85,243.045 613.418,244.092 613.986,242.132 614.555,240.192 615.123,240.323 615.691,240.757 616.26,240.639 616.828,240.627 617.396,240.707 617.965,240.87 618.533,242.066 619.102,240.975 619.67,239.789 620.238,241.009 620.807,243.145 621.375,243.061 621.943,241.841 622.512,240.649 623.08,241.564 623.648,242.251 624.217,241.276 624.785,239.265 625.353,239.096 625.922,239.361 626.49,242.073 627.058,241.077 627.627,239.758 628.195,238.579 628.763,238.795 629.332,240.852 629.9,240.697 630.468,237.552 631.037,237.658 631.605,237.933 632.173,237.998 632.742,241.234 633.31,237.881 633.879,236.76 634.447,236.833 635.015,234.961 635.584,236.182 636.152,237.42 636.72,236.597 637.289,237.378 637.857,237.288 638.425,237.356 638.994,238.446 639.562,235.302 640.13,232.441 640.699,232.788 641.267,232.101 641.835,234.476 642.404,234.549 642.972,234.689 643.54,233.787 644.109,232.933 644.677,232.38 645.245,230.741 645.814,231.139 646.382,229.515 646.951,228.91 647.519,229.467 648.087,230.094 648.656,230.511 649.224,230.167 649.792,230.69 650.361,231.114 650.929,231.635 651.497,232.099 652.066,232.395 652.634,230.842 653.202,230.262 653.771,230.782 654.339,230.49 654.907,232.067 655.476,231.438 656.044,232.847 656.612,233.168 657.181,232.587 657.749,231.989 658.317,231.371 658.886,231.77 659.454,234.293 660.022,232.682 660.591,232.146 661.159,231.75 661.728,231.066 662.296,231.553 662.864,232.134 663.433,232.506 664.001,231.006 664.569,231.549 665.138,232.027 665.706,234.396 666.274,233.888 666.843,234.161 667.411,234.847 667.979,234.999 668.548,233.126 669.116,231.259 669.684,231.781 670.253,233.207 670.821,233.625 671.389,233.919 671.958,235.474 672.526,235.753 673.094,233.895 673.663,235.189 674.231,235.431 674.799,236.88 675.368,238.748 675.936,238.608 676.505,237.737 677.073,239.76 677.641,241.497 678.21,242.284 678.778,242.95 679.346,241.346 679.915,240.766 680.483,241.694 681.051,237.317 681.62,234.129 682.188,237.165 682.756,239.332 683.325,236.978 683.893,237.838 684.461,236.813 685.03,235.786 685.598,236.009 686.166,237.143 686.735,236.927 687.303,235.773 687.871,235.987 688.44,235.843 689.008,235.789 689.577,235.889 690.145,238 690.713,237.834 691.282,240.507 691.85,239.058 692.418,240.079 692.987,240.686 693.555,241.13 694.123,240.387 694.692,238.759 695.26,240.31 695.828,239.653 696.397,238.173 696.965,238.003 697.533,238.715 698.102,238.069 698.67,237.756 699.238,237.233 699.807,234.873 700.375,234.809 700.943,234.799 701.512,233.457 702.08,232.374 702.648,233.473 703.217,234.49 703.785,237.461 704.354,237.079 704.922,236.845 705.49,236.597 706.059,236.442 706.627,235.187 707.195,235.136 707.764,234.984 708.332,234.897 708.9,233.72 709.469,233.557 710.037,233.513 710.605,232.408 711.174,229.351 711.742,230.677 712.31,229.696 712.879,228.765 713.447,228.125 714.015,228.556 714.584,230.951 715.152,232.004 715.72,229.851 716.289,231.965 716.857,231.931 717.425,230.855 717.994,230.005 718.562,229.086 719.131,232.36 719.699,233.61 720.267,232.468 720.836,230.119 721.404,231.414 721.972,229.658 722.541,229.947 723.109,226.139 723.677,224.68 724.246,223.887 724.814,224.502 725.382,222.94 725.951,225.637 726.519,225.283 727.087,224.746 727.656,227.42 728.224,226.647 728.792,227.146 729.361,227.358 729.929,225.748 730.497,226.338 731.066,227.878 731.634,228.271 732.203,227.738 732.771,227.476 733.339,227.039 733.908,230.525 734.476,229.75 735.044,228.827 735.613,229.121 736.181,229.621 736.749,229.128 737.318,229.618 737.886,233.043 738.454,233.181 739.023,233.47 739.591,233.482 740.159,233.429 740.728,232.387 741.296,231.609 741.864,231.928 742.433,230.999 743.001,231.396 743.569,231.617 744.138,232.811 744.706,235.017 745.274,234.808 745.843,234.812 746.411,234.889 746.98,235.943 747.548,236.815 748.116,235.696 748.685,235.692 749.253,236.416 749.821,236.202 750.39,236.223 750.958,234.909 751.526,232.962 752.095,231.971 752.663,231.896 753.231,234.271 753.8,234.087 754.368,234.906 754.936,233.624 755.505,233.817 756.073,232.739 756.641,231.815 757.21,231.9 757.778,231.99 758.346,232.01 758.915,230.935 759.483,229.965 760.052,226.967 760.62,227.5 761.188,229.04 761.757,229.367 762.325,229.641 762.893,227.946 763.462,232.557 764.03,231.598 764.598,230.574 765.167,230.853 765.735,230.041 766.303,231.472 766.872,234.801 767.44,233.664 768.008,232.78 768.577,231.887 769.145,227.776 769.713,229.304 770.282,227.625 770.85,226.157 771.418,227.707 771.987,228.089 772.555,228.579 773.123,226.653 773.692,229.055 774.26,228.415 774.829,228.935 775.397,229.34 775.965,232.028 776.534,232.858 777.102,234.76 777.67,234.772 778.239,234.813 778.807,235.9 779.375,233.768 779.944,233.637 780.512,235.725 781.08,236.742 781.649,234.407 782.217,234.312 782.785,233.222 783.354,233.37 783.922,235.528 784.49,237.437 785.059,237.176 785.627,235.833 786.195,234.567 786.764,233.671 787.332,234.673 787.9,234.836 788.469,232.644 789.037,233.687 789.606,234.751 790.174,232.53 790.742,232.454 791.311,232.547 791.879,231.628 792.447,231.774 793.016,232.004 793.584,230.212 794.152,230.316 794.721,230.448 795.289,231.63 795.857,234.596 796.426,231.406 796.994,233.481 797.562,235.29 798.131,235.155 798.699,236.082 799.267,233.621 799.836,231.536 800.404,233.544 800.972,233.584 801.541,236.835 802.109,234.535 802.678,234.316 803.246,235.186 803.814,236.057 804.383,238.74 804.951,236.992 805.519,236.73 806.088,237.24 806.656,236.87 807.224,234.429 807.793,233.933 808.361,233.652 808.929,234.336 809.498,235.019 810.066,233.591 810.634,230.217 811.203,229.293 811.771,228.353 812.339,229.314 812.908,229.585 813.476,230.772 814.044,231.854 814.613,230.81 815.181,229.721 815.749,225.874 816.318,227.301 816.886,227.524 817.455,228.859 818.023,230.052 818.591,229.965 819.16,229.191 819.728,228.117 820.296,229.519 820.865,228.427 821.433,229.407 822.001,229.472 822.57,229.634 823.138,229.99 823.706,230.993 824.275,232.218 824.843,233.173 825.411,234.144 825.98,235.163 826.548,233.016 827.116,231.849 827.685,229.679 828.253,229.61 828.821,229.887 829.39,231.262 829.958,231.482 830.526,231.898 831.095,229.811 831.663,231.961 832.232,231.634 832.8,232.544 833.368,231.49 833.937,232.645 834.505,231.228 835.073,230.133 835.642,232.207 836.21,234.602 836.778,234.372 837.347,235.209 837.915,233.916 838.483,236.105 839.052,236.666 839.62,235.226 840.188,237.977 840.757,236.293 841.325,235 841.893,233.567 842.462,233.542 843.03,234.46 843.598,234.33 844.167,234.108 844.735,231.9 845.304,229.853 845.872,229.803 846.44,230.864 847.009,232.021 847.577,235.966 848.145,235.338 848.714,234.86 849.282,235.759 849.85,236.348 850.419,233.88 850.987,233.723 851.555,232.416 852.124,232.132 852.692,231.96 853.26,230.848 853.829,229.893 854.397,231.011 854.965,228.754 855.534,230.712 856.102,231.698 856.67,231.688 857.239,232.692 857.807,233.555 858.375,233.394 858.944,234.995 859.512,234.693 860.081,233.08 860.649,232.628 861.217,233.289 861.786,229.888 862.354,231.692 862.922,231.706 863.491,231.615 864.059,231.707 864.627,229.532 865.196,231.589 865.764,231.515 866.332,232.192 866.901,230.901 867.469,230.873 868.037,229.634 868.606,228.506 869.174,228.445 869.742,230.451 870.311,228.336 870.879,229.271 871.447,228.304 872.016,229.265 872.584,231.248 873.152,232.109 873.721,230.922 874.289,229.714 874.858,229.699 875.426,229.632 875.994,229.668 876.563,229.463 877.131,229.473 877.699,229.484 878.268,228.396 878.836,227.489 879.404,226.506 879.973,227.883 880.541,226.941 881.109,227.077 881.678,226.434 882.246,226.589 882.814,226.966 883.383,225.192 883.951,225.529 884.519,225.028 885.088,226.2 885.656,225.405 886.224,227.876 886.793,227.047 887.361,226.237 887.93,226.545 888.498,227.736 889.066,229.916 889.635,229.015 890.203,230.173 890.771,229.159 891.34,230.344 891.908,231.782 892.476,230.853 893.045,228.751 893.613,225.905 894.181,223.161 894.75,222.866 895.318,224.303 895.886,223.02 896.455,221.524 897.023,222.273 897.591,223.053 898.16,222.667 898.728,222.594 899.296,223.373 899.865,222.891 900.433,222.518 901.001,223.51 901.57,225.222 902.138,228.682 902.707,228.931 903.275,227.157 903.843,228.79 904.412,229.146 904.98,229.709 905.548,229.811 906.117,230.218 906.685,233.585 907.253,233.605 907.822,232.477 908.39,233.657 908.958,233.676 909.527,233.566 910.095,235.663 910.663,236.439 911.232,234.088 911.8,234.953 912.368,234.696 912.937,232.493 913.505,231.475 914.073,233.903 914.642,233.782 915.21,235.677 915.779,237.743 916.347,234.382 916.915,235.299 917.484,235.077 918.052,237.916 918.62,237.296 919.189,237.682 919.757,236.247 920.325,235.894 920.894,234.807 921.462,234.572 922.03,235.372 922.599,234.9 923.167,234.603 923.735,235.453 924.304,237.127 924.872,235.689 925.44,234.288 926.009,233.09 926.577,235.007 927.145,234.697 927.714,234.406 928.282,234.043 928.85,234.868 929.419,236.635 929.987,236.459 930.556,236.995 931.124,235.327 931.692,235.921 932.261,236.502 932.829,235.109 933.397,234.621 933.966,235.416 934.534,234.908 935.102,233.528 935.671,235.352 936.239,235.872 936.807,234.287 937.376,233.051 937.944,231.803 938.512,229.437 939.081,228.733 939.649,226.715 940.217,226.913 940.786,227.107 941.354,226.265 941.922,228.527 942.491,228.613 943.059,227.313 943.627,227.608 944.196,226.632 944.764,229.017 945.333,228.961 945.901,227.932 946.469,226 947.038,226.21 947.606,225.239 948.174,225.61 948.743,223.911 949.311,224.155 949.879,223.481 950.448,222.884 951.016,222.357 951.584,223.824 952.153,224.278 952.721,226.74 953.289,227.865 953.858,228.106 954.426,229.586 954.994,230.843 955.563,230.927 956.131,230.978 956.699,231.913 957.268,233.182 957.836,231.067 958.405,230.15 958.973,232.19 959.541,231.942 960.11,231.765 960.678,230.84 961.246,229.715 961.815,230.943 962.383,231.793 962.951,230.64 963.52,228.635 964.088,228.74 964.656,227.801 965.225,225.984 965.793,224.449 966.361,224.969 966.93,226.55 967.498,228.894 968.066,227.173 968.635,227.539 969.203,227.713 969.771,227.94 970.34,228.058 970.908,227.473 971.476,227.792 972.045,228.818 972.613,230.888 973.182,232.174 973.75,232.111 974.318,234.191 974.887,236.082 975.455,237.708 976.023,239.197 976.592,238.598 977.16,234.993 977.728,233.548 978.297,233.552 978.865,231.026 979.433,234.017 980.002,233.866 980.57,233.797 981.138,231.547 981.707,230.308 982.275,231.377 982.843,231.358 983.412,231.54 983.98,232.358 984.548,232.244 985.117,232.053 985.685,231.194 986.253,230.085 986.822,229.101 987.39,230.101 987.959,229.151 988.527,227.334 989.095,228.634 989.664,228.772 990.232,228.758 990.8,227.805 991.369,228.135 991.937,230.684 992.505,228.747 993.074,229.01 993.642,232.158 994.21,232.136 994.779,232.002 995.347,232.94 995.915,232.869 996.484,234.613 997.052,236.473 997.62,235.967 998.189,236.732 998.757,237.395 999.325,235.866 999.894,234.349 1000.46,233.934 1001.03,233.587 1001.6,232.376 1002.17,232.19 1002.74,229.905 1003.3,229.838 1003.87,229.934 1004.44,228.042 1005.01,228.24 1005.58,229.195 1006.15,228.017 1006.71,229.031 1007.28,231.244 1007.85,232.196 1008.42,233.229 1008.99,232.998 1009.56,232.848 1010.12,235.761 1010.69,234.25 1011.26,233.976 1011.83,233.619 1012.4,233.317 1012.97,231.851 1013.53,232.498 1014.1,232.301 1014.67,231.066 1015.24,230.897 1015.81,231.926 1016.38,230.5 1016.94,228.646 1017.51,229.747 1018.08,230.904 1018.65,231.929 1019.22,235.073 1019.79,234.784 1020.35,235.528 1020.92,233.773 1021.49,233.248 1022.06,232.953 1022.63,231.697 1023.2,231.204 1023.76,232.26 1024.33,232.102 1024.9,231.932 1025.47,233.712 1026.04,234.491 1026.61,234.238 1027.17,233.163 1027.74,233.119 1028.31,233.942 1028.88,234.801 1029.45,234.667 1030.02,233.368 1030.58,233.161 1031.15,232.032 1031.72,234.044 1032.29,233.739 1032.86,235.51 1033.43,236.028 1033.99,233.559 1034.56,233.075 1035.13,231.954 1035.7,230.731 1036.27,229.597 1036.84,228.417 1037.4,228.583 1037.97,228.428 1038.54,228.631 1039.11,227.585 1039.68,227.717 1040.25,226.599 1040.81,227.936 1041.38,227.046 1041.95,224.06 1042.52,225.472 1043.09,224.589 1043.66,227.057 1044.22,225.122 1044.79,224.432 1045.36,225.719 1045.93,224.687 1046.5,226.002 1047.07,227.306 1047.63,227.676 1048.2,229.031 1048.77,229.048 1049.34,229.156 1049.91,230.265 1050.48,231.28 1051.05,230.238 1051.61,230.237 1052.18,230.493 1052.75,232.308 1053.32,231.079 1053.89,231.05 1054.46,233.011 1055.02,236.738 1055.59,235.043 1056.16,233.451 1056.73,233.198 1057.3,231.028 1057.87,230.926 1058.43,231.702 1059,230.378 1059.57,230.595 1060.14,229.456 1060.71,229.408 1061.28,229.229 1061.84,230.229 1062.41,229.052 1062.98,230.974 1063.55,230.013 1064.12,228.936 1064.69,230.075 1065.25,230.991 1065.82,226.718 1066.39,227.869 1066.96,226.797 1067.53,225.008 1068.1,225.401 1068.66,224.66 1069.23,227.187 1069.8,227.4 1070.37,229.574 1070.94,231.461 1071.51,229.238 1072.07,229.403 1072.64,228.409 1073.21,227.667 1073.78,226.897 1074.35,228.404 1074.92,230.745 1075.48,229.847 1076.05,227.774 1076.62,228.198 1077.19,227.052 1077.76,227.174 1078.33,225.463 1078.89,226.67 1079.46,227.361 1080.03,227.689 1080.6,228.09 1081.17,227.563 1081.74,224.729 1082.3,226.26 1082.87,227.579 1083.44,230.114 1084.01,232.194 1084.58,231.895 1085.15,230.923 1085.71,231.743 1086.28,231.651 1086.85,232.764 1087.42,232.608 1087.99,233.429 1088.56,234.086 1089.12,232.752 1089.69,231.542 1090.26,233.537 1090.83,233.485 1091.4,232.321 1091.97,231.25 1092.53,231.139 1093.1,232.028 1093.67,231.921 1094.24,232.203 1094.81,231.06 1095.38,232.163 1095.94,231.893 1096.51,231.683 1097.08,231.745 1097.65,231.562 1098.22,229.472 1098.79,229.608 1099.35,229.626 1099.92,228.431 1100.49,229.542 1101.06,231.562 1101.63,230.559 1102.2,228.298 1102.76,229.59 1103.33,229.659 1103.9,227.578 1104.47,227.965 1105.04,225.154 1105.61,227.521 1106.17,228.992 1106.74,230.245 1107.31,230.336 1107.88,227.903 1108.45,227.186 1109.02,225.454 1109.58,230.819 1110.15,230.983 1110.72,229.924 1111.29,230.102 1111.86,230.998 1112.43,230.077 1112.99,231.13 1113.56,232.385 1114.13,232.203 1114.7,233.265 1115.27,233.252 1115.84,232.332 1116.4,231.143 1116.97,231.212 1117.54,230.116 1118.11,228.01 1118.68,226.244 1119.25,226.668 1119.81,228.215 1120.38,228.414 1120.95,229.746 1121.52,234.075 1122.09,233.62 1122.66,234.388 1123.23,231.924 1123.79,234.913 1124.36,235.368 1124.93,234.919 1125.5,233.601 1126.07,232.486 1126.64,231.317 1127.2,231.347 1127.77,229.297 1128.34,228.332 1128.91,228.507 1129.48,229.773 1130.05,232.979 1130.61,233.048 1131.18,231.826 1131.75,230.601 1132.32,230.393 1132.89,231.445 1133.46,228.13 1134.02,228.315 1134.59,227.518 1135.16,229.85 1135.73,228.886 1136.3,232.063 1136.87,233.075 1137.43,230.803 1138,229.686 1138.57,232.934 1139.14,233.777 1139.71,233.433 1140.28,234.346 1140.84,232.774 1141.41,233.637 1141.98,232.528 1142.55,231.173 1143.12,231.019 1143.69,231.969 1144.25,230.875 1144.82,229.922 1145.39,229.884 1145.96,229.937 1146.53,229.832 1147.1,228.889 1147.66,230.888 1148.23,229.917 1148.8,231.832 1149.37,230.942 1149.94,231.041 1150.51,230.753 1151.07,231.841 1151.64,229.493 1152.21,232.844 1152.78,231.76 1153.35,231.657 1153.92,231.49 1154.48,231.104 1155.05,231.213 1155.62,229.123 1156.19,230.585 1156.76,229.363 1157.33,228.418 1157.89,226.628 1158.46,225.881 1159.03,225.136 1159.6,225.555 1160.17,229.98 1160.74,227.843 1161.3,227.787 1161.87,228.93 1162.44,231.252 1163.01,228.987 1163.58,228.125 1164.15,230.233 1164.71,230.38 1165.28,230.287 1165.85,229.266 1166.42,227.349 1166.99,227.589 1167.56,227.828 1168.12,228.069 1168.69,226.342 1169.26,226.614 1169.83,227.007 1170.4,228.443 1170.97,226.667 1171.53,227.987 1172.1,228.168 1172.67,229.404 1173.24,235.668 1173.81,235.379 1174.38,235.044 1174.94,235.896 1175.51,233.431 1176.08,231.15 1176.65,233.102 1177.22,231.922 1177.79,233.967 1178.35,230.952 1178.92,232.056 1179.49,229.741 1180.06,231.815 1180.63,233.634 1181.2,232.459 1181.76,231.403 1182.33,231.41 1182.9,230.453 1183.47,232.469 1184.04,232.316 1184.61,233.046 1185.17,228.635 1185.74,226.437 1186.31,227.855 1186.88,226.024 1187.45,225.296 1188.02,226.7 1188.58,226.041 1189.15,225.259 1189.72,226.679 1190.29,225.929 1190.86,226.123 1191.43,224.507 1192,223.872 1192.56,227.575 1193.13,226.869 1193.7,230.327 1194.27,234.408 1194.84,233.227 1195.41,233.192 1195.97,234.003 1196.54,233.569 1197.11,232.325 1197.68,230.085 1198.25,230.112 1198.82,232.258 1199.38,229.316 1199.95,229.383 1200.52,229.474 1201.09,229.569 1201.66,228.814 1202.23,228.924 1202.79,225.933 1203.36,227.404 1203.93,226.582 1204.5,224.797 1205.07,224.208 1205.64,220.61 1206.2,221.051 1206.77,223.732 1207.34,222.184 1207.91,224.082 1208.48,224.605 1209.05,225.232 1209.61,225.914 1210.18,226.232 1210.75,226.459 1211.32,224.811 1211.89,225.387 1212.46,224.696 1213.02,225.385 1213.59,225.892 1214.16,227.803 1214.73,227.208 1215.3,229.934 1215.87,230.065 1216.43,229.454 1217,228.65 1217.57,231.221 1218.14,232.39 1218.71,233.272 1219.28,233.191 1219.84,233.096 1220.41,234.051 1220.98,232.141 1221.55,234.301 1222.12,232.033 1222.69,230.199 1223.25,234.619 1223.82,234.396 1224.39,235.353 1224.96,235.177 1225.53,235.133 1226.1,235.909 1226.66,235.691 1227.23,235.373 1227.8,235.299 1228.37,234.167 1228.94,233.094 1229.51,232.984 1230.07,234.032 1230.64,234.819 1231.21,233.651 1231.78,231.463 1232.35,231.358 1232.92,233.335 1233.48,233.221 1234.05,234.074 1234.62,233.801 1235.19,232.67 1235.76,230.511 1236.33,230.888 1236.89,228.931 1237.46,231.171 1238.03,232.286 1238.6,231.287 1239.17,231.204 1239.74,231.344 1240.3,231.344 1240.87,231.446 1241.44,235.701 1242.01,234.238 1242.58,235.124 1243.15,233.84 1243.71,232.565 1244.28,232.434 1244.85,230.47 1245.42,229.634 1245.99,228.778 1246.56,228.986 1247.12,229.024 1247.69,231.354 1248.26,232.648 1248.83,231.347 1249.4,232.196 1249.97,231.918 1250.53,232.018 1251.1,234.981 1251.67,233.742 1252.24,235.759 1252.81,237.264 1253.38,235.733 1253.94,236.375 1254.51,236.791 1255.08,236.157 1255.65,233.624 1256.22,233.585 1256.79,234.325 1257.35,235.996 1257.92,237.701 1258.49,236.102 1259.06,234.356 1259.63,233.044 1260.2,232.543 1260.76,230.321 1261.33,229.419 1261.9,229.511 1262.47,230.766 1263.04,230.629 1263.61,231.421 1264.18,232.301 1264.74,233.211 1265.31,231.05 1265.88,228.924 1266.45,227.861 1267.02,226.983 1267.59,225.313 1268.15,225.624 1268.72,227.066 1269.29,229.397 1269.86,230.263 1270.43,231.371 1271,231.147 1271.56,232.021 1272.13,232.139 1272.7,232.144 1273.27,233.032 1273.84,230.537 1274.41,229.432 1274.97,230.448 1275.54,231.536 1276.11,230.303 1276.68,229.101 1277.25,231.318 1277.82,230.121 1278.38,231.994 1278.95,233.058 1279.52,231.652 1280.09,232.476 1280.66,234.448 1281.23,233.984 1281.79,231.503 1282.36,231.377 1282.93,232.403 1283.5,232.292 1284.07,230.106 1284.64,229.181 1285.2,230.109 1285.77,228.895 1286.34,228.907 1286.91,231.198 1287.48,231.355 1288.05,231.272 1288.61,233.299 1289.18,233.092 1289.75,232.878 1290.32,234.698 1290.89,233.237 1291.46,232.979 1292.02,232.778 1292.59,233.395 1293.16,235.009 1293.73,234.488 1294.3,233.091 1294.87,233.738 1295.43,233.423 1296,230.144 1296.57,229.997 1297.14,228.107 1297.71,228.086 1298.28,229.123 1298.84,229.032 1299.41,231.41 1299.98,231.173 1300.55,231.201 1301.12,232.176 1301.69,232.938 1302.25,231.584 1302.82,230.25 1303.39,229.185 1303.96,228.252 1304.53,228.406 1305.1,227.371 1305.66,227.356 1306.23,228.477 1306.8,227.738 1307.37,228.778 1307.94,230 1308.51,229.789 1309.07,228.755 1309.64,227.854 1310.21,225.753 1310.78,227.06 1311.35,228.316 1311.92,227.573 1312.48,225.669 1313.05,224.872 1313.62,225.989 1314.19,227.313 1314.76,226.59 1315.33,226.762 1315.89,229.096 1316.46,229.23 1317.03,229.267 1317.6,226.418 1318.17,227.746 1318.74,227.068 1319.3,227.545 1319.87,225.893 1320.44,225.168 1321.01,225.535 1321.58,225.026 1322.15,226.431 1322.71,226.756 1323.28,228.08 1323.85,227.631 1324.42,228.108 1324.99,228.091 1325.56,228.345 1326.12,227.595 1326.69,226.935 1327.26,227.18 1327.83,228.461 1328.4,232.073 1328.97,233.125 1329.53,232.923 1330.1,233.932 1330.67,233.716 1331.24,232.262 1331.81,232.433 1332.38,231.383 1332.94,230.392 1333.51,230.465 1334.08,230.423 1334.65,230.258 1335.22,229.415 1335.79,231.574 1336.36,233.564 1336.92,232.408 1337.49,232.429 1338.06,234.489 1338.63,230.018 1339.2,231.138 1339.77,228.151 1340.33,226.127 1340.9,225.381 1341.47,225.759 1342.04,226.293 1342.61,227.759 1343.18,226.983 1343.74,226.395 1344.31,229.82 1344.88,228.932 1345.45,229.046 1346.02,230.256 1346.59,231.439 1347.15,232.314 1347.72,233.38 1348.29,231.377 1348.86,229.351 1349.43,229.411 1350,230.762 1350.56,229.778 1351.13,230.017 1351.7,231.956 1352.27,232.877 1352.84,231.614 1353.41,230.482 1353.97,231.571 1354.54,234.731 1355.11,239.576 1355.68,239.952 1356.25,237.133 1356.82,236.636 1357.38,236.273 1357.95,236.842 1358.52,235.248 1359.09,234.821 1359.66,233.375 1360.23,229.984 1360.79,228.831 1361.36,228.871 1361.93,228.959 1362.5,228.997 1363.07,228.032 1363.64,229.029 1364.2,230.02 1364.77,230.112 1365.34,231.287 1365.91,231.108 1366.48,231.111 1367.05,233.959 1367.61,230.474 1368.18,231.553 1368.75,230.356 1369.32,229.273 1369.89,231.333 1370.46,232.211 1371.02,233.271 1371.59,234.205 1372.16,232.905 1372.73,232.726 1373.3,232.466 1373.87,229.074 1374.43,228.875 1375,228.994 1375.57,229.214 1376.14,229.319 1376.71,229.545 1377.28,228.404 1377.84,226.51 1378.41,225.685 1378.98,226.992 1379.55,226.021 1380.12,227.443 1380.69,227.991 1381.25,229.134 1381.82,229.327 1382.39,229.31 1382.96,228.381 1383.53,229.49 1384.1,229.652 1384.66,229.676 1385.23,229.874 1385.8,228.871 1386.37,231.092 1386.94,231.003 1387.51,233.12 1388.07,232.795 1388.64,231.279 1389.21,232.434 1389.78,234.352 1390.35,234.001 1390.92,233.795 1391.48,234.714 1392.05,233.455 1392.62,231.004 1393.19,230.879 1393.76,231.628 1394.33,230.45 1394.89,232.588 1395.46,234.447 1396.03,232.856 1396.6,232.58 1397.17,234.408 1397.74,234.008 1398.3,232.573 1398.87,231.379 1399.44,230.24 1400.01,228.107 1400.58,230.133 1401.15,230.094 1401.71,227.965 1402.28,226.932 1402.85,226.225 1403.42,227.628 1403.99,225.691 1404.56,226.007 1405.13,224.452 1405.69,223.939 1406.26,225.423 1406.83,227.93 1407.4,228.046 1407.97,228.119 1408.54,229.519 1409.1,228.819 1409.67,229.025 1410.24,228.944 1410.81,229.065 1411.38,230.089 1411.95,228.912 1412.51,228.696 1413.08,230.847 1413.65,232.082 1414.22,230.895 1414.79,229.816 1415.36,233 1415.92,233.684 1416.49,234.539 1417.06,235.546 1417.63,235.08 1418.2,233.555 1418.77,232.162 1419.33,230.152 1419.9,230.607 1420.47,231.748 1421.04,232.567 1421.61,229.44 1422.18,228.252 1422.74,229.424 1423.31,230.36 1423.88,231.422 1424.45,234.606 1425.02,235.266 1425.59,238.067 1426.15,236.428 1426.72,234.827 1427.29,233.621 1427.86,233.517 1428.43,232.307 1429,232.191 1429.56,232.991 1430.13,233.815 1430.7,233.41 1431.27,234.277 1431.84,232.997 1432.41,229.511 1432.97,229.544 1433.54,231.432 1434.11,232.285 1434.68,231.07 1435.25,230.894 1435.82,229.813 1436.38,229.912 1436.95,231.769 1437.52,231.733 1438.09,229.694 1438.66,230.922 1439.23,230.769 1439.79,230.342 1440.36,229.296 1440.93,230.295 1441.5,228.315 1442.07,227.296 1442.64,226.47 1443.2,222.553 1443.77,225.044 1444.34,223.25 1444.91,222.816 1445.48,222.646 1446.05,224.165 1446.61,223.742 1447.18,226.224 1447.75,223.436 1448.32,224.816 1448.89,226.296 1449.46,223.548 1450.02,224.219 1450.59,226.886 1451.16,228.187 1451.73,229.513 1452.3,230.522 1452.87,229.411 1453.43,230.661 1454,230.59 1454.57,230.564 1455.14,231.71 1455.71,230.502 1456.28,230.573 1456.84,229.583 1457.41,232.156 1457.98,232.076 1458.55,232.966 1459.12,233.972 1459.69,232.805 1460.25,232.625 1460.82,232.481 1461.39,233.231 1461.96,234.064 1462.53,231.745 1463.1,230.591 1463.66,231.653 1464.23,232.786 1464.8,233.575 1465.37,234.32 1465.94,236.969 1466.51,237.764 1467.07,237.317 1467.64,236.022 1468.21,235.497 1468.78,236.003 1469.35,234.743 1469.92,234.235 1470.48,232.891 1471.05,232.679 1471.62,232.694 1472.19,230.343 1472.76,230.072 1473.33,229.972 1473.89,232.146 1474.46,233.052 1475.03,233.751 1475.6,234.384 1476.17,232.997 1476.74,230.664 1477.31,230.476 1477.87,231.518 1478.44,232.384 1479.01,231.139 1479.58,229.96 1480.15,228.809 1480.72,227.992 1481.28,227.109 1481.85,228.171 1482.42,230.176 1482.99,229.159 1483.56,228.025 1484.13,229.043 1484.69,230.151 1485.26,229.266 1485.83,231.362 1486.4,230.993 1486.97,230.739 1487.54,228.635 1488.1,227.897 1488.67,227.763 1489.24,227.955 1489.81,227.055 1490.38,230.193 1490.95,230.216 1491.51,230.191 1492.08,230.396 1492.65,229.268 1493.22,230.197 1493.79,230.214 1494.36,232.184 1494.92,236.324 1495.49,236.906 1496.06,237.297 1496.63,238.774 1497.2,236.852 1497.77,237.427 1498.33,235.711 1498.9,233.133 1499.47,230.753 1500.04,230.582 1500.61,231.669 1501.18,230.313 1501.74,232.223 1502.31,232.084 1502.88,232.851 1503.45,233.37 1504.02,233.119 1504.59,232.975 1505.15,231.587 1505.72,231.517 1506.29,230.478 1506.86,231.241 1507.43,229.85 1508,228.854 1508.56,230.915 1509.13,229.577 1509.7,231.679 1510.27,229.437 1510.84,227.265 1511.41,228.221 1511.97,226.264 1512.54,223.531 1513.11,219.895 1513.68,221.508 1514.25,223.024 1514.82,223.6 1515.38,221.954 1515.95,221.419 1516.52,223.018 1517.09,224.485 1517.66,225.93 1518.23,228.277 1518.79,230.288 1519.36,231.526 1519.93,231.568 1520.5,229.379 1521.07,230.682 1521.64,229.871 1522.2,229.871 1522.77,228.818 1523.34,228.913 1523.91,230.021 1524.48,228.974 1525.05,230.079 1525.61,228.16 1526.18,229.16 1526.75,228.266 1527.32,229.367 1527.89,228.503 1528.46,228.676 1529.02,227.849 1529.59,228.984 1530.16,227.123 1530.73,228.42 1531.3,228.455 1531.87,229.391 1532.43,230.446 1533,229.289 1533.57,228.385 1534.14,227.461 1534.71,226.53 1535.28,227.846 1535.84,228.251 1536.41,228.613 1536.98,232.912 1537.55,231.766 1538.12,230.711 1538.69,228.37 1539.25,230.627 1539.82,226.385 1540.39,225.774 1540.96,229.143 1541.53,229.261 1542.1,228.35 1542.66,228.481 1543.23,228.614 1543.8,229.789 1544.37,228.898 1544.94,230.104 1545.51,227.184 1546.08,227.356 1546.64,227.736 1547.21,229.077 1547.78,228.075 1548.35,230.35 1548.92,231.626 1549.49,232.562 1550.05,231.332 1550.62,230.057 1551.19,229.285 1551.76,228.381 1552.33,225.459 1552.9,224.989 1553.46,225.392 1554.03,224.932 1554.6,224.412 1555.17,226.037 1555.74,227.522 1556.31,227.691 1556.87,229.794 1557.44,229.132 1558.01,228.427 1558.58,229.682 1559.15,231.201 1559.72,232.34 1560.28,230.429 1560.85,232.497 1561.42,231.371 1561.99,230.587 1562.56,233.967 1563.13,236.173 1563.69,235.809 1564.26,233.275 1564.83,235.316 1565.4,236.883 1565.97,237.65 1566.54,238.101 1567.1,234.374 1567.67,232.032 1568.24,232.16 1568.81,232.132 1569.38,233.077 1569.95,234.062 1570.51,232.835 1571.08,232.745 1571.65,233.609 1572.22,232.238 1572.79,233.17 1573.36,231.843 1573.92,232.504 1574.49,233.247 1575.06,232.1 1575.63,234.249 1576.2,232.754 1576.77,230.583 1577.33,231.723 1577.9,231.744 1578.47,231.665 1579.04,231.522 1579.61,232.362 1580.18,230.983 1580.74,229.647 1581.31,228.837 1581.88,229.118 1582.45,228.236 1583.02,229.441 1583.59,227.56 1584.15,227.554 1584.72,228.674 1585.29,226.704 1585.86,228.06 1586.43,229.414 1587,230.508 1587.56,229.523 1588.13,230.732 1588.7,230.768 1589.27,231.886 1589.84,233.996 1590.41,233.809 1590.97,235.594 1591.54,236.318 1592.11,233.454 1592.68,233.088 1593.25,233.778 1593.82,233.605 1594.38,231.248 1594.95,232.263 1595.52,231.164 1596.09,232.008 1596.66,229.679 1597.23,229.802 1597.79,229.759 1598.36,228.762 1598.93,228.696 1599.5,229.876 1600.07,229.08 1600.64,231.11 1601.2,231.042 1601.77,231.176 1602.34,232.052 1602.91,232.929 1603.48,232.816 1604.05,231.574 1604.61,233.521 1605.18,233.147 1605.75,229.105 1606.32,229.357 1606.89,229.525 1607.46,230.639 1608.02,230.49 1608.59,231.607 1609.16,231.638 1609.73,231.504 1610.3,234.731 1610.87,233.388 1611.43,233.949 1612,231.587 1612.57,230.524 1613.14,229.421 1613.71,230.456 1614.28,230.282 1614.84,227.056 1615.41,226.141 1615.98,224.483 1616.55,224.044 1617.12,224.71 1617.69,224.97 1618.26,225.331 1618.82,226.321 1619.39,227.528 1619.96,228.964 1620.53,226.867 1621.1,228.193 1621.67,230.641 1622.23,230.853 1622.8,230.936 1623.37,230.903 1623.94,229.76 1624.51,228.757 1625.08,227.901 1625.64,228.99 1626.21,229.17 1626.78,229.212 1627.35,229.529 1627.92,233.822 1628.49,233.559 1629.05,234.092 1629.62,237.693 1630.19,239.416 1630.76,234.569 1631.33,234.298 1631.9,234.883 1632.46,234.324 1633.03,234.041 1633.6,233.93 1634.17,233.555 1634.74,233.285 1635.31,230.981 1635.87,231.899 1636.44,231.806 1637.01,229.419 1637.58,230.538 1638.15,230.35 1638.72,231.218 1639.28,230.778 1639.85,230.713 1640.42,229.701 1640.99,228.838 1641.56,228.782 1642.13,227.882 1642.69,225.827 1643.26,226.151 1643.83,227.399 1644.4,227.828 1644.97,226.953 1645.54,227.129 1646.1,229.166 1646.67,227.12 1647.24,227.462 1647.81,228.626 1648.38,229.704 1648.95,226.732 1649.51,226.1 1650.08,226.369 1650.65,224.757 1651.22,224.334 1651.79,224.857 1652.36,224.367 1652.92,225.728 1653.49,226.252 1654.06,226.289 1654.63,225.49 1655.2,226.732 1655.77,227.186 1656.33,226.683 1656.9,228.082 1657.47,229.549 1658.04,229.7 1658.61,228.736 1659.18,228.811 1659.74,227.959 1660.31,228.288 1660.88,228.483 1661.45,226.614 1662.02,230.168 1662.59,230.287 1663.15,232.265 1663.72,230.161 1664.29,230.072 1664.86,232.257 1665.43,234.218 1666,235.286 1666.56,236.07 1667.13,237.706 1667.7,237.322 1668.27,236.772 1668.84,234.25 1669.41,236.062 1669.97,232.503 1670.54,234.592 1671.11,232.223 1671.68,231.116 1672.25,231.318 1672.82,230.179 1673.38,230.109 1673.95,231.076 1674.52,227.008 1675.09,228.231 1675.66,227.296 1676.23,228.483 1676.79,229.811 1677.36,228.798 1677.93,229.987 1678.5,230.126 1679.07,231.272 1679.64,231.352 1680.2,231.453 1680.77,230.474 1681.34,231.468 1681.91,233.614 1682.48,236.535 1683.05,237.123 1683.61,236.61 1684.18,235.268 1684.75,235.948 1685.32,235.486 1685.89,235.046 1686.46,235.692 1687.02,234.207 1687.59,233.991 1688.16,230.467 1688.73,231.426 1689.3,230.311 1689.87,232.395 1690.44,230.172 1691,231.915 1691.57,231.841 1692.14,229.742 1692.71,231.807 1693.28,231.708 1693.85,229.604 1694.41,231.742 1694.98,229.764 1695.55,229.753 1696.12,231.55 1696.69,234.514 1697.26,234.219 1697.82,232 1698.39,230.904 1698.96,229.562 1699.53,229.476 1700.1,229.511 1700.67,230.461 1701.23,230.325 1701.8,229.521 1702.37,232.829 1702.94,231.652 1703.51,232.467 1704.08,231.406 1704.64,232.213 1705.21,232.928 1705.78,232.611 1706.35,231.396 1706.92,231.242 1707.49,231.175 1708.05,229.061 1708.62,228.942 1709.19,227.978 1709.76,226.954 1710.33,227.925 1710.9,227.052 1711.46,227.501 1712.03,228.809 1712.6,228.933 1713.17,227.059 1713.74,226.318 1714.31,226.395 1714.87,227.76 1715.44,231.179 1716.01,233.511 1716.58,233.38 1717.15,233.141 1717.72,233.139 1718.28,232.078 1718.85,233.09 1719.42,231.847 1719.99,232.829 1720.56,231.641 1721.13,230.657 1721.69,230.442 1722.26,230.536 1722.83,230.483 1723.4,232.5 1723.97,233.239 1724.54,232.316 1725.1,233.141 1725.67,231.74 1726.24,232.648 1726.81,231.689 1727.38,231.801 1727.95,228.525 1728.51,227.519 1729.08,225.464 1729.65,223.804 1730.22,224.211 1730.79,223.659 1731.36,224.35 1731.92,224.707 1732.49,226.076 1733.06,224.407 1733.63,221.636 1734.2,222.225 1734.77,221.756 1735.33,223.243 1735.9,223.607 1736.47,225.06 1737.04,225.499 1737.61,228.036 1738.18,230.652 1738.74,230.652 1739.31,231.621 1739.88,231.56 1740.45,231.5 1741.02,232.275 1741.59,233.222 1742.15,231.931 1742.72,233.957 1743.29,230.654 1743.86,229.906 1744.43,229.876 1745,229.824 1745.56,229.956 1746.13,227.975 1746.7,229.285 1747.27,230.562 1747.84,230.44 1748.41,229.319 1748.97,228.509 1749.54,228.735 1750.11,229.797 1750.68,232.87 1751.25,229.663 1751.82,232.784 1752.38,234.846 1752.95,232.373 1753.52,232.522 1754.09,232.353 1754.66,233.098 1755.23,234.99 1755.79,233.753 1756.36,232.697 1756.93,231.561 1757.5,229.458 1758.07,228.312 1758.64,227.664 1759.21,227.782 1759.77,228.031 1760.34,227.026 1760.91,229.586 1761.48,230.723 1762.05,230.644 1762.62,229.654 1763.18,229.815 1763.75,229.85 1764.32,227.949 1764.89,228.206 1765.46,228.682 1766.03,228.655 1766.59,228.636 1767.16,227.689 1767.73,226.926 1768.3,229.237 1768.87,229.446 1769.44,231.696 1770,232.748 1770.57,233.699 1771.14,233.311 1771.71,233.159 1772.28,234.031 1772.85,233.847 1773.41,232.401 1773.98,231.324 1774.55,231.395 1775.12,232.456 1775.69,232.248 1776.26,231.261 1776.82,231.19 1777.39,229.198 1777.96,228.393 1778.53,228.43 1779.1,230.453 1779.67,230.443 1780.23,231.539 1780.8,230.318 1781.37,227.494 1781.94,227.619 1782.51,228.758 1783.08,230.096 1783.64,231.311 1784.21,231.085 1784.78,230.182 1785.35,230.23 1785.92,231.26 1786.49,232.405 1787.05,233.222 1787.62,230.791 1788.19,231.822 1788.76,231.736 1789.33,230.572 1789.9,231.529 1790.46,231.266 1791.03,231.388 1791.6,231.346 1792.17,231.207 1792.74,233.255 1793.31,232.982 1793.87,231.716 1794.44,232.607 1795.01,232.675 1795.58,232.518 1796.15,233.197 1796.72,229.891 1797.28,229.952 1797.85,230.113 1798.42,229.138 1798.99,230.081 1799.56,227.938 1800.13,230.147 1800.69,230.103 1801.26,231.094 1801.83,229.878 1802.4,229.943 1802.97,231.866 1803.54,230.68 1804.1,228.548 1804.67,227.468 1805.24,228.586 1805.81,228.795 1806.38,227.847 1806.95,229.154 1807.51,231.111 1808.08,231.044 1808.65,231.195 1809.22,230.247 1809.79,229.342 1810.36,231.449 1810.92,232.576 1811.49,235.606 1812.06,234.119 1812.63,234.056 1813.2,234.827 1813.77,232.359 1814.33,232.272 1814.9,232.109 1815.47,231.092 1816.04,230.061 1816.61,232.081 1817.18,231.861 1817.74,230.766 1818.31,230.704 1818.88,229.608 1819.45,229.838 1820.02,230.933 1820.59,231.935 1821.15,233.851 1821.72,232.761 1822.29,231.464 1822.86,228.174 1823.43,226.281 1824,226.404 1824.56,226.586 1825.13,228.002 1825.7,229.237 1826.27,230.536 1826.84,230.482 1827.41,230.527 1827.97,231.646 1828.54,233.548 1829.11,231.221 1829.68,231.194 1830.25,231.156 1830.82,232.047 1831.39,228.755 1831.95,227.722 1832.52,228.893 1833.09,228.964 1833.66,226.015 1834.23,228.478 1834.8,229.75 1835.36,231.749 1835.93,232.478 1836.5,231.274 1837.07,229.933 1837.64,231.933 1838.21,236.767 1838.77,236.256 1839.34,236.884 1839.91,236.444 1840.48,237.748 1841.05,235.033 1841.62,235.525 1842.18,234.129 1842.75,235.887 1843.32,234.487 1843.89,235.362 1844.46,233.74 1845.03,232.255 1845.59,233.158 1846.16,233.711 1846.73,233.263 1847.3,232.164 1847.87,232.054 1848.44,231.893 1849,230.574 1849.57,232.494 1850.14,230.333 1850.71,230.267 1851.28,228.905 1851.85,226.797 1852.41,226.893 1852.98,224.945 1853.55,225.586 1854.12,225.856 1854.69,227.112 1855.26,225.301 1855.82,226.575 1856.39,227.806 1856.96,227.99 1857.53,227.022 1858.1,230.221 1858.67,230.217 1859.23,226.944 1859.8,228.324 1860.37,225.426 1860.94,224.663 1861.51,227.089 1862.08,226.259 1862.64,225.648 1863.21,226.037 1863.78,224.356 1864.35,223.809 1864.92,225.301 1865.49,225.903 1866.05,227.429 1866.62,227.527 1867.19,228.004 1867.76,229.173 1868.33,229.261 1868.9,227.437 1869.46,227.672 1870.03,228.959 1870.6,229.13 1871.17,229.411 1871.74,229.662 1872.31,231.947 1872.87,232.83 1873.44,233.879 1874.01,234.729 1874.58,233.386 1875.15,231.174 1875.72,233.12 1876.28,233.037 1876.85,231.99 1877.42,232.014 1877.99,232.795 1878.56,234.443 1879.13,232.975 1879.69,233.797 1880.26,235.395 1880.83,236.992 1881.4,235.484 1881.97,235.824 1882.54,235.53 1883.1,235.031 1883.67,235.715 1884.24,232.245 1884.81,231.061 1885.38,229.832 1885.95,229.862 1886.51,228.897 1887.08,231.061 1887.65,229.856 1888.22,229.985 1888.79,228.876 1889.36,229.93 1889.92,227.809 1890.49,230.169 1891.06,232.178 1891.63,233.161 1892.2,233.953 1892.77,234.735 1893.33,234.413 1893.9,235.098 1894.47,233.768 1895.04,233.687 1895.61,234.416 1896.18,233.045 1896.74,232.613 1897.31,232.159 1897.88,231.012 1898.45,230.02 1899.02,230.002 1899.59,228.218 1900.16,227.387 1900.72,226.43 1901.29,225.632 1901.86,223.96 1902.43,224.355 1903,223.462 1903.57,223.892 1904.13,225.225 1904.7,225.756 1905.27,229.09 1905.84,230.317 1906.41,229.349 1906.98,228.455 1907.54,228.881 1908.11,229.96 1908.68,230.999 1909.25,230.91 1909.82,230.696 1910.39,230.701 1910.95,231.84 1911.52,228.403 1912.09,229.559 1912.66,227.73 1913.23,228.965 1913.8,228.905 1914.36,228.059 1914.93,229.05 1915.5,231.104 1916.07,231.26 1916.64,230.191 1917.21,229.881 1917.77,228.877 1918.34,228.931 1918.91,229.882 1919.48,230.843 1920.05,231.798 1920.62,231.708 1921.18,232.523 1921.75,233.313 1922.32,233.159 1922.89,232.882 1923.46,230.686 1924.03,231.805 1924.59,231.701 1925.16,231.639 1925.73,230.519 1926.3,230.652 1926.87,232.565 1927.44,231.349 1928,234.095 1928.57,233.737 1929.14,234.474 1929.71,233.207 1930.28,233.152 1930.85,232.857 1931.41,230.715 1931.98,229.84 1932.55,231.005 1933.12,230.631 1933.69,230.517 1934.26,233.564 1934.82,233.028 1935.39,232.64 1935.96,230.457 1936.53,230.421 1937.1,230.621 1937.67,230.568 1938.23,229.222 1938.8,228.372 1939.37,228.192 1939.94,230.335 1940.51,228.121 1941.08,229.259 1941.64,229.218 1942.21,229.162 1942.78,227.335 1943.35,224.456 1943.92,223.817 1944.49,224.12 1945.05,226.565 1945.62,224.827 1946.19,226.155 1946.76,224.421 1947.33,225.87 1947.9,225.011 1948.46,225.649 1949.03,225.904 1949.6,226.037 1950.17,225.202 1950.74,227.728 1951.31,230.017 1951.87,232.339 1952.44,231.459 1953.01,230.416 1953.58,231.586 1954.15,229.183 1954.72,226.214 1955.28,228.794 1955.85,228.974 1956.42,231.078 1956.99,232.261 1957.56,235.063 1958.13,234.937 1958.69,235.602 1959.26,234.305 1959.83,232.922 1960.4,232.88 1960.97,233.821 1961.54,232.664 1962.1,232.246 1962.67,231.098 1963.24,231.193 1963.81,229.943 1964.38,229.852 1964.95,231.901 1965.51,231.616 1966.08,230.4 1966.65,231.424 1967.22,229.283 1967.79,229.547 1968.36,229.76 1968.92,229.924 1969.49,230.234 1970.06,229.419 1970.63,230.474 1971.2,229.434 1971.77,226.389 1972.34,227.667 1972.9,225.878 1973.47,225.192 1974.04,224.388 1974.61,222.754 1975.18,225.254 1975.75,224.937 1976.31,223.401 1976.88,225.225 1977.45,226.473 1978.02,225.727 1978.59,226.366 1979.16,228.752 1979.72,228.045 1980.29,229.259 1980.86,228.453 1981.43,228.565 1982,228.947 1982.57,231.215 1983.13,232.078 1983.7,231.846 1984.27,234.036 1984.84,232.846 1985.41,231.788 1985.98,232.819 1986.54,232.661 1987.11,233.73 1987.68,233.4 1988.25,235.27 1988.82,232.724 1989.39,233.52 1989.95,233.523 1990.52,234.494 1991.09,235.337 1991.66,235.055 1992.23,231.738 1992.8,230.683 1993.36,227.777 1993.93,225.882 1994.5,224.236 1995.07,225.982 1995.64,225.289 1996.21,226.747 1996.77,224.969 1997.34,227.403 1997.91,229.847 1998.48,228.878 1999.05,232.012 1999.62,231.911 2000.18,232.857 2000.75,232.933 2001.32,232.887 2001.89,233.709 2002.46,236.565 2003.03,238.18 2003.59,237.64 2004.16,235.113 2004.73,232.687 2005.3,232.436 2005.87,233.338 2006.44,232.322 2007,231.358 2007.57,232.384 2008.14,232.134 2008.71,234.106 2009.28,232.689 2009.85,232.496 2010.41,232.394 2010.98,232.238 2011.55,231.117 2012.12,233.172 2012.69,233.922 2013.26,234.4 2013.82,235.308 2014.39,234.984 2014.96,233.699 2015.53,232.35 2016.1,234.049 2016.67,233.795 2017.23,235.409 2017.8,235.985 2018.37,236.327 2018.94,237.811 2019.51,236.016 2020.08,234.447 2020.64,234.083 2021.21,234.925 2021.78,233.546 2022.35,232.089 2022.92,232.992 2023.49,230.448 2024.05,231.328 2024.62,231.12 2025.19,230.866 2025.76,229.834 2026.33,229.955 2026.9,230.843 2027.46,232.826 2028.03,230.49 2028.6,230.541 2029.17,229.496 2029.74,228.358 2030.31,228.152 2030.87,228.068 2031.44,230.001 2032.01,228.913 2032.58,228.952 2033.15,229.036 2033.72,228.916 2034.28,229.928 2034.85,229.925 2035.42,227.858 2035.99,225.721 2036.56,225.939 2037.13,224.016 2037.69,222.372 2038.26,220.937 2038.83,221.473 2039.4,222.16 2039.97,221.82 2040.54,222.279 2041.11,221.94 2041.67,223.619 2042.24,225.248 2042.81,225.834 2043.38,226.183 2043.95,227.729 2044.52,226.988 2045.08,226.955 2045.65,228.439 2046.22,227.612 2046.79,228.951 2047.36,227.883 2047.93,229.109 2048.49,229.317 2049.06,231.376 2049.63,230.426 2050.2,229.672 2050.77,230.612 2051.34,229.565 2051.9,229.624 2052.47,231.902 2053.04,231.714 2053.61,232.715 2054.18,235.666 2054.75,234.424 2055.31,235.309 2055.88,235.916 2056.45,234.369 2057.02,234.111 2057.59,234.083 2058.16,234.723 2058.72,234.64 2059.29,232.354 2059.86,233.191 2060.43,231.044 2061,230.127 2061.57,229.228 2062.13,228.22 2062.7,228.455 2063.27,228.694 2063.84,226.974 2064.41,228.254 2064.98,229.735 2065.54,227.627 2066.11,230.817 2066.68,231.913 2067.25,231.755 2067.82,230.642 2068.39,235.891 2068.95,236.669 2069.52,237.205 2070.09,235.554 2070.66,234.29 2071.23,233.878 2071.8,234.635 2072.36,234.446 2072.93,234.371 2073.5,234.037 2074.07,234.9 2074.64,232.606 2075.21,233.337 2075.77,232.116 2076.34,231.936 2076.91,232.026 2077.48,233.033 2078.05,231.67 2078.62,232.485 2079.18,232.327 2079.75,233.068 2080.32,231.811 2080.89,233.594 2081.46,233.497 2082.03,234.127 2082.59,236.857 2083.16,234.344 2083.73,234.979 2084.3,232.541 2084.87,232.412 2085.44,231.274 2086,230.996 2086.57,230.925 2087.14,231.832 2087.71,231.566 2088.28,232.508 2088.85,232.163 2089.41,231.831 2089.98,231.646 2090.55,230.437 2091.12,231.267 2091.69,228.038 2092.26,227.186 2092.82,227.578 2093.39,228.787 2093.96,228.792 2094.53,228.537 2095.1,227.584 2095.67,225.644 2096.23,227.181 2096.8,227.421 2097.37,227.406 2097.94,225.635 2098.51,226.188 2099.08,227.66 2099.64,227.572 2100.21,226.528 2100.78,226.742 2101.35,226.086 2101.92,225.436 2102.49,224.745 2103.05,225.044 2103.62,224.258 2104.19,224.932 2104.76,226.303 2105.33,226.589 2105.9,226.715 2106.46,226.869 2107.03,226.134 2107.6,227.504 2108.17,226.719 2108.74,224.607 2109.31,225.094 2109.87,226.449 2110.44,224.847 2111.01,226.28 2111.58,225.512 2112.15,225.76 2112.72,227.227 2113.29,228.318 2113.85,228.508 2114.42,227.008 2114.99,225.337 2115.56,225.671 2116.13,224.029 2116.7,226.663 2117.26,226.859 2117.83,226.254 2118.4,227.748 2118.97,231.195 2119.54,229.188 2120.11,230.449 2120.67,230.607 2121.24,231.652 2121.81,234.702 2122.38,235.51 2122.95,237.2 2123.52,236.617 2124.08,236.307 2124.65,235.986 2125.22,236.924 2125.79,236.83 2126.36,236.378 2126.93,237.04 2127.49,234.773 2128.06,234.375 2128.63,234.166 2129.2,233.86 2129.77,234.459 2130.34,231.17 2130.9,229.211 2131.47,229.366 2132.04,230.639 2132.61,232.652 2133.18,232.707 2133.75,234.583 2134.31,234.467 2134.88,234.262 2135.45,232.809 2136.02,232.741 2136.59,231.398 2137.16,231.241 2137.72,232.105 2138.29,229.921 2138.86,229.928 2139.43,228.7 2140,227.658 2140.57,230.065 2141.13,230.277 2141.7,231.417 2142.27,231.463 2142.84,233.667 2143.41,234.402 2143.98,233.989 2144.54,233.546 2145.11,235.179 2145.68,234.666 2146.25,234.399 2146.82,232.178 2147.39,231.996 2147.95,230.936 2148.52,230.741 2149.09,229.682 2149.66,230.784 2150.23,227.748 2150.8,228.813 2151.36,226.876 2151.93,227.389 2152.5,226.872 2153.07,226.007 2153.64,227.173 2154.21,227.363 2154.77,229.578 2155.34,231.67 2155.91,232.52 2156.48,230.332 2157.05,229.364 2157.62,232.754 2158.18,231.466 2158.75,231.189 2159.32,232.286 2159.89,232.182 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip270)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip270)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip270)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip270)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.017\n  with uncertainty of ± 0.0010912678710054457\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01141 ± (0.00334536, 0.00334456) (MC)\n  95% confidence interval: [-4.01781, -4.00444]) (MC)\n  linear error propagation: -4.01127 ± 0.00335397\n  |δ_y| = |0.00242447| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.011407669990399, val_l = 0.006398126994198172, val_u = 0.006969784140583357)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip300\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip301\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip300)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip302\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.02 2211.02,1144.02 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,978.459 2211.02,978.459 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,812.893 2211.02,812.893 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,647.328 2211.02,647.328 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,481.762 2211.02,481.762 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,316.197 2211.02,316.197 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.02 365.751,1144.02 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,978.459 365.751,978.459 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,812.893 365.751,812.893 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,647.328 365.751,647.328 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,481.762 365.751,481.762 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,316.197 365.751,316.197 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M298.909 1129.82 Q295.298 1129.82 293.469 1133.39 Q291.664 1136.93 291.664 1144.06 Q291.664 1151.17 293.469 1154.73 Q295.298 1158.27 298.909 1158.27 Q302.543 1158.27 304.349 1154.73 Q306.177 1151.17 306.177 1144.06 Q306.177 1136.93 304.349 1133.39 Q302.543 1129.82 298.909 1129.82 M298.909 1126.12 Q304.719 1126.12 307.775 1130.73 Q310.853 1135.31 310.853 1144.06 Q310.853 1152.79 307.775 1157.39 Q304.719 1161.98 298.909 1161.98 Q293.099 1161.98 290.02 1157.39 Q286.964 1152.79 286.964 1144.06 Q286.964 1135.31 290.02 1130.73 Q293.099 1126.12 298.909 1126.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M259.557 991.804 L267.196 991.804 L267.196 965.438 L258.886 967.105 L258.886 962.846 L267.15 961.179 L271.826 961.179 L271.826 991.804 L279.465 991.804 L279.465 995.739 L259.557 995.739 L259.557 991.804 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 964.258 Q295.298 964.258 293.469 967.823 Q291.664 971.364 291.664 978.494 Q291.664 985.6 293.469 989.165 Q295.298 992.707 298.909 992.707 Q302.543 992.707 304.349 989.165 Q306.177 985.6 306.177 978.494 Q306.177 971.364 304.349 967.823 Q302.543 964.258 298.909 964.258 M298.909 960.554 Q304.719 960.554 307.775 965.161 Q310.853 969.744 310.853 978.494 Q310.853 987.221 307.775 991.827 Q304.719 996.41 298.909 996.41 Q293.099 996.41 290.02 991.827 Q286.964 987.221 286.964 978.494 Q286.964 969.744 290.02 965.161 Q293.099 960.554 298.909 960.554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M262.775 826.238 L279.094 826.238 L279.094 830.173 L257.15 830.173 L257.15 826.238 Q259.812 823.484 264.395 818.854 Q269.002 814.201 270.182 812.859 Q272.428 810.336 273.307 808.6 Q274.21 806.84 274.21 805.15 Q274.21 802.396 272.266 800.66 Q270.344 798.924 267.242 798.924 Q265.043 798.924 262.59 799.688 Q260.159 800.451 257.381 802.002 L257.381 797.28 Q260.205 796.146 262.659 795.567 Q265.113 794.988 267.15 794.988 Q272.52 794.988 275.715 797.674 Q278.909 800.359 278.909 804.85 Q278.909 806.979 278.099 808.9 Q277.312 810.799 275.205 813.391 Q274.627 814.062 271.525 817.28 Q268.423 820.474 262.775 826.238 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 798.692 Q295.298 798.692 293.469 802.257 Q291.664 805.799 291.664 812.928 Q291.664 820.035 293.469 823.599 Q295.298 827.141 298.909 827.141 Q302.543 827.141 304.349 823.599 Q306.177 820.035 306.177 812.928 Q306.177 805.799 304.349 802.257 Q302.543 798.692 298.909 798.692 M298.909 794.988 Q304.719 794.988 307.775 799.595 Q310.853 804.178 310.853 812.928 Q310.853 821.655 307.775 826.261 Q304.719 830.845 298.909 830.845 Q293.099 830.845 290.02 826.261 Q286.964 821.655 286.964 812.928 Q286.964 804.178 290.02 799.595 Q293.099 794.988 298.909 794.988 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M272.914 645.974 Q276.27 646.691 278.145 648.96 Q280.043 651.228 280.043 654.562 Q280.043 659.677 276.525 662.478 Q273.006 665.279 266.525 665.279 Q264.349 665.279 262.034 664.839 Q259.742 664.423 257.289 663.566 L257.289 659.052 Q259.233 660.187 261.548 660.765 Q263.863 661.344 266.386 661.344 Q270.784 661.344 273.076 659.608 Q275.39 657.872 275.39 654.562 Q275.39 651.506 273.238 649.793 Q271.108 648.057 267.289 648.057 L263.261 648.057 L263.261 644.214 L267.474 644.214 Q270.923 644.214 272.752 642.849 Q274.58 641.46 274.58 638.867 Q274.58 636.205 272.682 634.793 Q270.807 633.358 267.289 633.358 Q265.367 633.358 263.168 633.775 Q260.969 634.191 258.33 635.071 L258.33 630.904 Q260.992 630.164 263.307 629.793 Q265.645 629.423 267.705 629.423 Q273.029 629.423 276.131 631.853 Q279.233 634.261 279.233 638.381 Q279.233 641.251 277.59 643.242 Q275.946 645.21 272.914 645.974 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 633.126 Q295.298 633.126 293.469 636.691 Q291.664 640.233 291.664 647.363 Q291.664 654.469 293.469 658.034 Q295.298 661.575 298.909 661.575 Q302.543 661.575 304.349 658.034 Q306.177 654.469 306.177 647.363 Q306.177 640.233 304.349 636.691 Q302.543 633.126 298.909 633.126 M298.909 629.423 Q304.719 629.423 307.775 634.029 Q310.853 638.613 310.853 647.363 Q310.853 656.089 307.775 660.696 Q304.719 665.279 298.909 665.279 Q293.099 665.279 290.02 660.696 Q286.964 656.089 286.964 647.363 Q286.964 638.613 290.02 634.029 Q293.099 629.423 298.909 629.423 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M271.594 468.556 L259.789 487.005 L271.594 487.005 L271.594 468.556 M270.367 464.482 L276.247 464.482 L276.247 487.005 L281.177 487.005 L281.177 490.894 L276.247 490.894 L276.247 499.042 L271.594 499.042 L271.594 490.894 L255.992 490.894 L255.992 486.38 L270.367 464.482 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 467.561 Q295.298 467.561 293.469 471.126 Q291.664 474.667 291.664 481.797 Q291.664 488.903 293.469 492.468 Q295.298 496.01 298.909 496.01 Q302.543 496.01 304.349 492.468 Q306.177 488.903 306.177 481.797 Q306.177 474.667 304.349 471.126 Q302.543 467.561 298.909 467.561 M298.909 463.857 Q304.719 463.857 307.775 468.464 Q310.853 473.047 310.853 481.797 Q310.853 490.524 307.775 495.13 Q304.719 499.713 298.909 499.713 Q293.099 499.713 290.02 495.13 Q286.964 490.524 286.964 481.797 Q286.964 473.047 290.02 468.464 Q293.099 463.857 298.909 463.857 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M258.793 298.917 L277.15 298.917 L277.15 302.852 L263.076 302.852 L263.076 311.324 Q264.094 310.977 265.113 310.815 Q266.131 310.629 267.15 310.629 Q272.937 310.629 276.316 313.801 Q279.696 316.972 279.696 322.389 Q279.696 327.967 276.224 331.069 Q272.752 334.148 266.432 334.148 Q264.256 334.148 261.988 333.777 Q259.742 333.407 257.335 332.666 L257.335 327.967 Q259.418 329.102 261.641 329.657 Q263.863 330.213 266.34 330.213 Q270.344 330.213 272.682 328.106 Q275.02 326 275.02 322.389 Q275.02 318.778 272.682 316.671 Q270.344 314.565 266.34 314.565 Q264.465 314.565 262.59 314.981 Q260.738 315.398 258.793 316.278 L258.793 298.917 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M298.909 301.995 Q295.298 301.995 293.469 305.56 Q291.664 309.102 291.664 316.231 Q291.664 323.338 293.469 326.902 Q295.298 330.444 298.909 330.444 Q302.543 330.444 304.349 326.902 Q306.177 323.338 306.177 316.231 Q306.177 309.102 304.349 305.56 Q302.543 301.995 298.909 301.995 M298.909 298.292 Q304.719 298.292 307.775 302.898 Q310.853 307.481 310.853 316.231 Q310.853 324.958 307.775 329.564 Q304.719 334.148 298.909 334.148 Q293.099 334.148 290.02 329.564 Q286.964 324.958 286.964 316.231 Q286.964 307.481 290.02 302.898 Q293.099 298.292 298.909 298.292 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip302)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1150.8 400.199,1030.83 400.786,922.12 401.372,821.839 401.958,841.345 402.545,749.903 403.131,668.448 403.718,592.626 404.304,525.648 404.891,462.229 405.477,490.463 406.063,513.308 406.65,528.958 407.236,475.586 407.823,427.299 408.409,384.497 408.995,343.519 409.582,307.933 410.168,274.654 410.755,343.864 411.341,316.322 411.927,289.944 412.514,267.612 413.1,249.194 413.687,233.068 414.273,219.895 414.86,240.834 415.446,261.471 416.032,252.387 416.619,272.607 417.205,291.309 417.792,285.221 418.378,281.813 418.964,280.457 419.551,280.338 420.137,318.569 420.724,320.459 421.31,323.685 421.896,327.305 422.483,348.164 423.069,355.471 423.656,375.794 424.242,382.316 424.829,390.358 425.415,409.448 426.001,428.344 426.588,448.658 427.174,486.312 427.761,504.675 428.347,514.601 428.933,532.525 429.52,541.393 430.106,558.929 430.693,575.288 431.279,592.527 431.865,601.729 432.452,611.755 433.038,621.258 433.625,630.969 434.211,640.854 434.798,656.11 435.384,671.35 435.97,706.011 436.557,734.457 437.143,747.714 437.73,760.654 438.316,773.519 438.902,786.043 439.489,797.388 440.075,804.873 440.662,816.965 441.248,828.826 441.835,847.09 442.421,858.149 443.007,865.143 443.594,872.363 444.18,882.835 444.767,890.172 445.353,900.137 445.939,909.545 446.526,919.002 447.112,933.972 447.699,956.968 448.285,970.486 448.871,980.704 449.458,985.414 450.044,997.539 450.631,1004.64 451.217,1018.8 451.804,1029.75 452.39,1035.7 452.976,1041.46 453.563,1047.05 454.149,1052.85 454.736,1058.61 455.322,1068.09 455.908,1073.27 456.495,1078.56 457.081,1083.57 457.668,1090.25 458.254,1094.98 458.84,1097.24 459.427,1100.01 460.013,1104.78 460.6,1111.13 461.186,1113.49 461.773,1115.98 462.359,1124.17 462.945,1126.21 463.532,1130.51 464.118,1132.89 464.705,1135.04 465.291,1137.14 465.877,1141.09 466.464,1144.82 467.05,1148.78 467.637,1154.05 468.223,1155.91 468.809,1159.41 469.396,1166.38 469.982,1169.8 470.569,1174.38 471.155,1177.38 471.742,1178.57 472.328,1179.96 472.914,1182.64 473.501,1187.08 474.087,1195.8 474.674,1194.73 475.26,1195.46 475.846,1199.41 476.433,1201.38 477.019,1201.59 477.606,1208.18 478.192,1213.26 478.778,1213.28 479.365,1216.27 479.951,1217.58 480.538,1218.87 481.124,1221.49 481.711,1223.99 482.297,1224.7 482.883,1225.58 483.47,1225.16 484.056,1228.11 484.643,1229.14 485.229,1231.64 485.815,1235.48 486.402,1235.73 486.988,1236.52 487.575,1238.47 488.161,1237.6 488.748,1232.35 489.334,1236.29 489.92,1237.24 490.507,1242.23 491.093,1239.84 491.68,1238.99 492.266,1241.3 492.852,1240.39 493.439,1240.83 494.025,1241.57 494.612,1237.46 495.198,1235.44 495.784,1234.98 496.371,1233.18 496.957,1235.82 497.544,1238.1 498.13,1240.35 498.717,1239.79 499.303,1239.17 499.889,1241.19 500.476,1238.81 501.062,1236.73 501.649,1237.73 502.235,1238.75 502.821,1239.56 503.408,1241.64 503.994,1242.16 504.581,1244.46 505.167,1244.85 505.753,1244.02 506.34,1243.52 506.926,1239.89 507.513,1240.89 508.099,1244.68 508.686,1245.22 509.272,1244.38 509.858,1245.04 510.445,1246.69 511.031,1250.18 511.618,1250.53 512.204,1246.7 512.79,1244.44 513.377,1244.88 513.963,1242.52 514.55,1247.3 515.136,1247.69 515.722,1246.68 516.309,1244.15 516.895,1241.93 517.482,1241.48 518.068,1239.39 518.655,1238.69 519.241,1238.3 519.827,1234.54 520.414,1235.48 521,1233.44 521.587,1235.67 522.173,1237.98 522.759,1237.38 523.346,1237.03 523.932,1237.98 524.519,1238.84 525.105,1236.9 525.691,1235.16 526.278,1234.91 526.864,1237.36 527.451,1241.19 528.037,1235.15 528.624,1236.19 529.21,1235.91 529.796,1237.09 530.383,1235.81 530.969,1235.44 531.556,1236.42 532.142,1237.56 532.728,1238.61 533.315,1239.36 533.901,1242.79 534.488,1242.19 535.074,1241.23 535.661,1239.26 536.247,1240.21 536.833,1238.39 537.42,1238.95 538.006,1237.18 538.593,1238.07 539.179,1239.28 539.765,1241.72 540.352,1239.56 540.938,1241.71 541.525,1239.68 542.111,1236.06 542.697,1235.77 543.284,1235.38 543.87,1236.68 544.457,1239.35 545.043,1238.59 545.63,1238.13 546.216,1234.84 546.802,1238.75 547.389,1233.57 547.975,1234.49 548.562,1234.34 549.148,1237.7 549.734,1237.4 550.321,1237.08 550.907,1236.55 551.494,1238.84 552.08,1239.92 552.666,1236.6 553.253,1240.01 553.839,1239.25 554.426,1238.67 555.012,1236.52 555.599,1233.14 556.185,1232.88 556.771,1232.69 557.358,1232.24 557.944,1231.81 558.531,1231.4 559.117,1232.7 559.703,1232.48 560.29,1232.12 560.876,1233.3 561.463,1232.75 562.049,1230.88 562.635,1229.16 563.222,1231.41 563.808,1233.68 564.395,1233.25 564.981,1232.42 565.568,1232.31 566.154,1232.06 566.74,1231.69 567.327,1231.21 567.913,1229.36 568.5,1230.5 569.086,1231.8 569.672,1229.94 570.259,1226.84 570.845,1226.62 571.432,1227.91 572.018,1229.2 572.605,1227.72 573.191,1226.52 573.777,1227.51 574.364,1229.89 574.95,1229.88 575.537,1229.31 576.123,1225.49 576.709,1226.51 577.296,1227.98 577.882,1229.3 578.469,1228.8 579.055,1225.87 579.641,1225.8 580.228,1229.69 580.814,1229.37 581.401,1228.82 581.987,1228.54 582.574,1224.07 583.16,1228.22 583.746,1229.5 584.333,1229.24 584.919,1231.55 585.506,1229.82 586.092,1228.04 586.678,1228.95 587.265,1227.76 587.851,1227.7 588.438,1227.43 589.024,1225.81 589.61,1229.75 590.197,1233.38 590.783,1232.88 591.37,1233.72 591.956,1230.56 592.543,1230.35 593.129,1230.06 593.715,1231.14 594.302,1232.18 594.888,1232.84 595.475,1234.94 596.061,1234.41 596.647,1236.51 597.234,1237.33 597.82,1236.64 598.407,1235.84 598.993,1235.31 599.579,1235.75 600.166,1235.08 600.752,1234.51 601.339,1233.81 601.925,1233.17 602.512,1232.74 603.098,1234.73 603.684,1235.48 604.271,1234.8 604.857,1235.17 605.444,1233.1 606.03,1233.89 606.616,1232.01 607.203,1231.53 607.789,1232.22 608.376,1232.95 608.962,1233.72 609.548,1233.17 610.135,1229.82 610.721,1231.84 611.308,1232.49 611.894,1232.96 612.481,1233.82 613.067,1233.17 613.653,1232.38 614.24,1231.84 614.826,1233.76 615.413,1233.03 615.999,1232.38 616.585,1229.22 617.172,1229.79 617.758,1229.34 618.345,1228.34 618.931,1228.03 619.518,1230.37 620.104,1232.75 620.69,1232.05 621.277,1230.14 621.863,1229.52 622.45,1229.05 623.036,1226.92 623.622,1226.42 624.209,1228.73 624.795,1226.94 625.382,1226.49 625.968,1224.46 626.554,1221.83 627.141,1221.8 627.727,1222.73 628.314,1219.87 628.9,1217.33 629.487,1216.01 630.073,1214.82 630.659,1216.62 631.246,1217.1 631.832,1215.61 632.419,1221.1 633.005,1225.12 633.591,1221.03 634.178,1218 634.764,1220.87 635.351,1219.57 635.937,1220.73 636.523,1221.92 637.11,1221.49 637.696,1219.85 638.283,1219.96 638.869,1221.31 639.456,1220.89 640.042,1220.94 640.628,1220.87 641.215,1220.6 641.801,1217.68 642.388,1217.7 642.974,1213.98 643.56,1215.63 644.147,1214.06 644.733,1213.01 645.32,1212.16 645.906,1212.86 646.492,1214.76 647.079,1212.49 647.665,1213.11 648.252,1214.82 648.838,1214.85 649.425,1213.71 650.011,1214.35 650.597,1214.57 651.184,1215.07 651.77,1218 652.357,1217.97 652.943,1217.87 653.529,1219.52 654.116,1220.87 654.702,1219.37 655.289,1217.96 655.875,1213.94 656.462,1214.26 657.048,1214.4 657.634,1214.56 658.221,1214.61 658.807,1216.1 659.394,1216.05 659.98,1216.13 660.566,1216.13 661.153,1217.56 661.739,1217.69 662.326,1217.66 662.912,1219.04 663.498,1222.99 664.085,1221.28 664.671,1222.56 665.258,1223.8 665.844,1224.67 666.431,1224.17 667.017,1221.08 667.603,1219.69 668.19,1222.47 668.776,1219.71 669.363,1219.72 669.949,1221.09 670.535,1222.19 671.122,1223.41 671.708,1219.15 672.295,1217.46 672.881,1218.88 673.467,1221.9 674.054,1220.22 674.64,1222.49 675.227,1222.13 675.813,1227.12 676.4,1229.13 676.986,1230.31 677.572,1229.68 678.159,1231.86 678.745,1228.54 679.332,1229.13 679.918,1229.96 680.504,1226.62 681.091,1227.7 681.677,1227.15 682.264,1226.95 682.85,1229.13 683.436,1228.48 684.023,1226.58 684.609,1226.13 685.196,1226.88 685.782,1227.29 686.369,1227.94 686.955,1223.47 687.541,1224.48 688.128,1225.7 688.714,1225.36 689.301,1224.74 689.887,1225.4 690.473,1224.8 691.06,1220.33 691.646,1220.08 692.233,1219.63 692.819,1219.53 693.405,1219.53 693.992,1220.82 694.578,1221.79 695.165,1221.34 695.751,1222.52 696.338,1221.98 696.924,1221.67 697.51,1220.07 698.097,1217.11 698.683,1217.26 699.27,1217.15 699.856,1216.93 700.442,1215.43 701.029,1214.14 701.615,1215.45 702.202,1215.32 702.788,1214.23 703.375,1214.36 703.961,1214.18 704.547,1215.76 705.134,1218.2 705.72,1219.44 706.307,1219.5 706.893,1216.34 707.479,1216.48 708.066,1215.31 708.652,1216.88 709.239,1216.55 709.825,1217.88 710.411,1219.03 710.998,1218.88 711.584,1218.73 712.171,1218.66 712.757,1220.03 713.344,1221.29 713.93,1225.22 714.516,1224.61 715.103,1222.67 715.689,1222.28 716.276,1221.95 716.862,1224.18 717.448,1218.21 718.035,1219.41 718.621,1220.72 719.208,1220.35 719.794,1221.41 720.38,1219.54 720.967,1215.14 721.553,1216.53 722.14,1217.6 722.726,1218.71 723.313,1224.06 723.899,1222.13 724.485,1224.35 725.072,1226.34 725.658,1224.43 726.245,1224 726.831,1223.42 727.417,1225.98 728.004,1222.94 728.59,1223.81 729.177,1223.18 729.763,1222.69 730.349,1219.2 730.936,1218.06 731.522,1215.5 732.109,1215.38 732.695,1215.21 733.282,1213.67 733.868,1216.33 734.454,1216.41 735.041,1213.59 735.627,1212.11 736.214,1215.02 736.8,1215.04 737.386,1216.38 737.973,1216.11 738.559,1213.2 739.146,1210.55 739.732,1210.71 740.318,1212.31 740.905,1213.83 741.491,1214.91 742.078,1213.5 742.664,1213.18 743.251,1215.95 743.837,1214.52 744.423,1213.04 745.01,1215.85 745.596,1215.89 746.183,1215.72 746.769,1216.87 747.355,1216.64 747.942,1216.31 748.528,1218.62 749.115,1218.49 749.701,1218.32 750.288,1216.77 750.874,1212.84 751.46,1216.92 752.047,1214.17 752.633,1211.71 753.22,1211.77 753.806,1210.43 754.392,1213.52 754.979,1216.17 755.565,1213.51 756.152,1213.37 756.738,1209.02 757.324,1211.88 757.911,1212.06 758.497,1210.82 759.084,1209.55 759.67,1205.86 760.257,1207.95 760.843,1208.13 761.429,1207.3 762.016,1207.61 762.602,1210.66 763.189,1211.2 763.775,1211.48 764.361,1210.5 764.948,1209.5 765.534,1211.26 766.121,1215.61 766.707,1216.82 767.293,1218.08 767.88,1216.87 768.466,1216.55 769.053,1215.02 769.639,1213.59 770.226,1214.92 770.812,1216.34 771.398,1221.38 771.985,1219.64 772.571,1219.42 773.158,1217.75 773.744,1216.23 774.33,1216.36 774.917,1217.38 775.503,1218.82 776.09,1217.04 776.676,1218.49 777.262,1217.26 777.849,1217.2 778.435,1217.02 779.022,1216.57 779.608,1215.27 780.195,1213.65 780.781,1212.35 781.367,1211 781.954,1209.56 782.54,1212.26 783.127,1213.73 783.713,1216.54 784.299,1216.65 784.886,1216.3 785.472,1214.52 786.059,1214.21 786.645,1213.63 787.232,1216.33 787.818,1213.53 788.404,1213.92 788.991,1212.69 789.577,1214.02 790.164,1212.48 790.75,1214.28 791.336,1215.69 791.923,1212.98 792.509,1209.79 793.096,1209.99 793.682,1208.78 794.268,1210.36 794.855,1207.39 795.441,1206.51 796.028,1208.24 796.614,1204.49 797.201,1206.52 797.787,1208.07 798.373,1209.84 798.96,1209.79 799.546,1208.5 800.133,1208.57 800.719,1208.76 801.305,1211.56 801.892,1214.21 802.478,1214.29 803.065,1212.91 803.651,1211.39 804.237,1206.16 804.824,1206.84 805.41,1207.35 805.997,1206.05 806.583,1205.14 807.17,1208.23 807.756,1208.35 808.342,1209.98 808.929,1210.3 809.515,1210.48 810.102,1211.9 810.688,1213.14 811.274,1211.69 811.861,1214.63 812.447,1212.11 813.034,1210.81 813.62,1210.79 814.206,1209.44 814.793,1208.25 815.379,1208.38 815.966,1206.2 816.552,1206.48 817.139,1208.49 817.725,1209.01 818.311,1208.09 818.898,1212.47 819.484,1210.12 820.071,1210.07 820.657,1210.16 821.243,1210.01 821.83,1212.82 822.416,1210.15 823.003,1210.22 823.589,1209.3 824.175,1210.95 824.762,1210.97 825.348,1212.59 825.935,1214.08 826.521,1214.21 827.108,1211.64 827.694,1214.4 828.28,1213.23 828.867,1214.53 829.453,1213.33 830.04,1210.76 830.626,1209.61 831.212,1211.12 831.799,1212.69 832.385,1212.73 832.972,1212.83 833.558,1212.81 834.145,1213.1 834.731,1213.11 835.317,1213.12 835.904,1214.56 836.49,1215.8 837.077,1217.16 837.663,1215.46 838.249,1216.76 838.836,1216.67 839.422,1217.59 840.009,1217.49 840.595,1217.1 841.181,1219.5 841.768,1219.2 842.354,1219.98 842.941,1218.59 843.527,1219.73 844.114,1216.64 844.7,1217.78 845.286,1218.93 845.873,1218.63 846.459,1217.18 847.046,1214.39 847.632,1215.59 848.218,1214.11 848.805,1215.44 849.391,1213.92 849.978,1212.04 850.564,1213.22 851.15,1215.96 851.737,1219.72 852.323,1223.41 852.91,1223.98 853.496,1222.3 854.083,1224.13 854.669,1226.26 855.255,1225.52 855.842,1224.71 856.428,1225.4 857.015,1225.7 857.601,1224.88 858.187,1225.69 858.774,1226.37 859.36,1225.28 859.947,1223.23 860.533,1218.85 861.119,1218.56 861.706,1220.92 862.292,1218.87 862.879,1218.45 863.465,1217.74 864.052,1217.63 864.638,1217.11 865.224,1212.7 865.811,1212.59 866.397,1213.99 866.984,1212.39 867.57,1212.28 868.156,1212.34 868.743,1209.5 869.329,1208.35 869.916,1211.29 870.502,1210.05 871.089,1210.27 871.675,1213.06 872.261,1214.34 872.848,1211.13 873.434,1211.2 874.021,1208.62 874.607,1205.76 875.193,1210 875.78,1208.69 876.366,1208.86 876.953,1205 877.539,1205.62 878.125,1204.93 878.712,1206.64 879.298,1206.95 879.885,1208.24 880.471,1208.44 881.058,1207.28 881.644,1207.77 882.23,1208.05 882.817,1206.82 883.403,1204.49 883.99,1206.21 884.576,1207.92 885.162,1209.39 885.749,1206.8 886.335,1207.09 886.922,1207.37 887.508,1207.74 888.094,1206.56 888.681,1204.12 889.267,1204.19 889.854,1203.33 890.44,1205.36 891.027,1204.45 891.613,1203.55 892.199,1205.22 892.786,1205.74 893.372,1204.59 893.959,1205.13 894.545,1206.83 895.131,1204.35 895.718,1203.54 896.304,1205.48 896.891,1207.01 897.477,1208.58 898.063,1211.64 898.65,1212.59 899.236,1215.27 899.823,1215.11 900.409,1214.94 900.996,1216.13 901.582,1213.28 902.168,1213.21 902.755,1214.96 903.341,1214.65 903.928,1216 904.514,1212.98 905.1,1213.09 905.687,1214.47 906.273,1217.06 906.86,1216.9 907.446,1218.27 908.032,1217.92 908.619,1220.26 909.205,1220.11 909.792,1221.15 910.378,1222.1 910.965,1222.98 911.551,1221.28 912.137,1220.85 912.724,1217.8 913.31,1216.43 913.897,1216.18 914.483,1214.3 915.069,1212.68 915.656,1212.56 916.242,1212.48 916.829,1211.24 917.415,1209.53 918.002,1212.24 918.588,1213.42 919.174,1210.75 919.761,1211.03 920.347,1211.23 920.934,1212.41 921.52,1213.87 922.106,1212.28 922.693,1211.15 923.279,1212.63 923.866,1215.25 924.452,1215.15 925.038,1216.42 925.625,1218.86 926.211,1220.98 926.798,1220.45 927.384,1218.53 927.971,1215.57 928.557,1217.86 929.143,1217.46 929.73,1217.31 930.316,1217.08 930.903,1216.99 931.489,1217.82 932.075,1217.47 932.662,1216.2 933.248,1213.53 933.835,1211.83 934.421,1211.87 935.007,1209.1 935.594,1206.51 936.18,1204.22 936.767,1202.07 937.353,1202.63 937.94,1207.18 938.526,1208.96 939.112,1208.87 939.699,1212.1 940.285,1208.16 940.872,1208.27 941.458,1208.27 942.044,1211.14 942.631,1212.73 943.217,1211.34 943.804,1211.34 944.39,1211.07 944.976,1209.97 945.563,1210.07 946.149,1210.28 946.736,1211.36 947.322,1212.79 947.909,1214.09 948.495,1212.81 949.081,1214.07 949.668,1216.47 950.254,1214.85 950.841,1214.72 951.427,1214.78 952.013,1216.07 952.6,1215.7 953.186,1212.43 953.773,1214.96 954.359,1214.66 954.945,1210.57 955.532,1210.55 956.118,1210.68 956.705,1209.41 957.291,1209.44 957.878,1207.09 958.464,1204.53 959.05,1205.04 959.637,1203.89 960.223,1202.85 960.81,1204.69 961.396,1206.54 961.982,1206.99 962.569,1207.35 963.155,1208.86 963.742,1209.06 964.328,1212.01 964.915,1212.11 965.501,1212 966.087,1214.48 966.674,1214.29 967.26,1213.09 967.847,1214.67 968.433,1213.4 969.019,1210.54 969.606,1209.27 970.192,1207.87 970.779,1208.1 971.365,1208.23 971.951,1204.34 972.538,1206.19 973.124,1206.45 973.711,1206.83 974.297,1207.14 974.884,1208.99 975.47,1208.11 976.056,1208.31 976.643,1209.88 977.229,1210.09 977.816,1208.73 978.402,1210.56 978.988,1212.98 979.575,1211.59 980.161,1210.09 980.748,1208.73 981.334,1204.56 981.92,1204.82 982.507,1203.73 983.093,1205.91 983.68,1206.51 984.266,1206.83 984.853,1208.41 985.439,1209.02 986.025,1207.62 986.612,1207.78 987.198,1207.96 987.785,1205.58 988.371,1204.47 988.957,1204.7 989.544,1206.02 990.13,1206 990.717,1204.85 991.303,1203.63 991.889,1203.7 992.476,1205.3 993.062,1205.49 993.649,1206.9 994.235,1204.22 994.822,1204.53 995.408,1202.11 995.994,1201.3 996.581,1204.4 997.167,1204.96 997.754,1206.36 998.34,1207.93 998.926,1209.4 999.513,1210.97 1000.1,1210.8 1000.69,1211.05 1001.27,1210.84 1001.86,1212.25 1002.44,1212.15 1003.03,1213.68 1003.62,1212.03 1004.2,1213.26 1004.79,1217.24 1005.38,1215.56 1005.96,1216.84 1006.55,1213.77 1007.14,1216.38 1007.72,1217.41 1008.31,1215.89 1008.9,1217.36 1009.48,1215.79 1010.07,1214.2 1010.65,1213.8 1011.24,1212.1 1011.83,1212.11 1012.41,1212 1013,1210.58 1013.59,1209.26 1014.17,1210.6 1014.76,1210.61 1015.35,1210.28 1015.93,1207.9 1016.52,1209.46 1017.11,1209.48 1017.69,1206.89 1018.28,1201.92 1018.86,1203.99 1019.45,1205.97 1020.04,1206.22 1020.62,1209 1021.21,1209.11 1021.8,1208.08 1022.38,1209.79 1022.97,1209.5 1023.56,1210.99 1024.14,1211.08 1024.73,1211.34 1025.32,1210.06 1025.9,1211.61 1026.49,1209.12 1027.07,1210.37 1027.66,1211.79 1028.25,1210.34 1028.83,1209.15 1029.42,1214.72 1030.01,1213.31 1030.59,1214.78 1031.18,1217.2 1031.77,1216.83 1032.35,1217.92 1032.94,1214.77 1033.52,1214.58 1034.11,1211.82 1034.7,1209.37 1035.28,1212.25 1035.87,1212.06 1036.46,1213.39 1037.04,1214.41 1037.63,1215.49 1038.22,1213.61 1038.8,1210.6 1039.39,1211.77 1039.98,1214.49 1040.56,1214.01 1041.15,1215.56 1041.73,1215.49 1042.32,1217.8 1042.91,1216.35 1043.49,1215.55 1044.08,1215.2 1044.67,1214.75 1045.25,1215.49 1045.84,1219.26 1046.43,1217.41 1047.01,1215.8 1047.6,1212.56 1048.19,1209.84 1048.77,1210.18 1049.36,1211.42 1049.94,1210.33 1050.53,1210.42 1051.12,1208.93 1051.7,1209.07 1052.29,1207.94 1052.88,1207 1053.46,1208.66 1054.05,1210.18 1054.64,1207.54 1055.22,1207.52 1055.81,1208.97 1056.39,1210.33 1056.98,1210.45 1057.57,1209.27 1058.15,1209.37 1058.74,1208.96 1059.33,1210.41 1059.91,1208.95 1060.5,1209.26 1061.09,1209.5 1061.67,1209.38 1062.26,1209.59 1062.85,1212.3 1063.43,1212.15 1064.02,1212.14 1064.6,1213.73 1065.19,1212.32 1065.78,1209.7 1066.36,1210.99 1066.95,1213.94 1067.54,1212.31 1068.12,1212.24 1068.71,1214.98 1069.3,1214.54 1069.88,1218.27 1070.47,1215.32 1071.06,1213.47 1071.64,1211.87 1072.23,1211.76 1072.81,1214.94 1073.4,1215.94 1073.99,1218.28 1074.57,1211.4 1075.16,1211.17 1075.75,1212.55 1076.33,1212.33 1076.92,1211.16 1077.51,1212.35 1078.09,1210.98 1078.68,1209.32 1079.26,1209.51 1079.85,1208.07 1080.44,1208.01 1081.02,1209.15 1081.61,1210.66 1082.2,1210.55 1082.78,1211.96 1083.37,1214.73 1083.96,1217.09 1084.54,1216.65 1085.13,1214.72 1085.72,1214.52 1086.3,1212.83 1086.89,1207.17 1087.47,1207.67 1088.06,1206.58 1088.65,1209.71 1089.23,1205.75 1089.82,1205.04 1090.41,1205.5 1090.99,1207.12 1091.58,1208.5 1092.17,1209.98 1092.75,1209.92 1093.34,1212.58 1093.93,1213.87 1094.51,1213.69 1095.1,1212.09 1095.68,1207.9 1096.27,1207.74 1096.86,1209.28 1097.44,1210.85 1098.03,1211.12 1098.62,1209.74 1099.2,1214.05 1099.79,1213.87 1100.38,1214.96 1100.96,1211.99 1101.55,1213.27 1102.14,1209.14 1102.72,1207.77 1103.31,1210.69 1103.89,1212.14 1104.48,1207.9 1105.07,1206.73 1105.65,1207.09 1106.24,1205.82 1106.83,1207.78 1107.41,1206.59 1108,1207.96 1108.59,1209.68 1109.17,1209.87 1109.76,1208.6 1110.34,1210 1110.93,1211.24 1111.52,1211.3 1112.1,1211.24 1112.69,1211.39 1113.28,1212.64 1113.86,1210.07 1114.45,1211.32 1115.04,1208.83 1115.62,1209.96 1116.21,1209.82 1116.8,1210.18 1117.38,1208.74 1117.97,1211.78 1118.55,1207.41 1119.14,1208.77 1119.73,1208.87 1120.31,1209.06 1120.9,1209.54 1121.49,1209.38 1122.07,1212.1 1122.66,1210.22 1123.25,1211.81 1123.83,1213.08 1124.42,1215.46 1125.01,1216.54 1125.59,1217.62 1126.18,1217.21 1126.76,1211.56 1127.35,1214.36 1127.94,1214.5 1128.52,1213.08 1129.11,1210.07 1129.7,1213.02 1130.28,1214.18 1130.87,1211.48 1131.46,1211.3 1132.04,1211.42 1132.63,1212.76 1133.21,1215.29 1133.8,1215.06 1134.39,1214.82 1134.97,1214.57 1135.56,1216.89 1136.15,1216.64 1136.73,1216.22 1137.32,1214.43 1137.91,1216.8 1138.49,1215.18 1139.08,1215 1139.67,1213.44 1140.25,1205.25 1140.84,1205.49 1141.42,1205.81 1142.01,1204.57 1142.6,1207.67 1143.18,1210.58 1143.77,1208 1144.36,1209.48 1144.94,1206.76 1145.53,1210.63 1146.12,1209.16 1146.7,1212.16 1147.29,1209.45 1147.88,1207.03 1148.46,1208.49 1149.05,1209.82 1149.63,1209.79 1150.22,1211.02 1150.81,1208.37 1151.39,1208.52 1151.98,1207.52 1152.57,1213.23 1153.15,1216.15 1153.74,1214.4 1154.33,1216.85 1154.91,1217.91 1155.5,1216.21 1156.09,1217.17 1156.67,1218.3 1157.26,1216.58 1157.84,1217.66 1158.43,1217.52 1159.02,1219.73 1159.6,1220.71 1160.19,1216.05 1160.78,1217.05 1161.36,1212.62 1161.95,1207.26 1162.54,1208.71 1163.12,1208.69 1163.71,1207.55 1164.29,1208.03 1164.88,1209.58 1165.47,1212.47 1166.05,1212.44 1166.64,1209.64 1167.23,1213.44 1167.81,1213.39 1168.4,1213.29 1168.99,1213.19 1169.57,1214.2 1170.16,1214.1 1170.75,1218.05 1171.33,1216.24 1171.92,1217.39 1172.5,1219.82 1173.09,1220.73 1173.68,1225.56 1174.26,1225.24 1174.85,1222 1175.44,1224.18 1176.02,1221.92 1176.61,1221.4 1177.2,1220.74 1177.78,1219.98 1178.37,1219.68 1178.96,1219.49 1179.54,1221.74 1180.13,1221.14 1180.71,1222.17 1181.3,1221.41 1181.89,1220.88 1182.47,1218.5 1183.06,1219.35 1183.65,1215.87 1184.23,1215.71 1184.82,1216.52 1185.41,1217.59 1185.99,1214.27 1186.58,1212.72 1187.16,1211.51 1187.75,1211.54 1188.34,1211.6 1188.92,1210.27 1189.51,1212.69 1190.1,1209.81 1190.68,1212.69 1191.27,1215.05 1191.86,1209.25 1192.44,1209.44 1193.03,1208.08 1193.62,1208.18 1194.2,1208.12 1194.79,1206.98 1195.37,1207.12 1195.96,1207.4 1196.55,1207.37 1197.13,1208.74 1197.72,1210.05 1198.31,1210.13 1198.89,1208.68 1199.48,1207.56 1200.07,1208.98 1200.65,1211.77 1201.24,1211.88 1201.83,1209.26 1202.41,1209.34 1203,1208.14 1203.58,1208.41 1204.17,1209.81 1204.76,1212.58 1205.34,1212.08 1205.93,1214.63 1206.52,1211.74 1207.1,1210.26 1207.69,1211.52 1208.28,1211.61 1208.86,1211.4 1209.45,1211.38 1210.03,1211.22 1210.62,1205.6 1211.21,1207.39 1211.79,1206.13 1212.38,1207.7 1212.97,1209.28 1213.55,1209.4 1214.14,1211.92 1214.73,1213.02 1215.31,1214.16 1215.9,1213.93 1216.49,1213.91 1217.07,1210.9 1217.66,1209.18 1218.24,1210.83 1218.83,1209.69 1219.42,1210.01 1220,1209.84 1220.59,1205.91 1221.18,1207.42 1221.76,1204.68 1222.35,1202.56 1222.94,1204.4 1223.52,1203.42 1224.11,1202.72 1224.7,1203.39 1225.28,1206.57 1225.87,1206.54 1226.45,1205.49 1227.04,1203.19 1227.63,1200.8 1228.21,1202.72 1228.8,1204.87 1229.39,1206.49 1229.97,1207.08 1230.56,1209.94 1231.15,1211.12 1231.73,1211.03 1232.32,1209.41 1232.91,1209.58 1233.49,1208.54 1234.08,1207.36 1234.66,1206.11 1235.25,1208.88 1235.84,1211.64 1236.42,1213.07 1237.01,1214.28 1237.6,1216.55 1238.18,1216.28 1238.77,1214.52 1239.36,1211.56 1239.94,1210.45 1240.53,1209 1241.11,1209.27 1241.7,1208.11 1242.29,1207.91 1242.87,1207.86 1243.46,1206.65 1244.05,1209.86 1244.63,1211.3 1245.22,1210 1245.81,1208.57 1246.39,1210.16 1246.98,1211.73 1247.57,1208.86 1248.15,1210.41 1248.74,1207.96 1249.32,1206.52 1249.91,1208.3 1250.5,1207.19 1251.08,1204.55 1251.67,1205.05 1252.26,1208.22 1252.84,1208.35 1253.43,1206.98 1254.02,1207.08 1254.6,1209.9 1255.19,1211.12 1255.78,1209.93 1256.36,1211.53 1256.95,1211.55 1257.53,1208.59 1258.12,1208.37 1258.71,1208.45 1259.29,1205.77 1259.88,1205.97 1260.47,1206.18 1261.05,1203.72 1261.64,1205.54 1262.23,1205.8 1262.81,1206 1263.4,1205.13 1263.98,1202.93 1264.57,1203.5 1265.16,1205.23 1265.74,1204.31 1266.33,1204.64 1266.92,1208.86 1267.5,1209.06 1268.09,1211.55 1268.68,1211.63 1269.26,1210.34 1269.85,1210.49 1270.44,1207.41 1271.02,1207.7 1271.61,1207.64 1272.19,1206.34 1272.78,1205.3 1273.37,1207.01 1273.95,1208.73 1274.54,1210.12 1275.13,1211.38 1275.71,1211.23 1276.3,1212.63 1276.89,1212.73 1277.47,1211.35 1278.06,1212.36 1278.65,1211.07 1279.23,1209.51 1279.82,1209.8 1280.4,1211.17 1280.99,1212.39 1281.58,1215.2 1282.16,1213.61 1282.75,1212.06 1283.34,1213.08 1283.92,1215.64 1284.51,1216.8 1285.1,1215.49 1285.68,1213.87 1286.27,1214.9 1286.86,1214.77 1287.44,1211.82 1288.03,1211.67 1288.61,1211.66 1289.2,1215.41 1289.79,1213.78 1290.37,1214.73 1290.96,1214.19 1291.55,1216.42 1292.13,1217.49 1292.72,1217.14 1293.31,1217.93 1293.89,1216.24 1294.48,1215.92 1295.06,1214.28 1295.65,1214.93 1296.24,1214.38 1296.82,1214.46 1297.41,1214.18 1298,1215.22 1298.58,1216.15 1299.17,1215.92 1299.76,1214.33 1300.34,1209.65 1300.93,1208.23 1301.52,1208.42 1302.1,1207.03 1302.69,1207.23 1303.27,1209.05 1303.86,1208.78 1304.45,1210.11 1305.03,1211.38 1305.62,1211.29 1306.21,1211.34 1306.79,1211.56 1307.38,1212.66 1307.97,1209.86 1308.55,1207.22 1309.14,1208.66 1309.73,1208.58 1310.31,1205.82 1310.9,1211.58 1311.48,1210.13 1312.07,1214.02 1312.66,1216.72 1313.24,1217.8 1313.83,1217.44 1314.42,1216.86 1315,1215.05 1315.59,1216.13 1316.18,1216.99 1316.76,1212.62 1317.35,1213.79 1317.93,1213.68 1318.52,1212.13 1319.11,1210.59 1319.69,1209.41 1320.28,1207.97 1320.87,1210.52 1321.45,1213.15 1322.04,1213.1 1322.63,1211.35 1323.21,1212.63 1323.8,1212.34 1324.39,1209.81 1324.97,1208.56 1325.56,1210.15 1326.14,1211.61 1326.73,1210.18 1327.32,1206 1327.9,1199.5 1328.49,1198.77 1329.08,1202.24 1329.66,1202.72 1330.25,1203.04 1330.84,1202.14 1331.42,1204.08 1332.01,1204.51 1332.6,1206.3 1333.18,1210.67 1333.77,1212.19 1334.35,1212.18 1334.94,1212.11 1335.53,1212.09 1336.11,1213.39 1336.7,1212.15 1337.29,1210.89 1337.87,1210.78 1338.46,1209.25 1339.05,1209.46 1339.63,1209.44 1340.22,1205.68 1340.8,1210.16 1341.39,1208.75 1341.98,1210.29 1342.56,1211.71 1343.15,1209.04 1343.74,1207.86 1344.32,1206.43 1344.91,1205.12 1345.5,1206.74 1346.08,1206.91 1346.67,1207.19 1347.26,1211.58 1347.84,1211.88 1348.43,1211.76 1349.01,1211.51 1349.6,1211.4 1350.19,1211.14 1350.77,1212.65 1351.36,1215.18 1351.95,1216.35 1352.53,1214.77 1353.12,1216.12 1353.71,1214.38 1354.29,1213.74 1354.88,1212.31 1355.47,1212.09 1356.05,1212.14 1356.64,1213.38 1357.22,1211.98 1357.81,1211.8 1358.4,1211.78 1358.98,1211.54 1359.57,1212.87 1360.16,1210 1360.74,1210.1 1361.33,1207.31 1361.92,1207.67 1362.5,1209.6 1363.09,1208.06 1363.68,1205.49 1364.26,1205.85 1364.85,1206.03 1365.43,1204.73 1366.02,1206.28 1366.61,1209.41 1367.19,1209.56 1367.78,1208.57 1368.37,1210.08 1368.95,1207.28 1369.54,1204.78 1370.13,1206.77 1370.71,1207.07 1371.3,1204.61 1371.88,1205.03 1372.47,1206.83 1373.06,1208.34 1373.64,1209.81 1374.23,1212.6 1374.82,1210.01 1375.4,1210.07 1375.99,1212.86 1376.58,1214.27 1377.16,1215.28 1377.75,1213.56 1378.34,1216.16 1378.92,1215.87 1379.51,1218.01 1380.09,1218.83 1380.68,1217.06 1381.27,1213.92 1381.85,1213.83 1382.44,1213.8 1383.03,1212.03 1383.61,1212.97 1384.2,1212.74 1384.79,1212.88 1385.37,1212.76 1385.96,1211.45 1386.55,1213 1387.13,1213.32 1387.72,1210.55 1388.3,1208.92 1388.89,1210.43 1389.48,1211.84 1390.06,1207.68 1390.65,1206.71 1391.24,1205.5 1391.82,1204.07 1392.41,1204.56 1393,1206.44 1393.58,1208.19 1394.17,1210.78 1394.75,1210.19 1395.34,1208.69 1395.93,1207.58 1396.51,1211.62 1397.1,1213.2 1397.69,1211.73 1398.27,1210.53 1398.86,1209.14 1399.45,1204.93 1400.03,1203.95 1400.62,1200.14 1401.21,1202.1 1401.79,1204.05 1402.38,1205.53 1402.96,1205.58 1403.55,1207.09 1404.14,1207.19 1404.72,1206.1 1405.31,1204.95 1405.9,1205.39 1406.48,1204.18 1407.07,1205.76 1407.66,1210.26 1408.24,1210.24 1408.83,1207.79 1409.42,1206.65 1410,1208.19 1410.59,1208.41 1411.17,1209.81 1411.76,1209.7 1412.35,1207.28 1412.93,1207.29 1413.52,1209.93 1414.11,1208.34 1414.69,1208.53 1415.28,1209.08 1415.87,1210.45 1416.45,1209.17 1417.04,1211.76 1417.63,1213.15 1418.21,1214.31 1418.8,1219.51 1419.38,1216.47 1419.97,1218.94 1420.56,1219.69 1421.14,1220.11 1421.73,1218.33 1422.32,1219.04 1422.9,1215.98 1423.49,1219.72 1424.08,1218.1 1424.66,1216.31 1425.25,1220 1425.83,1219.3 1426.42,1215.98 1427.01,1214.38 1427.59,1212.7 1428.18,1211.4 1428.77,1212.85 1429.35,1211.24 1429.94,1211.33 1430.53,1211.36 1431.11,1209.85 1431.7,1211.4 1432.29,1211.31 1432.87,1212.6 1433.46,1209.25 1434.04,1209.31 1434.63,1208.1 1435.22,1206.71 1435.8,1208.16 1436.39,1208.33 1436.98,1208.46 1437.56,1207.43 1438.15,1206.26 1438.74,1209.21 1439.32,1210.69 1439.91,1209.29 1440.5,1207.77 1441.08,1206.68 1441.67,1205.62 1442.25,1202.03 1442.84,1200.81 1443.43,1201.21 1444.01,1202.74 1444.6,1203.29 1445.19,1202.49 1445.77,1204.01 1446.36,1204.56 1446.95,1206.23 1447.53,1206.44 1448.12,1206.37 1448.7,1209.39 1449.29,1209.75 1449.88,1209.89 1450.46,1207.05 1451.05,1205.82 1451.64,1204.83 1452.22,1203.91 1452.81,1205.63 1453.4,1208.63 1453.98,1208.87 1454.57,1207.5 1455.16,1206.34 1455.74,1207.92 1456.33,1209.45 1456.91,1210.96 1457.5,1212.07 1458.09,1213.29 1458.67,1211.99 1459.26,1209.42 1459.85,1210.76 1460.43,1212.27 1461.02,1211 1461.61,1209.59 1462.19,1210.75 1462.78,1208.04 1463.37,1208.5 1463.95,1208.82 1464.54,1211.56 1465.12,1212.57 1465.71,1212.81 1466.3,1212.63 1466.88,1213.87 1467.47,1209.85 1468.06,1209.83 1468.64,1209.87 1469.23,1209.6 1469.82,1211.08 1470.4,1209.89 1470.99,1209.88 1471.57,1207.3 1472.16,1201.81 1472.75,1200.89 1473.33,1200.21 1473.92,1198.09 1474.51,1200.41 1475.09,1199.48 1475.68,1201.56 1476.27,1204.82 1476.85,1207.87 1477.44,1208.08 1478.03,1206.66 1478.61,1208.4 1479.2,1205.9 1479.78,1206.04 1480.37,1204.99 1480.96,1204.24 1481.54,1204.5 1482.13,1204.62 1482.72,1206.37 1483.3,1206.43 1483.89,1207.77 1484.48,1206.77 1485.06,1208.57 1485.65,1209.89 1486.24,1207.23 1486.82,1208.97 1487.41,1206.23 1487.99,1209.14 1488.58,1212 1489.17,1210.84 1489.75,1213.45 1490.34,1217.11 1490.93,1222.01 1491.51,1220.19 1492.1,1218.45 1492.69,1217.89 1493.27,1220.2 1493.86,1221.11 1494.45,1219.27 1495.03,1217.55 1495.62,1215.82 1496.2,1212.87 1496.79,1210.29 1497.38,1208.67 1497.96,1208.59 1498.55,1211.43 1499.14,1209.75 1499.72,1210.8 1500.31,1210.82 1500.9,1212.21 1501.48,1212.12 1502.07,1210.71 1502.65,1212.09 1503.24,1210.68 1503.83,1213.2 1504.41,1211.96 1505,1213.16 1505.59,1211.77 1506.17,1212.93 1506.76,1212.75 1507.35,1213.88 1507.93,1212.46 1508.52,1214.93 1509.11,1213.32 1509.69,1213.32 1510.28,1212.15 1510.86,1210.8 1511.45,1212.31 1512.04,1213.52 1512.62,1214.78 1513.21,1216.07 1513.8,1214.45 1514.38,1213.99 1514.97,1213.57 1515.56,1207.99 1516.14,1209.43 1516.73,1210.78 1517.32,1213.83 1517.9,1210.93 1518.49,1216.47 1519.07,1217.37 1519.66,1213.09 1520.25,1212.97 1520.83,1214.19 1521.42,1214.07 1522.01,1213.95 1522.59,1212.46 1523.18,1213.64 1523.77,1212.1 1524.35,1215.93 1524.94,1215.79 1525.52,1215.37 1526.11,1213.68 1526.7,1215.03 1527.28,1212.11 1527.87,1210.44 1528.46,1209.18 1529.04,1210.74 1529.63,1212.39 1530.22,1213.41 1530.8,1214.62 1531.39,1218.49 1531.98,1219.23 1532.56,1218.84 1533.15,1219.57 1533.73,1220.39 1534.32,1218.42 1534.91,1216.6 1535.49,1216.45 1536.08,1213.77 1536.67,1214.65 1537.25,1215.61 1537.84,1214.02 1538.43,1212.05 1539.01,1210.53 1539.6,1212.99 1540.19,1210.28 1540.77,1211.7 1541.36,1212.7 1541.94,1208.26 1542.53,1205.27 1543.12,1205.6 1543.7,1208.8 1544.29,1206.04 1544.88,1203.85 1545.46,1202.67 1546.05,1201.89 1546.64,1206.6 1547.22,1209.58 1547.81,1209.37 1548.4,1209.36 1548.98,1208.07 1549.57,1206.71 1550.15,1208.23 1550.74,1208.29 1551.33,1207.09 1551.91,1208.81 1552.5,1207.54 1553.09,1209.21 1553.67,1208.31 1554.26,1207.28 1554.85,1208.71 1555.43,1205.85 1556.02,1207.71 1556.6,1210.5 1557.19,1209 1557.78,1208.94 1558.36,1209.01 1558.95,1209.16 1559.54,1208.03 1560.12,1209.79 1560.71,1211.53 1561.3,1212.61 1561.88,1212.28 1562.47,1213.47 1563.06,1211.95 1563.64,1214.43 1564.23,1214.51 1564.81,1213.12 1565.4,1215.74 1565.99,1214.07 1566.57,1212.36 1567.16,1210.95 1567.75,1212.24 1568.33,1210.68 1568.92,1210.62 1569.51,1209.15 1570.09,1206.34 1570.68,1206.49 1571.27,1204.06 1571.85,1202.97 1572.44,1206.59 1573.02,1206.99 1573.61,1206.02 1574.2,1206.16 1574.78,1209.17 1575.37,1207.82 1575.96,1209.21 1576.54,1208.08 1577.13,1211.1 1577.72,1210.95 1578.3,1211.03 1578.89,1212.35 1579.47,1212.48 1580.06,1210.98 1580.65,1212.03 1581.23,1209.41 1581.82,1209.48 1582.41,1209.29 1582.99,1208.12 1583.58,1206.93 1584.17,1207.01 1584.75,1208.58 1585.34,1205.99 1585.93,1206.41 1586.51,1211.63 1587.1,1211.34 1587.68,1211.14 1588.27,1209.71 1588.86,1209.9 1589.44,1208.43 1590.03,1208.36 1590.62,1208.51 1591.2,1204.24 1591.79,1205.9 1592.38,1205.08 1592.96,1208.09 1593.55,1209.45 1594.14,1210.9 1594.72,1209.57 1595.31,1209.8 1595.89,1214.02 1596.48,1215.3 1597.07,1217.57 1597.65,1218.29 1598.24,1217.59 1598.83,1217.4 1599.41,1217.06 1600,1215.9 1600.59,1214.43 1601.17,1212.63 1601.76,1215.41 1602.34,1213.77 1602.93,1210.62 1603.52,1210.34 1604.1,1210.22 1604.69,1210.25 1605.28,1211.73 1605.86,1213.06 1606.45,1214.22 1607.04,1212.87 1607.62,1212.67 1608.21,1212.64 1608.8,1212.26 1609.38,1206.65 1609.97,1206.91 1610.55,1206.13 1611.14,1201.29 1611.73,1198.83 1612.31,1204.99 1612.9,1205.24 1613.49,1204.37 1614.07,1204.99 1614.66,1205.26 1615.25,1205.31 1615.83,1205.72 1616.42,1205.99 1617.01,1208.94 1617.59,1207.72 1618.18,1207.81 1618.76,1210.9 1619.35,1209.46 1619.94,1209.7 1620.52,1208.57 1621.11,1209.12 1621.7,1209.2 1622.28,1210.52 1622.87,1211.66 1623.46,1211.78 1624.04,1213 1624.63,1215.74 1625.22,1215.44 1625.8,1213.92 1626.39,1213.44 1626.97,1214.65 1627.56,1214.5 1628.15,1211.93 1628.73,1214.63 1629.32,1214.27 1629.91,1212.83 1630.49,1211.46 1631.08,1215.36 1631.67,1216.28 1632.25,1216.04 1632.84,1218.25 1633.42,1218.95 1634.01,1218.42 1634.6,1219.2 1635.18,1217.58 1635.77,1217.02 1636.36,1217.08 1636.94,1218.23 1637.53,1216.73 1638.12,1216.23 1638.7,1216.97 1639.29,1215.24 1639.88,1213.38 1640.46,1213.21 1641.05,1214.49 1641.63,1214.43 1642.22,1215.59 1642.81,1215.22 1643.39,1215.02 1643.98,1217.51 1644.57,1212.96 1645.15,1212.82 1645.74,1210.23 1646.33,1212.94 1646.91,1213.06 1647.5,1210.21 1648.09,1207.58 1648.67,1206.08 1649.26,1204.92 1649.84,1202.62 1650.43,1202.94 1651.02,1203.49 1651.6,1206.64 1652.19,1204.16 1652.78,1208.69 1653.36,1205.9 1653.95,1208.9 1654.54,1210.31 1655.12,1210.02 1655.71,1211.49 1656.29,1211.59 1656.88,1210.33 1657.47,1215.64 1658.05,1214.13 1658.64,1215.4 1659.23,1213.93 1659.81,1212.25 1660.4,1213.59 1660.99,1212.07 1661.57,1211.9 1662.16,1210.41 1662.75,1210.28 1663.33,1210.13 1663.92,1211.38 1664.5,1210.08 1665.09,1207.23 1665.68,1203.31 1666.26,1202.38 1666.85,1202.88 1667.44,1204.49 1668.02,1203.47 1668.61,1203.93 1669.2,1204.38 1669.78,1203.41 1670.37,1205.23 1670.96,1205.42 1671.54,1209.95 1672.13,1208.69 1672.71,1210.13 1673.3,1207.4 1673.89,1210.26 1674.47,1207.98 1675.06,1208.04 1675.65,1210.76 1676.23,1208.07 1676.82,1208.16 1677.41,1210.89 1677.99,1208.11 1678.58,1210.66 1679.17,1210.69 1679.75,1208.36 1680.34,1204.44 1680.92,1204.72 1681.51,1207.54 1682.1,1208.93 1682.68,1210.68 1683.27,1210.81 1683.86,1210.79 1684.44,1209.57 1685.03,1209.75 1685.62,1210.8 1686.2,1206.49 1686.79,1207.97 1687.37,1206.87 1687.96,1208.21 1688.55,1207.13 1689.13,1206.14 1689.72,1206.49 1690.31,1208.03 1690.89,1208.21 1691.48,1208.27 1692.07,1211.02 1692.65,1211.21 1693.24,1212.51 1693.83,1213.91 1694.41,1212.73 1695,1213.94 1695.58,1213.44 1696.17,1211.8 1696.76,1211.68 1697.34,1214.17 1697.93,1215.22 1698.52,1215.23 1699.1,1213.55 1699.69,1209.14 1700.28,1206.06 1700.86,1206.16 1701.45,1206.39 1702.04,1206.33 1702.62,1207.65 1703.21,1206.28 1703.79,1207.84 1704.38,1206.52 1704.97,1208.01 1705.55,1209.27 1706.14,1209.55 1706.73,1209.42 1707.31,1209.49 1707.9,1206.84 1708.49,1205.82 1709.07,1206.96 1709.66,1205.83 1710.24,1207.6 1710.83,1206.37 1711.42,1207.57 1712,1207.39 1712.59,1211.65 1713.18,1213.01 1713.76,1215.77 1714.35,1218.06 1714.94,1217.69 1715.52,1218.57 1716.11,1217.85 1716.7,1217.54 1717.28,1215.9 1717.87,1218.19 1718.45,1221.94 1719.04,1221.4 1719.63,1222.22 1720.21,1220.51 1720.8,1220.22 1721.39,1218.5 1721.97,1218.07 1722.56,1214.88 1723.15,1211.52 1723.73,1211.52 1724.32,1210.24 1724.91,1210.29 1725.49,1210.34 1726.08,1209.29 1726.66,1208 1727.25,1209.63 1727.84,1206.93 1728.42,1211.17 1729.01,1212.14 1729.6,1212.2 1730.18,1212.28 1730.77,1212.12 1731.36,1214.72 1731.94,1213.07 1732.53,1211.43 1733.11,1211.59 1733.7,1213.05 1734.29,1214.14 1734.87,1213.9 1735.46,1212.55 1736.05,1208.54 1736.63,1212.68 1737.22,1208.61 1737.81,1205.84 1738.39,1208.97 1738.98,1208.73 1739.57,1208.89 1740.15,1207.87 1740.74,1205.31 1741.32,1206.82 1741.91,1208.12 1742.5,1209.55 1743.08,1212.28 1743.67,1213.8 1744.26,1214.7 1744.84,1214.62 1745.43,1214.36 1746.02,1215.74 1746.6,1212.48 1747.19,1211.01 1747.78,1211.1 1748.36,1212.4 1748.95,1212.2 1749.53,1212.17 1750.12,1214.67 1750.71,1214.4 1751.29,1213.84 1751.88,1213.92 1752.47,1213.99 1753.05,1215.27 1753.64,1216.34 1754.23,1213.41 1754.81,1213.16 1755.4,1210.24 1755.99,1208.83 1756.57,1207.52 1757.16,1207.94 1757.74,1208.07 1758.33,1206.85 1758.92,1207 1759.5,1208.81 1760.09,1210.18 1760.68,1210.06 1761.26,1208.64 1761.85,1208.86 1762.44,1210.11 1763.02,1210.18 1763.61,1212.77 1764.19,1213.86 1764.78,1213.86 1765.37,1211.26 1765.95,1211.28 1766.54,1209.84 1767.13,1211.41 1767.71,1215.11 1768.3,1215.02 1768.89,1213.6 1769.47,1211.89 1770.06,1210.31 1770.65,1210.58 1771.23,1211.75 1771.82,1211.69 1772.4,1210.35 1772.99,1208.82 1773.58,1207.7 1774.16,1210.82 1774.75,1209.46 1775.34,1209.53 1775.92,1211.03 1776.51,1209.77 1777.1,1210.08 1777.68,1209.9 1778.27,1209.93 1778.86,1210.09 1779.44,1207.38 1780.03,1207.67 1780.61,1209.26 1781.2,1208.06 1781.79,1207.92 1782.37,1208.07 1782.96,1207.12 1783.55,1211.38 1784.13,1211.32 1784.72,1211.12 1785.31,1212.4 1785.89,1211.2 1786.48,1214.01 1787.06,1211.19 1787.65,1211.25 1788.24,1209.96 1788.82,1211.54 1789.41,1211.47 1790,1208.96 1790.58,1210.48 1791.17,1213.26 1791.76,1214.72 1792.34,1213.34 1792.93,1213.11 1793.52,1214.39 1794.1,1212.75 1794.69,1210.22 1795.27,1210.29 1795.86,1210.07 1796.45,1211.3 1797.03,1212.48 1797.62,1209.75 1798.21,1208.25 1798.79,1204.21 1799.38,1206.03 1799.97,1206.02 1800.55,1204.91 1801.14,1208.04 1801.73,1208.11 1802.31,1208.27 1802.9,1209.56 1803.48,1210.9 1804.07,1208.26 1804.66,1208.5 1805.24,1209.9 1805.83,1209.97 1806.42,1211.4 1807,1211.12 1807.59,1209.7 1808.18,1208.38 1808.76,1205.82 1809.35,1207.17 1809.94,1208.81 1810.52,1213.09 1811.11,1215.62 1811.69,1215.56 1812.28,1215.43 1812.87,1213.68 1813.45,1212.12 1814.04,1210.45 1814.63,1210.52 1815.21,1210.46 1815.8,1208.99 1816.39,1206.46 1816.97,1209.44 1817.56,1209.45 1818.14,1209.48 1818.73,1208.29 1819.32,1212.57 1819.9,1213.96 1820.49,1212.5 1821.08,1212.44 1821.66,1216.33 1822.25,1213.23 1822.84,1211.62 1823.42,1209.01 1824.01,1208.02 1824.6,1209.55 1825.18,1211.28 1825.77,1208.68 1826.35,1202.28 1826.94,1202.79 1827.53,1201.81 1828.11,1202.23 1828.7,1200.35 1829.29,1203.74 1829.87,1202.97 1830.46,1204.68 1831.05,1202.27 1831.63,1203.97 1832.22,1202.72 1832.81,1204.72 1833.39,1206.59 1833.98,1205.36 1834.56,1204.56 1835.15,1205.06 1835.74,1206.43 1836.32,1206.53 1836.91,1206.7 1837.5,1208.39 1838.08,1205.87 1838.67,1208.65 1839.26,1208.74 1839.84,1210.53 1840.43,1213.32 1841.01,1213.29 1841.6,1215.92 1842.19,1215.22 1842.77,1214.99 1843.36,1213.47 1843.95,1215.92 1844.53,1214.39 1845.12,1212.88 1845.71,1212.71 1846.29,1214.03 1846.88,1209.94 1847.47,1209.95 1848.05,1214.23 1848.64,1212.52 1849.22,1216.36 1849.81,1217.48 1850.4,1214.46 1850.98,1215.63 1851.57,1216.53 1852.16,1216.15 1852.74,1218.45 1853.33,1219.32 1853.92,1217.55 1854.5,1216.89 1855.09,1215.02 1855.68,1214.97 1856.26,1214.42 1856.85,1212.95 1857.43,1212.87 1858.02,1215.28 1858.61,1215.05 1859.19,1213.44 1859.78,1213.25 1860.37,1212.92 1860.95,1212.62 1861.54,1209.64 1862.13,1208.44 1862.71,1207 1863.3,1205.8 1863.88,1207.45 1864.47,1210.28 1865.06,1207.71 1865.64,1207.75 1866.23,1209.05 1866.82,1208.98 1867.4,1207.92 1867.99,1205.69 1868.58,1207.51 1869.16,1206.37 1869.75,1204.18 1870.34,1201.95 1870.92,1203.77 1871.51,1203.19 1872.09,1203.44 1872.68,1203.96 1873.27,1202.94 1873.85,1207.37 1874.44,1208.87 1875.03,1210.47 1875.61,1210.44 1876.2,1211.72 1876.79,1208.92 1877.37,1210.49 1877.96,1210.33 1878.55,1211.79 1879.13,1210.46 1879.72,1213.24 1880.3,1210.22 1880.89,1207.6 1881.48,1206.26 1882.06,1205.15 1882.65,1204.03 1883.24,1204.34 1883.82,1203.34 1884.41,1204.97 1885,1204.99 1885.58,1203.95 1886.17,1205.64 1886.76,1206.14 1887.34,1206.68 1887.93,1208.14 1888.51,1209.43 1889.1,1209.46 1889.69,1211.81 1890.27,1212.95 1890.86,1214.27 1891.45,1215.42 1892.03,1217.72 1892.62,1217.37 1893.21,1218.69 1893.79,1218.31 1894.38,1216.74 1894.96,1216.18 1895.55,1211.94 1896.14,1210.37 1896.72,1211.64 1897.31,1212.84 1897.9,1212.33 1898.48,1210.96 1899.07,1209.61 1899.66,1209.71 1900.24,1209.98 1900.83,1209.97 1901.42,1208.47 1902,1212.93 1902.59,1211.47 1903.17,1213.88 1903.76,1212.34 1904.35,1212.46 1904.93,1213.6 1905.52,1212.36 1906.11,1209.71 1906.69,1209.49 1907.28,1210.87 1907.87,1211.28 1908.45,1212.61 1909.04,1212.58 1909.63,1211.37 1910.21,1210.12 1910.8,1208.86 1911.38,1208.95 1911.97,1207.84 1912.56,1206.75 1913.14,1206.88 1913.73,1207.17 1914.32,1209.99 1914.9,1208.52 1915.49,1208.62 1916.08,1208.67 1916.66,1210.1 1917.25,1209.93 1917.83,1207.41 1918.42,1208.95 1919.01,1205.32 1919.59,1205.7 1920.18,1204.64 1920.77,1206.2 1921.35,1206.21 1921.94,1206.52 1922.53,1209.27 1923.11,1210.41 1923.7,1208.9 1924.29,1209.37 1924.87,1209.52 1925.46,1205.52 1926.04,1206.14 1926.63,1206.58 1927.22,1209.39 1927.8,1209.43 1928.39,1209.17 1928.98,1209.24 1929.56,1211 1930.15,1212.14 1930.74,1212.42 1931.32,1209.68 1931.91,1212.58 1932.5,1211.15 1933.08,1211.23 1933.67,1211.34 1934.25,1213.76 1934.84,1217.59 1935.43,1218.57 1936.01,1218.35 1936.6,1215.32 1937.19,1217.69 1937.77,1216.1 1938.36,1218.47 1938.95,1216.74 1939.53,1217.97 1940.12,1217.28 1940.71,1217.07 1941.29,1217.01 1941.88,1218.21 1942.46,1215.05 1943.05,1212.13 1943.64,1209.09 1944.22,1210.2 1944.81,1211.54 1945.4,1210 1945.98,1213.12 1946.57,1217.03 1947.16,1213.77 1947.74,1213.58 1948.33,1210.86 1948.91,1209.29 1949.5,1205.56 1950.09,1205.61 1950.67,1204.62 1951.26,1206.19 1951.85,1207.91 1952.43,1207.9 1953.02,1206.6 1953.61,1208.03 1954.19,1208.52 1954.78,1209.98 1955.37,1209.84 1955.95,1211.46 1956.54,1211.59 1957.12,1208.92 1957.71,1209.25 1958.3,1210.82 1958.88,1209.47 1959.47,1212.25 1960.06,1211.94 1960.64,1211.68 1961.23,1211.48 1961.82,1211.09 1962.4,1212.16 1962.99,1210.81 1963.58,1212.17 1964.16,1216.17 1964.75,1214.61 1965.33,1217.01 1965.92,1218.02 1966.51,1219.2 1967.09,1221.48 1967.68,1218.43 1968.27,1218.97 1968.85,1221.11 1969.44,1218.92 1970.03,1217.42 1970.61,1218.5 1971.2,1217.78 1971.78,1214.77 1972.37,1215.74 1972.96,1214.21 1973.54,1215.3 1974.13,1215.2 1974.72,1214.75 1975.3,1211.82 1975.89,1210.66 1976.48,1210.92 1977.06,1208.01 1977.65,1209.48 1978.24,1210.81 1978.82,1209.42 1979.41,1209.57 1979.99,1208.11 1980.58,1208.45 1981.17,1205.92 1981.75,1209.14 1982.34,1208.04 1982.93,1207.95 1983.51,1206.6 1984.1,1205.38 1984.69,1205.63 1985.27,1209.87 1985.86,1211.21 1986.45,1215.01 1987.03,1217.55 1987.62,1219.81 1988.2,1217.7 1988.79,1218.71 1989.38,1216.94 1989.96,1219.36 1990.55,1216.32 1991.14,1213.2 1991.72,1214.48 1992.31,1210.42 1992.9,1210.51 1993.48,1209.23 1994.07,1209.07 1994.65,1209.06 1995.24,1207.92 1995.83,1204.08 1996.41,1201.79 1997,1202.3 1997.59,1205.45 1998.17,1208.51 1998.76,1208.79 1999.35,1207.55 1999.93,1208.81 2000.52,1210.02 2001.11,1208.65 2001.69,1208.93 2002.28,1206.3 2002.86,1208.06 2003.45,1208.26 2004.04,1208.34 2004.62,1208.49 2005.21,1209.92 2005.8,1207.2 2006.38,1206.15 2006.97,1205.43 2007.56,1204.13 2008.14,1204.43 2008.73,1206.01 2009.32,1207.69 2009.9,1205.41 2010.49,1205.65 2011.07,1203.44 2011.66,1202.56 2012.25,1201.96 2012.83,1199.85 2013.42,1202.03 2014.01,1203.95 2014.59,1204.32 2015.18,1203.12 2015.77,1204.82 2016.35,1206.65 2016.94,1205.42 2017.53,1208.69 2018.11,1207.54 2018.7,1207.79 2019.28,1208.11 2019.87,1209.45 2020.46,1209.3 2021.04,1208.15 2021.63,1205.54 2022.22,1208.54 2022.8,1208.47 2023.39,1209.84 2023.98,1211.35 2024.56,1211.67 2025.15,1211.84 2025.73,1209.37 2026.32,1210.81 2026.91,1210.79 2027.49,1210.72 2028.08,1210.92 2028.67,1209.63 2029.25,1209.65 2029.84,1212.36 2030.43,1215.22 2031.01,1215.05 2031.6,1217.67 2032.19,1219.98 2032.77,1222.05 2033.36,1221.59 2033.94,1220.93 2034.53,1221.58 2035.12,1221.21 2035.7,1221.85 2036.29,1219.89 2036.88,1217.94 2037.46,1217.31 2038.05,1216.97 2038.64,1215.06 2039.22,1216.1 2039.81,1216.23 2040.4,1214.38 2040.98,1215.51 2041.57,1213.83 2042.15,1215.27 2042.74,1213.73 2043.33,1213.49 2043.91,1210.82 2044.5,1212.04 2045.09,1213.03 2045.67,1211.82 2046.26,1213.19 2046.85,1213.13 2047.43,1210.17 2048.02,1210.38 2048.6,1209.03 2049.19,1205.09 2049.78,1206.59 2050.36,1205.32 2050.95,1204.4 2051.54,1206.29 2052.12,1206.53 2052.71,1206.47 2053.3,1205.54 2053.88,1205.53 2054.47,1208.43 2055.06,1207.28 2055.64,1210.02 2056.23,1211.21 2056.81,1212.39 2057.4,1213.74 2057.99,1213.49 2058.57,1213.23 2059.16,1215.52 2059.75,1213.94 2060.33,1212.06 2060.92,1214.83 2061.51,1210.73 2062.09,1209.28 2062.68,1209.45 2063.27,1210.88 2063.85,1203.98 2064.44,1202.81 2065.02,1201.94 2065.61,1203.94 2066.2,1205.47 2066.78,1205.92 2067.37,1204.83 2067.96,1204.97 2068.54,1204.97 2069.13,1205.3 2069.72,1204.08 2070.3,1206.98 2070.89,1205.96 2071.48,1207.49 2072.06,1207.68 2072.65,1207.52 2073.23,1206.16 2073.82,1207.88 2074.41,1206.78 2074.99,1206.94 2075.58,1205.91 2076.17,1207.5 2076.75,1205.12 2077.34,1205.17 2077.93,1204.26 2078.51,1200.57 2079.1,1203.71 2079.68,1202.78 2080.27,1205.86 2080.86,1205.98 2081.44,1207.42 2082.03,1207.76 2082.62,1207.84 2083.2,1206.64 2083.79,1206.95 2084.38,1205.68 2084.96,1206.08 2085.55,1206.47 2086.14,1206.68 2086.72,1208.23 2087.31,1207.15 2087.89,1211.35 2088.48,1212.52 2089.07,1212.1 2089.65,1210.59 2090.24,1210.62 2090.83,1211 2091.41,1212.29 2092,1214.9 2092.59,1213.01 2093.17,1212.79 2093.76,1212.88 2094.35,1215.27 2094.93,1214.67 2095.52,1212.86 2096.1,1213.04 2096.69,1214.48 2097.28,1214.3 2097.86,1215.25 2098.45,1216.21 2099.04,1217.24 2099.62,1216.99 2100.21,1218.16 2100.8,1217.43 2101.38,1215.79 2101.97,1215.52 2102.55,1215.46 2103.14,1215.35 2103.73,1216.4 2104.31,1214.72 2104.9,1215.82 2105.49,1218.67 2106.07,1218.18 2106.66,1216.55 2107.25,1218.74 2107.83,1217.02 2108.42,1218.13 2109.01,1217.93 2109.59,1216.13 2110.18,1214.79 2110.76,1214.6 2111.35,1216.6 2111.94,1218.87 2112.52,1218.57 2113.11,1220.83 2113.7,1217.56 2114.28,1217.4 2114.87,1218.28 2115.46,1216.44 2116.04,1211.99 2116.63,1214.6 2117.22,1212.98 2117.8,1212.78 2118.39,1211.4 2118.97,1207.36 2119.56,1206.19 2120.15,1203.83 2120.73,1204.43 2121.32,1204.68 2121.91,1204.95 2122.49,1203.57 2123.08,1203.52 2123.67,1203.95 2124.25,1202.93 2124.84,1205.74 2125.42,1206.16 2126.01,1206.33 2126.6,1206.63 2127.18,1205.76 2127.77,1209.97 2128.36,1212.52 2128.94,1212.35 2129.53,1210.71 2130.12,1208.06 2130.7,1207.93 2131.29,1205.41 2131.88,1205.45 2132.46,1205.62 2133.05,1207.43 2133.63,1207.46 2134.22,1209.16 2134.81,1209.34 2135.39,1208.19 2135.98,1211.01 2136.57,1211.01 2137.15,1212.63 2137.74,1214.04 2138.33,1210.96 2138.91,1210.69 2139.5,1209.2 2140.09,1209.11 2140.67,1206.19 2141.26,1205.14 2141.84,1205.59 2142.43,1206.08 2143.02,1203.85 2143.6,1204.4 2144.19,1204.64 2144.78,1207.46 2145.36,1207.65 2145.95,1209 2146.54,1209.24 2147.12,1210.62 2147.71,1209.2 2148.3,1213.16 2148.88,1211.84 2149.47,1214.41 2150.05,1213.83 2150.64,1214.58 2151.23,1215.8 2151.81,1214.39 2152.4,1214.23 2152.99,1211.41 2153.57,1208.69 2154.16,1207.55 2154.75,1210.36 2155.33,1211.63 2155.92,1207.21 2156.5,1208.84 2157.09,1209.18 2157.68,1207.72 2158.26,1207.81 \"/>\n<path clip-path=\"url(#clip302)\" d=\"M986.025 1210.96 L986.612 1210.96 L987.198 1210.96 L987.785 1210.96 L988.371 1210.96 L988.957 1210.96 L989.544 1210.96 L990.13 1210.96 L990.717 1210.96 L991.303 1210.96 L991.889 1210.96 L992.476 1210.96 L993.062 1210.96 L993.649 1210.96 L994.235 1210.96 L994.822 1210.96 L995.408 1210.96 L995.994 1210.96 L996.581 1210.96 L997.167 1210.96 L997.754 1210.96 L998.34 1210.96 L998.926 1210.96 L999.513 1210.96 L1000.1 1210.96 L1000.69 1210.96 L1001.27 1210.96 L1001.86 1210.96 L1002.44 1210.96 L1003.03 1210.96 L1003.62 1210.96 L1004.2 1210.96 L1004.79 1210.96 L1005.38 1210.96 L1005.96 1210.96 L1006.55 1210.96 L1007.14 1210.96 L1007.72 1210.96 L1008.31 1210.96 L1008.9 1210.96 L1009.48 1210.96 L1010.07 1210.96 L1010.65 1210.96 L1011.24 1210.96 L1011.83 1210.96 L1012.41 1210.96 L1013 1210.96 L1013.59 1210.96 L1014.17 1210.96 L1014.76 1210.96 L1015.35 1210.96 L1015.93 1210.96 L1016.52 1210.96 L1017.11 1210.96 L1017.69 1210.96 L1018.28 1210.96 L1018.86 1210.96 L1019.45 1210.96 L1020.04 1210.96 L1020.62 1210.96 L1021.21 1210.96 L1021.8 1210.96 L1022.38 1210.96 L1022.97 1210.96 L1023.56 1210.96 L1024.14 1210.96 L1024.73 1210.96 L1025.32 1210.96 L1025.9 1210.96 L1026.49 1210.96 L1027.07 1210.96 L1027.66 1210.96 L1028.25 1210.96 L1028.83 1210.96 L1029.42 1210.96 L1030.01 1210.96 L1030.59 1210.96 L1031.18 1210.96 L1031.77 1210.96 L1032.35 1210.96 L1032.94 1210.96 L1033.52 1210.96 L1034.11 1210.96 L1034.7 1210.96 L1035.28 1210.96 L1035.87 1210.96 L1036.46 1210.96 L1037.04 1210.96 L1037.63 1210.96 L1038.22 1210.96 L1038.8 1210.96 L1039.39 1210.96 L1039.98 1210.96 L1040.56 1210.96 L1041.15 1210.96 L1041.73 1210.96 L1042.32 1210.96 L1042.91 1210.96 L1043.49 1210.96 L1044.08 1210.96 L1044.67 1210.96 L1045.25 1210.96 L1045.84 1210.96 L1046.43 1210.96 L1047.01 1210.96 L1047.6 1210.96 L1048.19 1210.96 L1048.77 1210.96 L1049.36 1210.96 L1049.94 1210.96 L1050.53 1210.96 L1051.12 1210.96 L1051.7 1210.96 L1052.29 1210.96 L1052.88 1210.96 L1053.46 1210.96 L1054.05 1210.96 L1054.64 1210.96 L1055.22 1210.96 L1055.81 1210.96 L1056.39 1210.96 L1056.98 1210.96 L1057.57 1210.96 L1058.15 1210.96 L1058.74 1210.96 L1059.33 1210.96 L1059.91 1210.96 L1060.5 1210.96 L1061.09 1210.96 L1061.67 1210.96 L1062.26 1210.96 L1062.85 1210.96 L1063.43 1210.96 L1064.02 1210.96 L1064.6 1210.96 L1065.19 1210.96 L1065.78 1210.96 L1066.36 1210.96 L1066.95 1210.96 L1067.54 1210.96 L1068.12 1210.96 L1068.71 1210.96 L1069.3 1210.96 L1069.88 1210.96 L1070.47 1210.96 L1071.06 1210.96 L1071.64 1210.96 L1072.23 1210.96 L1072.81 1210.96 L1073.4 1210.96 L1073.99 1210.96 L1074.57 1210.96 L1075.16 1210.96 L1075.75 1210.96 L1076.33 1210.96 L1076.92 1210.96 L1077.51 1210.96 L1078.09 1210.96 L1078.68 1210.96 L1079.26 1210.96 L1079.85 1210.96 L1080.44 1210.96 L1081.02 1210.96 L1081.61 1210.96 L1082.2 1210.96 L1082.78 1210.96 L1083.37 1210.96 L1083.96 1210.96 L1084.54 1210.96 L1085.13 1210.96 L1085.72 1210.96 L1086.3 1210.96 L1086.89 1210.96 L1087.47 1210.96 L1088.06 1210.96 L1088.65 1210.96 L1089.23 1210.96 L1089.82 1210.96 L1090.41 1210.96 L1090.99 1210.96 L1091.58 1210.96 L1092.17 1210.96 L1092.75 1210.96 L1093.34 1210.96 L1093.93 1210.96 L1094.51 1210.96 L1095.1 1210.96 L1095.68 1210.96 L1096.27 1210.96 L1096.86 1210.96 L1097.44 1210.96 L1098.03 1210.96 L1098.62 1210.96 L1099.2 1210.96 L1099.79 1210.96 L1100.38 1210.96 L1100.96 1210.96 L1101.55 1210.96 L1102.14 1210.96 L1102.72 1210.96 L1103.31 1210.96 L1103.89 1210.96 L1104.48 1210.96 L1105.07 1210.96 L1105.65 1210.96 L1106.24 1210.96 L1106.83 1210.96 L1107.41 1210.96 L1108 1210.96 L1108.59 1210.96 L1109.17 1210.96 L1109.76 1210.96 L1110.34 1210.96 L1110.93 1210.96 L1111.52 1210.96 L1112.1 1210.96 L1112.69 1210.96 L1113.28 1210.96 L1113.86 1210.96 L1114.45 1210.96 L1115.04 1210.96 L1115.62 1210.96 L1116.21 1210.96 L1116.8 1210.96 L1117.38 1210.96 L1117.97 1210.96 L1118.55 1210.96 L1119.14 1210.96 L1119.73 1210.96 L1120.31 1210.96 L1120.9 1210.96 L1121.49 1210.96 L1122.07 1210.96 L1122.66 1210.96 L1123.25 1210.96 L1123.83 1210.96 L1124.42 1210.96 L1125.01 1210.96 L1125.59 1210.96 L1126.18 1210.96 L1126.76 1210.96 L1127.35 1210.96 L1127.94 1210.96 L1128.52 1210.96 L1129.11 1210.96 L1129.7 1210.96 L1130.28 1210.96 L1130.87 1210.96 L1131.46 1210.96 L1132.04 1210.96 L1132.63 1210.96 L1133.21 1210.96 L1133.8 1210.96 L1134.39 1210.96 L1134.97 1210.96 L1135.56 1210.96 L1136.15 1210.96 L1136.73 1210.96 L1137.32 1210.96 L1137.91 1210.96 L1138.49 1210.96 L1139.08 1210.96 L1139.67 1210.96 L1140.25 1210.96 L1140.84 1210.96 L1141.42 1210.96 L1142.01 1210.96 L1142.6 1210.96 L1143.18 1210.96 L1143.77 1210.96 L1144.36 1210.96 L1144.94 1210.96 L1145.53 1210.96 L1146.12 1210.96 L1146.7 1210.96 L1147.29 1210.96 L1147.88 1210.96 L1148.46 1210.96 L1149.05 1210.96 L1149.63 1210.96 L1150.22 1210.96 L1150.81 1210.96 L1151.39 1210.96 L1151.98 1210.96 L1152.57 1210.96 L1153.15 1210.96 L1153.74 1210.96 L1154.33 1210.96 L1154.91 1210.96 L1155.5 1210.96 L1156.09 1210.96 L1156.67 1210.96 L1157.26 1210.96 L1157.84 1210.96 L1158.43 1210.96 L1159.02 1210.96 L1159.6 1210.96 L1160.19 1210.96 L1160.78 1210.96 L1161.36 1210.96 L1161.95 1210.96 L1162.54 1210.96 L1163.12 1210.96 L1163.71 1210.96 L1164.29 1210.96 L1164.88 1210.96 L1165.47 1210.96 L1166.05 1210.96 L1166.64 1210.96 L1167.23 1210.96 L1167.81 1210.96 L1168.4 1210.96 L1168.99 1210.96 L1169.57 1210.96 L1170.16 1210.96 L1170.75 1210.96 L1171.33 1210.96 L1171.92 1210.96 L1172.5 1210.96 L1173.09 1210.96 L1173.68 1210.96 L1174.26 1210.96 L1174.85 1210.96 L1175.44 1210.96 L1176.02 1210.96 L1176.61 1210.96 L1177.2 1210.96 L1177.78 1210.96 L1178.37 1210.96 L1178.96 1210.96 L1179.54 1210.96 L1180.13 1210.96 L1180.71 1210.96 L1181.3 1210.96 L1181.89 1210.96 L1182.47 1210.96 L1183.06 1210.96 L1183.65 1210.96 L1184.23 1210.96 L1184.82 1210.96 L1185.41 1210.96 L1185.99 1210.96 L1186.58 1210.96 L1187.16 1210.96 L1187.75 1210.96 L1188.34 1210.96 L1188.92 1210.96 L1189.51 1210.96 L1190.1 1210.96 L1190.68 1210.96 L1191.27 1210.96 L1191.86 1210.96 L1192.44 1210.96 L1193.03 1210.96 L1193.62 1210.96 L1194.2 1210.96 L1194.79 1210.96 L1195.37 1210.96 L1195.96 1210.96 L1196.55 1210.96 L1197.13 1210.96 L1197.72 1210.96 L1198.31 1210.96 L1198.89 1210.96 L1199.48 1210.96 L1200.07 1210.96 L1200.65 1210.96 L1201.24 1210.96 L1201.83 1210.96 L1202.41 1210.96 L1203 1210.96 L1203.58 1210.96 L1204.17 1210.96 L1204.76 1210.96 L1205.34 1210.96 L1205.93 1210.96 L1206.52 1210.96 L1207.1 1210.96 L1207.69 1210.96 L1208.28 1210.96 L1208.86 1210.96 L1209.45 1210.96 L1210.03 1210.96 L1210.62 1210.96 L1211.21 1210.96 L1211.79 1210.96 L1212.38 1210.96 L1212.97 1210.96 L1213.55 1210.96 L1214.14 1210.96 L1214.73 1210.96 L1215.31 1210.96 L1215.9 1210.96 L1216.49 1210.96 L1217.07 1210.96 L1217.66 1210.96 L1218.24 1210.96 L1218.83 1210.96 L1219.42 1210.96 L1220 1210.96 L1220.59 1210.96 L1221.18 1210.96 L1221.76 1210.96 L1222.35 1210.96 L1222.94 1210.96 L1223.52 1210.96 L1224.11 1210.96 L1224.7 1210.96 L1225.28 1210.96 L1225.87 1210.96 L1226.45 1210.96 L1227.04 1210.96 L1227.63 1210.96 L1228.21 1210.96 L1228.8 1210.96 L1229.39 1210.96 L1229.97 1210.96 L1230.56 1210.96 L1231.15 1210.96 L1231.73 1210.96 L1232.32 1210.96 L1232.91 1210.96 L1233.49 1210.96 L1234.08 1210.96 L1234.66 1210.96 L1235.25 1210.96 L1235.84 1210.96 L1236.42 1210.96 L1237.01 1210.96 L1237.6 1210.96 L1238.18 1210.96 L1238.77 1210.96 L1239.36 1210.96 L1239.94 1210.96 L1240.53 1210.96 L1241.11 1210.96 L1241.7 1210.96 L1242.29 1210.96 L1242.87 1210.96 L1243.46 1210.96 L1244.05 1210.96 L1244.63 1210.96 L1245.22 1210.96 L1245.81 1210.96 L1246.39 1210.96 L1246.98 1210.96 L1247.57 1210.96 L1248.15 1210.96 L1248.74 1210.96 L1249.32 1210.96 L1249.91 1210.96 L1250.5 1210.96 L1251.08 1210.96 L1251.67 1210.96 L1252.26 1210.96 L1252.84 1210.96 L1253.43 1210.96 L1254.02 1210.96 L1254.6 1210.96 L1255.19 1210.96 L1255.78 1210.96 L1256.36 1210.96 L1256.95 1210.96 L1257.53 1210.96 L1258.12 1210.96 L1258.71 1210.96 L1259.29 1210.96 L1259.88 1210.96 L1260.47 1210.96 L1261.05 1210.96 L1261.64 1210.96 L1262.23 1210.96 L1262.81 1210.96 L1263.4 1210.96 L1263.98 1210.96 L1264.57 1210.96 L1265.16 1210.96 L1265.74 1210.96 L1266.33 1210.96 L1266.92 1210.96 L1267.5 1210.96 L1268.09 1210.96 L1268.68 1210.96 L1269.26 1210.96 L1269.85 1210.96 L1270.44 1210.96 L1271.02 1210.96 L1271.61 1210.96 L1272.19 1210.96 L1272.78 1210.96 L1273.37 1210.96 L1273.95 1210.96 L1274.54 1210.96 L1275.13 1210.96 L1275.71 1210.96 L1276.3 1210.96 L1276.89 1210.96 L1277.47 1210.96 L1278.06 1210.96 L1278.65 1210.96 L1279.23 1210.96 L1279.82 1210.96 L1280.4 1210.96 L1280.99 1210.96 L1281.58 1210.96 L1282.16 1210.96 L1282.75 1210.96 L1283.34 1210.96 L1283.92 1210.96 L1284.51 1210.96 L1285.1 1210.96 L1285.68 1210.96 L1286.27 1210.96 L1286.86 1210.96 L1287.44 1210.96 L1288.03 1210.96 L1288.61 1210.96 L1289.2 1210.96 L1289.79 1210.96 L1290.37 1210.96 L1290.96 1210.96 L1291.55 1210.96 L1292.13 1210.96 L1292.72 1210.96 L1293.31 1210.96 L1293.89 1210.96 L1294.48 1210.96 L1295.06 1210.96 L1295.65 1210.96 L1296.24 1210.96 L1296.82 1210.96 L1297.41 1210.96 L1298 1210.96 L1298.58 1210.96 L1299.17 1210.96 L1299.76 1210.96 L1300.34 1210.96 L1300.93 1210.96 L1301.52 1210.96 L1302.1 1210.96 L1302.69 1210.96 L1303.27 1210.96 L1303.86 1210.96 L1304.45 1210.96 L1305.03 1210.96 L1305.62 1210.96 L1306.21 1210.96 L1306.79 1210.96 L1307.38 1210.96 L1307.97 1210.96 L1308.55 1210.96 L1309.14 1210.96 L1309.73 1210.96 L1310.31 1210.96 L1310.9 1210.96 L1311.48 1210.96 L1312.07 1210.96 L1312.66 1210.96 L1313.24 1210.96 L1313.83 1210.96 L1314.42 1210.96 L1315 1210.96 L1315.59 1210.96 L1316.18 1210.96 L1316.76 1210.96 L1317.35 1210.96 L1317.93 1210.96 L1318.52 1210.96 L1319.11 1210.96 L1319.69 1210.96 L1320.28 1210.96 L1320.87 1210.96 L1321.45 1210.96 L1322.04 1210.96 L1322.63 1210.96 L1323.21 1210.96 L1323.8 1210.96 L1324.39 1210.96 L1324.97 1210.96 L1325.56 1210.96 L1326.14 1210.96 L1326.73 1210.96 L1327.32 1210.96 L1327.9 1210.96 L1328.49 1210.96 L1329.08 1210.96 L1329.66 1210.96 L1330.25 1210.96 L1330.84 1210.96 L1331.42 1210.96 L1332.01 1210.96 L1332.6 1210.96 L1333.18 1210.96 L1333.77 1210.96 L1334.35 1210.96 L1334.94 1210.96 L1335.53 1210.96 L1336.11 1210.96 L1336.7 1210.96 L1337.29 1210.96 L1337.87 1210.96 L1338.46 1210.96 L1339.05 1210.96 L1339.63 1210.96 L1340.22 1210.96 L1340.8 1210.96 L1341.39 1210.96 L1341.98 1210.96 L1342.56 1210.96 L1343.15 1210.96 L1343.74 1210.96 L1344.32 1210.96 L1344.91 1210.96 L1345.5 1210.96 L1346.08 1210.96 L1346.67 1210.96 L1347.26 1210.96 L1347.84 1210.96 L1348.43 1210.96 L1349.01 1210.96 L1349.6 1210.96 L1350.19 1210.96 L1350.77 1210.96 L1351.36 1210.96 L1351.95 1210.96 L1352.53 1210.96 L1353.12 1210.96 L1353.71 1210.96 L1354.29 1210.96 L1354.88 1210.96 L1355.47 1210.96 L1356.05 1210.96 L1356.64 1210.96 L1357.22 1210.96 L1357.81 1210.96 L1358.4 1210.96 L1358.98 1210.96 L1359.57 1210.96 L1360.16 1210.96 L1360.74 1210.96 L1361.33 1210.96 L1361.92 1210.96 L1362.5 1210.96 L1363.09 1210.96 L1363.68 1210.96 L1364.26 1210.96 L1364.85 1210.96 L1365.43 1210.96 L1366.02 1210.96 L1366.61 1210.96 L1367.19 1210.96 L1367.78 1210.96 L1368.37 1210.96 L1368.95 1210.96 L1369.54 1210.96 L1370.13 1210.96 L1370.71 1210.96 L1371.3 1210.96 L1371.88 1210.96 L1372.47 1210.96 L1373.06 1210.96 L1373.64 1210.96 L1374.23 1210.96 L1374.82 1210.96 L1375.4 1210.96 L1375.99 1210.96 L1376.58 1210.96 L1377.16 1210.96 L1377.75 1210.96 L1378.34 1210.96 L1378.92 1210.96 L1379.51 1210.96 L1380.09 1210.96 L1380.68 1210.96 L1381.27 1210.96 L1381.85 1210.96 L1382.44 1210.96 L1383.03 1210.96 L1383.61 1210.96 L1384.2 1210.96 L1384.79 1210.96 L1385.37 1210.96 L1385.96 1210.96 L1386.55 1210.96 L1387.13 1210.96 L1387.72 1210.96 L1388.3 1210.96 L1388.89 1210.96 L1389.48 1210.96 L1390.06 1210.96 L1390.65 1210.96 L1391.24 1210.96 L1391.82 1210.96 L1392.41 1210.96 L1393 1210.96 L1393.58 1210.96 L1394.17 1210.96 L1394.75 1210.96 L1395.34 1210.96 L1395.93 1210.96 L1396.51 1210.96 L1397.1 1210.96 L1397.69 1210.96 L1398.27 1210.96 L1398.86 1210.96 L1399.45 1210.96 L1400.03 1210.96 L1400.62 1210.96 L1401.21 1210.96 L1401.79 1210.96 L1402.38 1210.96 L1402.96 1210.96 L1403.55 1210.96 L1404.14 1210.96 L1404.72 1210.96 L1405.31 1210.96 L1405.9 1210.96 L1406.48 1210.96 L1407.07 1210.96 L1407.66 1210.96 L1408.24 1210.96 L1408.83 1210.96 L1409.42 1210.96 L1410 1210.96 L1410.59 1210.96 L1411.17 1210.96 L1411.76 1210.96 L1412.35 1210.96 L1412.93 1210.96 L1413.52 1210.96 L1414.11 1210.96 L1414.69 1210.96 L1415.28 1210.96 L1415.87 1210.96 L1416.45 1210.96 L1417.04 1210.96 L1417.63 1210.96 L1418.21 1210.96 L1418.8 1210.96 L1419.38 1210.96 L1419.97 1210.96 L1420.56 1210.96 L1421.14 1210.96 L1421.73 1210.96 L1422.32 1210.96 L1422.9 1210.96 L1423.49 1210.96 L1424.08 1210.96 L1424.66 1210.96 L1425.25 1210.96 L1425.83 1210.96 L1426.42 1210.96 L1427.01 1210.96 L1427.59 1210.96 L1428.18 1210.96 L1428.77 1210.96 L1429.35 1210.96 L1429.94 1210.96 L1430.53 1210.96 L1431.11 1210.96 L1431.7 1210.96 L1432.29 1210.96 L1432.87 1210.96 L1433.46 1210.96 L1434.04 1210.96 L1434.63 1210.96 L1435.22 1210.96 L1435.8 1210.96 L1436.39 1210.96 L1436.98 1210.96 L1437.56 1210.96 L1438.15 1210.96 L1438.74 1210.96 L1439.32 1210.96 L1439.91 1210.96 L1440.5 1210.96 L1441.08 1210.96 L1441.67 1210.96 L1442.25 1210.96 L1442.84 1210.96 L1443.43 1210.96 L1444.01 1210.96 L1444.6 1210.96 L1445.19 1210.96 L1445.77 1210.96 L1446.36 1210.96 L1446.95 1210.96 L1447.53 1210.96 L1448.12 1210.96 L1448.7 1210.96 L1449.29 1210.96 L1449.88 1210.96 L1450.46 1210.96 L1451.05 1210.96 L1451.64 1210.96 L1452.22 1210.96 L1452.81 1210.96 L1453.4 1210.96 L1453.98 1210.96 L1454.57 1210.96 L1455.16 1210.96 L1455.74 1210.96 L1456.33 1210.96 L1456.91 1210.96 L1457.5 1210.96 L1458.09 1210.96 L1458.67 1210.96 L1459.26 1210.96 L1459.85 1210.96 L1460.43 1210.96 L1461.02 1210.96 L1461.61 1210.96 L1462.19 1210.96 L1462.78 1210.96 L1463.37 1210.96 L1463.95 1210.96 L1464.54 1210.96 L1465.12 1210.96 L1465.71 1210.96 L1466.3 1210.96 L1466.88 1210.96 L1467.47 1210.96 L1468.06 1210.96 L1468.64 1210.96 L1469.23 1210.96 L1469.82 1210.96 L1470.4 1210.96 L1470.99 1210.96 L1471.57 1210.96 L1472.16 1210.96 L1472.75 1210.96 L1473.33 1210.96 L1473.92 1210.96 L1474.51 1210.96 L1475.09 1210.96 L1475.68 1210.96 L1476.27 1210.96 L1476.85 1210.96 L1477.44 1210.96 L1478.03 1210.96 L1478.61 1210.96 L1479.2 1210.96 L1479.78 1210.96 L1480.37 1210.96 L1480.96 1210.96 L1481.54 1210.96 L1482.13 1210.96 L1482.72 1210.96 L1483.3 1210.96 L1483.89 1210.96 L1484.48 1210.96 L1485.06 1210.96 L1485.65 1210.96 L1486.24 1210.96 L1486.82 1210.96 L1487.41 1210.96 L1487.99 1210.96 L1488.58 1210.96 L1489.17 1210.96 L1489.75 1210.96 L1490.34 1210.96 L1490.93 1210.96 L1491.51 1210.96 L1492.1 1210.96 L1492.69 1210.96 L1493.27 1210.96 L1493.86 1210.96 L1494.45 1210.96 L1495.03 1210.96 L1495.62 1210.96 L1496.2 1210.96 L1496.79 1210.96 L1497.38 1210.96 L1497.96 1210.96 L1498.55 1210.96 L1499.14 1210.96 L1499.72 1210.96 L1500.31 1210.96 L1500.9 1210.96 L1501.48 1210.96 L1502.07 1210.96 L1502.65 1210.96 L1503.24 1210.96 L1503.83 1210.96 L1504.41 1210.96 L1505 1210.96 L1505.59 1210.96 L1506.17 1210.96 L1506.76 1210.96 L1507.35 1210.96 L1507.93 1210.96 L1508.52 1210.96 L1509.11 1210.96 L1509.69 1210.96 L1510.28 1210.96 L1510.86 1210.96 L1511.45 1210.96 L1512.04 1210.96 L1512.62 1210.96 L1513.21 1210.96 L1513.8 1210.96 L1514.38 1210.96 L1514.97 1210.96 L1515.56 1210.96 L1516.14 1210.96 L1516.73 1210.96 L1517.32 1210.96 L1517.9 1210.96 L1518.49 1210.96 L1519.07 1210.96 L1519.66 1210.96 L1520.25 1210.96 L1520.83 1210.96 L1521.42 1210.96 L1522.01 1210.96 L1522.59 1210.96 L1523.18 1210.96 L1523.77 1210.96 L1524.35 1210.96 L1524.94 1210.96 L1525.52 1210.96 L1526.11 1210.96 L1526.7 1210.96 L1527.28 1210.96 L1527.87 1210.96 L1528.46 1210.96 L1529.04 1210.96 L1529.63 1210.96 L1530.22 1210.96 L1530.8 1210.96 L1531.39 1210.96 L1531.98 1210.96 L1532.56 1210.96 L1533.15 1210.96 L1533.73 1210.96 L1534.32 1210.96 L1534.91 1210.96 L1535.49 1210.96 L1536.08 1210.96 L1536.67 1210.96 L1537.25 1210.96 L1537.84 1210.96 L1538.43 1210.96 L1539.01 1210.96 L1539.6 1210.96 L1540.19 1210.96 L1540.77 1210.96 L1541.36 1210.96 L1541.94 1210.96 L1542.53 1210.96 L1543.12 1210.96 L1543.7 1210.96 L1544.29 1210.96 L1544.88 1210.96 L1545.46 1210.96 L1546.05 1210.96 L1546.64 1210.96 L1547.22 1210.96 L1547.81 1210.96 L1548.4 1210.96 L1548.98 1210.96 L1549.57 1210.96 L1550.15 1210.96 L1550.74 1210.96 L1551.33 1210.96 L1551.91 1210.96 L1552.5 1210.96 L1553.09 1210.96 L1553.67 1210.96 L1554.26 1210.96 L1554.85 1210.96 L1555.43 1210.96 L1556.02 1210.96 L1556.6 1210.96 L1557.19 1210.96 L1557.78 1210.96 L1558.36 1210.96 L1558.95 1210.96 L1559.54 1210.96 L1560.12 1210.96 L1560.71 1210.96 L1561.3 1210.96 L1561.88 1210.96 L1562.47 1210.96 L1563.06 1210.96 L1563.64 1210.96 L1564.23 1210.96 L1564.81 1210.96 L1565.4 1210.96 L1565.99 1210.96 L1566.57 1210.96 L1567.16 1210.96 L1567.75 1210.96 L1568.33 1210.96 L1568.92 1210.96 L1569.51 1210.96 L1570.09 1210.96 L1570.68 1210.96 L1571.27 1210.96 L1571.85 1210.96 L1572.44 1210.96 L1573.02 1210.96 L1573.61 1210.96 L1574.2 1210.96 L1574.78 1210.96 L1575.37 1210.96 L1575.96 1210.96 L1576.54 1210.96 L1577.13 1210.96 L1577.72 1210.96 L1578.3 1210.96 L1578.89 1210.96 L1579.47 1210.96 L1580.06 1210.96 L1580.65 1210.96 L1581.23 1210.96 L1581.82 1210.96 L1582.41 1210.96 L1582.99 1210.96 L1583.58 1210.96 L1584.17 1210.96 L1584.75 1210.96 L1585.34 1210.96 L1585.93 1210.96 L1586.51 1210.96 L1587.1 1210.96 L1587.68 1210.96 L1588.27 1210.96 L1588.86 1210.96 L1589.44 1210.96 L1590.03 1210.96 L1590.62 1210.96 L1591.2 1210.96 L1591.79 1210.96 L1592.38 1210.96 L1592.96 1210.96 L1593.55 1210.96 L1594.14 1210.96 L1594.72 1210.96 L1595.31 1210.96 L1595.89 1210.96 L1596.48 1210.96 L1597.07 1210.96 L1597.65 1210.96 L1598.24 1210.96 L1598.83 1210.96 L1599.41 1210.96 L1600 1210.96 L1600.59 1210.96 L1601.17 1210.96 L1601.76 1210.96 L1602.34 1210.96 L1602.93 1210.96 L1603.52 1210.96 L1604.1 1210.96 L1604.69 1210.96 L1605.28 1210.96 L1605.86 1210.96 L1606.45 1210.96 L1607.04 1210.96 L1607.62 1210.96 L1608.21 1210.96 L1608.8 1210.96 L1609.38 1210.96 L1609.97 1210.96 L1610.55 1210.96 L1611.14 1210.96 L1611.73 1210.96 L1612.31 1210.96 L1612.9 1210.96 L1613.49 1210.96 L1614.07 1210.96 L1614.66 1210.96 L1615.25 1210.96 L1615.83 1210.96 L1616.42 1210.96 L1617.01 1210.96 L1617.59 1210.96 L1618.18 1210.96 L1618.76 1210.96 L1619.35 1210.96 L1619.94 1210.96 L1620.52 1210.96 L1621.11 1210.96 L1621.7 1210.96 L1622.28 1210.96 L1622.87 1210.96 L1623.46 1210.96 L1624.04 1210.96 L1624.63 1210.96 L1625.22 1210.96 L1625.8 1210.96 L1626.39 1210.96 L1626.97 1210.96 L1627.56 1210.96 L1628.15 1210.96 L1628.73 1210.96 L1629.32 1210.96 L1629.91 1210.96 L1630.49 1210.96 L1631.08 1210.96 L1631.67 1210.96 L1632.25 1210.96 L1632.84 1210.96 L1633.42 1210.96 L1634.01 1210.96 L1634.6 1210.96 L1635.18 1210.96 L1635.77 1210.96 L1636.36 1210.96 L1636.94 1210.96 L1637.53 1210.96 L1638.12 1210.96 L1638.7 1210.96 L1639.29 1210.96 L1639.88 1210.96 L1640.46 1210.96 L1641.05 1210.96 L1641.63 1210.96 L1642.22 1210.96 L1642.81 1210.96 L1643.39 1210.96 L1643.98 1210.96 L1644.57 1210.96 L1645.15 1210.96 L1645.74 1210.96 L1646.33 1210.96 L1646.91 1210.96 L1647.5 1210.96 L1648.09 1210.96 L1648.67 1210.96 L1649.26 1210.96 L1649.84 1210.96 L1650.43 1210.96 L1651.02 1210.96 L1651.6 1210.96 L1652.19 1210.96 L1652.78 1210.96 L1653.36 1210.96 L1653.95 1210.96 L1654.54 1210.96 L1655.12 1210.96 L1655.71 1210.96 L1656.29 1210.96 L1656.88 1210.96 L1657.47 1210.96 L1658.05 1210.96 L1658.64 1210.96 L1659.23 1210.96 L1659.81 1210.96 L1660.4 1210.96 L1660.99 1210.96 L1661.57 1210.96 L1662.16 1210.96 L1662.75 1210.96 L1663.33 1210.96 L1663.92 1210.96 L1664.5 1210.96 L1665.09 1210.96 L1665.68 1210.96 L1666.26 1210.96 L1666.85 1210.96 L1667.44 1210.96 L1668.02 1210.96 L1668.61 1210.96 L1669.2 1210.96 L1669.78 1210.96 L1670.37 1210.96 L1670.96 1210.96 L1671.54 1210.96 L1672.13 1210.96 L1672.71 1210.96 L1673.3 1210.96 L1673.89 1210.96 L1674.47 1210.96 L1675.06 1210.96 L1675.65 1210.96 L1676.23 1210.96 L1676.82 1210.96 L1677.41 1210.96 L1677.99 1210.96 L1678.58 1210.96 L1679.17 1210.96 L1679.75 1210.96 L1680.34 1210.96 L1680.92 1210.96 L1681.51 1210.96 L1682.1 1210.96 L1682.68 1210.96 L1683.27 1210.96 L1683.86 1210.96 L1684.44 1210.96 L1685.03 1210.96 L1685.62 1210.96 L1686.2 1210.96 L1686.79 1210.96 L1687.37 1210.96 L1687.96 1210.96 L1688.55 1210.96 L1689.13 1210.96 L1689.72 1210.96 L1690.31 1210.96 L1690.89 1210.96 L1691.48 1210.96 L1692.07 1210.96 L1692.65 1210.96 L1693.24 1210.96 L1693.83 1210.96 L1694.41 1210.96 L1695 1210.96 L1695.58 1210.96 L1696.17 1210.96 L1696.76 1210.96 L1697.34 1210.96 L1697.93 1210.96 L1698.52 1210.96 L1699.1 1210.96 L1699.69 1210.96 L1700.28 1210.96 L1700.86 1210.96 L1701.45 1210.96 L1702.04 1210.96 L1702.62 1210.96 L1703.21 1210.96 L1703.79 1210.96 L1704.38 1210.96 L1704.97 1210.96 L1705.55 1210.96 L1706.14 1210.96 L1706.73 1210.96 L1707.31 1210.96 L1707.9 1210.96 L1708.49 1210.96 L1709.07 1210.96 L1709.66 1210.96 L1710.24 1210.96 L1710.83 1210.96 L1711.42 1210.96 L1712 1210.96 L1712.59 1210.96 L1713.18 1210.96 L1713.76 1210.96 L1714.35 1210.96 L1714.94 1210.96 L1715.52 1210.96 L1716.11 1210.96 L1716.7 1210.96 L1717.28 1210.96 L1717.87 1210.96 L1718.45 1210.96 L1719.04 1210.96 L1719.63 1210.96 L1720.21 1210.96 L1720.8 1210.96 L1721.39 1210.96 L1721.97 1210.96 L1722.56 1210.96 L1723.15 1210.96 L1723.73 1210.96 L1724.32 1210.96 L1724.91 1210.96 L1725.49 1210.96 L1726.08 1210.96 L1726.66 1210.96 L1727.25 1210.96 L1727.84 1210.96 L1728.42 1210.96 L1729.01 1210.96 L1729.6 1210.96 L1730.18 1210.96 L1730.77 1210.96 L1731.36 1210.96 L1731.94 1210.96 L1732.53 1210.96 L1733.11 1210.96 L1733.7 1210.96 L1734.29 1210.96 L1734.87 1210.96 L1735.46 1210.96 L1736.05 1210.96 L1736.63 1210.96 L1737.22 1210.96 L1737.81 1210.96 L1738.39 1210.96 L1738.98 1210.96 L1739.57 1210.96 L1740.15 1210.96 L1740.74 1210.96 L1741.32 1210.96 L1741.91 1210.96 L1742.5 1210.96 L1743.08 1210.96 L1743.67 1210.96 L1744.26 1210.96 L1744.84 1210.96 L1745.43 1210.96 L1746.02 1210.96 L1746.6 1210.96 L1747.19 1210.96 L1747.78 1210.96 L1748.36 1210.96 L1748.95 1210.96 L1749.53 1210.96 L1750.12 1210.96 L1750.71 1210.96 L1751.29 1210.96 L1751.88 1210.96 L1752.47 1210.96 L1753.05 1210.96 L1753.64 1210.96 L1754.23 1210.96 L1754.81 1210.96 L1755.4 1210.96 L1755.99 1210.96 L1756.57 1210.96 L1757.16 1210.96 L1757.74 1210.96 L1758.33 1210.96 L1758.92 1210.96 L1759.5 1210.96 L1760.09 1210.96 L1760.68 1210.96 L1761.26 1210.96 L1761.85 1210.96 L1762.44 1210.96 L1763.02 1210.96 L1763.61 1210.96 L1764.19 1210.96 L1764.78 1210.96 L1765.37 1210.96 L1765.95 1210.96 L1766.54 1210.96 L1767.13 1210.96 L1767.71 1210.96 L1768.3 1210.96 L1768.89 1210.96 L1769.47 1210.96 L1770.06 1210.96 L1770.65 1210.96 L1771.23 1210.96 L1771.82 1210.96 L1772.4 1210.96 L1772.99 1210.96 L1773.58 1210.96 L1774.16 1210.96 L1774.75 1210.96 L1775.34 1210.96 L1775.92 1210.96 L1776.51 1210.96 L1777.1 1210.96 L1777.68 1210.96 L1778.27 1210.96 L1778.86 1210.96 L1779.44 1210.96 L1780.03 1210.96 L1780.61 1210.96 L1781.2 1210.96 L1781.79 1210.96 L1782.37 1210.96 L1782.96 1210.96 L1783.55 1210.96 L1784.13 1210.96 L1784.72 1210.96 L1785.31 1210.96 L1785.89 1210.96 L1786.48 1210.96 L1787.06 1210.96 L1787.65 1210.96 L1788.24 1210.96 L1788.82 1210.96 L1789.41 1210.96 L1790 1210.96 L1790.58 1210.96 L1791.17 1210.96 L1791.76 1210.96 L1792.34 1210.96 L1792.93 1210.96 L1793.52 1210.96 L1794.1 1210.96 L1794.69 1210.96 L1795.27 1210.96 L1795.86 1210.96 L1796.45 1210.96 L1797.03 1210.96 L1797.62 1210.96 L1798.21 1210.96 L1798.79 1210.96 L1799.38 1210.96 L1799.97 1210.96 L1800.55 1210.96 L1801.14 1210.96 L1801.73 1210.96 L1802.31 1210.96 L1802.9 1210.96 L1803.48 1210.96 L1804.07 1210.96 L1804.66 1210.96 L1805.24 1210.96 L1805.83 1210.96 L1806.42 1210.96 L1807 1210.96 L1807.59 1210.96 L1808.18 1210.96 L1808.76 1210.96 L1809.35 1210.96 L1809.94 1210.96 L1810.52 1210.96 L1811.11 1210.96 L1811.69 1210.96 L1812.28 1210.96 L1812.87 1210.96 L1813.45 1210.96 L1814.04 1210.96 L1814.63 1210.96 L1815.21 1210.96 L1815.8 1210.96 L1816.39 1210.96 L1816.97 1210.96 L1817.56 1210.96 L1818.14 1210.96 L1818.73 1210.96 L1819.32 1210.96 L1819.9 1210.96 L1820.49 1210.96 L1821.08 1210.96 L1821.66 1210.96 L1822.25 1210.96 L1822.84 1210.96 L1823.42 1210.96 L1824.01 1210.96 L1824.6 1210.96 L1825.18 1210.96 L1825.77 1210.96 L1826.35 1210.96 L1826.94 1210.96 L1827.53 1210.96 L1828.11 1210.96 L1828.7 1210.96 L1829.29 1210.96 L1829.87 1210.96 L1830.46 1210.96 L1831.05 1210.96 L1831.63 1210.96 L1832.22 1210.96 L1832.81 1210.96 L1833.39 1210.96 L1833.98 1210.96 L1834.56 1210.96 L1835.15 1210.96 L1835.74 1210.96 L1836.32 1210.96 L1836.91 1210.96 L1837.5 1210.96 L1838.08 1210.96 L1838.67 1210.96 L1839.26 1210.96 L1839.84 1210.96 L1840.43 1210.96 L1841.01 1210.96 L1841.6 1210.96 L1842.19 1210.96 L1842.77 1210.96 L1843.36 1210.96 L1843.95 1210.96 L1844.53 1210.96 L1845.12 1210.96 L1845.71 1210.96 L1846.29 1210.96 L1846.88 1210.96 L1847.47 1210.96 L1848.05 1210.96 L1848.64 1210.96 L1849.22 1210.96 L1849.81 1210.96 L1850.4 1210.96 L1850.98 1210.96 L1851.57 1210.96 L1852.16 1210.96 L1852.74 1210.96 L1853.33 1210.96 L1853.92 1210.96 L1854.5 1210.96 L1855.09 1210.96 L1855.68 1210.96 L1856.26 1210.96 L1856.85 1210.96 L1857.43 1210.96 L1858.02 1210.96 L1858.61 1210.96 L1859.19 1210.96 L1859.78 1210.96 L1860.37 1210.96 L1860.95 1210.96 L1861.54 1210.96 L1862.13 1210.96 L1862.71 1210.96 L1863.3 1210.96 L1863.88 1210.96 L1864.47 1210.96 L1865.06 1210.96 L1865.64 1210.96 L1866.23 1210.96 L1866.82 1210.96 L1867.4 1210.96 L1867.99 1210.96 L1868.58 1210.96 L1869.16 1210.96 L1869.75 1210.96 L1870.34 1210.96 L1870.92 1210.96 L1871.51 1210.96 L1872.09 1210.96 L1872.68 1210.96 L1873.27 1210.96 L1873.85 1210.96 L1874.44 1210.96 L1875.03 1210.96 L1875.61 1210.96 L1876.2 1210.96 L1876.79 1210.96 L1877.37 1210.96 L1877.96 1210.96 L1878.55 1210.96 L1879.13 1210.96 L1879.72 1210.96 L1880.3 1210.96 L1880.89 1210.96 L1881.48 1210.96 L1882.06 1210.96 L1882.65 1210.96 L1883.24 1210.96 L1883.82 1210.96 L1884.41 1210.96 L1885 1210.96 L1885.58 1210.96 L1886.17 1210.96 L1886.76 1210.96 L1887.34 1210.96 L1887.93 1210.96 L1888.51 1210.96 L1889.1 1210.96 L1889.69 1210.96 L1890.27 1210.96 L1890.86 1210.96 L1891.45 1210.96 L1892.03 1210.96 L1892.62 1210.96 L1893.21 1210.96 L1893.79 1210.96 L1894.38 1210.96 L1894.96 1210.96 L1895.55 1210.96 L1896.14 1210.96 L1896.72 1210.96 L1897.31 1210.96 L1897.9 1210.96 L1898.48 1210.96 L1899.07 1210.96 L1899.66 1210.96 L1900.24 1210.96 L1900.83 1210.96 L1901.42 1210.96 L1902 1210.96 L1902.59 1210.96 L1903.17 1210.96 L1903.76 1210.96 L1904.35 1210.96 L1904.93 1210.96 L1905.52 1210.96 L1906.11 1210.96 L1906.69 1210.96 L1907.28 1210.96 L1907.87 1210.96 L1908.45 1210.96 L1909.04 1210.96 L1909.63 1210.96 L1910.21 1210.96 L1910.8 1210.96 L1911.38 1210.96 L1911.97 1210.96 L1912.56 1210.96 L1913.14 1210.96 L1913.73 1210.96 L1914.32 1210.96 L1914.9 1210.96 L1915.49 1210.96 L1916.08 1210.96 L1916.66 1210.96 L1917.25 1210.96 L1917.83 1210.96 L1918.42 1210.96 L1919.01 1210.96 L1919.59 1210.96 L1920.18 1210.96 L1920.77 1210.96 L1921.35 1210.96 L1921.94 1210.96 L1922.53 1210.96 L1923.11 1210.96 L1923.7 1210.96 L1924.29 1210.96 L1924.87 1210.96 L1925.46 1210.96 L1926.04 1210.96 L1926.63 1210.96 L1927.22 1210.96 L1927.8 1210.96 L1928.39 1210.96 L1928.98 1210.96 L1929.56 1210.96 L1930.15 1210.96 L1930.74 1210.96 L1931.32 1210.96 L1931.91 1210.96 L1932.5 1210.96 L1933.08 1210.96 L1933.67 1210.96 L1934.25 1210.96 L1934.84 1210.96 L1935.43 1210.96 L1936.01 1210.96 L1936.6 1210.96 L1937.19 1210.96 L1937.77 1210.96 L1938.36 1210.96 L1938.95 1210.96 L1939.53 1210.96 L1940.12 1210.96 L1940.71 1210.96 L1941.29 1210.96 L1941.88 1210.96 L1942.46 1210.96 L1943.05 1210.96 L1943.64 1210.96 L1944.22 1210.96 L1944.81 1210.96 L1945.4 1210.96 L1945.98 1210.96 L1946.57 1210.96 L1947.16 1210.96 L1947.74 1210.96 L1948.33 1210.96 L1948.91 1210.96 L1949.5 1210.96 L1950.09 1210.96 L1950.67 1210.96 L1951.26 1210.96 L1951.85 1210.96 L1952.43 1210.96 L1953.02 1210.96 L1953.61 1210.96 L1954.19 1210.96 L1954.78 1210.96 L1955.37 1210.96 L1955.95 1210.96 L1956.54 1210.96 L1957.12 1210.96 L1957.71 1210.96 L1958.3 1210.96 L1958.88 1210.96 L1959.47 1210.96 L1960.06 1210.96 L1960.64 1210.96 L1961.23 1210.96 L1961.82 1210.96 L1962.4 1210.96 L1962.99 1210.96 L1963.58 1210.96 L1964.16 1210.96 L1964.75 1210.96 L1965.33 1210.96 L1965.92 1210.96 L1966.51 1210.96 L1967.09 1210.96 L1967.68 1210.96 L1968.27 1210.96 L1968.85 1210.96 L1969.44 1210.96 L1970.03 1210.96 L1970.61 1210.96 L1971.2 1210.96 L1971.78 1210.96 L1972.37 1210.96 L1972.96 1210.96 L1973.54 1210.96 L1974.13 1210.96 L1974.72 1210.96 L1975.3 1210.96 L1975.89 1210.96 L1976.48 1210.96 L1977.06 1210.96 L1977.65 1210.96 L1978.24 1210.96 L1978.82 1210.96 L1979.41 1210.96 L1979.99 1210.96 L1980.58 1210.96 L1981.17 1210.96 L1981.75 1210.96 L1982.34 1210.96 L1982.93 1210.96 L1983.51 1210.96 L1984.1 1210.96 L1984.69 1210.96 L1985.27 1210.96 L1985.86 1210.96 L1986.45 1210.96 L1987.03 1210.96 L1987.62 1210.96 L1988.2 1210.96 L1988.79 1210.96 L1989.38 1210.96 L1989.96 1210.96 L1990.55 1210.96 L1991.14 1210.96 L1991.72 1210.96 L1992.31 1210.96 L1992.9 1210.96 L1993.48 1210.96 L1994.07 1210.96 L1994.65 1210.96 L1995.24 1210.96 L1995.83 1210.96 L1996.41 1210.96 L1997 1210.96 L1997.59 1210.96 L1998.17 1210.96 L1998.76 1210.96 L1999.35 1210.96 L1999.93 1210.96 L2000.52 1210.96 L2001.11 1210.96 L2001.69 1210.96 L2002.28 1210.96 L2002.86 1210.96 L2003.45 1210.96 L2004.04 1210.96 L2004.62 1210.96 L2005.21 1210.96 L2005.8 1210.96 L2006.38 1210.96 L2006.97 1210.96 L2007.56 1210.96 L2008.14 1210.96 L2008.73 1210.96 L2009.32 1210.96 L2009.9 1210.96 L2010.49 1210.96 L2011.07 1210.96 L2011.66 1210.96 L2012.25 1210.96 L2012.83 1210.96 L2013.42 1210.96 L2014.01 1210.96 L2014.59 1210.96 L2015.18 1210.96 L2015.77 1210.96 L2016.35 1210.96 L2016.94 1210.96 L2017.53 1210.96 L2018.11 1210.96 L2018.7 1210.96 L2019.28 1210.96 L2019.87 1210.96 L2020.46 1210.96 L2021.04 1210.96 L2021.63 1210.96 L2022.22 1210.96 L2022.8 1210.96 L2023.39 1210.96 L2023.98 1210.96 L2024.56 1210.96 L2025.15 1210.96 L2025.73 1210.96 L2026.32 1210.96 L2026.91 1210.96 L2027.49 1210.96 L2028.08 1210.96 L2028.67 1210.96 L2029.25 1210.96 L2029.84 1210.96 L2030.43 1210.96 L2031.01 1210.96 L2031.6 1210.96 L2032.19 1210.96 L2032.77 1210.96 L2033.36 1210.96 L2033.94 1210.96 L2034.53 1210.96 L2035.12 1210.96 L2035.7 1210.96 L2036.29 1210.96 L2036.88 1210.96 L2037.46 1210.96 L2038.05 1210.96 L2038.64 1210.96 L2039.22 1210.96 L2039.81 1210.96 L2040.4 1210.96 L2040.98 1210.96 L2041.57 1210.96 L2042.15 1210.96 L2042.74 1210.96 L2043.33 1210.96 L2043.91 1210.96 L2044.5 1210.96 L2045.09 1210.96 L2045.67 1210.96 L2046.26 1210.96 L2046.85 1210.96 L2047.43 1210.96 L2048.02 1210.96 L2048.6 1210.96 L2049.19 1210.96 L2049.78 1210.96 L2050.36 1210.96 L2050.95 1210.96 L2051.54 1210.96 L2052.12 1210.96 L2052.71 1210.96 L2053.3 1210.96 L2053.88 1210.96 L2054.47 1210.96 L2055.06 1210.96 L2055.64 1210.96 L2056.23 1210.96 L2056.81 1210.96 L2057.4 1210.96 L2057.99 1210.96 L2058.57 1210.96 L2059.16 1210.96 L2059.75 1210.96 L2060.33 1210.96 L2060.92 1210.96 L2061.51 1210.96 L2062.09 1210.96 L2062.68 1210.96 L2063.27 1210.96 L2063.85 1210.96 L2064.44 1210.96 L2065.02 1210.96 L2065.61 1210.96 L2066.2 1210.96 L2066.78 1210.96 L2067.37 1210.96 L2067.96 1210.96 L2068.54 1210.96 L2069.13 1210.96 L2069.72 1210.96 L2070.3 1210.96 L2070.89 1210.96 L2071.48 1210.96 L2072.06 1210.96 L2072.65 1210.96 L2073.23 1210.96 L2073.82 1210.96 L2074.41 1210.96 L2074.99 1210.96 L2075.58 1210.96 L2076.17 1210.96 L2076.75 1210.96 L2077.34 1210.96 L2077.93 1210.96 L2078.51 1210.96 L2079.1 1210.96 L2079.68 1210.96 L2080.27 1210.96 L2080.86 1210.96 L2081.44 1210.96 L2082.03 1210.96 L2082.62 1210.96 L2083.2 1210.96 L2083.79 1210.96 L2084.38 1210.96 L2084.96 1210.96 L2085.55 1210.96 L2086.14 1210.96 L2086.72 1210.96 L2087.31 1210.96 L2087.89 1210.96 L2088.48 1210.96 L2089.07 1210.96 L2089.65 1210.96 L2090.24 1210.96 L2090.83 1210.96 L2091.41 1210.96 L2092 1210.96 L2092.59 1210.96 L2093.17 1210.96 L2093.76 1210.96 L2094.35 1210.96 L2094.93 1210.96 L2095.52 1210.96 L2096.1 1210.96 L2096.69 1210.96 L2097.28 1210.96 L2097.86 1210.96 L2098.45 1210.96 L2099.04 1210.96 L2099.62 1210.96 L2100.21 1210.96 L2100.8 1210.96 L2101.38 1210.96 L2101.97 1210.96 L2102.55 1210.96 L2103.14 1210.96 L2103.73 1210.96 L2104.31 1210.96 L2104.9 1210.96 L2105.49 1210.96 L2106.07 1210.96 L2106.66 1210.96 L2107.25 1210.96 L2107.83 1210.96 L2108.42 1210.96 L2109.01 1210.96 L2109.59 1210.96 L2110.18 1210.96 L2110.76 1210.96 L2111.35 1210.96 L2111.94 1210.96 L2112.52 1210.96 L2113.11 1210.96 L2113.7 1210.96 L2114.28 1210.96 L2114.87 1210.96 L2115.46 1210.96 L2116.04 1210.96 L2116.63 1210.96 L2117.22 1210.96 L2117.8 1210.96 L2118.39 1210.96 L2118.97 1210.96 L2119.56 1210.96 L2120.15 1210.96 L2120.73 1210.96 L2121.32 1210.96 L2121.91 1210.96 L2122.49 1210.96 L2123.08 1210.96 L2123.67 1210.96 L2124.25 1210.96 L2124.84 1210.96 L2125.42 1210.96 L2126.01 1210.96 L2126.6 1210.96 L2127.18 1210.96 L2127.77 1210.96 L2128.36 1210.96 L2128.94 1210.96 L2129.53 1210.96 L2130.12 1210.96 L2130.7 1210.96 L2131.29 1210.96 L2131.88 1210.96 L2132.46 1210.96 L2133.05 1210.96 L2133.63 1210.96 L2134.22 1210.96 L2134.81 1210.96 L2135.39 1210.96 L2135.98 1210.96 L2136.57 1210.96 L2137.15 1210.96 L2137.74 1210.96 L2138.33 1210.96 L2138.91 1210.96 L2139.5 1210.96 L2140.09 1210.96 L2140.67 1210.96 L2141.26 1210.96 L2141.84 1210.96 L2142.43 1210.96 L2143.02 1210.96 L2143.6 1210.96 L2144.19 1210.96 L2144.78 1210.96 L2145.36 1210.96 L2145.95 1210.96 L2146.54 1210.96 L2147.12 1210.96 L2147.71 1210.96 L2148.3 1210.96 L2148.88 1210.96 L2149.47 1210.96 L2150.05 1210.96 L2150.64 1210.96 L2151.23 1210.96 L2151.81 1210.96 L2152.4 1210.96 L2152.99 1210.96 L2153.57 1210.96 L2154.16 1210.96 L2154.75 1210.96 L2155.33 1210.96 L2155.92 1210.96 L2156.5 1210.96 L2157.09 1210.96 L2157.68 1210.96 L2158.26 1210.96 L2158.26 1210.39 L2157.68 1210.39 L2157.09 1210.39 L2156.5 1210.39 L2155.92 1210.39 L2155.33 1210.39 L2154.75 1210.39 L2154.16 1210.39 L2153.57 1210.39 L2152.99 1210.39 L2152.4 1210.39 L2151.81 1210.39 L2151.23 1210.39 L2150.64 1210.39 L2150.05 1210.39 L2149.47 1210.39 L2148.88 1210.39 L2148.3 1210.39 L2147.71 1210.39 L2147.12 1210.39 L2146.54 1210.39 L2145.95 1210.39 L2145.36 1210.39 L2144.78 1210.39 L2144.19 1210.39 L2143.6 1210.39 L2143.02 1210.39 L2142.43 1210.39 L2141.84 1210.39 L2141.26 1210.39 L2140.67 1210.39 L2140.09 1210.39 L2139.5 1210.39 L2138.91 1210.39 L2138.33 1210.39 L2137.74 1210.39 L2137.15 1210.39 L2136.57 1210.39 L2135.98 1210.39 L2135.39 1210.39 L2134.81 1210.39 L2134.22 1210.39 L2133.63 1210.39 L2133.05 1210.39 L2132.46 1210.39 L2131.88 1210.39 L2131.29 1210.39 L2130.7 1210.39 L2130.12 1210.39 L2129.53 1210.39 L2128.94 1210.39 L2128.36 1210.39 L2127.77 1210.39 L2127.18 1210.39 L2126.6 1210.39 L2126.01 1210.39 L2125.42 1210.39 L2124.84 1210.39 L2124.25 1210.39 L2123.67 1210.39 L2123.08 1210.39 L2122.49 1210.39 L2121.91 1210.39 L2121.32 1210.39 L2120.73 1210.39 L2120.15 1210.39 L2119.56 1210.39 L2118.97 1210.39 L2118.39 1210.39 L2117.8 1210.39 L2117.22 1210.39 L2116.63 1210.39 L2116.04 1210.39 L2115.46 1210.39 L2114.87 1210.39 L2114.28 1210.39 L2113.7 1210.39 L2113.11 1210.39 L2112.52 1210.39 L2111.94 1210.39 L2111.35 1210.39 L2110.76 1210.39 L2110.18 1210.39 L2109.59 1210.39 L2109.01 1210.39 L2108.42 1210.39 L2107.83 1210.39 L2107.25 1210.39 L2106.66 1210.39 L2106.07 1210.39 L2105.49 1210.39 L2104.9 1210.39 L2104.31 1210.39 L2103.73 1210.39 L2103.14 1210.39 L2102.55 1210.39 L2101.97 1210.39 L2101.38 1210.39 L2100.8 1210.39 L2100.21 1210.39 L2099.62 1210.39 L2099.04 1210.39 L2098.45 1210.39 L2097.86 1210.39 L2097.28 1210.39 L2096.69 1210.39 L2096.1 1210.39 L2095.52 1210.39 L2094.93 1210.39 L2094.35 1210.39 L2093.76 1210.39 L2093.17 1210.39 L2092.59 1210.39 L2092 1210.39 L2091.41 1210.39 L2090.83 1210.39 L2090.24 1210.39 L2089.65 1210.39 L2089.07 1210.39 L2088.48 1210.39 L2087.89 1210.39 L2087.31 1210.39 L2086.72 1210.39 L2086.14 1210.39 L2085.55 1210.39 L2084.96 1210.39 L2084.38 1210.39 L2083.79 1210.39 L2083.2 1210.39 L2082.62 1210.39 L2082.03 1210.39 L2081.44 1210.39 L2080.86 1210.39 L2080.27 1210.39 L2079.68 1210.39 L2079.1 1210.39 L2078.51 1210.39 L2077.93 1210.39 L2077.34 1210.39 L2076.75 1210.39 L2076.17 1210.39 L2075.58 1210.39 L2074.99 1210.39 L2074.41 1210.39 L2073.82 1210.39 L2073.23 1210.39 L2072.65 1210.39 L2072.06 1210.39 L2071.48 1210.39 L2070.89 1210.39 L2070.3 1210.39 L2069.72 1210.39 L2069.13 1210.39 L2068.54 1210.39 L2067.96 1210.39 L2067.37 1210.39 L2066.78 1210.39 L2066.2 1210.39 L2065.61 1210.39 L2065.02 1210.39 L2064.44 1210.39 L2063.85 1210.39 L2063.27 1210.39 L2062.68 1210.39 L2062.09 1210.39 L2061.51 1210.39 L2060.92 1210.39 L2060.33 1210.39 L2059.75 1210.39 L2059.16 1210.39 L2058.57 1210.39 L2057.99 1210.39 L2057.4 1210.39 L2056.81 1210.39 L2056.23 1210.39 L2055.64 1210.39 L2055.06 1210.39 L2054.47 1210.39 L2053.88 1210.39 L2053.3 1210.39 L2052.71 1210.39 L2052.12 1210.39 L2051.54 1210.39 L2050.95 1210.39 L2050.36 1210.39 L2049.78 1210.39 L2049.19 1210.39 L2048.6 1210.39 L2048.02 1210.39 L2047.43 1210.39 L2046.85 1210.39 L2046.26 1210.39 L2045.67 1210.39 L2045.09 1210.39 L2044.5 1210.39 L2043.91 1210.39 L2043.33 1210.39 L2042.74 1210.39 L2042.15 1210.39 L2041.57 1210.39 L2040.98 1210.39 L2040.4 1210.39 L2039.81 1210.39 L2039.22 1210.39 L2038.64 1210.39 L2038.05 1210.39 L2037.46 1210.39 L2036.88 1210.39 L2036.29 1210.39 L2035.7 1210.39 L2035.12 1210.39 L2034.53 1210.39 L2033.94 1210.39 L2033.36 1210.39 L2032.77 1210.39 L2032.19 1210.39 L2031.6 1210.39 L2031.01 1210.39 L2030.43 1210.39 L2029.84 1210.39 L2029.25 1210.39 L2028.67 1210.39 L2028.08 1210.39 L2027.49 1210.39 L2026.91 1210.39 L2026.32 1210.39 L2025.73 1210.39 L2025.15 1210.39 L2024.56 1210.39 L2023.98 1210.39 L2023.39 1210.39 L2022.8 1210.39 L2022.22 1210.39 L2021.63 1210.39 L2021.04 1210.39 L2020.46 1210.39 L2019.87 1210.39 L2019.28 1210.39 L2018.7 1210.39 L2018.11 1210.39 L2017.53 1210.39 L2016.94 1210.39 L2016.35 1210.39 L2015.77 1210.39 L2015.18 1210.39 L2014.59 1210.39 L2014.01 1210.39 L2013.42 1210.39 L2012.83 1210.39 L2012.25 1210.39 L2011.66 1210.39 L2011.07 1210.39 L2010.49 1210.39 L2009.9 1210.39 L2009.32 1210.39 L2008.73 1210.39 L2008.14 1210.39 L2007.56 1210.39 L2006.97 1210.39 L2006.38 1210.39 L2005.8 1210.39 L2005.21 1210.39 L2004.62 1210.39 L2004.04 1210.39 L2003.45 1210.39 L2002.86 1210.39 L2002.28 1210.39 L2001.69 1210.39 L2001.11 1210.39 L2000.52 1210.39 L1999.93 1210.39 L1999.35 1210.39 L1998.76 1210.39 L1998.17 1210.39 L1997.59 1210.39 L1997 1210.39 L1996.41 1210.39 L1995.83 1210.39 L1995.24 1210.39 L1994.65 1210.39 L1994.07 1210.39 L1993.48 1210.39 L1992.9 1210.39 L1992.31 1210.39 L1991.72 1210.39 L1991.14 1210.39 L1990.55 1210.39 L1989.96 1210.39 L1989.38 1210.39 L1988.79 1210.39 L1988.2 1210.39 L1987.62 1210.39 L1987.03 1210.39 L1986.45 1210.39 L1985.86 1210.39 L1985.27 1210.39 L1984.69 1210.39 L1984.1 1210.39 L1983.51 1210.39 L1982.93 1210.39 L1982.34 1210.39 L1981.75 1210.39 L1981.17 1210.39 L1980.58 1210.39 L1979.99 1210.39 L1979.41 1210.39 L1978.82 1210.39 L1978.24 1210.39 L1977.65 1210.39 L1977.06 1210.39 L1976.48 1210.39 L1975.89 1210.39 L1975.3 1210.39 L1974.72 1210.39 L1974.13 1210.39 L1973.54 1210.39 L1972.96 1210.39 L1972.37 1210.39 L1971.78 1210.39 L1971.2 1210.39 L1970.61 1210.39 L1970.03 1210.39 L1969.44 1210.39 L1968.85 1210.39 L1968.27 1210.39 L1967.68 1210.39 L1967.09 1210.39 L1966.51 1210.39 L1965.92 1210.39 L1965.33 1210.39 L1964.75 1210.39 L1964.16 1210.39 L1963.58 1210.39 L1962.99 1210.39 L1962.4 1210.39 L1961.82 1210.39 L1961.23 1210.39 L1960.64 1210.39 L1960.06 1210.39 L1959.47 1210.39 L1958.88 1210.39 L1958.3 1210.39 L1957.71 1210.39 L1957.12 1210.39 L1956.54 1210.39 L1955.95 1210.39 L1955.37 1210.39 L1954.78 1210.39 L1954.19 1210.39 L1953.61 1210.39 L1953.02 1210.39 L1952.43 1210.39 L1951.85 1210.39 L1951.26 1210.39 L1950.67 1210.39 L1950.09 1210.39 L1949.5 1210.39 L1948.91 1210.39 L1948.33 1210.39 L1947.74 1210.39 L1947.16 1210.39 L1946.57 1210.39 L1945.98 1210.39 L1945.4 1210.39 L1944.81 1210.39 L1944.22 1210.39 L1943.64 1210.39 L1943.05 1210.39 L1942.46 1210.39 L1941.88 1210.39 L1941.29 1210.39 L1940.71 1210.39 L1940.12 1210.39 L1939.53 1210.39 L1938.95 1210.39 L1938.36 1210.39 L1937.77 1210.39 L1937.19 1210.39 L1936.6 1210.39 L1936.01 1210.39 L1935.43 1210.39 L1934.84 1210.39 L1934.25 1210.39 L1933.67 1210.39 L1933.08 1210.39 L1932.5 1210.39 L1931.91 1210.39 L1931.32 1210.39 L1930.74 1210.39 L1930.15 1210.39 L1929.56 1210.39 L1928.98 1210.39 L1928.39 1210.39 L1927.8 1210.39 L1927.22 1210.39 L1926.63 1210.39 L1926.04 1210.39 L1925.46 1210.39 L1924.87 1210.39 L1924.29 1210.39 L1923.7 1210.39 L1923.11 1210.39 L1922.53 1210.39 L1921.94 1210.39 L1921.35 1210.39 L1920.77 1210.39 L1920.18 1210.39 L1919.59 1210.39 L1919.01 1210.39 L1918.42 1210.39 L1917.83 1210.39 L1917.25 1210.39 L1916.66 1210.39 L1916.08 1210.39 L1915.49 1210.39 L1914.9 1210.39 L1914.32 1210.39 L1913.73 1210.39 L1913.14 1210.39 L1912.56 1210.39 L1911.97 1210.39 L1911.38 1210.39 L1910.8 1210.39 L1910.21 1210.39 L1909.63 1210.39 L1909.04 1210.39 L1908.45 1210.39 L1907.87 1210.39 L1907.28 1210.39 L1906.69 1210.39 L1906.11 1210.39 L1905.52 1210.39 L1904.93 1210.39 L1904.35 1210.39 L1903.76 1210.39 L1903.17 1210.39 L1902.59 1210.39 L1902 1210.39 L1901.42 1210.39 L1900.83 1210.39 L1900.24 1210.39 L1899.66 1210.39 L1899.07 1210.39 L1898.48 1210.39 L1897.9 1210.39 L1897.31 1210.39 L1896.72 1210.39 L1896.14 1210.39 L1895.55 1210.39 L1894.96 1210.39 L1894.38 1210.39 L1893.79 1210.39 L1893.21 1210.39 L1892.62 1210.39 L1892.03 1210.39 L1891.45 1210.39 L1890.86 1210.39 L1890.27 1210.39 L1889.69 1210.39 L1889.1 1210.39 L1888.51 1210.39 L1887.93 1210.39 L1887.34 1210.39 L1886.76 1210.39 L1886.17 1210.39 L1885.58 1210.39 L1885 1210.39 L1884.41 1210.39 L1883.82 1210.39 L1883.24 1210.39 L1882.65 1210.39 L1882.06 1210.39 L1881.48 1210.39 L1880.89 1210.39 L1880.3 1210.39 L1879.72 1210.39 L1879.13 1210.39 L1878.55 1210.39 L1877.96 1210.39 L1877.37 1210.39 L1876.79 1210.39 L1876.2 1210.39 L1875.61 1210.39 L1875.03 1210.39 L1874.44 1210.39 L1873.85 1210.39 L1873.27 1210.39 L1872.68 1210.39 L1872.09 1210.39 L1871.51 1210.39 L1870.92 1210.39 L1870.34 1210.39 L1869.75 1210.39 L1869.16 1210.39 L1868.58 1210.39 L1867.99 1210.39 L1867.4 1210.39 L1866.82 1210.39 L1866.23 1210.39 L1865.64 1210.39 L1865.06 1210.39 L1864.47 1210.39 L1863.88 1210.39 L1863.3 1210.39 L1862.71 1210.39 L1862.13 1210.39 L1861.54 1210.39 L1860.95 1210.39 L1860.37 1210.39 L1859.78 1210.39 L1859.19 1210.39 L1858.61 1210.39 L1858.02 1210.39 L1857.43 1210.39 L1856.85 1210.39 L1856.26 1210.39 L1855.68 1210.39 L1855.09 1210.39 L1854.5 1210.39 L1853.92 1210.39 L1853.33 1210.39 L1852.74 1210.39 L1852.16 1210.39 L1851.57 1210.39 L1850.98 1210.39 L1850.4 1210.39 L1849.81 1210.39 L1849.22 1210.39 L1848.64 1210.39 L1848.05 1210.39 L1847.47 1210.39 L1846.88 1210.39 L1846.29 1210.39 L1845.71 1210.39 L1845.12 1210.39 L1844.53 1210.39 L1843.95 1210.39 L1843.36 1210.39 L1842.77 1210.39 L1842.19 1210.39 L1841.6 1210.39 L1841.01 1210.39 L1840.43 1210.39 L1839.84 1210.39 L1839.26 1210.39 L1838.67 1210.39 L1838.08 1210.39 L1837.5 1210.39 L1836.91 1210.39 L1836.32 1210.39 L1835.74 1210.39 L1835.15 1210.39 L1834.56 1210.39 L1833.98 1210.39 L1833.39 1210.39 L1832.81 1210.39 L1832.22 1210.39 L1831.63 1210.39 L1831.05 1210.39 L1830.46 1210.39 L1829.87 1210.39 L1829.29 1210.39 L1828.7 1210.39 L1828.11 1210.39 L1827.53 1210.39 L1826.94 1210.39 L1826.35 1210.39 L1825.77 1210.39 L1825.18 1210.39 L1824.6 1210.39 L1824.01 1210.39 L1823.42 1210.39 L1822.84 1210.39 L1822.25 1210.39 L1821.66 1210.39 L1821.08 1210.39 L1820.49 1210.39 L1819.9 1210.39 L1819.32 1210.39 L1818.73 1210.39 L1818.14 1210.39 L1817.56 1210.39 L1816.97 1210.39 L1816.39 1210.39 L1815.8 1210.39 L1815.21 1210.39 L1814.63 1210.39 L1814.04 1210.39 L1813.45 1210.39 L1812.87 1210.39 L1812.28 1210.39 L1811.69 1210.39 L1811.11 1210.39 L1810.52 1210.39 L1809.94 1210.39 L1809.35 1210.39 L1808.76 1210.39 L1808.18 1210.39 L1807.59 1210.39 L1807 1210.39 L1806.42 1210.39 L1805.83 1210.39 L1805.24 1210.39 L1804.66 1210.39 L1804.07 1210.39 L1803.48 1210.39 L1802.9 1210.39 L1802.31 1210.39 L1801.73 1210.39 L1801.14 1210.39 L1800.55 1210.39 L1799.97 1210.39 L1799.38 1210.39 L1798.79 1210.39 L1798.21 1210.39 L1797.62 1210.39 L1797.03 1210.39 L1796.45 1210.39 L1795.86 1210.39 L1795.27 1210.39 L1794.69 1210.39 L1794.1 1210.39 L1793.52 1210.39 L1792.93 1210.39 L1792.34 1210.39 L1791.76 1210.39 L1791.17 1210.39 L1790.58 1210.39 L1790 1210.39 L1789.41 1210.39 L1788.82 1210.39 L1788.24 1210.39 L1787.65 1210.39 L1787.06 1210.39 L1786.48 1210.39 L1785.89 1210.39 L1785.31 1210.39 L1784.72 1210.39 L1784.13 1210.39 L1783.55 1210.39 L1782.96 1210.39 L1782.37 1210.39 L1781.79 1210.39 L1781.2 1210.39 L1780.61 1210.39 L1780.03 1210.39 L1779.44 1210.39 L1778.86 1210.39 L1778.27 1210.39 L1777.68 1210.39 L1777.1 1210.39 L1776.51 1210.39 L1775.92 1210.39 L1775.34 1210.39 L1774.75 1210.39 L1774.16 1210.39 L1773.58 1210.39 L1772.99 1210.39 L1772.4 1210.39 L1771.82 1210.39 L1771.23 1210.39 L1770.65 1210.39 L1770.06 1210.39 L1769.47 1210.39 L1768.89 1210.39 L1768.3 1210.39 L1767.71 1210.39 L1767.13 1210.39 L1766.54 1210.39 L1765.95 1210.39 L1765.37 1210.39 L1764.78 1210.39 L1764.19 1210.39 L1763.61 1210.39 L1763.02 1210.39 L1762.44 1210.39 L1761.85 1210.39 L1761.26 1210.39 L1760.68 1210.39 L1760.09 1210.39 L1759.5 1210.39 L1758.92 1210.39 L1758.33 1210.39 L1757.74 1210.39 L1757.16 1210.39 L1756.57 1210.39 L1755.99 1210.39 L1755.4 1210.39 L1754.81 1210.39 L1754.23 1210.39 L1753.64 1210.39 L1753.05 1210.39 L1752.47 1210.39 L1751.88 1210.39 L1751.29 1210.39 L1750.71 1210.39 L1750.12 1210.39 L1749.53 1210.39 L1748.95 1210.39 L1748.36 1210.39 L1747.78 1210.39 L1747.19 1210.39 L1746.6 1210.39 L1746.02 1210.39 L1745.43 1210.39 L1744.84 1210.39 L1744.26 1210.39 L1743.67 1210.39 L1743.08 1210.39 L1742.5 1210.39 L1741.91 1210.39 L1741.32 1210.39 L1740.74 1210.39 L1740.15 1210.39 L1739.57 1210.39 L1738.98 1210.39 L1738.39 1210.39 L1737.81 1210.39 L1737.22 1210.39 L1736.63 1210.39 L1736.05 1210.39 L1735.46 1210.39 L1734.87 1210.39 L1734.29 1210.39 L1733.7 1210.39 L1733.11 1210.39 L1732.53 1210.39 L1731.94 1210.39 L1731.36 1210.39 L1730.77 1210.39 L1730.18 1210.39 L1729.6 1210.39 L1729.01 1210.39 L1728.42 1210.39 L1727.84 1210.39 L1727.25 1210.39 L1726.66 1210.39 L1726.08 1210.39 L1725.49 1210.39 L1724.91 1210.39 L1724.32 1210.39 L1723.73 1210.39 L1723.15 1210.39 L1722.56 1210.39 L1721.97 1210.39 L1721.39 1210.39 L1720.8 1210.39 L1720.21 1210.39 L1719.63 1210.39 L1719.04 1210.39 L1718.45 1210.39 L1717.87 1210.39 L1717.28 1210.39 L1716.7 1210.39 L1716.11 1210.39 L1715.52 1210.39 L1714.94 1210.39 L1714.35 1210.39 L1713.76 1210.39 L1713.18 1210.39 L1712.59 1210.39 L1712 1210.39 L1711.42 1210.39 L1710.83 1210.39 L1710.24 1210.39 L1709.66 1210.39 L1709.07 1210.39 L1708.49 1210.39 L1707.9 1210.39 L1707.31 1210.39 L1706.73 1210.39 L1706.14 1210.39 L1705.55 1210.39 L1704.97 1210.39 L1704.38 1210.39 L1703.79 1210.39 L1703.21 1210.39 L1702.62 1210.39 L1702.04 1210.39 L1701.45 1210.39 L1700.86 1210.39 L1700.28 1210.39 L1699.69 1210.39 L1699.1 1210.39 L1698.52 1210.39 L1697.93 1210.39 L1697.34 1210.39 L1696.76 1210.39 L1696.17 1210.39 L1695.58 1210.39 L1695 1210.39 L1694.41 1210.39 L1693.83 1210.39 L1693.24 1210.39 L1692.65 1210.39 L1692.07 1210.39 L1691.48 1210.39 L1690.89 1210.39 L1690.31 1210.39 L1689.72 1210.39 L1689.13 1210.39 L1688.55 1210.39 L1687.96 1210.39 L1687.37 1210.39 L1686.79 1210.39 L1686.2 1210.39 L1685.62 1210.39 L1685.03 1210.39 L1684.44 1210.39 L1683.86 1210.39 L1683.27 1210.39 L1682.68 1210.39 L1682.1 1210.39 L1681.51 1210.39 L1680.92 1210.39 L1680.34 1210.39 L1679.75 1210.39 L1679.17 1210.39 L1678.58 1210.39 L1677.99 1210.39 L1677.41 1210.39 L1676.82 1210.39 L1676.23 1210.39 L1675.65 1210.39 L1675.06 1210.39 L1674.47 1210.39 L1673.89 1210.39 L1673.3 1210.39 L1672.71 1210.39 L1672.13 1210.39 L1671.54 1210.39 L1670.96 1210.39 L1670.37 1210.39 L1669.78 1210.39 L1669.2 1210.39 L1668.61 1210.39 L1668.02 1210.39 L1667.44 1210.39 L1666.85 1210.39 L1666.26 1210.39 L1665.68 1210.39 L1665.09 1210.39 L1664.5 1210.39 L1663.92 1210.39 L1663.33 1210.39 L1662.75 1210.39 L1662.16 1210.39 L1661.57 1210.39 L1660.99 1210.39 L1660.4 1210.39 L1659.81 1210.39 L1659.23 1210.39 L1658.64 1210.39 L1658.05 1210.39 L1657.47 1210.39 L1656.88 1210.39 L1656.29 1210.39 L1655.71 1210.39 L1655.12 1210.39 L1654.54 1210.39 L1653.95 1210.39 L1653.36 1210.39 L1652.78 1210.39 L1652.19 1210.39 L1651.6 1210.39 L1651.02 1210.39 L1650.43 1210.39 L1649.84 1210.39 L1649.26 1210.39 L1648.67 1210.39 L1648.09 1210.39 L1647.5 1210.39 L1646.91 1210.39 L1646.33 1210.39 L1645.74 1210.39 L1645.15 1210.39 L1644.57 1210.39 L1643.98 1210.39 L1643.39 1210.39 L1642.81 1210.39 L1642.22 1210.39 L1641.63 1210.39 L1641.05 1210.39 L1640.46 1210.39 L1639.88 1210.39 L1639.29 1210.39 L1638.7 1210.39 L1638.12 1210.39 L1637.53 1210.39 L1636.94 1210.39 L1636.36 1210.39 L1635.77 1210.39 L1635.18 1210.39 L1634.6 1210.39 L1634.01 1210.39 L1633.42 1210.39 L1632.84 1210.39 L1632.25 1210.39 L1631.67 1210.39 L1631.08 1210.39 L1630.49 1210.39 L1629.91 1210.39 L1629.32 1210.39 L1628.73 1210.39 L1628.15 1210.39 L1627.56 1210.39 L1626.97 1210.39 L1626.39 1210.39 L1625.8 1210.39 L1625.22 1210.39 L1624.63 1210.39 L1624.04 1210.39 L1623.46 1210.39 L1622.87 1210.39 L1622.28 1210.39 L1621.7 1210.39 L1621.11 1210.39 L1620.52 1210.39 L1619.94 1210.39 L1619.35 1210.39 L1618.76 1210.39 L1618.18 1210.39 L1617.59 1210.39 L1617.01 1210.39 L1616.42 1210.39 L1615.83 1210.39 L1615.25 1210.39 L1614.66 1210.39 L1614.07 1210.39 L1613.49 1210.39 L1612.9 1210.39 L1612.31 1210.39 L1611.73 1210.39 L1611.14 1210.39 L1610.55 1210.39 L1609.97 1210.39 L1609.38 1210.39 L1608.8 1210.39 L1608.21 1210.39 L1607.62 1210.39 L1607.04 1210.39 L1606.45 1210.39 L1605.86 1210.39 L1605.28 1210.39 L1604.69 1210.39 L1604.1 1210.39 L1603.52 1210.39 L1602.93 1210.39 L1602.34 1210.39 L1601.76 1210.39 L1601.17 1210.39 L1600.59 1210.39 L1600 1210.39 L1599.41 1210.39 L1598.83 1210.39 L1598.24 1210.39 L1597.65 1210.39 L1597.07 1210.39 L1596.48 1210.39 L1595.89 1210.39 L1595.31 1210.39 L1594.72 1210.39 L1594.14 1210.39 L1593.55 1210.39 L1592.96 1210.39 L1592.38 1210.39 L1591.79 1210.39 L1591.2 1210.39 L1590.62 1210.39 L1590.03 1210.39 L1589.44 1210.39 L1588.86 1210.39 L1588.27 1210.39 L1587.68 1210.39 L1587.1 1210.39 L1586.51 1210.39 L1585.93 1210.39 L1585.34 1210.39 L1584.75 1210.39 L1584.17 1210.39 L1583.58 1210.39 L1582.99 1210.39 L1582.41 1210.39 L1581.82 1210.39 L1581.23 1210.39 L1580.65 1210.39 L1580.06 1210.39 L1579.47 1210.39 L1578.89 1210.39 L1578.3 1210.39 L1577.72 1210.39 L1577.13 1210.39 L1576.54 1210.39 L1575.96 1210.39 L1575.37 1210.39 L1574.78 1210.39 L1574.2 1210.39 L1573.61 1210.39 L1573.02 1210.39 L1572.44 1210.39 L1571.85 1210.39 L1571.27 1210.39 L1570.68 1210.39 L1570.09 1210.39 L1569.51 1210.39 L1568.92 1210.39 L1568.33 1210.39 L1567.75 1210.39 L1567.16 1210.39 L1566.57 1210.39 L1565.99 1210.39 L1565.4 1210.39 L1564.81 1210.39 L1564.23 1210.39 L1563.64 1210.39 L1563.06 1210.39 L1562.47 1210.39 L1561.88 1210.39 L1561.3 1210.39 L1560.71 1210.39 L1560.12 1210.39 L1559.54 1210.39 L1558.95 1210.39 L1558.36 1210.39 L1557.78 1210.39 L1557.19 1210.39 L1556.6 1210.39 L1556.02 1210.39 L1555.43 1210.39 L1554.85 1210.39 L1554.26 1210.39 L1553.67 1210.39 L1553.09 1210.39 L1552.5 1210.39 L1551.91 1210.39 L1551.33 1210.39 L1550.74 1210.39 L1550.15 1210.39 L1549.57 1210.39 L1548.98 1210.39 L1548.4 1210.39 L1547.81 1210.39 L1547.22 1210.39 L1546.64 1210.39 L1546.05 1210.39 L1545.46 1210.39 L1544.88 1210.39 L1544.29 1210.39 L1543.7 1210.39 L1543.12 1210.39 L1542.53 1210.39 L1541.94 1210.39 L1541.36 1210.39 L1540.77 1210.39 L1540.19 1210.39 L1539.6 1210.39 L1539.01 1210.39 L1538.43 1210.39 L1537.84 1210.39 L1537.25 1210.39 L1536.67 1210.39 L1536.08 1210.39 L1535.49 1210.39 L1534.91 1210.39 L1534.32 1210.39 L1533.73 1210.39 L1533.15 1210.39 L1532.56 1210.39 L1531.98 1210.39 L1531.39 1210.39 L1530.8 1210.39 L1530.22 1210.39 L1529.63 1210.39 L1529.04 1210.39 L1528.46 1210.39 L1527.87 1210.39 L1527.28 1210.39 L1526.7 1210.39 L1526.11 1210.39 L1525.52 1210.39 L1524.94 1210.39 L1524.35 1210.39 L1523.77 1210.39 L1523.18 1210.39 L1522.59 1210.39 L1522.01 1210.39 L1521.42 1210.39 L1520.83 1210.39 L1520.25 1210.39 L1519.66 1210.39 L1519.07 1210.39 L1518.49 1210.39 L1517.9 1210.39 L1517.32 1210.39 L1516.73 1210.39 L1516.14 1210.39 L1515.56 1210.39 L1514.97 1210.39 L1514.38 1210.39 L1513.8 1210.39 L1513.21 1210.39 L1512.62 1210.39 L1512.04 1210.39 L1511.45 1210.39 L1510.86 1210.39 L1510.28 1210.39 L1509.69 1210.39 L1509.11 1210.39 L1508.52 1210.39 L1507.93 1210.39 L1507.35 1210.39 L1506.76 1210.39 L1506.17 1210.39 L1505.59 1210.39 L1505 1210.39 L1504.41 1210.39 L1503.83 1210.39 L1503.24 1210.39 L1502.65 1210.39 L1502.07 1210.39 L1501.48 1210.39 L1500.9 1210.39 L1500.31 1210.39 L1499.72 1210.39 L1499.14 1210.39 L1498.55 1210.39 L1497.96 1210.39 L1497.38 1210.39 L1496.79 1210.39 L1496.2 1210.39 L1495.62 1210.39 L1495.03 1210.39 L1494.45 1210.39 L1493.86 1210.39 L1493.27 1210.39 L1492.69 1210.39 L1492.1 1210.39 L1491.51 1210.39 L1490.93 1210.39 L1490.34 1210.39 L1489.75 1210.39 L1489.17 1210.39 L1488.58 1210.39 L1487.99 1210.39 L1487.41 1210.39 L1486.82 1210.39 L1486.24 1210.39 L1485.65 1210.39 L1485.06 1210.39 L1484.48 1210.39 L1483.89 1210.39 L1483.3 1210.39 L1482.72 1210.39 L1482.13 1210.39 L1481.54 1210.39 L1480.96 1210.39 L1480.37 1210.39 L1479.78 1210.39 L1479.2 1210.39 L1478.61 1210.39 L1478.03 1210.39 L1477.44 1210.39 L1476.85 1210.39 L1476.27 1210.39 L1475.68 1210.39 L1475.09 1210.39 L1474.51 1210.39 L1473.92 1210.39 L1473.33 1210.39 L1472.75 1210.39 L1472.16 1210.39 L1471.57 1210.39 L1470.99 1210.39 L1470.4 1210.39 L1469.82 1210.39 L1469.23 1210.39 L1468.64 1210.39 L1468.06 1210.39 L1467.47 1210.39 L1466.88 1210.39 L1466.3 1210.39 L1465.71 1210.39 L1465.12 1210.39 L1464.54 1210.39 L1463.95 1210.39 L1463.37 1210.39 L1462.78 1210.39 L1462.19 1210.39 L1461.61 1210.39 L1461.02 1210.39 L1460.43 1210.39 L1459.85 1210.39 L1459.26 1210.39 L1458.67 1210.39 L1458.09 1210.39 L1457.5 1210.39 L1456.91 1210.39 L1456.33 1210.39 L1455.74 1210.39 L1455.16 1210.39 L1454.57 1210.39 L1453.98 1210.39 L1453.4 1210.39 L1452.81 1210.39 L1452.22 1210.39 L1451.64 1210.39 L1451.05 1210.39 L1450.46 1210.39 L1449.88 1210.39 L1449.29 1210.39 L1448.7 1210.39 L1448.12 1210.39 L1447.53 1210.39 L1446.95 1210.39 L1446.36 1210.39 L1445.77 1210.39 L1445.19 1210.39 L1444.6 1210.39 L1444.01 1210.39 L1443.43 1210.39 L1442.84 1210.39 L1442.25 1210.39 L1441.67 1210.39 L1441.08 1210.39 L1440.5 1210.39 L1439.91 1210.39 L1439.32 1210.39 L1438.74 1210.39 L1438.15 1210.39 L1437.56 1210.39 L1436.98 1210.39 L1436.39 1210.39 L1435.8 1210.39 L1435.22 1210.39 L1434.63 1210.39 L1434.04 1210.39 L1433.46 1210.39 L1432.87 1210.39 L1432.29 1210.39 L1431.7 1210.39 L1431.11 1210.39 L1430.53 1210.39 L1429.94 1210.39 L1429.35 1210.39 L1428.77 1210.39 L1428.18 1210.39 L1427.59 1210.39 L1427.01 1210.39 L1426.42 1210.39 L1425.83 1210.39 L1425.25 1210.39 L1424.66 1210.39 L1424.08 1210.39 L1423.49 1210.39 L1422.9 1210.39 L1422.32 1210.39 L1421.73 1210.39 L1421.14 1210.39 L1420.56 1210.39 L1419.97 1210.39 L1419.38 1210.39 L1418.8 1210.39 L1418.21 1210.39 L1417.63 1210.39 L1417.04 1210.39 L1416.45 1210.39 L1415.87 1210.39 L1415.28 1210.39 L1414.69 1210.39 L1414.11 1210.39 L1413.52 1210.39 L1412.93 1210.39 L1412.35 1210.39 L1411.76 1210.39 L1411.17 1210.39 L1410.59 1210.39 L1410 1210.39 L1409.42 1210.39 L1408.83 1210.39 L1408.24 1210.39 L1407.66 1210.39 L1407.07 1210.39 L1406.48 1210.39 L1405.9 1210.39 L1405.31 1210.39 L1404.72 1210.39 L1404.14 1210.39 L1403.55 1210.39 L1402.96 1210.39 L1402.38 1210.39 L1401.79 1210.39 L1401.21 1210.39 L1400.62 1210.39 L1400.03 1210.39 L1399.45 1210.39 L1398.86 1210.39 L1398.27 1210.39 L1397.69 1210.39 L1397.1 1210.39 L1396.51 1210.39 L1395.93 1210.39 L1395.34 1210.39 L1394.75 1210.39 L1394.17 1210.39 L1393.58 1210.39 L1393 1210.39 L1392.41 1210.39 L1391.82 1210.39 L1391.24 1210.39 L1390.65 1210.39 L1390.06 1210.39 L1389.48 1210.39 L1388.89 1210.39 L1388.3 1210.39 L1387.72 1210.39 L1387.13 1210.39 L1386.55 1210.39 L1385.96 1210.39 L1385.37 1210.39 L1384.79 1210.39 L1384.2 1210.39 L1383.61 1210.39 L1383.03 1210.39 L1382.44 1210.39 L1381.85 1210.39 L1381.27 1210.39 L1380.68 1210.39 L1380.09 1210.39 L1379.51 1210.39 L1378.92 1210.39 L1378.34 1210.39 L1377.75 1210.39 L1377.16 1210.39 L1376.58 1210.39 L1375.99 1210.39 L1375.4 1210.39 L1374.82 1210.39 L1374.23 1210.39 L1373.64 1210.39 L1373.06 1210.39 L1372.47 1210.39 L1371.88 1210.39 L1371.3 1210.39 L1370.71 1210.39 L1370.13 1210.39 L1369.54 1210.39 L1368.95 1210.39 L1368.37 1210.39 L1367.78 1210.39 L1367.19 1210.39 L1366.61 1210.39 L1366.02 1210.39 L1365.43 1210.39 L1364.85 1210.39 L1364.26 1210.39 L1363.68 1210.39 L1363.09 1210.39 L1362.5 1210.39 L1361.92 1210.39 L1361.33 1210.39 L1360.74 1210.39 L1360.16 1210.39 L1359.57 1210.39 L1358.98 1210.39 L1358.4 1210.39 L1357.81 1210.39 L1357.22 1210.39 L1356.64 1210.39 L1356.05 1210.39 L1355.47 1210.39 L1354.88 1210.39 L1354.29 1210.39 L1353.71 1210.39 L1353.12 1210.39 L1352.53 1210.39 L1351.95 1210.39 L1351.36 1210.39 L1350.77 1210.39 L1350.19 1210.39 L1349.6 1210.39 L1349.01 1210.39 L1348.43 1210.39 L1347.84 1210.39 L1347.26 1210.39 L1346.67 1210.39 L1346.08 1210.39 L1345.5 1210.39 L1344.91 1210.39 L1344.32 1210.39 L1343.74 1210.39 L1343.15 1210.39 L1342.56 1210.39 L1341.98 1210.39 L1341.39 1210.39 L1340.8 1210.39 L1340.22 1210.39 L1339.63 1210.39 L1339.05 1210.39 L1338.46 1210.39 L1337.87 1210.39 L1337.29 1210.39 L1336.7 1210.39 L1336.11 1210.39 L1335.53 1210.39 L1334.94 1210.39 L1334.35 1210.39 L1333.77 1210.39 L1333.18 1210.39 L1332.6 1210.39 L1332.01 1210.39 L1331.42 1210.39 L1330.84 1210.39 L1330.25 1210.39 L1329.66 1210.39 L1329.08 1210.39 L1328.49 1210.39 L1327.9 1210.39 L1327.32 1210.39 L1326.73 1210.39 L1326.14 1210.39 L1325.56 1210.39 L1324.97 1210.39 L1324.39 1210.39 L1323.8 1210.39 L1323.21 1210.39 L1322.63 1210.39 L1322.04 1210.39 L1321.45 1210.39 L1320.87 1210.39 L1320.28 1210.39 L1319.69 1210.39 L1319.11 1210.39 L1318.52 1210.39 L1317.93 1210.39 L1317.35 1210.39 L1316.76 1210.39 L1316.18 1210.39 L1315.59 1210.39 L1315 1210.39 L1314.42 1210.39 L1313.83 1210.39 L1313.24 1210.39 L1312.66 1210.39 L1312.07 1210.39 L1311.48 1210.39 L1310.9 1210.39 L1310.31 1210.39 L1309.73 1210.39 L1309.14 1210.39 L1308.55 1210.39 L1307.97 1210.39 L1307.38 1210.39 L1306.79 1210.39 L1306.21 1210.39 L1305.62 1210.39 L1305.03 1210.39 L1304.45 1210.39 L1303.86 1210.39 L1303.27 1210.39 L1302.69 1210.39 L1302.1 1210.39 L1301.52 1210.39 L1300.93 1210.39 L1300.34 1210.39 L1299.76 1210.39 L1299.17 1210.39 L1298.58 1210.39 L1298 1210.39 L1297.41 1210.39 L1296.82 1210.39 L1296.24 1210.39 L1295.65 1210.39 L1295.06 1210.39 L1294.48 1210.39 L1293.89 1210.39 L1293.31 1210.39 L1292.72 1210.39 L1292.13 1210.39 L1291.55 1210.39 L1290.96 1210.39 L1290.37 1210.39 L1289.79 1210.39 L1289.2 1210.39 L1288.61 1210.39 L1288.03 1210.39 L1287.44 1210.39 L1286.86 1210.39 L1286.27 1210.39 L1285.68 1210.39 L1285.1 1210.39 L1284.51 1210.39 L1283.92 1210.39 L1283.34 1210.39 L1282.75 1210.39 L1282.16 1210.39 L1281.58 1210.39 L1280.99 1210.39 L1280.4 1210.39 L1279.82 1210.39 L1279.23 1210.39 L1278.65 1210.39 L1278.06 1210.39 L1277.47 1210.39 L1276.89 1210.39 L1276.3 1210.39 L1275.71 1210.39 L1275.13 1210.39 L1274.54 1210.39 L1273.95 1210.39 L1273.37 1210.39 L1272.78 1210.39 L1272.19 1210.39 L1271.61 1210.39 L1271.02 1210.39 L1270.44 1210.39 L1269.85 1210.39 L1269.26 1210.39 L1268.68 1210.39 L1268.09 1210.39 L1267.5 1210.39 L1266.92 1210.39 L1266.33 1210.39 L1265.74 1210.39 L1265.16 1210.39 L1264.57 1210.39 L1263.98 1210.39 L1263.4 1210.39 L1262.81 1210.39 L1262.23 1210.39 L1261.64 1210.39 L1261.05 1210.39 L1260.47 1210.39 L1259.88 1210.39 L1259.29 1210.39 L1258.71 1210.39 L1258.12 1210.39 L1257.53 1210.39 L1256.95 1210.39 L1256.36 1210.39 L1255.78 1210.39 L1255.19 1210.39 L1254.6 1210.39 L1254.02 1210.39 L1253.43 1210.39 L1252.84 1210.39 L1252.26 1210.39 L1251.67 1210.39 L1251.08 1210.39 L1250.5 1210.39 L1249.91 1210.39 L1249.32 1210.39 L1248.74 1210.39 L1248.15 1210.39 L1247.57 1210.39 L1246.98 1210.39 L1246.39 1210.39 L1245.81 1210.39 L1245.22 1210.39 L1244.63 1210.39 L1244.05 1210.39 L1243.46 1210.39 L1242.87 1210.39 L1242.29 1210.39 L1241.7 1210.39 L1241.11 1210.39 L1240.53 1210.39 L1239.94 1210.39 L1239.36 1210.39 L1238.77 1210.39 L1238.18 1210.39 L1237.6 1210.39 L1237.01 1210.39 L1236.42 1210.39 L1235.84 1210.39 L1235.25 1210.39 L1234.66 1210.39 L1234.08 1210.39 L1233.49 1210.39 L1232.91 1210.39 L1232.32 1210.39 L1231.73 1210.39 L1231.15 1210.39 L1230.56 1210.39 L1229.97 1210.39 L1229.39 1210.39 L1228.8 1210.39 L1228.21 1210.39 L1227.63 1210.39 L1227.04 1210.39 L1226.45 1210.39 L1225.87 1210.39 L1225.28 1210.39 L1224.7 1210.39 L1224.11 1210.39 L1223.52 1210.39 L1222.94 1210.39 L1222.35 1210.39 L1221.76 1210.39 L1221.18 1210.39 L1220.59 1210.39 L1220 1210.39 L1219.42 1210.39 L1218.83 1210.39 L1218.24 1210.39 L1217.66 1210.39 L1217.07 1210.39 L1216.49 1210.39 L1215.9 1210.39 L1215.31 1210.39 L1214.73 1210.39 L1214.14 1210.39 L1213.55 1210.39 L1212.97 1210.39 L1212.38 1210.39 L1211.79 1210.39 L1211.21 1210.39 L1210.62 1210.39 L1210.03 1210.39 L1209.45 1210.39 L1208.86 1210.39 L1208.28 1210.39 L1207.69 1210.39 L1207.1 1210.39 L1206.52 1210.39 L1205.93 1210.39 L1205.34 1210.39 L1204.76 1210.39 L1204.17 1210.39 L1203.58 1210.39 L1203 1210.39 L1202.41 1210.39 L1201.83 1210.39 L1201.24 1210.39 L1200.65 1210.39 L1200.07 1210.39 L1199.48 1210.39 L1198.89 1210.39 L1198.31 1210.39 L1197.72 1210.39 L1197.13 1210.39 L1196.55 1210.39 L1195.96 1210.39 L1195.37 1210.39 L1194.79 1210.39 L1194.2 1210.39 L1193.62 1210.39 L1193.03 1210.39 L1192.44 1210.39 L1191.86 1210.39 L1191.27 1210.39 L1190.68 1210.39 L1190.1 1210.39 L1189.51 1210.39 L1188.92 1210.39 L1188.34 1210.39 L1187.75 1210.39 L1187.16 1210.39 L1186.58 1210.39 L1185.99 1210.39 L1185.41 1210.39 L1184.82 1210.39 L1184.23 1210.39 L1183.65 1210.39 L1183.06 1210.39 L1182.47 1210.39 L1181.89 1210.39 L1181.3 1210.39 L1180.71 1210.39 L1180.13 1210.39 L1179.54 1210.39 L1178.96 1210.39 L1178.37 1210.39 L1177.78 1210.39 L1177.2 1210.39 L1176.61 1210.39 L1176.02 1210.39 L1175.44 1210.39 L1174.85 1210.39 L1174.26 1210.39 L1173.68 1210.39 L1173.09 1210.39 L1172.5 1210.39 L1171.92 1210.39 L1171.33 1210.39 L1170.75 1210.39 L1170.16 1210.39 L1169.57 1210.39 L1168.99 1210.39 L1168.4 1210.39 L1167.81 1210.39 L1167.23 1210.39 L1166.64 1210.39 L1166.05 1210.39 L1165.47 1210.39 L1164.88 1210.39 L1164.29 1210.39 L1163.71 1210.39 L1163.12 1210.39 L1162.54 1210.39 L1161.95 1210.39 L1161.36 1210.39 L1160.78 1210.39 L1160.19 1210.39 L1159.6 1210.39 L1159.02 1210.39 L1158.43 1210.39 L1157.84 1210.39 L1157.26 1210.39 L1156.67 1210.39 L1156.09 1210.39 L1155.5 1210.39 L1154.91 1210.39 L1154.33 1210.39 L1153.74 1210.39 L1153.15 1210.39 L1152.57 1210.39 L1151.98 1210.39 L1151.39 1210.39 L1150.81 1210.39 L1150.22 1210.39 L1149.63 1210.39 L1149.05 1210.39 L1148.46 1210.39 L1147.88 1210.39 L1147.29 1210.39 L1146.7 1210.39 L1146.12 1210.39 L1145.53 1210.39 L1144.94 1210.39 L1144.36 1210.39 L1143.77 1210.39 L1143.18 1210.39 L1142.6 1210.39 L1142.01 1210.39 L1141.42 1210.39 L1140.84 1210.39 L1140.25 1210.39 L1139.67 1210.39 L1139.08 1210.39 L1138.49 1210.39 L1137.91 1210.39 L1137.32 1210.39 L1136.73 1210.39 L1136.15 1210.39 L1135.56 1210.39 L1134.97 1210.39 L1134.39 1210.39 L1133.8 1210.39 L1133.21 1210.39 L1132.63 1210.39 L1132.04 1210.39 L1131.46 1210.39 L1130.87 1210.39 L1130.28 1210.39 L1129.7 1210.39 L1129.11 1210.39 L1128.52 1210.39 L1127.94 1210.39 L1127.35 1210.39 L1126.76 1210.39 L1126.18 1210.39 L1125.59 1210.39 L1125.01 1210.39 L1124.42 1210.39 L1123.83 1210.39 L1123.25 1210.39 L1122.66 1210.39 L1122.07 1210.39 L1121.49 1210.39 L1120.9 1210.39 L1120.31 1210.39 L1119.73 1210.39 L1119.14 1210.39 L1118.55 1210.39 L1117.97 1210.39 L1117.38 1210.39 L1116.8 1210.39 L1116.21 1210.39 L1115.62 1210.39 L1115.04 1210.39 L1114.45 1210.39 L1113.86 1210.39 L1113.28 1210.39 L1112.69 1210.39 L1112.1 1210.39 L1111.52 1210.39 L1110.93 1210.39 L1110.34 1210.39 L1109.76 1210.39 L1109.17 1210.39 L1108.59 1210.39 L1108 1210.39 L1107.41 1210.39 L1106.83 1210.39 L1106.24 1210.39 L1105.65 1210.39 L1105.07 1210.39 L1104.48 1210.39 L1103.89 1210.39 L1103.31 1210.39 L1102.72 1210.39 L1102.14 1210.39 L1101.55 1210.39 L1100.96 1210.39 L1100.38 1210.39 L1099.79 1210.39 L1099.2 1210.39 L1098.62 1210.39 L1098.03 1210.39 L1097.44 1210.39 L1096.86 1210.39 L1096.27 1210.39 L1095.68 1210.39 L1095.1 1210.39 L1094.51 1210.39 L1093.93 1210.39 L1093.34 1210.39 L1092.75 1210.39 L1092.17 1210.39 L1091.58 1210.39 L1090.99 1210.39 L1090.41 1210.39 L1089.82 1210.39 L1089.23 1210.39 L1088.65 1210.39 L1088.06 1210.39 L1087.47 1210.39 L1086.89 1210.39 L1086.3 1210.39 L1085.72 1210.39 L1085.13 1210.39 L1084.54 1210.39 L1083.96 1210.39 L1083.37 1210.39 L1082.78 1210.39 L1082.2 1210.39 L1081.61 1210.39 L1081.02 1210.39 L1080.44 1210.39 L1079.85 1210.39 L1079.26 1210.39 L1078.68 1210.39 L1078.09 1210.39 L1077.51 1210.39 L1076.92 1210.39 L1076.33 1210.39 L1075.75 1210.39 L1075.16 1210.39 L1074.57 1210.39 L1073.99 1210.39 L1073.4 1210.39 L1072.81 1210.39 L1072.23 1210.39 L1071.64 1210.39 L1071.06 1210.39 L1070.47 1210.39 L1069.88 1210.39 L1069.3 1210.39 L1068.71 1210.39 L1068.12 1210.39 L1067.54 1210.39 L1066.95 1210.39 L1066.36 1210.39 L1065.78 1210.39 L1065.19 1210.39 L1064.6 1210.39 L1064.02 1210.39 L1063.43 1210.39 L1062.85 1210.39 L1062.26 1210.39 L1061.67 1210.39 L1061.09 1210.39 L1060.5 1210.39 L1059.91 1210.39 L1059.33 1210.39 L1058.74 1210.39 L1058.15 1210.39 L1057.57 1210.39 L1056.98 1210.39 L1056.39 1210.39 L1055.81 1210.39 L1055.22 1210.39 L1054.64 1210.39 L1054.05 1210.39 L1053.46 1210.39 L1052.88 1210.39 L1052.29 1210.39 L1051.7 1210.39 L1051.12 1210.39 L1050.53 1210.39 L1049.94 1210.39 L1049.36 1210.39 L1048.77 1210.39 L1048.19 1210.39 L1047.6 1210.39 L1047.01 1210.39 L1046.43 1210.39 L1045.84 1210.39 L1045.25 1210.39 L1044.67 1210.39 L1044.08 1210.39 L1043.49 1210.39 L1042.91 1210.39 L1042.32 1210.39 L1041.73 1210.39 L1041.15 1210.39 L1040.56 1210.39 L1039.98 1210.39 L1039.39 1210.39 L1038.8 1210.39 L1038.22 1210.39 L1037.63 1210.39 L1037.04 1210.39 L1036.46 1210.39 L1035.87 1210.39 L1035.28 1210.39 L1034.7 1210.39 L1034.11 1210.39 L1033.52 1210.39 L1032.94 1210.39 L1032.35 1210.39 L1031.77 1210.39 L1031.18 1210.39 L1030.59 1210.39 L1030.01 1210.39 L1029.42 1210.39 L1028.83 1210.39 L1028.25 1210.39 L1027.66 1210.39 L1027.07 1210.39 L1026.49 1210.39 L1025.9 1210.39 L1025.32 1210.39 L1024.73 1210.39 L1024.14 1210.39 L1023.56 1210.39 L1022.97 1210.39 L1022.38 1210.39 L1021.8 1210.39 L1021.21 1210.39 L1020.62 1210.39 L1020.04 1210.39 L1019.45 1210.39 L1018.86 1210.39 L1018.28 1210.39 L1017.69 1210.39 L1017.11 1210.39 L1016.52 1210.39 L1015.93 1210.39 L1015.35 1210.39 L1014.76 1210.39 L1014.17 1210.39 L1013.59 1210.39 L1013 1210.39 L1012.41 1210.39 L1011.83 1210.39 L1011.24 1210.39 L1010.65 1210.39 L1010.07 1210.39 L1009.48 1210.39 L1008.9 1210.39 L1008.31 1210.39 L1007.72 1210.39 L1007.14 1210.39 L1006.55 1210.39 L1005.96 1210.39 L1005.38 1210.39 L1004.79 1210.39 L1004.2 1210.39 L1003.62 1210.39 L1003.03 1210.39 L1002.44 1210.39 L1001.86 1210.39 L1001.27 1210.39 L1000.69 1210.39 L1000.1 1210.39 L999.513 1210.39 L998.926 1210.39 L998.34 1210.39 L997.754 1210.39 L997.167 1210.39 L996.581 1210.39 L995.994 1210.39 L995.408 1210.39 L994.822 1210.39 L994.235 1210.39 L993.649 1210.39 L993.062 1210.39 L992.476 1210.39 L991.889 1210.39 L991.303 1210.39 L990.717 1210.39 L990.13 1210.39 L989.544 1210.39 L988.957 1210.39 L988.371 1210.39 L987.785 1210.39 L987.198 1210.39 L986.612 1210.39 L986.025 1210.39  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.68 986.612,1210.68 987.198,1210.68 987.785,1210.68 988.371,1210.68 988.957,1210.68 989.544,1210.68 990.13,1210.68 990.717,1210.68 991.303,1210.68 991.889,1210.68 992.476,1210.68 993.062,1210.68 993.649,1210.68 994.235,1210.68 994.822,1210.68 995.408,1210.68 995.994,1210.68 996.581,1210.68 997.167,1210.68 997.754,1210.68 998.34,1210.68 998.926,1210.68 999.513,1210.68 1000.1,1210.68 1000.69,1210.68 1001.27,1210.68 1001.86,1210.68 1002.44,1210.68 1003.03,1210.68 1003.62,1210.68 1004.2,1210.68 1004.79,1210.68 1005.38,1210.68 1005.96,1210.68 1006.55,1210.68 1007.14,1210.68 1007.72,1210.68 1008.31,1210.68 1008.9,1210.68 1009.48,1210.68 1010.07,1210.68 1010.65,1210.68 1011.24,1210.68 1011.83,1210.68 1012.41,1210.68 1013,1210.68 1013.59,1210.68 1014.17,1210.68 1014.76,1210.68 1015.35,1210.68 1015.93,1210.68 1016.52,1210.68 1017.11,1210.68 1017.69,1210.68 1018.28,1210.68 1018.86,1210.68 1019.45,1210.68 1020.04,1210.68 1020.62,1210.68 1021.21,1210.68 1021.8,1210.68 1022.38,1210.68 1022.97,1210.68 1023.56,1210.68 1024.14,1210.68 1024.73,1210.68 1025.32,1210.68 1025.9,1210.68 1026.49,1210.68 1027.07,1210.68 1027.66,1210.68 1028.25,1210.68 1028.83,1210.68 1029.42,1210.68 1030.01,1210.68 1030.59,1210.68 1031.18,1210.68 1031.77,1210.68 1032.35,1210.68 1032.94,1210.68 1033.52,1210.68 1034.11,1210.68 1034.7,1210.68 1035.28,1210.68 1035.87,1210.68 1036.46,1210.68 1037.04,1210.68 1037.63,1210.68 1038.22,1210.68 1038.8,1210.68 1039.39,1210.68 1039.98,1210.68 1040.56,1210.68 1041.15,1210.68 1041.73,1210.68 1042.32,1210.68 1042.91,1210.68 1043.49,1210.68 1044.08,1210.68 1044.67,1210.68 1045.25,1210.68 1045.84,1210.68 1046.43,1210.68 1047.01,1210.68 1047.6,1210.68 1048.19,1210.68 1048.77,1210.68 1049.36,1210.68 1049.94,1210.68 1050.53,1210.68 1051.12,1210.68 1051.7,1210.68 1052.29,1210.68 1052.88,1210.68 1053.46,1210.68 1054.05,1210.68 1054.64,1210.68 1055.22,1210.68 1055.81,1210.68 1056.39,1210.68 1056.98,1210.68 1057.57,1210.68 1058.15,1210.68 1058.74,1210.68 1059.33,1210.68 1059.91,1210.68 1060.5,1210.68 1061.09,1210.68 1061.67,1210.68 1062.26,1210.68 1062.85,1210.68 1063.43,1210.68 1064.02,1210.68 1064.6,1210.68 1065.19,1210.68 1065.78,1210.68 1066.36,1210.68 1066.95,1210.68 1067.54,1210.68 1068.12,1210.68 1068.71,1210.68 1069.3,1210.68 1069.88,1210.68 1070.47,1210.68 1071.06,1210.68 1071.64,1210.68 1072.23,1210.68 1072.81,1210.68 1073.4,1210.68 1073.99,1210.68 1074.57,1210.68 1075.16,1210.68 1075.75,1210.68 1076.33,1210.68 1076.92,1210.68 1077.51,1210.68 1078.09,1210.68 1078.68,1210.68 1079.26,1210.68 1079.85,1210.68 1080.44,1210.68 1081.02,1210.68 1081.61,1210.68 1082.2,1210.68 1082.78,1210.68 1083.37,1210.68 1083.96,1210.68 1084.54,1210.68 1085.13,1210.68 1085.72,1210.68 1086.3,1210.68 1086.89,1210.68 1087.47,1210.68 1088.06,1210.68 1088.65,1210.68 1089.23,1210.68 1089.82,1210.68 1090.41,1210.68 1090.99,1210.68 1091.58,1210.68 1092.17,1210.68 1092.75,1210.68 1093.34,1210.68 1093.93,1210.68 1094.51,1210.68 1095.1,1210.68 1095.68,1210.68 1096.27,1210.68 1096.86,1210.68 1097.44,1210.68 1098.03,1210.68 1098.62,1210.68 1099.2,1210.68 1099.79,1210.68 1100.38,1210.68 1100.96,1210.68 1101.55,1210.68 1102.14,1210.68 1102.72,1210.68 1103.31,1210.68 1103.89,1210.68 1104.48,1210.68 1105.07,1210.68 1105.65,1210.68 1106.24,1210.68 1106.83,1210.68 1107.41,1210.68 1108,1210.68 1108.59,1210.68 1109.17,1210.68 1109.76,1210.68 1110.34,1210.68 1110.93,1210.68 1111.52,1210.68 1112.1,1210.68 1112.69,1210.68 1113.28,1210.68 1113.86,1210.68 1114.45,1210.68 1115.04,1210.68 1115.62,1210.68 1116.21,1210.68 1116.8,1210.68 1117.38,1210.68 1117.97,1210.68 1118.55,1210.68 1119.14,1210.68 1119.73,1210.68 1120.31,1210.68 1120.9,1210.68 1121.49,1210.68 1122.07,1210.68 1122.66,1210.68 1123.25,1210.68 1123.83,1210.68 1124.42,1210.68 1125.01,1210.68 1125.59,1210.68 1126.18,1210.68 1126.76,1210.68 1127.35,1210.68 1127.94,1210.68 1128.52,1210.68 1129.11,1210.68 1129.7,1210.68 1130.28,1210.68 1130.87,1210.68 1131.46,1210.68 1132.04,1210.68 1132.63,1210.68 1133.21,1210.68 1133.8,1210.68 1134.39,1210.68 1134.97,1210.68 1135.56,1210.68 1136.15,1210.68 1136.73,1210.68 1137.32,1210.68 1137.91,1210.68 1138.49,1210.68 1139.08,1210.68 1139.67,1210.68 1140.25,1210.68 1140.84,1210.68 1141.42,1210.68 1142.01,1210.68 1142.6,1210.68 1143.18,1210.68 1143.77,1210.68 1144.36,1210.68 1144.94,1210.68 1145.53,1210.68 1146.12,1210.68 1146.7,1210.68 1147.29,1210.68 1147.88,1210.68 1148.46,1210.68 1149.05,1210.68 1149.63,1210.68 1150.22,1210.68 1150.81,1210.68 1151.39,1210.68 1151.98,1210.68 1152.57,1210.68 1153.15,1210.68 1153.74,1210.68 1154.33,1210.68 1154.91,1210.68 1155.5,1210.68 1156.09,1210.68 1156.67,1210.68 1157.26,1210.68 1157.84,1210.68 1158.43,1210.68 1159.02,1210.68 1159.6,1210.68 1160.19,1210.68 1160.78,1210.68 1161.36,1210.68 1161.95,1210.68 1162.54,1210.68 1163.12,1210.68 1163.71,1210.68 1164.29,1210.68 1164.88,1210.68 1165.47,1210.68 1166.05,1210.68 1166.64,1210.68 1167.23,1210.68 1167.81,1210.68 1168.4,1210.68 1168.99,1210.68 1169.57,1210.68 1170.16,1210.68 1170.75,1210.68 1171.33,1210.68 1171.92,1210.68 1172.5,1210.68 1173.09,1210.68 1173.68,1210.68 1174.26,1210.68 1174.85,1210.68 1175.44,1210.68 1176.02,1210.68 1176.61,1210.68 1177.2,1210.68 1177.78,1210.68 1178.37,1210.68 1178.96,1210.68 1179.54,1210.68 1180.13,1210.68 1180.71,1210.68 1181.3,1210.68 1181.89,1210.68 1182.47,1210.68 1183.06,1210.68 1183.65,1210.68 1184.23,1210.68 1184.82,1210.68 1185.41,1210.68 1185.99,1210.68 1186.58,1210.68 1187.16,1210.68 1187.75,1210.68 1188.34,1210.68 1188.92,1210.68 1189.51,1210.68 1190.1,1210.68 1190.68,1210.68 1191.27,1210.68 1191.86,1210.68 1192.44,1210.68 1193.03,1210.68 1193.62,1210.68 1194.2,1210.68 1194.79,1210.68 1195.37,1210.68 1195.96,1210.68 1196.55,1210.68 1197.13,1210.68 1197.72,1210.68 1198.31,1210.68 1198.89,1210.68 1199.48,1210.68 1200.07,1210.68 1200.65,1210.68 1201.24,1210.68 1201.83,1210.68 1202.41,1210.68 1203,1210.68 1203.58,1210.68 1204.17,1210.68 1204.76,1210.68 1205.34,1210.68 1205.93,1210.68 1206.52,1210.68 1207.1,1210.68 1207.69,1210.68 1208.28,1210.68 1208.86,1210.68 1209.45,1210.68 1210.03,1210.68 1210.62,1210.68 1211.21,1210.68 1211.79,1210.68 1212.38,1210.68 1212.97,1210.68 1213.55,1210.68 1214.14,1210.68 1214.73,1210.68 1215.31,1210.68 1215.9,1210.68 1216.49,1210.68 1217.07,1210.68 1217.66,1210.68 1218.24,1210.68 1218.83,1210.68 1219.42,1210.68 1220,1210.68 1220.59,1210.68 1221.18,1210.68 1221.76,1210.68 1222.35,1210.68 1222.94,1210.68 1223.52,1210.68 1224.11,1210.68 1224.7,1210.68 1225.28,1210.68 1225.87,1210.68 1226.45,1210.68 1227.04,1210.68 1227.63,1210.68 1228.21,1210.68 1228.8,1210.68 1229.39,1210.68 1229.97,1210.68 1230.56,1210.68 1231.15,1210.68 1231.73,1210.68 1232.32,1210.68 1232.91,1210.68 1233.49,1210.68 1234.08,1210.68 1234.66,1210.68 1235.25,1210.68 1235.84,1210.68 1236.42,1210.68 1237.01,1210.68 1237.6,1210.68 1238.18,1210.68 1238.77,1210.68 1239.36,1210.68 1239.94,1210.68 1240.53,1210.68 1241.11,1210.68 1241.7,1210.68 1242.29,1210.68 1242.87,1210.68 1243.46,1210.68 1244.05,1210.68 1244.63,1210.68 1245.22,1210.68 1245.81,1210.68 1246.39,1210.68 1246.98,1210.68 1247.57,1210.68 1248.15,1210.68 1248.74,1210.68 1249.32,1210.68 1249.91,1210.68 1250.5,1210.68 1251.08,1210.68 1251.67,1210.68 1252.26,1210.68 1252.84,1210.68 1253.43,1210.68 1254.02,1210.68 1254.6,1210.68 1255.19,1210.68 1255.78,1210.68 1256.36,1210.68 1256.95,1210.68 1257.53,1210.68 1258.12,1210.68 1258.71,1210.68 1259.29,1210.68 1259.88,1210.68 1260.47,1210.68 1261.05,1210.68 1261.64,1210.68 1262.23,1210.68 1262.81,1210.68 1263.4,1210.68 1263.98,1210.68 1264.57,1210.68 1265.16,1210.68 1265.74,1210.68 1266.33,1210.68 1266.92,1210.68 1267.5,1210.68 1268.09,1210.68 1268.68,1210.68 1269.26,1210.68 1269.85,1210.68 1270.44,1210.68 1271.02,1210.68 1271.61,1210.68 1272.19,1210.68 1272.78,1210.68 1273.37,1210.68 1273.95,1210.68 1274.54,1210.68 1275.13,1210.68 1275.71,1210.68 1276.3,1210.68 1276.89,1210.68 1277.47,1210.68 1278.06,1210.68 1278.65,1210.68 1279.23,1210.68 1279.82,1210.68 1280.4,1210.68 1280.99,1210.68 1281.58,1210.68 1282.16,1210.68 1282.75,1210.68 1283.34,1210.68 1283.92,1210.68 1284.51,1210.68 1285.1,1210.68 1285.68,1210.68 1286.27,1210.68 1286.86,1210.68 1287.44,1210.68 1288.03,1210.68 1288.61,1210.68 1289.2,1210.68 1289.79,1210.68 1290.37,1210.68 1290.96,1210.68 1291.55,1210.68 1292.13,1210.68 1292.72,1210.68 1293.31,1210.68 1293.89,1210.68 1294.48,1210.68 1295.06,1210.68 1295.65,1210.68 1296.24,1210.68 1296.82,1210.68 1297.41,1210.68 1298,1210.68 1298.58,1210.68 1299.17,1210.68 1299.76,1210.68 1300.34,1210.68 1300.93,1210.68 1301.52,1210.68 1302.1,1210.68 1302.69,1210.68 1303.27,1210.68 1303.86,1210.68 1304.45,1210.68 1305.03,1210.68 1305.62,1210.68 1306.21,1210.68 1306.79,1210.68 1307.38,1210.68 1307.97,1210.68 1308.55,1210.68 1309.14,1210.68 1309.73,1210.68 1310.31,1210.68 1310.9,1210.68 1311.48,1210.68 1312.07,1210.68 1312.66,1210.68 1313.24,1210.68 1313.83,1210.68 1314.42,1210.68 1315,1210.68 1315.59,1210.68 1316.18,1210.68 1316.76,1210.68 1317.35,1210.68 1317.93,1210.68 1318.52,1210.68 1319.11,1210.68 1319.69,1210.68 1320.28,1210.68 1320.87,1210.68 1321.45,1210.68 1322.04,1210.68 1322.63,1210.68 1323.21,1210.68 1323.8,1210.68 1324.39,1210.68 1324.97,1210.68 1325.56,1210.68 1326.14,1210.68 1326.73,1210.68 1327.32,1210.68 1327.9,1210.68 1328.49,1210.68 1329.08,1210.68 1329.66,1210.68 1330.25,1210.68 1330.84,1210.68 1331.42,1210.68 1332.01,1210.68 1332.6,1210.68 1333.18,1210.68 1333.77,1210.68 1334.35,1210.68 1334.94,1210.68 1335.53,1210.68 1336.11,1210.68 1336.7,1210.68 1337.29,1210.68 1337.87,1210.68 1338.46,1210.68 1339.05,1210.68 1339.63,1210.68 1340.22,1210.68 1340.8,1210.68 1341.39,1210.68 1341.98,1210.68 1342.56,1210.68 1343.15,1210.68 1343.74,1210.68 1344.32,1210.68 1344.91,1210.68 1345.5,1210.68 1346.08,1210.68 1346.67,1210.68 1347.26,1210.68 1347.84,1210.68 1348.43,1210.68 1349.01,1210.68 1349.6,1210.68 1350.19,1210.68 1350.77,1210.68 1351.36,1210.68 1351.95,1210.68 1352.53,1210.68 1353.12,1210.68 1353.71,1210.68 1354.29,1210.68 1354.88,1210.68 1355.47,1210.68 1356.05,1210.68 1356.64,1210.68 1357.22,1210.68 1357.81,1210.68 1358.4,1210.68 1358.98,1210.68 1359.57,1210.68 1360.16,1210.68 1360.74,1210.68 1361.33,1210.68 1361.92,1210.68 1362.5,1210.68 1363.09,1210.68 1363.68,1210.68 1364.26,1210.68 1364.85,1210.68 1365.43,1210.68 1366.02,1210.68 1366.61,1210.68 1367.19,1210.68 1367.78,1210.68 1368.37,1210.68 1368.95,1210.68 1369.54,1210.68 1370.13,1210.68 1370.71,1210.68 1371.3,1210.68 1371.88,1210.68 1372.47,1210.68 1373.06,1210.68 1373.64,1210.68 1374.23,1210.68 1374.82,1210.68 1375.4,1210.68 1375.99,1210.68 1376.58,1210.68 1377.16,1210.68 1377.75,1210.68 1378.34,1210.68 1378.92,1210.68 1379.51,1210.68 1380.09,1210.68 1380.68,1210.68 1381.27,1210.68 1381.85,1210.68 1382.44,1210.68 1383.03,1210.68 1383.61,1210.68 1384.2,1210.68 1384.79,1210.68 1385.37,1210.68 1385.96,1210.68 1386.55,1210.68 1387.13,1210.68 1387.72,1210.68 1388.3,1210.68 1388.89,1210.68 1389.48,1210.68 1390.06,1210.68 1390.65,1210.68 1391.24,1210.68 1391.82,1210.68 1392.41,1210.68 1393,1210.68 1393.58,1210.68 1394.17,1210.68 1394.75,1210.68 1395.34,1210.68 1395.93,1210.68 1396.51,1210.68 1397.1,1210.68 1397.69,1210.68 1398.27,1210.68 1398.86,1210.68 1399.45,1210.68 1400.03,1210.68 1400.62,1210.68 1401.21,1210.68 1401.79,1210.68 1402.38,1210.68 1402.96,1210.68 1403.55,1210.68 1404.14,1210.68 1404.72,1210.68 1405.31,1210.68 1405.9,1210.68 1406.48,1210.68 1407.07,1210.68 1407.66,1210.68 1408.24,1210.68 1408.83,1210.68 1409.42,1210.68 1410,1210.68 1410.59,1210.68 1411.17,1210.68 1411.76,1210.68 1412.35,1210.68 1412.93,1210.68 1413.52,1210.68 1414.11,1210.68 1414.69,1210.68 1415.28,1210.68 1415.87,1210.68 1416.45,1210.68 1417.04,1210.68 1417.63,1210.68 1418.21,1210.68 1418.8,1210.68 1419.38,1210.68 1419.97,1210.68 1420.56,1210.68 1421.14,1210.68 1421.73,1210.68 1422.32,1210.68 1422.9,1210.68 1423.49,1210.68 1424.08,1210.68 1424.66,1210.68 1425.25,1210.68 1425.83,1210.68 1426.42,1210.68 1427.01,1210.68 1427.59,1210.68 1428.18,1210.68 1428.77,1210.68 1429.35,1210.68 1429.94,1210.68 1430.53,1210.68 1431.11,1210.68 1431.7,1210.68 1432.29,1210.68 1432.87,1210.68 1433.46,1210.68 1434.04,1210.68 1434.63,1210.68 1435.22,1210.68 1435.8,1210.68 1436.39,1210.68 1436.98,1210.68 1437.56,1210.68 1438.15,1210.68 1438.74,1210.68 1439.32,1210.68 1439.91,1210.68 1440.5,1210.68 1441.08,1210.68 1441.67,1210.68 1442.25,1210.68 1442.84,1210.68 1443.43,1210.68 1444.01,1210.68 1444.6,1210.68 1445.19,1210.68 1445.77,1210.68 1446.36,1210.68 1446.95,1210.68 1447.53,1210.68 1448.12,1210.68 1448.7,1210.68 1449.29,1210.68 1449.88,1210.68 1450.46,1210.68 1451.05,1210.68 1451.64,1210.68 1452.22,1210.68 1452.81,1210.68 1453.4,1210.68 1453.98,1210.68 1454.57,1210.68 1455.16,1210.68 1455.74,1210.68 1456.33,1210.68 1456.91,1210.68 1457.5,1210.68 1458.09,1210.68 1458.67,1210.68 1459.26,1210.68 1459.85,1210.68 1460.43,1210.68 1461.02,1210.68 1461.61,1210.68 1462.19,1210.68 1462.78,1210.68 1463.37,1210.68 1463.95,1210.68 1464.54,1210.68 1465.12,1210.68 1465.71,1210.68 1466.3,1210.68 1466.88,1210.68 1467.47,1210.68 1468.06,1210.68 1468.64,1210.68 1469.23,1210.68 1469.82,1210.68 1470.4,1210.68 1470.99,1210.68 1471.57,1210.68 1472.16,1210.68 1472.75,1210.68 1473.33,1210.68 1473.92,1210.68 1474.51,1210.68 1475.09,1210.68 1475.68,1210.68 1476.27,1210.68 1476.85,1210.68 1477.44,1210.68 1478.03,1210.68 1478.61,1210.68 1479.2,1210.68 1479.78,1210.68 1480.37,1210.68 1480.96,1210.68 1481.54,1210.68 1482.13,1210.68 1482.72,1210.68 1483.3,1210.68 1483.89,1210.68 1484.48,1210.68 1485.06,1210.68 1485.65,1210.68 1486.24,1210.68 1486.82,1210.68 1487.41,1210.68 1487.99,1210.68 1488.58,1210.68 1489.17,1210.68 1489.75,1210.68 1490.34,1210.68 1490.93,1210.68 1491.51,1210.68 1492.1,1210.68 1492.69,1210.68 1493.27,1210.68 1493.86,1210.68 1494.45,1210.68 1495.03,1210.68 1495.62,1210.68 1496.2,1210.68 1496.79,1210.68 1497.38,1210.68 1497.96,1210.68 1498.55,1210.68 1499.14,1210.68 1499.72,1210.68 1500.31,1210.68 1500.9,1210.68 1501.48,1210.68 1502.07,1210.68 1502.65,1210.68 1503.24,1210.68 1503.83,1210.68 1504.41,1210.68 1505,1210.68 1505.59,1210.68 1506.17,1210.68 1506.76,1210.68 1507.35,1210.68 1507.93,1210.68 1508.52,1210.68 1509.11,1210.68 1509.69,1210.68 1510.28,1210.68 1510.86,1210.68 1511.45,1210.68 1512.04,1210.68 1512.62,1210.68 1513.21,1210.68 1513.8,1210.68 1514.38,1210.68 1514.97,1210.68 1515.56,1210.68 1516.14,1210.68 1516.73,1210.68 1517.32,1210.68 1517.9,1210.68 1518.49,1210.68 1519.07,1210.68 1519.66,1210.68 1520.25,1210.68 1520.83,1210.68 1521.42,1210.68 1522.01,1210.68 1522.59,1210.68 1523.18,1210.68 1523.77,1210.68 1524.35,1210.68 1524.94,1210.68 1525.52,1210.68 1526.11,1210.68 1526.7,1210.68 1527.28,1210.68 1527.87,1210.68 1528.46,1210.68 1529.04,1210.68 1529.63,1210.68 1530.22,1210.68 1530.8,1210.68 1531.39,1210.68 1531.98,1210.68 1532.56,1210.68 1533.15,1210.68 1533.73,1210.68 1534.32,1210.68 1534.91,1210.68 1535.49,1210.68 1536.08,1210.68 1536.67,1210.68 1537.25,1210.68 1537.84,1210.68 1538.43,1210.68 1539.01,1210.68 1539.6,1210.68 1540.19,1210.68 1540.77,1210.68 1541.36,1210.68 1541.94,1210.68 1542.53,1210.68 1543.12,1210.68 1543.7,1210.68 1544.29,1210.68 1544.88,1210.68 1545.46,1210.68 1546.05,1210.68 1546.64,1210.68 1547.22,1210.68 1547.81,1210.68 1548.4,1210.68 1548.98,1210.68 1549.57,1210.68 1550.15,1210.68 1550.74,1210.68 1551.33,1210.68 1551.91,1210.68 1552.5,1210.68 1553.09,1210.68 1553.67,1210.68 1554.26,1210.68 1554.85,1210.68 1555.43,1210.68 1556.02,1210.68 1556.6,1210.68 1557.19,1210.68 1557.78,1210.68 1558.36,1210.68 1558.95,1210.68 1559.54,1210.68 1560.12,1210.68 1560.71,1210.68 1561.3,1210.68 1561.88,1210.68 1562.47,1210.68 1563.06,1210.68 1563.64,1210.68 1564.23,1210.68 1564.81,1210.68 1565.4,1210.68 1565.99,1210.68 1566.57,1210.68 1567.16,1210.68 1567.75,1210.68 1568.33,1210.68 1568.92,1210.68 1569.51,1210.68 1570.09,1210.68 1570.68,1210.68 1571.27,1210.68 1571.85,1210.68 1572.44,1210.68 1573.02,1210.68 1573.61,1210.68 1574.2,1210.68 1574.78,1210.68 1575.37,1210.68 1575.96,1210.68 1576.54,1210.68 1577.13,1210.68 1577.72,1210.68 1578.3,1210.68 1578.89,1210.68 1579.47,1210.68 1580.06,1210.68 1580.65,1210.68 1581.23,1210.68 1581.82,1210.68 1582.41,1210.68 1582.99,1210.68 1583.58,1210.68 1584.17,1210.68 1584.75,1210.68 1585.34,1210.68 1585.93,1210.68 1586.51,1210.68 1587.1,1210.68 1587.68,1210.68 1588.27,1210.68 1588.86,1210.68 1589.44,1210.68 1590.03,1210.68 1590.62,1210.68 1591.2,1210.68 1591.79,1210.68 1592.38,1210.68 1592.96,1210.68 1593.55,1210.68 1594.14,1210.68 1594.72,1210.68 1595.31,1210.68 1595.89,1210.68 1596.48,1210.68 1597.07,1210.68 1597.65,1210.68 1598.24,1210.68 1598.83,1210.68 1599.41,1210.68 1600,1210.68 1600.59,1210.68 1601.17,1210.68 1601.76,1210.68 1602.34,1210.68 1602.93,1210.68 1603.52,1210.68 1604.1,1210.68 1604.69,1210.68 1605.28,1210.68 1605.86,1210.68 1606.45,1210.68 1607.04,1210.68 1607.62,1210.68 1608.21,1210.68 1608.8,1210.68 1609.38,1210.68 1609.97,1210.68 1610.55,1210.68 1611.14,1210.68 1611.73,1210.68 1612.31,1210.68 1612.9,1210.68 1613.49,1210.68 1614.07,1210.68 1614.66,1210.68 1615.25,1210.68 1615.83,1210.68 1616.42,1210.68 1617.01,1210.68 1617.59,1210.68 1618.18,1210.68 1618.76,1210.68 1619.35,1210.68 1619.94,1210.68 1620.52,1210.68 1621.11,1210.68 1621.7,1210.68 1622.28,1210.68 1622.87,1210.68 1623.46,1210.68 1624.04,1210.68 1624.63,1210.68 1625.22,1210.68 1625.8,1210.68 1626.39,1210.68 1626.97,1210.68 1627.56,1210.68 1628.15,1210.68 1628.73,1210.68 1629.32,1210.68 1629.91,1210.68 1630.49,1210.68 1631.08,1210.68 1631.67,1210.68 1632.25,1210.68 1632.84,1210.68 1633.42,1210.68 1634.01,1210.68 1634.6,1210.68 1635.18,1210.68 1635.77,1210.68 1636.36,1210.68 1636.94,1210.68 1637.53,1210.68 1638.12,1210.68 1638.7,1210.68 1639.29,1210.68 1639.88,1210.68 1640.46,1210.68 1641.05,1210.68 1641.63,1210.68 1642.22,1210.68 1642.81,1210.68 1643.39,1210.68 1643.98,1210.68 1644.57,1210.68 1645.15,1210.68 1645.74,1210.68 1646.33,1210.68 1646.91,1210.68 1647.5,1210.68 1648.09,1210.68 1648.67,1210.68 1649.26,1210.68 1649.84,1210.68 1650.43,1210.68 1651.02,1210.68 1651.6,1210.68 1652.19,1210.68 1652.78,1210.68 1653.36,1210.68 1653.95,1210.68 1654.54,1210.68 1655.12,1210.68 1655.71,1210.68 1656.29,1210.68 1656.88,1210.68 1657.47,1210.68 1658.05,1210.68 1658.64,1210.68 1659.23,1210.68 1659.81,1210.68 1660.4,1210.68 1660.99,1210.68 1661.57,1210.68 1662.16,1210.68 1662.75,1210.68 1663.33,1210.68 1663.92,1210.68 1664.5,1210.68 1665.09,1210.68 1665.68,1210.68 1666.26,1210.68 1666.85,1210.68 1667.44,1210.68 1668.02,1210.68 1668.61,1210.68 1669.2,1210.68 1669.78,1210.68 1670.37,1210.68 1670.96,1210.68 1671.54,1210.68 1672.13,1210.68 1672.71,1210.68 1673.3,1210.68 1673.89,1210.68 1674.47,1210.68 1675.06,1210.68 1675.65,1210.68 1676.23,1210.68 1676.82,1210.68 1677.41,1210.68 1677.99,1210.68 1678.58,1210.68 1679.17,1210.68 1679.75,1210.68 1680.34,1210.68 1680.92,1210.68 1681.51,1210.68 1682.1,1210.68 1682.68,1210.68 1683.27,1210.68 1683.86,1210.68 1684.44,1210.68 1685.03,1210.68 1685.62,1210.68 1686.2,1210.68 1686.79,1210.68 1687.37,1210.68 1687.96,1210.68 1688.55,1210.68 1689.13,1210.68 1689.72,1210.68 1690.31,1210.68 1690.89,1210.68 1691.48,1210.68 1692.07,1210.68 1692.65,1210.68 1693.24,1210.68 1693.83,1210.68 1694.41,1210.68 1695,1210.68 1695.58,1210.68 1696.17,1210.68 1696.76,1210.68 1697.34,1210.68 1697.93,1210.68 1698.52,1210.68 1699.1,1210.68 1699.69,1210.68 1700.28,1210.68 1700.86,1210.68 1701.45,1210.68 1702.04,1210.68 1702.62,1210.68 1703.21,1210.68 1703.79,1210.68 1704.38,1210.68 1704.97,1210.68 1705.55,1210.68 1706.14,1210.68 1706.73,1210.68 1707.31,1210.68 1707.9,1210.68 1708.49,1210.68 1709.07,1210.68 1709.66,1210.68 1710.24,1210.68 1710.83,1210.68 1711.42,1210.68 1712,1210.68 1712.59,1210.68 1713.18,1210.68 1713.76,1210.68 1714.35,1210.68 1714.94,1210.68 1715.52,1210.68 1716.11,1210.68 1716.7,1210.68 1717.28,1210.68 1717.87,1210.68 1718.45,1210.68 1719.04,1210.68 1719.63,1210.68 1720.21,1210.68 1720.8,1210.68 1721.39,1210.68 1721.97,1210.68 1722.56,1210.68 1723.15,1210.68 1723.73,1210.68 1724.32,1210.68 1724.91,1210.68 1725.49,1210.68 1726.08,1210.68 1726.66,1210.68 1727.25,1210.68 1727.84,1210.68 1728.42,1210.68 1729.01,1210.68 1729.6,1210.68 1730.18,1210.68 1730.77,1210.68 1731.36,1210.68 1731.94,1210.68 1732.53,1210.68 1733.11,1210.68 1733.7,1210.68 1734.29,1210.68 1734.87,1210.68 1735.46,1210.68 1736.05,1210.68 1736.63,1210.68 1737.22,1210.68 1737.81,1210.68 1738.39,1210.68 1738.98,1210.68 1739.57,1210.68 1740.15,1210.68 1740.74,1210.68 1741.32,1210.68 1741.91,1210.68 1742.5,1210.68 1743.08,1210.68 1743.67,1210.68 1744.26,1210.68 1744.84,1210.68 1745.43,1210.68 1746.02,1210.68 1746.6,1210.68 1747.19,1210.68 1747.78,1210.68 1748.36,1210.68 1748.95,1210.68 1749.53,1210.68 1750.12,1210.68 1750.71,1210.68 1751.29,1210.68 1751.88,1210.68 1752.47,1210.68 1753.05,1210.68 1753.64,1210.68 1754.23,1210.68 1754.81,1210.68 1755.4,1210.68 1755.99,1210.68 1756.57,1210.68 1757.16,1210.68 1757.74,1210.68 1758.33,1210.68 1758.92,1210.68 1759.5,1210.68 1760.09,1210.68 1760.68,1210.68 1761.26,1210.68 1761.85,1210.68 1762.44,1210.68 1763.02,1210.68 1763.61,1210.68 1764.19,1210.68 1764.78,1210.68 1765.37,1210.68 1765.95,1210.68 1766.54,1210.68 1767.13,1210.68 1767.71,1210.68 1768.3,1210.68 1768.89,1210.68 1769.47,1210.68 1770.06,1210.68 1770.65,1210.68 1771.23,1210.68 1771.82,1210.68 1772.4,1210.68 1772.99,1210.68 1773.58,1210.68 1774.16,1210.68 1774.75,1210.68 1775.34,1210.68 1775.92,1210.68 1776.51,1210.68 1777.1,1210.68 1777.68,1210.68 1778.27,1210.68 1778.86,1210.68 1779.44,1210.68 1780.03,1210.68 1780.61,1210.68 1781.2,1210.68 1781.79,1210.68 1782.37,1210.68 1782.96,1210.68 1783.55,1210.68 1784.13,1210.68 1784.72,1210.68 1785.31,1210.68 1785.89,1210.68 1786.48,1210.68 1787.06,1210.68 1787.65,1210.68 1788.24,1210.68 1788.82,1210.68 1789.41,1210.68 1790,1210.68 1790.58,1210.68 1791.17,1210.68 1791.76,1210.68 1792.34,1210.68 1792.93,1210.68 1793.52,1210.68 1794.1,1210.68 1794.69,1210.68 1795.27,1210.68 1795.86,1210.68 1796.45,1210.68 1797.03,1210.68 1797.62,1210.68 1798.21,1210.68 1798.79,1210.68 1799.38,1210.68 1799.97,1210.68 1800.55,1210.68 1801.14,1210.68 1801.73,1210.68 1802.31,1210.68 1802.9,1210.68 1803.48,1210.68 1804.07,1210.68 1804.66,1210.68 1805.24,1210.68 1805.83,1210.68 1806.42,1210.68 1807,1210.68 1807.59,1210.68 1808.18,1210.68 1808.76,1210.68 1809.35,1210.68 1809.94,1210.68 1810.52,1210.68 1811.11,1210.68 1811.69,1210.68 1812.28,1210.68 1812.87,1210.68 1813.45,1210.68 1814.04,1210.68 1814.63,1210.68 1815.21,1210.68 1815.8,1210.68 1816.39,1210.68 1816.97,1210.68 1817.56,1210.68 1818.14,1210.68 1818.73,1210.68 1819.32,1210.68 1819.9,1210.68 1820.49,1210.68 1821.08,1210.68 1821.66,1210.68 1822.25,1210.68 1822.84,1210.68 1823.42,1210.68 1824.01,1210.68 1824.6,1210.68 1825.18,1210.68 1825.77,1210.68 1826.35,1210.68 1826.94,1210.68 1827.53,1210.68 1828.11,1210.68 1828.7,1210.68 1829.29,1210.68 1829.87,1210.68 1830.46,1210.68 1831.05,1210.68 1831.63,1210.68 1832.22,1210.68 1832.81,1210.68 1833.39,1210.68 1833.98,1210.68 1834.56,1210.68 1835.15,1210.68 1835.74,1210.68 1836.32,1210.68 1836.91,1210.68 1837.5,1210.68 1838.08,1210.68 1838.67,1210.68 1839.26,1210.68 1839.84,1210.68 1840.43,1210.68 1841.01,1210.68 1841.6,1210.68 1842.19,1210.68 1842.77,1210.68 1843.36,1210.68 1843.95,1210.68 1844.53,1210.68 1845.12,1210.68 1845.71,1210.68 1846.29,1210.68 1846.88,1210.68 1847.47,1210.68 1848.05,1210.68 1848.64,1210.68 1849.22,1210.68 1849.81,1210.68 1850.4,1210.68 1850.98,1210.68 1851.57,1210.68 1852.16,1210.68 1852.74,1210.68 1853.33,1210.68 1853.92,1210.68 1854.5,1210.68 1855.09,1210.68 1855.68,1210.68 1856.26,1210.68 1856.85,1210.68 1857.43,1210.68 1858.02,1210.68 1858.61,1210.68 1859.19,1210.68 1859.78,1210.68 1860.37,1210.68 1860.95,1210.68 1861.54,1210.68 1862.13,1210.68 1862.71,1210.68 1863.3,1210.68 1863.88,1210.68 1864.47,1210.68 1865.06,1210.68 1865.64,1210.68 1866.23,1210.68 1866.82,1210.68 1867.4,1210.68 1867.99,1210.68 1868.58,1210.68 1869.16,1210.68 1869.75,1210.68 1870.34,1210.68 1870.92,1210.68 1871.51,1210.68 1872.09,1210.68 1872.68,1210.68 1873.27,1210.68 1873.85,1210.68 1874.44,1210.68 1875.03,1210.68 1875.61,1210.68 1876.2,1210.68 1876.79,1210.68 1877.37,1210.68 1877.96,1210.68 1878.55,1210.68 1879.13,1210.68 1879.72,1210.68 1880.3,1210.68 1880.89,1210.68 1881.48,1210.68 1882.06,1210.68 1882.65,1210.68 1883.24,1210.68 1883.82,1210.68 1884.41,1210.68 1885,1210.68 1885.58,1210.68 1886.17,1210.68 1886.76,1210.68 1887.34,1210.68 1887.93,1210.68 1888.51,1210.68 1889.1,1210.68 1889.69,1210.68 1890.27,1210.68 1890.86,1210.68 1891.45,1210.68 1892.03,1210.68 1892.62,1210.68 1893.21,1210.68 1893.79,1210.68 1894.38,1210.68 1894.96,1210.68 1895.55,1210.68 1896.14,1210.68 1896.72,1210.68 1897.31,1210.68 1897.9,1210.68 1898.48,1210.68 1899.07,1210.68 1899.66,1210.68 1900.24,1210.68 1900.83,1210.68 1901.42,1210.68 1902,1210.68 1902.59,1210.68 1903.17,1210.68 1903.76,1210.68 1904.35,1210.68 1904.93,1210.68 1905.52,1210.68 1906.11,1210.68 1906.69,1210.68 1907.28,1210.68 1907.87,1210.68 1908.45,1210.68 1909.04,1210.68 1909.63,1210.68 1910.21,1210.68 1910.8,1210.68 1911.38,1210.68 1911.97,1210.68 1912.56,1210.68 1913.14,1210.68 1913.73,1210.68 1914.32,1210.68 1914.9,1210.68 1915.49,1210.68 1916.08,1210.68 1916.66,1210.68 1917.25,1210.68 1917.83,1210.68 1918.42,1210.68 1919.01,1210.68 1919.59,1210.68 1920.18,1210.68 1920.77,1210.68 1921.35,1210.68 1921.94,1210.68 1922.53,1210.68 1923.11,1210.68 1923.7,1210.68 1924.29,1210.68 1924.87,1210.68 1925.46,1210.68 1926.04,1210.68 1926.63,1210.68 1927.22,1210.68 1927.8,1210.68 1928.39,1210.68 1928.98,1210.68 1929.56,1210.68 1930.15,1210.68 1930.74,1210.68 1931.32,1210.68 1931.91,1210.68 1932.5,1210.68 1933.08,1210.68 1933.67,1210.68 1934.25,1210.68 1934.84,1210.68 1935.43,1210.68 1936.01,1210.68 1936.6,1210.68 1937.19,1210.68 1937.77,1210.68 1938.36,1210.68 1938.95,1210.68 1939.53,1210.68 1940.12,1210.68 1940.71,1210.68 1941.29,1210.68 1941.88,1210.68 1942.46,1210.68 1943.05,1210.68 1943.64,1210.68 1944.22,1210.68 1944.81,1210.68 1945.4,1210.68 1945.98,1210.68 1946.57,1210.68 1947.16,1210.68 1947.74,1210.68 1948.33,1210.68 1948.91,1210.68 1949.5,1210.68 1950.09,1210.68 1950.67,1210.68 1951.26,1210.68 1951.85,1210.68 1952.43,1210.68 1953.02,1210.68 1953.61,1210.68 1954.19,1210.68 1954.78,1210.68 1955.37,1210.68 1955.95,1210.68 1956.54,1210.68 1957.12,1210.68 1957.71,1210.68 1958.3,1210.68 1958.88,1210.68 1959.47,1210.68 1960.06,1210.68 1960.64,1210.68 1961.23,1210.68 1961.82,1210.68 1962.4,1210.68 1962.99,1210.68 1963.58,1210.68 1964.16,1210.68 1964.75,1210.68 1965.33,1210.68 1965.92,1210.68 1966.51,1210.68 1967.09,1210.68 1967.68,1210.68 1968.27,1210.68 1968.85,1210.68 1969.44,1210.68 1970.03,1210.68 1970.61,1210.68 1971.2,1210.68 1971.78,1210.68 1972.37,1210.68 1972.96,1210.68 1973.54,1210.68 1974.13,1210.68 1974.72,1210.68 1975.3,1210.68 1975.89,1210.68 1976.48,1210.68 1977.06,1210.68 1977.65,1210.68 1978.24,1210.68 1978.82,1210.68 1979.41,1210.68 1979.99,1210.68 1980.58,1210.68 1981.17,1210.68 1981.75,1210.68 1982.34,1210.68 1982.93,1210.68 1983.51,1210.68 1984.1,1210.68 1984.69,1210.68 1985.27,1210.68 1985.86,1210.68 1986.45,1210.68 1987.03,1210.68 1987.62,1210.68 1988.2,1210.68 1988.79,1210.68 1989.38,1210.68 1989.96,1210.68 1990.55,1210.68 1991.14,1210.68 1991.72,1210.68 1992.31,1210.68 1992.9,1210.68 1993.48,1210.68 1994.07,1210.68 1994.65,1210.68 1995.24,1210.68 1995.83,1210.68 1996.41,1210.68 1997,1210.68 1997.59,1210.68 1998.17,1210.68 1998.76,1210.68 1999.35,1210.68 1999.93,1210.68 2000.52,1210.68 2001.11,1210.68 2001.69,1210.68 2002.28,1210.68 2002.86,1210.68 2003.45,1210.68 2004.04,1210.68 2004.62,1210.68 2005.21,1210.68 2005.8,1210.68 2006.38,1210.68 2006.97,1210.68 2007.56,1210.68 2008.14,1210.68 2008.73,1210.68 2009.32,1210.68 2009.9,1210.68 2010.49,1210.68 2011.07,1210.68 2011.66,1210.68 2012.25,1210.68 2012.83,1210.68 2013.42,1210.68 2014.01,1210.68 2014.59,1210.68 2015.18,1210.68 2015.77,1210.68 2016.35,1210.68 2016.94,1210.68 2017.53,1210.68 2018.11,1210.68 2018.7,1210.68 2019.28,1210.68 2019.87,1210.68 2020.46,1210.68 2021.04,1210.68 2021.63,1210.68 2022.22,1210.68 2022.8,1210.68 2023.39,1210.68 2023.98,1210.68 2024.56,1210.68 2025.15,1210.68 2025.73,1210.68 2026.32,1210.68 2026.91,1210.68 2027.49,1210.68 2028.08,1210.68 2028.67,1210.68 2029.25,1210.68 2029.84,1210.68 2030.43,1210.68 2031.01,1210.68 2031.6,1210.68 2032.19,1210.68 2032.77,1210.68 2033.36,1210.68 2033.94,1210.68 2034.53,1210.68 2035.12,1210.68 2035.7,1210.68 2036.29,1210.68 2036.88,1210.68 2037.46,1210.68 2038.05,1210.68 2038.64,1210.68 2039.22,1210.68 2039.81,1210.68 2040.4,1210.68 2040.98,1210.68 2041.57,1210.68 2042.15,1210.68 2042.74,1210.68 2043.33,1210.68 2043.91,1210.68 2044.5,1210.68 2045.09,1210.68 2045.67,1210.68 2046.26,1210.68 2046.85,1210.68 2047.43,1210.68 2048.02,1210.68 2048.6,1210.68 2049.19,1210.68 2049.78,1210.68 2050.36,1210.68 2050.95,1210.68 2051.54,1210.68 2052.12,1210.68 2052.71,1210.68 2053.3,1210.68 2053.88,1210.68 2054.47,1210.68 2055.06,1210.68 2055.64,1210.68 2056.23,1210.68 2056.81,1210.68 2057.4,1210.68 2057.99,1210.68 2058.57,1210.68 2059.16,1210.68 2059.75,1210.68 2060.33,1210.68 2060.92,1210.68 2061.51,1210.68 2062.09,1210.68 2062.68,1210.68 2063.27,1210.68 2063.85,1210.68 2064.44,1210.68 2065.02,1210.68 2065.61,1210.68 2066.2,1210.68 2066.78,1210.68 2067.37,1210.68 2067.96,1210.68 2068.54,1210.68 2069.13,1210.68 2069.72,1210.68 2070.3,1210.68 2070.89,1210.68 2071.48,1210.68 2072.06,1210.68 2072.65,1210.68 2073.23,1210.68 2073.82,1210.68 2074.41,1210.68 2074.99,1210.68 2075.58,1210.68 2076.17,1210.68 2076.75,1210.68 2077.34,1210.68 2077.93,1210.68 2078.51,1210.68 2079.1,1210.68 2079.68,1210.68 2080.27,1210.68 2080.86,1210.68 2081.44,1210.68 2082.03,1210.68 2082.62,1210.68 2083.2,1210.68 2083.79,1210.68 2084.38,1210.68 2084.96,1210.68 2085.55,1210.68 2086.14,1210.68 2086.72,1210.68 2087.31,1210.68 2087.89,1210.68 2088.48,1210.68 2089.07,1210.68 2089.65,1210.68 2090.24,1210.68 2090.83,1210.68 2091.41,1210.68 2092,1210.68 2092.59,1210.68 2093.17,1210.68 2093.76,1210.68 2094.35,1210.68 2094.93,1210.68 2095.52,1210.68 2096.1,1210.68 2096.69,1210.68 2097.28,1210.68 2097.86,1210.68 2098.45,1210.68 2099.04,1210.68 2099.62,1210.68 2100.21,1210.68 2100.8,1210.68 2101.38,1210.68 2101.97,1210.68 2102.55,1210.68 2103.14,1210.68 2103.73,1210.68 2104.31,1210.68 2104.9,1210.68 2105.49,1210.68 2106.07,1210.68 2106.66,1210.68 2107.25,1210.68 2107.83,1210.68 2108.42,1210.68 2109.01,1210.68 2109.59,1210.68 2110.18,1210.68 2110.76,1210.68 2111.35,1210.68 2111.94,1210.68 2112.52,1210.68 2113.11,1210.68 2113.7,1210.68 2114.28,1210.68 2114.87,1210.68 2115.46,1210.68 2116.04,1210.68 2116.63,1210.68 2117.22,1210.68 2117.8,1210.68 2118.39,1210.68 2118.97,1210.68 2119.56,1210.68 2120.15,1210.68 2120.73,1210.68 2121.32,1210.68 2121.91,1210.68 2122.49,1210.68 2123.08,1210.68 2123.67,1210.68 2124.25,1210.68 2124.84,1210.68 2125.42,1210.68 2126.01,1210.68 2126.6,1210.68 2127.18,1210.68 2127.77,1210.68 2128.36,1210.68 2128.94,1210.68 2129.53,1210.68 2130.12,1210.68 2130.7,1210.68 2131.29,1210.68 2131.88,1210.68 2132.46,1210.68 2133.05,1210.68 2133.63,1210.68 2134.22,1210.68 2134.81,1210.68 2135.39,1210.68 2135.98,1210.68 2136.57,1210.68 2137.15,1210.68 2137.74,1210.68 2138.33,1210.68 2138.91,1210.68 2139.5,1210.68 2140.09,1210.68 2140.67,1210.68 2141.26,1210.68 2141.84,1210.68 2142.43,1210.68 2143.02,1210.68 2143.6,1210.68 2144.19,1210.68 2144.78,1210.68 2145.36,1210.68 2145.95,1210.68 2146.54,1210.68 2147.12,1210.68 2147.71,1210.68 2148.3,1210.68 2148.88,1210.68 2149.47,1210.68 2150.05,1210.68 2150.64,1210.68 2151.23,1210.68 2151.81,1210.68 2152.4,1210.68 2152.99,1210.68 2153.57,1210.68 2154.16,1210.68 2154.75,1210.68 2155.33,1210.68 2155.92,1210.68 2156.5,1210.68 2157.09,1210.68 2157.68,1210.68 2158.26,1210.68 \"/>\n<path clip-path=\"url(#clip302)\" d=\"M986.025 1210.55 L986.612 1210.55 L987.198 1210.55 L987.785 1210.55 L988.371 1210.55 L988.957 1210.55 L989.544 1210.55 L990.13 1210.55 L990.717 1210.55 L991.303 1210.55 L991.889 1210.55 L992.476 1210.55 L993.062 1210.55 L993.649 1210.55 L994.235 1210.55 L994.822 1210.55 L995.408 1210.55 L995.994 1210.55 L996.581 1210.55 L997.167 1210.55 L997.754 1210.55 L998.34 1210.55 L998.926 1210.55 L999.513 1210.55 L1000.1 1210.55 L1000.69 1210.55 L1001.27 1210.55 L1001.86 1210.55 L1002.44 1210.55 L1003.03 1210.55 L1003.62 1210.55 L1004.2 1210.55 L1004.79 1210.55 L1005.38 1210.55 L1005.96 1210.55 L1006.55 1210.55 L1007.14 1210.55 L1007.72 1210.55 L1008.31 1210.55 L1008.9 1210.55 L1009.48 1210.55 L1010.07 1210.55 L1010.65 1210.55 L1011.24 1210.55 L1011.83 1210.55 L1012.41 1210.55 L1013 1210.55 L1013.59 1210.55 L1014.17 1210.55 L1014.76 1210.55 L1015.35 1210.55 L1015.93 1210.55 L1016.52 1210.55 L1017.11 1210.55 L1017.69 1210.55 L1018.28 1210.55 L1018.86 1210.55 L1019.45 1210.55 L1020.04 1210.55 L1020.62 1210.55 L1021.21 1210.55 L1021.8 1210.55 L1022.38 1210.55 L1022.97 1210.55 L1023.56 1210.55 L1024.14 1210.55 L1024.73 1210.55 L1025.32 1210.55 L1025.9 1210.55 L1026.49 1210.55 L1027.07 1210.55 L1027.66 1210.55 L1028.25 1210.55 L1028.83 1210.55 L1029.42 1210.55 L1030.01 1210.55 L1030.59 1210.55 L1031.18 1210.55 L1031.77 1210.55 L1032.35 1210.55 L1032.94 1210.55 L1033.52 1210.55 L1034.11 1210.55 L1034.7 1210.55 L1035.28 1210.55 L1035.87 1210.55 L1036.46 1210.55 L1037.04 1210.55 L1037.63 1210.55 L1038.22 1210.55 L1038.8 1210.55 L1039.39 1210.55 L1039.98 1210.55 L1040.56 1210.55 L1041.15 1210.55 L1041.73 1210.55 L1042.32 1210.55 L1042.91 1210.55 L1043.49 1210.55 L1044.08 1210.55 L1044.67 1210.55 L1045.25 1210.55 L1045.84 1210.55 L1046.43 1210.55 L1047.01 1210.55 L1047.6 1210.55 L1048.19 1210.55 L1048.77 1210.55 L1049.36 1210.55 L1049.94 1210.55 L1050.53 1210.55 L1051.12 1210.55 L1051.7 1210.55 L1052.29 1210.55 L1052.88 1210.55 L1053.46 1210.55 L1054.05 1210.55 L1054.64 1210.55 L1055.22 1210.55 L1055.81 1210.55 L1056.39 1210.55 L1056.98 1210.55 L1057.57 1210.55 L1058.15 1210.55 L1058.74 1210.55 L1059.33 1210.55 L1059.91 1210.55 L1060.5 1210.55 L1061.09 1210.55 L1061.67 1210.55 L1062.26 1210.55 L1062.85 1210.55 L1063.43 1210.55 L1064.02 1210.55 L1064.6 1210.55 L1065.19 1210.55 L1065.78 1210.55 L1066.36 1210.55 L1066.95 1210.55 L1067.54 1210.55 L1068.12 1210.55 L1068.71 1210.55 L1069.3 1210.55 L1069.88 1210.55 L1070.47 1210.55 L1071.06 1210.55 L1071.64 1210.55 L1072.23 1210.55 L1072.81 1210.55 L1073.4 1210.55 L1073.99 1210.55 L1074.57 1210.55 L1075.16 1210.55 L1075.75 1210.55 L1076.33 1210.55 L1076.92 1210.55 L1077.51 1210.55 L1078.09 1210.55 L1078.68 1210.55 L1079.26 1210.55 L1079.85 1210.55 L1080.44 1210.55 L1081.02 1210.55 L1081.61 1210.55 L1082.2 1210.55 L1082.78 1210.55 L1083.37 1210.55 L1083.96 1210.55 L1084.54 1210.55 L1085.13 1210.55 L1085.72 1210.55 L1086.3 1210.55 L1086.89 1210.55 L1087.47 1210.55 L1088.06 1210.55 L1088.65 1210.55 L1089.23 1210.55 L1089.82 1210.55 L1090.41 1210.55 L1090.99 1210.55 L1091.58 1210.55 L1092.17 1210.55 L1092.75 1210.55 L1093.34 1210.55 L1093.93 1210.55 L1094.51 1210.55 L1095.1 1210.55 L1095.68 1210.55 L1096.27 1210.55 L1096.86 1210.55 L1097.44 1210.55 L1098.03 1210.55 L1098.62 1210.55 L1099.2 1210.55 L1099.79 1210.55 L1100.38 1210.55 L1100.96 1210.55 L1101.55 1210.55 L1102.14 1210.55 L1102.72 1210.55 L1103.31 1210.55 L1103.89 1210.55 L1104.48 1210.55 L1105.07 1210.55 L1105.65 1210.55 L1106.24 1210.55 L1106.83 1210.55 L1107.41 1210.55 L1108 1210.55 L1108.59 1210.55 L1109.17 1210.55 L1109.76 1210.55 L1110.34 1210.55 L1110.93 1210.55 L1111.52 1210.55 L1112.1 1210.55 L1112.69 1210.55 L1113.28 1210.55 L1113.86 1210.55 L1114.45 1210.55 L1115.04 1210.55 L1115.62 1210.55 L1116.21 1210.55 L1116.8 1210.55 L1117.38 1210.55 L1117.97 1210.55 L1118.55 1210.55 L1119.14 1210.55 L1119.73 1210.55 L1120.31 1210.55 L1120.9 1210.55 L1121.49 1210.55 L1122.07 1210.55 L1122.66 1210.55 L1123.25 1210.55 L1123.83 1210.55 L1124.42 1210.55 L1125.01 1210.55 L1125.59 1210.55 L1126.18 1210.55 L1126.76 1210.55 L1127.35 1210.55 L1127.94 1210.55 L1128.52 1210.55 L1129.11 1210.55 L1129.7 1210.55 L1130.28 1210.55 L1130.87 1210.55 L1131.46 1210.55 L1132.04 1210.55 L1132.63 1210.55 L1133.21 1210.55 L1133.8 1210.55 L1134.39 1210.55 L1134.97 1210.55 L1135.56 1210.55 L1136.15 1210.55 L1136.73 1210.55 L1137.32 1210.55 L1137.91 1210.55 L1138.49 1210.55 L1139.08 1210.55 L1139.67 1210.55 L1140.25 1210.55 L1140.84 1210.55 L1141.42 1210.55 L1142.01 1210.55 L1142.6 1210.55 L1143.18 1210.55 L1143.77 1210.55 L1144.36 1210.55 L1144.94 1210.55 L1145.53 1210.55 L1146.12 1210.55 L1146.7 1210.55 L1147.29 1210.55 L1147.88 1210.55 L1148.46 1210.55 L1149.05 1210.55 L1149.63 1210.55 L1150.22 1210.55 L1150.81 1210.55 L1151.39 1210.55 L1151.98 1210.55 L1152.57 1210.55 L1153.15 1210.55 L1153.74 1210.55 L1154.33 1210.55 L1154.91 1210.55 L1155.5 1210.55 L1156.09 1210.55 L1156.67 1210.55 L1157.26 1210.55 L1157.84 1210.55 L1158.43 1210.55 L1159.02 1210.55 L1159.6 1210.55 L1160.19 1210.55 L1160.78 1210.55 L1161.36 1210.55 L1161.95 1210.55 L1162.54 1210.55 L1163.12 1210.55 L1163.71 1210.55 L1164.29 1210.55 L1164.88 1210.55 L1165.47 1210.55 L1166.05 1210.55 L1166.64 1210.55 L1167.23 1210.55 L1167.81 1210.55 L1168.4 1210.55 L1168.99 1210.55 L1169.57 1210.55 L1170.16 1210.55 L1170.75 1210.55 L1171.33 1210.55 L1171.92 1210.55 L1172.5 1210.55 L1173.09 1210.55 L1173.68 1210.55 L1174.26 1210.55 L1174.85 1210.55 L1175.44 1210.55 L1176.02 1210.55 L1176.61 1210.55 L1177.2 1210.55 L1177.78 1210.55 L1178.37 1210.55 L1178.96 1210.55 L1179.54 1210.55 L1180.13 1210.55 L1180.71 1210.55 L1181.3 1210.55 L1181.89 1210.55 L1182.47 1210.55 L1183.06 1210.55 L1183.65 1210.55 L1184.23 1210.55 L1184.82 1210.55 L1185.41 1210.55 L1185.99 1210.55 L1186.58 1210.55 L1187.16 1210.55 L1187.75 1210.55 L1188.34 1210.55 L1188.92 1210.55 L1189.51 1210.55 L1190.1 1210.55 L1190.68 1210.55 L1191.27 1210.55 L1191.86 1210.55 L1192.44 1210.55 L1193.03 1210.55 L1193.62 1210.55 L1194.2 1210.55 L1194.79 1210.55 L1195.37 1210.55 L1195.96 1210.55 L1196.55 1210.55 L1197.13 1210.55 L1197.72 1210.55 L1198.31 1210.55 L1198.89 1210.55 L1199.48 1210.55 L1200.07 1210.55 L1200.65 1210.55 L1201.24 1210.55 L1201.83 1210.55 L1202.41 1210.55 L1203 1210.55 L1203.58 1210.55 L1204.17 1210.55 L1204.76 1210.55 L1205.34 1210.55 L1205.93 1210.55 L1206.52 1210.55 L1207.1 1210.55 L1207.69 1210.55 L1208.28 1210.55 L1208.86 1210.55 L1209.45 1210.55 L1210.03 1210.55 L1210.62 1210.55 L1211.21 1210.55 L1211.79 1210.55 L1212.38 1210.55 L1212.97 1210.55 L1213.55 1210.55 L1214.14 1210.55 L1214.73 1210.55 L1215.31 1210.55 L1215.9 1210.55 L1216.49 1210.55 L1217.07 1210.55 L1217.66 1210.55 L1218.24 1210.55 L1218.83 1210.55 L1219.42 1210.55 L1220 1210.55 L1220.59 1210.55 L1221.18 1210.55 L1221.76 1210.55 L1222.35 1210.55 L1222.94 1210.55 L1223.52 1210.55 L1224.11 1210.55 L1224.7 1210.55 L1225.28 1210.55 L1225.87 1210.55 L1226.45 1210.55 L1227.04 1210.55 L1227.63 1210.55 L1228.21 1210.55 L1228.8 1210.55 L1229.39 1210.55 L1229.97 1210.55 L1230.56 1210.55 L1231.15 1210.55 L1231.73 1210.55 L1232.32 1210.55 L1232.91 1210.55 L1233.49 1210.55 L1234.08 1210.55 L1234.66 1210.55 L1235.25 1210.55 L1235.84 1210.55 L1236.42 1210.55 L1237.01 1210.55 L1237.6 1210.55 L1238.18 1210.55 L1238.77 1210.55 L1239.36 1210.55 L1239.94 1210.55 L1240.53 1210.55 L1241.11 1210.55 L1241.7 1210.55 L1242.29 1210.55 L1242.87 1210.55 L1243.46 1210.55 L1244.05 1210.55 L1244.63 1210.55 L1245.22 1210.55 L1245.81 1210.55 L1246.39 1210.55 L1246.98 1210.55 L1247.57 1210.55 L1248.15 1210.55 L1248.74 1210.55 L1249.32 1210.55 L1249.91 1210.55 L1250.5 1210.55 L1251.08 1210.55 L1251.67 1210.55 L1252.26 1210.55 L1252.84 1210.55 L1253.43 1210.55 L1254.02 1210.55 L1254.6 1210.55 L1255.19 1210.55 L1255.78 1210.55 L1256.36 1210.55 L1256.95 1210.55 L1257.53 1210.55 L1258.12 1210.55 L1258.71 1210.55 L1259.29 1210.55 L1259.88 1210.55 L1260.47 1210.55 L1261.05 1210.55 L1261.64 1210.55 L1262.23 1210.55 L1262.81 1210.55 L1263.4 1210.55 L1263.98 1210.55 L1264.57 1210.55 L1265.16 1210.55 L1265.74 1210.55 L1266.33 1210.55 L1266.92 1210.55 L1267.5 1210.55 L1268.09 1210.55 L1268.68 1210.55 L1269.26 1210.55 L1269.85 1210.55 L1270.44 1210.55 L1271.02 1210.55 L1271.61 1210.55 L1272.19 1210.55 L1272.78 1210.55 L1273.37 1210.55 L1273.95 1210.55 L1274.54 1210.55 L1275.13 1210.55 L1275.71 1210.55 L1276.3 1210.55 L1276.89 1210.55 L1277.47 1210.55 L1278.06 1210.55 L1278.65 1210.55 L1279.23 1210.55 L1279.82 1210.55 L1280.4 1210.55 L1280.99 1210.55 L1281.58 1210.55 L1282.16 1210.55 L1282.75 1210.55 L1283.34 1210.55 L1283.92 1210.55 L1284.51 1210.55 L1285.1 1210.55 L1285.68 1210.55 L1286.27 1210.55 L1286.86 1210.55 L1287.44 1210.55 L1288.03 1210.55 L1288.61 1210.55 L1289.2 1210.55 L1289.79 1210.55 L1290.37 1210.55 L1290.96 1210.55 L1291.55 1210.55 L1292.13 1210.55 L1292.72 1210.55 L1293.31 1210.55 L1293.89 1210.55 L1294.48 1210.55 L1295.06 1210.55 L1295.65 1210.55 L1296.24 1210.55 L1296.82 1210.55 L1297.41 1210.55 L1298 1210.55 L1298.58 1210.55 L1299.17 1210.55 L1299.76 1210.55 L1300.34 1210.55 L1300.93 1210.55 L1301.52 1210.55 L1302.1 1210.55 L1302.69 1210.55 L1303.27 1210.55 L1303.86 1210.55 L1304.45 1210.55 L1305.03 1210.55 L1305.62 1210.55 L1306.21 1210.55 L1306.79 1210.55 L1307.38 1210.55 L1307.97 1210.55 L1308.55 1210.55 L1309.14 1210.55 L1309.73 1210.55 L1310.31 1210.55 L1310.9 1210.55 L1311.48 1210.55 L1312.07 1210.55 L1312.66 1210.55 L1313.24 1210.55 L1313.83 1210.55 L1314.42 1210.55 L1315 1210.55 L1315.59 1210.55 L1316.18 1210.55 L1316.76 1210.55 L1317.35 1210.55 L1317.93 1210.55 L1318.52 1210.55 L1319.11 1210.55 L1319.69 1210.55 L1320.28 1210.55 L1320.87 1210.55 L1321.45 1210.55 L1322.04 1210.55 L1322.63 1210.55 L1323.21 1210.55 L1323.8 1210.55 L1324.39 1210.55 L1324.97 1210.55 L1325.56 1210.55 L1326.14 1210.55 L1326.73 1210.55 L1327.32 1210.55 L1327.9 1210.55 L1328.49 1210.55 L1329.08 1210.55 L1329.66 1210.55 L1330.25 1210.55 L1330.84 1210.55 L1331.42 1210.55 L1332.01 1210.55 L1332.6 1210.55 L1333.18 1210.55 L1333.77 1210.55 L1334.35 1210.55 L1334.94 1210.55 L1335.53 1210.55 L1336.11 1210.55 L1336.7 1210.55 L1337.29 1210.55 L1337.87 1210.55 L1338.46 1210.55 L1339.05 1210.55 L1339.63 1210.55 L1340.22 1210.55 L1340.8 1210.55 L1341.39 1210.55 L1341.98 1210.55 L1342.56 1210.55 L1343.15 1210.55 L1343.74 1210.55 L1344.32 1210.55 L1344.91 1210.55 L1345.5 1210.55 L1346.08 1210.55 L1346.67 1210.55 L1347.26 1210.55 L1347.84 1210.55 L1348.43 1210.55 L1349.01 1210.55 L1349.6 1210.55 L1350.19 1210.55 L1350.77 1210.55 L1351.36 1210.55 L1351.95 1210.55 L1352.53 1210.55 L1353.12 1210.55 L1353.71 1210.55 L1354.29 1210.55 L1354.88 1210.55 L1355.47 1210.55 L1356.05 1210.55 L1356.64 1210.55 L1357.22 1210.55 L1357.81 1210.55 L1358.4 1210.55 L1358.98 1210.55 L1359.57 1210.55 L1360.16 1210.55 L1360.74 1210.55 L1361.33 1210.55 L1361.92 1210.55 L1362.5 1210.55 L1363.09 1210.55 L1363.68 1210.55 L1364.26 1210.55 L1364.85 1210.55 L1365.43 1210.55 L1366.02 1210.55 L1366.61 1210.55 L1367.19 1210.55 L1367.78 1210.55 L1368.37 1210.55 L1368.95 1210.55 L1369.54 1210.55 L1370.13 1210.55 L1370.71 1210.55 L1371.3 1210.55 L1371.88 1210.55 L1372.47 1210.55 L1373.06 1210.55 L1373.64 1210.55 L1374.23 1210.55 L1374.82 1210.55 L1375.4 1210.55 L1375.99 1210.55 L1376.58 1210.55 L1377.16 1210.55 L1377.75 1210.55 L1378.34 1210.55 L1378.92 1210.55 L1379.51 1210.55 L1380.09 1210.55 L1380.68 1210.55 L1381.27 1210.55 L1381.85 1210.55 L1382.44 1210.55 L1383.03 1210.55 L1383.61 1210.55 L1384.2 1210.55 L1384.79 1210.55 L1385.37 1210.55 L1385.96 1210.55 L1386.55 1210.55 L1387.13 1210.55 L1387.72 1210.55 L1388.3 1210.55 L1388.89 1210.55 L1389.48 1210.55 L1390.06 1210.55 L1390.65 1210.55 L1391.24 1210.55 L1391.82 1210.55 L1392.41 1210.55 L1393 1210.55 L1393.58 1210.55 L1394.17 1210.55 L1394.75 1210.55 L1395.34 1210.55 L1395.93 1210.55 L1396.51 1210.55 L1397.1 1210.55 L1397.69 1210.55 L1398.27 1210.55 L1398.86 1210.55 L1399.45 1210.55 L1400.03 1210.55 L1400.62 1210.55 L1401.21 1210.55 L1401.79 1210.55 L1402.38 1210.55 L1402.96 1210.55 L1403.55 1210.55 L1404.14 1210.55 L1404.72 1210.55 L1405.31 1210.55 L1405.9 1210.55 L1406.48 1210.55 L1407.07 1210.55 L1407.66 1210.55 L1408.24 1210.55 L1408.83 1210.55 L1409.42 1210.55 L1410 1210.55 L1410.59 1210.55 L1411.17 1210.55 L1411.76 1210.55 L1412.35 1210.55 L1412.93 1210.55 L1413.52 1210.55 L1414.11 1210.55 L1414.69 1210.55 L1415.28 1210.55 L1415.87 1210.55 L1416.45 1210.55 L1417.04 1210.55 L1417.63 1210.55 L1418.21 1210.55 L1418.8 1210.55 L1419.38 1210.55 L1419.97 1210.55 L1420.56 1210.55 L1421.14 1210.55 L1421.73 1210.55 L1422.32 1210.55 L1422.9 1210.55 L1423.49 1210.55 L1424.08 1210.55 L1424.66 1210.55 L1425.25 1210.55 L1425.83 1210.55 L1426.42 1210.55 L1427.01 1210.55 L1427.59 1210.55 L1428.18 1210.55 L1428.77 1210.55 L1429.35 1210.55 L1429.94 1210.55 L1430.53 1210.55 L1431.11 1210.55 L1431.7 1210.55 L1432.29 1210.55 L1432.87 1210.55 L1433.46 1210.55 L1434.04 1210.55 L1434.63 1210.55 L1435.22 1210.55 L1435.8 1210.55 L1436.39 1210.55 L1436.98 1210.55 L1437.56 1210.55 L1438.15 1210.55 L1438.74 1210.55 L1439.32 1210.55 L1439.91 1210.55 L1440.5 1210.55 L1441.08 1210.55 L1441.67 1210.55 L1442.25 1210.55 L1442.84 1210.55 L1443.43 1210.55 L1444.01 1210.55 L1444.6 1210.55 L1445.19 1210.55 L1445.77 1210.55 L1446.36 1210.55 L1446.95 1210.55 L1447.53 1210.55 L1448.12 1210.55 L1448.7 1210.55 L1449.29 1210.55 L1449.88 1210.55 L1450.46 1210.55 L1451.05 1210.55 L1451.64 1210.55 L1452.22 1210.55 L1452.81 1210.55 L1453.4 1210.55 L1453.98 1210.55 L1454.57 1210.55 L1455.16 1210.55 L1455.74 1210.55 L1456.33 1210.55 L1456.91 1210.55 L1457.5 1210.55 L1458.09 1210.55 L1458.67 1210.55 L1459.26 1210.55 L1459.85 1210.55 L1460.43 1210.55 L1461.02 1210.55 L1461.61 1210.55 L1462.19 1210.55 L1462.78 1210.55 L1463.37 1210.55 L1463.95 1210.55 L1464.54 1210.55 L1465.12 1210.55 L1465.71 1210.55 L1466.3 1210.55 L1466.88 1210.55 L1467.47 1210.55 L1468.06 1210.55 L1468.64 1210.55 L1469.23 1210.55 L1469.82 1210.55 L1470.4 1210.55 L1470.99 1210.55 L1471.57 1210.55 L1472.16 1210.55 L1472.75 1210.55 L1473.33 1210.55 L1473.92 1210.55 L1474.51 1210.55 L1475.09 1210.55 L1475.68 1210.55 L1476.27 1210.55 L1476.85 1210.55 L1477.44 1210.55 L1478.03 1210.55 L1478.61 1210.55 L1479.2 1210.55 L1479.78 1210.55 L1480.37 1210.55 L1480.96 1210.55 L1481.54 1210.55 L1482.13 1210.55 L1482.72 1210.55 L1483.3 1210.55 L1483.89 1210.55 L1484.48 1210.55 L1485.06 1210.55 L1485.65 1210.55 L1486.24 1210.55 L1486.82 1210.55 L1487.41 1210.55 L1487.99 1210.55 L1488.58 1210.55 L1489.17 1210.55 L1489.75 1210.55 L1490.34 1210.55 L1490.93 1210.55 L1491.51 1210.55 L1492.1 1210.55 L1492.69 1210.55 L1493.27 1210.55 L1493.86 1210.55 L1494.45 1210.55 L1495.03 1210.55 L1495.62 1210.55 L1496.2 1210.55 L1496.79 1210.55 L1497.38 1210.55 L1497.96 1210.55 L1498.55 1210.55 L1499.14 1210.55 L1499.72 1210.55 L1500.31 1210.55 L1500.9 1210.55 L1501.48 1210.55 L1502.07 1210.55 L1502.65 1210.55 L1503.24 1210.55 L1503.83 1210.55 L1504.41 1210.55 L1505 1210.55 L1505.59 1210.55 L1506.17 1210.55 L1506.76 1210.55 L1507.35 1210.55 L1507.93 1210.55 L1508.52 1210.55 L1509.11 1210.55 L1509.69 1210.55 L1510.28 1210.55 L1510.86 1210.55 L1511.45 1210.55 L1512.04 1210.55 L1512.62 1210.55 L1513.21 1210.55 L1513.8 1210.55 L1514.38 1210.55 L1514.97 1210.55 L1515.56 1210.55 L1516.14 1210.55 L1516.73 1210.55 L1517.32 1210.55 L1517.9 1210.55 L1518.49 1210.55 L1519.07 1210.55 L1519.66 1210.55 L1520.25 1210.55 L1520.83 1210.55 L1521.42 1210.55 L1522.01 1210.55 L1522.59 1210.55 L1523.18 1210.55 L1523.77 1210.55 L1524.35 1210.55 L1524.94 1210.55 L1525.52 1210.55 L1526.11 1210.55 L1526.7 1210.55 L1527.28 1210.55 L1527.87 1210.55 L1528.46 1210.55 L1529.04 1210.55 L1529.63 1210.55 L1530.22 1210.55 L1530.8 1210.55 L1531.39 1210.55 L1531.98 1210.55 L1532.56 1210.55 L1533.15 1210.55 L1533.73 1210.55 L1534.32 1210.55 L1534.91 1210.55 L1535.49 1210.55 L1536.08 1210.55 L1536.67 1210.55 L1537.25 1210.55 L1537.84 1210.55 L1538.43 1210.55 L1539.01 1210.55 L1539.6 1210.55 L1540.19 1210.55 L1540.77 1210.55 L1541.36 1210.55 L1541.94 1210.55 L1542.53 1210.55 L1543.12 1210.55 L1543.7 1210.55 L1544.29 1210.55 L1544.88 1210.55 L1545.46 1210.55 L1546.05 1210.55 L1546.64 1210.55 L1547.22 1210.55 L1547.81 1210.55 L1548.4 1210.55 L1548.98 1210.55 L1549.57 1210.55 L1550.15 1210.55 L1550.74 1210.55 L1551.33 1210.55 L1551.91 1210.55 L1552.5 1210.55 L1553.09 1210.55 L1553.67 1210.55 L1554.26 1210.55 L1554.85 1210.55 L1555.43 1210.55 L1556.02 1210.55 L1556.6 1210.55 L1557.19 1210.55 L1557.78 1210.55 L1558.36 1210.55 L1558.95 1210.55 L1559.54 1210.55 L1560.12 1210.55 L1560.71 1210.55 L1561.3 1210.55 L1561.88 1210.55 L1562.47 1210.55 L1563.06 1210.55 L1563.64 1210.55 L1564.23 1210.55 L1564.81 1210.55 L1565.4 1210.55 L1565.99 1210.55 L1566.57 1210.55 L1567.16 1210.55 L1567.75 1210.55 L1568.33 1210.55 L1568.92 1210.55 L1569.51 1210.55 L1570.09 1210.55 L1570.68 1210.55 L1571.27 1210.55 L1571.85 1210.55 L1572.44 1210.55 L1573.02 1210.55 L1573.61 1210.55 L1574.2 1210.55 L1574.78 1210.55 L1575.37 1210.55 L1575.96 1210.55 L1576.54 1210.55 L1577.13 1210.55 L1577.72 1210.55 L1578.3 1210.55 L1578.89 1210.55 L1579.47 1210.55 L1580.06 1210.55 L1580.65 1210.55 L1581.23 1210.55 L1581.82 1210.55 L1582.41 1210.55 L1582.99 1210.55 L1583.58 1210.55 L1584.17 1210.55 L1584.75 1210.55 L1585.34 1210.55 L1585.93 1210.55 L1586.51 1210.55 L1587.1 1210.55 L1587.68 1210.55 L1588.27 1210.55 L1588.86 1210.55 L1589.44 1210.55 L1590.03 1210.55 L1590.62 1210.55 L1591.2 1210.55 L1591.79 1210.55 L1592.38 1210.55 L1592.96 1210.55 L1593.55 1210.55 L1594.14 1210.55 L1594.72 1210.55 L1595.31 1210.55 L1595.89 1210.55 L1596.48 1210.55 L1597.07 1210.55 L1597.65 1210.55 L1598.24 1210.55 L1598.83 1210.55 L1599.41 1210.55 L1600 1210.55 L1600.59 1210.55 L1601.17 1210.55 L1601.76 1210.55 L1602.34 1210.55 L1602.93 1210.55 L1603.52 1210.55 L1604.1 1210.55 L1604.69 1210.55 L1605.28 1210.55 L1605.86 1210.55 L1606.45 1210.55 L1607.04 1210.55 L1607.62 1210.55 L1608.21 1210.55 L1608.8 1210.55 L1609.38 1210.55 L1609.97 1210.55 L1610.55 1210.55 L1611.14 1210.55 L1611.73 1210.55 L1612.31 1210.55 L1612.9 1210.55 L1613.49 1210.55 L1614.07 1210.55 L1614.66 1210.55 L1615.25 1210.55 L1615.83 1210.55 L1616.42 1210.55 L1617.01 1210.55 L1617.59 1210.55 L1618.18 1210.55 L1618.76 1210.55 L1619.35 1210.55 L1619.94 1210.55 L1620.52 1210.55 L1621.11 1210.55 L1621.7 1210.55 L1622.28 1210.55 L1622.87 1210.55 L1623.46 1210.55 L1624.04 1210.55 L1624.63 1210.55 L1625.22 1210.55 L1625.8 1210.55 L1626.39 1210.55 L1626.97 1210.55 L1627.56 1210.55 L1628.15 1210.55 L1628.73 1210.55 L1629.32 1210.55 L1629.91 1210.55 L1630.49 1210.55 L1631.08 1210.55 L1631.67 1210.55 L1632.25 1210.55 L1632.84 1210.55 L1633.42 1210.55 L1634.01 1210.55 L1634.6 1210.55 L1635.18 1210.55 L1635.77 1210.55 L1636.36 1210.55 L1636.94 1210.55 L1637.53 1210.55 L1638.12 1210.55 L1638.7 1210.55 L1639.29 1210.55 L1639.88 1210.55 L1640.46 1210.55 L1641.05 1210.55 L1641.63 1210.55 L1642.22 1210.55 L1642.81 1210.55 L1643.39 1210.55 L1643.98 1210.55 L1644.57 1210.55 L1645.15 1210.55 L1645.74 1210.55 L1646.33 1210.55 L1646.91 1210.55 L1647.5 1210.55 L1648.09 1210.55 L1648.67 1210.55 L1649.26 1210.55 L1649.84 1210.55 L1650.43 1210.55 L1651.02 1210.55 L1651.6 1210.55 L1652.19 1210.55 L1652.78 1210.55 L1653.36 1210.55 L1653.95 1210.55 L1654.54 1210.55 L1655.12 1210.55 L1655.71 1210.55 L1656.29 1210.55 L1656.88 1210.55 L1657.47 1210.55 L1658.05 1210.55 L1658.64 1210.55 L1659.23 1210.55 L1659.81 1210.55 L1660.4 1210.55 L1660.99 1210.55 L1661.57 1210.55 L1662.16 1210.55 L1662.75 1210.55 L1663.33 1210.55 L1663.92 1210.55 L1664.5 1210.55 L1665.09 1210.55 L1665.68 1210.55 L1666.26 1210.55 L1666.85 1210.55 L1667.44 1210.55 L1668.02 1210.55 L1668.61 1210.55 L1669.2 1210.55 L1669.78 1210.55 L1670.37 1210.55 L1670.96 1210.55 L1671.54 1210.55 L1672.13 1210.55 L1672.71 1210.55 L1673.3 1210.55 L1673.89 1210.55 L1674.47 1210.55 L1675.06 1210.55 L1675.65 1210.55 L1676.23 1210.55 L1676.82 1210.55 L1677.41 1210.55 L1677.99 1210.55 L1678.58 1210.55 L1679.17 1210.55 L1679.75 1210.55 L1680.34 1210.55 L1680.92 1210.55 L1681.51 1210.55 L1682.1 1210.55 L1682.68 1210.55 L1683.27 1210.55 L1683.86 1210.55 L1684.44 1210.55 L1685.03 1210.55 L1685.62 1210.55 L1686.2 1210.55 L1686.79 1210.55 L1687.37 1210.55 L1687.96 1210.55 L1688.55 1210.55 L1689.13 1210.55 L1689.72 1210.55 L1690.31 1210.55 L1690.89 1210.55 L1691.48 1210.55 L1692.07 1210.55 L1692.65 1210.55 L1693.24 1210.55 L1693.83 1210.55 L1694.41 1210.55 L1695 1210.55 L1695.58 1210.55 L1696.17 1210.55 L1696.76 1210.55 L1697.34 1210.55 L1697.93 1210.55 L1698.52 1210.55 L1699.1 1210.55 L1699.69 1210.55 L1700.28 1210.55 L1700.86 1210.55 L1701.45 1210.55 L1702.04 1210.55 L1702.62 1210.55 L1703.21 1210.55 L1703.79 1210.55 L1704.38 1210.55 L1704.97 1210.55 L1705.55 1210.55 L1706.14 1210.55 L1706.73 1210.55 L1707.31 1210.55 L1707.9 1210.55 L1708.49 1210.55 L1709.07 1210.55 L1709.66 1210.55 L1710.24 1210.55 L1710.83 1210.55 L1711.42 1210.55 L1712 1210.55 L1712.59 1210.55 L1713.18 1210.55 L1713.76 1210.55 L1714.35 1210.55 L1714.94 1210.55 L1715.52 1210.55 L1716.11 1210.55 L1716.7 1210.55 L1717.28 1210.55 L1717.87 1210.55 L1718.45 1210.55 L1719.04 1210.55 L1719.63 1210.55 L1720.21 1210.55 L1720.8 1210.55 L1721.39 1210.55 L1721.97 1210.55 L1722.56 1210.55 L1723.15 1210.55 L1723.73 1210.55 L1724.32 1210.55 L1724.91 1210.55 L1725.49 1210.55 L1726.08 1210.55 L1726.66 1210.55 L1727.25 1210.55 L1727.84 1210.55 L1728.42 1210.55 L1729.01 1210.55 L1729.6 1210.55 L1730.18 1210.55 L1730.77 1210.55 L1731.36 1210.55 L1731.94 1210.55 L1732.53 1210.55 L1733.11 1210.55 L1733.7 1210.55 L1734.29 1210.55 L1734.87 1210.55 L1735.46 1210.55 L1736.05 1210.55 L1736.63 1210.55 L1737.22 1210.55 L1737.81 1210.55 L1738.39 1210.55 L1738.98 1210.55 L1739.57 1210.55 L1740.15 1210.55 L1740.74 1210.55 L1741.32 1210.55 L1741.91 1210.55 L1742.5 1210.55 L1743.08 1210.55 L1743.67 1210.55 L1744.26 1210.55 L1744.84 1210.55 L1745.43 1210.55 L1746.02 1210.55 L1746.6 1210.55 L1747.19 1210.55 L1747.78 1210.55 L1748.36 1210.55 L1748.95 1210.55 L1749.53 1210.55 L1750.12 1210.55 L1750.71 1210.55 L1751.29 1210.55 L1751.88 1210.55 L1752.47 1210.55 L1753.05 1210.55 L1753.64 1210.55 L1754.23 1210.55 L1754.81 1210.55 L1755.4 1210.55 L1755.99 1210.55 L1756.57 1210.55 L1757.16 1210.55 L1757.74 1210.55 L1758.33 1210.55 L1758.92 1210.55 L1759.5 1210.55 L1760.09 1210.55 L1760.68 1210.55 L1761.26 1210.55 L1761.85 1210.55 L1762.44 1210.55 L1763.02 1210.55 L1763.61 1210.55 L1764.19 1210.55 L1764.78 1210.55 L1765.37 1210.55 L1765.95 1210.55 L1766.54 1210.55 L1767.13 1210.55 L1767.71 1210.55 L1768.3 1210.55 L1768.89 1210.55 L1769.47 1210.55 L1770.06 1210.55 L1770.65 1210.55 L1771.23 1210.55 L1771.82 1210.55 L1772.4 1210.55 L1772.99 1210.55 L1773.58 1210.55 L1774.16 1210.55 L1774.75 1210.55 L1775.34 1210.55 L1775.92 1210.55 L1776.51 1210.55 L1777.1 1210.55 L1777.68 1210.55 L1778.27 1210.55 L1778.86 1210.55 L1779.44 1210.55 L1780.03 1210.55 L1780.61 1210.55 L1781.2 1210.55 L1781.79 1210.55 L1782.37 1210.55 L1782.96 1210.55 L1783.55 1210.55 L1784.13 1210.55 L1784.72 1210.55 L1785.31 1210.55 L1785.89 1210.55 L1786.48 1210.55 L1787.06 1210.55 L1787.65 1210.55 L1788.24 1210.55 L1788.82 1210.55 L1789.41 1210.55 L1790 1210.55 L1790.58 1210.55 L1791.17 1210.55 L1791.76 1210.55 L1792.34 1210.55 L1792.93 1210.55 L1793.52 1210.55 L1794.1 1210.55 L1794.69 1210.55 L1795.27 1210.55 L1795.86 1210.55 L1796.45 1210.55 L1797.03 1210.55 L1797.62 1210.55 L1798.21 1210.55 L1798.79 1210.55 L1799.38 1210.55 L1799.97 1210.55 L1800.55 1210.55 L1801.14 1210.55 L1801.73 1210.55 L1802.31 1210.55 L1802.9 1210.55 L1803.48 1210.55 L1804.07 1210.55 L1804.66 1210.55 L1805.24 1210.55 L1805.83 1210.55 L1806.42 1210.55 L1807 1210.55 L1807.59 1210.55 L1808.18 1210.55 L1808.76 1210.55 L1809.35 1210.55 L1809.94 1210.55 L1810.52 1210.55 L1811.11 1210.55 L1811.69 1210.55 L1812.28 1210.55 L1812.87 1210.55 L1813.45 1210.55 L1814.04 1210.55 L1814.63 1210.55 L1815.21 1210.55 L1815.8 1210.55 L1816.39 1210.55 L1816.97 1210.55 L1817.56 1210.55 L1818.14 1210.55 L1818.73 1210.55 L1819.32 1210.55 L1819.9 1210.55 L1820.49 1210.55 L1821.08 1210.55 L1821.66 1210.55 L1822.25 1210.55 L1822.84 1210.55 L1823.42 1210.55 L1824.01 1210.55 L1824.6 1210.55 L1825.18 1210.55 L1825.77 1210.55 L1826.35 1210.55 L1826.94 1210.55 L1827.53 1210.55 L1828.11 1210.55 L1828.7 1210.55 L1829.29 1210.55 L1829.87 1210.55 L1830.46 1210.55 L1831.05 1210.55 L1831.63 1210.55 L1832.22 1210.55 L1832.81 1210.55 L1833.39 1210.55 L1833.98 1210.55 L1834.56 1210.55 L1835.15 1210.55 L1835.74 1210.55 L1836.32 1210.55 L1836.91 1210.55 L1837.5 1210.55 L1838.08 1210.55 L1838.67 1210.55 L1839.26 1210.55 L1839.84 1210.55 L1840.43 1210.55 L1841.01 1210.55 L1841.6 1210.55 L1842.19 1210.55 L1842.77 1210.55 L1843.36 1210.55 L1843.95 1210.55 L1844.53 1210.55 L1845.12 1210.55 L1845.71 1210.55 L1846.29 1210.55 L1846.88 1210.55 L1847.47 1210.55 L1848.05 1210.55 L1848.64 1210.55 L1849.22 1210.55 L1849.81 1210.55 L1850.4 1210.55 L1850.98 1210.55 L1851.57 1210.55 L1852.16 1210.55 L1852.74 1210.55 L1853.33 1210.55 L1853.92 1210.55 L1854.5 1210.55 L1855.09 1210.55 L1855.68 1210.55 L1856.26 1210.55 L1856.85 1210.55 L1857.43 1210.55 L1858.02 1210.55 L1858.61 1210.55 L1859.19 1210.55 L1859.78 1210.55 L1860.37 1210.55 L1860.95 1210.55 L1861.54 1210.55 L1862.13 1210.55 L1862.71 1210.55 L1863.3 1210.55 L1863.88 1210.55 L1864.47 1210.55 L1865.06 1210.55 L1865.64 1210.55 L1866.23 1210.55 L1866.82 1210.55 L1867.4 1210.55 L1867.99 1210.55 L1868.58 1210.55 L1869.16 1210.55 L1869.75 1210.55 L1870.34 1210.55 L1870.92 1210.55 L1871.51 1210.55 L1872.09 1210.55 L1872.68 1210.55 L1873.27 1210.55 L1873.85 1210.55 L1874.44 1210.55 L1875.03 1210.55 L1875.61 1210.55 L1876.2 1210.55 L1876.79 1210.55 L1877.37 1210.55 L1877.96 1210.55 L1878.55 1210.55 L1879.13 1210.55 L1879.72 1210.55 L1880.3 1210.55 L1880.89 1210.55 L1881.48 1210.55 L1882.06 1210.55 L1882.65 1210.55 L1883.24 1210.55 L1883.82 1210.55 L1884.41 1210.55 L1885 1210.55 L1885.58 1210.55 L1886.17 1210.55 L1886.76 1210.55 L1887.34 1210.55 L1887.93 1210.55 L1888.51 1210.55 L1889.1 1210.55 L1889.69 1210.55 L1890.27 1210.55 L1890.86 1210.55 L1891.45 1210.55 L1892.03 1210.55 L1892.62 1210.55 L1893.21 1210.55 L1893.79 1210.55 L1894.38 1210.55 L1894.96 1210.55 L1895.55 1210.55 L1896.14 1210.55 L1896.72 1210.55 L1897.31 1210.55 L1897.9 1210.55 L1898.48 1210.55 L1899.07 1210.55 L1899.66 1210.55 L1900.24 1210.55 L1900.83 1210.55 L1901.42 1210.55 L1902 1210.55 L1902.59 1210.55 L1903.17 1210.55 L1903.76 1210.55 L1904.35 1210.55 L1904.93 1210.55 L1905.52 1210.55 L1906.11 1210.55 L1906.69 1210.55 L1907.28 1210.55 L1907.87 1210.55 L1908.45 1210.55 L1909.04 1210.55 L1909.63 1210.55 L1910.21 1210.55 L1910.8 1210.55 L1911.38 1210.55 L1911.97 1210.55 L1912.56 1210.55 L1913.14 1210.55 L1913.73 1210.55 L1914.32 1210.55 L1914.9 1210.55 L1915.49 1210.55 L1916.08 1210.55 L1916.66 1210.55 L1917.25 1210.55 L1917.83 1210.55 L1918.42 1210.55 L1919.01 1210.55 L1919.59 1210.55 L1920.18 1210.55 L1920.77 1210.55 L1921.35 1210.55 L1921.94 1210.55 L1922.53 1210.55 L1923.11 1210.55 L1923.7 1210.55 L1924.29 1210.55 L1924.87 1210.55 L1925.46 1210.55 L1926.04 1210.55 L1926.63 1210.55 L1927.22 1210.55 L1927.8 1210.55 L1928.39 1210.55 L1928.98 1210.55 L1929.56 1210.55 L1930.15 1210.55 L1930.74 1210.55 L1931.32 1210.55 L1931.91 1210.55 L1932.5 1210.55 L1933.08 1210.55 L1933.67 1210.55 L1934.25 1210.55 L1934.84 1210.55 L1935.43 1210.55 L1936.01 1210.55 L1936.6 1210.55 L1937.19 1210.55 L1937.77 1210.55 L1938.36 1210.55 L1938.95 1210.55 L1939.53 1210.55 L1940.12 1210.55 L1940.71 1210.55 L1941.29 1210.55 L1941.88 1210.55 L1942.46 1210.55 L1943.05 1210.55 L1943.64 1210.55 L1944.22 1210.55 L1944.81 1210.55 L1945.4 1210.55 L1945.98 1210.55 L1946.57 1210.55 L1947.16 1210.55 L1947.74 1210.55 L1948.33 1210.55 L1948.91 1210.55 L1949.5 1210.55 L1950.09 1210.55 L1950.67 1210.55 L1951.26 1210.55 L1951.85 1210.55 L1952.43 1210.55 L1953.02 1210.55 L1953.61 1210.55 L1954.19 1210.55 L1954.78 1210.55 L1955.37 1210.55 L1955.95 1210.55 L1956.54 1210.55 L1957.12 1210.55 L1957.71 1210.55 L1958.3 1210.55 L1958.88 1210.55 L1959.47 1210.55 L1960.06 1210.55 L1960.64 1210.55 L1961.23 1210.55 L1961.82 1210.55 L1962.4 1210.55 L1962.99 1210.55 L1963.58 1210.55 L1964.16 1210.55 L1964.75 1210.55 L1965.33 1210.55 L1965.92 1210.55 L1966.51 1210.55 L1967.09 1210.55 L1967.68 1210.55 L1968.27 1210.55 L1968.85 1210.55 L1969.44 1210.55 L1970.03 1210.55 L1970.61 1210.55 L1971.2 1210.55 L1971.78 1210.55 L1972.37 1210.55 L1972.96 1210.55 L1973.54 1210.55 L1974.13 1210.55 L1974.72 1210.55 L1975.3 1210.55 L1975.89 1210.55 L1976.48 1210.55 L1977.06 1210.55 L1977.65 1210.55 L1978.24 1210.55 L1978.82 1210.55 L1979.41 1210.55 L1979.99 1210.55 L1980.58 1210.55 L1981.17 1210.55 L1981.75 1210.55 L1982.34 1210.55 L1982.93 1210.55 L1983.51 1210.55 L1984.1 1210.55 L1984.69 1210.55 L1985.27 1210.55 L1985.86 1210.55 L1986.45 1210.55 L1987.03 1210.55 L1987.62 1210.55 L1988.2 1210.55 L1988.79 1210.55 L1989.38 1210.55 L1989.96 1210.55 L1990.55 1210.55 L1991.14 1210.55 L1991.72 1210.55 L1992.31 1210.55 L1992.9 1210.55 L1993.48 1210.55 L1994.07 1210.55 L1994.65 1210.55 L1995.24 1210.55 L1995.83 1210.55 L1996.41 1210.55 L1997 1210.55 L1997.59 1210.55 L1998.17 1210.55 L1998.76 1210.55 L1999.35 1210.55 L1999.93 1210.55 L2000.52 1210.55 L2001.11 1210.55 L2001.69 1210.55 L2002.28 1210.55 L2002.86 1210.55 L2003.45 1210.55 L2004.04 1210.55 L2004.62 1210.55 L2005.21 1210.55 L2005.8 1210.55 L2006.38 1210.55 L2006.97 1210.55 L2007.56 1210.55 L2008.14 1210.55 L2008.73 1210.55 L2009.32 1210.55 L2009.9 1210.55 L2010.49 1210.55 L2011.07 1210.55 L2011.66 1210.55 L2012.25 1210.55 L2012.83 1210.55 L2013.42 1210.55 L2014.01 1210.55 L2014.59 1210.55 L2015.18 1210.55 L2015.77 1210.55 L2016.35 1210.55 L2016.94 1210.55 L2017.53 1210.55 L2018.11 1210.55 L2018.7 1210.55 L2019.28 1210.55 L2019.87 1210.55 L2020.46 1210.55 L2021.04 1210.55 L2021.63 1210.55 L2022.22 1210.55 L2022.8 1210.55 L2023.39 1210.55 L2023.98 1210.55 L2024.56 1210.55 L2025.15 1210.55 L2025.73 1210.55 L2026.32 1210.55 L2026.91 1210.55 L2027.49 1210.55 L2028.08 1210.55 L2028.67 1210.55 L2029.25 1210.55 L2029.84 1210.55 L2030.43 1210.55 L2031.01 1210.55 L2031.6 1210.55 L2032.19 1210.55 L2032.77 1210.55 L2033.36 1210.55 L2033.94 1210.55 L2034.53 1210.55 L2035.12 1210.55 L2035.7 1210.55 L2036.29 1210.55 L2036.88 1210.55 L2037.46 1210.55 L2038.05 1210.55 L2038.64 1210.55 L2039.22 1210.55 L2039.81 1210.55 L2040.4 1210.55 L2040.98 1210.55 L2041.57 1210.55 L2042.15 1210.55 L2042.74 1210.55 L2043.33 1210.55 L2043.91 1210.55 L2044.5 1210.55 L2045.09 1210.55 L2045.67 1210.55 L2046.26 1210.55 L2046.85 1210.55 L2047.43 1210.55 L2048.02 1210.55 L2048.6 1210.55 L2049.19 1210.55 L2049.78 1210.55 L2050.36 1210.55 L2050.95 1210.55 L2051.54 1210.55 L2052.12 1210.55 L2052.71 1210.55 L2053.3 1210.55 L2053.88 1210.55 L2054.47 1210.55 L2055.06 1210.55 L2055.64 1210.55 L2056.23 1210.55 L2056.81 1210.55 L2057.4 1210.55 L2057.99 1210.55 L2058.57 1210.55 L2059.16 1210.55 L2059.75 1210.55 L2060.33 1210.55 L2060.92 1210.55 L2061.51 1210.55 L2062.09 1210.55 L2062.68 1210.55 L2063.27 1210.55 L2063.85 1210.55 L2064.44 1210.55 L2065.02 1210.55 L2065.61 1210.55 L2066.2 1210.55 L2066.78 1210.55 L2067.37 1210.55 L2067.96 1210.55 L2068.54 1210.55 L2069.13 1210.55 L2069.72 1210.55 L2070.3 1210.55 L2070.89 1210.55 L2071.48 1210.55 L2072.06 1210.55 L2072.65 1210.55 L2073.23 1210.55 L2073.82 1210.55 L2074.41 1210.55 L2074.99 1210.55 L2075.58 1210.55 L2076.17 1210.55 L2076.75 1210.55 L2077.34 1210.55 L2077.93 1210.55 L2078.51 1210.55 L2079.1 1210.55 L2079.68 1210.55 L2080.27 1210.55 L2080.86 1210.55 L2081.44 1210.55 L2082.03 1210.55 L2082.62 1210.55 L2083.2 1210.55 L2083.79 1210.55 L2084.38 1210.55 L2084.96 1210.55 L2085.55 1210.55 L2086.14 1210.55 L2086.72 1210.55 L2087.31 1210.55 L2087.89 1210.55 L2088.48 1210.55 L2089.07 1210.55 L2089.65 1210.55 L2090.24 1210.55 L2090.83 1210.55 L2091.41 1210.55 L2092 1210.55 L2092.59 1210.55 L2093.17 1210.55 L2093.76 1210.55 L2094.35 1210.55 L2094.93 1210.55 L2095.52 1210.55 L2096.1 1210.55 L2096.69 1210.55 L2097.28 1210.55 L2097.86 1210.55 L2098.45 1210.55 L2099.04 1210.55 L2099.62 1210.55 L2100.21 1210.55 L2100.8 1210.55 L2101.38 1210.55 L2101.97 1210.55 L2102.55 1210.55 L2103.14 1210.55 L2103.73 1210.55 L2104.31 1210.55 L2104.9 1210.55 L2105.49 1210.55 L2106.07 1210.55 L2106.66 1210.55 L2107.25 1210.55 L2107.83 1210.55 L2108.42 1210.55 L2109.01 1210.55 L2109.59 1210.55 L2110.18 1210.55 L2110.76 1210.55 L2111.35 1210.55 L2111.94 1210.55 L2112.52 1210.55 L2113.11 1210.55 L2113.7 1210.55 L2114.28 1210.55 L2114.87 1210.55 L2115.46 1210.55 L2116.04 1210.55 L2116.63 1210.55 L2117.22 1210.55 L2117.8 1210.55 L2118.39 1210.55 L2118.97 1210.55 L2119.56 1210.55 L2120.15 1210.55 L2120.73 1210.55 L2121.32 1210.55 L2121.91 1210.55 L2122.49 1210.55 L2123.08 1210.55 L2123.67 1210.55 L2124.25 1210.55 L2124.84 1210.55 L2125.42 1210.55 L2126.01 1210.55 L2126.6 1210.55 L2127.18 1210.55 L2127.77 1210.55 L2128.36 1210.55 L2128.94 1210.55 L2129.53 1210.55 L2130.12 1210.55 L2130.7 1210.55 L2131.29 1210.55 L2131.88 1210.55 L2132.46 1210.55 L2133.05 1210.55 L2133.63 1210.55 L2134.22 1210.55 L2134.81 1210.55 L2135.39 1210.55 L2135.98 1210.55 L2136.57 1210.55 L2137.15 1210.55 L2137.74 1210.55 L2138.33 1210.55 L2138.91 1210.55 L2139.5 1210.55 L2140.09 1210.55 L2140.67 1210.55 L2141.26 1210.55 L2141.84 1210.55 L2142.43 1210.55 L2143.02 1210.55 L2143.6 1210.55 L2144.19 1210.55 L2144.78 1210.55 L2145.36 1210.55 L2145.95 1210.55 L2146.54 1210.55 L2147.12 1210.55 L2147.71 1210.55 L2148.3 1210.55 L2148.88 1210.55 L2149.47 1210.55 L2150.05 1210.55 L2150.64 1210.55 L2151.23 1210.55 L2151.81 1210.55 L2152.4 1210.55 L2152.99 1210.55 L2153.57 1210.55 L2154.16 1210.55 L2154.75 1210.55 L2155.33 1210.55 L2155.92 1210.55 L2156.5 1210.55 L2157.09 1210.55 L2157.68 1210.55 L2158.26 1210.55 L2158.26 1210.32 L2157.68 1210.32 L2157.09 1210.32 L2156.5 1210.32 L2155.92 1210.32 L2155.33 1210.32 L2154.75 1210.32 L2154.16 1210.32 L2153.57 1210.32 L2152.99 1210.32 L2152.4 1210.32 L2151.81 1210.32 L2151.23 1210.32 L2150.64 1210.32 L2150.05 1210.32 L2149.47 1210.32 L2148.88 1210.32 L2148.3 1210.32 L2147.71 1210.32 L2147.12 1210.32 L2146.54 1210.32 L2145.95 1210.32 L2145.36 1210.32 L2144.78 1210.32 L2144.19 1210.32 L2143.6 1210.32 L2143.02 1210.32 L2142.43 1210.32 L2141.84 1210.32 L2141.26 1210.32 L2140.67 1210.32 L2140.09 1210.32 L2139.5 1210.32 L2138.91 1210.32 L2138.33 1210.32 L2137.74 1210.32 L2137.15 1210.32 L2136.57 1210.32 L2135.98 1210.32 L2135.39 1210.32 L2134.81 1210.32 L2134.22 1210.32 L2133.63 1210.32 L2133.05 1210.32 L2132.46 1210.32 L2131.88 1210.32 L2131.29 1210.32 L2130.7 1210.32 L2130.12 1210.32 L2129.53 1210.32 L2128.94 1210.32 L2128.36 1210.32 L2127.77 1210.32 L2127.18 1210.32 L2126.6 1210.32 L2126.01 1210.32 L2125.42 1210.32 L2124.84 1210.32 L2124.25 1210.32 L2123.67 1210.32 L2123.08 1210.32 L2122.49 1210.32 L2121.91 1210.32 L2121.32 1210.32 L2120.73 1210.32 L2120.15 1210.32 L2119.56 1210.32 L2118.97 1210.32 L2118.39 1210.32 L2117.8 1210.32 L2117.22 1210.32 L2116.63 1210.32 L2116.04 1210.32 L2115.46 1210.32 L2114.87 1210.32 L2114.28 1210.32 L2113.7 1210.32 L2113.11 1210.32 L2112.52 1210.32 L2111.94 1210.32 L2111.35 1210.32 L2110.76 1210.32 L2110.18 1210.32 L2109.59 1210.32 L2109.01 1210.32 L2108.42 1210.32 L2107.83 1210.32 L2107.25 1210.32 L2106.66 1210.32 L2106.07 1210.32 L2105.49 1210.32 L2104.9 1210.32 L2104.31 1210.32 L2103.73 1210.32 L2103.14 1210.32 L2102.55 1210.32 L2101.97 1210.32 L2101.38 1210.32 L2100.8 1210.32 L2100.21 1210.32 L2099.62 1210.32 L2099.04 1210.32 L2098.45 1210.32 L2097.86 1210.32 L2097.28 1210.32 L2096.69 1210.32 L2096.1 1210.32 L2095.52 1210.32 L2094.93 1210.32 L2094.35 1210.32 L2093.76 1210.32 L2093.17 1210.32 L2092.59 1210.32 L2092 1210.32 L2091.41 1210.32 L2090.83 1210.32 L2090.24 1210.32 L2089.65 1210.32 L2089.07 1210.32 L2088.48 1210.32 L2087.89 1210.32 L2087.31 1210.32 L2086.72 1210.32 L2086.14 1210.32 L2085.55 1210.32 L2084.96 1210.32 L2084.38 1210.32 L2083.79 1210.32 L2083.2 1210.32 L2082.62 1210.32 L2082.03 1210.32 L2081.44 1210.32 L2080.86 1210.32 L2080.27 1210.32 L2079.68 1210.32 L2079.1 1210.32 L2078.51 1210.32 L2077.93 1210.32 L2077.34 1210.32 L2076.75 1210.32 L2076.17 1210.32 L2075.58 1210.32 L2074.99 1210.32 L2074.41 1210.32 L2073.82 1210.32 L2073.23 1210.32 L2072.65 1210.32 L2072.06 1210.32 L2071.48 1210.32 L2070.89 1210.32 L2070.3 1210.32 L2069.72 1210.32 L2069.13 1210.32 L2068.54 1210.32 L2067.96 1210.32 L2067.37 1210.32 L2066.78 1210.32 L2066.2 1210.32 L2065.61 1210.32 L2065.02 1210.32 L2064.44 1210.32 L2063.85 1210.32 L2063.27 1210.32 L2062.68 1210.32 L2062.09 1210.32 L2061.51 1210.32 L2060.92 1210.32 L2060.33 1210.32 L2059.75 1210.32 L2059.16 1210.32 L2058.57 1210.32 L2057.99 1210.32 L2057.4 1210.32 L2056.81 1210.32 L2056.23 1210.32 L2055.64 1210.32 L2055.06 1210.32 L2054.47 1210.32 L2053.88 1210.32 L2053.3 1210.32 L2052.71 1210.32 L2052.12 1210.32 L2051.54 1210.32 L2050.95 1210.32 L2050.36 1210.32 L2049.78 1210.32 L2049.19 1210.32 L2048.6 1210.32 L2048.02 1210.32 L2047.43 1210.32 L2046.85 1210.32 L2046.26 1210.32 L2045.67 1210.32 L2045.09 1210.32 L2044.5 1210.32 L2043.91 1210.32 L2043.33 1210.32 L2042.74 1210.32 L2042.15 1210.32 L2041.57 1210.32 L2040.98 1210.32 L2040.4 1210.32 L2039.81 1210.32 L2039.22 1210.32 L2038.64 1210.32 L2038.05 1210.32 L2037.46 1210.32 L2036.88 1210.32 L2036.29 1210.32 L2035.7 1210.32 L2035.12 1210.32 L2034.53 1210.32 L2033.94 1210.32 L2033.36 1210.32 L2032.77 1210.32 L2032.19 1210.32 L2031.6 1210.32 L2031.01 1210.32 L2030.43 1210.32 L2029.84 1210.32 L2029.25 1210.32 L2028.67 1210.32 L2028.08 1210.32 L2027.49 1210.32 L2026.91 1210.32 L2026.32 1210.32 L2025.73 1210.32 L2025.15 1210.32 L2024.56 1210.32 L2023.98 1210.32 L2023.39 1210.32 L2022.8 1210.32 L2022.22 1210.32 L2021.63 1210.32 L2021.04 1210.32 L2020.46 1210.32 L2019.87 1210.32 L2019.28 1210.32 L2018.7 1210.32 L2018.11 1210.32 L2017.53 1210.32 L2016.94 1210.32 L2016.35 1210.32 L2015.77 1210.32 L2015.18 1210.32 L2014.59 1210.32 L2014.01 1210.32 L2013.42 1210.32 L2012.83 1210.32 L2012.25 1210.32 L2011.66 1210.32 L2011.07 1210.32 L2010.49 1210.32 L2009.9 1210.32 L2009.32 1210.32 L2008.73 1210.32 L2008.14 1210.32 L2007.56 1210.32 L2006.97 1210.32 L2006.38 1210.32 L2005.8 1210.32 L2005.21 1210.32 L2004.62 1210.32 L2004.04 1210.32 L2003.45 1210.32 L2002.86 1210.32 L2002.28 1210.32 L2001.69 1210.32 L2001.11 1210.32 L2000.52 1210.32 L1999.93 1210.32 L1999.35 1210.32 L1998.76 1210.32 L1998.17 1210.32 L1997.59 1210.32 L1997 1210.32 L1996.41 1210.32 L1995.83 1210.32 L1995.24 1210.32 L1994.65 1210.32 L1994.07 1210.32 L1993.48 1210.32 L1992.9 1210.32 L1992.31 1210.32 L1991.72 1210.32 L1991.14 1210.32 L1990.55 1210.32 L1989.96 1210.32 L1989.38 1210.32 L1988.79 1210.32 L1988.2 1210.32 L1987.62 1210.32 L1987.03 1210.32 L1986.45 1210.32 L1985.86 1210.32 L1985.27 1210.32 L1984.69 1210.32 L1984.1 1210.32 L1983.51 1210.32 L1982.93 1210.32 L1982.34 1210.32 L1981.75 1210.32 L1981.17 1210.32 L1980.58 1210.32 L1979.99 1210.32 L1979.41 1210.32 L1978.82 1210.32 L1978.24 1210.32 L1977.65 1210.32 L1977.06 1210.32 L1976.48 1210.32 L1975.89 1210.32 L1975.3 1210.32 L1974.72 1210.32 L1974.13 1210.32 L1973.54 1210.32 L1972.96 1210.32 L1972.37 1210.32 L1971.78 1210.32 L1971.2 1210.32 L1970.61 1210.32 L1970.03 1210.32 L1969.44 1210.32 L1968.85 1210.32 L1968.27 1210.32 L1967.68 1210.32 L1967.09 1210.32 L1966.51 1210.32 L1965.92 1210.32 L1965.33 1210.32 L1964.75 1210.32 L1964.16 1210.32 L1963.58 1210.32 L1962.99 1210.32 L1962.4 1210.32 L1961.82 1210.32 L1961.23 1210.32 L1960.64 1210.32 L1960.06 1210.32 L1959.47 1210.32 L1958.88 1210.32 L1958.3 1210.32 L1957.71 1210.32 L1957.12 1210.32 L1956.54 1210.32 L1955.95 1210.32 L1955.37 1210.32 L1954.78 1210.32 L1954.19 1210.32 L1953.61 1210.32 L1953.02 1210.32 L1952.43 1210.32 L1951.85 1210.32 L1951.26 1210.32 L1950.67 1210.32 L1950.09 1210.32 L1949.5 1210.32 L1948.91 1210.32 L1948.33 1210.32 L1947.74 1210.32 L1947.16 1210.32 L1946.57 1210.32 L1945.98 1210.32 L1945.4 1210.32 L1944.81 1210.32 L1944.22 1210.32 L1943.64 1210.32 L1943.05 1210.32 L1942.46 1210.32 L1941.88 1210.32 L1941.29 1210.32 L1940.71 1210.32 L1940.12 1210.32 L1939.53 1210.32 L1938.95 1210.32 L1938.36 1210.32 L1937.77 1210.32 L1937.19 1210.32 L1936.6 1210.32 L1936.01 1210.32 L1935.43 1210.32 L1934.84 1210.32 L1934.25 1210.32 L1933.67 1210.32 L1933.08 1210.32 L1932.5 1210.32 L1931.91 1210.32 L1931.32 1210.32 L1930.74 1210.32 L1930.15 1210.32 L1929.56 1210.32 L1928.98 1210.32 L1928.39 1210.32 L1927.8 1210.32 L1927.22 1210.32 L1926.63 1210.32 L1926.04 1210.32 L1925.46 1210.32 L1924.87 1210.32 L1924.29 1210.32 L1923.7 1210.32 L1923.11 1210.32 L1922.53 1210.32 L1921.94 1210.32 L1921.35 1210.32 L1920.77 1210.32 L1920.18 1210.32 L1919.59 1210.32 L1919.01 1210.32 L1918.42 1210.32 L1917.83 1210.32 L1917.25 1210.32 L1916.66 1210.32 L1916.08 1210.32 L1915.49 1210.32 L1914.9 1210.32 L1914.32 1210.32 L1913.73 1210.32 L1913.14 1210.32 L1912.56 1210.32 L1911.97 1210.32 L1911.38 1210.32 L1910.8 1210.32 L1910.21 1210.32 L1909.63 1210.32 L1909.04 1210.32 L1908.45 1210.32 L1907.87 1210.32 L1907.28 1210.32 L1906.69 1210.32 L1906.11 1210.32 L1905.52 1210.32 L1904.93 1210.32 L1904.35 1210.32 L1903.76 1210.32 L1903.17 1210.32 L1902.59 1210.32 L1902 1210.32 L1901.42 1210.32 L1900.83 1210.32 L1900.24 1210.32 L1899.66 1210.32 L1899.07 1210.32 L1898.48 1210.32 L1897.9 1210.32 L1897.31 1210.32 L1896.72 1210.32 L1896.14 1210.32 L1895.55 1210.32 L1894.96 1210.32 L1894.38 1210.32 L1893.79 1210.32 L1893.21 1210.32 L1892.62 1210.32 L1892.03 1210.32 L1891.45 1210.32 L1890.86 1210.32 L1890.27 1210.32 L1889.69 1210.32 L1889.1 1210.32 L1888.51 1210.32 L1887.93 1210.32 L1887.34 1210.32 L1886.76 1210.32 L1886.17 1210.32 L1885.58 1210.32 L1885 1210.32 L1884.41 1210.32 L1883.82 1210.32 L1883.24 1210.32 L1882.65 1210.32 L1882.06 1210.32 L1881.48 1210.32 L1880.89 1210.32 L1880.3 1210.32 L1879.72 1210.32 L1879.13 1210.32 L1878.55 1210.32 L1877.96 1210.32 L1877.37 1210.32 L1876.79 1210.32 L1876.2 1210.32 L1875.61 1210.32 L1875.03 1210.32 L1874.44 1210.32 L1873.85 1210.32 L1873.27 1210.32 L1872.68 1210.32 L1872.09 1210.32 L1871.51 1210.32 L1870.92 1210.32 L1870.34 1210.32 L1869.75 1210.32 L1869.16 1210.32 L1868.58 1210.32 L1867.99 1210.32 L1867.4 1210.32 L1866.82 1210.32 L1866.23 1210.32 L1865.64 1210.32 L1865.06 1210.32 L1864.47 1210.32 L1863.88 1210.32 L1863.3 1210.32 L1862.71 1210.32 L1862.13 1210.32 L1861.54 1210.32 L1860.95 1210.32 L1860.37 1210.32 L1859.78 1210.32 L1859.19 1210.32 L1858.61 1210.32 L1858.02 1210.32 L1857.43 1210.32 L1856.85 1210.32 L1856.26 1210.32 L1855.68 1210.32 L1855.09 1210.32 L1854.5 1210.32 L1853.92 1210.32 L1853.33 1210.32 L1852.74 1210.32 L1852.16 1210.32 L1851.57 1210.32 L1850.98 1210.32 L1850.4 1210.32 L1849.81 1210.32 L1849.22 1210.32 L1848.64 1210.32 L1848.05 1210.32 L1847.47 1210.32 L1846.88 1210.32 L1846.29 1210.32 L1845.71 1210.32 L1845.12 1210.32 L1844.53 1210.32 L1843.95 1210.32 L1843.36 1210.32 L1842.77 1210.32 L1842.19 1210.32 L1841.6 1210.32 L1841.01 1210.32 L1840.43 1210.32 L1839.84 1210.32 L1839.26 1210.32 L1838.67 1210.32 L1838.08 1210.32 L1837.5 1210.32 L1836.91 1210.32 L1836.32 1210.32 L1835.74 1210.32 L1835.15 1210.32 L1834.56 1210.32 L1833.98 1210.32 L1833.39 1210.32 L1832.81 1210.32 L1832.22 1210.32 L1831.63 1210.32 L1831.05 1210.32 L1830.46 1210.32 L1829.87 1210.32 L1829.29 1210.32 L1828.7 1210.32 L1828.11 1210.32 L1827.53 1210.32 L1826.94 1210.32 L1826.35 1210.32 L1825.77 1210.32 L1825.18 1210.32 L1824.6 1210.32 L1824.01 1210.32 L1823.42 1210.32 L1822.84 1210.32 L1822.25 1210.32 L1821.66 1210.32 L1821.08 1210.32 L1820.49 1210.32 L1819.9 1210.32 L1819.32 1210.32 L1818.73 1210.32 L1818.14 1210.32 L1817.56 1210.32 L1816.97 1210.32 L1816.39 1210.32 L1815.8 1210.32 L1815.21 1210.32 L1814.63 1210.32 L1814.04 1210.32 L1813.45 1210.32 L1812.87 1210.32 L1812.28 1210.32 L1811.69 1210.32 L1811.11 1210.32 L1810.52 1210.32 L1809.94 1210.32 L1809.35 1210.32 L1808.76 1210.32 L1808.18 1210.32 L1807.59 1210.32 L1807 1210.32 L1806.42 1210.32 L1805.83 1210.32 L1805.24 1210.32 L1804.66 1210.32 L1804.07 1210.32 L1803.48 1210.32 L1802.9 1210.32 L1802.31 1210.32 L1801.73 1210.32 L1801.14 1210.32 L1800.55 1210.32 L1799.97 1210.32 L1799.38 1210.32 L1798.79 1210.32 L1798.21 1210.32 L1797.62 1210.32 L1797.03 1210.32 L1796.45 1210.32 L1795.86 1210.32 L1795.27 1210.32 L1794.69 1210.32 L1794.1 1210.32 L1793.52 1210.32 L1792.93 1210.32 L1792.34 1210.32 L1791.76 1210.32 L1791.17 1210.32 L1790.58 1210.32 L1790 1210.32 L1789.41 1210.32 L1788.82 1210.32 L1788.24 1210.32 L1787.65 1210.32 L1787.06 1210.32 L1786.48 1210.32 L1785.89 1210.32 L1785.31 1210.32 L1784.72 1210.32 L1784.13 1210.32 L1783.55 1210.32 L1782.96 1210.32 L1782.37 1210.32 L1781.79 1210.32 L1781.2 1210.32 L1780.61 1210.32 L1780.03 1210.32 L1779.44 1210.32 L1778.86 1210.32 L1778.27 1210.32 L1777.68 1210.32 L1777.1 1210.32 L1776.51 1210.32 L1775.92 1210.32 L1775.34 1210.32 L1774.75 1210.32 L1774.16 1210.32 L1773.58 1210.32 L1772.99 1210.32 L1772.4 1210.32 L1771.82 1210.32 L1771.23 1210.32 L1770.65 1210.32 L1770.06 1210.32 L1769.47 1210.32 L1768.89 1210.32 L1768.3 1210.32 L1767.71 1210.32 L1767.13 1210.32 L1766.54 1210.32 L1765.95 1210.32 L1765.37 1210.32 L1764.78 1210.32 L1764.19 1210.32 L1763.61 1210.32 L1763.02 1210.32 L1762.44 1210.32 L1761.85 1210.32 L1761.26 1210.32 L1760.68 1210.32 L1760.09 1210.32 L1759.5 1210.32 L1758.92 1210.32 L1758.33 1210.32 L1757.74 1210.32 L1757.16 1210.32 L1756.57 1210.32 L1755.99 1210.32 L1755.4 1210.32 L1754.81 1210.32 L1754.23 1210.32 L1753.64 1210.32 L1753.05 1210.32 L1752.47 1210.32 L1751.88 1210.32 L1751.29 1210.32 L1750.71 1210.32 L1750.12 1210.32 L1749.53 1210.32 L1748.95 1210.32 L1748.36 1210.32 L1747.78 1210.32 L1747.19 1210.32 L1746.6 1210.32 L1746.02 1210.32 L1745.43 1210.32 L1744.84 1210.32 L1744.26 1210.32 L1743.67 1210.32 L1743.08 1210.32 L1742.5 1210.32 L1741.91 1210.32 L1741.32 1210.32 L1740.74 1210.32 L1740.15 1210.32 L1739.57 1210.32 L1738.98 1210.32 L1738.39 1210.32 L1737.81 1210.32 L1737.22 1210.32 L1736.63 1210.32 L1736.05 1210.32 L1735.46 1210.32 L1734.87 1210.32 L1734.29 1210.32 L1733.7 1210.32 L1733.11 1210.32 L1732.53 1210.32 L1731.94 1210.32 L1731.36 1210.32 L1730.77 1210.32 L1730.18 1210.32 L1729.6 1210.32 L1729.01 1210.32 L1728.42 1210.32 L1727.84 1210.32 L1727.25 1210.32 L1726.66 1210.32 L1726.08 1210.32 L1725.49 1210.32 L1724.91 1210.32 L1724.32 1210.32 L1723.73 1210.32 L1723.15 1210.32 L1722.56 1210.32 L1721.97 1210.32 L1721.39 1210.32 L1720.8 1210.32 L1720.21 1210.32 L1719.63 1210.32 L1719.04 1210.32 L1718.45 1210.32 L1717.87 1210.32 L1717.28 1210.32 L1716.7 1210.32 L1716.11 1210.32 L1715.52 1210.32 L1714.94 1210.32 L1714.35 1210.32 L1713.76 1210.32 L1713.18 1210.32 L1712.59 1210.32 L1712 1210.32 L1711.42 1210.32 L1710.83 1210.32 L1710.24 1210.32 L1709.66 1210.32 L1709.07 1210.32 L1708.49 1210.32 L1707.9 1210.32 L1707.31 1210.32 L1706.73 1210.32 L1706.14 1210.32 L1705.55 1210.32 L1704.97 1210.32 L1704.38 1210.32 L1703.79 1210.32 L1703.21 1210.32 L1702.62 1210.32 L1702.04 1210.32 L1701.45 1210.32 L1700.86 1210.32 L1700.28 1210.32 L1699.69 1210.32 L1699.1 1210.32 L1698.52 1210.32 L1697.93 1210.32 L1697.34 1210.32 L1696.76 1210.32 L1696.17 1210.32 L1695.58 1210.32 L1695 1210.32 L1694.41 1210.32 L1693.83 1210.32 L1693.24 1210.32 L1692.65 1210.32 L1692.07 1210.32 L1691.48 1210.32 L1690.89 1210.32 L1690.31 1210.32 L1689.72 1210.32 L1689.13 1210.32 L1688.55 1210.32 L1687.96 1210.32 L1687.37 1210.32 L1686.79 1210.32 L1686.2 1210.32 L1685.62 1210.32 L1685.03 1210.32 L1684.44 1210.32 L1683.86 1210.32 L1683.27 1210.32 L1682.68 1210.32 L1682.1 1210.32 L1681.51 1210.32 L1680.92 1210.32 L1680.34 1210.32 L1679.75 1210.32 L1679.17 1210.32 L1678.58 1210.32 L1677.99 1210.32 L1677.41 1210.32 L1676.82 1210.32 L1676.23 1210.32 L1675.65 1210.32 L1675.06 1210.32 L1674.47 1210.32 L1673.89 1210.32 L1673.3 1210.32 L1672.71 1210.32 L1672.13 1210.32 L1671.54 1210.32 L1670.96 1210.32 L1670.37 1210.32 L1669.78 1210.32 L1669.2 1210.32 L1668.61 1210.32 L1668.02 1210.32 L1667.44 1210.32 L1666.85 1210.32 L1666.26 1210.32 L1665.68 1210.32 L1665.09 1210.32 L1664.5 1210.32 L1663.92 1210.32 L1663.33 1210.32 L1662.75 1210.32 L1662.16 1210.32 L1661.57 1210.32 L1660.99 1210.32 L1660.4 1210.32 L1659.81 1210.32 L1659.23 1210.32 L1658.64 1210.32 L1658.05 1210.32 L1657.47 1210.32 L1656.88 1210.32 L1656.29 1210.32 L1655.71 1210.32 L1655.12 1210.32 L1654.54 1210.32 L1653.95 1210.32 L1653.36 1210.32 L1652.78 1210.32 L1652.19 1210.32 L1651.6 1210.32 L1651.02 1210.32 L1650.43 1210.32 L1649.84 1210.32 L1649.26 1210.32 L1648.67 1210.32 L1648.09 1210.32 L1647.5 1210.32 L1646.91 1210.32 L1646.33 1210.32 L1645.74 1210.32 L1645.15 1210.32 L1644.57 1210.32 L1643.98 1210.32 L1643.39 1210.32 L1642.81 1210.32 L1642.22 1210.32 L1641.63 1210.32 L1641.05 1210.32 L1640.46 1210.32 L1639.88 1210.32 L1639.29 1210.32 L1638.7 1210.32 L1638.12 1210.32 L1637.53 1210.32 L1636.94 1210.32 L1636.36 1210.32 L1635.77 1210.32 L1635.18 1210.32 L1634.6 1210.32 L1634.01 1210.32 L1633.42 1210.32 L1632.84 1210.32 L1632.25 1210.32 L1631.67 1210.32 L1631.08 1210.32 L1630.49 1210.32 L1629.91 1210.32 L1629.32 1210.32 L1628.73 1210.32 L1628.15 1210.32 L1627.56 1210.32 L1626.97 1210.32 L1626.39 1210.32 L1625.8 1210.32 L1625.22 1210.32 L1624.63 1210.32 L1624.04 1210.32 L1623.46 1210.32 L1622.87 1210.32 L1622.28 1210.32 L1621.7 1210.32 L1621.11 1210.32 L1620.52 1210.32 L1619.94 1210.32 L1619.35 1210.32 L1618.76 1210.32 L1618.18 1210.32 L1617.59 1210.32 L1617.01 1210.32 L1616.42 1210.32 L1615.83 1210.32 L1615.25 1210.32 L1614.66 1210.32 L1614.07 1210.32 L1613.49 1210.32 L1612.9 1210.32 L1612.31 1210.32 L1611.73 1210.32 L1611.14 1210.32 L1610.55 1210.32 L1609.97 1210.32 L1609.38 1210.32 L1608.8 1210.32 L1608.21 1210.32 L1607.62 1210.32 L1607.04 1210.32 L1606.45 1210.32 L1605.86 1210.32 L1605.28 1210.32 L1604.69 1210.32 L1604.1 1210.32 L1603.52 1210.32 L1602.93 1210.32 L1602.34 1210.32 L1601.76 1210.32 L1601.17 1210.32 L1600.59 1210.32 L1600 1210.32 L1599.41 1210.32 L1598.83 1210.32 L1598.24 1210.32 L1597.65 1210.32 L1597.07 1210.32 L1596.48 1210.32 L1595.89 1210.32 L1595.31 1210.32 L1594.72 1210.32 L1594.14 1210.32 L1593.55 1210.32 L1592.96 1210.32 L1592.38 1210.32 L1591.79 1210.32 L1591.2 1210.32 L1590.62 1210.32 L1590.03 1210.32 L1589.44 1210.32 L1588.86 1210.32 L1588.27 1210.32 L1587.68 1210.32 L1587.1 1210.32 L1586.51 1210.32 L1585.93 1210.32 L1585.34 1210.32 L1584.75 1210.32 L1584.17 1210.32 L1583.58 1210.32 L1582.99 1210.32 L1582.41 1210.32 L1581.82 1210.32 L1581.23 1210.32 L1580.65 1210.32 L1580.06 1210.32 L1579.47 1210.32 L1578.89 1210.32 L1578.3 1210.32 L1577.72 1210.32 L1577.13 1210.32 L1576.54 1210.32 L1575.96 1210.32 L1575.37 1210.32 L1574.78 1210.32 L1574.2 1210.32 L1573.61 1210.32 L1573.02 1210.32 L1572.44 1210.32 L1571.85 1210.32 L1571.27 1210.32 L1570.68 1210.32 L1570.09 1210.32 L1569.51 1210.32 L1568.92 1210.32 L1568.33 1210.32 L1567.75 1210.32 L1567.16 1210.32 L1566.57 1210.32 L1565.99 1210.32 L1565.4 1210.32 L1564.81 1210.32 L1564.23 1210.32 L1563.64 1210.32 L1563.06 1210.32 L1562.47 1210.32 L1561.88 1210.32 L1561.3 1210.32 L1560.71 1210.32 L1560.12 1210.32 L1559.54 1210.32 L1558.95 1210.32 L1558.36 1210.32 L1557.78 1210.32 L1557.19 1210.32 L1556.6 1210.32 L1556.02 1210.32 L1555.43 1210.32 L1554.85 1210.32 L1554.26 1210.32 L1553.67 1210.32 L1553.09 1210.32 L1552.5 1210.32 L1551.91 1210.32 L1551.33 1210.32 L1550.74 1210.32 L1550.15 1210.32 L1549.57 1210.32 L1548.98 1210.32 L1548.4 1210.32 L1547.81 1210.32 L1547.22 1210.32 L1546.64 1210.32 L1546.05 1210.32 L1545.46 1210.32 L1544.88 1210.32 L1544.29 1210.32 L1543.7 1210.32 L1543.12 1210.32 L1542.53 1210.32 L1541.94 1210.32 L1541.36 1210.32 L1540.77 1210.32 L1540.19 1210.32 L1539.6 1210.32 L1539.01 1210.32 L1538.43 1210.32 L1537.84 1210.32 L1537.25 1210.32 L1536.67 1210.32 L1536.08 1210.32 L1535.49 1210.32 L1534.91 1210.32 L1534.32 1210.32 L1533.73 1210.32 L1533.15 1210.32 L1532.56 1210.32 L1531.98 1210.32 L1531.39 1210.32 L1530.8 1210.32 L1530.22 1210.32 L1529.63 1210.32 L1529.04 1210.32 L1528.46 1210.32 L1527.87 1210.32 L1527.28 1210.32 L1526.7 1210.32 L1526.11 1210.32 L1525.52 1210.32 L1524.94 1210.32 L1524.35 1210.32 L1523.77 1210.32 L1523.18 1210.32 L1522.59 1210.32 L1522.01 1210.32 L1521.42 1210.32 L1520.83 1210.32 L1520.25 1210.32 L1519.66 1210.32 L1519.07 1210.32 L1518.49 1210.32 L1517.9 1210.32 L1517.32 1210.32 L1516.73 1210.32 L1516.14 1210.32 L1515.56 1210.32 L1514.97 1210.32 L1514.38 1210.32 L1513.8 1210.32 L1513.21 1210.32 L1512.62 1210.32 L1512.04 1210.32 L1511.45 1210.32 L1510.86 1210.32 L1510.28 1210.32 L1509.69 1210.32 L1509.11 1210.32 L1508.52 1210.32 L1507.93 1210.32 L1507.35 1210.32 L1506.76 1210.32 L1506.17 1210.32 L1505.59 1210.32 L1505 1210.32 L1504.41 1210.32 L1503.83 1210.32 L1503.24 1210.32 L1502.65 1210.32 L1502.07 1210.32 L1501.48 1210.32 L1500.9 1210.32 L1500.31 1210.32 L1499.72 1210.32 L1499.14 1210.32 L1498.55 1210.32 L1497.96 1210.32 L1497.38 1210.32 L1496.79 1210.32 L1496.2 1210.32 L1495.62 1210.32 L1495.03 1210.32 L1494.45 1210.32 L1493.86 1210.32 L1493.27 1210.32 L1492.69 1210.32 L1492.1 1210.32 L1491.51 1210.32 L1490.93 1210.32 L1490.34 1210.32 L1489.75 1210.32 L1489.17 1210.32 L1488.58 1210.32 L1487.99 1210.32 L1487.41 1210.32 L1486.82 1210.32 L1486.24 1210.32 L1485.65 1210.32 L1485.06 1210.32 L1484.48 1210.32 L1483.89 1210.32 L1483.3 1210.32 L1482.72 1210.32 L1482.13 1210.32 L1481.54 1210.32 L1480.96 1210.32 L1480.37 1210.32 L1479.78 1210.32 L1479.2 1210.32 L1478.61 1210.32 L1478.03 1210.32 L1477.44 1210.32 L1476.85 1210.32 L1476.27 1210.32 L1475.68 1210.32 L1475.09 1210.32 L1474.51 1210.32 L1473.92 1210.32 L1473.33 1210.32 L1472.75 1210.32 L1472.16 1210.32 L1471.57 1210.32 L1470.99 1210.32 L1470.4 1210.32 L1469.82 1210.32 L1469.23 1210.32 L1468.64 1210.32 L1468.06 1210.32 L1467.47 1210.32 L1466.88 1210.32 L1466.3 1210.32 L1465.71 1210.32 L1465.12 1210.32 L1464.54 1210.32 L1463.95 1210.32 L1463.37 1210.32 L1462.78 1210.32 L1462.19 1210.32 L1461.61 1210.32 L1461.02 1210.32 L1460.43 1210.32 L1459.85 1210.32 L1459.26 1210.32 L1458.67 1210.32 L1458.09 1210.32 L1457.5 1210.32 L1456.91 1210.32 L1456.33 1210.32 L1455.74 1210.32 L1455.16 1210.32 L1454.57 1210.32 L1453.98 1210.32 L1453.4 1210.32 L1452.81 1210.32 L1452.22 1210.32 L1451.64 1210.32 L1451.05 1210.32 L1450.46 1210.32 L1449.88 1210.32 L1449.29 1210.32 L1448.7 1210.32 L1448.12 1210.32 L1447.53 1210.32 L1446.95 1210.32 L1446.36 1210.32 L1445.77 1210.32 L1445.19 1210.32 L1444.6 1210.32 L1444.01 1210.32 L1443.43 1210.32 L1442.84 1210.32 L1442.25 1210.32 L1441.67 1210.32 L1441.08 1210.32 L1440.5 1210.32 L1439.91 1210.32 L1439.32 1210.32 L1438.74 1210.32 L1438.15 1210.32 L1437.56 1210.32 L1436.98 1210.32 L1436.39 1210.32 L1435.8 1210.32 L1435.22 1210.32 L1434.63 1210.32 L1434.04 1210.32 L1433.46 1210.32 L1432.87 1210.32 L1432.29 1210.32 L1431.7 1210.32 L1431.11 1210.32 L1430.53 1210.32 L1429.94 1210.32 L1429.35 1210.32 L1428.77 1210.32 L1428.18 1210.32 L1427.59 1210.32 L1427.01 1210.32 L1426.42 1210.32 L1425.83 1210.32 L1425.25 1210.32 L1424.66 1210.32 L1424.08 1210.32 L1423.49 1210.32 L1422.9 1210.32 L1422.32 1210.32 L1421.73 1210.32 L1421.14 1210.32 L1420.56 1210.32 L1419.97 1210.32 L1419.38 1210.32 L1418.8 1210.32 L1418.21 1210.32 L1417.63 1210.32 L1417.04 1210.32 L1416.45 1210.32 L1415.87 1210.32 L1415.28 1210.32 L1414.69 1210.32 L1414.11 1210.32 L1413.52 1210.32 L1412.93 1210.32 L1412.35 1210.32 L1411.76 1210.32 L1411.17 1210.32 L1410.59 1210.32 L1410 1210.32 L1409.42 1210.32 L1408.83 1210.32 L1408.24 1210.32 L1407.66 1210.32 L1407.07 1210.32 L1406.48 1210.32 L1405.9 1210.32 L1405.31 1210.32 L1404.72 1210.32 L1404.14 1210.32 L1403.55 1210.32 L1402.96 1210.32 L1402.38 1210.32 L1401.79 1210.32 L1401.21 1210.32 L1400.62 1210.32 L1400.03 1210.32 L1399.45 1210.32 L1398.86 1210.32 L1398.27 1210.32 L1397.69 1210.32 L1397.1 1210.32 L1396.51 1210.32 L1395.93 1210.32 L1395.34 1210.32 L1394.75 1210.32 L1394.17 1210.32 L1393.58 1210.32 L1393 1210.32 L1392.41 1210.32 L1391.82 1210.32 L1391.24 1210.32 L1390.65 1210.32 L1390.06 1210.32 L1389.48 1210.32 L1388.89 1210.32 L1388.3 1210.32 L1387.72 1210.32 L1387.13 1210.32 L1386.55 1210.32 L1385.96 1210.32 L1385.37 1210.32 L1384.79 1210.32 L1384.2 1210.32 L1383.61 1210.32 L1383.03 1210.32 L1382.44 1210.32 L1381.85 1210.32 L1381.27 1210.32 L1380.68 1210.32 L1380.09 1210.32 L1379.51 1210.32 L1378.92 1210.32 L1378.34 1210.32 L1377.75 1210.32 L1377.16 1210.32 L1376.58 1210.32 L1375.99 1210.32 L1375.4 1210.32 L1374.82 1210.32 L1374.23 1210.32 L1373.64 1210.32 L1373.06 1210.32 L1372.47 1210.32 L1371.88 1210.32 L1371.3 1210.32 L1370.71 1210.32 L1370.13 1210.32 L1369.54 1210.32 L1368.95 1210.32 L1368.37 1210.32 L1367.78 1210.32 L1367.19 1210.32 L1366.61 1210.32 L1366.02 1210.32 L1365.43 1210.32 L1364.85 1210.32 L1364.26 1210.32 L1363.68 1210.32 L1363.09 1210.32 L1362.5 1210.32 L1361.92 1210.32 L1361.33 1210.32 L1360.74 1210.32 L1360.16 1210.32 L1359.57 1210.32 L1358.98 1210.32 L1358.4 1210.32 L1357.81 1210.32 L1357.22 1210.32 L1356.64 1210.32 L1356.05 1210.32 L1355.47 1210.32 L1354.88 1210.32 L1354.29 1210.32 L1353.71 1210.32 L1353.12 1210.32 L1352.53 1210.32 L1351.95 1210.32 L1351.36 1210.32 L1350.77 1210.32 L1350.19 1210.32 L1349.6 1210.32 L1349.01 1210.32 L1348.43 1210.32 L1347.84 1210.32 L1347.26 1210.32 L1346.67 1210.32 L1346.08 1210.32 L1345.5 1210.32 L1344.91 1210.32 L1344.32 1210.32 L1343.74 1210.32 L1343.15 1210.32 L1342.56 1210.32 L1341.98 1210.32 L1341.39 1210.32 L1340.8 1210.32 L1340.22 1210.32 L1339.63 1210.32 L1339.05 1210.32 L1338.46 1210.32 L1337.87 1210.32 L1337.29 1210.32 L1336.7 1210.32 L1336.11 1210.32 L1335.53 1210.32 L1334.94 1210.32 L1334.35 1210.32 L1333.77 1210.32 L1333.18 1210.32 L1332.6 1210.32 L1332.01 1210.32 L1331.42 1210.32 L1330.84 1210.32 L1330.25 1210.32 L1329.66 1210.32 L1329.08 1210.32 L1328.49 1210.32 L1327.9 1210.32 L1327.32 1210.32 L1326.73 1210.32 L1326.14 1210.32 L1325.56 1210.32 L1324.97 1210.32 L1324.39 1210.32 L1323.8 1210.32 L1323.21 1210.32 L1322.63 1210.32 L1322.04 1210.32 L1321.45 1210.32 L1320.87 1210.32 L1320.28 1210.32 L1319.69 1210.32 L1319.11 1210.32 L1318.52 1210.32 L1317.93 1210.32 L1317.35 1210.32 L1316.76 1210.32 L1316.18 1210.32 L1315.59 1210.32 L1315 1210.32 L1314.42 1210.32 L1313.83 1210.32 L1313.24 1210.32 L1312.66 1210.32 L1312.07 1210.32 L1311.48 1210.32 L1310.9 1210.32 L1310.31 1210.32 L1309.73 1210.32 L1309.14 1210.32 L1308.55 1210.32 L1307.97 1210.32 L1307.38 1210.32 L1306.79 1210.32 L1306.21 1210.32 L1305.62 1210.32 L1305.03 1210.32 L1304.45 1210.32 L1303.86 1210.32 L1303.27 1210.32 L1302.69 1210.32 L1302.1 1210.32 L1301.52 1210.32 L1300.93 1210.32 L1300.34 1210.32 L1299.76 1210.32 L1299.17 1210.32 L1298.58 1210.32 L1298 1210.32 L1297.41 1210.32 L1296.82 1210.32 L1296.24 1210.32 L1295.65 1210.32 L1295.06 1210.32 L1294.48 1210.32 L1293.89 1210.32 L1293.31 1210.32 L1292.72 1210.32 L1292.13 1210.32 L1291.55 1210.32 L1290.96 1210.32 L1290.37 1210.32 L1289.79 1210.32 L1289.2 1210.32 L1288.61 1210.32 L1288.03 1210.32 L1287.44 1210.32 L1286.86 1210.32 L1286.27 1210.32 L1285.68 1210.32 L1285.1 1210.32 L1284.51 1210.32 L1283.92 1210.32 L1283.34 1210.32 L1282.75 1210.32 L1282.16 1210.32 L1281.58 1210.32 L1280.99 1210.32 L1280.4 1210.32 L1279.82 1210.32 L1279.23 1210.32 L1278.65 1210.32 L1278.06 1210.32 L1277.47 1210.32 L1276.89 1210.32 L1276.3 1210.32 L1275.71 1210.32 L1275.13 1210.32 L1274.54 1210.32 L1273.95 1210.32 L1273.37 1210.32 L1272.78 1210.32 L1272.19 1210.32 L1271.61 1210.32 L1271.02 1210.32 L1270.44 1210.32 L1269.85 1210.32 L1269.26 1210.32 L1268.68 1210.32 L1268.09 1210.32 L1267.5 1210.32 L1266.92 1210.32 L1266.33 1210.32 L1265.74 1210.32 L1265.16 1210.32 L1264.57 1210.32 L1263.98 1210.32 L1263.4 1210.32 L1262.81 1210.32 L1262.23 1210.32 L1261.64 1210.32 L1261.05 1210.32 L1260.47 1210.32 L1259.88 1210.32 L1259.29 1210.32 L1258.71 1210.32 L1258.12 1210.32 L1257.53 1210.32 L1256.95 1210.32 L1256.36 1210.32 L1255.78 1210.32 L1255.19 1210.32 L1254.6 1210.32 L1254.02 1210.32 L1253.43 1210.32 L1252.84 1210.32 L1252.26 1210.32 L1251.67 1210.32 L1251.08 1210.32 L1250.5 1210.32 L1249.91 1210.32 L1249.32 1210.32 L1248.74 1210.32 L1248.15 1210.32 L1247.57 1210.32 L1246.98 1210.32 L1246.39 1210.32 L1245.81 1210.32 L1245.22 1210.32 L1244.63 1210.32 L1244.05 1210.32 L1243.46 1210.32 L1242.87 1210.32 L1242.29 1210.32 L1241.7 1210.32 L1241.11 1210.32 L1240.53 1210.32 L1239.94 1210.32 L1239.36 1210.32 L1238.77 1210.32 L1238.18 1210.32 L1237.6 1210.32 L1237.01 1210.32 L1236.42 1210.32 L1235.84 1210.32 L1235.25 1210.32 L1234.66 1210.32 L1234.08 1210.32 L1233.49 1210.32 L1232.91 1210.32 L1232.32 1210.32 L1231.73 1210.32 L1231.15 1210.32 L1230.56 1210.32 L1229.97 1210.32 L1229.39 1210.32 L1228.8 1210.32 L1228.21 1210.32 L1227.63 1210.32 L1227.04 1210.32 L1226.45 1210.32 L1225.87 1210.32 L1225.28 1210.32 L1224.7 1210.32 L1224.11 1210.32 L1223.52 1210.32 L1222.94 1210.32 L1222.35 1210.32 L1221.76 1210.32 L1221.18 1210.32 L1220.59 1210.32 L1220 1210.32 L1219.42 1210.32 L1218.83 1210.32 L1218.24 1210.32 L1217.66 1210.32 L1217.07 1210.32 L1216.49 1210.32 L1215.9 1210.32 L1215.31 1210.32 L1214.73 1210.32 L1214.14 1210.32 L1213.55 1210.32 L1212.97 1210.32 L1212.38 1210.32 L1211.79 1210.32 L1211.21 1210.32 L1210.62 1210.32 L1210.03 1210.32 L1209.45 1210.32 L1208.86 1210.32 L1208.28 1210.32 L1207.69 1210.32 L1207.1 1210.32 L1206.52 1210.32 L1205.93 1210.32 L1205.34 1210.32 L1204.76 1210.32 L1204.17 1210.32 L1203.58 1210.32 L1203 1210.32 L1202.41 1210.32 L1201.83 1210.32 L1201.24 1210.32 L1200.65 1210.32 L1200.07 1210.32 L1199.48 1210.32 L1198.89 1210.32 L1198.31 1210.32 L1197.72 1210.32 L1197.13 1210.32 L1196.55 1210.32 L1195.96 1210.32 L1195.37 1210.32 L1194.79 1210.32 L1194.2 1210.32 L1193.62 1210.32 L1193.03 1210.32 L1192.44 1210.32 L1191.86 1210.32 L1191.27 1210.32 L1190.68 1210.32 L1190.1 1210.32 L1189.51 1210.32 L1188.92 1210.32 L1188.34 1210.32 L1187.75 1210.32 L1187.16 1210.32 L1186.58 1210.32 L1185.99 1210.32 L1185.41 1210.32 L1184.82 1210.32 L1184.23 1210.32 L1183.65 1210.32 L1183.06 1210.32 L1182.47 1210.32 L1181.89 1210.32 L1181.3 1210.32 L1180.71 1210.32 L1180.13 1210.32 L1179.54 1210.32 L1178.96 1210.32 L1178.37 1210.32 L1177.78 1210.32 L1177.2 1210.32 L1176.61 1210.32 L1176.02 1210.32 L1175.44 1210.32 L1174.85 1210.32 L1174.26 1210.32 L1173.68 1210.32 L1173.09 1210.32 L1172.5 1210.32 L1171.92 1210.32 L1171.33 1210.32 L1170.75 1210.32 L1170.16 1210.32 L1169.57 1210.32 L1168.99 1210.32 L1168.4 1210.32 L1167.81 1210.32 L1167.23 1210.32 L1166.64 1210.32 L1166.05 1210.32 L1165.47 1210.32 L1164.88 1210.32 L1164.29 1210.32 L1163.71 1210.32 L1163.12 1210.32 L1162.54 1210.32 L1161.95 1210.32 L1161.36 1210.32 L1160.78 1210.32 L1160.19 1210.32 L1159.6 1210.32 L1159.02 1210.32 L1158.43 1210.32 L1157.84 1210.32 L1157.26 1210.32 L1156.67 1210.32 L1156.09 1210.32 L1155.5 1210.32 L1154.91 1210.32 L1154.33 1210.32 L1153.74 1210.32 L1153.15 1210.32 L1152.57 1210.32 L1151.98 1210.32 L1151.39 1210.32 L1150.81 1210.32 L1150.22 1210.32 L1149.63 1210.32 L1149.05 1210.32 L1148.46 1210.32 L1147.88 1210.32 L1147.29 1210.32 L1146.7 1210.32 L1146.12 1210.32 L1145.53 1210.32 L1144.94 1210.32 L1144.36 1210.32 L1143.77 1210.32 L1143.18 1210.32 L1142.6 1210.32 L1142.01 1210.32 L1141.42 1210.32 L1140.84 1210.32 L1140.25 1210.32 L1139.67 1210.32 L1139.08 1210.32 L1138.49 1210.32 L1137.91 1210.32 L1137.32 1210.32 L1136.73 1210.32 L1136.15 1210.32 L1135.56 1210.32 L1134.97 1210.32 L1134.39 1210.32 L1133.8 1210.32 L1133.21 1210.32 L1132.63 1210.32 L1132.04 1210.32 L1131.46 1210.32 L1130.87 1210.32 L1130.28 1210.32 L1129.7 1210.32 L1129.11 1210.32 L1128.52 1210.32 L1127.94 1210.32 L1127.35 1210.32 L1126.76 1210.32 L1126.18 1210.32 L1125.59 1210.32 L1125.01 1210.32 L1124.42 1210.32 L1123.83 1210.32 L1123.25 1210.32 L1122.66 1210.32 L1122.07 1210.32 L1121.49 1210.32 L1120.9 1210.32 L1120.31 1210.32 L1119.73 1210.32 L1119.14 1210.32 L1118.55 1210.32 L1117.97 1210.32 L1117.38 1210.32 L1116.8 1210.32 L1116.21 1210.32 L1115.62 1210.32 L1115.04 1210.32 L1114.45 1210.32 L1113.86 1210.32 L1113.28 1210.32 L1112.69 1210.32 L1112.1 1210.32 L1111.52 1210.32 L1110.93 1210.32 L1110.34 1210.32 L1109.76 1210.32 L1109.17 1210.32 L1108.59 1210.32 L1108 1210.32 L1107.41 1210.32 L1106.83 1210.32 L1106.24 1210.32 L1105.65 1210.32 L1105.07 1210.32 L1104.48 1210.32 L1103.89 1210.32 L1103.31 1210.32 L1102.72 1210.32 L1102.14 1210.32 L1101.55 1210.32 L1100.96 1210.32 L1100.38 1210.32 L1099.79 1210.32 L1099.2 1210.32 L1098.62 1210.32 L1098.03 1210.32 L1097.44 1210.32 L1096.86 1210.32 L1096.27 1210.32 L1095.68 1210.32 L1095.1 1210.32 L1094.51 1210.32 L1093.93 1210.32 L1093.34 1210.32 L1092.75 1210.32 L1092.17 1210.32 L1091.58 1210.32 L1090.99 1210.32 L1090.41 1210.32 L1089.82 1210.32 L1089.23 1210.32 L1088.65 1210.32 L1088.06 1210.32 L1087.47 1210.32 L1086.89 1210.32 L1086.3 1210.32 L1085.72 1210.32 L1085.13 1210.32 L1084.54 1210.32 L1083.96 1210.32 L1083.37 1210.32 L1082.78 1210.32 L1082.2 1210.32 L1081.61 1210.32 L1081.02 1210.32 L1080.44 1210.32 L1079.85 1210.32 L1079.26 1210.32 L1078.68 1210.32 L1078.09 1210.32 L1077.51 1210.32 L1076.92 1210.32 L1076.33 1210.32 L1075.75 1210.32 L1075.16 1210.32 L1074.57 1210.32 L1073.99 1210.32 L1073.4 1210.32 L1072.81 1210.32 L1072.23 1210.32 L1071.64 1210.32 L1071.06 1210.32 L1070.47 1210.32 L1069.88 1210.32 L1069.3 1210.32 L1068.71 1210.32 L1068.12 1210.32 L1067.54 1210.32 L1066.95 1210.32 L1066.36 1210.32 L1065.78 1210.32 L1065.19 1210.32 L1064.6 1210.32 L1064.02 1210.32 L1063.43 1210.32 L1062.85 1210.32 L1062.26 1210.32 L1061.67 1210.32 L1061.09 1210.32 L1060.5 1210.32 L1059.91 1210.32 L1059.33 1210.32 L1058.74 1210.32 L1058.15 1210.32 L1057.57 1210.32 L1056.98 1210.32 L1056.39 1210.32 L1055.81 1210.32 L1055.22 1210.32 L1054.64 1210.32 L1054.05 1210.32 L1053.46 1210.32 L1052.88 1210.32 L1052.29 1210.32 L1051.7 1210.32 L1051.12 1210.32 L1050.53 1210.32 L1049.94 1210.32 L1049.36 1210.32 L1048.77 1210.32 L1048.19 1210.32 L1047.6 1210.32 L1047.01 1210.32 L1046.43 1210.32 L1045.84 1210.32 L1045.25 1210.32 L1044.67 1210.32 L1044.08 1210.32 L1043.49 1210.32 L1042.91 1210.32 L1042.32 1210.32 L1041.73 1210.32 L1041.15 1210.32 L1040.56 1210.32 L1039.98 1210.32 L1039.39 1210.32 L1038.8 1210.32 L1038.22 1210.32 L1037.63 1210.32 L1037.04 1210.32 L1036.46 1210.32 L1035.87 1210.32 L1035.28 1210.32 L1034.7 1210.32 L1034.11 1210.32 L1033.52 1210.32 L1032.94 1210.32 L1032.35 1210.32 L1031.77 1210.32 L1031.18 1210.32 L1030.59 1210.32 L1030.01 1210.32 L1029.42 1210.32 L1028.83 1210.32 L1028.25 1210.32 L1027.66 1210.32 L1027.07 1210.32 L1026.49 1210.32 L1025.9 1210.32 L1025.32 1210.32 L1024.73 1210.32 L1024.14 1210.32 L1023.56 1210.32 L1022.97 1210.32 L1022.38 1210.32 L1021.8 1210.32 L1021.21 1210.32 L1020.62 1210.32 L1020.04 1210.32 L1019.45 1210.32 L1018.86 1210.32 L1018.28 1210.32 L1017.69 1210.32 L1017.11 1210.32 L1016.52 1210.32 L1015.93 1210.32 L1015.35 1210.32 L1014.76 1210.32 L1014.17 1210.32 L1013.59 1210.32 L1013 1210.32 L1012.41 1210.32 L1011.83 1210.32 L1011.24 1210.32 L1010.65 1210.32 L1010.07 1210.32 L1009.48 1210.32 L1008.9 1210.32 L1008.31 1210.32 L1007.72 1210.32 L1007.14 1210.32 L1006.55 1210.32 L1005.96 1210.32 L1005.38 1210.32 L1004.79 1210.32 L1004.2 1210.32 L1003.62 1210.32 L1003.03 1210.32 L1002.44 1210.32 L1001.86 1210.32 L1001.27 1210.32 L1000.69 1210.32 L1000.1 1210.32 L999.513 1210.32 L998.926 1210.32 L998.34 1210.32 L997.754 1210.32 L997.167 1210.32 L996.581 1210.32 L995.994 1210.32 L995.408 1210.32 L994.822 1210.32 L994.235 1210.32 L993.649 1210.32 L993.062 1210.32 L992.476 1210.32 L991.889 1210.32 L991.303 1210.32 L990.717 1210.32 L990.13 1210.32 L989.544 1210.32 L988.957 1210.32 L988.371 1210.32 L987.785 1210.32 L987.198 1210.32 L986.612 1210.32 L986.025 1210.32  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1210.44 986.612,1210.44 987.198,1210.44 987.785,1210.44 988.371,1210.44 988.957,1210.44 989.544,1210.44 990.13,1210.44 990.717,1210.44 991.303,1210.44 991.889,1210.44 992.476,1210.44 993.062,1210.44 993.649,1210.44 994.235,1210.44 994.822,1210.44 995.408,1210.44 995.994,1210.44 996.581,1210.44 997.167,1210.44 997.754,1210.44 998.34,1210.44 998.926,1210.44 999.513,1210.44 1000.1,1210.44 1000.69,1210.44 1001.27,1210.44 1001.86,1210.44 1002.44,1210.44 1003.03,1210.44 1003.62,1210.44 1004.2,1210.44 1004.79,1210.44 1005.38,1210.44 1005.96,1210.44 1006.55,1210.44 1007.14,1210.44 1007.72,1210.44 1008.31,1210.44 1008.9,1210.44 1009.48,1210.44 1010.07,1210.44 1010.65,1210.44 1011.24,1210.44 1011.83,1210.44 1012.41,1210.44 1013,1210.44 1013.59,1210.44 1014.17,1210.44 1014.76,1210.44 1015.35,1210.44 1015.93,1210.44 1016.52,1210.44 1017.11,1210.44 1017.69,1210.44 1018.28,1210.44 1018.86,1210.44 1019.45,1210.44 1020.04,1210.44 1020.62,1210.44 1021.21,1210.44 1021.8,1210.44 1022.38,1210.44 1022.97,1210.44 1023.56,1210.44 1024.14,1210.44 1024.73,1210.44 1025.32,1210.44 1025.9,1210.44 1026.49,1210.44 1027.07,1210.44 1027.66,1210.44 1028.25,1210.44 1028.83,1210.44 1029.42,1210.44 1030.01,1210.44 1030.59,1210.44 1031.18,1210.44 1031.77,1210.44 1032.35,1210.44 1032.94,1210.44 1033.52,1210.44 1034.11,1210.44 1034.7,1210.44 1035.28,1210.44 1035.87,1210.44 1036.46,1210.44 1037.04,1210.44 1037.63,1210.44 1038.22,1210.44 1038.8,1210.44 1039.39,1210.44 1039.98,1210.44 1040.56,1210.44 1041.15,1210.44 1041.73,1210.44 1042.32,1210.44 1042.91,1210.44 1043.49,1210.44 1044.08,1210.44 1044.67,1210.44 1045.25,1210.44 1045.84,1210.44 1046.43,1210.44 1047.01,1210.44 1047.6,1210.44 1048.19,1210.44 1048.77,1210.44 1049.36,1210.44 1049.94,1210.44 1050.53,1210.44 1051.12,1210.44 1051.7,1210.44 1052.29,1210.44 1052.88,1210.44 1053.46,1210.44 1054.05,1210.44 1054.64,1210.44 1055.22,1210.44 1055.81,1210.44 1056.39,1210.44 1056.98,1210.44 1057.57,1210.44 1058.15,1210.44 1058.74,1210.44 1059.33,1210.44 1059.91,1210.44 1060.5,1210.44 1061.09,1210.44 1061.67,1210.44 1062.26,1210.44 1062.85,1210.44 1063.43,1210.44 1064.02,1210.44 1064.6,1210.44 1065.19,1210.44 1065.78,1210.44 1066.36,1210.44 1066.95,1210.44 1067.54,1210.44 1068.12,1210.44 1068.71,1210.44 1069.3,1210.44 1069.88,1210.44 1070.47,1210.44 1071.06,1210.44 1071.64,1210.44 1072.23,1210.44 1072.81,1210.44 1073.4,1210.44 1073.99,1210.44 1074.57,1210.44 1075.16,1210.44 1075.75,1210.44 1076.33,1210.44 1076.92,1210.44 1077.51,1210.44 1078.09,1210.44 1078.68,1210.44 1079.26,1210.44 1079.85,1210.44 1080.44,1210.44 1081.02,1210.44 1081.61,1210.44 1082.2,1210.44 1082.78,1210.44 1083.37,1210.44 1083.96,1210.44 1084.54,1210.44 1085.13,1210.44 1085.72,1210.44 1086.3,1210.44 1086.89,1210.44 1087.47,1210.44 1088.06,1210.44 1088.65,1210.44 1089.23,1210.44 1089.82,1210.44 1090.41,1210.44 1090.99,1210.44 1091.58,1210.44 1092.17,1210.44 1092.75,1210.44 1093.34,1210.44 1093.93,1210.44 1094.51,1210.44 1095.1,1210.44 1095.68,1210.44 1096.27,1210.44 1096.86,1210.44 1097.44,1210.44 1098.03,1210.44 1098.62,1210.44 1099.2,1210.44 1099.79,1210.44 1100.38,1210.44 1100.96,1210.44 1101.55,1210.44 1102.14,1210.44 1102.72,1210.44 1103.31,1210.44 1103.89,1210.44 1104.48,1210.44 1105.07,1210.44 1105.65,1210.44 1106.24,1210.44 1106.83,1210.44 1107.41,1210.44 1108,1210.44 1108.59,1210.44 1109.17,1210.44 1109.76,1210.44 1110.34,1210.44 1110.93,1210.44 1111.52,1210.44 1112.1,1210.44 1112.69,1210.44 1113.28,1210.44 1113.86,1210.44 1114.45,1210.44 1115.04,1210.44 1115.62,1210.44 1116.21,1210.44 1116.8,1210.44 1117.38,1210.44 1117.97,1210.44 1118.55,1210.44 1119.14,1210.44 1119.73,1210.44 1120.31,1210.44 1120.9,1210.44 1121.49,1210.44 1122.07,1210.44 1122.66,1210.44 1123.25,1210.44 1123.83,1210.44 1124.42,1210.44 1125.01,1210.44 1125.59,1210.44 1126.18,1210.44 1126.76,1210.44 1127.35,1210.44 1127.94,1210.44 1128.52,1210.44 1129.11,1210.44 1129.7,1210.44 1130.28,1210.44 1130.87,1210.44 1131.46,1210.44 1132.04,1210.44 1132.63,1210.44 1133.21,1210.44 1133.8,1210.44 1134.39,1210.44 1134.97,1210.44 1135.56,1210.44 1136.15,1210.44 1136.73,1210.44 1137.32,1210.44 1137.91,1210.44 1138.49,1210.44 1139.08,1210.44 1139.67,1210.44 1140.25,1210.44 1140.84,1210.44 1141.42,1210.44 1142.01,1210.44 1142.6,1210.44 1143.18,1210.44 1143.77,1210.44 1144.36,1210.44 1144.94,1210.44 1145.53,1210.44 1146.12,1210.44 1146.7,1210.44 1147.29,1210.44 1147.88,1210.44 1148.46,1210.44 1149.05,1210.44 1149.63,1210.44 1150.22,1210.44 1150.81,1210.44 1151.39,1210.44 1151.98,1210.44 1152.57,1210.44 1153.15,1210.44 1153.74,1210.44 1154.33,1210.44 1154.91,1210.44 1155.5,1210.44 1156.09,1210.44 1156.67,1210.44 1157.26,1210.44 1157.84,1210.44 1158.43,1210.44 1159.02,1210.44 1159.6,1210.44 1160.19,1210.44 1160.78,1210.44 1161.36,1210.44 1161.95,1210.44 1162.54,1210.44 1163.12,1210.44 1163.71,1210.44 1164.29,1210.44 1164.88,1210.44 1165.47,1210.44 1166.05,1210.44 1166.64,1210.44 1167.23,1210.44 1167.81,1210.44 1168.4,1210.44 1168.99,1210.44 1169.57,1210.44 1170.16,1210.44 1170.75,1210.44 1171.33,1210.44 1171.92,1210.44 1172.5,1210.44 1173.09,1210.44 1173.68,1210.44 1174.26,1210.44 1174.85,1210.44 1175.44,1210.44 1176.02,1210.44 1176.61,1210.44 1177.2,1210.44 1177.78,1210.44 1178.37,1210.44 1178.96,1210.44 1179.54,1210.44 1180.13,1210.44 1180.71,1210.44 1181.3,1210.44 1181.89,1210.44 1182.47,1210.44 1183.06,1210.44 1183.65,1210.44 1184.23,1210.44 1184.82,1210.44 1185.41,1210.44 1185.99,1210.44 1186.58,1210.44 1187.16,1210.44 1187.75,1210.44 1188.34,1210.44 1188.92,1210.44 1189.51,1210.44 1190.1,1210.44 1190.68,1210.44 1191.27,1210.44 1191.86,1210.44 1192.44,1210.44 1193.03,1210.44 1193.62,1210.44 1194.2,1210.44 1194.79,1210.44 1195.37,1210.44 1195.96,1210.44 1196.55,1210.44 1197.13,1210.44 1197.72,1210.44 1198.31,1210.44 1198.89,1210.44 1199.48,1210.44 1200.07,1210.44 1200.65,1210.44 1201.24,1210.44 1201.83,1210.44 1202.41,1210.44 1203,1210.44 1203.58,1210.44 1204.17,1210.44 1204.76,1210.44 1205.34,1210.44 1205.93,1210.44 1206.52,1210.44 1207.1,1210.44 1207.69,1210.44 1208.28,1210.44 1208.86,1210.44 1209.45,1210.44 1210.03,1210.44 1210.62,1210.44 1211.21,1210.44 1211.79,1210.44 1212.38,1210.44 1212.97,1210.44 1213.55,1210.44 1214.14,1210.44 1214.73,1210.44 1215.31,1210.44 1215.9,1210.44 1216.49,1210.44 1217.07,1210.44 1217.66,1210.44 1218.24,1210.44 1218.83,1210.44 1219.42,1210.44 1220,1210.44 1220.59,1210.44 1221.18,1210.44 1221.76,1210.44 1222.35,1210.44 1222.94,1210.44 1223.52,1210.44 1224.11,1210.44 1224.7,1210.44 1225.28,1210.44 1225.87,1210.44 1226.45,1210.44 1227.04,1210.44 1227.63,1210.44 1228.21,1210.44 1228.8,1210.44 1229.39,1210.44 1229.97,1210.44 1230.56,1210.44 1231.15,1210.44 1231.73,1210.44 1232.32,1210.44 1232.91,1210.44 1233.49,1210.44 1234.08,1210.44 1234.66,1210.44 1235.25,1210.44 1235.84,1210.44 1236.42,1210.44 1237.01,1210.44 1237.6,1210.44 1238.18,1210.44 1238.77,1210.44 1239.36,1210.44 1239.94,1210.44 1240.53,1210.44 1241.11,1210.44 1241.7,1210.44 1242.29,1210.44 1242.87,1210.44 1243.46,1210.44 1244.05,1210.44 1244.63,1210.44 1245.22,1210.44 1245.81,1210.44 1246.39,1210.44 1246.98,1210.44 1247.57,1210.44 1248.15,1210.44 1248.74,1210.44 1249.32,1210.44 1249.91,1210.44 1250.5,1210.44 1251.08,1210.44 1251.67,1210.44 1252.26,1210.44 1252.84,1210.44 1253.43,1210.44 1254.02,1210.44 1254.6,1210.44 1255.19,1210.44 1255.78,1210.44 1256.36,1210.44 1256.95,1210.44 1257.53,1210.44 1258.12,1210.44 1258.71,1210.44 1259.29,1210.44 1259.88,1210.44 1260.47,1210.44 1261.05,1210.44 1261.64,1210.44 1262.23,1210.44 1262.81,1210.44 1263.4,1210.44 1263.98,1210.44 1264.57,1210.44 1265.16,1210.44 1265.74,1210.44 1266.33,1210.44 1266.92,1210.44 1267.5,1210.44 1268.09,1210.44 1268.68,1210.44 1269.26,1210.44 1269.85,1210.44 1270.44,1210.44 1271.02,1210.44 1271.61,1210.44 1272.19,1210.44 1272.78,1210.44 1273.37,1210.44 1273.95,1210.44 1274.54,1210.44 1275.13,1210.44 1275.71,1210.44 1276.3,1210.44 1276.89,1210.44 1277.47,1210.44 1278.06,1210.44 1278.65,1210.44 1279.23,1210.44 1279.82,1210.44 1280.4,1210.44 1280.99,1210.44 1281.58,1210.44 1282.16,1210.44 1282.75,1210.44 1283.34,1210.44 1283.92,1210.44 1284.51,1210.44 1285.1,1210.44 1285.68,1210.44 1286.27,1210.44 1286.86,1210.44 1287.44,1210.44 1288.03,1210.44 1288.61,1210.44 1289.2,1210.44 1289.79,1210.44 1290.37,1210.44 1290.96,1210.44 1291.55,1210.44 1292.13,1210.44 1292.72,1210.44 1293.31,1210.44 1293.89,1210.44 1294.48,1210.44 1295.06,1210.44 1295.65,1210.44 1296.24,1210.44 1296.82,1210.44 1297.41,1210.44 1298,1210.44 1298.58,1210.44 1299.17,1210.44 1299.76,1210.44 1300.34,1210.44 1300.93,1210.44 1301.52,1210.44 1302.1,1210.44 1302.69,1210.44 1303.27,1210.44 1303.86,1210.44 1304.45,1210.44 1305.03,1210.44 1305.62,1210.44 1306.21,1210.44 1306.79,1210.44 1307.38,1210.44 1307.97,1210.44 1308.55,1210.44 1309.14,1210.44 1309.73,1210.44 1310.31,1210.44 1310.9,1210.44 1311.48,1210.44 1312.07,1210.44 1312.66,1210.44 1313.24,1210.44 1313.83,1210.44 1314.42,1210.44 1315,1210.44 1315.59,1210.44 1316.18,1210.44 1316.76,1210.44 1317.35,1210.44 1317.93,1210.44 1318.52,1210.44 1319.11,1210.44 1319.69,1210.44 1320.28,1210.44 1320.87,1210.44 1321.45,1210.44 1322.04,1210.44 1322.63,1210.44 1323.21,1210.44 1323.8,1210.44 1324.39,1210.44 1324.97,1210.44 1325.56,1210.44 1326.14,1210.44 1326.73,1210.44 1327.32,1210.44 1327.9,1210.44 1328.49,1210.44 1329.08,1210.44 1329.66,1210.44 1330.25,1210.44 1330.84,1210.44 1331.42,1210.44 1332.01,1210.44 1332.6,1210.44 1333.18,1210.44 1333.77,1210.44 1334.35,1210.44 1334.94,1210.44 1335.53,1210.44 1336.11,1210.44 1336.7,1210.44 1337.29,1210.44 1337.87,1210.44 1338.46,1210.44 1339.05,1210.44 1339.63,1210.44 1340.22,1210.44 1340.8,1210.44 1341.39,1210.44 1341.98,1210.44 1342.56,1210.44 1343.15,1210.44 1343.74,1210.44 1344.32,1210.44 1344.91,1210.44 1345.5,1210.44 1346.08,1210.44 1346.67,1210.44 1347.26,1210.44 1347.84,1210.44 1348.43,1210.44 1349.01,1210.44 1349.6,1210.44 1350.19,1210.44 1350.77,1210.44 1351.36,1210.44 1351.95,1210.44 1352.53,1210.44 1353.12,1210.44 1353.71,1210.44 1354.29,1210.44 1354.88,1210.44 1355.47,1210.44 1356.05,1210.44 1356.64,1210.44 1357.22,1210.44 1357.81,1210.44 1358.4,1210.44 1358.98,1210.44 1359.57,1210.44 1360.16,1210.44 1360.74,1210.44 1361.33,1210.44 1361.92,1210.44 1362.5,1210.44 1363.09,1210.44 1363.68,1210.44 1364.26,1210.44 1364.85,1210.44 1365.43,1210.44 1366.02,1210.44 1366.61,1210.44 1367.19,1210.44 1367.78,1210.44 1368.37,1210.44 1368.95,1210.44 1369.54,1210.44 1370.13,1210.44 1370.71,1210.44 1371.3,1210.44 1371.88,1210.44 1372.47,1210.44 1373.06,1210.44 1373.64,1210.44 1374.23,1210.44 1374.82,1210.44 1375.4,1210.44 1375.99,1210.44 1376.58,1210.44 1377.16,1210.44 1377.75,1210.44 1378.34,1210.44 1378.92,1210.44 1379.51,1210.44 1380.09,1210.44 1380.68,1210.44 1381.27,1210.44 1381.85,1210.44 1382.44,1210.44 1383.03,1210.44 1383.61,1210.44 1384.2,1210.44 1384.79,1210.44 1385.37,1210.44 1385.96,1210.44 1386.55,1210.44 1387.13,1210.44 1387.72,1210.44 1388.3,1210.44 1388.89,1210.44 1389.48,1210.44 1390.06,1210.44 1390.65,1210.44 1391.24,1210.44 1391.82,1210.44 1392.41,1210.44 1393,1210.44 1393.58,1210.44 1394.17,1210.44 1394.75,1210.44 1395.34,1210.44 1395.93,1210.44 1396.51,1210.44 1397.1,1210.44 1397.69,1210.44 1398.27,1210.44 1398.86,1210.44 1399.45,1210.44 1400.03,1210.44 1400.62,1210.44 1401.21,1210.44 1401.79,1210.44 1402.38,1210.44 1402.96,1210.44 1403.55,1210.44 1404.14,1210.44 1404.72,1210.44 1405.31,1210.44 1405.9,1210.44 1406.48,1210.44 1407.07,1210.44 1407.66,1210.44 1408.24,1210.44 1408.83,1210.44 1409.42,1210.44 1410,1210.44 1410.59,1210.44 1411.17,1210.44 1411.76,1210.44 1412.35,1210.44 1412.93,1210.44 1413.52,1210.44 1414.11,1210.44 1414.69,1210.44 1415.28,1210.44 1415.87,1210.44 1416.45,1210.44 1417.04,1210.44 1417.63,1210.44 1418.21,1210.44 1418.8,1210.44 1419.38,1210.44 1419.97,1210.44 1420.56,1210.44 1421.14,1210.44 1421.73,1210.44 1422.32,1210.44 1422.9,1210.44 1423.49,1210.44 1424.08,1210.44 1424.66,1210.44 1425.25,1210.44 1425.83,1210.44 1426.42,1210.44 1427.01,1210.44 1427.59,1210.44 1428.18,1210.44 1428.77,1210.44 1429.35,1210.44 1429.94,1210.44 1430.53,1210.44 1431.11,1210.44 1431.7,1210.44 1432.29,1210.44 1432.87,1210.44 1433.46,1210.44 1434.04,1210.44 1434.63,1210.44 1435.22,1210.44 1435.8,1210.44 1436.39,1210.44 1436.98,1210.44 1437.56,1210.44 1438.15,1210.44 1438.74,1210.44 1439.32,1210.44 1439.91,1210.44 1440.5,1210.44 1441.08,1210.44 1441.67,1210.44 1442.25,1210.44 1442.84,1210.44 1443.43,1210.44 1444.01,1210.44 1444.6,1210.44 1445.19,1210.44 1445.77,1210.44 1446.36,1210.44 1446.95,1210.44 1447.53,1210.44 1448.12,1210.44 1448.7,1210.44 1449.29,1210.44 1449.88,1210.44 1450.46,1210.44 1451.05,1210.44 1451.64,1210.44 1452.22,1210.44 1452.81,1210.44 1453.4,1210.44 1453.98,1210.44 1454.57,1210.44 1455.16,1210.44 1455.74,1210.44 1456.33,1210.44 1456.91,1210.44 1457.5,1210.44 1458.09,1210.44 1458.67,1210.44 1459.26,1210.44 1459.85,1210.44 1460.43,1210.44 1461.02,1210.44 1461.61,1210.44 1462.19,1210.44 1462.78,1210.44 1463.37,1210.44 1463.95,1210.44 1464.54,1210.44 1465.12,1210.44 1465.71,1210.44 1466.3,1210.44 1466.88,1210.44 1467.47,1210.44 1468.06,1210.44 1468.64,1210.44 1469.23,1210.44 1469.82,1210.44 1470.4,1210.44 1470.99,1210.44 1471.57,1210.44 1472.16,1210.44 1472.75,1210.44 1473.33,1210.44 1473.92,1210.44 1474.51,1210.44 1475.09,1210.44 1475.68,1210.44 1476.27,1210.44 1476.85,1210.44 1477.44,1210.44 1478.03,1210.44 1478.61,1210.44 1479.2,1210.44 1479.78,1210.44 1480.37,1210.44 1480.96,1210.44 1481.54,1210.44 1482.13,1210.44 1482.72,1210.44 1483.3,1210.44 1483.89,1210.44 1484.48,1210.44 1485.06,1210.44 1485.65,1210.44 1486.24,1210.44 1486.82,1210.44 1487.41,1210.44 1487.99,1210.44 1488.58,1210.44 1489.17,1210.44 1489.75,1210.44 1490.34,1210.44 1490.93,1210.44 1491.51,1210.44 1492.1,1210.44 1492.69,1210.44 1493.27,1210.44 1493.86,1210.44 1494.45,1210.44 1495.03,1210.44 1495.62,1210.44 1496.2,1210.44 1496.79,1210.44 1497.38,1210.44 1497.96,1210.44 1498.55,1210.44 1499.14,1210.44 1499.72,1210.44 1500.31,1210.44 1500.9,1210.44 1501.48,1210.44 1502.07,1210.44 1502.65,1210.44 1503.24,1210.44 1503.83,1210.44 1504.41,1210.44 1505,1210.44 1505.59,1210.44 1506.17,1210.44 1506.76,1210.44 1507.35,1210.44 1507.93,1210.44 1508.52,1210.44 1509.11,1210.44 1509.69,1210.44 1510.28,1210.44 1510.86,1210.44 1511.45,1210.44 1512.04,1210.44 1512.62,1210.44 1513.21,1210.44 1513.8,1210.44 1514.38,1210.44 1514.97,1210.44 1515.56,1210.44 1516.14,1210.44 1516.73,1210.44 1517.32,1210.44 1517.9,1210.44 1518.49,1210.44 1519.07,1210.44 1519.66,1210.44 1520.25,1210.44 1520.83,1210.44 1521.42,1210.44 1522.01,1210.44 1522.59,1210.44 1523.18,1210.44 1523.77,1210.44 1524.35,1210.44 1524.94,1210.44 1525.52,1210.44 1526.11,1210.44 1526.7,1210.44 1527.28,1210.44 1527.87,1210.44 1528.46,1210.44 1529.04,1210.44 1529.63,1210.44 1530.22,1210.44 1530.8,1210.44 1531.39,1210.44 1531.98,1210.44 1532.56,1210.44 1533.15,1210.44 1533.73,1210.44 1534.32,1210.44 1534.91,1210.44 1535.49,1210.44 1536.08,1210.44 1536.67,1210.44 1537.25,1210.44 1537.84,1210.44 1538.43,1210.44 1539.01,1210.44 1539.6,1210.44 1540.19,1210.44 1540.77,1210.44 1541.36,1210.44 1541.94,1210.44 1542.53,1210.44 1543.12,1210.44 1543.7,1210.44 1544.29,1210.44 1544.88,1210.44 1545.46,1210.44 1546.05,1210.44 1546.64,1210.44 1547.22,1210.44 1547.81,1210.44 1548.4,1210.44 1548.98,1210.44 1549.57,1210.44 1550.15,1210.44 1550.74,1210.44 1551.33,1210.44 1551.91,1210.44 1552.5,1210.44 1553.09,1210.44 1553.67,1210.44 1554.26,1210.44 1554.85,1210.44 1555.43,1210.44 1556.02,1210.44 1556.6,1210.44 1557.19,1210.44 1557.78,1210.44 1558.36,1210.44 1558.95,1210.44 1559.54,1210.44 1560.12,1210.44 1560.71,1210.44 1561.3,1210.44 1561.88,1210.44 1562.47,1210.44 1563.06,1210.44 1563.64,1210.44 1564.23,1210.44 1564.81,1210.44 1565.4,1210.44 1565.99,1210.44 1566.57,1210.44 1567.16,1210.44 1567.75,1210.44 1568.33,1210.44 1568.92,1210.44 1569.51,1210.44 1570.09,1210.44 1570.68,1210.44 1571.27,1210.44 1571.85,1210.44 1572.44,1210.44 1573.02,1210.44 1573.61,1210.44 1574.2,1210.44 1574.78,1210.44 1575.37,1210.44 1575.96,1210.44 1576.54,1210.44 1577.13,1210.44 1577.72,1210.44 1578.3,1210.44 1578.89,1210.44 1579.47,1210.44 1580.06,1210.44 1580.65,1210.44 1581.23,1210.44 1581.82,1210.44 1582.41,1210.44 1582.99,1210.44 1583.58,1210.44 1584.17,1210.44 1584.75,1210.44 1585.34,1210.44 1585.93,1210.44 1586.51,1210.44 1587.1,1210.44 1587.68,1210.44 1588.27,1210.44 1588.86,1210.44 1589.44,1210.44 1590.03,1210.44 1590.62,1210.44 1591.2,1210.44 1591.79,1210.44 1592.38,1210.44 1592.96,1210.44 1593.55,1210.44 1594.14,1210.44 1594.72,1210.44 1595.31,1210.44 1595.89,1210.44 1596.48,1210.44 1597.07,1210.44 1597.65,1210.44 1598.24,1210.44 1598.83,1210.44 1599.41,1210.44 1600,1210.44 1600.59,1210.44 1601.17,1210.44 1601.76,1210.44 1602.34,1210.44 1602.93,1210.44 1603.52,1210.44 1604.1,1210.44 1604.69,1210.44 1605.28,1210.44 1605.86,1210.44 1606.45,1210.44 1607.04,1210.44 1607.62,1210.44 1608.21,1210.44 1608.8,1210.44 1609.38,1210.44 1609.97,1210.44 1610.55,1210.44 1611.14,1210.44 1611.73,1210.44 1612.31,1210.44 1612.9,1210.44 1613.49,1210.44 1614.07,1210.44 1614.66,1210.44 1615.25,1210.44 1615.83,1210.44 1616.42,1210.44 1617.01,1210.44 1617.59,1210.44 1618.18,1210.44 1618.76,1210.44 1619.35,1210.44 1619.94,1210.44 1620.52,1210.44 1621.11,1210.44 1621.7,1210.44 1622.28,1210.44 1622.87,1210.44 1623.46,1210.44 1624.04,1210.44 1624.63,1210.44 1625.22,1210.44 1625.8,1210.44 1626.39,1210.44 1626.97,1210.44 1627.56,1210.44 1628.15,1210.44 1628.73,1210.44 1629.32,1210.44 1629.91,1210.44 1630.49,1210.44 1631.08,1210.44 1631.67,1210.44 1632.25,1210.44 1632.84,1210.44 1633.42,1210.44 1634.01,1210.44 1634.6,1210.44 1635.18,1210.44 1635.77,1210.44 1636.36,1210.44 1636.94,1210.44 1637.53,1210.44 1638.12,1210.44 1638.7,1210.44 1639.29,1210.44 1639.88,1210.44 1640.46,1210.44 1641.05,1210.44 1641.63,1210.44 1642.22,1210.44 1642.81,1210.44 1643.39,1210.44 1643.98,1210.44 1644.57,1210.44 1645.15,1210.44 1645.74,1210.44 1646.33,1210.44 1646.91,1210.44 1647.5,1210.44 1648.09,1210.44 1648.67,1210.44 1649.26,1210.44 1649.84,1210.44 1650.43,1210.44 1651.02,1210.44 1651.6,1210.44 1652.19,1210.44 1652.78,1210.44 1653.36,1210.44 1653.95,1210.44 1654.54,1210.44 1655.12,1210.44 1655.71,1210.44 1656.29,1210.44 1656.88,1210.44 1657.47,1210.44 1658.05,1210.44 1658.64,1210.44 1659.23,1210.44 1659.81,1210.44 1660.4,1210.44 1660.99,1210.44 1661.57,1210.44 1662.16,1210.44 1662.75,1210.44 1663.33,1210.44 1663.92,1210.44 1664.5,1210.44 1665.09,1210.44 1665.68,1210.44 1666.26,1210.44 1666.85,1210.44 1667.44,1210.44 1668.02,1210.44 1668.61,1210.44 1669.2,1210.44 1669.78,1210.44 1670.37,1210.44 1670.96,1210.44 1671.54,1210.44 1672.13,1210.44 1672.71,1210.44 1673.3,1210.44 1673.89,1210.44 1674.47,1210.44 1675.06,1210.44 1675.65,1210.44 1676.23,1210.44 1676.82,1210.44 1677.41,1210.44 1677.99,1210.44 1678.58,1210.44 1679.17,1210.44 1679.75,1210.44 1680.34,1210.44 1680.92,1210.44 1681.51,1210.44 1682.1,1210.44 1682.68,1210.44 1683.27,1210.44 1683.86,1210.44 1684.44,1210.44 1685.03,1210.44 1685.62,1210.44 1686.2,1210.44 1686.79,1210.44 1687.37,1210.44 1687.96,1210.44 1688.55,1210.44 1689.13,1210.44 1689.72,1210.44 1690.31,1210.44 1690.89,1210.44 1691.48,1210.44 1692.07,1210.44 1692.65,1210.44 1693.24,1210.44 1693.83,1210.44 1694.41,1210.44 1695,1210.44 1695.58,1210.44 1696.17,1210.44 1696.76,1210.44 1697.34,1210.44 1697.93,1210.44 1698.52,1210.44 1699.1,1210.44 1699.69,1210.44 1700.28,1210.44 1700.86,1210.44 1701.45,1210.44 1702.04,1210.44 1702.62,1210.44 1703.21,1210.44 1703.79,1210.44 1704.38,1210.44 1704.97,1210.44 1705.55,1210.44 1706.14,1210.44 1706.73,1210.44 1707.31,1210.44 1707.9,1210.44 1708.49,1210.44 1709.07,1210.44 1709.66,1210.44 1710.24,1210.44 1710.83,1210.44 1711.42,1210.44 1712,1210.44 1712.59,1210.44 1713.18,1210.44 1713.76,1210.44 1714.35,1210.44 1714.94,1210.44 1715.52,1210.44 1716.11,1210.44 1716.7,1210.44 1717.28,1210.44 1717.87,1210.44 1718.45,1210.44 1719.04,1210.44 1719.63,1210.44 1720.21,1210.44 1720.8,1210.44 1721.39,1210.44 1721.97,1210.44 1722.56,1210.44 1723.15,1210.44 1723.73,1210.44 1724.32,1210.44 1724.91,1210.44 1725.49,1210.44 1726.08,1210.44 1726.66,1210.44 1727.25,1210.44 1727.84,1210.44 1728.42,1210.44 1729.01,1210.44 1729.6,1210.44 1730.18,1210.44 1730.77,1210.44 1731.36,1210.44 1731.94,1210.44 1732.53,1210.44 1733.11,1210.44 1733.7,1210.44 1734.29,1210.44 1734.87,1210.44 1735.46,1210.44 1736.05,1210.44 1736.63,1210.44 1737.22,1210.44 1737.81,1210.44 1738.39,1210.44 1738.98,1210.44 1739.57,1210.44 1740.15,1210.44 1740.74,1210.44 1741.32,1210.44 1741.91,1210.44 1742.5,1210.44 1743.08,1210.44 1743.67,1210.44 1744.26,1210.44 1744.84,1210.44 1745.43,1210.44 1746.02,1210.44 1746.6,1210.44 1747.19,1210.44 1747.78,1210.44 1748.36,1210.44 1748.95,1210.44 1749.53,1210.44 1750.12,1210.44 1750.71,1210.44 1751.29,1210.44 1751.88,1210.44 1752.47,1210.44 1753.05,1210.44 1753.64,1210.44 1754.23,1210.44 1754.81,1210.44 1755.4,1210.44 1755.99,1210.44 1756.57,1210.44 1757.16,1210.44 1757.74,1210.44 1758.33,1210.44 1758.92,1210.44 1759.5,1210.44 1760.09,1210.44 1760.68,1210.44 1761.26,1210.44 1761.85,1210.44 1762.44,1210.44 1763.02,1210.44 1763.61,1210.44 1764.19,1210.44 1764.78,1210.44 1765.37,1210.44 1765.95,1210.44 1766.54,1210.44 1767.13,1210.44 1767.71,1210.44 1768.3,1210.44 1768.89,1210.44 1769.47,1210.44 1770.06,1210.44 1770.65,1210.44 1771.23,1210.44 1771.82,1210.44 1772.4,1210.44 1772.99,1210.44 1773.58,1210.44 1774.16,1210.44 1774.75,1210.44 1775.34,1210.44 1775.92,1210.44 1776.51,1210.44 1777.1,1210.44 1777.68,1210.44 1778.27,1210.44 1778.86,1210.44 1779.44,1210.44 1780.03,1210.44 1780.61,1210.44 1781.2,1210.44 1781.79,1210.44 1782.37,1210.44 1782.96,1210.44 1783.55,1210.44 1784.13,1210.44 1784.72,1210.44 1785.31,1210.44 1785.89,1210.44 1786.48,1210.44 1787.06,1210.44 1787.65,1210.44 1788.24,1210.44 1788.82,1210.44 1789.41,1210.44 1790,1210.44 1790.58,1210.44 1791.17,1210.44 1791.76,1210.44 1792.34,1210.44 1792.93,1210.44 1793.52,1210.44 1794.1,1210.44 1794.69,1210.44 1795.27,1210.44 1795.86,1210.44 1796.45,1210.44 1797.03,1210.44 1797.62,1210.44 1798.21,1210.44 1798.79,1210.44 1799.38,1210.44 1799.97,1210.44 1800.55,1210.44 1801.14,1210.44 1801.73,1210.44 1802.31,1210.44 1802.9,1210.44 1803.48,1210.44 1804.07,1210.44 1804.66,1210.44 1805.24,1210.44 1805.83,1210.44 1806.42,1210.44 1807,1210.44 1807.59,1210.44 1808.18,1210.44 1808.76,1210.44 1809.35,1210.44 1809.94,1210.44 1810.52,1210.44 1811.11,1210.44 1811.69,1210.44 1812.28,1210.44 1812.87,1210.44 1813.45,1210.44 1814.04,1210.44 1814.63,1210.44 1815.21,1210.44 1815.8,1210.44 1816.39,1210.44 1816.97,1210.44 1817.56,1210.44 1818.14,1210.44 1818.73,1210.44 1819.32,1210.44 1819.9,1210.44 1820.49,1210.44 1821.08,1210.44 1821.66,1210.44 1822.25,1210.44 1822.84,1210.44 1823.42,1210.44 1824.01,1210.44 1824.6,1210.44 1825.18,1210.44 1825.77,1210.44 1826.35,1210.44 1826.94,1210.44 1827.53,1210.44 1828.11,1210.44 1828.7,1210.44 1829.29,1210.44 1829.87,1210.44 1830.46,1210.44 1831.05,1210.44 1831.63,1210.44 1832.22,1210.44 1832.81,1210.44 1833.39,1210.44 1833.98,1210.44 1834.56,1210.44 1835.15,1210.44 1835.74,1210.44 1836.32,1210.44 1836.91,1210.44 1837.5,1210.44 1838.08,1210.44 1838.67,1210.44 1839.26,1210.44 1839.84,1210.44 1840.43,1210.44 1841.01,1210.44 1841.6,1210.44 1842.19,1210.44 1842.77,1210.44 1843.36,1210.44 1843.95,1210.44 1844.53,1210.44 1845.12,1210.44 1845.71,1210.44 1846.29,1210.44 1846.88,1210.44 1847.47,1210.44 1848.05,1210.44 1848.64,1210.44 1849.22,1210.44 1849.81,1210.44 1850.4,1210.44 1850.98,1210.44 1851.57,1210.44 1852.16,1210.44 1852.74,1210.44 1853.33,1210.44 1853.92,1210.44 1854.5,1210.44 1855.09,1210.44 1855.68,1210.44 1856.26,1210.44 1856.85,1210.44 1857.43,1210.44 1858.02,1210.44 1858.61,1210.44 1859.19,1210.44 1859.78,1210.44 1860.37,1210.44 1860.95,1210.44 1861.54,1210.44 1862.13,1210.44 1862.71,1210.44 1863.3,1210.44 1863.88,1210.44 1864.47,1210.44 1865.06,1210.44 1865.64,1210.44 1866.23,1210.44 1866.82,1210.44 1867.4,1210.44 1867.99,1210.44 1868.58,1210.44 1869.16,1210.44 1869.75,1210.44 1870.34,1210.44 1870.92,1210.44 1871.51,1210.44 1872.09,1210.44 1872.68,1210.44 1873.27,1210.44 1873.85,1210.44 1874.44,1210.44 1875.03,1210.44 1875.61,1210.44 1876.2,1210.44 1876.79,1210.44 1877.37,1210.44 1877.96,1210.44 1878.55,1210.44 1879.13,1210.44 1879.72,1210.44 1880.3,1210.44 1880.89,1210.44 1881.48,1210.44 1882.06,1210.44 1882.65,1210.44 1883.24,1210.44 1883.82,1210.44 1884.41,1210.44 1885,1210.44 1885.58,1210.44 1886.17,1210.44 1886.76,1210.44 1887.34,1210.44 1887.93,1210.44 1888.51,1210.44 1889.1,1210.44 1889.69,1210.44 1890.27,1210.44 1890.86,1210.44 1891.45,1210.44 1892.03,1210.44 1892.62,1210.44 1893.21,1210.44 1893.79,1210.44 1894.38,1210.44 1894.96,1210.44 1895.55,1210.44 1896.14,1210.44 1896.72,1210.44 1897.31,1210.44 1897.9,1210.44 1898.48,1210.44 1899.07,1210.44 1899.66,1210.44 1900.24,1210.44 1900.83,1210.44 1901.42,1210.44 1902,1210.44 1902.59,1210.44 1903.17,1210.44 1903.76,1210.44 1904.35,1210.44 1904.93,1210.44 1905.52,1210.44 1906.11,1210.44 1906.69,1210.44 1907.28,1210.44 1907.87,1210.44 1908.45,1210.44 1909.04,1210.44 1909.63,1210.44 1910.21,1210.44 1910.8,1210.44 1911.38,1210.44 1911.97,1210.44 1912.56,1210.44 1913.14,1210.44 1913.73,1210.44 1914.32,1210.44 1914.9,1210.44 1915.49,1210.44 1916.08,1210.44 1916.66,1210.44 1917.25,1210.44 1917.83,1210.44 1918.42,1210.44 1919.01,1210.44 1919.59,1210.44 1920.18,1210.44 1920.77,1210.44 1921.35,1210.44 1921.94,1210.44 1922.53,1210.44 1923.11,1210.44 1923.7,1210.44 1924.29,1210.44 1924.87,1210.44 1925.46,1210.44 1926.04,1210.44 1926.63,1210.44 1927.22,1210.44 1927.8,1210.44 1928.39,1210.44 1928.98,1210.44 1929.56,1210.44 1930.15,1210.44 1930.74,1210.44 1931.32,1210.44 1931.91,1210.44 1932.5,1210.44 1933.08,1210.44 1933.67,1210.44 1934.25,1210.44 1934.84,1210.44 1935.43,1210.44 1936.01,1210.44 1936.6,1210.44 1937.19,1210.44 1937.77,1210.44 1938.36,1210.44 1938.95,1210.44 1939.53,1210.44 1940.12,1210.44 1940.71,1210.44 1941.29,1210.44 1941.88,1210.44 1942.46,1210.44 1943.05,1210.44 1943.64,1210.44 1944.22,1210.44 1944.81,1210.44 1945.4,1210.44 1945.98,1210.44 1946.57,1210.44 1947.16,1210.44 1947.74,1210.44 1948.33,1210.44 1948.91,1210.44 1949.5,1210.44 1950.09,1210.44 1950.67,1210.44 1951.26,1210.44 1951.85,1210.44 1952.43,1210.44 1953.02,1210.44 1953.61,1210.44 1954.19,1210.44 1954.78,1210.44 1955.37,1210.44 1955.95,1210.44 1956.54,1210.44 1957.12,1210.44 1957.71,1210.44 1958.3,1210.44 1958.88,1210.44 1959.47,1210.44 1960.06,1210.44 1960.64,1210.44 1961.23,1210.44 1961.82,1210.44 1962.4,1210.44 1962.99,1210.44 1963.58,1210.44 1964.16,1210.44 1964.75,1210.44 1965.33,1210.44 1965.92,1210.44 1966.51,1210.44 1967.09,1210.44 1967.68,1210.44 1968.27,1210.44 1968.85,1210.44 1969.44,1210.44 1970.03,1210.44 1970.61,1210.44 1971.2,1210.44 1971.78,1210.44 1972.37,1210.44 1972.96,1210.44 1973.54,1210.44 1974.13,1210.44 1974.72,1210.44 1975.3,1210.44 1975.89,1210.44 1976.48,1210.44 1977.06,1210.44 1977.65,1210.44 1978.24,1210.44 1978.82,1210.44 1979.41,1210.44 1979.99,1210.44 1980.58,1210.44 1981.17,1210.44 1981.75,1210.44 1982.34,1210.44 1982.93,1210.44 1983.51,1210.44 1984.1,1210.44 1984.69,1210.44 1985.27,1210.44 1985.86,1210.44 1986.45,1210.44 1987.03,1210.44 1987.62,1210.44 1988.2,1210.44 1988.79,1210.44 1989.38,1210.44 1989.96,1210.44 1990.55,1210.44 1991.14,1210.44 1991.72,1210.44 1992.31,1210.44 1992.9,1210.44 1993.48,1210.44 1994.07,1210.44 1994.65,1210.44 1995.24,1210.44 1995.83,1210.44 1996.41,1210.44 1997,1210.44 1997.59,1210.44 1998.17,1210.44 1998.76,1210.44 1999.35,1210.44 1999.93,1210.44 2000.52,1210.44 2001.11,1210.44 2001.69,1210.44 2002.28,1210.44 2002.86,1210.44 2003.45,1210.44 2004.04,1210.44 2004.62,1210.44 2005.21,1210.44 2005.8,1210.44 2006.38,1210.44 2006.97,1210.44 2007.56,1210.44 2008.14,1210.44 2008.73,1210.44 2009.32,1210.44 2009.9,1210.44 2010.49,1210.44 2011.07,1210.44 2011.66,1210.44 2012.25,1210.44 2012.83,1210.44 2013.42,1210.44 2014.01,1210.44 2014.59,1210.44 2015.18,1210.44 2015.77,1210.44 2016.35,1210.44 2016.94,1210.44 2017.53,1210.44 2018.11,1210.44 2018.7,1210.44 2019.28,1210.44 2019.87,1210.44 2020.46,1210.44 2021.04,1210.44 2021.63,1210.44 2022.22,1210.44 2022.8,1210.44 2023.39,1210.44 2023.98,1210.44 2024.56,1210.44 2025.15,1210.44 2025.73,1210.44 2026.32,1210.44 2026.91,1210.44 2027.49,1210.44 2028.08,1210.44 2028.67,1210.44 2029.25,1210.44 2029.84,1210.44 2030.43,1210.44 2031.01,1210.44 2031.6,1210.44 2032.19,1210.44 2032.77,1210.44 2033.36,1210.44 2033.94,1210.44 2034.53,1210.44 2035.12,1210.44 2035.7,1210.44 2036.29,1210.44 2036.88,1210.44 2037.46,1210.44 2038.05,1210.44 2038.64,1210.44 2039.22,1210.44 2039.81,1210.44 2040.4,1210.44 2040.98,1210.44 2041.57,1210.44 2042.15,1210.44 2042.74,1210.44 2043.33,1210.44 2043.91,1210.44 2044.5,1210.44 2045.09,1210.44 2045.67,1210.44 2046.26,1210.44 2046.85,1210.44 2047.43,1210.44 2048.02,1210.44 2048.6,1210.44 2049.19,1210.44 2049.78,1210.44 2050.36,1210.44 2050.95,1210.44 2051.54,1210.44 2052.12,1210.44 2052.71,1210.44 2053.3,1210.44 2053.88,1210.44 2054.47,1210.44 2055.06,1210.44 2055.64,1210.44 2056.23,1210.44 2056.81,1210.44 2057.4,1210.44 2057.99,1210.44 2058.57,1210.44 2059.16,1210.44 2059.75,1210.44 2060.33,1210.44 2060.92,1210.44 2061.51,1210.44 2062.09,1210.44 2062.68,1210.44 2063.27,1210.44 2063.85,1210.44 2064.44,1210.44 2065.02,1210.44 2065.61,1210.44 2066.2,1210.44 2066.78,1210.44 2067.37,1210.44 2067.96,1210.44 2068.54,1210.44 2069.13,1210.44 2069.72,1210.44 2070.3,1210.44 2070.89,1210.44 2071.48,1210.44 2072.06,1210.44 2072.65,1210.44 2073.23,1210.44 2073.82,1210.44 2074.41,1210.44 2074.99,1210.44 2075.58,1210.44 2076.17,1210.44 2076.75,1210.44 2077.34,1210.44 2077.93,1210.44 2078.51,1210.44 2079.1,1210.44 2079.68,1210.44 2080.27,1210.44 2080.86,1210.44 2081.44,1210.44 2082.03,1210.44 2082.62,1210.44 2083.2,1210.44 2083.79,1210.44 2084.38,1210.44 2084.96,1210.44 2085.55,1210.44 2086.14,1210.44 2086.72,1210.44 2087.31,1210.44 2087.89,1210.44 2088.48,1210.44 2089.07,1210.44 2089.65,1210.44 2090.24,1210.44 2090.83,1210.44 2091.41,1210.44 2092,1210.44 2092.59,1210.44 2093.17,1210.44 2093.76,1210.44 2094.35,1210.44 2094.93,1210.44 2095.52,1210.44 2096.1,1210.44 2096.69,1210.44 2097.28,1210.44 2097.86,1210.44 2098.45,1210.44 2099.04,1210.44 2099.62,1210.44 2100.21,1210.44 2100.8,1210.44 2101.38,1210.44 2101.97,1210.44 2102.55,1210.44 2103.14,1210.44 2103.73,1210.44 2104.31,1210.44 2104.9,1210.44 2105.49,1210.44 2106.07,1210.44 2106.66,1210.44 2107.25,1210.44 2107.83,1210.44 2108.42,1210.44 2109.01,1210.44 2109.59,1210.44 2110.18,1210.44 2110.76,1210.44 2111.35,1210.44 2111.94,1210.44 2112.52,1210.44 2113.11,1210.44 2113.7,1210.44 2114.28,1210.44 2114.87,1210.44 2115.46,1210.44 2116.04,1210.44 2116.63,1210.44 2117.22,1210.44 2117.8,1210.44 2118.39,1210.44 2118.97,1210.44 2119.56,1210.44 2120.15,1210.44 2120.73,1210.44 2121.32,1210.44 2121.91,1210.44 2122.49,1210.44 2123.08,1210.44 2123.67,1210.44 2124.25,1210.44 2124.84,1210.44 2125.42,1210.44 2126.01,1210.44 2126.6,1210.44 2127.18,1210.44 2127.77,1210.44 2128.36,1210.44 2128.94,1210.44 2129.53,1210.44 2130.12,1210.44 2130.7,1210.44 2131.29,1210.44 2131.88,1210.44 2132.46,1210.44 2133.05,1210.44 2133.63,1210.44 2134.22,1210.44 2134.81,1210.44 2135.39,1210.44 2135.98,1210.44 2136.57,1210.44 2137.15,1210.44 2137.74,1210.44 2138.33,1210.44 2138.91,1210.44 2139.5,1210.44 2140.09,1210.44 2140.67,1210.44 2141.26,1210.44 2141.84,1210.44 2142.43,1210.44 2143.02,1210.44 2143.6,1210.44 2144.19,1210.44 2144.78,1210.44 2145.36,1210.44 2145.95,1210.44 2146.54,1210.44 2147.12,1210.44 2147.71,1210.44 2148.3,1210.44 2148.88,1210.44 2149.47,1210.44 2150.05,1210.44 2150.64,1210.44 2151.23,1210.44 2151.81,1210.44 2152.4,1210.44 2152.99,1210.44 2153.57,1210.44 2154.16,1210.44 2154.75,1210.44 2155.33,1210.44 2155.92,1210.44 2156.5,1210.44 2157.09,1210.44 2157.68,1210.44 2158.26,1210.44 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.78,1192.04 1399.77,899.083 \"/>\n<polyline clip-path=\"url(#clip302)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.46 985.439,1192.04 2158.26,1192.04 2158.26,1228.46 985.439,1228.46 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip300)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip303\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip300)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip300)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip300)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip303)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1471.99 162.114,-2776.15 162.673,-3979.24 163.232,-3745.23 163.792,-4842.26 164.351,-5819.49 164.91,-6729.14 165.469,-7532.68 166.029,-8293.52 166.588,-7954.79 167.147,-7680.72 167.706,-7492.97 168.266,-8133.28 168.825,-8712.58 169.384,-9226.09 169.943,-9717.7 170.503,-10144.6 171.062,-10543.9 171.621,-9713.56 172.18,-10044 172.74,-10360.4 173.299,-10628.4 173.858,-10849.3 174.417,-11042.8 174.977,-11200.8 175.536,-10949.6 176.095,-10702 176.655,-10811 177.214,-10568.4 177.773,-10344.1 178.332,-10417.1 178.892,-10458 179.451,-10474.3 180.01,-10475.7 180.569,-10017 181.129,-9994.36 181.688,-9955.65 182.247,-9912.22 182.806,-9661.97 183.366,-9574.31 183.925,-9330.49 184.484,-9252.25 185.043,-9155.77 185.603,-8926.74 186.162,-8700.04 186.721,-8456.34 187.28,-8004.6 187.84,-7784.29 188.399,-7665.21 188.958,-7450.18 189.517,-7343.78 190.077,-7133.4 190.636,-6937.14 191.195,-6730.32 191.754,-6619.93 192.314,-6499.64 192.873,-6385.63 193.432,-6269.13 193.991,-6150.53 194.551,-5967.51 195.11,-5784.67 195.669,-5368.84 196.228,-5027.57 196.788,-4868.53 197.347,-4713.28 197.906,-4558.94 198.465,-4408.68 199.025,-4272.59 199.584,-4182.78 200.143,-4037.72 200.702,-3895.41 201.262,-3676.3 201.821,-3543.62 202.38,-3459.71 202.939,-3373.09 203.499,-3247.46 204.058,-3159.44 204.617,-3039.89 205.176,-2927.02 205.736,-2813.56 206.295,-2633.96 206.854,-2358.08 207.413,-2195.91 207.973,-2073.31 208.532,-2016.81 209.091,-1871.34 209.65,-1786.15 210.21,-1616.22 210.769,-1484.92 211.328,-1413.56 211.887,-1344.36 212.447,-1277.31 213.006,-1207.8 213.565,-1138.61 214.124,-1024.93 214.684,-962.828 215.243,-899.291 215.802,-839.226 216.361,-759.136 216.921,-702.342 217.48,-675.201 218.039,-641.998 218.598,-584.761 219.158,-508.605 219.717,-480.249 220.276,-450.34 220.835,-352.165 221.395,-327.72 221.954,-276.038 222.513,-247.514 223.072,-221.716 223.632,-196.547 224.191,-149.197 224.75,-104.344 225.309,-56.9085 225.869,6.34366 226.428,28.6276 226.987,70.6831 227.546,154.261 228.106,195.283 228.665,250.24 229.224,286.218 229.783,300.475 230.343,317.239 230.902,349.296 231.461,402.599 232.02,507.244 232.58,494.38 233.139,503.148 233.698,550.563 234.257,574.103 234.817,576.712 235.376,655.683 235.935,716.688 236.494,716.957 237.054,752.784 237.613,768.498 238.172,783.976 238.731,815.423 239.291,845.46 239.85,853.952 240.409,864.53 240.968,859.447 241.528,894.894 242.087,907.227 242.646,937.229 243.205,983.313 243.765,986.236 244.324,995.746 244.883,1019.08 245.442,1008.67 246.002,945.699 246.561,992.999 247.12,1004.38 247.679,1064.24 248.239,1035.56 248.798,1025.41 249.357,1053.09 249.916,1042.19 250.476,1047.4 251.035,1056.37 251.594,1007.07 252.153,982.792 252.713,977.268 253.272,955.717 253.831,987.338 254.39,1014.71 254.95,1041.66 255.509,1034.92 256.068,1027.51 256.627,1051.78 257.187,1023.26 257.746,998.266 258.305,1010.29 258.864,1022.55 259.424,1032.27 259.983,1057.2 260.542,1063.45 261.101,1091.01 261.661,1095.68 262.22,1085.7 262.779,1079.74 263.338,1036.16 263.898,1048.15 264.457,1093.68 265.016,1100.13 265.575,1090 266.135,1097.99 266.694,1117.72 267.253,1159.57 267.812,1163.8 268.372,1117.83 268.931,1090.71 269.49,1096.09 270.049,1067.75 270.609,1125.02 271.168,1129.74 271.727,1117.58 272.286,1087.23 272.846,1060.69 273.405,1055.22 273.964,1030.22 274.523,1021.82 275.083,1017.06 275.642,971.973 276.201,983.208 276.76,958.753 277.32,985.549 277.879,1013.22 278.438,1006.03 278.997,1001.91 279.557,1013.29 280.116,1023.59 280.675,1000.33 281.234,979.43 281.794,976.434 282.353,1005.84 282.912,1051.78 283.471,979.28 284.031,991.785 284.59,988.442 285.149,1002.57 285.708,987.179 286.268,982.805 286.827,994.581 287.386,1008.25 287.945,1020.78 288.505,1029.85 289.064,1070.92 289.623,1063.75 290.182,1052.25 290.742,1028.6 291.301,1040.03 291.86,1018.17 292.419,1024.94 292.979,1003.65 293.538,1014.31 294.097,1028.81 294.656,1058.1 295.216,1032.21 295.775,1057.96 296.334,1033.65 296.893,990.246 297.453,986.729 298.012,982.078 298.571,997.653 299.13,1029.63 299.69,1020.63 300.249,1015.04 300.808,975.534 301.368,1022.51 301.927,960.309 302.486,971.403 303.045,969.6 303.605,1009.87 304.164,1006.27 304.723,1002.48 305.282,996.089 305.842,1023.58 306.401,1036.5 306.96,996.688 307.519,1037.64 308.079,1028.51 308.638,1021.56 309.197,995.783 309.756,955.172 310.316,952.105 310.875,949.81 311.434,944.396 311.993,939.236 312.553,934.281 313.112,949.864 313.671,947.297 314.23,942.909 314.79,957.087 315.349,950.516 315.908,928.087 316.467,907.498 317.027,934.452 317.586,961.618 318.145,956.53 318.704,946.563 319.264,945.241 319.823,942.267 320.382,937.834 320.941,932.075 321.501,909.839 322.06,923.561 322.619,939.106 323.178,916.854 323.738,879.617 324.297,877.011 324.856,892.486 325.415,907.88 325.975,890.196 326.534,875.819 327.093,887.639 327.652,916.191 328.212,916.138 328.771,909.256 329.33,863.443 329.889,875.653 330.449,893.285 331.008,909.069 331.567,903.129 332.126,867.914 332.686,867.148 333.245,913.803 333.804,909.919 334.363,903.337 334.923,899.991 335.482,846.337 336.041,896.145 336.6,911.578 337.16,908.457 337.719,936.059 338.278,915.363 338.837,894.009 339.397,904.871 339.956,890.6 340.515,889.886 341.074,886.675 341.634,867.292 342.193,914.513 342.752,958.12 343.311,952.04 343.871,962.116 344.43,924.184 344.989,921.771 345.548,918.288 346.108,931.209 346.667,943.624 347.226,951.561 347.785,976.744 348.345,970.384 348.904,995.677 349.463,1005.45 350.022,997.177 350.582,987.625 351.141,981.181 351.7,986.551 352.259,978.407 352.819,971.657 353.378,963.257 353.937,955.575 354.496,950.405 355.056,974.225 355.615,983.213 356.174,975.084 356.733,979.565 357.293,954.752 357.852,964.136 358.411,941.64 358.97,935.835 359.53,944.153 360.089,952.886 360.648,962.131 361.207,955.556 361.767,915.394 362.326,939.593 362.885,947.342 363.444,953.033 364.004,963.387 364.563,955.535 365.122,946.039 365.681,939.651 366.241,962.612 366.8,953.888 367.359,946.026 367.918,908.199 368.478,914.995 369.037,909.616 369.596,897.642 370.155,893.866 370.715,921.999 371.274,950.543 371.833,942.082 372.392,919.204 372.952,911.762 373.511,906.135 374.07,880.524 374.629,874.551 375.189,902.236 375.748,880.749 376.307,875.45 376.866,851.011 377.426,819.45 377.985,819.094 378.544,830.347 379.103,796.039 379.663,765.574 380.222,749.644 380.781,735.366 381.34,756.986 381.9,762.805 382.459,744.877 383.018,810.764 383.577,858.993 384.137,809.9 384.696,773.5 385.255,808.01 385.814,792.381 386.374,806.311 386.933,820.559 387.492,815.383 388.051,795.725 388.611,797.067 389.17,813.297 389.729,808.259 390.288,808.818 390.848,808.001 391.407,804.762 391.966,769.693 392.525,769.971 393.085,725.322 393.644,745.173 394.203,726.304 394.762,713.697 395.322,703.456 395.881,711.947 396.44,734.666 396.999,707.495 397.559,714.856 398.118,735.446 398.677,735.745 399.236,722.127 399.796,729.783 400.355,732.383 400.914,738.385 401.473,773.566 402.033,773.201 402.592,772.005 403.151,791.817 403.71,807.94 404.27,790.031 404.829,773.05 405.388,724.859 405.947,728.724 406.507,730.367 407.066,732.309 407.625,732.842 408.184,750.816 408.744,750.152 409.303,751.086 409.862,751.061 410.421,768.23 410.981,769.787 411.54,769.509 412.099,785.977 412.658,833.41 413.218,812.911 413.777,828.256 414.336,843.081 414.895,853.629 415.455,847.585 416.014,810.552 416.573,793.82 417.132,827.174 417.692,794.128 418.251,794.188 418.81,810.642 419.369,823.859 419.929,838.43 420.488,787.371 421.047,767.085 421.606,784.091 422.166,820.401 422.725,800.134 423.284,827.435 423.843,823.129 424.403,882.974 424.962,907.106 425.521,921.263 426.08,913.667 426.64,939.874 427.199,900.034 427.758,907.042 428.318,917.017 428.877,876.925 429.436,889.942 429.995,883.29 430.555,880.981 431.114,907.132 431.673,899.337 432.232,876.47 432.792,871.086 433.351,880.115 433.91,885.037 434.469,892.799 435.029,839.142 435.588,851.28 436.147,865.974 436.706,861.852 437.266,854.402 437.825,862.388 438.384,855.107 438.943,801.483 439.503,798.501 440.062,793.096 440.621,791.965 441.18,791.85 441.74,807.339 442.299,818.984 442.858,813.591 443.417,827.736 443.977,821.316 444.536,817.546 445.095,798.381 445.654,762.866 446.214,764.735 446.773,763.324 447.332,760.752 447.891,742.737 448.451,727.249 449.01,742.946 449.569,741.389 450.128,728.315 450.688,729.845 451.247,727.731 451.806,746.695 452.365,776.003 452.925,790.819 453.484,791.53 454.043,753.663 454.602,755.377 455.162,741.323 455.721,760.162 456.28,756.123 456.839,772.066 457.399,785.898 457.958,784.125 458.517,782.262 459.076,781.457 459.636,797.882 460.195,812.972 460.754,860.134 461.313,852.846 461.873,829.598 462.432,824.889 462.991,820.91 463.55,847.745 464.11,776.052 464.669,790.492 465.228,806.226 465.787,801.798 466.347,814.422 466.906,792.057 467.465,739.272 468.024,755.862 468.584,768.793 469.143,782.116 469.702,846.227 470.261,823.082 470.821,849.75 471.38,873.605 471.939,850.644 472.498,845.492 473.058,838.526 473.617,869.283 474.176,832.778 474.735,843.243 475.295,835.707 475.854,829.804 476.413,787.898 476.972,774.333 477.532,743.586 478.091,742.065 478.65,740.074 479.209,721.549 479.769,753.509 480.328,754.537 480.887,720.598 481.446,702.89 482.006,737.818 482.565,738.083 483.124,754.061 483.683,750.863 484.243,715.912 484.802,684.159 485.361,686.123 485.92,705.261 486.48,723.583 487.039,736.428 487.598,719.622 488.157,715.735 488.717,748.931 489.276,731.819 489.835,714.022 490.394,747.705 490.954,748.245 491.513,746.156 492.072,759.965 492.631,757.296 493.191,753.26 493.75,780.949 494.309,779.376 494.868,777.347 495.428,758.747 495.987,711.641 496.546,760.618 497.105,727.635 497.665,698.15 498.224,698.787 498.783,682.688 499.342,719.78 499.902,751.62 500.461,719.657 501.02,718.057 501.579,665.764 502.139,700.108 502.698,702.298 503.257,687.362 503.816,672.128 504.376,627.949 504.935,653.035 505.494,655.156 506.053,645.144 506.613,648.88 507.172,685.448 507.731,692.028 508.29,695.375 508.85,683.596 509.409,671.604 509.968,692.719 510.527,744.839 511.087,759.404 511.646,774.498 512.205,760.055 512.764,756.148 513.324,737.765 513.883,720.63 514.442,736.612 515.001,753.598 515.561,814.111 516.12,793.17 516.679,790.645 517.238,770.603 517.798,752.348 518.357,753.827 518.916,766.124 519.475,783.355 520.035,762.059 520.594,779.476 521.153,764.71 521.712,764.001 522.272,761.754 522.831,756.411 523.39,740.788 523.949,721.329 524.509,705.743 525.068,689.586 525.627,672.358 526.186,704.745 526.746,722.332 527.305,755.993 527.864,757.305 528.423,753.212 528.983,731.768 529.542,728.042 530.101,721.172 530.66,753.53 531.22,719.912 531.779,724.593 532.338,709.884 532.897,725.825 533.457,707.318 534.016,728.928 534.575,745.888 535.134,713.371 535.694,675.07 536.253,677.416 536.812,662.981 537.371,681.905 537.931,646.273 538.49,635.648 539.049,656.468 539.608,611.506 540.168,635.801 540.727,654.408 541.286,675.604 541.845,675.017 542.405,659.584 542.964,660.387 543.523,662.674 544.082,696.332 544.642,728.049 545.201,729.013 545.76,712.526 546.319,694.204 546.879,631.495 547.438,639.707 547.997,645.731 548.556,630.17 549.116,619.216 549.675,656.339 550.234,657.743 550.793,677.313 551.353,681.176 551.912,683.355 552.471,700.374 553.031,715.255 553.59,697.845 554.149,733.116 554.708,702.877 555.268,687.274 555.827,687.042 556.386,670.848 556.945,656.558 557.505,658.127 558.064,631.964 558.623,635.31 559.182,659.432 559.742,665.725 560.301,654.636 560.86,707.252 561.419,679.053 561.979,678.454 562.538,679.48 563.097,677.668 563.656,711.463 564.216,679.408 564.775,680.212 565.334,669.217 565.893,688.985 566.453,689.266 567.012,708.598 567.571,726.546 568.13,728.098 568.69,697.21 569.249,730.395 569.808,716.372 570.367,731.893 570.927,717.468 571.486,686.675 572.045,672.872 572.604,691.026 573.164,709.851 573.723,710.3 574.282,711.588 574.841,711.268 575.401,714.709 575.96,714.849 576.519,714.975 577.078,732.333 577.638,747.181 578.197,763.479 578.756,743.114 579.315,758.654 579.875,757.589 580.434,768.682 580.993,767.482 581.552,762.765 582.112,791.588 582.671,787.925 583.23,797.264 583.789,780.594 584.349,794.32 584.908,757.182 585.467,770.951 586.026,784.672 586.586,781.143 587.145,763.668 587.704,730.289 588.263,744.603 588.823,726.847 589.382,742.853 589.941,724.627 590.5,702.045 591.06,716.23 591.619,749.11 592.178,794.218 592.737,838.486 593.297,845.303 593.856,825.196 594.415,847.106 594.974,872.701 595.534,863.764 596.093,854.092 596.652,862.383 597.211,865.899 597.771,856.144 598.33,865.842 598.889,873.973 599.448,860.911 600.008,836.294 600.567,783.704 601.126,780.331 601.685,808.604 602.245,784.014 602.804,778.925 603.363,770.479 603.922,769.09 604.482,762.893 605.041,709.967 605.6,708.684 606.159,725.468 606.719,706.24 607.278,704.941 607.837,705.671 608.396,671.624 608.956,657.745 609.515,693.002 610.074,678.222 610.633,680.875 611.193,714.276 611.752,729.659 612.311,691.095 612.87,691.93 613.43,660.998 613.989,626.714 614.548,677.548 615.107,661.847 615.667,663.854 616.226,617.543 616.785,625.039 617.344,616.803 617.904,637.249 618.463,641.021 619.022,656.506 619.581,658.857 620.141,644.94 620.7,650.876 621.259,654.174 621.818,639.469 622.378,611.461 622.937,632.109 623.496,652.596 624.055,670.286 624.615,639.242 625.174,642.708 625.733,645.989 626.292,650.475 626.852,636.35 627.411,607.057 627.97,607.92 628.529,597.588 629.089,621.91 629.648,611.023 630.207,600.136 630.766,620.257 631.326,626.515 631.885,612.673 632.444,619.147 633.003,639.533 633.563,609.801 634.122,600.057 634.681,623.404 635.24,641.696 635.8,660.526 636.359,697.285 636.918,708.641 637.477,740.789 638.037,738.832 638.596,736.874 639.155,751.072 639.714,716.91 640.274,716.139 640.833,737.089 641.392,733.411 641.951,749.567 642.511,713.353 643.07,714.67 643.629,731.257 644.188,762.281 644.748,760.346 645.307,776.832 645.866,772.627 646.425,800.666 646.985,798.847 647.544,811.302 648.103,822.748 648.662,833.272 649.222,812.864 649.781,807.793 650.34,771.184 650.899,754.697 651.459,751.704 652.018,729.197 652.577,709.694 653.136,708.254 653.696,707.287 654.255,692.411 654.814,671.967 655.373,704.406 655.933,718.631 656.492,686.623 657.051,689.986 657.61,692.3 658.17,706.431 658.729,723.987 659.288,704.9 659.847,691.375 660.407,709.083 660.966,740.507 661.525,739.411 662.084,754.654 662.644,783.915 663.203,809.27 663.762,802.987 664.321,779.927 664.881,744.389 665.44,771.84 665.999,767.101 666.558,765.259 667.118,762.537 667.677,761.456 668.236,771.339 668.795,767.248 669.355,751.971 669.914,719.962 670.473,699.585 671.032,700.036 671.592,666.742 672.151,635.724 672.71,608.264 673.269,582.43 673.829,589.207 674.388,643.686 674.947,665.057 675.506,664.042 676.066,702.829 676.625,655.548 677.184,656.821 677.743,656.851 678.303,691.238 678.862,710.369 679.421,693.609 679.981,693.602 680.54,690.451 681.099,677.238 681.658,678.444 682.218,680.887 682.777,693.898 683.336,711.083 683.895,726.641 684.455,711.338 685.014,726.365 685.573,755.246 686.132,735.819 686.692,734.194 687.251,734.924 687.81,750.379 688.369,746.012 688.929,706.707 689.488,737.045 690.047,733.436 690.606,684.392 691.166,684.202 691.725,685.788 692.284,670.519 692.843,670.864 693.403,642.615 693.962,611.958 694.521,618.074 695.08,604.278 695.64,591.844 696.199,613.854 696.758,636.125 697.317,641.456 697.877,645.833 698.436,663.944 698.995,666.261 699.554,701.657 700.114,702.862 700.673,701.536 701.232,731.379 701.791,729.009 702.351,714.692 702.91,733.545 703.469,718.387 704.028,684.045 704.588,668.822 705.147,651.993 705.706,654.78 706.265,656.34 706.825,609.641 707.384,631.842 707.943,634.985 708.502,639.511 709.062,643.298 709.621,665.476 710.18,654.863 710.739,657.316 711.299,676.17 711.858,678.629 712.417,662.299 712.976,684.256 713.536,713.346 714.095,696.606 714.654,678.641 715.213,662.363 715.773,612.345 716.332,615.475 716.891,602.378 717.45,628.501 718.01,635.741 718.569,639.515 719.128,658.509 719.687,665.867 720.247,649.014 720.806,650.937 721.365,653.1 721.924,624.588 722.484,611.288 723.043,614.033 723.602,629.796 724.161,629.643 724.721,615.846 725.28,601.207 725.839,601.96 726.398,621.137 726.958,623.49 727.517,640.42 728.076,608.235 728.635,611.916 729.195,582.955 729.754,573.195 730.313,610.425 730.872,617.086 731.432,633.925 731.991,652.69 732.55,670.406 733.109,689.18 733.669,687.193 734.228,690.189 734.787,687.619 735.346,704.58 735.906,703.385 736.465,721.724 737.024,701.957 737.583,716.658 738.143,764.409 738.702,744.291 739.261,759.62 739.82,722.804 740.38,754.119 740.939,766.521 741.498,748.252 742.057,765.826 742.617,747.03 743.176,727.968 743.735,723.137 744.294,702.724 744.854,702.894 745.413,701.612 745.972,684.586 746.531,668.688 747.091,684.805 747.65,684.871 748.209,680.907 748.768,652.333 749.328,671.089 749.887,671.343 750.446,640.296 751.005,580.675 751.565,605.492 752.124,629.173 752.683,632.224 753.242,665.538 753.802,666.944 754.361,654.585 754.92,675.01 755.479,671.612 756.039,689.455 756.598,690.511 757.157,693.63 757.716,678.289 758.276,696.835 758.835,667.065 759.394,681.995 759.953,699.031 760.513,681.6 761.072,667.322 761.631,734.194 762.19,717.293 762.75,734.882 763.309,763.974 763.868,759.505 764.427,772.625 764.987,734.856 765.546,732.523 766.105,699.357 766.664,669.96 767.224,704.559 767.783,702.335 768.342,718.25 768.901,730.505 769.461,743.409 770.02,720.886 770.579,684.748 771.138,698.759 771.698,731.454 772.257,725.634 772.816,744.264 773.375,743.393 773.935,771.173 774.494,753.812 775.053,744.137 775.612,739.942 776.172,734.507 776.731,743.481 777.29,788.703 777.849,766.521 778.409,747.136 778.968,708.234 779.527,675.626 780.086,679.779 780.646,694.626 781.205,681.572 781.764,682.614 782.323,664.706 782.883,666.442 783.442,652.834 784.001,641.558 784.56,661.451 785.12,679.768 785.679,648.019 786.238,647.877 786.797,665.254 787.357,681.529 787.916,683.02 788.475,668.806 789.034,670.008 789.594,665.094 790.153,682.534 790.712,664.985 791.271,668.694 791.831,671.554 792.39,670.189 792.949,672.65 793.508,705.147 794.068,703.312 794.627,703.275 795.186,722.28 795.745,705.459 796.305,673.978 796.864,689.401 797.423,724.857 797.982,705.236 798.542,704.4 799.101,737.278 799.66,732.095 800.219,776.85 800.779,741.432 801.338,719.248 801.897,700.023 802.456,698.646 803.016,736.856 803.575,748.874 804.134,776.964 804.693,694.381 805.253,691.673 805.812,708.155 806.371,705.508 806.931,691.528 807.49,705.818 808.049,689.38 808.608,669.407 809.168,671.673 809.727,654.395 810.286,653.723 810.845,667.342 811.405,685.458 811.964,684.145 812.523,701.137 813.082,734.284 813.642,762.687 814.201,757.328 814.76,734.244 815.319,731.806 815.879,711.528 816.438,643.609 816.997,649.657 817.556,636.549 818.116,674.147 818.675,626.588 819.234,618.012 819.793,623.58 820.353,642.968 820.912,659.565 821.471,677.318 822.03,676.579 822.59,708.505 823.149,723.991 823.708,721.877 824.267,702.605 824.827,652.385 825.386,650.502 825.945,668.927 826.504,687.77 827.064,690.981 827.623,674.448 828.182,726.201 828.741,723.993 829.301,737.141 829.86,701.449 830.419,716.752 830.978,667.302 831.538,650.858 832.097,685.804 832.656,703.237 833.215,652.384 833.775,638.311 834.334,642.712 834.893,627.378 835.452,650.95 836.012,636.617 836.571,653.111 837.13,673.776 837.689,675.975 838.249,660.833 838.808,677.574 839.367,692.399 839.926,693.156 840.486,692.493 841.045,694.294 841.604,709.272 842.163,678.358 842.723,693.472 843.282,663.518 843.841,677.081 844.4,675.369 844.96,679.699 845.519,662.489 846.078,698.962 846.637,646.544 847.197,662.857 847.756,664.079 848.315,666.322 848.874,672.054 849.434,670.142 849.993,702.724 850.552,680.173 851.111,699.314 851.671,714.472 852.23,743.137 852.789,755.995 853.348,769.032 853.908,764.104 854.467,696.249 855.026,729.911 855.585,731.587 856.145,714.473 856.704,678.457 857.263,713.783 857.822,727.755 858.382,695.368 858.941,693.123 859.5,694.597 860.059,710.666 860.619,741.084 861.178,738.277 861.737,735.396 862.296,732.411 862.856,760.194 863.415,757.191 863.974,752.215 864.533,730.756 865.093,759.202 865.652,739.672 866.211,737.576 866.77,718.89 867.33,620.568 867.889,623.497 868.448,627.27 869.007,612.374 869.567,649.583 870.126,684.57 870.685,653.624 871.244,671.375 871.804,638.699 872.363,685.076 872.922,667.537 873.481,703.44 874.041,671.035 874.6,641.962 875.159,659.477 875.718,675.476 876.278,675.063 876.837,689.801 877.396,658.079 877.955,659.863 878.515,647.78 879.074,716.308 879.633,751.302 880.192,730.322 880.752,759.79 881.311,772.519 881.87,752.138 882.429,763.593 882.989,777.17 883.548,756.537 884.107,769.434 884.666,767.775 885.226,794.363 885.785,806.1 886.344,750.187 886.903,762.125 887.463,708.981 888.022,644.755 888.581,662.148 889.14,661.833 889.7,648.2 890.259,653.932 890.818,672.561 891.377,707.194 891.937,706.877 892.496,673.228 893.055,718.907 893.614,718.19 894.174,717.081 894.733,715.891 895.292,728.005 895.851,726.764 896.411,774.101 896.97,752.441 897.529,766.238 898.088,795.355 898.648,806.28 899.207,864.298 899.766,860.438 900.325,821.503 900.885,847.716 901.444,820.619 902.003,814.395 902.562,806.383 903.122,797.313 903.681,793.733 904.24,791.462 904.799,818.459 905.359,811.182 905.918,823.53 906.477,814.519 907.036,808.134 907.596,779.607 908.155,789.735 908.714,747.966 909.273,746.049 909.833,755.761 910.392,768.669 910.951,728.833 911.51,710.203 912.07,695.691 912.629,696.102 913.188,696.731 913.747,680.862 914.307,709.839 914.866,675.274 915.425,709.799 915.984,738.143 916.544,668.625 917.103,670.847 917.662,654.511 918.221,655.777 918.781,655.003 919.34,641.29 919.899,643.032 920.458,646.435 921.018,646.07 921.577,662.434 922.136,678.192 922.695,679.092 923.255,661.789 923.814,648.256 924.373,665.326 924.932,698.783 925.492,700.117 926.051,668.692 926.61,669.603 927.169,655.284 927.729,658.466 928.288,675.238 928.847,708.523 929.406,702.568 929.966,733.163 930.525,698.427 931.084,680.657 931.644,695.798 932.203,696.842 932.762,694.395 933.321,694.109 933.881,692.221 934.44,624.838 934.999,646.299 935.558,631.14 936.118,649.94 936.677,668.979 937.236,670.385 937.795,700.657 938.355,713.775 938.914,727.445 939.473,724.689 940.032,724.543 940.592,688.371 941.151,667.706 941.71,687.507 942.269,673.857 942.829,677.68 943.388,675.655 943.947,628.458 944.506,646.602 945.066,613.751 945.625,588.298 946.184,610.39 946.743,598.607 947.303,590.183 947.862,598.237 948.421,636.448 948.98,636.079 949.54,623.433 950.099,595.843 950.658,567.16 951.217,590.202 951.777,616.013 952.336,635.486 952.895,642.555 953.454,676.851 954.014,691.056 954.573,689.923 955.132,670.486 955.691,672.529 956.251,660.01 956.81,645.859 957.369,630.948 957.928,664.108 958.488,697.3 959.047,714.433 959.606,728.984 960.165,756.172 960.725,752.888 961.284,731.778 961.843,696.271 962.402,682.988 962.962,665.607 963.521,668.842 964.08,654.863 964.639,652.515 965.199,651.913 965.758,637.4 966.317,675.853 966.876,693.179 967.436,677.523 967.995,660.41 968.554,679.45 969.113,698.361 969.673,663.941 970.232,682.467 970.791,653.123 971.35,635.872 971.91,657.193 972.469,643.852 973.028,612.137 973.587,618.214 974.147,656.197 974.706,657.834 975.265,641.403 975.824,642.528 976.384,676.344 976.943,690.965 977.502,676.767 978.061,695.928 978.621,696.2 979.18,660.682 979.739,657.982 980.298,658.999 980.858,626.827 981.417,629.201 981.976,631.75 982.535,602.291 983.095,624.015 983.654,627.211 984.213,629.59 984.772,619.133 985.332,592.764 985.891,599.566 986.45,620.342 987.009,609.318 987.569,613.265 988.128,663.93 988.687,666.329 989.246,696.118 989.806,697.162 990.365,681.612 990.924,683.441 991.483,646.51 992.043,649.93 992.602,649.261 993.161,633.672 993.72,621.142 994.28,641.674 994.839,662.289 995.398,679.065 995.957,694.095 996.517,692.336 997.076,709.178 997.635,710.366 998.194,693.732 998.754,705.914 999.313,690.43 999.872,671.757 1000.43,675.196 1000.99,691.631 1001.55,706.269 1002.11,739.956 1002.67,720.931 1003.23,702.288 1003.79,714.586 1004.35,745.263 1004.91,759.191 1005.46,743.433 1006.02,724.063 1006.58,736.341 1007.14,734.824 1007.7,699.364 1008.26,697.669 1008.82,697.459 1009.38,742.468 1009.94,722.897 1010.5,734.349 1011.06,727.903 1011.62,754.655 1012.18,767.394 1012.73,763.259 1013.29,772.73 1013.85,752.409 1014.41,748.552 1014.97,728.923 1015.53,736.688 1016.09,730.066 1016.65,731.057 1017.21,727.784 1017.77,740.189 1018.33,751.398 1018.89,748.634 1019.45,729.538 1020.01,673.406 1020.56,656.315 1021.12,658.67 1021.68,642.002 1022.24,644.32 1022.8,666.212 1023.36,662.944 1023.92,678.861 1024.48,694.134 1025.04,693 1025.6,693.639 1026.16,696.246 1026.72,709.525 1027.28,675.907 1027.83,644.227 1028.39,661.461 1028.95,660.512 1029.51,627.433 1030.07,696.565 1030.63,679.084 1031.19,725.76 1031.75,758.165 1032.31,771.165 1032.87,766.789 1033.43,759.878 1033.99,738.182 1034.55,751.153 1035.1,761.429 1035.66,708.961 1036.22,723.086 1036.78,721.76 1037.34,703.189 1037.9,684.633 1038.46,670.546 1039.02,653.18 1039.58,683.809 1040.14,715.34 1040.7,714.729 1041.26,693.827 1041.82,709.18 1042.38,705.622 1042.93,675.255 1043.49,660.282 1044.05,679.413 1044.61,696.845 1045.17,679.708 1045.73,629.557 1046.29,551.592 1046.85,542.791 1047.41,584.493 1047.97,590.279 1048.53,594.096 1049.09,583.294 1049.65,606.5 1050.2,611.756 1050.76,633.202 1051.32,685.634 1051.88,703.873 1052.44,703.738 1053,702.834 1053.56,702.686 1054.12,718.265 1054.68,703.35 1055.24,688.234 1055.8,686.907 1056.36,668.527 1056.92,671.075 1057.48,670.818 1058.03,625.765 1058.59,679.532 1059.15,662.548 1059.71,681.018 1060.27,698.048 1060.83,666.045 1061.39,651.944 1061.95,634.695 1062.51,619.085 1063.07,638.411 1063.63,640.469 1064.19,643.851 1064.75,696.544 1065.3,700.085 1065.86,698.692 1066.42,695.675 1066.98,694.394 1067.54,691.194 1068.1,709.362 1068.66,739.664 1069.22,753.786 1069.78,734.775 1070.34,751.027 1070.9,730.116 1071.46,722.444 1072.02,705.269 1072.57,702.631 1073.13,703.242 1073.69,718.166 1074.25,701.385 1074.81,699.128 1075.37,698.987 1075.93,696.104 1076.49,712.029 1077.05,677.621 1077.61,678.802 1078.17,645.31 1078.73,649.603 1079.29,672.729 1079.85,654.281 1080.4,623.447 1080.96,627.761 1081.52,629.902 1082.08,614.369 1082.64,632.901 1083.2,670.546 1083.76,672.336 1084.32,660.418 1084.88,678.572 1085.44,644.921 1086,614.955 1086.56,638.789 1087.12,642.39 1087.67,612.906 1088.23,617.983 1088.79,639.492 1089.35,657.624 1089.91,675.239 1090.47,708.765 1091.03,677.69 1091.59,678.387 1092.15,711.902 1092.71,728.833 1093.27,740.981 1093.83,720.296 1094.39,751.49 1094.94,748 1095.5,773.664 1096.06,783.522 1096.62,762.322 1097.18,724.596 1097.74,723.544 1098.3,723.131 1098.86,701.877 1099.42,713.15 1099.98,710.411 1100.54,712.104 1101.1,710.664 1101.66,694.997 1102.22,713.591 1102.77,717.432 1103.33,684.186 1103.89,664.638 1104.45,682.792 1105.01,699.597 1105.57,649.71 1106.13,638.129 1106.69,623.646 1107.25,606.477 1107.81,612.256 1108.37,634.868 1108.93,655.85 1109.49,686.915 1110.04,679.851 1110.6,661.852 1111.16,648.549 1111.72,697.05 1112.28,715.996 1112.84,698.273 1113.4,683.886 1113.96,667.205 1114.52,616.74 1115.08,605.035 1115.64,559.257 1116.2,582.808 1116.76,606.238 1117.31,623.907 1117.87,624.563 1118.43,642.659 1118.99,643.904 1119.55,630.759 1120.11,616.988 1120.67,622.322 1121.23,607.723 1121.79,626.721 1122.35,680.747 1122.91,680.514 1123.47,651.114 1124.03,637.377 1124.59,655.922 1125.14,658.485 1125.7,675.324 1126.26,673.957 1126.82,644.916 1127.38,645.071 1127.94,676.714 1128.5,657.652 1129.06,659.903 1129.62,666.503 1130.18,682.962 1130.74,667.622 1131.3,698.731 1131.86,715.352 1132.41,729.256 1132.97,791.67 1133.53,755.19 1134.09,784.872 1134.65,793.845 1135.21,798.827 1135.77,777.507 1136.33,786.026 1136.89,749.282 1137.45,794.157 1138.01,774.746 1138.57,753.315 1139.13,797.534 1139.68,789.182 1140.24,749.37 1140.8,730.066 1141.36,709.945 1141.92,694.385 1142.48,711.8 1143.04,692.471 1143.6,693.526 1144.16,693.873 1144.72,675.809 1145.28,694.419 1145.84,693.264 1146.4,708.783 1146.96,668.585 1147.51,669.307 1148.07,654.783 1148.63,638.148 1149.19,655.442 1149.75,657.542 1150.31,659.128 1150.87,646.688 1151.43,632.684 1151.99,668.096 1152.55,685.829 1153.11,669.078 1153.67,650.861 1154.23,637.709 1154.78,624.979 1155.34,581.936 1155.9,567.336 1156.46,572.142 1157.02,590.483 1157.58,597.046 1158.14,587.491 1158.7,605.664 1159.26,612.345 1159.82,632.341 1160.38,634.918 1160.94,633.997 1161.5,670.274 1162.05,674.55 1162.61,676.24 1163.17,642.185 1163.73,627.384 1164.29,615.571 1164.85,604.547 1165.41,625.192 1165.97,661.114 1166.53,663.986 1167.09,647.586 1167.65,633.626 1168.21,652.613 1168.77,670.928 1169.33,689.138 1169.88,702.447 1170.44,717.035 1171,701.408 1171.56,670.633 1172.12,686.679 1172.68,704.856 1173.24,689.62 1173.8,672.642 1174.36,686.626 1174.92,654.05 1175.48,659.565 1176.04,663.387 1176.6,696.331 1177.15,708.451 1177.71,711.32 1178.27,709.135 1178.83,723.998 1179.39,675.806 1179.95,675.517 1180.51,675.968 1181.07,672.823 1181.63,690.546 1182.19,676.315 1182.75,676.112 1183.31,645.204 1183.87,579.361 1184.43,568.335 1184.98,560.15 1185.54,534.636 1186.1,562.469 1186.66,551.388 1187.22,576.346 1187.78,615.389 1188.34,652.002 1188.9,654.587 1189.46,637.448 1190.02,658.387 1190.58,628.383 1191.14,630.019 1191.7,617.429 1192.25,608.5 1192.81,611.546 1193.37,612.983 1193.93,634.04 1194.49,634.789 1195.05,650.79 1195.61,638.78 1196.17,660.39 1196.73,676.202 1197.29,644.303 1197.85,665.181 1198.41,632.405 1198.97,667.246 1199.52,701.614 1200.08,687.596 1200.64,718.932 1201.2,762.932 1201.76,821.703 1202.32,799.824 1202.88,778.929 1203.44,772.207 1204,799.976 1204.56,810.916 1205.12,788.746 1205.68,768.11 1206.24,747.35 1206.8,711.972 1207.35,681.064 1207.91,661.644 1208.47,660.639 1209.03,694.681 1209.59,674.544 1210.15,687.198 1210.71,687.37 1211.27,704.072 1211.83,703.069 1212.39,686.149 1212.95,702.698 1213.51,685.793 1214.07,716.021 1214.62,701.039 1215.18,715.454 1215.74,698.837 1216.3,712.716 1216.86,710.59 1217.42,724.106 1217.98,707.086 1218.54,736.714 1219.1,717.404 1219.66,717.465 1220.22,703.39 1220.78,687.14 1221.34,705.291 1221.89,719.824 1222.45,734.946 1223.01,750.435 1223.57,731.018 1224.13,725.46 1224.69,720.451 1225.25,653.429 1225.81,670.709 1226.37,686.888 1226.93,723.548 1227.49,688.751 1228.05,755.223 1228.61,766.021 1229.17,714.657 1229.72,713.207 1230.28,727.852 1230.84,726.437 1231.4,724.954 1231.96,707.061 1232.52,721.243 1233.08,702.784 1233.64,748.684 1234.2,746.981 1234.76,741.971 1235.32,721.767 1235.88,737.906 1236.44,702.912 1236.99,682.869 1237.55,667.78 1238.11,686.468 1238.67,706.228 1239.23,718.463 1239.79,732.998 1240.35,779.383 1240.91,788.269 1241.47,783.639 1242.03,792.378 1242.59,802.189 1243.15,778.623 1243.71,756.722 1244.26,754.961 1244.82,722.815 1245.38,733.39 1245.94,744.855 1246.5,725.774 1247.06,702.139 1247.62,683.965 1248.18,713.429 1248.74,680.907 1249.3,697.989 1249.86,710.027 1250.42,656.759 1250.98,620.851 1251.54,624.813 1252.09,663.132 1252.65,630.066 1253.21,603.786 1253.77,589.664 1254.33,580.291 1254.89,636.811 1255.45,672.491 1256.01,669.981 1256.57,669.89 1257.13,654.47 1257.69,638.135 1258.25,656.353 1258.81,657.019 1259.36,642.688 1259.92,663.296 1260.48,648.07 1261.04,668.11 1261.6,657.272 1262.16,644.919 1262.72,662.118 1263.28,627.743 1263.84,650.118 1264.4,683.562 1264.96,665.58 1265.52,664.854 1266.08,665.685 1266.63,667.556 1267.19,653.998 1267.75,675.086 1268.31,695.91 1268.87,708.86 1269.43,704.935 1269.99,719.18 1270.55,700.943 1271.11,730.757 1271.67,731.726 1272.23,715.052 1272.79,746.458 1273.35,726.367 1273.91,705.849 1274.46,688.974 1275.02,704.415 1275.58,685.706 1276.14,685.038 1276.7,667.356 1277.26,633.655 1277.82,635.515 1278.38,606.291 1278.94,593.262 1279.5,636.647 1280.06,641.477 1280.62,629.771 1281.18,631.463 1281.73,667.595 1282.29,651.37 1282.85,668.1 1283.41,654.595 1283.97,690.719 1284.53,689.013 1285.09,689.876 1285.65,705.725 1286.21,707.274 1286.77,689.282 1287.33,701.953 1287.89,670.479 1288.45,671.332 1289,669.03 1289.56,655.023 1290.12,640.708 1290.68,641.716 1291.24,660.527 1291.8,629.512 1292.36,634.45 1292.92,697.164 1293.48,693.615 1294.04,691.31 1294.6,674.087 1295.16,676.365 1295.72,658.784 1296.28,657.923 1296.83,659.661 1297.39,608.485 1297.95,628.333 1298.51,618.568 1299.07,654.681 1299.63,671.038 1300.19,688.333 1300.75,672.394 1301.31,675.118 1301.87,725.757 1302.43,741.118 1302.99,768.368 1303.55,777.045 1304.1,768.604 1304.66,766.299 1305.22,762.328 1305.78,748.399 1306.34,730.761 1306.9,709.132 1307.46,742.451 1308.02,722.769 1308.58,685.033 1309.14,681.624 1309.7,680.188 1310.26,680.546 1310.82,698.362 1311.38,714.317 1311.93,728.239 1312.49,711.949 1313.05,709.563 1313.61,709.291 1314.17,704.676 1314.73,637.421 1315.29,640.504 1315.85,631.136 1316.41,573.116 1316.97,543.575 1317.53,617.449 1318.09,620.443 1318.65,610.019 1319.2,617.464 1319.76,620.721 1320.32,621.361 1320.88,626.18 1321.44,629.469 1322,664.858 1322.56,650.245 1323.12,651.253 1323.68,688.342 1324.24,671.076 1324.8,673.996 1325.36,660.366 1325.92,667.043 1326.47,667.954 1327.03,683.761 1327.59,697.537 1328.15,698.9 1328.71,713.514 1329.27,746.485 1329.83,742.831 1330.39,724.603 1330.95,718.81 1331.51,733.315 1332.07,731.615 1332.63,700.698 1333.19,733.157 1333.75,728.817 1334.3,711.478 1334.86,695.118 1335.42,741.939 1335.98,752.967 1336.54,750.083 1337.1,776.541 1337.66,784.9 1338.22,778.593 1338.78,787.959 1339.34,768.55 1339.9,761.793 1340.46,762.497 1341.02,776.267 1341.57,758.344 1342.13,752.368 1342.69,761.246 1343.25,740.47 1343.81,718.185 1344.37,716.074 1344.93,731.429 1345.49,730.78 1346.05,744.631 1346.61,740.233 1347.17,737.835 1347.73,767.713 1348.29,713.143 1348.84,711.354 1349.4,680.283 1349.96,712.803 1350.52,714.283 1351.08,680.042 1351.64,648.578 1352.2,630.546 1352.76,616.661 1353.32,589.05 1353.88,592.872 1354.44,599.442 1355,637.296 1355.56,607.509 1356.12,661.905 1356.67,628.341 1357.23,664.391 1357.79,681.254 1358.35,677.859 1358.91,695.494 1359.47,696.657 1360.03,681.565 1360.59,745.201 1361.15,727.076 1361.71,742.418 1362.27,724.768 1362.83,704.516 1363.39,720.614 1363.94,702.449 1364.5,700.393 1365.06,682.479 1365.62,680.958 1366.18,679.082 1366.74,694.16 1367.3,678.502 1367.86,644.394 1368.42,597.298 1368.98,586.109 1369.54,592.163 1370.1,611.447 1370.66,599.213 1371.21,604.795 1371.77,610.19 1372.33,598.553 1372.89,620.359 1373.45,622.606 1374.01,676.968 1374.57,661.886 1375.13,679.11 1375.69,646.364 1376.25,680.718 1376.81,653.389 1377.37,654.095 1377.93,686.653 1378.49,654.401 1379.04,655.531 1379.6,688.194 1380.16,654.846 1380.72,685.532 1381.28,685.903 1381.84,657.877 1382.4,610.833 1382.96,614.214 1383.52,648.006 1384.08,664.756 1384.64,685.697 1385.2,687.314 1385.76,687.054 1386.31,672.406 1386.87,674.534 1387.43,687.19 1387.99,635.458 1388.55,653.237 1389.11,640.038 1389.67,656.103 1390.23,643.098 1390.79,631.291 1391.35,635.508 1391.91,653.957 1392.47,656.082 1393.03,656.871 1393.58,689.86 1394.14,692.144 1394.7,707.72 1395.26,724.51 1395.82,710.362 1396.38,724.809 1396.94,718.822 1397.5,699.214 1398.06,697.754 1398.62,727.603 1399.18,740.236 1399.74,740.298 1400.3,720.155 1400.86,667.29 1401.41,630.344 1401.97,631.458 1402.53,634.313 1403.09,633.503 1403.65,649.379 1404.21,632.918 1404.77,651.678 1405.33,635.775 1405.89,653.733 1406.45,668.826 1407.01,672.133 1407.57,670.659 1408.13,671.446 1408.68,639.714 1409.24,627.43 1409.8,641.095 1410.36,627.517 1410.92,648.739 1411.48,634.036 1412.04,648.445 1412.6,646.297 1413.16,697.336 1413.72,713.698 1414.28,746.759 1414.84,774.218 1415.4,769.891 1415.95,780.43 1416.51,771.705 1417.07,767.998 1417.63,748.349 1418.19,775.783 1418.75,820.853 1419.31,814.377 1419.87,824.202 1420.43,803.671 1420.99,800.192 1421.55,779.593 1422.11,774.378 1422.67,736.159 1423.23,695.833 1423.78,695.754 1424.34,680.451 1424.9,681.048 1425.46,681.64 1426.02,669.104 1426.58,653.621 1427.14,673.083 1427.7,640.71 1428.26,691.614 1428.82,703.301 1429.38,703.927 1429.94,704.914 1430.5,703.024 1431.05,734.244 1431.61,714.452 1432.17,694.754 1432.73,696.626 1433.29,714.217 1433.85,727.266 1434.41,724.318 1434.97,708.162 1435.53,660.032 1436.09,709.701 1436.65,660.861 1437.21,627.621 1437.77,665.235 1438.33,662.29 1438.88,664.298 1439.44,651.97 1440,621.313 1440.56,639.408 1441.12,655.035 1441.68,672.212 1442.24,704.91 1442.8,723.185 1443.36,733.991 1443.92,732.994 1444.48,729.896 1445.04,746.387 1445.6,707.292 1446.15,689.687 1446.71,690.827 1447.27,706.311 1447.83,704.024 1448.39,703.655 1448.95,733.661 1449.51,730.403 1450.07,723.621 1450.63,724.579 1451.19,725.421 1451.75,740.814 1452.31,753.612 1452.87,718.448 1453.42,715.536 1453.98,680.468 1454.54,663.525 1455.1,647.823 1455.66,652.921 1456.22,654.434 1456.78,639.835 1457.34,641.628 1457.9,663.355 1458.46,679.686 1459.02,678.293 1459.58,661.295 1460.14,663.948 1460.7,678.904 1461.25,679.769 1461.81,710.828 1462.37,723.834 1462.93,723.876 1463.49,692.739 1464.05,692.879 1464.61,675.641 1465.17,694.491 1465.73,738.833 1466.29,737.776 1466.85,720.781 1467.41,700.294 1467.97,681.287 1468.52,684.57 1469.08,698.564 1469.64,697.883 1470.2,681.754 1470.76,663.473 1471.32,650.002 1471.88,687.387 1472.44,671.056 1473,671.991 1473.56,689.885 1474.12,674.789 1474.68,678.591 1475.24,676.408 1475.79,676.772 1476.35,678.669 1476.91,646.19 1477.47,649.622 1478.03,668.759 1478.59,654.341 1479.15,652.589 1479.71,654.37 1480.27,643.022 1480.83,694.177 1481.39,693.391 1481.95,691.002 1482.51,706.412 1483.07,691.994 1483.62,725.728 1484.18,691.823 1484.74,692.596 1485.3,677.133 1485.86,696.035 1486.42,695.169 1486.98,665.097 1487.54,683.295 1488.1,716.702 1488.66,734.199 1489.22,717.589 1489.78,714.865 1490.34,730.243 1490.89,710.537 1491.45,680.178 1492.01,681.014 1492.57,678.45 1493.13,693.122 1493.69,707.389 1494.25,674.602 1494.81,656.556 1495.37,608.101 1495.93,629.972 1496.49,629.826 1497.05,616.549 1497.61,654.091 1498.16,654.858 1498.72,656.846 1499.28,672.338 1499.84,688.33 1500.4,656.674 1500.96,659.632 1501.52,676.401 1502.08,677.273 1502.64,694.403 1503.2,691.045 1503.76,674.012 1504.32,658.103 1504.88,627.46 1505.44,643.57 1505.99,663.263 1506.55,714.621 1507.11,744.963 1507.67,744.315 1508.23,742.695 1508.79,721.692 1509.35,703.065 1509.91,683.02 1510.47,683.844 1511.03,683.114 1511.59,665.495 1512.15,635.156 1512.71,670.837 1513.26,671.006 1513.82,671.366 1514.38,657.12 1514.94,708.361 1515.5,725.07 1516.06,707.537 1516.62,706.889 1517.18,753.548 1517.74,716.321 1518.3,696.955 1518.86,665.741 1519.42,653.855 1519.98,672.168 1520.53,692.984 1521.09,661.688 1521.65,584.97 1522.21,591.096 1522.77,579.361 1523.33,584.323 1523.89,561.839 1524.45,602.48 1525.01,593.286 1525.57,613.749 1526.13,584.846 1526.69,605.259 1527.25,590.196 1527.81,614.26 1528.36,636.637 1528.92,621.851 1529.48,612.282 1530.04,618.341 1530.6,634.761 1531.16,635.965 1531.72,637.986 1532.28,658.279 1532.84,628.031 1533.4,661.378 1533.96,662.44 1534.52,683.882 1535.08,717.393 1535.63,716.994 1536.19,748.573 1536.75,740.23 1537.31,737.49 1537.87,719.225 1538.43,748.6 1538.99,730.233 1539.55,712.137 1540.11,710.059 1540.67,725.966 1541.23,676.842 1541.79,676.955 1542.35,728.366 1542.9,707.804 1543.46,753.833 1544.02,767.304 1544.58,731.11 1545.14,745.133 1545.7,755.969 1546.26,751.355 1546.82,778.982 1547.38,789.394 1547.94,768.12 1548.5,760.278 1549.06,737.77 1549.62,737.162 1550.18,730.566 1550.73,712.971 1551.29,711.986 1551.85,740.946 1552.41,738.174 1552.97,718.836 1553.53,716.611 1554.09,712.59 1554.65,708.965 1555.21,673.284 1555.77,658.915 1556.33,641.641 1556.89,627.158 1557.45,647.015 1558,680.91 1558.56,650.057 1559.12,650.532 1559.68,666.215 1560.24,665.342 1560.8,652.569 1561.36,625.854 1561.92,647.749 1562.48,634.016 1563.04,607.758 1563.6,580.979 1564.16,602.791 1564.72,595.856 1565.28,598.821 1565.83,605.136 1566.39,592.908 1566.95,645.985 1567.51,664.047 1568.07,683.172 1568.63,682.872 1569.19,698.206 1569.75,664.673 1570.31,683.416 1570.87,681.57 1571.43,699.11 1571.99,683.046 1572.55,716.47 1573.1,680.237 1573.66,648.733 1574.22,632.705 1574.78,619.381 1575.34,605.948 1575.9,609.7 1576.46,597.662 1577.02,617.203 1577.58,617.447 1578.14,604.939 1578.7,625.319 1579.26,631.318 1579.82,637.78 1580.37,655.291 1580.93,670.699 1581.49,671.11 1582.05,699.237 1582.61,712.94 1583.17,728.863 1583.73,742.575 1584.29,770.183 1584.85,766.004 1585.41,781.8 1585.97,777.23 1586.53,758.405 1587.09,751.698 1587.65,700.89 1588.2,682.044 1588.76,697.281 1589.32,711.627 1589.88,705.548 1590.44,689.097 1591,672.902 1591.56,674.126 1592.12,677.346 1592.68,677.181 1593.24,659.176 1593.8,712.734 1594.36,695.218 1594.92,724.177 1595.47,705.636 1596.03,707.033 1596.59,720.77 1597.15,705.942 1597.71,674.104 1598.27,671.435 1598.83,687.986 1599.39,692.924 1599.95,708.85 1600.51,708.474 1601.07,694.008 1601.63,679.076 1602.19,663.933 1602.74,664.921 1603.3,651.697 1603.86,638.607 1604.42,640.139 1604.98,643.664 1605.54,677.452 1606.1,659.774 1606.66,660.978 1607.22,661.568 1607.78,678.806 1608.34,676.679 1608.9,646.513 1609.46,664.994 1610.02,621.456 1610.57,625.972 1611.13,613.327 1611.69,632.042 1612.25,632.054 1612.81,635.867 1613.37,668.81 1613.93,682.47 1614.49,664.35 1615.05,670.046 1615.61,671.774 1616.17,623.781 1616.73,631.261 1617.29,636.572 1617.84,670.221 1618.4,670.777 1618.96,667.648 1619.52,668.414 1620.08,689.515 1620.64,703.208 1621.2,706.664 1621.76,673.718 1622.32,708.496 1622.88,691.353 1623.44,692.355 1624,693.594 1624.56,722.647 1625.11,768.64 1625.67,780.452 1626.23,777.749 1626.79,741.444 1627.35,769.814 1627.91,750.773 1628.47,779.189 1629.03,758.391 1629.59,773.212 1630.15,764.904 1630.71,762.386 1631.27,761.694 1631.83,776.096 1632.39,738.165 1632.94,703.08 1633.5,666.681 1634.06,679.95 1634.62,696.018 1635.18,677.632 1635.74,715.036 1636.3,761.946 1636.86,722.808 1637.42,720.493 1637.98,687.877 1638.54,669.062 1639.1,624.335 1639.66,624.88 1640.21,612.993 1640.77,631.873 1641.33,652.464 1641.89,652.356 1642.45,636.764 1643.01,653.945 1643.57,659.847 1644.13,677.341 1644.69,675.639 1645.25,695.05 1645.81,696.619 1646.37,664.592 1646.93,668.622 1647.48,687.371 1648.04,671.272 1648.6,704.604 1649.16,700.81 1649.72,697.742 1650.28,695.372 1650.84,690.658 1651.4,703.503 1651.96,687.25 1652.52,703.561 1653.08,751.599 1653.64,732.83 1654.2,761.698 1654.76,773.815 1655.31,787.991 1655.87,815.346 1656.43,778.663 1656.99,785.209 1657.55,810.885 1658.11,784.548 1658.67,766.618 1659.23,779.502 1659.79,770.95 1660.35,734.812 1660.91,746.413 1661.47,728.102 1662.03,741.103 1662.58,739.948 1663.14,734.539 1663.7,699.361 1664.26,685.538 1664.82,688.673 1665.38,653.748 1665.94,671.375 1666.5,687.292 1667.06,670.637 1667.62,672.39 1668.18,654.854 1668.74,659.036 1669.3,628.619 1669.85,667.266 1670.41,654.012 1670.97,653.012 1671.53,636.741 1672.09,622.182 1672.65,625.121 1673.21,675.959 1673.77,692.144 1674.33,737.673 1674.89,768.171 1675.45,795.296 1676.01,769.899 1676.57,782.103 1677.13,760.868 1677.68,789.815 1678.24,753.394 1678.8,715.995 1679.36,731.374 1679.92,682.605 1680.48,683.708 1681.04,668.35 1681.6,666.396 1682.16,666.353 1682.72,652.645 1683.28,606.544 1683.84,579.093 1684.4,585.233 1684.95,622.943 1685.51,659.753 1686.07,663.002 1686.63,648.168 1687.19,663.285 1687.75,677.86 1688.31,661.426 1688.87,664.762 1689.43,633.163 1689.99,654.349 1690.55,656.697 1691.11,657.656 1691.67,659.518 1692.23,676.581 1692.78,644.035 1693.34,631.365 1693.9,622.736 1694.46,607.181 1695.02,610.786 1695.58,629.651 1696.14,649.883 1696.7,622.524 1697.26,625.406 1697.82,598.897 1698.38,588.262 1698.94,581.135 1699.5,555.846 1700.05,581.941 1700.61,604.986 1701.17,609.492 1701.73,595.076 1702.29,615.428 1702.85,637.414 1703.41,622.679 1703.97,661.921 1704.53,648.083 1705.09,651.07 1705.65,654.856 1706.21,670.933 1706.77,669.207 1707.32,655.404 1707.88,624.059 1708.44,660.08 1709,659.251 1709.56,675.636 1710.12,693.774 1710.68,697.644 1711.24,699.66 1711.8,670.043 1712.36,687.256 1712.92,687.107 1713.48,686.247 1714.04,688.556 1714.6,673.125 1715.15,673.334 1715.71,705.917 1716.27,740.165 1716.83,738.198 1717.39,769.644 1717.95,797.258 1718.51,822.099 1719.07,816.656 1719.63,808.698 1720.19,816.534 1720.75,812.019 1721.31,819.797 1721.87,796.211 1722.42,772.845 1722.98,765.281 1723.54,761.225 1724.1,738.314 1724.66,750.751 1725.22,752.334 1725.78,730.142 1726.34,743.719 1726.9,723.575 1727.46,740.778 1728.02,722.335 1728.58,719.474 1729.14,687.462 1729.69,702.109 1730.25,713.945 1730.81,699.406 1731.37,715.799 1731.93,715.143 1732.49,679.582 1733.05,682.079 1733.61,665.926 1734.17,618.666 1734.73,636.657 1735.29,621.461 1735.85,610.357 1736.41,633.083 1736.97,635.931 1737.52,635.239 1738.08,624.011 1738.64,623.993 1739.2,658.729 1739.76,644.939 1740.32,677.875 1740.88,692.107 1741.44,706.305 1742,722.488 1742.56,719.482 1743.12,716.343 1743.68,743.841 1744.24,724.837 1744.79,702.256 1745.35,735.539 1745.91,686.328 1746.47,668.971 1747.03,670.995 1747.59,688.097 1748.15,605.316 1748.71,591.326 1749.27,580.919 1749.83,604.921 1750.39,623.282 1750.95,628.595 1751.51,615.574 1752.06,617.266 1752.62,617.206 1753.18,621.249 1753.74,606.521 1754.3,641.311 1754.86,629.119 1755.42,647.441 1755.98,649.752 1756.54,647.881 1757.1,631.526 1757.66,652.175 1758.22,638.958 1758.78,640.823 1759.34,628.555 1759.89,647.533 1760.45,619.019 1761.01,619.58 1761.57,608.697 1762.13,564.446 1762.69,602.138 1763.25,590.914 1763.81,627.937 1764.37,629.311 1764.93,646.612 1765.49,650.723 1766.05,651.661 1766.61,637.23 1767.16,640.994 1767.72,625.805 1768.28,630.597 1768.84,635.279 1769.4,637.769 1769.96,656.396 1770.52,643.35 1771.08,693.791 1771.64,707.868 1772.2,702.721 1772.76,684.644 1773.32,685.066 1773.88,689.568 1774.43,705.086 1774.99,736.332 1775.55,713.741 1776.11,710.993 1776.67,712.146 1777.23,740.799 1777.79,733.62 1778.35,711.869 1778.91,714.102 1779.47,731.323 1780.03,729.174 1780.59,740.576 1781.15,752.076 1781.71,764.404 1782.26,761.484 1782.82,775.419 1783.38,766.773 1783.94,747.024 1784.5,743.817 1785.06,743.021 1785.62,741.747 1786.18,754.346 1786.74,734.207 1787.3,747.402 1787.86,781.585 1788.42,775.757 1788.98,756.193 1789.53,782.483 1790.09,761.782 1790.65,775.07 1791.21,772.697 1791.77,751.168 1792.33,735.042 1792.89,732.709 1793.45,756.811 1794.01,784.008 1794.57,780.356 1795.13,807.476 1795.69,768.259 1796.25,766.339 1796.8,776.915 1797.36,754.788 1797.92,701.496 1798.48,732.788 1799.04,713.365 1799.6,710.878 1800.16,694.381 1800.72,645.957 1801.28,631.879 1801.84,603.587 1802.4,610.721 1802.96,613.707 1803.52,616.96 1804.08,600.418 1804.63,599.892 1805.19,605.053 1805.75,592.752 1806.31,626.52 1806.87,631.451 1807.43,633.53 1807.99,637.201 1808.55,626.691 1809.11,677.251 1809.67,707.799 1810.23,705.738 1810.79,686.058 1811.35,654.336 1811.9,652.78 1812.46,622.504 1813.02,623.039 1813.58,625.036 1814.14,646.75 1814.7,647.073 1815.26,667.503 1815.82,669.672 1816.38,655.819 1816.94,689.649 1817.5,689.693 1818.06,709.117 1818.62,725.988 1819.18,689.068 1819.73,685.858 1820.29,667.968 1820.85,666.938 1821.41,631.915 1821.97,619.327 1822.53,624.617 1823.09,630.498 1823.65,603.774 1824.21,610.399 1824.77,613.304 1825.33,647.068 1825.89,649.403 1826.45,665.591 1827,668.493 1827.56,685.035 1828.12,667.947 1828.68,715.49 1829.24,699.604 1829.8,730.469 1830.36,723.531 1830.92,732.551 1831.48,747.193 1832.04,730.287 1832.6,728.308 1833.16,694.517 1833.72,661.895 1834.27,648.135 1834.83,681.893 1835.39,697.131 1835.95,644.149 1836.51,663.699 1837.07,667.739 1837.63,650.249 1838.19,651.312 \"/>\n<path clip-path=\"url(#clip303)\" d=\"M720.247 689.139 L720.806 689.139 L721.365 689.139 L721.924 689.139 L722.484 689.139 L723.043 689.139 L723.602 689.139 L724.161 689.139 L724.721 689.139 L725.28 689.139 L725.839 689.139 L726.398 689.139 L726.958 689.139 L727.517 689.139 L728.076 689.139 L728.635 689.139 L729.195 689.139 L729.754 689.139 L730.313 689.139 L730.872 689.139 L731.432 689.139 L731.991 689.139 L732.55 689.139 L733.109 689.139 L733.669 689.139 L734.228 689.139 L734.787 689.139 L735.346 689.139 L735.906 689.139 L736.465 689.139 L737.024 689.139 L737.583 689.139 L738.143 689.139 L738.702 689.139 L739.261 689.139 L739.82 689.139 L740.38 689.139 L740.939 689.139 L741.498 689.139 L742.057 689.139 L742.617 689.139 L743.176 689.139 L743.735 689.139 L744.294 689.139 L744.854 689.139 L745.413 689.139 L745.972 689.139 L746.531 689.139 L747.091 689.139 L747.65 689.139 L748.209 689.139 L748.768 689.139 L749.328 689.139 L749.887 689.139 L750.446 689.139 L751.005 689.139 L751.565 689.139 L752.124 689.139 L752.683 689.139 L753.242 689.139 L753.802 689.139 L754.361 689.139 L754.92 689.139 L755.479 689.139 L756.039 689.139 L756.598 689.139 L757.157 689.139 L757.716 689.139 L758.276 689.139 L758.835 689.139 L759.394 689.139 L759.953 689.139 L760.513 689.139 L761.072 689.139 L761.631 689.139 L762.19 689.139 L762.75 689.139 L763.309 689.139 L763.868 689.139 L764.427 689.139 L764.987 689.139 L765.546 689.139 L766.105 689.139 L766.664 689.139 L767.224 689.139 L767.783 689.139 L768.342 689.139 L768.901 689.139 L769.461 689.139 L770.02 689.139 L770.579 689.139 L771.138 689.139 L771.698 689.139 L772.257 689.139 L772.816 689.139 L773.375 689.139 L773.935 689.139 L774.494 689.139 L775.053 689.139 L775.612 689.139 L776.172 689.139 L776.731 689.139 L777.29 689.139 L777.849 689.139 L778.409 689.139 L778.968 689.139 L779.527 689.139 L780.086 689.139 L780.646 689.139 L781.205 689.139 L781.764 689.139 L782.323 689.139 L782.883 689.139 L783.442 689.139 L784.001 689.139 L784.56 689.139 L785.12 689.139 L785.679 689.139 L786.238 689.139 L786.797 689.139 L787.357 689.139 L787.916 689.139 L788.475 689.139 L789.034 689.139 L789.594 689.139 L790.153 689.139 L790.712 689.139 L791.271 689.139 L791.831 689.139 L792.39 689.139 L792.949 689.139 L793.508 689.139 L794.068 689.139 L794.627 689.139 L795.186 689.139 L795.745 689.139 L796.305 689.139 L796.864 689.139 L797.423 689.139 L797.982 689.139 L798.542 689.139 L799.101 689.139 L799.66 689.139 L800.219 689.139 L800.779 689.139 L801.338 689.139 L801.897 689.139 L802.456 689.139 L803.016 689.139 L803.575 689.139 L804.134 689.139 L804.693 689.139 L805.253 689.139 L805.812 689.139 L806.371 689.139 L806.931 689.139 L807.49 689.139 L808.049 689.139 L808.608 689.139 L809.168 689.139 L809.727 689.139 L810.286 689.139 L810.845 689.139 L811.405 689.139 L811.964 689.139 L812.523 689.139 L813.082 689.139 L813.642 689.139 L814.201 689.139 L814.76 689.139 L815.319 689.139 L815.879 689.139 L816.438 689.139 L816.997 689.139 L817.556 689.139 L818.116 689.139 L818.675 689.139 L819.234 689.139 L819.793 689.139 L820.353 689.139 L820.912 689.139 L821.471 689.139 L822.03 689.139 L822.59 689.139 L823.149 689.139 L823.708 689.139 L824.267 689.139 L824.827 689.139 L825.386 689.139 L825.945 689.139 L826.504 689.139 L827.064 689.139 L827.623 689.139 L828.182 689.139 L828.741 689.139 L829.301 689.139 L829.86 689.139 L830.419 689.139 L830.978 689.139 L831.538 689.139 L832.097 689.139 L832.656 689.139 L833.215 689.139 L833.775 689.139 L834.334 689.139 L834.893 689.139 L835.452 689.139 L836.012 689.139 L836.571 689.139 L837.13 689.139 L837.689 689.139 L838.249 689.139 L838.808 689.139 L839.367 689.139 L839.926 689.139 L840.486 689.139 L841.045 689.139 L841.604 689.139 L842.163 689.139 L842.723 689.139 L843.282 689.139 L843.841 689.139 L844.4 689.139 L844.96 689.139 L845.519 689.139 L846.078 689.139 L846.637 689.139 L847.197 689.139 L847.756 689.139 L848.315 689.139 L848.874 689.139 L849.434 689.139 L849.993 689.139 L850.552 689.139 L851.111 689.139 L851.671 689.139 L852.23 689.139 L852.789 689.139 L853.348 689.139 L853.908 689.139 L854.467 689.139 L855.026 689.139 L855.585 689.139 L856.145 689.139 L856.704 689.139 L857.263 689.139 L857.822 689.139 L858.382 689.139 L858.941 689.139 L859.5 689.139 L860.059 689.139 L860.619 689.139 L861.178 689.139 L861.737 689.139 L862.296 689.139 L862.856 689.139 L863.415 689.139 L863.974 689.139 L864.533 689.139 L865.093 689.139 L865.652 689.139 L866.211 689.139 L866.77 689.139 L867.33 689.139 L867.889 689.139 L868.448 689.139 L869.007 689.139 L869.567 689.139 L870.126 689.139 L870.685 689.139 L871.244 689.139 L871.804 689.139 L872.363 689.139 L872.922 689.139 L873.481 689.139 L874.041 689.139 L874.6 689.139 L875.159 689.139 L875.718 689.139 L876.278 689.139 L876.837 689.139 L877.396 689.139 L877.955 689.139 L878.515 689.139 L879.074 689.139 L879.633 689.139 L880.192 689.139 L880.752 689.139 L881.311 689.139 L881.87 689.139 L882.429 689.139 L882.989 689.139 L883.548 689.139 L884.107 689.139 L884.666 689.139 L885.226 689.139 L885.785 689.139 L886.344 689.139 L886.903 689.139 L887.463 689.139 L888.022 689.139 L888.581 689.139 L889.14 689.139 L889.7 689.139 L890.259 689.139 L890.818 689.139 L891.377 689.139 L891.937 689.139 L892.496 689.139 L893.055 689.139 L893.614 689.139 L894.174 689.139 L894.733 689.139 L895.292 689.139 L895.851 689.139 L896.411 689.139 L896.97 689.139 L897.529 689.139 L898.088 689.139 L898.648 689.139 L899.207 689.139 L899.766 689.139 L900.325 689.139 L900.885 689.139 L901.444 689.139 L902.003 689.139 L902.562 689.139 L903.122 689.139 L903.681 689.139 L904.24 689.139 L904.799 689.139 L905.359 689.139 L905.918 689.139 L906.477 689.139 L907.036 689.139 L907.596 689.139 L908.155 689.139 L908.714 689.139 L909.273 689.139 L909.833 689.139 L910.392 689.139 L910.951 689.139 L911.51 689.139 L912.07 689.139 L912.629 689.139 L913.188 689.139 L913.747 689.139 L914.307 689.139 L914.866 689.139 L915.425 689.139 L915.984 689.139 L916.544 689.139 L917.103 689.139 L917.662 689.139 L918.221 689.139 L918.781 689.139 L919.34 689.139 L919.899 689.139 L920.458 689.139 L921.018 689.139 L921.577 689.139 L922.136 689.139 L922.695 689.139 L923.255 689.139 L923.814 689.139 L924.373 689.139 L924.932 689.139 L925.492 689.139 L926.051 689.139 L926.61 689.139 L927.169 689.139 L927.729 689.139 L928.288 689.139 L928.847 689.139 L929.406 689.139 L929.966 689.139 L930.525 689.139 L931.084 689.139 L931.644 689.139 L932.203 689.139 L932.762 689.139 L933.321 689.139 L933.881 689.139 L934.44 689.139 L934.999 689.139 L935.558 689.139 L936.118 689.139 L936.677 689.139 L937.236 689.139 L937.795 689.139 L938.355 689.139 L938.914 689.139 L939.473 689.139 L940.032 689.139 L940.592 689.139 L941.151 689.139 L941.71 689.139 L942.269 689.139 L942.829 689.139 L943.388 689.139 L943.947 689.139 L944.506 689.139 L945.066 689.139 L945.625 689.139 L946.184 689.139 L946.743 689.139 L947.303 689.139 L947.862 689.139 L948.421 689.139 L948.98 689.139 L949.54 689.139 L950.099 689.139 L950.658 689.139 L951.217 689.139 L951.777 689.139 L952.336 689.139 L952.895 689.139 L953.454 689.139 L954.014 689.139 L954.573 689.139 L955.132 689.139 L955.691 689.139 L956.251 689.139 L956.81 689.139 L957.369 689.139 L957.928 689.139 L958.488 689.139 L959.047 689.139 L959.606 689.139 L960.165 689.139 L960.725 689.139 L961.284 689.139 L961.843 689.139 L962.402 689.139 L962.962 689.139 L963.521 689.139 L964.08 689.139 L964.639 689.139 L965.199 689.139 L965.758 689.139 L966.317 689.139 L966.876 689.139 L967.436 689.139 L967.995 689.139 L968.554 689.139 L969.113 689.139 L969.673 689.139 L970.232 689.139 L970.791 689.139 L971.35 689.139 L971.91 689.139 L972.469 689.139 L973.028 689.139 L973.587 689.139 L974.147 689.139 L974.706 689.139 L975.265 689.139 L975.824 689.139 L976.384 689.139 L976.943 689.139 L977.502 689.139 L978.061 689.139 L978.621 689.139 L979.18 689.139 L979.739 689.139 L980.298 689.139 L980.858 689.139 L981.417 689.139 L981.976 689.139 L982.535 689.139 L983.095 689.139 L983.654 689.139 L984.213 689.139 L984.772 689.139 L985.332 689.139 L985.891 689.139 L986.45 689.139 L987.009 689.139 L987.569 689.139 L988.128 689.139 L988.687 689.139 L989.246 689.139 L989.806 689.139 L990.365 689.139 L990.924 689.139 L991.483 689.139 L992.043 689.139 L992.602 689.139 L993.161 689.139 L993.72 689.139 L994.28 689.139 L994.839 689.139 L995.398 689.139 L995.957 689.139 L996.517 689.139 L997.076 689.139 L997.635 689.139 L998.194 689.139 L998.754 689.139 L999.313 689.139 L999.872 689.139 L1000.43 689.139 L1000.99 689.139 L1001.55 689.139 L1002.11 689.139 L1002.67 689.139 L1003.23 689.139 L1003.79 689.139 L1004.35 689.139 L1004.91 689.139 L1005.46 689.139 L1006.02 689.139 L1006.58 689.139 L1007.14 689.139 L1007.7 689.139 L1008.26 689.139 L1008.82 689.139 L1009.38 689.139 L1009.94 689.139 L1010.5 689.139 L1011.06 689.139 L1011.62 689.139 L1012.18 689.139 L1012.73 689.139 L1013.29 689.139 L1013.85 689.139 L1014.41 689.139 L1014.97 689.139 L1015.53 689.139 L1016.09 689.139 L1016.65 689.139 L1017.21 689.139 L1017.77 689.139 L1018.33 689.139 L1018.89 689.139 L1019.45 689.139 L1020.01 689.139 L1020.56 689.139 L1021.12 689.139 L1021.68 689.139 L1022.24 689.139 L1022.8 689.139 L1023.36 689.139 L1023.92 689.139 L1024.48 689.139 L1025.04 689.139 L1025.6 689.139 L1026.16 689.139 L1026.72 689.139 L1027.28 689.139 L1027.83 689.139 L1028.39 689.139 L1028.95 689.139 L1029.51 689.139 L1030.07 689.139 L1030.63 689.139 L1031.19 689.139 L1031.75 689.139 L1032.31 689.139 L1032.87 689.139 L1033.43 689.139 L1033.99 689.139 L1034.55 689.139 L1035.1 689.139 L1035.66 689.139 L1036.22 689.139 L1036.78 689.139 L1037.34 689.139 L1037.9 689.139 L1038.46 689.139 L1039.02 689.139 L1039.58 689.139 L1040.14 689.139 L1040.7 689.139 L1041.26 689.139 L1041.82 689.139 L1042.38 689.139 L1042.93 689.139 L1043.49 689.139 L1044.05 689.139 L1044.61 689.139 L1045.17 689.139 L1045.73 689.139 L1046.29 689.139 L1046.85 689.139 L1047.41 689.139 L1047.97 689.139 L1048.53 689.139 L1049.09 689.139 L1049.65 689.139 L1050.2 689.139 L1050.76 689.139 L1051.32 689.139 L1051.88 689.139 L1052.44 689.139 L1053 689.139 L1053.56 689.139 L1054.12 689.139 L1054.68 689.139 L1055.24 689.139 L1055.8 689.139 L1056.36 689.139 L1056.92 689.139 L1057.48 689.139 L1058.03 689.139 L1058.59 689.139 L1059.15 689.139 L1059.71 689.139 L1060.27 689.139 L1060.83 689.139 L1061.39 689.139 L1061.95 689.139 L1062.51 689.139 L1063.07 689.139 L1063.63 689.139 L1064.19 689.139 L1064.75 689.139 L1065.3 689.139 L1065.86 689.139 L1066.42 689.139 L1066.98 689.139 L1067.54 689.139 L1068.1 689.139 L1068.66 689.139 L1069.22 689.139 L1069.78 689.139 L1070.34 689.139 L1070.9 689.139 L1071.46 689.139 L1072.02 689.139 L1072.57 689.139 L1073.13 689.139 L1073.69 689.139 L1074.25 689.139 L1074.81 689.139 L1075.37 689.139 L1075.93 689.139 L1076.49 689.139 L1077.05 689.139 L1077.61 689.139 L1078.17 689.139 L1078.73 689.139 L1079.29 689.139 L1079.85 689.139 L1080.4 689.139 L1080.96 689.139 L1081.52 689.139 L1082.08 689.139 L1082.64 689.139 L1083.2 689.139 L1083.76 689.139 L1084.32 689.139 L1084.88 689.139 L1085.44 689.139 L1086 689.139 L1086.56 689.139 L1087.12 689.139 L1087.67 689.139 L1088.23 689.139 L1088.79 689.139 L1089.35 689.139 L1089.91 689.139 L1090.47 689.139 L1091.03 689.139 L1091.59 689.139 L1092.15 689.139 L1092.71 689.139 L1093.27 689.139 L1093.83 689.139 L1094.39 689.139 L1094.94 689.139 L1095.5 689.139 L1096.06 689.139 L1096.62 689.139 L1097.18 689.139 L1097.74 689.139 L1098.3 689.139 L1098.86 689.139 L1099.42 689.139 L1099.98 689.139 L1100.54 689.139 L1101.1 689.139 L1101.66 689.139 L1102.22 689.139 L1102.77 689.139 L1103.33 689.139 L1103.89 689.139 L1104.45 689.139 L1105.01 689.139 L1105.57 689.139 L1106.13 689.139 L1106.69 689.139 L1107.25 689.139 L1107.81 689.139 L1108.37 689.139 L1108.93 689.139 L1109.49 689.139 L1110.04 689.139 L1110.6 689.139 L1111.16 689.139 L1111.72 689.139 L1112.28 689.139 L1112.84 689.139 L1113.4 689.139 L1113.96 689.139 L1114.52 689.139 L1115.08 689.139 L1115.64 689.139 L1116.2 689.139 L1116.76 689.139 L1117.31 689.139 L1117.87 689.139 L1118.43 689.139 L1118.99 689.139 L1119.55 689.139 L1120.11 689.139 L1120.67 689.139 L1121.23 689.139 L1121.79 689.139 L1122.35 689.139 L1122.91 689.139 L1123.47 689.139 L1124.03 689.139 L1124.59 689.139 L1125.14 689.139 L1125.7 689.139 L1126.26 689.139 L1126.82 689.139 L1127.38 689.139 L1127.94 689.139 L1128.5 689.139 L1129.06 689.139 L1129.62 689.139 L1130.18 689.139 L1130.74 689.139 L1131.3 689.139 L1131.86 689.139 L1132.41 689.139 L1132.97 689.139 L1133.53 689.139 L1134.09 689.139 L1134.65 689.139 L1135.21 689.139 L1135.77 689.139 L1136.33 689.139 L1136.89 689.139 L1137.45 689.139 L1138.01 689.139 L1138.57 689.139 L1139.13 689.139 L1139.68 689.139 L1140.24 689.139 L1140.8 689.139 L1141.36 689.139 L1141.92 689.139 L1142.48 689.139 L1143.04 689.139 L1143.6 689.139 L1144.16 689.139 L1144.72 689.139 L1145.28 689.139 L1145.84 689.139 L1146.4 689.139 L1146.96 689.139 L1147.51 689.139 L1148.07 689.139 L1148.63 689.139 L1149.19 689.139 L1149.75 689.139 L1150.31 689.139 L1150.87 689.139 L1151.43 689.139 L1151.99 689.139 L1152.55 689.139 L1153.11 689.139 L1153.67 689.139 L1154.23 689.139 L1154.78 689.139 L1155.34 689.139 L1155.9 689.139 L1156.46 689.139 L1157.02 689.139 L1157.58 689.139 L1158.14 689.139 L1158.7 689.139 L1159.26 689.139 L1159.82 689.139 L1160.38 689.139 L1160.94 689.139 L1161.5 689.139 L1162.05 689.139 L1162.61 689.139 L1163.17 689.139 L1163.73 689.139 L1164.29 689.139 L1164.85 689.139 L1165.41 689.139 L1165.97 689.139 L1166.53 689.139 L1167.09 689.139 L1167.65 689.139 L1168.21 689.139 L1168.77 689.139 L1169.33 689.139 L1169.88 689.139 L1170.44 689.139 L1171 689.139 L1171.56 689.139 L1172.12 689.139 L1172.68 689.139 L1173.24 689.139 L1173.8 689.139 L1174.36 689.139 L1174.92 689.139 L1175.48 689.139 L1176.04 689.139 L1176.6 689.139 L1177.15 689.139 L1177.71 689.139 L1178.27 689.139 L1178.83 689.139 L1179.39 689.139 L1179.95 689.139 L1180.51 689.139 L1181.07 689.139 L1181.63 689.139 L1182.19 689.139 L1182.75 689.139 L1183.31 689.139 L1183.87 689.139 L1184.43 689.139 L1184.98 689.139 L1185.54 689.139 L1186.1 689.139 L1186.66 689.139 L1187.22 689.139 L1187.78 689.139 L1188.34 689.139 L1188.9 689.139 L1189.46 689.139 L1190.02 689.139 L1190.58 689.139 L1191.14 689.139 L1191.7 689.139 L1192.25 689.139 L1192.81 689.139 L1193.37 689.139 L1193.93 689.139 L1194.49 689.139 L1195.05 689.139 L1195.61 689.139 L1196.17 689.139 L1196.73 689.139 L1197.29 689.139 L1197.85 689.139 L1198.41 689.139 L1198.97 689.139 L1199.52 689.139 L1200.08 689.139 L1200.64 689.139 L1201.2 689.139 L1201.76 689.139 L1202.32 689.139 L1202.88 689.139 L1203.44 689.139 L1204 689.139 L1204.56 689.139 L1205.12 689.139 L1205.68 689.139 L1206.24 689.139 L1206.8 689.139 L1207.35 689.139 L1207.91 689.139 L1208.47 689.139 L1209.03 689.139 L1209.59 689.139 L1210.15 689.139 L1210.71 689.139 L1211.27 689.139 L1211.83 689.139 L1212.39 689.139 L1212.95 689.139 L1213.51 689.139 L1214.07 689.139 L1214.62 689.139 L1215.18 689.139 L1215.74 689.139 L1216.3 689.139 L1216.86 689.139 L1217.42 689.139 L1217.98 689.139 L1218.54 689.139 L1219.1 689.139 L1219.66 689.139 L1220.22 689.139 L1220.78 689.139 L1221.34 689.139 L1221.89 689.139 L1222.45 689.139 L1223.01 689.139 L1223.57 689.139 L1224.13 689.139 L1224.69 689.139 L1225.25 689.139 L1225.81 689.139 L1226.37 689.139 L1226.93 689.139 L1227.49 689.139 L1228.05 689.139 L1228.61 689.139 L1229.17 689.139 L1229.72 689.139 L1230.28 689.139 L1230.84 689.139 L1231.4 689.139 L1231.96 689.139 L1232.52 689.139 L1233.08 689.139 L1233.64 689.139 L1234.2 689.139 L1234.76 689.139 L1235.32 689.139 L1235.88 689.139 L1236.44 689.139 L1236.99 689.139 L1237.55 689.139 L1238.11 689.139 L1238.67 689.139 L1239.23 689.139 L1239.79 689.139 L1240.35 689.139 L1240.91 689.139 L1241.47 689.139 L1242.03 689.139 L1242.59 689.139 L1243.15 689.139 L1243.71 689.139 L1244.26 689.139 L1244.82 689.139 L1245.38 689.139 L1245.94 689.139 L1246.5 689.139 L1247.06 689.139 L1247.62 689.139 L1248.18 689.139 L1248.74 689.139 L1249.3 689.139 L1249.86 689.139 L1250.42 689.139 L1250.98 689.139 L1251.54 689.139 L1252.09 689.139 L1252.65 689.139 L1253.21 689.139 L1253.77 689.139 L1254.33 689.139 L1254.89 689.139 L1255.45 689.139 L1256.01 689.139 L1256.57 689.139 L1257.13 689.139 L1257.69 689.139 L1258.25 689.139 L1258.81 689.139 L1259.36 689.139 L1259.92 689.139 L1260.48 689.139 L1261.04 689.139 L1261.6 689.139 L1262.16 689.139 L1262.72 689.139 L1263.28 689.139 L1263.84 689.139 L1264.4 689.139 L1264.96 689.139 L1265.52 689.139 L1266.08 689.139 L1266.63 689.139 L1267.19 689.139 L1267.75 689.139 L1268.31 689.139 L1268.87 689.139 L1269.43 689.139 L1269.99 689.139 L1270.55 689.139 L1271.11 689.139 L1271.67 689.139 L1272.23 689.139 L1272.79 689.139 L1273.35 689.139 L1273.91 689.139 L1274.46 689.139 L1275.02 689.139 L1275.58 689.139 L1276.14 689.139 L1276.7 689.139 L1277.26 689.139 L1277.82 689.139 L1278.38 689.139 L1278.94 689.139 L1279.5 689.139 L1280.06 689.139 L1280.62 689.139 L1281.18 689.139 L1281.73 689.139 L1282.29 689.139 L1282.85 689.139 L1283.41 689.139 L1283.97 689.139 L1284.53 689.139 L1285.09 689.139 L1285.65 689.139 L1286.21 689.139 L1286.77 689.139 L1287.33 689.139 L1287.89 689.139 L1288.45 689.139 L1289 689.139 L1289.56 689.139 L1290.12 689.139 L1290.68 689.139 L1291.24 689.139 L1291.8 689.139 L1292.36 689.139 L1292.92 689.139 L1293.48 689.139 L1294.04 689.139 L1294.6 689.139 L1295.16 689.139 L1295.72 689.139 L1296.28 689.139 L1296.83 689.139 L1297.39 689.139 L1297.95 689.139 L1298.51 689.139 L1299.07 689.139 L1299.63 689.139 L1300.19 689.139 L1300.75 689.139 L1301.31 689.139 L1301.87 689.139 L1302.43 689.139 L1302.99 689.139 L1303.55 689.139 L1304.1 689.139 L1304.66 689.139 L1305.22 689.139 L1305.78 689.139 L1306.34 689.139 L1306.9 689.139 L1307.46 689.139 L1308.02 689.139 L1308.58 689.139 L1309.14 689.139 L1309.7 689.139 L1310.26 689.139 L1310.82 689.139 L1311.38 689.139 L1311.93 689.139 L1312.49 689.139 L1313.05 689.139 L1313.61 689.139 L1314.17 689.139 L1314.73 689.139 L1315.29 689.139 L1315.85 689.139 L1316.41 689.139 L1316.97 689.139 L1317.53 689.139 L1318.09 689.139 L1318.65 689.139 L1319.2 689.139 L1319.76 689.139 L1320.32 689.139 L1320.88 689.139 L1321.44 689.139 L1322 689.139 L1322.56 689.139 L1323.12 689.139 L1323.68 689.139 L1324.24 689.139 L1324.8 689.139 L1325.36 689.139 L1325.92 689.139 L1326.47 689.139 L1327.03 689.139 L1327.59 689.139 L1328.15 689.139 L1328.71 689.139 L1329.27 689.139 L1329.83 689.139 L1330.39 689.139 L1330.95 689.139 L1331.51 689.139 L1332.07 689.139 L1332.63 689.139 L1333.19 689.139 L1333.75 689.139 L1334.3 689.139 L1334.86 689.139 L1335.42 689.139 L1335.98 689.139 L1336.54 689.139 L1337.1 689.139 L1337.66 689.139 L1338.22 689.139 L1338.78 689.139 L1339.34 689.139 L1339.9 689.139 L1340.46 689.139 L1341.02 689.139 L1341.57 689.139 L1342.13 689.139 L1342.69 689.139 L1343.25 689.139 L1343.81 689.139 L1344.37 689.139 L1344.93 689.139 L1345.49 689.139 L1346.05 689.139 L1346.61 689.139 L1347.17 689.139 L1347.73 689.139 L1348.29 689.139 L1348.84 689.139 L1349.4 689.139 L1349.96 689.139 L1350.52 689.139 L1351.08 689.139 L1351.64 689.139 L1352.2 689.139 L1352.76 689.139 L1353.32 689.139 L1353.88 689.139 L1354.44 689.139 L1355 689.139 L1355.56 689.139 L1356.12 689.139 L1356.67 689.139 L1357.23 689.139 L1357.79 689.139 L1358.35 689.139 L1358.91 689.139 L1359.47 689.139 L1360.03 689.139 L1360.59 689.139 L1361.15 689.139 L1361.71 689.139 L1362.27 689.139 L1362.83 689.139 L1363.39 689.139 L1363.94 689.139 L1364.5 689.139 L1365.06 689.139 L1365.62 689.139 L1366.18 689.139 L1366.74 689.139 L1367.3 689.139 L1367.86 689.139 L1368.42 689.139 L1368.98 689.139 L1369.54 689.139 L1370.1 689.139 L1370.66 689.139 L1371.21 689.139 L1371.77 689.139 L1372.33 689.139 L1372.89 689.139 L1373.45 689.139 L1374.01 689.139 L1374.57 689.139 L1375.13 689.139 L1375.69 689.139 L1376.25 689.139 L1376.81 689.139 L1377.37 689.139 L1377.93 689.139 L1378.49 689.139 L1379.04 689.139 L1379.6 689.139 L1380.16 689.139 L1380.72 689.139 L1381.28 689.139 L1381.84 689.139 L1382.4 689.139 L1382.96 689.139 L1383.52 689.139 L1384.08 689.139 L1384.64 689.139 L1385.2 689.139 L1385.76 689.139 L1386.31 689.139 L1386.87 689.139 L1387.43 689.139 L1387.99 689.139 L1388.55 689.139 L1389.11 689.139 L1389.67 689.139 L1390.23 689.139 L1390.79 689.139 L1391.35 689.139 L1391.91 689.139 L1392.47 689.139 L1393.03 689.139 L1393.58 689.139 L1394.14 689.139 L1394.7 689.139 L1395.26 689.139 L1395.82 689.139 L1396.38 689.139 L1396.94 689.139 L1397.5 689.139 L1398.06 689.139 L1398.62 689.139 L1399.18 689.139 L1399.74 689.139 L1400.3 689.139 L1400.86 689.139 L1401.41 689.139 L1401.97 689.139 L1402.53 689.139 L1403.09 689.139 L1403.65 689.139 L1404.21 689.139 L1404.77 689.139 L1405.33 689.139 L1405.89 689.139 L1406.45 689.139 L1407.01 689.139 L1407.57 689.139 L1408.13 689.139 L1408.68 689.139 L1409.24 689.139 L1409.8 689.139 L1410.36 689.139 L1410.92 689.139 L1411.48 689.139 L1412.04 689.139 L1412.6 689.139 L1413.16 689.139 L1413.72 689.139 L1414.28 689.139 L1414.84 689.139 L1415.4 689.139 L1415.95 689.139 L1416.51 689.139 L1417.07 689.139 L1417.63 689.139 L1418.19 689.139 L1418.75 689.139 L1419.31 689.139 L1419.87 689.139 L1420.43 689.139 L1420.99 689.139 L1421.55 689.139 L1422.11 689.139 L1422.67 689.139 L1423.23 689.139 L1423.78 689.139 L1424.34 689.139 L1424.9 689.139 L1425.46 689.139 L1426.02 689.139 L1426.58 689.139 L1427.14 689.139 L1427.7 689.139 L1428.26 689.139 L1428.82 689.139 L1429.38 689.139 L1429.94 689.139 L1430.5 689.139 L1431.05 689.139 L1431.61 689.139 L1432.17 689.139 L1432.73 689.139 L1433.29 689.139 L1433.85 689.139 L1434.41 689.139 L1434.97 689.139 L1435.53 689.139 L1436.09 689.139 L1436.65 689.139 L1437.21 689.139 L1437.77 689.139 L1438.33 689.139 L1438.88 689.139 L1439.44 689.139 L1440 689.139 L1440.56 689.139 L1441.12 689.139 L1441.68 689.139 L1442.24 689.139 L1442.8 689.139 L1443.36 689.139 L1443.92 689.139 L1444.48 689.139 L1445.04 689.139 L1445.6 689.139 L1446.15 689.139 L1446.71 689.139 L1447.27 689.139 L1447.83 689.139 L1448.39 689.139 L1448.95 689.139 L1449.51 689.139 L1450.07 689.139 L1450.63 689.139 L1451.19 689.139 L1451.75 689.139 L1452.31 689.139 L1452.87 689.139 L1453.42 689.139 L1453.98 689.139 L1454.54 689.139 L1455.1 689.139 L1455.66 689.139 L1456.22 689.139 L1456.78 689.139 L1457.34 689.139 L1457.9 689.139 L1458.46 689.139 L1459.02 689.139 L1459.58 689.139 L1460.14 689.139 L1460.7 689.139 L1461.25 689.139 L1461.81 689.139 L1462.37 689.139 L1462.93 689.139 L1463.49 689.139 L1464.05 689.139 L1464.61 689.139 L1465.17 689.139 L1465.73 689.139 L1466.29 689.139 L1466.85 689.139 L1467.41 689.139 L1467.97 689.139 L1468.52 689.139 L1469.08 689.139 L1469.64 689.139 L1470.2 689.139 L1470.76 689.139 L1471.32 689.139 L1471.88 689.139 L1472.44 689.139 L1473 689.139 L1473.56 689.139 L1474.12 689.139 L1474.68 689.139 L1475.24 689.139 L1475.79 689.139 L1476.35 689.139 L1476.91 689.139 L1477.47 689.139 L1478.03 689.139 L1478.59 689.139 L1479.15 689.139 L1479.71 689.139 L1480.27 689.139 L1480.83 689.139 L1481.39 689.139 L1481.95 689.139 L1482.51 689.139 L1483.07 689.139 L1483.62 689.139 L1484.18 689.139 L1484.74 689.139 L1485.3 689.139 L1485.86 689.139 L1486.42 689.139 L1486.98 689.139 L1487.54 689.139 L1488.1 689.139 L1488.66 689.139 L1489.22 689.139 L1489.78 689.139 L1490.34 689.139 L1490.89 689.139 L1491.45 689.139 L1492.01 689.139 L1492.57 689.139 L1493.13 689.139 L1493.69 689.139 L1494.25 689.139 L1494.81 689.139 L1495.37 689.139 L1495.93 689.139 L1496.49 689.139 L1497.05 689.139 L1497.61 689.139 L1498.16 689.139 L1498.72 689.139 L1499.28 689.139 L1499.84 689.139 L1500.4 689.139 L1500.96 689.139 L1501.52 689.139 L1502.08 689.139 L1502.64 689.139 L1503.2 689.139 L1503.76 689.139 L1504.32 689.139 L1504.88 689.139 L1505.44 689.139 L1505.99 689.139 L1506.55 689.139 L1507.11 689.139 L1507.67 689.139 L1508.23 689.139 L1508.79 689.139 L1509.35 689.139 L1509.91 689.139 L1510.47 689.139 L1511.03 689.139 L1511.59 689.139 L1512.15 689.139 L1512.71 689.139 L1513.26 689.139 L1513.82 689.139 L1514.38 689.139 L1514.94 689.139 L1515.5 689.139 L1516.06 689.139 L1516.62 689.139 L1517.18 689.139 L1517.74 689.139 L1518.3 689.139 L1518.86 689.139 L1519.42 689.139 L1519.98 689.139 L1520.53 689.139 L1521.09 689.139 L1521.65 689.139 L1522.21 689.139 L1522.77 689.139 L1523.33 689.139 L1523.89 689.139 L1524.45 689.139 L1525.01 689.139 L1525.57 689.139 L1526.13 689.139 L1526.69 689.139 L1527.25 689.139 L1527.81 689.139 L1528.36 689.139 L1528.92 689.139 L1529.48 689.139 L1530.04 689.139 L1530.6 689.139 L1531.16 689.139 L1531.72 689.139 L1532.28 689.139 L1532.84 689.139 L1533.4 689.139 L1533.96 689.139 L1534.52 689.139 L1535.08 689.139 L1535.63 689.139 L1536.19 689.139 L1536.75 689.139 L1537.31 689.139 L1537.87 689.139 L1538.43 689.139 L1538.99 689.139 L1539.55 689.139 L1540.11 689.139 L1540.67 689.139 L1541.23 689.139 L1541.79 689.139 L1542.35 689.139 L1542.9 689.139 L1543.46 689.139 L1544.02 689.139 L1544.58 689.139 L1545.14 689.139 L1545.7 689.139 L1546.26 689.139 L1546.82 689.139 L1547.38 689.139 L1547.94 689.139 L1548.5 689.139 L1549.06 689.139 L1549.62 689.139 L1550.18 689.139 L1550.73 689.139 L1551.29 689.139 L1551.85 689.139 L1552.41 689.139 L1552.97 689.139 L1553.53 689.139 L1554.09 689.139 L1554.65 689.139 L1555.21 689.139 L1555.77 689.139 L1556.33 689.139 L1556.89 689.139 L1557.45 689.139 L1558 689.139 L1558.56 689.139 L1559.12 689.139 L1559.68 689.139 L1560.24 689.139 L1560.8 689.139 L1561.36 689.139 L1561.92 689.139 L1562.48 689.139 L1563.04 689.139 L1563.6 689.139 L1564.16 689.139 L1564.72 689.139 L1565.28 689.139 L1565.83 689.139 L1566.39 689.139 L1566.95 689.139 L1567.51 689.139 L1568.07 689.139 L1568.63 689.139 L1569.19 689.139 L1569.75 689.139 L1570.31 689.139 L1570.87 689.139 L1571.43 689.139 L1571.99 689.139 L1572.55 689.139 L1573.1 689.139 L1573.66 689.139 L1574.22 689.139 L1574.78 689.139 L1575.34 689.139 L1575.9 689.139 L1576.46 689.139 L1577.02 689.139 L1577.58 689.139 L1578.14 689.139 L1578.7 689.139 L1579.26 689.139 L1579.82 689.139 L1580.37 689.139 L1580.93 689.139 L1581.49 689.139 L1582.05 689.139 L1582.61 689.139 L1583.17 689.139 L1583.73 689.139 L1584.29 689.139 L1584.85 689.139 L1585.41 689.139 L1585.97 689.139 L1586.53 689.139 L1587.09 689.139 L1587.65 689.139 L1588.2 689.139 L1588.76 689.139 L1589.32 689.139 L1589.88 689.139 L1590.44 689.139 L1591 689.139 L1591.56 689.139 L1592.12 689.139 L1592.68 689.139 L1593.24 689.139 L1593.8 689.139 L1594.36 689.139 L1594.92 689.139 L1595.47 689.139 L1596.03 689.139 L1596.59 689.139 L1597.15 689.139 L1597.71 689.139 L1598.27 689.139 L1598.83 689.139 L1599.39 689.139 L1599.95 689.139 L1600.51 689.139 L1601.07 689.139 L1601.63 689.139 L1602.19 689.139 L1602.74 689.139 L1603.3 689.139 L1603.86 689.139 L1604.42 689.139 L1604.98 689.139 L1605.54 689.139 L1606.1 689.139 L1606.66 689.139 L1607.22 689.139 L1607.78 689.139 L1608.34 689.139 L1608.9 689.139 L1609.46 689.139 L1610.02 689.139 L1610.57 689.139 L1611.13 689.139 L1611.69 689.139 L1612.25 689.139 L1612.81 689.139 L1613.37 689.139 L1613.93 689.139 L1614.49 689.139 L1615.05 689.139 L1615.61 689.139 L1616.17 689.139 L1616.73 689.139 L1617.29 689.139 L1617.84 689.139 L1618.4 689.139 L1618.96 689.139 L1619.52 689.139 L1620.08 689.139 L1620.64 689.139 L1621.2 689.139 L1621.76 689.139 L1622.32 689.139 L1622.88 689.139 L1623.44 689.139 L1624 689.139 L1624.56 689.139 L1625.11 689.139 L1625.67 689.139 L1626.23 689.139 L1626.79 689.139 L1627.35 689.139 L1627.91 689.139 L1628.47 689.139 L1629.03 689.139 L1629.59 689.139 L1630.15 689.139 L1630.71 689.139 L1631.27 689.139 L1631.83 689.139 L1632.39 689.139 L1632.94 689.139 L1633.5 689.139 L1634.06 689.139 L1634.62 689.139 L1635.18 689.139 L1635.74 689.139 L1636.3 689.139 L1636.86 689.139 L1637.42 689.139 L1637.98 689.139 L1638.54 689.139 L1639.1 689.139 L1639.66 689.139 L1640.21 689.139 L1640.77 689.139 L1641.33 689.139 L1641.89 689.139 L1642.45 689.139 L1643.01 689.139 L1643.57 689.139 L1644.13 689.139 L1644.69 689.139 L1645.25 689.139 L1645.81 689.139 L1646.37 689.139 L1646.93 689.139 L1647.48 689.139 L1648.04 689.139 L1648.6 689.139 L1649.16 689.139 L1649.72 689.139 L1650.28 689.139 L1650.84 689.139 L1651.4 689.139 L1651.96 689.139 L1652.52 689.139 L1653.08 689.139 L1653.64 689.139 L1654.2 689.139 L1654.76 689.139 L1655.31 689.139 L1655.87 689.139 L1656.43 689.139 L1656.99 689.139 L1657.55 689.139 L1658.11 689.139 L1658.67 689.139 L1659.23 689.139 L1659.79 689.139 L1660.35 689.139 L1660.91 689.139 L1661.47 689.139 L1662.03 689.139 L1662.58 689.139 L1663.14 689.139 L1663.7 689.139 L1664.26 689.139 L1664.82 689.139 L1665.38 689.139 L1665.94 689.139 L1666.5 689.139 L1667.06 689.139 L1667.62 689.139 L1668.18 689.139 L1668.74 689.139 L1669.3 689.139 L1669.85 689.139 L1670.41 689.139 L1670.97 689.139 L1671.53 689.139 L1672.09 689.139 L1672.65 689.139 L1673.21 689.139 L1673.77 689.139 L1674.33 689.139 L1674.89 689.139 L1675.45 689.139 L1676.01 689.139 L1676.57 689.139 L1677.13 689.139 L1677.68 689.139 L1678.24 689.139 L1678.8 689.139 L1679.36 689.139 L1679.92 689.139 L1680.48 689.139 L1681.04 689.139 L1681.6 689.139 L1682.16 689.139 L1682.72 689.139 L1683.28 689.139 L1683.84 689.139 L1684.4 689.139 L1684.95 689.139 L1685.51 689.139 L1686.07 689.139 L1686.63 689.139 L1687.19 689.139 L1687.75 689.139 L1688.31 689.139 L1688.87 689.139 L1689.43 689.139 L1689.99 689.139 L1690.55 689.139 L1691.11 689.139 L1691.67 689.139 L1692.23 689.139 L1692.78 689.139 L1693.34 689.139 L1693.9 689.139 L1694.46 689.139 L1695.02 689.139 L1695.58 689.139 L1696.14 689.139 L1696.7 689.139 L1697.26 689.139 L1697.82 689.139 L1698.38 689.139 L1698.94 689.139 L1699.5 689.139 L1700.05 689.139 L1700.61 689.139 L1701.17 689.139 L1701.73 689.139 L1702.29 689.139 L1702.85 689.139 L1703.41 689.139 L1703.97 689.139 L1704.53 689.139 L1705.09 689.139 L1705.65 689.139 L1706.21 689.139 L1706.77 689.139 L1707.32 689.139 L1707.88 689.139 L1708.44 689.139 L1709 689.139 L1709.56 689.139 L1710.12 689.139 L1710.68 689.139 L1711.24 689.139 L1711.8 689.139 L1712.36 689.139 L1712.92 689.139 L1713.48 689.139 L1714.04 689.139 L1714.6 689.139 L1715.15 689.139 L1715.71 689.139 L1716.27 689.139 L1716.83 689.139 L1717.39 689.139 L1717.95 689.139 L1718.51 689.139 L1719.07 689.139 L1719.63 689.139 L1720.19 689.139 L1720.75 689.139 L1721.31 689.139 L1721.87 689.139 L1722.42 689.139 L1722.98 689.139 L1723.54 689.139 L1724.1 689.139 L1724.66 689.139 L1725.22 689.139 L1725.78 689.139 L1726.34 689.139 L1726.9 689.139 L1727.46 689.139 L1728.02 689.139 L1728.58 689.139 L1729.14 689.139 L1729.69 689.139 L1730.25 689.139 L1730.81 689.139 L1731.37 689.139 L1731.93 689.139 L1732.49 689.139 L1733.05 689.139 L1733.61 689.139 L1734.17 689.139 L1734.73 689.139 L1735.29 689.139 L1735.85 689.139 L1736.41 689.139 L1736.97 689.139 L1737.52 689.139 L1738.08 689.139 L1738.64 689.139 L1739.2 689.139 L1739.76 689.139 L1740.32 689.139 L1740.88 689.139 L1741.44 689.139 L1742 689.139 L1742.56 689.139 L1743.12 689.139 L1743.68 689.139 L1744.24 689.139 L1744.79 689.139 L1745.35 689.139 L1745.91 689.139 L1746.47 689.139 L1747.03 689.139 L1747.59 689.139 L1748.15 689.139 L1748.71 689.139 L1749.27 689.139 L1749.83 689.139 L1750.39 689.139 L1750.95 689.139 L1751.51 689.139 L1752.06 689.139 L1752.62 689.139 L1753.18 689.139 L1753.74 689.139 L1754.3 689.139 L1754.86 689.139 L1755.42 689.139 L1755.98 689.139 L1756.54 689.139 L1757.1 689.139 L1757.66 689.139 L1758.22 689.139 L1758.78 689.139 L1759.34 689.139 L1759.89 689.139 L1760.45 689.139 L1761.01 689.139 L1761.57 689.139 L1762.13 689.139 L1762.69 689.139 L1763.25 689.139 L1763.81 689.139 L1764.37 689.139 L1764.93 689.139 L1765.49 689.139 L1766.05 689.139 L1766.61 689.139 L1767.16 689.139 L1767.72 689.139 L1768.28 689.139 L1768.84 689.139 L1769.4 689.139 L1769.96 689.139 L1770.52 689.139 L1771.08 689.139 L1771.64 689.139 L1772.2 689.139 L1772.76 689.139 L1773.32 689.139 L1773.88 689.139 L1774.43 689.139 L1774.99 689.139 L1775.55 689.139 L1776.11 689.139 L1776.67 689.139 L1777.23 689.139 L1777.79 689.139 L1778.35 689.139 L1778.91 689.139 L1779.47 689.139 L1780.03 689.139 L1780.59 689.139 L1781.15 689.139 L1781.71 689.139 L1782.26 689.139 L1782.82 689.139 L1783.38 689.139 L1783.94 689.139 L1784.5 689.139 L1785.06 689.139 L1785.62 689.139 L1786.18 689.139 L1786.74 689.139 L1787.3 689.139 L1787.86 689.139 L1788.42 689.139 L1788.98 689.139 L1789.53 689.139 L1790.09 689.139 L1790.65 689.139 L1791.21 689.139 L1791.77 689.139 L1792.33 689.139 L1792.89 689.139 L1793.45 689.139 L1794.01 689.139 L1794.57 689.139 L1795.13 689.139 L1795.69 689.139 L1796.25 689.139 L1796.8 689.139 L1797.36 689.139 L1797.92 689.139 L1798.48 689.139 L1799.04 689.139 L1799.6 689.139 L1800.16 689.139 L1800.72 689.139 L1801.28 689.139 L1801.84 689.139 L1802.4 689.139 L1802.96 689.139 L1803.52 689.139 L1804.08 689.139 L1804.63 689.139 L1805.19 689.139 L1805.75 689.139 L1806.31 689.139 L1806.87 689.139 L1807.43 689.139 L1807.99 689.139 L1808.55 689.139 L1809.11 689.139 L1809.67 689.139 L1810.23 689.139 L1810.79 689.139 L1811.35 689.139 L1811.9 689.139 L1812.46 689.139 L1813.02 689.139 L1813.58 689.139 L1814.14 689.139 L1814.7 689.139 L1815.26 689.139 L1815.82 689.139 L1816.38 689.139 L1816.94 689.139 L1817.5 689.139 L1818.06 689.139 L1818.62 689.139 L1819.18 689.139 L1819.73 689.139 L1820.29 689.139 L1820.85 689.139 L1821.41 689.139 L1821.97 689.139 L1822.53 689.139 L1823.09 689.139 L1823.65 689.139 L1824.21 689.139 L1824.77 689.139 L1825.33 689.139 L1825.89 689.139 L1826.45 689.139 L1827 689.139 L1827.56 689.139 L1828.12 689.139 L1828.68 689.139 L1829.24 689.139 L1829.8 689.139 L1830.36 689.139 L1830.92 689.139 L1831.48 689.139 L1832.04 689.139 L1832.6 689.139 L1833.16 689.139 L1833.72 689.139 L1834.27 689.139 L1834.83 689.139 L1835.39 689.139 L1835.95 689.139 L1836.51 689.139 L1837.07 689.139 L1837.63 689.139 L1838.19 689.139 L1838.19 682.312 L1837.63 682.312 L1837.07 682.312 L1836.51 682.312 L1835.95 682.312 L1835.39 682.312 L1834.83 682.312 L1834.27 682.312 L1833.72 682.312 L1833.16 682.312 L1832.6 682.312 L1832.04 682.312 L1831.48 682.312 L1830.92 682.312 L1830.36 682.312 L1829.8 682.312 L1829.24 682.312 L1828.68 682.312 L1828.12 682.312 L1827.56 682.312 L1827 682.312 L1826.45 682.312 L1825.89 682.312 L1825.33 682.312 L1824.77 682.312 L1824.21 682.312 L1823.65 682.312 L1823.09 682.312 L1822.53 682.312 L1821.97 682.312 L1821.41 682.312 L1820.85 682.312 L1820.29 682.312 L1819.73 682.312 L1819.18 682.312 L1818.62 682.312 L1818.06 682.312 L1817.5 682.312 L1816.94 682.312 L1816.38 682.312 L1815.82 682.312 L1815.26 682.312 L1814.7 682.312 L1814.14 682.312 L1813.58 682.312 L1813.02 682.312 L1812.46 682.312 L1811.9 682.312 L1811.35 682.312 L1810.79 682.312 L1810.23 682.312 L1809.67 682.312 L1809.11 682.312 L1808.55 682.312 L1807.99 682.312 L1807.43 682.312 L1806.87 682.312 L1806.31 682.312 L1805.75 682.312 L1805.19 682.312 L1804.63 682.312 L1804.08 682.312 L1803.52 682.312 L1802.96 682.312 L1802.4 682.312 L1801.84 682.312 L1801.28 682.312 L1800.72 682.312 L1800.16 682.312 L1799.6 682.312 L1799.04 682.312 L1798.48 682.312 L1797.92 682.312 L1797.36 682.312 L1796.8 682.312 L1796.25 682.312 L1795.69 682.312 L1795.13 682.312 L1794.57 682.312 L1794.01 682.312 L1793.45 682.312 L1792.89 682.312 L1792.33 682.312 L1791.77 682.312 L1791.21 682.312 L1790.65 682.312 L1790.09 682.312 L1789.53 682.312 L1788.98 682.312 L1788.42 682.312 L1787.86 682.312 L1787.3 682.312 L1786.74 682.312 L1786.18 682.312 L1785.62 682.312 L1785.06 682.312 L1784.5 682.312 L1783.94 682.312 L1783.38 682.312 L1782.82 682.312 L1782.26 682.312 L1781.71 682.312 L1781.15 682.312 L1780.59 682.312 L1780.03 682.312 L1779.47 682.312 L1778.91 682.312 L1778.35 682.312 L1777.79 682.312 L1777.23 682.312 L1776.67 682.312 L1776.11 682.312 L1775.55 682.312 L1774.99 682.312 L1774.43 682.312 L1773.88 682.312 L1773.32 682.312 L1772.76 682.312 L1772.2 682.312 L1771.64 682.312 L1771.08 682.312 L1770.52 682.312 L1769.96 682.312 L1769.4 682.312 L1768.84 682.312 L1768.28 682.312 L1767.72 682.312 L1767.16 682.312 L1766.61 682.312 L1766.05 682.312 L1765.49 682.312 L1764.93 682.312 L1764.37 682.312 L1763.81 682.312 L1763.25 682.312 L1762.69 682.312 L1762.13 682.312 L1761.57 682.312 L1761.01 682.312 L1760.45 682.312 L1759.89 682.312 L1759.34 682.312 L1758.78 682.312 L1758.22 682.312 L1757.66 682.312 L1757.1 682.312 L1756.54 682.312 L1755.98 682.312 L1755.42 682.312 L1754.86 682.312 L1754.3 682.312 L1753.74 682.312 L1753.18 682.312 L1752.62 682.312 L1752.06 682.312 L1751.51 682.312 L1750.95 682.312 L1750.39 682.312 L1749.83 682.312 L1749.27 682.312 L1748.71 682.312 L1748.15 682.312 L1747.59 682.312 L1747.03 682.312 L1746.47 682.312 L1745.91 682.312 L1745.35 682.312 L1744.79 682.312 L1744.24 682.312 L1743.68 682.312 L1743.12 682.312 L1742.56 682.312 L1742 682.312 L1741.44 682.312 L1740.88 682.312 L1740.32 682.312 L1739.76 682.312 L1739.2 682.312 L1738.64 682.312 L1738.08 682.312 L1737.52 682.312 L1736.97 682.312 L1736.41 682.312 L1735.85 682.312 L1735.29 682.312 L1734.73 682.312 L1734.17 682.312 L1733.61 682.312 L1733.05 682.312 L1732.49 682.312 L1731.93 682.312 L1731.37 682.312 L1730.81 682.312 L1730.25 682.312 L1729.69 682.312 L1729.14 682.312 L1728.58 682.312 L1728.02 682.312 L1727.46 682.312 L1726.9 682.312 L1726.34 682.312 L1725.78 682.312 L1725.22 682.312 L1724.66 682.312 L1724.1 682.312 L1723.54 682.312 L1722.98 682.312 L1722.42 682.312 L1721.87 682.312 L1721.31 682.312 L1720.75 682.312 L1720.19 682.312 L1719.63 682.312 L1719.07 682.312 L1718.51 682.312 L1717.95 682.312 L1717.39 682.312 L1716.83 682.312 L1716.27 682.312 L1715.71 682.312 L1715.15 682.312 L1714.6 682.312 L1714.04 682.312 L1713.48 682.312 L1712.92 682.312 L1712.36 682.312 L1711.8 682.312 L1711.24 682.312 L1710.68 682.312 L1710.12 682.312 L1709.56 682.312 L1709 682.312 L1708.44 682.312 L1707.88 682.312 L1707.32 682.312 L1706.77 682.312 L1706.21 682.312 L1705.65 682.312 L1705.09 682.312 L1704.53 682.312 L1703.97 682.312 L1703.41 682.312 L1702.85 682.312 L1702.29 682.312 L1701.73 682.312 L1701.17 682.312 L1700.61 682.312 L1700.05 682.312 L1699.5 682.312 L1698.94 682.312 L1698.38 682.312 L1697.82 682.312 L1697.26 682.312 L1696.7 682.312 L1696.14 682.312 L1695.58 682.312 L1695.02 682.312 L1694.46 682.312 L1693.9 682.312 L1693.34 682.312 L1692.78 682.312 L1692.23 682.312 L1691.67 682.312 L1691.11 682.312 L1690.55 682.312 L1689.99 682.312 L1689.43 682.312 L1688.87 682.312 L1688.31 682.312 L1687.75 682.312 L1687.19 682.312 L1686.63 682.312 L1686.07 682.312 L1685.51 682.312 L1684.95 682.312 L1684.4 682.312 L1683.84 682.312 L1683.28 682.312 L1682.72 682.312 L1682.16 682.312 L1681.6 682.312 L1681.04 682.312 L1680.48 682.312 L1679.92 682.312 L1679.36 682.312 L1678.8 682.312 L1678.24 682.312 L1677.68 682.312 L1677.13 682.312 L1676.57 682.312 L1676.01 682.312 L1675.45 682.312 L1674.89 682.312 L1674.33 682.312 L1673.77 682.312 L1673.21 682.312 L1672.65 682.312 L1672.09 682.312 L1671.53 682.312 L1670.97 682.312 L1670.41 682.312 L1669.85 682.312 L1669.3 682.312 L1668.74 682.312 L1668.18 682.312 L1667.62 682.312 L1667.06 682.312 L1666.5 682.312 L1665.94 682.312 L1665.38 682.312 L1664.82 682.312 L1664.26 682.312 L1663.7 682.312 L1663.14 682.312 L1662.58 682.312 L1662.03 682.312 L1661.47 682.312 L1660.91 682.312 L1660.35 682.312 L1659.79 682.312 L1659.23 682.312 L1658.67 682.312 L1658.11 682.312 L1657.55 682.312 L1656.99 682.312 L1656.43 682.312 L1655.87 682.312 L1655.31 682.312 L1654.76 682.312 L1654.2 682.312 L1653.64 682.312 L1653.08 682.312 L1652.52 682.312 L1651.96 682.312 L1651.4 682.312 L1650.84 682.312 L1650.28 682.312 L1649.72 682.312 L1649.16 682.312 L1648.6 682.312 L1648.04 682.312 L1647.48 682.312 L1646.93 682.312 L1646.37 682.312 L1645.81 682.312 L1645.25 682.312 L1644.69 682.312 L1644.13 682.312 L1643.57 682.312 L1643.01 682.312 L1642.45 682.312 L1641.89 682.312 L1641.33 682.312 L1640.77 682.312 L1640.21 682.312 L1639.66 682.312 L1639.1 682.312 L1638.54 682.312 L1637.98 682.312 L1637.42 682.312 L1636.86 682.312 L1636.3 682.312 L1635.74 682.312 L1635.18 682.312 L1634.62 682.312 L1634.06 682.312 L1633.5 682.312 L1632.94 682.312 L1632.39 682.312 L1631.83 682.312 L1631.27 682.312 L1630.71 682.312 L1630.15 682.312 L1629.59 682.312 L1629.03 682.312 L1628.47 682.312 L1627.91 682.312 L1627.35 682.312 L1626.79 682.312 L1626.23 682.312 L1625.67 682.312 L1625.11 682.312 L1624.56 682.312 L1624 682.312 L1623.44 682.312 L1622.88 682.312 L1622.32 682.312 L1621.76 682.312 L1621.2 682.312 L1620.64 682.312 L1620.08 682.312 L1619.52 682.312 L1618.96 682.312 L1618.4 682.312 L1617.84 682.312 L1617.29 682.312 L1616.73 682.312 L1616.17 682.312 L1615.61 682.312 L1615.05 682.312 L1614.49 682.312 L1613.93 682.312 L1613.37 682.312 L1612.81 682.312 L1612.25 682.312 L1611.69 682.312 L1611.13 682.312 L1610.57 682.312 L1610.02 682.312 L1609.46 682.312 L1608.9 682.312 L1608.34 682.312 L1607.78 682.312 L1607.22 682.312 L1606.66 682.312 L1606.1 682.312 L1605.54 682.312 L1604.98 682.312 L1604.42 682.312 L1603.86 682.312 L1603.3 682.312 L1602.74 682.312 L1602.19 682.312 L1601.63 682.312 L1601.07 682.312 L1600.51 682.312 L1599.95 682.312 L1599.39 682.312 L1598.83 682.312 L1598.27 682.312 L1597.71 682.312 L1597.15 682.312 L1596.59 682.312 L1596.03 682.312 L1595.47 682.312 L1594.92 682.312 L1594.36 682.312 L1593.8 682.312 L1593.24 682.312 L1592.68 682.312 L1592.12 682.312 L1591.56 682.312 L1591 682.312 L1590.44 682.312 L1589.88 682.312 L1589.32 682.312 L1588.76 682.312 L1588.2 682.312 L1587.65 682.312 L1587.09 682.312 L1586.53 682.312 L1585.97 682.312 L1585.41 682.312 L1584.85 682.312 L1584.29 682.312 L1583.73 682.312 L1583.17 682.312 L1582.61 682.312 L1582.05 682.312 L1581.49 682.312 L1580.93 682.312 L1580.37 682.312 L1579.82 682.312 L1579.26 682.312 L1578.7 682.312 L1578.14 682.312 L1577.58 682.312 L1577.02 682.312 L1576.46 682.312 L1575.9 682.312 L1575.34 682.312 L1574.78 682.312 L1574.22 682.312 L1573.66 682.312 L1573.1 682.312 L1572.55 682.312 L1571.99 682.312 L1571.43 682.312 L1570.87 682.312 L1570.31 682.312 L1569.75 682.312 L1569.19 682.312 L1568.63 682.312 L1568.07 682.312 L1567.51 682.312 L1566.95 682.312 L1566.39 682.312 L1565.83 682.312 L1565.28 682.312 L1564.72 682.312 L1564.16 682.312 L1563.6 682.312 L1563.04 682.312 L1562.48 682.312 L1561.92 682.312 L1561.36 682.312 L1560.8 682.312 L1560.24 682.312 L1559.68 682.312 L1559.12 682.312 L1558.56 682.312 L1558 682.312 L1557.45 682.312 L1556.89 682.312 L1556.33 682.312 L1555.77 682.312 L1555.21 682.312 L1554.65 682.312 L1554.09 682.312 L1553.53 682.312 L1552.97 682.312 L1552.41 682.312 L1551.85 682.312 L1551.29 682.312 L1550.73 682.312 L1550.18 682.312 L1549.62 682.312 L1549.06 682.312 L1548.5 682.312 L1547.94 682.312 L1547.38 682.312 L1546.82 682.312 L1546.26 682.312 L1545.7 682.312 L1545.14 682.312 L1544.58 682.312 L1544.02 682.312 L1543.46 682.312 L1542.9 682.312 L1542.35 682.312 L1541.79 682.312 L1541.23 682.312 L1540.67 682.312 L1540.11 682.312 L1539.55 682.312 L1538.99 682.312 L1538.43 682.312 L1537.87 682.312 L1537.31 682.312 L1536.75 682.312 L1536.19 682.312 L1535.63 682.312 L1535.08 682.312 L1534.52 682.312 L1533.96 682.312 L1533.4 682.312 L1532.84 682.312 L1532.28 682.312 L1531.72 682.312 L1531.16 682.312 L1530.6 682.312 L1530.04 682.312 L1529.48 682.312 L1528.92 682.312 L1528.36 682.312 L1527.81 682.312 L1527.25 682.312 L1526.69 682.312 L1526.13 682.312 L1525.57 682.312 L1525.01 682.312 L1524.45 682.312 L1523.89 682.312 L1523.33 682.312 L1522.77 682.312 L1522.21 682.312 L1521.65 682.312 L1521.09 682.312 L1520.53 682.312 L1519.98 682.312 L1519.42 682.312 L1518.86 682.312 L1518.3 682.312 L1517.74 682.312 L1517.18 682.312 L1516.62 682.312 L1516.06 682.312 L1515.5 682.312 L1514.94 682.312 L1514.38 682.312 L1513.82 682.312 L1513.26 682.312 L1512.71 682.312 L1512.15 682.312 L1511.59 682.312 L1511.03 682.312 L1510.47 682.312 L1509.91 682.312 L1509.35 682.312 L1508.79 682.312 L1508.23 682.312 L1507.67 682.312 L1507.11 682.312 L1506.55 682.312 L1505.99 682.312 L1505.44 682.312 L1504.88 682.312 L1504.32 682.312 L1503.76 682.312 L1503.2 682.312 L1502.64 682.312 L1502.08 682.312 L1501.52 682.312 L1500.96 682.312 L1500.4 682.312 L1499.84 682.312 L1499.28 682.312 L1498.72 682.312 L1498.16 682.312 L1497.61 682.312 L1497.05 682.312 L1496.49 682.312 L1495.93 682.312 L1495.37 682.312 L1494.81 682.312 L1494.25 682.312 L1493.69 682.312 L1493.13 682.312 L1492.57 682.312 L1492.01 682.312 L1491.45 682.312 L1490.89 682.312 L1490.34 682.312 L1489.78 682.312 L1489.22 682.312 L1488.66 682.312 L1488.1 682.312 L1487.54 682.312 L1486.98 682.312 L1486.42 682.312 L1485.86 682.312 L1485.3 682.312 L1484.74 682.312 L1484.18 682.312 L1483.62 682.312 L1483.07 682.312 L1482.51 682.312 L1481.95 682.312 L1481.39 682.312 L1480.83 682.312 L1480.27 682.312 L1479.71 682.312 L1479.15 682.312 L1478.59 682.312 L1478.03 682.312 L1477.47 682.312 L1476.91 682.312 L1476.35 682.312 L1475.79 682.312 L1475.24 682.312 L1474.68 682.312 L1474.12 682.312 L1473.56 682.312 L1473 682.312 L1472.44 682.312 L1471.88 682.312 L1471.32 682.312 L1470.76 682.312 L1470.2 682.312 L1469.64 682.312 L1469.08 682.312 L1468.52 682.312 L1467.97 682.312 L1467.41 682.312 L1466.85 682.312 L1466.29 682.312 L1465.73 682.312 L1465.17 682.312 L1464.61 682.312 L1464.05 682.312 L1463.49 682.312 L1462.93 682.312 L1462.37 682.312 L1461.81 682.312 L1461.25 682.312 L1460.7 682.312 L1460.14 682.312 L1459.58 682.312 L1459.02 682.312 L1458.46 682.312 L1457.9 682.312 L1457.34 682.312 L1456.78 682.312 L1456.22 682.312 L1455.66 682.312 L1455.1 682.312 L1454.54 682.312 L1453.98 682.312 L1453.42 682.312 L1452.87 682.312 L1452.31 682.312 L1451.75 682.312 L1451.19 682.312 L1450.63 682.312 L1450.07 682.312 L1449.51 682.312 L1448.95 682.312 L1448.39 682.312 L1447.83 682.312 L1447.27 682.312 L1446.71 682.312 L1446.15 682.312 L1445.6 682.312 L1445.04 682.312 L1444.48 682.312 L1443.92 682.312 L1443.36 682.312 L1442.8 682.312 L1442.24 682.312 L1441.68 682.312 L1441.12 682.312 L1440.56 682.312 L1440 682.312 L1439.44 682.312 L1438.88 682.312 L1438.33 682.312 L1437.77 682.312 L1437.21 682.312 L1436.65 682.312 L1436.09 682.312 L1435.53 682.312 L1434.97 682.312 L1434.41 682.312 L1433.85 682.312 L1433.29 682.312 L1432.73 682.312 L1432.17 682.312 L1431.61 682.312 L1431.05 682.312 L1430.5 682.312 L1429.94 682.312 L1429.38 682.312 L1428.82 682.312 L1428.26 682.312 L1427.7 682.312 L1427.14 682.312 L1426.58 682.312 L1426.02 682.312 L1425.46 682.312 L1424.9 682.312 L1424.34 682.312 L1423.78 682.312 L1423.23 682.312 L1422.67 682.312 L1422.11 682.312 L1421.55 682.312 L1420.99 682.312 L1420.43 682.312 L1419.87 682.312 L1419.31 682.312 L1418.75 682.312 L1418.19 682.312 L1417.63 682.312 L1417.07 682.312 L1416.51 682.312 L1415.95 682.312 L1415.4 682.312 L1414.84 682.312 L1414.28 682.312 L1413.72 682.312 L1413.16 682.312 L1412.6 682.312 L1412.04 682.312 L1411.48 682.312 L1410.92 682.312 L1410.36 682.312 L1409.8 682.312 L1409.24 682.312 L1408.68 682.312 L1408.13 682.312 L1407.57 682.312 L1407.01 682.312 L1406.45 682.312 L1405.89 682.312 L1405.33 682.312 L1404.77 682.312 L1404.21 682.312 L1403.65 682.312 L1403.09 682.312 L1402.53 682.312 L1401.97 682.312 L1401.41 682.312 L1400.86 682.312 L1400.3 682.312 L1399.74 682.312 L1399.18 682.312 L1398.62 682.312 L1398.06 682.312 L1397.5 682.312 L1396.94 682.312 L1396.38 682.312 L1395.82 682.312 L1395.26 682.312 L1394.7 682.312 L1394.14 682.312 L1393.58 682.312 L1393.03 682.312 L1392.47 682.312 L1391.91 682.312 L1391.35 682.312 L1390.79 682.312 L1390.23 682.312 L1389.67 682.312 L1389.11 682.312 L1388.55 682.312 L1387.99 682.312 L1387.43 682.312 L1386.87 682.312 L1386.31 682.312 L1385.76 682.312 L1385.2 682.312 L1384.64 682.312 L1384.08 682.312 L1383.52 682.312 L1382.96 682.312 L1382.4 682.312 L1381.84 682.312 L1381.28 682.312 L1380.72 682.312 L1380.16 682.312 L1379.6 682.312 L1379.04 682.312 L1378.49 682.312 L1377.93 682.312 L1377.37 682.312 L1376.81 682.312 L1376.25 682.312 L1375.69 682.312 L1375.13 682.312 L1374.57 682.312 L1374.01 682.312 L1373.45 682.312 L1372.89 682.312 L1372.33 682.312 L1371.77 682.312 L1371.21 682.312 L1370.66 682.312 L1370.1 682.312 L1369.54 682.312 L1368.98 682.312 L1368.42 682.312 L1367.86 682.312 L1367.3 682.312 L1366.74 682.312 L1366.18 682.312 L1365.62 682.312 L1365.06 682.312 L1364.5 682.312 L1363.94 682.312 L1363.39 682.312 L1362.83 682.312 L1362.27 682.312 L1361.71 682.312 L1361.15 682.312 L1360.59 682.312 L1360.03 682.312 L1359.47 682.312 L1358.91 682.312 L1358.35 682.312 L1357.79 682.312 L1357.23 682.312 L1356.67 682.312 L1356.12 682.312 L1355.56 682.312 L1355 682.312 L1354.44 682.312 L1353.88 682.312 L1353.32 682.312 L1352.76 682.312 L1352.2 682.312 L1351.64 682.312 L1351.08 682.312 L1350.52 682.312 L1349.96 682.312 L1349.4 682.312 L1348.84 682.312 L1348.29 682.312 L1347.73 682.312 L1347.17 682.312 L1346.61 682.312 L1346.05 682.312 L1345.49 682.312 L1344.93 682.312 L1344.37 682.312 L1343.81 682.312 L1343.25 682.312 L1342.69 682.312 L1342.13 682.312 L1341.57 682.312 L1341.02 682.312 L1340.46 682.312 L1339.9 682.312 L1339.34 682.312 L1338.78 682.312 L1338.22 682.312 L1337.66 682.312 L1337.1 682.312 L1336.54 682.312 L1335.98 682.312 L1335.42 682.312 L1334.86 682.312 L1334.3 682.312 L1333.75 682.312 L1333.19 682.312 L1332.63 682.312 L1332.07 682.312 L1331.51 682.312 L1330.95 682.312 L1330.39 682.312 L1329.83 682.312 L1329.27 682.312 L1328.71 682.312 L1328.15 682.312 L1327.59 682.312 L1327.03 682.312 L1326.47 682.312 L1325.92 682.312 L1325.36 682.312 L1324.8 682.312 L1324.24 682.312 L1323.68 682.312 L1323.12 682.312 L1322.56 682.312 L1322 682.312 L1321.44 682.312 L1320.88 682.312 L1320.32 682.312 L1319.76 682.312 L1319.2 682.312 L1318.65 682.312 L1318.09 682.312 L1317.53 682.312 L1316.97 682.312 L1316.41 682.312 L1315.85 682.312 L1315.29 682.312 L1314.73 682.312 L1314.17 682.312 L1313.61 682.312 L1313.05 682.312 L1312.49 682.312 L1311.93 682.312 L1311.38 682.312 L1310.82 682.312 L1310.26 682.312 L1309.7 682.312 L1309.14 682.312 L1308.58 682.312 L1308.02 682.312 L1307.46 682.312 L1306.9 682.312 L1306.34 682.312 L1305.78 682.312 L1305.22 682.312 L1304.66 682.312 L1304.1 682.312 L1303.55 682.312 L1302.99 682.312 L1302.43 682.312 L1301.87 682.312 L1301.31 682.312 L1300.75 682.312 L1300.19 682.312 L1299.63 682.312 L1299.07 682.312 L1298.51 682.312 L1297.95 682.312 L1297.39 682.312 L1296.83 682.312 L1296.28 682.312 L1295.72 682.312 L1295.16 682.312 L1294.6 682.312 L1294.04 682.312 L1293.48 682.312 L1292.92 682.312 L1292.36 682.312 L1291.8 682.312 L1291.24 682.312 L1290.68 682.312 L1290.12 682.312 L1289.56 682.312 L1289 682.312 L1288.45 682.312 L1287.89 682.312 L1287.33 682.312 L1286.77 682.312 L1286.21 682.312 L1285.65 682.312 L1285.09 682.312 L1284.53 682.312 L1283.97 682.312 L1283.41 682.312 L1282.85 682.312 L1282.29 682.312 L1281.73 682.312 L1281.18 682.312 L1280.62 682.312 L1280.06 682.312 L1279.5 682.312 L1278.94 682.312 L1278.38 682.312 L1277.82 682.312 L1277.26 682.312 L1276.7 682.312 L1276.14 682.312 L1275.58 682.312 L1275.02 682.312 L1274.46 682.312 L1273.91 682.312 L1273.35 682.312 L1272.79 682.312 L1272.23 682.312 L1271.67 682.312 L1271.11 682.312 L1270.55 682.312 L1269.99 682.312 L1269.43 682.312 L1268.87 682.312 L1268.31 682.312 L1267.75 682.312 L1267.19 682.312 L1266.63 682.312 L1266.08 682.312 L1265.52 682.312 L1264.96 682.312 L1264.4 682.312 L1263.84 682.312 L1263.28 682.312 L1262.72 682.312 L1262.16 682.312 L1261.6 682.312 L1261.04 682.312 L1260.48 682.312 L1259.92 682.312 L1259.36 682.312 L1258.81 682.312 L1258.25 682.312 L1257.69 682.312 L1257.13 682.312 L1256.57 682.312 L1256.01 682.312 L1255.45 682.312 L1254.89 682.312 L1254.33 682.312 L1253.77 682.312 L1253.21 682.312 L1252.65 682.312 L1252.09 682.312 L1251.54 682.312 L1250.98 682.312 L1250.42 682.312 L1249.86 682.312 L1249.3 682.312 L1248.74 682.312 L1248.18 682.312 L1247.62 682.312 L1247.06 682.312 L1246.5 682.312 L1245.94 682.312 L1245.38 682.312 L1244.82 682.312 L1244.26 682.312 L1243.71 682.312 L1243.15 682.312 L1242.59 682.312 L1242.03 682.312 L1241.47 682.312 L1240.91 682.312 L1240.35 682.312 L1239.79 682.312 L1239.23 682.312 L1238.67 682.312 L1238.11 682.312 L1237.55 682.312 L1236.99 682.312 L1236.44 682.312 L1235.88 682.312 L1235.32 682.312 L1234.76 682.312 L1234.2 682.312 L1233.64 682.312 L1233.08 682.312 L1232.52 682.312 L1231.96 682.312 L1231.4 682.312 L1230.84 682.312 L1230.28 682.312 L1229.72 682.312 L1229.17 682.312 L1228.61 682.312 L1228.05 682.312 L1227.49 682.312 L1226.93 682.312 L1226.37 682.312 L1225.81 682.312 L1225.25 682.312 L1224.69 682.312 L1224.13 682.312 L1223.57 682.312 L1223.01 682.312 L1222.45 682.312 L1221.89 682.312 L1221.34 682.312 L1220.78 682.312 L1220.22 682.312 L1219.66 682.312 L1219.1 682.312 L1218.54 682.312 L1217.98 682.312 L1217.42 682.312 L1216.86 682.312 L1216.3 682.312 L1215.74 682.312 L1215.18 682.312 L1214.62 682.312 L1214.07 682.312 L1213.51 682.312 L1212.95 682.312 L1212.39 682.312 L1211.83 682.312 L1211.27 682.312 L1210.71 682.312 L1210.15 682.312 L1209.59 682.312 L1209.03 682.312 L1208.47 682.312 L1207.91 682.312 L1207.35 682.312 L1206.8 682.312 L1206.24 682.312 L1205.68 682.312 L1205.12 682.312 L1204.56 682.312 L1204 682.312 L1203.44 682.312 L1202.88 682.312 L1202.32 682.312 L1201.76 682.312 L1201.2 682.312 L1200.64 682.312 L1200.08 682.312 L1199.52 682.312 L1198.97 682.312 L1198.41 682.312 L1197.85 682.312 L1197.29 682.312 L1196.73 682.312 L1196.17 682.312 L1195.61 682.312 L1195.05 682.312 L1194.49 682.312 L1193.93 682.312 L1193.37 682.312 L1192.81 682.312 L1192.25 682.312 L1191.7 682.312 L1191.14 682.312 L1190.58 682.312 L1190.02 682.312 L1189.46 682.312 L1188.9 682.312 L1188.34 682.312 L1187.78 682.312 L1187.22 682.312 L1186.66 682.312 L1186.1 682.312 L1185.54 682.312 L1184.98 682.312 L1184.43 682.312 L1183.87 682.312 L1183.31 682.312 L1182.75 682.312 L1182.19 682.312 L1181.63 682.312 L1181.07 682.312 L1180.51 682.312 L1179.95 682.312 L1179.39 682.312 L1178.83 682.312 L1178.27 682.312 L1177.71 682.312 L1177.15 682.312 L1176.6 682.312 L1176.04 682.312 L1175.48 682.312 L1174.92 682.312 L1174.36 682.312 L1173.8 682.312 L1173.24 682.312 L1172.68 682.312 L1172.12 682.312 L1171.56 682.312 L1171 682.312 L1170.44 682.312 L1169.88 682.312 L1169.33 682.312 L1168.77 682.312 L1168.21 682.312 L1167.65 682.312 L1167.09 682.312 L1166.53 682.312 L1165.97 682.312 L1165.41 682.312 L1164.85 682.312 L1164.29 682.312 L1163.73 682.312 L1163.17 682.312 L1162.61 682.312 L1162.05 682.312 L1161.5 682.312 L1160.94 682.312 L1160.38 682.312 L1159.82 682.312 L1159.26 682.312 L1158.7 682.312 L1158.14 682.312 L1157.58 682.312 L1157.02 682.312 L1156.46 682.312 L1155.9 682.312 L1155.34 682.312 L1154.78 682.312 L1154.23 682.312 L1153.67 682.312 L1153.11 682.312 L1152.55 682.312 L1151.99 682.312 L1151.43 682.312 L1150.87 682.312 L1150.31 682.312 L1149.75 682.312 L1149.19 682.312 L1148.63 682.312 L1148.07 682.312 L1147.51 682.312 L1146.96 682.312 L1146.4 682.312 L1145.84 682.312 L1145.28 682.312 L1144.72 682.312 L1144.16 682.312 L1143.6 682.312 L1143.04 682.312 L1142.48 682.312 L1141.92 682.312 L1141.36 682.312 L1140.8 682.312 L1140.24 682.312 L1139.68 682.312 L1139.13 682.312 L1138.57 682.312 L1138.01 682.312 L1137.45 682.312 L1136.89 682.312 L1136.33 682.312 L1135.77 682.312 L1135.21 682.312 L1134.65 682.312 L1134.09 682.312 L1133.53 682.312 L1132.97 682.312 L1132.41 682.312 L1131.86 682.312 L1131.3 682.312 L1130.74 682.312 L1130.18 682.312 L1129.62 682.312 L1129.06 682.312 L1128.5 682.312 L1127.94 682.312 L1127.38 682.312 L1126.82 682.312 L1126.26 682.312 L1125.7 682.312 L1125.14 682.312 L1124.59 682.312 L1124.03 682.312 L1123.47 682.312 L1122.91 682.312 L1122.35 682.312 L1121.79 682.312 L1121.23 682.312 L1120.67 682.312 L1120.11 682.312 L1119.55 682.312 L1118.99 682.312 L1118.43 682.312 L1117.87 682.312 L1117.31 682.312 L1116.76 682.312 L1116.2 682.312 L1115.64 682.312 L1115.08 682.312 L1114.52 682.312 L1113.96 682.312 L1113.4 682.312 L1112.84 682.312 L1112.28 682.312 L1111.72 682.312 L1111.16 682.312 L1110.6 682.312 L1110.04 682.312 L1109.49 682.312 L1108.93 682.312 L1108.37 682.312 L1107.81 682.312 L1107.25 682.312 L1106.69 682.312 L1106.13 682.312 L1105.57 682.312 L1105.01 682.312 L1104.45 682.312 L1103.89 682.312 L1103.33 682.312 L1102.77 682.312 L1102.22 682.312 L1101.66 682.312 L1101.1 682.312 L1100.54 682.312 L1099.98 682.312 L1099.42 682.312 L1098.86 682.312 L1098.3 682.312 L1097.74 682.312 L1097.18 682.312 L1096.62 682.312 L1096.06 682.312 L1095.5 682.312 L1094.94 682.312 L1094.39 682.312 L1093.83 682.312 L1093.27 682.312 L1092.71 682.312 L1092.15 682.312 L1091.59 682.312 L1091.03 682.312 L1090.47 682.312 L1089.91 682.312 L1089.35 682.312 L1088.79 682.312 L1088.23 682.312 L1087.67 682.312 L1087.12 682.312 L1086.56 682.312 L1086 682.312 L1085.44 682.312 L1084.88 682.312 L1084.32 682.312 L1083.76 682.312 L1083.2 682.312 L1082.64 682.312 L1082.08 682.312 L1081.52 682.312 L1080.96 682.312 L1080.4 682.312 L1079.85 682.312 L1079.29 682.312 L1078.73 682.312 L1078.17 682.312 L1077.61 682.312 L1077.05 682.312 L1076.49 682.312 L1075.93 682.312 L1075.37 682.312 L1074.81 682.312 L1074.25 682.312 L1073.69 682.312 L1073.13 682.312 L1072.57 682.312 L1072.02 682.312 L1071.46 682.312 L1070.9 682.312 L1070.34 682.312 L1069.78 682.312 L1069.22 682.312 L1068.66 682.312 L1068.1 682.312 L1067.54 682.312 L1066.98 682.312 L1066.42 682.312 L1065.86 682.312 L1065.3 682.312 L1064.75 682.312 L1064.19 682.312 L1063.63 682.312 L1063.07 682.312 L1062.51 682.312 L1061.95 682.312 L1061.39 682.312 L1060.83 682.312 L1060.27 682.312 L1059.71 682.312 L1059.15 682.312 L1058.59 682.312 L1058.03 682.312 L1057.48 682.312 L1056.92 682.312 L1056.36 682.312 L1055.8 682.312 L1055.24 682.312 L1054.68 682.312 L1054.12 682.312 L1053.56 682.312 L1053 682.312 L1052.44 682.312 L1051.88 682.312 L1051.32 682.312 L1050.76 682.312 L1050.2 682.312 L1049.65 682.312 L1049.09 682.312 L1048.53 682.312 L1047.97 682.312 L1047.41 682.312 L1046.85 682.312 L1046.29 682.312 L1045.73 682.312 L1045.17 682.312 L1044.61 682.312 L1044.05 682.312 L1043.49 682.312 L1042.93 682.312 L1042.38 682.312 L1041.82 682.312 L1041.26 682.312 L1040.7 682.312 L1040.14 682.312 L1039.58 682.312 L1039.02 682.312 L1038.46 682.312 L1037.9 682.312 L1037.34 682.312 L1036.78 682.312 L1036.22 682.312 L1035.66 682.312 L1035.1 682.312 L1034.55 682.312 L1033.99 682.312 L1033.43 682.312 L1032.87 682.312 L1032.31 682.312 L1031.75 682.312 L1031.19 682.312 L1030.63 682.312 L1030.07 682.312 L1029.51 682.312 L1028.95 682.312 L1028.39 682.312 L1027.83 682.312 L1027.28 682.312 L1026.72 682.312 L1026.16 682.312 L1025.6 682.312 L1025.04 682.312 L1024.48 682.312 L1023.92 682.312 L1023.36 682.312 L1022.8 682.312 L1022.24 682.312 L1021.68 682.312 L1021.12 682.312 L1020.56 682.312 L1020.01 682.312 L1019.45 682.312 L1018.89 682.312 L1018.33 682.312 L1017.77 682.312 L1017.21 682.312 L1016.65 682.312 L1016.09 682.312 L1015.53 682.312 L1014.97 682.312 L1014.41 682.312 L1013.85 682.312 L1013.29 682.312 L1012.73 682.312 L1012.18 682.312 L1011.62 682.312 L1011.06 682.312 L1010.5 682.312 L1009.94 682.312 L1009.38 682.312 L1008.82 682.312 L1008.26 682.312 L1007.7 682.312 L1007.14 682.312 L1006.58 682.312 L1006.02 682.312 L1005.46 682.312 L1004.91 682.312 L1004.35 682.312 L1003.79 682.312 L1003.23 682.312 L1002.67 682.312 L1002.11 682.312 L1001.55 682.312 L1000.99 682.312 L1000.43 682.312 L999.872 682.312 L999.313 682.312 L998.754 682.312 L998.194 682.312 L997.635 682.312 L997.076 682.312 L996.517 682.312 L995.957 682.312 L995.398 682.312 L994.839 682.312 L994.28 682.312 L993.72 682.312 L993.161 682.312 L992.602 682.312 L992.043 682.312 L991.483 682.312 L990.924 682.312 L990.365 682.312 L989.806 682.312 L989.246 682.312 L988.687 682.312 L988.128 682.312 L987.569 682.312 L987.009 682.312 L986.45 682.312 L985.891 682.312 L985.332 682.312 L984.772 682.312 L984.213 682.312 L983.654 682.312 L983.095 682.312 L982.535 682.312 L981.976 682.312 L981.417 682.312 L980.858 682.312 L980.298 682.312 L979.739 682.312 L979.18 682.312 L978.621 682.312 L978.061 682.312 L977.502 682.312 L976.943 682.312 L976.384 682.312 L975.824 682.312 L975.265 682.312 L974.706 682.312 L974.147 682.312 L973.587 682.312 L973.028 682.312 L972.469 682.312 L971.91 682.312 L971.35 682.312 L970.791 682.312 L970.232 682.312 L969.673 682.312 L969.113 682.312 L968.554 682.312 L967.995 682.312 L967.436 682.312 L966.876 682.312 L966.317 682.312 L965.758 682.312 L965.199 682.312 L964.639 682.312 L964.08 682.312 L963.521 682.312 L962.962 682.312 L962.402 682.312 L961.843 682.312 L961.284 682.312 L960.725 682.312 L960.165 682.312 L959.606 682.312 L959.047 682.312 L958.488 682.312 L957.928 682.312 L957.369 682.312 L956.81 682.312 L956.251 682.312 L955.691 682.312 L955.132 682.312 L954.573 682.312 L954.014 682.312 L953.454 682.312 L952.895 682.312 L952.336 682.312 L951.777 682.312 L951.217 682.312 L950.658 682.312 L950.099 682.312 L949.54 682.312 L948.98 682.312 L948.421 682.312 L947.862 682.312 L947.303 682.312 L946.743 682.312 L946.184 682.312 L945.625 682.312 L945.066 682.312 L944.506 682.312 L943.947 682.312 L943.388 682.312 L942.829 682.312 L942.269 682.312 L941.71 682.312 L941.151 682.312 L940.592 682.312 L940.032 682.312 L939.473 682.312 L938.914 682.312 L938.355 682.312 L937.795 682.312 L937.236 682.312 L936.677 682.312 L936.118 682.312 L935.558 682.312 L934.999 682.312 L934.44 682.312 L933.881 682.312 L933.321 682.312 L932.762 682.312 L932.203 682.312 L931.644 682.312 L931.084 682.312 L930.525 682.312 L929.966 682.312 L929.406 682.312 L928.847 682.312 L928.288 682.312 L927.729 682.312 L927.169 682.312 L926.61 682.312 L926.051 682.312 L925.492 682.312 L924.932 682.312 L924.373 682.312 L923.814 682.312 L923.255 682.312 L922.695 682.312 L922.136 682.312 L921.577 682.312 L921.018 682.312 L920.458 682.312 L919.899 682.312 L919.34 682.312 L918.781 682.312 L918.221 682.312 L917.662 682.312 L917.103 682.312 L916.544 682.312 L915.984 682.312 L915.425 682.312 L914.866 682.312 L914.307 682.312 L913.747 682.312 L913.188 682.312 L912.629 682.312 L912.07 682.312 L911.51 682.312 L910.951 682.312 L910.392 682.312 L909.833 682.312 L909.273 682.312 L908.714 682.312 L908.155 682.312 L907.596 682.312 L907.036 682.312 L906.477 682.312 L905.918 682.312 L905.359 682.312 L904.799 682.312 L904.24 682.312 L903.681 682.312 L903.122 682.312 L902.562 682.312 L902.003 682.312 L901.444 682.312 L900.885 682.312 L900.325 682.312 L899.766 682.312 L899.207 682.312 L898.648 682.312 L898.088 682.312 L897.529 682.312 L896.97 682.312 L896.411 682.312 L895.851 682.312 L895.292 682.312 L894.733 682.312 L894.174 682.312 L893.614 682.312 L893.055 682.312 L892.496 682.312 L891.937 682.312 L891.377 682.312 L890.818 682.312 L890.259 682.312 L889.7 682.312 L889.14 682.312 L888.581 682.312 L888.022 682.312 L887.463 682.312 L886.903 682.312 L886.344 682.312 L885.785 682.312 L885.226 682.312 L884.666 682.312 L884.107 682.312 L883.548 682.312 L882.989 682.312 L882.429 682.312 L881.87 682.312 L881.311 682.312 L880.752 682.312 L880.192 682.312 L879.633 682.312 L879.074 682.312 L878.515 682.312 L877.955 682.312 L877.396 682.312 L876.837 682.312 L876.278 682.312 L875.718 682.312 L875.159 682.312 L874.6 682.312 L874.041 682.312 L873.481 682.312 L872.922 682.312 L872.363 682.312 L871.804 682.312 L871.244 682.312 L870.685 682.312 L870.126 682.312 L869.567 682.312 L869.007 682.312 L868.448 682.312 L867.889 682.312 L867.33 682.312 L866.77 682.312 L866.211 682.312 L865.652 682.312 L865.093 682.312 L864.533 682.312 L863.974 682.312 L863.415 682.312 L862.856 682.312 L862.296 682.312 L861.737 682.312 L861.178 682.312 L860.619 682.312 L860.059 682.312 L859.5 682.312 L858.941 682.312 L858.382 682.312 L857.822 682.312 L857.263 682.312 L856.704 682.312 L856.145 682.312 L855.585 682.312 L855.026 682.312 L854.467 682.312 L853.908 682.312 L853.348 682.312 L852.789 682.312 L852.23 682.312 L851.671 682.312 L851.111 682.312 L850.552 682.312 L849.993 682.312 L849.434 682.312 L848.874 682.312 L848.315 682.312 L847.756 682.312 L847.197 682.312 L846.637 682.312 L846.078 682.312 L845.519 682.312 L844.96 682.312 L844.4 682.312 L843.841 682.312 L843.282 682.312 L842.723 682.312 L842.163 682.312 L841.604 682.312 L841.045 682.312 L840.486 682.312 L839.926 682.312 L839.367 682.312 L838.808 682.312 L838.249 682.312 L837.689 682.312 L837.13 682.312 L836.571 682.312 L836.012 682.312 L835.452 682.312 L834.893 682.312 L834.334 682.312 L833.775 682.312 L833.215 682.312 L832.656 682.312 L832.097 682.312 L831.538 682.312 L830.978 682.312 L830.419 682.312 L829.86 682.312 L829.301 682.312 L828.741 682.312 L828.182 682.312 L827.623 682.312 L827.064 682.312 L826.504 682.312 L825.945 682.312 L825.386 682.312 L824.827 682.312 L824.267 682.312 L823.708 682.312 L823.149 682.312 L822.59 682.312 L822.03 682.312 L821.471 682.312 L820.912 682.312 L820.353 682.312 L819.793 682.312 L819.234 682.312 L818.675 682.312 L818.116 682.312 L817.556 682.312 L816.997 682.312 L816.438 682.312 L815.879 682.312 L815.319 682.312 L814.76 682.312 L814.201 682.312 L813.642 682.312 L813.082 682.312 L812.523 682.312 L811.964 682.312 L811.405 682.312 L810.845 682.312 L810.286 682.312 L809.727 682.312 L809.168 682.312 L808.608 682.312 L808.049 682.312 L807.49 682.312 L806.931 682.312 L806.371 682.312 L805.812 682.312 L805.253 682.312 L804.693 682.312 L804.134 682.312 L803.575 682.312 L803.016 682.312 L802.456 682.312 L801.897 682.312 L801.338 682.312 L800.779 682.312 L800.219 682.312 L799.66 682.312 L799.101 682.312 L798.542 682.312 L797.982 682.312 L797.423 682.312 L796.864 682.312 L796.305 682.312 L795.745 682.312 L795.186 682.312 L794.627 682.312 L794.068 682.312 L793.508 682.312 L792.949 682.312 L792.39 682.312 L791.831 682.312 L791.271 682.312 L790.712 682.312 L790.153 682.312 L789.594 682.312 L789.034 682.312 L788.475 682.312 L787.916 682.312 L787.357 682.312 L786.797 682.312 L786.238 682.312 L785.679 682.312 L785.12 682.312 L784.56 682.312 L784.001 682.312 L783.442 682.312 L782.883 682.312 L782.323 682.312 L781.764 682.312 L781.205 682.312 L780.646 682.312 L780.086 682.312 L779.527 682.312 L778.968 682.312 L778.409 682.312 L777.849 682.312 L777.29 682.312 L776.731 682.312 L776.172 682.312 L775.612 682.312 L775.053 682.312 L774.494 682.312 L773.935 682.312 L773.375 682.312 L772.816 682.312 L772.257 682.312 L771.698 682.312 L771.138 682.312 L770.579 682.312 L770.02 682.312 L769.461 682.312 L768.901 682.312 L768.342 682.312 L767.783 682.312 L767.224 682.312 L766.664 682.312 L766.105 682.312 L765.546 682.312 L764.987 682.312 L764.427 682.312 L763.868 682.312 L763.309 682.312 L762.75 682.312 L762.19 682.312 L761.631 682.312 L761.072 682.312 L760.513 682.312 L759.953 682.312 L759.394 682.312 L758.835 682.312 L758.276 682.312 L757.716 682.312 L757.157 682.312 L756.598 682.312 L756.039 682.312 L755.479 682.312 L754.92 682.312 L754.361 682.312 L753.802 682.312 L753.242 682.312 L752.683 682.312 L752.124 682.312 L751.565 682.312 L751.005 682.312 L750.446 682.312 L749.887 682.312 L749.328 682.312 L748.768 682.312 L748.209 682.312 L747.65 682.312 L747.091 682.312 L746.531 682.312 L745.972 682.312 L745.413 682.312 L744.854 682.312 L744.294 682.312 L743.735 682.312 L743.176 682.312 L742.617 682.312 L742.057 682.312 L741.498 682.312 L740.939 682.312 L740.38 682.312 L739.82 682.312 L739.261 682.312 L738.702 682.312 L738.143 682.312 L737.583 682.312 L737.024 682.312 L736.465 682.312 L735.906 682.312 L735.346 682.312 L734.787 682.312 L734.228 682.312 L733.669 682.312 L733.109 682.312 L732.55 682.312 L731.991 682.312 L731.432 682.312 L730.872 682.312 L730.313 682.312 L729.754 682.312 L729.195 682.312 L728.635 682.312 L728.076 682.312 L727.517 682.312 L726.958 682.312 L726.398 682.312 L725.839 682.312 L725.28 682.312 L724.721 682.312 L724.161 682.312 L723.602 682.312 L723.043 682.312 L722.484 682.312 L721.924 682.312 L721.365 682.312 L720.806 682.312 L720.247 682.312  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.725 720.806,685.725 721.365,685.725 721.924,685.725 722.484,685.725 723.043,685.725 723.602,685.725 724.161,685.725 724.721,685.725 725.28,685.725 725.839,685.725 726.398,685.725 726.958,685.725 727.517,685.725 728.076,685.725 728.635,685.725 729.195,685.725 729.754,685.725 730.313,685.725 730.872,685.725 731.432,685.725 731.991,685.725 732.55,685.725 733.109,685.725 733.669,685.725 734.228,685.725 734.787,685.725 735.346,685.725 735.906,685.725 736.465,685.725 737.024,685.725 737.583,685.725 738.143,685.725 738.702,685.725 739.261,685.725 739.82,685.725 740.38,685.725 740.939,685.725 741.498,685.725 742.057,685.725 742.617,685.725 743.176,685.725 743.735,685.725 744.294,685.725 744.854,685.725 745.413,685.725 745.972,685.725 746.531,685.725 747.091,685.725 747.65,685.725 748.209,685.725 748.768,685.725 749.328,685.725 749.887,685.725 750.446,685.725 751.005,685.725 751.565,685.725 752.124,685.725 752.683,685.725 753.242,685.725 753.802,685.725 754.361,685.725 754.92,685.725 755.479,685.725 756.039,685.725 756.598,685.725 757.157,685.725 757.716,685.725 758.276,685.725 758.835,685.725 759.394,685.725 759.953,685.725 760.513,685.725 761.072,685.725 761.631,685.725 762.19,685.725 762.75,685.725 763.309,685.725 763.868,685.725 764.427,685.725 764.987,685.725 765.546,685.725 766.105,685.725 766.664,685.725 767.224,685.725 767.783,685.725 768.342,685.725 768.901,685.725 769.461,685.725 770.02,685.725 770.579,685.725 771.138,685.725 771.698,685.725 772.257,685.725 772.816,685.725 773.375,685.725 773.935,685.725 774.494,685.725 775.053,685.725 775.612,685.725 776.172,685.725 776.731,685.725 777.29,685.725 777.849,685.725 778.409,685.725 778.968,685.725 779.527,685.725 780.086,685.725 780.646,685.725 781.205,685.725 781.764,685.725 782.323,685.725 782.883,685.725 783.442,685.725 784.001,685.725 784.56,685.725 785.12,685.725 785.679,685.725 786.238,685.725 786.797,685.725 787.357,685.725 787.916,685.725 788.475,685.725 789.034,685.725 789.594,685.725 790.153,685.725 790.712,685.725 791.271,685.725 791.831,685.725 792.39,685.725 792.949,685.725 793.508,685.725 794.068,685.725 794.627,685.725 795.186,685.725 795.745,685.725 796.305,685.725 796.864,685.725 797.423,685.725 797.982,685.725 798.542,685.725 799.101,685.725 799.66,685.725 800.219,685.725 800.779,685.725 801.338,685.725 801.897,685.725 802.456,685.725 803.016,685.725 803.575,685.725 804.134,685.725 804.693,685.725 805.253,685.725 805.812,685.725 806.371,685.725 806.931,685.725 807.49,685.725 808.049,685.725 808.608,685.725 809.168,685.725 809.727,685.725 810.286,685.725 810.845,685.725 811.405,685.725 811.964,685.725 812.523,685.725 813.082,685.725 813.642,685.725 814.201,685.725 814.76,685.725 815.319,685.725 815.879,685.725 816.438,685.725 816.997,685.725 817.556,685.725 818.116,685.725 818.675,685.725 819.234,685.725 819.793,685.725 820.353,685.725 820.912,685.725 821.471,685.725 822.03,685.725 822.59,685.725 823.149,685.725 823.708,685.725 824.267,685.725 824.827,685.725 825.386,685.725 825.945,685.725 826.504,685.725 827.064,685.725 827.623,685.725 828.182,685.725 828.741,685.725 829.301,685.725 829.86,685.725 830.419,685.725 830.978,685.725 831.538,685.725 832.097,685.725 832.656,685.725 833.215,685.725 833.775,685.725 834.334,685.725 834.893,685.725 835.452,685.725 836.012,685.725 836.571,685.725 837.13,685.725 837.689,685.725 838.249,685.725 838.808,685.725 839.367,685.725 839.926,685.725 840.486,685.725 841.045,685.725 841.604,685.725 842.163,685.725 842.723,685.725 843.282,685.725 843.841,685.725 844.4,685.725 844.96,685.725 845.519,685.725 846.078,685.725 846.637,685.725 847.197,685.725 847.756,685.725 848.315,685.725 848.874,685.725 849.434,685.725 849.993,685.725 850.552,685.725 851.111,685.725 851.671,685.725 852.23,685.725 852.789,685.725 853.348,685.725 853.908,685.725 854.467,685.725 855.026,685.725 855.585,685.725 856.145,685.725 856.704,685.725 857.263,685.725 857.822,685.725 858.382,685.725 858.941,685.725 859.5,685.725 860.059,685.725 860.619,685.725 861.178,685.725 861.737,685.725 862.296,685.725 862.856,685.725 863.415,685.725 863.974,685.725 864.533,685.725 865.093,685.725 865.652,685.725 866.211,685.725 866.77,685.725 867.33,685.725 867.889,685.725 868.448,685.725 869.007,685.725 869.567,685.725 870.126,685.725 870.685,685.725 871.244,685.725 871.804,685.725 872.363,685.725 872.922,685.725 873.481,685.725 874.041,685.725 874.6,685.725 875.159,685.725 875.718,685.725 876.278,685.725 876.837,685.725 877.396,685.725 877.955,685.725 878.515,685.725 879.074,685.725 879.633,685.725 880.192,685.725 880.752,685.725 881.311,685.725 881.87,685.725 882.429,685.725 882.989,685.725 883.548,685.725 884.107,685.725 884.666,685.725 885.226,685.725 885.785,685.725 886.344,685.725 886.903,685.725 887.463,685.725 888.022,685.725 888.581,685.725 889.14,685.725 889.7,685.725 890.259,685.725 890.818,685.725 891.377,685.725 891.937,685.725 892.496,685.725 893.055,685.725 893.614,685.725 894.174,685.725 894.733,685.725 895.292,685.725 895.851,685.725 896.411,685.725 896.97,685.725 897.529,685.725 898.088,685.725 898.648,685.725 899.207,685.725 899.766,685.725 900.325,685.725 900.885,685.725 901.444,685.725 902.003,685.725 902.562,685.725 903.122,685.725 903.681,685.725 904.24,685.725 904.799,685.725 905.359,685.725 905.918,685.725 906.477,685.725 907.036,685.725 907.596,685.725 908.155,685.725 908.714,685.725 909.273,685.725 909.833,685.725 910.392,685.725 910.951,685.725 911.51,685.725 912.07,685.725 912.629,685.725 913.188,685.725 913.747,685.725 914.307,685.725 914.866,685.725 915.425,685.725 915.984,685.725 916.544,685.725 917.103,685.725 917.662,685.725 918.221,685.725 918.781,685.725 919.34,685.725 919.899,685.725 920.458,685.725 921.018,685.725 921.577,685.725 922.136,685.725 922.695,685.725 923.255,685.725 923.814,685.725 924.373,685.725 924.932,685.725 925.492,685.725 926.051,685.725 926.61,685.725 927.169,685.725 927.729,685.725 928.288,685.725 928.847,685.725 929.406,685.725 929.966,685.725 930.525,685.725 931.084,685.725 931.644,685.725 932.203,685.725 932.762,685.725 933.321,685.725 933.881,685.725 934.44,685.725 934.999,685.725 935.558,685.725 936.118,685.725 936.677,685.725 937.236,685.725 937.795,685.725 938.355,685.725 938.914,685.725 939.473,685.725 940.032,685.725 940.592,685.725 941.151,685.725 941.71,685.725 942.269,685.725 942.829,685.725 943.388,685.725 943.947,685.725 944.506,685.725 945.066,685.725 945.625,685.725 946.184,685.725 946.743,685.725 947.303,685.725 947.862,685.725 948.421,685.725 948.98,685.725 949.54,685.725 950.099,685.725 950.658,685.725 951.217,685.725 951.777,685.725 952.336,685.725 952.895,685.725 953.454,685.725 954.014,685.725 954.573,685.725 955.132,685.725 955.691,685.725 956.251,685.725 956.81,685.725 957.369,685.725 957.928,685.725 958.488,685.725 959.047,685.725 959.606,685.725 960.165,685.725 960.725,685.725 961.284,685.725 961.843,685.725 962.402,685.725 962.962,685.725 963.521,685.725 964.08,685.725 964.639,685.725 965.199,685.725 965.758,685.725 966.317,685.725 966.876,685.725 967.436,685.725 967.995,685.725 968.554,685.725 969.113,685.725 969.673,685.725 970.232,685.725 970.791,685.725 971.35,685.725 971.91,685.725 972.469,685.725 973.028,685.725 973.587,685.725 974.147,685.725 974.706,685.725 975.265,685.725 975.824,685.725 976.384,685.725 976.943,685.725 977.502,685.725 978.061,685.725 978.621,685.725 979.18,685.725 979.739,685.725 980.298,685.725 980.858,685.725 981.417,685.725 981.976,685.725 982.535,685.725 983.095,685.725 983.654,685.725 984.213,685.725 984.772,685.725 985.332,685.725 985.891,685.725 986.45,685.725 987.009,685.725 987.569,685.725 988.128,685.725 988.687,685.725 989.246,685.725 989.806,685.725 990.365,685.725 990.924,685.725 991.483,685.725 992.043,685.725 992.602,685.725 993.161,685.725 993.72,685.725 994.28,685.725 994.839,685.725 995.398,685.725 995.957,685.725 996.517,685.725 997.076,685.725 997.635,685.725 998.194,685.725 998.754,685.725 999.313,685.725 999.872,685.725 1000.43,685.725 1000.99,685.725 1001.55,685.725 1002.11,685.725 1002.67,685.725 1003.23,685.725 1003.79,685.725 1004.35,685.725 1004.91,685.725 1005.46,685.725 1006.02,685.725 1006.58,685.725 1007.14,685.725 1007.7,685.725 1008.26,685.725 1008.82,685.725 1009.38,685.725 1009.94,685.725 1010.5,685.725 1011.06,685.725 1011.62,685.725 1012.18,685.725 1012.73,685.725 1013.29,685.725 1013.85,685.725 1014.41,685.725 1014.97,685.725 1015.53,685.725 1016.09,685.725 1016.65,685.725 1017.21,685.725 1017.77,685.725 1018.33,685.725 1018.89,685.725 1019.45,685.725 1020.01,685.725 1020.56,685.725 1021.12,685.725 1021.68,685.725 1022.24,685.725 1022.8,685.725 1023.36,685.725 1023.92,685.725 1024.48,685.725 1025.04,685.725 1025.6,685.725 1026.16,685.725 1026.72,685.725 1027.28,685.725 1027.83,685.725 1028.39,685.725 1028.95,685.725 1029.51,685.725 1030.07,685.725 1030.63,685.725 1031.19,685.725 1031.75,685.725 1032.31,685.725 1032.87,685.725 1033.43,685.725 1033.99,685.725 1034.55,685.725 1035.1,685.725 1035.66,685.725 1036.22,685.725 1036.78,685.725 1037.34,685.725 1037.9,685.725 1038.46,685.725 1039.02,685.725 1039.58,685.725 1040.14,685.725 1040.7,685.725 1041.26,685.725 1041.82,685.725 1042.38,685.725 1042.93,685.725 1043.49,685.725 1044.05,685.725 1044.61,685.725 1045.17,685.725 1045.73,685.725 1046.29,685.725 1046.85,685.725 1047.41,685.725 1047.97,685.725 1048.53,685.725 1049.09,685.725 1049.65,685.725 1050.2,685.725 1050.76,685.725 1051.32,685.725 1051.88,685.725 1052.44,685.725 1053,685.725 1053.56,685.725 1054.12,685.725 1054.68,685.725 1055.24,685.725 1055.8,685.725 1056.36,685.725 1056.92,685.725 1057.48,685.725 1058.03,685.725 1058.59,685.725 1059.15,685.725 1059.71,685.725 1060.27,685.725 1060.83,685.725 1061.39,685.725 1061.95,685.725 1062.51,685.725 1063.07,685.725 1063.63,685.725 1064.19,685.725 1064.75,685.725 1065.3,685.725 1065.86,685.725 1066.42,685.725 1066.98,685.725 1067.54,685.725 1068.1,685.725 1068.66,685.725 1069.22,685.725 1069.78,685.725 1070.34,685.725 1070.9,685.725 1071.46,685.725 1072.02,685.725 1072.57,685.725 1073.13,685.725 1073.69,685.725 1074.25,685.725 1074.81,685.725 1075.37,685.725 1075.93,685.725 1076.49,685.725 1077.05,685.725 1077.61,685.725 1078.17,685.725 1078.73,685.725 1079.29,685.725 1079.85,685.725 1080.4,685.725 1080.96,685.725 1081.52,685.725 1082.08,685.725 1082.64,685.725 1083.2,685.725 1083.76,685.725 1084.32,685.725 1084.88,685.725 1085.44,685.725 1086,685.725 1086.56,685.725 1087.12,685.725 1087.67,685.725 1088.23,685.725 1088.79,685.725 1089.35,685.725 1089.91,685.725 1090.47,685.725 1091.03,685.725 1091.59,685.725 1092.15,685.725 1092.71,685.725 1093.27,685.725 1093.83,685.725 1094.39,685.725 1094.94,685.725 1095.5,685.725 1096.06,685.725 1096.62,685.725 1097.18,685.725 1097.74,685.725 1098.3,685.725 1098.86,685.725 1099.42,685.725 1099.98,685.725 1100.54,685.725 1101.1,685.725 1101.66,685.725 1102.22,685.725 1102.77,685.725 1103.33,685.725 1103.89,685.725 1104.45,685.725 1105.01,685.725 1105.57,685.725 1106.13,685.725 1106.69,685.725 1107.25,685.725 1107.81,685.725 1108.37,685.725 1108.93,685.725 1109.49,685.725 1110.04,685.725 1110.6,685.725 1111.16,685.725 1111.72,685.725 1112.28,685.725 1112.84,685.725 1113.4,685.725 1113.96,685.725 1114.52,685.725 1115.08,685.725 1115.64,685.725 1116.2,685.725 1116.76,685.725 1117.31,685.725 1117.87,685.725 1118.43,685.725 1118.99,685.725 1119.55,685.725 1120.11,685.725 1120.67,685.725 1121.23,685.725 1121.79,685.725 1122.35,685.725 1122.91,685.725 1123.47,685.725 1124.03,685.725 1124.59,685.725 1125.14,685.725 1125.7,685.725 1126.26,685.725 1126.82,685.725 1127.38,685.725 1127.94,685.725 1128.5,685.725 1129.06,685.725 1129.62,685.725 1130.18,685.725 1130.74,685.725 1131.3,685.725 1131.86,685.725 1132.41,685.725 1132.97,685.725 1133.53,685.725 1134.09,685.725 1134.65,685.725 1135.21,685.725 1135.77,685.725 1136.33,685.725 1136.89,685.725 1137.45,685.725 1138.01,685.725 1138.57,685.725 1139.13,685.725 1139.68,685.725 1140.24,685.725 1140.8,685.725 1141.36,685.725 1141.92,685.725 1142.48,685.725 1143.04,685.725 1143.6,685.725 1144.16,685.725 1144.72,685.725 1145.28,685.725 1145.84,685.725 1146.4,685.725 1146.96,685.725 1147.51,685.725 1148.07,685.725 1148.63,685.725 1149.19,685.725 1149.75,685.725 1150.31,685.725 1150.87,685.725 1151.43,685.725 1151.99,685.725 1152.55,685.725 1153.11,685.725 1153.67,685.725 1154.23,685.725 1154.78,685.725 1155.34,685.725 1155.9,685.725 1156.46,685.725 1157.02,685.725 1157.58,685.725 1158.14,685.725 1158.7,685.725 1159.26,685.725 1159.82,685.725 1160.38,685.725 1160.94,685.725 1161.5,685.725 1162.05,685.725 1162.61,685.725 1163.17,685.725 1163.73,685.725 1164.29,685.725 1164.85,685.725 1165.41,685.725 1165.97,685.725 1166.53,685.725 1167.09,685.725 1167.65,685.725 1168.21,685.725 1168.77,685.725 1169.33,685.725 1169.88,685.725 1170.44,685.725 1171,685.725 1171.56,685.725 1172.12,685.725 1172.68,685.725 1173.24,685.725 1173.8,685.725 1174.36,685.725 1174.92,685.725 1175.48,685.725 1176.04,685.725 1176.6,685.725 1177.15,685.725 1177.71,685.725 1178.27,685.725 1178.83,685.725 1179.39,685.725 1179.95,685.725 1180.51,685.725 1181.07,685.725 1181.63,685.725 1182.19,685.725 1182.75,685.725 1183.31,685.725 1183.87,685.725 1184.43,685.725 1184.98,685.725 1185.54,685.725 1186.1,685.725 1186.66,685.725 1187.22,685.725 1187.78,685.725 1188.34,685.725 1188.9,685.725 1189.46,685.725 1190.02,685.725 1190.58,685.725 1191.14,685.725 1191.7,685.725 1192.25,685.725 1192.81,685.725 1193.37,685.725 1193.93,685.725 1194.49,685.725 1195.05,685.725 1195.61,685.725 1196.17,685.725 1196.73,685.725 1197.29,685.725 1197.85,685.725 1198.41,685.725 1198.97,685.725 1199.52,685.725 1200.08,685.725 1200.64,685.725 1201.2,685.725 1201.76,685.725 1202.32,685.725 1202.88,685.725 1203.44,685.725 1204,685.725 1204.56,685.725 1205.12,685.725 1205.68,685.725 1206.24,685.725 1206.8,685.725 1207.35,685.725 1207.91,685.725 1208.47,685.725 1209.03,685.725 1209.59,685.725 1210.15,685.725 1210.71,685.725 1211.27,685.725 1211.83,685.725 1212.39,685.725 1212.95,685.725 1213.51,685.725 1214.07,685.725 1214.62,685.725 1215.18,685.725 1215.74,685.725 1216.3,685.725 1216.86,685.725 1217.42,685.725 1217.98,685.725 1218.54,685.725 1219.1,685.725 1219.66,685.725 1220.22,685.725 1220.78,685.725 1221.34,685.725 1221.89,685.725 1222.45,685.725 1223.01,685.725 1223.57,685.725 1224.13,685.725 1224.69,685.725 1225.25,685.725 1225.81,685.725 1226.37,685.725 1226.93,685.725 1227.49,685.725 1228.05,685.725 1228.61,685.725 1229.17,685.725 1229.72,685.725 1230.28,685.725 1230.84,685.725 1231.4,685.725 1231.96,685.725 1232.52,685.725 1233.08,685.725 1233.64,685.725 1234.2,685.725 1234.76,685.725 1235.32,685.725 1235.88,685.725 1236.44,685.725 1236.99,685.725 1237.55,685.725 1238.11,685.725 1238.67,685.725 1239.23,685.725 1239.79,685.725 1240.35,685.725 1240.91,685.725 1241.47,685.725 1242.03,685.725 1242.59,685.725 1243.15,685.725 1243.71,685.725 1244.26,685.725 1244.82,685.725 1245.38,685.725 1245.94,685.725 1246.5,685.725 1247.06,685.725 1247.62,685.725 1248.18,685.725 1248.74,685.725 1249.3,685.725 1249.86,685.725 1250.42,685.725 1250.98,685.725 1251.54,685.725 1252.09,685.725 1252.65,685.725 1253.21,685.725 1253.77,685.725 1254.33,685.725 1254.89,685.725 1255.45,685.725 1256.01,685.725 1256.57,685.725 1257.13,685.725 1257.69,685.725 1258.25,685.725 1258.81,685.725 1259.36,685.725 1259.92,685.725 1260.48,685.725 1261.04,685.725 1261.6,685.725 1262.16,685.725 1262.72,685.725 1263.28,685.725 1263.84,685.725 1264.4,685.725 1264.96,685.725 1265.52,685.725 1266.08,685.725 1266.63,685.725 1267.19,685.725 1267.75,685.725 1268.31,685.725 1268.87,685.725 1269.43,685.725 1269.99,685.725 1270.55,685.725 1271.11,685.725 1271.67,685.725 1272.23,685.725 1272.79,685.725 1273.35,685.725 1273.91,685.725 1274.46,685.725 1275.02,685.725 1275.58,685.725 1276.14,685.725 1276.7,685.725 1277.26,685.725 1277.82,685.725 1278.38,685.725 1278.94,685.725 1279.5,685.725 1280.06,685.725 1280.62,685.725 1281.18,685.725 1281.73,685.725 1282.29,685.725 1282.85,685.725 1283.41,685.725 1283.97,685.725 1284.53,685.725 1285.09,685.725 1285.65,685.725 1286.21,685.725 1286.77,685.725 1287.33,685.725 1287.89,685.725 1288.45,685.725 1289,685.725 1289.56,685.725 1290.12,685.725 1290.68,685.725 1291.24,685.725 1291.8,685.725 1292.36,685.725 1292.92,685.725 1293.48,685.725 1294.04,685.725 1294.6,685.725 1295.16,685.725 1295.72,685.725 1296.28,685.725 1296.83,685.725 1297.39,685.725 1297.95,685.725 1298.51,685.725 1299.07,685.725 1299.63,685.725 1300.19,685.725 1300.75,685.725 1301.31,685.725 1301.87,685.725 1302.43,685.725 1302.99,685.725 1303.55,685.725 1304.1,685.725 1304.66,685.725 1305.22,685.725 1305.78,685.725 1306.34,685.725 1306.9,685.725 1307.46,685.725 1308.02,685.725 1308.58,685.725 1309.14,685.725 1309.7,685.725 1310.26,685.725 1310.82,685.725 1311.38,685.725 1311.93,685.725 1312.49,685.725 1313.05,685.725 1313.61,685.725 1314.17,685.725 1314.73,685.725 1315.29,685.725 1315.85,685.725 1316.41,685.725 1316.97,685.725 1317.53,685.725 1318.09,685.725 1318.65,685.725 1319.2,685.725 1319.76,685.725 1320.32,685.725 1320.88,685.725 1321.44,685.725 1322,685.725 1322.56,685.725 1323.12,685.725 1323.68,685.725 1324.24,685.725 1324.8,685.725 1325.36,685.725 1325.92,685.725 1326.47,685.725 1327.03,685.725 1327.59,685.725 1328.15,685.725 1328.71,685.725 1329.27,685.725 1329.83,685.725 1330.39,685.725 1330.95,685.725 1331.51,685.725 1332.07,685.725 1332.63,685.725 1333.19,685.725 1333.75,685.725 1334.3,685.725 1334.86,685.725 1335.42,685.725 1335.98,685.725 1336.54,685.725 1337.1,685.725 1337.66,685.725 1338.22,685.725 1338.78,685.725 1339.34,685.725 1339.9,685.725 1340.46,685.725 1341.02,685.725 1341.57,685.725 1342.13,685.725 1342.69,685.725 1343.25,685.725 1343.81,685.725 1344.37,685.725 1344.93,685.725 1345.49,685.725 1346.05,685.725 1346.61,685.725 1347.17,685.725 1347.73,685.725 1348.29,685.725 1348.84,685.725 1349.4,685.725 1349.96,685.725 1350.52,685.725 1351.08,685.725 1351.64,685.725 1352.2,685.725 1352.76,685.725 1353.32,685.725 1353.88,685.725 1354.44,685.725 1355,685.725 1355.56,685.725 1356.12,685.725 1356.67,685.725 1357.23,685.725 1357.79,685.725 1358.35,685.725 1358.91,685.725 1359.47,685.725 1360.03,685.725 1360.59,685.725 1361.15,685.725 1361.71,685.725 1362.27,685.725 1362.83,685.725 1363.39,685.725 1363.94,685.725 1364.5,685.725 1365.06,685.725 1365.62,685.725 1366.18,685.725 1366.74,685.725 1367.3,685.725 1367.86,685.725 1368.42,685.725 1368.98,685.725 1369.54,685.725 1370.1,685.725 1370.66,685.725 1371.21,685.725 1371.77,685.725 1372.33,685.725 1372.89,685.725 1373.45,685.725 1374.01,685.725 1374.57,685.725 1375.13,685.725 1375.69,685.725 1376.25,685.725 1376.81,685.725 1377.37,685.725 1377.93,685.725 1378.49,685.725 1379.04,685.725 1379.6,685.725 1380.16,685.725 1380.72,685.725 1381.28,685.725 1381.84,685.725 1382.4,685.725 1382.96,685.725 1383.52,685.725 1384.08,685.725 1384.64,685.725 1385.2,685.725 1385.76,685.725 1386.31,685.725 1386.87,685.725 1387.43,685.725 1387.99,685.725 1388.55,685.725 1389.11,685.725 1389.67,685.725 1390.23,685.725 1390.79,685.725 1391.35,685.725 1391.91,685.725 1392.47,685.725 1393.03,685.725 1393.58,685.725 1394.14,685.725 1394.7,685.725 1395.26,685.725 1395.82,685.725 1396.38,685.725 1396.94,685.725 1397.5,685.725 1398.06,685.725 1398.62,685.725 1399.18,685.725 1399.74,685.725 1400.3,685.725 1400.86,685.725 1401.41,685.725 1401.97,685.725 1402.53,685.725 1403.09,685.725 1403.65,685.725 1404.21,685.725 1404.77,685.725 1405.33,685.725 1405.89,685.725 1406.45,685.725 1407.01,685.725 1407.57,685.725 1408.13,685.725 1408.68,685.725 1409.24,685.725 1409.8,685.725 1410.36,685.725 1410.92,685.725 1411.48,685.725 1412.04,685.725 1412.6,685.725 1413.16,685.725 1413.72,685.725 1414.28,685.725 1414.84,685.725 1415.4,685.725 1415.95,685.725 1416.51,685.725 1417.07,685.725 1417.63,685.725 1418.19,685.725 1418.75,685.725 1419.31,685.725 1419.87,685.725 1420.43,685.725 1420.99,685.725 1421.55,685.725 1422.11,685.725 1422.67,685.725 1423.23,685.725 1423.78,685.725 1424.34,685.725 1424.9,685.725 1425.46,685.725 1426.02,685.725 1426.58,685.725 1427.14,685.725 1427.7,685.725 1428.26,685.725 1428.82,685.725 1429.38,685.725 1429.94,685.725 1430.5,685.725 1431.05,685.725 1431.61,685.725 1432.17,685.725 1432.73,685.725 1433.29,685.725 1433.85,685.725 1434.41,685.725 1434.97,685.725 1435.53,685.725 1436.09,685.725 1436.65,685.725 1437.21,685.725 1437.77,685.725 1438.33,685.725 1438.88,685.725 1439.44,685.725 1440,685.725 1440.56,685.725 1441.12,685.725 1441.68,685.725 1442.24,685.725 1442.8,685.725 1443.36,685.725 1443.92,685.725 1444.48,685.725 1445.04,685.725 1445.6,685.725 1446.15,685.725 1446.71,685.725 1447.27,685.725 1447.83,685.725 1448.39,685.725 1448.95,685.725 1449.51,685.725 1450.07,685.725 1450.63,685.725 1451.19,685.725 1451.75,685.725 1452.31,685.725 1452.87,685.725 1453.42,685.725 1453.98,685.725 1454.54,685.725 1455.1,685.725 1455.66,685.725 1456.22,685.725 1456.78,685.725 1457.34,685.725 1457.9,685.725 1458.46,685.725 1459.02,685.725 1459.58,685.725 1460.14,685.725 1460.7,685.725 1461.25,685.725 1461.81,685.725 1462.37,685.725 1462.93,685.725 1463.49,685.725 1464.05,685.725 1464.61,685.725 1465.17,685.725 1465.73,685.725 1466.29,685.725 1466.85,685.725 1467.41,685.725 1467.97,685.725 1468.52,685.725 1469.08,685.725 1469.64,685.725 1470.2,685.725 1470.76,685.725 1471.32,685.725 1471.88,685.725 1472.44,685.725 1473,685.725 1473.56,685.725 1474.12,685.725 1474.68,685.725 1475.24,685.725 1475.79,685.725 1476.35,685.725 1476.91,685.725 1477.47,685.725 1478.03,685.725 1478.59,685.725 1479.15,685.725 1479.71,685.725 1480.27,685.725 1480.83,685.725 1481.39,685.725 1481.95,685.725 1482.51,685.725 1483.07,685.725 1483.62,685.725 1484.18,685.725 1484.74,685.725 1485.3,685.725 1485.86,685.725 1486.42,685.725 1486.98,685.725 1487.54,685.725 1488.1,685.725 1488.66,685.725 1489.22,685.725 1489.78,685.725 1490.34,685.725 1490.89,685.725 1491.45,685.725 1492.01,685.725 1492.57,685.725 1493.13,685.725 1493.69,685.725 1494.25,685.725 1494.81,685.725 1495.37,685.725 1495.93,685.725 1496.49,685.725 1497.05,685.725 1497.61,685.725 1498.16,685.725 1498.72,685.725 1499.28,685.725 1499.84,685.725 1500.4,685.725 1500.96,685.725 1501.52,685.725 1502.08,685.725 1502.64,685.725 1503.2,685.725 1503.76,685.725 1504.32,685.725 1504.88,685.725 1505.44,685.725 1505.99,685.725 1506.55,685.725 1507.11,685.725 1507.67,685.725 1508.23,685.725 1508.79,685.725 1509.35,685.725 1509.91,685.725 1510.47,685.725 1511.03,685.725 1511.59,685.725 1512.15,685.725 1512.71,685.725 1513.26,685.725 1513.82,685.725 1514.38,685.725 1514.94,685.725 1515.5,685.725 1516.06,685.725 1516.62,685.725 1517.18,685.725 1517.74,685.725 1518.3,685.725 1518.86,685.725 1519.42,685.725 1519.98,685.725 1520.53,685.725 1521.09,685.725 1521.65,685.725 1522.21,685.725 1522.77,685.725 1523.33,685.725 1523.89,685.725 1524.45,685.725 1525.01,685.725 1525.57,685.725 1526.13,685.725 1526.69,685.725 1527.25,685.725 1527.81,685.725 1528.36,685.725 1528.92,685.725 1529.48,685.725 1530.04,685.725 1530.6,685.725 1531.16,685.725 1531.72,685.725 1532.28,685.725 1532.84,685.725 1533.4,685.725 1533.96,685.725 1534.52,685.725 1535.08,685.725 1535.63,685.725 1536.19,685.725 1536.75,685.725 1537.31,685.725 1537.87,685.725 1538.43,685.725 1538.99,685.725 1539.55,685.725 1540.11,685.725 1540.67,685.725 1541.23,685.725 1541.79,685.725 1542.35,685.725 1542.9,685.725 1543.46,685.725 1544.02,685.725 1544.58,685.725 1545.14,685.725 1545.7,685.725 1546.26,685.725 1546.82,685.725 1547.38,685.725 1547.94,685.725 1548.5,685.725 1549.06,685.725 1549.62,685.725 1550.18,685.725 1550.73,685.725 1551.29,685.725 1551.85,685.725 1552.41,685.725 1552.97,685.725 1553.53,685.725 1554.09,685.725 1554.65,685.725 1555.21,685.725 1555.77,685.725 1556.33,685.725 1556.89,685.725 1557.45,685.725 1558,685.725 1558.56,685.725 1559.12,685.725 1559.68,685.725 1560.24,685.725 1560.8,685.725 1561.36,685.725 1561.92,685.725 1562.48,685.725 1563.04,685.725 1563.6,685.725 1564.16,685.725 1564.72,685.725 1565.28,685.725 1565.83,685.725 1566.39,685.725 1566.95,685.725 1567.51,685.725 1568.07,685.725 1568.63,685.725 1569.19,685.725 1569.75,685.725 1570.31,685.725 1570.87,685.725 1571.43,685.725 1571.99,685.725 1572.55,685.725 1573.1,685.725 1573.66,685.725 1574.22,685.725 1574.78,685.725 1575.34,685.725 1575.9,685.725 1576.46,685.725 1577.02,685.725 1577.58,685.725 1578.14,685.725 1578.7,685.725 1579.26,685.725 1579.82,685.725 1580.37,685.725 1580.93,685.725 1581.49,685.725 1582.05,685.725 1582.61,685.725 1583.17,685.725 1583.73,685.725 1584.29,685.725 1584.85,685.725 1585.41,685.725 1585.97,685.725 1586.53,685.725 1587.09,685.725 1587.65,685.725 1588.2,685.725 1588.76,685.725 1589.32,685.725 1589.88,685.725 1590.44,685.725 1591,685.725 1591.56,685.725 1592.12,685.725 1592.68,685.725 1593.24,685.725 1593.8,685.725 1594.36,685.725 1594.92,685.725 1595.47,685.725 1596.03,685.725 1596.59,685.725 1597.15,685.725 1597.71,685.725 1598.27,685.725 1598.83,685.725 1599.39,685.725 1599.95,685.725 1600.51,685.725 1601.07,685.725 1601.63,685.725 1602.19,685.725 1602.74,685.725 1603.3,685.725 1603.86,685.725 1604.42,685.725 1604.98,685.725 1605.54,685.725 1606.1,685.725 1606.66,685.725 1607.22,685.725 1607.78,685.725 1608.34,685.725 1608.9,685.725 1609.46,685.725 1610.02,685.725 1610.57,685.725 1611.13,685.725 1611.69,685.725 1612.25,685.725 1612.81,685.725 1613.37,685.725 1613.93,685.725 1614.49,685.725 1615.05,685.725 1615.61,685.725 1616.17,685.725 1616.73,685.725 1617.29,685.725 1617.84,685.725 1618.4,685.725 1618.96,685.725 1619.52,685.725 1620.08,685.725 1620.64,685.725 1621.2,685.725 1621.76,685.725 1622.32,685.725 1622.88,685.725 1623.44,685.725 1624,685.725 1624.56,685.725 1625.11,685.725 1625.67,685.725 1626.23,685.725 1626.79,685.725 1627.35,685.725 1627.91,685.725 1628.47,685.725 1629.03,685.725 1629.59,685.725 1630.15,685.725 1630.71,685.725 1631.27,685.725 1631.83,685.725 1632.39,685.725 1632.94,685.725 1633.5,685.725 1634.06,685.725 1634.62,685.725 1635.18,685.725 1635.74,685.725 1636.3,685.725 1636.86,685.725 1637.42,685.725 1637.98,685.725 1638.54,685.725 1639.1,685.725 1639.66,685.725 1640.21,685.725 1640.77,685.725 1641.33,685.725 1641.89,685.725 1642.45,685.725 1643.01,685.725 1643.57,685.725 1644.13,685.725 1644.69,685.725 1645.25,685.725 1645.81,685.725 1646.37,685.725 1646.93,685.725 1647.48,685.725 1648.04,685.725 1648.6,685.725 1649.16,685.725 1649.72,685.725 1650.28,685.725 1650.84,685.725 1651.4,685.725 1651.96,685.725 1652.52,685.725 1653.08,685.725 1653.64,685.725 1654.2,685.725 1654.76,685.725 1655.31,685.725 1655.87,685.725 1656.43,685.725 1656.99,685.725 1657.55,685.725 1658.11,685.725 1658.67,685.725 1659.23,685.725 1659.79,685.725 1660.35,685.725 1660.91,685.725 1661.47,685.725 1662.03,685.725 1662.58,685.725 1663.14,685.725 1663.7,685.725 1664.26,685.725 1664.82,685.725 1665.38,685.725 1665.94,685.725 1666.5,685.725 1667.06,685.725 1667.62,685.725 1668.18,685.725 1668.74,685.725 1669.3,685.725 1669.85,685.725 1670.41,685.725 1670.97,685.725 1671.53,685.725 1672.09,685.725 1672.65,685.725 1673.21,685.725 1673.77,685.725 1674.33,685.725 1674.89,685.725 1675.45,685.725 1676.01,685.725 1676.57,685.725 1677.13,685.725 1677.68,685.725 1678.24,685.725 1678.8,685.725 1679.36,685.725 1679.92,685.725 1680.48,685.725 1681.04,685.725 1681.6,685.725 1682.16,685.725 1682.72,685.725 1683.28,685.725 1683.84,685.725 1684.4,685.725 1684.95,685.725 1685.51,685.725 1686.07,685.725 1686.63,685.725 1687.19,685.725 1687.75,685.725 1688.31,685.725 1688.87,685.725 1689.43,685.725 1689.99,685.725 1690.55,685.725 1691.11,685.725 1691.67,685.725 1692.23,685.725 1692.78,685.725 1693.34,685.725 1693.9,685.725 1694.46,685.725 1695.02,685.725 1695.58,685.725 1696.14,685.725 1696.7,685.725 1697.26,685.725 1697.82,685.725 1698.38,685.725 1698.94,685.725 1699.5,685.725 1700.05,685.725 1700.61,685.725 1701.17,685.725 1701.73,685.725 1702.29,685.725 1702.85,685.725 1703.41,685.725 1703.97,685.725 1704.53,685.725 1705.09,685.725 1705.65,685.725 1706.21,685.725 1706.77,685.725 1707.32,685.725 1707.88,685.725 1708.44,685.725 1709,685.725 1709.56,685.725 1710.12,685.725 1710.68,685.725 1711.24,685.725 1711.8,685.725 1712.36,685.725 1712.92,685.725 1713.48,685.725 1714.04,685.725 1714.6,685.725 1715.15,685.725 1715.71,685.725 1716.27,685.725 1716.83,685.725 1717.39,685.725 1717.95,685.725 1718.51,685.725 1719.07,685.725 1719.63,685.725 1720.19,685.725 1720.75,685.725 1721.31,685.725 1721.87,685.725 1722.42,685.725 1722.98,685.725 1723.54,685.725 1724.1,685.725 1724.66,685.725 1725.22,685.725 1725.78,685.725 1726.34,685.725 1726.9,685.725 1727.46,685.725 1728.02,685.725 1728.58,685.725 1729.14,685.725 1729.69,685.725 1730.25,685.725 1730.81,685.725 1731.37,685.725 1731.93,685.725 1732.49,685.725 1733.05,685.725 1733.61,685.725 1734.17,685.725 1734.73,685.725 1735.29,685.725 1735.85,685.725 1736.41,685.725 1736.97,685.725 1737.52,685.725 1738.08,685.725 1738.64,685.725 1739.2,685.725 1739.76,685.725 1740.32,685.725 1740.88,685.725 1741.44,685.725 1742,685.725 1742.56,685.725 1743.12,685.725 1743.68,685.725 1744.24,685.725 1744.79,685.725 1745.35,685.725 1745.91,685.725 1746.47,685.725 1747.03,685.725 1747.59,685.725 1748.15,685.725 1748.71,685.725 1749.27,685.725 1749.83,685.725 1750.39,685.725 1750.95,685.725 1751.51,685.725 1752.06,685.725 1752.62,685.725 1753.18,685.725 1753.74,685.725 1754.3,685.725 1754.86,685.725 1755.42,685.725 1755.98,685.725 1756.54,685.725 1757.1,685.725 1757.66,685.725 1758.22,685.725 1758.78,685.725 1759.34,685.725 1759.89,685.725 1760.45,685.725 1761.01,685.725 1761.57,685.725 1762.13,685.725 1762.69,685.725 1763.25,685.725 1763.81,685.725 1764.37,685.725 1764.93,685.725 1765.49,685.725 1766.05,685.725 1766.61,685.725 1767.16,685.725 1767.72,685.725 1768.28,685.725 1768.84,685.725 1769.4,685.725 1769.96,685.725 1770.52,685.725 1771.08,685.725 1771.64,685.725 1772.2,685.725 1772.76,685.725 1773.32,685.725 1773.88,685.725 1774.43,685.725 1774.99,685.725 1775.55,685.725 1776.11,685.725 1776.67,685.725 1777.23,685.725 1777.79,685.725 1778.35,685.725 1778.91,685.725 1779.47,685.725 1780.03,685.725 1780.59,685.725 1781.15,685.725 1781.71,685.725 1782.26,685.725 1782.82,685.725 1783.38,685.725 1783.94,685.725 1784.5,685.725 1785.06,685.725 1785.62,685.725 1786.18,685.725 1786.74,685.725 1787.3,685.725 1787.86,685.725 1788.42,685.725 1788.98,685.725 1789.53,685.725 1790.09,685.725 1790.65,685.725 1791.21,685.725 1791.77,685.725 1792.33,685.725 1792.89,685.725 1793.45,685.725 1794.01,685.725 1794.57,685.725 1795.13,685.725 1795.69,685.725 1796.25,685.725 1796.8,685.725 1797.36,685.725 1797.92,685.725 1798.48,685.725 1799.04,685.725 1799.6,685.725 1800.16,685.725 1800.72,685.725 1801.28,685.725 1801.84,685.725 1802.4,685.725 1802.96,685.725 1803.52,685.725 1804.08,685.725 1804.63,685.725 1805.19,685.725 1805.75,685.725 1806.31,685.725 1806.87,685.725 1807.43,685.725 1807.99,685.725 1808.55,685.725 1809.11,685.725 1809.67,685.725 1810.23,685.725 1810.79,685.725 1811.35,685.725 1811.9,685.725 1812.46,685.725 1813.02,685.725 1813.58,685.725 1814.14,685.725 1814.7,685.725 1815.26,685.725 1815.82,685.725 1816.38,685.725 1816.94,685.725 1817.5,685.725 1818.06,685.725 1818.62,685.725 1819.18,685.725 1819.73,685.725 1820.29,685.725 1820.85,685.725 1821.41,685.725 1821.97,685.725 1822.53,685.725 1823.09,685.725 1823.65,685.725 1824.21,685.725 1824.77,685.725 1825.33,685.725 1825.89,685.725 1826.45,685.725 1827,685.725 1827.56,685.725 1828.12,685.725 1828.68,685.725 1829.24,685.725 1829.8,685.725 1830.36,685.725 1830.92,685.725 1831.48,685.725 1832.04,685.725 1832.6,685.725 1833.16,685.725 1833.72,685.725 1834.27,685.725 1834.83,685.725 1835.39,685.725 1835.95,685.725 1836.51,685.725 1837.07,685.725 1837.63,685.725 1838.19,685.725 \"/>\n<path clip-path=\"url(#clip303)\" d=\"M720.247 684.125 L720.806 684.125 L721.365 684.125 L721.924 684.125 L722.484 684.125 L723.043 684.125 L723.602 684.125 L724.161 684.125 L724.721 684.125 L725.28 684.125 L725.839 684.125 L726.398 684.125 L726.958 684.125 L727.517 684.125 L728.076 684.125 L728.635 684.125 L729.195 684.125 L729.754 684.125 L730.313 684.125 L730.872 684.125 L731.432 684.125 L731.991 684.125 L732.55 684.125 L733.109 684.125 L733.669 684.125 L734.228 684.125 L734.787 684.125 L735.346 684.125 L735.906 684.125 L736.465 684.125 L737.024 684.125 L737.583 684.125 L738.143 684.125 L738.702 684.125 L739.261 684.125 L739.82 684.125 L740.38 684.125 L740.939 684.125 L741.498 684.125 L742.057 684.125 L742.617 684.125 L743.176 684.125 L743.735 684.125 L744.294 684.125 L744.854 684.125 L745.413 684.125 L745.972 684.125 L746.531 684.125 L747.091 684.125 L747.65 684.125 L748.209 684.125 L748.768 684.125 L749.328 684.125 L749.887 684.125 L750.446 684.125 L751.005 684.125 L751.565 684.125 L752.124 684.125 L752.683 684.125 L753.242 684.125 L753.802 684.125 L754.361 684.125 L754.92 684.125 L755.479 684.125 L756.039 684.125 L756.598 684.125 L757.157 684.125 L757.716 684.125 L758.276 684.125 L758.835 684.125 L759.394 684.125 L759.953 684.125 L760.513 684.125 L761.072 684.125 L761.631 684.125 L762.19 684.125 L762.75 684.125 L763.309 684.125 L763.868 684.125 L764.427 684.125 L764.987 684.125 L765.546 684.125 L766.105 684.125 L766.664 684.125 L767.224 684.125 L767.783 684.125 L768.342 684.125 L768.901 684.125 L769.461 684.125 L770.02 684.125 L770.579 684.125 L771.138 684.125 L771.698 684.125 L772.257 684.125 L772.816 684.125 L773.375 684.125 L773.935 684.125 L774.494 684.125 L775.053 684.125 L775.612 684.125 L776.172 684.125 L776.731 684.125 L777.29 684.125 L777.849 684.125 L778.409 684.125 L778.968 684.125 L779.527 684.125 L780.086 684.125 L780.646 684.125 L781.205 684.125 L781.764 684.125 L782.323 684.125 L782.883 684.125 L783.442 684.125 L784.001 684.125 L784.56 684.125 L785.12 684.125 L785.679 684.125 L786.238 684.125 L786.797 684.125 L787.357 684.125 L787.916 684.125 L788.475 684.125 L789.034 684.125 L789.594 684.125 L790.153 684.125 L790.712 684.125 L791.271 684.125 L791.831 684.125 L792.39 684.125 L792.949 684.125 L793.508 684.125 L794.068 684.125 L794.627 684.125 L795.186 684.125 L795.745 684.125 L796.305 684.125 L796.864 684.125 L797.423 684.125 L797.982 684.125 L798.542 684.125 L799.101 684.125 L799.66 684.125 L800.219 684.125 L800.779 684.125 L801.338 684.125 L801.897 684.125 L802.456 684.125 L803.016 684.125 L803.575 684.125 L804.134 684.125 L804.693 684.125 L805.253 684.125 L805.812 684.125 L806.371 684.125 L806.931 684.125 L807.49 684.125 L808.049 684.125 L808.608 684.125 L809.168 684.125 L809.727 684.125 L810.286 684.125 L810.845 684.125 L811.405 684.125 L811.964 684.125 L812.523 684.125 L813.082 684.125 L813.642 684.125 L814.201 684.125 L814.76 684.125 L815.319 684.125 L815.879 684.125 L816.438 684.125 L816.997 684.125 L817.556 684.125 L818.116 684.125 L818.675 684.125 L819.234 684.125 L819.793 684.125 L820.353 684.125 L820.912 684.125 L821.471 684.125 L822.03 684.125 L822.59 684.125 L823.149 684.125 L823.708 684.125 L824.267 684.125 L824.827 684.125 L825.386 684.125 L825.945 684.125 L826.504 684.125 L827.064 684.125 L827.623 684.125 L828.182 684.125 L828.741 684.125 L829.301 684.125 L829.86 684.125 L830.419 684.125 L830.978 684.125 L831.538 684.125 L832.097 684.125 L832.656 684.125 L833.215 684.125 L833.775 684.125 L834.334 684.125 L834.893 684.125 L835.452 684.125 L836.012 684.125 L836.571 684.125 L837.13 684.125 L837.689 684.125 L838.249 684.125 L838.808 684.125 L839.367 684.125 L839.926 684.125 L840.486 684.125 L841.045 684.125 L841.604 684.125 L842.163 684.125 L842.723 684.125 L843.282 684.125 L843.841 684.125 L844.4 684.125 L844.96 684.125 L845.519 684.125 L846.078 684.125 L846.637 684.125 L847.197 684.125 L847.756 684.125 L848.315 684.125 L848.874 684.125 L849.434 684.125 L849.993 684.125 L850.552 684.125 L851.111 684.125 L851.671 684.125 L852.23 684.125 L852.789 684.125 L853.348 684.125 L853.908 684.125 L854.467 684.125 L855.026 684.125 L855.585 684.125 L856.145 684.125 L856.704 684.125 L857.263 684.125 L857.822 684.125 L858.382 684.125 L858.941 684.125 L859.5 684.125 L860.059 684.125 L860.619 684.125 L861.178 684.125 L861.737 684.125 L862.296 684.125 L862.856 684.125 L863.415 684.125 L863.974 684.125 L864.533 684.125 L865.093 684.125 L865.652 684.125 L866.211 684.125 L866.77 684.125 L867.33 684.125 L867.889 684.125 L868.448 684.125 L869.007 684.125 L869.567 684.125 L870.126 684.125 L870.685 684.125 L871.244 684.125 L871.804 684.125 L872.363 684.125 L872.922 684.125 L873.481 684.125 L874.041 684.125 L874.6 684.125 L875.159 684.125 L875.718 684.125 L876.278 684.125 L876.837 684.125 L877.396 684.125 L877.955 684.125 L878.515 684.125 L879.074 684.125 L879.633 684.125 L880.192 684.125 L880.752 684.125 L881.311 684.125 L881.87 684.125 L882.429 684.125 L882.989 684.125 L883.548 684.125 L884.107 684.125 L884.666 684.125 L885.226 684.125 L885.785 684.125 L886.344 684.125 L886.903 684.125 L887.463 684.125 L888.022 684.125 L888.581 684.125 L889.14 684.125 L889.7 684.125 L890.259 684.125 L890.818 684.125 L891.377 684.125 L891.937 684.125 L892.496 684.125 L893.055 684.125 L893.614 684.125 L894.174 684.125 L894.733 684.125 L895.292 684.125 L895.851 684.125 L896.411 684.125 L896.97 684.125 L897.529 684.125 L898.088 684.125 L898.648 684.125 L899.207 684.125 L899.766 684.125 L900.325 684.125 L900.885 684.125 L901.444 684.125 L902.003 684.125 L902.562 684.125 L903.122 684.125 L903.681 684.125 L904.24 684.125 L904.799 684.125 L905.359 684.125 L905.918 684.125 L906.477 684.125 L907.036 684.125 L907.596 684.125 L908.155 684.125 L908.714 684.125 L909.273 684.125 L909.833 684.125 L910.392 684.125 L910.951 684.125 L911.51 684.125 L912.07 684.125 L912.629 684.125 L913.188 684.125 L913.747 684.125 L914.307 684.125 L914.866 684.125 L915.425 684.125 L915.984 684.125 L916.544 684.125 L917.103 684.125 L917.662 684.125 L918.221 684.125 L918.781 684.125 L919.34 684.125 L919.899 684.125 L920.458 684.125 L921.018 684.125 L921.577 684.125 L922.136 684.125 L922.695 684.125 L923.255 684.125 L923.814 684.125 L924.373 684.125 L924.932 684.125 L925.492 684.125 L926.051 684.125 L926.61 684.125 L927.169 684.125 L927.729 684.125 L928.288 684.125 L928.847 684.125 L929.406 684.125 L929.966 684.125 L930.525 684.125 L931.084 684.125 L931.644 684.125 L932.203 684.125 L932.762 684.125 L933.321 684.125 L933.881 684.125 L934.44 684.125 L934.999 684.125 L935.558 684.125 L936.118 684.125 L936.677 684.125 L937.236 684.125 L937.795 684.125 L938.355 684.125 L938.914 684.125 L939.473 684.125 L940.032 684.125 L940.592 684.125 L941.151 684.125 L941.71 684.125 L942.269 684.125 L942.829 684.125 L943.388 684.125 L943.947 684.125 L944.506 684.125 L945.066 684.125 L945.625 684.125 L946.184 684.125 L946.743 684.125 L947.303 684.125 L947.862 684.125 L948.421 684.125 L948.98 684.125 L949.54 684.125 L950.099 684.125 L950.658 684.125 L951.217 684.125 L951.777 684.125 L952.336 684.125 L952.895 684.125 L953.454 684.125 L954.014 684.125 L954.573 684.125 L955.132 684.125 L955.691 684.125 L956.251 684.125 L956.81 684.125 L957.369 684.125 L957.928 684.125 L958.488 684.125 L959.047 684.125 L959.606 684.125 L960.165 684.125 L960.725 684.125 L961.284 684.125 L961.843 684.125 L962.402 684.125 L962.962 684.125 L963.521 684.125 L964.08 684.125 L964.639 684.125 L965.199 684.125 L965.758 684.125 L966.317 684.125 L966.876 684.125 L967.436 684.125 L967.995 684.125 L968.554 684.125 L969.113 684.125 L969.673 684.125 L970.232 684.125 L970.791 684.125 L971.35 684.125 L971.91 684.125 L972.469 684.125 L973.028 684.125 L973.587 684.125 L974.147 684.125 L974.706 684.125 L975.265 684.125 L975.824 684.125 L976.384 684.125 L976.943 684.125 L977.502 684.125 L978.061 684.125 L978.621 684.125 L979.18 684.125 L979.739 684.125 L980.298 684.125 L980.858 684.125 L981.417 684.125 L981.976 684.125 L982.535 684.125 L983.095 684.125 L983.654 684.125 L984.213 684.125 L984.772 684.125 L985.332 684.125 L985.891 684.125 L986.45 684.125 L987.009 684.125 L987.569 684.125 L988.128 684.125 L988.687 684.125 L989.246 684.125 L989.806 684.125 L990.365 684.125 L990.924 684.125 L991.483 684.125 L992.043 684.125 L992.602 684.125 L993.161 684.125 L993.72 684.125 L994.28 684.125 L994.839 684.125 L995.398 684.125 L995.957 684.125 L996.517 684.125 L997.076 684.125 L997.635 684.125 L998.194 684.125 L998.754 684.125 L999.313 684.125 L999.872 684.125 L1000.43 684.125 L1000.99 684.125 L1001.55 684.125 L1002.11 684.125 L1002.67 684.125 L1003.23 684.125 L1003.79 684.125 L1004.35 684.125 L1004.91 684.125 L1005.46 684.125 L1006.02 684.125 L1006.58 684.125 L1007.14 684.125 L1007.7 684.125 L1008.26 684.125 L1008.82 684.125 L1009.38 684.125 L1009.94 684.125 L1010.5 684.125 L1011.06 684.125 L1011.62 684.125 L1012.18 684.125 L1012.73 684.125 L1013.29 684.125 L1013.85 684.125 L1014.41 684.125 L1014.97 684.125 L1015.53 684.125 L1016.09 684.125 L1016.65 684.125 L1017.21 684.125 L1017.77 684.125 L1018.33 684.125 L1018.89 684.125 L1019.45 684.125 L1020.01 684.125 L1020.56 684.125 L1021.12 684.125 L1021.68 684.125 L1022.24 684.125 L1022.8 684.125 L1023.36 684.125 L1023.92 684.125 L1024.48 684.125 L1025.04 684.125 L1025.6 684.125 L1026.16 684.125 L1026.72 684.125 L1027.28 684.125 L1027.83 684.125 L1028.39 684.125 L1028.95 684.125 L1029.51 684.125 L1030.07 684.125 L1030.63 684.125 L1031.19 684.125 L1031.75 684.125 L1032.31 684.125 L1032.87 684.125 L1033.43 684.125 L1033.99 684.125 L1034.55 684.125 L1035.1 684.125 L1035.66 684.125 L1036.22 684.125 L1036.78 684.125 L1037.34 684.125 L1037.9 684.125 L1038.46 684.125 L1039.02 684.125 L1039.58 684.125 L1040.14 684.125 L1040.7 684.125 L1041.26 684.125 L1041.82 684.125 L1042.38 684.125 L1042.93 684.125 L1043.49 684.125 L1044.05 684.125 L1044.61 684.125 L1045.17 684.125 L1045.73 684.125 L1046.29 684.125 L1046.85 684.125 L1047.41 684.125 L1047.97 684.125 L1048.53 684.125 L1049.09 684.125 L1049.65 684.125 L1050.2 684.125 L1050.76 684.125 L1051.32 684.125 L1051.88 684.125 L1052.44 684.125 L1053 684.125 L1053.56 684.125 L1054.12 684.125 L1054.68 684.125 L1055.24 684.125 L1055.8 684.125 L1056.36 684.125 L1056.92 684.125 L1057.48 684.125 L1058.03 684.125 L1058.59 684.125 L1059.15 684.125 L1059.71 684.125 L1060.27 684.125 L1060.83 684.125 L1061.39 684.125 L1061.95 684.125 L1062.51 684.125 L1063.07 684.125 L1063.63 684.125 L1064.19 684.125 L1064.75 684.125 L1065.3 684.125 L1065.86 684.125 L1066.42 684.125 L1066.98 684.125 L1067.54 684.125 L1068.1 684.125 L1068.66 684.125 L1069.22 684.125 L1069.78 684.125 L1070.34 684.125 L1070.9 684.125 L1071.46 684.125 L1072.02 684.125 L1072.57 684.125 L1073.13 684.125 L1073.69 684.125 L1074.25 684.125 L1074.81 684.125 L1075.37 684.125 L1075.93 684.125 L1076.49 684.125 L1077.05 684.125 L1077.61 684.125 L1078.17 684.125 L1078.73 684.125 L1079.29 684.125 L1079.85 684.125 L1080.4 684.125 L1080.96 684.125 L1081.52 684.125 L1082.08 684.125 L1082.64 684.125 L1083.2 684.125 L1083.76 684.125 L1084.32 684.125 L1084.88 684.125 L1085.44 684.125 L1086 684.125 L1086.56 684.125 L1087.12 684.125 L1087.67 684.125 L1088.23 684.125 L1088.79 684.125 L1089.35 684.125 L1089.91 684.125 L1090.47 684.125 L1091.03 684.125 L1091.59 684.125 L1092.15 684.125 L1092.71 684.125 L1093.27 684.125 L1093.83 684.125 L1094.39 684.125 L1094.94 684.125 L1095.5 684.125 L1096.06 684.125 L1096.62 684.125 L1097.18 684.125 L1097.74 684.125 L1098.3 684.125 L1098.86 684.125 L1099.42 684.125 L1099.98 684.125 L1100.54 684.125 L1101.1 684.125 L1101.66 684.125 L1102.22 684.125 L1102.77 684.125 L1103.33 684.125 L1103.89 684.125 L1104.45 684.125 L1105.01 684.125 L1105.57 684.125 L1106.13 684.125 L1106.69 684.125 L1107.25 684.125 L1107.81 684.125 L1108.37 684.125 L1108.93 684.125 L1109.49 684.125 L1110.04 684.125 L1110.6 684.125 L1111.16 684.125 L1111.72 684.125 L1112.28 684.125 L1112.84 684.125 L1113.4 684.125 L1113.96 684.125 L1114.52 684.125 L1115.08 684.125 L1115.64 684.125 L1116.2 684.125 L1116.76 684.125 L1117.31 684.125 L1117.87 684.125 L1118.43 684.125 L1118.99 684.125 L1119.55 684.125 L1120.11 684.125 L1120.67 684.125 L1121.23 684.125 L1121.79 684.125 L1122.35 684.125 L1122.91 684.125 L1123.47 684.125 L1124.03 684.125 L1124.59 684.125 L1125.14 684.125 L1125.7 684.125 L1126.26 684.125 L1126.82 684.125 L1127.38 684.125 L1127.94 684.125 L1128.5 684.125 L1129.06 684.125 L1129.62 684.125 L1130.18 684.125 L1130.74 684.125 L1131.3 684.125 L1131.86 684.125 L1132.41 684.125 L1132.97 684.125 L1133.53 684.125 L1134.09 684.125 L1134.65 684.125 L1135.21 684.125 L1135.77 684.125 L1136.33 684.125 L1136.89 684.125 L1137.45 684.125 L1138.01 684.125 L1138.57 684.125 L1139.13 684.125 L1139.68 684.125 L1140.24 684.125 L1140.8 684.125 L1141.36 684.125 L1141.92 684.125 L1142.48 684.125 L1143.04 684.125 L1143.6 684.125 L1144.16 684.125 L1144.72 684.125 L1145.28 684.125 L1145.84 684.125 L1146.4 684.125 L1146.96 684.125 L1147.51 684.125 L1148.07 684.125 L1148.63 684.125 L1149.19 684.125 L1149.75 684.125 L1150.31 684.125 L1150.87 684.125 L1151.43 684.125 L1151.99 684.125 L1152.55 684.125 L1153.11 684.125 L1153.67 684.125 L1154.23 684.125 L1154.78 684.125 L1155.34 684.125 L1155.9 684.125 L1156.46 684.125 L1157.02 684.125 L1157.58 684.125 L1158.14 684.125 L1158.7 684.125 L1159.26 684.125 L1159.82 684.125 L1160.38 684.125 L1160.94 684.125 L1161.5 684.125 L1162.05 684.125 L1162.61 684.125 L1163.17 684.125 L1163.73 684.125 L1164.29 684.125 L1164.85 684.125 L1165.41 684.125 L1165.97 684.125 L1166.53 684.125 L1167.09 684.125 L1167.65 684.125 L1168.21 684.125 L1168.77 684.125 L1169.33 684.125 L1169.88 684.125 L1170.44 684.125 L1171 684.125 L1171.56 684.125 L1172.12 684.125 L1172.68 684.125 L1173.24 684.125 L1173.8 684.125 L1174.36 684.125 L1174.92 684.125 L1175.48 684.125 L1176.04 684.125 L1176.6 684.125 L1177.15 684.125 L1177.71 684.125 L1178.27 684.125 L1178.83 684.125 L1179.39 684.125 L1179.95 684.125 L1180.51 684.125 L1181.07 684.125 L1181.63 684.125 L1182.19 684.125 L1182.75 684.125 L1183.31 684.125 L1183.87 684.125 L1184.43 684.125 L1184.98 684.125 L1185.54 684.125 L1186.1 684.125 L1186.66 684.125 L1187.22 684.125 L1187.78 684.125 L1188.34 684.125 L1188.9 684.125 L1189.46 684.125 L1190.02 684.125 L1190.58 684.125 L1191.14 684.125 L1191.7 684.125 L1192.25 684.125 L1192.81 684.125 L1193.37 684.125 L1193.93 684.125 L1194.49 684.125 L1195.05 684.125 L1195.61 684.125 L1196.17 684.125 L1196.73 684.125 L1197.29 684.125 L1197.85 684.125 L1198.41 684.125 L1198.97 684.125 L1199.52 684.125 L1200.08 684.125 L1200.64 684.125 L1201.2 684.125 L1201.76 684.125 L1202.32 684.125 L1202.88 684.125 L1203.44 684.125 L1204 684.125 L1204.56 684.125 L1205.12 684.125 L1205.68 684.125 L1206.24 684.125 L1206.8 684.125 L1207.35 684.125 L1207.91 684.125 L1208.47 684.125 L1209.03 684.125 L1209.59 684.125 L1210.15 684.125 L1210.71 684.125 L1211.27 684.125 L1211.83 684.125 L1212.39 684.125 L1212.95 684.125 L1213.51 684.125 L1214.07 684.125 L1214.62 684.125 L1215.18 684.125 L1215.74 684.125 L1216.3 684.125 L1216.86 684.125 L1217.42 684.125 L1217.98 684.125 L1218.54 684.125 L1219.1 684.125 L1219.66 684.125 L1220.22 684.125 L1220.78 684.125 L1221.34 684.125 L1221.89 684.125 L1222.45 684.125 L1223.01 684.125 L1223.57 684.125 L1224.13 684.125 L1224.69 684.125 L1225.25 684.125 L1225.81 684.125 L1226.37 684.125 L1226.93 684.125 L1227.49 684.125 L1228.05 684.125 L1228.61 684.125 L1229.17 684.125 L1229.72 684.125 L1230.28 684.125 L1230.84 684.125 L1231.4 684.125 L1231.96 684.125 L1232.52 684.125 L1233.08 684.125 L1233.64 684.125 L1234.2 684.125 L1234.76 684.125 L1235.32 684.125 L1235.88 684.125 L1236.44 684.125 L1236.99 684.125 L1237.55 684.125 L1238.11 684.125 L1238.67 684.125 L1239.23 684.125 L1239.79 684.125 L1240.35 684.125 L1240.91 684.125 L1241.47 684.125 L1242.03 684.125 L1242.59 684.125 L1243.15 684.125 L1243.71 684.125 L1244.26 684.125 L1244.82 684.125 L1245.38 684.125 L1245.94 684.125 L1246.5 684.125 L1247.06 684.125 L1247.62 684.125 L1248.18 684.125 L1248.74 684.125 L1249.3 684.125 L1249.86 684.125 L1250.42 684.125 L1250.98 684.125 L1251.54 684.125 L1252.09 684.125 L1252.65 684.125 L1253.21 684.125 L1253.77 684.125 L1254.33 684.125 L1254.89 684.125 L1255.45 684.125 L1256.01 684.125 L1256.57 684.125 L1257.13 684.125 L1257.69 684.125 L1258.25 684.125 L1258.81 684.125 L1259.36 684.125 L1259.92 684.125 L1260.48 684.125 L1261.04 684.125 L1261.6 684.125 L1262.16 684.125 L1262.72 684.125 L1263.28 684.125 L1263.84 684.125 L1264.4 684.125 L1264.96 684.125 L1265.52 684.125 L1266.08 684.125 L1266.63 684.125 L1267.19 684.125 L1267.75 684.125 L1268.31 684.125 L1268.87 684.125 L1269.43 684.125 L1269.99 684.125 L1270.55 684.125 L1271.11 684.125 L1271.67 684.125 L1272.23 684.125 L1272.79 684.125 L1273.35 684.125 L1273.91 684.125 L1274.46 684.125 L1275.02 684.125 L1275.58 684.125 L1276.14 684.125 L1276.7 684.125 L1277.26 684.125 L1277.82 684.125 L1278.38 684.125 L1278.94 684.125 L1279.5 684.125 L1280.06 684.125 L1280.62 684.125 L1281.18 684.125 L1281.73 684.125 L1282.29 684.125 L1282.85 684.125 L1283.41 684.125 L1283.97 684.125 L1284.53 684.125 L1285.09 684.125 L1285.65 684.125 L1286.21 684.125 L1286.77 684.125 L1287.33 684.125 L1287.89 684.125 L1288.45 684.125 L1289 684.125 L1289.56 684.125 L1290.12 684.125 L1290.68 684.125 L1291.24 684.125 L1291.8 684.125 L1292.36 684.125 L1292.92 684.125 L1293.48 684.125 L1294.04 684.125 L1294.6 684.125 L1295.16 684.125 L1295.72 684.125 L1296.28 684.125 L1296.83 684.125 L1297.39 684.125 L1297.95 684.125 L1298.51 684.125 L1299.07 684.125 L1299.63 684.125 L1300.19 684.125 L1300.75 684.125 L1301.31 684.125 L1301.87 684.125 L1302.43 684.125 L1302.99 684.125 L1303.55 684.125 L1304.1 684.125 L1304.66 684.125 L1305.22 684.125 L1305.78 684.125 L1306.34 684.125 L1306.9 684.125 L1307.46 684.125 L1308.02 684.125 L1308.58 684.125 L1309.14 684.125 L1309.7 684.125 L1310.26 684.125 L1310.82 684.125 L1311.38 684.125 L1311.93 684.125 L1312.49 684.125 L1313.05 684.125 L1313.61 684.125 L1314.17 684.125 L1314.73 684.125 L1315.29 684.125 L1315.85 684.125 L1316.41 684.125 L1316.97 684.125 L1317.53 684.125 L1318.09 684.125 L1318.65 684.125 L1319.2 684.125 L1319.76 684.125 L1320.32 684.125 L1320.88 684.125 L1321.44 684.125 L1322 684.125 L1322.56 684.125 L1323.12 684.125 L1323.68 684.125 L1324.24 684.125 L1324.8 684.125 L1325.36 684.125 L1325.92 684.125 L1326.47 684.125 L1327.03 684.125 L1327.59 684.125 L1328.15 684.125 L1328.71 684.125 L1329.27 684.125 L1329.83 684.125 L1330.39 684.125 L1330.95 684.125 L1331.51 684.125 L1332.07 684.125 L1332.63 684.125 L1333.19 684.125 L1333.75 684.125 L1334.3 684.125 L1334.86 684.125 L1335.42 684.125 L1335.98 684.125 L1336.54 684.125 L1337.1 684.125 L1337.66 684.125 L1338.22 684.125 L1338.78 684.125 L1339.34 684.125 L1339.9 684.125 L1340.46 684.125 L1341.02 684.125 L1341.57 684.125 L1342.13 684.125 L1342.69 684.125 L1343.25 684.125 L1343.81 684.125 L1344.37 684.125 L1344.93 684.125 L1345.49 684.125 L1346.05 684.125 L1346.61 684.125 L1347.17 684.125 L1347.73 684.125 L1348.29 684.125 L1348.84 684.125 L1349.4 684.125 L1349.96 684.125 L1350.52 684.125 L1351.08 684.125 L1351.64 684.125 L1352.2 684.125 L1352.76 684.125 L1353.32 684.125 L1353.88 684.125 L1354.44 684.125 L1355 684.125 L1355.56 684.125 L1356.12 684.125 L1356.67 684.125 L1357.23 684.125 L1357.79 684.125 L1358.35 684.125 L1358.91 684.125 L1359.47 684.125 L1360.03 684.125 L1360.59 684.125 L1361.15 684.125 L1361.71 684.125 L1362.27 684.125 L1362.83 684.125 L1363.39 684.125 L1363.94 684.125 L1364.5 684.125 L1365.06 684.125 L1365.62 684.125 L1366.18 684.125 L1366.74 684.125 L1367.3 684.125 L1367.86 684.125 L1368.42 684.125 L1368.98 684.125 L1369.54 684.125 L1370.1 684.125 L1370.66 684.125 L1371.21 684.125 L1371.77 684.125 L1372.33 684.125 L1372.89 684.125 L1373.45 684.125 L1374.01 684.125 L1374.57 684.125 L1375.13 684.125 L1375.69 684.125 L1376.25 684.125 L1376.81 684.125 L1377.37 684.125 L1377.93 684.125 L1378.49 684.125 L1379.04 684.125 L1379.6 684.125 L1380.16 684.125 L1380.72 684.125 L1381.28 684.125 L1381.84 684.125 L1382.4 684.125 L1382.96 684.125 L1383.52 684.125 L1384.08 684.125 L1384.64 684.125 L1385.2 684.125 L1385.76 684.125 L1386.31 684.125 L1386.87 684.125 L1387.43 684.125 L1387.99 684.125 L1388.55 684.125 L1389.11 684.125 L1389.67 684.125 L1390.23 684.125 L1390.79 684.125 L1391.35 684.125 L1391.91 684.125 L1392.47 684.125 L1393.03 684.125 L1393.58 684.125 L1394.14 684.125 L1394.7 684.125 L1395.26 684.125 L1395.82 684.125 L1396.38 684.125 L1396.94 684.125 L1397.5 684.125 L1398.06 684.125 L1398.62 684.125 L1399.18 684.125 L1399.74 684.125 L1400.3 684.125 L1400.86 684.125 L1401.41 684.125 L1401.97 684.125 L1402.53 684.125 L1403.09 684.125 L1403.65 684.125 L1404.21 684.125 L1404.77 684.125 L1405.33 684.125 L1405.89 684.125 L1406.45 684.125 L1407.01 684.125 L1407.57 684.125 L1408.13 684.125 L1408.68 684.125 L1409.24 684.125 L1409.8 684.125 L1410.36 684.125 L1410.92 684.125 L1411.48 684.125 L1412.04 684.125 L1412.6 684.125 L1413.16 684.125 L1413.72 684.125 L1414.28 684.125 L1414.84 684.125 L1415.4 684.125 L1415.95 684.125 L1416.51 684.125 L1417.07 684.125 L1417.63 684.125 L1418.19 684.125 L1418.75 684.125 L1419.31 684.125 L1419.87 684.125 L1420.43 684.125 L1420.99 684.125 L1421.55 684.125 L1422.11 684.125 L1422.67 684.125 L1423.23 684.125 L1423.78 684.125 L1424.34 684.125 L1424.9 684.125 L1425.46 684.125 L1426.02 684.125 L1426.58 684.125 L1427.14 684.125 L1427.7 684.125 L1428.26 684.125 L1428.82 684.125 L1429.38 684.125 L1429.94 684.125 L1430.5 684.125 L1431.05 684.125 L1431.61 684.125 L1432.17 684.125 L1432.73 684.125 L1433.29 684.125 L1433.85 684.125 L1434.41 684.125 L1434.97 684.125 L1435.53 684.125 L1436.09 684.125 L1436.65 684.125 L1437.21 684.125 L1437.77 684.125 L1438.33 684.125 L1438.88 684.125 L1439.44 684.125 L1440 684.125 L1440.56 684.125 L1441.12 684.125 L1441.68 684.125 L1442.24 684.125 L1442.8 684.125 L1443.36 684.125 L1443.92 684.125 L1444.48 684.125 L1445.04 684.125 L1445.6 684.125 L1446.15 684.125 L1446.71 684.125 L1447.27 684.125 L1447.83 684.125 L1448.39 684.125 L1448.95 684.125 L1449.51 684.125 L1450.07 684.125 L1450.63 684.125 L1451.19 684.125 L1451.75 684.125 L1452.31 684.125 L1452.87 684.125 L1453.42 684.125 L1453.98 684.125 L1454.54 684.125 L1455.1 684.125 L1455.66 684.125 L1456.22 684.125 L1456.78 684.125 L1457.34 684.125 L1457.9 684.125 L1458.46 684.125 L1459.02 684.125 L1459.58 684.125 L1460.14 684.125 L1460.7 684.125 L1461.25 684.125 L1461.81 684.125 L1462.37 684.125 L1462.93 684.125 L1463.49 684.125 L1464.05 684.125 L1464.61 684.125 L1465.17 684.125 L1465.73 684.125 L1466.29 684.125 L1466.85 684.125 L1467.41 684.125 L1467.97 684.125 L1468.52 684.125 L1469.08 684.125 L1469.64 684.125 L1470.2 684.125 L1470.76 684.125 L1471.32 684.125 L1471.88 684.125 L1472.44 684.125 L1473 684.125 L1473.56 684.125 L1474.12 684.125 L1474.68 684.125 L1475.24 684.125 L1475.79 684.125 L1476.35 684.125 L1476.91 684.125 L1477.47 684.125 L1478.03 684.125 L1478.59 684.125 L1479.15 684.125 L1479.71 684.125 L1480.27 684.125 L1480.83 684.125 L1481.39 684.125 L1481.95 684.125 L1482.51 684.125 L1483.07 684.125 L1483.62 684.125 L1484.18 684.125 L1484.74 684.125 L1485.3 684.125 L1485.86 684.125 L1486.42 684.125 L1486.98 684.125 L1487.54 684.125 L1488.1 684.125 L1488.66 684.125 L1489.22 684.125 L1489.78 684.125 L1490.34 684.125 L1490.89 684.125 L1491.45 684.125 L1492.01 684.125 L1492.57 684.125 L1493.13 684.125 L1493.69 684.125 L1494.25 684.125 L1494.81 684.125 L1495.37 684.125 L1495.93 684.125 L1496.49 684.125 L1497.05 684.125 L1497.61 684.125 L1498.16 684.125 L1498.72 684.125 L1499.28 684.125 L1499.84 684.125 L1500.4 684.125 L1500.96 684.125 L1501.52 684.125 L1502.08 684.125 L1502.64 684.125 L1503.2 684.125 L1503.76 684.125 L1504.32 684.125 L1504.88 684.125 L1505.44 684.125 L1505.99 684.125 L1506.55 684.125 L1507.11 684.125 L1507.67 684.125 L1508.23 684.125 L1508.79 684.125 L1509.35 684.125 L1509.91 684.125 L1510.47 684.125 L1511.03 684.125 L1511.59 684.125 L1512.15 684.125 L1512.71 684.125 L1513.26 684.125 L1513.82 684.125 L1514.38 684.125 L1514.94 684.125 L1515.5 684.125 L1516.06 684.125 L1516.62 684.125 L1517.18 684.125 L1517.74 684.125 L1518.3 684.125 L1518.86 684.125 L1519.42 684.125 L1519.98 684.125 L1520.53 684.125 L1521.09 684.125 L1521.65 684.125 L1522.21 684.125 L1522.77 684.125 L1523.33 684.125 L1523.89 684.125 L1524.45 684.125 L1525.01 684.125 L1525.57 684.125 L1526.13 684.125 L1526.69 684.125 L1527.25 684.125 L1527.81 684.125 L1528.36 684.125 L1528.92 684.125 L1529.48 684.125 L1530.04 684.125 L1530.6 684.125 L1531.16 684.125 L1531.72 684.125 L1532.28 684.125 L1532.84 684.125 L1533.4 684.125 L1533.96 684.125 L1534.52 684.125 L1535.08 684.125 L1535.63 684.125 L1536.19 684.125 L1536.75 684.125 L1537.31 684.125 L1537.87 684.125 L1538.43 684.125 L1538.99 684.125 L1539.55 684.125 L1540.11 684.125 L1540.67 684.125 L1541.23 684.125 L1541.79 684.125 L1542.35 684.125 L1542.9 684.125 L1543.46 684.125 L1544.02 684.125 L1544.58 684.125 L1545.14 684.125 L1545.7 684.125 L1546.26 684.125 L1546.82 684.125 L1547.38 684.125 L1547.94 684.125 L1548.5 684.125 L1549.06 684.125 L1549.62 684.125 L1550.18 684.125 L1550.73 684.125 L1551.29 684.125 L1551.85 684.125 L1552.41 684.125 L1552.97 684.125 L1553.53 684.125 L1554.09 684.125 L1554.65 684.125 L1555.21 684.125 L1555.77 684.125 L1556.33 684.125 L1556.89 684.125 L1557.45 684.125 L1558 684.125 L1558.56 684.125 L1559.12 684.125 L1559.68 684.125 L1560.24 684.125 L1560.8 684.125 L1561.36 684.125 L1561.92 684.125 L1562.48 684.125 L1563.04 684.125 L1563.6 684.125 L1564.16 684.125 L1564.72 684.125 L1565.28 684.125 L1565.83 684.125 L1566.39 684.125 L1566.95 684.125 L1567.51 684.125 L1568.07 684.125 L1568.63 684.125 L1569.19 684.125 L1569.75 684.125 L1570.31 684.125 L1570.87 684.125 L1571.43 684.125 L1571.99 684.125 L1572.55 684.125 L1573.1 684.125 L1573.66 684.125 L1574.22 684.125 L1574.78 684.125 L1575.34 684.125 L1575.9 684.125 L1576.46 684.125 L1577.02 684.125 L1577.58 684.125 L1578.14 684.125 L1578.7 684.125 L1579.26 684.125 L1579.82 684.125 L1580.37 684.125 L1580.93 684.125 L1581.49 684.125 L1582.05 684.125 L1582.61 684.125 L1583.17 684.125 L1583.73 684.125 L1584.29 684.125 L1584.85 684.125 L1585.41 684.125 L1585.97 684.125 L1586.53 684.125 L1587.09 684.125 L1587.65 684.125 L1588.2 684.125 L1588.76 684.125 L1589.32 684.125 L1589.88 684.125 L1590.44 684.125 L1591 684.125 L1591.56 684.125 L1592.12 684.125 L1592.68 684.125 L1593.24 684.125 L1593.8 684.125 L1594.36 684.125 L1594.92 684.125 L1595.47 684.125 L1596.03 684.125 L1596.59 684.125 L1597.15 684.125 L1597.71 684.125 L1598.27 684.125 L1598.83 684.125 L1599.39 684.125 L1599.95 684.125 L1600.51 684.125 L1601.07 684.125 L1601.63 684.125 L1602.19 684.125 L1602.74 684.125 L1603.3 684.125 L1603.86 684.125 L1604.42 684.125 L1604.98 684.125 L1605.54 684.125 L1606.1 684.125 L1606.66 684.125 L1607.22 684.125 L1607.78 684.125 L1608.34 684.125 L1608.9 684.125 L1609.46 684.125 L1610.02 684.125 L1610.57 684.125 L1611.13 684.125 L1611.69 684.125 L1612.25 684.125 L1612.81 684.125 L1613.37 684.125 L1613.93 684.125 L1614.49 684.125 L1615.05 684.125 L1615.61 684.125 L1616.17 684.125 L1616.73 684.125 L1617.29 684.125 L1617.84 684.125 L1618.4 684.125 L1618.96 684.125 L1619.52 684.125 L1620.08 684.125 L1620.64 684.125 L1621.2 684.125 L1621.76 684.125 L1622.32 684.125 L1622.88 684.125 L1623.44 684.125 L1624 684.125 L1624.56 684.125 L1625.11 684.125 L1625.67 684.125 L1626.23 684.125 L1626.79 684.125 L1627.35 684.125 L1627.91 684.125 L1628.47 684.125 L1629.03 684.125 L1629.59 684.125 L1630.15 684.125 L1630.71 684.125 L1631.27 684.125 L1631.83 684.125 L1632.39 684.125 L1632.94 684.125 L1633.5 684.125 L1634.06 684.125 L1634.62 684.125 L1635.18 684.125 L1635.74 684.125 L1636.3 684.125 L1636.86 684.125 L1637.42 684.125 L1637.98 684.125 L1638.54 684.125 L1639.1 684.125 L1639.66 684.125 L1640.21 684.125 L1640.77 684.125 L1641.33 684.125 L1641.89 684.125 L1642.45 684.125 L1643.01 684.125 L1643.57 684.125 L1644.13 684.125 L1644.69 684.125 L1645.25 684.125 L1645.81 684.125 L1646.37 684.125 L1646.93 684.125 L1647.48 684.125 L1648.04 684.125 L1648.6 684.125 L1649.16 684.125 L1649.72 684.125 L1650.28 684.125 L1650.84 684.125 L1651.4 684.125 L1651.96 684.125 L1652.52 684.125 L1653.08 684.125 L1653.64 684.125 L1654.2 684.125 L1654.76 684.125 L1655.31 684.125 L1655.87 684.125 L1656.43 684.125 L1656.99 684.125 L1657.55 684.125 L1658.11 684.125 L1658.67 684.125 L1659.23 684.125 L1659.79 684.125 L1660.35 684.125 L1660.91 684.125 L1661.47 684.125 L1662.03 684.125 L1662.58 684.125 L1663.14 684.125 L1663.7 684.125 L1664.26 684.125 L1664.82 684.125 L1665.38 684.125 L1665.94 684.125 L1666.5 684.125 L1667.06 684.125 L1667.62 684.125 L1668.18 684.125 L1668.74 684.125 L1669.3 684.125 L1669.85 684.125 L1670.41 684.125 L1670.97 684.125 L1671.53 684.125 L1672.09 684.125 L1672.65 684.125 L1673.21 684.125 L1673.77 684.125 L1674.33 684.125 L1674.89 684.125 L1675.45 684.125 L1676.01 684.125 L1676.57 684.125 L1677.13 684.125 L1677.68 684.125 L1678.24 684.125 L1678.8 684.125 L1679.36 684.125 L1679.92 684.125 L1680.48 684.125 L1681.04 684.125 L1681.6 684.125 L1682.16 684.125 L1682.72 684.125 L1683.28 684.125 L1683.84 684.125 L1684.4 684.125 L1684.95 684.125 L1685.51 684.125 L1686.07 684.125 L1686.63 684.125 L1687.19 684.125 L1687.75 684.125 L1688.31 684.125 L1688.87 684.125 L1689.43 684.125 L1689.99 684.125 L1690.55 684.125 L1691.11 684.125 L1691.67 684.125 L1692.23 684.125 L1692.78 684.125 L1693.34 684.125 L1693.9 684.125 L1694.46 684.125 L1695.02 684.125 L1695.58 684.125 L1696.14 684.125 L1696.7 684.125 L1697.26 684.125 L1697.82 684.125 L1698.38 684.125 L1698.94 684.125 L1699.5 684.125 L1700.05 684.125 L1700.61 684.125 L1701.17 684.125 L1701.73 684.125 L1702.29 684.125 L1702.85 684.125 L1703.41 684.125 L1703.97 684.125 L1704.53 684.125 L1705.09 684.125 L1705.65 684.125 L1706.21 684.125 L1706.77 684.125 L1707.32 684.125 L1707.88 684.125 L1708.44 684.125 L1709 684.125 L1709.56 684.125 L1710.12 684.125 L1710.68 684.125 L1711.24 684.125 L1711.8 684.125 L1712.36 684.125 L1712.92 684.125 L1713.48 684.125 L1714.04 684.125 L1714.6 684.125 L1715.15 684.125 L1715.71 684.125 L1716.27 684.125 L1716.83 684.125 L1717.39 684.125 L1717.95 684.125 L1718.51 684.125 L1719.07 684.125 L1719.63 684.125 L1720.19 684.125 L1720.75 684.125 L1721.31 684.125 L1721.87 684.125 L1722.42 684.125 L1722.98 684.125 L1723.54 684.125 L1724.1 684.125 L1724.66 684.125 L1725.22 684.125 L1725.78 684.125 L1726.34 684.125 L1726.9 684.125 L1727.46 684.125 L1728.02 684.125 L1728.58 684.125 L1729.14 684.125 L1729.69 684.125 L1730.25 684.125 L1730.81 684.125 L1731.37 684.125 L1731.93 684.125 L1732.49 684.125 L1733.05 684.125 L1733.61 684.125 L1734.17 684.125 L1734.73 684.125 L1735.29 684.125 L1735.85 684.125 L1736.41 684.125 L1736.97 684.125 L1737.52 684.125 L1738.08 684.125 L1738.64 684.125 L1739.2 684.125 L1739.76 684.125 L1740.32 684.125 L1740.88 684.125 L1741.44 684.125 L1742 684.125 L1742.56 684.125 L1743.12 684.125 L1743.68 684.125 L1744.24 684.125 L1744.79 684.125 L1745.35 684.125 L1745.91 684.125 L1746.47 684.125 L1747.03 684.125 L1747.59 684.125 L1748.15 684.125 L1748.71 684.125 L1749.27 684.125 L1749.83 684.125 L1750.39 684.125 L1750.95 684.125 L1751.51 684.125 L1752.06 684.125 L1752.62 684.125 L1753.18 684.125 L1753.74 684.125 L1754.3 684.125 L1754.86 684.125 L1755.42 684.125 L1755.98 684.125 L1756.54 684.125 L1757.1 684.125 L1757.66 684.125 L1758.22 684.125 L1758.78 684.125 L1759.34 684.125 L1759.89 684.125 L1760.45 684.125 L1761.01 684.125 L1761.57 684.125 L1762.13 684.125 L1762.69 684.125 L1763.25 684.125 L1763.81 684.125 L1764.37 684.125 L1764.93 684.125 L1765.49 684.125 L1766.05 684.125 L1766.61 684.125 L1767.16 684.125 L1767.72 684.125 L1768.28 684.125 L1768.84 684.125 L1769.4 684.125 L1769.96 684.125 L1770.52 684.125 L1771.08 684.125 L1771.64 684.125 L1772.2 684.125 L1772.76 684.125 L1773.32 684.125 L1773.88 684.125 L1774.43 684.125 L1774.99 684.125 L1775.55 684.125 L1776.11 684.125 L1776.67 684.125 L1777.23 684.125 L1777.79 684.125 L1778.35 684.125 L1778.91 684.125 L1779.47 684.125 L1780.03 684.125 L1780.59 684.125 L1781.15 684.125 L1781.71 684.125 L1782.26 684.125 L1782.82 684.125 L1783.38 684.125 L1783.94 684.125 L1784.5 684.125 L1785.06 684.125 L1785.62 684.125 L1786.18 684.125 L1786.74 684.125 L1787.3 684.125 L1787.86 684.125 L1788.42 684.125 L1788.98 684.125 L1789.53 684.125 L1790.09 684.125 L1790.65 684.125 L1791.21 684.125 L1791.77 684.125 L1792.33 684.125 L1792.89 684.125 L1793.45 684.125 L1794.01 684.125 L1794.57 684.125 L1795.13 684.125 L1795.69 684.125 L1796.25 684.125 L1796.8 684.125 L1797.36 684.125 L1797.92 684.125 L1798.48 684.125 L1799.04 684.125 L1799.6 684.125 L1800.16 684.125 L1800.72 684.125 L1801.28 684.125 L1801.84 684.125 L1802.4 684.125 L1802.96 684.125 L1803.52 684.125 L1804.08 684.125 L1804.63 684.125 L1805.19 684.125 L1805.75 684.125 L1806.31 684.125 L1806.87 684.125 L1807.43 684.125 L1807.99 684.125 L1808.55 684.125 L1809.11 684.125 L1809.67 684.125 L1810.23 684.125 L1810.79 684.125 L1811.35 684.125 L1811.9 684.125 L1812.46 684.125 L1813.02 684.125 L1813.58 684.125 L1814.14 684.125 L1814.7 684.125 L1815.26 684.125 L1815.82 684.125 L1816.38 684.125 L1816.94 684.125 L1817.5 684.125 L1818.06 684.125 L1818.62 684.125 L1819.18 684.125 L1819.73 684.125 L1820.29 684.125 L1820.85 684.125 L1821.41 684.125 L1821.97 684.125 L1822.53 684.125 L1823.09 684.125 L1823.65 684.125 L1824.21 684.125 L1824.77 684.125 L1825.33 684.125 L1825.89 684.125 L1826.45 684.125 L1827 684.125 L1827.56 684.125 L1828.12 684.125 L1828.68 684.125 L1829.24 684.125 L1829.8 684.125 L1830.36 684.125 L1830.92 684.125 L1831.48 684.125 L1832.04 684.125 L1832.6 684.125 L1833.16 684.125 L1833.72 684.125 L1834.27 684.125 L1834.83 684.125 L1835.39 684.125 L1835.95 684.125 L1836.51 684.125 L1837.07 684.125 L1837.63 684.125 L1838.19 684.125 L1838.19 681.47 L1837.63 681.47 L1837.07 681.47 L1836.51 681.47 L1835.95 681.47 L1835.39 681.47 L1834.83 681.47 L1834.27 681.47 L1833.72 681.47 L1833.16 681.47 L1832.6 681.47 L1832.04 681.47 L1831.48 681.47 L1830.92 681.47 L1830.36 681.47 L1829.8 681.47 L1829.24 681.47 L1828.68 681.47 L1828.12 681.47 L1827.56 681.47 L1827 681.47 L1826.45 681.47 L1825.89 681.47 L1825.33 681.47 L1824.77 681.47 L1824.21 681.47 L1823.65 681.47 L1823.09 681.47 L1822.53 681.47 L1821.97 681.47 L1821.41 681.47 L1820.85 681.47 L1820.29 681.47 L1819.73 681.47 L1819.18 681.47 L1818.62 681.47 L1818.06 681.47 L1817.5 681.47 L1816.94 681.47 L1816.38 681.47 L1815.82 681.47 L1815.26 681.47 L1814.7 681.47 L1814.14 681.47 L1813.58 681.47 L1813.02 681.47 L1812.46 681.47 L1811.9 681.47 L1811.35 681.47 L1810.79 681.47 L1810.23 681.47 L1809.67 681.47 L1809.11 681.47 L1808.55 681.47 L1807.99 681.47 L1807.43 681.47 L1806.87 681.47 L1806.31 681.47 L1805.75 681.47 L1805.19 681.47 L1804.63 681.47 L1804.08 681.47 L1803.52 681.47 L1802.96 681.47 L1802.4 681.47 L1801.84 681.47 L1801.28 681.47 L1800.72 681.47 L1800.16 681.47 L1799.6 681.47 L1799.04 681.47 L1798.48 681.47 L1797.92 681.47 L1797.36 681.47 L1796.8 681.47 L1796.25 681.47 L1795.69 681.47 L1795.13 681.47 L1794.57 681.47 L1794.01 681.47 L1793.45 681.47 L1792.89 681.47 L1792.33 681.47 L1791.77 681.47 L1791.21 681.47 L1790.65 681.47 L1790.09 681.47 L1789.53 681.47 L1788.98 681.47 L1788.42 681.47 L1787.86 681.47 L1787.3 681.47 L1786.74 681.47 L1786.18 681.47 L1785.62 681.47 L1785.06 681.47 L1784.5 681.47 L1783.94 681.47 L1783.38 681.47 L1782.82 681.47 L1782.26 681.47 L1781.71 681.47 L1781.15 681.47 L1780.59 681.47 L1780.03 681.47 L1779.47 681.47 L1778.91 681.47 L1778.35 681.47 L1777.79 681.47 L1777.23 681.47 L1776.67 681.47 L1776.11 681.47 L1775.55 681.47 L1774.99 681.47 L1774.43 681.47 L1773.88 681.47 L1773.32 681.47 L1772.76 681.47 L1772.2 681.47 L1771.64 681.47 L1771.08 681.47 L1770.52 681.47 L1769.96 681.47 L1769.4 681.47 L1768.84 681.47 L1768.28 681.47 L1767.72 681.47 L1767.16 681.47 L1766.61 681.47 L1766.05 681.47 L1765.49 681.47 L1764.93 681.47 L1764.37 681.47 L1763.81 681.47 L1763.25 681.47 L1762.69 681.47 L1762.13 681.47 L1761.57 681.47 L1761.01 681.47 L1760.45 681.47 L1759.89 681.47 L1759.34 681.47 L1758.78 681.47 L1758.22 681.47 L1757.66 681.47 L1757.1 681.47 L1756.54 681.47 L1755.98 681.47 L1755.42 681.47 L1754.86 681.47 L1754.3 681.47 L1753.74 681.47 L1753.18 681.47 L1752.62 681.47 L1752.06 681.47 L1751.51 681.47 L1750.95 681.47 L1750.39 681.47 L1749.83 681.47 L1749.27 681.47 L1748.71 681.47 L1748.15 681.47 L1747.59 681.47 L1747.03 681.47 L1746.47 681.47 L1745.91 681.47 L1745.35 681.47 L1744.79 681.47 L1744.24 681.47 L1743.68 681.47 L1743.12 681.47 L1742.56 681.47 L1742 681.47 L1741.44 681.47 L1740.88 681.47 L1740.32 681.47 L1739.76 681.47 L1739.2 681.47 L1738.64 681.47 L1738.08 681.47 L1737.52 681.47 L1736.97 681.47 L1736.41 681.47 L1735.85 681.47 L1735.29 681.47 L1734.73 681.47 L1734.17 681.47 L1733.61 681.47 L1733.05 681.47 L1732.49 681.47 L1731.93 681.47 L1731.37 681.47 L1730.81 681.47 L1730.25 681.47 L1729.69 681.47 L1729.14 681.47 L1728.58 681.47 L1728.02 681.47 L1727.46 681.47 L1726.9 681.47 L1726.34 681.47 L1725.78 681.47 L1725.22 681.47 L1724.66 681.47 L1724.1 681.47 L1723.54 681.47 L1722.98 681.47 L1722.42 681.47 L1721.87 681.47 L1721.31 681.47 L1720.75 681.47 L1720.19 681.47 L1719.63 681.47 L1719.07 681.47 L1718.51 681.47 L1717.95 681.47 L1717.39 681.47 L1716.83 681.47 L1716.27 681.47 L1715.71 681.47 L1715.15 681.47 L1714.6 681.47 L1714.04 681.47 L1713.48 681.47 L1712.92 681.47 L1712.36 681.47 L1711.8 681.47 L1711.24 681.47 L1710.68 681.47 L1710.12 681.47 L1709.56 681.47 L1709 681.47 L1708.44 681.47 L1707.88 681.47 L1707.32 681.47 L1706.77 681.47 L1706.21 681.47 L1705.65 681.47 L1705.09 681.47 L1704.53 681.47 L1703.97 681.47 L1703.41 681.47 L1702.85 681.47 L1702.29 681.47 L1701.73 681.47 L1701.17 681.47 L1700.61 681.47 L1700.05 681.47 L1699.5 681.47 L1698.94 681.47 L1698.38 681.47 L1697.82 681.47 L1697.26 681.47 L1696.7 681.47 L1696.14 681.47 L1695.58 681.47 L1695.02 681.47 L1694.46 681.47 L1693.9 681.47 L1693.34 681.47 L1692.78 681.47 L1692.23 681.47 L1691.67 681.47 L1691.11 681.47 L1690.55 681.47 L1689.99 681.47 L1689.43 681.47 L1688.87 681.47 L1688.31 681.47 L1687.75 681.47 L1687.19 681.47 L1686.63 681.47 L1686.07 681.47 L1685.51 681.47 L1684.95 681.47 L1684.4 681.47 L1683.84 681.47 L1683.28 681.47 L1682.72 681.47 L1682.16 681.47 L1681.6 681.47 L1681.04 681.47 L1680.48 681.47 L1679.92 681.47 L1679.36 681.47 L1678.8 681.47 L1678.24 681.47 L1677.68 681.47 L1677.13 681.47 L1676.57 681.47 L1676.01 681.47 L1675.45 681.47 L1674.89 681.47 L1674.33 681.47 L1673.77 681.47 L1673.21 681.47 L1672.65 681.47 L1672.09 681.47 L1671.53 681.47 L1670.97 681.47 L1670.41 681.47 L1669.85 681.47 L1669.3 681.47 L1668.74 681.47 L1668.18 681.47 L1667.62 681.47 L1667.06 681.47 L1666.5 681.47 L1665.94 681.47 L1665.38 681.47 L1664.82 681.47 L1664.26 681.47 L1663.7 681.47 L1663.14 681.47 L1662.58 681.47 L1662.03 681.47 L1661.47 681.47 L1660.91 681.47 L1660.35 681.47 L1659.79 681.47 L1659.23 681.47 L1658.67 681.47 L1658.11 681.47 L1657.55 681.47 L1656.99 681.47 L1656.43 681.47 L1655.87 681.47 L1655.31 681.47 L1654.76 681.47 L1654.2 681.47 L1653.64 681.47 L1653.08 681.47 L1652.52 681.47 L1651.96 681.47 L1651.4 681.47 L1650.84 681.47 L1650.28 681.47 L1649.72 681.47 L1649.16 681.47 L1648.6 681.47 L1648.04 681.47 L1647.48 681.47 L1646.93 681.47 L1646.37 681.47 L1645.81 681.47 L1645.25 681.47 L1644.69 681.47 L1644.13 681.47 L1643.57 681.47 L1643.01 681.47 L1642.45 681.47 L1641.89 681.47 L1641.33 681.47 L1640.77 681.47 L1640.21 681.47 L1639.66 681.47 L1639.1 681.47 L1638.54 681.47 L1637.98 681.47 L1637.42 681.47 L1636.86 681.47 L1636.3 681.47 L1635.74 681.47 L1635.18 681.47 L1634.62 681.47 L1634.06 681.47 L1633.5 681.47 L1632.94 681.47 L1632.39 681.47 L1631.83 681.47 L1631.27 681.47 L1630.71 681.47 L1630.15 681.47 L1629.59 681.47 L1629.03 681.47 L1628.47 681.47 L1627.91 681.47 L1627.35 681.47 L1626.79 681.47 L1626.23 681.47 L1625.67 681.47 L1625.11 681.47 L1624.56 681.47 L1624 681.47 L1623.44 681.47 L1622.88 681.47 L1622.32 681.47 L1621.76 681.47 L1621.2 681.47 L1620.64 681.47 L1620.08 681.47 L1619.52 681.47 L1618.96 681.47 L1618.4 681.47 L1617.84 681.47 L1617.29 681.47 L1616.73 681.47 L1616.17 681.47 L1615.61 681.47 L1615.05 681.47 L1614.49 681.47 L1613.93 681.47 L1613.37 681.47 L1612.81 681.47 L1612.25 681.47 L1611.69 681.47 L1611.13 681.47 L1610.57 681.47 L1610.02 681.47 L1609.46 681.47 L1608.9 681.47 L1608.34 681.47 L1607.78 681.47 L1607.22 681.47 L1606.66 681.47 L1606.1 681.47 L1605.54 681.47 L1604.98 681.47 L1604.42 681.47 L1603.86 681.47 L1603.3 681.47 L1602.74 681.47 L1602.19 681.47 L1601.63 681.47 L1601.07 681.47 L1600.51 681.47 L1599.95 681.47 L1599.39 681.47 L1598.83 681.47 L1598.27 681.47 L1597.71 681.47 L1597.15 681.47 L1596.59 681.47 L1596.03 681.47 L1595.47 681.47 L1594.92 681.47 L1594.36 681.47 L1593.8 681.47 L1593.24 681.47 L1592.68 681.47 L1592.12 681.47 L1591.56 681.47 L1591 681.47 L1590.44 681.47 L1589.88 681.47 L1589.32 681.47 L1588.76 681.47 L1588.2 681.47 L1587.65 681.47 L1587.09 681.47 L1586.53 681.47 L1585.97 681.47 L1585.41 681.47 L1584.85 681.47 L1584.29 681.47 L1583.73 681.47 L1583.17 681.47 L1582.61 681.47 L1582.05 681.47 L1581.49 681.47 L1580.93 681.47 L1580.37 681.47 L1579.82 681.47 L1579.26 681.47 L1578.7 681.47 L1578.14 681.47 L1577.58 681.47 L1577.02 681.47 L1576.46 681.47 L1575.9 681.47 L1575.34 681.47 L1574.78 681.47 L1574.22 681.47 L1573.66 681.47 L1573.1 681.47 L1572.55 681.47 L1571.99 681.47 L1571.43 681.47 L1570.87 681.47 L1570.31 681.47 L1569.75 681.47 L1569.19 681.47 L1568.63 681.47 L1568.07 681.47 L1567.51 681.47 L1566.95 681.47 L1566.39 681.47 L1565.83 681.47 L1565.28 681.47 L1564.72 681.47 L1564.16 681.47 L1563.6 681.47 L1563.04 681.47 L1562.48 681.47 L1561.92 681.47 L1561.36 681.47 L1560.8 681.47 L1560.24 681.47 L1559.68 681.47 L1559.12 681.47 L1558.56 681.47 L1558 681.47 L1557.45 681.47 L1556.89 681.47 L1556.33 681.47 L1555.77 681.47 L1555.21 681.47 L1554.65 681.47 L1554.09 681.47 L1553.53 681.47 L1552.97 681.47 L1552.41 681.47 L1551.85 681.47 L1551.29 681.47 L1550.73 681.47 L1550.18 681.47 L1549.62 681.47 L1549.06 681.47 L1548.5 681.47 L1547.94 681.47 L1547.38 681.47 L1546.82 681.47 L1546.26 681.47 L1545.7 681.47 L1545.14 681.47 L1544.58 681.47 L1544.02 681.47 L1543.46 681.47 L1542.9 681.47 L1542.35 681.47 L1541.79 681.47 L1541.23 681.47 L1540.67 681.47 L1540.11 681.47 L1539.55 681.47 L1538.99 681.47 L1538.43 681.47 L1537.87 681.47 L1537.31 681.47 L1536.75 681.47 L1536.19 681.47 L1535.63 681.47 L1535.08 681.47 L1534.52 681.47 L1533.96 681.47 L1533.4 681.47 L1532.84 681.47 L1532.28 681.47 L1531.72 681.47 L1531.16 681.47 L1530.6 681.47 L1530.04 681.47 L1529.48 681.47 L1528.92 681.47 L1528.36 681.47 L1527.81 681.47 L1527.25 681.47 L1526.69 681.47 L1526.13 681.47 L1525.57 681.47 L1525.01 681.47 L1524.45 681.47 L1523.89 681.47 L1523.33 681.47 L1522.77 681.47 L1522.21 681.47 L1521.65 681.47 L1521.09 681.47 L1520.53 681.47 L1519.98 681.47 L1519.42 681.47 L1518.86 681.47 L1518.3 681.47 L1517.74 681.47 L1517.18 681.47 L1516.62 681.47 L1516.06 681.47 L1515.5 681.47 L1514.94 681.47 L1514.38 681.47 L1513.82 681.47 L1513.26 681.47 L1512.71 681.47 L1512.15 681.47 L1511.59 681.47 L1511.03 681.47 L1510.47 681.47 L1509.91 681.47 L1509.35 681.47 L1508.79 681.47 L1508.23 681.47 L1507.67 681.47 L1507.11 681.47 L1506.55 681.47 L1505.99 681.47 L1505.44 681.47 L1504.88 681.47 L1504.32 681.47 L1503.76 681.47 L1503.2 681.47 L1502.64 681.47 L1502.08 681.47 L1501.52 681.47 L1500.96 681.47 L1500.4 681.47 L1499.84 681.47 L1499.28 681.47 L1498.72 681.47 L1498.16 681.47 L1497.61 681.47 L1497.05 681.47 L1496.49 681.47 L1495.93 681.47 L1495.37 681.47 L1494.81 681.47 L1494.25 681.47 L1493.69 681.47 L1493.13 681.47 L1492.57 681.47 L1492.01 681.47 L1491.45 681.47 L1490.89 681.47 L1490.34 681.47 L1489.78 681.47 L1489.22 681.47 L1488.66 681.47 L1488.1 681.47 L1487.54 681.47 L1486.98 681.47 L1486.42 681.47 L1485.86 681.47 L1485.3 681.47 L1484.74 681.47 L1484.18 681.47 L1483.62 681.47 L1483.07 681.47 L1482.51 681.47 L1481.95 681.47 L1481.39 681.47 L1480.83 681.47 L1480.27 681.47 L1479.71 681.47 L1479.15 681.47 L1478.59 681.47 L1478.03 681.47 L1477.47 681.47 L1476.91 681.47 L1476.35 681.47 L1475.79 681.47 L1475.24 681.47 L1474.68 681.47 L1474.12 681.47 L1473.56 681.47 L1473 681.47 L1472.44 681.47 L1471.88 681.47 L1471.32 681.47 L1470.76 681.47 L1470.2 681.47 L1469.64 681.47 L1469.08 681.47 L1468.52 681.47 L1467.97 681.47 L1467.41 681.47 L1466.85 681.47 L1466.29 681.47 L1465.73 681.47 L1465.17 681.47 L1464.61 681.47 L1464.05 681.47 L1463.49 681.47 L1462.93 681.47 L1462.37 681.47 L1461.81 681.47 L1461.25 681.47 L1460.7 681.47 L1460.14 681.47 L1459.58 681.47 L1459.02 681.47 L1458.46 681.47 L1457.9 681.47 L1457.34 681.47 L1456.78 681.47 L1456.22 681.47 L1455.66 681.47 L1455.1 681.47 L1454.54 681.47 L1453.98 681.47 L1453.42 681.47 L1452.87 681.47 L1452.31 681.47 L1451.75 681.47 L1451.19 681.47 L1450.63 681.47 L1450.07 681.47 L1449.51 681.47 L1448.95 681.47 L1448.39 681.47 L1447.83 681.47 L1447.27 681.47 L1446.71 681.47 L1446.15 681.47 L1445.6 681.47 L1445.04 681.47 L1444.48 681.47 L1443.92 681.47 L1443.36 681.47 L1442.8 681.47 L1442.24 681.47 L1441.68 681.47 L1441.12 681.47 L1440.56 681.47 L1440 681.47 L1439.44 681.47 L1438.88 681.47 L1438.33 681.47 L1437.77 681.47 L1437.21 681.47 L1436.65 681.47 L1436.09 681.47 L1435.53 681.47 L1434.97 681.47 L1434.41 681.47 L1433.85 681.47 L1433.29 681.47 L1432.73 681.47 L1432.17 681.47 L1431.61 681.47 L1431.05 681.47 L1430.5 681.47 L1429.94 681.47 L1429.38 681.47 L1428.82 681.47 L1428.26 681.47 L1427.7 681.47 L1427.14 681.47 L1426.58 681.47 L1426.02 681.47 L1425.46 681.47 L1424.9 681.47 L1424.34 681.47 L1423.78 681.47 L1423.23 681.47 L1422.67 681.47 L1422.11 681.47 L1421.55 681.47 L1420.99 681.47 L1420.43 681.47 L1419.87 681.47 L1419.31 681.47 L1418.75 681.47 L1418.19 681.47 L1417.63 681.47 L1417.07 681.47 L1416.51 681.47 L1415.95 681.47 L1415.4 681.47 L1414.84 681.47 L1414.28 681.47 L1413.72 681.47 L1413.16 681.47 L1412.6 681.47 L1412.04 681.47 L1411.48 681.47 L1410.92 681.47 L1410.36 681.47 L1409.8 681.47 L1409.24 681.47 L1408.68 681.47 L1408.13 681.47 L1407.57 681.47 L1407.01 681.47 L1406.45 681.47 L1405.89 681.47 L1405.33 681.47 L1404.77 681.47 L1404.21 681.47 L1403.65 681.47 L1403.09 681.47 L1402.53 681.47 L1401.97 681.47 L1401.41 681.47 L1400.86 681.47 L1400.3 681.47 L1399.74 681.47 L1399.18 681.47 L1398.62 681.47 L1398.06 681.47 L1397.5 681.47 L1396.94 681.47 L1396.38 681.47 L1395.82 681.47 L1395.26 681.47 L1394.7 681.47 L1394.14 681.47 L1393.58 681.47 L1393.03 681.47 L1392.47 681.47 L1391.91 681.47 L1391.35 681.47 L1390.79 681.47 L1390.23 681.47 L1389.67 681.47 L1389.11 681.47 L1388.55 681.47 L1387.99 681.47 L1387.43 681.47 L1386.87 681.47 L1386.31 681.47 L1385.76 681.47 L1385.2 681.47 L1384.64 681.47 L1384.08 681.47 L1383.52 681.47 L1382.96 681.47 L1382.4 681.47 L1381.84 681.47 L1381.28 681.47 L1380.72 681.47 L1380.16 681.47 L1379.6 681.47 L1379.04 681.47 L1378.49 681.47 L1377.93 681.47 L1377.37 681.47 L1376.81 681.47 L1376.25 681.47 L1375.69 681.47 L1375.13 681.47 L1374.57 681.47 L1374.01 681.47 L1373.45 681.47 L1372.89 681.47 L1372.33 681.47 L1371.77 681.47 L1371.21 681.47 L1370.66 681.47 L1370.1 681.47 L1369.54 681.47 L1368.98 681.47 L1368.42 681.47 L1367.86 681.47 L1367.3 681.47 L1366.74 681.47 L1366.18 681.47 L1365.62 681.47 L1365.06 681.47 L1364.5 681.47 L1363.94 681.47 L1363.39 681.47 L1362.83 681.47 L1362.27 681.47 L1361.71 681.47 L1361.15 681.47 L1360.59 681.47 L1360.03 681.47 L1359.47 681.47 L1358.91 681.47 L1358.35 681.47 L1357.79 681.47 L1357.23 681.47 L1356.67 681.47 L1356.12 681.47 L1355.56 681.47 L1355 681.47 L1354.44 681.47 L1353.88 681.47 L1353.32 681.47 L1352.76 681.47 L1352.2 681.47 L1351.64 681.47 L1351.08 681.47 L1350.52 681.47 L1349.96 681.47 L1349.4 681.47 L1348.84 681.47 L1348.29 681.47 L1347.73 681.47 L1347.17 681.47 L1346.61 681.47 L1346.05 681.47 L1345.49 681.47 L1344.93 681.47 L1344.37 681.47 L1343.81 681.47 L1343.25 681.47 L1342.69 681.47 L1342.13 681.47 L1341.57 681.47 L1341.02 681.47 L1340.46 681.47 L1339.9 681.47 L1339.34 681.47 L1338.78 681.47 L1338.22 681.47 L1337.66 681.47 L1337.1 681.47 L1336.54 681.47 L1335.98 681.47 L1335.42 681.47 L1334.86 681.47 L1334.3 681.47 L1333.75 681.47 L1333.19 681.47 L1332.63 681.47 L1332.07 681.47 L1331.51 681.47 L1330.95 681.47 L1330.39 681.47 L1329.83 681.47 L1329.27 681.47 L1328.71 681.47 L1328.15 681.47 L1327.59 681.47 L1327.03 681.47 L1326.47 681.47 L1325.92 681.47 L1325.36 681.47 L1324.8 681.47 L1324.24 681.47 L1323.68 681.47 L1323.12 681.47 L1322.56 681.47 L1322 681.47 L1321.44 681.47 L1320.88 681.47 L1320.32 681.47 L1319.76 681.47 L1319.2 681.47 L1318.65 681.47 L1318.09 681.47 L1317.53 681.47 L1316.97 681.47 L1316.41 681.47 L1315.85 681.47 L1315.29 681.47 L1314.73 681.47 L1314.17 681.47 L1313.61 681.47 L1313.05 681.47 L1312.49 681.47 L1311.93 681.47 L1311.38 681.47 L1310.82 681.47 L1310.26 681.47 L1309.7 681.47 L1309.14 681.47 L1308.58 681.47 L1308.02 681.47 L1307.46 681.47 L1306.9 681.47 L1306.34 681.47 L1305.78 681.47 L1305.22 681.47 L1304.66 681.47 L1304.1 681.47 L1303.55 681.47 L1302.99 681.47 L1302.43 681.47 L1301.87 681.47 L1301.31 681.47 L1300.75 681.47 L1300.19 681.47 L1299.63 681.47 L1299.07 681.47 L1298.51 681.47 L1297.95 681.47 L1297.39 681.47 L1296.83 681.47 L1296.28 681.47 L1295.72 681.47 L1295.16 681.47 L1294.6 681.47 L1294.04 681.47 L1293.48 681.47 L1292.92 681.47 L1292.36 681.47 L1291.8 681.47 L1291.24 681.47 L1290.68 681.47 L1290.12 681.47 L1289.56 681.47 L1289 681.47 L1288.45 681.47 L1287.89 681.47 L1287.33 681.47 L1286.77 681.47 L1286.21 681.47 L1285.65 681.47 L1285.09 681.47 L1284.53 681.47 L1283.97 681.47 L1283.41 681.47 L1282.85 681.47 L1282.29 681.47 L1281.73 681.47 L1281.18 681.47 L1280.62 681.47 L1280.06 681.47 L1279.5 681.47 L1278.94 681.47 L1278.38 681.47 L1277.82 681.47 L1277.26 681.47 L1276.7 681.47 L1276.14 681.47 L1275.58 681.47 L1275.02 681.47 L1274.46 681.47 L1273.91 681.47 L1273.35 681.47 L1272.79 681.47 L1272.23 681.47 L1271.67 681.47 L1271.11 681.47 L1270.55 681.47 L1269.99 681.47 L1269.43 681.47 L1268.87 681.47 L1268.31 681.47 L1267.75 681.47 L1267.19 681.47 L1266.63 681.47 L1266.08 681.47 L1265.52 681.47 L1264.96 681.47 L1264.4 681.47 L1263.84 681.47 L1263.28 681.47 L1262.72 681.47 L1262.16 681.47 L1261.6 681.47 L1261.04 681.47 L1260.48 681.47 L1259.92 681.47 L1259.36 681.47 L1258.81 681.47 L1258.25 681.47 L1257.69 681.47 L1257.13 681.47 L1256.57 681.47 L1256.01 681.47 L1255.45 681.47 L1254.89 681.47 L1254.33 681.47 L1253.77 681.47 L1253.21 681.47 L1252.65 681.47 L1252.09 681.47 L1251.54 681.47 L1250.98 681.47 L1250.42 681.47 L1249.86 681.47 L1249.3 681.47 L1248.74 681.47 L1248.18 681.47 L1247.62 681.47 L1247.06 681.47 L1246.5 681.47 L1245.94 681.47 L1245.38 681.47 L1244.82 681.47 L1244.26 681.47 L1243.71 681.47 L1243.15 681.47 L1242.59 681.47 L1242.03 681.47 L1241.47 681.47 L1240.91 681.47 L1240.35 681.47 L1239.79 681.47 L1239.23 681.47 L1238.67 681.47 L1238.11 681.47 L1237.55 681.47 L1236.99 681.47 L1236.44 681.47 L1235.88 681.47 L1235.32 681.47 L1234.76 681.47 L1234.2 681.47 L1233.64 681.47 L1233.08 681.47 L1232.52 681.47 L1231.96 681.47 L1231.4 681.47 L1230.84 681.47 L1230.28 681.47 L1229.72 681.47 L1229.17 681.47 L1228.61 681.47 L1228.05 681.47 L1227.49 681.47 L1226.93 681.47 L1226.37 681.47 L1225.81 681.47 L1225.25 681.47 L1224.69 681.47 L1224.13 681.47 L1223.57 681.47 L1223.01 681.47 L1222.45 681.47 L1221.89 681.47 L1221.34 681.47 L1220.78 681.47 L1220.22 681.47 L1219.66 681.47 L1219.1 681.47 L1218.54 681.47 L1217.98 681.47 L1217.42 681.47 L1216.86 681.47 L1216.3 681.47 L1215.74 681.47 L1215.18 681.47 L1214.62 681.47 L1214.07 681.47 L1213.51 681.47 L1212.95 681.47 L1212.39 681.47 L1211.83 681.47 L1211.27 681.47 L1210.71 681.47 L1210.15 681.47 L1209.59 681.47 L1209.03 681.47 L1208.47 681.47 L1207.91 681.47 L1207.35 681.47 L1206.8 681.47 L1206.24 681.47 L1205.68 681.47 L1205.12 681.47 L1204.56 681.47 L1204 681.47 L1203.44 681.47 L1202.88 681.47 L1202.32 681.47 L1201.76 681.47 L1201.2 681.47 L1200.64 681.47 L1200.08 681.47 L1199.52 681.47 L1198.97 681.47 L1198.41 681.47 L1197.85 681.47 L1197.29 681.47 L1196.73 681.47 L1196.17 681.47 L1195.61 681.47 L1195.05 681.47 L1194.49 681.47 L1193.93 681.47 L1193.37 681.47 L1192.81 681.47 L1192.25 681.47 L1191.7 681.47 L1191.14 681.47 L1190.58 681.47 L1190.02 681.47 L1189.46 681.47 L1188.9 681.47 L1188.34 681.47 L1187.78 681.47 L1187.22 681.47 L1186.66 681.47 L1186.1 681.47 L1185.54 681.47 L1184.98 681.47 L1184.43 681.47 L1183.87 681.47 L1183.31 681.47 L1182.75 681.47 L1182.19 681.47 L1181.63 681.47 L1181.07 681.47 L1180.51 681.47 L1179.95 681.47 L1179.39 681.47 L1178.83 681.47 L1178.27 681.47 L1177.71 681.47 L1177.15 681.47 L1176.6 681.47 L1176.04 681.47 L1175.48 681.47 L1174.92 681.47 L1174.36 681.47 L1173.8 681.47 L1173.24 681.47 L1172.68 681.47 L1172.12 681.47 L1171.56 681.47 L1171 681.47 L1170.44 681.47 L1169.88 681.47 L1169.33 681.47 L1168.77 681.47 L1168.21 681.47 L1167.65 681.47 L1167.09 681.47 L1166.53 681.47 L1165.97 681.47 L1165.41 681.47 L1164.85 681.47 L1164.29 681.47 L1163.73 681.47 L1163.17 681.47 L1162.61 681.47 L1162.05 681.47 L1161.5 681.47 L1160.94 681.47 L1160.38 681.47 L1159.82 681.47 L1159.26 681.47 L1158.7 681.47 L1158.14 681.47 L1157.58 681.47 L1157.02 681.47 L1156.46 681.47 L1155.9 681.47 L1155.34 681.47 L1154.78 681.47 L1154.23 681.47 L1153.67 681.47 L1153.11 681.47 L1152.55 681.47 L1151.99 681.47 L1151.43 681.47 L1150.87 681.47 L1150.31 681.47 L1149.75 681.47 L1149.19 681.47 L1148.63 681.47 L1148.07 681.47 L1147.51 681.47 L1146.96 681.47 L1146.4 681.47 L1145.84 681.47 L1145.28 681.47 L1144.72 681.47 L1144.16 681.47 L1143.6 681.47 L1143.04 681.47 L1142.48 681.47 L1141.92 681.47 L1141.36 681.47 L1140.8 681.47 L1140.24 681.47 L1139.68 681.47 L1139.13 681.47 L1138.57 681.47 L1138.01 681.47 L1137.45 681.47 L1136.89 681.47 L1136.33 681.47 L1135.77 681.47 L1135.21 681.47 L1134.65 681.47 L1134.09 681.47 L1133.53 681.47 L1132.97 681.47 L1132.41 681.47 L1131.86 681.47 L1131.3 681.47 L1130.74 681.47 L1130.18 681.47 L1129.62 681.47 L1129.06 681.47 L1128.5 681.47 L1127.94 681.47 L1127.38 681.47 L1126.82 681.47 L1126.26 681.47 L1125.7 681.47 L1125.14 681.47 L1124.59 681.47 L1124.03 681.47 L1123.47 681.47 L1122.91 681.47 L1122.35 681.47 L1121.79 681.47 L1121.23 681.47 L1120.67 681.47 L1120.11 681.47 L1119.55 681.47 L1118.99 681.47 L1118.43 681.47 L1117.87 681.47 L1117.31 681.47 L1116.76 681.47 L1116.2 681.47 L1115.64 681.47 L1115.08 681.47 L1114.52 681.47 L1113.96 681.47 L1113.4 681.47 L1112.84 681.47 L1112.28 681.47 L1111.72 681.47 L1111.16 681.47 L1110.6 681.47 L1110.04 681.47 L1109.49 681.47 L1108.93 681.47 L1108.37 681.47 L1107.81 681.47 L1107.25 681.47 L1106.69 681.47 L1106.13 681.47 L1105.57 681.47 L1105.01 681.47 L1104.45 681.47 L1103.89 681.47 L1103.33 681.47 L1102.77 681.47 L1102.22 681.47 L1101.66 681.47 L1101.1 681.47 L1100.54 681.47 L1099.98 681.47 L1099.42 681.47 L1098.86 681.47 L1098.3 681.47 L1097.74 681.47 L1097.18 681.47 L1096.62 681.47 L1096.06 681.47 L1095.5 681.47 L1094.94 681.47 L1094.39 681.47 L1093.83 681.47 L1093.27 681.47 L1092.71 681.47 L1092.15 681.47 L1091.59 681.47 L1091.03 681.47 L1090.47 681.47 L1089.91 681.47 L1089.35 681.47 L1088.79 681.47 L1088.23 681.47 L1087.67 681.47 L1087.12 681.47 L1086.56 681.47 L1086 681.47 L1085.44 681.47 L1084.88 681.47 L1084.32 681.47 L1083.76 681.47 L1083.2 681.47 L1082.64 681.47 L1082.08 681.47 L1081.52 681.47 L1080.96 681.47 L1080.4 681.47 L1079.85 681.47 L1079.29 681.47 L1078.73 681.47 L1078.17 681.47 L1077.61 681.47 L1077.05 681.47 L1076.49 681.47 L1075.93 681.47 L1075.37 681.47 L1074.81 681.47 L1074.25 681.47 L1073.69 681.47 L1073.13 681.47 L1072.57 681.47 L1072.02 681.47 L1071.46 681.47 L1070.9 681.47 L1070.34 681.47 L1069.78 681.47 L1069.22 681.47 L1068.66 681.47 L1068.1 681.47 L1067.54 681.47 L1066.98 681.47 L1066.42 681.47 L1065.86 681.47 L1065.3 681.47 L1064.75 681.47 L1064.19 681.47 L1063.63 681.47 L1063.07 681.47 L1062.51 681.47 L1061.95 681.47 L1061.39 681.47 L1060.83 681.47 L1060.27 681.47 L1059.71 681.47 L1059.15 681.47 L1058.59 681.47 L1058.03 681.47 L1057.48 681.47 L1056.92 681.47 L1056.36 681.47 L1055.8 681.47 L1055.24 681.47 L1054.68 681.47 L1054.12 681.47 L1053.56 681.47 L1053 681.47 L1052.44 681.47 L1051.88 681.47 L1051.32 681.47 L1050.76 681.47 L1050.2 681.47 L1049.65 681.47 L1049.09 681.47 L1048.53 681.47 L1047.97 681.47 L1047.41 681.47 L1046.85 681.47 L1046.29 681.47 L1045.73 681.47 L1045.17 681.47 L1044.61 681.47 L1044.05 681.47 L1043.49 681.47 L1042.93 681.47 L1042.38 681.47 L1041.82 681.47 L1041.26 681.47 L1040.7 681.47 L1040.14 681.47 L1039.58 681.47 L1039.02 681.47 L1038.46 681.47 L1037.9 681.47 L1037.34 681.47 L1036.78 681.47 L1036.22 681.47 L1035.66 681.47 L1035.1 681.47 L1034.55 681.47 L1033.99 681.47 L1033.43 681.47 L1032.87 681.47 L1032.31 681.47 L1031.75 681.47 L1031.19 681.47 L1030.63 681.47 L1030.07 681.47 L1029.51 681.47 L1028.95 681.47 L1028.39 681.47 L1027.83 681.47 L1027.28 681.47 L1026.72 681.47 L1026.16 681.47 L1025.6 681.47 L1025.04 681.47 L1024.48 681.47 L1023.92 681.47 L1023.36 681.47 L1022.8 681.47 L1022.24 681.47 L1021.68 681.47 L1021.12 681.47 L1020.56 681.47 L1020.01 681.47 L1019.45 681.47 L1018.89 681.47 L1018.33 681.47 L1017.77 681.47 L1017.21 681.47 L1016.65 681.47 L1016.09 681.47 L1015.53 681.47 L1014.97 681.47 L1014.41 681.47 L1013.85 681.47 L1013.29 681.47 L1012.73 681.47 L1012.18 681.47 L1011.62 681.47 L1011.06 681.47 L1010.5 681.47 L1009.94 681.47 L1009.38 681.47 L1008.82 681.47 L1008.26 681.47 L1007.7 681.47 L1007.14 681.47 L1006.58 681.47 L1006.02 681.47 L1005.46 681.47 L1004.91 681.47 L1004.35 681.47 L1003.79 681.47 L1003.23 681.47 L1002.67 681.47 L1002.11 681.47 L1001.55 681.47 L1000.99 681.47 L1000.43 681.47 L999.872 681.47 L999.313 681.47 L998.754 681.47 L998.194 681.47 L997.635 681.47 L997.076 681.47 L996.517 681.47 L995.957 681.47 L995.398 681.47 L994.839 681.47 L994.28 681.47 L993.72 681.47 L993.161 681.47 L992.602 681.47 L992.043 681.47 L991.483 681.47 L990.924 681.47 L990.365 681.47 L989.806 681.47 L989.246 681.47 L988.687 681.47 L988.128 681.47 L987.569 681.47 L987.009 681.47 L986.45 681.47 L985.891 681.47 L985.332 681.47 L984.772 681.47 L984.213 681.47 L983.654 681.47 L983.095 681.47 L982.535 681.47 L981.976 681.47 L981.417 681.47 L980.858 681.47 L980.298 681.47 L979.739 681.47 L979.18 681.47 L978.621 681.47 L978.061 681.47 L977.502 681.47 L976.943 681.47 L976.384 681.47 L975.824 681.47 L975.265 681.47 L974.706 681.47 L974.147 681.47 L973.587 681.47 L973.028 681.47 L972.469 681.47 L971.91 681.47 L971.35 681.47 L970.791 681.47 L970.232 681.47 L969.673 681.47 L969.113 681.47 L968.554 681.47 L967.995 681.47 L967.436 681.47 L966.876 681.47 L966.317 681.47 L965.758 681.47 L965.199 681.47 L964.639 681.47 L964.08 681.47 L963.521 681.47 L962.962 681.47 L962.402 681.47 L961.843 681.47 L961.284 681.47 L960.725 681.47 L960.165 681.47 L959.606 681.47 L959.047 681.47 L958.488 681.47 L957.928 681.47 L957.369 681.47 L956.81 681.47 L956.251 681.47 L955.691 681.47 L955.132 681.47 L954.573 681.47 L954.014 681.47 L953.454 681.47 L952.895 681.47 L952.336 681.47 L951.777 681.47 L951.217 681.47 L950.658 681.47 L950.099 681.47 L949.54 681.47 L948.98 681.47 L948.421 681.47 L947.862 681.47 L947.303 681.47 L946.743 681.47 L946.184 681.47 L945.625 681.47 L945.066 681.47 L944.506 681.47 L943.947 681.47 L943.388 681.47 L942.829 681.47 L942.269 681.47 L941.71 681.47 L941.151 681.47 L940.592 681.47 L940.032 681.47 L939.473 681.47 L938.914 681.47 L938.355 681.47 L937.795 681.47 L937.236 681.47 L936.677 681.47 L936.118 681.47 L935.558 681.47 L934.999 681.47 L934.44 681.47 L933.881 681.47 L933.321 681.47 L932.762 681.47 L932.203 681.47 L931.644 681.47 L931.084 681.47 L930.525 681.47 L929.966 681.47 L929.406 681.47 L928.847 681.47 L928.288 681.47 L927.729 681.47 L927.169 681.47 L926.61 681.47 L926.051 681.47 L925.492 681.47 L924.932 681.47 L924.373 681.47 L923.814 681.47 L923.255 681.47 L922.695 681.47 L922.136 681.47 L921.577 681.47 L921.018 681.47 L920.458 681.47 L919.899 681.47 L919.34 681.47 L918.781 681.47 L918.221 681.47 L917.662 681.47 L917.103 681.47 L916.544 681.47 L915.984 681.47 L915.425 681.47 L914.866 681.47 L914.307 681.47 L913.747 681.47 L913.188 681.47 L912.629 681.47 L912.07 681.47 L911.51 681.47 L910.951 681.47 L910.392 681.47 L909.833 681.47 L909.273 681.47 L908.714 681.47 L908.155 681.47 L907.596 681.47 L907.036 681.47 L906.477 681.47 L905.918 681.47 L905.359 681.47 L904.799 681.47 L904.24 681.47 L903.681 681.47 L903.122 681.47 L902.562 681.47 L902.003 681.47 L901.444 681.47 L900.885 681.47 L900.325 681.47 L899.766 681.47 L899.207 681.47 L898.648 681.47 L898.088 681.47 L897.529 681.47 L896.97 681.47 L896.411 681.47 L895.851 681.47 L895.292 681.47 L894.733 681.47 L894.174 681.47 L893.614 681.47 L893.055 681.47 L892.496 681.47 L891.937 681.47 L891.377 681.47 L890.818 681.47 L890.259 681.47 L889.7 681.47 L889.14 681.47 L888.581 681.47 L888.022 681.47 L887.463 681.47 L886.903 681.47 L886.344 681.47 L885.785 681.47 L885.226 681.47 L884.666 681.47 L884.107 681.47 L883.548 681.47 L882.989 681.47 L882.429 681.47 L881.87 681.47 L881.311 681.47 L880.752 681.47 L880.192 681.47 L879.633 681.47 L879.074 681.47 L878.515 681.47 L877.955 681.47 L877.396 681.47 L876.837 681.47 L876.278 681.47 L875.718 681.47 L875.159 681.47 L874.6 681.47 L874.041 681.47 L873.481 681.47 L872.922 681.47 L872.363 681.47 L871.804 681.47 L871.244 681.47 L870.685 681.47 L870.126 681.47 L869.567 681.47 L869.007 681.47 L868.448 681.47 L867.889 681.47 L867.33 681.47 L866.77 681.47 L866.211 681.47 L865.652 681.47 L865.093 681.47 L864.533 681.47 L863.974 681.47 L863.415 681.47 L862.856 681.47 L862.296 681.47 L861.737 681.47 L861.178 681.47 L860.619 681.47 L860.059 681.47 L859.5 681.47 L858.941 681.47 L858.382 681.47 L857.822 681.47 L857.263 681.47 L856.704 681.47 L856.145 681.47 L855.585 681.47 L855.026 681.47 L854.467 681.47 L853.908 681.47 L853.348 681.47 L852.789 681.47 L852.23 681.47 L851.671 681.47 L851.111 681.47 L850.552 681.47 L849.993 681.47 L849.434 681.47 L848.874 681.47 L848.315 681.47 L847.756 681.47 L847.197 681.47 L846.637 681.47 L846.078 681.47 L845.519 681.47 L844.96 681.47 L844.4 681.47 L843.841 681.47 L843.282 681.47 L842.723 681.47 L842.163 681.47 L841.604 681.47 L841.045 681.47 L840.486 681.47 L839.926 681.47 L839.367 681.47 L838.808 681.47 L838.249 681.47 L837.689 681.47 L837.13 681.47 L836.571 681.47 L836.012 681.47 L835.452 681.47 L834.893 681.47 L834.334 681.47 L833.775 681.47 L833.215 681.47 L832.656 681.47 L832.097 681.47 L831.538 681.47 L830.978 681.47 L830.419 681.47 L829.86 681.47 L829.301 681.47 L828.741 681.47 L828.182 681.47 L827.623 681.47 L827.064 681.47 L826.504 681.47 L825.945 681.47 L825.386 681.47 L824.827 681.47 L824.267 681.47 L823.708 681.47 L823.149 681.47 L822.59 681.47 L822.03 681.47 L821.471 681.47 L820.912 681.47 L820.353 681.47 L819.793 681.47 L819.234 681.47 L818.675 681.47 L818.116 681.47 L817.556 681.47 L816.997 681.47 L816.438 681.47 L815.879 681.47 L815.319 681.47 L814.76 681.47 L814.201 681.47 L813.642 681.47 L813.082 681.47 L812.523 681.47 L811.964 681.47 L811.405 681.47 L810.845 681.47 L810.286 681.47 L809.727 681.47 L809.168 681.47 L808.608 681.47 L808.049 681.47 L807.49 681.47 L806.931 681.47 L806.371 681.47 L805.812 681.47 L805.253 681.47 L804.693 681.47 L804.134 681.47 L803.575 681.47 L803.016 681.47 L802.456 681.47 L801.897 681.47 L801.338 681.47 L800.779 681.47 L800.219 681.47 L799.66 681.47 L799.101 681.47 L798.542 681.47 L797.982 681.47 L797.423 681.47 L796.864 681.47 L796.305 681.47 L795.745 681.47 L795.186 681.47 L794.627 681.47 L794.068 681.47 L793.508 681.47 L792.949 681.47 L792.39 681.47 L791.831 681.47 L791.271 681.47 L790.712 681.47 L790.153 681.47 L789.594 681.47 L789.034 681.47 L788.475 681.47 L787.916 681.47 L787.357 681.47 L786.797 681.47 L786.238 681.47 L785.679 681.47 L785.12 681.47 L784.56 681.47 L784.001 681.47 L783.442 681.47 L782.883 681.47 L782.323 681.47 L781.764 681.47 L781.205 681.47 L780.646 681.47 L780.086 681.47 L779.527 681.47 L778.968 681.47 L778.409 681.47 L777.849 681.47 L777.29 681.47 L776.731 681.47 L776.172 681.47 L775.612 681.47 L775.053 681.47 L774.494 681.47 L773.935 681.47 L773.375 681.47 L772.816 681.47 L772.257 681.47 L771.698 681.47 L771.138 681.47 L770.579 681.47 L770.02 681.47 L769.461 681.47 L768.901 681.47 L768.342 681.47 L767.783 681.47 L767.224 681.47 L766.664 681.47 L766.105 681.47 L765.546 681.47 L764.987 681.47 L764.427 681.47 L763.868 681.47 L763.309 681.47 L762.75 681.47 L762.19 681.47 L761.631 681.47 L761.072 681.47 L760.513 681.47 L759.953 681.47 L759.394 681.47 L758.835 681.47 L758.276 681.47 L757.716 681.47 L757.157 681.47 L756.598 681.47 L756.039 681.47 L755.479 681.47 L754.92 681.47 L754.361 681.47 L753.802 681.47 L753.242 681.47 L752.683 681.47 L752.124 681.47 L751.565 681.47 L751.005 681.47 L750.446 681.47 L749.887 681.47 L749.328 681.47 L748.768 681.47 L748.209 681.47 L747.65 681.47 L747.091 681.47 L746.531 681.47 L745.972 681.47 L745.413 681.47 L744.854 681.47 L744.294 681.47 L743.735 681.47 L743.176 681.47 L742.617 681.47 L742.057 681.47 L741.498 681.47 L740.939 681.47 L740.38 681.47 L739.82 681.47 L739.261 681.47 L738.702 681.47 L738.143 681.47 L737.583 681.47 L737.024 681.47 L736.465 681.47 L735.906 681.47 L735.346 681.47 L734.787 681.47 L734.228 681.47 L733.669 681.47 L733.109 681.47 L732.55 681.47 L731.991 681.47 L731.432 681.47 L730.872 681.47 L730.313 681.47 L729.754 681.47 L729.195 681.47 L728.635 681.47 L728.076 681.47 L727.517 681.47 L726.958 681.47 L726.398 681.47 L725.839 681.47 L725.28 681.47 L724.721 681.47 L724.161 681.47 L723.602 681.47 L723.043 681.47 L722.484 681.47 L721.924 681.47 L721.365 681.47 L720.806 681.47 L720.247 681.47  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip303)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,682.854 720.806,682.854 721.365,682.854 721.924,682.854 722.484,682.854 723.043,682.854 723.602,682.854 724.161,682.854 724.721,682.854 725.28,682.854 725.839,682.854 726.398,682.854 726.958,682.854 727.517,682.854 728.076,682.854 728.635,682.854 729.195,682.854 729.754,682.854 730.313,682.854 730.872,682.854 731.432,682.854 731.991,682.854 732.55,682.854 733.109,682.854 733.669,682.854 734.228,682.854 734.787,682.854 735.346,682.854 735.906,682.854 736.465,682.854 737.024,682.854 737.583,682.854 738.143,682.854 738.702,682.854 739.261,682.854 739.82,682.854 740.38,682.854 740.939,682.854 741.498,682.854 742.057,682.854 742.617,682.854 743.176,682.854 743.735,682.854 744.294,682.854 744.854,682.854 745.413,682.854 745.972,682.854 746.531,682.854 747.091,682.854 747.65,682.854 748.209,682.854 748.768,682.854 749.328,682.854 749.887,682.854 750.446,682.854 751.005,682.854 751.565,682.854 752.124,682.854 752.683,682.854 753.242,682.854 753.802,682.854 754.361,682.854 754.92,682.854 755.479,682.854 756.039,682.854 756.598,682.854 757.157,682.854 757.716,682.854 758.276,682.854 758.835,682.854 759.394,682.854 759.953,682.854 760.513,682.854 761.072,682.854 761.631,682.854 762.19,682.854 762.75,682.854 763.309,682.854 763.868,682.854 764.427,682.854 764.987,682.854 765.546,682.854 766.105,682.854 766.664,682.854 767.224,682.854 767.783,682.854 768.342,682.854 768.901,682.854 769.461,682.854 770.02,682.854 770.579,682.854 771.138,682.854 771.698,682.854 772.257,682.854 772.816,682.854 773.375,682.854 773.935,682.854 774.494,682.854 775.053,682.854 775.612,682.854 776.172,682.854 776.731,682.854 777.29,682.854 777.849,682.854 778.409,682.854 778.968,682.854 779.527,682.854 780.086,682.854 780.646,682.854 781.205,682.854 781.764,682.854 782.323,682.854 782.883,682.854 783.442,682.854 784.001,682.854 784.56,682.854 785.12,682.854 785.679,682.854 786.238,682.854 786.797,682.854 787.357,682.854 787.916,682.854 788.475,682.854 789.034,682.854 789.594,682.854 790.153,682.854 790.712,682.854 791.271,682.854 791.831,682.854 792.39,682.854 792.949,682.854 793.508,682.854 794.068,682.854 794.627,682.854 795.186,682.854 795.745,682.854 796.305,682.854 796.864,682.854 797.423,682.854 797.982,682.854 798.542,682.854 799.101,682.854 799.66,682.854 800.219,682.854 800.779,682.854 801.338,682.854 801.897,682.854 802.456,682.854 803.016,682.854 803.575,682.854 804.134,682.854 804.693,682.854 805.253,682.854 805.812,682.854 806.371,682.854 806.931,682.854 807.49,682.854 808.049,682.854 808.608,682.854 809.168,682.854 809.727,682.854 810.286,682.854 810.845,682.854 811.405,682.854 811.964,682.854 812.523,682.854 813.082,682.854 813.642,682.854 814.201,682.854 814.76,682.854 815.319,682.854 815.879,682.854 816.438,682.854 816.997,682.854 817.556,682.854 818.116,682.854 818.675,682.854 819.234,682.854 819.793,682.854 820.353,682.854 820.912,682.854 821.471,682.854 822.03,682.854 822.59,682.854 823.149,682.854 823.708,682.854 824.267,682.854 824.827,682.854 825.386,682.854 825.945,682.854 826.504,682.854 827.064,682.854 827.623,682.854 828.182,682.854 828.741,682.854 829.301,682.854 829.86,682.854 830.419,682.854 830.978,682.854 831.538,682.854 832.097,682.854 832.656,682.854 833.215,682.854 833.775,682.854 834.334,682.854 834.893,682.854 835.452,682.854 836.012,682.854 836.571,682.854 837.13,682.854 837.689,682.854 838.249,682.854 838.808,682.854 839.367,682.854 839.926,682.854 840.486,682.854 841.045,682.854 841.604,682.854 842.163,682.854 842.723,682.854 843.282,682.854 843.841,682.854 844.4,682.854 844.96,682.854 845.519,682.854 846.078,682.854 846.637,682.854 847.197,682.854 847.756,682.854 848.315,682.854 848.874,682.854 849.434,682.854 849.993,682.854 850.552,682.854 851.111,682.854 851.671,682.854 852.23,682.854 852.789,682.854 853.348,682.854 853.908,682.854 854.467,682.854 855.026,682.854 855.585,682.854 856.145,682.854 856.704,682.854 857.263,682.854 857.822,682.854 858.382,682.854 858.941,682.854 859.5,682.854 860.059,682.854 860.619,682.854 861.178,682.854 861.737,682.854 862.296,682.854 862.856,682.854 863.415,682.854 863.974,682.854 864.533,682.854 865.093,682.854 865.652,682.854 866.211,682.854 866.77,682.854 867.33,682.854 867.889,682.854 868.448,682.854 869.007,682.854 869.567,682.854 870.126,682.854 870.685,682.854 871.244,682.854 871.804,682.854 872.363,682.854 872.922,682.854 873.481,682.854 874.041,682.854 874.6,682.854 875.159,682.854 875.718,682.854 876.278,682.854 876.837,682.854 877.396,682.854 877.955,682.854 878.515,682.854 879.074,682.854 879.633,682.854 880.192,682.854 880.752,682.854 881.311,682.854 881.87,682.854 882.429,682.854 882.989,682.854 883.548,682.854 884.107,682.854 884.666,682.854 885.226,682.854 885.785,682.854 886.344,682.854 886.903,682.854 887.463,682.854 888.022,682.854 888.581,682.854 889.14,682.854 889.7,682.854 890.259,682.854 890.818,682.854 891.377,682.854 891.937,682.854 892.496,682.854 893.055,682.854 893.614,682.854 894.174,682.854 894.733,682.854 895.292,682.854 895.851,682.854 896.411,682.854 896.97,682.854 897.529,682.854 898.088,682.854 898.648,682.854 899.207,682.854 899.766,682.854 900.325,682.854 900.885,682.854 901.444,682.854 902.003,682.854 902.562,682.854 903.122,682.854 903.681,682.854 904.24,682.854 904.799,682.854 905.359,682.854 905.918,682.854 906.477,682.854 907.036,682.854 907.596,682.854 908.155,682.854 908.714,682.854 909.273,682.854 909.833,682.854 910.392,682.854 910.951,682.854 911.51,682.854 912.07,682.854 912.629,682.854 913.188,682.854 913.747,682.854 914.307,682.854 914.866,682.854 915.425,682.854 915.984,682.854 916.544,682.854 917.103,682.854 917.662,682.854 918.221,682.854 918.781,682.854 919.34,682.854 919.899,682.854 920.458,682.854 921.018,682.854 921.577,682.854 922.136,682.854 922.695,682.854 923.255,682.854 923.814,682.854 924.373,682.854 924.932,682.854 925.492,682.854 926.051,682.854 926.61,682.854 927.169,682.854 927.729,682.854 928.288,682.854 928.847,682.854 929.406,682.854 929.966,682.854 930.525,682.854 931.084,682.854 931.644,682.854 932.203,682.854 932.762,682.854 933.321,682.854 933.881,682.854 934.44,682.854 934.999,682.854 935.558,682.854 936.118,682.854 936.677,682.854 937.236,682.854 937.795,682.854 938.355,682.854 938.914,682.854 939.473,682.854 940.032,682.854 940.592,682.854 941.151,682.854 941.71,682.854 942.269,682.854 942.829,682.854 943.388,682.854 943.947,682.854 944.506,682.854 945.066,682.854 945.625,682.854 946.184,682.854 946.743,682.854 947.303,682.854 947.862,682.854 948.421,682.854 948.98,682.854 949.54,682.854 950.099,682.854 950.658,682.854 951.217,682.854 951.777,682.854 952.336,682.854 952.895,682.854 953.454,682.854 954.014,682.854 954.573,682.854 955.132,682.854 955.691,682.854 956.251,682.854 956.81,682.854 957.369,682.854 957.928,682.854 958.488,682.854 959.047,682.854 959.606,682.854 960.165,682.854 960.725,682.854 961.284,682.854 961.843,682.854 962.402,682.854 962.962,682.854 963.521,682.854 964.08,682.854 964.639,682.854 965.199,682.854 965.758,682.854 966.317,682.854 966.876,682.854 967.436,682.854 967.995,682.854 968.554,682.854 969.113,682.854 969.673,682.854 970.232,682.854 970.791,682.854 971.35,682.854 971.91,682.854 972.469,682.854 973.028,682.854 973.587,682.854 974.147,682.854 974.706,682.854 975.265,682.854 975.824,682.854 976.384,682.854 976.943,682.854 977.502,682.854 978.061,682.854 978.621,682.854 979.18,682.854 979.739,682.854 980.298,682.854 980.858,682.854 981.417,682.854 981.976,682.854 982.535,682.854 983.095,682.854 983.654,682.854 984.213,682.854 984.772,682.854 985.332,682.854 985.891,682.854 986.45,682.854 987.009,682.854 987.569,682.854 988.128,682.854 988.687,682.854 989.246,682.854 989.806,682.854 990.365,682.854 990.924,682.854 991.483,682.854 992.043,682.854 992.602,682.854 993.161,682.854 993.72,682.854 994.28,682.854 994.839,682.854 995.398,682.854 995.957,682.854 996.517,682.854 997.076,682.854 997.635,682.854 998.194,682.854 998.754,682.854 999.313,682.854 999.872,682.854 1000.43,682.854 1000.99,682.854 1001.55,682.854 1002.11,682.854 1002.67,682.854 1003.23,682.854 1003.79,682.854 1004.35,682.854 1004.91,682.854 1005.46,682.854 1006.02,682.854 1006.58,682.854 1007.14,682.854 1007.7,682.854 1008.26,682.854 1008.82,682.854 1009.38,682.854 1009.94,682.854 1010.5,682.854 1011.06,682.854 1011.62,682.854 1012.18,682.854 1012.73,682.854 1013.29,682.854 1013.85,682.854 1014.41,682.854 1014.97,682.854 1015.53,682.854 1016.09,682.854 1016.65,682.854 1017.21,682.854 1017.77,682.854 1018.33,682.854 1018.89,682.854 1019.45,682.854 1020.01,682.854 1020.56,682.854 1021.12,682.854 1021.68,682.854 1022.24,682.854 1022.8,682.854 1023.36,682.854 1023.92,682.854 1024.48,682.854 1025.04,682.854 1025.6,682.854 1026.16,682.854 1026.72,682.854 1027.28,682.854 1027.83,682.854 1028.39,682.854 1028.95,682.854 1029.51,682.854 1030.07,682.854 1030.63,682.854 1031.19,682.854 1031.75,682.854 1032.31,682.854 1032.87,682.854 1033.43,682.854 1033.99,682.854 1034.55,682.854 1035.1,682.854 1035.66,682.854 1036.22,682.854 1036.78,682.854 1037.34,682.854 1037.9,682.854 1038.46,682.854 1039.02,682.854 1039.58,682.854 1040.14,682.854 1040.7,682.854 1041.26,682.854 1041.82,682.854 1042.38,682.854 1042.93,682.854 1043.49,682.854 1044.05,682.854 1044.61,682.854 1045.17,682.854 1045.73,682.854 1046.29,682.854 1046.85,682.854 1047.41,682.854 1047.97,682.854 1048.53,682.854 1049.09,682.854 1049.65,682.854 1050.2,682.854 1050.76,682.854 1051.32,682.854 1051.88,682.854 1052.44,682.854 1053,682.854 1053.56,682.854 1054.12,682.854 1054.68,682.854 1055.24,682.854 1055.8,682.854 1056.36,682.854 1056.92,682.854 1057.48,682.854 1058.03,682.854 1058.59,682.854 1059.15,682.854 1059.71,682.854 1060.27,682.854 1060.83,682.854 1061.39,682.854 1061.95,682.854 1062.51,682.854 1063.07,682.854 1063.63,682.854 1064.19,682.854 1064.75,682.854 1065.3,682.854 1065.86,682.854 1066.42,682.854 1066.98,682.854 1067.54,682.854 1068.1,682.854 1068.66,682.854 1069.22,682.854 1069.78,682.854 1070.34,682.854 1070.9,682.854 1071.46,682.854 1072.02,682.854 1072.57,682.854 1073.13,682.854 1073.69,682.854 1074.25,682.854 1074.81,682.854 1075.37,682.854 1075.93,682.854 1076.49,682.854 1077.05,682.854 1077.61,682.854 1078.17,682.854 1078.73,682.854 1079.29,682.854 1079.85,682.854 1080.4,682.854 1080.96,682.854 1081.52,682.854 1082.08,682.854 1082.64,682.854 1083.2,682.854 1083.76,682.854 1084.32,682.854 1084.88,682.854 1085.44,682.854 1086,682.854 1086.56,682.854 1087.12,682.854 1087.67,682.854 1088.23,682.854 1088.79,682.854 1089.35,682.854 1089.91,682.854 1090.47,682.854 1091.03,682.854 1091.59,682.854 1092.15,682.854 1092.71,682.854 1093.27,682.854 1093.83,682.854 1094.39,682.854 1094.94,682.854 1095.5,682.854 1096.06,682.854 1096.62,682.854 1097.18,682.854 1097.74,682.854 1098.3,682.854 1098.86,682.854 1099.42,682.854 1099.98,682.854 1100.54,682.854 1101.1,682.854 1101.66,682.854 1102.22,682.854 1102.77,682.854 1103.33,682.854 1103.89,682.854 1104.45,682.854 1105.01,682.854 1105.57,682.854 1106.13,682.854 1106.69,682.854 1107.25,682.854 1107.81,682.854 1108.37,682.854 1108.93,682.854 1109.49,682.854 1110.04,682.854 1110.6,682.854 1111.16,682.854 1111.72,682.854 1112.28,682.854 1112.84,682.854 1113.4,682.854 1113.96,682.854 1114.52,682.854 1115.08,682.854 1115.64,682.854 1116.2,682.854 1116.76,682.854 1117.31,682.854 1117.87,682.854 1118.43,682.854 1118.99,682.854 1119.55,682.854 1120.11,682.854 1120.67,682.854 1121.23,682.854 1121.79,682.854 1122.35,682.854 1122.91,682.854 1123.47,682.854 1124.03,682.854 1124.59,682.854 1125.14,682.854 1125.7,682.854 1126.26,682.854 1126.82,682.854 1127.38,682.854 1127.94,682.854 1128.5,682.854 1129.06,682.854 1129.62,682.854 1130.18,682.854 1130.74,682.854 1131.3,682.854 1131.86,682.854 1132.41,682.854 1132.97,682.854 1133.53,682.854 1134.09,682.854 1134.65,682.854 1135.21,682.854 1135.77,682.854 1136.33,682.854 1136.89,682.854 1137.45,682.854 1138.01,682.854 1138.57,682.854 1139.13,682.854 1139.68,682.854 1140.24,682.854 1140.8,682.854 1141.36,682.854 1141.92,682.854 1142.48,682.854 1143.04,682.854 1143.6,682.854 1144.16,682.854 1144.72,682.854 1145.28,682.854 1145.84,682.854 1146.4,682.854 1146.96,682.854 1147.51,682.854 1148.07,682.854 1148.63,682.854 1149.19,682.854 1149.75,682.854 1150.31,682.854 1150.87,682.854 1151.43,682.854 1151.99,682.854 1152.55,682.854 1153.11,682.854 1153.67,682.854 1154.23,682.854 1154.78,682.854 1155.34,682.854 1155.9,682.854 1156.46,682.854 1157.02,682.854 1157.58,682.854 1158.14,682.854 1158.7,682.854 1159.26,682.854 1159.82,682.854 1160.38,682.854 1160.94,682.854 1161.5,682.854 1162.05,682.854 1162.61,682.854 1163.17,682.854 1163.73,682.854 1164.29,682.854 1164.85,682.854 1165.41,682.854 1165.97,682.854 1166.53,682.854 1167.09,682.854 1167.65,682.854 1168.21,682.854 1168.77,682.854 1169.33,682.854 1169.88,682.854 1170.44,682.854 1171,682.854 1171.56,682.854 1172.12,682.854 1172.68,682.854 1173.24,682.854 1173.8,682.854 1174.36,682.854 1174.92,682.854 1175.48,682.854 1176.04,682.854 1176.6,682.854 1177.15,682.854 1177.71,682.854 1178.27,682.854 1178.83,682.854 1179.39,682.854 1179.95,682.854 1180.51,682.854 1181.07,682.854 1181.63,682.854 1182.19,682.854 1182.75,682.854 1183.31,682.854 1183.87,682.854 1184.43,682.854 1184.98,682.854 1185.54,682.854 1186.1,682.854 1186.66,682.854 1187.22,682.854 1187.78,682.854 1188.34,682.854 1188.9,682.854 1189.46,682.854 1190.02,682.854 1190.58,682.854 1191.14,682.854 1191.7,682.854 1192.25,682.854 1192.81,682.854 1193.37,682.854 1193.93,682.854 1194.49,682.854 1195.05,682.854 1195.61,682.854 1196.17,682.854 1196.73,682.854 1197.29,682.854 1197.85,682.854 1198.41,682.854 1198.97,682.854 1199.52,682.854 1200.08,682.854 1200.64,682.854 1201.2,682.854 1201.76,682.854 1202.32,682.854 1202.88,682.854 1203.44,682.854 1204,682.854 1204.56,682.854 1205.12,682.854 1205.68,682.854 1206.24,682.854 1206.8,682.854 1207.35,682.854 1207.91,682.854 1208.47,682.854 1209.03,682.854 1209.59,682.854 1210.15,682.854 1210.71,682.854 1211.27,682.854 1211.83,682.854 1212.39,682.854 1212.95,682.854 1213.51,682.854 1214.07,682.854 1214.62,682.854 1215.18,682.854 1215.74,682.854 1216.3,682.854 1216.86,682.854 1217.42,682.854 1217.98,682.854 1218.54,682.854 1219.1,682.854 1219.66,682.854 1220.22,682.854 1220.78,682.854 1221.34,682.854 1221.89,682.854 1222.45,682.854 1223.01,682.854 1223.57,682.854 1224.13,682.854 1224.69,682.854 1225.25,682.854 1225.81,682.854 1226.37,682.854 1226.93,682.854 1227.49,682.854 1228.05,682.854 1228.61,682.854 1229.17,682.854 1229.72,682.854 1230.28,682.854 1230.84,682.854 1231.4,682.854 1231.96,682.854 1232.52,682.854 1233.08,682.854 1233.64,682.854 1234.2,682.854 1234.76,682.854 1235.32,682.854 1235.88,682.854 1236.44,682.854 1236.99,682.854 1237.55,682.854 1238.11,682.854 1238.67,682.854 1239.23,682.854 1239.79,682.854 1240.35,682.854 1240.91,682.854 1241.47,682.854 1242.03,682.854 1242.59,682.854 1243.15,682.854 1243.71,682.854 1244.26,682.854 1244.82,682.854 1245.38,682.854 1245.94,682.854 1246.5,682.854 1247.06,682.854 1247.62,682.854 1248.18,682.854 1248.74,682.854 1249.3,682.854 1249.86,682.854 1250.42,682.854 1250.98,682.854 1251.54,682.854 1252.09,682.854 1252.65,682.854 1253.21,682.854 1253.77,682.854 1254.33,682.854 1254.89,682.854 1255.45,682.854 1256.01,682.854 1256.57,682.854 1257.13,682.854 1257.69,682.854 1258.25,682.854 1258.81,682.854 1259.36,682.854 1259.92,682.854 1260.48,682.854 1261.04,682.854 1261.6,682.854 1262.16,682.854 1262.72,682.854 1263.28,682.854 1263.84,682.854 1264.4,682.854 1264.96,682.854 1265.52,682.854 1266.08,682.854 1266.63,682.854 1267.19,682.854 1267.75,682.854 1268.31,682.854 1268.87,682.854 1269.43,682.854 1269.99,682.854 1270.55,682.854 1271.11,682.854 1271.67,682.854 1272.23,682.854 1272.79,682.854 1273.35,682.854 1273.91,682.854 1274.46,682.854 1275.02,682.854 1275.58,682.854 1276.14,682.854 1276.7,682.854 1277.26,682.854 1277.82,682.854 1278.38,682.854 1278.94,682.854 1279.5,682.854 1280.06,682.854 1280.62,682.854 1281.18,682.854 1281.73,682.854 1282.29,682.854 1282.85,682.854 1283.41,682.854 1283.97,682.854 1284.53,682.854 1285.09,682.854 1285.65,682.854 1286.21,682.854 1286.77,682.854 1287.33,682.854 1287.89,682.854 1288.45,682.854 1289,682.854 1289.56,682.854 1290.12,682.854 1290.68,682.854 1291.24,682.854 1291.8,682.854 1292.36,682.854 1292.92,682.854 1293.48,682.854 1294.04,682.854 1294.6,682.854 1295.16,682.854 1295.72,682.854 1296.28,682.854 1296.83,682.854 1297.39,682.854 1297.95,682.854 1298.51,682.854 1299.07,682.854 1299.63,682.854 1300.19,682.854 1300.75,682.854 1301.31,682.854 1301.87,682.854 1302.43,682.854 1302.99,682.854 1303.55,682.854 1304.1,682.854 1304.66,682.854 1305.22,682.854 1305.78,682.854 1306.34,682.854 1306.9,682.854 1307.46,682.854 1308.02,682.854 1308.58,682.854 1309.14,682.854 1309.7,682.854 1310.26,682.854 1310.82,682.854 1311.38,682.854 1311.93,682.854 1312.49,682.854 1313.05,682.854 1313.61,682.854 1314.17,682.854 1314.73,682.854 1315.29,682.854 1315.85,682.854 1316.41,682.854 1316.97,682.854 1317.53,682.854 1318.09,682.854 1318.65,682.854 1319.2,682.854 1319.76,682.854 1320.32,682.854 1320.88,682.854 1321.44,682.854 1322,682.854 1322.56,682.854 1323.12,682.854 1323.68,682.854 1324.24,682.854 1324.8,682.854 1325.36,682.854 1325.92,682.854 1326.47,682.854 1327.03,682.854 1327.59,682.854 1328.15,682.854 1328.71,682.854 1329.27,682.854 1329.83,682.854 1330.39,682.854 1330.95,682.854 1331.51,682.854 1332.07,682.854 1332.63,682.854 1333.19,682.854 1333.75,682.854 1334.3,682.854 1334.86,682.854 1335.42,682.854 1335.98,682.854 1336.54,682.854 1337.1,682.854 1337.66,682.854 1338.22,682.854 1338.78,682.854 1339.34,682.854 1339.9,682.854 1340.46,682.854 1341.02,682.854 1341.57,682.854 1342.13,682.854 1342.69,682.854 1343.25,682.854 1343.81,682.854 1344.37,682.854 1344.93,682.854 1345.49,682.854 1346.05,682.854 1346.61,682.854 1347.17,682.854 1347.73,682.854 1348.29,682.854 1348.84,682.854 1349.4,682.854 1349.96,682.854 1350.52,682.854 1351.08,682.854 1351.64,682.854 1352.2,682.854 1352.76,682.854 1353.32,682.854 1353.88,682.854 1354.44,682.854 1355,682.854 1355.56,682.854 1356.12,682.854 1356.67,682.854 1357.23,682.854 1357.79,682.854 1358.35,682.854 1358.91,682.854 1359.47,682.854 1360.03,682.854 1360.59,682.854 1361.15,682.854 1361.71,682.854 1362.27,682.854 1362.83,682.854 1363.39,682.854 1363.94,682.854 1364.5,682.854 1365.06,682.854 1365.62,682.854 1366.18,682.854 1366.74,682.854 1367.3,682.854 1367.86,682.854 1368.42,682.854 1368.98,682.854 1369.54,682.854 1370.1,682.854 1370.66,682.854 1371.21,682.854 1371.77,682.854 1372.33,682.854 1372.89,682.854 1373.45,682.854 1374.01,682.854 1374.57,682.854 1375.13,682.854 1375.69,682.854 1376.25,682.854 1376.81,682.854 1377.37,682.854 1377.93,682.854 1378.49,682.854 1379.04,682.854 1379.6,682.854 1380.16,682.854 1380.72,682.854 1381.28,682.854 1381.84,682.854 1382.4,682.854 1382.96,682.854 1383.52,682.854 1384.08,682.854 1384.64,682.854 1385.2,682.854 1385.76,682.854 1386.31,682.854 1386.87,682.854 1387.43,682.854 1387.99,682.854 1388.55,682.854 1389.11,682.854 1389.67,682.854 1390.23,682.854 1390.79,682.854 1391.35,682.854 1391.91,682.854 1392.47,682.854 1393.03,682.854 1393.58,682.854 1394.14,682.854 1394.7,682.854 1395.26,682.854 1395.82,682.854 1396.38,682.854 1396.94,682.854 1397.5,682.854 1398.06,682.854 1398.62,682.854 1399.18,682.854 1399.74,682.854 1400.3,682.854 1400.86,682.854 1401.41,682.854 1401.97,682.854 1402.53,682.854 1403.09,682.854 1403.65,682.854 1404.21,682.854 1404.77,682.854 1405.33,682.854 1405.89,682.854 1406.45,682.854 1407.01,682.854 1407.57,682.854 1408.13,682.854 1408.68,682.854 1409.24,682.854 1409.8,682.854 1410.36,682.854 1410.92,682.854 1411.48,682.854 1412.04,682.854 1412.6,682.854 1413.16,682.854 1413.72,682.854 1414.28,682.854 1414.84,682.854 1415.4,682.854 1415.95,682.854 1416.51,682.854 1417.07,682.854 1417.63,682.854 1418.19,682.854 1418.75,682.854 1419.31,682.854 1419.87,682.854 1420.43,682.854 1420.99,682.854 1421.55,682.854 1422.11,682.854 1422.67,682.854 1423.23,682.854 1423.78,682.854 1424.34,682.854 1424.9,682.854 1425.46,682.854 1426.02,682.854 1426.58,682.854 1427.14,682.854 1427.7,682.854 1428.26,682.854 1428.82,682.854 1429.38,682.854 1429.94,682.854 1430.5,682.854 1431.05,682.854 1431.61,682.854 1432.17,682.854 1432.73,682.854 1433.29,682.854 1433.85,682.854 1434.41,682.854 1434.97,682.854 1435.53,682.854 1436.09,682.854 1436.65,682.854 1437.21,682.854 1437.77,682.854 1438.33,682.854 1438.88,682.854 1439.44,682.854 1440,682.854 1440.56,682.854 1441.12,682.854 1441.68,682.854 1442.24,682.854 1442.8,682.854 1443.36,682.854 1443.92,682.854 1444.48,682.854 1445.04,682.854 1445.6,682.854 1446.15,682.854 1446.71,682.854 1447.27,682.854 1447.83,682.854 1448.39,682.854 1448.95,682.854 1449.51,682.854 1450.07,682.854 1450.63,682.854 1451.19,682.854 1451.75,682.854 1452.31,682.854 1452.87,682.854 1453.42,682.854 1453.98,682.854 1454.54,682.854 1455.1,682.854 1455.66,682.854 1456.22,682.854 1456.78,682.854 1457.34,682.854 1457.9,682.854 1458.46,682.854 1459.02,682.854 1459.58,682.854 1460.14,682.854 1460.7,682.854 1461.25,682.854 1461.81,682.854 1462.37,682.854 1462.93,682.854 1463.49,682.854 1464.05,682.854 1464.61,682.854 1465.17,682.854 1465.73,682.854 1466.29,682.854 1466.85,682.854 1467.41,682.854 1467.97,682.854 1468.52,682.854 1469.08,682.854 1469.64,682.854 1470.2,682.854 1470.76,682.854 1471.32,682.854 1471.88,682.854 1472.44,682.854 1473,682.854 1473.56,682.854 1474.12,682.854 1474.68,682.854 1475.24,682.854 1475.79,682.854 1476.35,682.854 1476.91,682.854 1477.47,682.854 1478.03,682.854 1478.59,682.854 1479.15,682.854 1479.71,682.854 1480.27,682.854 1480.83,682.854 1481.39,682.854 1481.95,682.854 1482.51,682.854 1483.07,682.854 1483.62,682.854 1484.18,682.854 1484.74,682.854 1485.3,682.854 1485.86,682.854 1486.42,682.854 1486.98,682.854 1487.54,682.854 1488.1,682.854 1488.66,682.854 1489.22,682.854 1489.78,682.854 1490.34,682.854 1490.89,682.854 1491.45,682.854 1492.01,682.854 1492.57,682.854 1493.13,682.854 1493.69,682.854 1494.25,682.854 1494.81,682.854 1495.37,682.854 1495.93,682.854 1496.49,682.854 1497.05,682.854 1497.61,682.854 1498.16,682.854 1498.72,682.854 1499.28,682.854 1499.84,682.854 1500.4,682.854 1500.96,682.854 1501.52,682.854 1502.08,682.854 1502.64,682.854 1503.2,682.854 1503.76,682.854 1504.32,682.854 1504.88,682.854 1505.44,682.854 1505.99,682.854 1506.55,682.854 1507.11,682.854 1507.67,682.854 1508.23,682.854 1508.79,682.854 1509.35,682.854 1509.91,682.854 1510.47,682.854 1511.03,682.854 1511.59,682.854 1512.15,682.854 1512.71,682.854 1513.26,682.854 1513.82,682.854 1514.38,682.854 1514.94,682.854 1515.5,682.854 1516.06,682.854 1516.62,682.854 1517.18,682.854 1517.74,682.854 1518.3,682.854 1518.86,682.854 1519.42,682.854 1519.98,682.854 1520.53,682.854 1521.09,682.854 1521.65,682.854 1522.21,682.854 1522.77,682.854 1523.33,682.854 1523.89,682.854 1524.45,682.854 1525.01,682.854 1525.57,682.854 1526.13,682.854 1526.69,682.854 1527.25,682.854 1527.81,682.854 1528.36,682.854 1528.92,682.854 1529.48,682.854 1530.04,682.854 1530.6,682.854 1531.16,682.854 1531.72,682.854 1532.28,682.854 1532.84,682.854 1533.4,682.854 1533.96,682.854 1534.52,682.854 1535.08,682.854 1535.63,682.854 1536.19,682.854 1536.75,682.854 1537.31,682.854 1537.87,682.854 1538.43,682.854 1538.99,682.854 1539.55,682.854 1540.11,682.854 1540.67,682.854 1541.23,682.854 1541.79,682.854 1542.35,682.854 1542.9,682.854 1543.46,682.854 1544.02,682.854 1544.58,682.854 1545.14,682.854 1545.7,682.854 1546.26,682.854 1546.82,682.854 1547.38,682.854 1547.94,682.854 1548.5,682.854 1549.06,682.854 1549.62,682.854 1550.18,682.854 1550.73,682.854 1551.29,682.854 1551.85,682.854 1552.41,682.854 1552.97,682.854 1553.53,682.854 1554.09,682.854 1554.65,682.854 1555.21,682.854 1555.77,682.854 1556.33,682.854 1556.89,682.854 1557.45,682.854 1558,682.854 1558.56,682.854 1559.12,682.854 1559.68,682.854 1560.24,682.854 1560.8,682.854 1561.36,682.854 1561.92,682.854 1562.48,682.854 1563.04,682.854 1563.6,682.854 1564.16,682.854 1564.72,682.854 1565.28,682.854 1565.83,682.854 1566.39,682.854 1566.95,682.854 1567.51,682.854 1568.07,682.854 1568.63,682.854 1569.19,682.854 1569.75,682.854 1570.31,682.854 1570.87,682.854 1571.43,682.854 1571.99,682.854 1572.55,682.854 1573.1,682.854 1573.66,682.854 1574.22,682.854 1574.78,682.854 1575.34,682.854 1575.9,682.854 1576.46,682.854 1577.02,682.854 1577.58,682.854 1578.14,682.854 1578.7,682.854 1579.26,682.854 1579.82,682.854 1580.37,682.854 1580.93,682.854 1581.49,682.854 1582.05,682.854 1582.61,682.854 1583.17,682.854 1583.73,682.854 1584.29,682.854 1584.85,682.854 1585.41,682.854 1585.97,682.854 1586.53,682.854 1587.09,682.854 1587.65,682.854 1588.2,682.854 1588.76,682.854 1589.32,682.854 1589.88,682.854 1590.44,682.854 1591,682.854 1591.56,682.854 1592.12,682.854 1592.68,682.854 1593.24,682.854 1593.8,682.854 1594.36,682.854 1594.92,682.854 1595.47,682.854 1596.03,682.854 1596.59,682.854 1597.15,682.854 1597.71,682.854 1598.27,682.854 1598.83,682.854 1599.39,682.854 1599.95,682.854 1600.51,682.854 1601.07,682.854 1601.63,682.854 1602.19,682.854 1602.74,682.854 1603.3,682.854 1603.86,682.854 1604.42,682.854 1604.98,682.854 1605.54,682.854 1606.1,682.854 1606.66,682.854 1607.22,682.854 1607.78,682.854 1608.34,682.854 1608.9,682.854 1609.46,682.854 1610.02,682.854 1610.57,682.854 1611.13,682.854 1611.69,682.854 1612.25,682.854 1612.81,682.854 1613.37,682.854 1613.93,682.854 1614.49,682.854 1615.05,682.854 1615.61,682.854 1616.17,682.854 1616.73,682.854 1617.29,682.854 1617.84,682.854 1618.4,682.854 1618.96,682.854 1619.52,682.854 1620.08,682.854 1620.64,682.854 1621.2,682.854 1621.76,682.854 1622.32,682.854 1622.88,682.854 1623.44,682.854 1624,682.854 1624.56,682.854 1625.11,682.854 1625.67,682.854 1626.23,682.854 1626.79,682.854 1627.35,682.854 1627.91,682.854 1628.47,682.854 1629.03,682.854 1629.59,682.854 1630.15,682.854 1630.71,682.854 1631.27,682.854 1631.83,682.854 1632.39,682.854 1632.94,682.854 1633.5,682.854 1634.06,682.854 1634.62,682.854 1635.18,682.854 1635.74,682.854 1636.3,682.854 1636.86,682.854 1637.42,682.854 1637.98,682.854 1638.54,682.854 1639.1,682.854 1639.66,682.854 1640.21,682.854 1640.77,682.854 1641.33,682.854 1641.89,682.854 1642.45,682.854 1643.01,682.854 1643.57,682.854 1644.13,682.854 1644.69,682.854 1645.25,682.854 1645.81,682.854 1646.37,682.854 1646.93,682.854 1647.48,682.854 1648.04,682.854 1648.6,682.854 1649.16,682.854 1649.72,682.854 1650.28,682.854 1650.84,682.854 1651.4,682.854 1651.96,682.854 1652.52,682.854 1653.08,682.854 1653.64,682.854 1654.2,682.854 1654.76,682.854 1655.31,682.854 1655.87,682.854 1656.43,682.854 1656.99,682.854 1657.55,682.854 1658.11,682.854 1658.67,682.854 1659.23,682.854 1659.79,682.854 1660.35,682.854 1660.91,682.854 1661.47,682.854 1662.03,682.854 1662.58,682.854 1663.14,682.854 1663.7,682.854 1664.26,682.854 1664.82,682.854 1665.38,682.854 1665.94,682.854 1666.5,682.854 1667.06,682.854 1667.62,682.854 1668.18,682.854 1668.74,682.854 1669.3,682.854 1669.85,682.854 1670.41,682.854 1670.97,682.854 1671.53,682.854 1672.09,682.854 1672.65,682.854 1673.21,682.854 1673.77,682.854 1674.33,682.854 1674.89,682.854 1675.45,682.854 1676.01,682.854 1676.57,682.854 1677.13,682.854 1677.68,682.854 1678.24,682.854 1678.8,682.854 1679.36,682.854 1679.92,682.854 1680.48,682.854 1681.04,682.854 1681.6,682.854 1682.16,682.854 1682.72,682.854 1683.28,682.854 1683.84,682.854 1684.4,682.854 1684.95,682.854 1685.51,682.854 1686.07,682.854 1686.63,682.854 1687.19,682.854 1687.75,682.854 1688.31,682.854 1688.87,682.854 1689.43,682.854 1689.99,682.854 1690.55,682.854 1691.11,682.854 1691.67,682.854 1692.23,682.854 1692.78,682.854 1693.34,682.854 1693.9,682.854 1694.46,682.854 1695.02,682.854 1695.58,682.854 1696.14,682.854 1696.7,682.854 1697.26,682.854 1697.82,682.854 1698.38,682.854 1698.94,682.854 1699.5,682.854 1700.05,682.854 1700.61,682.854 1701.17,682.854 1701.73,682.854 1702.29,682.854 1702.85,682.854 1703.41,682.854 1703.97,682.854 1704.53,682.854 1705.09,682.854 1705.65,682.854 1706.21,682.854 1706.77,682.854 1707.32,682.854 1707.88,682.854 1708.44,682.854 1709,682.854 1709.56,682.854 1710.12,682.854 1710.68,682.854 1711.24,682.854 1711.8,682.854 1712.36,682.854 1712.92,682.854 1713.48,682.854 1714.04,682.854 1714.6,682.854 1715.15,682.854 1715.71,682.854 1716.27,682.854 1716.83,682.854 1717.39,682.854 1717.95,682.854 1718.51,682.854 1719.07,682.854 1719.63,682.854 1720.19,682.854 1720.75,682.854 1721.31,682.854 1721.87,682.854 1722.42,682.854 1722.98,682.854 1723.54,682.854 1724.1,682.854 1724.66,682.854 1725.22,682.854 1725.78,682.854 1726.34,682.854 1726.9,682.854 1727.46,682.854 1728.02,682.854 1728.58,682.854 1729.14,682.854 1729.69,682.854 1730.25,682.854 1730.81,682.854 1731.37,682.854 1731.93,682.854 1732.49,682.854 1733.05,682.854 1733.61,682.854 1734.17,682.854 1734.73,682.854 1735.29,682.854 1735.85,682.854 1736.41,682.854 1736.97,682.854 1737.52,682.854 1738.08,682.854 1738.64,682.854 1739.2,682.854 1739.76,682.854 1740.32,682.854 1740.88,682.854 1741.44,682.854 1742,682.854 1742.56,682.854 1743.12,682.854 1743.68,682.854 1744.24,682.854 1744.79,682.854 1745.35,682.854 1745.91,682.854 1746.47,682.854 1747.03,682.854 1747.59,682.854 1748.15,682.854 1748.71,682.854 1749.27,682.854 1749.83,682.854 1750.39,682.854 1750.95,682.854 1751.51,682.854 1752.06,682.854 1752.62,682.854 1753.18,682.854 1753.74,682.854 1754.3,682.854 1754.86,682.854 1755.42,682.854 1755.98,682.854 1756.54,682.854 1757.1,682.854 1757.66,682.854 1758.22,682.854 1758.78,682.854 1759.34,682.854 1759.89,682.854 1760.45,682.854 1761.01,682.854 1761.57,682.854 1762.13,682.854 1762.69,682.854 1763.25,682.854 1763.81,682.854 1764.37,682.854 1764.93,682.854 1765.49,682.854 1766.05,682.854 1766.61,682.854 1767.16,682.854 1767.72,682.854 1768.28,682.854 1768.84,682.854 1769.4,682.854 1769.96,682.854 1770.52,682.854 1771.08,682.854 1771.64,682.854 1772.2,682.854 1772.76,682.854 1773.32,682.854 1773.88,682.854 1774.43,682.854 1774.99,682.854 1775.55,682.854 1776.11,682.854 1776.67,682.854 1777.23,682.854 1777.79,682.854 1778.35,682.854 1778.91,682.854 1779.47,682.854 1780.03,682.854 1780.59,682.854 1781.15,682.854 1781.71,682.854 1782.26,682.854 1782.82,682.854 1783.38,682.854 1783.94,682.854 1784.5,682.854 1785.06,682.854 1785.62,682.854 1786.18,682.854 1786.74,682.854 1787.3,682.854 1787.86,682.854 1788.42,682.854 1788.98,682.854 1789.53,682.854 1790.09,682.854 1790.65,682.854 1791.21,682.854 1791.77,682.854 1792.33,682.854 1792.89,682.854 1793.45,682.854 1794.01,682.854 1794.57,682.854 1795.13,682.854 1795.69,682.854 1796.25,682.854 1796.8,682.854 1797.36,682.854 1797.92,682.854 1798.48,682.854 1799.04,682.854 1799.6,682.854 1800.16,682.854 1800.72,682.854 1801.28,682.854 1801.84,682.854 1802.4,682.854 1802.96,682.854 1803.52,682.854 1804.08,682.854 1804.63,682.854 1805.19,682.854 1805.75,682.854 1806.31,682.854 1806.87,682.854 1807.43,682.854 1807.99,682.854 1808.55,682.854 1809.11,682.854 1809.67,682.854 1810.23,682.854 1810.79,682.854 1811.35,682.854 1811.9,682.854 1812.46,682.854 1813.02,682.854 1813.58,682.854 1814.14,682.854 1814.7,682.854 1815.26,682.854 1815.82,682.854 1816.38,682.854 1816.94,682.854 1817.5,682.854 1818.06,682.854 1818.62,682.854 1819.18,682.854 1819.73,682.854 1820.29,682.854 1820.85,682.854 1821.41,682.854 1821.97,682.854 1822.53,682.854 1823.09,682.854 1823.65,682.854 1824.21,682.854 1824.77,682.854 1825.33,682.854 1825.89,682.854 1826.45,682.854 1827,682.854 1827.56,682.854 1828.12,682.854 1828.68,682.854 1829.24,682.854 1829.8,682.854 1830.36,682.854 1830.92,682.854 1831.48,682.854 1832.04,682.854 1832.6,682.854 1833.16,682.854 1833.72,682.854 1834.27,682.854 1834.83,682.854 1835.39,682.854 1835.95,682.854 1836.51,682.854 1837.07,682.854 1837.63,682.854 1838.19,682.854 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025862077050055 ± 0.01718530361790597\nProjected Energy: -4.011407669990399 ± (0.006398126994198172, 0.006969784140583357)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.473789</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.5239e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.187e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.267e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.363e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.625e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.995e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.3631242916133495\n -0.7590191922770906\n  0.13584182219621255\n  0.15789998694608798\n  0.8767114411781343\n  1.530592997097334\n  1.583573261186733\n  3.0728703303258484\n  3.12567265395185\n  4.862107221562169\n  6.2606948503805935\n  6.402671211183113\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = hat a^_i hat a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl =  hat a^_i hat a^_j hat a_l hat a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
