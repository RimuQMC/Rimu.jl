var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2150945353060992 ± 0.0017570098672847162\n   G2(1) = 0.9152295253471154 ± 0.000940660097816486\n   G2(2) = 0.9833244292393882 ± 0.0005861270174793875\n   G2(3) = 0.9877975555208938 ± 0.0008140640234376341\n   G2(4) = 0.9833244292393882 ± 0.0005861270174793875\n   G2(5) = 0.9152295253471154 ± 0.000940660097816486\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.029090068594452 ± 0.13709077514770562\n   Replica 2: -4.034158961821819 ± 0.13703706851627262\n   Replica 3: -4.131192163994086 ± 0.13168743305239852\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip920\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip920)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip921\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip920)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip922\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.37 2211.02,1003.37 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.922 2211.02,745.922 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.47 2211.02,488.47 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.017 2211.02,231.017 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.37 423.181,1003.37 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.922 423.181,745.922 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.47 423.181,488.47 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.017 423.181,231.017 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M290.043 1016.72 L306.363 1016.72 L306.363 1020.65 L284.418 1020.65 L284.418 1016.72 Q287.08 1013.96 291.664 1009.33 Q296.27 1004.68 297.451 1003.34 Q299.696 1000.82 300.576 999.08 Q301.478 997.321 301.478 995.631 Q301.478 992.877 299.534 991.141 Q297.613 989.404 294.511 989.404 Q292.312 989.404 289.858 990.168 Q287.427 990.932 284.65 992.483 L284.65 987.761 Q287.474 986.627 289.927 986.048 Q292.381 985.469 294.418 985.469 Q299.789 985.469 302.983 988.154 Q306.177 990.84 306.177 995.33 Q306.177 997.46 305.367 999.381 Q304.58 1001.28 302.474 1003.87 Q301.895 1004.54 298.793 1007.76 Q295.691 1010.96 290.043 1016.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M316.224 986.094 L334.58 986.094 L334.58 990.029 L320.506 990.029 L320.506 998.502 Q321.524 998.154 322.543 997.992 Q323.562 997.807 324.58 997.807 Q330.367 997.807 333.747 1000.98 Q337.126 1004.15 337.126 1009.57 Q337.126 1015.15 333.654 1018.25 Q330.182 1021.33 323.862 1021.33 Q321.687 1021.33 319.418 1020.96 Q317.173 1020.58 314.765 1019.84 L314.765 1015.15 Q316.849 1016.28 319.071 1016.83 Q321.293 1017.39 323.77 1017.39 Q327.774 1017.39 330.112 1015.28 Q332.45 1013.18 332.45 1009.57 Q332.45 1005.96 330.112 1003.85 Q327.774 1001.74 323.77 1001.74 Q321.895 1001.74 320.02 1002.16 Q318.168 1002.58 316.224 1003.46 L316.224 986.094 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M356.339 989.173 Q352.728 989.173 350.899 992.738 Q349.094 996.279 349.094 1003.41 Q349.094 1010.52 350.899 1014.08 Q352.728 1017.62 356.339 1017.62 Q359.973 1017.62 361.779 1014.08 Q363.608 1010.52 363.608 1003.41 Q363.608 996.279 361.779 992.738 Q359.973 989.173 356.339 989.173 M356.339 985.469 Q362.149 985.469 365.205 990.076 Q368.284 994.659 368.284 1003.41 Q368.284 1012.14 365.205 1016.74 Q362.149 1021.33 356.339 1021.33 Q350.529 1021.33 347.45 1016.74 Q344.395 1012.14 344.395 1003.41 Q344.395 994.659 347.45 990.076 Q350.529 985.469 356.339 985.469 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M286.062 728.642 L304.418 728.642 L304.418 732.577 L290.344 732.577 L290.344 741.049 Q291.363 740.702 292.381 740.54 Q293.4 740.355 294.418 740.355 Q300.205 740.355 303.585 743.526 Q306.964 746.697 306.964 752.114 Q306.964 757.693 303.492 760.795 Q300.02 763.873 293.701 763.873 Q291.525 763.873 289.256 763.503 Q287.011 763.133 284.603 762.392 L284.603 757.693 Q286.687 758.827 288.909 759.383 Q291.131 759.938 293.608 759.938 Q297.613 759.938 299.951 757.832 Q302.288 755.725 302.288 752.114 Q302.288 748.503 299.951 746.397 Q297.613 744.29 293.608 744.29 Q291.733 744.29 289.858 744.707 Q288.006 745.123 286.062 746.003 L286.062 728.642 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M326.177 731.721 Q322.566 731.721 320.737 735.285 Q318.932 738.827 318.932 745.957 Q318.932 753.063 320.737 756.628 Q322.566 760.17 326.177 760.17 Q329.811 760.17 331.617 756.628 Q333.446 753.063 333.446 745.957 Q333.446 738.827 331.617 735.285 Q329.811 731.721 326.177 731.721 M326.177 728.017 Q331.987 728.017 335.043 732.623 Q338.122 737.207 338.122 745.957 Q338.122 754.684 335.043 759.29 Q331.987 763.873 326.177 763.873 Q320.367 763.873 317.288 759.29 Q314.233 754.684 314.233 745.957 Q314.233 737.207 317.288 732.623 Q320.367 728.017 326.177 728.017 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M356.339 731.721 Q352.728 731.721 350.899 735.285 Q349.094 738.827 349.094 745.957 Q349.094 753.063 350.899 756.628 Q352.728 760.17 356.339 760.17 Q359.973 760.17 361.779 756.628 Q363.608 753.063 363.608 745.957 Q363.608 738.827 361.779 735.285 Q359.973 731.721 356.339 731.721 M356.339 728.017 Q362.149 728.017 365.205 732.623 Q368.284 737.207 368.284 745.957 Q368.284 754.684 365.205 759.29 Q362.149 763.873 356.339 763.873 Q350.529 763.873 347.45 759.29 Q344.395 754.684 344.395 745.957 Q344.395 737.207 347.45 732.623 Q350.529 728.017 356.339 728.017 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M284.835 471.19 L307.057 471.19 L307.057 473.18 L294.511 505.75 L289.627 505.75 L301.432 475.125 L284.835 475.125 L284.835 471.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M316.224 471.19 L334.58 471.19 L334.58 475.125 L320.506 475.125 L320.506 483.597 Q321.524 483.25 322.543 483.088 Q323.562 482.903 324.58 482.903 Q330.367 482.903 333.747 486.074 Q337.126 489.245 337.126 494.662 Q337.126 500.24 333.654 503.342 Q330.182 506.421 323.862 506.421 Q321.687 506.421 319.418 506.051 Q317.173 505.68 314.765 504.939 L314.765 500.24 Q316.849 501.375 319.071 501.93 Q321.293 502.486 323.77 502.486 Q327.774 502.486 330.112 500.379 Q332.45 498.273 332.45 494.662 Q332.45 491.051 330.112 488.944 Q327.774 486.838 323.77 486.838 Q321.895 486.838 320.02 487.254 Q318.168 487.671 316.224 488.551 L316.224 471.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M356.339 474.268 Q352.728 474.268 350.899 477.833 Q349.094 481.375 349.094 488.504 Q349.094 495.611 350.899 499.176 Q352.728 502.717 356.339 502.717 Q359.973 502.717 361.779 499.176 Q363.608 495.611 363.608 488.504 Q363.608 481.375 361.779 477.833 Q359.973 474.268 356.339 474.268 M356.339 470.565 Q362.149 470.565 365.205 475.171 Q368.284 479.754 368.284 488.504 Q368.284 497.231 365.205 501.838 Q362.149 506.421 356.339 506.421 Q350.529 506.421 347.45 501.838 Q344.395 497.231 344.395 488.504 Q344.395 479.754 347.45 475.171 Q350.529 470.565 356.339 470.565 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M256.664 244.362 L264.303 244.362 L264.303 217.997 L255.992 219.663 L255.992 215.404 L264.256 213.737 L268.932 213.737 L268.932 244.362 L276.571 244.362 L276.571 248.297 L256.664 248.297 L256.664 244.362 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M296.015 216.816 Q292.404 216.816 290.576 220.381 Q288.77 223.922 288.77 231.052 Q288.77 238.158 290.576 241.723 Q292.404 245.265 296.015 245.265 Q299.65 245.265 301.455 241.723 Q303.284 238.158 303.284 231.052 Q303.284 223.922 301.455 220.381 Q299.65 216.816 296.015 216.816 M296.015 213.112 Q301.826 213.112 304.881 217.719 Q307.96 222.302 307.96 231.052 Q307.96 239.779 304.881 244.385 Q301.826 248.969 296.015 248.969 Q290.205 248.969 287.127 244.385 Q284.071 239.779 284.071 231.052 Q284.071 222.302 287.127 217.719 Q290.205 213.112 296.015 213.112 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M326.177 216.816 Q322.566 216.816 320.737 220.381 Q318.932 223.922 318.932 231.052 Q318.932 238.158 320.737 241.723 Q322.566 245.265 326.177 245.265 Q329.811 245.265 331.617 241.723 Q333.446 238.158 333.446 231.052 Q333.446 223.922 331.617 220.381 Q329.811 216.816 326.177 216.816 M326.177 213.112 Q331.987 213.112 335.043 217.719 Q338.122 222.302 338.122 231.052 Q338.122 239.779 335.043 244.385 Q331.987 248.969 326.177 248.969 Q320.367 248.969 317.288 244.385 Q314.233 239.779 314.233 231.052 Q314.233 222.302 317.288 217.719 Q320.367 213.112 326.177 213.112 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M356.339 216.816 Q352.728 216.816 350.899 220.381 Q349.094 223.922 349.094 231.052 Q349.094 238.158 350.899 241.723 Q352.728 245.265 356.339 245.265 Q359.973 245.265 361.779 241.723 Q363.608 238.158 363.608 231.052 Q363.608 223.922 361.779 220.381 Q359.973 216.816 356.339 216.816 M356.339 213.112 Q362.149 213.112 365.205 217.719 Q368.284 222.302 368.284 231.052 Q368.284 239.779 365.205 244.385 Q362.149 248.969 356.339 248.969 Q350.529 248.969 347.45 244.385 Q344.395 239.779 344.395 231.052 Q344.395 222.302 347.45 217.719 Q350.529 213.112 356.339 213.112 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip922)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.017 4017.76,231.017 \"/>\n<polyline clip-path=\"url(#clip922)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1247.01 460.533,1246.43 461.101,1245.77 461.669,1242.97 462.238,1242.2 462.806,1241.33 463.375,1240.37 463.943,1239.32 464.511,1238.15 465.08,1236.89 465.648,1235.52 466.216,1234.03 466.785,1232.4 467.353,1230.67 467.921,1228.79 468.49,1226.79 469.058,1224.63 469.626,1220.25 470.195,1217.76 470.763,1215.05 471.331,1211.19 471.9,1208.16 472.468,1203.89 473.036,1199.44 473.605,1194.72 474.173,1190.93 474.741,1186.88 475.31,1182.65 475.878,1177.17 476.446,1170.5 477.015,1164.67 477.583,1159.63 478.152,1154.31 478.72,1147.74 479.288,1138.97 479.857,1133.21 480.425,1126.19 480.993,1119 481.562,1111.47 482.13,1103.63 482.698,1092.61 483.267,1084.54 483.835,1075.14 484.403,1067.68 484.972,1059.07 485.54,1051.42 486.108,1042.4 486.677,1034.31 487.245,1024.04 487.813,1013.62 488.382,1005.22 488.95,995.652 489.518,984.89 490.087,975.205 490.655,964.322 491.224,955.505 491.792,945.407 492.36,936.288 492.929,926.031 493.497,913.671 494.065,902.413 494.634,893.125 495.202,882.777 495.77,871.433 496.339,862.053 496.907,851.796 497.475,840.323 498.044,830.017 498.612,818.743 499.18,807.501 499.749,798.481 500.317,789.41 500.885,776.103 501.454,765.118 502.022,755.25 502.59,743.383 503.159,732.633 503.727,720.865 504.295,708.412 504.864,699.201 505.432,689.115 506.001,680.17 506.569,672.113 507.137,664.184 507.706,655.224 508.274,646.418 508.842,637.717 509.411,629.228 509.979,620.918 510.547,612.589 511.116,605.238 511.684,596.225 512.252,588.372 512.821,579.201 513.389,572.586 513.957,563.931 514.526,556.482 515.094,549.017 515.662,541.786 516.231,535.738 516.799,529.686 517.367,522.672 517.936,515.678 518.504,509.869 519.072,499.956 519.641,493.683 520.209,487.297 520.778,481.125 521.346,476.974 521.914,470.767 522.483,464.679 523.051,456.796 523.619,452.257 524.188,445.712 524.756,440.369 525.324,434.088 525.893,428.052 526.461,422.187 527.029,417.585 527.598,413.849 528.166,408.251 528.734,403.722 529.303,397.505 529.871,393.359 530.439,390.611 531.008,387.478 531.576,383.525 532.144,380.509 532.713,377.62 533.281,374.924 533.85,370.264 534.418,365.334 534.986,361.996 535.555,360.486 536.123,356.132 536.691,353.835 537.26,351.554 537.828,347.34 538.396,343.4 538.965,338.481 539.533,334.634 540.101,333.257 540.67,329.596 541.238,329.095 541.806,327.611 542.375,325.171 542.943,322.876 543.511,321.37 544.08,320.218 544.648,315.727 545.216,314.415 545.785,312.257 546.353,309.021 546.921,306.877 547.49,305.88 548.058,303.789 548.627,302.973 549.195,302.122 549.763,302.328 550.332,299.425 550.9,299.342 551.468,298.298 552.037,295.306 552.605,292.42 553.173,290.481 553.742,290.831 554.31,288.022 554.878,286.323 555.447,286.612 556.015,282.008 556.583,280.549 557.152,280.146 557.72,279.04 558.288,279.986 558.857,280.709 559.425,279.176 559.993,278.614 560.562,279.384 561.13,276.793 561.698,278.403 562.267,276.807 562.835,274.478 563.404,275.176 563.972,276.865 564.54,274.154 565.109,273.804 565.677,273.006 566.245,271.264 566.814,269.873 567.382,267.25 567.95,267.141 568.519,264.783 569.087,264.601 569.655,264.32 570.224,265.08 570.792,261.715 571.36,261.524 571.929,260.264 572.497,261.126 573.065,259.981 573.634,261.701 574.202,264.536 574.77,264.04 575.339,262.548 575.907,259.814 576.476,259.537 577.044,261.161 577.612,260.624 578.181,261.276 578.749,261.015 579.317,259.58 579.886,260.267 580.454,258.743 581.022,258.482 581.591,258.087 582.159,256.573 582.727,258.3 583.296,258.864 583.864,256.022 584.432,254.434 585.001,253.091 585.569,252.742 586.137,250.46 586.706,249.258 587.274,248.239 587.842,247.312 588.411,247.456 588.979,247.612 589.547,246.601 590.116,248.72 590.684,246.573 591.253,245.701 591.821,244.745 592.389,244.085 592.958,244.382 593.526,244.802 594.094,246.003 594.663,244.893 595.231,244.916 595.799,246.193 596.368,246.282 596.936,245.07 597.504,245.161 598.073,245.27 598.641,246.136 599.209,245.014 599.778,244.873 600.346,243.731 600.914,243.906 601.483,241.693 602.051,243.046 602.619,243.038 603.188,240.83 603.756,241.104 604.325,241.237 604.893,243.717 605.461,243.913 606.03,243.91 606.598,244.828 607.166,243.874 607.735,243.925 608.303,244.056 608.871,242.992 609.44,243.248 610.008,242.359 610.576,241.397 611.145,239.437 611.713,237.603 612.281,238.808 612.85,239.152 613.418,239.432 613.986,240.659 614.555,239.849 615.123,239.869 615.691,241.083 616.26,238.082 616.828,237.339 617.396,236.669 617.965,235.947 618.533,234.313 619.102,234.768 619.67,236.466 620.238,234.929 620.807,237.4 621.375,237.796 621.943,239.042 622.512,237.216 623.08,236.488 623.648,235.726 624.217,235.004 624.785,235.413 625.353,236.092 625.922,234.323 626.49,234.694 627.058,234.053 627.627,234.57 628.195,235.078 628.763,233.421 629.332,234.058 629.9,236.788 630.468,236.097 631.037,236.503 631.605,235.767 632.173,233.919 632.742,233.353 633.31,230.804 633.879,232.711 634.447,233.472 635.015,233 635.584,234.599 636.152,231.946 636.72,233.589 637.289,235.405 637.857,233.983 638.425,237.743 638.994,238.952 639.562,240.003 640.13,237.956 640.699,236.945 641.267,238.303 641.835,238.459 642.404,240.703 642.972,239.729 643.54,238.898 644.109,240.038 644.677,240.124 645.245,239.128 645.814,240.012 646.382,239.992 646.951,237.693 647.519,237.104 648.087,234.301 648.656,234.746 649.224,234.12 649.792,232.258 650.361,233.943 650.929,234.334 651.497,234.693 652.066,234.159 652.634,232.789 653.202,233.339 653.771,233.937 654.339,236.624 654.907,238.973 655.476,237.912 656.044,239.148 656.612,241.382 657.181,242.271 657.749,241.136 658.317,239.975 658.886,240.833 659.454,240.803 660.022,239.691 660.591,238.731 661.159,240.905 661.728,241.906 662.296,241.942 662.864,239.771 663.433,239.639 664.001,239.583 664.569,239.507 665.138,238.491 665.706,237.409 666.274,237.213 666.843,236.432 667.411,236.579 667.979,236.834 668.548,239.912 669.116,239.692 669.684,239.534 670.253,240.244 670.821,237.941 671.389,235.748 671.958,235.888 672.526,234.876 673.094,234.063 673.663,235.217 674.231,235.233 674.799,235.462 675.368,234.662 675.936,235.917 676.505,237.067 677.073,238.018 677.641,239.099 678.21,239.729 678.778,239.46 679.346,239.301 679.915,240.032 680.483,239.844 681.051,240.376 681.62,241.221 682.188,239.829 682.756,240.381 683.325,239.027 683.893,236.967 684.461,237.805 685.03,238.624 685.598,239.055 686.166,237.549 686.735,238.346 687.303,239.053 687.871,239.794 688.44,239.357 689.008,238.841 689.577,237.551 690.145,236.475 690.713,235.048 691.282,235.119 691.85,236.152 692.418,235.039 692.987,235.008 693.555,236.088 694.123,236.864 694.692,237.597 695.26,236.327 695.828,233.913 696.397,233.796 696.965,233.894 697.533,233.824 698.102,234.794 698.67,232.554 699.238,233.674 699.807,231.631 700.375,226.762 700.943,227.366 701.512,226.987 702.08,226.627 702.648,228.09 703.217,229.797 703.785,229.223 704.354,226.577 704.922,227.991 705.49,229.352 706.059,229.596 706.627,227.965 707.195,228.479 707.764,226.828 708.332,227.529 708.9,228 709.469,227.524 710.037,228.118 710.605,229.596 711.174,231.882 711.742,232.349 712.31,230.669 712.879,231.99 713.447,232.143 714.015,233.243 714.584,233.234 715.152,231.372 715.72,231.765 716.289,229.915 716.857,230.358 717.425,230.445 717.994,232.966 718.562,233.142 719.131,234.35 719.699,235.56 720.267,233.455 720.836,234.592 721.404,235.886 721.972,236.072 722.541,233.873 723.109,234.11 723.677,234.261 724.246,232.369 724.814,230.639 725.382,231.027 725.951,230.16 726.519,230.743 727.087,234.22 727.656,234.476 728.224,233.392 728.792,233.582 729.361,233.79 729.929,234.001 730.497,235.011 731.066,234.097 731.634,236.111 732.203,234.806 732.771,233.692 733.339,234.939 733.908,235.025 734.476,232.609 735.044,232.691 735.613,231.635 736.181,229.819 736.749,229.107 737.318,228.255 737.886,229.71 738.454,229.75 739.023,230.012 739.591,229.325 740.159,230.822 740.728,230.198 741.296,230.601 741.864,232.946 742.433,228.887 743.001,229.294 743.569,230.67 744.138,229.174 744.706,232.636 745.274,232.814 745.843,232.955 746.411,234.103 746.98,233.127 747.548,235.223 748.116,235.149 748.685,234.989 749.253,233.932 749.821,236.028 750.39,236.789 750.958,236.663 751.526,233.209 752.095,232.239 752.663,232.528 753.231,232.491 753.8,230.771 754.368,231.182 754.936,232.446 755.505,232.444 756.073,232.807 756.641,233.758 757.21,232.591 757.778,233.753 758.346,235.894 758.915,236.967 759.483,236.695 760.052,238.783 760.62,238.445 761.188,236.058 761.757,238.195 762.325,238.11 762.893,236.703 763.462,234.461 764.03,234.663 764.598,234.794 765.167,232.624 765.735,233.847 766.303,233.739 766.872,234.672 767.44,234.413 768.008,234.344 768.577,233.112 769.145,233.214 769.713,234.094 770.282,233.165 770.85,230.342 771.418,229.331 771.987,228.517 772.555,228.676 773.123,229.074 773.692,229.384 774.26,231.425 774.829,231.611 775.397,232.852 775.965,232.919 776.534,232.954 777.102,232.98 777.67,233.09 778.239,234.29 778.807,236.532 779.375,235.407 779.944,231.958 780.512,233.29 781.08,232.092 781.649,230.25 782.217,230.317 782.785,229.463 783.354,228.654 783.922,228.912 784.49,230.179 785.059,232.695 785.627,233.825 786.195,233.791 786.764,234.704 787.332,234.613 787.9,234.543 788.469,234.502 789.037,234.602 789.606,235.407 790.174,235.313 790.742,236.337 791.311,235.976 791.879,234.719 792.447,234.809 793.016,234.706 793.584,234.574 794.152,232.45 794.721,230.502 795.289,231.627 795.857,231.696 796.426,231.677 796.994,230.536 797.562,229.372 798.131,229.78 798.699,230.948 799.267,229.03 799.836,225.188 800.404,224.702 800.972,227.481 801.541,227.033 802.109,226.308 802.678,226.76 803.246,228.156 803.814,228.456 804.383,230.966 804.951,233.273 805.519,233.017 806.088,231.062 806.656,230.179 807.224,229.424 807.793,228.793 808.361,229.371 808.929,232.782 809.498,236.821 810.066,237.729 810.634,237.295 811.203,237.091 811.771,236.732 812.339,238.57 812.908,237.313 813.476,237.057 814.044,235.761 814.613,235.669 815.181,236.539 815.749,237.246 816.318,235.865 816.886,234.756 817.455,233.61 818.023,232.582 818.591,231.666 819.16,231.923 819.728,230.873 820.296,230.977 820.865,230.919 821.433,230.927 822.001,229.994 822.57,233.333 823.138,234.278 823.706,232.02 824.275,231.997 824.843,234.029 825.411,234.931 825.98,234.7 826.548,235.72 827.116,234.378 827.685,236.203 828.253,235.842 828.821,232.445 829.39,233.444 829.958,233.222 830.526,231.043 831.095,231.201 831.663,231.159 832.232,230.067 832.8,232.233 833.368,230.078 833.937,229.959 834.505,228.796 835.073,227.888 835.642,228.102 836.21,228.168 836.778,230.438 837.347,230.618 837.915,230.704 838.483,230.629 839.052,230.626 839.62,231.746 840.188,230.765 840.757,228.893 841.325,230.26 841.893,231.648 842.462,232.657 843.03,233.55 843.598,233.504 844.167,232.601 844.735,234.444 845.304,234.418 845.872,233.206 846.44,235.34 847.009,236.081 847.577,235.767 848.145,234.465 848.714,233.173 849.282,233.05 849.85,232.768 850.419,235.893 850.987,237.653 851.555,235.263 852.124,234.976 852.692,233.728 853.26,231.623 853.829,232.616 854.397,233.4 854.965,234.495 855.534,234.129 856.102,234.043 856.67,233.777 857.239,235.8 857.807,233.413 858.375,231.977 858.944,231.902 859.512,230.797 860.081,230.689 860.649,230.642 861.217,229.876 861.786,228.959 862.354,227.853 862.922,228.976 863.491,230.254 864.059,230.438 864.627,229.349 865.196,228.111 865.764,227.202 866.332,227.41 866.901,226.71 867.469,226.812 868.037,226.407 868.606,226.811 869.174,226.97 869.742,227.323 870.311,226.488 870.879,225.993 871.447,227.232 872.016,225.6 872.584,226.337 873.152,227.877 873.721,226.999 874.289,224.447 874.858,225.85 875.426,227.229 875.994,227.593 876.563,232.219 877.131,233.324 877.699,235.323 878.268,234.082 878.836,235.995 879.404,232.514 879.973,231.526 880.541,233.57 881.109,233.328 881.678,233.139 882.246,233.324 882.814,235.395 883.383,234.273 883.951,232.057 884.519,232.026 885.088,230.884 885.656,231.979 886.224,231.868 886.793,231.984 887.361,231.988 887.93,231.073 888.498,233.264 889.066,233.388 889.635,232.413 890.203,231.277 890.771,230.146 891.34,229.405 891.908,232.541 892.476,234.608 893.045,235.669 893.613,234.477 894.181,233.319 894.75,234.189 895.318,235.044 895.886,234.524 896.455,235.33 897.023,233.089 897.591,233.994 898.16,232.593 898.728,231.306 899.296,231.428 899.865,233.832 900.433,233.515 901.001,235.328 901.57,237.073 902.138,235.384 902.707,234.981 903.275,234.808 903.843,233.567 904.412,234.341 904.98,233.248 905.548,231.895 906.117,230.703 906.685,230.706 907.253,231.782 907.822,230.735 908.39,230.838 908.958,231.926 909.527,231.817 910.095,232.608 910.663,229.453 911.232,229.531 911.8,230.273 912.368,229.448 912.937,231.789 913.505,230.884 914.073,232.721 914.642,234.529 915.21,234.337 915.779,233.973 916.347,232.663 916.915,229.24 917.484,233.336 918.052,231.996 918.62,231.962 919.189,231.871 919.757,229.735 920.325,229.825 920.894,231.061 921.462,232.09 922.03,227.907 922.599,228.422 923.167,228.656 923.735,226.772 924.304,229.276 924.872,231.316 925.44,232.276 926.009,232.244 926.577,231.298 927.145,231.206 927.714,231.016 928.282,230.843 928.85,228.905 929.419,227.809 929.987,227.25 930.556,228.545 931.124,227.65 931.692,226.799 932.261,227.134 932.829,228.261 933.397,229.598 933.966,229.775 934.534,231.1 935.102,232.077 935.671,233.217 936.239,236.258 936.807,235.963 937.376,236.791 937.944,237.434 938.512,236.908 939.081,237.588 939.649,237.18 940.217,236.736 940.786,237.22 941.354,234.675 941.922,234.444 942.491,233.19 943.059,233.923 943.627,233.793 944.196,234.551 944.764,234.169 945.333,235.118 945.901,233.772 946.469,232.469 947.038,232.35 947.606,231.051 948.174,229.847 948.743,230.807 949.311,232.704 949.879,233.568 950.448,232.225 951.016,229.047 951.584,233.495 952.153,233.309 952.721,231.038 953.289,231.009 953.858,230.933 954.426,229.923 954.994,228.934 955.563,228.022 956.131,227.268 956.699,227.58 957.268,226.92 957.836,228.107 958.405,228.326 958.973,226.632 959.541,226.904 960.11,227.209 960.678,227.573 961.246,225.991 961.815,226.256 962.383,226.493 962.951,226.028 963.52,226.477 964.088,226.696 964.656,228.091 965.225,226.152 965.793,225.65 966.361,225.017 966.93,222.708 967.498,221.188 968.066,222.833 968.635,223.457 969.203,226.059 969.771,227.336 970.34,224.48 970.908,225.874 971.476,227.2 972.045,226.456 972.613,225.875 973.182,226.383 973.75,227.003 974.318,227.518 974.887,226.016 975.455,225.736 976.023,223.26 976.592,226.004 977.16,227.584 977.728,228.052 978.297,228.37 978.865,233.052 979.433,232.003 980.002,233.188 980.57,231.122 981.138,231.204 981.707,231.572 982.275,231.659 982.843,234.795 983.412,234.752 983.98,234.605 984.548,232.552 985.117,232.57 985.685,233.583 986.253,234.411 986.822,234.304 987.39,235.096 987.959,233.898 988.527,236.74 989.095,236.34 989.664,235.028 990.232,233.962 990.8,235.065 991.369,234.812 991.937,237.643 992.505,240.359 993.074,240.706 993.642,240.199 994.21,241.559 994.779,241.549 995.347,240.954 995.915,241.244 996.484,240.599 997.052,239.847 997.62,238.1 998.189,237.677 998.757,236.098 999.325,234.763 999.894,234.683 1000.46,236.465 1001.03,236.206 1001.6,236.002 1002.17,235.601 1002.74,236.141 1003.3,235.621 1003.87,234.078 1004.44,234.878 1005.01,232.474 1005.58,232.213 1006.15,235.256 1006.71,233.883 1007.28,232.645 1007.85,231.318 1008.42,231.134 1008.99,229.931 1009.56,228.888 1010.12,229.173 1010.69,228.401 1011.26,227.415 1011.83,228.834 1012.4,230.147 1012.97,232.277 1013.53,231.371 1014.1,234.31 1014.67,233.971 1015.24,234.86 1015.81,237.302 1016.38,234.706 1016.94,234.54 1017.51,235.187 1018.08,233.784 1018.65,233.276 1019.22,232.884 1019.79,233.64 1020.35,234.185 1020.92,233.722 1021.49,233.529 1022.06,233.326 1022.63,233.129 1023.2,230.722 1023.76,228.654 1024.33,228.72 1024.9,229.791 1025.47,226.629 1026.04,226.95 1026.61,227.201 1027.17,227.362 1027.74,226.095 1028.31,226.257 1028.88,225.488 1029.45,225.886 1030.02,225.21 1030.58,228.527 1031.15,227.692 1031.72,226.926 1032.29,228.065 1032.86,227.005 1033.43,226.397 1033.99,225.706 1034.56,227.284 1035.13,226.482 1035.7,229.087 1036.27,229.169 1036.84,229.208 1037.4,229.138 1037.97,229.381 1038.54,229.483 1039.11,228.626 1039.68,227.888 1040.25,230.178 1040.81,228.108 1041.38,228.121 1041.95,227.053 1042.52,228.254 1043.09,229.609 1043.66,230.707 1044.22,230.597 1044.79,230.741 1045.36,231.903 1045.93,232.876 1046.5,231.732 1047.07,230.931 1047.63,227.712 1048.2,229.083 1048.77,228.039 1049.34,227.513 1049.91,226.841 1050.48,228.246 1051.05,227.575 1051.61,229.014 1052.18,228.198 1052.75,229.662 1053.32,231.752 1053.89,231.799 1054.46,235.793 1055.02,237.587 1055.59,235.189 1056.16,233.999 1056.73,233.956 1057.3,233.953 1057.87,231.585 1058.43,231.233 1059,232.166 1059.57,232.227 1060.14,232.091 1060.71,232.055 1061.28,233.11 1061.84,233.003 1062.41,232.739 1062.98,232.752 1063.55,232.574 1064.12,233.575 1064.69,230.273 1065.25,230.423 1065.82,230.348 1066.39,228.469 1066.96,227.837 1067.53,227.959 1068.1,224.122 1068.66,221.353 1069.23,223.022 1069.8,222.676 1070.37,223.081 1070.94,224.702 1071.51,226.191 1072.07,227.693 1072.64,229.85 1073.21,229.893 1073.78,229.225 1074.35,229.492 1074.92,231.773 1075.48,230.923 1076.05,229.959 1076.62,231.051 1077.19,231.166 1077.76,230.16 1078.33,230.292 1078.89,229.386 1079.46,229.452 1080.03,229.774 1080.6,232.975 1081.17,234.995 1081.74,234.009 1082.3,232.952 1082.87,233.954 1083.44,235.695 1084.01,231.319 1084.58,232.502 1085.15,233.465 1085.71,233.624 1086.28,233.699 1086.85,233.499 1087.42,234.426 1087.99,236.196 1088.56,235.019 1089.12,232.793 1089.69,233.794 1090.26,235.675 1090.83,236.344 1091.4,238.121 1091.97,238.84 1092.53,238.201 1093.1,238.031 1093.67,237.597 1094.24,236.16 1094.81,234.517 1095.38,232.437 1095.94,231.26 1096.51,231.955 1097.08,228.934 1097.65,229.066 1098.22,228.068 1098.79,229.23 1099.35,230.363 1099.92,231.408 1100.49,231.25 1101.06,231.211 1101.63,230.109 1102.2,227.059 1102.76,228.32 1103.33,229.578 1103.9,229.679 1104.47,233.908 1105.04,233.7 1105.61,233.611 1106.17,232.477 1106.74,234.571 1107.31,234.532 1107.88,233.126 1108.45,235.841 1109.02,237.443 1109.58,239.036 1110.15,239.263 1110.72,238.714 1111.29,237.995 1111.86,237.437 1112.43,235.81 1112.99,236.136 1113.56,235.699 1114.13,236.129 1114.7,235.646 1115.27,233.037 1115.84,231.566 1116.4,231.282 1116.97,231.074 1117.54,228.804 1118.11,227.958 1118.68,227.91 1119.25,227.701 1119.81,226.785 1120.38,224.996 1120.95,225.33 1121.52,224.706 1122.09,224.083 1122.66,224.449 1123.23,223.837 1123.79,224.289 1124.36,224.461 1124.93,224.867 1125.5,224.292 1126.07,227.8 1126.64,229.174 1127.2,228.503 1127.77,226.655 1128.34,225.865 1128.91,228.384 1129.48,228.55 1130.05,229.647 1130.61,229.859 1131.18,229.984 1131.75,230.186 1132.32,229.41 1132.89,229.526 1133.46,230.648 1134.02,232.578 1134.59,230.257 1135.16,230.273 1135.73,229.23 1136.3,229.456 1136.87,230.616 1137.43,230.931 1138,231.022 1138.57,232.033 1139.14,232.164 1139.71,233.292 1140.28,233.198 1140.84,234.37 1141.41,233.06 1141.98,232.027 1142.55,231.098 1143.12,231.305 1143.69,229.301 1144.25,227.48 1144.82,226.962 1145.39,225.415 1145.96,226.953 1146.53,228.295 1147.1,228.291 1147.66,226.455 1148.23,225.642 1148.8,226.025 1149.37,226.536 1149.94,226.94 1150.51,225.103 1151.07,224.391 1151.64,225.097 1152.21,225.639 1152.78,228.046 1153.35,229.608 1153.92,230.642 1154.48,229.664 1155.05,228.953 1155.62,234.239 1156.19,232.387 1156.76,232.479 1157.33,231.706 1157.89,230.713 1158.46,231.592 1159.03,228.555 1159.6,227.81 1160.17,227.26 1160.74,228.577 1161.3,231.115 1161.87,235.252 1162.44,235.304 1163.01,238.106 1163.58,237.808 1164.15,237.437 1164.71,237.34 1165.28,235.949 1165.85,234.459 1166.42,233.384 1166.99,234.048 1167.56,233.758 1168.12,235.644 1168.69,236.52 1169.26,234.988 1169.83,235.841 1170.4,235.615 1170.97,234.397 1171.53,236.331 1172.1,234.963 1172.67,232.571 1173.24,232.534 1173.81,232.476 1174.38,232.43 1174.94,230.593 1175.51,229.702 1176.08,229.71 1176.65,227.673 1177.22,228.99 1177.79,231.342 1178.35,232.137 1178.92,232.96 1179.49,232.811 1180.06,233.692 1180.63,233.733 1181.2,233.49 1181.76,232.364 1182.33,230.273 1182.9,228.25 1183.47,231.273 1184.04,233.291 1184.61,231.013 1185.17,232.082 1185.74,231.971 1186.31,230.819 1186.88,230.852 1187.45,231.934 1188.02,230.769 1188.58,229.717 1189.15,229.987 1189.72,231.997 1190.29,232.815 1190.86,231.568 1191.43,230.598 1192,231.558 1192.56,231.671 1193.13,228.658 1193.7,228.752 1194.27,231.206 1194.84,232.474 1195.41,233.507 1195.97,233.439 1196.54,232.15 1197.11,231.027 1197.68,229.069 1198.25,229.434 1198.82,227.652 1199.38,226.863 1199.95,226.243 1200.52,224.606 1201.09,225.952 1201.66,228.551 1202.23,230.668 1202.79,231.929 1203.36,230.852 1203.93,230.966 1204.5,231.168 1205.07,229.026 1205.64,227.205 1206.2,229.487 1206.77,230.596 1207.34,227.492 1207.91,227.791 1208.48,229.119 1209.05,229.327 1209.61,229.333 1210.18,229.364 1210.75,229.594 1211.32,229.717 1211.89,229.877 1212.46,230.918 1213.02,232.128 1213.59,231.984 1214.16,232.084 1214.73,231.985 1215.3,231.98 1215.87,230.12 1216.43,230.176 1217,230.431 1217.57,230.676 1218.14,233.995 1218.71,232.897 1219.28,234.659 1219.84,234.397 1220.41,236.258 1220.98,235.87 1221.55,239.533 1222.12,240.382 1222.69,238.702 1223.25,237.031 1223.82,235.663 1224.39,233.168 1224.96,233.125 1225.53,233.891 1226.1,234.895 1226.66,233.385 1227.23,231.308 1227.8,229.169 1228.37,230.22 1228.94,232.17 1229.51,233.002 1230.07,232.839 1230.64,232.602 1231.21,232.353 1231.78,232.218 1232.35,230.936 1232.92,230.719 1233.48,228.601 1234.05,229.813 1234.62,229.933 1235.19,228.68 1235.76,231.136 1236.33,232.203 1236.89,227.89 1237.46,225.859 1238.03,226.214 1238.6,226.566 1239.17,227.68 1239.74,229.911 1240.3,233.222 1240.87,232.971 1241.44,233.805 1242.01,233.465 1242.58,236.445 1243.15,238.06 1243.71,235.394 1244.28,236.075 1244.85,235.767 1245.42,232.265 1245.99,230.069 1246.56,230.08 1247.12,230.055 1247.69,233.064 1248.26,235.094 1248.83,232.856 1249.4,230.684 1249.97,230.744 1250.53,230.64 1251.1,228.621 1251.67,230.944 1252.24,232.092 1252.81,231.985 1253.38,232.024 1253.94,232.004 1254.51,230.876 1255.08,231.798 1255.65,231.708 1256.22,231.668 1256.79,230.484 1257.35,230.79 1257.92,230.789 1258.49,228.678 1259.06,228.789 1259.63,229.092 1260.2,229.998 1260.76,227.272 1261.33,226.658 1261.9,225.832 1262.47,225.946 1263.04,226.116 1263.61,227.365 1264.18,225.511 1264.74,224.613 1265.31,227.44 1265.88,228.888 1266.45,229.98 1267.02,231.3 1267.59,230.193 1268.15,228.415 1268.72,229.616 1269.29,230.824 1269.86,231.819 1270.43,234.903 1271,234.521 1271.56,232.313 1272.13,233.337 1272.7,231.047 1273.27,232.139 1273.84,232.286 1274.41,231.039 1274.97,231.076 1275.54,232.184 1276.11,231.209 1276.68,229.249 1277.25,229.559 1277.82,228.74 1278.38,229.963 1278.95,227.759 1279.52,229.135 1280.09,229.623 1280.66,229.83 1281.23,229.976 1281.79,228.931 1282.36,229.952 1282.93,228.144 1283.5,228.427 1284.07,228.554 1284.64,225.767 1285.2,225.283 1285.77,226.547 1286.34,228.135 1286.91,225.308 1287.48,227.856 1288.05,229.264 1288.61,231.557 1289.18,233.555 1289.75,234.462 1290.32,234.199 1290.89,234.091 1291.46,234.892 1292.02,235.823 1292.59,235.687 1293.16,237.2 1293.73,233.851 1294.3,231.6 1294.87,228.453 1295.43,227.706 1296,228.843 1296.57,229.986 1297.14,230.941 1297.71,231.899 1298.28,232.967 1298.84,233.834 1299.41,229.537 1299.98,230.733 1300.55,228.841 1301.12,230.166 1301.69,231.386 1302.25,231.588 1302.82,233.673 1303.39,232.733 1303.96,233.726 1304.53,230.641 1305.1,229.772 1305.66,228.989 1306.23,229.198 1306.8,228.496 1307.37,229.791 1307.94,225.665 1308.51,228.106 1309.07,229.364 1309.64,229.36 1310.21,229.49 1310.78,228.597 1311.35,229.962 1311.92,231.335 1312.48,231.385 1313.05,231.471 1313.62,231.45 1314.19,231.461 1314.76,231.414 1315.33,230.477 1315.89,230.614 1316.46,230.737 1317.03,227.778 1317.6,230.103 1318.17,232.462 1318.74,233.639 1319.3,235.547 1319.87,234.176 1320.44,234.909 1321.01,236.861 1321.58,235.519 1322.15,234.058 1322.71,234.906 1323.28,234.657 1323.85,235.76 1324.42,236.38 1324.99,238.083 1325.56,234.498 1326.12,235.325 1326.69,237.045 1327.26,236.446 1327.83,236.779 1328.4,236.482 1328.97,236.091 1329.53,235.77 1330.1,236.392 1330.67,234.903 1331.24,233.526 1331.81,232.216 1332.38,233.093 1332.94,231.801 1333.51,231.701 1334.08,232.634 1334.65,231.455 1335.22,231.487 1335.79,232.245 1336.36,231.874 1336.92,231.721 1337.49,229.592 1338.06,227.476 1338.63,228.505 1339.2,230.672 1339.77,230.711 1340.33,234.029 1340.9,235.837 1341.47,236.452 1342.04,232.077 1342.61,232.332 1343.18,232.254 1343.74,231.18 1344.31,231.205 1344.88,233.141 1345.45,233.889 1346.02,230.628 1346.59,232.616 1347.15,231.476 1347.72,230.264 1348.29,230.317 1348.86,232.236 1349.43,231.92 1350,231.755 1350.56,231.707 1351.13,229.403 1351.7,231.382 1352.27,231.049 1352.84,232.846 1353.41,233.788 1353.97,235.441 1354.54,232.737 1355.11,232.521 1355.68,232.338 1356.25,232.012 1356.82,232.699 1357.38,232.383 1357.95,230.252 1358.52,228.323 1359.09,229.617 1359.66,229.585 1360.23,227.338 1360.79,227.623 1361.36,226.805 1361.93,228.369 1362.5,227.487 1363.07,225.545 1363.64,225.033 1364.2,223.307 1364.77,224.698 1365.34,224.079 1365.91,225.494 1366.48,225.901 1367.05,226.279 1367.61,223.743 1368.18,224.213 1368.75,225.855 1369.32,228.067 1369.89,229.478 1370.46,227.549 1371.02,226.77 1371.59,226.979 1372.16,226.158 1372.73,226.616 1373.3,226.823 1373.87,227.357 1374.43,228.646 1375,228.809 1375.57,228.956 1376.14,228.011 1376.71,229.416 1377.28,230.786 1377.84,231.756 1378.41,231.622 1378.98,232.556 1379.55,232.485 1380.12,233.744 1380.69,231.476 1381.25,230.459 1381.82,229.482 1382.39,229.515 1382.96,229.653 1383.53,230.917 1384.1,229.883 1384.66,229.705 1385.23,228.701 1385.8,228.014 1386.37,226.292 1386.94,225.704 1387.51,226.125 1388.07,228.513 1388.64,227.647 1389.21,229.019 1389.78,230.114 1390.35,229.265 1390.92,228.434 1391.48,229.808 1392.05,229.885 1392.62,231.053 1393.19,232.227 1393.76,232.336 1394.33,230.234 1394.89,231.531 1395.46,231.77 1396.03,230.855 1396.6,230.725 1397.17,230.863 1397.74,230.947 1398.3,230.935 1398.87,231.993 1399.44,231.127 1400.01,229.289 1400.58,231.739 1401.15,231.925 1401.71,233.038 1402.28,232.088 1402.85,234.322 1403.42,231.035 1403.99,233.209 1404.56,232.075 1405.13,232.08 1405.69,232.041 1406.26,233.079 1406.83,235.138 1407.4,235.126 1407.97,233.923 1408.54,236.94 1409.1,235.49 1409.67,237.202 1410.24,236.994 1410.81,237.649 1411.38,235.287 1411.95,238.282 1412.51,238.608 1413.08,240.206 1413.65,238.529 1414.22,237.095 1414.79,237.464 1415.36,234.912 1415.92,233.4 1416.49,232.179 1417.06,233.001 1417.63,232.881 1418.2,234.881 1418.77,234.471 1419.33,235.228 1419.9,234.999 1420.47,233.622 1421.04,233.581 1421.61,234.299 1422.18,235.008 1422.74,233.454 1423.31,233.175 1423.88,230.999 1424.45,226.939 1425.02,228.335 1425.59,228.556 1426.15,229.564 1426.72,229.558 1427.29,228.713 1427.86,227.86 1428.43,227.008 1429,226.121 1429.56,226.401 1430.13,227.763 1430.7,225.65 1431.27,225.899 1431.84,226.177 1432.41,227.347 1432.97,227.662 1433.54,229.893 1434.11,227.613 1434.68,227.671 1435.25,226.957 1435.82,227.371 1436.38,229.642 1436.95,230.86 1437.52,230.847 1438.09,229.869 1438.66,229.814 1439.23,228.879 1439.79,227.805 1440.36,228.191 1440.93,228.609 1441.5,228.791 1442.07,229.793 1442.64,228.971 1443.2,228.123 1443.77,227.265 1444.34,227.754 1444.91,228.03 1445.48,230.213 1446.05,231.32 1446.61,231.347 1447.18,232.284 1447.75,231.101 1448.32,231.205 1448.89,229.964 1449.46,229.278 1450.02,230.208 1450.59,230.146 1451.16,230.047 1451.73,231.272 1452.3,230.501 1452.87,231.638 1453.43,230.558 1454,232.726 1454.57,231.65 1455.14,231.927 1455.71,231.641 1456.28,234.682 1456.84,235.732 1457.41,237.497 1457.98,236.947 1458.55,234.544 1459.12,233.303 1459.69,233.154 1460.25,233.069 1460.82,233.945 1461.39,232.729 1461.96,233.476 1462.53,232.262 1463.1,233.006 1463.66,234.012 1464.23,233.729 1464.8,229.199 1465.37,227.392 1465.94,225.583 1466.51,227.859 1467.07,226.856 1467.64,228.144 1468.21,228.374 1468.78,228.4 1469.35,226.633 1469.92,226.748 1470.48,228.082 1471.05,229.205 1471.62,232.473 1472.19,232.395 1472.76,233.376 1473.33,235.122 1473.89,235.822 1474.46,236.696 1475.03,235.192 1475.6,232.827 1476.17,232.703 1476.74,234.436 1477.31,236.399 1477.87,238.226 1478.44,237.736 1479.01,238.243 1479.58,238.821 1480.15,237.004 1480.72,234.352 1481.28,232.992 1481.85,231.765 1482.42,231.647 1482.99,231.393 1483.56,231.147 1484.13,230.088 1484.69,229.06 1485.26,228.289 1485.83,230.51 1486.4,229.506 1486.97,230.536 1487.54,229.566 1488.1,229.651 1488.67,229.64 1489.24,230.912 1489.81,230.944 1490.38,231.069 1490.95,230.162 1491.51,231.275 1492.08,231.119 1492.65,231.24 1493.22,231.003 1493.79,231.055 1494.36,227.983 1494.92,229.18 1495.49,230.287 1496.06,230.21 1496.63,230.285 1497.2,229.364 1497.77,230.669 1498.33,230.791 1498.9,231.043 1499.47,229.846 1500.04,230.951 1500.61,233.056 1501.18,231.713 1501.74,230.417 1502.31,232.564 1502.88,230.416 1503.45,229.455 1504.02,229.395 1504.59,230.479 1505.15,229.435 1505.72,229.855 1506.29,228.904 1506.86,229.977 1507.43,232.148 1508,233.139 1508.56,234.107 1509.13,232.77 1509.7,230.566 1510.27,231.572 1510.84,231.279 1511.41,230.23 1511.97,230.224 1512.54,232.17 1513.11,231.123 1513.68,233.211 1514.25,233.062 1514.82,232.78 1515.38,232.582 1515.95,228.585 1516.52,229.761 1517.09,228.717 1517.66,229.983 1518.23,230.022 1518.79,231.119 1519.36,230.154 1519.93,231.047 1520.5,232.004 1521.07,231.945 1521.64,229.969 1522.2,233.056 1522.77,235.141 1523.34,234.708 1523.91,233.279 1524.48,231.089 1525.05,232.088 1525.61,230.915 1526.18,232.752 1526.75,232.529 1527.32,231.361 1527.89,230.102 1528.46,230.205 1529.02,233.625 1529.59,234.623 1530.16,235.481 1530.73,235.121 1531.3,233.73 1531.87,233.466 1532.43,232.45 1533,234.232 1533.57,234.861 1534.14,234.476 1534.71,231.924 1535.28,230.703 1535.84,230.764 1536.41,232.605 1536.98,232.283 1537.55,230.962 1538.12,230.85 1538.69,231.599 1539.25,231.517 1539.82,231.526 1540.39,230.389 1540.96,232.396 1541.53,232.054 1542.1,231.804 1542.66,231.721 1543.23,231.643 1543.8,230.448 1544.37,229.5 1544.94,228.476 1545.51,229.674 1546.08,230.68 1546.64,228.622 1547.21,228.773 1547.78,228.849 1548.35,228.617 1548.92,225.674 1549.49,223.895 1550.05,220.201 1550.62,219.895 1551.19,221.664 1551.76,223.342 1552.33,225.014 1552.9,225.482 1553.46,225.968 1554.03,226.31 1554.6,226.439 1555.17,224.777 1555.74,224.12 1556.31,223.833 1556.87,225.379 1557.44,225.755 1558.01,227.322 1558.58,227.732 1559.15,228.219 1559.72,227.662 1560.28,228.976 1560.85,232.109 1561.42,232.338 1561.99,232.415 1562.56,230.703 1563.13,228.667 1563.69,230.755 1564.26,230.85 1564.83,230.948 1565.4,230.222 1565.97,229.383 1566.54,229.721 1567.1,232.264 1567.67,232.23 1568.24,231.158 1568.81,231.046 1569.38,232.312 1569.95,231.101 1570.51,231.29 1571.08,229.211 1571.65,228.305 1572.22,228.615 1572.79,231.853 1573.36,230.939 1573.92,231.193 1574.49,229.454 1575.06,230.492 1575.63,232.424 1576.2,234.481 1576.77,234.598 1577.33,234.366 1577.9,234.222 1578.47,233.897 1579.04,234.831 1579.61,232.518 1580.18,235.564 1580.74,236.302 1581.31,237.034 1581.88,236.49 1582.45,235.333 1583.02,232.972 1583.59,232.989 1584.15,231.887 1584.72,232.051 1585.29,230.912 1585.86,233.836 1586.43,233.781 1587,234.697 1587.56,235.382 1588.13,238.124 1588.7,239.447 1589.27,237.892 1589.84,237.478 1590.41,235.988 1590.97,236.572 1591.54,233.104 1592.11,231.903 1592.68,232.004 1593.25,230.042 1593.82,230.156 1594.38,232.298 1594.95,231.751 1595.52,232.819 1596.09,233.623 1596.66,232.425 1597.23,234.379 1597.79,235.064 1598.36,234.797 1598.93,236.569 1599.5,238.114 1600.07,236.23 1600.64,238.642 1601.2,235.786 1601.77,234.27 1602.34,235.976 1602.91,235.459 1603.48,236.973 1604.05,233.387 1604.61,233.849 1605.18,231.59 1605.75,232.29 1606.32,230.85 1606.89,232.77 1607.46,233.484 1608.02,232.122 1608.59,232.822 1609.16,231.391 1609.73,231.225 1610.3,228.054 1610.87,228.953 1611.43,228.927 1612,228.871 1612.57,231.043 1613.14,230.951 1613.71,228.708 1614.28,230.011 1614.84,228.827 1615.41,228.756 1615.98,229.834 1616.55,229.859 1617.12,230.823 1617.69,228.802 1618.26,227.713 1618.82,225.752 1619.39,225.18 1619.96,224.661 1620.53,224.989 1621.1,224.347 1621.67,221.585 1622.23,222.087 1622.8,222.738 1623.37,224.227 1623.94,224.607 1624.51,227.155 1625.08,229.49 1625.64,230.621 1626.21,232.504 1626.78,233.387 1627.35,234.163 1627.92,232.701 1628.49,234.389 1629.05,235.043 1629.62,233.373 1630.19,232.061 1630.76,230.883 1631.33,231.755 1631.9,228.282 1632.46,228.239 1633.03,228.544 1633.6,229.455 1634.17,227.53 1634.74,225.779 1635.31,226.115 1635.87,226.487 1636.44,232.161 1637.01,229.819 1637.58,229.841 1638.15,229.902 1638.72,230.064 1639.28,228.893 1639.85,229.992 1640.42,228.97 1640.99,229.084 1641.56,229.38 1642.13,228.627 1642.69,228.787 1643.26,226.824 1643.83,227.191 1644.4,228.445 1644.97,230.75 1645.54,232.646 1646.1,233.629 1646.67,232.323 1647.24,231.845 1647.81,230.835 1648.38,230.813 1648.95,231.096 1649.51,230.149 1650.08,230.277 1650.65,231.471 1651.22,233.762 1651.79,232.667 1652.36,234.443 1652.92,233.145 1653.49,232.935 1654.06,231.802 1654.63,231.925 1655.2,230.706 1655.77,228.598 1656.33,226.706 1656.9,226.055 1657.47,226.337 1658.04,226.689 1658.61,226.089 1659.18,227.394 1659.74,227.745 1660.31,228.893 1660.88,225.719 1661.45,223.158 1662.02,224.974 1662.59,225.364 1663.15,225.789 1663.72,225.982 1664.29,224.21 1664.86,226.051 1665.43,227.535 1666,227.97 1666.56,227.29 1667.13,225.813 1667.7,228.529 1668.27,228.805 1668.84,229.331 1669.41,229.592 1669.97,230.957 1670.54,230.716 1671.11,230.892 1671.68,232.102 1672.25,232.24 1672.82,233.308 1673.38,234.37 1673.95,234.243 1674.52,233.26 1675.09,230.284 1675.66,231.455 1676.23,232.357 1676.79,232.199 1677.36,231.22 1677.93,233.353 1678.5,233.16 1679.07,231.797 1679.64,230.817 1680.2,230.766 1680.77,230.915 1681.34,230.952 1681.91,232.943 1682.48,232.856 1683.05,230.641 1683.61,230.786 1684.18,230.918 1684.75,228.929 1685.32,229.128 1685.89,230.433 1686.46,231.728 1687.02,229.875 1687.59,230.154 1688.16,229.191 1688.73,231.537 1689.3,232.63 1689.87,234.552 1690.44,234.546 1691,234.418 1691.57,232.274 1692.14,233.211 1692.71,233.25 1693.28,233.221 1693.85,232.203 1694.41,232.068 1694.98,230.95 1695.55,233.083 1696.12,234.021 1696.69,232.799 1697.26,232.783 1697.82,230.717 1698.39,229.619 1698.96,230.86 1699.53,231.731 1700.1,232.692 1700.67,233.362 1701.23,234.515 1701.8,234.453 1702.37,234.256 1702.94,235.015 1703.51,235.728 1704.08,237.42 1704.64,236.984 1705.21,236.526 1705.78,236.257 1706.35,234.618 1706.92,234.298 1707.49,233.711 1708.05,235.397 1708.62,235.076 1709.19,234.868 1709.76,236.65 1710.33,236.337 1710.9,233.84 1711.46,232.583 1712.03,233.639 1712.6,232.263 1713.17,232.372 1713.74,232.176 1714.31,231.932 1714.87,230.653 1715.44,232.663 1716.01,232.54 1716.58,231.183 1717.15,230.178 1717.72,231.246 1718.28,232.143 1718.85,231.346 1719.42,231.284 1719.99,232.333 1720.56,232.242 1721.13,233.084 1721.69,232.825 1722.26,233.747 1722.83,232.5 1723.4,233.262 1723.97,234.013 1724.54,233.772 1725.1,233.566 1725.67,231.349 1726.24,232.216 1726.81,231.055 1727.38,227.978 1727.95,228.982 1728.51,227.867 1729.08,226.072 1729.65,226.323 1730.22,226.842 1730.79,225.895 1731.36,227.673 1731.92,226.783 1732.49,226.984 1733.06,230.286 1733.63,230.283 1734.2,229.205 1734.77,229.356 1735.33,232.692 1735.9,233.546 1736.47,234.425 1737.04,233.249 1737.61,231.133 1738.18,231.189 1738.74,231.088 1739.31,229.106 1739.88,230.259 1740.45,231.274 1741.02,232.248 1741.59,233.224 1742.15,234.109 1742.72,234.79 1743.29,233.476 1743.86,233.164 1744.43,231.796 1745,232.588 1745.56,232.325 1746.13,230.112 1746.7,230.042 1747.27,229.034 1747.84,230.177 1748.41,232.293 1748.97,230.937 1749.54,232.82 1750.11,234.702 1750.68,236.49 1751.25,237.051 1751.82,235.343 1752.38,234.084 1752.95,234.951 1753.52,232.446 1754.09,233.085 1754.66,230.763 1755.23,230.652 1755.79,229.555 1756.36,230.808 1756.93,229.658 1757.5,231.88 1758.07,232.966 1758.64,234.95 1759.21,234.437 1759.77,233.075 1760.34,234.953 1760.91,233.415 1761.48,233.034 1762.05,230.515 1762.62,231.553 1763.18,230.475 1763.75,231.384 1764.32,232.141 1764.89,233.094 1765.46,232.84 1766.03,232.324 1766.59,233.206 1767.16,229.615 1767.73,228.384 1768.3,228.535 1768.87,230.686 1769.44,229.392 1770,231.498 1770.57,230.203 1771.14,230.248 1771.71,231.416 1772.28,232.257 1772.85,233.019 1773.41,232.736 1773.98,232.521 1774.55,230.309 1775.12,230.544 1775.69,228.444 1776.26,227.563 1776.82,225.944 1777.39,226.193 1777.96,225.59 1778.53,224.852 1779.1,223.232 1779.67,225.602 1780.23,226.922 1780.8,226.909 1781.37,230.015 1781.94,229.038 1782.51,227.973 1783.08,226.011 1783.64,223.463 1784.21,226.126 1784.78,225.469 1785.35,226.867 1785.92,228.194 1786.49,229.659 1787.05,229.815 1787.62,226.529 1788.19,223.675 1788.76,225.32 1789.33,225.63 1789.9,226.008 1790.46,227.281 1791.03,227.468 1791.6,228.003 1792.17,229.223 1792.74,229.433 1793.31,230.413 1793.87,230.44 1794.44,230.527 1795.01,231.639 1795.58,231.581 1796.15,232.598 1796.72,233.551 1797.28,235.502 1797.85,238.176 1798.42,233.621 1798.99,234.459 1799.56,234.417 1800.13,231.164 1800.69,231.21 1801.26,231.179 1801.83,233.228 1802.4,235.212 1802.97,234.993 1803.54,234.616 1804.1,233.099 1804.67,231.974 1805.24,231.029 1805.81,230.852 1806.38,228.893 1806.95,229.11 1807.51,228.961 1808.08,229.244 1808.65,226.348 1809.22,226.708 1809.79,226.084 1810.36,227.609 1810.92,224.863 1811.49,226.483 1812.06,228.055 1812.63,229.574 1813.2,227.61 1813.77,228.822 1814.33,228.802 1814.9,228.833 1815.47,228.808 1816.04,229.015 1816.61,230.099 1817.18,230.203 1817.74,232.21 1818.31,231.136 1818.88,232.358 1819.45,233.377 1820.02,233.3 1820.59,231.088 1821.15,229.318 1821.72,228.317 1822.29,230.71 1822.86,233.037 1823.43,232.802 1824,233.778 1824.56,232.418 1825.13,232.549 1825.7,231.413 1826.27,231.493 1826.84,230.355 1827.41,229.603 1827.97,229.746 1828.54,230.897 1829.11,229.974 1829.68,231.01 1830.25,231.043 1830.82,232.109 1831.39,234.15 1831.95,234.952 1832.52,231.63 1833.09,232.706 1833.66,230.671 1834.23,229.926 1834.8,230.987 1835.36,234.95 1835.93,233.816 1836.5,232.825 1837.07,232.824 1837.64,234.682 1838.21,234.485 1838.77,233.353 1839.34,233.264 1839.91,232.197 1840.48,233.136 1841.05,231.831 1841.62,230.702 1842.18,230.618 1842.75,231.707 1843.32,230.534 1843.89,230.692 1844.46,230.692 1845.03,230.515 1845.59,232.594 1846.16,231.323 1846.73,232.286 1847.3,230.187 1847.87,230.312 1848.44,230.418 1849,229.54 1849.57,229.233 1850.14,232.401 1850.71,230.187 1851.28,228.278 1851.85,226.45 1852.41,227.743 1852.98,228.835 1853.55,227.029 1854.12,226.432 1854.69,228.831 1855.26,231.019 1855.82,229.803 1856.39,227.935 1856.96,225.06 1857.53,227.49 1858.1,225.679 1858.67,227.055 1859.23,226.63 1859.8,229.093 1860.37,228.362 1860.94,230.682 1861.51,229.758 1862.08,230.929 1862.64,230.071 1863.21,231.273 1863.78,234.399 1864.35,233.218 1864.92,234.271 1865.49,238.106 1866.05,238.593 1866.62,238.998 1867.19,238.326 1867.76,237.646 1868.33,236.068 1868.9,233.713 1869.46,233.488 1870.03,234.59 1870.6,233.28 1871.17,232.126 1871.74,230.916 1872.31,230.795 1872.87,231.689 1873.44,231.511 1874.01,233.36 1874.58,235.129 1875.15,234.788 1875.72,233.596 1876.28,232.255 1876.85,230.307 1877.42,231.404 1877.99,232.613 1878.56,232.455 1879.13,231.414 1879.69,230.331 1880.26,229.3 1880.83,230.44 1881.4,230.509 1881.97,230.347 1882.54,229.24 1883.1,231.429 1883.67,231.254 1884.24,230.31 1884.81,231.54 1885.38,232.359 1885.95,234.355 1886.51,235.941 1887.08,234.653 1887.65,234.353 1888.22,230.996 1888.79,230.859 1889.36,229.707 1889.92,229.799 1890.49,228.756 1891.06,228.783 1891.63,230.008 1892.2,231.097 1892.77,227.89 1893.33,230.071 1893.9,229.15 1894.47,227.173 1895.04,226.491 1895.61,227.806 1896.18,227.95 1896.74,228.189 1897.31,228.517 1897.88,227.797 1898.45,227.838 1899.02,229.291 1899.59,228.552 1900.16,228.672 1900.72,231.086 1901.29,230.169 1901.86,232.171 1902.43,233.008 1903,232.956 1903.57,227.794 1904.13,228.924 1904.7,228.146 1905.27,228.536 1905.84,227.35 1906.41,227.812 1906.98,228.239 1907.54,228.581 1908.11,228.001 1908.68,229.162 1909.25,230.349 1909.82,231.336 1910.39,230.324 1910.95,229.149 1911.52,230.609 1912.09,232.885 1912.66,231.652 1913.23,231.408 1913.8,230.735 1914.36,229.827 1914.93,228.819 1915.5,227.998 1916.07,227.144 1916.64,227.421 1917.21,225.596 1917.77,227.103 1918.34,227.673 1918.91,226.961 1919.48,227.439 1920.05,230.794 1920.62,231.102 1921.18,232.275 1921.75,234.399 1922.32,235.325 1922.89,232.977 1923.46,232.963 1924.03,232.813 1924.59,235.581 1925.16,234.244 1925.73,231.835 1926.3,230.525 1926.87,231.743 1927.44,233.867 1928,233.813 1928.57,233.474 1929.14,233.343 1929.71,232.043 1930.28,231.746 1930.85,231.873 1931.41,231.935 1931.98,230.701 1932.55,231.779 1933.12,235.038 1933.69,232.647 1934.26,230.433 1934.82,232.398 1935.39,232.498 1935.96,231.325 1936.53,230.308 1937.1,228.273 1937.67,229.49 1938.23,230.723 1938.8,229.77 1939.37,231.14 1939.94,233.231 1940.51,233.192 1941.08,230.996 1941.64,231.063 1942.21,232.438 1942.78,232.374 1943.35,230.569 1943.92,230.68 1944.49,231.811 1945.05,229.824 1945.62,229.857 1946.19,229.016 1946.76,227.19 1947.33,227.513 1947.9,227.981 1948.46,227.04 1949.03,228.428 1949.6,230.603 1950.17,228.484 1950.74,228.718 1951.31,224.835 1951.87,225.402 1952.44,226.825 1953.01,230.486 1953.58,230.449 1954.15,230.389 1954.72,229.323 1955.28,228.504 1955.85,229.742 1956.42,230.064 1956.99,231.354 1957.56,233.55 1958.13,232.33 1958.69,230.28 1959.26,230.509 1959.83,230.549 1960.4,229.689 1960.97,230.741 1961.54,230.737 1962.1,230.964 1962.67,233.219 1963.24,232.948 1963.81,232.925 1964.38,231.935 1964.95,233.222 1965.51,232.897 1966.08,232.725 1966.65,234.664 1967.22,237.472 1967.79,234.965 1968.36,234.622 1968.92,234.324 1969.49,233.074 1970.06,234.645 1970.63,232.454 1971.2,233.246 1971.77,234.326 1972.34,233.187 1972.9,232.027 1973.47,231.964 1974.04,233.943 1974.61,232.51 1975.18,231.368 1975.75,229.487 1976.31,230.624 1976.88,232.944 1977.45,231.681 1978.02,233.56 1978.59,231.287 1979.16,232.3 1979.72,233.194 1980.29,233.029 1980.86,232.09 1981.43,230.09 1982,231.23 1982.57,231.162 1983.13,230.217 1983.7,230.287 1984.27,228.26 1984.84,228.534 1985.41,230.011 1985.98,226.908 1986.54,227.235 1987.11,227.669 1987.68,229.855 1988.25,229.811 1988.82,229.983 1989.39,232.275 1989.95,232.06 1990.52,231.953 1991.09,231.797 1991.66,231.647 1992.23,232.855 1992.8,232.531 1993.36,231.581 1993.93,230.476 1994.5,231.507 1995.07,231.25 1995.64,230.032 1996.21,230.158 1996.77,231.265 1997.34,232.374 1997.91,233.429 1998.48,234.326 1999.05,234.106 1999.62,234.971 2000.18,234.837 2000.75,234.614 2001.32,235.399 2001.89,235.04 2002.46,233.489 2003.03,233.064 2003.59,232.647 2004.16,232.474 2004.73,231.415 2005.3,232.483 2005.87,233.366 2006.44,231.994 2007,231.912 2007.57,231.693 2008.14,231.563 2008.71,231.29 2009.28,229.007 2009.85,225.998 2010.41,225.166 2010.98,225.471 2011.55,224.746 2012.12,226.262 2012.69,226.572 2013.26,226.89 2013.82,228.151 2014.39,229.366 2014.96,229.67 2015.53,230.86 2016.1,231.928 2016.67,230.767 2017.23,231.687 2017.8,230.485 2018.37,229.484 2018.94,228.707 2019.51,227.979 2020.08,230.378 2020.64,229.452 2021.21,228.644 2021.78,226.653 2022.35,228.977 2022.92,228.114 2023.49,226.24 2024.05,229.544 2024.62,230.764 2025.19,232.756 2025.76,231.637 2026.33,229.385 2026.9,229.598 2027.46,230.921 2028.03,230.944 2028.6,230.021 2029.17,230.224 2029.74,232.443 2030.31,232.339 2030.87,232.38 2031.44,232.347 2032.01,234.464 2032.58,232.016 2033.15,234.002 2033.72,233.964 2034.28,231.913 2034.85,232.89 2035.42,231.926 2035.99,231.762 2036.56,232.788 2037.13,232.679 2037.69,233.394 2038.26,231.222 2038.83,231.032 2039.4,234.133 2039.97,236.98 2040.54,238.726 2041.11,238.208 2041.67,238.72 2042.24,235.136 2042.81,233.754 2043.38,232.191 2043.95,233.16 2044.52,234.22 2045.08,231.982 2045.65,232.864 2046.22,232.787 2046.79,231.413 2047.36,229.379 2047.93,228.614 2048.49,227.474 2049.06,229.5 2049.63,228.372 2050.2,228.104 2050.77,227.638 2051.34,227.85 2051.9,227.865 2052.47,226.103 2053.04,226.365 2053.61,228.739 2054.18,230.99 2054.75,231.01 2055.31,229.976 2055.88,231.223 2056.45,227.938 2057.02,229.148 2057.59,230.366 2058.16,228.365 2058.72,227.624 2059.29,227.82 2059.86,228.938 2060.43,229.23 2061,227.389 2061.57,227.749 2062.13,228.97 2062.7,230.217 2063.27,230.233 2063.84,230.515 2064.41,230.738 2064.98,229.604 2065.54,230.753 2066.11,230.888 2066.68,231.978 2067.25,234.208 2067.82,234.288 2068.39,234.25 2068.95,237.09 2069.52,235.524 2070.09,236.104 2070.66,237.569 2071.23,237.204 2071.8,234.527 2072.36,235.225 2072.93,235.888 2073.5,235.409 2074.07,236.005 2074.64,236.614 2075.21,235.891 2075.77,234.35 2076.34,235.077 2076.91,234.671 2077.48,235.484 2078.05,235.151 2078.62,234.899 2079.18,234.582 2079.75,233.266 2080.32,233.87 2080.89,235.714 2081.46,236.234 2082.03,234.565 2082.59,233.158 2083.16,233.92 2083.73,233.692 2084.3,233.475 2084.87,235.101 2085.44,234.67 2086,234.192 2086.57,230.896 2087.14,230.882 2087.71,229.665 2088.28,230.579 2088.85,230.43 2089.41,231.526 2089.98,231.415 2090.55,231.289 2091.12,233.221 2091.69,230.771 2092.26,233.768 2092.82,231.452 2093.39,232.183 2093.96,231.794 2094.53,231.621 2095.1,230.518 2095.67,231.376 2096.23,232.346 2096.8,231.31 2097.37,230.164 2097.94,227.043 2098.51,227.441 2099.08,227.74 2099.64,229.85 2100.21,229.596 2100.78,230.418 2101.35,229.168 2101.92,229.125 2102.49,229.289 2103.05,230.533 2103.62,231.41 2104.19,232.422 2104.76,232.897 2105.33,233.485 2105.9,233.005 2106.46,234.71 2107.03,233.245 2107.6,232.836 2108.17,233.826 2108.74,233.625 2109.31,232.555 2109.87,231.345 2110.44,231.25 2111.01,230.101 2111.58,231.278 2112.15,230.234 2112.72,227.993 2113.29,229.149 2113.85,228.2 2114.42,227.358 2114.99,226.43 2115.56,227.892 2116.13,229.095 2116.7,229.302 2117.26,229.317 2117.83,226.372 2118.4,225.562 2118.97,224.772 2119.54,224.985 2120.11,228.506 2120.67,228.541 2121.24,229.723 2121.81,228.612 2122.38,229.942 2122.95,230.15 2123.52,228.438 2124.08,227.413 2124.65,228.589 2125.22,228.749 2125.79,228.787 2126.36,230.08 2126.93,230.032 2127.49,231.304 2128.06,231.142 2128.63,232.218 2129.2,230.947 2129.77,226.918 2130.34,227.096 2130.9,225.287 2131.47,226.642 2132.04,226.796 2132.61,226.802 2133.18,224.199 2133.75,225.724 2134.31,225.121 2134.88,226.394 2135.45,225.56 2136.02,225.787 2136.59,225.142 2137.16,226.387 2137.72,227.648 2138.29,226.923 2138.86,226.378 2139.43,227.119 2140,228.537 2140.57,229.781 2141.13,229.071 2141.7,229.37 2142.27,227.51 2142.84,227.902 2143.41,228.458 2143.98,230.63 2144.54,230.796 2145.11,233.046 2145.68,233.167 2146.25,233.023 2146.82,233.315 2147.39,231.128 2147.95,228.909 2148.52,227.271 2149.09,227.759 2149.66,230.316 2150.23,229.426 2150.8,228.859 2151.36,232.144 2151.93,230.933 2152.5,232.378 2153.07,232.596 2153.64,232.623 2154.21,232.824 2154.77,230.735 2155.34,231.576 2155.91,231.745 2156.48,229.735 2157.05,229.074 2157.62,229.301 2158.18,231.713 2158.75,231.837 2159.32,229.765 2159.89,230.179 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip920)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip920)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip920)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip920)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.02\n  with uncertainty of ± 0.0017877279064346424\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01397 ± (0.00177652, 0.0018383) (MC)\n  95% confidence interval: [-4.01759, -4.01051]) (MC)\n  linear error propagation: -4.01407 ± 0.00180742\n  |δ_y| = |0.0015131| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013974917761051, val_l = 0.003617753346927266, val_u = 0.003462159763588879)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip950\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip950)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip951\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip950)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip952\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1156.69 2211.02,1156.69 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1004.03 2211.02,1004.03 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,851.363 2211.02,851.363 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,698.698 2211.02,698.698 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,546.032 2211.02,546.032 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,393.366 2211.02,393.366 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,240.701 2211.02,240.701 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1156.69 365.751,1156.69 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1004.03 365.751,1004.03 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,851.363 365.751,851.363 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,698.698 365.751,698.698 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,546.032 365.751,546.032 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,393.366 365.751,393.366 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,240.701 365.751,240.701 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M298.909 1142.49 Q295.298 1142.49 293.469 1146.06 Q291.664 1149.6 291.664 1156.73 Q291.664 1163.84 293.469 1167.4 Q295.298 1170.94 298.909 1170.94 Q302.543 1170.94 304.349 1167.4 Q306.177 1163.84 306.177 1156.73 Q306.177 1149.6 304.349 1146.06 Q302.543 1142.49 298.909 1142.49 M298.909 1138.79 Q304.719 1138.79 307.775 1143.4 Q310.853 1147.98 310.853 1156.73 Q310.853 1165.46 307.775 1170.06 Q304.719 1174.65 298.909 1174.65 Q293.099 1174.65 290.02 1170.06 Q286.964 1165.46 286.964 1156.73 Q286.964 1147.98 290.02 1143.4 Q293.099 1138.79 298.909 1138.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M259.557 1017.37 L267.196 1017.37 L267.196 991.008 L258.886 992.675 L258.886 988.415 L267.15 986.749 L271.826 986.749 L271.826 1017.37 L279.465 1017.37 L279.465 1021.31 L259.557 1021.31 L259.557 1017.37 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M298.909 989.827 Q295.298 989.827 293.469 993.392 Q291.664 996.934 291.664 1004.06 Q291.664 1011.17 293.469 1014.73 Q295.298 1018.28 298.909 1018.28 Q302.543 1018.28 304.349 1014.73 Q306.177 1011.17 306.177 1004.06 Q306.177 996.934 304.349 993.392 Q302.543 989.827 298.909 989.827 M298.909 986.124 Q304.719 986.124 307.775 990.73 Q310.853 995.314 310.853 1004.06 Q310.853 1012.79 307.775 1017.4 Q304.719 1021.98 298.909 1021.98 Q293.099 1021.98 290.02 1017.4 Q286.964 1012.79 286.964 1004.06 Q286.964 995.314 290.02 990.73 Q293.099 986.124 298.909 986.124 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M262.775 864.708 L279.094 864.708 L279.094 868.643 L257.15 868.643 L257.15 864.708 Q259.812 861.953 264.395 857.324 Q269.002 852.671 270.182 851.328 Q272.428 848.805 273.307 847.069 Q274.21 845.31 274.21 843.62 Q274.21 840.866 272.266 839.129 Q270.344 837.393 267.242 837.393 Q265.043 837.393 262.59 838.157 Q260.159 838.921 257.381 840.472 L257.381 835.75 Q260.205 834.616 262.659 834.037 Q265.113 833.458 267.15 833.458 Q272.52 833.458 275.715 836.143 Q278.909 838.829 278.909 843.319 Q278.909 845.449 278.099 847.37 Q277.312 849.268 275.205 851.861 Q274.627 852.532 271.525 855.75 Q268.423 858.944 262.775 864.708 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M298.909 837.162 Q295.298 837.162 293.469 840.727 Q291.664 844.268 291.664 851.398 Q291.664 858.504 293.469 862.069 Q295.298 865.611 298.909 865.611 Q302.543 865.611 304.349 862.069 Q306.177 858.504 306.177 851.398 Q306.177 844.268 304.349 840.727 Q302.543 837.162 298.909 837.162 M298.909 833.458 Q304.719 833.458 307.775 838.065 Q310.853 842.648 310.853 851.398 Q310.853 860.125 307.775 864.731 Q304.719 869.314 298.909 869.314 Q293.099 869.314 290.02 864.731 Q286.964 860.125 286.964 851.398 Q286.964 842.648 290.02 838.065 Q293.099 833.458 298.909 833.458 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M272.914 697.343 Q276.27 698.061 278.145 700.329 Q280.043 702.598 280.043 705.931 Q280.043 711.047 276.525 713.848 Q273.006 716.649 266.525 716.649 Q264.349 716.649 262.034 716.209 Q259.742 715.792 257.289 714.936 L257.289 710.422 Q259.233 711.556 261.548 712.135 Q263.863 712.714 266.386 712.714 Q270.784 712.714 273.076 710.978 Q275.39 709.241 275.39 705.931 Q275.39 702.876 273.238 701.163 Q271.108 699.427 267.289 699.427 L263.261 699.427 L263.261 695.584 L267.474 695.584 Q270.923 695.584 272.752 694.218 Q274.58 692.83 274.58 690.237 Q274.58 687.575 272.682 686.163 Q270.807 684.728 267.289 684.728 Q265.367 684.728 263.168 685.144 Q260.969 685.561 258.33 686.441 L258.33 682.274 Q260.992 681.533 263.307 681.163 Q265.645 680.793 267.705 680.793 Q273.029 680.793 276.131 683.223 Q279.233 685.63 279.233 689.751 Q279.233 692.621 277.59 694.612 Q275.946 696.579 272.914 697.343 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M298.909 684.496 Q295.298 684.496 293.469 688.061 Q291.664 691.603 291.664 698.732 Q291.664 705.839 293.469 709.403 Q295.298 712.945 298.909 712.945 Q302.543 712.945 304.349 709.403 Q306.177 705.839 306.177 698.732 Q306.177 691.603 304.349 688.061 Q302.543 684.496 298.909 684.496 M298.909 680.793 Q304.719 680.793 307.775 685.399 Q310.853 689.982 310.853 698.732 Q310.853 707.459 307.775 712.066 Q304.719 716.649 298.909 716.649 Q293.099 716.649 290.02 712.066 Q286.964 707.459 286.964 698.732 Q286.964 689.982 290.02 685.399 Q293.099 680.793 298.909 680.793 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M271.594 532.826 L259.789 551.275 L271.594 551.275 L271.594 532.826 M270.367 528.752 L276.247 528.752 L276.247 551.275 L281.177 551.275 L281.177 555.164 L276.247 555.164 L276.247 563.312 L271.594 563.312 L271.594 555.164 L255.992 555.164 L255.992 550.65 L270.367 528.752 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M298.909 531.831 Q295.298 531.831 293.469 535.395 Q291.664 538.937 291.664 546.067 Q291.664 553.173 293.469 556.738 Q295.298 560.28 298.909 560.28 Q302.543 560.28 304.349 556.738 Q306.177 553.173 306.177 546.067 Q306.177 538.937 304.349 535.395 Q302.543 531.831 298.909 531.831 M298.909 528.127 Q304.719 528.127 307.775 532.733 Q310.853 537.317 310.853 546.067 Q310.853 554.793 307.775 559.4 Q304.719 563.983 298.909 563.983 Q293.099 563.983 290.02 559.4 Q286.964 554.793 286.964 546.067 Q286.964 537.317 290.02 532.733 Q293.099 528.127 298.909 528.127 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M258.793 376.086 L277.15 376.086 L277.15 380.021 L263.076 380.021 L263.076 388.494 Q264.094 388.146 265.113 387.984 Q266.131 387.799 267.15 387.799 Q272.937 387.799 276.316 390.97 Q279.696 394.142 279.696 399.558 Q279.696 405.137 276.224 408.239 Q272.752 411.318 266.432 411.318 Q264.256 411.318 261.988 410.947 Q259.742 410.577 257.335 409.836 L257.335 405.137 Q259.418 406.271 261.641 406.827 Q263.863 407.382 266.34 407.382 Q270.344 407.382 272.682 405.276 Q275.02 403.169 275.02 399.558 Q275.02 395.947 272.682 393.841 Q270.344 391.734 266.34 391.734 Q264.465 391.734 262.59 392.151 Q260.738 392.568 258.793 393.447 L258.793 376.086 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M298.909 379.165 Q295.298 379.165 293.469 382.73 Q291.664 386.271 291.664 393.401 Q291.664 400.507 293.469 404.072 Q295.298 407.614 298.909 407.614 Q302.543 407.614 304.349 404.072 Q306.177 400.507 306.177 393.401 Q306.177 386.271 304.349 382.73 Q302.543 379.165 298.909 379.165 M298.909 375.461 Q304.719 375.461 307.775 380.068 Q310.853 384.651 310.853 393.401 Q310.853 402.128 307.775 406.734 Q304.719 411.318 298.909 411.318 Q293.099 411.318 290.02 406.734 Q286.964 402.128 286.964 393.401 Q286.964 384.651 290.02 380.068 Q293.099 375.461 298.909 375.461 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M269.326 238.837 Q266.178 238.837 264.326 240.99 Q262.497 243.143 262.497 246.893 Q262.497 250.62 264.326 252.795 Q266.178 254.948 269.326 254.948 Q272.474 254.948 274.303 252.795 Q276.154 250.62 276.154 246.893 Q276.154 243.143 274.303 240.99 Q272.474 238.837 269.326 238.837 M278.608 224.185 L278.608 228.444 Q276.849 227.61 275.043 227.171 Q273.261 226.731 271.502 226.731 Q266.872 226.731 264.418 229.856 Q261.988 232.981 261.641 239.3 Q263.006 237.286 265.066 236.221 Q267.127 235.134 269.603 235.134 Q274.812 235.134 277.821 238.305 Q280.853 241.453 280.853 246.893 Q280.853 252.217 277.705 255.434 Q274.557 258.652 269.326 258.652 Q263.33 258.652 260.159 254.069 Q256.988 249.462 256.988 240.735 Q256.988 232.541 260.877 227.68 Q264.766 222.796 271.316 222.796 Q273.076 222.796 274.858 223.143 Q276.664 223.49 278.608 224.185 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M298.909 226.499 Q295.298 226.499 293.469 230.064 Q291.664 233.606 291.664 240.735 Q291.664 247.842 293.469 251.407 Q295.298 254.948 298.909 254.948 Q302.543 254.948 304.349 251.407 Q306.177 247.842 306.177 240.735 Q306.177 233.606 304.349 230.064 Q302.543 226.499 298.909 226.499 M298.909 222.796 Q304.719 222.796 307.775 227.402 Q310.853 231.985 310.853 240.735 Q310.853 249.462 307.775 254.069 Q304.719 258.652 298.909 258.652 Q293.099 258.652 290.02 254.069 Q286.964 249.462 286.964 240.735 Q286.964 231.985 290.02 227.402 Q293.099 222.796 298.909 222.796 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip952)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1044.21 400.199,940.863 400.786,846.043 401.372,759.172 401.958,679.721 402.545,607.2 403.131,541.156 403.718,481.167 404.304,523.359 404.891,469.711 405.477,421.262 406.063,530.352 406.65,484.224 407.236,442.713 407.823,405.521 408.409,372.366 408.995,344.16 409.582,318.245 410.168,295.63 410.755,276.097 411.341,260.639 411.927,246.598 412.514,235.667 413.1,226.428 413.687,219.895 414.273,280.249 414.86,275.315 415.446,273.808 416.032,298.748 416.619,298.563 417.205,322.876 417.792,346.085 418.378,369.386 418.964,371.798 419.551,376.141 420.137,381.119 420.724,402.663 421.31,436.906 421.896,455.353 422.483,461.091 423.069,468.198 423.656,487.378 424.242,526.438 424.829,531.817 425.415,547.581 426.001,562.678 426.588,578.66 427.174,595.217 427.761,633.751 428.347,647.846 428.933,669.479 429.52,676.679 430.106,690.113 430.693,696.66 431.279,710.303 431.865,717.712 432.452,735.958 433.038,753.724 433.625,760.491 434.211,772.239 434.798,788.654 435.384,799.46 435.97,814.719 436.557,820.812 437.143,831.651 437.73,838.252 438.316,848.81 438.902,866.524 439.489,879.723 440.075,885.814 440.662,895.231 441.248,907.584 441.835,913.482 442.421,921.944 443.007,933.852 443.594,942.137 444.18,953.033 444.767,963.659 445.353,968.161 445.939,972.805 446.526,988.395 447.112,997.904 447.699,1004.6 448.285,1016.13 448.871,1024.93 449.458,1036.07 450.044,1048.71 450.631,1054.09 451.217,1061.46 451.804,1066.42 452.39,1069.59 452.976,1072.6 453.563,1077.84 454.149,1082.85 454.736,1087.76 455.322,1092.34 455.908,1096.68 456.495,1101.17 457.081,1103.91 457.668,1109.89 458.254,1113.83 458.84,1120.29 459.427,1122.24 460.013,1127.97 460.6,1131.67 461.186,1135.53 461.773,1139.1 462.359,1140.76 462.945,1142.54 463.532,1146.07 464.118,1149.69 464.705,1151.46 465.291,1160.08 465.877,1162.92 466.464,1166.05 467.05,1168.96 467.637,1168.78 468.223,1171.94 468.809,1175.03 469.396,1181.02 469.982,1181.98 470.569,1186.12 471.155,1188.55 471.742,1192.49 472.328,1196.19 472.914,1199.75 473.501,1201.55 474.087,1202.17 474.674,1205.61 475.26,1207.59 475.846,1212.11 476.433,1213.77 477.019,1213.52 477.606,1213.89 478.192,1215.49 478.778,1215.85 479.365,1216.1 479.951,1216.14 480.538,1219 481.124,1222.33 481.711,1223.55 482.297,1222.32 482.883,1225.05 483.47,1225.04 484.056,1225.07 484.643,1227.79 485.229,1230.22 485.815,1234.06 486.402,1236.56 486.988,1235.82 487.575,1238.17 488.161,1236.38 488.748,1235.92 489.334,1236.77 489.92,1237.48 490.507,1237.19 491.093,1236.48 491.68,1240.2 492.266,1239.83 492.852,1240.6 493.439,1242.84 494.025,1243.72 494.612,1243.15 495.198,1244.03 495.784,1243.3 496.371,1242.64 496.957,1240.62 497.544,1242.64 498.13,1241.07 498.717,1240.74 499.303,1242.96 499.889,1245.1 500.476,1246.09 501.062,1244.19 501.649,1246.33 502.235,1247.11 502.821,1245.4 503.408,1249.91 503.994,1250.53 504.581,1249.84 505.167,1250.05 505.753,1247.68 506.34,1245.57 506.926,1246.31 507.513,1245.85 508.099,1243.72 508.686,1245.83 509.272,1242.68 509.858,1243.55 510.445,1245.38 511.031,1243.45 511.618,1240.24 512.204,1242.56 512.79,1241.95 513.377,1241.92 513.963,1243.1 514.55,1243.88 515.136,1246.23 515.722,1245.49 516.309,1247.57 516.895,1246.99 517.482,1246.53 518.068,1244.77 518.655,1248.16 519.241,1247.65 519.827,1248.49 520.414,1246.71 521,1247.41 521.587,1244.57 522.173,1240.3 522.759,1240.11 523.346,1241.17 523.932,1243.82 524.519,1243.47 525.105,1240.77 525.691,1240.71 526.278,1239.18 526.864,1238.78 527.451,1239.85 528.037,1238.3 528.624,1239.5 529.21,1239.15 529.796,1238.98 530.383,1240.21 530.969,1237.45 531.556,1236.1 532.142,1238.96 532.728,1240.32 533.315,1241.42 533.901,1241.33 534.488,1243.62 535.074,1244.64 535.661,1245.46 536.247,1246.18 536.833,1245.62 537.42,1245.03 538.006,1245.88 538.593,1242.9 539.179,1245.12 539.765,1245.81 540.352,1246.64 540.938,1247.12 541.525,1246.44 542.111,1245.61 542.697,1243.8 543.284,1244.81 543.87,1244.45 544.457,1242.55 545.043,1242.08 545.63,1243.2 546.216,1242.75 546.802,1242.28 547.389,1240.88 547.975,1241.89 548.562,1241.73 549.148,1242.8 549.734,1242.28 550.321,1244.68 550.907,1242.77 551.494,1242.5 552.08,1244.91 552.666,1244.34 553.253,1243.94 553.839,1240.66 554.426,1240.12 555.012,1239.81 555.599,1238.38 556.185,1239.22 556.771,1238.85 557.358,1238.38 557.944,1239.37 558.531,1238.77 559.117,1239.57 559.703,1240.48 560.29,1242.62 560.876,1244.66 561.463,1243.03 562.049,1242.43 562.635,1241.89 563.222,1240.19 563.808,1240.95 564.395,1240.72 564.981,1239.03 565.568,1242.45 566.154,1243.18 566.74,1243.85 567.327,1244.59 567.913,1246.46 568.5,1245.83 569.086,1243.68 569.672,1245.41 570.259,1242.32 570.845,1241.68 571.432,1240 572.018,1242.04 572.605,1242.77 573.191,1243.57 573.777,1244.33 574.364,1243.74 574.95,1242.81 575.537,1244.84 576.123,1244.31 576.709,1245 577.296,1244.3 577.882,1243.6 578.469,1245.52 579.055,1244.69 579.641,1241.3 580.228,1242 580.814,1241.39 581.401,1242.15 581.987,1244.28 582.574,1244.9 583.16,1247.93 583.746,1245.63 584.333,1244.67 584.919,1245.18 585.506,1243.19 586.092,1246.32 586.678,1244.31 587.265,1242.05 587.851,1243.67 588.438,1239.03 589.024,1237.39 589.61,1235.92 590.197,1238.21 590.783,1239.27 591.37,1237.48 591.956,1237.11 592.543,1234.2 593.129,1235.16 593.715,1235.96 594.302,1234.38 594.888,1234.06 595.475,1235.06 596.061,1233.79 596.647,1233.6 597.234,1236.19 597.82,1236.75 598.407,1240.01 598.993,1239.39 599.579,1240.06 600.166,1242.24 600.752,1240.17 601.339,1239.63 601.925,1239.11 602.512,1239.68 603.098,1241.26 603.684,1240.55 604.271,1239.77 604.857,1236.44 605.444,1233.45 606.03,1234.55 606.616,1232.88 607.203,1229.96 607.789,1228.62 608.376,1229.74 608.962,1230.92 609.548,1229.66 610.135,1229.46 610.721,1230.59 611.308,1231.55 611.894,1228.71 612.481,1227.26 613.067,1226.95 613.653,1229.34 614.24,1229.29 614.826,1229.16 615.413,1229.05 615.999,1230.08 616.585,1231.22 617.172,1231.31 617.758,1232.11 618.345,1231.8 618.931,1231.36 619.518,1227.47 620.104,1227.53 620.69,1227.52 621.277,1226.45 621.863,1229.04 622.45,1231.54 623.036,1231.26 623.622,1232.37 624.209,1233.26 624.795,1231.79 625.382,1231.67 625.968,1231.29 626.554,1232.16 627.141,1230.55 627.727,1229.03 628.314,1227.73 628.9,1226.25 629.487,1225.29 630.073,1225.41 630.659,1225.4 631.246,1224.31 631.832,1224.33 632.419,1223.47 633.005,1222.21 633.591,1223.67 634.178,1222.78 634.764,1224.21 635.351,1226.53 635.937,1225.37 636.523,1224.21 637.11,1223.5 637.696,1225.15 638.283,1224.02 638.869,1222.98 639.456,1221.89 640.042,1222.21 640.628,1222.64 641.215,1224.03 641.801,1225.18 642.388,1226.79 642.974,1226.61 643.56,1225.25 644.147,1226.48 644.733,1226.43 645.32,1225.02 645.906,1223.95 646.492,1222.92 647.079,1224.31 647.665,1227.12 648.252,1227.19 648.838,1227 649.425,1227.02 650.011,1225.78 650.597,1228.4 651.184,1227.01 651.77,1229.42 652.357,1235.29 652.943,1234.66 653.529,1235.2 654.116,1235.73 654.702,1234.07 655.289,1232.08 655.875,1232.8 656.462,1236.04 657.048,1234.44 657.634,1232.87 658.221,1232.61 658.807,1234.61 659.394,1234.07 659.98,1236.12 660.566,1235.37 661.153,1234.89 661.739,1235.53 662.326,1234.9 662.912,1233.18 663.498,1230.45 664.085,1229.87 664.671,1231.87 665.258,1230.28 665.844,1230.07 666.431,1228.71 667.017,1228.67 667.603,1230.87 668.19,1230.39 668.776,1232.61 669.363,1232.1 669.949,1232.01 670.535,1228.97 671.122,1228.71 671.708,1227.19 672.295,1225.65 672.881,1228.09 673.467,1226.66 674.054,1225 674.64,1224.66 675.227,1227.21 675.813,1226.85 676.4,1226.6 676.986,1228.81 677.572,1230.87 678.159,1230.41 678.745,1231.46 679.332,1230.78 679.918,1226.57 680.504,1226.18 681.091,1227.42 681.677,1227.13 682.264,1226.82 682.85,1226.5 683.436,1225.2 684.023,1226.21 684.609,1223.69 685.196,1225.16 685.782,1226.42 686.369,1224.84 686.955,1224.65 687.541,1227.48 688.128,1227.34 688.714,1228.58 689.301,1230.76 689.887,1231.65 690.473,1232.73 691.06,1231.04 691.646,1231.02 692.233,1230.73 692.819,1231.59 693.405,1229.82 693.992,1230.58 694.578,1230.11 695.165,1227.28 695.751,1232.14 696.338,1231.7 696.924,1230.08 697.51,1231.9 698.097,1227.75 698.683,1227.5 699.27,1227.28 699.856,1225.85 700.442,1226.96 701.029,1224.36 701.615,1224.35 702.202,1224.45 702.788,1225.64 703.375,1223.02 703.961,1221.98 704.547,1221.99 705.134,1226.05 705.72,1227.18 706.307,1226.8 706.893,1226.81 707.479,1228.85 708.066,1228.36 708.652,1226.83 709.239,1226.8 709.825,1226.32 710.411,1225.13 710.998,1226.48 711.584,1225.03 712.171,1222.37 712.757,1220.95 713.344,1221.14 713.93,1218.46 714.516,1218.69 715.103,1221.41 715.689,1218.69 716.276,1218.63 716.862,1220.17 717.448,1222.76 718.035,1222.43 718.621,1222.19 719.208,1224.73 719.794,1223.21 720.38,1223.27 720.967,1222.08 721.553,1222.3 722.14,1222.31 722.726,1223.72 723.313,1223.55 723.899,1222.43 724.485,1223.48 725.072,1226.85 725.658,1228.09 726.245,1229.11 726.831,1228.98 727.417,1228.55 728.004,1228.22 728.59,1225.79 729.177,1225.56 729.763,1224.04 730.349,1223.92 730.936,1223.83 731.522,1223.75 732.109,1223.57 732.695,1222.07 733.282,1219.27 733.868,1220.5 734.454,1224.58 735.041,1222.94 735.627,1224.34 736.214,1226.55 736.8,1226.48 737.386,1227.53 737.973,1228.54 738.559,1228.29 739.146,1226.81 739.732,1223.78 740.318,1222.37 740.905,1222.35 741.491,1221.18 742.078,1221.2 742.664,1221.2 743.251,1221.16 743.837,1220.96 744.423,1219.9 745.01,1219.91 745.596,1218.56 746.183,1218.87 746.769,1220.28 747.355,1220.08 747.942,1220.12 748.528,1220.19 749.115,1222.68 749.701,1225.01 750.288,1223.66 750.874,1223.56 751.46,1223.57 752.047,1224.93 752.633,1226.35 753.22,1225.89 753.806,1224.51 754.392,1226.83 754.979,1231.51 755.565,1232.23 756.152,1229.03 756.738,1229.66 757.324,1230.63 757.911,1230.19 758.497,1228.61 759.084,1228.32 759.67,1225.35 760.257,1222.55 760.843,1222.81 761.429,1225.13 762.016,1226.2 762.602,1227.13 763.189,1227.93 763.775,1227.28 764.361,1223.19 764.948,1218.25 765.534,1217.01 766.121,1217.37 766.707,1217.47 767.293,1217.77 767.88,1215.39 768.466,1216.74 769.053,1216.9 769.639,1218.34 770.226,1218.34 770.812,1217.17 771.398,1216.18 771.985,1217.71 772.571,1218.94 773.158,1220.24 773.744,1221.43 774.33,1222.5 774.917,1222.17 775.503,1223.42 776.09,1223.3 776.676,1223.37 777.262,1223.36 777.849,1224.49 778.435,1220.48 779.022,1219.27 779.608,1221.93 780.195,1221.94 780.781,1219.45 781.367,1218.28 781.954,1218.47 782.54,1217.15 783.127,1218.66 783.713,1216.37 784.299,1216.68 784.886,1220.69 785.472,1219.45 786.059,1219.66 786.645,1222.24 787.232,1222.05 787.818,1222.1 788.404,1223.41 788.991,1220.82 789.577,1223.4 790.164,1223.56 790.75,1224.99 791.336,1226.14 791.923,1225.96 792.509,1225.94 793.096,1223.27 793.682,1223.07 794.268,1222.97 794.855,1223.07 795.441,1223.08 796.028,1221.74 796.614,1222.91 797.201,1225.18 797.787,1223.57 798.373,1221.91 798.96,1220.68 799.546,1219.55 800.133,1219.55 800.719,1220.59 801.305,1218.31 801.892,1218.26 802.478,1219.65 803.065,1217.01 803.651,1216.01 804.237,1216.27 804.824,1217.74 805.41,1219.22 805.997,1219.32 806.583,1219.61 807.17,1215.78 807.756,1213.52 808.342,1216.27 808.929,1216.52 809.515,1217.94 810.102,1220.43 810.688,1219.21 811.274,1218.22 811.861,1216.84 812.447,1217.2 813.034,1217.23 813.62,1217.48 814.206,1214.96 814.793,1217.74 815.379,1219.42 815.966,1219.49 816.552,1220.81 817.139,1220.94 817.725,1221.01 818.311,1221.94 818.898,1223.08 819.484,1224.46 820.071,1223.18 820.657,1221.69 821.243,1221.48 821.83,1222.81 822.416,1224.35 823.003,1225.51 823.589,1225.35 824.175,1226.28 824.762,1226.26 825.348,1226.84 825.935,1226.47 826.521,1226.38 827.108,1226.05 827.694,1227.14 828.28,1227.84 828.867,1226.47 829.453,1228.52 830.04,1227.76 830.626,1226.02 831.212,1227.15 831.799,1230.32 832.385,1228.79 832.972,1227.25 833.558,1226.9 834.145,1221.39 834.731,1220.02 835.317,1217.54 835.904,1218.95 836.49,1216.55 837.077,1220.66 837.663,1221.82 838.249,1219.33 838.836,1219.56 839.422,1219.74 840.009,1219.46 840.595,1216.89 841.181,1218.15 841.768,1220.76 842.354,1220.77 842.941,1222.13 843.527,1220.81 844.114,1220.92 844.7,1220.76 845.286,1220.73 845.873,1221.82 846.459,1219.16 847.046,1218.96 847.632,1220.08 848.218,1221.43 848.805,1222.79 849.391,1223.7 849.978,1219.95 850.564,1217.41 851.15,1216.03 851.737,1217.37 852.323,1218.69 852.91,1217.58 853.496,1216.47 854.083,1217 854.669,1215.94 855.255,1218.56 855.842,1217.41 856.428,1219.04 857.015,1220.56 857.601,1220.41 858.187,1217.48 858.774,1217.8 859.36,1215.54 859.947,1213.32 860.533,1215.23 861.119,1215.61 861.706,1215.73 862.292,1217.14 862.879,1216.14 863.465,1217.39 864.052,1218.98 864.638,1220.4 865.224,1220.4 865.811,1219.11 866.397,1220.36 866.984,1220.24 867.57,1218.93 868.156,1219.04 868.743,1218.06 869.329,1221.84 869.916,1221.78 870.502,1220.92 871.089,1221.94 871.675,1219.14 872.261,1220.22 872.848,1218 873.434,1215.76 874.021,1215.91 874.607,1216.28 875.193,1217.79 875.78,1221.9 876.366,1216.98 876.953,1218.55 877.539,1218.57 878.125,1218.66 878.712,1221.22 879.298,1221.14 879.885,1219.67 880.471,1218.43 881.058,1223.46 881.644,1222.91 882.23,1222.69 882.817,1225.02 883.403,1222.1 883.99,1219.67 884.576,1218.5 885.162,1218.51 885.749,1219.63 886.335,1219.73 886.922,1219.96 887.508,1220.17 888.094,1222.51 888.681,1223.89 889.267,1224.64 889.854,1223.16 890.44,1224.3 891.027,1225.41 891.613,1225.1 892.199,1223.84 892.786,1222.29 893.372,1222.11 893.959,1220.54 894.545,1219.35 895.131,1217.94 895.718,1214.2 896.304,1214.43 896.891,1213.31 897.477,1212.39 898.063,1212.88 898.65,1211.91 899.236,1212.25 899.823,1212.64 900.409,1211.92 900.996,1214.86 901.582,1215.06 902.168,1216.5 902.755,1215.56 903.341,1215.65 903.928,1214.66 904.514,1215.04 905.1,1213.81 905.687,1215.35 906.273,1216.86 906.86,1216.97 907.446,1218.51 908.032,1219.97 908.619,1218.84 909.205,1216.54 909.792,1215.46 910.378,1217.02 910.965,1220.84 911.551,1215.5 912.137,1215.67 912.724,1218.37 913.31,1218.4 913.897,1218.49 914.483,1219.71 915.069,1220.94 915.656,1222.09 916.242,1223.07 916.829,1222.78 917.415,1223.65 918.002,1222.32 918.588,1222.13 919.174,1224.23 919.761,1224.01 920.347,1223.74 920.934,1223.39 921.52,1225.38 922.106,1225.18 922.693,1225 923.279,1225.67 923.866,1225.25 924.452,1225.09 925.038,1223.51 925.625,1225.92 926.211,1226.64 926.798,1227.53 927.384,1230.44 927.971,1232.46 928.557,1230.72 929.143,1230.17 929.73,1227.22 930.316,1225.79 930.903,1229.32 931.489,1227.8 932.075,1226.32 932.662,1227.31 933.248,1228.12 933.835,1227.63 934.421,1226.99 935.007,1226.46 935.594,1228.35 936.18,1228.81 936.767,1231.91 937.353,1228.8 937.94,1227.01 938.526,1226.53 939.112,1226.21 939.699,1220.62 940.285,1221.84 940.872,1220.38 941.458,1222.83 942.044,1222.73 942.631,1222.28 943.217,1222.16 943.804,1218.34 944.39,1218.31 944.976,1218.39 945.563,1220.8 946.149,1220.74 946.736,1219.48 947.322,1218.41 947.909,1218.46 948.495,1217.42 949.081,1218.78 949.668,1215.26 950.254,1215.61 950.841,1217.07 951.427,1218.27 952.013,1216.86 952.6,1217.08 953.186,1213.54 953.773,1210.07 954.359,1209.43 954.945,1209.82 955.532,1207.94 956.118,1207.7 956.705,1208.17 957.291,1207.58 957.878,1208.13 958.464,1208.82 959.05,1210.73 959.637,1211.08 960.223,1212.84 960.81,1214.35 961.396,1214.35 961.982,1212.1 962.569,1212.29 963.155,1212.41 963.742,1212.78 964.328,1212.01 964.915,1212.52 965.501,1214.29 966.087,1213.25 966.674,1216.07 967.26,1216.35 967.847,1212.63 968.433,1214.2 969.019,1215.63 969.606,1217.2 970.192,1217.41 970.779,1218.87 971.365,1220.15 971.951,1219.86 972.538,1220.83 973.124,1222.08 973.711,1220.46 974.297,1218.92 974.884,1216.37 975.47,1217.43 976.056,1213.86 976.643,1214.2 977.229,1213.05 977.816,1209.99 978.402,1212.99 978.988,1213.11 979.575,1212.24 980.161,1213.84 980.748,1214.39 981.334,1214.81 981.92,1213.85 982.507,1213.13 983.093,1213.62 983.68,1213.79 984.266,1213.97 984.853,1214.16 985.439,1217.02 986.025,1219.53 986.612,1219.5 987.198,1218.26 987.785,1222.11 988.371,1221.82 988.957,1221.62 989.544,1221.51 990.13,1223.13 990.717,1223.05 991.303,1224.09 991.889,1223.74 992.476,1224.67 993.062,1220.81 993.649,1221.88 994.235,1222.88 994.822,1221.61 995.408,1222.95 995.994,1223.78 996.581,1224.72 997.167,1222.95 997.754,1224 998.34,1220.97 998.926,1220.92 999.513,1220.91 1000.1,1221.04 1000.69,1220.79 1001.27,1220.71 1001.86,1221.78 1002.44,1222.73 1003.03,1220.03 1003.62,1222.55 1004.2,1222.61 1004.79,1223.96 1005.38,1222.61 1005.96,1221.04 1006.55,1219.74 1007.14,1219.88 1007.72,1219.72 1008.31,1218.32 1008.9,1217.12 1009.48,1218.46 1010.07,1219.41 1010.65,1223.31 1011.24,1221.73 1011.83,1223.03 1012.41,1223.74 1013,1224.63 1013.59,1223.04 1014.17,1223.91 1014.76,1222.26 1015.35,1223.29 1015.93,1221.59 1016.52,1219.09 1017.11,1219.02 1017.69,1214.16 1018.28,1211.86 1018.86,1214.62 1019.45,1215.97 1020.04,1215.95 1020.62,1215.88 1021.21,1218.68 1021.8,1219.09 1022.38,1217.96 1022.97,1217.86 1023.56,1217.99 1024.14,1218.01 1024.73,1216.71 1025.32,1216.79 1025.9,1217.06 1026.49,1217.01 1027.07,1217.18 1027.66,1215.93 1028.25,1219.87 1028.83,1219.7 1029.42,1219.81 1030.01,1222.09 1030.59,1222.92 1031.18,1222.84 1031.77,1227.54 1032.35,1231.02 1032.94,1229.25 1033.52,1229.85 1034.11,1229.56 1034.7,1227.8 1035.28,1226.16 1035.87,1224.47 1036.46,1221.94 1037.04,1221.92 1037.63,1222.75 1038.22,1222.47 1038.8,1219.75 1039.39,1220.76 1039.98,1221.93 1040.56,1220.63 1041.15,1220.49 1041.73,1221.7 1042.32,1221.56 1042.91,1222.68 1043.49,1222.64 1044.08,1222.28 1044.67,1218.44 1045.25,1215.94 1045.84,1217.04 1046.43,1218.26 1047.01,1216.99 1047.6,1214.81 1048.19,1220.01 1048.77,1218.57 1049.36,1217.36 1049.94,1217.11 1050.53,1216.96 1051.12,1217.14 1051.7,1215.95 1052.29,1213.72 1052.88,1215.03 1053.46,1217.64 1054.05,1216.38 1054.64,1214.03 1055.22,1213.11 1055.81,1210.82 1056.39,1209.77 1056.98,1210.36 1057.57,1210.4 1058.15,1210.76 1058.74,1212.35 1059.33,1214.23 1059.91,1216.67 1060.5,1218.06 1061.09,1217.21 1061.67,1220.84 1062.26,1220.73 1062.85,1221.98 1063.43,1220.65 1064.02,1219.32 1064.6,1218.07 1065.19,1218.26 1065.78,1218.3 1066.36,1219.63 1066.95,1223.33 1067.54,1221.9 1068.12,1220.45 1068.71,1220.36 1069.3,1215.27 1069.88,1215.46 1070.47,1215.5 1071.06,1216.81 1071.64,1214.24 1072.23,1214.2 1072.81,1215.82 1073.4,1212.48 1073.99,1210.41 1074.57,1208.32 1075.16,1207.85 1075.75,1208.33 1076.33,1209.02 1076.92,1209.53 1077.51,1211.36 1078.09,1210.85 1078.68,1211.26 1079.26,1210.62 1079.85,1211.09 1080.44,1214.15 1081.02,1215.88 1081.61,1216.21 1082.2,1216.45 1082.78,1219.2 1083.37,1220.27 1083.96,1220.4 1084.54,1220.73 1085.13,1221.91 1085.72,1224.16 1086.3,1223.9 1086.89,1224.79 1087.47,1225.69 1088.06,1225.41 1088.65,1226.3 1089.23,1225.93 1089.82,1225.88 1090.41,1225.55 1090.99,1226.38 1091.58,1222.32 1092.17,1220.74 1092.75,1221.59 1093.34,1223.88 1093.93,1224.93 1094.51,1222.02 1095.1,1221.88 1095.68,1220.61 1096.27,1220.39 1096.86,1220.27 1097.44,1220.05 1098.03,1221.01 1098.62,1220.9 1099.2,1219.58 1099.79,1217.26 1100.38,1220.03 1100.96,1220.03 1101.55,1221.3 1102.14,1221.07 1102.72,1219.71 1103.31,1219.34 1103.89,1219.23 1104.48,1218 1105.07,1217.82 1105.65,1216.43 1106.24,1216.49 1106.83,1215.02 1107.41,1216.52 1108,1217.73 1108.59,1218.83 1109.17,1218.57 1109.76,1220.99 1110.34,1223.23 1110.93,1223.94 1111.52,1225.9 1112.1,1224.18 1112.69,1222.65 1113.28,1222.72 1113.86,1225 1114.45,1226.09 1115.04,1225.75 1115.62,1225.26 1116.21,1224.88 1116.8,1227.18 1117.38,1228.18 1117.97,1227.49 1118.55,1226.98 1119.14,1224.2 1119.73,1222.39 1120.31,1221.17 1120.9,1222.36 1121.49,1223.25 1122.07,1216.9 1122.66,1219.07 1123.25,1218.93 1123.83,1219.83 1124.42,1221.02 1125.01,1219.96 1125.59,1223.62 1126.18,1224.57 1126.76,1225.31 1127.35,1223.81 1127.94,1220.8 1128.52,1215.79 1129.11,1215.62 1129.7,1212.11 1130.28,1212.31 1130.87,1212.6 1131.46,1212.56 1132.04,1214.1 1132.63,1215.8 1133.21,1217.02 1133.8,1216.16 1134.39,1216.44 1134.97,1214.08 1135.56,1212.91 1136.15,1214.64 1136.73,1213.51 1137.32,1213.67 1137.91,1215.04 1138.49,1212.61 1139.08,1214.14 1139.67,1216.95 1140.25,1216.96 1140.84,1216.99 1141.42,1217.01 1142.01,1219.2 1142.6,1220.29 1143.18,1220.31 1143.77,1222.8 1144.36,1221.29 1144.94,1218.5 1145.53,1217.53 1146.12,1216.5 1146.7,1216.64 1147.29,1215.53 1147.88,1215.41 1148.46,1215.65 1149.05,1216.95 1149.63,1219.45 1150.22,1221.91 1150.81,1218.32 1151.39,1215.87 1151.98,1218.58 1152.57,1217.28 1153.15,1217.39 1153.74,1218.76 1154.33,1218.73 1154.91,1217.42 1155.5,1218.81 1156.09,1220.09 1156.67,1219.79 1157.26,1217.39 1157.84,1216.37 1158.43,1217.84 1159.02,1219 1159.6,1217.85 1160.19,1217.7 1160.78,1221.33 1161.36,1221.27 1161.95,1218.36 1162.54,1216.82 1163.12,1215.53 1163.71,1215.55 1164.29,1217.06 1164.88,1218.39 1165.47,1220.76 1166.05,1220.36 1166.64,1222.55 1167.23,1223.58 1167.81,1224.43 1168.4,1226.51 1168.99,1225.04 1169.57,1222.03 1170.16,1219.53 1170.75,1218.01 1171.33,1219.29 1171.92,1219.16 1172.5,1218.92 1173.09,1221.5 1173.68,1223.75 1174.26,1221.08 1174.85,1219.78 1175.44,1223.54 1176.02,1223.26 1176.61,1221.73 1177.2,1221.53 1177.78,1221.56 1178.37,1221.56 1178.96,1221.32 1179.54,1221.21 1180.13,1221.05 1180.71,1219.81 1181.3,1218.35 1181.89,1218.5 1182.47,1218.36 1183.06,1218.45 1183.65,1218.43 1184.23,1220.66 1184.82,1220.61 1185.41,1220.33 1185.99,1220.04 1186.58,1216.03 1187.16,1217.29 1187.75,1215.11 1188.34,1215.34 1188.92,1213 1189.51,1213.35 1190.1,1208.77 1190.68,1207.53 1191.27,1209.36 1191.86,1211.21 1192.44,1212.73 1193.03,1215.65 1193.62,1215.65 1194.2,1214.67 1194.79,1213.39 1195.37,1215.13 1195.96,1217.58 1196.55,1220.16 1197.13,1218.94 1197.72,1216.6 1198.31,1215.56 1198.89,1215.71 1199.48,1215.96 1200.07,1216.22 1200.65,1216.35 1201.24,1217.88 1201.83,1218.14 1202.41,1220.71 1203,1219.3 1203.58,1219.18 1204.17,1220.72 1204.76,1217.81 1205.34,1216.51 1205.93,1221.7 1206.52,1224.22 1207.1,1223.91 1207.69,1223.61 1208.28,1222.37 1208.86,1219.75 1209.45,1215.77 1210.03,1216.02 1210.62,1214.97 1211.21,1215.31 1211.79,1211.64 1212.38,1209.54 1212.97,1212.62 1213.55,1211.68 1214.14,1211.94 1214.73,1216.08 1215.31,1218.7 1215.9,1218.71 1216.49,1218.76 1217.07,1215.14 1217.66,1212.63 1218.24,1215.25 1218.83,1217.84 1219.42,1217.77 1220,1217.91 1220.59,1220.35 1221.18,1217.6 1221.76,1216.22 1222.35,1216.32 1222.94,1216.25 1223.52,1216.25 1224.11,1217.59 1224.7,1216.48 1225.28,1216.57 1225.87,1216.6 1226.45,1218.02 1227.04,1217.66 1227.63,1217.67 1228.21,1220.22 1228.8,1220.14 1229.39,1219.83 1229.97,1218.78 1230.56,1222.1 1231.15,1222.93 1231.73,1224.02 1232.32,1224.01 1232.91,1223.92 1233.49,1222.54 1234.08,1224.86 1234.66,1226.06 1235.25,1222.81 1235.84,1221.15 1236.42,1219.88 1237.01,1218.31 1237.6,1219.64 1238.18,1221.81 1238.77,1220.42 1239.36,1218.99 1239.94,1217.8 1240.53,1214.04 1241.11,1214.41 1241.7,1217 1242.29,1215.73 1242.87,1218.45 1243.46,1217.13 1244.05,1216.92 1244.63,1218.4 1245.22,1218.36 1245.81,1217.01 1246.39,1218.17 1246.98,1220.53 1247.57,1220.2 1248.15,1221.22 1248.74,1219.8 1249.32,1222.48 1249.91,1220.9 1250.5,1220.36 1251.08,1220.14 1251.67,1219.99 1252.26,1221.28 1252.84,1220.09 1253.43,1222.3 1254.02,1222.03 1254.6,1221.94 1255.19,1225.35 1255.78,1226.06 1256.36,1224.68 1256.95,1222.87 1257.53,1226.34 1258.12,1223.41 1258.71,1221.78 1259.29,1219.05 1259.88,1216.62 1260.47,1215.46 1261.05,1215.69 1261.64,1215.75 1262.23,1214.71 1262.81,1213.48 1263.4,1213.53 1263.98,1211.58 1264.57,1215.5 1265.16,1218.16 1265.74,1221.95 1266.33,1222.92 1266.92,1221.62 1267.5,1220.29 1268.09,1219.16 1268.68,1218.01 1269.26,1216.69 1269.85,1215.59 1270.44,1220.73 1271.02,1219.32 1271.61,1221.61 1272.19,1220.06 1272.78,1218.61 1273.37,1218.35 1273.95,1215.81 1274.54,1216.89 1275.13,1215.64 1275.71,1219.32 1276.3,1220.38 1276.89,1221.35 1277.47,1221.15 1278.06,1222.04 1278.65,1220.53 1279.23,1225.54 1279.82,1222.72 1280.4,1221.27 1280.99,1221.32 1281.58,1221.2 1282.16,1222.31 1282.75,1220.72 1283.34,1219.09 1283.92,1219.02 1284.51,1218.91 1285.1,1218.92 1285.68,1218.9 1286.27,1218.94 1286.86,1220.07 1287.44,1219.92 1288.03,1219.78 1288.61,1223.36 1289.2,1220.63 1289.79,1217.79 1290.37,1216.33 1290.96,1213.95 1291.55,1215.51 1292.13,1214.55 1292.72,1212.08 1293.31,1213.57 1293.89,1215.24 1294.48,1214.14 1295.06,1214.35 1295.65,1212.92 1296.24,1212.06 1296.82,1209.86 1297.41,1214.05 1298,1212.96 1298.58,1210.77 1299.17,1211.35 1299.76,1210.82 1300.34,1211.04 1300.93,1211.39 1301.52,1211.66 1302.1,1210.79 1302.69,1212.47 1303.27,1214.05 1303.86,1215.58 1304.45,1214.49 1305.03,1216 1305.62,1216.1 1306.21,1214.96 1306.79,1216.35 1307.38,1216.3 1307.97,1215.37 1308.55,1215.79 1309.14,1215.95 1309.73,1218.51 1310.31,1221.1 1310.9,1219.94 1311.48,1217.38 1312.07,1217.34 1312.66,1213.33 1313.24,1211.07 1313.83,1210.2 1314.42,1215.38 1315,1215.05 1315.59,1215.11 1316.18,1216.38 1316.76,1216.35 1317.35,1214 1317.93,1213.04 1318.52,1216.92 1319.11,1214.53 1319.69,1215.87 1320.28,1217.32 1320.87,1217.28 1321.45,1214.97 1322.04,1215.33 1322.63,1215.5 1323.21,1215.55 1323.8,1218.32 1324.39,1215.96 1324.97,1216.36 1325.56,1214.18 1326.14,1212.99 1326.73,1210.92 1327.32,1214.1 1327.9,1214.32 1328.49,1214.5 1329.08,1214.87 1329.66,1214.01 1330.25,1214.35 1330.84,1216.9 1331.42,1219.25 1332.01,1217.75 1332.6,1217.82 1333.18,1220.57 1333.77,1220.31 1334.35,1221.38 1334.94,1219.59 1335.53,1220.72 1336.11,1223.14 1336.7,1223.89 1337.29,1226.1 1337.87,1224.61 1338.46,1225.5 1339.05,1223.97 1339.63,1223.61 1340.22,1223.27 1340.8,1226.44 1341.39,1226.04 1341.98,1224.23 1342.56,1221.69 1343.15,1220.05 1343.74,1222.42 1344.32,1223.44 1344.91,1223.29 1345.5,1224.37 1346.08,1223.94 1346.67,1223.79 1347.26,1223.25 1347.84,1221.78 1348.43,1221.64 1349.01,1221.51 1349.6,1222.7 1350.19,1221.08 1350.77,1219.46 1351.36,1218.29 1351.95,1218.43 1352.53,1217.29 1353.12,1217.34 1353.71,1215.78 1354.29,1218.46 1354.88,1219.68 1355.47,1220.87 1356.05,1220.87 1356.64,1220.74 1357.22,1219.24 1357.81,1220.5 1358.4,1220.74 1358.98,1221.98 1359.57,1222.87 1360.16,1225.01 1360.74,1225.83 1361.33,1225.45 1361.92,1222.69 1362.5,1223.79 1363.09,1222.22 1363.68,1220.94 1364.26,1221.99 1364.85,1223.03 1365.43,1221.44 1366.02,1221.37 1366.61,1219.99 1367.19,1218.56 1367.78,1218.4 1368.37,1220.91 1368.95,1219.37 1369.54,1219.06 1370.13,1220.15 1370.71,1220.31 1371.3,1220.15 1371.88,1220.06 1372.47,1220.07 1373.06,1218.79 1373.64,1219.82 1374.23,1222.04 1374.82,1219.12 1375.4,1218.87 1375.99,1217.5 1376.58,1218.61 1377.16,1215.87 1377.75,1219.78 1378.34,1217.15 1378.92,1218.47 1379.51,1218.44 1380.09,1218.46 1380.68,1217.18 1381.27,1214.63 1381.85,1214.55 1382.44,1215.91 1383.03,1212.17 1383.61,1213.8 1384.2,1211.61 1384.79,1211.71 1385.37,1210.77 1385.96,1213.49 1386.55,1209.74 1387.13,1209.17 1387.72,1207.04 1388.3,1208.87 1388.89,1210.44 1389.48,1209.84 1390.06,1212.79 1390.65,1214.54 1391.24,1215.96 1391.82,1214.93 1392.41,1215.03 1393,1212.56 1393.58,1212.97 1394.17,1211.97 1394.75,1212.15 1395.34,1213.72 1395.93,1213.71 1396.51,1212.78 1397.1,1211.84 1397.69,1213.63 1398.27,1213.91 1398.86,1216.49 1399.45,1221.4 1400.03,1219.81 1400.62,1219.61 1401.21,1218.45 1401.79,1218.49 1402.38,1219.54 1402.96,1220.63 1403.55,1221.73 1404.14,1222.89 1404.72,1222.67 1405.31,1221.14 1405.9,1223.76 1406.48,1223.59 1407.07,1223.38 1407.66,1222.08 1408.24,1221.79 1408.83,1219.17 1409.42,1221.95 1410,1221.96 1410.59,1222.9 1411.17,1222.5 1411.76,1219.85 1412.35,1218.41 1412.93,1218.43 1413.52,1219.61 1414.11,1219.71 1414.69,1220.86 1415.28,1222.21 1415.87,1221.82 1416.45,1221.38 1417.04,1221.22 1417.63,1220.06 1418.21,1221.09 1418.8,1222.16 1419.38,1223.26 1419.97,1222.76 1420.56,1222.5 1421.14,1219.94 1421.73,1218.62 1422.32,1218.58 1422.9,1217.44 1423.49,1218.84 1424.08,1218.71 1424.66,1220.21 1425.25,1221.06 1425.83,1219.98 1426.42,1220.07 1427.01,1220.21 1427.59,1218.76 1428.18,1219.68 1428.77,1218.32 1429.35,1219.61 1429.94,1217 1430.53,1218.26 1431.11,1217.91 1431.7,1218.23 1432.29,1214.53 1432.87,1213.17 1433.46,1210.91 1434.04,1211.43 1434.63,1214.21 1435.22,1215.63 1435.8,1215.75 1436.39,1215.81 1436.98,1214.7 1437.56,1216.1 1438.15,1215.15 1438.74,1216.57 1439.32,1215.64 1439.91,1214.37 1440.5,1214.64 1441.08,1220.06 1441.67,1222.28 1442.25,1224.55 1442.84,1221.93 1443.43,1223.22 1444.01,1221.76 1444.6,1221.55 1445.19,1221.59 1445.77,1223.78 1446.36,1223.74 1446.95,1222.24 1447.53,1220.95 1448.12,1217.04 1448.7,1217.1 1449.29,1215.88 1449.88,1213.7 1450.46,1212.76 1451.05,1211.58 1451.64,1213.27 1452.22,1216.04 1452.81,1216.15 1453.4,1214.01 1453.98,1211.54 1454.57,1209.19 1455.16,1209.62 1455.74,1208.84 1456.33,1207.96 1456.91,1209.99 1457.5,1213.07 1458.09,1214.64 1458.67,1216.08 1459.26,1216.2 1459.85,1216.49 1460.43,1216.78 1461.02,1218.06 1461.61,1219.33 1462.19,1220.3 1462.78,1217.68 1463.37,1218.91 1463.95,1217.7 1464.54,1218.88 1465.12,1218.82 1465.71,1218.86 1466.3,1217.36 1466.88,1217.32 1467.47,1217.17 1468.06,1218.27 1468.64,1216.94 1469.23,1217.12 1469.82,1216.97 1470.4,1217.26 1470.99,1217.19 1471.57,1220.9 1472.16,1219.53 1472.75,1218.24 1473.33,1218.35 1473.92,1218.28 1474.51,1219.41 1475.09,1217.87 1475.68,1217.73 1476.27,1217.43 1476.85,1218.88 1477.44,1217.57 1478.03,1215.02 1478.61,1216.6 1479.2,1218.15 1479.78,1215.57 1480.37,1218.13 1480.96,1219.3 1481.54,1219.41 1482.13,1218.14 1482.72,1219.42 1483.3,1218.95 1483.89,1220.12 1484.48,1218.88 1485.06,1216.28 1485.65,1215.05 1486.24,1213.82 1486.82,1215.37 1487.41,1218 1487.99,1216.79 1488.58,1217.13 1489.17,1218.4 1489.75,1218.42 1490.34,1216.09 1490.93,1217.33 1491.51,1214.79 1492.1,1214.92 1492.69,1215.22 1493.27,1215.41 1493.86,1220.21 1494.45,1218.85 1495.03,1220.14 1495.62,1218.66 1496.2,1218.64 1496.79,1217.34 1497.38,1218.5 1497.96,1217.44 1498.55,1216.28 1499.14,1216.33 1499.72,1218.7 1500.31,1214.99 1500.9,1212.41 1501.48,1212.84 1502.07,1214.49 1502.65,1217.08 1503.24,1215.87 1503.83,1217.27 1504.41,1215.05 1505,1215.27 1505.59,1216.65 1506.17,1218.17 1506.76,1218.06 1507.35,1213.94 1507.93,1212.67 1508.52,1211.54 1509.11,1211.87 1509.69,1213.46 1510.28,1213.72 1510.86,1214.89 1511.45,1212.7 1512.04,1211.86 1512.62,1212.23 1513.21,1215.25 1513.8,1216.7 1514.38,1216.64 1514.97,1214.41 1515.56,1214.77 1516.14,1216.34 1516.73,1216.47 1517.32,1215.57 1517.9,1215.66 1518.49,1215.63 1519.07,1216.99 1519.66,1214.58 1520.25,1214.96 1520.83,1215.24 1521.42,1215.32 1522.01,1215.4 1522.59,1216.83 1523.18,1217.99 1523.77,1219.26 1524.35,1217.88 1524.94,1216.69 1525.52,1219.19 1526.11,1219.06 1526.7,1219.02 1527.28,1219.35 1527.87,1222.96 1528.46,1225.22 1529.04,1229.82 1529.63,1230.44 1530.22,1228.59 1530.8,1226.79 1531.39,1224.97 1531.98,1224.55 1532.56,1224.09 1533.15,1223.8 1533.73,1223.76 1534.32,1225.86 1534.91,1226.8 1535.49,1227.31 1536.08,1225.62 1536.67,1225.3 1537.25,1223.54 1537.84,1223.13 1538.43,1222.62 1539.01,1223.36 1539.6,1221.85 1540.19,1218.11 1540.77,1217.81 1541.36,1217.69 1541.94,1219.72 1542.53,1222.19 1543.12,1219.72 1543.7,1219.62 1544.29,1219.5 1544.88,1220.38 1545.46,1221.41 1546.05,1221.04 1546.64,1218 1547.22,1218.01 1547.81,1219.28 1548.4,1219.41 1548.98,1217.88 1549.57,1219.31 1550.15,1219.08 1550.74,1221.59 1551.33,1222.73 1551.91,1222.42 1552.5,1218.56 1553.09,1219.65 1553.67,1219.34 1554.26,1221.44 1554.85,1220.22 1555.43,1217.89 1556.02,1215.37 1556.6,1215.14 1557.19,1215.34 1557.78,1215.43 1558.36,1215.75 1558.95,1214.55 1559.54,1217.27 1560.12,1213.53 1560.71,1212.53 1561.3,1211.51 1561.88,1212.03 1562.47,1213.31 1563.06,1216.07 1563.64,1216 1564.23,1217.29 1564.81,1217.07 1565.4,1218.43 1565.99,1214.89 1566.57,1214.89 1567.16,1213.71 1567.75,1212.79 1568.33,1209.35 1568.92,1207.57 1569.51,1209.26 1570.09,1209.6 1570.68,1211.26 1571.27,1210.43 1571.85,1214.51 1572.44,1215.92 1573.02,1215.78 1573.61,1218.12 1574.2,1218.01 1574.78,1215.44 1575.37,1216.07 1575.96,1214.76 1576.54,1213.74 1577.13,1215.13 1577.72,1212.73 1578.3,1211.82 1578.89,1212.05 1579.47,1209.8 1580.06,1207.79 1580.65,1209.91 1581.23,1206.85 1581.82,1210.15 1582.41,1211.88 1582.99,1209.73 1583.58,1210.24 1584.17,1208.29 1584.75,1212.51 1585.34,1211.89 1585.93,1214.56 1586.51,1213.7 1587.1,1215.41 1587.68,1213.09 1588.27,1212.18 1588.86,1213.78 1589.44,1212.9 1590.03,1214.59 1590.62,1214.78 1591.2,1218.61 1591.79,1217.59 1592.38,1217.67 1592.96,1217.79 1593.55,1215.22 1594.14,1215.33 1594.72,1218.04 1595.31,1216.52 1595.89,1217.97 1596.48,1218.11 1597.07,1216.86 1597.65,1216.86 1598.24,1215.72 1598.83,1218.17 1599.41,1219.54 1600,1221.98 1600.59,1222.79 1601.17,1223.55 1601.76,1223.31 1602.34,1224.22 1602.93,1227.7 1603.52,1227.32 1604.1,1226.75 1604.69,1225.15 1605.28,1224.86 1605.86,1221.94 1606.45,1219.22 1607.04,1217.89 1607.62,1215.62 1608.21,1214.51 1608.8,1213.51 1609.38,1215.21 1609.97,1213.12 1610.55,1212.25 1611.14,1214.18 1611.73,1215.71 1612.31,1217.12 1612.9,1216.06 1613.49,1220.24 1614.07,1220.36 1614.66,1220.06 1615.25,1219.02 1615.83,1221.38 1616.42,1223.57 1617.01,1223.29 1617.59,1222.96 1618.18,1216.21 1618.76,1219.02 1619.35,1219.02 1619.94,1218.97 1620.52,1218.8 1621.11,1220.24 1621.7,1218.96 1622.28,1220.22 1622.87,1220.13 1623.46,1219.82 1624.04,1220.77 1624.63,1220.63 1625.22,1223.05 1625.8,1222.71 1626.39,1221.29 1626.97,1218.56 1627.56,1216.28 1628.15,1215.05 1628.73,1216.57 1629.32,1217.11 1629.91,1218.32 1630.49,1218.35 1631.08,1218.01 1631.67,1219.15 1632.25,1219.02 1632.84,1217.59 1633.42,1214.81 1634.01,1216.07 1634.6,1213.88 1635.18,1215.37 1635.77,1215.57 1636.36,1216.9 1636.94,1216.73 1637.53,1218.19 1638.12,1220.74 1638.7,1223.08 1639.29,1223.96 1639.88,1223.74 1640.46,1223.43 1641.05,1224.25 1641.63,1222.8 1642.22,1222.46 1642.81,1221.15 1643.39,1225.03 1643.98,1228.23 1644.57,1226.24 1645.15,1225.91 1645.74,1225.53 1646.33,1225.42 1646.91,1227.68 1647.5,1225.62 1648.09,1223.95 1648.67,1223.51 1649.26,1224.4 1649.84,1226.27 1650.43,1223.12 1651.02,1222.84 1651.6,1222.26 1652.19,1221.99 1652.78,1220.37 1653.36,1220.66 1653.95,1220.46 1654.54,1219 1655.12,1218.8 1655.71,1217.48 1656.29,1216.14 1656.88,1216.21 1657.47,1217.33 1658.05,1220.88 1658.64,1219.48 1659.23,1218.37 1659.81,1218.53 1660.4,1219.69 1660.99,1217.1 1661.57,1217.28 1662.16,1218.88 1662.75,1220.05 1663.33,1220.12 1663.92,1219.94 1664.5,1219.9 1665.09,1217.49 1665.68,1217.55 1666.26,1220.19 1666.85,1220.02 1667.44,1219.87 1668.02,1222.27 1668.61,1222.08 1669.2,1220.55 1669.78,1219 1670.37,1221.22 1670.96,1220.91 1671.54,1222.1 1672.13,1219.3 1672.71,1217.97 1673.3,1215.6 1673.89,1215.52 1674.47,1215.59 1675.06,1218.11 1675.65,1216.95 1676.23,1216.85 1676.82,1216.83 1677.41,1218.01 1677.99,1218.14 1678.58,1219.47 1679.17,1216.89 1679.75,1215.71 1680.34,1217.12 1680.92,1217.09 1681.51,1219.55 1682.1,1220.89 1682.68,1219.42 1683.27,1218.37 1683.86,1217.19 1684.44,1216.34 1685.03,1214.88 1685.62,1214.87 1686.2,1215.03 1686.79,1214.03 1687.37,1213.07 1687.96,1210.9 1688.55,1211.28 1689.13,1211.7 1689.72,1211.89 1690.31,1213.76 1690.89,1214.06 1691.48,1214.69 1692.07,1212.58 1692.65,1212.87 1693.24,1213.03 1693.83,1210.77 1694.41,1211.02 1695,1213.92 1695.58,1215.38 1696.17,1214.06 1696.76,1215.67 1697.34,1215.51 1697.93,1215.71 1698.52,1215.98 1699.1,1217.51 1699.69,1215.08 1700.28,1215.19 1700.86,1216.8 1701.45,1218.01 1702.04,1216.74 1702.62,1215.65 1703.21,1216.58 1703.79,1216.65 1704.38,1215.38 1704.97,1215.45 1705.55,1214.4 1706.14,1214.67 1706.73,1213.51 1707.31,1214.96 1707.9,1214 1708.49,1213.03 1709.07,1213.25 1709.66,1213.44 1710.24,1216.06 1710.83,1215.01 1711.42,1216.38 1712,1220.1 1712.59,1218.96 1713.18,1220.35 1713.76,1222.59 1714.35,1222.41 1714.94,1221.89 1715.52,1223.13 1716.11,1221.11 1716.7,1222.26 1717.28,1222.12 1717.87,1218.23 1718.45,1218.25 1719.04,1219.57 1719.63,1219.43 1720.21,1215.43 1720.8,1214.36 1721.39,1213.23 1721.97,1214.58 1722.56,1217.09 1723.15,1217.02 1723.73,1217.14 1724.32,1219.53 1724.91,1218.18 1725.49,1216.97 1726.08,1215.79 1726.66,1214.58 1727.25,1213.45 1727.84,1212.55 1728.42,1214.06 1729.01,1214.37 1729.6,1215.98 1730.18,1215 1730.77,1215.28 1731.36,1217.93 1731.94,1218.04 1732.53,1219.28 1733.11,1217.94 1733.7,1215.4 1734.29,1217.01 1734.87,1214.74 1735.46,1212.41 1736.05,1210.15 1736.63,1209.34 1737.22,1211.27 1737.81,1212.7 1738.39,1211.57 1738.98,1214.52 1739.57,1213.71 1740.15,1216.47 1740.74,1216.61 1741.32,1217.95 1741.91,1216.47 1742.5,1217.86 1743.08,1215.21 1743.67,1213.87 1744.26,1211.42 1744.84,1211.95 1745.43,1213.52 1746.02,1211.19 1746.6,1212.96 1747.19,1213.37 1747.78,1216.37 1748.36,1215.13 1748.95,1216.42 1749.53,1215.33 1750.12,1214.4 1750.71,1213.22 1751.29,1213.48 1751.88,1214.06 1752.47,1212.96 1753.05,1217.26 1753.64,1218.78 1754.23,1218.66 1754.81,1216.12 1755.4,1217.69 1755.99,1215.18 1756.57,1216.74 1757.16,1216.7 1757.74,1215.31 1758.33,1214.28 1758.92,1213.33 1759.5,1213.62 1760.09,1213.84 1760.68,1216.48 1761.26,1216.22 1761.85,1218.76 1762.44,1219.89 1763.02,1221.92 1763.61,1221.74 1764.19,1222.58 1764.78,1223.6 1765.37,1225.69 1765.95,1223.02 1766.54,1221.56 1767.13,1221.67 1767.71,1218.02 1768.3,1219.23 1768.89,1220.56 1769.47,1223 1770.06,1226.18 1770.65,1223.16 1771.23,1224.06 1771.82,1222.51 1772.4,1221.01 1772.99,1219.31 1773.58,1219.15 1774.16,1223.14 1774.75,1226.68 1775.34,1224.88 1775.92,1224.64 1776.51,1224.31 1777.1,1222.9 1777.68,1222.76 1778.27,1222.2 1778.86,1220.8 1779.44,1220.59 1780.03,1219.44 1780.61,1219.42 1781.2,1219.33 1781.79,1218 1782.37,1218.05 1782.96,1216.81 1783.55,1215.61 1784.13,1213.19 1784.72,1209.83 1785.31,1215.19 1785.89,1214.11 1786.48,1214.08 1787.06,1217.94 1787.65,1217.88 1788.24,1217.92 1788.82,1215.43 1789.41,1212.97 1790,1213.14 1790.58,1213.5 1791.17,1215.26 1791.76,1216.57 1792.34,1217.69 1792.93,1217.9 1793.52,1220.28 1794.1,1220.06 1794.69,1220.29 1795.27,1220 1795.86,1223.53 1796.45,1223.21 1797.03,1224.06 1797.62,1222.34 1798.21,1225.73 1798.79,1223.92 1799.38,1222.14 1799.97,1220.37 1800.55,1222.78 1801.14,1221.4 1801.73,1221.47 1802.31,1221.49 1802.9,1221.57 1803.48,1221.37 1804.07,1220.11 1804.66,1220.01 1805.24,1217.6 1805.83,1218.87 1806.42,1217.39 1807,1216.12 1807.59,1216.16 1808.18,1218.78 1808.76,1220.92 1809.35,1222.17 1809.94,1219.34 1810.52,1216.53 1811.11,1216.77 1811.69,1215.54 1812.28,1217.13 1812.87,1216.93 1813.45,1218.27 1814.04,1218.17 1814.63,1219.53 1815.21,1220.46 1815.8,1220.32 1816.39,1218.96 1816.97,1220.07 1817.56,1218.85 1818.14,1218.81 1818.73,1217.52 1819.32,1215.02 1819.9,1213.97 1820.49,1217.9 1821.08,1216.58 1821.66,1219.01 1822.25,1219.92 1822.84,1218.66 1823.42,1213.86 1824.01,1215.14 1824.6,1216.28 1825.18,1216.23 1825.77,1213.94 1826.35,1214.09 1826.94,1215.38 1827.53,1215.43 1828.11,1216.67 1828.7,1215.51 1829.29,1217.04 1829.87,1218.38 1830.46,1218.49 1831.05,1217.18 1831.63,1218.59 1832.22,1218.41 1832.81,1218.41 1833.39,1218.64 1833.98,1216.13 1834.56,1217.63 1835.15,1216.46 1835.74,1218.97 1836.32,1218.84 1836.91,1218.73 1837.5,1219.8 1838.08,1220.21 1838.67,1216.42 1839.26,1219.07 1839.84,1221.39 1840.43,1223.66 1841.01,1222.21 1841.6,1220.97 1842.19,1223.2 1842.77,1224.01 1843.36,1221.23 1843.95,1218.64 1844.53,1220.11 1845.12,1222.39 1845.71,1225.93 1846.29,1223.14 1846.88,1225.41 1847.47,1223.87 1848.05,1224.48 1848.64,1221.61 1849.22,1222.54 1849.81,1219.8 1850.4,1220.93 1850.98,1219.54 1851.57,1220.58 1852.16,1219.15 1852.74,1215.36 1853.33,1216.71 1853.92,1215.38 1854.5,1210.64 1855.09,1209.88 1855.68,1209.2 1856.26,1209.83 1856.85,1210.49 1857.43,1212.25 1858.02,1214.99 1858.61,1215.2 1859.19,1213.8 1859.78,1215.3 1860.37,1216.65 1860.95,1218.09 1861.54,1218.24 1862.13,1217.16 1862.71,1217.36 1863.3,1215.11 1863.88,1212.9 1864.47,1213.22 1865.06,1214.58 1865.64,1216.14 1866.23,1218.47 1866.82,1217.16 1867.4,1215.69 1867.99,1215.84 1868.58,1217.07 1869.16,1218.37 1869.75,1219.63 1870.34,1218.29 1870.92,1218.22 1871.51,1218.43 1872.09,1219.78 1872.68,1217.18 1873.27,1217.38 1873.85,1218.52 1874.44,1217.05 1875.03,1216.04 1875.61,1213.59 1876.2,1211.59 1876.79,1213.03 1877.37,1213.31 1877.96,1217.3 1878.55,1217.47 1879.13,1218.86 1879.72,1218.78 1880.3,1220.07 1880.89,1220.09 1881.48,1218.66 1882.06,1217.37 1882.65,1221.24 1883.24,1218.68 1883.82,1219.82 1884.41,1222.25 1885,1223.16 1885.58,1221.68 1886.17,1221.59 1886.76,1221.37 1887.34,1221.04 1887.93,1221.97 1888.51,1222 1889.1,1220.32 1889.69,1221.25 1890.27,1221.16 1890.86,1218.3 1891.45,1219.41 1892.03,1217.01 1892.62,1215.97 1893.21,1215.98 1893.79,1222.18 1894.38,1220.89 1894.96,1221.88 1895.55,1221.48 1896.14,1222.97 1896.72,1222.5 1897.31,1222.06 1897.9,1221.71 1898.48,1222.47 1899.07,1221.14 1899.66,1219.75 1900.24,1218.57 1900.83,1219.79 1901.42,1221.22 1902,1219.5 1902.59,1216.76 1903.17,1218.2 1903.76,1218.48 1904.35,1219.29 1904.93,1220.39 1905.52,1221.64 1906.11,1222.68 1906.69,1223.78 1907.28,1223.54 1907.87,1225.82 1908.45,1224.14 1909.04,1223.54 1909.63,1224.48 1910.21,1224 1910.8,1220.03 1911.38,1219.67 1911.97,1218.25 1912.56,1215.64 1913.14,1214.44 1913.73,1217.18 1914.32,1217.15 1914.9,1217.29 1915.49,1213.89 1916.08,1215.4 1916.66,1218.25 1917.25,1219.81 1917.83,1218.35 1918.42,1215.76 1919.01,1215.76 1919.59,1216.1 1920.18,1216.2 1920.77,1217.72 1921.35,1218.06 1921.94,1217.89 1922.53,1217.79 1923.11,1219.26 1923.7,1217.96 1924.29,1214 1924.87,1216.8 1925.46,1219.44 1926.04,1217.08 1926.63,1216.92 1927.22,1218.31 1927.8,1219.53 1928.39,1222.01 1928.98,1220.6 1929.56,1219.15 1930.15,1220.31 1930.74,1218.68 1931.32,1216.14 1931.91,1216.14 1932.5,1218.75 1933.08,1218.66 1933.67,1217 1934.25,1217.04 1934.84,1219.2 1935.43,1219.07 1936.01,1217.71 1936.6,1220.1 1937.19,1220.08 1937.77,1221.13 1938.36,1223.38 1938.95,1223.08 1939.53,1222.6 1940.12,1223.8 1940.71,1222.23 1941.29,1219.66 1941.88,1222.23 1942.46,1222.01 1943.05,1226.74 1943.64,1226.2 1944.22,1224.62 1944.81,1220.3 1945.4,1220.36 1945.98,1220.45 1946.57,1221.75 1947.16,1222.78 1947.74,1221.34 1948.33,1220.98 1948.91,1219.45 1949.5,1216.78 1950.09,1218.2 1950.67,1220.65 1951.26,1220.39 1951.85,1220.35 1952.43,1221.4 1953.02,1220.16 1953.61,1220.17 1954.19,1219.9 1954.78,1217.18 1955.37,1217.45 1955.95,1217.43 1956.54,1218.59 1957.12,1217.01 1957.71,1217.35 1958.3,1217.51 1958.88,1215.12 1959.47,1211.62 1960.06,1214.51 1960.64,1214.84 1961.23,1215.11 1961.82,1216.55 1962.4,1214.6 1962.99,1217.17 1963.58,1216.17 1964.16,1214.81 1964.75,1216.11 1965.33,1217.47 1965.92,1217.52 1966.51,1215.1 1967.09,1216.77 1967.68,1218.11 1968.27,1220.38 1968.85,1219.04 1969.44,1216.24 1970.03,1217.72 1970.61,1215.43 1971.2,1218.13 1971.78,1216.89 1972.37,1215.78 1972.96,1215.93 1973.54,1217.02 1974.13,1219.41 1974.72,1218.05 1975.3,1218.13 1975.89,1219.27 1976.48,1219.21 1977.06,1221.67 1977.65,1221.41 1978.24,1219.68 1978.82,1223.45 1979.41,1223.15 1979.99,1222.72 1980.58,1220.16 1981.17,1220.24 1981.75,1220.06 1982.34,1217.31 1982.93,1217.54 1983.51,1217.65 1984.1,1217.81 1984.69,1217.98 1985.27,1216.5 1985.86,1216.85 1986.45,1217.96 1987.03,1219.29 1987.62,1218.05 1988.2,1218.35 1988.79,1219.82 1989.38,1219.69 1989.96,1218.37 1990.55,1217.02 1991.14,1215.71 1991.72,1214.57 1992.31,1214.75 1992.9,1213.63 1993.48,1213.7 1994.07,1213.88 1994.65,1212.84 1995.24,1213.17 1995.83,1214.96 1996.41,1215.42 1997,1215.87 1997.59,1216.04 1998.17,1217.29 1998.76,1215.99 1999.35,1214.88 1999.93,1216.49 2000.52,1216.57 2001.11,1216.81 2001.69,1216.95 2002.28,1217.27 2002.86,1220.02 2003.45,1223.7 2004.04,1224.82 2004.62,1224.59 2005.21,1225.59 2005.8,1223.92 2006.38,1223.66 2006.97,1223.38 2007.56,1221.96 2008.14,1220.56 2008.73,1220.23 2009.32,1218.82 2009.9,1217.53 2010.49,1218.92 2011.07,1217.81 2011.66,1219.25 2012.25,1220.47 2012.83,1221.44 2013.42,1222.38 2014.01,1219.55 2014.59,1220.69 2015.18,1221.7 2015.77,1224.16 2016.35,1221.46 2016.94,1222.55 2017.53,1224.87 2018.11,1221 2018.7,1219.56 2019.28,1217.16 2019.87,1218.47 2020.46,1221.18 2021.04,1220.96 2021.63,1219.4 2022.22,1219.37 2022.8,1220.49 2023.39,1220.27 2023.98,1217.6 2024.56,1217.69 2025.15,1217.61 2025.73,1217.62 2026.32,1215.02 2026.91,1217.91 2027.49,1215.48 2028.08,1215.45 2028.67,1217.87 2029.25,1216.66 2029.84,1217.78 2030.43,1217.96 2031.01,1216.7 2031.6,1216.79 2032.19,1215.89 2032.77,1218.46 2033.36,1218.68 2033.94,1214.93 2034.53,1211.39 2035.12,1209.13 2035.7,1209.57 2036.29,1208.78 2036.88,1212.96 2037.46,1214.53 2038.05,1216.36 2038.64,1215.16 2039.22,1213.83 2039.81,1216.46 2040.4,1215.37 2040.98,1215.42 2041.57,1217.04 2042.15,1219.49 2042.74,1220.45 2043.33,1221.89 2043.91,1219.53 2044.5,1220.92 2045.09,1221.31 2045.67,1221.94 2046.26,1221.76 2046.85,1221.82 2047.43,1224.02 2048.02,1223.82 2048.6,1221.07 2049.19,1218.4 2049.78,1218.38 2050.36,1219.63 2050.95,1218.15 2051.54,1222.11 2052.12,1220.72 2052.71,1219.3 2053.3,1221.73 2053.88,1222.68 2054.47,1222.53 2055.06,1221.25 2055.64,1220.95 2056.23,1223.21 2056.81,1222.87 2057.4,1221.47 2057.99,1220.01 2058.57,1220.01 2059.16,1219.69 2059.75,1219.43 2060.33,1220.81 2060.92,1219.45 2061.51,1219.3 2062.09,1217.98 2062.68,1215.26 2063.27,1215.08 2063.85,1215.05 2064.44,1211.52 2065.02,1213.28 2065.61,1212.47 2066.2,1210.57 2066.78,1210.86 2067.37,1213.96 2067.96,1213.03 2068.54,1212.13 2069.13,1212.59 2069.72,1211.76 2070.3,1210.9 2070.89,1211.65 2071.48,1213.41 2072.06,1212.44 2072.65,1212.84 2073.23,1211.77 2073.82,1212.06 2074.41,1212.27 2074.99,1212.57 2075.58,1214.08 2076.17,1213.29 2076.75,1210.98 2077.34,1210.24 2077.93,1212.14 2078.51,1213.77 2079.1,1212.79 2079.68,1213 2080.27,1213.2 2080.86,1211.17 2081.44,1211.59 2082.03,1212.09 2082.62,1216 2083.2,1216.03 2083.79,1217.5 2084.38,1216.43 2084.96,1216.62 2085.55,1215.31 2086.14,1215.43 2086.72,1215.57 2087.31,1213.22 2087.89,1216.14 2088.48,1212.51 2089.07,1215.25 2089.65,1214.36 2090.24,1214.8 2090.83,1214.99 2091.41,1216.31 2092,1215.29 2092.59,1214.11 2093.17,1215.33 2093.76,1216.71 2094.35,1220.49 2094.93,1220.11 2095.52,1219.83 2096.1,1217.36 2096.69,1217.7 2097.28,1216.74 2097.86,1218.26 2098.45,1218.36 2099.04,1218.2 2099.62,1216.74 2100.21,1215.69 2100.8,1214.46 2101.38,1213.85 2101.97,1213.09 2102.55,1213.62 2103.14,1211.5 2103.73,1213.19 2104.31,1213.63 2104.9,1212.39 2105.49,1212.57 2106.07,1213.8 2106.66,1215.23 2107.25,1215.34 2107.83,1216.72 2108.42,1215.32 2109.01,1216.58 2109.59,1219.3 2110.18,1217.98 2110.76,1219.17 2111.35,1220.25 2111.94,1221.45 2112.52,1219.8 2113.11,1218.42 2113.7,1218.22 2114.28,1218.24 2114.87,1221.83 2115.46,1222.92 2116.04,1224 2116.63,1223.89 2117.22,1219.79 2117.8,1219.81 2118.39,1218.44 2118.97,1219.81 2119.56,1218.26 2120.15,1218.04 2120.73,1220.12 2121.32,1221.42 2121.91,1220.09 2122.49,1219.95 2123.08,1219.96 2123.67,1218.45 2124.25,1218.53 2124.84,1217.02 2125.42,1217.21 2126.01,1215.9 2126.6,1217.41 2127.18,1222.28 2127.77,1222.16 2128.36,1224.43 2128.94,1222.93 2129.53,1222.85 2130.12,1222.94 2130.7,1226.18 2131.29,1224.5 2131.88,1225.35 2132.46,1223.96 2133.05,1225.07 2133.63,1224.93 2134.22,1225.83 2134.81,1224.47 2135.39,1223.06 2135.98,1224.01 2136.57,1224.77 2137.15,1223.99 2137.74,1222.37 2138.33,1220.92 2138.91,1221.81 2139.5,1221.5 2140.09,1223.78 2140.67,1223.39 2141.26,1222.79 2141.84,1220.23 2142.43,1220.04 2143.02,1217.32 2143.6,1217.12 2144.19,1217.25 2144.78,1216.85 2145.36,1219.44 2145.95,1222.12 2146.54,1224.14 2147.12,1223.65 2147.71,1220.64 2148.3,1221.73 2148.88,1222.45 2149.47,1218.53 2150.05,1219.97 2150.64,1218.22 2151.23,1217.92 2151.81,1217.85 2152.4,1217.57 2152.99,1220.06 2153.57,1219.05 2154.16,1218.83 2154.75,1221.24 2155.33,1222.07 2155.92,1221.84 2156.5,1218.97 2157.09,1218.8 2157.68,1221.29 2158.26,1220.82 \"/>\n<path clip-path=\"url(#clip952)\" d=\"M986.025 1218.59 L986.612 1218.59 L987.198 1218.59 L987.785 1218.59 L988.371 1218.59 L988.957 1218.59 L989.544 1218.59 L990.13 1218.59 L990.717 1218.59 L991.303 1218.59 L991.889 1218.59 L992.476 1218.59 L993.062 1218.59 L993.649 1218.59 L994.235 1218.59 L994.822 1218.59 L995.408 1218.59 L995.994 1218.59 L996.581 1218.59 L997.167 1218.59 L997.754 1218.59 L998.34 1218.59 L998.926 1218.59 L999.513 1218.59 L1000.1 1218.59 L1000.69 1218.59 L1001.27 1218.59 L1001.86 1218.59 L1002.44 1218.59 L1003.03 1218.59 L1003.62 1218.59 L1004.2 1218.59 L1004.79 1218.59 L1005.38 1218.59 L1005.96 1218.59 L1006.55 1218.59 L1007.14 1218.59 L1007.72 1218.59 L1008.31 1218.59 L1008.9 1218.59 L1009.48 1218.59 L1010.07 1218.59 L1010.65 1218.59 L1011.24 1218.59 L1011.83 1218.59 L1012.41 1218.59 L1013 1218.59 L1013.59 1218.59 L1014.17 1218.59 L1014.76 1218.59 L1015.35 1218.59 L1015.93 1218.59 L1016.52 1218.59 L1017.11 1218.59 L1017.69 1218.59 L1018.28 1218.59 L1018.86 1218.59 L1019.45 1218.59 L1020.04 1218.59 L1020.62 1218.59 L1021.21 1218.59 L1021.8 1218.59 L1022.38 1218.59 L1022.97 1218.59 L1023.56 1218.59 L1024.14 1218.59 L1024.73 1218.59 L1025.32 1218.59 L1025.9 1218.59 L1026.49 1218.59 L1027.07 1218.59 L1027.66 1218.59 L1028.25 1218.59 L1028.83 1218.59 L1029.42 1218.59 L1030.01 1218.59 L1030.59 1218.59 L1031.18 1218.59 L1031.77 1218.59 L1032.35 1218.59 L1032.94 1218.59 L1033.52 1218.59 L1034.11 1218.59 L1034.7 1218.59 L1035.28 1218.59 L1035.87 1218.59 L1036.46 1218.59 L1037.04 1218.59 L1037.63 1218.59 L1038.22 1218.59 L1038.8 1218.59 L1039.39 1218.59 L1039.98 1218.59 L1040.56 1218.59 L1041.15 1218.59 L1041.73 1218.59 L1042.32 1218.59 L1042.91 1218.59 L1043.49 1218.59 L1044.08 1218.59 L1044.67 1218.59 L1045.25 1218.59 L1045.84 1218.59 L1046.43 1218.59 L1047.01 1218.59 L1047.6 1218.59 L1048.19 1218.59 L1048.77 1218.59 L1049.36 1218.59 L1049.94 1218.59 L1050.53 1218.59 L1051.12 1218.59 L1051.7 1218.59 L1052.29 1218.59 L1052.88 1218.59 L1053.46 1218.59 L1054.05 1218.59 L1054.64 1218.59 L1055.22 1218.59 L1055.81 1218.59 L1056.39 1218.59 L1056.98 1218.59 L1057.57 1218.59 L1058.15 1218.59 L1058.74 1218.59 L1059.33 1218.59 L1059.91 1218.59 L1060.5 1218.59 L1061.09 1218.59 L1061.67 1218.59 L1062.26 1218.59 L1062.85 1218.59 L1063.43 1218.59 L1064.02 1218.59 L1064.6 1218.59 L1065.19 1218.59 L1065.78 1218.59 L1066.36 1218.59 L1066.95 1218.59 L1067.54 1218.59 L1068.12 1218.59 L1068.71 1218.59 L1069.3 1218.59 L1069.88 1218.59 L1070.47 1218.59 L1071.06 1218.59 L1071.64 1218.59 L1072.23 1218.59 L1072.81 1218.59 L1073.4 1218.59 L1073.99 1218.59 L1074.57 1218.59 L1075.16 1218.59 L1075.75 1218.59 L1076.33 1218.59 L1076.92 1218.59 L1077.51 1218.59 L1078.09 1218.59 L1078.68 1218.59 L1079.26 1218.59 L1079.85 1218.59 L1080.44 1218.59 L1081.02 1218.59 L1081.61 1218.59 L1082.2 1218.59 L1082.78 1218.59 L1083.37 1218.59 L1083.96 1218.59 L1084.54 1218.59 L1085.13 1218.59 L1085.72 1218.59 L1086.3 1218.59 L1086.89 1218.59 L1087.47 1218.59 L1088.06 1218.59 L1088.65 1218.59 L1089.23 1218.59 L1089.82 1218.59 L1090.41 1218.59 L1090.99 1218.59 L1091.58 1218.59 L1092.17 1218.59 L1092.75 1218.59 L1093.34 1218.59 L1093.93 1218.59 L1094.51 1218.59 L1095.1 1218.59 L1095.68 1218.59 L1096.27 1218.59 L1096.86 1218.59 L1097.44 1218.59 L1098.03 1218.59 L1098.62 1218.59 L1099.2 1218.59 L1099.79 1218.59 L1100.38 1218.59 L1100.96 1218.59 L1101.55 1218.59 L1102.14 1218.59 L1102.72 1218.59 L1103.31 1218.59 L1103.89 1218.59 L1104.48 1218.59 L1105.07 1218.59 L1105.65 1218.59 L1106.24 1218.59 L1106.83 1218.59 L1107.41 1218.59 L1108 1218.59 L1108.59 1218.59 L1109.17 1218.59 L1109.76 1218.59 L1110.34 1218.59 L1110.93 1218.59 L1111.52 1218.59 L1112.1 1218.59 L1112.69 1218.59 L1113.28 1218.59 L1113.86 1218.59 L1114.45 1218.59 L1115.04 1218.59 L1115.62 1218.59 L1116.21 1218.59 L1116.8 1218.59 L1117.38 1218.59 L1117.97 1218.59 L1118.55 1218.59 L1119.14 1218.59 L1119.73 1218.59 L1120.31 1218.59 L1120.9 1218.59 L1121.49 1218.59 L1122.07 1218.59 L1122.66 1218.59 L1123.25 1218.59 L1123.83 1218.59 L1124.42 1218.59 L1125.01 1218.59 L1125.59 1218.59 L1126.18 1218.59 L1126.76 1218.59 L1127.35 1218.59 L1127.94 1218.59 L1128.52 1218.59 L1129.11 1218.59 L1129.7 1218.59 L1130.28 1218.59 L1130.87 1218.59 L1131.46 1218.59 L1132.04 1218.59 L1132.63 1218.59 L1133.21 1218.59 L1133.8 1218.59 L1134.39 1218.59 L1134.97 1218.59 L1135.56 1218.59 L1136.15 1218.59 L1136.73 1218.59 L1137.32 1218.59 L1137.91 1218.59 L1138.49 1218.59 L1139.08 1218.59 L1139.67 1218.59 L1140.25 1218.59 L1140.84 1218.59 L1141.42 1218.59 L1142.01 1218.59 L1142.6 1218.59 L1143.18 1218.59 L1143.77 1218.59 L1144.36 1218.59 L1144.94 1218.59 L1145.53 1218.59 L1146.12 1218.59 L1146.7 1218.59 L1147.29 1218.59 L1147.88 1218.59 L1148.46 1218.59 L1149.05 1218.59 L1149.63 1218.59 L1150.22 1218.59 L1150.81 1218.59 L1151.39 1218.59 L1151.98 1218.59 L1152.57 1218.59 L1153.15 1218.59 L1153.74 1218.59 L1154.33 1218.59 L1154.91 1218.59 L1155.5 1218.59 L1156.09 1218.59 L1156.67 1218.59 L1157.26 1218.59 L1157.84 1218.59 L1158.43 1218.59 L1159.02 1218.59 L1159.6 1218.59 L1160.19 1218.59 L1160.78 1218.59 L1161.36 1218.59 L1161.95 1218.59 L1162.54 1218.59 L1163.12 1218.59 L1163.71 1218.59 L1164.29 1218.59 L1164.88 1218.59 L1165.47 1218.59 L1166.05 1218.59 L1166.64 1218.59 L1167.23 1218.59 L1167.81 1218.59 L1168.4 1218.59 L1168.99 1218.59 L1169.57 1218.59 L1170.16 1218.59 L1170.75 1218.59 L1171.33 1218.59 L1171.92 1218.59 L1172.5 1218.59 L1173.09 1218.59 L1173.68 1218.59 L1174.26 1218.59 L1174.85 1218.59 L1175.44 1218.59 L1176.02 1218.59 L1176.61 1218.59 L1177.2 1218.59 L1177.78 1218.59 L1178.37 1218.59 L1178.96 1218.59 L1179.54 1218.59 L1180.13 1218.59 L1180.71 1218.59 L1181.3 1218.59 L1181.89 1218.59 L1182.47 1218.59 L1183.06 1218.59 L1183.65 1218.59 L1184.23 1218.59 L1184.82 1218.59 L1185.41 1218.59 L1185.99 1218.59 L1186.58 1218.59 L1187.16 1218.59 L1187.75 1218.59 L1188.34 1218.59 L1188.92 1218.59 L1189.51 1218.59 L1190.1 1218.59 L1190.68 1218.59 L1191.27 1218.59 L1191.86 1218.59 L1192.44 1218.59 L1193.03 1218.59 L1193.62 1218.59 L1194.2 1218.59 L1194.79 1218.59 L1195.37 1218.59 L1195.96 1218.59 L1196.55 1218.59 L1197.13 1218.59 L1197.72 1218.59 L1198.31 1218.59 L1198.89 1218.59 L1199.48 1218.59 L1200.07 1218.59 L1200.65 1218.59 L1201.24 1218.59 L1201.83 1218.59 L1202.41 1218.59 L1203 1218.59 L1203.58 1218.59 L1204.17 1218.59 L1204.76 1218.59 L1205.34 1218.59 L1205.93 1218.59 L1206.52 1218.59 L1207.1 1218.59 L1207.69 1218.59 L1208.28 1218.59 L1208.86 1218.59 L1209.45 1218.59 L1210.03 1218.59 L1210.62 1218.59 L1211.21 1218.59 L1211.79 1218.59 L1212.38 1218.59 L1212.97 1218.59 L1213.55 1218.59 L1214.14 1218.59 L1214.73 1218.59 L1215.31 1218.59 L1215.9 1218.59 L1216.49 1218.59 L1217.07 1218.59 L1217.66 1218.59 L1218.24 1218.59 L1218.83 1218.59 L1219.42 1218.59 L1220 1218.59 L1220.59 1218.59 L1221.18 1218.59 L1221.76 1218.59 L1222.35 1218.59 L1222.94 1218.59 L1223.52 1218.59 L1224.11 1218.59 L1224.7 1218.59 L1225.28 1218.59 L1225.87 1218.59 L1226.45 1218.59 L1227.04 1218.59 L1227.63 1218.59 L1228.21 1218.59 L1228.8 1218.59 L1229.39 1218.59 L1229.97 1218.59 L1230.56 1218.59 L1231.15 1218.59 L1231.73 1218.59 L1232.32 1218.59 L1232.91 1218.59 L1233.49 1218.59 L1234.08 1218.59 L1234.66 1218.59 L1235.25 1218.59 L1235.84 1218.59 L1236.42 1218.59 L1237.01 1218.59 L1237.6 1218.59 L1238.18 1218.59 L1238.77 1218.59 L1239.36 1218.59 L1239.94 1218.59 L1240.53 1218.59 L1241.11 1218.59 L1241.7 1218.59 L1242.29 1218.59 L1242.87 1218.59 L1243.46 1218.59 L1244.05 1218.59 L1244.63 1218.59 L1245.22 1218.59 L1245.81 1218.59 L1246.39 1218.59 L1246.98 1218.59 L1247.57 1218.59 L1248.15 1218.59 L1248.74 1218.59 L1249.32 1218.59 L1249.91 1218.59 L1250.5 1218.59 L1251.08 1218.59 L1251.67 1218.59 L1252.26 1218.59 L1252.84 1218.59 L1253.43 1218.59 L1254.02 1218.59 L1254.6 1218.59 L1255.19 1218.59 L1255.78 1218.59 L1256.36 1218.59 L1256.95 1218.59 L1257.53 1218.59 L1258.12 1218.59 L1258.71 1218.59 L1259.29 1218.59 L1259.88 1218.59 L1260.47 1218.59 L1261.05 1218.59 L1261.64 1218.59 L1262.23 1218.59 L1262.81 1218.59 L1263.4 1218.59 L1263.98 1218.59 L1264.57 1218.59 L1265.16 1218.59 L1265.74 1218.59 L1266.33 1218.59 L1266.92 1218.59 L1267.5 1218.59 L1268.09 1218.59 L1268.68 1218.59 L1269.26 1218.59 L1269.85 1218.59 L1270.44 1218.59 L1271.02 1218.59 L1271.61 1218.59 L1272.19 1218.59 L1272.78 1218.59 L1273.37 1218.59 L1273.95 1218.59 L1274.54 1218.59 L1275.13 1218.59 L1275.71 1218.59 L1276.3 1218.59 L1276.89 1218.59 L1277.47 1218.59 L1278.06 1218.59 L1278.65 1218.59 L1279.23 1218.59 L1279.82 1218.59 L1280.4 1218.59 L1280.99 1218.59 L1281.58 1218.59 L1282.16 1218.59 L1282.75 1218.59 L1283.34 1218.59 L1283.92 1218.59 L1284.51 1218.59 L1285.1 1218.59 L1285.68 1218.59 L1286.27 1218.59 L1286.86 1218.59 L1287.44 1218.59 L1288.03 1218.59 L1288.61 1218.59 L1289.2 1218.59 L1289.79 1218.59 L1290.37 1218.59 L1290.96 1218.59 L1291.55 1218.59 L1292.13 1218.59 L1292.72 1218.59 L1293.31 1218.59 L1293.89 1218.59 L1294.48 1218.59 L1295.06 1218.59 L1295.65 1218.59 L1296.24 1218.59 L1296.82 1218.59 L1297.41 1218.59 L1298 1218.59 L1298.58 1218.59 L1299.17 1218.59 L1299.76 1218.59 L1300.34 1218.59 L1300.93 1218.59 L1301.52 1218.59 L1302.1 1218.59 L1302.69 1218.59 L1303.27 1218.59 L1303.86 1218.59 L1304.45 1218.59 L1305.03 1218.59 L1305.62 1218.59 L1306.21 1218.59 L1306.79 1218.59 L1307.38 1218.59 L1307.97 1218.59 L1308.55 1218.59 L1309.14 1218.59 L1309.73 1218.59 L1310.31 1218.59 L1310.9 1218.59 L1311.48 1218.59 L1312.07 1218.59 L1312.66 1218.59 L1313.24 1218.59 L1313.83 1218.59 L1314.42 1218.59 L1315 1218.59 L1315.59 1218.59 L1316.18 1218.59 L1316.76 1218.59 L1317.35 1218.59 L1317.93 1218.59 L1318.52 1218.59 L1319.11 1218.59 L1319.69 1218.59 L1320.28 1218.59 L1320.87 1218.59 L1321.45 1218.59 L1322.04 1218.59 L1322.63 1218.59 L1323.21 1218.59 L1323.8 1218.59 L1324.39 1218.59 L1324.97 1218.59 L1325.56 1218.59 L1326.14 1218.59 L1326.73 1218.59 L1327.32 1218.59 L1327.9 1218.59 L1328.49 1218.59 L1329.08 1218.59 L1329.66 1218.59 L1330.25 1218.59 L1330.84 1218.59 L1331.42 1218.59 L1332.01 1218.59 L1332.6 1218.59 L1333.18 1218.59 L1333.77 1218.59 L1334.35 1218.59 L1334.94 1218.59 L1335.53 1218.59 L1336.11 1218.59 L1336.7 1218.59 L1337.29 1218.59 L1337.87 1218.59 L1338.46 1218.59 L1339.05 1218.59 L1339.63 1218.59 L1340.22 1218.59 L1340.8 1218.59 L1341.39 1218.59 L1341.98 1218.59 L1342.56 1218.59 L1343.15 1218.59 L1343.74 1218.59 L1344.32 1218.59 L1344.91 1218.59 L1345.5 1218.59 L1346.08 1218.59 L1346.67 1218.59 L1347.26 1218.59 L1347.84 1218.59 L1348.43 1218.59 L1349.01 1218.59 L1349.6 1218.59 L1350.19 1218.59 L1350.77 1218.59 L1351.36 1218.59 L1351.95 1218.59 L1352.53 1218.59 L1353.12 1218.59 L1353.71 1218.59 L1354.29 1218.59 L1354.88 1218.59 L1355.47 1218.59 L1356.05 1218.59 L1356.64 1218.59 L1357.22 1218.59 L1357.81 1218.59 L1358.4 1218.59 L1358.98 1218.59 L1359.57 1218.59 L1360.16 1218.59 L1360.74 1218.59 L1361.33 1218.59 L1361.92 1218.59 L1362.5 1218.59 L1363.09 1218.59 L1363.68 1218.59 L1364.26 1218.59 L1364.85 1218.59 L1365.43 1218.59 L1366.02 1218.59 L1366.61 1218.59 L1367.19 1218.59 L1367.78 1218.59 L1368.37 1218.59 L1368.95 1218.59 L1369.54 1218.59 L1370.13 1218.59 L1370.71 1218.59 L1371.3 1218.59 L1371.88 1218.59 L1372.47 1218.59 L1373.06 1218.59 L1373.64 1218.59 L1374.23 1218.59 L1374.82 1218.59 L1375.4 1218.59 L1375.99 1218.59 L1376.58 1218.59 L1377.16 1218.59 L1377.75 1218.59 L1378.34 1218.59 L1378.92 1218.59 L1379.51 1218.59 L1380.09 1218.59 L1380.68 1218.59 L1381.27 1218.59 L1381.85 1218.59 L1382.44 1218.59 L1383.03 1218.59 L1383.61 1218.59 L1384.2 1218.59 L1384.79 1218.59 L1385.37 1218.59 L1385.96 1218.59 L1386.55 1218.59 L1387.13 1218.59 L1387.72 1218.59 L1388.3 1218.59 L1388.89 1218.59 L1389.48 1218.59 L1390.06 1218.59 L1390.65 1218.59 L1391.24 1218.59 L1391.82 1218.59 L1392.41 1218.59 L1393 1218.59 L1393.58 1218.59 L1394.17 1218.59 L1394.75 1218.59 L1395.34 1218.59 L1395.93 1218.59 L1396.51 1218.59 L1397.1 1218.59 L1397.69 1218.59 L1398.27 1218.59 L1398.86 1218.59 L1399.45 1218.59 L1400.03 1218.59 L1400.62 1218.59 L1401.21 1218.59 L1401.79 1218.59 L1402.38 1218.59 L1402.96 1218.59 L1403.55 1218.59 L1404.14 1218.59 L1404.72 1218.59 L1405.31 1218.59 L1405.9 1218.59 L1406.48 1218.59 L1407.07 1218.59 L1407.66 1218.59 L1408.24 1218.59 L1408.83 1218.59 L1409.42 1218.59 L1410 1218.59 L1410.59 1218.59 L1411.17 1218.59 L1411.76 1218.59 L1412.35 1218.59 L1412.93 1218.59 L1413.52 1218.59 L1414.11 1218.59 L1414.69 1218.59 L1415.28 1218.59 L1415.87 1218.59 L1416.45 1218.59 L1417.04 1218.59 L1417.63 1218.59 L1418.21 1218.59 L1418.8 1218.59 L1419.38 1218.59 L1419.97 1218.59 L1420.56 1218.59 L1421.14 1218.59 L1421.73 1218.59 L1422.32 1218.59 L1422.9 1218.59 L1423.49 1218.59 L1424.08 1218.59 L1424.66 1218.59 L1425.25 1218.59 L1425.83 1218.59 L1426.42 1218.59 L1427.01 1218.59 L1427.59 1218.59 L1428.18 1218.59 L1428.77 1218.59 L1429.35 1218.59 L1429.94 1218.59 L1430.53 1218.59 L1431.11 1218.59 L1431.7 1218.59 L1432.29 1218.59 L1432.87 1218.59 L1433.46 1218.59 L1434.04 1218.59 L1434.63 1218.59 L1435.22 1218.59 L1435.8 1218.59 L1436.39 1218.59 L1436.98 1218.59 L1437.56 1218.59 L1438.15 1218.59 L1438.74 1218.59 L1439.32 1218.59 L1439.91 1218.59 L1440.5 1218.59 L1441.08 1218.59 L1441.67 1218.59 L1442.25 1218.59 L1442.84 1218.59 L1443.43 1218.59 L1444.01 1218.59 L1444.6 1218.59 L1445.19 1218.59 L1445.77 1218.59 L1446.36 1218.59 L1446.95 1218.59 L1447.53 1218.59 L1448.12 1218.59 L1448.7 1218.59 L1449.29 1218.59 L1449.88 1218.59 L1450.46 1218.59 L1451.05 1218.59 L1451.64 1218.59 L1452.22 1218.59 L1452.81 1218.59 L1453.4 1218.59 L1453.98 1218.59 L1454.57 1218.59 L1455.16 1218.59 L1455.74 1218.59 L1456.33 1218.59 L1456.91 1218.59 L1457.5 1218.59 L1458.09 1218.59 L1458.67 1218.59 L1459.26 1218.59 L1459.85 1218.59 L1460.43 1218.59 L1461.02 1218.59 L1461.61 1218.59 L1462.19 1218.59 L1462.78 1218.59 L1463.37 1218.59 L1463.95 1218.59 L1464.54 1218.59 L1465.12 1218.59 L1465.71 1218.59 L1466.3 1218.59 L1466.88 1218.59 L1467.47 1218.59 L1468.06 1218.59 L1468.64 1218.59 L1469.23 1218.59 L1469.82 1218.59 L1470.4 1218.59 L1470.99 1218.59 L1471.57 1218.59 L1472.16 1218.59 L1472.75 1218.59 L1473.33 1218.59 L1473.92 1218.59 L1474.51 1218.59 L1475.09 1218.59 L1475.68 1218.59 L1476.27 1218.59 L1476.85 1218.59 L1477.44 1218.59 L1478.03 1218.59 L1478.61 1218.59 L1479.2 1218.59 L1479.78 1218.59 L1480.37 1218.59 L1480.96 1218.59 L1481.54 1218.59 L1482.13 1218.59 L1482.72 1218.59 L1483.3 1218.59 L1483.89 1218.59 L1484.48 1218.59 L1485.06 1218.59 L1485.65 1218.59 L1486.24 1218.59 L1486.82 1218.59 L1487.41 1218.59 L1487.99 1218.59 L1488.58 1218.59 L1489.17 1218.59 L1489.75 1218.59 L1490.34 1218.59 L1490.93 1218.59 L1491.51 1218.59 L1492.1 1218.59 L1492.69 1218.59 L1493.27 1218.59 L1493.86 1218.59 L1494.45 1218.59 L1495.03 1218.59 L1495.62 1218.59 L1496.2 1218.59 L1496.79 1218.59 L1497.38 1218.59 L1497.96 1218.59 L1498.55 1218.59 L1499.14 1218.59 L1499.72 1218.59 L1500.31 1218.59 L1500.9 1218.59 L1501.48 1218.59 L1502.07 1218.59 L1502.65 1218.59 L1503.24 1218.59 L1503.83 1218.59 L1504.41 1218.59 L1505 1218.59 L1505.59 1218.59 L1506.17 1218.59 L1506.76 1218.59 L1507.35 1218.59 L1507.93 1218.59 L1508.52 1218.59 L1509.11 1218.59 L1509.69 1218.59 L1510.28 1218.59 L1510.86 1218.59 L1511.45 1218.59 L1512.04 1218.59 L1512.62 1218.59 L1513.21 1218.59 L1513.8 1218.59 L1514.38 1218.59 L1514.97 1218.59 L1515.56 1218.59 L1516.14 1218.59 L1516.73 1218.59 L1517.32 1218.59 L1517.9 1218.59 L1518.49 1218.59 L1519.07 1218.59 L1519.66 1218.59 L1520.25 1218.59 L1520.83 1218.59 L1521.42 1218.59 L1522.01 1218.59 L1522.59 1218.59 L1523.18 1218.59 L1523.77 1218.59 L1524.35 1218.59 L1524.94 1218.59 L1525.52 1218.59 L1526.11 1218.59 L1526.7 1218.59 L1527.28 1218.59 L1527.87 1218.59 L1528.46 1218.59 L1529.04 1218.59 L1529.63 1218.59 L1530.22 1218.59 L1530.8 1218.59 L1531.39 1218.59 L1531.98 1218.59 L1532.56 1218.59 L1533.15 1218.59 L1533.73 1218.59 L1534.32 1218.59 L1534.91 1218.59 L1535.49 1218.59 L1536.08 1218.59 L1536.67 1218.59 L1537.25 1218.59 L1537.84 1218.59 L1538.43 1218.59 L1539.01 1218.59 L1539.6 1218.59 L1540.19 1218.59 L1540.77 1218.59 L1541.36 1218.59 L1541.94 1218.59 L1542.53 1218.59 L1543.12 1218.59 L1543.7 1218.59 L1544.29 1218.59 L1544.88 1218.59 L1545.46 1218.59 L1546.05 1218.59 L1546.64 1218.59 L1547.22 1218.59 L1547.81 1218.59 L1548.4 1218.59 L1548.98 1218.59 L1549.57 1218.59 L1550.15 1218.59 L1550.74 1218.59 L1551.33 1218.59 L1551.91 1218.59 L1552.5 1218.59 L1553.09 1218.59 L1553.67 1218.59 L1554.26 1218.59 L1554.85 1218.59 L1555.43 1218.59 L1556.02 1218.59 L1556.6 1218.59 L1557.19 1218.59 L1557.78 1218.59 L1558.36 1218.59 L1558.95 1218.59 L1559.54 1218.59 L1560.12 1218.59 L1560.71 1218.59 L1561.3 1218.59 L1561.88 1218.59 L1562.47 1218.59 L1563.06 1218.59 L1563.64 1218.59 L1564.23 1218.59 L1564.81 1218.59 L1565.4 1218.59 L1565.99 1218.59 L1566.57 1218.59 L1567.16 1218.59 L1567.75 1218.59 L1568.33 1218.59 L1568.92 1218.59 L1569.51 1218.59 L1570.09 1218.59 L1570.68 1218.59 L1571.27 1218.59 L1571.85 1218.59 L1572.44 1218.59 L1573.02 1218.59 L1573.61 1218.59 L1574.2 1218.59 L1574.78 1218.59 L1575.37 1218.59 L1575.96 1218.59 L1576.54 1218.59 L1577.13 1218.59 L1577.72 1218.59 L1578.3 1218.59 L1578.89 1218.59 L1579.47 1218.59 L1580.06 1218.59 L1580.65 1218.59 L1581.23 1218.59 L1581.82 1218.59 L1582.41 1218.59 L1582.99 1218.59 L1583.58 1218.59 L1584.17 1218.59 L1584.75 1218.59 L1585.34 1218.59 L1585.93 1218.59 L1586.51 1218.59 L1587.1 1218.59 L1587.68 1218.59 L1588.27 1218.59 L1588.86 1218.59 L1589.44 1218.59 L1590.03 1218.59 L1590.62 1218.59 L1591.2 1218.59 L1591.79 1218.59 L1592.38 1218.59 L1592.96 1218.59 L1593.55 1218.59 L1594.14 1218.59 L1594.72 1218.59 L1595.31 1218.59 L1595.89 1218.59 L1596.48 1218.59 L1597.07 1218.59 L1597.65 1218.59 L1598.24 1218.59 L1598.83 1218.59 L1599.41 1218.59 L1600 1218.59 L1600.59 1218.59 L1601.17 1218.59 L1601.76 1218.59 L1602.34 1218.59 L1602.93 1218.59 L1603.52 1218.59 L1604.1 1218.59 L1604.69 1218.59 L1605.28 1218.59 L1605.86 1218.59 L1606.45 1218.59 L1607.04 1218.59 L1607.62 1218.59 L1608.21 1218.59 L1608.8 1218.59 L1609.38 1218.59 L1609.97 1218.59 L1610.55 1218.59 L1611.14 1218.59 L1611.73 1218.59 L1612.31 1218.59 L1612.9 1218.59 L1613.49 1218.59 L1614.07 1218.59 L1614.66 1218.59 L1615.25 1218.59 L1615.83 1218.59 L1616.42 1218.59 L1617.01 1218.59 L1617.59 1218.59 L1618.18 1218.59 L1618.76 1218.59 L1619.35 1218.59 L1619.94 1218.59 L1620.52 1218.59 L1621.11 1218.59 L1621.7 1218.59 L1622.28 1218.59 L1622.87 1218.59 L1623.46 1218.59 L1624.04 1218.59 L1624.63 1218.59 L1625.22 1218.59 L1625.8 1218.59 L1626.39 1218.59 L1626.97 1218.59 L1627.56 1218.59 L1628.15 1218.59 L1628.73 1218.59 L1629.32 1218.59 L1629.91 1218.59 L1630.49 1218.59 L1631.08 1218.59 L1631.67 1218.59 L1632.25 1218.59 L1632.84 1218.59 L1633.42 1218.59 L1634.01 1218.59 L1634.6 1218.59 L1635.18 1218.59 L1635.77 1218.59 L1636.36 1218.59 L1636.94 1218.59 L1637.53 1218.59 L1638.12 1218.59 L1638.7 1218.59 L1639.29 1218.59 L1639.88 1218.59 L1640.46 1218.59 L1641.05 1218.59 L1641.63 1218.59 L1642.22 1218.59 L1642.81 1218.59 L1643.39 1218.59 L1643.98 1218.59 L1644.57 1218.59 L1645.15 1218.59 L1645.74 1218.59 L1646.33 1218.59 L1646.91 1218.59 L1647.5 1218.59 L1648.09 1218.59 L1648.67 1218.59 L1649.26 1218.59 L1649.84 1218.59 L1650.43 1218.59 L1651.02 1218.59 L1651.6 1218.59 L1652.19 1218.59 L1652.78 1218.59 L1653.36 1218.59 L1653.95 1218.59 L1654.54 1218.59 L1655.12 1218.59 L1655.71 1218.59 L1656.29 1218.59 L1656.88 1218.59 L1657.47 1218.59 L1658.05 1218.59 L1658.64 1218.59 L1659.23 1218.59 L1659.81 1218.59 L1660.4 1218.59 L1660.99 1218.59 L1661.57 1218.59 L1662.16 1218.59 L1662.75 1218.59 L1663.33 1218.59 L1663.92 1218.59 L1664.5 1218.59 L1665.09 1218.59 L1665.68 1218.59 L1666.26 1218.59 L1666.85 1218.59 L1667.44 1218.59 L1668.02 1218.59 L1668.61 1218.59 L1669.2 1218.59 L1669.78 1218.59 L1670.37 1218.59 L1670.96 1218.59 L1671.54 1218.59 L1672.13 1218.59 L1672.71 1218.59 L1673.3 1218.59 L1673.89 1218.59 L1674.47 1218.59 L1675.06 1218.59 L1675.65 1218.59 L1676.23 1218.59 L1676.82 1218.59 L1677.41 1218.59 L1677.99 1218.59 L1678.58 1218.59 L1679.17 1218.59 L1679.75 1218.59 L1680.34 1218.59 L1680.92 1218.59 L1681.51 1218.59 L1682.1 1218.59 L1682.68 1218.59 L1683.27 1218.59 L1683.86 1218.59 L1684.44 1218.59 L1685.03 1218.59 L1685.62 1218.59 L1686.2 1218.59 L1686.79 1218.59 L1687.37 1218.59 L1687.96 1218.59 L1688.55 1218.59 L1689.13 1218.59 L1689.72 1218.59 L1690.31 1218.59 L1690.89 1218.59 L1691.48 1218.59 L1692.07 1218.59 L1692.65 1218.59 L1693.24 1218.59 L1693.83 1218.59 L1694.41 1218.59 L1695 1218.59 L1695.58 1218.59 L1696.17 1218.59 L1696.76 1218.59 L1697.34 1218.59 L1697.93 1218.59 L1698.52 1218.59 L1699.1 1218.59 L1699.69 1218.59 L1700.28 1218.59 L1700.86 1218.59 L1701.45 1218.59 L1702.04 1218.59 L1702.62 1218.59 L1703.21 1218.59 L1703.79 1218.59 L1704.38 1218.59 L1704.97 1218.59 L1705.55 1218.59 L1706.14 1218.59 L1706.73 1218.59 L1707.31 1218.59 L1707.9 1218.59 L1708.49 1218.59 L1709.07 1218.59 L1709.66 1218.59 L1710.24 1218.59 L1710.83 1218.59 L1711.42 1218.59 L1712 1218.59 L1712.59 1218.59 L1713.18 1218.59 L1713.76 1218.59 L1714.35 1218.59 L1714.94 1218.59 L1715.52 1218.59 L1716.11 1218.59 L1716.7 1218.59 L1717.28 1218.59 L1717.87 1218.59 L1718.45 1218.59 L1719.04 1218.59 L1719.63 1218.59 L1720.21 1218.59 L1720.8 1218.59 L1721.39 1218.59 L1721.97 1218.59 L1722.56 1218.59 L1723.15 1218.59 L1723.73 1218.59 L1724.32 1218.59 L1724.91 1218.59 L1725.49 1218.59 L1726.08 1218.59 L1726.66 1218.59 L1727.25 1218.59 L1727.84 1218.59 L1728.42 1218.59 L1729.01 1218.59 L1729.6 1218.59 L1730.18 1218.59 L1730.77 1218.59 L1731.36 1218.59 L1731.94 1218.59 L1732.53 1218.59 L1733.11 1218.59 L1733.7 1218.59 L1734.29 1218.59 L1734.87 1218.59 L1735.46 1218.59 L1736.05 1218.59 L1736.63 1218.59 L1737.22 1218.59 L1737.81 1218.59 L1738.39 1218.59 L1738.98 1218.59 L1739.57 1218.59 L1740.15 1218.59 L1740.74 1218.59 L1741.32 1218.59 L1741.91 1218.59 L1742.5 1218.59 L1743.08 1218.59 L1743.67 1218.59 L1744.26 1218.59 L1744.84 1218.59 L1745.43 1218.59 L1746.02 1218.59 L1746.6 1218.59 L1747.19 1218.59 L1747.78 1218.59 L1748.36 1218.59 L1748.95 1218.59 L1749.53 1218.59 L1750.12 1218.59 L1750.71 1218.59 L1751.29 1218.59 L1751.88 1218.59 L1752.47 1218.59 L1753.05 1218.59 L1753.64 1218.59 L1754.23 1218.59 L1754.81 1218.59 L1755.4 1218.59 L1755.99 1218.59 L1756.57 1218.59 L1757.16 1218.59 L1757.74 1218.59 L1758.33 1218.59 L1758.92 1218.59 L1759.5 1218.59 L1760.09 1218.59 L1760.68 1218.59 L1761.26 1218.59 L1761.85 1218.59 L1762.44 1218.59 L1763.02 1218.59 L1763.61 1218.59 L1764.19 1218.59 L1764.78 1218.59 L1765.37 1218.59 L1765.95 1218.59 L1766.54 1218.59 L1767.13 1218.59 L1767.71 1218.59 L1768.3 1218.59 L1768.89 1218.59 L1769.47 1218.59 L1770.06 1218.59 L1770.65 1218.59 L1771.23 1218.59 L1771.82 1218.59 L1772.4 1218.59 L1772.99 1218.59 L1773.58 1218.59 L1774.16 1218.59 L1774.75 1218.59 L1775.34 1218.59 L1775.92 1218.59 L1776.51 1218.59 L1777.1 1218.59 L1777.68 1218.59 L1778.27 1218.59 L1778.86 1218.59 L1779.44 1218.59 L1780.03 1218.59 L1780.61 1218.59 L1781.2 1218.59 L1781.79 1218.59 L1782.37 1218.59 L1782.96 1218.59 L1783.55 1218.59 L1784.13 1218.59 L1784.72 1218.59 L1785.31 1218.59 L1785.89 1218.59 L1786.48 1218.59 L1787.06 1218.59 L1787.65 1218.59 L1788.24 1218.59 L1788.82 1218.59 L1789.41 1218.59 L1790 1218.59 L1790.58 1218.59 L1791.17 1218.59 L1791.76 1218.59 L1792.34 1218.59 L1792.93 1218.59 L1793.52 1218.59 L1794.1 1218.59 L1794.69 1218.59 L1795.27 1218.59 L1795.86 1218.59 L1796.45 1218.59 L1797.03 1218.59 L1797.62 1218.59 L1798.21 1218.59 L1798.79 1218.59 L1799.38 1218.59 L1799.97 1218.59 L1800.55 1218.59 L1801.14 1218.59 L1801.73 1218.59 L1802.31 1218.59 L1802.9 1218.59 L1803.48 1218.59 L1804.07 1218.59 L1804.66 1218.59 L1805.24 1218.59 L1805.83 1218.59 L1806.42 1218.59 L1807 1218.59 L1807.59 1218.59 L1808.18 1218.59 L1808.76 1218.59 L1809.35 1218.59 L1809.94 1218.59 L1810.52 1218.59 L1811.11 1218.59 L1811.69 1218.59 L1812.28 1218.59 L1812.87 1218.59 L1813.45 1218.59 L1814.04 1218.59 L1814.63 1218.59 L1815.21 1218.59 L1815.8 1218.59 L1816.39 1218.59 L1816.97 1218.59 L1817.56 1218.59 L1818.14 1218.59 L1818.73 1218.59 L1819.32 1218.59 L1819.9 1218.59 L1820.49 1218.59 L1821.08 1218.59 L1821.66 1218.59 L1822.25 1218.59 L1822.84 1218.59 L1823.42 1218.59 L1824.01 1218.59 L1824.6 1218.59 L1825.18 1218.59 L1825.77 1218.59 L1826.35 1218.59 L1826.94 1218.59 L1827.53 1218.59 L1828.11 1218.59 L1828.7 1218.59 L1829.29 1218.59 L1829.87 1218.59 L1830.46 1218.59 L1831.05 1218.59 L1831.63 1218.59 L1832.22 1218.59 L1832.81 1218.59 L1833.39 1218.59 L1833.98 1218.59 L1834.56 1218.59 L1835.15 1218.59 L1835.74 1218.59 L1836.32 1218.59 L1836.91 1218.59 L1837.5 1218.59 L1838.08 1218.59 L1838.67 1218.59 L1839.26 1218.59 L1839.84 1218.59 L1840.43 1218.59 L1841.01 1218.59 L1841.6 1218.59 L1842.19 1218.59 L1842.77 1218.59 L1843.36 1218.59 L1843.95 1218.59 L1844.53 1218.59 L1845.12 1218.59 L1845.71 1218.59 L1846.29 1218.59 L1846.88 1218.59 L1847.47 1218.59 L1848.05 1218.59 L1848.64 1218.59 L1849.22 1218.59 L1849.81 1218.59 L1850.4 1218.59 L1850.98 1218.59 L1851.57 1218.59 L1852.16 1218.59 L1852.74 1218.59 L1853.33 1218.59 L1853.92 1218.59 L1854.5 1218.59 L1855.09 1218.59 L1855.68 1218.59 L1856.26 1218.59 L1856.85 1218.59 L1857.43 1218.59 L1858.02 1218.59 L1858.61 1218.59 L1859.19 1218.59 L1859.78 1218.59 L1860.37 1218.59 L1860.95 1218.59 L1861.54 1218.59 L1862.13 1218.59 L1862.71 1218.59 L1863.3 1218.59 L1863.88 1218.59 L1864.47 1218.59 L1865.06 1218.59 L1865.64 1218.59 L1866.23 1218.59 L1866.82 1218.59 L1867.4 1218.59 L1867.99 1218.59 L1868.58 1218.59 L1869.16 1218.59 L1869.75 1218.59 L1870.34 1218.59 L1870.92 1218.59 L1871.51 1218.59 L1872.09 1218.59 L1872.68 1218.59 L1873.27 1218.59 L1873.85 1218.59 L1874.44 1218.59 L1875.03 1218.59 L1875.61 1218.59 L1876.2 1218.59 L1876.79 1218.59 L1877.37 1218.59 L1877.96 1218.59 L1878.55 1218.59 L1879.13 1218.59 L1879.72 1218.59 L1880.3 1218.59 L1880.89 1218.59 L1881.48 1218.59 L1882.06 1218.59 L1882.65 1218.59 L1883.24 1218.59 L1883.82 1218.59 L1884.41 1218.59 L1885 1218.59 L1885.58 1218.59 L1886.17 1218.59 L1886.76 1218.59 L1887.34 1218.59 L1887.93 1218.59 L1888.51 1218.59 L1889.1 1218.59 L1889.69 1218.59 L1890.27 1218.59 L1890.86 1218.59 L1891.45 1218.59 L1892.03 1218.59 L1892.62 1218.59 L1893.21 1218.59 L1893.79 1218.59 L1894.38 1218.59 L1894.96 1218.59 L1895.55 1218.59 L1896.14 1218.59 L1896.72 1218.59 L1897.31 1218.59 L1897.9 1218.59 L1898.48 1218.59 L1899.07 1218.59 L1899.66 1218.59 L1900.24 1218.59 L1900.83 1218.59 L1901.42 1218.59 L1902 1218.59 L1902.59 1218.59 L1903.17 1218.59 L1903.76 1218.59 L1904.35 1218.59 L1904.93 1218.59 L1905.52 1218.59 L1906.11 1218.59 L1906.69 1218.59 L1907.28 1218.59 L1907.87 1218.59 L1908.45 1218.59 L1909.04 1218.59 L1909.63 1218.59 L1910.21 1218.59 L1910.8 1218.59 L1911.38 1218.59 L1911.97 1218.59 L1912.56 1218.59 L1913.14 1218.59 L1913.73 1218.59 L1914.32 1218.59 L1914.9 1218.59 L1915.49 1218.59 L1916.08 1218.59 L1916.66 1218.59 L1917.25 1218.59 L1917.83 1218.59 L1918.42 1218.59 L1919.01 1218.59 L1919.59 1218.59 L1920.18 1218.59 L1920.77 1218.59 L1921.35 1218.59 L1921.94 1218.59 L1922.53 1218.59 L1923.11 1218.59 L1923.7 1218.59 L1924.29 1218.59 L1924.87 1218.59 L1925.46 1218.59 L1926.04 1218.59 L1926.63 1218.59 L1927.22 1218.59 L1927.8 1218.59 L1928.39 1218.59 L1928.98 1218.59 L1929.56 1218.59 L1930.15 1218.59 L1930.74 1218.59 L1931.32 1218.59 L1931.91 1218.59 L1932.5 1218.59 L1933.08 1218.59 L1933.67 1218.59 L1934.25 1218.59 L1934.84 1218.59 L1935.43 1218.59 L1936.01 1218.59 L1936.6 1218.59 L1937.19 1218.59 L1937.77 1218.59 L1938.36 1218.59 L1938.95 1218.59 L1939.53 1218.59 L1940.12 1218.59 L1940.71 1218.59 L1941.29 1218.59 L1941.88 1218.59 L1942.46 1218.59 L1943.05 1218.59 L1943.64 1218.59 L1944.22 1218.59 L1944.81 1218.59 L1945.4 1218.59 L1945.98 1218.59 L1946.57 1218.59 L1947.16 1218.59 L1947.74 1218.59 L1948.33 1218.59 L1948.91 1218.59 L1949.5 1218.59 L1950.09 1218.59 L1950.67 1218.59 L1951.26 1218.59 L1951.85 1218.59 L1952.43 1218.59 L1953.02 1218.59 L1953.61 1218.59 L1954.19 1218.59 L1954.78 1218.59 L1955.37 1218.59 L1955.95 1218.59 L1956.54 1218.59 L1957.12 1218.59 L1957.71 1218.59 L1958.3 1218.59 L1958.88 1218.59 L1959.47 1218.59 L1960.06 1218.59 L1960.64 1218.59 L1961.23 1218.59 L1961.82 1218.59 L1962.4 1218.59 L1962.99 1218.59 L1963.58 1218.59 L1964.16 1218.59 L1964.75 1218.59 L1965.33 1218.59 L1965.92 1218.59 L1966.51 1218.59 L1967.09 1218.59 L1967.68 1218.59 L1968.27 1218.59 L1968.85 1218.59 L1969.44 1218.59 L1970.03 1218.59 L1970.61 1218.59 L1971.2 1218.59 L1971.78 1218.59 L1972.37 1218.59 L1972.96 1218.59 L1973.54 1218.59 L1974.13 1218.59 L1974.72 1218.59 L1975.3 1218.59 L1975.89 1218.59 L1976.48 1218.59 L1977.06 1218.59 L1977.65 1218.59 L1978.24 1218.59 L1978.82 1218.59 L1979.41 1218.59 L1979.99 1218.59 L1980.58 1218.59 L1981.17 1218.59 L1981.75 1218.59 L1982.34 1218.59 L1982.93 1218.59 L1983.51 1218.59 L1984.1 1218.59 L1984.69 1218.59 L1985.27 1218.59 L1985.86 1218.59 L1986.45 1218.59 L1987.03 1218.59 L1987.62 1218.59 L1988.2 1218.59 L1988.79 1218.59 L1989.38 1218.59 L1989.96 1218.59 L1990.55 1218.59 L1991.14 1218.59 L1991.72 1218.59 L1992.31 1218.59 L1992.9 1218.59 L1993.48 1218.59 L1994.07 1218.59 L1994.65 1218.59 L1995.24 1218.59 L1995.83 1218.59 L1996.41 1218.59 L1997 1218.59 L1997.59 1218.59 L1998.17 1218.59 L1998.76 1218.59 L1999.35 1218.59 L1999.93 1218.59 L2000.52 1218.59 L2001.11 1218.59 L2001.69 1218.59 L2002.28 1218.59 L2002.86 1218.59 L2003.45 1218.59 L2004.04 1218.59 L2004.62 1218.59 L2005.21 1218.59 L2005.8 1218.59 L2006.38 1218.59 L2006.97 1218.59 L2007.56 1218.59 L2008.14 1218.59 L2008.73 1218.59 L2009.32 1218.59 L2009.9 1218.59 L2010.49 1218.59 L2011.07 1218.59 L2011.66 1218.59 L2012.25 1218.59 L2012.83 1218.59 L2013.42 1218.59 L2014.01 1218.59 L2014.59 1218.59 L2015.18 1218.59 L2015.77 1218.59 L2016.35 1218.59 L2016.94 1218.59 L2017.53 1218.59 L2018.11 1218.59 L2018.7 1218.59 L2019.28 1218.59 L2019.87 1218.59 L2020.46 1218.59 L2021.04 1218.59 L2021.63 1218.59 L2022.22 1218.59 L2022.8 1218.59 L2023.39 1218.59 L2023.98 1218.59 L2024.56 1218.59 L2025.15 1218.59 L2025.73 1218.59 L2026.32 1218.59 L2026.91 1218.59 L2027.49 1218.59 L2028.08 1218.59 L2028.67 1218.59 L2029.25 1218.59 L2029.84 1218.59 L2030.43 1218.59 L2031.01 1218.59 L2031.6 1218.59 L2032.19 1218.59 L2032.77 1218.59 L2033.36 1218.59 L2033.94 1218.59 L2034.53 1218.59 L2035.12 1218.59 L2035.7 1218.59 L2036.29 1218.59 L2036.88 1218.59 L2037.46 1218.59 L2038.05 1218.59 L2038.64 1218.59 L2039.22 1218.59 L2039.81 1218.59 L2040.4 1218.59 L2040.98 1218.59 L2041.57 1218.59 L2042.15 1218.59 L2042.74 1218.59 L2043.33 1218.59 L2043.91 1218.59 L2044.5 1218.59 L2045.09 1218.59 L2045.67 1218.59 L2046.26 1218.59 L2046.85 1218.59 L2047.43 1218.59 L2048.02 1218.59 L2048.6 1218.59 L2049.19 1218.59 L2049.78 1218.59 L2050.36 1218.59 L2050.95 1218.59 L2051.54 1218.59 L2052.12 1218.59 L2052.71 1218.59 L2053.3 1218.59 L2053.88 1218.59 L2054.47 1218.59 L2055.06 1218.59 L2055.64 1218.59 L2056.23 1218.59 L2056.81 1218.59 L2057.4 1218.59 L2057.99 1218.59 L2058.57 1218.59 L2059.16 1218.59 L2059.75 1218.59 L2060.33 1218.59 L2060.92 1218.59 L2061.51 1218.59 L2062.09 1218.59 L2062.68 1218.59 L2063.27 1218.59 L2063.85 1218.59 L2064.44 1218.59 L2065.02 1218.59 L2065.61 1218.59 L2066.2 1218.59 L2066.78 1218.59 L2067.37 1218.59 L2067.96 1218.59 L2068.54 1218.59 L2069.13 1218.59 L2069.72 1218.59 L2070.3 1218.59 L2070.89 1218.59 L2071.48 1218.59 L2072.06 1218.59 L2072.65 1218.59 L2073.23 1218.59 L2073.82 1218.59 L2074.41 1218.59 L2074.99 1218.59 L2075.58 1218.59 L2076.17 1218.59 L2076.75 1218.59 L2077.34 1218.59 L2077.93 1218.59 L2078.51 1218.59 L2079.1 1218.59 L2079.68 1218.59 L2080.27 1218.59 L2080.86 1218.59 L2081.44 1218.59 L2082.03 1218.59 L2082.62 1218.59 L2083.2 1218.59 L2083.79 1218.59 L2084.38 1218.59 L2084.96 1218.59 L2085.55 1218.59 L2086.14 1218.59 L2086.72 1218.59 L2087.31 1218.59 L2087.89 1218.59 L2088.48 1218.59 L2089.07 1218.59 L2089.65 1218.59 L2090.24 1218.59 L2090.83 1218.59 L2091.41 1218.59 L2092 1218.59 L2092.59 1218.59 L2093.17 1218.59 L2093.76 1218.59 L2094.35 1218.59 L2094.93 1218.59 L2095.52 1218.59 L2096.1 1218.59 L2096.69 1218.59 L2097.28 1218.59 L2097.86 1218.59 L2098.45 1218.59 L2099.04 1218.59 L2099.62 1218.59 L2100.21 1218.59 L2100.8 1218.59 L2101.38 1218.59 L2101.97 1218.59 L2102.55 1218.59 L2103.14 1218.59 L2103.73 1218.59 L2104.31 1218.59 L2104.9 1218.59 L2105.49 1218.59 L2106.07 1218.59 L2106.66 1218.59 L2107.25 1218.59 L2107.83 1218.59 L2108.42 1218.59 L2109.01 1218.59 L2109.59 1218.59 L2110.18 1218.59 L2110.76 1218.59 L2111.35 1218.59 L2111.94 1218.59 L2112.52 1218.59 L2113.11 1218.59 L2113.7 1218.59 L2114.28 1218.59 L2114.87 1218.59 L2115.46 1218.59 L2116.04 1218.59 L2116.63 1218.59 L2117.22 1218.59 L2117.8 1218.59 L2118.39 1218.59 L2118.97 1218.59 L2119.56 1218.59 L2120.15 1218.59 L2120.73 1218.59 L2121.32 1218.59 L2121.91 1218.59 L2122.49 1218.59 L2123.08 1218.59 L2123.67 1218.59 L2124.25 1218.59 L2124.84 1218.59 L2125.42 1218.59 L2126.01 1218.59 L2126.6 1218.59 L2127.18 1218.59 L2127.77 1218.59 L2128.36 1218.59 L2128.94 1218.59 L2129.53 1218.59 L2130.12 1218.59 L2130.7 1218.59 L2131.29 1218.59 L2131.88 1218.59 L2132.46 1218.59 L2133.05 1218.59 L2133.63 1218.59 L2134.22 1218.59 L2134.81 1218.59 L2135.39 1218.59 L2135.98 1218.59 L2136.57 1218.59 L2137.15 1218.59 L2137.74 1218.59 L2138.33 1218.59 L2138.91 1218.59 L2139.5 1218.59 L2140.09 1218.59 L2140.67 1218.59 L2141.26 1218.59 L2141.84 1218.59 L2142.43 1218.59 L2143.02 1218.59 L2143.6 1218.59 L2144.19 1218.59 L2144.78 1218.59 L2145.36 1218.59 L2145.95 1218.59 L2146.54 1218.59 L2147.12 1218.59 L2147.71 1218.59 L2148.3 1218.59 L2148.88 1218.59 L2149.47 1218.59 L2150.05 1218.59 L2150.64 1218.59 L2151.23 1218.59 L2151.81 1218.59 L2152.4 1218.59 L2152.99 1218.59 L2153.57 1218.59 L2154.16 1218.59 L2154.75 1218.59 L2155.33 1218.59 L2155.92 1218.59 L2156.5 1218.59 L2157.09 1218.59 L2157.68 1218.59 L2158.26 1218.59 L2158.26 1217.99 L2157.68 1217.99 L2157.09 1217.99 L2156.5 1217.99 L2155.92 1217.99 L2155.33 1217.99 L2154.75 1217.99 L2154.16 1217.99 L2153.57 1217.99 L2152.99 1217.99 L2152.4 1217.99 L2151.81 1217.99 L2151.23 1217.99 L2150.64 1217.99 L2150.05 1217.99 L2149.47 1217.99 L2148.88 1217.99 L2148.3 1217.99 L2147.71 1217.99 L2147.12 1217.99 L2146.54 1217.99 L2145.95 1217.99 L2145.36 1217.99 L2144.78 1217.99 L2144.19 1217.99 L2143.6 1217.99 L2143.02 1217.99 L2142.43 1217.99 L2141.84 1217.99 L2141.26 1217.99 L2140.67 1217.99 L2140.09 1217.99 L2139.5 1217.99 L2138.91 1217.99 L2138.33 1217.99 L2137.74 1217.99 L2137.15 1217.99 L2136.57 1217.99 L2135.98 1217.99 L2135.39 1217.99 L2134.81 1217.99 L2134.22 1217.99 L2133.63 1217.99 L2133.05 1217.99 L2132.46 1217.99 L2131.88 1217.99 L2131.29 1217.99 L2130.7 1217.99 L2130.12 1217.99 L2129.53 1217.99 L2128.94 1217.99 L2128.36 1217.99 L2127.77 1217.99 L2127.18 1217.99 L2126.6 1217.99 L2126.01 1217.99 L2125.42 1217.99 L2124.84 1217.99 L2124.25 1217.99 L2123.67 1217.99 L2123.08 1217.99 L2122.49 1217.99 L2121.91 1217.99 L2121.32 1217.99 L2120.73 1217.99 L2120.15 1217.99 L2119.56 1217.99 L2118.97 1217.99 L2118.39 1217.99 L2117.8 1217.99 L2117.22 1217.99 L2116.63 1217.99 L2116.04 1217.99 L2115.46 1217.99 L2114.87 1217.99 L2114.28 1217.99 L2113.7 1217.99 L2113.11 1217.99 L2112.52 1217.99 L2111.94 1217.99 L2111.35 1217.99 L2110.76 1217.99 L2110.18 1217.99 L2109.59 1217.99 L2109.01 1217.99 L2108.42 1217.99 L2107.83 1217.99 L2107.25 1217.99 L2106.66 1217.99 L2106.07 1217.99 L2105.49 1217.99 L2104.9 1217.99 L2104.31 1217.99 L2103.73 1217.99 L2103.14 1217.99 L2102.55 1217.99 L2101.97 1217.99 L2101.38 1217.99 L2100.8 1217.99 L2100.21 1217.99 L2099.62 1217.99 L2099.04 1217.99 L2098.45 1217.99 L2097.86 1217.99 L2097.28 1217.99 L2096.69 1217.99 L2096.1 1217.99 L2095.52 1217.99 L2094.93 1217.99 L2094.35 1217.99 L2093.76 1217.99 L2093.17 1217.99 L2092.59 1217.99 L2092 1217.99 L2091.41 1217.99 L2090.83 1217.99 L2090.24 1217.99 L2089.65 1217.99 L2089.07 1217.99 L2088.48 1217.99 L2087.89 1217.99 L2087.31 1217.99 L2086.72 1217.99 L2086.14 1217.99 L2085.55 1217.99 L2084.96 1217.99 L2084.38 1217.99 L2083.79 1217.99 L2083.2 1217.99 L2082.62 1217.99 L2082.03 1217.99 L2081.44 1217.99 L2080.86 1217.99 L2080.27 1217.99 L2079.68 1217.99 L2079.1 1217.99 L2078.51 1217.99 L2077.93 1217.99 L2077.34 1217.99 L2076.75 1217.99 L2076.17 1217.99 L2075.58 1217.99 L2074.99 1217.99 L2074.41 1217.99 L2073.82 1217.99 L2073.23 1217.99 L2072.65 1217.99 L2072.06 1217.99 L2071.48 1217.99 L2070.89 1217.99 L2070.3 1217.99 L2069.72 1217.99 L2069.13 1217.99 L2068.54 1217.99 L2067.96 1217.99 L2067.37 1217.99 L2066.78 1217.99 L2066.2 1217.99 L2065.61 1217.99 L2065.02 1217.99 L2064.44 1217.99 L2063.85 1217.99 L2063.27 1217.99 L2062.68 1217.99 L2062.09 1217.99 L2061.51 1217.99 L2060.92 1217.99 L2060.33 1217.99 L2059.75 1217.99 L2059.16 1217.99 L2058.57 1217.99 L2057.99 1217.99 L2057.4 1217.99 L2056.81 1217.99 L2056.23 1217.99 L2055.64 1217.99 L2055.06 1217.99 L2054.47 1217.99 L2053.88 1217.99 L2053.3 1217.99 L2052.71 1217.99 L2052.12 1217.99 L2051.54 1217.99 L2050.95 1217.99 L2050.36 1217.99 L2049.78 1217.99 L2049.19 1217.99 L2048.6 1217.99 L2048.02 1217.99 L2047.43 1217.99 L2046.85 1217.99 L2046.26 1217.99 L2045.67 1217.99 L2045.09 1217.99 L2044.5 1217.99 L2043.91 1217.99 L2043.33 1217.99 L2042.74 1217.99 L2042.15 1217.99 L2041.57 1217.99 L2040.98 1217.99 L2040.4 1217.99 L2039.81 1217.99 L2039.22 1217.99 L2038.64 1217.99 L2038.05 1217.99 L2037.46 1217.99 L2036.88 1217.99 L2036.29 1217.99 L2035.7 1217.99 L2035.12 1217.99 L2034.53 1217.99 L2033.94 1217.99 L2033.36 1217.99 L2032.77 1217.99 L2032.19 1217.99 L2031.6 1217.99 L2031.01 1217.99 L2030.43 1217.99 L2029.84 1217.99 L2029.25 1217.99 L2028.67 1217.99 L2028.08 1217.99 L2027.49 1217.99 L2026.91 1217.99 L2026.32 1217.99 L2025.73 1217.99 L2025.15 1217.99 L2024.56 1217.99 L2023.98 1217.99 L2023.39 1217.99 L2022.8 1217.99 L2022.22 1217.99 L2021.63 1217.99 L2021.04 1217.99 L2020.46 1217.99 L2019.87 1217.99 L2019.28 1217.99 L2018.7 1217.99 L2018.11 1217.99 L2017.53 1217.99 L2016.94 1217.99 L2016.35 1217.99 L2015.77 1217.99 L2015.18 1217.99 L2014.59 1217.99 L2014.01 1217.99 L2013.42 1217.99 L2012.83 1217.99 L2012.25 1217.99 L2011.66 1217.99 L2011.07 1217.99 L2010.49 1217.99 L2009.9 1217.99 L2009.32 1217.99 L2008.73 1217.99 L2008.14 1217.99 L2007.56 1217.99 L2006.97 1217.99 L2006.38 1217.99 L2005.8 1217.99 L2005.21 1217.99 L2004.62 1217.99 L2004.04 1217.99 L2003.45 1217.99 L2002.86 1217.99 L2002.28 1217.99 L2001.69 1217.99 L2001.11 1217.99 L2000.52 1217.99 L1999.93 1217.99 L1999.35 1217.99 L1998.76 1217.99 L1998.17 1217.99 L1997.59 1217.99 L1997 1217.99 L1996.41 1217.99 L1995.83 1217.99 L1995.24 1217.99 L1994.65 1217.99 L1994.07 1217.99 L1993.48 1217.99 L1992.9 1217.99 L1992.31 1217.99 L1991.72 1217.99 L1991.14 1217.99 L1990.55 1217.99 L1989.96 1217.99 L1989.38 1217.99 L1988.79 1217.99 L1988.2 1217.99 L1987.62 1217.99 L1987.03 1217.99 L1986.45 1217.99 L1985.86 1217.99 L1985.27 1217.99 L1984.69 1217.99 L1984.1 1217.99 L1983.51 1217.99 L1982.93 1217.99 L1982.34 1217.99 L1981.75 1217.99 L1981.17 1217.99 L1980.58 1217.99 L1979.99 1217.99 L1979.41 1217.99 L1978.82 1217.99 L1978.24 1217.99 L1977.65 1217.99 L1977.06 1217.99 L1976.48 1217.99 L1975.89 1217.99 L1975.3 1217.99 L1974.72 1217.99 L1974.13 1217.99 L1973.54 1217.99 L1972.96 1217.99 L1972.37 1217.99 L1971.78 1217.99 L1971.2 1217.99 L1970.61 1217.99 L1970.03 1217.99 L1969.44 1217.99 L1968.85 1217.99 L1968.27 1217.99 L1967.68 1217.99 L1967.09 1217.99 L1966.51 1217.99 L1965.92 1217.99 L1965.33 1217.99 L1964.75 1217.99 L1964.16 1217.99 L1963.58 1217.99 L1962.99 1217.99 L1962.4 1217.99 L1961.82 1217.99 L1961.23 1217.99 L1960.64 1217.99 L1960.06 1217.99 L1959.47 1217.99 L1958.88 1217.99 L1958.3 1217.99 L1957.71 1217.99 L1957.12 1217.99 L1956.54 1217.99 L1955.95 1217.99 L1955.37 1217.99 L1954.78 1217.99 L1954.19 1217.99 L1953.61 1217.99 L1953.02 1217.99 L1952.43 1217.99 L1951.85 1217.99 L1951.26 1217.99 L1950.67 1217.99 L1950.09 1217.99 L1949.5 1217.99 L1948.91 1217.99 L1948.33 1217.99 L1947.74 1217.99 L1947.16 1217.99 L1946.57 1217.99 L1945.98 1217.99 L1945.4 1217.99 L1944.81 1217.99 L1944.22 1217.99 L1943.64 1217.99 L1943.05 1217.99 L1942.46 1217.99 L1941.88 1217.99 L1941.29 1217.99 L1940.71 1217.99 L1940.12 1217.99 L1939.53 1217.99 L1938.95 1217.99 L1938.36 1217.99 L1937.77 1217.99 L1937.19 1217.99 L1936.6 1217.99 L1936.01 1217.99 L1935.43 1217.99 L1934.84 1217.99 L1934.25 1217.99 L1933.67 1217.99 L1933.08 1217.99 L1932.5 1217.99 L1931.91 1217.99 L1931.32 1217.99 L1930.74 1217.99 L1930.15 1217.99 L1929.56 1217.99 L1928.98 1217.99 L1928.39 1217.99 L1927.8 1217.99 L1927.22 1217.99 L1926.63 1217.99 L1926.04 1217.99 L1925.46 1217.99 L1924.87 1217.99 L1924.29 1217.99 L1923.7 1217.99 L1923.11 1217.99 L1922.53 1217.99 L1921.94 1217.99 L1921.35 1217.99 L1920.77 1217.99 L1920.18 1217.99 L1919.59 1217.99 L1919.01 1217.99 L1918.42 1217.99 L1917.83 1217.99 L1917.25 1217.99 L1916.66 1217.99 L1916.08 1217.99 L1915.49 1217.99 L1914.9 1217.99 L1914.32 1217.99 L1913.73 1217.99 L1913.14 1217.99 L1912.56 1217.99 L1911.97 1217.99 L1911.38 1217.99 L1910.8 1217.99 L1910.21 1217.99 L1909.63 1217.99 L1909.04 1217.99 L1908.45 1217.99 L1907.87 1217.99 L1907.28 1217.99 L1906.69 1217.99 L1906.11 1217.99 L1905.52 1217.99 L1904.93 1217.99 L1904.35 1217.99 L1903.76 1217.99 L1903.17 1217.99 L1902.59 1217.99 L1902 1217.99 L1901.42 1217.99 L1900.83 1217.99 L1900.24 1217.99 L1899.66 1217.99 L1899.07 1217.99 L1898.48 1217.99 L1897.9 1217.99 L1897.31 1217.99 L1896.72 1217.99 L1896.14 1217.99 L1895.55 1217.99 L1894.96 1217.99 L1894.38 1217.99 L1893.79 1217.99 L1893.21 1217.99 L1892.62 1217.99 L1892.03 1217.99 L1891.45 1217.99 L1890.86 1217.99 L1890.27 1217.99 L1889.69 1217.99 L1889.1 1217.99 L1888.51 1217.99 L1887.93 1217.99 L1887.34 1217.99 L1886.76 1217.99 L1886.17 1217.99 L1885.58 1217.99 L1885 1217.99 L1884.41 1217.99 L1883.82 1217.99 L1883.24 1217.99 L1882.65 1217.99 L1882.06 1217.99 L1881.48 1217.99 L1880.89 1217.99 L1880.3 1217.99 L1879.72 1217.99 L1879.13 1217.99 L1878.55 1217.99 L1877.96 1217.99 L1877.37 1217.99 L1876.79 1217.99 L1876.2 1217.99 L1875.61 1217.99 L1875.03 1217.99 L1874.44 1217.99 L1873.85 1217.99 L1873.27 1217.99 L1872.68 1217.99 L1872.09 1217.99 L1871.51 1217.99 L1870.92 1217.99 L1870.34 1217.99 L1869.75 1217.99 L1869.16 1217.99 L1868.58 1217.99 L1867.99 1217.99 L1867.4 1217.99 L1866.82 1217.99 L1866.23 1217.99 L1865.64 1217.99 L1865.06 1217.99 L1864.47 1217.99 L1863.88 1217.99 L1863.3 1217.99 L1862.71 1217.99 L1862.13 1217.99 L1861.54 1217.99 L1860.95 1217.99 L1860.37 1217.99 L1859.78 1217.99 L1859.19 1217.99 L1858.61 1217.99 L1858.02 1217.99 L1857.43 1217.99 L1856.85 1217.99 L1856.26 1217.99 L1855.68 1217.99 L1855.09 1217.99 L1854.5 1217.99 L1853.92 1217.99 L1853.33 1217.99 L1852.74 1217.99 L1852.16 1217.99 L1851.57 1217.99 L1850.98 1217.99 L1850.4 1217.99 L1849.81 1217.99 L1849.22 1217.99 L1848.64 1217.99 L1848.05 1217.99 L1847.47 1217.99 L1846.88 1217.99 L1846.29 1217.99 L1845.71 1217.99 L1845.12 1217.99 L1844.53 1217.99 L1843.95 1217.99 L1843.36 1217.99 L1842.77 1217.99 L1842.19 1217.99 L1841.6 1217.99 L1841.01 1217.99 L1840.43 1217.99 L1839.84 1217.99 L1839.26 1217.99 L1838.67 1217.99 L1838.08 1217.99 L1837.5 1217.99 L1836.91 1217.99 L1836.32 1217.99 L1835.74 1217.99 L1835.15 1217.99 L1834.56 1217.99 L1833.98 1217.99 L1833.39 1217.99 L1832.81 1217.99 L1832.22 1217.99 L1831.63 1217.99 L1831.05 1217.99 L1830.46 1217.99 L1829.87 1217.99 L1829.29 1217.99 L1828.7 1217.99 L1828.11 1217.99 L1827.53 1217.99 L1826.94 1217.99 L1826.35 1217.99 L1825.77 1217.99 L1825.18 1217.99 L1824.6 1217.99 L1824.01 1217.99 L1823.42 1217.99 L1822.84 1217.99 L1822.25 1217.99 L1821.66 1217.99 L1821.08 1217.99 L1820.49 1217.99 L1819.9 1217.99 L1819.32 1217.99 L1818.73 1217.99 L1818.14 1217.99 L1817.56 1217.99 L1816.97 1217.99 L1816.39 1217.99 L1815.8 1217.99 L1815.21 1217.99 L1814.63 1217.99 L1814.04 1217.99 L1813.45 1217.99 L1812.87 1217.99 L1812.28 1217.99 L1811.69 1217.99 L1811.11 1217.99 L1810.52 1217.99 L1809.94 1217.99 L1809.35 1217.99 L1808.76 1217.99 L1808.18 1217.99 L1807.59 1217.99 L1807 1217.99 L1806.42 1217.99 L1805.83 1217.99 L1805.24 1217.99 L1804.66 1217.99 L1804.07 1217.99 L1803.48 1217.99 L1802.9 1217.99 L1802.31 1217.99 L1801.73 1217.99 L1801.14 1217.99 L1800.55 1217.99 L1799.97 1217.99 L1799.38 1217.99 L1798.79 1217.99 L1798.21 1217.99 L1797.62 1217.99 L1797.03 1217.99 L1796.45 1217.99 L1795.86 1217.99 L1795.27 1217.99 L1794.69 1217.99 L1794.1 1217.99 L1793.52 1217.99 L1792.93 1217.99 L1792.34 1217.99 L1791.76 1217.99 L1791.17 1217.99 L1790.58 1217.99 L1790 1217.99 L1789.41 1217.99 L1788.82 1217.99 L1788.24 1217.99 L1787.65 1217.99 L1787.06 1217.99 L1786.48 1217.99 L1785.89 1217.99 L1785.31 1217.99 L1784.72 1217.99 L1784.13 1217.99 L1783.55 1217.99 L1782.96 1217.99 L1782.37 1217.99 L1781.79 1217.99 L1781.2 1217.99 L1780.61 1217.99 L1780.03 1217.99 L1779.44 1217.99 L1778.86 1217.99 L1778.27 1217.99 L1777.68 1217.99 L1777.1 1217.99 L1776.51 1217.99 L1775.92 1217.99 L1775.34 1217.99 L1774.75 1217.99 L1774.16 1217.99 L1773.58 1217.99 L1772.99 1217.99 L1772.4 1217.99 L1771.82 1217.99 L1771.23 1217.99 L1770.65 1217.99 L1770.06 1217.99 L1769.47 1217.99 L1768.89 1217.99 L1768.3 1217.99 L1767.71 1217.99 L1767.13 1217.99 L1766.54 1217.99 L1765.95 1217.99 L1765.37 1217.99 L1764.78 1217.99 L1764.19 1217.99 L1763.61 1217.99 L1763.02 1217.99 L1762.44 1217.99 L1761.85 1217.99 L1761.26 1217.99 L1760.68 1217.99 L1760.09 1217.99 L1759.5 1217.99 L1758.92 1217.99 L1758.33 1217.99 L1757.74 1217.99 L1757.16 1217.99 L1756.57 1217.99 L1755.99 1217.99 L1755.4 1217.99 L1754.81 1217.99 L1754.23 1217.99 L1753.64 1217.99 L1753.05 1217.99 L1752.47 1217.99 L1751.88 1217.99 L1751.29 1217.99 L1750.71 1217.99 L1750.12 1217.99 L1749.53 1217.99 L1748.95 1217.99 L1748.36 1217.99 L1747.78 1217.99 L1747.19 1217.99 L1746.6 1217.99 L1746.02 1217.99 L1745.43 1217.99 L1744.84 1217.99 L1744.26 1217.99 L1743.67 1217.99 L1743.08 1217.99 L1742.5 1217.99 L1741.91 1217.99 L1741.32 1217.99 L1740.74 1217.99 L1740.15 1217.99 L1739.57 1217.99 L1738.98 1217.99 L1738.39 1217.99 L1737.81 1217.99 L1737.22 1217.99 L1736.63 1217.99 L1736.05 1217.99 L1735.46 1217.99 L1734.87 1217.99 L1734.29 1217.99 L1733.7 1217.99 L1733.11 1217.99 L1732.53 1217.99 L1731.94 1217.99 L1731.36 1217.99 L1730.77 1217.99 L1730.18 1217.99 L1729.6 1217.99 L1729.01 1217.99 L1728.42 1217.99 L1727.84 1217.99 L1727.25 1217.99 L1726.66 1217.99 L1726.08 1217.99 L1725.49 1217.99 L1724.91 1217.99 L1724.32 1217.99 L1723.73 1217.99 L1723.15 1217.99 L1722.56 1217.99 L1721.97 1217.99 L1721.39 1217.99 L1720.8 1217.99 L1720.21 1217.99 L1719.63 1217.99 L1719.04 1217.99 L1718.45 1217.99 L1717.87 1217.99 L1717.28 1217.99 L1716.7 1217.99 L1716.11 1217.99 L1715.52 1217.99 L1714.94 1217.99 L1714.35 1217.99 L1713.76 1217.99 L1713.18 1217.99 L1712.59 1217.99 L1712 1217.99 L1711.42 1217.99 L1710.83 1217.99 L1710.24 1217.99 L1709.66 1217.99 L1709.07 1217.99 L1708.49 1217.99 L1707.9 1217.99 L1707.31 1217.99 L1706.73 1217.99 L1706.14 1217.99 L1705.55 1217.99 L1704.97 1217.99 L1704.38 1217.99 L1703.79 1217.99 L1703.21 1217.99 L1702.62 1217.99 L1702.04 1217.99 L1701.45 1217.99 L1700.86 1217.99 L1700.28 1217.99 L1699.69 1217.99 L1699.1 1217.99 L1698.52 1217.99 L1697.93 1217.99 L1697.34 1217.99 L1696.76 1217.99 L1696.17 1217.99 L1695.58 1217.99 L1695 1217.99 L1694.41 1217.99 L1693.83 1217.99 L1693.24 1217.99 L1692.65 1217.99 L1692.07 1217.99 L1691.48 1217.99 L1690.89 1217.99 L1690.31 1217.99 L1689.72 1217.99 L1689.13 1217.99 L1688.55 1217.99 L1687.96 1217.99 L1687.37 1217.99 L1686.79 1217.99 L1686.2 1217.99 L1685.62 1217.99 L1685.03 1217.99 L1684.44 1217.99 L1683.86 1217.99 L1683.27 1217.99 L1682.68 1217.99 L1682.1 1217.99 L1681.51 1217.99 L1680.92 1217.99 L1680.34 1217.99 L1679.75 1217.99 L1679.17 1217.99 L1678.58 1217.99 L1677.99 1217.99 L1677.41 1217.99 L1676.82 1217.99 L1676.23 1217.99 L1675.65 1217.99 L1675.06 1217.99 L1674.47 1217.99 L1673.89 1217.99 L1673.3 1217.99 L1672.71 1217.99 L1672.13 1217.99 L1671.54 1217.99 L1670.96 1217.99 L1670.37 1217.99 L1669.78 1217.99 L1669.2 1217.99 L1668.61 1217.99 L1668.02 1217.99 L1667.44 1217.99 L1666.85 1217.99 L1666.26 1217.99 L1665.68 1217.99 L1665.09 1217.99 L1664.5 1217.99 L1663.92 1217.99 L1663.33 1217.99 L1662.75 1217.99 L1662.16 1217.99 L1661.57 1217.99 L1660.99 1217.99 L1660.4 1217.99 L1659.81 1217.99 L1659.23 1217.99 L1658.64 1217.99 L1658.05 1217.99 L1657.47 1217.99 L1656.88 1217.99 L1656.29 1217.99 L1655.71 1217.99 L1655.12 1217.99 L1654.54 1217.99 L1653.95 1217.99 L1653.36 1217.99 L1652.78 1217.99 L1652.19 1217.99 L1651.6 1217.99 L1651.02 1217.99 L1650.43 1217.99 L1649.84 1217.99 L1649.26 1217.99 L1648.67 1217.99 L1648.09 1217.99 L1647.5 1217.99 L1646.91 1217.99 L1646.33 1217.99 L1645.74 1217.99 L1645.15 1217.99 L1644.57 1217.99 L1643.98 1217.99 L1643.39 1217.99 L1642.81 1217.99 L1642.22 1217.99 L1641.63 1217.99 L1641.05 1217.99 L1640.46 1217.99 L1639.88 1217.99 L1639.29 1217.99 L1638.7 1217.99 L1638.12 1217.99 L1637.53 1217.99 L1636.94 1217.99 L1636.36 1217.99 L1635.77 1217.99 L1635.18 1217.99 L1634.6 1217.99 L1634.01 1217.99 L1633.42 1217.99 L1632.84 1217.99 L1632.25 1217.99 L1631.67 1217.99 L1631.08 1217.99 L1630.49 1217.99 L1629.91 1217.99 L1629.32 1217.99 L1628.73 1217.99 L1628.15 1217.99 L1627.56 1217.99 L1626.97 1217.99 L1626.39 1217.99 L1625.8 1217.99 L1625.22 1217.99 L1624.63 1217.99 L1624.04 1217.99 L1623.46 1217.99 L1622.87 1217.99 L1622.28 1217.99 L1621.7 1217.99 L1621.11 1217.99 L1620.52 1217.99 L1619.94 1217.99 L1619.35 1217.99 L1618.76 1217.99 L1618.18 1217.99 L1617.59 1217.99 L1617.01 1217.99 L1616.42 1217.99 L1615.83 1217.99 L1615.25 1217.99 L1614.66 1217.99 L1614.07 1217.99 L1613.49 1217.99 L1612.9 1217.99 L1612.31 1217.99 L1611.73 1217.99 L1611.14 1217.99 L1610.55 1217.99 L1609.97 1217.99 L1609.38 1217.99 L1608.8 1217.99 L1608.21 1217.99 L1607.62 1217.99 L1607.04 1217.99 L1606.45 1217.99 L1605.86 1217.99 L1605.28 1217.99 L1604.69 1217.99 L1604.1 1217.99 L1603.52 1217.99 L1602.93 1217.99 L1602.34 1217.99 L1601.76 1217.99 L1601.17 1217.99 L1600.59 1217.99 L1600 1217.99 L1599.41 1217.99 L1598.83 1217.99 L1598.24 1217.99 L1597.65 1217.99 L1597.07 1217.99 L1596.48 1217.99 L1595.89 1217.99 L1595.31 1217.99 L1594.72 1217.99 L1594.14 1217.99 L1593.55 1217.99 L1592.96 1217.99 L1592.38 1217.99 L1591.79 1217.99 L1591.2 1217.99 L1590.62 1217.99 L1590.03 1217.99 L1589.44 1217.99 L1588.86 1217.99 L1588.27 1217.99 L1587.68 1217.99 L1587.1 1217.99 L1586.51 1217.99 L1585.93 1217.99 L1585.34 1217.99 L1584.75 1217.99 L1584.17 1217.99 L1583.58 1217.99 L1582.99 1217.99 L1582.41 1217.99 L1581.82 1217.99 L1581.23 1217.99 L1580.65 1217.99 L1580.06 1217.99 L1579.47 1217.99 L1578.89 1217.99 L1578.3 1217.99 L1577.72 1217.99 L1577.13 1217.99 L1576.54 1217.99 L1575.96 1217.99 L1575.37 1217.99 L1574.78 1217.99 L1574.2 1217.99 L1573.61 1217.99 L1573.02 1217.99 L1572.44 1217.99 L1571.85 1217.99 L1571.27 1217.99 L1570.68 1217.99 L1570.09 1217.99 L1569.51 1217.99 L1568.92 1217.99 L1568.33 1217.99 L1567.75 1217.99 L1567.16 1217.99 L1566.57 1217.99 L1565.99 1217.99 L1565.4 1217.99 L1564.81 1217.99 L1564.23 1217.99 L1563.64 1217.99 L1563.06 1217.99 L1562.47 1217.99 L1561.88 1217.99 L1561.3 1217.99 L1560.71 1217.99 L1560.12 1217.99 L1559.54 1217.99 L1558.95 1217.99 L1558.36 1217.99 L1557.78 1217.99 L1557.19 1217.99 L1556.6 1217.99 L1556.02 1217.99 L1555.43 1217.99 L1554.85 1217.99 L1554.26 1217.99 L1553.67 1217.99 L1553.09 1217.99 L1552.5 1217.99 L1551.91 1217.99 L1551.33 1217.99 L1550.74 1217.99 L1550.15 1217.99 L1549.57 1217.99 L1548.98 1217.99 L1548.4 1217.99 L1547.81 1217.99 L1547.22 1217.99 L1546.64 1217.99 L1546.05 1217.99 L1545.46 1217.99 L1544.88 1217.99 L1544.29 1217.99 L1543.7 1217.99 L1543.12 1217.99 L1542.53 1217.99 L1541.94 1217.99 L1541.36 1217.99 L1540.77 1217.99 L1540.19 1217.99 L1539.6 1217.99 L1539.01 1217.99 L1538.43 1217.99 L1537.84 1217.99 L1537.25 1217.99 L1536.67 1217.99 L1536.08 1217.99 L1535.49 1217.99 L1534.91 1217.99 L1534.32 1217.99 L1533.73 1217.99 L1533.15 1217.99 L1532.56 1217.99 L1531.98 1217.99 L1531.39 1217.99 L1530.8 1217.99 L1530.22 1217.99 L1529.63 1217.99 L1529.04 1217.99 L1528.46 1217.99 L1527.87 1217.99 L1527.28 1217.99 L1526.7 1217.99 L1526.11 1217.99 L1525.52 1217.99 L1524.94 1217.99 L1524.35 1217.99 L1523.77 1217.99 L1523.18 1217.99 L1522.59 1217.99 L1522.01 1217.99 L1521.42 1217.99 L1520.83 1217.99 L1520.25 1217.99 L1519.66 1217.99 L1519.07 1217.99 L1518.49 1217.99 L1517.9 1217.99 L1517.32 1217.99 L1516.73 1217.99 L1516.14 1217.99 L1515.56 1217.99 L1514.97 1217.99 L1514.38 1217.99 L1513.8 1217.99 L1513.21 1217.99 L1512.62 1217.99 L1512.04 1217.99 L1511.45 1217.99 L1510.86 1217.99 L1510.28 1217.99 L1509.69 1217.99 L1509.11 1217.99 L1508.52 1217.99 L1507.93 1217.99 L1507.35 1217.99 L1506.76 1217.99 L1506.17 1217.99 L1505.59 1217.99 L1505 1217.99 L1504.41 1217.99 L1503.83 1217.99 L1503.24 1217.99 L1502.65 1217.99 L1502.07 1217.99 L1501.48 1217.99 L1500.9 1217.99 L1500.31 1217.99 L1499.72 1217.99 L1499.14 1217.99 L1498.55 1217.99 L1497.96 1217.99 L1497.38 1217.99 L1496.79 1217.99 L1496.2 1217.99 L1495.62 1217.99 L1495.03 1217.99 L1494.45 1217.99 L1493.86 1217.99 L1493.27 1217.99 L1492.69 1217.99 L1492.1 1217.99 L1491.51 1217.99 L1490.93 1217.99 L1490.34 1217.99 L1489.75 1217.99 L1489.17 1217.99 L1488.58 1217.99 L1487.99 1217.99 L1487.41 1217.99 L1486.82 1217.99 L1486.24 1217.99 L1485.65 1217.99 L1485.06 1217.99 L1484.48 1217.99 L1483.89 1217.99 L1483.3 1217.99 L1482.72 1217.99 L1482.13 1217.99 L1481.54 1217.99 L1480.96 1217.99 L1480.37 1217.99 L1479.78 1217.99 L1479.2 1217.99 L1478.61 1217.99 L1478.03 1217.99 L1477.44 1217.99 L1476.85 1217.99 L1476.27 1217.99 L1475.68 1217.99 L1475.09 1217.99 L1474.51 1217.99 L1473.92 1217.99 L1473.33 1217.99 L1472.75 1217.99 L1472.16 1217.99 L1471.57 1217.99 L1470.99 1217.99 L1470.4 1217.99 L1469.82 1217.99 L1469.23 1217.99 L1468.64 1217.99 L1468.06 1217.99 L1467.47 1217.99 L1466.88 1217.99 L1466.3 1217.99 L1465.71 1217.99 L1465.12 1217.99 L1464.54 1217.99 L1463.95 1217.99 L1463.37 1217.99 L1462.78 1217.99 L1462.19 1217.99 L1461.61 1217.99 L1461.02 1217.99 L1460.43 1217.99 L1459.85 1217.99 L1459.26 1217.99 L1458.67 1217.99 L1458.09 1217.99 L1457.5 1217.99 L1456.91 1217.99 L1456.33 1217.99 L1455.74 1217.99 L1455.16 1217.99 L1454.57 1217.99 L1453.98 1217.99 L1453.4 1217.99 L1452.81 1217.99 L1452.22 1217.99 L1451.64 1217.99 L1451.05 1217.99 L1450.46 1217.99 L1449.88 1217.99 L1449.29 1217.99 L1448.7 1217.99 L1448.12 1217.99 L1447.53 1217.99 L1446.95 1217.99 L1446.36 1217.99 L1445.77 1217.99 L1445.19 1217.99 L1444.6 1217.99 L1444.01 1217.99 L1443.43 1217.99 L1442.84 1217.99 L1442.25 1217.99 L1441.67 1217.99 L1441.08 1217.99 L1440.5 1217.99 L1439.91 1217.99 L1439.32 1217.99 L1438.74 1217.99 L1438.15 1217.99 L1437.56 1217.99 L1436.98 1217.99 L1436.39 1217.99 L1435.8 1217.99 L1435.22 1217.99 L1434.63 1217.99 L1434.04 1217.99 L1433.46 1217.99 L1432.87 1217.99 L1432.29 1217.99 L1431.7 1217.99 L1431.11 1217.99 L1430.53 1217.99 L1429.94 1217.99 L1429.35 1217.99 L1428.77 1217.99 L1428.18 1217.99 L1427.59 1217.99 L1427.01 1217.99 L1426.42 1217.99 L1425.83 1217.99 L1425.25 1217.99 L1424.66 1217.99 L1424.08 1217.99 L1423.49 1217.99 L1422.9 1217.99 L1422.32 1217.99 L1421.73 1217.99 L1421.14 1217.99 L1420.56 1217.99 L1419.97 1217.99 L1419.38 1217.99 L1418.8 1217.99 L1418.21 1217.99 L1417.63 1217.99 L1417.04 1217.99 L1416.45 1217.99 L1415.87 1217.99 L1415.28 1217.99 L1414.69 1217.99 L1414.11 1217.99 L1413.52 1217.99 L1412.93 1217.99 L1412.35 1217.99 L1411.76 1217.99 L1411.17 1217.99 L1410.59 1217.99 L1410 1217.99 L1409.42 1217.99 L1408.83 1217.99 L1408.24 1217.99 L1407.66 1217.99 L1407.07 1217.99 L1406.48 1217.99 L1405.9 1217.99 L1405.31 1217.99 L1404.72 1217.99 L1404.14 1217.99 L1403.55 1217.99 L1402.96 1217.99 L1402.38 1217.99 L1401.79 1217.99 L1401.21 1217.99 L1400.62 1217.99 L1400.03 1217.99 L1399.45 1217.99 L1398.86 1217.99 L1398.27 1217.99 L1397.69 1217.99 L1397.1 1217.99 L1396.51 1217.99 L1395.93 1217.99 L1395.34 1217.99 L1394.75 1217.99 L1394.17 1217.99 L1393.58 1217.99 L1393 1217.99 L1392.41 1217.99 L1391.82 1217.99 L1391.24 1217.99 L1390.65 1217.99 L1390.06 1217.99 L1389.48 1217.99 L1388.89 1217.99 L1388.3 1217.99 L1387.72 1217.99 L1387.13 1217.99 L1386.55 1217.99 L1385.96 1217.99 L1385.37 1217.99 L1384.79 1217.99 L1384.2 1217.99 L1383.61 1217.99 L1383.03 1217.99 L1382.44 1217.99 L1381.85 1217.99 L1381.27 1217.99 L1380.68 1217.99 L1380.09 1217.99 L1379.51 1217.99 L1378.92 1217.99 L1378.34 1217.99 L1377.75 1217.99 L1377.16 1217.99 L1376.58 1217.99 L1375.99 1217.99 L1375.4 1217.99 L1374.82 1217.99 L1374.23 1217.99 L1373.64 1217.99 L1373.06 1217.99 L1372.47 1217.99 L1371.88 1217.99 L1371.3 1217.99 L1370.71 1217.99 L1370.13 1217.99 L1369.54 1217.99 L1368.95 1217.99 L1368.37 1217.99 L1367.78 1217.99 L1367.19 1217.99 L1366.61 1217.99 L1366.02 1217.99 L1365.43 1217.99 L1364.85 1217.99 L1364.26 1217.99 L1363.68 1217.99 L1363.09 1217.99 L1362.5 1217.99 L1361.92 1217.99 L1361.33 1217.99 L1360.74 1217.99 L1360.16 1217.99 L1359.57 1217.99 L1358.98 1217.99 L1358.4 1217.99 L1357.81 1217.99 L1357.22 1217.99 L1356.64 1217.99 L1356.05 1217.99 L1355.47 1217.99 L1354.88 1217.99 L1354.29 1217.99 L1353.71 1217.99 L1353.12 1217.99 L1352.53 1217.99 L1351.95 1217.99 L1351.36 1217.99 L1350.77 1217.99 L1350.19 1217.99 L1349.6 1217.99 L1349.01 1217.99 L1348.43 1217.99 L1347.84 1217.99 L1347.26 1217.99 L1346.67 1217.99 L1346.08 1217.99 L1345.5 1217.99 L1344.91 1217.99 L1344.32 1217.99 L1343.74 1217.99 L1343.15 1217.99 L1342.56 1217.99 L1341.98 1217.99 L1341.39 1217.99 L1340.8 1217.99 L1340.22 1217.99 L1339.63 1217.99 L1339.05 1217.99 L1338.46 1217.99 L1337.87 1217.99 L1337.29 1217.99 L1336.7 1217.99 L1336.11 1217.99 L1335.53 1217.99 L1334.94 1217.99 L1334.35 1217.99 L1333.77 1217.99 L1333.18 1217.99 L1332.6 1217.99 L1332.01 1217.99 L1331.42 1217.99 L1330.84 1217.99 L1330.25 1217.99 L1329.66 1217.99 L1329.08 1217.99 L1328.49 1217.99 L1327.9 1217.99 L1327.32 1217.99 L1326.73 1217.99 L1326.14 1217.99 L1325.56 1217.99 L1324.97 1217.99 L1324.39 1217.99 L1323.8 1217.99 L1323.21 1217.99 L1322.63 1217.99 L1322.04 1217.99 L1321.45 1217.99 L1320.87 1217.99 L1320.28 1217.99 L1319.69 1217.99 L1319.11 1217.99 L1318.52 1217.99 L1317.93 1217.99 L1317.35 1217.99 L1316.76 1217.99 L1316.18 1217.99 L1315.59 1217.99 L1315 1217.99 L1314.42 1217.99 L1313.83 1217.99 L1313.24 1217.99 L1312.66 1217.99 L1312.07 1217.99 L1311.48 1217.99 L1310.9 1217.99 L1310.31 1217.99 L1309.73 1217.99 L1309.14 1217.99 L1308.55 1217.99 L1307.97 1217.99 L1307.38 1217.99 L1306.79 1217.99 L1306.21 1217.99 L1305.62 1217.99 L1305.03 1217.99 L1304.45 1217.99 L1303.86 1217.99 L1303.27 1217.99 L1302.69 1217.99 L1302.1 1217.99 L1301.52 1217.99 L1300.93 1217.99 L1300.34 1217.99 L1299.76 1217.99 L1299.17 1217.99 L1298.58 1217.99 L1298 1217.99 L1297.41 1217.99 L1296.82 1217.99 L1296.24 1217.99 L1295.65 1217.99 L1295.06 1217.99 L1294.48 1217.99 L1293.89 1217.99 L1293.31 1217.99 L1292.72 1217.99 L1292.13 1217.99 L1291.55 1217.99 L1290.96 1217.99 L1290.37 1217.99 L1289.79 1217.99 L1289.2 1217.99 L1288.61 1217.99 L1288.03 1217.99 L1287.44 1217.99 L1286.86 1217.99 L1286.27 1217.99 L1285.68 1217.99 L1285.1 1217.99 L1284.51 1217.99 L1283.92 1217.99 L1283.34 1217.99 L1282.75 1217.99 L1282.16 1217.99 L1281.58 1217.99 L1280.99 1217.99 L1280.4 1217.99 L1279.82 1217.99 L1279.23 1217.99 L1278.65 1217.99 L1278.06 1217.99 L1277.47 1217.99 L1276.89 1217.99 L1276.3 1217.99 L1275.71 1217.99 L1275.13 1217.99 L1274.54 1217.99 L1273.95 1217.99 L1273.37 1217.99 L1272.78 1217.99 L1272.19 1217.99 L1271.61 1217.99 L1271.02 1217.99 L1270.44 1217.99 L1269.85 1217.99 L1269.26 1217.99 L1268.68 1217.99 L1268.09 1217.99 L1267.5 1217.99 L1266.92 1217.99 L1266.33 1217.99 L1265.74 1217.99 L1265.16 1217.99 L1264.57 1217.99 L1263.98 1217.99 L1263.4 1217.99 L1262.81 1217.99 L1262.23 1217.99 L1261.64 1217.99 L1261.05 1217.99 L1260.47 1217.99 L1259.88 1217.99 L1259.29 1217.99 L1258.71 1217.99 L1258.12 1217.99 L1257.53 1217.99 L1256.95 1217.99 L1256.36 1217.99 L1255.78 1217.99 L1255.19 1217.99 L1254.6 1217.99 L1254.02 1217.99 L1253.43 1217.99 L1252.84 1217.99 L1252.26 1217.99 L1251.67 1217.99 L1251.08 1217.99 L1250.5 1217.99 L1249.91 1217.99 L1249.32 1217.99 L1248.74 1217.99 L1248.15 1217.99 L1247.57 1217.99 L1246.98 1217.99 L1246.39 1217.99 L1245.81 1217.99 L1245.22 1217.99 L1244.63 1217.99 L1244.05 1217.99 L1243.46 1217.99 L1242.87 1217.99 L1242.29 1217.99 L1241.7 1217.99 L1241.11 1217.99 L1240.53 1217.99 L1239.94 1217.99 L1239.36 1217.99 L1238.77 1217.99 L1238.18 1217.99 L1237.6 1217.99 L1237.01 1217.99 L1236.42 1217.99 L1235.84 1217.99 L1235.25 1217.99 L1234.66 1217.99 L1234.08 1217.99 L1233.49 1217.99 L1232.91 1217.99 L1232.32 1217.99 L1231.73 1217.99 L1231.15 1217.99 L1230.56 1217.99 L1229.97 1217.99 L1229.39 1217.99 L1228.8 1217.99 L1228.21 1217.99 L1227.63 1217.99 L1227.04 1217.99 L1226.45 1217.99 L1225.87 1217.99 L1225.28 1217.99 L1224.7 1217.99 L1224.11 1217.99 L1223.52 1217.99 L1222.94 1217.99 L1222.35 1217.99 L1221.76 1217.99 L1221.18 1217.99 L1220.59 1217.99 L1220 1217.99 L1219.42 1217.99 L1218.83 1217.99 L1218.24 1217.99 L1217.66 1217.99 L1217.07 1217.99 L1216.49 1217.99 L1215.9 1217.99 L1215.31 1217.99 L1214.73 1217.99 L1214.14 1217.99 L1213.55 1217.99 L1212.97 1217.99 L1212.38 1217.99 L1211.79 1217.99 L1211.21 1217.99 L1210.62 1217.99 L1210.03 1217.99 L1209.45 1217.99 L1208.86 1217.99 L1208.28 1217.99 L1207.69 1217.99 L1207.1 1217.99 L1206.52 1217.99 L1205.93 1217.99 L1205.34 1217.99 L1204.76 1217.99 L1204.17 1217.99 L1203.58 1217.99 L1203 1217.99 L1202.41 1217.99 L1201.83 1217.99 L1201.24 1217.99 L1200.65 1217.99 L1200.07 1217.99 L1199.48 1217.99 L1198.89 1217.99 L1198.31 1217.99 L1197.72 1217.99 L1197.13 1217.99 L1196.55 1217.99 L1195.96 1217.99 L1195.37 1217.99 L1194.79 1217.99 L1194.2 1217.99 L1193.62 1217.99 L1193.03 1217.99 L1192.44 1217.99 L1191.86 1217.99 L1191.27 1217.99 L1190.68 1217.99 L1190.1 1217.99 L1189.51 1217.99 L1188.92 1217.99 L1188.34 1217.99 L1187.75 1217.99 L1187.16 1217.99 L1186.58 1217.99 L1185.99 1217.99 L1185.41 1217.99 L1184.82 1217.99 L1184.23 1217.99 L1183.65 1217.99 L1183.06 1217.99 L1182.47 1217.99 L1181.89 1217.99 L1181.3 1217.99 L1180.71 1217.99 L1180.13 1217.99 L1179.54 1217.99 L1178.96 1217.99 L1178.37 1217.99 L1177.78 1217.99 L1177.2 1217.99 L1176.61 1217.99 L1176.02 1217.99 L1175.44 1217.99 L1174.85 1217.99 L1174.26 1217.99 L1173.68 1217.99 L1173.09 1217.99 L1172.5 1217.99 L1171.92 1217.99 L1171.33 1217.99 L1170.75 1217.99 L1170.16 1217.99 L1169.57 1217.99 L1168.99 1217.99 L1168.4 1217.99 L1167.81 1217.99 L1167.23 1217.99 L1166.64 1217.99 L1166.05 1217.99 L1165.47 1217.99 L1164.88 1217.99 L1164.29 1217.99 L1163.71 1217.99 L1163.12 1217.99 L1162.54 1217.99 L1161.95 1217.99 L1161.36 1217.99 L1160.78 1217.99 L1160.19 1217.99 L1159.6 1217.99 L1159.02 1217.99 L1158.43 1217.99 L1157.84 1217.99 L1157.26 1217.99 L1156.67 1217.99 L1156.09 1217.99 L1155.5 1217.99 L1154.91 1217.99 L1154.33 1217.99 L1153.74 1217.99 L1153.15 1217.99 L1152.57 1217.99 L1151.98 1217.99 L1151.39 1217.99 L1150.81 1217.99 L1150.22 1217.99 L1149.63 1217.99 L1149.05 1217.99 L1148.46 1217.99 L1147.88 1217.99 L1147.29 1217.99 L1146.7 1217.99 L1146.12 1217.99 L1145.53 1217.99 L1144.94 1217.99 L1144.36 1217.99 L1143.77 1217.99 L1143.18 1217.99 L1142.6 1217.99 L1142.01 1217.99 L1141.42 1217.99 L1140.84 1217.99 L1140.25 1217.99 L1139.67 1217.99 L1139.08 1217.99 L1138.49 1217.99 L1137.91 1217.99 L1137.32 1217.99 L1136.73 1217.99 L1136.15 1217.99 L1135.56 1217.99 L1134.97 1217.99 L1134.39 1217.99 L1133.8 1217.99 L1133.21 1217.99 L1132.63 1217.99 L1132.04 1217.99 L1131.46 1217.99 L1130.87 1217.99 L1130.28 1217.99 L1129.7 1217.99 L1129.11 1217.99 L1128.52 1217.99 L1127.94 1217.99 L1127.35 1217.99 L1126.76 1217.99 L1126.18 1217.99 L1125.59 1217.99 L1125.01 1217.99 L1124.42 1217.99 L1123.83 1217.99 L1123.25 1217.99 L1122.66 1217.99 L1122.07 1217.99 L1121.49 1217.99 L1120.9 1217.99 L1120.31 1217.99 L1119.73 1217.99 L1119.14 1217.99 L1118.55 1217.99 L1117.97 1217.99 L1117.38 1217.99 L1116.8 1217.99 L1116.21 1217.99 L1115.62 1217.99 L1115.04 1217.99 L1114.45 1217.99 L1113.86 1217.99 L1113.28 1217.99 L1112.69 1217.99 L1112.1 1217.99 L1111.52 1217.99 L1110.93 1217.99 L1110.34 1217.99 L1109.76 1217.99 L1109.17 1217.99 L1108.59 1217.99 L1108 1217.99 L1107.41 1217.99 L1106.83 1217.99 L1106.24 1217.99 L1105.65 1217.99 L1105.07 1217.99 L1104.48 1217.99 L1103.89 1217.99 L1103.31 1217.99 L1102.72 1217.99 L1102.14 1217.99 L1101.55 1217.99 L1100.96 1217.99 L1100.38 1217.99 L1099.79 1217.99 L1099.2 1217.99 L1098.62 1217.99 L1098.03 1217.99 L1097.44 1217.99 L1096.86 1217.99 L1096.27 1217.99 L1095.68 1217.99 L1095.1 1217.99 L1094.51 1217.99 L1093.93 1217.99 L1093.34 1217.99 L1092.75 1217.99 L1092.17 1217.99 L1091.58 1217.99 L1090.99 1217.99 L1090.41 1217.99 L1089.82 1217.99 L1089.23 1217.99 L1088.65 1217.99 L1088.06 1217.99 L1087.47 1217.99 L1086.89 1217.99 L1086.3 1217.99 L1085.72 1217.99 L1085.13 1217.99 L1084.54 1217.99 L1083.96 1217.99 L1083.37 1217.99 L1082.78 1217.99 L1082.2 1217.99 L1081.61 1217.99 L1081.02 1217.99 L1080.44 1217.99 L1079.85 1217.99 L1079.26 1217.99 L1078.68 1217.99 L1078.09 1217.99 L1077.51 1217.99 L1076.92 1217.99 L1076.33 1217.99 L1075.75 1217.99 L1075.16 1217.99 L1074.57 1217.99 L1073.99 1217.99 L1073.4 1217.99 L1072.81 1217.99 L1072.23 1217.99 L1071.64 1217.99 L1071.06 1217.99 L1070.47 1217.99 L1069.88 1217.99 L1069.3 1217.99 L1068.71 1217.99 L1068.12 1217.99 L1067.54 1217.99 L1066.95 1217.99 L1066.36 1217.99 L1065.78 1217.99 L1065.19 1217.99 L1064.6 1217.99 L1064.02 1217.99 L1063.43 1217.99 L1062.85 1217.99 L1062.26 1217.99 L1061.67 1217.99 L1061.09 1217.99 L1060.5 1217.99 L1059.91 1217.99 L1059.33 1217.99 L1058.74 1217.99 L1058.15 1217.99 L1057.57 1217.99 L1056.98 1217.99 L1056.39 1217.99 L1055.81 1217.99 L1055.22 1217.99 L1054.64 1217.99 L1054.05 1217.99 L1053.46 1217.99 L1052.88 1217.99 L1052.29 1217.99 L1051.7 1217.99 L1051.12 1217.99 L1050.53 1217.99 L1049.94 1217.99 L1049.36 1217.99 L1048.77 1217.99 L1048.19 1217.99 L1047.6 1217.99 L1047.01 1217.99 L1046.43 1217.99 L1045.84 1217.99 L1045.25 1217.99 L1044.67 1217.99 L1044.08 1217.99 L1043.49 1217.99 L1042.91 1217.99 L1042.32 1217.99 L1041.73 1217.99 L1041.15 1217.99 L1040.56 1217.99 L1039.98 1217.99 L1039.39 1217.99 L1038.8 1217.99 L1038.22 1217.99 L1037.63 1217.99 L1037.04 1217.99 L1036.46 1217.99 L1035.87 1217.99 L1035.28 1217.99 L1034.7 1217.99 L1034.11 1217.99 L1033.52 1217.99 L1032.94 1217.99 L1032.35 1217.99 L1031.77 1217.99 L1031.18 1217.99 L1030.59 1217.99 L1030.01 1217.99 L1029.42 1217.99 L1028.83 1217.99 L1028.25 1217.99 L1027.66 1217.99 L1027.07 1217.99 L1026.49 1217.99 L1025.9 1217.99 L1025.32 1217.99 L1024.73 1217.99 L1024.14 1217.99 L1023.56 1217.99 L1022.97 1217.99 L1022.38 1217.99 L1021.8 1217.99 L1021.21 1217.99 L1020.62 1217.99 L1020.04 1217.99 L1019.45 1217.99 L1018.86 1217.99 L1018.28 1217.99 L1017.69 1217.99 L1017.11 1217.99 L1016.52 1217.99 L1015.93 1217.99 L1015.35 1217.99 L1014.76 1217.99 L1014.17 1217.99 L1013.59 1217.99 L1013 1217.99 L1012.41 1217.99 L1011.83 1217.99 L1011.24 1217.99 L1010.65 1217.99 L1010.07 1217.99 L1009.48 1217.99 L1008.9 1217.99 L1008.31 1217.99 L1007.72 1217.99 L1007.14 1217.99 L1006.55 1217.99 L1005.96 1217.99 L1005.38 1217.99 L1004.79 1217.99 L1004.2 1217.99 L1003.62 1217.99 L1003.03 1217.99 L1002.44 1217.99 L1001.86 1217.99 L1001.27 1217.99 L1000.69 1217.99 L1000.1 1217.99 L999.513 1217.99 L998.926 1217.99 L998.34 1217.99 L997.754 1217.99 L997.167 1217.99 L996.581 1217.99 L995.994 1217.99 L995.408 1217.99 L994.822 1217.99 L994.235 1217.99 L993.649 1217.99 L993.062 1217.99 L992.476 1217.99 L991.889 1217.99 L991.303 1217.99 L990.717 1217.99 L990.13 1217.99 L989.544 1217.99 L988.957 1217.99 L988.371 1217.99 L987.785 1217.99 L987.198 1217.99 L986.612 1217.99 L986.025 1217.99  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.29 986.612,1218.29 987.198,1218.29 987.785,1218.29 988.371,1218.29 988.957,1218.29 989.544,1218.29 990.13,1218.29 990.717,1218.29 991.303,1218.29 991.889,1218.29 992.476,1218.29 993.062,1218.29 993.649,1218.29 994.235,1218.29 994.822,1218.29 995.408,1218.29 995.994,1218.29 996.581,1218.29 997.167,1218.29 997.754,1218.29 998.34,1218.29 998.926,1218.29 999.513,1218.29 1000.1,1218.29 1000.69,1218.29 1001.27,1218.29 1001.86,1218.29 1002.44,1218.29 1003.03,1218.29 1003.62,1218.29 1004.2,1218.29 1004.79,1218.29 1005.38,1218.29 1005.96,1218.29 1006.55,1218.29 1007.14,1218.29 1007.72,1218.29 1008.31,1218.29 1008.9,1218.29 1009.48,1218.29 1010.07,1218.29 1010.65,1218.29 1011.24,1218.29 1011.83,1218.29 1012.41,1218.29 1013,1218.29 1013.59,1218.29 1014.17,1218.29 1014.76,1218.29 1015.35,1218.29 1015.93,1218.29 1016.52,1218.29 1017.11,1218.29 1017.69,1218.29 1018.28,1218.29 1018.86,1218.29 1019.45,1218.29 1020.04,1218.29 1020.62,1218.29 1021.21,1218.29 1021.8,1218.29 1022.38,1218.29 1022.97,1218.29 1023.56,1218.29 1024.14,1218.29 1024.73,1218.29 1025.32,1218.29 1025.9,1218.29 1026.49,1218.29 1027.07,1218.29 1027.66,1218.29 1028.25,1218.29 1028.83,1218.29 1029.42,1218.29 1030.01,1218.29 1030.59,1218.29 1031.18,1218.29 1031.77,1218.29 1032.35,1218.29 1032.94,1218.29 1033.52,1218.29 1034.11,1218.29 1034.7,1218.29 1035.28,1218.29 1035.87,1218.29 1036.46,1218.29 1037.04,1218.29 1037.63,1218.29 1038.22,1218.29 1038.8,1218.29 1039.39,1218.29 1039.98,1218.29 1040.56,1218.29 1041.15,1218.29 1041.73,1218.29 1042.32,1218.29 1042.91,1218.29 1043.49,1218.29 1044.08,1218.29 1044.67,1218.29 1045.25,1218.29 1045.84,1218.29 1046.43,1218.29 1047.01,1218.29 1047.6,1218.29 1048.19,1218.29 1048.77,1218.29 1049.36,1218.29 1049.94,1218.29 1050.53,1218.29 1051.12,1218.29 1051.7,1218.29 1052.29,1218.29 1052.88,1218.29 1053.46,1218.29 1054.05,1218.29 1054.64,1218.29 1055.22,1218.29 1055.81,1218.29 1056.39,1218.29 1056.98,1218.29 1057.57,1218.29 1058.15,1218.29 1058.74,1218.29 1059.33,1218.29 1059.91,1218.29 1060.5,1218.29 1061.09,1218.29 1061.67,1218.29 1062.26,1218.29 1062.85,1218.29 1063.43,1218.29 1064.02,1218.29 1064.6,1218.29 1065.19,1218.29 1065.78,1218.29 1066.36,1218.29 1066.95,1218.29 1067.54,1218.29 1068.12,1218.29 1068.71,1218.29 1069.3,1218.29 1069.88,1218.29 1070.47,1218.29 1071.06,1218.29 1071.64,1218.29 1072.23,1218.29 1072.81,1218.29 1073.4,1218.29 1073.99,1218.29 1074.57,1218.29 1075.16,1218.29 1075.75,1218.29 1076.33,1218.29 1076.92,1218.29 1077.51,1218.29 1078.09,1218.29 1078.68,1218.29 1079.26,1218.29 1079.85,1218.29 1080.44,1218.29 1081.02,1218.29 1081.61,1218.29 1082.2,1218.29 1082.78,1218.29 1083.37,1218.29 1083.96,1218.29 1084.54,1218.29 1085.13,1218.29 1085.72,1218.29 1086.3,1218.29 1086.89,1218.29 1087.47,1218.29 1088.06,1218.29 1088.65,1218.29 1089.23,1218.29 1089.82,1218.29 1090.41,1218.29 1090.99,1218.29 1091.58,1218.29 1092.17,1218.29 1092.75,1218.29 1093.34,1218.29 1093.93,1218.29 1094.51,1218.29 1095.1,1218.29 1095.68,1218.29 1096.27,1218.29 1096.86,1218.29 1097.44,1218.29 1098.03,1218.29 1098.62,1218.29 1099.2,1218.29 1099.79,1218.29 1100.38,1218.29 1100.96,1218.29 1101.55,1218.29 1102.14,1218.29 1102.72,1218.29 1103.31,1218.29 1103.89,1218.29 1104.48,1218.29 1105.07,1218.29 1105.65,1218.29 1106.24,1218.29 1106.83,1218.29 1107.41,1218.29 1108,1218.29 1108.59,1218.29 1109.17,1218.29 1109.76,1218.29 1110.34,1218.29 1110.93,1218.29 1111.52,1218.29 1112.1,1218.29 1112.69,1218.29 1113.28,1218.29 1113.86,1218.29 1114.45,1218.29 1115.04,1218.29 1115.62,1218.29 1116.21,1218.29 1116.8,1218.29 1117.38,1218.29 1117.97,1218.29 1118.55,1218.29 1119.14,1218.29 1119.73,1218.29 1120.31,1218.29 1120.9,1218.29 1121.49,1218.29 1122.07,1218.29 1122.66,1218.29 1123.25,1218.29 1123.83,1218.29 1124.42,1218.29 1125.01,1218.29 1125.59,1218.29 1126.18,1218.29 1126.76,1218.29 1127.35,1218.29 1127.94,1218.29 1128.52,1218.29 1129.11,1218.29 1129.7,1218.29 1130.28,1218.29 1130.87,1218.29 1131.46,1218.29 1132.04,1218.29 1132.63,1218.29 1133.21,1218.29 1133.8,1218.29 1134.39,1218.29 1134.97,1218.29 1135.56,1218.29 1136.15,1218.29 1136.73,1218.29 1137.32,1218.29 1137.91,1218.29 1138.49,1218.29 1139.08,1218.29 1139.67,1218.29 1140.25,1218.29 1140.84,1218.29 1141.42,1218.29 1142.01,1218.29 1142.6,1218.29 1143.18,1218.29 1143.77,1218.29 1144.36,1218.29 1144.94,1218.29 1145.53,1218.29 1146.12,1218.29 1146.7,1218.29 1147.29,1218.29 1147.88,1218.29 1148.46,1218.29 1149.05,1218.29 1149.63,1218.29 1150.22,1218.29 1150.81,1218.29 1151.39,1218.29 1151.98,1218.29 1152.57,1218.29 1153.15,1218.29 1153.74,1218.29 1154.33,1218.29 1154.91,1218.29 1155.5,1218.29 1156.09,1218.29 1156.67,1218.29 1157.26,1218.29 1157.84,1218.29 1158.43,1218.29 1159.02,1218.29 1159.6,1218.29 1160.19,1218.29 1160.78,1218.29 1161.36,1218.29 1161.95,1218.29 1162.54,1218.29 1163.12,1218.29 1163.71,1218.29 1164.29,1218.29 1164.88,1218.29 1165.47,1218.29 1166.05,1218.29 1166.64,1218.29 1167.23,1218.29 1167.81,1218.29 1168.4,1218.29 1168.99,1218.29 1169.57,1218.29 1170.16,1218.29 1170.75,1218.29 1171.33,1218.29 1171.92,1218.29 1172.5,1218.29 1173.09,1218.29 1173.68,1218.29 1174.26,1218.29 1174.85,1218.29 1175.44,1218.29 1176.02,1218.29 1176.61,1218.29 1177.2,1218.29 1177.78,1218.29 1178.37,1218.29 1178.96,1218.29 1179.54,1218.29 1180.13,1218.29 1180.71,1218.29 1181.3,1218.29 1181.89,1218.29 1182.47,1218.29 1183.06,1218.29 1183.65,1218.29 1184.23,1218.29 1184.82,1218.29 1185.41,1218.29 1185.99,1218.29 1186.58,1218.29 1187.16,1218.29 1187.75,1218.29 1188.34,1218.29 1188.92,1218.29 1189.51,1218.29 1190.1,1218.29 1190.68,1218.29 1191.27,1218.29 1191.86,1218.29 1192.44,1218.29 1193.03,1218.29 1193.62,1218.29 1194.2,1218.29 1194.79,1218.29 1195.37,1218.29 1195.96,1218.29 1196.55,1218.29 1197.13,1218.29 1197.72,1218.29 1198.31,1218.29 1198.89,1218.29 1199.48,1218.29 1200.07,1218.29 1200.65,1218.29 1201.24,1218.29 1201.83,1218.29 1202.41,1218.29 1203,1218.29 1203.58,1218.29 1204.17,1218.29 1204.76,1218.29 1205.34,1218.29 1205.93,1218.29 1206.52,1218.29 1207.1,1218.29 1207.69,1218.29 1208.28,1218.29 1208.86,1218.29 1209.45,1218.29 1210.03,1218.29 1210.62,1218.29 1211.21,1218.29 1211.79,1218.29 1212.38,1218.29 1212.97,1218.29 1213.55,1218.29 1214.14,1218.29 1214.73,1218.29 1215.31,1218.29 1215.9,1218.29 1216.49,1218.29 1217.07,1218.29 1217.66,1218.29 1218.24,1218.29 1218.83,1218.29 1219.42,1218.29 1220,1218.29 1220.59,1218.29 1221.18,1218.29 1221.76,1218.29 1222.35,1218.29 1222.94,1218.29 1223.52,1218.29 1224.11,1218.29 1224.7,1218.29 1225.28,1218.29 1225.87,1218.29 1226.45,1218.29 1227.04,1218.29 1227.63,1218.29 1228.21,1218.29 1228.8,1218.29 1229.39,1218.29 1229.97,1218.29 1230.56,1218.29 1231.15,1218.29 1231.73,1218.29 1232.32,1218.29 1232.91,1218.29 1233.49,1218.29 1234.08,1218.29 1234.66,1218.29 1235.25,1218.29 1235.84,1218.29 1236.42,1218.29 1237.01,1218.29 1237.6,1218.29 1238.18,1218.29 1238.77,1218.29 1239.36,1218.29 1239.94,1218.29 1240.53,1218.29 1241.11,1218.29 1241.7,1218.29 1242.29,1218.29 1242.87,1218.29 1243.46,1218.29 1244.05,1218.29 1244.63,1218.29 1245.22,1218.29 1245.81,1218.29 1246.39,1218.29 1246.98,1218.29 1247.57,1218.29 1248.15,1218.29 1248.74,1218.29 1249.32,1218.29 1249.91,1218.29 1250.5,1218.29 1251.08,1218.29 1251.67,1218.29 1252.26,1218.29 1252.84,1218.29 1253.43,1218.29 1254.02,1218.29 1254.6,1218.29 1255.19,1218.29 1255.78,1218.29 1256.36,1218.29 1256.95,1218.29 1257.53,1218.29 1258.12,1218.29 1258.71,1218.29 1259.29,1218.29 1259.88,1218.29 1260.47,1218.29 1261.05,1218.29 1261.64,1218.29 1262.23,1218.29 1262.81,1218.29 1263.4,1218.29 1263.98,1218.29 1264.57,1218.29 1265.16,1218.29 1265.74,1218.29 1266.33,1218.29 1266.92,1218.29 1267.5,1218.29 1268.09,1218.29 1268.68,1218.29 1269.26,1218.29 1269.85,1218.29 1270.44,1218.29 1271.02,1218.29 1271.61,1218.29 1272.19,1218.29 1272.78,1218.29 1273.37,1218.29 1273.95,1218.29 1274.54,1218.29 1275.13,1218.29 1275.71,1218.29 1276.3,1218.29 1276.89,1218.29 1277.47,1218.29 1278.06,1218.29 1278.65,1218.29 1279.23,1218.29 1279.82,1218.29 1280.4,1218.29 1280.99,1218.29 1281.58,1218.29 1282.16,1218.29 1282.75,1218.29 1283.34,1218.29 1283.92,1218.29 1284.51,1218.29 1285.1,1218.29 1285.68,1218.29 1286.27,1218.29 1286.86,1218.29 1287.44,1218.29 1288.03,1218.29 1288.61,1218.29 1289.2,1218.29 1289.79,1218.29 1290.37,1218.29 1290.96,1218.29 1291.55,1218.29 1292.13,1218.29 1292.72,1218.29 1293.31,1218.29 1293.89,1218.29 1294.48,1218.29 1295.06,1218.29 1295.65,1218.29 1296.24,1218.29 1296.82,1218.29 1297.41,1218.29 1298,1218.29 1298.58,1218.29 1299.17,1218.29 1299.76,1218.29 1300.34,1218.29 1300.93,1218.29 1301.52,1218.29 1302.1,1218.29 1302.69,1218.29 1303.27,1218.29 1303.86,1218.29 1304.45,1218.29 1305.03,1218.29 1305.62,1218.29 1306.21,1218.29 1306.79,1218.29 1307.38,1218.29 1307.97,1218.29 1308.55,1218.29 1309.14,1218.29 1309.73,1218.29 1310.31,1218.29 1310.9,1218.29 1311.48,1218.29 1312.07,1218.29 1312.66,1218.29 1313.24,1218.29 1313.83,1218.29 1314.42,1218.29 1315,1218.29 1315.59,1218.29 1316.18,1218.29 1316.76,1218.29 1317.35,1218.29 1317.93,1218.29 1318.52,1218.29 1319.11,1218.29 1319.69,1218.29 1320.28,1218.29 1320.87,1218.29 1321.45,1218.29 1322.04,1218.29 1322.63,1218.29 1323.21,1218.29 1323.8,1218.29 1324.39,1218.29 1324.97,1218.29 1325.56,1218.29 1326.14,1218.29 1326.73,1218.29 1327.32,1218.29 1327.9,1218.29 1328.49,1218.29 1329.08,1218.29 1329.66,1218.29 1330.25,1218.29 1330.84,1218.29 1331.42,1218.29 1332.01,1218.29 1332.6,1218.29 1333.18,1218.29 1333.77,1218.29 1334.35,1218.29 1334.94,1218.29 1335.53,1218.29 1336.11,1218.29 1336.7,1218.29 1337.29,1218.29 1337.87,1218.29 1338.46,1218.29 1339.05,1218.29 1339.63,1218.29 1340.22,1218.29 1340.8,1218.29 1341.39,1218.29 1341.98,1218.29 1342.56,1218.29 1343.15,1218.29 1343.74,1218.29 1344.32,1218.29 1344.91,1218.29 1345.5,1218.29 1346.08,1218.29 1346.67,1218.29 1347.26,1218.29 1347.84,1218.29 1348.43,1218.29 1349.01,1218.29 1349.6,1218.29 1350.19,1218.29 1350.77,1218.29 1351.36,1218.29 1351.95,1218.29 1352.53,1218.29 1353.12,1218.29 1353.71,1218.29 1354.29,1218.29 1354.88,1218.29 1355.47,1218.29 1356.05,1218.29 1356.64,1218.29 1357.22,1218.29 1357.81,1218.29 1358.4,1218.29 1358.98,1218.29 1359.57,1218.29 1360.16,1218.29 1360.74,1218.29 1361.33,1218.29 1361.92,1218.29 1362.5,1218.29 1363.09,1218.29 1363.68,1218.29 1364.26,1218.29 1364.85,1218.29 1365.43,1218.29 1366.02,1218.29 1366.61,1218.29 1367.19,1218.29 1367.78,1218.29 1368.37,1218.29 1368.95,1218.29 1369.54,1218.29 1370.13,1218.29 1370.71,1218.29 1371.3,1218.29 1371.88,1218.29 1372.47,1218.29 1373.06,1218.29 1373.64,1218.29 1374.23,1218.29 1374.82,1218.29 1375.4,1218.29 1375.99,1218.29 1376.58,1218.29 1377.16,1218.29 1377.75,1218.29 1378.34,1218.29 1378.92,1218.29 1379.51,1218.29 1380.09,1218.29 1380.68,1218.29 1381.27,1218.29 1381.85,1218.29 1382.44,1218.29 1383.03,1218.29 1383.61,1218.29 1384.2,1218.29 1384.79,1218.29 1385.37,1218.29 1385.96,1218.29 1386.55,1218.29 1387.13,1218.29 1387.72,1218.29 1388.3,1218.29 1388.89,1218.29 1389.48,1218.29 1390.06,1218.29 1390.65,1218.29 1391.24,1218.29 1391.82,1218.29 1392.41,1218.29 1393,1218.29 1393.58,1218.29 1394.17,1218.29 1394.75,1218.29 1395.34,1218.29 1395.93,1218.29 1396.51,1218.29 1397.1,1218.29 1397.69,1218.29 1398.27,1218.29 1398.86,1218.29 1399.45,1218.29 1400.03,1218.29 1400.62,1218.29 1401.21,1218.29 1401.79,1218.29 1402.38,1218.29 1402.96,1218.29 1403.55,1218.29 1404.14,1218.29 1404.72,1218.29 1405.31,1218.29 1405.9,1218.29 1406.48,1218.29 1407.07,1218.29 1407.66,1218.29 1408.24,1218.29 1408.83,1218.29 1409.42,1218.29 1410,1218.29 1410.59,1218.29 1411.17,1218.29 1411.76,1218.29 1412.35,1218.29 1412.93,1218.29 1413.52,1218.29 1414.11,1218.29 1414.69,1218.29 1415.28,1218.29 1415.87,1218.29 1416.45,1218.29 1417.04,1218.29 1417.63,1218.29 1418.21,1218.29 1418.8,1218.29 1419.38,1218.29 1419.97,1218.29 1420.56,1218.29 1421.14,1218.29 1421.73,1218.29 1422.32,1218.29 1422.9,1218.29 1423.49,1218.29 1424.08,1218.29 1424.66,1218.29 1425.25,1218.29 1425.83,1218.29 1426.42,1218.29 1427.01,1218.29 1427.59,1218.29 1428.18,1218.29 1428.77,1218.29 1429.35,1218.29 1429.94,1218.29 1430.53,1218.29 1431.11,1218.29 1431.7,1218.29 1432.29,1218.29 1432.87,1218.29 1433.46,1218.29 1434.04,1218.29 1434.63,1218.29 1435.22,1218.29 1435.8,1218.29 1436.39,1218.29 1436.98,1218.29 1437.56,1218.29 1438.15,1218.29 1438.74,1218.29 1439.32,1218.29 1439.91,1218.29 1440.5,1218.29 1441.08,1218.29 1441.67,1218.29 1442.25,1218.29 1442.84,1218.29 1443.43,1218.29 1444.01,1218.29 1444.6,1218.29 1445.19,1218.29 1445.77,1218.29 1446.36,1218.29 1446.95,1218.29 1447.53,1218.29 1448.12,1218.29 1448.7,1218.29 1449.29,1218.29 1449.88,1218.29 1450.46,1218.29 1451.05,1218.29 1451.64,1218.29 1452.22,1218.29 1452.81,1218.29 1453.4,1218.29 1453.98,1218.29 1454.57,1218.29 1455.16,1218.29 1455.74,1218.29 1456.33,1218.29 1456.91,1218.29 1457.5,1218.29 1458.09,1218.29 1458.67,1218.29 1459.26,1218.29 1459.85,1218.29 1460.43,1218.29 1461.02,1218.29 1461.61,1218.29 1462.19,1218.29 1462.78,1218.29 1463.37,1218.29 1463.95,1218.29 1464.54,1218.29 1465.12,1218.29 1465.71,1218.29 1466.3,1218.29 1466.88,1218.29 1467.47,1218.29 1468.06,1218.29 1468.64,1218.29 1469.23,1218.29 1469.82,1218.29 1470.4,1218.29 1470.99,1218.29 1471.57,1218.29 1472.16,1218.29 1472.75,1218.29 1473.33,1218.29 1473.92,1218.29 1474.51,1218.29 1475.09,1218.29 1475.68,1218.29 1476.27,1218.29 1476.85,1218.29 1477.44,1218.29 1478.03,1218.29 1478.61,1218.29 1479.2,1218.29 1479.78,1218.29 1480.37,1218.29 1480.96,1218.29 1481.54,1218.29 1482.13,1218.29 1482.72,1218.29 1483.3,1218.29 1483.89,1218.29 1484.48,1218.29 1485.06,1218.29 1485.65,1218.29 1486.24,1218.29 1486.82,1218.29 1487.41,1218.29 1487.99,1218.29 1488.58,1218.29 1489.17,1218.29 1489.75,1218.29 1490.34,1218.29 1490.93,1218.29 1491.51,1218.29 1492.1,1218.29 1492.69,1218.29 1493.27,1218.29 1493.86,1218.29 1494.45,1218.29 1495.03,1218.29 1495.62,1218.29 1496.2,1218.29 1496.79,1218.29 1497.38,1218.29 1497.96,1218.29 1498.55,1218.29 1499.14,1218.29 1499.72,1218.29 1500.31,1218.29 1500.9,1218.29 1501.48,1218.29 1502.07,1218.29 1502.65,1218.29 1503.24,1218.29 1503.83,1218.29 1504.41,1218.29 1505,1218.29 1505.59,1218.29 1506.17,1218.29 1506.76,1218.29 1507.35,1218.29 1507.93,1218.29 1508.52,1218.29 1509.11,1218.29 1509.69,1218.29 1510.28,1218.29 1510.86,1218.29 1511.45,1218.29 1512.04,1218.29 1512.62,1218.29 1513.21,1218.29 1513.8,1218.29 1514.38,1218.29 1514.97,1218.29 1515.56,1218.29 1516.14,1218.29 1516.73,1218.29 1517.32,1218.29 1517.9,1218.29 1518.49,1218.29 1519.07,1218.29 1519.66,1218.29 1520.25,1218.29 1520.83,1218.29 1521.42,1218.29 1522.01,1218.29 1522.59,1218.29 1523.18,1218.29 1523.77,1218.29 1524.35,1218.29 1524.94,1218.29 1525.52,1218.29 1526.11,1218.29 1526.7,1218.29 1527.28,1218.29 1527.87,1218.29 1528.46,1218.29 1529.04,1218.29 1529.63,1218.29 1530.22,1218.29 1530.8,1218.29 1531.39,1218.29 1531.98,1218.29 1532.56,1218.29 1533.15,1218.29 1533.73,1218.29 1534.32,1218.29 1534.91,1218.29 1535.49,1218.29 1536.08,1218.29 1536.67,1218.29 1537.25,1218.29 1537.84,1218.29 1538.43,1218.29 1539.01,1218.29 1539.6,1218.29 1540.19,1218.29 1540.77,1218.29 1541.36,1218.29 1541.94,1218.29 1542.53,1218.29 1543.12,1218.29 1543.7,1218.29 1544.29,1218.29 1544.88,1218.29 1545.46,1218.29 1546.05,1218.29 1546.64,1218.29 1547.22,1218.29 1547.81,1218.29 1548.4,1218.29 1548.98,1218.29 1549.57,1218.29 1550.15,1218.29 1550.74,1218.29 1551.33,1218.29 1551.91,1218.29 1552.5,1218.29 1553.09,1218.29 1553.67,1218.29 1554.26,1218.29 1554.85,1218.29 1555.43,1218.29 1556.02,1218.29 1556.6,1218.29 1557.19,1218.29 1557.78,1218.29 1558.36,1218.29 1558.95,1218.29 1559.54,1218.29 1560.12,1218.29 1560.71,1218.29 1561.3,1218.29 1561.88,1218.29 1562.47,1218.29 1563.06,1218.29 1563.64,1218.29 1564.23,1218.29 1564.81,1218.29 1565.4,1218.29 1565.99,1218.29 1566.57,1218.29 1567.16,1218.29 1567.75,1218.29 1568.33,1218.29 1568.92,1218.29 1569.51,1218.29 1570.09,1218.29 1570.68,1218.29 1571.27,1218.29 1571.85,1218.29 1572.44,1218.29 1573.02,1218.29 1573.61,1218.29 1574.2,1218.29 1574.78,1218.29 1575.37,1218.29 1575.96,1218.29 1576.54,1218.29 1577.13,1218.29 1577.72,1218.29 1578.3,1218.29 1578.89,1218.29 1579.47,1218.29 1580.06,1218.29 1580.65,1218.29 1581.23,1218.29 1581.82,1218.29 1582.41,1218.29 1582.99,1218.29 1583.58,1218.29 1584.17,1218.29 1584.75,1218.29 1585.34,1218.29 1585.93,1218.29 1586.51,1218.29 1587.1,1218.29 1587.68,1218.29 1588.27,1218.29 1588.86,1218.29 1589.44,1218.29 1590.03,1218.29 1590.62,1218.29 1591.2,1218.29 1591.79,1218.29 1592.38,1218.29 1592.96,1218.29 1593.55,1218.29 1594.14,1218.29 1594.72,1218.29 1595.31,1218.29 1595.89,1218.29 1596.48,1218.29 1597.07,1218.29 1597.65,1218.29 1598.24,1218.29 1598.83,1218.29 1599.41,1218.29 1600,1218.29 1600.59,1218.29 1601.17,1218.29 1601.76,1218.29 1602.34,1218.29 1602.93,1218.29 1603.52,1218.29 1604.1,1218.29 1604.69,1218.29 1605.28,1218.29 1605.86,1218.29 1606.45,1218.29 1607.04,1218.29 1607.62,1218.29 1608.21,1218.29 1608.8,1218.29 1609.38,1218.29 1609.97,1218.29 1610.55,1218.29 1611.14,1218.29 1611.73,1218.29 1612.31,1218.29 1612.9,1218.29 1613.49,1218.29 1614.07,1218.29 1614.66,1218.29 1615.25,1218.29 1615.83,1218.29 1616.42,1218.29 1617.01,1218.29 1617.59,1218.29 1618.18,1218.29 1618.76,1218.29 1619.35,1218.29 1619.94,1218.29 1620.52,1218.29 1621.11,1218.29 1621.7,1218.29 1622.28,1218.29 1622.87,1218.29 1623.46,1218.29 1624.04,1218.29 1624.63,1218.29 1625.22,1218.29 1625.8,1218.29 1626.39,1218.29 1626.97,1218.29 1627.56,1218.29 1628.15,1218.29 1628.73,1218.29 1629.32,1218.29 1629.91,1218.29 1630.49,1218.29 1631.08,1218.29 1631.67,1218.29 1632.25,1218.29 1632.84,1218.29 1633.42,1218.29 1634.01,1218.29 1634.6,1218.29 1635.18,1218.29 1635.77,1218.29 1636.36,1218.29 1636.94,1218.29 1637.53,1218.29 1638.12,1218.29 1638.7,1218.29 1639.29,1218.29 1639.88,1218.29 1640.46,1218.29 1641.05,1218.29 1641.63,1218.29 1642.22,1218.29 1642.81,1218.29 1643.39,1218.29 1643.98,1218.29 1644.57,1218.29 1645.15,1218.29 1645.74,1218.29 1646.33,1218.29 1646.91,1218.29 1647.5,1218.29 1648.09,1218.29 1648.67,1218.29 1649.26,1218.29 1649.84,1218.29 1650.43,1218.29 1651.02,1218.29 1651.6,1218.29 1652.19,1218.29 1652.78,1218.29 1653.36,1218.29 1653.95,1218.29 1654.54,1218.29 1655.12,1218.29 1655.71,1218.29 1656.29,1218.29 1656.88,1218.29 1657.47,1218.29 1658.05,1218.29 1658.64,1218.29 1659.23,1218.29 1659.81,1218.29 1660.4,1218.29 1660.99,1218.29 1661.57,1218.29 1662.16,1218.29 1662.75,1218.29 1663.33,1218.29 1663.92,1218.29 1664.5,1218.29 1665.09,1218.29 1665.68,1218.29 1666.26,1218.29 1666.85,1218.29 1667.44,1218.29 1668.02,1218.29 1668.61,1218.29 1669.2,1218.29 1669.78,1218.29 1670.37,1218.29 1670.96,1218.29 1671.54,1218.29 1672.13,1218.29 1672.71,1218.29 1673.3,1218.29 1673.89,1218.29 1674.47,1218.29 1675.06,1218.29 1675.65,1218.29 1676.23,1218.29 1676.82,1218.29 1677.41,1218.29 1677.99,1218.29 1678.58,1218.29 1679.17,1218.29 1679.75,1218.29 1680.34,1218.29 1680.92,1218.29 1681.51,1218.29 1682.1,1218.29 1682.68,1218.29 1683.27,1218.29 1683.86,1218.29 1684.44,1218.29 1685.03,1218.29 1685.62,1218.29 1686.2,1218.29 1686.79,1218.29 1687.37,1218.29 1687.96,1218.29 1688.55,1218.29 1689.13,1218.29 1689.72,1218.29 1690.31,1218.29 1690.89,1218.29 1691.48,1218.29 1692.07,1218.29 1692.65,1218.29 1693.24,1218.29 1693.83,1218.29 1694.41,1218.29 1695,1218.29 1695.58,1218.29 1696.17,1218.29 1696.76,1218.29 1697.34,1218.29 1697.93,1218.29 1698.52,1218.29 1699.1,1218.29 1699.69,1218.29 1700.28,1218.29 1700.86,1218.29 1701.45,1218.29 1702.04,1218.29 1702.62,1218.29 1703.21,1218.29 1703.79,1218.29 1704.38,1218.29 1704.97,1218.29 1705.55,1218.29 1706.14,1218.29 1706.73,1218.29 1707.31,1218.29 1707.9,1218.29 1708.49,1218.29 1709.07,1218.29 1709.66,1218.29 1710.24,1218.29 1710.83,1218.29 1711.42,1218.29 1712,1218.29 1712.59,1218.29 1713.18,1218.29 1713.76,1218.29 1714.35,1218.29 1714.94,1218.29 1715.52,1218.29 1716.11,1218.29 1716.7,1218.29 1717.28,1218.29 1717.87,1218.29 1718.45,1218.29 1719.04,1218.29 1719.63,1218.29 1720.21,1218.29 1720.8,1218.29 1721.39,1218.29 1721.97,1218.29 1722.56,1218.29 1723.15,1218.29 1723.73,1218.29 1724.32,1218.29 1724.91,1218.29 1725.49,1218.29 1726.08,1218.29 1726.66,1218.29 1727.25,1218.29 1727.84,1218.29 1728.42,1218.29 1729.01,1218.29 1729.6,1218.29 1730.18,1218.29 1730.77,1218.29 1731.36,1218.29 1731.94,1218.29 1732.53,1218.29 1733.11,1218.29 1733.7,1218.29 1734.29,1218.29 1734.87,1218.29 1735.46,1218.29 1736.05,1218.29 1736.63,1218.29 1737.22,1218.29 1737.81,1218.29 1738.39,1218.29 1738.98,1218.29 1739.57,1218.29 1740.15,1218.29 1740.74,1218.29 1741.32,1218.29 1741.91,1218.29 1742.5,1218.29 1743.08,1218.29 1743.67,1218.29 1744.26,1218.29 1744.84,1218.29 1745.43,1218.29 1746.02,1218.29 1746.6,1218.29 1747.19,1218.29 1747.78,1218.29 1748.36,1218.29 1748.95,1218.29 1749.53,1218.29 1750.12,1218.29 1750.71,1218.29 1751.29,1218.29 1751.88,1218.29 1752.47,1218.29 1753.05,1218.29 1753.64,1218.29 1754.23,1218.29 1754.81,1218.29 1755.4,1218.29 1755.99,1218.29 1756.57,1218.29 1757.16,1218.29 1757.74,1218.29 1758.33,1218.29 1758.92,1218.29 1759.5,1218.29 1760.09,1218.29 1760.68,1218.29 1761.26,1218.29 1761.85,1218.29 1762.44,1218.29 1763.02,1218.29 1763.61,1218.29 1764.19,1218.29 1764.78,1218.29 1765.37,1218.29 1765.95,1218.29 1766.54,1218.29 1767.13,1218.29 1767.71,1218.29 1768.3,1218.29 1768.89,1218.29 1769.47,1218.29 1770.06,1218.29 1770.65,1218.29 1771.23,1218.29 1771.82,1218.29 1772.4,1218.29 1772.99,1218.29 1773.58,1218.29 1774.16,1218.29 1774.75,1218.29 1775.34,1218.29 1775.92,1218.29 1776.51,1218.29 1777.1,1218.29 1777.68,1218.29 1778.27,1218.29 1778.86,1218.29 1779.44,1218.29 1780.03,1218.29 1780.61,1218.29 1781.2,1218.29 1781.79,1218.29 1782.37,1218.29 1782.96,1218.29 1783.55,1218.29 1784.13,1218.29 1784.72,1218.29 1785.31,1218.29 1785.89,1218.29 1786.48,1218.29 1787.06,1218.29 1787.65,1218.29 1788.24,1218.29 1788.82,1218.29 1789.41,1218.29 1790,1218.29 1790.58,1218.29 1791.17,1218.29 1791.76,1218.29 1792.34,1218.29 1792.93,1218.29 1793.52,1218.29 1794.1,1218.29 1794.69,1218.29 1795.27,1218.29 1795.86,1218.29 1796.45,1218.29 1797.03,1218.29 1797.62,1218.29 1798.21,1218.29 1798.79,1218.29 1799.38,1218.29 1799.97,1218.29 1800.55,1218.29 1801.14,1218.29 1801.73,1218.29 1802.31,1218.29 1802.9,1218.29 1803.48,1218.29 1804.07,1218.29 1804.66,1218.29 1805.24,1218.29 1805.83,1218.29 1806.42,1218.29 1807,1218.29 1807.59,1218.29 1808.18,1218.29 1808.76,1218.29 1809.35,1218.29 1809.94,1218.29 1810.52,1218.29 1811.11,1218.29 1811.69,1218.29 1812.28,1218.29 1812.87,1218.29 1813.45,1218.29 1814.04,1218.29 1814.63,1218.29 1815.21,1218.29 1815.8,1218.29 1816.39,1218.29 1816.97,1218.29 1817.56,1218.29 1818.14,1218.29 1818.73,1218.29 1819.32,1218.29 1819.9,1218.29 1820.49,1218.29 1821.08,1218.29 1821.66,1218.29 1822.25,1218.29 1822.84,1218.29 1823.42,1218.29 1824.01,1218.29 1824.6,1218.29 1825.18,1218.29 1825.77,1218.29 1826.35,1218.29 1826.94,1218.29 1827.53,1218.29 1828.11,1218.29 1828.7,1218.29 1829.29,1218.29 1829.87,1218.29 1830.46,1218.29 1831.05,1218.29 1831.63,1218.29 1832.22,1218.29 1832.81,1218.29 1833.39,1218.29 1833.98,1218.29 1834.56,1218.29 1835.15,1218.29 1835.74,1218.29 1836.32,1218.29 1836.91,1218.29 1837.5,1218.29 1838.08,1218.29 1838.67,1218.29 1839.26,1218.29 1839.84,1218.29 1840.43,1218.29 1841.01,1218.29 1841.6,1218.29 1842.19,1218.29 1842.77,1218.29 1843.36,1218.29 1843.95,1218.29 1844.53,1218.29 1845.12,1218.29 1845.71,1218.29 1846.29,1218.29 1846.88,1218.29 1847.47,1218.29 1848.05,1218.29 1848.64,1218.29 1849.22,1218.29 1849.81,1218.29 1850.4,1218.29 1850.98,1218.29 1851.57,1218.29 1852.16,1218.29 1852.74,1218.29 1853.33,1218.29 1853.92,1218.29 1854.5,1218.29 1855.09,1218.29 1855.68,1218.29 1856.26,1218.29 1856.85,1218.29 1857.43,1218.29 1858.02,1218.29 1858.61,1218.29 1859.19,1218.29 1859.78,1218.29 1860.37,1218.29 1860.95,1218.29 1861.54,1218.29 1862.13,1218.29 1862.71,1218.29 1863.3,1218.29 1863.88,1218.29 1864.47,1218.29 1865.06,1218.29 1865.64,1218.29 1866.23,1218.29 1866.82,1218.29 1867.4,1218.29 1867.99,1218.29 1868.58,1218.29 1869.16,1218.29 1869.75,1218.29 1870.34,1218.29 1870.92,1218.29 1871.51,1218.29 1872.09,1218.29 1872.68,1218.29 1873.27,1218.29 1873.85,1218.29 1874.44,1218.29 1875.03,1218.29 1875.61,1218.29 1876.2,1218.29 1876.79,1218.29 1877.37,1218.29 1877.96,1218.29 1878.55,1218.29 1879.13,1218.29 1879.72,1218.29 1880.3,1218.29 1880.89,1218.29 1881.48,1218.29 1882.06,1218.29 1882.65,1218.29 1883.24,1218.29 1883.82,1218.29 1884.41,1218.29 1885,1218.29 1885.58,1218.29 1886.17,1218.29 1886.76,1218.29 1887.34,1218.29 1887.93,1218.29 1888.51,1218.29 1889.1,1218.29 1889.69,1218.29 1890.27,1218.29 1890.86,1218.29 1891.45,1218.29 1892.03,1218.29 1892.62,1218.29 1893.21,1218.29 1893.79,1218.29 1894.38,1218.29 1894.96,1218.29 1895.55,1218.29 1896.14,1218.29 1896.72,1218.29 1897.31,1218.29 1897.9,1218.29 1898.48,1218.29 1899.07,1218.29 1899.66,1218.29 1900.24,1218.29 1900.83,1218.29 1901.42,1218.29 1902,1218.29 1902.59,1218.29 1903.17,1218.29 1903.76,1218.29 1904.35,1218.29 1904.93,1218.29 1905.52,1218.29 1906.11,1218.29 1906.69,1218.29 1907.28,1218.29 1907.87,1218.29 1908.45,1218.29 1909.04,1218.29 1909.63,1218.29 1910.21,1218.29 1910.8,1218.29 1911.38,1218.29 1911.97,1218.29 1912.56,1218.29 1913.14,1218.29 1913.73,1218.29 1914.32,1218.29 1914.9,1218.29 1915.49,1218.29 1916.08,1218.29 1916.66,1218.29 1917.25,1218.29 1917.83,1218.29 1918.42,1218.29 1919.01,1218.29 1919.59,1218.29 1920.18,1218.29 1920.77,1218.29 1921.35,1218.29 1921.94,1218.29 1922.53,1218.29 1923.11,1218.29 1923.7,1218.29 1924.29,1218.29 1924.87,1218.29 1925.46,1218.29 1926.04,1218.29 1926.63,1218.29 1927.22,1218.29 1927.8,1218.29 1928.39,1218.29 1928.98,1218.29 1929.56,1218.29 1930.15,1218.29 1930.74,1218.29 1931.32,1218.29 1931.91,1218.29 1932.5,1218.29 1933.08,1218.29 1933.67,1218.29 1934.25,1218.29 1934.84,1218.29 1935.43,1218.29 1936.01,1218.29 1936.6,1218.29 1937.19,1218.29 1937.77,1218.29 1938.36,1218.29 1938.95,1218.29 1939.53,1218.29 1940.12,1218.29 1940.71,1218.29 1941.29,1218.29 1941.88,1218.29 1942.46,1218.29 1943.05,1218.29 1943.64,1218.29 1944.22,1218.29 1944.81,1218.29 1945.4,1218.29 1945.98,1218.29 1946.57,1218.29 1947.16,1218.29 1947.74,1218.29 1948.33,1218.29 1948.91,1218.29 1949.5,1218.29 1950.09,1218.29 1950.67,1218.29 1951.26,1218.29 1951.85,1218.29 1952.43,1218.29 1953.02,1218.29 1953.61,1218.29 1954.19,1218.29 1954.78,1218.29 1955.37,1218.29 1955.95,1218.29 1956.54,1218.29 1957.12,1218.29 1957.71,1218.29 1958.3,1218.29 1958.88,1218.29 1959.47,1218.29 1960.06,1218.29 1960.64,1218.29 1961.23,1218.29 1961.82,1218.29 1962.4,1218.29 1962.99,1218.29 1963.58,1218.29 1964.16,1218.29 1964.75,1218.29 1965.33,1218.29 1965.92,1218.29 1966.51,1218.29 1967.09,1218.29 1967.68,1218.29 1968.27,1218.29 1968.85,1218.29 1969.44,1218.29 1970.03,1218.29 1970.61,1218.29 1971.2,1218.29 1971.78,1218.29 1972.37,1218.29 1972.96,1218.29 1973.54,1218.29 1974.13,1218.29 1974.72,1218.29 1975.3,1218.29 1975.89,1218.29 1976.48,1218.29 1977.06,1218.29 1977.65,1218.29 1978.24,1218.29 1978.82,1218.29 1979.41,1218.29 1979.99,1218.29 1980.58,1218.29 1981.17,1218.29 1981.75,1218.29 1982.34,1218.29 1982.93,1218.29 1983.51,1218.29 1984.1,1218.29 1984.69,1218.29 1985.27,1218.29 1985.86,1218.29 1986.45,1218.29 1987.03,1218.29 1987.62,1218.29 1988.2,1218.29 1988.79,1218.29 1989.38,1218.29 1989.96,1218.29 1990.55,1218.29 1991.14,1218.29 1991.72,1218.29 1992.31,1218.29 1992.9,1218.29 1993.48,1218.29 1994.07,1218.29 1994.65,1218.29 1995.24,1218.29 1995.83,1218.29 1996.41,1218.29 1997,1218.29 1997.59,1218.29 1998.17,1218.29 1998.76,1218.29 1999.35,1218.29 1999.93,1218.29 2000.52,1218.29 2001.11,1218.29 2001.69,1218.29 2002.28,1218.29 2002.86,1218.29 2003.45,1218.29 2004.04,1218.29 2004.62,1218.29 2005.21,1218.29 2005.8,1218.29 2006.38,1218.29 2006.97,1218.29 2007.56,1218.29 2008.14,1218.29 2008.73,1218.29 2009.32,1218.29 2009.9,1218.29 2010.49,1218.29 2011.07,1218.29 2011.66,1218.29 2012.25,1218.29 2012.83,1218.29 2013.42,1218.29 2014.01,1218.29 2014.59,1218.29 2015.18,1218.29 2015.77,1218.29 2016.35,1218.29 2016.94,1218.29 2017.53,1218.29 2018.11,1218.29 2018.7,1218.29 2019.28,1218.29 2019.87,1218.29 2020.46,1218.29 2021.04,1218.29 2021.63,1218.29 2022.22,1218.29 2022.8,1218.29 2023.39,1218.29 2023.98,1218.29 2024.56,1218.29 2025.15,1218.29 2025.73,1218.29 2026.32,1218.29 2026.91,1218.29 2027.49,1218.29 2028.08,1218.29 2028.67,1218.29 2029.25,1218.29 2029.84,1218.29 2030.43,1218.29 2031.01,1218.29 2031.6,1218.29 2032.19,1218.29 2032.77,1218.29 2033.36,1218.29 2033.94,1218.29 2034.53,1218.29 2035.12,1218.29 2035.7,1218.29 2036.29,1218.29 2036.88,1218.29 2037.46,1218.29 2038.05,1218.29 2038.64,1218.29 2039.22,1218.29 2039.81,1218.29 2040.4,1218.29 2040.98,1218.29 2041.57,1218.29 2042.15,1218.29 2042.74,1218.29 2043.33,1218.29 2043.91,1218.29 2044.5,1218.29 2045.09,1218.29 2045.67,1218.29 2046.26,1218.29 2046.85,1218.29 2047.43,1218.29 2048.02,1218.29 2048.6,1218.29 2049.19,1218.29 2049.78,1218.29 2050.36,1218.29 2050.95,1218.29 2051.54,1218.29 2052.12,1218.29 2052.71,1218.29 2053.3,1218.29 2053.88,1218.29 2054.47,1218.29 2055.06,1218.29 2055.64,1218.29 2056.23,1218.29 2056.81,1218.29 2057.4,1218.29 2057.99,1218.29 2058.57,1218.29 2059.16,1218.29 2059.75,1218.29 2060.33,1218.29 2060.92,1218.29 2061.51,1218.29 2062.09,1218.29 2062.68,1218.29 2063.27,1218.29 2063.85,1218.29 2064.44,1218.29 2065.02,1218.29 2065.61,1218.29 2066.2,1218.29 2066.78,1218.29 2067.37,1218.29 2067.96,1218.29 2068.54,1218.29 2069.13,1218.29 2069.72,1218.29 2070.3,1218.29 2070.89,1218.29 2071.48,1218.29 2072.06,1218.29 2072.65,1218.29 2073.23,1218.29 2073.82,1218.29 2074.41,1218.29 2074.99,1218.29 2075.58,1218.29 2076.17,1218.29 2076.75,1218.29 2077.34,1218.29 2077.93,1218.29 2078.51,1218.29 2079.1,1218.29 2079.68,1218.29 2080.27,1218.29 2080.86,1218.29 2081.44,1218.29 2082.03,1218.29 2082.62,1218.29 2083.2,1218.29 2083.79,1218.29 2084.38,1218.29 2084.96,1218.29 2085.55,1218.29 2086.14,1218.29 2086.72,1218.29 2087.31,1218.29 2087.89,1218.29 2088.48,1218.29 2089.07,1218.29 2089.65,1218.29 2090.24,1218.29 2090.83,1218.29 2091.41,1218.29 2092,1218.29 2092.59,1218.29 2093.17,1218.29 2093.76,1218.29 2094.35,1218.29 2094.93,1218.29 2095.52,1218.29 2096.1,1218.29 2096.69,1218.29 2097.28,1218.29 2097.86,1218.29 2098.45,1218.29 2099.04,1218.29 2099.62,1218.29 2100.21,1218.29 2100.8,1218.29 2101.38,1218.29 2101.97,1218.29 2102.55,1218.29 2103.14,1218.29 2103.73,1218.29 2104.31,1218.29 2104.9,1218.29 2105.49,1218.29 2106.07,1218.29 2106.66,1218.29 2107.25,1218.29 2107.83,1218.29 2108.42,1218.29 2109.01,1218.29 2109.59,1218.29 2110.18,1218.29 2110.76,1218.29 2111.35,1218.29 2111.94,1218.29 2112.52,1218.29 2113.11,1218.29 2113.7,1218.29 2114.28,1218.29 2114.87,1218.29 2115.46,1218.29 2116.04,1218.29 2116.63,1218.29 2117.22,1218.29 2117.8,1218.29 2118.39,1218.29 2118.97,1218.29 2119.56,1218.29 2120.15,1218.29 2120.73,1218.29 2121.32,1218.29 2121.91,1218.29 2122.49,1218.29 2123.08,1218.29 2123.67,1218.29 2124.25,1218.29 2124.84,1218.29 2125.42,1218.29 2126.01,1218.29 2126.6,1218.29 2127.18,1218.29 2127.77,1218.29 2128.36,1218.29 2128.94,1218.29 2129.53,1218.29 2130.12,1218.29 2130.7,1218.29 2131.29,1218.29 2131.88,1218.29 2132.46,1218.29 2133.05,1218.29 2133.63,1218.29 2134.22,1218.29 2134.81,1218.29 2135.39,1218.29 2135.98,1218.29 2136.57,1218.29 2137.15,1218.29 2137.74,1218.29 2138.33,1218.29 2138.91,1218.29 2139.5,1218.29 2140.09,1218.29 2140.67,1218.29 2141.26,1218.29 2141.84,1218.29 2142.43,1218.29 2143.02,1218.29 2143.6,1218.29 2144.19,1218.29 2144.78,1218.29 2145.36,1218.29 2145.95,1218.29 2146.54,1218.29 2147.12,1218.29 2147.71,1218.29 2148.3,1218.29 2148.88,1218.29 2149.47,1218.29 2150.05,1218.29 2150.64,1218.29 2151.23,1218.29 2151.81,1218.29 2152.4,1218.29 2152.99,1218.29 2153.57,1218.29 2154.16,1218.29 2154.75,1218.29 2155.33,1218.29 2155.92,1218.29 2156.5,1218.29 2157.09,1218.29 2157.68,1218.29 2158.26,1218.29 \"/>\n<path clip-path=\"url(#clip952)\" d=\"M986.025 1218.03 L986.612 1218.03 L987.198 1218.03 L987.785 1218.03 L988.371 1218.03 L988.957 1218.03 L989.544 1218.03 L990.13 1218.03 L990.717 1218.03 L991.303 1218.03 L991.889 1218.03 L992.476 1218.03 L993.062 1218.03 L993.649 1218.03 L994.235 1218.03 L994.822 1218.03 L995.408 1218.03 L995.994 1218.03 L996.581 1218.03 L997.167 1218.03 L997.754 1218.03 L998.34 1218.03 L998.926 1218.03 L999.513 1218.03 L1000.1 1218.03 L1000.69 1218.03 L1001.27 1218.03 L1001.86 1218.03 L1002.44 1218.03 L1003.03 1218.03 L1003.62 1218.03 L1004.2 1218.03 L1004.79 1218.03 L1005.38 1218.03 L1005.96 1218.03 L1006.55 1218.03 L1007.14 1218.03 L1007.72 1218.03 L1008.31 1218.03 L1008.9 1218.03 L1009.48 1218.03 L1010.07 1218.03 L1010.65 1218.03 L1011.24 1218.03 L1011.83 1218.03 L1012.41 1218.03 L1013 1218.03 L1013.59 1218.03 L1014.17 1218.03 L1014.76 1218.03 L1015.35 1218.03 L1015.93 1218.03 L1016.52 1218.03 L1017.11 1218.03 L1017.69 1218.03 L1018.28 1218.03 L1018.86 1218.03 L1019.45 1218.03 L1020.04 1218.03 L1020.62 1218.03 L1021.21 1218.03 L1021.8 1218.03 L1022.38 1218.03 L1022.97 1218.03 L1023.56 1218.03 L1024.14 1218.03 L1024.73 1218.03 L1025.32 1218.03 L1025.9 1218.03 L1026.49 1218.03 L1027.07 1218.03 L1027.66 1218.03 L1028.25 1218.03 L1028.83 1218.03 L1029.42 1218.03 L1030.01 1218.03 L1030.59 1218.03 L1031.18 1218.03 L1031.77 1218.03 L1032.35 1218.03 L1032.94 1218.03 L1033.52 1218.03 L1034.11 1218.03 L1034.7 1218.03 L1035.28 1218.03 L1035.87 1218.03 L1036.46 1218.03 L1037.04 1218.03 L1037.63 1218.03 L1038.22 1218.03 L1038.8 1218.03 L1039.39 1218.03 L1039.98 1218.03 L1040.56 1218.03 L1041.15 1218.03 L1041.73 1218.03 L1042.32 1218.03 L1042.91 1218.03 L1043.49 1218.03 L1044.08 1218.03 L1044.67 1218.03 L1045.25 1218.03 L1045.84 1218.03 L1046.43 1218.03 L1047.01 1218.03 L1047.6 1218.03 L1048.19 1218.03 L1048.77 1218.03 L1049.36 1218.03 L1049.94 1218.03 L1050.53 1218.03 L1051.12 1218.03 L1051.7 1218.03 L1052.29 1218.03 L1052.88 1218.03 L1053.46 1218.03 L1054.05 1218.03 L1054.64 1218.03 L1055.22 1218.03 L1055.81 1218.03 L1056.39 1218.03 L1056.98 1218.03 L1057.57 1218.03 L1058.15 1218.03 L1058.74 1218.03 L1059.33 1218.03 L1059.91 1218.03 L1060.5 1218.03 L1061.09 1218.03 L1061.67 1218.03 L1062.26 1218.03 L1062.85 1218.03 L1063.43 1218.03 L1064.02 1218.03 L1064.6 1218.03 L1065.19 1218.03 L1065.78 1218.03 L1066.36 1218.03 L1066.95 1218.03 L1067.54 1218.03 L1068.12 1218.03 L1068.71 1218.03 L1069.3 1218.03 L1069.88 1218.03 L1070.47 1218.03 L1071.06 1218.03 L1071.64 1218.03 L1072.23 1218.03 L1072.81 1218.03 L1073.4 1218.03 L1073.99 1218.03 L1074.57 1218.03 L1075.16 1218.03 L1075.75 1218.03 L1076.33 1218.03 L1076.92 1218.03 L1077.51 1218.03 L1078.09 1218.03 L1078.68 1218.03 L1079.26 1218.03 L1079.85 1218.03 L1080.44 1218.03 L1081.02 1218.03 L1081.61 1218.03 L1082.2 1218.03 L1082.78 1218.03 L1083.37 1218.03 L1083.96 1218.03 L1084.54 1218.03 L1085.13 1218.03 L1085.72 1218.03 L1086.3 1218.03 L1086.89 1218.03 L1087.47 1218.03 L1088.06 1218.03 L1088.65 1218.03 L1089.23 1218.03 L1089.82 1218.03 L1090.41 1218.03 L1090.99 1218.03 L1091.58 1218.03 L1092.17 1218.03 L1092.75 1218.03 L1093.34 1218.03 L1093.93 1218.03 L1094.51 1218.03 L1095.1 1218.03 L1095.68 1218.03 L1096.27 1218.03 L1096.86 1218.03 L1097.44 1218.03 L1098.03 1218.03 L1098.62 1218.03 L1099.2 1218.03 L1099.79 1218.03 L1100.38 1218.03 L1100.96 1218.03 L1101.55 1218.03 L1102.14 1218.03 L1102.72 1218.03 L1103.31 1218.03 L1103.89 1218.03 L1104.48 1218.03 L1105.07 1218.03 L1105.65 1218.03 L1106.24 1218.03 L1106.83 1218.03 L1107.41 1218.03 L1108 1218.03 L1108.59 1218.03 L1109.17 1218.03 L1109.76 1218.03 L1110.34 1218.03 L1110.93 1218.03 L1111.52 1218.03 L1112.1 1218.03 L1112.69 1218.03 L1113.28 1218.03 L1113.86 1218.03 L1114.45 1218.03 L1115.04 1218.03 L1115.62 1218.03 L1116.21 1218.03 L1116.8 1218.03 L1117.38 1218.03 L1117.97 1218.03 L1118.55 1218.03 L1119.14 1218.03 L1119.73 1218.03 L1120.31 1218.03 L1120.9 1218.03 L1121.49 1218.03 L1122.07 1218.03 L1122.66 1218.03 L1123.25 1218.03 L1123.83 1218.03 L1124.42 1218.03 L1125.01 1218.03 L1125.59 1218.03 L1126.18 1218.03 L1126.76 1218.03 L1127.35 1218.03 L1127.94 1218.03 L1128.52 1218.03 L1129.11 1218.03 L1129.7 1218.03 L1130.28 1218.03 L1130.87 1218.03 L1131.46 1218.03 L1132.04 1218.03 L1132.63 1218.03 L1133.21 1218.03 L1133.8 1218.03 L1134.39 1218.03 L1134.97 1218.03 L1135.56 1218.03 L1136.15 1218.03 L1136.73 1218.03 L1137.32 1218.03 L1137.91 1218.03 L1138.49 1218.03 L1139.08 1218.03 L1139.67 1218.03 L1140.25 1218.03 L1140.84 1218.03 L1141.42 1218.03 L1142.01 1218.03 L1142.6 1218.03 L1143.18 1218.03 L1143.77 1218.03 L1144.36 1218.03 L1144.94 1218.03 L1145.53 1218.03 L1146.12 1218.03 L1146.7 1218.03 L1147.29 1218.03 L1147.88 1218.03 L1148.46 1218.03 L1149.05 1218.03 L1149.63 1218.03 L1150.22 1218.03 L1150.81 1218.03 L1151.39 1218.03 L1151.98 1218.03 L1152.57 1218.03 L1153.15 1218.03 L1153.74 1218.03 L1154.33 1218.03 L1154.91 1218.03 L1155.5 1218.03 L1156.09 1218.03 L1156.67 1218.03 L1157.26 1218.03 L1157.84 1218.03 L1158.43 1218.03 L1159.02 1218.03 L1159.6 1218.03 L1160.19 1218.03 L1160.78 1218.03 L1161.36 1218.03 L1161.95 1218.03 L1162.54 1218.03 L1163.12 1218.03 L1163.71 1218.03 L1164.29 1218.03 L1164.88 1218.03 L1165.47 1218.03 L1166.05 1218.03 L1166.64 1218.03 L1167.23 1218.03 L1167.81 1218.03 L1168.4 1218.03 L1168.99 1218.03 L1169.57 1218.03 L1170.16 1218.03 L1170.75 1218.03 L1171.33 1218.03 L1171.92 1218.03 L1172.5 1218.03 L1173.09 1218.03 L1173.68 1218.03 L1174.26 1218.03 L1174.85 1218.03 L1175.44 1218.03 L1176.02 1218.03 L1176.61 1218.03 L1177.2 1218.03 L1177.78 1218.03 L1178.37 1218.03 L1178.96 1218.03 L1179.54 1218.03 L1180.13 1218.03 L1180.71 1218.03 L1181.3 1218.03 L1181.89 1218.03 L1182.47 1218.03 L1183.06 1218.03 L1183.65 1218.03 L1184.23 1218.03 L1184.82 1218.03 L1185.41 1218.03 L1185.99 1218.03 L1186.58 1218.03 L1187.16 1218.03 L1187.75 1218.03 L1188.34 1218.03 L1188.92 1218.03 L1189.51 1218.03 L1190.1 1218.03 L1190.68 1218.03 L1191.27 1218.03 L1191.86 1218.03 L1192.44 1218.03 L1193.03 1218.03 L1193.62 1218.03 L1194.2 1218.03 L1194.79 1218.03 L1195.37 1218.03 L1195.96 1218.03 L1196.55 1218.03 L1197.13 1218.03 L1197.72 1218.03 L1198.31 1218.03 L1198.89 1218.03 L1199.48 1218.03 L1200.07 1218.03 L1200.65 1218.03 L1201.24 1218.03 L1201.83 1218.03 L1202.41 1218.03 L1203 1218.03 L1203.58 1218.03 L1204.17 1218.03 L1204.76 1218.03 L1205.34 1218.03 L1205.93 1218.03 L1206.52 1218.03 L1207.1 1218.03 L1207.69 1218.03 L1208.28 1218.03 L1208.86 1218.03 L1209.45 1218.03 L1210.03 1218.03 L1210.62 1218.03 L1211.21 1218.03 L1211.79 1218.03 L1212.38 1218.03 L1212.97 1218.03 L1213.55 1218.03 L1214.14 1218.03 L1214.73 1218.03 L1215.31 1218.03 L1215.9 1218.03 L1216.49 1218.03 L1217.07 1218.03 L1217.66 1218.03 L1218.24 1218.03 L1218.83 1218.03 L1219.42 1218.03 L1220 1218.03 L1220.59 1218.03 L1221.18 1218.03 L1221.76 1218.03 L1222.35 1218.03 L1222.94 1218.03 L1223.52 1218.03 L1224.11 1218.03 L1224.7 1218.03 L1225.28 1218.03 L1225.87 1218.03 L1226.45 1218.03 L1227.04 1218.03 L1227.63 1218.03 L1228.21 1218.03 L1228.8 1218.03 L1229.39 1218.03 L1229.97 1218.03 L1230.56 1218.03 L1231.15 1218.03 L1231.73 1218.03 L1232.32 1218.03 L1232.91 1218.03 L1233.49 1218.03 L1234.08 1218.03 L1234.66 1218.03 L1235.25 1218.03 L1235.84 1218.03 L1236.42 1218.03 L1237.01 1218.03 L1237.6 1218.03 L1238.18 1218.03 L1238.77 1218.03 L1239.36 1218.03 L1239.94 1218.03 L1240.53 1218.03 L1241.11 1218.03 L1241.7 1218.03 L1242.29 1218.03 L1242.87 1218.03 L1243.46 1218.03 L1244.05 1218.03 L1244.63 1218.03 L1245.22 1218.03 L1245.81 1218.03 L1246.39 1218.03 L1246.98 1218.03 L1247.57 1218.03 L1248.15 1218.03 L1248.74 1218.03 L1249.32 1218.03 L1249.91 1218.03 L1250.5 1218.03 L1251.08 1218.03 L1251.67 1218.03 L1252.26 1218.03 L1252.84 1218.03 L1253.43 1218.03 L1254.02 1218.03 L1254.6 1218.03 L1255.19 1218.03 L1255.78 1218.03 L1256.36 1218.03 L1256.95 1218.03 L1257.53 1218.03 L1258.12 1218.03 L1258.71 1218.03 L1259.29 1218.03 L1259.88 1218.03 L1260.47 1218.03 L1261.05 1218.03 L1261.64 1218.03 L1262.23 1218.03 L1262.81 1218.03 L1263.4 1218.03 L1263.98 1218.03 L1264.57 1218.03 L1265.16 1218.03 L1265.74 1218.03 L1266.33 1218.03 L1266.92 1218.03 L1267.5 1218.03 L1268.09 1218.03 L1268.68 1218.03 L1269.26 1218.03 L1269.85 1218.03 L1270.44 1218.03 L1271.02 1218.03 L1271.61 1218.03 L1272.19 1218.03 L1272.78 1218.03 L1273.37 1218.03 L1273.95 1218.03 L1274.54 1218.03 L1275.13 1218.03 L1275.71 1218.03 L1276.3 1218.03 L1276.89 1218.03 L1277.47 1218.03 L1278.06 1218.03 L1278.65 1218.03 L1279.23 1218.03 L1279.82 1218.03 L1280.4 1218.03 L1280.99 1218.03 L1281.58 1218.03 L1282.16 1218.03 L1282.75 1218.03 L1283.34 1218.03 L1283.92 1218.03 L1284.51 1218.03 L1285.1 1218.03 L1285.68 1218.03 L1286.27 1218.03 L1286.86 1218.03 L1287.44 1218.03 L1288.03 1218.03 L1288.61 1218.03 L1289.2 1218.03 L1289.79 1218.03 L1290.37 1218.03 L1290.96 1218.03 L1291.55 1218.03 L1292.13 1218.03 L1292.72 1218.03 L1293.31 1218.03 L1293.89 1218.03 L1294.48 1218.03 L1295.06 1218.03 L1295.65 1218.03 L1296.24 1218.03 L1296.82 1218.03 L1297.41 1218.03 L1298 1218.03 L1298.58 1218.03 L1299.17 1218.03 L1299.76 1218.03 L1300.34 1218.03 L1300.93 1218.03 L1301.52 1218.03 L1302.1 1218.03 L1302.69 1218.03 L1303.27 1218.03 L1303.86 1218.03 L1304.45 1218.03 L1305.03 1218.03 L1305.62 1218.03 L1306.21 1218.03 L1306.79 1218.03 L1307.38 1218.03 L1307.97 1218.03 L1308.55 1218.03 L1309.14 1218.03 L1309.73 1218.03 L1310.31 1218.03 L1310.9 1218.03 L1311.48 1218.03 L1312.07 1218.03 L1312.66 1218.03 L1313.24 1218.03 L1313.83 1218.03 L1314.42 1218.03 L1315 1218.03 L1315.59 1218.03 L1316.18 1218.03 L1316.76 1218.03 L1317.35 1218.03 L1317.93 1218.03 L1318.52 1218.03 L1319.11 1218.03 L1319.69 1218.03 L1320.28 1218.03 L1320.87 1218.03 L1321.45 1218.03 L1322.04 1218.03 L1322.63 1218.03 L1323.21 1218.03 L1323.8 1218.03 L1324.39 1218.03 L1324.97 1218.03 L1325.56 1218.03 L1326.14 1218.03 L1326.73 1218.03 L1327.32 1218.03 L1327.9 1218.03 L1328.49 1218.03 L1329.08 1218.03 L1329.66 1218.03 L1330.25 1218.03 L1330.84 1218.03 L1331.42 1218.03 L1332.01 1218.03 L1332.6 1218.03 L1333.18 1218.03 L1333.77 1218.03 L1334.35 1218.03 L1334.94 1218.03 L1335.53 1218.03 L1336.11 1218.03 L1336.7 1218.03 L1337.29 1218.03 L1337.87 1218.03 L1338.46 1218.03 L1339.05 1218.03 L1339.63 1218.03 L1340.22 1218.03 L1340.8 1218.03 L1341.39 1218.03 L1341.98 1218.03 L1342.56 1218.03 L1343.15 1218.03 L1343.74 1218.03 L1344.32 1218.03 L1344.91 1218.03 L1345.5 1218.03 L1346.08 1218.03 L1346.67 1218.03 L1347.26 1218.03 L1347.84 1218.03 L1348.43 1218.03 L1349.01 1218.03 L1349.6 1218.03 L1350.19 1218.03 L1350.77 1218.03 L1351.36 1218.03 L1351.95 1218.03 L1352.53 1218.03 L1353.12 1218.03 L1353.71 1218.03 L1354.29 1218.03 L1354.88 1218.03 L1355.47 1218.03 L1356.05 1218.03 L1356.64 1218.03 L1357.22 1218.03 L1357.81 1218.03 L1358.4 1218.03 L1358.98 1218.03 L1359.57 1218.03 L1360.16 1218.03 L1360.74 1218.03 L1361.33 1218.03 L1361.92 1218.03 L1362.5 1218.03 L1363.09 1218.03 L1363.68 1218.03 L1364.26 1218.03 L1364.85 1218.03 L1365.43 1218.03 L1366.02 1218.03 L1366.61 1218.03 L1367.19 1218.03 L1367.78 1218.03 L1368.37 1218.03 L1368.95 1218.03 L1369.54 1218.03 L1370.13 1218.03 L1370.71 1218.03 L1371.3 1218.03 L1371.88 1218.03 L1372.47 1218.03 L1373.06 1218.03 L1373.64 1218.03 L1374.23 1218.03 L1374.82 1218.03 L1375.4 1218.03 L1375.99 1218.03 L1376.58 1218.03 L1377.16 1218.03 L1377.75 1218.03 L1378.34 1218.03 L1378.92 1218.03 L1379.51 1218.03 L1380.09 1218.03 L1380.68 1218.03 L1381.27 1218.03 L1381.85 1218.03 L1382.44 1218.03 L1383.03 1218.03 L1383.61 1218.03 L1384.2 1218.03 L1384.79 1218.03 L1385.37 1218.03 L1385.96 1218.03 L1386.55 1218.03 L1387.13 1218.03 L1387.72 1218.03 L1388.3 1218.03 L1388.89 1218.03 L1389.48 1218.03 L1390.06 1218.03 L1390.65 1218.03 L1391.24 1218.03 L1391.82 1218.03 L1392.41 1218.03 L1393 1218.03 L1393.58 1218.03 L1394.17 1218.03 L1394.75 1218.03 L1395.34 1218.03 L1395.93 1218.03 L1396.51 1218.03 L1397.1 1218.03 L1397.69 1218.03 L1398.27 1218.03 L1398.86 1218.03 L1399.45 1218.03 L1400.03 1218.03 L1400.62 1218.03 L1401.21 1218.03 L1401.79 1218.03 L1402.38 1218.03 L1402.96 1218.03 L1403.55 1218.03 L1404.14 1218.03 L1404.72 1218.03 L1405.31 1218.03 L1405.9 1218.03 L1406.48 1218.03 L1407.07 1218.03 L1407.66 1218.03 L1408.24 1218.03 L1408.83 1218.03 L1409.42 1218.03 L1410 1218.03 L1410.59 1218.03 L1411.17 1218.03 L1411.76 1218.03 L1412.35 1218.03 L1412.93 1218.03 L1413.52 1218.03 L1414.11 1218.03 L1414.69 1218.03 L1415.28 1218.03 L1415.87 1218.03 L1416.45 1218.03 L1417.04 1218.03 L1417.63 1218.03 L1418.21 1218.03 L1418.8 1218.03 L1419.38 1218.03 L1419.97 1218.03 L1420.56 1218.03 L1421.14 1218.03 L1421.73 1218.03 L1422.32 1218.03 L1422.9 1218.03 L1423.49 1218.03 L1424.08 1218.03 L1424.66 1218.03 L1425.25 1218.03 L1425.83 1218.03 L1426.42 1218.03 L1427.01 1218.03 L1427.59 1218.03 L1428.18 1218.03 L1428.77 1218.03 L1429.35 1218.03 L1429.94 1218.03 L1430.53 1218.03 L1431.11 1218.03 L1431.7 1218.03 L1432.29 1218.03 L1432.87 1218.03 L1433.46 1218.03 L1434.04 1218.03 L1434.63 1218.03 L1435.22 1218.03 L1435.8 1218.03 L1436.39 1218.03 L1436.98 1218.03 L1437.56 1218.03 L1438.15 1218.03 L1438.74 1218.03 L1439.32 1218.03 L1439.91 1218.03 L1440.5 1218.03 L1441.08 1218.03 L1441.67 1218.03 L1442.25 1218.03 L1442.84 1218.03 L1443.43 1218.03 L1444.01 1218.03 L1444.6 1218.03 L1445.19 1218.03 L1445.77 1218.03 L1446.36 1218.03 L1446.95 1218.03 L1447.53 1218.03 L1448.12 1218.03 L1448.7 1218.03 L1449.29 1218.03 L1449.88 1218.03 L1450.46 1218.03 L1451.05 1218.03 L1451.64 1218.03 L1452.22 1218.03 L1452.81 1218.03 L1453.4 1218.03 L1453.98 1218.03 L1454.57 1218.03 L1455.16 1218.03 L1455.74 1218.03 L1456.33 1218.03 L1456.91 1218.03 L1457.5 1218.03 L1458.09 1218.03 L1458.67 1218.03 L1459.26 1218.03 L1459.85 1218.03 L1460.43 1218.03 L1461.02 1218.03 L1461.61 1218.03 L1462.19 1218.03 L1462.78 1218.03 L1463.37 1218.03 L1463.95 1218.03 L1464.54 1218.03 L1465.12 1218.03 L1465.71 1218.03 L1466.3 1218.03 L1466.88 1218.03 L1467.47 1218.03 L1468.06 1218.03 L1468.64 1218.03 L1469.23 1218.03 L1469.82 1218.03 L1470.4 1218.03 L1470.99 1218.03 L1471.57 1218.03 L1472.16 1218.03 L1472.75 1218.03 L1473.33 1218.03 L1473.92 1218.03 L1474.51 1218.03 L1475.09 1218.03 L1475.68 1218.03 L1476.27 1218.03 L1476.85 1218.03 L1477.44 1218.03 L1478.03 1218.03 L1478.61 1218.03 L1479.2 1218.03 L1479.78 1218.03 L1480.37 1218.03 L1480.96 1218.03 L1481.54 1218.03 L1482.13 1218.03 L1482.72 1218.03 L1483.3 1218.03 L1483.89 1218.03 L1484.48 1218.03 L1485.06 1218.03 L1485.65 1218.03 L1486.24 1218.03 L1486.82 1218.03 L1487.41 1218.03 L1487.99 1218.03 L1488.58 1218.03 L1489.17 1218.03 L1489.75 1218.03 L1490.34 1218.03 L1490.93 1218.03 L1491.51 1218.03 L1492.1 1218.03 L1492.69 1218.03 L1493.27 1218.03 L1493.86 1218.03 L1494.45 1218.03 L1495.03 1218.03 L1495.62 1218.03 L1496.2 1218.03 L1496.79 1218.03 L1497.38 1218.03 L1497.96 1218.03 L1498.55 1218.03 L1499.14 1218.03 L1499.72 1218.03 L1500.31 1218.03 L1500.9 1218.03 L1501.48 1218.03 L1502.07 1218.03 L1502.65 1218.03 L1503.24 1218.03 L1503.83 1218.03 L1504.41 1218.03 L1505 1218.03 L1505.59 1218.03 L1506.17 1218.03 L1506.76 1218.03 L1507.35 1218.03 L1507.93 1218.03 L1508.52 1218.03 L1509.11 1218.03 L1509.69 1218.03 L1510.28 1218.03 L1510.86 1218.03 L1511.45 1218.03 L1512.04 1218.03 L1512.62 1218.03 L1513.21 1218.03 L1513.8 1218.03 L1514.38 1218.03 L1514.97 1218.03 L1515.56 1218.03 L1516.14 1218.03 L1516.73 1218.03 L1517.32 1218.03 L1517.9 1218.03 L1518.49 1218.03 L1519.07 1218.03 L1519.66 1218.03 L1520.25 1218.03 L1520.83 1218.03 L1521.42 1218.03 L1522.01 1218.03 L1522.59 1218.03 L1523.18 1218.03 L1523.77 1218.03 L1524.35 1218.03 L1524.94 1218.03 L1525.52 1218.03 L1526.11 1218.03 L1526.7 1218.03 L1527.28 1218.03 L1527.87 1218.03 L1528.46 1218.03 L1529.04 1218.03 L1529.63 1218.03 L1530.22 1218.03 L1530.8 1218.03 L1531.39 1218.03 L1531.98 1218.03 L1532.56 1218.03 L1533.15 1218.03 L1533.73 1218.03 L1534.32 1218.03 L1534.91 1218.03 L1535.49 1218.03 L1536.08 1218.03 L1536.67 1218.03 L1537.25 1218.03 L1537.84 1218.03 L1538.43 1218.03 L1539.01 1218.03 L1539.6 1218.03 L1540.19 1218.03 L1540.77 1218.03 L1541.36 1218.03 L1541.94 1218.03 L1542.53 1218.03 L1543.12 1218.03 L1543.7 1218.03 L1544.29 1218.03 L1544.88 1218.03 L1545.46 1218.03 L1546.05 1218.03 L1546.64 1218.03 L1547.22 1218.03 L1547.81 1218.03 L1548.4 1218.03 L1548.98 1218.03 L1549.57 1218.03 L1550.15 1218.03 L1550.74 1218.03 L1551.33 1218.03 L1551.91 1218.03 L1552.5 1218.03 L1553.09 1218.03 L1553.67 1218.03 L1554.26 1218.03 L1554.85 1218.03 L1555.43 1218.03 L1556.02 1218.03 L1556.6 1218.03 L1557.19 1218.03 L1557.78 1218.03 L1558.36 1218.03 L1558.95 1218.03 L1559.54 1218.03 L1560.12 1218.03 L1560.71 1218.03 L1561.3 1218.03 L1561.88 1218.03 L1562.47 1218.03 L1563.06 1218.03 L1563.64 1218.03 L1564.23 1218.03 L1564.81 1218.03 L1565.4 1218.03 L1565.99 1218.03 L1566.57 1218.03 L1567.16 1218.03 L1567.75 1218.03 L1568.33 1218.03 L1568.92 1218.03 L1569.51 1218.03 L1570.09 1218.03 L1570.68 1218.03 L1571.27 1218.03 L1571.85 1218.03 L1572.44 1218.03 L1573.02 1218.03 L1573.61 1218.03 L1574.2 1218.03 L1574.78 1218.03 L1575.37 1218.03 L1575.96 1218.03 L1576.54 1218.03 L1577.13 1218.03 L1577.72 1218.03 L1578.3 1218.03 L1578.89 1218.03 L1579.47 1218.03 L1580.06 1218.03 L1580.65 1218.03 L1581.23 1218.03 L1581.82 1218.03 L1582.41 1218.03 L1582.99 1218.03 L1583.58 1218.03 L1584.17 1218.03 L1584.75 1218.03 L1585.34 1218.03 L1585.93 1218.03 L1586.51 1218.03 L1587.1 1218.03 L1587.68 1218.03 L1588.27 1218.03 L1588.86 1218.03 L1589.44 1218.03 L1590.03 1218.03 L1590.62 1218.03 L1591.2 1218.03 L1591.79 1218.03 L1592.38 1218.03 L1592.96 1218.03 L1593.55 1218.03 L1594.14 1218.03 L1594.72 1218.03 L1595.31 1218.03 L1595.89 1218.03 L1596.48 1218.03 L1597.07 1218.03 L1597.65 1218.03 L1598.24 1218.03 L1598.83 1218.03 L1599.41 1218.03 L1600 1218.03 L1600.59 1218.03 L1601.17 1218.03 L1601.76 1218.03 L1602.34 1218.03 L1602.93 1218.03 L1603.52 1218.03 L1604.1 1218.03 L1604.69 1218.03 L1605.28 1218.03 L1605.86 1218.03 L1606.45 1218.03 L1607.04 1218.03 L1607.62 1218.03 L1608.21 1218.03 L1608.8 1218.03 L1609.38 1218.03 L1609.97 1218.03 L1610.55 1218.03 L1611.14 1218.03 L1611.73 1218.03 L1612.31 1218.03 L1612.9 1218.03 L1613.49 1218.03 L1614.07 1218.03 L1614.66 1218.03 L1615.25 1218.03 L1615.83 1218.03 L1616.42 1218.03 L1617.01 1218.03 L1617.59 1218.03 L1618.18 1218.03 L1618.76 1218.03 L1619.35 1218.03 L1619.94 1218.03 L1620.52 1218.03 L1621.11 1218.03 L1621.7 1218.03 L1622.28 1218.03 L1622.87 1218.03 L1623.46 1218.03 L1624.04 1218.03 L1624.63 1218.03 L1625.22 1218.03 L1625.8 1218.03 L1626.39 1218.03 L1626.97 1218.03 L1627.56 1218.03 L1628.15 1218.03 L1628.73 1218.03 L1629.32 1218.03 L1629.91 1218.03 L1630.49 1218.03 L1631.08 1218.03 L1631.67 1218.03 L1632.25 1218.03 L1632.84 1218.03 L1633.42 1218.03 L1634.01 1218.03 L1634.6 1218.03 L1635.18 1218.03 L1635.77 1218.03 L1636.36 1218.03 L1636.94 1218.03 L1637.53 1218.03 L1638.12 1218.03 L1638.7 1218.03 L1639.29 1218.03 L1639.88 1218.03 L1640.46 1218.03 L1641.05 1218.03 L1641.63 1218.03 L1642.22 1218.03 L1642.81 1218.03 L1643.39 1218.03 L1643.98 1218.03 L1644.57 1218.03 L1645.15 1218.03 L1645.74 1218.03 L1646.33 1218.03 L1646.91 1218.03 L1647.5 1218.03 L1648.09 1218.03 L1648.67 1218.03 L1649.26 1218.03 L1649.84 1218.03 L1650.43 1218.03 L1651.02 1218.03 L1651.6 1218.03 L1652.19 1218.03 L1652.78 1218.03 L1653.36 1218.03 L1653.95 1218.03 L1654.54 1218.03 L1655.12 1218.03 L1655.71 1218.03 L1656.29 1218.03 L1656.88 1218.03 L1657.47 1218.03 L1658.05 1218.03 L1658.64 1218.03 L1659.23 1218.03 L1659.81 1218.03 L1660.4 1218.03 L1660.99 1218.03 L1661.57 1218.03 L1662.16 1218.03 L1662.75 1218.03 L1663.33 1218.03 L1663.92 1218.03 L1664.5 1218.03 L1665.09 1218.03 L1665.68 1218.03 L1666.26 1218.03 L1666.85 1218.03 L1667.44 1218.03 L1668.02 1218.03 L1668.61 1218.03 L1669.2 1218.03 L1669.78 1218.03 L1670.37 1218.03 L1670.96 1218.03 L1671.54 1218.03 L1672.13 1218.03 L1672.71 1218.03 L1673.3 1218.03 L1673.89 1218.03 L1674.47 1218.03 L1675.06 1218.03 L1675.65 1218.03 L1676.23 1218.03 L1676.82 1218.03 L1677.41 1218.03 L1677.99 1218.03 L1678.58 1218.03 L1679.17 1218.03 L1679.75 1218.03 L1680.34 1218.03 L1680.92 1218.03 L1681.51 1218.03 L1682.1 1218.03 L1682.68 1218.03 L1683.27 1218.03 L1683.86 1218.03 L1684.44 1218.03 L1685.03 1218.03 L1685.62 1218.03 L1686.2 1218.03 L1686.79 1218.03 L1687.37 1218.03 L1687.96 1218.03 L1688.55 1218.03 L1689.13 1218.03 L1689.72 1218.03 L1690.31 1218.03 L1690.89 1218.03 L1691.48 1218.03 L1692.07 1218.03 L1692.65 1218.03 L1693.24 1218.03 L1693.83 1218.03 L1694.41 1218.03 L1695 1218.03 L1695.58 1218.03 L1696.17 1218.03 L1696.76 1218.03 L1697.34 1218.03 L1697.93 1218.03 L1698.52 1218.03 L1699.1 1218.03 L1699.69 1218.03 L1700.28 1218.03 L1700.86 1218.03 L1701.45 1218.03 L1702.04 1218.03 L1702.62 1218.03 L1703.21 1218.03 L1703.79 1218.03 L1704.38 1218.03 L1704.97 1218.03 L1705.55 1218.03 L1706.14 1218.03 L1706.73 1218.03 L1707.31 1218.03 L1707.9 1218.03 L1708.49 1218.03 L1709.07 1218.03 L1709.66 1218.03 L1710.24 1218.03 L1710.83 1218.03 L1711.42 1218.03 L1712 1218.03 L1712.59 1218.03 L1713.18 1218.03 L1713.76 1218.03 L1714.35 1218.03 L1714.94 1218.03 L1715.52 1218.03 L1716.11 1218.03 L1716.7 1218.03 L1717.28 1218.03 L1717.87 1218.03 L1718.45 1218.03 L1719.04 1218.03 L1719.63 1218.03 L1720.21 1218.03 L1720.8 1218.03 L1721.39 1218.03 L1721.97 1218.03 L1722.56 1218.03 L1723.15 1218.03 L1723.73 1218.03 L1724.32 1218.03 L1724.91 1218.03 L1725.49 1218.03 L1726.08 1218.03 L1726.66 1218.03 L1727.25 1218.03 L1727.84 1218.03 L1728.42 1218.03 L1729.01 1218.03 L1729.6 1218.03 L1730.18 1218.03 L1730.77 1218.03 L1731.36 1218.03 L1731.94 1218.03 L1732.53 1218.03 L1733.11 1218.03 L1733.7 1218.03 L1734.29 1218.03 L1734.87 1218.03 L1735.46 1218.03 L1736.05 1218.03 L1736.63 1218.03 L1737.22 1218.03 L1737.81 1218.03 L1738.39 1218.03 L1738.98 1218.03 L1739.57 1218.03 L1740.15 1218.03 L1740.74 1218.03 L1741.32 1218.03 L1741.91 1218.03 L1742.5 1218.03 L1743.08 1218.03 L1743.67 1218.03 L1744.26 1218.03 L1744.84 1218.03 L1745.43 1218.03 L1746.02 1218.03 L1746.6 1218.03 L1747.19 1218.03 L1747.78 1218.03 L1748.36 1218.03 L1748.95 1218.03 L1749.53 1218.03 L1750.12 1218.03 L1750.71 1218.03 L1751.29 1218.03 L1751.88 1218.03 L1752.47 1218.03 L1753.05 1218.03 L1753.64 1218.03 L1754.23 1218.03 L1754.81 1218.03 L1755.4 1218.03 L1755.99 1218.03 L1756.57 1218.03 L1757.16 1218.03 L1757.74 1218.03 L1758.33 1218.03 L1758.92 1218.03 L1759.5 1218.03 L1760.09 1218.03 L1760.68 1218.03 L1761.26 1218.03 L1761.85 1218.03 L1762.44 1218.03 L1763.02 1218.03 L1763.61 1218.03 L1764.19 1218.03 L1764.78 1218.03 L1765.37 1218.03 L1765.95 1218.03 L1766.54 1218.03 L1767.13 1218.03 L1767.71 1218.03 L1768.3 1218.03 L1768.89 1218.03 L1769.47 1218.03 L1770.06 1218.03 L1770.65 1218.03 L1771.23 1218.03 L1771.82 1218.03 L1772.4 1218.03 L1772.99 1218.03 L1773.58 1218.03 L1774.16 1218.03 L1774.75 1218.03 L1775.34 1218.03 L1775.92 1218.03 L1776.51 1218.03 L1777.1 1218.03 L1777.68 1218.03 L1778.27 1218.03 L1778.86 1218.03 L1779.44 1218.03 L1780.03 1218.03 L1780.61 1218.03 L1781.2 1218.03 L1781.79 1218.03 L1782.37 1218.03 L1782.96 1218.03 L1783.55 1218.03 L1784.13 1218.03 L1784.72 1218.03 L1785.31 1218.03 L1785.89 1218.03 L1786.48 1218.03 L1787.06 1218.03 L1787.65 1218.03 L1788.24 1218.03 L1788.82 1218.03 L1789.41 1218.03 L1790 1218.03 L1790.58 1218.03 L1791.17 1218.03 L1791.76 1218.03 L1792.34 1218.03 L1792.93 1218.03 L1793.52 1218.03 L1794.1 1218.03 L1794.69 1218.03 L1795.27 1218.03 L1795.86 1218.03 L1796.45 1218.03 L1797.03 1218.03 L1797.62 1218.03 L1798.21 1218.03 L1798.79 1218.03 L1799.38 1218.03 L1799.97 1218.03 L1800.55 1218.03 L1801.14 1218.03 L1801.73 1218.03 L1802.31 1218.03 L1802.9 1218.03 L1803.48 1218.03 L1804.07 1218.03 L1804.66 1218.03 L1805.24 1218.03 L1805.83 1218.03 L1806.42 1218.03 L1807 1218.03 L1807.59 1218.03 L1808.18 1218.03 L1808.76 1218.03 L1809.35 1218.03 L1809.94 1218.03 L1810.52 1218.03 L1811.11 1218.03 L1811.69 1218.03 L1812.28 1218.03 L1812.87 1218.03 L1813.45 1218.03 L1814.04 1218.03 L1814.63 1218.03 L1815.21 1218.03 L1815.8 1218.03 L1816.39 1218.03 L1816.97 1218.03 L1817.56 1218.03 L1818.14 1218.03 L1818.73 1218.03 L1819.32 1218.03 L1819.9 1218.03 L1820.49 1218.03 L1821.08 1218.03 L1821.66 1218.03 L1822.25 1218.03 L1822.84 1218.03 L1823.42 1218.03 L1824.01 1218.03 L1824.6 1218.03 L1825.18 1218.03 L1825.77 1218.03 L1826.35 1218.03 L1826.94 1218.03 L1827.53 1218.03 L1828.11 1218.03 L1828.7 1218.03 L1829.29 1218.03 L1829.87 1218.03 L1830.46 1218.03 L1831.05 1218.03 L1831.63 1218.03 L1832.22 1218.03 L1832.81 1218.03 L1833.39 1218.03 L1833.98 1218.03 L1834.56 1218.03 L1835.15 1218.03 L1835.74 1218.03 L1836.32 1218.03 L1836.91 1218.03 L1837.5 1218.03 L1838.08 1218.03 L1838.67 1218.03 L1839.26 1218.03 L1839.84 1218.03 L1840.43 1218.03 L1841.01 1218.03 L1841.6 1218.03 L1842.19 1218.03 L1842.77 1218.03 L1843.36 1218.03 L1843.95 1218.03 L1844.53 1218.03 L1845.12 1218.03 L1845.71 1218.03 L1846.29 1218.03 L1846.88 1218.03 L1847.47 1218.03 L1848.05 1218.03 L1848.64 1218.03 L1849.22 1218.03 L1849.81 1218.03 L1850.4 1218.03 L1850.98 1218.03 L1851.57 1218.03 L1852.16 1218.03 L1852.74 1218.03 L1853.33 1218.03 L1853.92 1218.03 L1854.5 1218.03 L1855.09 1218.03 L1855.68 1218.03 L1856.26 1218.03 L1856.85 1218.03 L1857.43 1218.03 L1858.02 1218.03 L1858.61 1218.03 L1859.19 1218.03 L1859.78 1218.03 L1860.37 1218.03 L1860.95 1218.03 L1861.54 1218.03 L1862.13 1218.03 L1862.71 1218.03 L1863.3 1218.03 L1863.88 1218.03 L1864.47 1218.03 L1865.06 1218.03 L1865.64 1218.03 L1866.23 1218.03 L1866.82 1218.03 L1867.4 1218.03 L1867.99 1218.03 L1868.58 1218.03 L1869.16 1218.03 L1869.75 1218.03 L1870.34 1218.03 L1870.92 1218.03 L1871.51 1218.03 L1872.09 1218.03 L1872.68 1218.03 L1873.27 1218.03 L1873.85 1218.03 L1874.44 1218.03 L1875.03 1218.03 L1875.61 1218.03 L1876.2 1218.03 L1876.79 1218.03 L1877.37 1218.03 L1877.96 1218.03 L1878.55 1218.03 L1879.13 1218.03 L1879.72 1218.03 L1880.3 1218.03 L1880.89 1218.03 L1881.48 1218.03 L1882.06 1218.03 L1882.65 1218.03 L1883.24 1218.03 L1883.82 1218.03 L1884.41 1218.03 L1885 1218.03 L1885.58 1218.03 L1886.17 1218.03 L1886.76 1218.03 L1887.34 1218.03 L1887.93 1218.03 L1888.51 1218.03 L1889.1 1218.03 L1889.69 1218.03 L1890.27 1218.03 L1890.86 1218.03 L1891.45 1218.03 L1892.03 1218.03 L1892.62 1218.03 L1893.21 1218.03 L1893.79 1218.03 L1894.38 1218.03 L1894.96 1218.03 L1895.55 1218.03 L1896.14 1218.03 L1896.72 1218.03 L1897.31 1218.03 L1897.9 1218.03 L1898.48 1218.03 L1899.07 1218.03 L1899.66 1218.03 L1900.24 1218.03 L1900.83 1218.03 L1901.42 1218.03 L1902 1218.03 L1902.59 1218.03 L1903.17 1218.03 L1903.76 1218.03 L1904.35 1218.03 L1904.93 1218.03 L1905.52 1218.03 L1906.11 1218.03 L1906.69 1218.03 L1907.28 1218.03 L1907.87 1218.03 L1908.45 1218.03 L1909.04 1218.03 L1909.63 1218.03 L1910.21 1218.03 L1910.8 1218.03 L1911.38 1218.03 L1911.97 1218.03 L1912.56 1218.03 L1913.14 1218.03 L1913.73 1218.03 L1914.32 1218.03 L1914.9 1218.03 L1915.49 1218.03 L1916.08 1218.03 L1916.66 1218.03 L1917.25 1218.03 L1917.83 1218.03 L1918.42 1218.03 L1919.01 1218.03 L1919.59 1218.03 L1920.18 1218.03 L1920.77 1218.03 L1921.35 1218.03 L1921.94 1218.03 L1922.53 1218.03 L1923.11 1218.03 L1923.7 1218.03 L1924.29 1218.03 L1924.87 1218.03 L1925.46 1218.03 L1926.04 1218.03 L1926.63 1218.03 L1927.22 1218.03 L1927.8 1218.03 L1928.39 1218.03 L1928.98 1218.03 L1929.56 1218.03 L1930.15 1218.03 L1930.74 1218.03 L1931.32 1218.03 L1931.91 1218.03 L1932.5 1218.03 L1933.08 1218.03 L1933.67 1218.03 L1934.25 1218.03 L1934.84 1218.03 L1935.43 1218.03 L1936.01 1218.03 L1936.6 1218.03 L1937.19 1218.03 L1937.77 1218.03 L1938.36 1218.03 L1938.95 1218.03 L1939.53 1218.03 L1940.12 1218.03 L1940.71 1218.03 L1941.29 1218.03 L1941.88 1218.03 L1942.46 1218.03 L1943.05 1218.03 L1943.64 1218.03 L1944.22 1218.03 L1944.81 1218.03 L1945.4 1218.03 L1945.98 1218.03 L1946.57 1218.03 L1947.16 1218.03 L1947.74 1218.03 L1948.33 1218.03 L1948.91 1218.03 L1949.5 1218.03 L1950.09 1218.03 L1950.67 1218.03 L1951.26 1218.03 L1951.85 1218.03 L1952.43 1218.03 L1953.02 1218.03 L1953.61 1218.03 L1954.19 1218.03 L1954.78 1218.03 L1955.37 1218.03 L1955.95 1218.03 L1956.54 1218.03 L1957.12 1218.03 L1957.71 1218.03 L1958.3 1218.03 L1958.88 1218.03 L1959.47 1218.03 L1960.06 1218.03 L1960.64 1218.03 L1961.23 1218.03 L1961.82 1218.03 L1962.4 1218.03 L1962.99 1218.03 L1963.58 1218.03 L1964.16 1218.03 L1964.75 1218.03 L1965.33 1218.03 L1965.92 1218.03 L1966.51 1218.03 L1967.09 1218.03 L1967.68 1218.03 L1968.27 1218.03 L1968.85 1218.03 L1969.44 1218.03 L1970.03 1218.03 L1970.61 1218.03 L1971.2 1218.03 L1971.78 1218.03 L1972.37 1218.03 L1972.96 1218.03 L1973.54 1218.03 L1974.13 1218.03 L1974.72 1218.03 L1975.3 1218.03 L1975.89 1218.03 L1976.48 1218.03 L1977.06 1218.03 L1977.65 1218.03 L1978.24 1218.03 L1978.82 1218.03 L1979.41 1218.03 L1979.99 1218.03 L1980.58 1218.03 L1981.17 1218.03 L1981.75 1218.03 L1982.34 1218.03 L1982.93 1218.03 L1983.51 1218.03 L1984.1 1218.03 L1984.69 1218.03 L1985.27 1218.03 L1985.86 1218.03 L1986.45 1218.03 L1987.03 1218.03 L1987.62 1218.03 L1988.2 1218.03 L1988.79 1218.03 L1989.38 1218.03 L1989.96 1218.03 L1990.55 1218.03 L1991.14 1218.03 L1991.72 1218.03 L1992.31 1218.03 L1992.9 1218.03 L1993.48 1218.03 L1994.07 1218.03 L1994.65 1218.03 L1995.24 1218.03 L1995.83 1218.03 L1996.41 1218.03 L1997 1218.03 L1997.59 1218.03 L1998.17 1218.03 L1998.76 1218.03 L1999.35 1218.03 L1999.93 1218.03 L2000.52 1218.03 L2001.11 1218.03 L2001.69 1218.03 L2002.28 1218.03 L2002.86 1218.03 L2003.45 1218.03 L2004.04 1218.03 L2004.62 1218.03 L2005.21 1218.03 L2005.8 1218.03 L2006.38 1218.03 L2006.97 1218.03 L2007.56 1218.03 L2008.14 1218.03 L2008.73 1218.03 L2009.32 1218.03 L2009.9 1218.03 L2010.49 1218.03 L2011.07 1218.03 L2011.66 1218.03 L2012.25 1218.03 L2012.83 1218.03 L2013.42 1218.03 L2014.01 1218.03 L2014.59 1218.03 L2015.18 1218.03 L2015.77 1218.03 L2016.35 1218.03 L2016.94 1218.03 L2017.53 1218.03 L2018.11 1218.03 L2018.7 1218.03 L2019.28 1218.03 L2019.87 1218.03 L2020.46 1218.03 L2021.04 1218.03 L2021.63 1218.03 L2022.22 1218.03 L2022.8 1218.03 L2023.39 1218.03 L2023.98 1218.03 L2024.56 1218.03 L2025.15 1218.03 L2025.73 1218.03 L2026.32 1218.03 L2026.91 1218.03 L2027.49 1218.03 L2028.08 1218.03 L2028.67 1218.03 L2029.25 1218.03 L2029.84 1218.03 L2030.43 1218.03 L2031.01 1218.03 L2031.6 1218.03 L2032.19 1218.03 L2032.77 1218.03 L2033.36 1218.03 L2033.94 1218.03 L2034.53 1218.03 L2035.12 1218.03 L2035.7 1218.03 L2036.29 1218.03 L2036.88 1218.03 L2037.46 1218.03 L2038.05 1218.03 L2038.64 1218.03 L2039.22 1218.03 L2039.81 1218.03 L2040.4 1218.03 L2040.98 1218.03 L2041.57 1218.03 L2042.15 1218.03 L2042.74 1218.03 L2043.33 1218.03 L2043.91 1218.03 L2044.5 1218.03 L2045.09 1218.03 L2045.67 1218.03 L2046.26 1218.03 L2046.85 1218.03 L2047.43 1218.03 L2048.02 1218.03 L2048.6 1218.03 L2049.19 1218.03 L2049.78 1218.03 L2050.36 1218.03 L2050.95 1218.03 L2051.54 1218.03 L2052.12 1218.03 L2052.71 1218.03 L2053.3 1218.03 L2053.88 1218.03 L2054.47 1218.03 L2055.06 1218.03 L2055.64 1218.03 L2056.23 1218.03 L2056.81 1218.03 L2057.4 1218.03 L2057.99 1218.03 L2058.57 1218.03 L2059.16 1218.03 L2059.75 1218.03 L2060.33 1218.03 L2060.92 1218.03 L2061.51 1218.03 L2062.09 1218.03 L2062.68 1218.03 L2063.27 1218.03 L2063.85 1218.03 L2064.44 1218.03 L2065.02 1218.03 L2065.61 1218.03 L2066.2 1218.03 L2066.78 1218.03 L2067.37 1218.03 L2067.96 1218.03 L2068.54 1218.03 L2069.13 1218.03 L2069.72 1218.03 L2070.3 1218.03 L2070.89 1218.03 L2071.48 1218.03 L2072.06 1218.03 L2072.65 1218.03 L2073.23 1218.03 L2073.82 1218.03 L2074.41 1218.03 L2074.99 1218.03 L2075.58 1218.03 L2076.17 1218.03 L2076.75 1218.03 L2077.34 1218.03 L2077.93 1218.03 L2078.51 1218.03 L2079.1 1218.03 L2079.68 1218.03 L2080.27 1218.03 L2080.86 1218.03 L2081.44 1218.03 L2082.03 1218.03 L2082.62 1218.03 L2083.2 1218.03 L2083.79 1218.03 L2084.38 1218.03 L2084.96 1218.03 L2085.55 1218.03 L2086.14 1218.03 L2086.72 1218.03 L2087.31 1218.03 L2087.89 1218.03 L2088.48 1218.03 L2089.07 1218.03 L2089.65 1218.03 L2090.24 1218.03 L2090.83 1218.03 L2091.41 1218.03 L2092 1218.03 L2092.59 1218.03 L2093.17 1218.03 L2093.76 1218.03 L2094.35 1218.03 L2094.93 1218.03 L2095.52 1218.03 L2096.1 1218.03 L2096.69 1218.03 L2097.28 1218.03 L2097.86 1218.03 L2098.45 1218.03 L2099.04 1218.03 L2099.62 1218.03 L2100.21 1218.03 L2100.8 1218.03 L2101.38 1218.03 L2101.97 1218.03 L2102.55 1218.03 L2103.14 1218.03 L2103.73 1218.03 L2104.31 1218.03 L2104.9 1218.03 L2105.49 1218.03 L2106.07 1218.03 L2106.66 1218.03 L2107.25 1218.03 L2107.83 1218.03 L2108.42 1218.03 L2109.01 1218.03 L2109.59 1218.03 L2110.18 1218.03 L2110.76 1218.03 L2111.35 1218.03 L2111.94 1218.03 L2112.52 1218.03 L2113.11 1218.03 L2113.7 1218.03 L2114.28 1218.03 L2114.87 1218.03 L2115.46 1218.03 L2116.04 1218.03 L2116.63 1218.03 L2117.22 1218.03 L2117.8 1218.03 L2118.39 1218.03 L2118.97 1218.03 L2119.56 1218.03 L2120.15 1218.03 L2120.73 1218.03 L2121.32 1218.03 L2121.91 1218.03 L2122.49 1218.03 L2123.08 1218.03 L2123.67 1218.03 L2124.25 1218.03 L2124.84 1218.03 L2125.42 1218.03 L2126.01 1218.03 L2126.6 1218.03 L2127.18 1218.03 L2127.77 1218.03 L2128.36 1218.03 L2128.94 1218.03 L2129.53 1218.03 L2130.12 1218.03 L2130.7 1218.03 L2131.29 1218.03 L2131.88 1218.03 L2132.46 1218.03 L2133.05 1218.03 L2133.63 1218.03 L2134.22 1218.03 L2134.81 1218.03 L2135.39 1218.03 L2135.98 1218.03 L2136.57 1218.03 L2137.15 1218.03 L2137.74 1218.03 L2138.33 1218.03 L2138.91 1218.03 L2139.5 1218.03 L2140.09 1218.03 L2140.67 1218.03 L2141.26 1218.03 L2141.84 1218.03 L2142.43 1218.03 L2143.02 1218.03 L2143.6 1218.03 L2144.19 1218.03 L2144.78 1218.03 L2145.36 1218.03 L2145.95 1218.03 L2146.54 1218.03 L2147.12 1218.03 L2147.71 1218.03 L2148.3 1218.03 L2148.88 1218.03 L2149.47 1218.03 L2150.05 1218.03 L2150.64 1218.03 L2151.23 1218.03 L2151.81 1218.03 L2152.4 1218.03 L2152.99 1218.03 L2153.57 1218.03 L2154.16 1218.03 L2154.75 1218.03 L2155.33 1218.03 L2155.92 1218.03 L2156.5 1218.03 L2157.09 1218.03 L2157.68 1218.03 L2158.26 1218.03 L2158.26 1217.92 L2157.68 1217.92 L2157.09 1217.92 L2156.5 1217.92 L2155.92 1217.92 L2155.33 1217.92 L2154.75 1217.92 L2154.16 1217.92 L2153.57 1217.92 L2152.99 1217.92 L2152.4 1217.92 L2151.81 1217.92 L2151.23 1217.92 L2150.64 1217.92 L2150.05 1217.92 L2149.47 1217.92 L2148.88 1217.92 L2148.3 1217.92 L2147.71 1217.92 L2147.12 1217.92 L2146.54 1217.92 L2145.95 1217.92 L2145.36 1217.92 L2144.78 1217.92 L2144.19 1217.92 L2143.6 1217.92 L2143.02 1217.92 L2142.43 1217.92 L2141.84 1217.92 L2141.26 1217.92 L2140.67 1217.92 L2140.09 1217.92 L2139.5 1217.92 L2138.91 1217.92 L2138.33 1217.92 L2137.74 1217.92 L2137.15 1217.92 L2136.57 1217.92 L2135.98 1217.92 L2135.39 1217.92 L2134.81 1217.92 L2134.22 1217.92 L2133.63 1217.92 L2133.05 1217.92 L2132.46 1217.92 L2131.88 1217.92 L2131.29 1217.92 L2130.7 1217.92 L2130.12 1217.92 L2129.53 1217.92 L2128.94 1217.92 L2128.36 1217.92 L2127.77 1217.92 L2127.18 1217.92 L2126.6 1217.92 L2126.01 1217.92 L2125.42 1217.92 L2124.84 1217.92 L2124.25 1217.92 L2123.67 1217.92 L2123.08 1217.92 L2122.49 1217.92 L2121.91 1217.92 L2121.32 1217.92 L2120.73 1217.92 L2120.15 1217.92 L2119.56 1217.92 L2118.97 1217.92 L2118.39 1217.92 L2117.8 1217.92 L2117.22 1217.92 L2116.63 1217.92 L2116.04 1217.92 L2115.46 1217.92 L2114.87 1217.92 L2114.28 1217.92 L2113.7 1217.92 L2113.11 1217.92 L2112.52 1217.92 L2111.94 1217.92 L2111.35 1217.92 L2110.76 1217.92 L2110.18 1217.92 L2109.59 1217.92 L2109.01 1217.92 L2108.42 1217.92 L2107.83 1217.92 L2107.25 1217.92 L2106.66 1217.92 L2106.07 1217.92 L2105.49 1217.92 L2104.9 1217.92 L2104.31 1217.92 L2103.73 1217.92 L2103.14 1217.92 L2102.55 1217.92 L2101.97 1217.92 L2101.38 1217.92 L2100.8 1217.92 L2100.21 1217.92 L2099.62 1217.92 L2099.04 1217.92 L2098.45 1217.92 L2097.86 1217.92 L2097.28 1217.92 L2096.69 1217.92 L2096.1 1217.92 L2095.52 1217.92 L2094.93 1217.92 L2094.35 1217.92 L2093.76 1217.92 L2093.17 1217.92 L2092.59 1217.92 L2092 1217.92 L2091.41 1217.92 L2090.83 1217.92 L2090.24 1217.92 L2089.65 1217.92 L2089.07 1217.92 L2088.48 1217.92 L2087.89 1217.92 L2087.31 1217.92 L2086.72 1217.92 L2086.14 1217.92 L2085.55 1217.92 L2084.96 1217.92 L2084.38 1217.92 L2083.79 1217.92 L2083.2 1217.92 L2082.62 1217.92 L2082.03 1217.92 L2081.44 1217.92 L2080.86 1217.92 L2080.27 1217.92 L2079.68 1217.92 L2079.1 1217.92 L2078.51 1217.92 L2077.93 1217.92 L2077.34 1217.92 L2076.75 1217.92 L2076.17 1217.92 L2075.58 1217.92 L2074.99 1217.92 L2074.41 1217.92 L2073.82 1217.92 L2073.23 1217.92 L2072.65 1217.92 L2072.06 1217.92 L2071.48 1217.92 L2070.89 1217.92 L2070.3 1217.92 L2069.72 1217.92 L2069.13 1217.92 L2068.54 1217.92 L2067.96 1217.92 L2067.37 1217.92 L2066.78 1217.92 L2066.2 1217.92 L2065.61 1217.92 L2065.02 1217.92 L2064.44 1217.92 L2063.85 1217.92 L2063.27 1217.92 L2062.68 1217.92 L2062.09 1217.92 L2061.51 1217.92 L2060.92 1217.92 L2060.33 1217.92 L2059.75 1217.92 L2059.16 1217.92 L2058.57 1217.92 L2057.99 1217.92 L2057.4 1217.92 L2056.81 1217.92 L2056.23 1217.92 L2055.64 1217.92 L2055.06 1217.92 L2054.47 1217.92 L2053.88 1217.92 L2053.3 1217.92 L2052.71 1217.92 L2052.12 1217.92 L2051.54 1217.92 L2050.95 1217.92 L2050.36 1217.92 L2049.78 1217.92 L2049.19 1217.92 L2048.6 1217.92 L2048.02 1217.92 L2047.43 1217.92 L2046.85 1217.92 L2046.26 1217.92 L2045.67 1217.92 L2045.09 1217.92 L2044.5 1217.92 L2043.91 1217.92 L2043.33 1217.92 L2042.74 1217.92 L2042.15 1217.92 L2041.57 1217.92 L2040.98 1217.92 L2040.4 1217.92 L2039.81 1217.92 L2039.22 1217.92 L2038.64 1217.92 L2038.05 1217.92 L2037.46 1217.92 L2036.88 1217.92 L2036.29 1217.92 L2035.7 1217.92 L2035.12 1217.92 L2034.53 1217.92 L2033.94 1217.92 L2033.36 1217.92 L2032.77 1217.92 L2032.19 1217.92 L2031.6 1217.92 L2031.01 1217.92 L2030.43 1217.92 L2029.84 1217.92 L2029.25 1217.92 L2028.67 1217.92 L2028.08 1217.92 L2027.49 1217.92 L2026.91 1217.92 L2026.32 1217.92 L2025.73 1217.92 L2025.15 1217.92 L2024.56 1217.92 L2023.98 1217.92 L2023.39 1217.92 L2022.8 1217.92 L2022.22 1217.92 L2021.63 1217.92 L2021.04 1217.92 L2020.46 1217.92 L2019.87 1217.92 L2019.28 1217.92 L2018.7 1217.92 L2018.11 1217.92 L2017.53 1217.92 L2016.94 1217.92 L2016.35 1217.92 L2015.77 1217.92 L2015.18 1217.92 L2014.59 1217.92 L2014.01 1217.92 L2013.42 1217.92 L2012.83 1217.92 L2012.25 1217.92 L2011.66 1217.92 L2011.07 1217.92 L2010.49 1217.92 L2009.9 1217.92 L2009.32 1217.92 L2008.73 1217.92 L2008.14 1217.92 L2007.56 1217.92 L2006.97 1217.92 L2006.38 1217.92 L2005.8 1217.92 L2005.21 1217.92 L2004.62 1217.92 L2004.04 1217.92 L2003.45 1217.92 L2002.86 1217.92 L2002.28 1217.92 L2001.69 1217.92 L2001.11 1217.92 L2000.52 1217.92 L1999.93 1217.92 L1999.35 1217.92 L1998.76 1217.92 L1998.17 1217.92 L1997.59 1217.92 L1997 1217.92 L1996.41 1217.92 L1995.83 1217.92 L1995.24 1217.92 L1994.65 1217.92 L1994.07 1217.92 L1993.48 1217.92 L1992.9 1217.92 L1992.31 1217.92 L1991.72 1217.92 L1991.14 1217.92 L1990.55 1217.92 L1989.96 1217.92 L1989.38 1217.92 L1988.79 1217.92 L1988.2 1217.92 L1987.62 1217.92 L1987.03 1217.92 L1986.45 1217.92 L1985.86 1217.92 L1985.27 1217.92 L1984.69 1217.92 L1984.1 1217.92 L1983.51 1217.92 L1982.93 1217.92 L1982.34 1217.92 L1981.75 1217.92 L1981.17 1217.92 L1980.58 1217.92 L1979.99 1217.92 L1979.41 1217.92 L1978.82 1217.92 L1978.24 1217.92 L1977.65 1217.92 L1977.06 1217.92 L1976.48 1217.92 L1975.89 1217.92 L1975.3 1217.92 L1974.72 1217.92 L1974.13 1217.92 L1973.54 1217.92 L1972.96 1217.92 L1972.37 1217.92 L1971.78 1217.92 L1971.2 1217.92 L1970.61 1217.92 L1970.03 1217.92 L1969.44 1217.92 L1968.85 1217.92 L1968.27 1217.92 L1967.68 1217.92 L1967.09 1217.92 L1966.51 1217.92 L1965.92 1217.92 L1965.33 1217.92 L1964.75 1217.92 L1964.16 1217.92 L1963.58 1217.92 L1962.99 1217.92 L1962.4 1217.92 L1961.82 1217.92 L1961.23 1217.92 L1960.64 1217.92 L1960.06 1217.92 L1959.47 1217.92 L1958.88 1217.92 L1958.3 1217.92 L1957.71 1217.92 L1957.12 1217.92 L1956.54 1217.92 L1955.95 1217.92 L1955.37 1217.92 L1954.78 1217.92 L1954.19 1217.92 L1953.61 1217.92 L1953.02 1217.92 L1952.43 1217.92 L1951.85 1217.92 L1951.26 1217.92 L1950.67 1217.92 L1950.09 1217.92 L1949.5 1217.92 L1948.91 1217.92 L1948.33 1217.92 L1947.74 1217.92 L1947.16 1217.92 L1946.57 1217.92 L1945.98 1217.92 L1945.4 1217.92 L1944.81 1217.92 L1944.22 1217.92 L1943.64 1217.92 L1943.05 1217.92 L1942.46 1217.92 L1941.88 1217.92 L1941.29 1217.92 L1940.71 1217.92 L1940.12 1217.92 L1939.53 1217.92 L1938.95 1217.92 L1938.36 1217.92 L1937.77 1217.92 L1937.19 1217.92 L1936.6 1217.92 L1936.01 1217.92 L1935.43 1217.92 L1934.84 1217.92 L1934.25 1217.92 L1933.67 1217.92 L1933.08 1217.92 L1932.5 1217.92 L1931.91 1217.92 L1931.32 1217.92 L1930.74 1217.92 L1930.15 1217.92 L1929.56 1217.92 L1928.98 1217.92 L1928.39 1217.92 L1927.8 1217.92 L1927.22 1217.92 L1926.63 1217.92 L1926.04 1217.92 L1925.46 1217.92 L1924.87 1217.92 L1924.29 1217.92 L1923.7 1217.92 L1923.11 1217.92 L1922.53 1217.92 L1921.94 1217.92 L1921.35 1217.92 L1920.77 1217.92 L1920.18 1217.92 L1919.59 1217.92 L1919.01 1217.92 L1918.42 1217.92 L1917.83 1217.92 L1917.25 1217.92 L1916.66 1217.92 L1916.08 1217.92 L1915.49 1217.92 L1914.9 1217.92 L1914.32 1217.92 L1913.73 1217.92 L1913.14 1217.92 L1912.56 1217.92 L1911.97 1217.92 L1911.38 1217.92 L1910.8 1217.92 L1910.21 1217.92 L1909.63 1217.92 L1909.04 1217.92 L1908.45 1217.92 L1907.87 1217.92 L1907.28 1217.92 L1906.69 1217.92 L1906.11 1217.92 L1905.52 1217.92 L1904.93 1217.92 L1904.35 1217.92 L1903.76 1217.92 L1903.17 1217.92 L1902.59 1217.92 L1902 1217.92 L1901.42 1217.92 L1900.83 1217.92 L1900.24 1217.92 L1899.66 1217.92 L1899.07 1217.92 L1898.48 1217.92 L1897.9 1217.92 L1897.31 1217.92 L1896.72 1217.92 L1896.14 1217.92 L1895.55 1217.92 L1894.96 1217.92 L1894.38 1217.92 L1893.79 1217.92 L1893.21 1217.92 L1892.62 1217.92 L1892.03 1217.92 L1891.45 1217.92 L1890.86 1217.92 L1890.27 1217.92 L1889.69 1217.92 L1889.1 1217.92 L1888.51 1217.92 L1887.93 1217.92 L1887.34 1217.92 L1886.76 1217.92 L1886.17 1217.92 L1885.58 1217.92 L1885 1217.92 L1884.41 1217.92 L1883.82 1217.92 L1883.24 1217.92 L1882.65 1217.92 L1882.06 1217.92 L1881.48 1217.92 L1880.89 1217.92 L1880.3 1217.92 L1879.72 1217.92 L1879.13 1217.92 L1878.55 1217.92 L1877.96 1217.92 L1877.37 1217.92 L1876.79 1217.92 L1876.2 1217.92 L1875.61 1217.92 L1875.03 1217.92 L1874.44 1217.92 L1873.85 1217.92 L1873.27 1217.92 L1872.68 1217.92 L1872.09 1217.92 L1871.51 1217.92 L1870.92 1217.92 L1870.34 1217.92 L1869.75 1217.92 L1869.16 1217.92 L1868.58 1217.92 L1867.99 1217.92 L1867.4 1217.92 L1866.82 1217.92 L1866.23 1217.92 L1865.64 1217.92 L1865.06 1217.92 L1864.47 1217.92 L1863.88 1217.92 L1863.3 1217.92 L1862.71 1217.92 L1862.13 1217.92 L1861.54 1217.92 L1860.95 1217.92 L1860.37 1217.92 L1859.78 1217.92 L1859.19 1217.92 L1858.61 1217.92 L1858.02 1217.92 L1857.43 1217.92 L1856.85 1217.92 L1856.26 1217.92 L1855.68 1217.92 L1855.09 1217.92 L1854.5 1217.92 L1853.92 1217.92 L1853.33 1217.92 L1852.74 1217.92 L1852.16 1217.92 L1851.57 1217.92 L1850.98 1217.92 L1850.4 1217.92 L1849.81 1217.92 L1849.22 1217.92 L1848.64 1217.92 L1848.05 1217.92 L1847.47 1217.92 L1846.88 1217.92 L1846.29 1217.92 L1845.71 1217.92 L1845.12 1217.92 L1844.53 1217.92 L1843.95 1217.92 L1843.36 1217.92 L1842.77 1217.92 L1842.19 1217.92 L1841.6 1217.92 L1841.01 1217.92 L1840.43 1217.92 L1839.84 1217.92 L1839.26 1217.92 L1838.67 1217.92 L1838.08 1217.92 L1837.5 1217.92 L1836.91 1217.92 L1836.32 1217.92 L1835.74 1217.92 L1835.15 1217.92 L1834.56 1217.92 L1833.98 1217.92 L1833.39 1217.92 L1832.81 1217.92 L1832.22 1217.92 L1831.63 1217.92 L1831.05 1217.92 L1830.46 1217.92 L1829.87 1217.92 L1829.29 1217.92 L1828.7 1217.92 L1828.11 1217.92 L1827.53 1217.92 L1826.94 1217.92 L1826.35 1217.92 L1825.77 1217.92 L1825.18 1217.92 L1824.6 1217.92 L1824.01 1217.92 L1823.42 1217.92 L1822.84 1217.92 L1822.25 1217.92 L1821.66 1217.92 L1821.08 1217.92 L1820.49 1217.92 L1819.9 1217.92 L1819.32 1217.92 L1818.73 1217.92 L1818.14 1217.92 L1817.56 1217.92 L1816.97 1217.92 L1816.39 1217.92 L1815.8 1217.92 L1815.21 1217.92 L1814.63 1217.92 L1814.04 1217.92 L1813.45 1217.92 L1812.87 1217.92 L1812.28 1217.92 L1811.69 1217.92 L1811.11 1217.92 L1810.52 1217.92 L1809.94 1217.92 L1809.35 1217.92 L1808.76 1217.92 L1808.18 1217.92 L1807.59 1217.92 L1807 1217.92 L1806.42 1217.92 L1805.83 1217.92 L1805.24 1217.92 L1804.66 1217.92 L1804.07 1217.92 L1803.48 1217.92 L1802.9 1217.92 L1802.31 1217.92 L1801.73 1217.92 L1801.14 1217.92 L1800.55 1217.92 L1799.97 1217.92 L1799.38 1217.92 L1798.79 1217.92 L1798.21 1217.92 L1797.62 1217.92 L1797.03 1217.92 L1796.45 1217.92 L1795.86 1217.92 L1795.27 1217.92 L1794.69 1217.92 L1794.1 1217.92 L1793.52 1217.92 L1792.93 1217.92 L1792.34 1217.92 L1791.76 1217.92 L1791.17 1217.92 L1790.58 1217.92 L1790 1217.92 L1789.41 1217.92 L1788.82 1217.92 L1788.24 1217.92 L1787.65 1217.92 L1787.06 1217.92 L1786.48 1217.92 L1785.89 1217.92 L1785.31 1217.92 L1784.72 1217.92 L1784.13 1217.92 L1783.55 1217.92 L1782.96 1217.92 L1782.37 1217.92 L1781.79 1217.92 L1781.2 1217.92 L1780.61 1217.92 L1780.03 1217.92 L1779.44 1217.92 L1778.86 1217.92 L1778.27 1217.92 L1777.68 1217.92 L1777.1 1217.92 L1776.51 1217.92 L1775.92 1217.92 L1775.34 1217.92 L1774.75 1217.92 L1774.16 1217.92 L1773.58 1217.92 L1772.99 1217.92 L1772.4 1217.92 L1771.82 1217.92 L1771.23 1217.92 L1770.65 1217.92 L1770.06 1217.92 L1769.47 1217.92 L1768.89 1217.92 L1768.3 1217.92 L1767.71 1217.92 L1767.13 1217.92 L1766.54 1217.92 L1765.95 1217.92 L1765.37 1217.92 L1764.78 1217.92 L1764.19 1217.92 L1763.61 1217.92 L1763.02 1217.92 L1762.44 1217.92 L1761.85 1217.92 L1761.26 1217.92 L1760.68 1217.92 L1760.09 1217.92 L1759.5 1217.92 L1758.92 1217.92 L1758.33 1217.92 L1757.74 1217.92 L1757.16 1217.92 L1756.57 1217.92 L1755.99 1217.92 L1755.4 1217.92 L1754.81 1217.92 L1754.23 1217.92 L1753.64 1217.92 L1753.05 1217.92 L1752.47 1217.92 L1751.88 1217.92 L1751.29 1217.92 L1750.71 1217.92 L1750.12 1217.92 L1749.53 1217.92 L1748.95 1217.92 L1748.36 1217.92 L1747.78 1217.92 L1747.19 1217.92 L1746.6 1217.92 L1746.02 1217.92 L1745.43 1217.92 L1744.84 1217.92 L1744.26 1217.92 L1743.67 1217.92 L1743.08 1217.92 L1742.5 1217.92 L1741.91 1217.92 L1741.32 1217.92 L1740.74 1217.92 L1740.15 1217.92 L1739.57 1217.92 L1738.98 1217.92 L1738.39 1217.92 L1737.81 1217.92 L1737.22 1217.92 L1736.63 1217.92 L1736.05 1217.92 L1735.46 1217.92 L1734.87 1217.92 L1734.29 1217.92 L1733.7 1217.92 L1733.11 1217.92 L1732.53 1217.92 L1731.94 1217.92 L1731.36 1217.92 L1730.77 1217.92 L1730.18 1217.92 L1729.6 1217.92 L1729.01 1217.92 L1728.42 1217.92 L1727.84 1217.92 L1727.25 1217.92 L1726.66 1217.92 L1726.08 1217.92 L1725.49 1217.92 L1724.91 1217.92 L1724.32 1217.92 L1723.73 1217.92 L1723.15 1217.92 L1722.56 1217.92 L1721.97 1217.92 L1721.39 1217.92 L1720.8 1217.92 L1720.21 1217.92 L1719.63 1217.92 L1719.04 1217.92 L1718.45 1217.92 L1717.87 1217.92 L1717.28 1217.92 L1716.7 1217.92 L1716.11 1217.92 L1715.52 1217.92 L1714.94 1217.92 L1714.35 1217.92 L1713.76 1217.92 L1713.18 1217.92 L1712.59 1217.92 L1712 1217.92 L1711.42 1217.92 L1710.83 1217.92 L1710.24 1217.92 L1709.66 1217.92 L1709.07 1217.92 L1708.49 1217.92 L1707.9 1217.92 L1707.31 1217.92 L1706.73 1217.92 L1706.14 1217.92 L1705.55 1217.92 L1704.97 1217.92 L1704.38 1217.92 L1703.79 1217.92 L1703.21 1217.92 L1702.62 1217.92 L1702.04 1217.92 L1701.45 1217.92 L1700.86 1217.92 L1700.28 1217.92 L1699.69 1217.92 L1699.1 1217.92 L1698.52 1217.92 L1697.93 1217.92 L1697.34 1217.92 L1696.76 1217.92 L1696.17 1217.92 L1695.58 1217.92 L1695 1217.92 L1694.41 1217.92 L1693.83 1217.92 L1693.24 1217.92 L1692.65 1217.92 L1692.07 1217.92 L1691.48 1217.92 L1690.89 1217.92 L1690.31 1217.92 L1689.72 1217.92 L1689.13 1217.92 L1688.55 1217.92 L1687.96 1217.92 L1687.37 1217.92 L1686.79 1217.92 L1686.2 1217.92 L1685.62 1217.92 L1685.03 1217.92 L1684.44 1217.92 L1683.86 1217.92 L1683.27 1217.92 L1682.68 1217.92 L1682.1 1217.92 L1681.51 1217.92 L1680.92 1217.92 L1680.34 1217.92 L1679.75 1217.92 L1679.17 1217.92 L1678.58 1217.92 L1677.99 1217.92 L1677.41 1217.92 L1676.82 1217.92 L1676.23 1217.92 L1675.65 1217.92 L1675.06 1217.92 L1674.47 1217.92 L1673.89 1217.92 L1673.3 1217.92 L1672.71 1217.92 L1672.13 1217.92 L1671.54 1217.92 L1670.96 1217.92 L1670.37 1217.92 L1669.78 1217.92 L1669.2 1217.92 L1668.61 1217.92 L1668.02 1217.92 L1667.44 1217.92 L1666.85 1217.92 L1666.26 1217.92 L1665.68 1217.92 L1665.09 1217.92 L1664.5 1217.92 L1663.92 1217.92 L1663.33 1217.92 L1662.75 1217.92 L1662.16 1217.92 L1661.57 1217.92 L1660.99 1217.92 L1660.4 1217.92 L1659.81 1217.92 L1659.23 1217.92 L1658.64 1217.92 L1658.05 1217.92 L1657.47 1217.92 L1656.88 1217.92 L1656.29 1217.92 L1655.71 1217.92 L1655.12 1217.92 L1654.54 1217.92 L1653.95 1217.92 L1653.36 1217.92 L1652.78 1217.92 L1652.19 1217.92 L1651.6 1217.92 L1651.02 1217.92 L1650.43 1217.92 L1649.84 1217.92 L1649.26 1217.92 L1648.67 1217.92 L1648.09 1217.92 L1647.5 1217.92 L1646.91 1217.92 L1646.33 1217.92 L1645.74 1217.92 L1645.15 1217.92 L1644.57 1217.92 L1643.98 1217.92 L1643.39 1217.92 L1642.81 1217.92 L1642.22 1217.92 L1641.63 1217.92 L1641.05 1217.92 L1640.46 1217.92 L1639.88 1217.92 L1639.29 1217.92 L1638.7 1217.92 L1638.12 1217.92 L1637.53 1217.92 L1636.94 1217.92 L1636.36 1217.92 L1635.77 1217.92 L1635.18 1217.92 L1634.6 1217.92 L1634.01 1217.92 L1633.42 1217.92 L1632.84 1217.92 L1632.25 1217.92 L1631.67 1217.92 L1631.08 1217.92 L1630.49 1217.92 L1629.91 1217.92 L1629.32 1217.92 L1628.73 1217.92 L1628.15 1217.92 L1627.56 1217.92 L1626.97 1217.92 L1626.39 1217.92 L1625.8 1217.92 L1625.22 1217.92 L1624.63 1217.92 L1624.04 1217.92 L1623.46 1217.92 L1622.87 1217.92 L1622.28 1217.92 L1621.7 1217.92 L1621.11 1217.92 L1620.52 1217.92 L1619.94 1217.92 L1619.35 1217.92 L1618.76 1217.92 L1618.18 1217.92 L1617.59 1217.92 L1617.01 1217.92 L1616.42 1217.92 L1615.83 1217.92 L1615.25 1217.92 L1614.66 1217.92 L1614.07 1217.92 L1613.49 1217.92 L1612.9 1217.92 L1612.31 1217.92 L1611.73 1217.92 L1611.14 1217.92 L1610.55 1217.92 L1609.97 1217.92 L1609.38 1217.92 L1608.8 1217.92 L1608.21 1217.92 L1607.62 1217.92 L1607.04 1217.92 L1606.45 1217.92 L1605.86 1217.92 L1605.28 1217.92 L1604.69 1217.92 L1604.1 1217.92 L1603.52 1217.92 L1602.93 1217.92 L1602.34 1217.92 L1601.76 1217.92 L1601.17 1217.92 L1600.59 1217.92 L1600 1217.92 L1599.41 1217.92 L1598.83 1217.92 L1598.24 1217.92 L1597.65 1217.92 L1597.07 1217.92 L1596.48 1217.92 L1595.89 1217.92 L1595.31 1217.92 L1594.72 1217.92 L1594.14 1217.92 L1593.55 1217.92 L1592.96 1217.92 L1592.38 1217.92 L1591.79 1217.92 L1591.2 1217.92 L1590.62 1217.92 L1590.03 1217.92 L1589.44 1217.92 L1588.86 1217.92 L1588.27 1217.92 L1587.68 1217.92 L1587.1 1217.92 L1586.51 1217.92 L1585.93 1217.92 L1585.34 1217.92 L1584.75 1217.92 L1584.17 1217.92 L1583.58 1217.92 L1582.99 1217.92 L1582.41 1217.92 L1581.82 1217.92 L1581.23 1217.92 L1580.65 1217.92 L1580.06 1217.92 L1579.47 1217.92 L1578.89 1217.92 L1578.3 1217.92 L1577.72 1217.92 L1577.13 1217.92 L1576.54 1217.92 L1575.96 1217.92 L1575.37 1217.92 L1574.78 1217.92 L1574.2 1217.92 L1573.61 1217.92 L1573.02 1217.92 L1572.44 1217.92 L1571.85 1217.92 L1571.27 1217.92 L1570.68 1217.92 L1570.09 1217.92 L1569.51 1217.92 L1568.92 1217.92 L1568.33 1217.92 L1567.75 1217.92 L1567.16 1217.92 L1566.57 1217.92 L1565.99 1217.92 L1565.4 1217.92 L1564.81 1217.92 L1564.23 1217.92 L1563.64 1217.92 L1563.06 1217.92 L1562.47 1217.92 L1561.88 1217.92 L1561.3 1217.92 L1560.71 1217.92 L1560.12 1217.92 L1559.54 1217.92 L1558.95 1217.92 L1558.36 1217.92 L1557.78 1217.92 L1557.19 1217.92 L1556.6 1217.92 L1556.02 1217.92 L1555.43 1217.92 L1554.85 1217.92 L1554.26 1217.92 L1553.67 1217.92 L1553.09 1217.92 L1552.5 1217.92 L1551.91 1217.92 L1551.33 1217.92 L1550.74 1217.92 L1550.15 1217.92 L1549.57 1217.92 L1548.98 1217.92 L1548.4 1217.92 L1547.81 1217.92 L1547.22 1217.92 L1546.64 1217.92 L1546.05 1217.92 L1545.46 1217.92 L1544.88 1217.92 L1544.29 1217.92 L1543.7 1217.92 L1543.12 1217.92 L1542.53 1217.92 L1541.94 1217.92 L1541.36 1217.92 L1540.77 1217.92 L1540.19 1217.92 L1539.6 1217.92 L1539.01 1217.92 L1538.43 1217.92 L1537.84 1217.92 L1537.25 1217.92 L1536.67 1217.92 L1536.08 1217.92 L1535.49 1217.92 L1534.91 1217.92 L1534.32 1217.92 L1533.73 1217.92 L1533.15 1217.92 L1532.56 1217.92 L1531.98 1217.92 L1531.39 1217.92 L1530.8 1217.92 L1530.22 1217.92 L1529.63 1217.92 L1529.04 1217.92 L1528.46 1217.92 L1527.87 1217.92 L1527.28 1217.92 L1526.7 1217.92 L1526.11 1217.92 L1525.52 1217.92 L1524.94 1217.92 L1524.35 1217.92 L1523.77 1217.92 L1523.18 1217.92 L1522.59 1217.92 L1522.01 1217.92 L1521.42 1217.92 L1520.83 1217.92 L1520.25 1217.92 L1519.66 1217.92 L1519.07 1217.92 L1518.49 1217.92 L1517.9 1217.92 L1517.32 1217.92 L1516.73 1217.92 L1516.14 1217.92 L1515.56 1217.92 L1514.97 1217.92 L1514.38 1217.92 L1513.8 1217.92 L1513.21 1217.92 L1512.62 1217.92 L1512.04 1217.92 L1511.45 1217.92 L1510.86 1217.92 L1510.28 1217.92 L1509.69 1217.92 L1509.11 1217.92 L1508.52 1217.92 L1507.93 1217.92 L1507.35 1217.92 L1506.76 1217.92 L1506.17 1217.92 L1505.59 1217.92 L1505 1217.92 L1504.41 1217.92 L1503.83 1217.92 L1503.24 1217.92 L1502.65 1217.92 L1502.07 1217.92 L1501.48 1217.92 L1500.9 1217.92 L1500.31 1217.92 L1499.72 1217.92 L1499.14 1217.92 L1498.55 1217.92 L1497.96 1217.92 L1497.38 1217.92 L1496.79 1217.92 L1496.2 1217.92 L1495.62 1217.92 L1495.03 1217.92 L1494.45 1217.92 L1493.86 1217.92 L1493.27 1217.92 L1492.69 1217.92 L1492.1 1217.92 L1491.51 1217.92 L1490.93 1217.92 L1490.34 1217.92 L1489.75 1217.92 L1489.17 1217.92 L1488.58 1217.92 L1487.99 1217.92 L1487.41 1217.92 L1486.82 1217.92 L1486.24 1217.92 L1485.65 1217.92 L1485.06 1217.92 L1484.48 1217.92 L1483.89 1217.92 L1483.3 1217.92 L1482.72 1217.92 L1482.13 1217.92 L1481.54 1217.92 L1480.96 1217.92 L1480.37 1217.92 L1479.78 1217.92 L1479.2 1217.92 L1478.61 1217.92 L1478.03 1217.92 L1477.44 1217.92 L1476.85 1217.92 L1476.27 1217.92 L1475.68 1217.92 L1475.09 1217.92 L1474.51 1217.92 L1473.92 1217.92 L1473.33 1217.92 L1472.75 1217.92 L1472.16 1217.92 L1471.57 1217.92 L1470.99 1217.92 L1470.4 1217.92 L1469.82 1217.92 L1469.23 1217.92 L1468.64 1217.92 L1468.06 1217.92 L1467.47 1217.92 L1466.88 1217.92 L1466.3 1217.92 L1465.71 1217.92 L1465.12 1217.92 L1464.54 1217.92 L1463.95 1217.92 L1463.37 1217.92 L1462.78 1217.92 L1462.19 1217.92 L1461.61 1217.92 L1461.02 1217.92 L1460.43 1217.92 L1459.85 1217.92 L1459.26 1217.92 L1458.67 1217.92 L1458.09 1217.92 L1457.5 1217.92 L1456.91 1217.92 L1456.33 1217.92 L1455.74 1217.92 L1455.16 1217.92 L1454.57 1217.92 L1453.98 1217.92 L1453.4 1217.92 L1452.81 1217.92 L1452.22 1217.92 L1451.64 1217.92 L1451.05 1217.92 L1450.46 1217.92 L1449.88 1217.92 L1449.29 1217.92 L1448.7 1217.92 L1448.12 1217.92 L1447.53 1217.92 L1446.95 1217.92 L1446.36 1217.92 L1445.77 1217.92 L1445.19 1217.92 L1444.6 1217.92 L1444.01 1217.92 L1443.43 1217.92 L1442.84 1217.92 L1442.25 1217.92 L1441.67 1217.92 L1441.08 1217.92 L1440.5 1217.92 L1439.91 1217.92 L1439.32 1217.92 L1438.74 1217.92 L1438.15 1217.92 L1437.56 1217.92 L1436.98 1217.92 L1436.39 1217.92 L1435.8 1217.92 L1435.22 1217.92 L1434.63 1217.92 L1434.04 1217.92 L1433.46 1217.92 L1432.87 1217.92 L1432.29 1217.92 L1431.7 1217.92 L1431.11 1217.92 L1430.53 1217.92 L1429.94 1217.92 L1429.35 1217.92 L1428.77 1217.92 L1428.18 1217.92 L1427.59 1217.92 L1427.01 1217.92 L1426.42 1217.92 L1425.83 1217.92 L1425.25 1217.92 L1424.66 1217.92 L1424.08 1217.92 L1423.49 1217.92 L1422.9 1217.92 L1422.32 1217.92 L1421.73 1217.92 L1421.14 1217.92 L1420.56 1217.92 L1419.97 1217.92 L1419.38 1217.92 L1418.8 1217.92 L1418.21 1217.92 L1417.63 1217.92 L1417.04 1217.92 L1416.45 1217.92 L1415.87 1217.92 L1415.28 1217.92 L1414.69 1217.92 L1414.11 1217.92 L1413.52 1217.92 L1412.93 1217.92 L1412.35 1217.92 L1411.76 1217.92 L1411.17 1217.92 L1410.59 1217.92 L1410 1217.92 L1409.42 1217.92 L1408.83 1217.92 L1408.24 1217.92 L1407.66 1217.92 L1407.07 1217.92 L1406.48 1217.92 L1405.9 1217.92 L1405.31 1217.92 L1404.72 1217.92 L1404.14 1217.92 L1403.55 1217.92 L1402.96 1217.92 L1402.38 1217.92 L1401.79 1217.92 L1401.21 1217.92 L1400.62 1217.92 L1400.03 1217.92 L1399.45 1217.92 L1398.86 1217.92 L1398.27 1217.92 L1397.69 1217.92 L1397.1 1217.92 L1396.51 1217.92 L1395.93 1217.92 L1395.34 1217.92 L1394.75 1217.92 L1394.17 1217.92 L1393.58 1217.92 L1393 1217.92 L1392.41 1217.92 L1391.82 1217.92 L1391.24 1217.92 L1390.65 1217.92 L1390.06 1217.92 L1389.48 1217.92 L1388.89 1217.92 L1388.3 1217.92 L1387.72 1217.92 L1387.13 1217.92 L1386.55 1217.92 L1385.96 1217.92 L1385.37 1217.92 L1384.79 1217.92 L1384.2 1217.92 L1383.61 1217.92 L1383.03 1217.92 L1382.44 1217.92 L1381.85 1217.92 L1381.27 1217.92 L1380.68 1217.92 L1380.09 1217.92 L1379.51 1217.92 L1378.92 1217.92 L1378.34 1217.92 L1377.75 1217.92 L1377.16 1217.92 L1376.58 1217.92 L1375.99 1217.92 L1375.4 1217.92 L1374.82 1217.92 L1374.23 1217.92 L1373.64 1217.92 L1373.06 1217.92 L1372.47 1217.92 L1371.88 1217.92 L1371.3 1217.92 L1370.71 1217.92 L1370.13 1217.92 L1369.54 1217.92 L1368.95 1217.92 L1368.37 1217.92 L1367.78 1217.92 L1367.19 1217.92 L1366.61 1217.92 L1366.02 1217.92 L1365.43 1217.92 L1364.85 1217.92 L1364.26 1217.92 L1363.68 1217.92 L1363.09 1217.92 L1362.5 1217.92 L1361.92 1217.92 L1361.33 1217.92 L1360.74 1217.92 L1360.16 1217.92 L1359.57 1217.92 L1358.98 1217.92 L1358.4 1217.92 L1357.81 1217.92 L1357.22 1217.92 L1356.64 1217.92 L1356.05 1217.92 L1355.47 1217.92 L1354.88 1217.92 L1354.29 1217.92 L1353.71 1217.92 L1353.12 1217.92 L1352.53 1217.92 L1351.95 1217.92 L1351.36 1217.92 L1350.77 1217.92 L1350.19 1217.92 L1349.6 1217.92 L1349.01 1217.92 L1348.43 1217.92 L1347.84 1217.92 L1347.26 1217.92 L1346.67 1217.92 L1346.08 1217.92 L1345.5 1217.92 L1344.91 1217.92 L1344.32 1217.92 L1343.74 1217.92 L1343.15 1217.92 L1342.56 1217.92 L1341.98 1217.92 L1341.39 1217.92 L1340.8 1217.92 L1340.22 1217.92 L1339.63 1217.92 L1339.05 1217.92 L1338.46 1217.92 L1337.87 1217.92 L1337.29 1217.92 L1336.7 1217.92 L1336.11 1217.92 L1335.53 1217.92 L1334.94 1217.92 L1334.35 1217.92 L1333.77 1217.92 L1333.18 1217.92 L1332.6 1217.92 L1332.01 1217.92 L1331.42 1217.92 L1330.84 1217.92 L1330.25 1217.92 L1329.66 1217.92 L1329.08 1217.92 L1328.49 1217.92 L1327.9 1217.92 L1327.32 1217.92 L1326.73 1217.92 L1326.14 1217.92 L1325.56 1217.92 L1324.97 1217.92 L1324.39 1217.92 L1323.8 1217.92 L1323.21 1217.92 L1322.63 1217.92 L1322.04 1217.92 L1321.45 1217.92 L1320.87 1217.92 L1320.28 1217.92 L1319.69 1217.92 L1319.11 1217.92 L1318.52 1217.92 L1317.93 1217.92 L1317.35 1217.92 L1316.76 1217.92 L1316.18 1217.92 L1315.59 1217.92 L1315 1217.92 L1314.42 1217.92 L1313.83 1217.92 L1313.24 1217.92 L1312.66 1217.92 L1312.07 1217.92 L1311.48 1217.92 L1310.9 1217.92 L1310.31 1217.92 L1309.73 1217.92 L1309.14 1217.92 L1308.55 1217.92 L1307.97 1217.92 L1307.38 1217.92 L1306.79 1217.92 L1306.21 1217.92 L1305.62 1217.92 L1305.03 1217.92 L1304.45 1217.92 L1303.86 1217.92 L1303.27 1217.92 L1302.69 1217.92 L1302.1 1217.92 L1301.52 1217.92 L1300.93 1217.92 L1300.34 1217.92 L1299.76 1217.92 L1299.17 1217.92 L1298.58 1217.92 L1298 1217.92 L1297.41 1217.92 L1296.82 1217.92 L1296.24 1217.92 L1295.65 1217.92 L1295.06 1217.92 L1294.48 1217.92 L1293.89 1217.92 L1293.31 1217.92 L1292.72 1217.92 L1292.13 1217.92 L1291.55 1217.92 L1290.96 1217.92 L1290.37 1217.92 L1289.79 1217.92 L1289.2 1217.92 L1288.61 1217.92 L1288.03 1217.92 L1287.44 1217.92 L1286.86 1217.92 L1286.27 1217.92 L1285.68 1217.92 L1285.1 1217.92 L1284.51 1217.92 L1283.92 1217.92 L1283.34 1217.92 L1282.75 1217.92 L1282.16 1217.92 L1281.58 1217.92 L1280.99 1217.92 L1280.4 1217.92 L1279.82 1217.92 L1279.23 1217.92 L1278.65 1217.92 L1278.06 1217.92 L1277.47 1217.92 L1276.89 1217.92 L1276.3 1217.92 L1275.71 1217.92 L1275.13 1217.92 L1274.54 1217.92 L1273.95 1217.92 L1273.37 1217.92 L1272.78 1217.92 L1272.19 1217.92 L1271.61 1217.92 L1271.02 1217.92 L1270.44 1217.92 L1269.85 1217.92 L1269.26 1217.92 L1268.68 1217.92 L1268.09 1217.92 L1267.5 1217.92 L1266.92 1217.92 L1266.33 1217.92 L1265.74 1217.92 L1265.16 1217.92 L1264.57 1217.92 L1263.98 1217.92 L1263.4 1217.92 L1262.81 1217.92 L1262.23 1217.92 L1261.64 1217.92 L1261.05 1217.92 L1260.47 1217.92 L1259.88 1217.92 L1259.29 1217.92 L1258.71 1217.92 L1258.12 1217.92 L1257.53 1217.92 L1256.95 1217.92 L1256.36 1217.92 L1255.78 1217.92 L1255.19 1217.92 L1254.6 1217.92 L1254.02 1217.92 L1253.43 1217.92 L1252.84 1217.92 L1252.26 1217.92 L1251.67 1217.92 L1251.08 1217.92 L1250.5 1217.92 L1249.91 1217.92 L1249.32 1217.92 L1248.74 1217.92 L1248.15 1217.92 L1247.57 1217.92 L1246.98 1217.92 L1246.39 1217.92 L1245.81 1217.92 L1245.22 1217.92 L1244.63 1217.92 L1244.05 1217.92 L1243.46 1217.92 L1242.87 1217.92 L1242.29 1217.92 L1241.7 1217.92 L1241.11 1217.92 L1240.53 1217.92 L1239.94 1217.92 L1239.36 1217.92 L1238.77 1217.92 L1238.18 1217.92 L1237.6 1217.92 L1237.01 1217.92 L1236.42 1217.92 L1235.84 1217.92 L1235.25 1217.92 L1234.66 1217.92 L1234.08 1217.92 L1233.49 1217.92 L1232.91 1217.92 L1232.32 1217.92 L1231.73 1217.92 L1231.15 1217.92 L1230.56 1217.92 L1229.97 1217.92 L1229.39 1217.92 L1228.8 1217.92 L1228.21 1217.92 L1227.63 1217.92 L1227.04 1217.92 L1226.45 1217.92 L1225.87 1217.92 L1225.28 1217.92 L1224.7 1217.92 L1224.11 1217.92 L1223.52 1217.92 L1222.94 1217.92 L1222.35 1217.92 L1221.76 1217.92 L1221.18 1217.92 L1220.59 1217.92 L1220 1217.92 L1219.42 1217.92 L1218.83 1217.92 L1218.24 1217.92 L1217.66 1217.92 L1217.07 1217.92 L1216.49 1217.92 L1215.9 1217.92 L1215.31 1217.92 L1214.73 1217.92 L1214.14 1217.92 L1213.55 1217.92 L1212.97 1217.92 L1212.38 1217.92 L1211.79 1217.92 L1211.21 1217.92 L1210.62 1217.92 L1210.03 1217.92 L1209.45 1217.92 L1208.86 1217.92 L1208.28 1217.92 L1207.69 1217.92 L1207.1 1217.92 L1206.52 1217.92 L1205.93 1217.92 L1205.34 1217.92 L1204.76 1217.92 L1204.17 1217.92 L1203.58 1217.92 L1203 1217.92 L1202.41 1217.92 L1201.83 1217.92 L1201.24 1217.92 L1200.65 1217.92 L1200.07 1217.92 L1199.48 1217.92 L1198.89 1217.92 L1198.31 1217.92 L1197.72 1217.92 L1197.13 1217.92 L1196.55 1217.92 L1195.96 1217.92 L1195.37 1217.92 L1194.79 1217.92 L1194.2 1217.92 L1193.62 1217.92 L1193.03 1217.92 L1192.44 1217.92 L1191.86 1217.92 L1191.27 1217.92 L1190.68 1217.92 L1190.1 1217.92 L1189.51 1217.92 L1188.92 1217.92 L1188.34 1217.92 L1187.75 1217.92 L1187.16 1217.92 L1186.58 1217.92 L1185.99 1217.92 L1185.41 1217.92 L1184.82 1217.92 L1184.23 1217.92 L1183.65 1217.92 L1183.06 1217.92 L1182.47 1217.92 L1181.89 1217.92 L1181.3 1217.92 L1180.71 1217.92 L1180.13 1217.92 L1179.54 1217.92 L1178.96 1217.92 L1178.37 1217.92 L1177.78 1217.92 L1177.2 1217.92 L1176.61 1217.92 L1176.02 1217.92 L1175.44 1217.92 L1174.85 1217.92 L1174.26 1217.92 L1173.68 1217.92 L1173.09 1217.92 L1172.5 1217.92 L1171.92 1217.92 L1171.33 1217.92 L1170.75 1217.92 L1170.16 1217.92 L1169.57 1217.92 L1168.99 1217.92 L1168.4 1217.92 L1167.81 1217.92 L1167.23 1217.92 L1166.64 1217.92 L1166.05 1217.92 L1165.47 1217.92 L1164.88 1217.92 L1164.29 1217.92 L1163.71 1217.92 L1163.12 1217.92 L1162.54 1217.92 L1161.95 1217.92 L1161.36 1217.92 L1160.78 1217.92 L1160.19 1217.92 L1159.6 1217.92 L1159.02 1217.92 L1158.43 1217.92 L1157.84 1217.92 L1157.26 1217.92 L1156.67 1217.92 L1156.09 1217.92 L1155.5 1217.92 L1154.91 1217.92 L1154.33 1217.92 L1153.74 1217.92 L1153.15 1217.92 L1152.57 1217.92 L1151.98 1217.92 L1151.39 1217.92 L1150.81 1217.92 L1150.22 1217.92 L1149.63 1217.92 L1149.05 1217.92 L1148.46 1217.92 L1147.88 1217.92 L1147.29 1217.92 L1146.7 1217.92 L1146.12 1217.92 L1145.53 1217.92 L1144.94 1217.92 L1144.36 1217.92 L1143.77 1217.92 L1143.18 1217.92 L1142.6 1217.92 L1142.01 1217.92 L1141.42 1217.92 L1140.84 1217.92 L1140.25 1217.92 L1139.67 1217.92 L1139.08 1217.92 L1138.49 1217.92 L1137.91 1217.92 L1137.32 1217.92 L1136.73 1217.92 L1136.15 1217.92 L1135.56 1217.92 L1134.97 1217.92 L1134.39 1217.92 L1133.8 1217.92 L1133.21 1217.92 L1132.63 1217.92 L1132.04 1217.92 L1131.46 1217.92 L1130.87 1217.92 L1130.28 1217.92 L1129.7 1217.92 L1129.11 1217.92 L1128.52 1217.92 L1127.94 1217.92 L1127.35 1217.92 L1126.76 1217.92 L1126.18 1217.92 L1125.59 1217.92 L1125.01 1217.92 L1124.42 1217.92 L1123.83 1217.92 L1123.25 1217.92 L1122.66 1217.92 L1122.07 1217.92 L1121.49 1217.92 L1120.9 1217.92 L1120.31 1217.92 L1119.73 1217.92 L1119.14 1217.92 L1118.55 1217.92 L1117.97 1217.92 L1117.38 1217.92 L1116.8 1217.92 L1116.21 1217.92 L1115.62 1217.92 L1115.04 1217.92 L1114.45 1217.92 L1113.86 1217.92 L1113.28 1217.92 L1112.69 1217.92 L1112.1 1217.92 L1111.52 1217.92 L1110.93 1217.92 L1110.34 1217.92 L1109.76 1217.92 L1109.17 1217.92 L1108.59 1217.92 L1108 1217.92 L1107.41 1217.92 L1106.83 1217.92 L1106.24 1217.92 L1105.65 1217.92 L1105.07 1217.92 L1104.48 1217.92 L1103.89 1217.92 L1103.31 1217.92 L1102.72 1217.92 L1102.14 1217.92 L1101.55 1217.92 L1100.96 1217.92 L1100.38 1217.92 L1099.79 1217.92 L1099.2 1217.92 L1098.62 1217.92 L1098.03 1217.92 L1097.44 1217.92 L1096.86 1217.92 L1096.27 1217.92 L1095.68 1217.92 L1095.1 1217.92 L1094.51 1217.92 L1093.93 1217.92 L1093.34 1217.92 L1092.75 1217.92 L1092.17 1217.92 L1091.58 1217.92 L1090.99 1217.92 L1090.41 1217.92 L1089.82 1217.92 L1089.23 1217.92 L1088.65 1217.92 L1088.06 1217.92 L1087.47 1217.92 L1086.89 1217.92 L1086.3 1217.92 L1085.72 1217.92 L1085.13 1217.92 L1084.54 1217.92 L1083.96 1217.92 L1083.37 1217.92 L1082.78 1217.92 L1082.2 1217.92 L1081.61 1217.92 L1081.02 1217.92 L1080.44 1217.92 L1079.85 1217.92 L1079.26 1217.92 L1078.68 1217.92 L1078.09 1217.92 L1077.51 1217.92 L1076.92 1217.92 L1076.33 1217.92 L1075.75 1217.92 L1075.16 1217.92 L1074.57 1217.92 L1073.99 1217.92 L1073.4 1217.92 L1072.81 1217.92 L1072.23 1217.92 L1071.64 1217.92 L1071.06 1217.92 L1070.47 1217.92 L1069.88 1217.92 L1069.3 1217.92 L1068.71 1217.92 L1068.12 1217.92 L1067.54 1217.92 L1066.95 1217.92 L1066.36 1217.92 L1065.78 1217.92 L1065.19 1217.92 L1064.6 1217.92 L1064.02 1217.92 L1063.43 1217.92 L1062.85 1217.92 L1062.26 1217.92 L1061.67 1217.92 L1061.09 1217.92 L1060.5 1217.92 L1059.91 1217.92 L1059.33 1217.92 L1058.74 1217.92 L1058.15 1217.92 L1057.57 1217.92 L1056.98 1217.92 L1056.39 1217.92 L1055.81 1217.92 L1055.22 1217.92 L1054.64 1217.92 L1054.05 1217.92 L1053.46 1217.92 L1052.88 1217.92 L1052.29 1217.92 L1051.7 1217.92 L1051.12 1217.92 L1050.53 1217.92 L1049.94 1217.92 L1049.36 1217.92 L1048.77 1217.92 L1048.19 1217.92 L1047.6 1217.92 L1047.01 1217.92 L1046.43 1217.92 L1045.84 1217.92 L1045.25 1217.92 L1044.67 1217.92 L1044.08 1217.92 L1043.49 1217.92 L1042.91 1217.92 L1042.32 1217.92 L1041.73 1217.92 L1041.15 1217.92 L1040.56 1217.92 L1039.98 1217.92 L1039.39 1217.92 L1038.8 1217.92 L1038.22 1217.92 L1037.63 1217.92 L1037.04 1217.92 L1036.46 1217.92 L1035.87 1217.92 L1035.28 1217.92 L1034.7 1217.92 L1034.11 1217.92 L1033.52 1217.92 L1032.94 1217.92 L1032.35 1217.92 L1031.77 1217.92 L1031.18 1217.92 L1030.59 1217.92 L1030.01 1217.92 L1029.42 1217.92 L1028.83 1217.92 L1028.25 1217.92 L1027.66 1217.92 L1027.07 1217.92 L1026.49 1217.92 L1025.9 1217.92 L1025.32 1217.92 L1024.73 1217.92 L1024.14 1217.92 L1023.56 1217.92 L1022.97 1217.92 L1022.38 1217.92 L1021.8 1217.92 L1021.21 1217.92 L1020.62 1217.92 L1020.04 1217.92 L1019.45 1217.92 L1018.86 1217.92 L1018.28 1217.92 L1017.69 1217.92 L1017.11 1217.92 L1016.52 1217.92 L1015.93 1217.92 L1015.35 1217.92 L1014.76 1217.92 L1014.17 1217.92 L1013.59 1217.92 L1013 1217.92 L1012.41 1217.92 L1011.83 1217.92 L1011.24 1217.92 L1010.65 1217.92 L1010.07 1217.92 L1009.48 1217.92 L1008.9 1217.92 L1008.31 1217.92 L1007.72 1217.92 L1007.14 1217.92 L1006.55 1217.92 L1005.96 1217.92 L1005.38 1217.92 L1004.79 1217.92 L1004.2 1217.92 L1003.62 1217.92 L1003.03 1217.92 L1002.44 1217.92 L1001.86 1217.92 L1001.27 1217.92 L1000.69 1217.92 L1000.1 1217.92 L999.513 1217.92 L998.926 1217.92 L998.34 1217.92 L997.754 1217.92 L997.167 1217.92 L996.581 1217.92 L995.994 1217.92 L995.408 1217.92 L994.822 1217.92 L994.235 1217.92 L993.649 1217.92 L993.062 1217.92 L992.476 1217.92 L991.889 1217.92 L991.303 1217.92 L990.717 1217.92 L990.13 1217.92 L989.544 1217.92 L988.957 1217.92 L988.371 1217.92 L987.785 1217.92 L987.198 1217.92 L986.612 1217.92 L986.025 1217.92  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1217.97 986.612,1217.97 987.198,1217.97 987.785,1217.97 988.371,1217.97 988.957,1217.97 989.544,1217.97 990.13,1217.97 990.717,1217.97 991.303,1217.97 991.889,1217.97 992.476,1217.97 993.062,1217.97 993.649,1217.97 994.235,1217.97 994.822,1217.97 995.408,1217.97 995.994,1217.97 996.581,1217.97 997.167,1217.97 997.754,1217.97 998.34,1217.97 998.926,1217.97 999.513,1217.97 1000.1,1217.97 1000.69,1217.97 1001.27,1217.97 1001.86,1217.97 1002.44,1217.97 1003.03,1217.97 1003.62,1217.97 1004.2,1217.97 1004.79,1217.97 1005.38,1217.97 1005.96,1217.97 1006.55,1217.97 1007.14,1217.97 1007.72,1217.97 1008.31,1217.97 1008.9,1217.97 1009.48,1217.97 1010.07,1217.97 1010.65,1217.97 1011.24,1217.97 1011.83,1217.97 1012.41,1217.97 1013,1217.97 1013.59,1217.97 1014.17,1217.97 1014.76,1217.97 1015.35,1217.97 1015.93,1217.97 1016.52,1217.97 1017.11,1217.97 1017.69,1217.97 1018.28,1217.97 1018.86,1217.97 1019.45,1217.97 1020.04,1217.97 1020.62,1217.97 1021.21,1217.97 1021.8,1217.97 1022.38,1217.97 1022.97,1217.97 1023.56,1217.97 1024.14,1217.97 1024.73,1217.97 1025.32,1217.97 1025.9,1217.97 1026.49,1217.97 1027.07,1217.97 1027.66,1217.97 1028.25,1217.97 1028.83,1217.97 1029.42,1217.97 1030.01,1217.97 1030.59,1217.97 1031.18,1217.97 1031.77,1217.97 1032.35,1217.97 1032.94,1217.97 1033.52,1217.97 1034.11,1217.97 1034.7,1217.97 1035.28,1217.97 1035.87,1217.97 1036.46,1217.97 1037.04,1217.97 1037.63,1217.97 1038.22,1217.97 1038.8,1217.97 1039.39,1217.97 1039.98,1217.97 1040.56,1217.97 1041.15,1217.97 1041.73,1217.97 1042.32,1217.97 1042.91,1217.97 1043.49,1217.97 1044.08,1217.97 1044.67,1217.97 1045.25,1217.97 1045.84,1217.97 1046.43,1217.97 1047.01,1217.97 1047.6,1217.97 1048.19,1217.97 1048.77,1217.97 1049.36,1217.97 1049.94,1217.97 1050.53,1217.97 1051.12,1217.97 1051.7,1217.97 1052.29,1217.97 1052.88,1217.97 1053.46,1217.97 1054.05,1217.97 1054.64,1217.97 1055.22,1217.97 1055.81,1217.97 1056.39,1217.97 1056.98,1217.97 1057.57,1217.97 1058.15,1217.97 1058.74,1217.97 1059.33,1217.97 1059.91,1217.97 1060.5,1217.97 1061.09,1217.97 1061.67,1217.97 1062.26,1217.97 1062.85,1217.97 1063.43,1217.97 1064.02,1217.97 1064.6,1217.97 1065.19,1217.97 1065.78,1217.97 1066.36,1217.97 1066.95,1217.97 1067.54,1217.97 1068.12,1217.97 1068.71,1217.97 1069.3,1217.97 1069.88,1217.97 1070.47,1217.97 1071.06,1217.97 1071.64,1217.97 1072.23,1217.97 1072.81,1217.97 1073.4,1217.97 1073.99,1217.97 1074.57,1217.97 1075.16,1217.97 1075.75,1217.97 1076.33,1217.97 1076.92,1217.97 1077.51,1217.97 1078.09,1217.97 1078.68,1217.97 1079.26,1217.97 1079.85,1217.97 1080.44,1217.97 1081.02,1217.97 1081.61,1217.97 1082.2,1217.97 1082.78,1217.97 1083.37,1217.97 1083.96,1217.97 1084.54,1217.97 1085.13,1217.97 1085.72,1217.97 1086.3,1217.97 1086.89,1217.97 1087.47,1217.97 1088.06,1217.97 1088.65,1217.97 1089.23,1217.97 1089.82,1217.97 1090.41,1217.97 1090.99,1217.97 1091.58,1217.97 1092.17,1217.97 1092.75,1217.97 1093.34,1217.97 1093.93,1217.97 1094.51,1217.97 1095.1,1217.97 1095.68,1217.97 1096.27,1217.97 1096.86,1217.97 1097.44,1217.97 1098.03,1217.97 1098.62,1217.97 1099.2,1217.97 1099.79,1217.97 1100.38,1217.97 1100.96,1217.97 1101.55,1217.97 1102.14,1217.97 1102.72,1217.97 1103.31,1217.97 1103.89,1217.97 1104.48,1217.97 1105.07,1217.97 1105.65,1217.97 1106.24,1217.97 1106.83,1217.97 1107.41,1217.97 1108,1217.97 1108.59,1217.97 1109.17,1217.97 1109.76,1217.97 1110.34,1217.97 1110.93,1217.97 1111.52,1217.97 1112.1,1217.97 1112.69,1217.97 1113.28,1217.97 1113.86,1217.97 1114.45,1217.97 1115.04,1217.97 1115.62,1217.97 1116.21,1217.97 1116.8,1217.97 1117.38,1217.97 1117.97,1217.97 1118.55,1217.97 1119.14,1217.97 1119.73,1217.97 1120.31,1217.97 1120.9,1217.97 1121.49,1217.97 1122.07,1217.97 1122.66,1217.97 1123.25,1217.97 1123.83,1217.97 1124.42,1217.97 1125.01,1217.97 1125.59,1217.97 1126.18,1217.97 1126.76,1217.97 1127.35,1217.97 1127.94,1217.97 1128.52,1217.97 1129.11,1217.97 1129.7,1217.97 1130.28,1217.97 1130.87,1217.97 1131.46,1217.97 1132.04,1217.97 1132.63,1217.97 1133.21,1217.97 1133.8,1217.97 1134.39,1217.97 1134.97,1217.97 1135.56,1217.97 1136.15,1217.97 1136.73,1217.97 1137.32,1217.97 1137.91,1217.97 1138.49,1217.97 1139.08,1217.97 1139.67,1217.97 1140.25,1217.97 1140.84,1217.97 1141.42,1217.97 1142.01,1217.97 1142.6,1217.97 1143.18,1217.97 1143.77,1217.97 1144.36,1217.97 1144.94,1217.97 1145.53,1217.97 1146.12,1217.97 1146.7,1217.97 1147.29,1217.97 1147.88,1217.97 1148.46,1217.97 1149.05,1217.97 1149.63,1217.97 1150.22,1217.97 1150.81,1217.97 1151.39,1217.97 1151.98,1217.97 1152.57,1217.97 1153.15,1217.97 1153.74,1217.97 1154.33,1217.97 1154.91,1217.97 1155.5,1217.97 1156.09,1217.97 1156.67,1217.97 1157.26,1217.97 1157.84,1217.97 1158.43,1217.97 1159.02,1217.97 1159.6,1217.97 1160.19,1217.97 1160.78,1217.97 1161.36,1217.97 1161.95,1217.97 1162.54,1217.97 1163.12,1217.97 1163.71,1217.97 1164.29,1217.97 1164.88,1217.97 1165.47,1217.97 1166.05,1217.97 1166.64,1217.97 1167.23,1217.97 1167.81,1217.97 1168.4,1217.97 1168.99,1217.97 1169.57,1217.97 1170.16,1217.97 1170.75,1217.97 1171.33,1217.97 1171.92,1217.97 1172.5,1217.97 1173.09,1217.97 1173.68,1217.97 1174.26,1217.97 1174.85,1217.97 1175.44,1217.97 1176.02,1217.97 1176.61,1217.97 1177.2,1217.97 1177.78,1217.97 1178.37,1217.97 1178.96,1217.97 1179.54,1217.97 1180.13,1217.97 1180.71,1217.97 1181.3,1217.97 1181.89,1217.97 1182.47,1217.97 1183.06,1217.97 1183.65,1217.97 1184.23,1217.97 1184.82,1217.97 1185.41,1217.97 1185.99,1217.97 1186.58,1217.97 1187.16,1217.97 1187.75,1217.97 1188.34,1217.97 1188.92,1217.97 1189.51,1217.97 1190.1,1217.97 1190.68,1217.97 1191.27,1217.97 1191.86,1217.97 1192.44,1217.97 1193.03,1217.97 1193.62,1217.97 1194.2,1217.97 1194.79,1217.97 1195.37,1217.97 1195.96,1217.97 1196.55,1217.97 1197.13,1217.97 1197.72,1217.97 1198.31,1217.97 1198.89,1217.97 1199.48,1217.97 1200.07,1217.97 1200.65,1217.97 1201.24,1217.97 1201.83,1217.97 1202.41,1217.97 1203,1217.97 1203.58,1217.97 1204.17,1217.97 1204.76,1217.97 1205.34,1217.97 1205.93,1217.97 1206.52,1217.97 1207.1,1217.97 1207.69,1217.97 1208.28,1217.97 1208.86,1217.97 1209.45,1217.97 1210.03,1217.97 1210.62,1217.97 1211.21,1217.97 1211.79,1217.97 1212.38,1217.97 1212.97,1217.97 1213.55,1217.97 1214.14,1217.97 1214.73,1217.97 1215.31,1217.97 1215.9,1217.97 1216.49,1217.97 1217.07,1217.97 1217.66,1217.97 1218.24,1217.97 1218.83,1217.97 1219.42,1217.97 1220,1217.97 1220.59,1217.97 1221.18,1217.97 1221.76,1217.97 1222.35,1217.97 1222.94,1217.97 1223.52,1217.97 1224.11,1217.97 1224.7,1217.97 1225.28,1217.97 1225.87,1217.97 1226.45,1217.97 1227.04,1217.97 1227.63,1217.97 1228.21,1217.97 1228.8,1217.97 1229.39,1217.97 1229.97,1217.97 1230.56,1217.97 1231.15,1217.97 1231.73,1217.97 1232.32,1217.97 1232.91,1217.97 1233.49,1217.97 1234.08,1217.97 1234.66,1217.97 1235.25,1217.97 1235.84,1217.97 1236.42,1217.97 1237.01,1217.97 1237.6,1217.97 1238.18,1217.97 1238.77,1217.97 1239.36,1217.97 1239.94,1217.97 1240.53,1217.97 1241.11,1217.97 1241.7,1217.97 1242.29,1217.97 1242.87,1217.97 1243.46,1217.97 1244.05,1217.97 1244.63,1217.97 1245.22,1217.97 1245.81,1217.97 1246.39,1217.97 1246.98,1217.97 1247.57,1217.97 1248.15,1217.97 1248.74,1217.97 1249.32,1217.97 1249.91,1217.97 1250.5,1217.97 1251.08,1217.97 1251.67,1217.97 1252.26,1217.97 1252.84,1217.97 1253.43,1217.97 1254.02,1217.97 1254.6,1217.97 1255.19,1217.97 1255.78,1217.97 1256.36,1217.97 1256.95,1217.97 1257.53,1217.97 1258.12,1217.97 1258.71,1217.97 1259.29,1217.97 1259.88,1217.97 1260.47,1217.97 1261.05,1217.97 1261.64,1217.97 1262.23,1217.97 1262.81,1217.97 1263.4,1217.97 1263.98,1217.97 1264.57,1217.97 1265.16,1217.97 1265.74,1217.97 1266.33,1217.97 1266.92,1217.97 1267.5,1217.97 1268.09,1217.97 1268.68,1217.97 1269.26,1217.97 1269.85,1217.97 1270.44,1217.97 1271.02,1217.97 1271.61,1217.97 1272.19,1217.97 1272.78,1217.97 1273.37,1217.97 1273.95,1217.97 1274.54,1217.97 1275.13,1217.97 1275.71,1217.97 1276.3,1217.97 1276.89,1217.97 1277.47,1217.97 1278.06,1217.97 1278.65,1217.97 1279.23,1217.97 1279.82,1217.97 1280.4,1217.97 1280.99,1217.97 1281.58,1217.97 1282.16,1217.97 1282.75,1217.97 1283.34,1217.97 1283.92,1217.97 1284.51,1217.97 1285.1,1217.97 1285.68,1217.97 1286.27,1217.97 1286.86,1217.97 1287.44,1217.97 1288.03,1217.97 1288.61,1217.97 1289.2,1217.97 1289.79,1217.97 1290.37,1217.97 1290.96,1217.97 1291.55,1217.97 1292.13,1217.97 1292.72,1217.97 1293.31,1217.97 1293.89,1217.97 1294.48,1217.97 1295.06,1217.97 1295.65,1217.97 1296.24,1217.97 1296.82,1217.97 1297.41,1217.97 1298,1217.97 1298.58,1217.97 1299.17,1217.97 1299.76,1217.97 1300.34,1217.97 1300.93,1217.97 1301.52,1217.97 1302.1,1217.97 1302.69,1217.97 1303.27,1217.97 1303.86,1217.97 1304.45,1217.97 1305.03,1217.97 1305.62,1217.97 1306.21,1217.97 1306.79,1217.97 1307.38,1217.97 1307.97,1217.97 1308.55,1217.97 1309.14,1217.97 1309.73,1217.97 1310.31,1217.97 1310.9,1217.97 1311.48,1217.97 1312.07,1217.97 1312.66,1217.97 1313.24,1217.97 1313.83,1217.97 1314.42,1217.97 1315,1217.97 1315.59,1217.97 1316.18,1217.97 1316.76,1217.97 1317.35,1217.97 1317.93,1217.97 1318.52,1217.97 1319.11,1217.97 1319.69,1217.97 1320.28,1217.97 1320.87,1217.97 1321.45,1217.97 1322.04,1217.97 1322.63,1217.97 1323.21,1217.97 1323.8,1217.97 1324.39,1217.97 1324.97,1217.97 1325.56,1217.97 1326.14,1217.97 1326.73,1217.97 1327.32,1217.97 1327.9,1217.97 1328.49,1217.97 1329.08,1217.97 1329.66,1217.97 1330.25,1217.97 1330.84,1217.97 1331.42,1217.97 1332.01,1217.97 1332.6,1217.97 1333.18,1217.97 1333.77,1217.97 1334.35,1217.97 1334.94,1217.97 1335.53,1217.97 1336.11,1217.97 1336.7,1217.97 1337.29,1217.97 1337.87,1217.97 1338.46,1217.97 1339.05,1217.97 1339.63,1217.97 1340.22,1217.97 1340.8,1217.97 1341.39,1217.97 1341.98,1217.97 1342.56,1217.97 1343.15,1217.97 1343.74,1217.97 1344.32,1217.97 1344.91,1217.97 1345.5,1217.97 1346.08,1217.97 1346.67,1217.97 1347.26,1217.97 1347.84,1217.97 1348.43,1217.97 1349.01,1217.97 1349.6,1217.97 1350.19,1217.97 1350.77,1217.97 1351.36,1217.97 1351.95,1217.97 1352.53,1217.97 1353.12,1217.97 1353.71,1217.97 1354.29,1217.97 1354.88,1217.97 1355.47,1217.97 1356.05,1217.97 1356.64,1217.97 1357.22,1217.97 1357.81,1217.97 1358.4,1217.97 1358.98,1217.97 1359.57,1217.97 1360.16,1217.97 1360.74,1217.97 1361.33,1217.97 1361.92,1217.97 1362.5,1217.97 1363.09,1217.97 1363.68,1217.97 1364.26,1217.97 1364.85,1217.97 1365.43,1217.97 1366.02,1217.97 1366.61,1217.97 1367.19,1217.97 1367.78,1217.97 1368.37,1217.97 1368.95,1217.97 1369.54,1217.97 1370.13,1217.97 1370.71,1217.97 1371.3,1217.97 1371.88,1217.97 1372.47,1217.97 1373.06,1217.97 1373.64,1217.97 1374.23,1217.97 1374.82,1217.97 1375.4,1217.97 1375.99,1217.97 1376.58,1217.97 1377.16,1217.97 1377.75,1217.97 1378.34,1217.97 1378.92,1217.97 1379.51,1217.97 1380.09,1217.97 1380.68,1217.97 1381.27,1217.97 1381.85,1217.97 1382.44,1217.97 1383.03,1217.97 1383.61,1217.97 1384.2,1217.97 1384.79,1217.97 1385.37,1217.97 1385.96,1217.97 1386.55,1217.97 1387.13,1217.97 1387.72,1217.97 1388.3,1217.97 1388.89,1217.97 1389.48,1217.97 1390.06,1217.97 1390.65,1217.97 1391.24,1217.97 1391.82,1217.97 1392.41,1217.97 1393,1217.97 1393.58,1217.97 1394.17,1217.97 1394.75,1217.97 1395.34,1217.97 1395.93,1217.97 1396.51,1217.97 1397.1,1217.97 1397.69,1217.97 1398.27,1217.97 1398.86,1217.97 1399.45,1217.97 1400.03,1217.97 1400.62,1217.97 1401.21,1217.97 1401.79,1217.97 1402.38,1217.97 1402.96,1217.97 1403.55,1217.97 1404.14,1217.97 1404.72,1217.97 1405.31,1217.97 1405.9,1217.97 1406.48,1217.97 1407.07,1217.97 1407.66,1217.97 1408.24,1217.97 1408.83,1217.97 1409.42,1217.97 1410,1217.97 1410.59,1217.97 1411.17,1217.97 1411.76,1217.97 1412.35,1217.97 1412.93,1217.97 1413.52,1217.97 1414.11,1217.97 1414.69,1217.97 1415.28,1217.97 1415.87,1217.97 1416.45,1217.97 1417.04,1217.97 1417.63,1217.97 1418.21,1217.97 1418.8,1217.97 1419.38,1217.97 1419.97,1217.97 1420.56,1217.97 1421.14,1217.97 1421.73,1217.97 1422.32,1217.97 1422.9,1217.97 1423.49,1217.97 1424.08,1217.97 1424.66,1217.97 1425.25,1217.97 1425.83,1217.97 1426.42,1217.97 1427.01,1217.97 1427.59,1217.97 1428.18,1217.97 1428.77,1217.97 1429.35,1217.97 1429.94,1217.97 1430.53,1217.97 1431.11,1217.97 1431.7,1217.97 1432.29,1217.97 1432.87,1217.97 1433.46,1217.97 1434.04,1217.97 1434.63,1217.97 1435.22,1217.97 1435.8,1217.97 1436.39,1217.97 1436.98,1217.97 1437.56,1217.97 1438.15,1217.97 1438.74,1217.97 1439.32,1217.97 1439.91,1217.97 1440.5,1217.97 1441.08,1217.97 1441.67,1217.97 1442.25,1217.97 1442.84,1217.97 1443.43,1217.97 1444.01,1217.97 1444.6,1217.97 1445.19,1217.97 1445.77,1217.97 1446.36,1217.97 1446.95,1217.97 1447.53,1217.97 1448.12,1217.97 1448.7,1217.97 1449.29,1217.97 1449.88,1217.97 1450.46,1217.97 1451.05,1217.97 1451.64,1217.97 1452.22,1217.97 1452.81,1217.97 1453.4,1217.97 1453.98,1217.97 1454.57,1217.97 1455.16,1217.97 1455.74,1217.97 1456.33,1217.97 1456.91,1217.97 1457.5,1217.97 1458.09,1217.97 1458.67,1217.97 1459.26,1217.97 1459.85,1217.97 1460.43,1217.97 1461.02,1217.97 1461.61,1217.97 1462.19,1217.97 1462.78,1217.97 1463.37,1217.97 1463.95,1217.97 1464.54,1217.97 1465.12,1217.97 1465.71,1217.97 1466.3,1217.97 1466.88,1217.97 1467.47,1217.97 1468.06,1217.97 1468.64,1217.97 1469.23,1217.97 1469.82,1217.97 1470.4,1217.97 1470.99,1217.97 1471.57,1217.97 1472.16,1217.97 1472.75,1217.97 1473.33,1217.97 1473.92,1217.97 1474.51,1217.97 1475.09,1217.97 1475.68,1217.97 1476.27,1217.97 1476.85,1217.97 1477.44,1217.97 1478.03,1217.97 1478.61,1217.97 1479.2,1217.97 1479.78,1217.97 1480.37,1217.97 1480.96,1217.97 1481.54,1217.97 1482.13,1217.97 1482.72,1217.97 1483.3,1217.97 1483.89,1217.97 1484.48,1217.97 1485.06,1217.97 1485.65,1217.97 1486.24,1217.97 1486.82,1217.97 1487.41,1217.97 1487.99,1217.97 1488.58,1217.97 1489.17,1217.97 1489.75,1217.97 1490.34,1217.97 1490.93,1217.97 1491.51,1217.97 1492.1,1217.97 1492.69,1217.97 1493.27,1217.97 1493.86,1217.97 1494.45,1217.97 1495.03,1217.97 1495.62,1217.97 1496.2,1217.97 1496.79,1217.97 1497.38,1217.97 1497.96,1217.97 1498.55,1217.97 1499.14,1217.97 1499.72,1217.97 1500.31,1217.97 1500.9,1217.97 1501.48,1217.97 1502.07,1217.97 1502.65,1217.97 1503.24,1217.97 1503.83,1217.97 1504.41,1217.97 1505,1217.97 1505.59,1217.97 1506.17,1217.97 1506.76,1217.97 1507.35,1217.97 1507.93,1217.97 1508.52,1217.97 1509.11,1217.97 1509.69,1217.97 1510.28,1217.97 1510.86,1217.97 1511.45,1217.97 1512.04,1217.97 1512.62,1217.97 1513.21,1217.97 1513.8,1217.97 1514.38,1217.97 1514.97,1217.97 1515.56,1217.97 1516.14,1217.97 1516.73,1217.97 1517.32,1217.97 1517.9,1217.97 1518.49,1217.97 1519.07,1217.97 1519.66,1217.97 1520.25,1217.97 1520.83,1217.97 1521.42,1217.97 1522.01,1217.97 1522.59,1217.97 1523.18,1217.97 1523.77,1217.97 1524.35,1217.97 1524.94,1217.97 1525.52,1217.97 1526.11,1217.97 1526.7,1217.97 1527.28,1217.97 1527.87,1217.97 1528.46,1217.97 1529.04,1217.97 1529.63,1217.97 1530.22,1217.97 1530.8,1217.97 1531.39,1217.97 1531.98,1217.97 1532.56,1217.97 1533.15,1217.97 1533.73,1217.97 1534.32,1217.97 1534.91,1217.97 1535.49,1217.97 1536.08,1217.97 1536.67,1217.97 1537.25,1217.97 1537.84,1217.97 1538.43,1217.97 1539.01,1217.97 1539.6,1217.97 1540.19,1217.97 1540.77,1217.97 1541.36,1217.97 1541.94,1217.97 1542.53,1217.97 1543.12,1217.97 1543.7,1217.97 1544.29,1217.97 1544.88,1217.97 1545.46,1217.97 1546.05,1217.97 1546.64,1217.97 1547.22,1217.97 1547.81,1217.97 1548.4,1217.97 1548.98,1217.97 1549.57,1217.97 1550.15,1217.97 1550.74,1217.97 1551.33,1217.97 1551.91,1217.97 1552.5,1217.97 1553.09,1217.97 1553.67,1217.97 1554.26,1217.97 1554.85,1217.97 1555.43,1217.97 1556.02,1217.97 1556.6,1217.97 1557.19,1217.97 1557.78,1217.97 1558.36,1217.97 1558.95,1217.97 1559.54,1217.97 1560.12,1217.97 1560.71,1217.97 1561.3,1217.97 1561.88,1217.97 1562.47,1217.97 1563.06,1217.97 1563.64,1217.97 1564.23,1217.97 1564.81,1217.97 1565.4,1217.97 1565.99,1217.97 1566.57,1217.97 1567.16,1217.97 1567.75,1217.97 1568.33,1217.97 1568.92,1217.97 1569.51,1217.97 1570.09,1217.97 1570.68,1217.97 1571.27,1217.97 1571.85,1217.97 1572.44,1217.97 1573.02,1217.97 1573.61,1217.97 1574.2,1217.97 1574.78,1217.97 1575.37,1217.97 1575.96,1217.97 1576.54,1217.97 1577.13,1217.97 1577.72,1217.97 1578.3,1217.97 1578.89,1217.97 1579.47,1217.97 1580.06,1217.97 1580.65,1217.97 1581.23,1217.97 1581.82,1217.97 1582.41,1217.97 1582.99,1217.97 1583.58,1217.97 1584.17,1217.97 1584.75,1217.97 1585.34,1217.97 1585.93,1217.97 1586.51,1217.97 1587.1,1217.97 1587.68,1217.97 1588.27,1217.97 1588.86,1217.97 1589.44,1217.97 1590.03,1217.97 1590.62,1217.97 1591.2,1217.97 1591.79,1217.97 1592.38,1217.97 1592.96,1217.97 1593.55,1217.97 1594.14,1217.97 1594.72,1217.97 1595.31,1217.97 1595.89,1217.97 1596.48,1217.97 1597.07,1217.97 1597.65,1217.97 1598.24,1217.97 1598.83,1217.97 1599.41,1217.97 1600,1217.97 1600.59,1217.97 1601.17,1217.97 1601.76,1217.97 1602.34,1217.97 1602.93,1217.97 1603.52,1217.97 1604.1,1217.97 1604.69,1217.97 1605.28,1217.97 1605.86,1217.97 1606.45,1217.97 1607.04,1217.97 1607.62,1217.97 1608.21,1217.97 1608.8,1217.97 1609.38,1217.97 1609.97,1217.97 1610.55,1217.97 1611.14,1217.97 1611.73,1217.97 1612.31,1217.97 1612.9,1217.97 1613.49,1217.97 1614.07,1217.97 1614.66,1217.97 1615.25,1217.97 1615.83,1217.97 1616.42,1217.97 1617.01,1217.97 1617.59,1217.97 1618.18,1217.97 1618.76,1217.97 1619.35,1217.97 1619.94,1217.97 1620.52,1217.97 1621.11,1217.97 1621.7,1217.97 1622.28,1217.97 1622.87,1217.97 1623.46,1217.97 1624.04,1217.97 1624.63,1217.97 1625.22,1217.97 1625.8,1217.97 1626.39,1217.97 1626.97,1217.97 1627.56,1217.97 1628.15,1217.97 1628.73,1217.97 1629.32,1217.97 1629.91,1217.97 1630.49,1217.97 1631.08,1217.97 1631.67,1217.97 1632.25,1217.97 1632.84,1217.97 1633.42,1217.97 1634.01,1217.97 1634.6,1217.97 1635.18,1217.97 1635.77,1217.97 1636.36,1217.97 1636.94,1217.97 1637.53,1217.97 1638.12,1217.97 1638.7,1217.97 1639.29,1217.97 1639.88,1217.97 1640.46,1217.97 1641.05,1217.97 1641.63,1217.97 1642.22,1217.97 1642.81,1217.97 1643.39,1217.97 1643.98,1217.97 1644.57,1217.97 1645.15,1217.97 1645.74,1217.97 1646.33,1217.97 1646.91,1217.97 1647.5,1217.97 1648.09,1217.97 1648.67,1217.97 1649.26,1217.97 1649.84,1217.97 1650.43,1217.97 1651.02,1217.97 1651.6,1217.97 1652.19,1217.97 1652.78,1217.97 1653.36,1217.97 1653.95,1217.97 1654.54,1217.97 1655.12,1217.97 1655.71,1217.97 1656.29,1217.97 1656.88,1217.97 1657.47,1217.97 1658.05,1217.97 1658.64,1217.97 1659.23,1217.97 1659.81,1217.97 1660.4,1217.97 1660.99,1217.97 1661.57,1217.97 1662.16,1217.97 1662.75,1217.97 1663.33,1217.97 1663.92,1217.97 1664.5,1217.97 1665.09,1217.97 1665.68,1217.97 1666.26,1217.97 1666.85,1217.97 1667.44,1217.97 1668.02,1217.97 1668.61,1217.97 1669.2,1217.97 1669.78,1217.97 1670.37,1217.97 1670.96,1217.97 1671.54,1217.97 1672.13,1217.97 1672.71,1217.97 1673.3,1217.97 1673.89,1217.97 1674.47,1217.97 1675.06,1217.97 1675.65,1217.97 1676.23,1217.97 1676.82,1217.97 1677.41,1217.97 1677.99,1217.97 1678.58,1217.97 1679.17,1217.97 1679.75,1217.97 1680.34,1217.97 1680.92,1217.97 1681.51,1217.97 1682.1,1217.97 1682.68,1217.97 1683.27,1217.97 1683.86,1217.97 1684.44,1217.97 1685.03,1217.97 1685.62,1217.97 1686.2,1217.97 1686.79,1217.97 1687.37,1217.97 1687.96,1217.97 1688.55,1217.97 1689.13,1217.97 1689.72,1217.97 1690.31,1217.97 1690.89,1217.97 1691.48,1217.97 1692.07,1217.97 1692.65,1217.97 1693.24,1217.97 1693.83,1217.97 1694.41,1217.97 1695,1217.97 1695.58,1217.97 1696.17,1217.97 1696.76,1217.97 1697.34,1217.97 1697.93,1217.97 1698.52,1217.97 1699.1,1217.97 1699.69,1217.97 1700.28,1217.97 1700.86,1217.97 1701.45,1217.97 1702.04,1217.97 1702.62,1217.97 1703.21,1217.97 1703.79,1217.97 1704.38,1217.97 1704.97,1217.97 1705.55,1217.97 1706.14,1217.97 1706.73,1217.97 1707.31,1217.97 1707.9,1217.97 1708.49,1217.97 1709.07,1217.97 1709.66,1217.97 1710.24,1217.97 1710.83,1217.97 1711.42,1217.97 1712,1217.97 1712.59,1217.97 1713.18,1217.97 1713.76,1217.97 1714.35,1217.97 1714.94,1217.97 1715.52,1217.97 1716.11,1217.97 1716.7,1217.97 1717.28,1217.97 1717.87,1217.97 1718.45,1217.97 1719.04,1217.97 1719.63,1217.97 1720.21,1217.97 1720.8,1217.97 1721.39,1217.97 1721.97,1217.97 1722.56,1217.97 1723.15,1217.97 1723.73,1217.97 1724.32,1217.97 1724.91,1217.97 1725.49,1217.97 1726.08,1217.97 1726.66,1217.97 1727.25,1217.97 1727.84,1217.97 1728.42,1217.97 1729.01,1217.97 1729.6,1217.97 1730.18,1217.97 1730.77,1217.97 1731.36,1217.97 1731.94,1217.97 1732.53,1217.97 1733.11,1217.97 1733.7,1217.97 1734.29,1217.97 1734.87,1217.97 1735.46,1217.97 1736.05,1217.97 1736.63,1217.97 1737.22,1217.97 1737.81,1217.97 1738.39,1217.97 1738.98,1217.97 1739.57,1217.97 1740.15,1217.97 1740.74,1217.97 1741.32,1217.97 1741.91,1217.97 1742.5,1217.97 1743.08,1217.97 1743.67,1217.97 1744.26,1217.97 1744.84,1217.97 1745.43,1217.97 1746.02,1217.97 1746.6,1217.97 1747.19,1217.97 1747.78,1217.97 1748.36,1217.97 1748.95,1217.97 1749.53,1217.97 1750.12,1217.97 1750.71,1217.97 1751.29,1217.97 1751.88,1217.97 1752.47,1217.97 1753.05,1217.97 1753.64,1217.97 1754.23,1217.97 1754.81,1217.97 1755.4,1217.97 1755.99,1217.97 1756.57,1217.97 1757.16,1217.97 1757.74,1217.97 1758.33,1217.97 1758.92,1217.97 1759.5,1217.97 1760.09,1217.97 1760.68,1217.97 1761.26,1217.97 1761.85,1217.97 1762.44,1217.97 1763.02,1217.97 1763.61,1217.97 1764.19,1217.97 1764.78,1217.97 1765.37,1217.97 1765.95,1217.97 1766.54,1217.97 1767.13,1217.97 1767.71,1217.97 1768.3,1217.97 1768.89,1217.97 1769.47,1217.97 1770.06,1217.97 1770.65,1217.97 1771.23,1217.97 1771.82,1217.97 1772.4,1217.97 1772.99,1217.97 1773.58,1217.97 1774.16,1217.97 1774.75,1217.97 1775.34,1217.97 1775.92,1217.97 1776.51,1217.97 1777.1,1217.97 1777.68,1217.97 1778.27,1217.97 1778.86,1217.97 1779.44,1217.97 1780.03,1217.97 1780.61,1217.97 1781.2,1217.97 1781.79,1217.97 1782.37,1217.97 1782.96,1217.97 1783.55,1217.97 1784.13,1217.97 1784.72,1217.97 1785.31,1217.97 1785.89,1217.97 1786.48,1217.97 1787.06,1217.97 1787.65,1217.97 1788.24,1217.97 1788.82,1217.97 1789.41,1217.97 1790,1217.97 1790.58,1217.97 1791.17,1217.97 1791.76,1217.97 1792.34,1217.97 1792.93,1217.97 1793.52,1217.97 1794.1,1217.97 1794.69,1217.97 1795.27,1217.97 1795.86,1217.97 1796.45,1217.97 1797.03,1217.97 1797.62,1217.97 1798.21,1217.97 1798.79,1217.97 1799.38,1217.97 1799.97,1217.97 1800.55,1217.97 1801.14,1217.97 1801.73,1217.97 1802.31,1217.97 1802.9,1217.97 1803.48,1217.97 1804.07,1217.97 1804.66,1217.97 1805.24,1217.97 1805.83,1217.97 1806.42,1217.97 1807,1217.97 1807.59,1217.97 1808.18,1217.97 1808.76,1217.97 1809.35,1217.97 1809.94,1217.97 1810.52,1217.97 1811.11,1217.97 1811.69,1217.97 1812.28,1217.97 1812.87,1217.97 1813.45,1217.97 1814.04,1217.97 1814.63,1217.97 1815.21,1217.97 1815.8,1217.97 1816.39,1217.97 1816.97,1217.97 1817.56,1217.97 1818.14,1217.97 1818.73,1217.97 1819.32,1217.97 1819.9,1217.97 1820.49,1217.97 1821.08,1217.97 1821.66,1217.97 1822.25,1217.97 1822.84,1217.97 1823.42,1217.97 1824.01,1217.97 1824.6,1217.97 1825.18,1217.97 1825.77,1217.97 1826.35,1217.97 1826.94,1217.97 1827.53,1217.97 1828.11,1217.97 1828.7,1217.97 1829.29,1217.97 1829.87,1217.97 1830.46,1217.97 1831.05,1217.97 1831.63,1217.97 1832.22,1217.97 1832.81,1217.97 1833.39,1217.97 1833.98,1217.97 1834.56,1217.97 1835.15,1217.97 1835.74,1217.97 1836.32,1217.97 1836.91,1217.97 1837.5,1217.97 1838.08,1217.97 1838.67,1217.97 1839.26,1217.97 1839.84,1217.97 1840.43,1217.97 1841.01,1217.97 1841.6,1217.97 1842.19,1217.97 1842.77,1217.97 1843.36,1217.97 1843.95,1217.97 1844.53,1217.97 1845.12,1217.97 1845.71,1217.97 1846.29,1217.97 1846.88,1217.97 1847.47,1217.97 1848.05,1217.97 1848.64,1217.97 1849.22,1217.97 1849.81,1217.97 1850.4,1217.97 1850.98,1217.97 1851.57,1217.97 1852.16,1217.97 1852.74,1217.97 1853.33,1217.97 1853.92,1217.97 1854.5,1217.97 1855.09,1217.97 1855.68,1217.97 1856.26,1217.97 1856.85,1217.97 1857.43,1217.97 1858.02,1217.97 1858.61,1217.97 1859.19,1217.97 1859.78,1217.97 1860.37,1217.97 1860.95,1217.97 1861.54,1217.97 1862.13,1217.97 1862.71,1217.97 1863.3,1217.97 1863.88,1217.97 1864.47,1217.97 1865.06,1217.97 1865.64,1217.97 1866.23,1217.97 1866.82,1217.97 1867.4,1217.97 1867.99,1217.97 1868.58,1217.97 1869.16,1217.97 1869.75,1217.97 1870.34,1217.97 1870.92,1217.97 1871.51,1217.97 1872.09,1217.97 1872.68,1217.97 1873.27,1217.97 1873.85,1217.97 1874.44,1217.97 1875.03,1217.97 1875.61,1217.97 1876.2,1217.97 1876.79,1217.97 1877.37,1217.97 1877.96,1217.97 1878.55,1217.97 1879.13,1217.97 1879.72,1217.97 1880.3,1217.97 1880.89,1217.97 1881.48,1217.97 1882.06,1217.97 1882.65,1217.97 1883.24,1217.97 1883.82,1217.97 1884.41,1217.97 1885,1217.97 1885.58,1217.97 1886.17,1217.97 1886.76,1217.97 1887.34,1217.97 1887.93,1217.97 1888.51,1217.97 1889.1,1217.97 1889.69,1217.97 1890.27,1217.97 1890.86,1217.97 1891.45,1217.97 1892.03,1217.97 1892.62,1217.97 1893.21,1217.97 1893.79,1217.97 1894.38,1217.97 1894.96,1217.97 1895.55,1217.97 1896.14,1217.97 1896.72,1217.97 1897.31,1217.97 1897.9,1217.97 1898.48,1217.97 1899.07,1217.97 1899.66,1217.97 1900.24,1217.97 1900.83,1217.97 1901.42,1217.97 1902,1217.97 1902.59,1217.97 1903.17,1217.97 1903.76,1217.97 1904.35,1217.97 1904.93,1217.97 1905.52,1217.97 1906.11,1217.97 1906.69,1217.97 1907.28,1217.97 1907.87,1217.97 1908.45,1217.97 1909.04,1217.97 1909.63,1217.97 1910.21,1217.97 1910.8,1217.97 1911.38,1217.97 1911.97,1217.97 1912.56,1217.97 1913.14,1217.97 1913.73,1217.97 1914.32,1217.97 1914.9,1217.97 1915.49,1217.97 1916.08,1217.97 1916.66,1217.97 1917.25,1217.97 1917.83,1217.97 1918.42,1217.97 1919.01,1217.97 1919.59,1217.97 1920.18,1217.97 1920.77,1217.97 1921.35,1217.97 1921.94,1217.97 1922.53,1217.97 1923.11,1217.97 1923.7,1217.97 1924.29,1217.97 1924.87,1217.97 1925.46,1217.97 1926.04,1217.97 1926.63,1217.97 1927.22,1217.97 1927.8,1217.97 1928.39,1217.97 1928.98,1217.97 1929.56,1217.97 1930.15,1217.97 1930.74,1217.97 1931.32,1217.97 1931.91,1217.97 1932.5,1217.97 1933.08,1217.97 1933.67,1217.97 1934.25,1217.97 1934.84,1217.97 1935.43,1217.97 1936.01,1217.97 1936.6,1217.97 1937.19,1217.97 1937.77,1217.97 1938.36,1217.97 1938.95,1217.97 1939.53,1217.97 1940.12,1217.97 1940.71,1217.97 1941.29,1217.97 1941.88,1217.97 1942.46,1217.97 1943.05,1217.97 1943.64,1217.97 1944.22,1217.97 1944.81,1217.97 1945.4,1217.97 1945.98,1217.97 1946.57,1217.97 1947.16,1217.97 1947.74,1217.97 1948.33,1217.97 1948.91,1217.97 1949.5,1217.97 1950.09,1217.97 1950.67,1217.97 1951.26,1217.97 1951.85,1217.97 1952.43,1217.97 1953.02,1217.97 1953.61,1217.97 1954.19,1217.97 1954.78,1217.97 1955.37,1217.97 1955.95,1217.97 1956.54,1217.97 1957.12,1217.97 1957.71,1217.97 1958.3,1217.97 1958.88,1217.97 1959.47,1217.97 1960.06,1217.97 1960.64,1217.97 1961.23,1217.97 1961.82,1217.97 1962.4,1217.97 1962.99,1217.97 1963.58,1217.97 1964.16,1217.97 1964.75,1217.97 1965.33,1217.97 1965.92,1217.97 1966.51,1217.97 1967.09,1217.97 1967.68,1217.97 1968.27,1217.97 1968.85,1217.97 1969.44,1217.97 1970.03,1217.97 1970.61,1217.97 1971.2,1217.97 1971.78,1217.97 1972.37,1217.97 1972.96,1217.97 1973.54,1217.97 1974.13,1217.97 1974.72,1217.97 1975.3,1217.97 1975.89,1217.97 1976.48,1217.97 1977.06,1217.97 1977.65,1217.97 1978.24,1217.97 1978.82,1217.97 1979.41,1217.97 1979.99,1217.97 1980.58,1217.97 1981.17,1217.97 1981.75,1217.97 1982.34,1217.97 1982.93,1217.97 1983.51,1217.97 1984.1,1217.97 1984.69,1217.97 1985.27,1217.97 1985.86,1217.97 1986.45,1217.97 1987.03,1217.97 1987.62,1217.97 1988.2,1217.97 1988.79,1217.97 1989.38,1217.97 1989.96,1217.97 1990.55,1217.97 1991.14,1217.97 1991.72,1217.97 1992.31,1217.97 1992.9,1217.97 1993.48,1217.97 1994.07,1217.97 1994.65,1217.97 1995.24,1217.97 1995.83,1217.97 1996.41,1217.97 1997,1217.97 1997.59,1217.97 1998.17,1217.97 1998.76,1217.97 1999.35,1217.97 1999.93,1217.97 2000.52,1217.97 2001.11,1217.97 2001.69,1217.97 2002.28,1217.97 2002.86,1217.97 2003.45,1217.97 2004.04,1217.97 2004.62,1217.97 2005.21,1217.97 2005.8,1217.97 2006.38,1217.97 2006.97,1217.97 2007.56,1217.97 2008.14,1217.97 2008.73,1217.97 2009.32,1217.97 2009.9,1217.97 2010.49,1217.97 2011.07,1217.97 2011.66,1217.97 2012.25,1217.97 2012.83,1217.97 2013.42,1217.97 2014.01,1217.97 2014.59,1217.97 2015.18,1217.97 2015.77,1217.97 2016.35,1217.97 2016.94,1217.97 2017.53,1217.97 2018.11,1217.97 2018.7,1217.97 2019.28,1217.97 2019.87,1217.97 2020.46,1217.97 2021.04,1217.97 2021.63,1217.97 2022.22,1217.97 2022.8,1217.97 2023.39,1217.97 2023.98,1217.97 2024.56,1217.97 2025.15,1217.97 2025.73,1217.97 2026.32,1217.97 2026.91,1217.97 2027.49,1217.97 2028.08,1217.97 2028.67,1217.97 2029.25,1217.97 2029.84,1217.97 2030.43,1217.97 2031.01,1217.97 2031.6,1217.97 2032.19,1217.97 2032.77,1217.97 2033.36,1217.97 2033.94,1217.97 2034.53,1217.97 2035.12,1217.97 2035.7,1217.97 2036.29,1217.97 2036.88,1217.97 2037.46,1217.97 2038.05,1217.97 2038.64,1217.97 2039.22,1217.97 2039.81,1217.97 2040.4,1217.97 2040.98,1217.97 2041.57,1217.97 2042.15,1217.97 2042.74,1217.97 2043.33,1217.97 2043.91,1217.97 2044.5,1217.97 2045.09,1217.97 2045.67,1217.97 2046.26,1217.97 2046.85,1217.97 2047.43,1217.97 2048.02,1217.97 2048.6,1217.97 2049.19,1217.97 2049.78,1217.97 2050.36,1217.97 2050.95,1217.97 2051.54,1217.97 2052.12,1217.97 2052.71,1217.97 2053.3,1217.97 2053.88,1217.97 2054.47,1217.97 2055.06,1217.97 2055.64,1217.97 2056.23,1217.97 2056.81,1217.97 2057.4,1217.97 2057.99,1217.97 2058.57,1217.97 2059.16,1217.97 2059.75,1217.97 2060.33,1217.97 2060.92,1217.97 2061.51,1217.97 2062.09,1217.97 2062.68,1217.97 2063.27,1217.97 2063.85,1217.97 2064.44,1217.97 2065.02,1217.97 2065.61,1217.97 2066.2,1217.97 2066.78,1217.97 2067.37,1217.97 2067.96,1217.97 2068.54,1217.97 2069.13,1217.97 2069.72,1217.97 2070.3,1217.97 2070.89,1217.97 2071.48,1217.97 2072.06,1217.97 2072.65,1217.97 2073.23,1217.97 2073.82,1217.97 2074.41,1217.97 2074.99,1217.97 2075.58,1217.97 2076.17,1217.97 2076.75,1217.97 2077.34,1217.97 2077.93,1217.97 2078.51,1217.97 2079.1,1217.97 2079.68,1217.97 2080.27,1217.97 2080.86,1217.97 2081.44,1217.97 2082.03,1217.97 2082.62,1217.97 2083.2,1217.97 2083.79,1217.97 2084.38,1217.97 2084.96,1217.97 2085.55,1217.97 2086.14,1217.97 2086.72,1217.97 2087.31,1217.97 2087.89,1217.97 2088.48,1217.97 2089.07,1217.97 2089.65,1217.97 2090.24,1217.97 2090.83,1217.97 2091.41,1217.97 2092,1217.97 2092.59,1217.97 2093.17,1217.97 2093.76,1217.97 2094.35,1217.97 2094.93,1217.97 2095.52,1217.97 2096.1,1217.97 2096.69,1217.97 2097.28,1217.97 2097.86,1217.97 2098.45,1217.97 2099.04,1217.97 2099.62,1217.97 2100.21,1217.97 2100.8,1217.97 2101.38,1217.97 2101.97,1217.97 2102.55,1217.97 2103.14,1217.97 2103.73,1217.97 2104.31,1217.97 2104.9,1217.97 2105.49,1217.97 2106.07,1217.97 2106.66,1217.97 2107.25,1217.97 2107.83,1217.97 2108.42,1217.97 2109.01,1217.97 2109.59,1217.97 2110.18,1217.97 2110.76,1217.97 2111.35,1217.97 2111.94,1217.97 2112.52,1217.97 2113.11,1217.97 2113.7,1217.97 2114.28,1217.97 2114.87,1217.97 2115.46,1217.97 2116.04,1217.97 2116.63,1217.97 2117.22,1217.97 2117.8,1217.97 2118.39,1217.97 2118.97,1217.97 2119.56,1217.97 2120.15,1217.97 2120.73,1217.97 2121.32,1217.97 2121.91,1217.97 2122.49,1217.97 2123.08,1217.97 2123.67,1217.97 2124.25,1217.97 2124.84,1217.97 2125.42,1217.97 2126.01,1217.97 2126.6,1217.97 2127.18,1217.97 2127.77,1217.97 2128.36,1217.97 2128.94,1217.97 2129.53,1217.97 2130.12,1217.97 2130.7,1217.97 2131.29,1217.97 2131.88,1217.97 2132.46,1217.97 2133.05,1217.97 2133.63,1217.97 2134.22,1217.97 2134.81,1217.97 2135.39,1217.97 2135.98,1217.97 2136.57,1217.97 2137.15,1217.97 2137.74,1217.97 2138.33,1217.97 2138.91,1217.97 2139.5,1217.97 2140.09,1217.97 2140.67,1217.97 2141.26,1217.97 2141.84,1217.97 2142.43,1217.97 2143.02,1217.97 2143.6,1217.97 2144.19,1217.97 2144.78,1217.97 2145.36,1217.97 2145.95,1217.97 2146.54,1217.97 2147.12,1217.97 2147.71,1217.97 2148.3,1217.97 2148.88,1217.97 2149.47,1217.97 2150.05,1217.97 2150.64,1217.97 2151.23,1217.97 2151.81,1217.97 2152.4,1217.97 2152.99,1217.97 2153.57,1217.97 2154.16,1217.97 2154.75,1217.97 2155.33,1217.97 2155.92,1217.97 2156.5,1217.97 2157.09,1217.97 2157.68,1217.97 2158.26,1217.97 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.69,1200.97 1398.08,899.083 \"/>\n<polyline clip-path=\"url(#clip952)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1234.55 985.439,1200.97 2158.26,1200.97 2158.26,1234.55 985.439,1234.55 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip950)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip950)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip953\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip950)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip950)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip950)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip953)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9682.55 167.147,-8263.18 167.706,-8863.35 168.266,-9403.45 168.825,-9887.35 169.384,-10318.7 169.943,-10685.7 170.503,-11022.9 171.062,-11317.1 171.621,-11571.3 172.18,-11772.4 172.74,-11955.1 173.299,-12097.3 173.858,-12217.5 174.417,-12302.5 174.977,-11517.2 175.536,-11581.4 176.095,-11601.1 176.655,-11276.6 177.214,-11279 177.773,-10962.6 178.332,-10660.7 178.892,-10357.5 179.451,-10326.1 180.01,-10269.6 180.569,-10204.8 181.129,-9924.53 181.688,-9479 182.247,-9238.99 182.806,-9164.34 183.366,-9071.87 183.925,-8822.32 184.484,-8314.11 185.043,-8244.12 185.603,-8039.02 186.162,-7842.61 186.721,-7634.66 187.28,-7419.24 187.84,-6917.88 188.399,-6734.49 188.958,-6453.03 189.517,-6359.36 190.077,-6184.57 190.636,-6099.38 191.195,-5921.87 191.754,-5825.47 192.314,-5588.08 192.873,-5356.93 193.432,-5268.88 193.991,-5116.04 194.551,-4902.45 195.11,-4761.86 195.669,-4563.33 196.228,-4484.05 196.788,-4343.03 197.347,-4257.15 197.906,-4119.77 198.465,-3889.3 199.025,-3717.57 199.584,-3638.33 200.143,-3515.8 200.702,-3355.08 201.262,-3278.35 201.821,-3168.25 202.38,-3013.3 202.939,-2905.51 203.499,-2763.75 204.058,-2625.49 204.617,-2566.91 205.176,-2506.5 205.736,-2303.66 206.295,-2179.93 206.854,-2092.81 207.413,-1942.85 207.973,-1828.31 208.532,-1683.35 209.091,-1518.97 209.65,-1448.89 210.21,-1353.08 210.769,-1288.48 211.328,-1247.22 211.887,-1208.07 212.447,-1139.95 213.006,-1074.7 213.565,-1010.9 214.124,-951.261 214.684,-894.749 215.243,-836.373 215.802,-800.703 216.361,-722.922 216.921,-671.689 217.48,-587.579 218.039,-562.193 218.598,-487.705 219.158,-439.478 219.717,-389.335 220.276,-342.873 220.835,-321.281 221.395,-298.063 221.954,-252.16 222.513,-205.128 223.072,-182.103 223.632,-69.8969 224.191,-32.9991 224.75,7.78989 225.309,45.6422 225.869,43.2856 226.428,84.3996 226.987,124.58 227.546,202.496 228.106,215.079 228.665,268.884 229.224,300.481 229.783,351.859 230.343,399.966 230.902,446.236 231.461,469.669 232.02,477.787 232.58,522.46 233.139,548.301 233.698,607.101 234.257,628.719 234.817,625.455 235.376,630.185 235.935,651.01 236.494,655.704 237.054,658.968 237.613,659.547 238.172,696.757 238.731,740.067 239.291,755.957 239.85,739.916 240.409,775.413 240.968,775.361 241.528,775.694 242.087,811.09 242.646,842.748 243.205,892.696 243.765,925.137 244.324,915.515 244.883,946.125 245.442,922.87 246.002,916.849 246.561,927.866 247.12,937.109 247.679,933.418 248.239,924.103 248.798,972.504 249.357,967.717 249.916,977.789 250.476,1006.88 251.035,1018.31 251.594,1010.92 252.153,1022.39 252.713,1012.92 253.272,1004.29 253.831,978.069 254.39,1004.27 254.95,983.828 255.509,979.592 256.068,1008.43 256.627,1036.31 257.187,1049.2 257.746,1024.45 258.305,1052.3 258.864,1062.49 259.424,1040.14 259.983,1098.93 260.542,1106.93 261.101,1097.91 261.661,1100.65 262.22,1069.84 262.779,1042.41 263.338,1052.03 263.898,1046.09 264.457,1018.34 265.016,1045.77 265.575,1004.79 266.135,1016.12 266.694,1039.99 267.253,1014.81 267.812,973.089 268.372,1003.21 268.931,995.358 269.49,994.97 270.049,1010.29 270.609,1020.39 271.168,1051.02 271.727,1041.41 272.286,1068.48 272.846,1060.85 273.405,1054.87 273.964,1032.06 274.523,1076.05 275.083,1069.53 275.642,1080.41 276.201,1057.29 276.76,1066.4 277.32,1029.46 277.879,973.79 278.438,971.338 278.997,985.222 279.557,1019.67 280.116,1015.14 280.675,979.897 281.234,979.168 281.794,959.335 282.353,954.08 282.912,967.933 283.471,947.866 284.031,963.376 284.59,958.925 285.149,956.73 285.708,972.708 286.268,936.824 286.827,919.166 287.386,956.371 287.945,974.153 288.505,988.458 289.064,987.182 289.623,1017.05 290.182,1030.27 290.742,1040.92 291.301,1050.38 291.86,1043.02 292.419,1035.4 292.979,1046.4 293.538,1007.66 294.097,1036.5 294.656,1045.59 295.216,1056.27 295.775,1062.55 296.334,1053.74 296.893,1042.89 297.453,1019.44 298.012,1032.5 298.571,1027.83 299.13,1003.12 299.69,996.982 300.249,1011.58 300.808,1005.76 301.368,999.634 301.927,981.367 302.486,994.587 303.045,992.479 303.605,1006.39 304.164,999.646 304.723,1030.88 305.282,1006.04 305.842,1002.43 306.401,1033.83 306.96,1026.43 307.519,1021.19 308.079,978.54 308.638,971.469 309.197,967.512 309.756,948.88 310.316,959.796 310.875,954.988 311.434,948.901 311.993,961.801 312.553,953.996 313.112,964.361 313.671,976.136 314.23,1004.06 314.79,1030.52 315.349,1009.39 315.908,1001.51 316.467,994.547 317.027,972.467 317.586,982.345 318.145,979.281 318.704,957.258 319.264,1001.77 319.823,1011.34 320.382,1019.99 320.941,1029.68 321.501,1053.97 322.06,1045.76 322.619,1017.76 323.178,1040.38 323.738,1000.08 324.297,991.827 324.856,969.968 325.415,996.421 325.975,1006.03 326.534,1016.4 327.093,1026.34 327.652,1018.65 328.212,1006.55 328.771,1032.94 329.33,1026.06 329.889,1035.05 330.449,1025.94 331.008,1016.82 331.567,1041.73 332.126,1030.93 332.686,986.839 333.245,995.981 333.804,987.988 334.363,997.944 334.923,1025.67 335.482,1033.69 336.041,1073.14 336.6,1043.17 337.16,1030.64 337.719,1037.33 338.278,1011.48 338.837,1052.22 339.397,1026.04 339.956,996.556 340.515,1017.66 341.074,957.29 341.634,936.045 342.193,916.893 342.752,946.588 343.311,960.449 343.871,937.098 344.43,932.378 344.989,894.447 345.548,906.921 346.108,917.409 346.667,896.873 347.226,892.715 347.785,905.691 348.345,889.15 348.904,886.684 349.463,920.361 350.022,927.622 350.582,970.064 351.141,962.011 351.7,970.743 352.259,999.15 352.819,972.196 353.378,965.115 353.937,958.425 354.496,965.725 355.056,986.37 355.615,977.141 356.174,966.987 356.733,923.617 357.293,884.669 357.852,899.025 358.411,877.296 358.97,839.294 359.53,821.941 360.089,836.506 360.648,851.8 361.207,835.397 361.767,832.828 362.326,847.458 362.885,860.008 363.444,823.094 364.004,804.121 364.563,800.171 365.122,831.275 365.681,830.654 366.241,828.874 366.8,827.427 367.359,840.917 367.918,855.744 368.478,856.877 369.037,867.306 369.596,863.305 370.155,857.549 370.715,806.967 371.274,807.696 371.833,807.509 372.392,793.607 372.952,827.28 373.511,859.844 374.07,856.168 374.629,870.662 375.189,882.307 375.748,863.138 376.307,861.578 376.866,856.657 377.426,867.935 377.985,846.959 378.544,827.26 379.103,810.316 379.663,791.002 380.222,778.505 380.781,780.084 381.34,779.982 381.9,765.811 382.459,766.008 383.018,754.817 383.577,738.491 384.137,757.449 384.696,745.952 385.255,764.529 385.814,794.695 386.374,779.589 386.933,764.509 387.492,755.304 388.051,776.697 388.611,762.035 389.17,748.56 389.729,734.304 390.288,738.526 390.848,744.132 391.407,762.157 391.966,777.162 392.525,798.03 393.085,795.663 393.644,778.062 394.203,794.075 394.762,793.327 395.322,775.022 395.881,761.172 396.44,747.749 396.999,765.818 397.559,802.326 398.118,803.267 398.677,800.863 399.236,801.079 399.796,784.902 400.355,819.074 400.914,800.942 401.473,832.331 402.033,908.636 402.592,900.475 403.151,907.54 403.71,914.428 404.27,892.842 404.829,866.931 405.388,876.325 405.947,918.397 406.507,897.591 407.066,877.157 407.625,873.832 408.184,899.877 408.744,892.751 409.303,919.435 409.862,909.741 410.421,903.423 410.981,911.818 411.54,903.567 412.099,881.26 412.658,845.723 413.218,838.09 413.777,864.139 414.336,843.455 414.895,840.74 415.455,823.047 416.014,822.499 416.573,851.165 417.132,844.867 417.692,873.747 418.251,867.113 418.81,865.949 419.369,826.431 419.929,823.053 420.488,803.326 421.047,783.179 421.606,815.021 422.166,796.32 422.725,774.765 423.284,770.309 423.843,803.503 424.403,798.872 424.962,795.532 425.521,824.367 426.08,851.201 426.64,845.21 427.199,858.843 427.758,849.948 428.318,795.23 428.877,790.194 429.436,806.228 429.995,802.497 430.555,798.427 431.114,794.235 431.673,777.369 432.232,790.568 432.792,757.791 433.351,776.843 433.91,793.251 434.469,772.745 435.029,770.177 435.588,807.058 436.147,805.274 436.706,821.407 437.266,849.78 437.825,861.338 438.384,875.307 438.943,853.309 439.503,853.083 440.062,849.355 440.621,860.462 441.18,837.44 441.74,847.314 442.299,841.237 442.858,804.426 443.417,867.704 443.977,861.978 444.536,840.865 445.095,864.5 445.654,810.578 446.214,807.271 446.773,804.498 447.332,785.788 447.891,800.236 448.451,766.495 449.01,766.353 449.569,767.615 450.128,783.081 450.688,749.056 451.247,735.459 451.806,735.68 452.365,788.491 452.925,803.117 453.484,798.179 454.043,798.302 454.602,824.928 455.162,818.533 455.721,798.574 456.28,798.162 456.839,791.996 457.399,776.449 457.958,794.005 458.517,775.2 459.076,740.533 459.636,722.048 460.195,724.509 460.754,689.662 461.313,692.624 461.873,728.125 462.432,692.724 462.991,691.847 463.55,711.945 464.11,745.625 464.669,741.374 465.228,738.167 465.787,771.244 466.347,751.458 466.906,752.283 467.465,736.725 468.024,739.674 468.584,739.72 469.143,758.137 469.702,755.879 470.261,741.317 470.821,755.023 471.38,798.827 471.939,814.922 472.498,828.224 473.058,826.499 473.617,820.969 474.176,816.702 474.735,785.096 475.295,782.052 475.854,762.301 476.413,760.691 476.972,759.544 477.532,758.542 478.091,756.194 478.65,736.623 479.209,700.176 479.769,716.254 480.328,769.324 480.887,748.028 481.446,766.214 482.006,794.882 482.565,794.072 483.124,807.705 483.683,820.895 484.243,817.572 484.802,798.316 485.361,758.948 485.92,740.605 486.48,740.277 487.039,725.013 487.598,725.308 488.157,725.299 488.717,724.863 489.276,722.206 489.835,708.365 490.394,708.497 490.954,690.985 491.513,695.043 492.072,713.371 492.631,710.813 493.191,711.268 493.75,712.211 494.309,744.625 494.868,774.846 495.428,757.304 495.987,756.028 496.546,756.121 497.105,773.874 497.665,792.332 498.224,786.423 498.783,768.43 499.342,798.614 499.902,859.455 500.461,868.867 501.02,827.275 501.579,835.393 502.139,847.981 502.698,842.343 503.257,821.753 503.816,817.939 504.376,779.274 504.935,742.933 505.494,746.282 506.053,776.455 506.613,790.336 507.172,802.462 507.731,812.875 508.29,804.47 508.85,751.291 509.409,686.95 509.968,670.766 510.527,675.564 511.087,676.854 511.646,680.651 512.205,649.763 512.764,667.343 513.324,669.452 513.883,688.082 514.442,688.079 515.001,672.869 515.561,659.982 516.12,679.901 516.679,695.928 517.238,712.861 517.798,728.278 518.357,742.232 518.916,737.983 519.475,754.229 520.035,752.641 520.594,753.57 521.153,753.476 521.712,768.17 522.272,715.909 522.831,700.271 523.39,734.883 523.949,734.934 524.509,702.589 525.068,687.404 525.627,689.848 526.186,672.587 526.746,692.339 527.305,662.454 527.864,666.566 528.423,718.697 528.983,702.503 529.542,705.26 530.101,738.916 530.66,736.419 531.22,737.021 531.779,754.154 532.338,720.35 532.897,753.903 533.457,756.069 534.016,774.668 534.575,789.606 535.134,787.204 535.694,787.066 536.253,752.275 536.812,749.635 537.371,748.396 537.931,749.671 538.49,749.846 539.049,732.336 539.608,747.547 540.168,777.065 540.727,756.235 541.286,734.616 541.845,718.517 542.405,703.934 542.964,703.876 543.523,717.354 544.082,687.779 544.642,687.137 545.201,705.202 545.76,670.834 546.319,657.79 546.879,661.178 547.438,680.283 547.997,699.608 548.556,700.893 549.116,704.705 549.675,654.819 550.234,625.458 550.793,661.227 551.353,664.449 551.912,682.921 552.471,715.268 553.031,699.441 553.59,686.583 554.149,668.555 554.708,673.26 555.268,673.667 555.827,676.932 556.386,644.123 556.945,680.342 557.505,702.24 558.064,703.121 558.623,720.25 559.182,722.014 559.742,722.854 560.301,735.018 560.86,749.777 561.419,767.77 561.979,751.124 562.538,731.659 563.097,729.007 563.656,746.311 564.216,766.26 564.775,781.41 565.334,779.329 565.893,791.416 566.453,791.139 567.012,798.78 567.571,793.879 568.13,792.676 568.69,788.383 569.249,802.624 569.808,811.77 570.367,793.889 570.927,820.64 571.486,810.752 572.045,788.045 572.604,802.787 573.164,843.995 573.723,824.06 574.282,804.028 574.841,799.488 575.401,727.816 575.96,710.017 576.519,677.753 577.078,696.014 577.638,664.843 578.197,718.261 578.756,733.374 579.315,700.994 579.875,704.017 580.434,706.286 580.993,702.716 581.552,669.307 582.112,685.667 582.671,719.611 583.23,719.782 583.789,737.461 584.349,720.249 584.908,721.709 585.467,719.613 586.026,719.248 586.586,733.367 587.145,698.826 587.704,696.179 588.263,710.807 588.823,728.277 589.382,745.991 589.941,757.911 590.5,709.044 591.06,675.967 591.619,658.082 592.178,675.478 592.737,692.697 593.297,678.259 593.856,663.765 594.415,670.732 594.974,656.926 595.534,690.971 596.093,676.042 596.652,697.222 597.211,717.021 597.771,715.011 598.33,676.99 598.889,681.117 599.448,651.72 600.008,622.778 600.567,647.624 601.126,652.641 601.685,654.14 602.245,672.56 602.804,659.56 603.363,675.788 603.922,696.421 604.482,714.912 605.041,714.968 605.6,698.118 606.159,714.369 606.719,712.842 607.278,695.765 607.837,697.203 608.396,684.491 608.956,733.654 609.515,732.911 610.074,721.705 610.633,734.909 611.193,698.55 611.752,712.568 612.311,683.666 612.87,654.621 613.43,656.557 613.989,661.291 614.548,681.03 615.107,734.399 615.667,670.468 616.226,690.865 616.785,691.1 617.344,692.248 617.904,725.599 618.463,724.58 619.022,705.494 619.581,689.28 620.141,754.722 620.7,747.591 621.259,744.717 621.818,775.005 622.378,737.021 622.937,705.473 623.496,690.255 624.055,690.373 624.615,704.891 625.174,706.249 625.733,709.181 626.292,711.917 626.852,742.437 627.411,760.297 627.97,770.045 628.529,750.892 629.089,765.699 629.648,780.076 630.207,776.13 630.766,759.648 631.326,739.498 631.885,737.144 632.444,716.686 633.003,701.268 633.563,682.974 634.122,634.258 634.681,637.301 635.24,622.668 635.8,610.716 636.359,617.045 636.918,604.465 637.477,608.889 638.037,614.012 638.596,604.571 639.155,642.907 639.714,645.415 640.274,664.15 640.833,651.923 641.392,653.066 641.951,640.246 642.511,645.179 643.07,629.219 643.629,649.213 644.188,668.907 644.748,670.34 645.307,690.382 645.866,709.317 646.425,694.58 646.985,664.764 647.544,650.609 648.103,671.004 648.662,720.63 649.222,651.207 649.781,653.378 650.34,688.452 650.899,688.908 651.459,690.109 652.018,706.014 652.577,721.904 653.136,736.852 653.696,749.608 654.255,745.871 654.814,757.273 655.373,739.927 655.933,737.376 656.492,764.788 657.051,761.876 657.61,758.35 658.17,753.82 658.729,779.68 659.288,777.068 659.847,774.82 660.407,783.502 660.966,778.009 661.525,775.979 662.084,755.429 662.644,786.735 663.203,796.085 663.762,807.645 664.321,845.583 664.881,871.85 665.44,849.205 665.999,841.98 666.558,803.602 667.118,785.106 667.677,830.963 668.236,811.165 668.795,791.964 669.355,804.811 669.914,815.312 670.473,808.946 671.032,800.649 671.592,793.806 672.151,818.427 672.71,824.36 673.269,864.703 673.829,824.163 674.388,800.952 674.947,794.659 675.506,790.576 676.066,717.734 676.625,733.638 677.184,714.653 677.743,746.537 678.303,745.204 678.862,739.358 679.421,737.812 679.981,688.163 680.54,687.672 681.099,688.827 681.658,720.119 682.218,719.366 682.777,702.904 683.336,689.044 683.895,689.683 684.455,676.151 685.014,693.821 685.573,648.011 686.132,652.564 686.692,671.655 687.251,687.255 687.81,668.927 688.369,671.669 688.929,625.708 689.488,580.577 690.047,572.173 690.606,577.227 691.166,552.757 691.725,549.65 692.284,555.843 692.843,548.151 693.403,555.235 693.962,564.211 694.521,589.175 695.08,593.685 695.64,616.614 696.199,636.156 696.758,636.248 697.317,606.956 697.877,609.356 698.436,610.989 698.995,615.782 699.554,605.83 700.114,612.458 700.673,635.421 701.232,621.839 701.791,658.574 702.351,662.237 702.91,613.853 703.469,634.226 704.028,652.866 704.588,673.266 705.147,676.069 705.706,694.969 706.265,711.686 706.825,707.867 707.384,720.56 707.943,736.837 708.502,715.671 709.062,695.709 709.621,662.459 710.18,676.33 710.739,629.886 711.299,634.224 711.858,619.271 712.417,579.459 712.976,618.57 713.536,620.049 714.095,608.742 714.654,629.6 715.213,636.768 715.773,642.258 716.332,629.754 716.891,620.336 717.45,626.666 718.01,628.877 718.569,631.307 719.128,633.7 719.687,670.957 720.247,703.564 720.806,703.256 721.365,687.128 721.924,737.141 722.484,733.455 723.043,730.78 723.602,729.426 724.161,750.408 724.721,749.389 725.28,762.906 725.839,758.364 726.398,770.54 726.958,720.32 727.517,734.202 728.076,747.238 728.635,730.627 729.195,748.166 729.754,758.924 730.313,771.17 730.872,748.083 731.432,761.801 731.991,722.332 732.55,721.637 733.109,721.594 733.669,723.251 734.228,720.012 734.787,718.918 735.346,732.854 735.906,745.179 736.465,710.157 737.024,742.939 737.583,743.64 738.143,761.285 738.702,743.665 739.261,723.23 739.82,706.402 740.38,708.223 740.939,706.088 741.498,687.886 742.057,672.273 742.617,689.723 743.176,702.108 743.735,752.729 744.294,732.214 744.854,749.211 745.413,758.375 745.972,769.996 746.531,749.243 747.091,760.621 747.65,739.101 748.209,752.528 748.768,730.399 749.328,697.935 749.887,696.972 750.446,633.695 751.005,603.828 751.565,639.734 752.124,657.237 752.683,656.991 753.242,656.136 753.802,692.558 754.361,697.925 754.92,683.162 755.479,681.845 756.039,683.621 756.598,683.856 757.157,666.904 757.716,667.937 758.276,671.493 758.835,670.759 759.394,673.033 759.953,656.759 760.513,707.993 761.072,705.858 761.631,707.215 762.19,736.954 762.75,747.655 763.309,746.725 763.868,807.772 764.427,853.12 764.987,830.038 765.546,837.902 766.105,834.139 766.664,811.242 767.224,789.873 767.783,767.825 768.342,734.965 768.901,734.651 769.461,745.49 770.02,741.86 770.579,706.432 771.138,719.592 771.698,734.775 772.257,717.923 772.816,716.113 773.375,731.882 773.935,730.076 774.494,744.55 775.053,744.018 775.612,739.436 776.172,689.418 776.731,656.93 777.29,671.262 777.849,687.027 778.409,670.614 778.968,642.211 779.527,709.792 780.086,691.075 780.646,675.42 781.205,672.162 781.764,670.166 782.323,672.499 782.883,657.092 783.442,628.073 784.001,645.072 784.56,678.966 785.12,662.64 785.679,632.066 786.238,620.04 786.797,590.251 787.357,576.665 787.916,584.361 788.475,584.832 789.034,589.545 789.594,610.242 790.153,634.626 790.712,666.356 791.271,684.46 791.831,673.445 792.39,720.68 792.949,719.242 793.508,735.511 794.068,718.176 794.627,700.921 795.186,684.676 795.745,687.045 796.305,687.578 796.864,704.858 797.423,753.031 797.982,734.475 798.542,715.532 799.101,714.394 799.66,648.195 800.219,650.592 800.779,651.165 801.338,668.236 801.897,634.747 802.456,634.271 803.016,655.383 803.575,611.843 804.134,585.008 804.693,557.767 805.253,551.682 805.812,557.828 806.371,566.853 806.931,573.523 807.49,597.278 808.049,590.642 808.608,595.972 809.168,587.731 809.727,593.781 810.286,633.546 810.845,656.108 811.405,660.413 811.964,663.6 812.523,699.269 813.082,713.235 813.642,714.926 814.201,719.162 814.76,734.552 815.319,763.873 815.879,760.494 816.438,772.014 816.997,783.705 817.556,780.118 818.116,791.7 818.675,786.837 819.234,786.217 819.793,781.894 820.353,792.769 820.912,739.891 821.471,719.318 822.03,730.42 822.59,760.188 823.149,773.909 823.708,735.994 824.267,734.197 824.827,717.721 825.386,714.823 825.945,713.201 826.504,710.355 827.064,722.803 827.623,721.471 828.182,704.294 828.741,674.014 829.301,710.08 829.86,710.063 830.419,726.684 830.978,723.683 831.538,705.934 832.097,701.097 832.656,699.682 833.215,683.764 833.775,681.385 834.334,663.259 834.893,664.031 835.452,644.865 836.012,664.5 836.571,680.158 837.13,694.464 837.689,691.179 838.249,722.617 838.808,751.736 839.367,760.94 839.926,786.433 840.486,764.055 841.045,744.26 841.604,745.154 842.163,774.792 842.723,788.939 843.282,784.585 843.841,778.123 844.4,773.169 844.96,803.206 845.519,816.154 846.078,807.147 846.637,800.493 847.197,764.42 847.756,740.804 848.315,724.977 848.874,740.468 849.434,752.049 849.993,669.455 850.552,697.672 851.111,695.801 851.671,707.522 852.23,722.938 852.789,709.205 853.348,756.78 853.908,769.226 854.467,778.848 855.026,759.333 855.585,720.187 856.145,654.91 856.704,652.782 857.263,607.111 857.822,609.633 858.382,613.411 858.941,612.952 859.5,633.006 860.059,655.033 860.619,670.933 861.178,659.721 861.737,663.365 862.296,632.733 862.856,617.449 863.415,639.957 863.974,625.246 864.533,627.332 865.093,645.151 865.652,613.539 866.211,633.522 866.77,670.062 867.33,670.167 867.889,670.605 868.448,670.88 869.007,699.378 869.567,713.507 870.126,713.793 870.685,746.186 871.244,726.541 871.804,690.179 872.363,677.559 872.922,664.235 873.481,665.991 874.041,651.538 874.6,650.061 875.159,653.063 875.718,670.049 876.278,702.56 876.837,734.57 877.396,687.908 877.955,656.02 878.515,691.22 879.074,674.378 879.633,675.805 880.192,693.64 880.752,693.181 881.311,676.203 881.87,694.265 882.429,710.889 882.989,707.036 883.548,675.718 884.107,662.526 884.666,681.617 885.226,696.713 885.785,681.736 886.344,679.789 886.903,726.973 887.463,726.226 888.022,688.339 888.581,668.31 889.14,651.559 889.7,651.87 890.259,671.437 890.818,688.782 891.377,719.565 891.937,714.435 892.496,742.903 893.055,756.304 893.614,767.303 894.174,794.392 894.733,775.301 895.292,736.103 895.851,703.591 896.411,683.841 896.97,700.531 897.529,698.785 898.088,695.619 898.648,729.25 899.207,758.45 899.766,723.803 900.325,706.835 900.885,755.729 901.444,752.114 902.003,732.264 902.562,729.588 903.122,730.005 903.681,730.046 904.24,726.937 904.799,725.442 905.359,723.331 905.918,707.311 906.477,688.281 907.036,690.203 907.596,688.326 908.155,689.559 908.714,689.341 909.273,718.319 909.833,717.719 910.392,713.972 910.951,710.299 911.51,658.09 912.07,674.493 912.629,646.104 913.188,649.116 913.747,618.667 914.307,623.175 914.866,563.654 915.425,547.521 915.984,571.287 916.544,595.379 917.103,615.157 917.662,653.133 918.221,653.134 918.781,640.411 919.34,623.668 919.899,646.304 920.458,678.3 921.018,711.848 921.577,695.901 922.136,665.454 922.695,651.975 923.255,653.937 923.814,657.112 924.373,660.546 924.932,662.261 925.492,682.082 926.051,685.515 926.61,718.901 927.169,700.599 927.729,699.097 928.288,719.121 928.847,681.227 929.406,664.374 929.966,731.836 930.525,764.634 931.084,760.654 931.644,756.628 932.203,740.536 932.762,706.52 933.321,654.724 933.881,658.003 934.44,644.233 934.999,648.739 935.558,600.899 936.118,573.645 936.677,613.666 937.236,601.537 937.795,604.844 938.355,658.661 938.914,692.844 939.473,692.954 940.032,693.645 940.592,646.55 941.151,613.884 941.71,647.946 942.269,681.583 942.829,680.736 943.388,682.469 943.947,714.318 944.506,678.539 945.066,660.483 945.625,661.827 946.184,660.914 946.743,660.929 947.303,678.387 947.862,663.917 948.421,665.092 948.98,665.51 949.54,683.939 950.099,679.287 950.658,679.377 951.217,712.621 951.777,711.607 952.336,707.541 952.895,693.889 953.454,737.013 954.014,747.794 954.573,762.069 955.132,761.879 955.691,760.776 956.251,742.707 956.81,772.896 957.369,788.63 957.928,746.327 958.488,724.708 959.047,708.198 959.606,687.743 960.165,705.085 960.725,733.278 961.284,715.209 961.843,696.636 962.402,681.043 962.962,632.146 963.521,636.976 964.08,670.723 964.639,654.175 965.199,689.548 965.758,672.332 966.317,669.674 966.876,688.927 967.436,688.33 967.995,670.862 968.554,685.858 969.113,716.635 969.673,712.298 970.232,725.618 970.791,707.103 971.35,742.036 971.91,721.438 972.469,714.351 973.028,711.538 973.587,709.611 974.147,726.347 974.706,710.95 975.265,739.681 975.824,736.125 976.384,734.926 976.943,779.378 977.502,788.58 978.061,770.551 978.621,747.021 979.18,792.216 979.739,754.035 980.298,732.906 980.858,697.378 981.417,665.719 981.976,650.623 982.535,653.711 983.095,654.428 983.654,640.835 984.213,624.917 984.772,625.577 985.332,600.199 985.891,651.217 986.45,685.834 987.009,735.145 987.569,747.656 988.128,730.829 988.687,713.541 989.246,698.827 989.806,683.771 990.365,666.665 990.924,652.388 991.483,719.188 992.043,700.837 992.602,730.67 993.161,710.516 993.72,691.586 994.28,688.292 994.839,655.239 995.398,669.246 995.957,653.057 996.517,700.835 997.076,714.606 997.635,727.304 998.194,724.646 998.754,736.236 999.313,716.667 999.872,781.772 1000.43,745.159 1000.99,726.288 1001.55,726.865 1002.11,725.338 1002.67,739.828 1003.23,719.14 1003.79,697.861 1004.35,696.979 1004.91,695.5 1005.46,695.702 1006.02,695.388 1006.58,695.995 1007.14,710.614 1007.7,708.624 1008.26,706.815 1008.82,753.402 1009.38,717.867 1009.94,681.011 1010.5,662.009 1011.06,631.064 1011.62,651.326 1012.18,638.772 1012.73,606.7 1013.29,626.123 1013.85,647.812 1014.41,633.471 1014.97,636.206 1015.53,617.645 1016.09,606.376 1016.65,577.749 1017.21,632.278 1017.77,618.131 1018.33,589.593 1018.89,597.205 1019.45,590.265 1020.01,593.172 1020.56,597.676 1021.12,601.175 1021.68,589.872 1022.24,611.743 1022.8,632.288 1023.36,652.17 1023.92,637.971 1024.48,657.691 1025.04,659.034 1025.6,644.108 1026.16,662.188 1026.72,661.557 1027.28,649.473 1027.83,654.937 1028.39,657.078 1028.95,690.363 1029.51,724.027 1030.07,708.96 1030.63,675.672 1031.19,675.17 1031.75,622.982 1032.31,593.474 1032.87,582.266 1033.43,649.656 1033.99,645.318 1034.55,646.13 1035.1,662.662 1035.66,662.228 1036.22,631.667 1036.78,619.208 1037.34,669.707 1037.9,638.51 1038.46,655.983 1039.02,674.911 1039.58,674.31 1040.14,644.315 1040.7,648.924 1041.26,651.237 1041.82,651.767 1042.38,687.803 1042.93,657.167 1043.49,662.308 1044.05,633.986 1044.61,618.565 1045.17,591.596 1045.73,632.906 1046.29,635.78 1046.85,638.212 1047.41,642.929 1047.97,631.801 1048.53,636.266 1049.09,669.392 1049.65,699.94 1050.2,680.439 1050.76,681.372 1051.32,717.097 1051.88,713.754 1052.44,727.628 1053,704.398 1053.56,719.05 1054.12,750.578 1054.68,760.273 1055.24,789.1 1055.8,769.719 1056.36,781.344 1056.92,761.342 1057.48,756.67 1058.03,752.324 1058.59,793.469 1059.15,788.353 1059.71,764.751 1060.27,731.66 1060.83,710.418 1061.39,741.183 1061.95,754.468 1062.51,752.488 1063.07,766.61 1063.63,760.925 1064.19,759.028 1064.75,751.958 1065.3,732.85 1065.86,731.021 1066.42,729.402 1066.98,744.863 1067.54,723.732 1068.1,702.678 1068.66,687.482 1069.22,689.358 1069.78,674.456 1070.34,675.108 1070.9,654.793 1071.46,689.708 1072.02,705.562 1072.57,721.106 1073.13,721.059 1073.69,719.347 1074.25,699.888 1074.81,716.188 1075.37,719.341 1075.93,735.512 1076.49,747.014 1077.05,774.941 1077.61,785.607 1078.17,780.652 1078.73,744.706 1079.29,759.072 1079.85,738.562 1080.4,721.974 1080.96,735.602 1081.52,749.193 1082.08,728.404 1082.64,727.566 1083.2,709.536 1083.76,691.038 1084.32,688.946 1084.88,721.628 1085.44,701.465 1086,697.54 1086.56,711.719 1087.12,713.802 1087.67,711.73 1088.23,710.46 1088.79,710.669 1089.35,694.037 1089.91,707.361 1090.47,736.238 1091.03,698.223 1091.59,695.073 1092.15,677.257 1092.71,691.602 1093.27,656.045 1093.83,706.832 1094.39,672.578 1094.94,689.779 1095.5,689.374 1096.06,689.653 1096.62,672.976 1097.18,639.833 1097.74,638.75 1098.3,656.475 1098.86,607.894 1099.42,628.996 1099.98,600.529 1100.54,601.908 1101.1,589.677 1101.66,625 1102.22,576.274 1102.77,568.86 1103.33,541.151 1103.89,564.909 1104.45,585.314 1105.01,577.579 1105.57,615.962 1106.13,638.629 1106.69,657.134 1107.25,643.813 1107.81,645.096 1108.37,612.958 1108.93,618.245 1109.49,605.22 1110.04,607.525 1110.6,628.045 1111.16,627.889 1111.72,615.763 1112.28,603.544 1112.84,626.843 1113.4,630.502 1113.96,664.111 1114.52,727.898 1115.08,707.246 1115.64,704.6 1116.2,689.525 1116.76,690.064 1117.31,703.794 1117.87,717.902 1118.43,732.232 1118.99,747.371 1119.55,744.483 1120.11,724.551 1120.67,758.678 1121.23,756.434 1121.79,753.644 1122.35,736.798 1122.91,732.998 1123.47,698.983 1124.03,735.136 1124.59,735.277 1125.14,747.504 1125.7,742.272 1126.26,707.729 1126.82,689 1127.38,689.249 1127.94,704.689 1128.5,705.907 1129.06,720.976 1129.62,738.499 1130.18,733.417 1130.74,727.737 1131.3,725.618 1131.86,710.564 1132.41,723.859 1132.97,737.796 1133.53,752.149 1134.09,745.64 1134.65,742.306 1135.21,708.94 1135.77,691.773 1136.33,691.247 1136.89,676.387 1137.45,694.621 1138.01,692.967 1138.57,712.43 1139.13,723.532 1139.68,709.46 1140.24,710.681 1140.8,712.501 1141.36,693.531 1141.92,705.581 1142.48,687.842 1143.04,704.658 1143.6,670.65 1144.16,687.084 1144.72,682.517 1145.28,686.745 1145.84,638.594 1146.4,620.873 1146.96,591.481 1147.51,598.185 1148.07,634.341 1148.63,652.836 1149.19,654.483 1149.75,655.164 1150.31,640.704 1150.87,658.977 1151.43,646.67 1151.99,665.062 1152.55,652.939 1153.11,636.456 1153.67,640.006 1154.23,710.483 1154.78,739.417 1155.34,768.882 1155.9,734.877 1156.46,751.581 1157.02,732.665 1157.58,729.934 1158.14,730.349 1158.7,758.873 1159.26,758.409 1159.82,738.808 1160.38,722.075 1160.94,671.207 1161.5,671.981 1162.05,656.098 1162.61,627.8 1163.17,615.469 1163.73,600.151 1164.29,622.175 1164.85,658.219 1165.41,659.609 1165.97,631.757 1166.53,599.665 1167.09,569.075 1167.65,574.607 1168.21,564.492 1168.77,553.092 1169.33,579.455 1169.88,619.541 1170.44,639.973 1171,658.7 1171.56,660.324 1172.12,664.119 1172.68,667.886 1173.24,684.5 1173.8,700.955 1174.36,713.664 1174.92,679.6 1175.48,695.535 1176.04,679.81 1176.6,695.21 1177.15,694.329 1177.71,694.921 1178.27,675.341 1178.83,674.874 1179.39,672.917 1179.95,687.181 1180.51,669.923 1181.07,672.308 1181.63,670.362 1182.19,674.037 1182.75,673.216 1183.31,721.481 1183.87,703.619 1184.43,686.786 1184.98,688.228 1185.54,687.296 1186.1,701.993 1186.66,681.985 1187.22,680.185 1187.78,676.282 1188.34,695.1 1188.9,678.081 1189.46,644.947 1190.02,665.484 1190.58,685.664 1191.14,652.039 1191.7,685.391 1192.25,700.677 1192.81,702.1 1193.37,685.562 1193.93,702.147 1194.49,696.021 1195.05,711.333 1195.61,695.112 1196.17,661.272 1196.73,645.294 1197.29,629.375 1197.85,649.509 1198.41,683.678 1198.97,667.982 1199.52,672.421 1200.08,688.848 1200.64,689.181 1201.2,658.796 1201.76,674.934 1202.32,641.993 1202.88,643.664 1203.44,647.484 1204,650.055 1204.56,712.459 1205.12,694.727 1205.68,711.531 1206.24,692.333 1206.8,692.039 1207.35,675.09 1207.91,690.247 1208.47,676.458 1209.03,661.386 1209.59,662.008 1210.15,692.826 1210.71,644.539 1211.27,610.99 1211.83,616.559 1212.39,637.97 1212.95,671.774 1213.51,656.021 1214.07,674.164 1214.62,645.264 1215.18,648.238 1215.74,666.171 1216.3,685.883 1216.86,684.546 1217.42,630.916 1217.98,614.362 1218.54,599.683 1219.1,603.996 1219.66,624.693 1220.22,628.016 1220.78,643.279 1221.34,614.73 1221.89,603.809 1222.45,608.687 1223.01,647.872 1223.57,666.827 1224.13,665.961 1224.69,637.046 1225.25,641.626 1225.81,662.042 1226.37,663.818 1226.93,652.072 1227.49,653.197 1228.05,652.898 1228.61,670.626 1229.17,639.227 1229.72,644.195 1230.28,647.805 1230.84,648.873 1231.4,649.884 1231.96,668.505 1232.52,683.58 1233.08,700.128 1233.64,682.094 1234.2,666.687 1234.76,699.144 1235.32,697.514 1235.88,697.014 1236.44,701.325 1236.99,748.199 1237.55,777.69 1238.11,837.517 1238.67,845.592 1239.23,821.437 1239.79,798.115 1240.35,774.343 1240.91,768.862 1241.47,762.955 1242.03,759.161 1242.59,758.583 1243.15,786.019 1243.71,798.212 1244.26,804.812 1244.82,782.836 1245.38,778.689 1245.94,755.754 1246.5,750.464 1247.06,743.833 1247.62,753.434 1248.18,733.835 1248.74,685.182 1249.3,681.232 1249.86,679.618 1250.42,706.139 1250.98,738.245 1251.54,706.141 1252.09,704.73 1252.65,703.249 1253.21,714.683 1253.77,728.126 1254.33,723.306 1254.89,683.692 1255.45,683.835 1256.01,700.343 1256.57,702.061 1257.13,682.119 1257.69,700.799 1258.25,697.8 1258.81,730.402 1259.36,745.197 1259.92,741.161 1260.48,690.982 1261.04,705.112 1261.6,701.13 1262.16,728.435 1262.72,712.601 1263.28,682.331 1263.84,649.449 1264.4,646.525 1264.96,649.092 1265.52,650.329 1266.08,654.461 1266.63,638.825 1267.19,674.152 1267.75,625.593 1268.31,612.518 1268.87,599.306 1269.43,606.048 1269.99,622.657 1270.55,658.59 1271.11,657.726 1271.67,674.485 1272.23,671.629 1272.79,689.243 1273.35,643.189 1273.91,643.192 1274.46,627.882 1275.02,615.918 1275.58,571.16 1276.14,547.989 1276.7,570.026 1277.26,574.467 1277.82,596.035 1278.38,585.264 1278.94,638.332 1279.5,656.62 1280.06,654.754 1280.62,685.323 1281.18,683.844 1281.73,650.379 1282.29,658.6 1282.85,641.55 1283.41,628.311 1283.97,646.405 1284.53,615.131 1285.09,603.273 1285.65,606.24 1286.21,577.058 1286.77,550.88 1287.33,578.509 1287.89,538.689 1288.45,581.553 1289,604.031 1289.56,576.076 1290.12,582.715 1290.68,557.381 1291.24,612.219 1291.8,604.193 1292.36,638.93 1292.92,627.724 1293.48,650.014 1294.04,619.822 1294.6,608.014 1295.16,628.734 1295.72,617.351 1296.28,639.35 1296.83,641.838 1297.39,691.614 1297.95,678.423 1298.51,679.455 1299.07,680.982 1299.63,647.504 1300.19,648.935 1300.75,684.227 1301.31,664.456 1301.87,683.376 1302.43,685.172 1302.99,668.926 1303.55,668.894 1304.1,654.096 1304.66,685.915 1305.22,703.699 1305.78,735.461 1306.34,746.023 1306.9,755.95 1307.46,752.765 1308.02,764.667 1308.58,809.854 1309.14,804.917 1309.7,797.507 1310.26,776.779 1310.82,772.921 1311.38,735.002 1311.93,699.523 1312.49,682.214 1313.05,652.68 1313.61,638.305 1314.17,625.323 1314.73,647.42 1315.29,620.268 1315.85,608.893 1316.41,634.02 1316.97,653.963 1317.53,672.201 1318.09,658.506 1318.65,712.898 1319.2,714.406 1319.76,710.474 1320.32,696.923 1320.88,727.639 1321.44,756.149 1322,752.504 1322.56,748.176 1323.12,660.424 1323.68,696.932 1324.24,696.947 1324.8,696.356 1325.36,694.146 1325.92,712.847 1326.47,696.235 1327.03,712.613 1327.59,711.45 1328.15,707.403 1328.71,719.722 1329.27,717.947 1329.83,749.437 1330.39,744.982 1330.95,726.477 1331.51,691.045 1332.07,661.271 1332.63,645.267 1333.19,665.041 1333.75,672.181 1334.3,687.821 1334.86,688.224 1335.42,683.83 1335.98,698.704 1336.54,696.962 1337.1,678.4 1337.66,642.145 1338.22,658.564 1338.78,630.045 1339.34,649.47 1339.9,652.115 1340.46,669.384 1341.02,667.199 1341.57,686.112 1342.13,719.343 1342.69,749.777 1343.25,761.302 1343.81,758.407 1344.37,754.328 1344.93,765.065 1345.49,746.138 1346.05,741.738 1346.61,724.732 1347.17,775.165 1347.73,816.838 1348.29,790.865 1348.84,786.63 1349.4,781.717 1349.96,780.29 1350.52,809.585 1351.08,782.867 1351.64,761.123 1352.2,755.378 1352.76,766.988 1353.32,791.276 1353.88,750.296 1354.44,746.727 1355,739.14 1355.56,735.556 1356.12,714.538 1356.67,718.336 1357.23,715.664 1357.79,696.656 1358.35,694.144 1358.91,676.93 1359.47,659.456 1360.03,660.422 1360.59,674.941 1361.15,721.131 1361.71,702.93 1362.27,688.576 1362.83,690.648 1363.39,705.709 1363.94,672.03 1364.5,674.361 1365.06,695.183 1365.62,710.367 1366.18,711.222 1366.74,708.966 1367.3,708.411 1367.86,677.068 1368.42,677.847 1368.98,712.167 1369.54,709.991 1370.1,707.995 1370.66,739.289 1371.21,736.816 1371.77,716.879 1372.33,696.675 1372.89,725.608 1373.45,721.582 1374.01,736.989 1374.57,700.64 1375.13,683.264 1375.69,652.446 1376.25,651.439 1376.81,652.377 1377.37,685.151 1377.93,669.979 1378.49,668.694 1379.04,668.458 1379.6,683.821 1380.16,685.587 1380.72,702.865 1381.28,669.28 1381.84,653.846 1382.4,672.192 1382.96,671.898 1383.52,703.889 1384.08,721.256 1384.64,702.17 1385.2,688.494 1385.76,673.142 1386.31,662.053 1386.87,643.128 1387.43,643.032 1387.99,645.075 1388.55,632.09 1389.11,619.589 1389.67,591.349 1390.23,596.27 1390.79,601.67 1391.35,604.224 1391.91,628.517 1392.47,632.448 1393.03,640.701 1393.58,613.247 1394.14,616.965 1394.7,618.993 1395.26,589.625 1395.82,592.841 1396.38,630.642 1396.94,649.606 1397.5,632.457 1398.06,653.346 1398.62,651.252 1399.18,653.921 1399.74,657.404 1400.3,677.263 1400.86,645.711 1401.41,647.149 1401.97,668.054 1402.53,683.82 1403.09,667.266 1403.65,653.074 1404.21,665.27 1404.77,666.146 1405.33,649.55 1405.89,650.573 1406.45,636.923 1407.01,640.36 1407.57,625.268 1408.13,644.088 1408.68,631.622 1409.24,619.064 1409.8,621.945 1410.36,624.354 1410.92,658.498 1411.48,644.749 1412.04,662.658 1412.6,711 1413.16,696.181 1413.72,714.315 1414.28,743.423 1414.84,741.015 1415.4,734.322 1415.95,750.456 1416.51,724.161 1417.07,739.14 1417.63,737.304 1418.19,686.684 1418.75,686.969 1419.31,704.129 1419.87,702.327 1420.43,650.323 1420.99,636.337 1421.55,621.681 1422.11,639.197 1422.67,671.843 1423.23,670.92 1423.78,672.458 1424.34,703.61 1424.9,686.08 1425.46,670.339 1426.02,654.922 1426.58,639.156 1427.14,624.503 1427.7,612.791 1428.26,632.379 1428.82,636.53 1429.38,657.438 1429.94,644.713 1430.5,648.374 1431.05,682.808 1431.61,684.178 1432.17,700.327 1432.73,682.973 1433.29,649.92 1433.85,670.879 1434.41,641.249 1434.97,610.995 1435.53,581.584 1436.09,571.017 1436.65,596.155 1437.21,614.709 1437.77,600.064 1438.33,638.386 1438.88,627.87 1439.44,663.803 1440,665.631 1440.56,683 1441.12,663.745 1441.68,681.897 1442.24,647.345 1442.8,629.966 1443.36,598.043 1443.92,604.934 1444.48,625.37 1445.04,595.097 1445.6,618.156 1446.15,623.424 1446.71,662.472 1447.27,646.299 1447.83,663.09 1448.39,648.958 1448.95,636.919 1449.51,621.553 1450.07,624.912 1450.63,632.491 1451.19,618.174 1451.75,674.042 1452.31,693.82 1452.87,692.252 1453.42,659.217 1453.98,679.662 1454.54,647.036 1455.1,667.256 1455.66,666.81 1456.22,648.667 1456.78,635.297 1457.34,622.901 1457.9,626.737 1458.46,629.605 1459.02,663.963 1459.58,660.489 1460.14,693.634 1460.7,708.255 1461.25,734.699 1461.81,732.35 1462.37,743.289 1462.93,756.51 1463.49,783.737 1464.05,749.054 1464.61,730.05 1465.17,731.508 1465.73,684.012 1466.29,699.677 1466.85,717.009 1467.41,748.706 1467.97,790.102 1468.52,750.773 1469.08,762.561 1469.64,742.374 1470.2,722.831 1470.76,700.695 1471.32,698.662 1471.88,750.612 1472.44,796.651 1473,773.184 1473.56,770.079 1474.12,765.823 1474.68,747.41 1475.24,745.632 1475.79,738.333 1476.35,720.096 1476.91,717.354 1477.47,702.438 1478.03,702.19 1478.59,701.003 1479.15,683.654 1479.71,684.374 1480.27,668.177 1480.83,652.658 1481.39,621.071 1481.95,577.361 1482.51,647.172 1483.07,633.137 1483.62,632.739 1484.18,682.973 1484.74,682.204 1485.3,682.635 1485.86,650.303 1486.42,618.287 1486.98,620.46 1487.54,625.184 1488.1,648.01 1488.66,665.097 1489.22,679.68 1489.78,682.464 1490.34,713.316 1490.89,710.566 1491.45,713.487 1492.01,709.672 1492.57,755.66 1493.13,751.458 1493.69,762.571 1494.25,740.181 1494.81,784.248 1495.37,760.783 1495.93,737.515 1496.49,714.578 1497.05,745.866 1497.61,727.893 1498.16,728.877 1498.72,729.066 1499.28,730.142 1499.84,727.571 1500.4,711.143 1500.96,709.792 1501.52,678.449 1502.08,695.006 1502.64,675.719 1503.2,659.237 1503.76,659.72 1504.32,693.87 1504.88,721.683 1505.44,737.93 1505.99,701.156 1506.55,664.599 1507.11,667.67 1507.67,651.723 1508.23,672.324 1508.79,669.822 1509.35,687.242 1509.91,685.861 1510.47,703.631 1511.03,715.662 1511.59,713.849 1512.15,696.138 1512.71,710.689 1513.26,694.713 1513.82,694.203 1514.38,677.397 1514.94,644.874 1515.5,631.24 1516.06,682.422 1516.62,665.283 1517.18,696.813 1517.74,708.629 1518.3,692.283 1518.86,629.8 1519.42,646.497 1519.98,661.264 1520.53,660.712 1521.09,630.829 1521.65,632.818 1522.21,649.614 1522.77,650.286 1523.33,666.425 1523.89,651.249 1524.45,671.17 1525.01,688.693 1525.57,690.104 1526.13,673.085 1526.69,691.346 1527.25,689.007 1527.81,689.1 1528.36,691.99 1528.92,659.404 1529.48,678.934 1530.04,663.671 1530.6,696.325 1531.16,694.626 1531.72,693.172 1532.28,707.152 1532.84,712.438 1533.4,663.133 1533.96,697.573 1534.52,727.821 1535.08,757.335 1535.63,738.469 1536.19,722.328 1536.75,751.346 1537.31,761.936 1537.87,725.707 1538.43,691.982 1538.99,711.108 1539.55,740.828 1540.11,786.828 1540.67,750.586 1541.23,780.06 1541.79,760.13 1542.35,768.016 1542.9,730.728 1543.46,742.795 1544.02,707.149 1544.58,721.783 1545.14,703.762 1545.7,717.287 1546.26,698.658 1546.82,649.295 1547.38,666.894 1547.94,649.588 1548.5,587.927 1549.06,578.008 1549.62,569.245 1550.18,577.423 1550.73,585.926 1551.29,608.86 1551.85,644.496 1552.41,647.212 1552.97,629.067 1553.53,648.634 1554.09,666.124 1554.65,684.837 1555.21,686.771 1555.77,672.764 1556.33,675.361 1556.89,646.073 1557.45,617.411 1558,621.529 1558.56,639.186 1559.12,659.527 1559.68,689.821 1560.24,672.77 1560.8,653.604 1561.36,655.611 1561.92,671.567 1562.48,688.487 1563.04,704.908 1563.6,687.503 1564.16,686.603 1564.72,689.31 1565.28,706.919 1565.83,673.036 1566.39,675.665 1566.95,690.447 1567.51,671.299 1568.07,658.244 1568.63,626.34 1569.19,600.248 1569.75,619.08 1570.31,622.69 1570.87,674.583 1571.43,676.751 1571.99,694.919 1572.55,693.867 1573.1,710.637 1573.66,710.906 1574.22,692.352 1574.78,675.522 1575.34,725.906 1575.9,692.603 1576.46,707.375 1577.02,738.981 1577.58,750.853 1578.14,731.625 1578.7,730.361 1579.26,727.552 1579.82,723.269 1580.37,735.345 1580.93,735.699 1581.49,713.856 1582.05,726.001 1582.61,724.875 1583.17,687.651 1583.73,702.056 1584.29,670.794 1584.85,657.259 1585.41,657.456 1585.97,738.058 1586.53,721.307 1587.09,734.175 1587.65,728.924 1588.2,748.308 1588.76,742.192 1589.32,736.472 1589.88,731.956 1590.44,741.818 1591,724.514 1591.56,706.425 1592.12,691.1 1592.68,706.928 1593.24,725.62 1593.8,703.233 1594.36,667.516 1594.92,686.362 1595.47,690.01 1596.03,700.491 1596.59,714.86 1597.15,731.058 1597.71,744.627 1598.27,758.949 1598.83,755.799 1599.39,785.509 1599.95,763.564 1600.51,755.837 1601.07,768.029 1601.63,761.777 1602.19,710.177 1602.74,705.397 1603.3,686.905 1603.86,653.008 1604.42,637.331 1604.98,673.063 1605.54,672.689 1606.1,674.448 1606.66,630.184 1607.22,649.907 1607.78,686.895 1608.34,707.263 1608.9,688.248 1609.46,654.534 1610.02,654.503 1610.57,658.994 1611.13,660.295 1611.69,680.079 1612.25,684.44 1612.81,682.216 1613.37,680.968 1613.93,700.111 1614.49,683.239 1615.05,631.598 1615.61,668.092 1616.17,702.438 1616.73,671.693 1617.29,669.69 1617.84,687.71 1618.4,703.608 1618.96,735.812 1619.52,717.538 1620.08,698.622 1620.64,713.703 1621.2,692.53 1621.76,659.543 1622.32,659.484 1622.88,693.406 1623.44,692.351 1624,670.683 1624.56,671.251 1625.11,699.257 1625.67,697.645 1626.23,679.956 1626.79,710.98 1627.35,710.826 1627.91,724.395 1628.47,753.676 1629.03,749.793 1629.59,743.529 1630.15,759.223 1630.71,738.675 1631.27,705.288 1631.83,738.715 1632.39,735.82 1632.94,797.392 1633.5,790.423 1634.06,769.861 1634.62,713.66 1635.18,714.413 1635.74,715.529 1636.3,732.475 1636.86,745.864 1637.42,727.194 1637.98,722.52 1638.54,702.517 1639.1,667.802 1639.66,686.266 1640.21,718.123 1640.77,714.747 1641.33,714.275 1641.89,727.951 1642.45,711.817 1643.01,711.966 1643.57,708.478 1644.13,672.971 1644.69,676.56 1645.25,676.319 1645.81,691.331 1646.37,670.771 1646.93,675.21 1647.48,677.34 1648.04,646.218 1648.6,600.671 1649.16,638.337 1649.72,642.537 1650.28,646.127 1650.84,664.826 1651.4,639.401 1651.96,672.84 1652.52,659.916 1653.08,642.181 1653.64,659.136 1654.2,676.753 1654.76,677.437 1655.31,645.938 1655.87,667.639 1656.43,685.158 1656.99,714.643 1657.55,697.236 1658.11,660.818 1658.67,680.119 1659.23,650.3 1659.79,685.334 1660.35,669.299 1660.91,654.803 1661.47,656.737 1662.03,670.918 1662.58,702.059 1663.14,684.417 1663.7,685.415 1664.26,700.25 1664.82,699.387 1665.38,731.458 1665.94,728.011 1666.5,705.576 1667.06,754.592 1667.62,750.741 1668.18,745.094 1668.74,711.795 1669.3,712.849 1669.85,710.518 1670.41,674.761 1670.97,677.758 1671.53,679.121 1672.09,681.293 1672.65,683.406 1673.21,664.172 1673.77,668.724 1674.33,683.219 1674.89,700.433 1675.45,684.372 1676.01,688.278 1676.57,707.357 1677.13,705.687 1677.68,688.539 1678.24,670.981 1678.8,653.927 1679.36,639.037 1679.92,641.481 1680.48,626.864 1681.04,627.758 1681.6,630.102 1682.16,616.594 1682.72,620.908 1683.28,644.148 1683.84,650.098 1684.4,656.035 1684.95,658.25 1685.51,674.492 1686.07,657.54 1686.63,643.17 1687.19,664.066 1687.75,665.062 1688.31,668.23 1688.87,670.067 1689.43,674.203 1689.99,710.023 1690.55,757.841 1691.11,772.405 1691.67,769.442 1692.23,782.483 1692.78,760.691 1693.34,757.293 1693.9,753.678 1694.46,735.163 1695.02,716.964 1695.58,712.705 1696.14,694.402 1696.7,677.634 1697.26,695.634 1697.82,681.22 1698.38,699.946 1698.94,715.845 1699.5,728.52 1700.05,740.67 1700.61,703.907 1701.17,718.659 1701.73,731.844 1702.29,763.813 1702.85,728.678 1703.41,742.863 1703.97,773.138 1704.53,722.77 1705.09,704.039 1705.65,672.736 1706.21,689.835 1706.77,725.07 1707.32,722.222 1707.88,701.86 1708.44,701.527 1709,716.073 1709.56,713.189 1710.12,678.501 1710.68,679.7 1711.24,678.639 1711.8,678.741 1712.36,644.932 1712.92,682.481 1713.48,650.853 1714.04,650.535 1714.6,681.952 1715.15,666.277 1715.71,680.898 1716.27,683.203 1716.83,666.808 1717.39,667.976 1717.95,656.191 1718.51,689.685 1719.07,692.6 1719.63,643.723 1720.19,597.749 1720.75,568.237 1721.31,574.061 1721.87,563.718 1722.42,618.076 1722.98,638.617 1723.54,662.425 1724.1,646.788 1724.66,629.394 1725.22,663.696 1725.78,649.502 1726.34,650.143 1726.9,671.246 1727.46,703.125 1728.02,715.634 1728.58,734.265 1729.14,703.554 1729.69,721.747 1730.25,726.758 1730.81,734.969 1731.37,732.683 1731.93,733.432 1732.49,762.021 1733.05,759.428 1733.61,723.62 1734.17,688.934 1734.73,688.636 1735.29,704.905 1735.85,685.608 1736.41,737.175 1736.97,719.127 1737.52,700.556 1738.08,732.197 1738.64,744.634 1739.2,742.609 1739.76,726.05 1740.32,722.1 1740.88,751.545 1741.44,747.025 1742,728.852 1742.56,709.884 1743.12,709.886 1743.68,705.7 1744.24,702.332 1744.79,720.264 1745.35,702.629 1745.91,700.575 1746.47,683.467 1747.03,647.991 1747.59,645.745 1748.15,645.332 1748.71,599.427 1749.27,622.325 1749.83,611.761 1750.39,587.007 1750.95,590.75 1751.51,631.164 1752.06,619.055 1752.62,607.275 1753.18,613.347 1753.74,602.561 1754.3,591.385 1754.86,601.083 1755.42,623.932 1755.98,611.418 1756.54,616.582 1757.1,602.596 1757.66,606.482 1758.22,609.192 1758.78,612.99 1759.34,632.654 1759.89,622.444 1760.45,592.427 1761.01,582.745 1761.57,607.521 1762.13,628.623 1762.69,615.944 1763.25,618.643 1763.81,621.238 1764.37,594.802 1764.93,600.348 1765.49,606.775 1766.05,657.737 1766.61,658.006 1767.16,677.183 1767.72,663.232 1768.28,665.705 1768.84,648.641 1769.4,650.235 1769.96,652.097 1770.52,621.557 1771.08,659.479 1771.64,612.328 1772.2,647.986 1772.76,636.333 1773.32,642.111 1773.88,644.587 1774.43,661.772 1774.99,648.414 1775.55,633.034 1776.11,648.939 1776.67,666.873 1777.23,716.142 1777.79,711.126 1778.35,707.534 1778.91,675.412 1779.47,679.773 1780.03,667.276 1780.59,687.116 1781.15,688.367 1781.71,686.362 1782.26,667.339 1782.82,653.694 1783.38,637.62 1783.94,629.7 1784.5,619.855 1785.06,626.665 1785.62,599.136 1786.18,621.11 1786.74,626.872 1787.3,610.698 1787.86,612.999 1788.42,629.066 1788.98,647.655 1789.53,649.047 1790.09,667.067 1790.65,648.827 1791.21,665.173 1791.77,700.615 1792.33,683.394 1792.89,698.87 1793.45,712.955 1794.01,728.63 1794.57,707.125 1795.13,689.194 1795.69,686.532 1796.25,686.827 1796.8,733.567 1797.36,747.686 1797.92,761.721 1798.48,760.312 1799.04,706.982 1799.6,707.202 1800.16,689.395 1800.72,707.246 1801.28,687.091 1801.84,684.16 1802.4,711.322 1802.96,728.199 1803.52,710.85 1804.08,709.099 1804.63,709.189 1805.19,689.571 1805.75,690.609 1806.31,670.897 1806.87,673.361 1807.43,656.38 1807.99,676.024 1808.55,739.325 1809.11,737.792 1809.67,767.34 1810.23,747.88 1810.79,746.822 1811.35,748.034 1811.9,790.075 1812.46,768.315 1813.02,779.38 1813.58,761.257 1814.14,775.745 1814.7,773.866 1815.26,785.573 1815.82,767.895 1816.38,749.539 1816.94,761.948 1817.5,771.763 1818.06,761.577 1818.62,740.529 1819.18,721.741 1819.73,733.283 1820.29,729.185 1820.85,758.89 1821.41,753.824 1821.97,746.06 1822.53,712.711 1823.09,710.22 1823.65,674.837 1824.21,672.311 1824.77,673.92 1825.33,668.695 1825.89,702.447 1826.45,737.299 1827,763.65 1827.56,757.156 1828.12,717.989 1828.68,732.197 1829.24,741.601 1829.8,690.59 1830.36,709.309 1830.92,686.57 1831.48,682.714 1832.04,681.812 1832.6,678.143 1833.16,710.489 1833.72,697.339 1834.27,694.502 1834.83,725.91 1835.39,736.692 1835.95,733.728 1836.51,696.309 1837.07,694.146 1837.63,726.485 1838.19,720.362 \"/>\n<path clip-path=\"url(#clip953)\" d=\"M720.247 691.433 L720.806 691.433 L721.365 691.433 L721.924 691.433 L722.484 691.433 L723.043 691.433 L723.602 691.433 L724.161 691.433 L724.721 691.433 L725.28 691.433 L725.839 691.433 L726.398 691.433 L726.958 691.433 L727.517 691.433 L728.076 691.433 L728.635 691.433 L729.195 691.433 L729.754 691.433 L730.313 691.433 L730.872 691.433 L731.432 691.433 L731.991 691.433 L732.55 691.433 L733.109 691.433 L733.669 691.433 L734.228 691.433 L734.787 691.433 L735.346 691.433 L735.906 691.433 L736.465 691.433 L737.024 691.433 L737.583 691.433 L738.143 691.433 L738.702 691.433 L739.261 691.433 L739.82 691.433 L740.38 691.433 L740.939 691.433 L741.498 691.433 L742.057 691.433 L742.617 691.433 L743.176 691.433 L743.735 691.433 L744.294 691.433 L744.854 691.433 L745.413 691.433 L745.972 691.433 L746.531 691.433 L747.091 691.433 L747.65 691.433 L748.209 691.433 L748.768 691.433 L749.328 691.433 L749.887 691.433 L750.446 691.433 L751.005 691.433 L751.565 691.433 L752.124 691.433 L752.683 691.433 L753.242 691.433 L753.802 691.433 L754.361 691.433 L754.92 691.433 L755.479 691.433 L756.039 691.433 L756.598 691.433 L757.157 691.433 L757.716 691.433 L758.276 691.433 L758.835 691.433 L759.394 691.433 L759.953 691.433 L760.513 691.433 L761.072 691.433 L761.631 691.433 L762.19 691.433 L762.75 691.433 L763.309 691.433 L763.868 691.433 L764.427 691.433 L764.987 691.433 L765.546 691.433 L766.105 691.433 L766.664 691.433 L767.224 691.433 L767.783 691.433 L768.342 691.433 L768.901 691.433 L769.461 691.433 L770.02 691.433 L770.579 691.433 L771.138 691.433 L771.698 691.433 L772.257 691.433 L772.816 691.433 L773.375 691.433 L773.935 691.433 L774.494 691.433 L775.053 691.433 L775.612 691.433 L776.172 691.433 L776.731 691.433 L777.29 691.433 L777.849 691.433 L778.409 691.433 L778.968 691.433 L779.527 691.433 L780.086 691.433 L780.646 691.433 L781.205 691.433 L781.764 691.433 L782.323 691.433 L782.883 691.433 L783.442 691.433 L784.001 691.433 L784.56 691.433 L785.12 691.433 L785.679 691.433 L786.238 691.433 L786.797 691.433 L787.357 691.433 L787.916 691.433 L788.475 691.433 L789.034 691.433 L789.594 691.433 L790.153 691.433 L790.712 691.433 L791.271 691.433 L791.831 691.433 L792.39 691.433 L792.949 691.433 L793.508 691.433 L794.068 691.433 L794.627 691.433 L795.186 691.433 L795.745 691.433 L796.305 691.433 L796.864 691.433 L797.423 691.433 L797.982 691.433 L798.542 691.433 L799.101 691.433 L799.66 691.433 L800.219 691.433 L800.779 691.433 L801.338 691.433 L801.897 691.433 L802.456 691.433 L803.016 691.433 L803.575 691.433 L804.134 691.433 L804.693 691.433 L805.253 691.433 L805.812 691.433 L806.371 691.433 L806.931 691.433 L807.49 691.433 L808.049 691.433 L808.608 691.433 L809.168 691.433 L809.727 691.433 L810.286 691.433 L810.845 691.433 L811.405 691.433 L811.964 691.433 L812.523 691.433 L813.082 691.433 L813.642 691.433 L814.201 691.433 L814.76 691.433 L815.319 691.433 L815.879 691.433 L816.438 691.433 L816.997 691.433 L817.556 691.433 L818.116 691.433 L818.675 691.433 L819.234 691.433 L819.793 691.433 L820.353 691.433 L820.912 691.433 L821.471 691.433 L822.03 691.433 L822.59 691.433 L823.149 691.433 L823.708 691.433 L824.267 691.433 L824.827 691.433 L825.386 691.433 L825.945 691.433 L826.504 691.433 L827.064 691.433 L827.623 691.433 L828.182 691.433 L828.741 691.433 L829.301 691.433 L829.86 691.433 L830.419 691.433 L830.978 691.433 L831.538 691.433 L832.097 691.433 L832.656 691.433 L833.215 691.433 L833.775 691.433 L834.334 691.433 L834.893 691.433 L835.452 691.433 L836.012 691.433 L836.571 691.433 L837.13 691.433 L837.689 691.433 L838.249 691.433 L838.808 691.433 L839.367 691.433 L839.926 691.433 L840.486 691.433 L841.045 691.433 L841.604 691.433 L842.163 691.433 L842.723 691.433 L843.282 691.433 L843.841 691.433 L844.4 691.433 L844.96 691.433 L845.519 691.433 L846.078 691.433 L846.637 691.433 L847.197 691.433 L847.756 691.433 L848.315 691.433 L848.874 691.433 L849.434 691.433 L849.993 691.433 L850.552 691.433 L851.111 691.433 L851.671 691.433 L852.23 691.433 L852.789 691.433 L853.348 691.433 L853.908 691.433 L854.467 691.433 L855.026 691.433 L855.585 691.433 L856.145 691.433 L856.704 691.433 L857.263 691.433 L857.822 691.433 L858.382 691.433 L858.941 691.433 L859.5 691.433 L860.059 691.433 L860.619 691.433 L861.178 691.433 L861.737 691.433 L862.296 691.433 L862.856 691.433 L863.415 691.433 L863.974 691.433 L864.533 691.433 L865.093 691.433 L865.652 691.433 L866.211 691.433 L866.77 691.433 L867.33 691.433 L867.889 691.433 L868.448 691.433 L869.007 691.433 L869.567 691.433 L870.126 691.433 L870.685 691.433 L871.244 691.433 L871.804 691.433 L872.363 691.433 L872.922 691.433 L873.481 691.433 L874.041 691.433 L874.6 691.433 L875.159 691.433 L875.718 691.433 L876.278 691.433 L876.837 691.433 L877.396 691.433 L877.955 691.433 L878.515 691.433 L879.074 691.433 L879.633 691.433 L880.192 691.433 L880.752 691.433 L881.311 691.433 L881.87 691.433 L882.429 691.433 L882.989 691.433 L883.548 691.433 L884.107 691.433 L884.666 691.433 L885.226 691.433 L885.785 691.433 L886.344 691.433 L886.903 691.433 L887.463 691.433 L888.022 691.433 L888.581 691.433 L889.14 691.433 L889.7 691.433 L890.259 691.433 L890.818 691.433 L891.377 691.433 L891.937 691.433 L892.496 691.433 L893.055 691.433 L893.614 691.433 L894.174 691.433 L894.733 691.433 L895.292 691.433 L895.851 691.433 L896.411 691.433 L896.97 691.433 L897.529 691.433 L898.088 691.433 L898.648 691.433 L899.207 691.433 L899.766 691.433 L900.325 691.433 L900.885 691.433 L901.444 691.433 L902.003 691.433 L902.562 691.433 L903.122 691.433 L903.681 691.433 L904.24 691.433 L904.799 691.433 L905.359 691.433 L905.918 691.433 L906.477 691.433 L907.036 691.433 L907.596 691.433 L908.155 691.433 L908.714 691.433 L909.273 691.433 L909.833 691.433 L910.392 691.433 L910.951 691.433 L911.51 691.433 L912.07 691.433 L912.629 691.433 L913.188 691.433 L913.747 691.433 L914.307 691.433 L914.866 691.433 L915.425 691.433 L915.984 691.433 L916.544 691.433 L917.103 691.433 L917.662 691.433 L918.221 691.433 L918.781 691.433 L919.34 691.433 L919.899 691.433 L920.458 691.433 L921.018 691.433 L921.577 691.433 L922.136 691.433 L922.695 691.433 L923.255 691.433 L923.814 691.433 L924.373 691.433 L924.932 691.433 L925.492 691.433 L926.051 691.433 L926.61 691.433 L927.169 691.433 L927.729 691.433 L928.288 691.433 L928.847 691.433 L929.406 691.433 L929.966 691.433 L930.525 691.433 L931.084 691.433 L931.644 691.433 L932.203 691.433 L932.762 691.433 L933.321 691.433 L933.881 691.433 L934.44 691.433 L934.999 691.433 L935.558 691.433 L936.118 691.433 L936.677 691.433 L937.236 691.433 L937.795 691.433 L938.355 691.433 L938.914 691.433 L939.473 691.433 L940.032 691.433 L940.592 691.433 L941.151 691.433 L941.71 691.433 L942.269 691.433 L942.829 691.433 L943.388 691.433 L943.947 691.433 L944.506 691.433 L945.066 691.433 L945.625 691.433 L946.184 691.433 L946.743 691.433 L947.303 691.433 L947.862 691.433 L948.421 691.433 L948.98 691.433 L949.54 691.433 L950.099 691.433 L950.658 691.433 L951.217 691.433 L951.777 691.433 L952.336 691.433 L952.895 691.433 L953.454 691.433 L954.014 691.433 L954.573 691.433 L955.132 691.433 L955.691 691.433 L956.251 691.433 L956.81 691.433 L957.369 691.433 L957.928 691.433 L958.488 691.433 L959.047 691.433 L959.606 691.433 L960.165 691.433 L960.725 691.433 L961.284 691.433 L961.843 691.433 L962.402 691.433 L962.962 691.433 L963.521 691.433 L964.08 691.433 L964.639 691.433 L965.199 691.433 L965.758 691.433 L966.317 691.433 L966.876 691.433 L967.436 691.433 L967.995 691.433 L968.554 691.433 L969.113 691.433 L969.673 691.433 L970.232 691.433 L970.791 691.433 L971.35 691.433 L971.91 691.433 L972.469 691.433 L973.028 691.433 L973.587 691.433 L974.147 691.433 L974.706 691.433 L975.265 691.433 L975.824 691.433 L976.384 691.433 L976.943 691.433 L977.502 691.433 L978.061 691.433 L978.621 691.433 L979.18 691.433 L979.739 691.433 L980.298 691.433 L980.858 691.433 L981.417 691.433 L981.976 691.433 L982.535 691.433 L983.095 691.433 L983.654 691.433 L984.213 691.433 L984.772 691.433 L985.332 691.433 L985.891 691.433 L986.45 691.433 L987.009 691.433 L987.569 691.433 L988.128 691.433 L988.687 691.433 L989.246 691.433 L989.806 691.433 L990.365 691.433 L990.924 691.433 L991.483 691.433 L992.043 691.433 L992.602 691.433 L993.161 691.433 L993.72 691.433 L994.28 691.433 L994.839 691.433 L995.398 691.433 L995.957 691.433 L996.517 691.433 L997.076 691.433 L997.635 691.433 L998.194 691.433 L998.754 691.433 L999.313 691.433 L999.872 691.433 L1000.43 691.433 L1000.99 691.433 L1001.55 691.433 L1002.11 691.433 L1002.67 691.433 L1003.23 691.433 L1003.79 691.433 L1004.35 691.433 L1004.91 691.433 L1005.46 691.433 L1006.02 691.433 L1006.58 691.433 L1007.14 691.433 L1007.7 691.433 L1008.26 691.433 L1008.82 691.433 L1009.38 691.433 L1009.94 691.433 L1010.5 691.433 L1011.06 691.433 L1011.62 691.433 L1012.18 691.433 L1012.73 691.433 L1013.29 691.433 L1013.85 691.433 L1014.41 691.433 L1014.97 691.433 L1015.53 691.433 L1016.09 691.433 L1016.65 691.433 L1017.21 691.433 L1017.77 691.433 L1018.33 691.433 L1018.89 691.433 L1019.45 691.433 L1020.01 691.433 L1020.56 691.433 L1021.12 691.433 L1021.68 691.433 L1022.24 691.433 L1022.8 691.433 L1023.36 691.433 L1023.92 691.433 L1024.48 691.433 L1025.04 691.433 L1025.6 691.433 L1026.16 691.433 L1026.72 691.433 L1027.28 691.433 L1027.83 691.433 L1028.39 691.433 L1028.95 691.433 L1029.51 691.433 L1030.07 691.433 L1030.63 691.433 L1031.19 691.433 L1031.75 691.433 L1032.31 691.433 L1032.87 691.433 L1033.43 691.433 L1033.99 691.433 L1034.55 691.433 L1035.1 691.433 L1035.66 691.433 L1036.22 691.433 L1036.78 691.433 L1037.34 691.433 L1037.9 691.433 L1038.46 691.433 L1039.02 691.433 L1039.58 691.433 L1040.14 691.433 L1040.7 691.433 L1041.26 691.433 L1041.82 691.433 L1042.38 691.433 L1042.93 691.433 L1043.49 691.433 L1044.05 691.433 L1044.61 691.433 L1045.17 691.433 L1045.73 691.433 L1046.29 691.433 L1046.85 691.433 L1047.41 691.433 L1047.97 691.433 L1048.53 691.433 L1049.09 691.433 L1049.65 691.433 L1050.2 691.433 L1050.76 691.433 L1051.32 691.433 L1051.88 691.433 L1052.44 691.433 L1053 691.433 L1053.56 691.433 L1054.12 691.433 L1054.68 691.433 L1055.24 691.433 L1055.8 691.433 L1056.36 691.433 L1056.92 691.433 L1057.48 691.433 L1058.03 691.433 L1058.59 691.433 L1059.15 691.433 L1059.71 691.433 L1060.27 691.433 L1060.83 691.433 L1061.39 691.433 L1061.95 691.433 L1062.51 691.433 L1063.07 691.433 L1063.63 691.433 L1064.19 691.433 L1064.75 691.433 L1065.3 691.433 L1065.86 691.433 L1066.42 691.433 L1066.98 691.433 L1067.54 691.433 L1068.1 691.433 L1068.66 691.433 L1069.22 691.433 L1069.78 691.433 L1070.34 691.433 L1070.9 691.433 L1071.46 691.433 L1072.02 691.433 L1072.57 691.433 L1073.13 691.433 L1073.69 691.433 L1074.25 691.433 L1074.81 691.433 L1075.37 691.433 L1075.93 691.433 L1076.49 691.433 L1077.05 691.433 L1077.61 691.433 L1078.17 691.433 L1078.73 691.433 L1079.29 691.433 L1079.85 691.433 L1080.4 691.433 L1080.96 691.433 L1081.52 691.433 L1082.08 691.433 L1082.64 691.433 L1083.2 691.433 L1083.76 691.433 L1084.32 691.433 L1084.88 691.433 L1085.44 691.433 L1086 691.433 L1086.56 691.433 L1087.12 691.433 L1087.67 691.433 L1088.23 691.433 L1088.79 691.433 L1089.35 691.433 L1089.91 691.433 L1090.47 691.433 L1091.03 691.433 L1091.59 691.433 L1092.15 691.433 L1092.71 691.433 L1093.27 691.433 L1093.83 691.433 L1094.39 691.433 L1094.94 691.433 L1095.5 691.433 L1096.06 691.433 L1096.62 691.433 L1097.18 691.433 L1097.74 691.433 L1098.3 691.433 L1098.86 691.433 L1099.42 691.433 L1099.98 691.433 L1100.54 691.433 L1101.1 691.433 L1101.66 691.433 L1102.22 691.433 L1102.77 691.433 L1103.33 691.433 L1103.89 691.433 L1104.45 691.433 L1105.01 691.433 L1105.57 691.433 L1106.13 691.433 L1106.69 691.433 L1107.25 691.433 L1107.81 691.433 L1108.37 691.433 L1108.93 691.433 L1109.49 691.433 L1110.04 691.433 L1110.6 691.433 L1111.16 691.433 L1111.72 691.433 L1112.28 691.433 L1112.84 691.433 L1113.4 691.433 L1113.96 691.433 L1114.52 691.433 L1115.08 691.433 L1115.64 691.433 L1116.2 691.433 L1116.76 691.433 L1117.31 691.433 L1117.87 691.433 L1118.43 691.433 L1118.99 691.433 L1119.55 691.433 L1120.11 691.433 L1120.67 691.433 L1121.23 691.433 L1121.79 691.433 L1122.35 691.433 L1122.91 691.433 L1123.47 691.433 L1124.03 691.433 L1124.59 691.433 L1125.14 691.433 L1125.7 691.433 L1126.26 691.433 L1126.82 691.433 L1127.38 691.433 L1127.94 691.433 L1128.5 691.433 L1129.06 691.433 L1129.62 691.433 L1130.18 691.433 L1130.74 691.433 L1131.3 691.433 L1131.86 691.433 L1132.41 691.433 L1132.97 691.433 L1133.53 691.433 L1134.09 691.433 L1134.65 691.433 L1135.21 691.433 L1135.77 691.433 L1136.33 691.433 L1136.89 691.433 L1137.45 691.433 L1138.01 691.433 L1138.57 691.433 L1139.13 691.433 L1139.68 691.433 L1140.24 691.433 L1140.8 691.433 L1141.36 691.433 L1141.92 691.433 L1142.48 691.433 L1143.04 691.433 L1143.6 691.433 L1144.16 691.433 L1144.72 691.433 L1145.28 691.433 L1145.84 691.433 L1146.4 691.433 L1146.96 691.433 L1147.51 691.433 L1148.07 691.433 L1148.63 691.433 L1149.19 691.433 L1149.75 691.433 L1150.31 691.433 L1150.87 691.433 L1151.43 691.433 L1151.99 691.433 L1152.55 691.433 L1153.11 691.433 L1153.67 691.433 L1154.23 691.433 L1154.78 691.433 L1155.34 691.433 L1155.9 691.433 L1156.46 691.433 L1157.02 691.433 L1157.58 691.433 L1158.14 691.433 L1158.7 691.433 L1159.26 691.433 L1159.82 691.433 L1160.38 691.433 L1160.94 691.433 L1161.5 691.433 L1162.05 691.433 L1162.61 691.433 L1163.17 691.433 L1163.73 691.433 L1164.29 691.433 L1164.85 691.433 L1165.41 691.433 L1165.97 691.433 L1166.53 691.433 L1167.09 691.433 L1167.65 691.433 L1168.21 691.433 L1168.77 691.433 L1169.33 691.433 L1169.88 691.433 L1170.44 691.433 L1171 691.433 L1171.56 691.433 L1172.12 691.433 L1172.68 691.433 L1173.24 691.433 L1173.8 691.433 L1174.36 691.433 L1174.92 691.433 L1175.48 691.433 L1176.04 691.433 L1176.6 691.433 L1177.15 691.433 L1177.71 691.433 L1178.27 691.433 L1178.83 691.433 L1179.39 691.433 L1179.95 691.433 L1180.51 691.433 L1181.07 691.433 L1181.63 691.433 L1182.19 691.433 L1182.75 691.433 L1183.31 691.433 L1183.87 691.433 L1184.43 691.433 L1184.98 691.433 L1185.54 691.433 L1186.1 691.433 L1186.66 691.433 L1187.22 691.433 L1187.78 691.433 L1188.34 691.433 L1188.9 691.433 L1189.46 691.433 L1190.02 691.433 L1190.58 691.433 L1191.14 691.433 L1191.7 691.433 L1192.25 691.433 L1192.81 691.433 L1193.37 691.433 L1193.93 691.433 L1194.49 691.433 L1195.05 691.433 L1195.61 691.433 L1196.17 691.433 L1196.73 691.433 L1197.29 691.433 L1197.85 691.433 L1198.41 691.433 L1198.97 691.433 L1199.52 691.433 L1200.08 691.433 L1200.64 691.433 L1201.2 691.433 L1201.76 691.433 L1202.32 691.433 L1202.88 691.433 L1203.44 691.433 L1204 691.433 L1204.56 691.433 L1205.12 691.433 L1205.68 691.433 L1206.24 691.433 L1206.8 691.433 L1207.35 691.433 L1207.91 691.433 L1208.47 691.433 L1209.03 691.433 L1209.59 691.433 L1210.15 691.433 L1210.71 691.433 L1211.27 691.433 L1211.83 691.433 L1212.39 691.433 L1212.95 691.433 L1213.51 691.433 L1214.07 691.433 L1214.62 691.433 L1215.18 691.433 L1215.74 691.433 L1216.3 691.433 L1216.86 691.433 L1217.42 691.433 L1217.98 691.433 L1218.54 691.433 L1219.1 691.433 L1219.66 691.433 L1220.22 691.433 L1220.78 691.433 L1221.34 691.433 L1221.89 691.433 L1222.45 691.433 L1223.01 691.433 L1223.57 691.433 L1224.13 691.433 L1224.69 691.433 L1225.25 691.433 L1225.81 691.433 L1226.37 691.433 L1226.93 691.433 L1227.49 691.433 L1228.05 691.433 L1228.61 691.433 L1229.17 691.433 L1229.72 691.433 L1230.28 691.433 L1230.84 691.433 L1231.4 691.433 L1231.96 691.433 L1232.52 691.433 L1233.08 691.433 L1233.64 691.433 L1234.2 691.433 L1234.76 691.433 L1235.32 691.433 L1235.88 691.433 L1236.44 691.433 L1236.99 691.433 L1237.55 691.433 L1238.11 691.433 L1238.67 691.433 L1239.23 691.433 L1239.79 691.433 L1240.35 691.433 L1240.91 691.433 L1241.47 691.433 L1242.03 691.433 L1242.59 691.433 L1243.15 691.433 L1243.71 691.433 L1244.26 691.433 L1244.82 691.433 L1245.38 691.433 L1245.94 691.433 L1246.5 691.433 L1247.06 691.433 L1247.62 691.433 L1248.18 691.433 L1248.74 691.433 L1249.3 691.433 L1249.86 691.433 L1250.42 691.433 L1250.98 691.433 L1251.54 691.433 L1252.09 691.433 L1252.65 691.433 L1253.21 691.433 L1253.77 691.433 L1254.33 691.433 L1254.89 691.433 L1255.45 691.433 L1256.01 691.433 L1256.57 691.433 L1257.13 691.433 L1257.69 691.433 L1258.25 691.433 L1258.81 691.433 L1259.36 691.433 L1259.92 691.433 L1260.48 691.433 L1261.04 691.433 L1261.6 691.433 L1262.16 691.433 L1262.72 691.433 L1263.28 691.433 L1263.84 691.433 L1264.4 691.433 L1264.96 691.433 L1265.52 691.433 L1266.08 691.433 L1266.63 691.433 L1267.19 691.433 L1267.75 691.433 L1268.31 691.433 L1268.87 691.433 L1269.43 691.433 L1269.99 691.433 L1270.55 691.433 L1271.11 691.433 L1271.67 691.433 L1272.23 691.433 L1272.79 691.433 L1273.35 691.433 L1273.91 691.433 L1274.46 691.433 L1275.02 691.433 L1275.58 691.433 L1276.14 691.433 L1276.7 691.433 L1277.26 691.433 L1277.82 691.433 L1278.38 691.433 L1278.94 691.433 L1279.5 691.433 L1280.06 691.433 L1280.62 691.433 L1281.18 691.433 L1281.73 691.433 L1282.29 691.433 L1282.85 691.433 L1283.41 691.433 L1283.97 691.433 L1284.53 691.433 L1285.09 691.433 L1285.65 691.433 L1286.21 691.433 L1286.77 691.433 L1287.33 691.433 L1287.89 691.433 L1288.45 691.433 L1289 691.433 L1289.56 691.433 L1290.12 691.433 L1290.68 691.433 L1291.24 691.433 L1291.8 691.433 L1292.36 691.433 L1292.92 691.433 L1293.48 691.433 L1294.04 691.433 L1294.6 691.433 L1295.16 691.433 L1295.72 691.433 L1296.28 691.433 L1296.83 691.433 L1297.39 691.433 L1297.95 691.433 L1298.51 691.433 L1299.07 691.433 L1299.63 691.433 L1300.19 691.433 L1300.75 691.433 L1301.31 691.433 L1301.87 691.433 L1302.43 691.433 L1302.99 691.433 L1303.55 691.433 L1304.1 691.433 L1304.66 691.433 L1305.22 691.433 L1305.78 691.433 L1306.34 691.433 L1306.9 691.433 L1307.46 691.433 L1308.02 691.433 L1308.58 691.433 L1309.14 691.433 L1309.7 691.433 L1310.26 691.433 L1310.82 691.433 L1311.38 691.433 L1311.93 691.433 L1312.49 691.433 L1313.05 691.433 L1313.61 691.433 L1314.17 691.433 L1314.73 691.433 L1315.29 691.433 L1315.85 691.433 L1316.41 691.433 L1316.97 691.433 L1317.53 691.433 L1318.09 691.433 L1318.65 691.433 L1319.2 691.433 L1319.76 691.433 L1320.32 691.433 L1320.88 691.433 L1321.44 691.433 L1322 691.433 L1322.56 691.433 L1323.12 691.433 L1323.68 691.433 L1324.24 691.433 L1324.8 691.433 L1325.36 691.433 L1325.92 691.433 L1326.47 691.433 L1327.03 691.433 L1327.59 691.433 L1328.15 691.433 L1328.71 691.433 L1329.27 691.433 L1329.83 691.433 L1330.39 691.433 L1330.95 691.433 L1331.51 691.433 L1332.07 691.433 L1332.63 691.433 L1333.19 691.433 L1333.75 691.433 L1334.3 691.433 L1334.86 691.433 L1335.42 691.433 L1335.98 691.433 L1336.54 691.433 L1337.1 691.433 L1337.66 691.433 L1338.22 691.433 L1338.78 691.433 L1339.34 691.433 L1339.9 691.433 L1340.46 691.433 L1341.02 691.433 L1341.57 691.433 L1342.13 691.433 L1342.69 691.433 L1343.25 691.433 L1343.81 691.433 L1344.37 691.433 L1344.93 691.433 L1345.49 691.433 L1346.05 691.433 L1346.61 691.433 L1347.17 691.433 L1347.73 691.433 L1348.29 691.433 L1348.84 691.433 L1349.4 691.433 L1349.96 691.433 L1350.52 691.433 L1351.08 691.433 L1351.64 691.433 L1352.2 691.433 L1352.76 691.433 L1353.32 691.433 L1353.88 691.433 L1354.44 691.433 L1355 691.433 L1355.56 691.433 L1356.12 691.433 L1356.67 691.433 L1357.23 691.433 L1357.79 691.433 L1358.35 691.433 L1358.91 691.433 L1359.47 691.433 L1360.03 691.433 L1360.59 691.433 L1361.15 691.433 L1361.71 691.433 L1362.27 691.433 L1362.83 691.433 L1363.39 691.433 L1363.94 691.433 L1364.5 691.433 L1365.06 691.433 L1365.62 691.433 L1366.18 691.433 L1366.74 691.433 L1367.3 691.433 L1367.86 691.433 L1368.42 691.433 L1368.98 691.433 L1369.54 691.433 L1370.1 691.433 L1370.66 691.433 L1371.21 691.433 L1371.77 691.433 L1372.33 691.433 L1372.89 691.433 L1373.45 691.433 L1374.01 691.433 L1374.57 691.433 L1375.13 691.433 L1375.69 691.433 L1376.25 691.433 L1376.81 691.433 L1377.37 691.433 L1377.93 691.433 L1378.49 691.433 L1379.04 691.433 L1379.6 691.433 L1380.16 691.433 L1380.72 691.433 L1381.28 691.433 L1381.84 691.433 L1382.4 691.433 L1382.96 691.433 L1383.52 691.433 L1384.08 691.433 L1384.64 691.433 L1385.2 691.433 L1385.76 691.433 L1386.31 691.433 L1386.87 691.433 L1387.43 691.433 L1387.99 691.433 L1388.55 691.433 L1389.11 691.433 L1389.67 691.433 L1390.23 691.433 L1390.79 691.433 L1391.35 691.433 L1391.91 691.433 L1392.47 691.433 L1393.03 691.433 L1393.58 691.433 L1394.14 691.433 L1394.7 691.433 L1395.26 691.433 L1395.82 691.433 L1396.38 691.433 L1396.94 691.433 L1397.5 691.433 L1398.06 691.433 L1398.62 691.433 L1399.18 691.433 L1399.74 691.433 L1400.3 691.433 L1400.86 691.433 L1401.41 691.433 L1401.97 691.433 L1402.53 691.433 L1403.09 691.433 L1403.65 691.433 L1404.21 691.433 L1404.77 691.433 L1405.33 691.433 L1405.89 691.433 L1406.45 691.433 L1407.01 691.433 L1407.57 691.433 L1408.13 691.433 L1408.68 691.433 L1409.24 691.433 L1409.8 691.433 L1410.36 691.433 L1410.92 691.433 L1411.48 691.433 L1412.04 691.433 L1412.6 691.433 L1413.16 691.433 L1413.72 691.433 L1414.28 691.433 L1414.84 691.433 L1415.4 691.433 L1415.95 691.433 L1416.51 691.433 L1417.07 691.433 L1417.63 691.433 L1418.19 691.433 L1418.75 691.433 L1419.31 691.433 L1419.87 691.433 L1420.43 691.433 L1420.99 691.433 L1421.55 691.433 L1422.11 691.433 L1422.67 691.433 L1423.23 691.433 L1423.78 691.433 L1424.34 691.433 L1424.9 691.433 L1425.46 691.433 L1426.02 691.433 L1426.58 691.433 L1427.14 691.433 L1427.7 691.433 L1428.26 691.433 L1428.82 691.433 L1429.38 691.433 L1429.94 691.433 L1430.5 691.433 L1431.05 691.433 L1431.61 691.433 L1432.17 691.433 L1432.73 691.433 L1433.29 691.433 L1433.85 691.433 L1434.41 691.433 L1434.97 691.433 L1435.53 691.433 L1436.09 691.433 L1436.65 691.433 L1437.21 691.433 L1437.77 691.433 L1438.33 691.433 L1438.88 691.433 L1439.44 691.433 L1440 691.433 L1440.56 691.433 L1441.12 691.433 L1441.68 691.433 L1442.24 691.433 L1442.8 691.433 L1443.36 691.433 L1443.92 691.433 L1444.48 691.433 L1445.04 691.433 L1445.6 691.433 L1446.15 691.433 L1446.71 691.433 L1447.27 691.433 L1447.83 691.433 L1448.39 691.433 L1448.95 691.433 L1449.51 691.433 L1450.07 691.433 L1450.63 691.433 L1451.19 691.433 L1451.75 691.433 L1452.31 691.433 L1452.87 691.433 L1453.42 691.433 L1453.98 691.433 L1454.54 691.433 L1455.1 691.433 L1455.66 691.433 L1456.22 691.433 L1456.78 691.433 L1457.34 691.433 L1457.9 691.433 L1458.46 691.433 L1459.02 691.433 L1459.58 691.433 L1460.14 691.433 L1460.7 691.433 L1461.25 691.433 L1461.81 691.433 L1462.37 691.433 L1462.93 691.433 L1463.49 691.433 L1464.05 691.433 L1464.61 691.433 L1465.17 691.433 L1465.73 691.433 L1466.29 691.433 L1466.85 691.433 L1467.41 691.433 L1467.97 691.433 L1468.52 691.433 L1469.08 691.433 L1469.64 691.433 L1470.2 691.433 L1470.76 691.433 L1471.32 691.433 L1471.88 691.433 L1472.44 691.433 L1473 691.433 L1473.56 691.433 L1474.12 691.433 L1474.68 691.433 L1475.24 691.433 L1475.79 691.433 L1476.35 691.433 L1476.91 691.433 L1477.47 691.433 L1478.03 691.433 L1478.59 691.433 L1479.15 691.433 L1479.71 691.433 L1480.27 691.433 L1480.83 691.433 L1481.39 691.433 L1481.95 691.433 L1482.51 691.433 L1483.07 691.433 L1483.62 691.433 L1484.18 691.433 L1484.74 691.433 L1485.3 691.433 L1485.86 691.433 L1486.42 691.433 L1486.98 691.433 L1487.54 691.433 L1488.1 691.433 L1488.66 691.433 L1489.22 691.433 L1489.78 691.433 L1490.34 691.433 L1490.89 691.433 L1491.45 691.433 L1492.01 691.433 L1492.57 691.433 L1493.13 691.433 L1493.69 691.433 L1494.25 691.433 L1494.81 691.433 L1495.37 691.433 L1495.93 691.433 L1496.49 691.433 L1497.05 691.433 L1497.61 691.433 L1498.16 691.433 L1498.72 691.433 L1499.28 691.433 L1499.84 691.433 L1500.4 691.433 L1500.96 691.433 L1501.52 691.433 L1502.08 691.433 L1502.64 691.433 L1503.2 691.433 L1503.76 691.433 L1504.32 691.433 L1504.88 691.433 L1505.44 691.433 L1505.99 691.433 L1506.55 691.433 L1507.11 691.433 L1507.67 691.433 L1508.23 691.433 L1508.79 691.433 L1509.35 691.433 L1509.91 691.433 L1510.47 691.433 L1511.03 691.433 L1511.59 691.433 L1512.15 691.433 L1512.71 691.433 L1513.26 691.433 L1513.82 691.433 L1514.38 691.433 L1514.94 691.433 L1515.5 691.433 L1516.06 691.433 L1516.62 691.433 L1517.18 691.433 L1517.74 691.433 L1518.3 691.433 L1518.86 691.433 L1519.42 691.433 L1519.98 691.433 L1520.53 691.433 L1521.09 691.433 L1521.65 691.433 L1522.21 691.433 L1522.77 691.433 L1523.33 691.433 L1523.89 691.433 L1524.45 691.433 L1525.01 691.433 L1525.57 691.433 L1526.13 691.433 L1526.69 691.433 L1527.25 691.433 L1527.81 691.433 L1528.36 691.433 L1528.92 691.433 L1529.48 691.433 L1530.04 691.433 L1530.6 691.433 L1531.16 691.433 L1531.72 691.433 L1532.28 691.433 L1532.84 691.433 L1533.4 691.433 L1533.96 691.433 L1534.52 691.433 L1535.08 691.433 L1535.63 691.433 L1536.19 691.433 L1536.75 691.433 L1537.31 691.433 L1537.87 691.433 L1538.43 691.433 L1538.99 691.433 L1539.55 691.433 L1540.11 691.433 L1540.67 691.433 L1541.23 691.433 L1541.79 691.433 L1542.35 691.433 L1542.9 691.433 L1543.46 691.433 L1544.02 691.433 L1544.58 691.433 L1545.14 691.433 L1545.7 691.433 L1546.26 691.433 L1546.82 691.433 L1547.38 691.433 L1547.94 691.433 L1548.5 691.433 L1549.06 691.433 L1549.62 691.433 L1550.18 691.433 L1550.73 691.433 L1551.29 691.433 L1551.85 691.433 L1552.41 691.433 L1552.97 691.433 L1553.53 691.433 L1554.09 691.433 L1554.65 691.433 L1555.21 691.433 L1555.77 691.433 L1556.33 691.433 L1556.89 691.433 L1557.45 691.433 L1558 691.433 L1558.56 691.433 L1559.12 691.433 L1559.68 691.433 L1560.24 691.433 L1560.8 691.433 L1561.36 691.433 L1561.92 691.433 L1562.48 691.433 L1563.04 691.433 L1563.6 691.433 L1564.16 691.433 L1564.72 691.433 L1565.28 691.433 L1565.83 691.433 L1566.39 691.433 L1566.95 691.433 L1567.51 691.433 L1568.07 691.433 L1568.63 691.433 L1569.19 691.433 L1569.75 691.433 L1570.31 691.433 L1570.87 691.433 L1571.43 691.433 L1571.99 691.433 L1572.55 691.433 L1573.1 691.433 L1573.66 691.433 L1574.22 691.433 L1574.78 691.433 L1575.34 691.433 L1575.9 691.433 L1576.46 691.433 L1577.02 691.433 L1577.58 691.433 L1578.14 691.433 L1578.7 691.433 L1579.26 691.433 L1579.82 691.433 L1580.37 691.433 L1580.93 691.433 L1581.49 691.433 L1582.05 691.433 L1582.61 691.433 L1583.17 691.433 L1583.73 691.433 L1584.29 691.433 L1584.85 691.433 L1585.41 691.433 L1585.97 691.433 L1586.53 691.433 L1587.09 691.433 L1587.65 691.433 L1588.2 691.433 L1588.76 691.433 L1589.32 691.433 L1589.88 691.433 L1590.44 691.433 L1591 691.433 L1591.56 691.433 L1592.12 691.433 L1592.68 691.433 L1593.24 691.433 L1593.8 691.433 L1594.36 691.433 L1594.92 691.433 L1595.47 691.433 L1596.03 691.433 L1596.59 691.433 L1597.15 691.433 L1597.71 691.433 L1598.27 691.433 L1598.83 691.433 L1599.39 691.433 L1599.95 691.433 L1600.51 691.433 L1601.07 691.433 L1601.63 691.433 L1602.19 691.433 L1602.74 691.433 L1603.3 691.433 L1603.86 691.433 L1604.42 691.433 L1604.98 691.433 L1605.54 691.433 L1606.1 691.433 L1606.66 691.433 L1607.22 691.433 L1607.78 691.433 L1608.34 691.433 L1608.9 691.433 L1609.46 691.433 L1610.02 691.433 L1610.57 691.433 L1611.13 691.433 L1611.69 691.433 L1612.25 691.433 L1612.81 691.433 L1613.37 691.433 L1613.93 691.433 L1614.49 691.433 L1615.05 691.433 L1615.61 691.433 L1616.17 691.433 L1616.73 691.433 L1617.29 691.433 L1617.84 691.433 L1618.4 691.433 L1618.96 691.433 L1619.52 691.433 L1620.08 691.433 L1620.64 691.433 L1621.2 691.433 L1621.76 691.433 L1622.32 691.433 L1622.88 691.433 L1623.44 691.433 L1624 691.433 L1624.56 691.433 L1625.11 691.433 L1625.67 691.433 L1626.23 691.433 L1626.79 691.433 L1627.35 691.433 L1627.91 691.433 L1628.47 691.433 L1629.03 691.433 L1629.59 691.433 L1630.15 691.433 L1630.71 691.433 L1631.27 691.433 L1631.83 691.433 L1632.39 691.433 L1632.94 691.433 L1633.5 691.433 L1634.06 691.433 L1634.62 691.433 L1635.18 691.433 L1635.74 691.433 L1636.3 691.433 L1636.86 691.433 L1637.42 691.433 L1637.98 691.433 L1638.54 691.433 L1639.1 691.433 L1639.66 691.433 L1640.21 691.433 L1640.77 691.433 L1641.33 691.433 L1641.89 691.433 L1642.45 691.433 L1643.01 691.433 L1643.57 691.433 L1644.13 691.433 L1644.69 691.433 L1645.25 691.433 L1645.81 691.433 L1646.37 691.433 L1646.93 691.433 L1647.48 691.433 L1648.04 691.433 L1648.6 691.433 L1649.16 691.433 L1649.72 691.433 L1650.28 691.433 L1650.84 691.433 L1651.4 691.433 L1651.96 691.433 L1652.52 691.433 L1653.08 691.433 L1653.64 691.433 L1654.2 691.433 L1654.76 691.433 L1655.31 691.433 L1655.87 691.433 L1656.43 691.433 L1656.99 691.433 L1657.55 691.433 L1658.11 691.433 L1658.67 691.433 L1659.23 691.433 L1659.79 691.433 L1660.35 691.433 L1660.91 691.433 L1661.47 691.433 L1662.03 691.433 L1662.58 691.433 L1663.14 691.433 L1663.7 691.433 L1664.26 691.433 L1664.82 691.433 L1665.38 691.433 L1665.94 691.433 L1666.5 691.433 L1667.06 691.433 L1667.62 691.433 L1668.18 691.433 L1668.74 691.433 L1669.3 691.433 L1669.85 691.433 L1670.41 691.433 L1670.97 691.433 L1671.53 691.433 L1672.09 691.433 L1672.65 691.433 L1673.21 691.433 L1673.77 691.433 L1674.33 691.433 L1674.89 691.433 L1675.45 691.433 L1676.01 691.433 L1676.57 691.433 L1677.13 691.433 L1677.68 691.433 L1678.24 691.433 L1678.8 691.433 L1679.36 691.433 L1679.92 691.433 L1680.48 691.433 L1681.04 691.433 L1681.6 691.433 L1682.16 691.433 L1682.72 691.433 L1683.28 691.433 L1683.84 691.433 L1684.4 691.433 L1684.95 691.433 L1685.51 691.433 L1686.07 691.433 L1686.63 691.433 L1687.19 691.433 L1687.75 691.433 L1688.31 691.433 L1688.87 691.433 L1689.43 691.433 L1689.99 691.433 L1690.55 691.433 L1691.11 691.433 L1691.67 691.433 L1692.23 691.433 L1692.78 691.433 L1693.34 691.433 L1693.9 691.433 L1694.46 691.433 L1695.02 691.433 L1695.58 691.433 L1696.14 691.433 L1696.7 691.433 L1697.26 691.433 L1697.82 691.433 L1698.38 691.433 L1698.94 691.433 L1699.5 691.433 L1700.05 691.433 L1700.61 691.433 L1701.17 691.433 L1701.73 691.433 L1702.29 691.433 L1702.85 691.433 L1703.41 691.433 L1703.97 691.433 L1704.53 691.433 L1705.09 691.433 L1705.65 691.433 L1706.21 691.433 L1706.77 691.433 L1707.32 691.433 L1707.88 691.433 L1708.44 691.433 L1709 691.433 L1709.56 691.433 L1710.12 691.433 L1710.68 691.433 L1711.24 691.433 L1711.8 691.433 L1712.36 691.433 L1712.92 691.433 L1713.48 691.433 L1714.04 691.433 L1714.6 691.433 L1715.15 691.433 L1715.71 691.433 L1716.27 691.433 L1716.83 691.433 L1717.39 691.433 L1717.95 691.433 L1718.51 691.433 L1719.07 691.433 L1719.63 691.433 L1720.19 691.433 L1720.75 691.433 L1721.31 691.433 L1721.87 691.433 L1722.42 691.433 L1722.98 691.433 L1723.54 691.433 L1724.1 691.433 L1724.66 691.433 L1725.22 691.433 L1725.78 691.433 L1726.34 691.433 L1726.9 691.433 L1727.46 691.433 L1728.02 691.433 L1728.58 691.433 L1729.14 691.433 L1729.69 691.433 L1730.25 691.433 L1730.81 691.433 L1731.37 691.433 L1731.93 691.433 L1732.49 691.433 L1733.05 691.433 L1733.61 691.433 L1734.17 691.433 L1734.73 691.433 L1735.29 691.433 L1735.85 691.433 L1736.41 691.433 L1736.97 691.433 L1737.52 691.433 L1738.08 691.433 L1738.64 691.433 L1739.2 691.433 L1739.76 691.433 L1740.32 691.433 L1740.88 691.433 L1741.44 691.433 L1742 691.433 L1742.56 691.433 L1743.12 691.433 L1743.68 691.433 L1744.24 691.433 L1744.79 691.433 L1745.35 691.433 L1745.91 691.433 L1746.47 691.433 L1747.03 691.433 L1747.59 691.433 L1748.15 691.433 L1748.71 691.433 L1749.27 691.433 L1749.83 691.433 L1750.39 691.433 L1750.95 691.433 L1751.51 691.433 L1752.06 691.433 L1752.62 691.433 L1753.18 691.433 L1753.74 691.433 L1754.3 691.433 L1754.86 691.433 L1755.42 691.433 L1755.98 691.433 L1756.54 691.433 L1757.1 691.433 L1757.66 691.433 L1758.22 691.433 L1758.78 691.433 L1759.34 691.433 L1759.89 691.433 L1760.45 691.433 L1761.01 691.433 L1761.57 691.433 L1762.13 691.433 L1762.69 691.433 L1763.25 691.433 L1763.81 691.433 L1764.37 691.433 L1764.93 691.433 L1765.49 691.433 L1766.05 691.433 L1766.61 691.433 L1767.16 691.433 L1767.72 691.433 L1768.28 691.433 L1768.84 691.433 L1769.4 691.433 L1769.96 691.433 L1770.52 691.433 L1771.08 691.433 L1771.64 691.433 L1772.2 691.433 L1772.76 691.433 L1773.32 691.433 L1773.88 691.433 L1774.43 691.433 L1774.99 691.433 L1775.55 691.433 L1776.11 691.433 L1776.67 691.433 L1777.23 691.433 L1777.79 691.433 L1778.35 691.433 L1778.91 691.433 L1779.47 691.433 L1780.03 691.433 L1780.59 691.433 L1781.15 691.433 L1781.71 691.433 L1782.26 691.433 L1782.82 691.433 L1783.38 691.433 L1783.94 691.433 L1784.5 691.433 L1785.06 691.433 L1785.62 691.433 L1786.18 691.433 L1786.74 691.433 L1787.3 691.433 L1787.86 691.433 L1788.42 691.433 L1788.98 691.433 L1789.53 691.433 L1790.09 691.433 L1790.65 691.433 L1791.21 691.433 L1791.77 691.433 L1792.33 691.433 L1792.89 691.433 L1793.45 691.433 L1794.01 691.433 L1794.57 691.433 L1795.13 691.433 L1795.69 691.433 L1796.25 691.433 L1796.8 691.433 L1797.36 691.433 L1797.92 691.433 L1798.48 691.433 L1799.04 691.433 L1799.6 691.433 L1800.16 691.433 L1800.72 691.433 L1801.28 691.433 L1801.84 691.433 L1802.4 691.433 L1802.96 691.433 L1803.52 691.433 L1804.08 691.433 L1804.63 691.433 L1805.19 691.433 L1805.75 691.433 L1806.31 691.433 L1806.87 691.433 L1807.43 691.433 L1807.99 691.433 L1808.55 691.433 L1809.11 691.433 L1809.67 691.433 L1810.23 691.433 L1810.79 691.433 L1811.35 691.433 L1811.9 691.433 L1812.46 691.433 L1813.02 691.433 L1813.58 691.433 L1814.14 691.433 L1814.7 691.433 L1815.26 691.433 L1815.82 691.433 L1816.38 691.433 L1816.94 691.433 L1817.5 691.433 L1818.06 691.433 L1818.62 691.433 L1819.18 691.433 L1819.73 691.433 L1820.29 691.433 L1820.85 691.433 L1821.41 691.433 L1821.97 691.433 L1822.53 691.433 L1823.09 691.433 L1823.65 691.433 L1824.21 691.433 L1824.77 691.433 L1825.33 691.433 L1825.89 691.433 L1826.45 691.433 L1827 691.433 L1827.56 691.433 L1828.12 691.433 L1828.68 691.433 L1829.24 691.433 L1829.8 691.433 L1830.36 691.433 L1830.92 691.433 L1831.48 691.433 L1832.04 691.433 L1832.6 691.433 L1833.16 691.433 L1833.72 691.433 L1834.27 691.433 L1834.83 691.433 L1835.39 691.433 L1835.95 691.433 L1836.51 691.433 L1837.07 691.433 L1837.63 691.433 L1838.19 691.433 L1838.19 683.588 L1837.63 683.588 L1837.07 683.588 L1836.51 683.588 L1835.95 683.588 L1835.39 683.588 L1834.83 683.588 L1834.27 683.588 L1833.72 683.588 L1833.16 683.588 L1832.6 683.588 L1832.04 683.588 L1831.48 683.588 L1830.92 683.588 L1830.36 683.588 L1829.8 683.588 L1829.24 683.588 L1828.68 683.588 L1828.12 683.588 L1827.56 683.588 L1827 683.588 L1826.45 683.588 L1825.89 683.588 L1825.33 683.588 L1824.77 683.588 L1824.21 683.588 L1823.65 683.588 L1823.09 683.588 L1822.53 683.588 L1821.97 683.588 L1821.41 683.588 L1820.85 683.588 L1820.29 683.588 L1819.73 683.588 L1819.18 683.588 L1818.62 683.588 L1818.06 683.588 L1817.5 683.588 L1816.94 683.588 L1816.38 683.588 L1815.82 683.588 L1815.26 683.588 L1814.7 683.588 L1814.14 683.588 L1813.58 683.588 L1813.02 683.588 L1812.46 683.588 L1811.9 683.588 L1811.35 683.588 L1810.79 683.588 L1810.23 683.588 L1809.67 683.588 L1809.11 683.588 L1808.55 683.588 L1807.99 683.588 L1807.43 683.588 L1806.87 683.588 L1806.31 683.588 L1805.75 683.588 L1805.19 683.588 L1804.63 683.588 L1804.08 683.588 L1803.52 683.588 L1802.96 683.588 L1802.4 683.588 L1801.84 683.588 L1801.28 683.588 L1800.72 683.588 L1800.16 683.588 L1799.6 683.588 L1799.04 683.588 L1798.48 683.588 L1797.92 683.588 L1797.36 683.588 L1796.8 683.588 L1796.25 683.588 L1795.69 683.588 L1795.13 683.588 L1794.57 683.588 L1794.01 683.588 L1793.45 683.588 L1792.89 683.588 L1792.33 683.588 L1791.77 683.588 L1791.21 683.588 L1790.65 683.588 L1790.09 683.588 L1789.53 683.588 L1788.98 683.588 L1788.42 683.588 L1787.86 683.588 L1787.3 683.588 L1786.74 683.588 L1786.18 683.588 L1785.62 683.588 L1785.06 683.588 L1784.5 683.588 L1783.94 683.588 L1783.38 683.588 L1782.82 683.588 L1782.26 683.588 L1781.71 683.588 L1781.15 683.588 L1780.59 683.588 L1780.03 683.588 L1779.47 683.588 L1778.91 683.588 L1778.35 683.588 L1777.79 683.588 L1777.23 683.588 L1776.67 683.588 L1776.11 683.588 L1775.55 683.588 L1774.99 683.588 L1774.43 683.588 L1773.88 683.588 L1773.32 683.588 L1772.76 683.588 L1772.2 683.588 L1771.64 683.588 L1771.08 683.588 L1770.52 683.588 L1769.96 683.588 L1769.4 683.588 L1768.84 683.588 L1768.28 683.588 L1767.72 683.588 L1767.16 683.588 L1766.61 683.588 L1766.05 683.588 L1765.49 683.588 L1764.93 683.588 L1764.37 683.588 L1763.81 683.588 L1763.25 683.588 L1762.69 683.588 L1762.13 683.588 L1761.57 683.588 L1761.01 683.588 L1760.45 683.588 L1759.89 683.588 L1759.34 683.588 L1758.78 683.588 L1758.22 683.588 L1757.66 683.588 L1757.1 683.588 L1756.54 683.588 L1755.98 683.588 L1755.42 683.588 L1754.86 683.588 L1754.3 683.588 L1753.74 683.588 L1753.18 683.588 L1752.62 683.588 L1752.06 683.588 L1751.51 683.588 L1750.95 683.588 L1750.39 683.588 L1749.83 683.588 L1749.27 683.588 L1748.71 683.588 L1748.15 683.588 L1747.59 683.588 L1747.03 683.588 L1746.47 683.588 L1745.91 683.588 L1745.35 683.588 L1744.79 683.588 L1744.24 683.588 L1743.68 683.588 L1743.12 683.588 L1742.56 683.588 L1742 683.588 L1741.44 683.588 L1740.88 683.588 L1740.32 683.588 L1739.76 683.588 L1739.2 683.588 L1738.64 683.588 L1738.08 683.588 L1737.52 683.588 L1736.97 683.588 L1736.41 683.588 L1735.85 683.588 L1735.29 683.588 L1734.73 683.588 L1734.17 683.588 L1733.61 683.588 L1733.05 683.588 L1732.49 683.588 L1731.93 683.588 L1731.37 683.588 L1730.81 683.588 L1730.25 683.588 L1729.69 683.588 L1729.14 683.588 L1728.58 683.588 L1728.02 683.588 L1727.46 683.588 L1726.9 683.588 L1726.34 683.588 L1725.78 683.588 L1725.22 683.588 L1724.66 683.588 L1724.1 683.588 L1723.54 683.588 L1722.98 683.588 L1722.42 683.588 L1721.87 683.588 L1721.31 683.588 L1720.75 683.588 L1720.19 683.588 L1719.63 683.588 L1719.07 683.588 L1718.51 683.588 L1717.95 683.588 L1717.39 683.588 L1716.83 683.588 L1716.27 683.588 L1715.71 683.588 L1715.15 683.588 L1714.6 683.588 L1714.04 683.588 L1713.48 683.588 L1712.92 683.588 L1712.36 683.588 L1711.8 683.588 L1711.24 683.588 L1710.68 683.588 L1710.12 683.588 L1709.56 683.588 L1709 683.588 L1708.44 683.588 L1707.88 683.588 L1707.32 683.588 L1706.77 683.588 L1706.21 683.588 L1705.65 683.588 L1705.09 683.588 L1704.53 683.588 L1703.97 683.588 L1703.41 683.588 L1702.85 683.588 L1702.29 683.588 L1701.73 683.588 L1701.17 683.588 L1700.61 683.588 L1700.05 683.588 L1699.5 683.588 L1698.94 683.588 L1698.38 683.588 L1697.82 683.588 L1697.26 683.588 L1696.7 683.588 L1696.14 683.588 L1695.58 683.588 L1695.02 683.588 L1694.46 683.588 L1693.9 683.588 L1693.34 683.588 L1692.78 683.588 L1692.23 683.588 L1691.67 683.588 L1691.11 683.588 L1690.55 683.588 L1689.99 683.588 L1689.43 683.588 L1688.87 683.588 L1688.31 683.588 L1687.75 683.588 L1687.19 683.588 L1686.63 683.588 L1686.07 683.588 L1685.51 683.588 L1684.95 683.588 L1684.4 683.588 L1683.84 683.588 L1683.28 683.588 L1682.72 683.588 L1682.16 683.588 L1681.6 683.588 L1681.04 683.588 L1680.48 683.588 L1679.92 683.588 L1679.36 683.588 L1678.8 683.588 L1678.24 683.588 L1677.68 683.588 L1677.13 683.588 L1676.57 683.588 L1676.01 683.588 L1675.45 683.588 L1674.89 683.588 L1674.33 683.588 L1673.77 683.588 L1673.21 683.588 L1672.65 683.588 L1672.09 683.588 L1671.53 683.588 L1670.97 683.588 L1670.41 683.588 L1669.85 683.588 L1669.3 683.588 L1668.74 683.588 L1668.18 683.588 L1667.62 683.588 L1667.06 683.588 L1666.5 683.588 L1665.94 683.588 L1665.38 683.588 L1664.82 683.588 L1664.26 683.588 L1663.7 683.588 L1663.14 683.588 L1662.58 683.588 L1662.03 683.588 L1661.47 683.588 L1660.91 683.588 L1660.35 683.588 L1659.79 683.588 L1659.23 683.588 L1658.67 683.588 L1658.11 683.588 L1657.55 683.588 L1656.99 683.588 L1656.43 683.588 L1655.87 683.588 L1655.31 683.588 L1654.76 683.588 L1654.2 683.588 L1653.64 683.588 L1653.08 683.588 L1652.52 683.588 L1651.96 683.588 L1651.4 683.588 L1650.84 683.588 L1650.28 683.588 L1649.72 683.588 L1649.16 683.588 L1648.6 683.588 L1648.04 683.588 L1647.48 683.588 L1646.93 683.588 L1646.37 683.588 L1645.81 683.588 L1645.25 683.588 L1644.69 683.588 L1644.13 683.588 L1643.57 683.588 L1643.01 683.588 L1642.45 683.588 L1641.89 683.588 L1641.33 683.588 L1640.77 683.588 L1640.21 683.588 L1639.66 683.588 L1639.1 683.588 L1638.54 683.588 L1637.98 683.588 L1637.42 683.588 L1636.86 683.588 L1636.3 683.588 L1635.74 683.588 L1635.18 683.588 L1634.62 683.588 L1634.06 683.588 L1633.5 683.588 L1632.94 683.588 L1632.39 683.588 L1631.83 683.588 L1631.27 683.588 L1630.71 683.588 L1630.15 683.588 L1629.59 683.588 L1629.03 683.588 L1628.47 683.588 L1627.91 683.588 L1627.35 683.588 L1626.79 683.588 L1626.23 683.588 L1625.67 683.588 L1625.11 683.588 L1624.56 683.588 L1624 683.588 L1623.44 683.588 L1622.88 683.588 L1622.32 683.588 L1621.76 683.588 L1621.2 683.588 L1620.64 683.588 L1620.08 683.588 L1619.52 683.588 L1618.96 683.588 L1618.4 683.588 L1617.84 683.588 L1617.29 683.588 L1616.73 683.588 L1616.17 683.588 L1615.61 683.588 L1615.05 683.588 L1614.49 683.588 L1613.93 683.588 L1613.37 683.588 L1612.81 683.588 L1612.25 683.588 L1611.69 683.588 L1611.13 683.588 L1610.57 683.588 L1610.02 683.588 L1609.46 683.588 L1608.9 683.588 L1608.34 683.588 L1607.78 683.588 L1607.22 683.588 L1606.66 683.588 L1606.1 683.588 L1605.54 683.588 L1604.98 683.588 L1604.42 683.588 L1603.86 683.588 L1603.3 683.588 L1602.74 683.588 L1602.19 683.588 L1601.63 683.588 L1601.07 683.588 L1600.51 683.588 L1599.95 683.588 L1599.39 683.588 L1598.83 683.588 L1598.27 683.588 L1597.71 683.588 L1597.15 683.588 L1596.59 683.588 L1596.03 683.588 L1595.47 683.588 L1594.92 683.588 L1594.36 683.588 L1593.8 683.588 L1593.24 683.588 L1592.68 683.588 L1592.12 683.588 L1591.56 683.588 L1591 683.588 L1590.44 683.588 L1589.88 683.588 L1589.32 683.588 L1588.76 683.588 L1588.2 683.588 L1587.65 683.588 L1587.09 683.588 L1586.53 683.588 L1585.97 683.588 L1585.41 683.588 L1584.85 683.588 L1584.29 683.588 L1583.73 683.588 L1583.17 683.588 L1582.61 683.588 L1582.05 683.588 L1581.49 683.588 L1580.93 683.588 L1580.37 683.588 L1579.82 683.588 L1579.26 683.588 L1578.7 683.588 L1578.14 683.588 L1577.58 683.588 L1577.02 683.588 L1576.46 683.588 L1575.9 683.588 L1575.34 683.588 L1574.78 683.588 L1574.22 683.588 L1573.66 683.588 L1573.1 683.588 L1572.55 683.588 L1571.99 683.588 L1571.43 683.588 L1570.87 683.588 L1570.31 683.588 L1569.75 683.588 L1569.19 683.588 L1568.63 683.588 L1568.07 683.588 L1567.51 683.588 L1566.95 683.588 L1566.39 683.588 L1565.83 683.588 L1565.28 683.588 L1564.72 683.588 L1564.16 683.588 L1563.6 683.588 L1563.04 683.588 L1562.48 683.588 L1561.92 683.588 L1561.36 683.588 L1560.8 683.588 L1560.24 683.588 L1559.68 683.588 L1559.12 683.588 L1558.56 683.588 L1558 683.588 L1557.45 683.588 L1556.89 683.588 L1556.33 683.588 L1555.77 683.588 L1555.21 683.588 L1554.65 683.588 L1554.09 683.588 L1553.53 683.588 L1552.97 683.588 L1552.41 683.588 L1551.85 683.588 L1551.29 683.588 L1550.73 683.588 L1550.18 683.588 L1549.62 683.588 L1549.06 683.588 L1548.5 683.588 L1547.94 683.588 L1547.38 683.588 L1546.82 683.588 L1546.26 683.588 L1545.7 683.588 L1545.14 683.588 L1544.58 683.588 L1544.02 683.588 L1543.46 683.588 L1542.9 683.588 L1542.35 683.588 L1541.79 683.588 L1541.23 683.588 L1540.67 683.588 L1540.11 683.588 L1539.55 683.588 L1538.99 683.588 L1538.43 683.588 L1537.87 683.588 L1537.31 683.588 L1536.75 683.588 L1536.19 683.588 L1535.63 683.588 L1535.08 683.588 L1534.52 683.588 L1533.96 683.588 L1533.4 683.588 L1532.84 683.588 L1532.28 683.588 L1531.72 683.588 L1531.16 683.588 L1530.6 683.588 L1530.04 683.588 L1529.48 683.588 L1528.92 683.588 L1528.36 683.588 L1527.81 683.588 L1527.25 683.588 L1526.69 683.588 L1526.13 683.588 L1525.57 683.588 L1525.01 683.588 L1524.45 683.588 L1523.89 683.588 L1523.33 683.588 L1522.77 683.588 L1522.21 683.588 L1521.65 683.588 L1521.09 683.588 L1520.53 683.588 L1519.98 683.588 L1519.42 683.588 L1518.86 683.588 L1518.3 683.588 L1517.74 683.588 L1517.18 683.588 L1516.62 683.588 L1516.06 683.588 L1515.5 683.588 L1514.94 683.588 L1514.38 683.588 L1513.82 683.588 L1513.26 683.588 L1512.71 683.588 L1512.15 683.588 L1511.59 683.588 L1511.03 683.588 L1510.47 683.588 L1509.91 683.588 L1509.35 683.588 L1508.79 683.588 L1508.23 683.588 L1507.67 683.588 L1507.11 683.588 L1506.55 683.588 L1505.99 683.588 L1505.44 683.588 L1504.88 683.588 L1504.32 683.588 L1503.76 683.588 L1503.2 683.588 L1502.64 683.588 L1502.08 683.588 L1501.52 683.588 L1500.96 683.588 L1500.4 683.588 L1499.84 683.588 L1499.28 683.588 L1498.72 683.588 L1498.16 683.588 L1497.61 683.588 L1497.05 683.588 L1496.49 683.588 L1495.93 683.588 L1495.37 683.588 L1494.81 683.588 L1494.25 683.588 L1493.69 683.588 L1493.13 683.588 L1492.57 683.588 L1492.01 683.588 L1491.45 683.588 L1490.89 683.588 L1490.34 683.588 L1489.78 683.588 L1489.22 683.588 L1488.66 683.588 L1488.1 683.588 L1487.54 683.588 L1486.98 683.588 L1486.42 683.588 L1485.86 683.588 L1485.3 683.588 L1484.74 683.588 L1484.18 683.588 L1483.62 683.588 L1483.07 683.588 L1482.51 683.588 L1481.95 683.588 L1481.39 683.588 L1480.83 683.588 L1480.27 683.588 L1479.71 683.588 L1479.15 683.588 L1478.59 683.588 L1478.03 683.588 L1477.47 683.588 L1476.91 683.588 L1476.35 683.588 L1475.79 683.588 L1475.24 683.588 L1474.68 683.588 L1474.12 683.588 L1473.56 683.588 L1473 683.588 L1472.44 683.588 L1471.88 683.588 L1471.32 683.588 L1470.76 683.588 L1470.2 683.588 L1469.64 683.588 L1469.08 683.588 L1468.52 683.588 L1467.97 683.588 L1467.41 683.588 L1466.85 683.588 L1466.29 683.588 L1465.73 683.588 L1465.17 683.588 L1464.61 683.588 L1464.05 683.588 L1463.49 683.588 L1462.93 683.588 L1462.37 683.588 L1461.81 683.588 L1461.25 683.588 L1460.7 683.588 L1460.14 683.588 L1459.58 683.588 L1459.02 683.588 L1458.46 683.588 L1457.9 683.588 L1457.34 683.588 L1456.78 683.588 L1456.22 683.588 L1455.66 683.588 L1455.1 683.588 L1454.54 683.588 L1453.98 683.588 L1453.42 683.588 L1452.87 683.588 L1452.31 683.588 L1451.75 683.588 L1451.19 683.588 L1450.63 683.588 L1450.07 683.588 L1449.51 683.588 L1448.95 683.588 L1448.39 683.588 L1447.83 683.588 L1447.27 683.588 L1446.71 683.588 L1446.15 683.588 L1445.6 683.588 L1445.04 683.588 L1444.48 683.588 L1443.92 683.588 L1443.36 683.588 L1442.8 683.588 L1442.24 683.588 L1441.68 683.588 L1441.12 683.588 L1440.56 683.588 L1440 683.588 L1439.44 683.588 L1438.88 683.588 L1438.33 683.588 L1437.77 683.588 L1437.21 683.588 L1436.65 683.588 L1436.09 683.588 L1435.53 683.588 L1434.97 683.588 L1434.41 683.588 L1433.85 683.588 L1433.29 683.588 L1432.73 683.588 L1432.17 683.588 L1431.61 683.588 L1431.05 683.588 L1430.5 683.588 L1429.94 683.588 L1429.38 683.588 L1428.82 683.588 L1428.26 683.588 L1427.7 683.588 L1427.14 683.588 L1426.58 683.588 L1426.02 683.588 L1425.46 683.588 L1424.9 683.588 L1424.34 683.588 L1423.78 683.588 L1423.23 683.588 L1422.67 683.588 L1422.11 683.588 L1421.55 683.588 L1420.99 683.588 L1420.43 683.588 L1419.87 683.588 L1419.31 683.588 L1418.75 683.588 L1418.19 683.588 L1417.63 683.588 L1417.07 683.588 L1416.51 683.588 L1415.95 683.588 L1415.4 683.588 L1414.84 683.588 L1414.28 683.588 L1413.72 683.588 L1413.16 683.588 L1412.6 683.588 L1412.04 683.588 L1411.48 683.588 L1410.92 683.588 L1410.36 683.588 L1409.8 683.588 L1409.24 683.588 L1408.68 683.588 L1408.13 683.588 L1407.57 683.588 L1407.01 683.588 L1406.45 683.588 L1405.89 683.588 L1405.33 683.588 L1404.77 683.588 L1404.21 683.588 L1403.65 683.588 L1403.09 683.588 L1402.53 683.588 L1401.97 683.588 L1401.41 683.588 L1400.86 683.588 L1400.3 683.588 L1399.74 683.588 L1399.18 683.588 L1398.62 683.588 L1398.06 683.588 L1397.5 683.588 L1396.94 683.588 L1396.38 683.588 L1395.82 683.588 L1395.26 683.588 L1394.7 683.588 L1394.14 683.588 L1393.58 683.588 L1393.03 683.588 L1392.47 683.588 L1391.91 683.588 L1391.35 683.588 L1390.79 683.588 L1390.23 683.588 L1389.67 683.588 L1389.11 683.588 L1388.55 683.588 L1387.99 683.588 L1387.43 683.588 L1386.87 683.588 L1386.31 683.588 L1385.76 683.588 L1385.2 683.588 L1384.64 683.588 L1384.08 683.588 L1383.52 683.588 L1382.96 683.588 L1382.4 683.588 L1381.84 683.588 L1381.28 683.588 L1380.72 683.588 L1380.16 683.588 L1379.6 683.588 L1379.04 683.588 L1378.49 683.588 L1377.93 683.588 L1377.37 683.588 L1376.81 683.588 L1376.25 683.588 L1375.69 683.588 L1375.13 683.588 L1374.57 683.588 L1374.01 683.588 L1373.45 683.588 L1372.89 683.588 L1372.33 683.588 L1371.77 683.588 L1371.21 683.588 L1370.66 683.588 L1370.1 683.588 L1369.54 683.588 L1368.98 683.588 L1368.42 683.588 L1367.86 683.588 L1367.3 683.588 L1366.74 683.588 L1366.18 683.588 L1365.62 683.588 L1365.06 683.588 L1364.5 683.588 L1363.94 683.588 L1363.39 683.588 L1362.83 683.588 L1362.27 683.588 L1361.71 683.588 L1361.15 683.588 L1360.59 683.588 L1360.03 683.588 L1359.47 683.588 L1358.91 683.588 L1358.35 683.588 L1357.79 683.588 L1357.23 683.588 L1356.67 683.588 L1356.12 683.588 L1355.56 683.588 L1355 683.588 L1354.44 683.588 L1353.88 683.588 L1353.32 683.588 L1352.76 683.588 L1352.2 683.588 L1351.64 683.588 L1351.08 683.588 L1350.52 683.588 L1349.96 683.588 L1349.4 683.588 L1348.84 683.588 L1348.29 683.588 L1347.73 683.588 L1347.17 683.588 L1346.61 683.588 L1346.05 683.588 L1345.49 683.588 L1344.93 683.588 L1344.37 683.588 L1343.81 683.588 L1343.25 683.588 L1342.69 683.588 L1342.13 683.588 L1341.57 683.588 L1341.02 683.588 L1340.46 683.588 L1339.9 683.588 L1339.34 683.588 L1338.78 683.588 L1338.22 683.588 L1337.66 683.588 L1337.1 683.588 L1336.54 683.588 L1335.98 683.588 L1335.42 683.588 L1334.86 683.588 L1334.3 683.588 L1333.75 683.588 L1333.19 683.588 L1332.63 683.588 L1332.07 683.588 L1331.51 683.588 L1330.95 683.588 L1330.39 683.588 L1329.83 683.588 L1329.27 683.588 L1328.71 683.588 L1328.15 683.588 L1327.59 683.588 L1327.03 683.588 L1326.47 683.588 L1325.92 683.588 L1325.36 683.588 L1324.8 683.588 L1324.24 683.588 L1323.68 683.588 L1323.12 683.588 L1322.56 683.588 L1322 683.588 L1321.44 683.588 L1320.88 683.588 L1320.32 683.588 L1319.76 683.588 L1319.2 683.588 L1318.65 683.588 L1318.09 683.588 L1317.53 683.588 L1316.97 683.588 L1316.41 683.588 L1315.85 683.588 L1315.29 683.588 L1314.73 683.588 L1314.17 683.588 L1313.61 683.588 L1313.05 683.588 L1312.49 683.588 L1311.93 683.588 L1311.38 683.588 L1310.82 683.588 L1310.26 683.588 L1309.7 683.588 L1309.14 683.588 L1308.58 683.588 L1308.02 683.588 L1307.46 683.588 L1306.9 683.588 L1306.34 683.588 L1305.78 683.588 L1305.22 683.588 L1304.66 683.588 L1304.1 683.588 L1303.55 683.588 L1302.99 683.588 L1302.43 683.588 L1301.87 683.588 L1301.31 683.588 L1300.75 683.588 L1300.19 683.588 L1299.63 683.588 L1299.07 683.588 L1298.51 683.588 L1297.95 683.588 L1297.39 683.588 L1296.83 683.588 L1296.28 683.588 L1295.72 683.588 L1295.16 683.588 L1294.6 683.588 L1294.04 683.588 L1293.48 683.588 L1292.92 683.588 L1292.36 683.588 L1291.8 683.588 L1291.24 683.588 L1290.68 683.588 L1290.12 683.588 L1289.56 683.588 L1289 683.588 L1288.45 683.588 L1287.89 683.588 L1287.33 683.588 L1286.77 683.588 L1286.21 683.588 L1285.65 683.588 L1285.09 683.588 L1284.53 683.588 L1283.97 683.588 L1283.41 683.588 L1282.85 683.588 L1282.29 683.588 L1281.73 683.588 L1281.18 683.588 L1280.62 683.588 L1280.06 683.588 L1279.5 683.588 L1278.94 683.588 L1278.38 683.588 L1277.82 683.588 L1277.26 683.588 L1276.7 683.588 L1276.14 683.588 L1275.58 683.588 L1275.02 683.588 L1274.46 683.588 L1273.91 683.588 L1273.35 683.588 L1272.79 683.588 L1272.23 683.588 L1271.67 683.588 L1271.11 683.588 L1270.55 683.588 L1269.99 683.588 L1269.43 683.588 L1268.87 683.588 L1268.31 683.588 L1267.75 683.588 L1267.19 683.588 L1266.63 683.588 L1266.08 683.588 L1265.52 683.588 L1264.96 683.588 L1264.4 683.588 L1263.84 683.588 L1263.28 683.588 L1262.72 683.588 L1262.16 683.588 L1261.6 683.588 L1261.04 683.588 L1260.48 683.588 L1259.92 683.588 L1259.36 683.588 L1258.81 683.588 L1258.25 683.588 L1257.69 683.588 L1257.13 683.588 L1256.57 683.588 L1256.01 683.588 L1255.45 683.588 L1254.89 683.588 L1254.33 683.588 L1253.77 683.588 L1253.21 683.588 L1252.65 683.588 L1252.09 683.588 L1251.54 683.588 L1250.98 683.588 L1250.42 683.588 L1249.86 683.588 L1249.3 683.588 L1248.74 683.588 L1248.18 683.588 L1247.62 683.588 L1247.06 683.588 L1246.5 683.588 L1245.94 683.588 L1245.38 683.588 L1244.82 683.588 L1244.26 683.588 L1243.71 683.588 L1243.15 683.588 L1242.59 683.588 L1242.03 683.588 L1241.47 683.588 L1240.91 683.588 L1240.35 683.588 L1239.79 683.588 L1239.23 683.588 L1238.67 683.588 L1238.11 683.588 L1237.55 683.588 L1236.99 683.588 L1236.44 683.588 L1235.88 683.588 L1235.32 683.588 L1234.76 683.588 L1234.2 683.588 L1233.64 683.588 L1233.08 683.588 L1232.52 683.588 L1231.96 683.588 L1231.4 683.588 L1230.84 683.588 L1230.28 683.588 L1229.72 683.588 L1229.17 683.588 L1228.61 683.588 L1228.05 683.588 L1227.49 683.588 L1226.93 683.588 L1226.37 683.588 L1225.81 683.588 L1225.25 683.588 L1224.69 683.588 L1224.13 683.588 L1223.57 683.588 L1223.01 683.588 L1222.45 683.588 L1221.89 683.588 L1221.34 683.588 L1220.78 683.588 L1220.22 683.588 L1219.66 683.588 L1219.1 683.588 L1218.54 683.588 L1217.98 683.588 L1217.42 683.588 L1216.86 683.588 L1216.3 683.588 L1215.74 683.588 L1215.18 683.588 L1214.62 683.588 L1214.07 683.588 L1213.51 683.588 L1212.95 683.588 L1212.39 683.588 L1211.83 683.588 L1211.27 683.588 L1210.71 683.588 L1210.15 683.588 L1209.59 683.588 L1209.03 683.588 L1208.47 683.588 L1207.91 683.588 L1207.35 683.588 L1206.8 683.588 L1206.24 683.588 L1205.68 683.588 L1205.12 683.588 L1204.56 683.588 L1204 683.588 L1203.44 683.588 L1202.88 683.588 L1202.32 683.588 L1201.76 683.588 L1201.2 683.588 L1200.64 683.588 L1200.08 683.588 L1199.52 683.588 L1198.97 683.588 L1198.41 683.588 L1197.85 683.588 L1197.29 683.588 L1196.73 683.588 L1196.17 683.588 L1195.61 683.588 L1195.05 683.588 L1194.49 683.588 L1193.93 683.588 L1193.37 683.588 L1192.81 683.588 L1192.25 683.588 L1191.7 683.588 L1191.14 683.588 L1190.58 683.588 L1190.02 683.588 L1189.46 683.588 L1188.9 683.588 L1188.34 683.588 L1187.78 683.588 L1187.22 683.588 L1186.66 683.588 L1186.1 683.588 L1185.54 683.588 L1184.98 683.588 L1184.43 683.588 L1183.87 683.588 L1183.31 683.588 L1182.75 683.588 L1182.19 683.588 L1181.63 683.588 L1181.07 683.588 L1180.51 683.588 L1179.95 683.588 L1179.39 683.588 L1178.83 683.588 L1178.27 683.588 L1177.71 683.588 L1177.15 683.588 L1176.6 683.588 L1176.04 683.588 L1175.48 683.588 L1174.92 683.588 L1174.36 683.588 L1173.8 683.588 L1173.24 683.588 L1172.68 683.588 L1172.12 683.588 L1171.56 683.588 L1171 683.588 L1170.44 683.588 L1169.88 683.588 L1169.33 683.588 L1168.77 683.588 L1168.21 683.588 L1167.65 683.588 L1167.09 683.588 L1166.53 683.588 L1165.97 683.588 L1165.41 683.588 L1164.85 683.588 L1164.29 683.588 L1163.73 683.588 L1163.17 683.588 L1162.61 683.588 L1162.05 683.588 L1161.5 683.588 L1160.94 683.588 L1160.38 683.588 L1159.82 683.588 L1159.26 683.588 L1158.7 683.588 L1158.14 683.588 L1157.58 683.588 L1157.02 683.588 L1156.46 683.588 L1155.9 683.588 L1155.34 683.588 L1154.78 683.588 L1154.23 683.588 L1153.67 683.588 L1153.11 683.588 L1152.55 683.588 L1151.99 683.588 L1151.43 683.588 L1150.87 683.588 L1150.31 683.588 L1149.75 683.588 L1149.19 683.588 L1148.63 683.588 L1148.07 683.588 L1147.51 683.588 L1146.96 683.588 L1146.4 683.588 L1145.84 683.588 L1145.28 683.588 L1144.72 683.588 L1144.16 683.588 L1143.6 683.588 L1143.04 683.588 L1142.48 683.588 L1141.92 683.588 L1141.36 683.588 L1140.8 683.588 L1140.24 683.588 L1139.68 683.588 L1139.13 683.588 L1138.57 683.588 L1138.01 683.588 L1137.45 683.588 L1136.89 683.588 L1136.33 683.588 L1135.77 683.588 L1135.21 683.588 L1134.65 683.588 L1134.09 683.588 L1133.53 683.588 L1132.97 683.588 L1132.41 683.588 L1131.86 683.588 L1131.3 683.588 L1130.74 683.588 L1130.18 683.588 L1129.62 683.588 L1129.06 683.588 L1128.5 683.588 L1127.94 683.588 L1127.38 683.588 L1126.82 683.588 L1126.26 683.588 L1125.7 683.588 L1125.14 683.588 L1124.59 683.588 L1124.03 683.588 L1123.47 683.588 L1122.91 683.588 L1122.35 683.588 L1121.79 683.588 L1121.23 683.588 L1120.67 683.588 L1120.11 683.588 L1119.55 683.588 L1118.99 683.588 L1118.43 683.588 L1117.87 683.588 L1117.31 683.588 L1116.76 683.588 L1116.2 683.588 L1115.64 683.588 L1115.08 683.588 L1114.52 683.588 L1113.96 683.588 L1113.4 683.588 L1112.84 683.588 L1112.28 683.588 L1111.72 683.588 L1111.16 683.588 L1110.6 683.588 L1110.04 683.588 L1109.49 683.588 L1108.93 683.588 L1108.37 683.588 L1107.81 683.588 L1107.25 683.588 L1106.69 683.588 L1106.13 683.588 L1105.57 683.588 L1105.01 683.588 L1104.45 683.588 L1103.89 683.588 L1103.33 683.588 L1102.77 683.588 L1102.22 683.588 L1101.66 683.588 L1101.1 683.588 L1100.54 683.588 L1099.98 683.588 L1099.42 683.588 L1098.86 683.588 L1098.3 683.588 L1097.74 683.588 L1097.18 683.588 L1096.62 683.588 L1096.06 683.588 L1095.5 683.588 L1094.94 683.588 L1094.39 683.588 L1093.83 683.588 L1093.27 683.588 L1092.71 683.588 L1092.15 683.588 L1091.59 683.588 L1091.03 683.588 L1090.47 683.588 L1089.91 683.588 L1089.35 683.588 L1088.79 683.588 L1088.23 683.588 L1087.67 683.588 L1087.12 683.588 L1086.56 683.588 L1086 683.588 L1085.44 683.588 L1084.88 683.588 L1084.32 683.588 L1083.76 683.588 L1083.2 683.588 L1082.64 683.588 L1082.08 683.588 L1081.52 683.588 L1080.96 683.588 L1080.4 683.588 L1079.85 683.588 L1079.29 683.588 L1078.73 683.588 L1078.17 683.588 L1077.61 683.588 L1077.05 683.588 L1076.49 683.588 L1075.93 683.588 L1075.37 683.588 L1074.81 683.588 L1074.25 683.588 L1073.69 683.588 L1073.13 683.588 L1072.57 683.588 L1072.02 683.588 L1071.46 683.588 L1070.9 683.588 L1070.34 683.588 L1069.78 683.588 L1069.22 683.588 L1068.66 683.588 L1068.1 683.588 L1067.54 683.588 L1066.98 683.588 L1066.42 683.588 L1065.86 683.588 L1065.3 683.588 L1064.75 683.588 L1064.19 683.588 L1063.63 683.588 L1063.07 683.588 L1062.51 683.588 L1061.95 683.588 L1061.39 683.588 L1060.83 683.588 L1060.27 683.588 L1059.71 683.588 L1059.15 683.588 L1058.59 683.588 L1058.03 683.588 L1057.48 683.588 L1056.92 683.588 L1056.36 683.588 L1055.8 683.588 L1055.24 683.588 L1054.68 683.588 L1054.12 683.588 L1053.56 683.588 L1053 683.588 L1052.44 683.588 L1051.88 683.588 L1051.32 683.588 L1050.76 683.588 L1050.2 683.588 L1049.65 683.588 L1049.09 683.588 L1048.53 683.588 L1047.97 683.588 L1047.41 683.588 L1046.85 683.588 L1046.29 683.588 L1045.73 683.588 L1045.17 683.588 L1044.61 683.588 L1044.05 683.588 L1043.49 683.588 L1042.93 683.588 L1042.38 683.588 L1041.82 683.588 L1041.26 683.588 L1040.7 683.588 L1040.14 683.588 L1039.58 683.588 L1039.02 683.588 L1038.46 683.588 L1037.9 683.588 L1037.34 683.588 L1036.78 683.588 L1036.22 683.588 L1035.66 683.588 L1035.1 683.588 L1034.55 683.588 L1033.99 683.588 L1033.43 683.588 L1032.87 683.588 L1032.31 683.588 L1031.75 683.588 L1031.19 683.588 L1030.63 683.588 L1030.07 683.588 L1029.51 683.588 L1028.95 683.588 L1028.39 683.588 L1027.83 683.588 L1027.28 683.588 L1026.72 683.588 L1026.16 683.588 L1025.6 683.588 L1025.04 683.588 L1024.48 683.588 L1023.92 683.588 L1023.36 683.588 L1022.8 683.588 L1022.24 683.588 L1021.68 683.588 L1021.12 683.588 L1020.56 683.588 L1020.01 683.588 L1019.45 683.588 L1018.89 683.588 L1018.33 683.588 L1017.77 683.588 L1017.21 683.588 L1016.65 683.588 L1016.09 683.588 L1015.53 683.588 L1014.97 683.588 L1014.41 683.588 L1013.85 683.588 L1013.29 683.588 L1012.73 683.588 L1012.18 683.588 L1011.62 683.588 L1011.06 683.588 L1010.5 683.588 L1009.94 683.588 L1009.38 683.588 L1008.82 683.588 L1008.26 683.588 L1007.7 683.588 L1007.14 683.588 L1006.58 683.588 L1006.02 683.588 L1005.46 683.588 L1004.91 683.588 L1004.35 683.588 L1003.79 683.588 L1003.23 683.588 L1002.67 683.588 L1002.11 683.588 L1001.55 683.588 L1000.99 683.588 L1000.43 683.588 L999.872 683.588 L999.313 683.588 L998.754 683.588 L998.194 683.588 L997.635 683.588 L997.076 683.588 L996.517 683.588 L995.957 683.588 L995.398 683.588 L994.839 683.588 L994.28 683.588 L993.72 683.588 L993.161 683.588 L992.602 683.588 L992.043 683.588 L991.483 683.588 L990.924 683.588 L990.365 683.588 L989.806 683.588 L989.246 683.588 L988.687 683.588 L988.128 683.588 L987.569 683.588 L987.009 683.588 L986.45 683.588 L985.891 683.588 L985.332 683.588 L984.772 683.588 L984.213 683.588 L983.654 683.588 L983.095 683.588 L982.535 683.588 L981.976 683.588 L981.417 683.588 L980.858 683.588 L980.298 683.588 L979.739 683.588 L979.18 683.588 L978.621 683.588 L978.061 683.588 L977.502 683.588 L976.943 683.588 L976.384 683.588 L975.824 683.588 L975.265 683.588 L974.706 683.588 L974.147 683.588 L973.587 683.588 L973.028 683.588 L972.469 683.588 L971.91 683.588 L971.35 683.588 L970.791 683.588 L970.232 683.588 L969.673 683.588 L969.113 683.588 L968.554 683.588 L967.995 683.588 L967.436 683.588 L966.876 683.588 L966.317 683.588 L965.758 683.588 L965.199 683.588 L964.639 683.588 L964.08 683.588 L963.521 683.588 L962.962 683.588 L962.402 683.588 L961.843 683.588 L961.284 683.588 L960.725 683.588 L960.165 683.588 L959.606 683.588 L959.047 683.588 L958.488 683.588 L957.928 683.588 L957.369 683.588 L956.81 683.588 L956.251 683.588 L955.691 683.588 L955.132 683.588 L954.573 683.588 L954.014 683.588 L953.454 683.588 L952.895 683.588 L952.336 683.588 L951.777 683.588 L951.217 683.588 L950.658 683.588 L950.099 683.588 L949.54 683.588 L948.98 683.588 L948.421 683.588 L947.862 683.588 L947.303 683.588 L946.743 683.588 L946.184 683.588 L945.625 683.588 L945.066 683.588 L944.506 683.588 L943.947 683.588 L943.388 683.588 L942.829 683.588 L942.269 683.588 L941.71 683.588 L941.151 683.588 L940.592 683.588 L940.032 683.588 L939.473 683.588 L938.914 683.588 L938.355 683.588 L937.795 683.588 L937.236 683.588 L936.677 683.588 L936.118 683.588 L935.558 683.588 L934.999 683.588 L934.44 683.588 L933.881 683.588 L933.321 683.588 L932.762 683.588 L932.203 683.588 L931.644 683.588 L931.084 683.588 L930.525 683.588 L929.966 683.588 L929.406 683.588 L928.847 683.588 L928.288 683.588 L927.729 683.588 L927.169 683.588 L926.61 683.588 L926.051 683.588 L925.492 683.588 L924.932 683.588 L924.373 683.588 L923.814 683.588 L923.255 683.588 L922.695 683.588 L922.136 683.588 L921.577 683.588 L921.018 683.588 L920.458 683.588 L919.899 683.588 L919.34 683.588 L918.781 683.588 L918.221 683.588 L917.662 683.588 L917.103 683.588 L916.544 683.588 L915.984 683.588 L915.425 683.588 L914.866 683.588 L914.307 683.588 L913.747 683.588 L913.188 683.588 L912.629 683.588 L912.07 683.588 L911.51 683.588 L910.951 683.588 L910.392 683.588 L909.833 683.588 L909.273 683.588 L908.714 683.588 L908.155 683.588 L907.596 683.588 L907.036 683.588 L906.477 683.588 L905.918 683.588 L905.359 683.588 L904.799 683.588 L904.24 683.588 L903.681 683.588 L903.122 683.588 L902.562 683.588 L902.003 683.588 L901.444 683.588 L900.885 683.588 L900.325 683.588 L899.766 683.588 L899.207 683.588 L898.648 683.588 L898.088 683.588 L897.529 683.588 L896.97 683.588 L896.411 683.588 L895.851 683.588 L895.292 683.588 L894.733 683.588 L894.174 683.588 L893.614 683.588 L893.055 683.588 L892.496 683.588 L891.937 683.588 L891.377 683.588 L890.818 683.588 L890.259 683.588 L889.7 683.588 L889.14 683.588 L888.581 683.588 L888.022 683.588 L887.463 683.588 L886.903 683.588 L886.344 683.588 L885.785 683.588 L885.226 683.588 L884.666 683.588 L884.107 683.588 L883.548 683.588 L882.989 683.588 L882.429 683.588 L881.87 683.588 L881.311 683.588 L880.752 683.588 L880.192 683.588 L879.633 683.588 L879.074 683.588 L878.515 683.588 L877.955 683.588 L877.396 683.588 L876.837 683.588 L876.278 683.588 L875.718 683.588 L875.159 683.588 L874.6 683.588 L874.041 683.588 L873.481 683.588 L872.922 683.588 L872.363 683.588 L871.804 683.588 L871.244 683.588 L870.685 683.588 L870.126 683.588 L869.567 683.588 L869.007 683.588 L868.448 683.588 L867.889 683.588 L867.33 683.588 L866.77 683.588 L866.211 683.588 L865.652 683.588 L865.093 683.588 L864.533 683.588 L863.974 683.588 L863.415 683.588 L862.856 683.588 L862.296 683.588 L861.737 683.588 L861.178 683.588 L860.619 683.588 L860.059 683.588 L859.5 683.588 L858.941 683.588 L858.382 683.588 L857.822 683.588 L857.263 683.588 L856.704 683.588 L856.145 683.588 L855.585 683.588 L855.026 683.588 L854.467 683.588 L853.908 683.588 L853.348 683.588 L852.789 683.588 L852.23 683.588 L851.671 683.588 L851.111 683.588 L850.552 683.588 L849.993 683.588 L849.434 683.588 L848.874 683.588 L848.315 683.588 L847.756 683.588 L847.197 683.588 L846.637 683.588 L846.078 683.588 L845.519 683.588 L844.96 683.588 L844.4 683.588 L843.841 683.588 L843.282 683.588 L842.723 683.588 L842.163 683.588 L841.604 683.588 L841.045 683.588 L840.486 683.588 L839.926 683.588 L839.367 683.588 L838.808 683.588 L838.249 683.588 L837.689 683.588 L837.13 683.588 L836.571 683.588 L836.012 683.588 L835.452 683.588 L834.893 683.588 L834.334 683.588 L833.775 683.588 L833.215 683.588 L832.656 683.588 L832.097 683.588 L831.538 683.588 L830.978 683.588 L830.419 683.588 L829.86 683.588 L829.301 683.588 L828.741 683.588 L828.182 683.588 L827.623 683.588 L827.064 683.588 L826.504 683.588 L825.945 683.588 L825.386 683.588 L824.827 683.588 L824.267 683.588 L823.708 683.588 L823.149 683.588 L822.59 683.588 L822.03 683.588 L821.471 683.588 L820.912 683.588 L820.353 683.588 L819.793 683.588 L819.234 683.588 L818.675 683.588 L818.116 683.588 L817.556 683.588 L816.997 683.588 L816.438 683.588 L815.879 683.588 L815.319 683.588 L814.76 683.588 L814.201 683.588 L813.642 683.588 L813.082 683.588 L812.523 683.588 L811.964 683.588 L811.405 683.588 L810.845 683.588 L810.286 683.588 L809.727 683.588 L809.168 683.588 L808.608 683.588 L808.049 683.588 L807.49 683.588 L806.931 683.588 L806.371 683.588 L805.812 683.588 L805.253 683.588 L804.693 683.588 L804.134 683.588 L803.575 683.588 L803.016 683.588 L802.456 683.588 L801.897 683.588 L801.338 683.588 L800.779 683.588 L800.219 683.588 L799.66 683.588 L799.101 683.588 L798.542 683.588 L797.982 683.588 L797.423 683.588 L796.864 683.588 L796.305 683.588 L795.745 683.588 L795.186 683.588 L794.627 683.588 L794.068 683.588 L793.508 683.588 L792.949 683.588 L792.39 683.588 L791.831 683.588 L791.271 683.588 L790.712 683.588 L790.153 683.588 L789.594 683.588 L789.034 683.588 L788.475 683.588 L787.916 683.588 L787.357 683.588 L786.797 683.588 L786.238 683.588 L785.679 683.588 L785.12 683.588 L784.56 683.588 L784.001 683.588 L783.442 683.588 L782.883 683.588 L782.323 683.588 L781.764 683.588 L781.205 683.588 L780.646 683.588 L780.086 683.588 L779.527 683.588 L778.968 683.588 L778.409 683.588 L777.849 683.588 L777.29 683.588 L776.731 683.588 L776.172 683.588 L775.612 683.588 L775.053 683.588 L774.494 683.588 L773.935 683.588 L773.375 683.588 L772.816 683.588 L772.257 683.588 L771.698 683.588 L771.138 683.588 L770.579 683.588 L770.02 683.588 L769.461 683.588 L768.901 683.588 L768.342 683.588 L767.783 683.588 L767.224 683.588 L766.664 683.588 L766.105 683.588 L765.546 683.588 L764.987 683.588 L764.427 683.588 L763.868 683.588 L763.309 683.588 L762.75 683.588 L762.19 683.588 L761.631 683.588 L761.072 683.588 L760.513 683.588 L759.953 683.588 L759.394 683.588 L758.835 683.588 L758.276 683.588 L757.716 683.588 L757.157 683.588 L756.598 683.588 L756.039 683.588 L755.479 683.588 L754.92 683.588 L754.361 683.588 L753.802 683.588 L753.242 683.588 L752.683 683.588 L752.124 683.588 L751.565 683.588 L751.005 683.588 L750.446 683.588 L749.887 683.588 L749.328 683.588 L748.768 683.588 L748.209 683.588 L747.65 683.588 L747.091 683.588 L746.531 683.588 L745.972 683.588 L745.413 683.588 L744.854 683.588 L744.294 683.588 L743.735 683.588 L743.176 683.588 L742.617 683.588 L742.057 683.588 L741.498 683.588 L740.939 683.588 L740.38 683.588 L739.82 683.588 L739.261 683.588 L738.702 683.588 L738.143 683.588 L737.583 683.588 L737.024 683.588 L736.465 683.588 L735.906 683.588 L735.346 683.588 L734.787 683.588 L734.228 683.588 L733.669 683.588 L733.109 683.588 L732.55 683.588 L731.991 683.588 L731.432 683.588 L730.872 683.588 L730.313 683.588 L729.754 683.588 L729.195 683.588 L728.635 683.588 L728.076 683.588 L727.517 683.588 L726.958 683.588 L726.398 683.588 L725.839 683.588 L725.28 683.588 L724.721 683.588 L724.161 683.588 L723.602 683.588 L723.043 683.588 L722.484 683.588 L721.924 683.588 L721.365 683.588 L720.806 683.588 L720.247 683.588  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.51 720.806,687.51 721.365,687.51 721.924,687.51 722.484,687.51 723.043,687.51 723.602,687.51 724.161,687.51 724.721,687.51 725.28,687.51 725.839,687.51 726.398,687.51 726.958,687.51 727.517,687.51 728.076,687.51 728.635,687.51 729.195,687.51 729.754,687.51 730.313,687.51 730.872,687.51 731.432,687.51 731.991,687.51 732.55,687.51 733.109,687.51 733.669,687.51 734.228,687.51 734.787,687.51 735.346,687.51 735.906,687.51 736.465,687.51 737.024,687.51 737.583,687.51 738.143,687.51 738.702,687.51 739.261,687.51 739.82,687.51 740.38,687.51 740.939,687.51 741.498,687.51 742.057,687.51 742.617,687.51 743.176,687.51 743.735,687.51 744.294,687.51 744.854,687.51 745.413,687.51 745.972,687.51 746.531,687.51 747.091,687.51 747.65,687.51 748.209,687.51 748.768,687.51 749.328,687.51 749.887,687.51 750.446,687.51 751.005,687.51 751.565,687.51 752.124,687.51 752.683,687.51 753.242,687.51 753.802,687.51 754.361,687.51 754.92,687.51 755.479,687.51 756.039,687.51 756.598,687.51 757.157,687.51 757.716,687.51 758.276,687.51 758.835,687.51 759.394,687.51 759.953,687.51 760.513,687.51 761.072,687.51 761.631,687.51 762.19,687.51 762.75,687.51 763.309,687.51 763.868,687.51 764.427,687.51 764.987,687.51 765.546,687.51 766.105,687.51 766.664,687.51 767.224,687.51 767.783,687.51 768.342,687.51 768.901,687.51 769.461,687.51 770.02,687.51 770.579,687.51 771.138,687.51 771.698,687.51 772.257,687.51 772.816,687.51 773.375,687.51 773.935,687.51 774.494,687.51 775.053,687.51 775.612,687.51 776.172,687.51 776.731,687.51 777.29,687.51 777.849,687.51 778.409,687.51 778.968,687.51 779.527,687.51 780.086,687.51 780.646,687.51 781.205,687.51 781.764,687.51 782.323,687.51 782.883,687.51 783.442,687.51 784.001,687.51 784.56,687.51 785.12,687.51 785.679,687.51 786.238,687.51 786.797,687.51 787.357,687.51 787.916,687.51 788.475,687.51 789.034,687.51 789.594,687.51 790.153,687.51 790.712,687.51 791.271,687.51 791.831,687.51 792.39,687.51 792.949,687.51 793.508,687.51 794.068,687.51 794.627,687.51 795.186,687.51 795.745,687.51 796.305,687.51 796.864,687.51 797.423,687.51 797.982,687.51 798.542,687.51 799.101,687.51 799.66,687.51 800.219,687.51 800.779,687.51 801.338,687.51 801.897,687.51 802.456,687.51 803.016,687.51 803.575,687.51 804.134,687.51 804.693,687.51 805.253,687.51 805.812,687.51 806.371,687.51 806.931,687.51 807.49,687.51 808.049,687.51 808.608,687.51 809.168,687.51 809.727,687.51 810.286,687.51 810.845,687.51 811.405,687.51 811.964,687.51 812.523,687.51 813.082,687.51 813.642,687.51 814.201,687.51 814.76,687.51 815.319,687.51 815.879,687.51 816.438,687.51 816.997,687.51 817.556,687.51 818.116,687.51 818.675,687.51 819.234,687.51 819.793,687.51 820.353,687.51 820.912,687.51 821.471,687.51 822.03,687.51 822.59,687.51 823.149,687.51 823.708,687.51 824.267,687.51 824.827,687.51 825.386,687.51 825.945,687.51 826.504,687.51 827.064,687.51 827.623,687.51 828.182,687.51 828.741,687.51 829.301,687.51 829.86,687.51 830.419,687.51 830.978,687.51 831.538,687.51 832.097,687.51 832.656,687.51 833.215,687.51 833.775,687.51 834.334,687.51 834.893,687.51 835.452,687.51 836.012,687.51 836.571,687.51 837.13,687.51 837.689,687.51 838.249,687.51 838.808,687.51 839.367,687.51 839.926,687.51 840.486,687.51 841.045,687.51 841.604,687.51 842.163,687.51 842.723,687.51 843.282,687.51 843.841,687.51 844.4,687.51 844.96,687.51 845.519,687.51 846.078,687.51 846.637,687.51 847.197,687.51 847.756,687.51 848.315,687.51 848.874,687.51 849.434,687.51 849.993,687.51 850.552,687.51 851.111,687.51 851.671,687.51 852.23,687.51 852.789,687.51 853.348,687.51 853.908,687.51 854.467,687.51 855.026,687.51 855.585,687.51 856.145,687.51 856.704,687.51 857.263,687.51 857.822,687.51 858.382,687.51 858.941,687.51 859.5,687.51 860.059,687.51 860.619,687.51 861.178,687.51 861.737,687.51 862.296,687.51 862.856,687.51 863.415,687.51 863.974,687.51 864.533,687.51 865.093,687.51 865.652,687.51 866.211,687.51 866.77,687.51 867.33,687.51 867.889,687.51 868.448,687.51 869.007,687.51 869.567,687.51 870.126,687.51 870.685,687.51 871.244,687.51 871.804,687.51 872.363,687.51 872.922,687.51 873.481,687.51 874.041,687.51 874.6,687.51 875.159,687.51 875.718,687.51 876.278,687.51 876.837,687.51 877.396,687.51 877.955,687.51 878.515,687.51 879.074,687.51 879.633,687.51 880.192,687.51 880.752,687.51 881.311,687.51 881.87,687.51 882.429,687.51 882.989,687.51 883.548,687.51 884.107,687.51 884.666,687.51 885.226,687.51 885.785,687.51 886.344,687.51 886.903,687.51 887.463,687.51 888.022,687.51 888.581,687.51 889.14,687.51 889.7,687.51 890.259,687.51 890.818,687.51 891.377,687.51 891.937,687.51 892.496,687.51 893.055,687.51 893.614,687.51 894.174,687.51 894.733,687.51 895.292,687.51 895.851,687.51 896.411,687.51 896.97,687.51 897.529,687.51 898.088,687.51 898.648,687.51 899.207,687.51 899.766,687.51 900.325,687.51 900.885,687.51 901.444,687.51 902.003,687.51 902.562,687.51 903.122,687.51 903.681,687.51 904.24,687.51 904.799,687.51 905.359,687.51 905.918,687.51 906.477,687.51 907.036,687.51 907.596,687.51 908.155,687.51 908.714,687.51 909.273,687.51 909.833,687.51 910.392,687.51 910.951,687.51 911.51,687.51 912.07,687.51 912.629,687.51 913.188,687.51 913.747,687.51 914.307,687.51 914.866,687.51 915.425,687.51 915.984,687.51 916.544,687.51 917.103,687.51 917.662,687.51 918.221,687.51 918.781,687.51 919.34,687.51 919.899,687.51 920.458,687.51 921.018,687.51 921.577,687.51 922.136,687.51 922.695,687.51 923.255,687.51 923.814,687.51 924.373,687.51 924.932,687.51 925.492,687.51 926.051,687.51 926.61,687.51 927.169,687.51 927.729,687.51 928.288,687.51 928.847,687.51 929.406,687.51 929.966,687.51 930.525,687.51 931.084,687.51 931.644,687.51 932.203,687.51 932.762,687.51 933.321,687.51 933.881,687.51 934.44,687.51 934.999,687.51 935.558,687.51 936.118,687.51 936.677,687.51 937.236,687.51 937.795,687.51 938.355,687.51 938.914,687.51 939.473,687.51 940.032,687.51 940.592,687.51 941.151,687.51 941.71,687.51 942.269,687.51 942.829,687.51 943.388,687.51 943.947,687.51 944.506,687.51 945.066,687.51 945.625,687.51 946.184,687.51 946.743,687.51 947.303,687.51 947.862,687.51 948.421,687.51 948.98,687.51 949.54,687.51 950.099,687.51 950.658,687.51 951.217,687.51 951.777,687.51 952.336,687.51 952.895,687.51 953.454,687.51 954.014,687.51 954.573,687.51 955.132,687.51 955.691,687.51 956.251,687.51 956.81,687.51 957.369,687.51 957.928,687.51 958.488,687.51 959.047,687.51 959.606,687.51 960.165,687.51 960.725,687.51 961.284,687.51 961.843,687.51 962.402,687.51 962.962,687.51 963.521,687.51 964.08,687.51 964.639,687.51 965.199,687.51 965.758,687.51 966.317,687.51 966.876,687.51 967.436,687.51 967.995,687.51 968.554,687.51 969.113,687.51 969.673,687.51 970.232,687.51 970.791,687.51 971.35,687.51 971.91,687.51 972.469,687.51 973.028,687.51 973.587,687.51 974.147,687.51 974.706,687.51 975.265,687.51 975.824,687.51 976.384,687.51 976.943,687.51 977.502,687.51 978.061,687.51 978.621,687.51 979.18,687.51 979.739,687.51 980.298,687.51 980.858,687.51 981.417,687.51 981.976,687.51 982.535,687.51 983.095,687.51 983.654,687.51 984.213,687.51 984.772,687.51 985.332,687.51 985.891,687.51 986.45,687.51 987.009,687.51 987.569,687.51 988.128,687.51 988.687,687.51 989.246,687.51 989.806,687.51 990.365,687.51 990.924,687.51 991.483,687.51 992.043,687.51 992.602,687.51 993.161,687.51 993.72,687.51 994.28,687.51 994.839,687.51 995.398,687.51 995.957,687.51 996.517,687.51 997.076,687.51 997.635,687.51 998.194,687.51 998.754,687.51 999.313,687.51 999.872,687.51 1000.43,687.51 1000.99,687.51 1001.55,687.51 1002.11,687.51 1002.67,687.51 1003.23,687.51 1003.79,687.51 1004.35,687.51 1004.91,687.51 1005.46,687.51 1006.02,687.51 1006.58,687.51 1007.14,687.51 1007.7,687.51 1008.26,687.51 1008.82,687.51 1009.38,687.51 1009.94,687.51 1010.5,687.51 1011.06,687.51 1011.62,687.51 1012.18,687.51 1012.73,687.51 1013.29,687.51 1013.85,687.51 1014.41,687.51 1014.97,687.51 1015.53,687.51 1016.09,687.51 1016.65,687.51 1017.21,687.51 1017.77,687.51 1018.33,687.51 1018.89,687.51 1019.45,687.51 1020.01,687.51 1020.56,687.51 1021.12,687.51 1021.68,687.51 1022.24,687.51 1022.8,687.51 1023.36,687.51 1023.92,687.51 1024.48,687.51 1025.04,687.51 1025.6,687.51 1026.16,687.51 1026.72,687.51 1027.28,687.51 1027.83,687.51 1028.39,687.51 1028.95,687.51 1029.51,687.51 1030.07,687.51 1030.63,687.51 1031.19,687.51 1031.75,687.51 1032.31,687.51 1032.87,687.51 1033.43,687.51 1033.99,687.51 1034.55,687.51 1035.1,687.51 1035.66,687.51 1036.22,687.51 1036.78,687.51 1037.34,687.51 1037.9,687.51 1038.46,687.51 1039.02,687.51 1039.58,687.51 1040.14,687.51 1040.7,687.51 1041.26,687.51 1041.82,687.51 1042.38,687.51 1042.93,687.51 1043.49,687.51 1044.05,687.51 1044.61,687.51 1045.17,687.51 1045.73,687.51 1046.29,687.51 1046.85,687.51 1047.41,687.51 1047.97,687.51 1048.53,687.51 1049.09,687.51 1049.65,687.51 1050.2,687.51 1050.76,687.51 1051.32,687.51 1051.88,687.51 1052.44,687.51 1053,687.51 1053.56,687.51 1054.12,687.51 1054.68,687.51 1055.24,687.51 1055.8,687.51 1056.36,687.51 1056.92,687.51 1057.48,687.51 1058.03,687.51 1058.59,687.51 1059.15,687.51 1059.71,687.51 1060.27,687.51 1060.83,687.51 1061.39,687.51 1061.95,687.51 1062.51,687.51 1063.07,687.51 1063.63,687.51 1064.19,687.51 1064.75,687.51 1065.3,687.51 1065.86,687.51 1066.42,687.51 1066.98,687.51 1067.54,687.51 1068.1,687.51 1068.66,687.51 1069.22,687.51 1069.78,687.51 1070.34,687.51 1070.9,687.51 1071.46,687.51 1072.02,687.51 1072.57,687.51 1073.13,687.51 1073.69,687.51 1074.25,687.51 1074.81,687.51 1075.37,687.51 1075.93,687.51 1076.49,687.51 1077.05,687.51 1077.61,687.51 1078.17,687.51 1078.73,687.51 1079.29,687.51 1079.85,687.51 1080.4,687.51 1080.96,687.51 1081.52,687.51 1082.08,687.51 1082.64,687.51 1083.2,687.51 1083.76,687.51 1084.32,687.51 1084.88,687.51 1085.44,687.51 1086,687.51 1086.56,687.51 1087.12,687.51 1087.67,687.51 1088.23,687.51 1088.79,687.51 1089.35,687.51 1089.91,687.51 1090.47,687.51 1091.03,687.51 1091.59,687.51 1092.15,687.51 1092.71,687.51 1093.27,687.51 1093.83,687.51 1094.39,687.51 1094.94,687.51 1095.5,687.51 1096.06,687.51 1096.62,687.51 1097.18,687.51 1097.74,687.51 1098.3,687.51 1098.86,687.51 1099.42,687.51 1099.98,687.51 1100.54,687.51 1101.1,687.51 1101.66,687.51 1102.22,687.51 1102.77,687.51 1103.33,687.51 1103.89,687.51 1104.45,687.51 1105.01,687.51 1105.57,687.51 1106.13,687.51 1106.69,687.51 1107.25,687.51 1107.81,687.51 1108.37,687.51 1108.93,687.51 1109.49,687.51 1110.04,687.51 1110.6,687.51 1111.16,687.51 1111.72,687.51 1112.28,687.51 1112.84,687.51 1113.4,687.51 1113.96,687.51 1114.52,687.51 1115.08,687.51 1115.64,687.51 1116.2,687.51 1116.76,687.51 1117.31,687.51 1117.87,687.51 1118.43,687.51 1118.99,687.51 1119.55,687.51 1120.11,687.51 1120.67,687.51 1121.23,687.51 1121.79,687.51 1122.35,687.51 1122.91,687.51 1123.47,687.51 1124.03,687.51 1124.59,687.51 1125.14,687.51 1125.7,687.51 1126.26,687.51 1126.82,687.51 1127.38,687.51 1127.94,687.51 1128.5,687.51 1129.06,687.51 1129.62,687.51 1130.18,687.51 1130.74,687.51 1131.3,687.51 1131.86,687.51 1132.41,687.51 1132.97,687.51 1133.53,687.51 1134.09,687.51 1134.65,687.51 1135.21,687.51 1135.77,687.51 1136.33,687.51 1136.89,687.51 1137.45,687.51 1138.01,687.51 1138.57,687.51 1139.13,687.51 1139.68,687.51 1140.24,687.51 1140.8,687.51 1141.36,687.51 1141.92,687.51 1142.48,687.51 1143.04,687.51 1143.6,687.51 1144.16,687.51 1144.72,687.51 1145.28,687.51 1145.84,687.51 1146.4,687.51 1146.96,687.51 1147.51,687.51 1148.07,687.51 1148.63,687.51 1149.19,687.51 1149.75,687.51 1150.31,687.51 1150.87,687.51 1151.43,687.51 1151.99,687.51 1152.55,687.51 1153.11,687.51 1153.67,687.51 1154.23,687.51 1154.78,687.51 1155.34,687.51 1155.9,687.51 1156.46,687.51 1157.02,687.51 1157.58,687.51 1158.14,687.51 1158.7,687.51 1159.26,687.51 1159.82,687.51 1160.38,687.51 1160.94,687.51 1161.5,687.51 1162.05,687.51 1162.61,687.51 1163.17,687.51 1163.73,687.51 1164.29,687.51 1164.85,687.51 1165.41,687.51 1165.97,687.51 1166.53,687.51 1167.09,687.51 1167.65,687.51 1168.21,687.51 1168.77,687.51 1169.33,687.51 1169.88,687.51 1170.44,687.51 1171,687.51 1171.56,687.51 1172.12,687.51 1172.68,687.51 1173.24,687.51 1173.8,687.51 1174.36,687.51 1174.92,687.51 1175.48,687.51 1176.04,687.51 1176.6,687.51 1177.15,687.51 1177.71,687.51 1178.27,687.51 1178.83,687.51 1179.39,687.51 1179.95,687.51 1180.51,687.51 1181.07,687.51 1181.63,687.51 1182.19,687.51 1182.75,687.51 1183.31,687.51 1183.87,687.51 1184.43,687.51 1184.98,687.51 1185.54,687.51 1186.1,687.51 1186.66,687.51 1187.22,687.51 1187.78,687.51 1188.34,687.51 1188.9,687.51 1189.46,687.51 1190.02,687.51 1190.58,687.51 1191.14,687.51 1191.7,687.51 1192.25,687.51 1192.81,687.51 1193.37,687.51 1193.93,687.51 1194.49,687.51 1195.05,687.51 1195.61,687.51 1196.17,687.51 1196.73,687.51 1197.29,687.51 1197.85,687.51 1198.41,687.51 1198.97,687.51 1199.52,687.51 1200.08,687.51 1200.64,687.51 1201.2,687.51 1201.76,687.51 1202.32,687.51 1202.88,687.51 1203.44,687.51 1204,687.51 1204.56,687.51 1205.12,687.51 1205.68,687.51 1206.24,687.51 1206.8,687.51 1207.35,687.51 1207.91,687.51 1208.47,687.51 1209.03,687.51 1209.59,687.51 1210.15,687.51 1210.71,687.51 1211.27,687.51 1211.83,687.51 1212.39,687.51 1212.95,687.51 1213.51,687.51 1214.07,687.51 1214.62,687.51 1215.18,687.51 1215.74,687.51 1216.3,687.51 1216.86,687.51 1217.42,687.51 1217.98,687.51 1218.54,687.51 1219.1,687.51 1219.66,687.51 1220.22,687.51 1220.78,687.51 1221.34,687.51 1221.89,687.51 1222.45,687.51 1223.01,687.51 1223.57,687.51 1224.13,687.51 1224.69,687.51 1225.25,687.51 1225.81,687.51 1226.37,687.51 1226.93,687.51 1227.49,687.51 1228.05,687.51 1228.61,687.51 1229.17,687.51 1229.72,687.51 1230.28,687.51 1230.84,687.51 1231.4,687.51 1231.96,687.51 1232.52,687.51 1233.08,687.51 1233.64,687.51 1234.2,687.51 1234.76,687.51 1235.32,687.51 1235.88,687.51 1236.44,687.51 1236.99,687.51 1237.55,687.51 1238.11,687.51 1238.67,687.51 1239.23,687.51 1239.79,687.51 1240.35,687.51 1240.91,687.51 1241.47,687.51 1242.03,687.51 1242.59,687.51 1243.15,687.51 1243.71,687.51 1244.26,687.51 1244.82,687.51 1245.38,687.51 1245.94,687.51 1246.5,687.51 1247.06,687.51 1247.62,687.51 1248.18,687.51 1248.74,687.51 1249.3,687.51 1249.86,687.51 1250.42,687.51 1250.98,687.51 1251.54,687.51 1252.09,687.51 1252.65,687.51 1253.21,687.51 1253.77,687.51 1254.33,687.51 1254.89,687.51 1255.45,687.51 1256.01,687.51 1256.57,687.51 1257.13,687.51 1257.69,687.51 1258.25,687.51 1258.81,687.51 1259.36,687.51 1259.92,687.51 1260.48,687.51 1261.04,687.51 1261.6,687.51 1262.16,687.51 1262.72,687.51 1263.28,687.51 1263.84,687.51 1264.4,687.51 1264.96,687.51 1265.52,687.51 1266.08,687.51 1266.63,687.51 1267.19,687.51 1267.75,687.51 1268.31,687.51 1268.87,687.51 1269.43,687.51 1269.99,687.51 1270.55,687.51 1271.11,687.51 1271.67,687.51 1272.23,687.51 1272.79,687.51 1273.35,687.51 1273.91,687.51 1274.46,687.51 1275.02,687.51 1275.58,687.51 1276.14,687.51 1276.7,687.51 1277.26,687.51 1277.82,687.51 1278.38,687.51 1278.94,687.51 1279.5,687.51 1280.06,687.51 1280.62,687.51 1281.18,687.51 1281.73,687.51 1282.29,687.51 1282.85,687.51 1283.41,687.51 1283.97,687.51 1284.53,687.51 1285.09,687.51 1285.65,687.51 1286.21,687.51 1286.77,687.51 1287.33,687.51 1287.89,687.51 1288.45,687.51 1289,687.51 1289.56,687.51 1290.12,687.51 1290.68,687.51 1291.24,687.51 1291.8,687.51 1292.36,687.51 1292.92,687.51 1293.48,687.51 1294.04,687.51 1294.6,687.51 1295.16,687.51 1295.72,687.51 1296.28,687.51 1296.83,687.51 1297.39,687.51 1297.95,687.51 1298.51,687.51 1299.07,687.51 1299.63,687.51 1300.19,687.51 1300.75,687.51 1301.31,687.51 1301.87,687.51 1302.43,687.51 1302.99,687.51 1303.55,687.51 1304.1,687.51 1304.66,687.51 1305.22,687.51 1305.78,687.51 1306.34,687.51 1306.9,687.51 1307.46,687.51 1308.02,687.51 1308.58,687.51 1309.14,687.51 1309.7,687.51 1310.26,687.51 1310.82,687.51 1311.38,687.51 1311.93,687.51 1312.49,687.51 1313.05,687.51 1313.61,687.51 1314.17,687.51 1314.73,687.51 1315.29,687.51 1315.85,687.51 1316.41,687.51 1316.97,687.51 1317.53,687.51 1318.09,687.51 1318.65,687.51 1319.2,687.51 1319.76,687.51 1320.32,687.51 1320.88,687.51 1321.44,687.51 1322,687.51 1322.56,687.51 1323.12,687.51 1323.68,687.51 1324.24,687.51 1324.8,687.51 1325.36,687.51 1325.92,687.51 1326.47,687.51 1327.03,687.51 1327.59,687.51 1328.15,687.51 1328.71,687.51 1329.27,687.51 1329.83,687.51 1330.39,687.51 1330.95,687.51 1331.51,687.51 1332.07,687.51 1332.63,687.51 1333.19,687.51 1333.75,687.51 1334.3,687.51 1334.86,687.51 1335.42,687.51 1335.98,687.51 1336.54,687.51 1337.1,687.51 1337.66,687.51 1338.22,687.51 1338.78,687.51 1339.34,687.51 1339.9,687.51 1340.46,687.51 1341.02,687.51 1341.57,687.51 1342.13,687.51 1342.69,687.51 1343.25,687.51 1343.81,687.51 1344.37,687.51 1344.93,687.51 1345.49,687.51 1346.05,687.51 1346.61,687.51 1347.17,687.51 1347.73,687.51 1348.29,687.51 1348.84,687.51 1349.4,687.51 1349.96,687.51 1350.52,687.51 1351.08,687.51 1351.64,687.51 1352.2,687.51 1352.76,687.51 1353.32,687.51 1353.88,687.51 1354.44,687.51 1355,687.51 1355.56,687.51 1356.12,687.51 1356.67,687.51 1357.23,687.51 1357.79,687.51 1358.35,687.51 1358.91,687.51 1359.47,687.51 1360.03,687.51 1360.59,687.51 1361.15,687.51 1361.71,687.51 1362.27,687.51 1362.83,687.51 1363.39,687.51 1363.94,687.51 1364.5,687.51 1365.06,687.51 1365.62,687.51 1366.18,687.51 1366.74,687.51 1367.3,687.51 1367.86,687.51 1368.42,687.51 1368.98,687.51 1369.54,687.51 1370.1,687.51 1370.66,687.51 1371.21,687.51 1371.77,687.51 1372.33,687.51 1372.89,687.51 1373.45,687.51 1374.01,687.51 1374.57,687.51 1375.13,687.51 1375.69,687.51 1376.25,687.51 1376.81,687.51 1377.37,687.51 1377.93,687.51 1378.49,687.51 1379.04,687.51 1379.6,687.51 1380.16,687.51 1380.72,687.51 1381.28,687.51 1381.84,687.51 1382.4,687.51 1382.96,687.51 1383.52,687.51 1384.08,687.51 1384.64,687.51 1385.2,687.51 1385.76,687.51 1386.31,687.51 1386.87,687.51 1387.43,687.51 1387.99,687.51 1388.55,687.51 1389.11,687.51 1389.67,687.51 1390.23,687.51 1390.79,687.51 1391.35,687.51 1391.91,687.51 1392.47,687.51 1393.03,687.51 1393.58,687.51 1394.14,687.51 1394.7,687.51 1395.26,687.51 1395.82,687.51 1396.38,687.51 1396.94,687.51 1397.5,687.51 1398.06,687.51 1398.62,687.51 1399.18,687.51 1399.74,687.51 1400.3,687.51 1400.86,687.51 1401.41,687.51 1401.97,687.51 1402.53,687.51 1403.09,687.51 1403.65,687.51 1404.21,687.51 1404.77,687.51 1405.33,687.51 1405.89,687.51 1406.45,687.51 1407.01,687.51 1407.57,687.51 1408.13,687.51 1408.68,687.51 1409.24,687.51 1409.8,687.51 1410.36,687.51 1410.92,687.51 1411.48,687.51 1412.04,687.51 1412.6,687.51 1413.16,687.51 1413.72,687.51 1414.28,687.51 1414.84,687.51 1415.4,687.51 1415.95,687.51 1416.51,687.51 1417.07,687.51 1417.63,687.51 1418.19,687.51 1418.75,687.51 1419.31,687.51 1419.87,687.51 1420.43,687.51 1420.99,687.51 1421.55,687.51 1422.11,687.51 1422.67,687.51 1423.23,687.51 1423.78,687.51 1424.34,687.51 1424.9,687.51 1425.46,687.51 1426.02,687.51 1426.58,687.51 1427.14,687.51 1427.7,687.51 1428.26,687.51 1428.82,687.51 1429.38,687.51 1429.94,687.51 1430.5,687.51 1431.05,687.51 1431.61,687.51 1432.17,687.51 1432.73,687.51 1433.29,687.51 1433.85,687.51 1434.41,687.51 1434.97,687.51 1435.53,687.51 1436.09,687.51 1436.65,687.51 1437.21,687.51 1437.77,687.51 1438.33,687.51 1438.88,687.51 1439.44,687.51 1440,687.51 1440.56,687.51 1441.12,687.51 1441.68,687.51 1442.24,687.51 1442.8,687.51 1443.36,687.51 1443.92,687.51 1444.48,687.51 1445.04,687.51 1445.6,687.51 1446.15,687.51 1446.71,687.51 1447.27,687.51 1447.83,687.51 1448.39,687.51 1448.95,687.51 1449.51,687.51 1450.07,687.51 1450.63,687.51 1451.19,687.51 1451.75,687.51 1452.31,687.51 1452.87,687.51 1453.42,687.51 1453.98,687.51 1454.54,687.51 1455.1,687.51 1455.66,687.51 1456.22,687.51 1456.78,687.51 1457.34,687.51 1457.9,687.51 1458.46,687.51 1459.02,687.51 1459.58,687.51 1460.14,687.51 1460.7,687.51 1461.25,687.51 1461.81,687.51 1462.37,687.51 1462.93,687.51 1463.49,687.51 1464.05,687.51 1464.61,687.51 1465.17,687.51 1465.73,687.51 1466.29,687.51 1466.85,687.51 1467.41,687.51 1467.97,687.51 1468.52,687.51 1469.08,687.51 1469.64,687.51 1470.2,687.51 1470.76,687.51 1471.32,687.51 1471.88,687.51 1472.44,687.51 1473,687.51 1473.56,687.51 1474.12,687.51 1474.68,687.51 1475.24,687.51 1475.79,687.51 1476.35,687.51 1476.91,687.51 1477.47,687.51 1478.03,687.51 1478.59,687.51 1479.15,687.51 1479.71,687.51 1480.27,687.51 1480.83,687.51 1481.39,687.51 1481.95,687.51 1482.51,687.51 1483.07,687.51 1483.62,687.51 1484.18,687.51 1484.74,687.51 1485.3,687.51 1485.86,687.51 1486.42,687.51 1486.98,687.51 1487.54,687.51 1488.1,687.51 1488.66,687.51 1489.22,687.51 1489.78,687.51 1490.34,687.51 1490.89,687.51 1491.45,687.51 1492.01,687.51 1492.57,687.51 1493.13,687.51 1493.69,687.51 1494.25,687.51 1494.81,687.51 1495.37,687.51 1495.93,687.51 1496.49,687.51 1497.05,687.51 1497.61,687.51 1498.16,687.51 1498.72,687.51 1499.28,687.51 1499.84,687.51 1500.4,687.51 1500.96,687.51 1501.52,687.51 1502.08,687.51 1502.64,687.51 1503.2,687.51 1503.76,687.51 1504.32,687.51 1504.88,687.51 1505.44,687.51 1505.99,687.51 1506.55,687.51 1507.11,687.51 1507.67,687.51 1508.23,687.51 1508.79,687.51 1509.35,687.51 1509.91,687.51 1510.47,687.51 1511.03,687.51 1511.59,687.51 1512.15,687.51 1512.71,687.51 1513.26,687.51 1513.82,687.51 1514.38,687.51 1514.94,687.51 1515.5,687.51 1516.06,687.51 1516.62,687.51 1517.18,687.51 1517.74,687.51 1518.3,687.51 1518.86,687.51 1519.42,687.51 1519.98,687.51 1520.53,687.51 1521.09,687.51 1521.65,687.51 1522.21,687.51 1522.77,687.51 1523.33,687.51 1523.89,687.51 1524.45,687.51 1525.01,687.51 1525.57,687.51 1526.13,687.51 1526.69,687.51 1527.25,687.51 1527.81,687.51 1528.36,687.51 1528.92,687.51 1529.48,687.51 1530.04,687.51 1530.6,687.51 1531.16,687.51 1531.72,687.51 1532.28,687.51 1532.84,687.51 1533.4,687.51 1533.96,687.51 1534.52,687.51 1535.08,687.51 1535.63,687.51 1536.19,687.51 1536.75,687.51 1537.31,687.51 1537.87,687.51 1538.43,687.51 1538.99,687.51 1539.55,687.51 1540.11,687.51 1540.67,687.51 1541.23,687.51 1541.79,687.51 1542.35,687.51 1542.9,687.51 1543.46,687.51 1544.02,687.51 1544.58,687.51 1545.14,687.51 1545.7,687.51 1546.26,687.51 1546.82,687.51 1547.38,687.51 1547.94,687.51 1548.5,687.51 1549.06,687.51 1549.62,687.51 1550.18,687.51 1550.73,687.51 1551.29,687.51 1551.85,687.51 1552.41,687.51 1552.97,687.51 1553.53,687.51 1554.09,687.51 1554.65,687.51 1555.21,687.51 1555.77,687.51 1556.33,687.51 1556.89,687.51 1557.45,687.51 1558,687.51 1558.56,687.51 1559.12,687.51 1559.68,687.51 1560.24,687.51 1560.8,687.51 1561.36,687.51 1561.92,687.51 1562.48,687.51 1563.04,687.51 1563.6,687.51 1564.16,687.51 1564.72,687.51 1565.28,687.51 1565.83,687.51 1566.39,687.51 1566.95,687.51 1567.51,687.51 1568.07,687.51 1568.63,687.51 1569.19,687.51 1569.75,687.51 1570.31,687.51 1570.87,687.51 1571.43,687.51 1571.99,687.51 1572.55,687.51 1573.1,687.51 1573.66,687.51 1574.22,687.51 1574.78,687.51 1575.34,687.51 1575.9,687.51 1576.46,687.51 1577.02,687.51 1577.58,687.51 1578.14,687.51 1578.7,687.51 1579.26,687.51 1579.82,687.51 1580.37,687.51 1580.93,687.51 1581.49,687.51 1582.05,687.51 1582.61,687.51 1583.17,687.51 1583.73,687.51 1584.29,687.51 1584.85,687.51 1585.41,687.51 1585.97,687.51 1586.53,687.51 1587.09,687.51 1587.65,687.51 1588.2,687.51 1588.76,687.51 1589.32,687.51 1589.88,687.51 1590.44,687.51 1591,687.51 1591.56,687.51 1592.12,687.51 1592.68,687.51 1593.24,687.51 1593.8,687.51 1594.36,687.51 1594.92,687.51 1595.47,687.51 1596.03,687.51 1596.59,687.51 1597.15,687.51 1597.71,687.51 1598.27,687.51 1598.83,687.51 1599.39,687.51 1599.95,687.51 1600.51,687.51 1601.07,687.51 1601.63,687.51 1602.19,687.51 1602.74,687.51 1603.3,687.51 1603.86,687.51 1604.42,687.51 1604.98,687.51 1605.54,687.51 1606.1,687.51 1606.66,687.51 1607.22,687.51 1607.78,687.51 1608.34,687.51 1608.9,687.51 1609.46,687.51 1610.02,687.51 1610.57,687.51 1611.13,687.51 1611.69,687.51 1612.25,687.51 1612.81,687.51 1613.37,687.51 1613.93,687.51 1614.49,687.51 1615.05,687.51 1615.61,687.51 1616.17,687.51 1616.73,687.51 1617.29,687.51 1617.84,687.51 1618.4,687.51 1618.96,687.51 1619.52,687.51 1620.08,687.51 1620.64,687.51 1621.2,687.51 1621.76,687.51 1622.32,687.51 1622.88,687.51 1623.44,687.51 1624,687.51 1624.56,687.51 1625.11,687.51 1625.67,687.51 1626.23,687.51 1626.79,687.51 1627.35,687.51 1627.91,687.51 1628.47,687.51 1629.03,687.51 1629.59,687.51 1630.15,687.51 1630.71,687.51 1631.27,687.51 1631.83,687.51 1632.39,687.51 1632.94,687.51 1633.5,687.51 1634.06,687.51 1634.62,687.51 1635.18,687.51 1635.74,687.51 1636.3,687.51 1636.86,687.51 1637.42,687.51 1637.98,687.51 1638.54,687.51 1639.1,687.51 1639.66,687.51 1640.21,687.51 1640.77,687.51 1641.33,687.51 1641.89,687.51 1642.45,687.51 1643.01,687.51 1643.57,687.51 1644.13,687.51 1644.69,687.51 1645.25,687.51 1645.81,687.51 1646.37,687.51 1646.93,687.51 1647.48,687.51 1648.04,687.51 1648.6,687.51 1649.16,687.51 1649.72,687.51 1650.28,687.51 1650.84,687.51 1651.4,687.51 1651.96,687.51 1652.52,687.51 1653.08,687.51 1653.64,687.51 1654.2,687.51 1654.76,687.51 1655.31,687.51 1655.87,687.51 1656.43,687.51 1656.99,687.51 1657.55,687.51 1658.11,687.51 1658.67,687.51 1659.23,687.51 1659.79,687.51 1660.35,687.51 1660.91,687.51 1661.47,687.51 1662.03,687.51 1662.58,687.51 1663.14,687.51 1663.7,687.51 1664.26,687.51 1664.82,687.51 1665.38,687.51 1665.94,687.51 1666.5,687.51 1667.06,687.51 1667.62,687.51 1668.18,687.51 1668.74,687.51 1669.3,687.51 1669.85,687.51 1670.41,687.51 1670.97,687.51 1671.53,687.51 1672.09,687.51 1672.65,687.51 1673.21,687.51 1673.77,687.51 1674.33,687.51 1674.89,687.51 1675.45,687.51 1676.01,687.51 1676.57,687.51 1677.13,687.51 1677.68,687.51 1678.24,687.51 1678.8,687.51 1679.36,687.51 1679.92,687.51 1680.48,687.51 1681.04,687.51 1681.6,687.51 1682.16,687.51 1682.72,687.51 1683.28,687.51 1683.84,687.51 1684.4,687.51 1684.95,687.51 1685.51,687.51 1686.07,687.51 1686.63,687.51 1687.19,687.51 1687.75,687.51 1688.31,687.51 1688.87,687.51 1689.43,687.51 1689.99,687.51 1690.55,687.51 1691.11,687.51 1691.67,687.51 1692.23,687.51 1692.78,687.51 1693.34,687.51 1693.9,687.51 1694.46,687.51 1695.02,687.51 1695.58,687.51 1696.14,687.51 1696.7,687.51 1697.26,687.51 1697.82,687.51 1698.38,687.51 1698.94,687.51 1699.5,687.51 1700.05,687.51 1700.61,687.51 1701.17,687.51 1701.73,687.51 1702.29,687.51 1702.85,687.51 1703.41,687.51 1703.97,687.51 1704.53,687.51 1705.09,687.51 1705.65,687.51 1706.21,687.51 1706.77,687.51 1707.32,687.51 1707.88,687.51 1708.44,687.51 1709,687.51 1709.56,687.51 1710.12,687.51 1710.68,687.51 1711.24,687.51 1711.8,687.51 1712.36,687.51 1712.92,687.51 1713.48,687.51 1714.04,687.51 1714.6,687.51 1715.15,687.51 1715.71,687.51 1716.27,687.51 1716.83,687.51 1717.39,687.51 1717.95,687.51 1718.51,687.51 1719.07,687.51 1719.63,687.51 1720.19,687.51 1720.75,687.51 1721.31,687.51 1721.87,687.51 1722.42,687.51 1722.98,687.51 1723.54,687.51 1724.1,687.51 1724.66,687.51 1725.22,687.51 1725.78,687.51 1726.34,687.51 1726.9,687.51 1727.46,687.51 1728.02,687.51 1728.58,687.51 1729.14,687.51 1729.69,687.51 1730.25,687.51 1730.81,687.51 1731.37,687.51 1731.93,687.51 1732.49,687.51 1733.05,687.51 1733.61,687.51 1734.17,687.51 1734.73,687.51 1735.29,687.51 1735.85,687.51 1736.41,687.51 1736.97,687.51 1737.52,687.51 1738.08,687.51 1738.64,687.51 1739.2,687.51 1739.76,687.51 1740.32,687.51 1740.88,687.51 1741.44,687.51 1742,687.51 1742.56,687.51 1743.12,687.51 1743.68,687.51 1744.24,687.51 1744.79,687.51 1745.35,687.51 1745.91,687.51 1746.47,687.51 1747.03,687.51 1747.59,687.51 1748.15,687.51 1748.71,687.51 1749.27,687.51 1749.83,687.51 1750.39,687.51 1750.95,687.51 1751.51,687.51 1752.06,687.51 1752.62,687.51 1753.18,687.51 1753.74,687.51 1754.3,687.51 1754.86,687.51 1755.42,687.51 1755.98,687.51 1756.54,687.51 1757.1,687.51 1757.66,687.51 1758.22,687.51 1758.78,687.51 1759.34,687.51 1759.89,687.51 1760.45,687.51 1761.01,687.51 1761.57,687.51 1762.13,687.51 1762.69,687.51 1763.25,687.51 1763.81,687.51 1764.37,687.51 1764.93,687.51 1765.49,687.51 1766.05,687.51 1766.61,687.51 1767.16,687.51 1767.72,687.51 1768.28,687.51 1768.84,687.51 1769.4,687.51 1769.96,687.51 1770.52,687.51 1771.08,687.51 1771.64,687.51 1772.2,687.51 1772.76,687.51 1773.32,687.51 1773.88,687.51 1774.43,687.51 1774.99,687.51 1775.55,687.51 1776.11,687.51 1776.67,687.51 1777.23,687.51 1777.79,687.51 1778.35,687.51 1778.91,687.51 1779.47,687.51 1780.03,687.51 1780.59,687.51 1781.15,687.51 1781.71,687.51 1782.26,687.51 1782.82,687.51 1783.38,687.51 1783.94,687.51 1784.5,687.51 1785.06,687.51 1785.62,687.51 1786.18,687.51 1786.74,687.51 1787.3,687.51 1787.86,687.51 1788.42,687.51 1788.98,687.51 1789.53,687.51 1790.09,687.51 1790.65,687.51 1791.21,687.51 1791.77,687.51 1792.33,687.51 1792.89,687.51 1793.45,687.51 1794.01,687.51 1794.57,687.51 1795.13,687.51 1795.69,687.51 1796.25,687.51 1796.8,687.51 1797.36,687.51 1797.92,687.51 1798.48,687.51 1799.04,687.51 1799.6,687.51 1800.16,687.51 1800.72,687.51 1801.28,687.51 1801.84,687.51 1802.4,687.51 1802.96,687.51 1803.52,687.51 1804.08,687.51 1804.63,687.51 1805.19,687.51 1805.75,687.51 1806.31,687.51 1806.87,687.51 1807.43,687.51 1807.99,687.51 1808.55,687.51 1809.11,687.51 1809.67,687.51 1810.23,687.51 1810.79,687.51 1811.35,687.51 1811.9,687.51 1812.46,687.51 1813.02,687.51 1813.58,687.51 1814.14,687.51 1814.7,687.51 1815.26,687.51 1815.82,687.51 1816.38,687.51 1816.94,687.51 1817.5,687.51 1818.06,687.51 1818.62,687.51 1819.18,687.51 1819.73,687.51 1820.29,687.51 1820.85,687.51 1821.41,687.51 1821.97,687.51 1822.53,687.51 1823.09,687.51 1823.65,687.51 1824.21,687.51 1824.77,687.51 1825.33,687.51 1825.89,687.51 1826.45,687.51 1827,687.51 1827.56,687.51 1828.12,687.51 1828.68,687.51 1829.24,687.51 1829.8,687.51 1830.36,687.51 1830.92,687.51 1831.48,687.51 1832.04,687.51 1832.6,687.51 1833.16,687.51 1833.72,687.51 1834.27,687.51 1834.83,687.51 1835.39,687.51 1835.95,687.51 1836.51,687.51 1837.07,687.51 1837.63,687.51 1838.19,687.51 \"/>\n<path clip-path=\"url(#clip953)\" d=\"M720.247 684.083 L720.806 684.083 L721.365 684.083 L721.924 684.083 L722.484 684.083 L723.043 684.083 L723.602 684.083 L724.161 684.083 L724.721 684.083 L725.28 684.083 L725.839 684.083 L726.398 684.083 L726.958 684.083 L727.517 684.083 L728.076 684.083 L728.635 684.083 L729.195 684.083 L729.754 684.083 L730.313 684.083 L730.872 684.083 L731.432 684.083 L731.991 684.083 L732.55 684.083 L733.109 684.083 L733.669 684.083 L734.228 684.083 L734.787 684.083 L735.346 684.083 L735.906 684.083 L736.465 684.083 L737.024 684.083 L737.583 684.083 L738.143 684.083 L738.702 684.083 L739.261 684.083 L739.82 684.083 L740.38 684.083 L740.939 684.083 L741.498 684.083 L742.057 684.083 L742.617 684.083 L743.176 684.083 L743.735 684.083 L744.294 684.083 L744.854 684.083 L745.413 684.083 L745.972 684.083 L746.531 684.083 L747.091 684.083 L747.65 684.083 L748.209 684.083 L748.768 684.083 L749.328 684.083 L749.887 684.083 L750.446 684.083 L751.005 684.083 L751.565 684.083 L752.124 684.083 L752.683 684.083 L753.242 684.083 L753.802 684.083 L754.361 684.083 L754.92 684.083 L755.479 684.083 L756.039 684.083 L756.598 684.083 L757.157 684.083 L757.716 684.083 L758.276 684.083 L758.835 684.083 L759.394 684.083 L759.953 684.083 L760.513 684.083 L761.072 684.083 L761.631 684.083 L762.19 684.083 L762.75 684.083 L763.309 684.083 L763.868 684.083 L764.427 684.083 L764.987 684.083 L765.546 684.083 L766.105 684.083 L766.664 684.083 L767.224 684.083 L767.783 684.083 L768.342 684.083 L768.901 684.083 L769.461 684.083 L770.02 684.083 L770.579 684.083 L771.138 684.083 L771.698 684.083 L772.257 684.083 L772.816 684.083 L773.375 684.083 L773.935 684.083 L774.494 684.083 L775.053 684.083 L775.612 684.083 L776.172 684.083 L776.731 684.083 L777.29 684.083 L777.849 684.083 L778.409 684.083 L778.968 684.083 L779.527 684.083 L780.086 684.083 L780.646 684.083 L781.205 684.083 L781.764 684.083 L782.323 684.083 L782.883 684.083 L783.442 684.083 L784.001 684.083 L784.56 684.083 L785.12 684.083 L785.679 684.083 L786.238 684.083 L786.797 684.083 L787.357 684.083 L787.916 684.083 L788.475 684.083 L789.034 684.083 L789.594 684.083 L790.153 684.083 L790.712 684.083 L791.271 684.083 L791.831 684.083 L792.39 684.083 L792.949 684.083 L793.508 684.083 L794.068 684.083 L794.627 684.083 L795.186 684.083 L795.745 684.083 L796.305 684.083 L796.864 684.083 L797.423 684.083 L797.982 684.083 L798.542 684.083 L799.101 684.083 L799.66 684.083 L800.219 684.083 L800.779 684.083 L801.338 684.083 L801.897 684.083 L802.456 684.083 L803.016 684.083 L803.575 684.083 L804.134 684.083 L804.693 684.083 L805.253 684.083 L805.812 684.083 L806.371 684.083 L806.931 684.083 L807.49 684.083 L808.049 684.083 L808.608 684.083 L809.168 684.083 L809.727 684.083 L810.286 684.083 L810.845 684.083 L811.405 684.083 L811.964 684.083 L812.523 684.083 L813.082 684.083 L813.642 684.083 L814.201 684.083 L814.76 684.083 L815.319 684.083 L815.879 684.083 L816.438 684.083 L816.997 684.083 L817.556 684.083 L818.116 684.083 L818.675 684.083 L819.234 684.083 L819.793 684.083 L820.353 684.083 L820.912 684.083 L821.471 684.083 L822.03 684.083 L822.59 684.083 L823.149 684.083 L823.708 684.083 L824.267 684.083 L824.827 684.083 L825.386 684.083 L825.945 684.083 L826.504 684.083 L827.064 684.083 L827.623 684.083 L828.182 684.083 L828.741 684.083 L829.301 684.083 L829.86 684.083 L830.419 684.083 L830.978 684.083 L831.538 684.083 L832.097 684.083 L832.656 684.083 L833.215 684.083 L833.775 684.083 L834.334 684.083 L834.893 684.083 L835.452 684.083 L836.012 684.083 L836.571 684.083 L837.13 684.083 L837.689 684.083 L838.249 684.083 L838.808 684.083 L839.367 684.083 L839.926 684.083 L840.486 684.083 L841.045 684.083 L841.604 684.083 L842.163 684.083 L842.723 684.083 L843.282 684.083 L843.841 684.083 L844.4 684.083 L844.96 684.083 L845.519 684.083 L846.078 684.083 L846.637 684.083 L847.197 684.083 L847.756 684.083 L848.315 684.083 L848.874 684.083 L849.434 684.083 L849.993 684.083 L850.552 684.083 L851.111 684.083 L851.671 684.083 L852.23 684.083 L852.789 684.083 L853.348 684.083 L853.908 684.083 L854.467 684.083 L855.026 684.083 L855.585 684.083 L856.145 684.083 L856.704 684.083 L857.263 684.083 L857.822 684.083 L858.382 684.083 L858.941 684.083 L859.5 684.083 L860.059 684.083 L860.619 684.083 L861.178 684.083 L861.737 684.083 L862.296 684.083 L862.856 684.083 L863.415 684.083 L863.974 684.083 L864.533 684.083 L865.093 684.083 L865.652 684.083 L866.211 684.083 L866.77 684.083 L867.33 684.083 L867.889 684.083 L868.448 684.083 L869.007 684.083 L869.567 684.083 L870.126 684.083 L870.685 684.083 L871.244 684.083 L871.804 684.083 L872.363 684.083 L872.922 684.083 L873.481 684.083 L874.041 684.083 L874.6 684.083 L875.159 684.083 L875.718 684.083 L876.278 684.083 L876.837 684.083 L877.396 684.083 L877.955 684.083 L878.515 684.083 L879.074 684.083 L879.633 684.083 L880.192 684.083 L880.752 684.083 L881.311 684.083 L881.87 684.083 L882.429 684.083 L882.989 684.083 L883.548 684.083 L884.107 684.083 L884.666 684.083 L885.226 684.083 L885.785 684.083 L886.344 684.083 L886.903 684.083 L887.463 684.083 L888.022 684.083 L888.581 684.083 L889.14 684.083 L889.7 684.083 L890.259 684.083 L890.818 684.083 L891.377 684.083 L891.937 684.083 L892.496 684.083 L893.055 684.083 L893.614 684.083 L894.174 684.083 L894.733 684.083 L895.292 684.083 L895.851 684.083 L896.411 684.083 L896.97 684.083 L897.529 684.083 L898.088 684.083 L898.648 684.083 L899.207 684.083 L899.766 684.083 L900.325 684.083 L900.885 684.083 L901.444 684.083 L902.003 684.083 L902.562 684.083 L903.122 684.083 L903.681 684.083 L904.24 684.083 L904.799 684.083 L905.359 684.083 L905.918 684.083 L906.477 684.083 L907.036 684.083 L907.596 684.083 L908.155 684.083 L908.714 684.083 L909.273 684.083 L909.833 684.083 L910.392 684.083 L910.951 684.083 L911.51 684.083 L912.07 684.083 L912.629 684.083 L913.188 684.083 L913.747 684.083 L914.307 684.083 L914.866 684.083 L915.425 684.083 L915.984 684.083 L916.544 684.083 L917.103 684.083 L917.662 684.083 L918.221 684.083 L918.781 684.083 L919.34 684.083 L919.899 684.083 L920.458 684.083 L921.018 684.083 L921.577 684.083 L922.136 684.083 L922.695 684.083 L923.255 684.083 L923.814 684.083 L924.373 684.083 L924.932 684.083 L925.492 684.083 L926.051 684.083 L926.61 684.083 L927.169 684.083 L927.729 684.083 L928.288 684.083 L928.847 684.083 L929.406 684.083 L929.966 684.083 L930.525 684.083 L931.084 684.083 L931.644 684.083 L932.203 684.083 L932.762 684.083 L933.321 684.083 L933.881 684.083 L934.44 684.083 L934.999 684.083 L935.558 684.083 L936.118 684.083 L936.677 684.083 L937.236 684.083 L937.795 684.083 L938.355 684.083 L938.914 684.083 L939.473 684.083 L940.032 684.083 L940.592 684.083 L941.151 684.083 L941.71 684.083 L942.269 684.083 L942.829 684.083 L943.388 684.083 L943.947 684.083 L944.506 684.083 L945.066 684.083 L945.625 684.083 L946.184 684.083 L946.743 684.083 L947.303 684.083 L947.862 684.083 L948.421 684.083 L948.98 684.083 L949.54 684.083 L950.099 684.083 L950.658 684.083 L951.217 684.083 L951.777 684.083 L952.336 684.083 L952.895 684.083 L953.454 684.083 L954.014 684.083 L954.573 684.083 L955.132 684.083 L955.691 684.083 L956.251 684.083 L956.81 684.083 L957.369 684.083 L957.928 684.083 L958.488 684.083 L959.047 684.083 L959.606 684.083 L960.165 684.083 L960.725 684.083 L961.284 684.083 L961.843 684.083 L962.402 684.083 L962.962 684.083 L963.521 684.083 L964.08 684.083 L964.639 684.083 L965.199 684.083 L965.758 684.083 L966.317 684.083 L966.876 684.083 L967.436 684.083 L967.995 684.083 L968.554 684.083 L969.113 684.083 L969.673 684.083 L970.232 684.083 L970.791 684.083 L971.35 684.083 L971.91 684.083 L972.469 684.083 L973.028 684.083 L973.587 684.083 L974.147 684.083 L974.706 684.083 L975.265 684.083 L975.824 684.083 L976.384 684.083 L976.943 684.083 L977.502 684.083 L978.061 684.083 L978.621 684.083 L979.18 684.083 L979.739 684.083 L980.298 684.083 L980.858 684.083 L981.417 684.083 L981.976 684.083 L982.535 684.083 L983.095 684.083 L983.654 684.083 L984.213 684.083 L984.772 684.083 L985.332 684.083 L985.891 684.083 L986.45 684.083 L987.009 684.083 L987.569 684.083 L988.128 684.083 L988.687 684.083 L989.246 684.083 L989.806 684.083 L990.365 684.083 L990.924 684.083 L991.483 684.083 L992.043 684.083 L992.602 684.083 L993.161 684.083 L993.72 684.083 L994.28 684.083 L994.839 684.083 L995.398 684.083 L995.957 684.083 L996.517 684.083 L997.076 684.083 L997.635 684.083 L998.194 684.083 L998.754 684.083 L999.313 684.083 L999.872 684.083 L1000.43 684.083 L1000.99 684.083 L1001.55 684.083 L1002.11 684.083 L1002.67 684.083 L1003.23 684.083 L1003.79 684.083 L1004.35 684.083 L1004.91 684.083 L1005.46 684.083 L1006.02 684.083 L1006.58 684.083 L1007.14 684.083 L1007.7 684.083 L1008.26 684.083 L1008.82 684.083 L1009.38 684.083 L1009.94 684.083 L1010.5 684.083 L1011.06 684.083 L1011.62 684.083 L1012.18 684.083 L1012.73 684.083 L1013.29 684.083 L1013.85 684.083 L1014.41 684.083 L1014.97 684.083 L1015.53 684.083 L1016.09 684.083 L1016.65 684.083 L1017.21 684.083 L1017.77 684.083 L1018.33 684.083 L1018.89 684.083 L1019.45 684.083 L1020.01 684.083 L1020.56 684.083 L1021.12 684.083 L1021.68 684.083 L1022.24 684.083 L1022.8 684.083 L1023.36 684.083 L1023.92 684.083 L1024.48 684.083 L1025.04 684.083 L1025.6 684.083 L1026.16 684.083 L1026.72 684.083 L1027.28 684.083 L1027.83 684.083 L1028.39 684.083 L1028.95 684.083 L1029.51 684.083 L1030.07 684.083 L1030.63 684.083 L1031.19 684.083 L1031.75 684.083 L1032.31 684.083 L1032.87 684.083 L1033.43 684.083 L1033.99 684.083 L1034.55 684.083 L1035.1 684.083 L1035.66 684.083 L1036.22 684.083 L1036.78 684.083 L1037.34 684.083 L1037.9 684.083 L1038.46 684.083 L1039.02 684.083 L1039.58 684.083 L1040.14 684.083 L1040.7 684.083 L1041.26 684.083 L1041.82 684.083 L1042.38 684.083 L1042.93 684.083 L1043.49 684.083 L1044.05 684.083 L1044.61 684.083 L1045.17 684.083 L1045.73 684.083 L1046.29 684.083 L1046.85 684.083 L1047.41 684.083 L1047.97 684.083 L1048.53 684.083 L1049.09 684.083 L1049.65 684.083 L1050.2 684.083 L1050.76 684.083 L1051.32 684.083 L1051.88 684.083 L1052.44 684.083 L1053 684.083 L1053.56 684.083 L1054.12 684.083 L1054.68 684.083 L1055.24 684.083 L1055.8 684.083 L1056.36 684.083 L1056.92 684.083 L1057.48 684.083 L1058.03 684.083 L1058.59 684.083 L1059.15 684.083 L1059.71 684.083 L1060.27 684.083 L1060.83 684.083 L1061.39 684.083 L1061.95 684.083 L1062.51 684.083 L1063.07 684.083 L1063.63 684.083 L1064.19 684.083 L1064.75 684.083 L1065.3 684.083 L1065.86 684.083 L1066.42 684.083 L1066.98 684.083 L1067.54 684.083 L1068.1 684.083 L1068.66 684.083 L1069.22 684.083 L1069.78 684.083 L1070.34 684.083 L1070.9 684.083 L1071.46 684.083 L1072.02 684.083 L1072.57 684.083 L1073.13 684.083 L1073.69 684.083 L1074.25 684.083 L1074.81 684.083 L1075.37 684.083 L1075.93 684.083 L1076.49 684.083 L1077.05 684.083 L1077.61 684.083 L1078.17 684.083 L1078.73 684.083 L1079.29 684.083 L1079.85 684.083 L1080.4 684.083 L1080.96 684.083 L1081.52 684.083 L1082.08 684.083 L1082.64 684.083 L1083.2 684.083 L1083.76 684.083 L1084.32 684.083 L1084.88 684.083 L1085.44 684.083 L1086 684.083 L1086.56 684.083 L1087.12 684.083 L1087.67 684.083 L1088.23 684.083 L1088.79 684.083 L1089.35 684.083 L1089.91 684.083 L1090.47 684.083 L1091.03 684.083 L1091.59 684.083 L1092.15 684.083 L1092.71 684.083 L1093.27 684.083 L1093.83 684.083 L1094.39 684.083 L1094.94 684.083 L1095.5 684.083 L1096.06 684.083 L1096.62 684.083 L1097.18 684.083 L1097.74 684.083 L1098.3 684.083 L1098.86 684.083 L1099.42 684.083 L1099.98 684.083 L1100.54 684.083 L1101.1 684.083 L1101.66 684.083 L1102.22 684.083 L1102.77 684.083 L1103.33 684.083 L1103.89 684.083 L1104.45 684.083 L1105.01 684.083 L1105.57 684.083 L1106.13 684.083 L1106.69 684.083 L1107.25 684.083 L1107.81 684.083 L1108.37 684.083 L1108.93 684.083 L1109.49 684.083 L1110.04 684.083 L1110.6 684.083 L1111.16 684.083 L1111.72 684.083 L1112.28 684.083 L1112.84 684.083 L1113.4 684.083 L1113.96 684.083 L1114.52 684.083 L1115.08 684.083 L1115.64 684.083 L1116.2 684.083 L1116.76 684.083 L1117.31 684.083 L1117.87 684.083 L1118.43 684.083 L1118.99 684.083 L1119.55 684.083 L1120.11 684.083 L1120.67 684.083 L1121.23 684.083 L1121.79 684.083 L1122.35 684.083 L1122.91 684.083 L1123.47 684.083 L1124.03 684.083 L1124.59 684.083 L1125.14 684.083 L1125.7 684.083 L1126.26 684.083 L1126.82 684.083 L1127.38 684.083 L1127.94 684.083 L1128.5 684.083 L1129.06 684.083 L1129.62 684.083 L1130.18 684.083 L1130.74 684.083 L1131.3 684.083 L1131.86 684.083 L1132.41 684.083 L1132.97 684.083 L1133.53 684.083 L1134.09 684.083 L1134.65 684.083 L1135.21 684.083 L1135.77 684.083 L1136.33 684.083 L1136.89 684.083 L1137.45 684.083 L1138.01 684.083 L1138.57 684.083 L1139.13 684.083 L1139.68 684.083 L1140.24 684.083 L1140.8 684.083 L1141.36 684.083 L1141.92 684.083 L1142.48 684.083 L1143.04 684.083 L1143.6 684.083 L1144.16 684.083 L1144.72 684.083 L1145.28 684.083 L1145.84 684.083 L1146.4 684.083 L1146.96 684.083 L1147.51 684.083 L1148.07 684.083 L1148.63 684.083 L1149.19 684.083 L1149.75 684.083 L1150.31 684.083 L1150.87 684.083 L1151.43 684.083 L1151.99 684.083 L1152.55 684.083 L1153.11 684.083 L1153.67 684.083 L1154.23 684.083 L1154.78 684.083 L1155.34 684.083 L1155.9 684.083 L1156.46 684.083 L1157.02 684.083 L1157.58 684.083 L1158.14 684.083 L1158.7 684.083 L1159.26 684.083 L1159.82 684.083 L1160.38 684.083 L1160.94 684.083 L1161.5 684.083 L1162.05 684.083 L1162.61 684.083 L1163.17 684.083 L1163.73 684.083 L1164.29 684.083 L1164.85 684.083 L1165.41 684.083 L1165.97 684.083 L1166.53 684.083 L1167.09 684.083 L1167.65 684.083 L1168.21 684.083 L1168.77 684.083 L1169.33 684.083 L1169.88 684.083 L1170.44 684.083 L1171 684.083 L1171.56 684.083 L1172.12 684.083 L1172.68 684.083 L1173.24 684.083 L1173.8 684.083 L1174.36 684.083 L1174.92 684.083 L1175.48 684.083 L1176.04 684.083 L1176.6 684.083 L1177.15 684.083 L1177.71 684.083 L1178.27 684.083 L1178.83 684.083 L1179.39 684.083 L1179.95 684.083 L1180.51 684.083 L1181.07 684.083 L1181.63 684.083 L1182.19 684.083 L1182.75 684.083 L1183.31 684.083 L1183.87 684.083 L1184.43 684.083 L1184.98 684.083 L1185.54 684.083 L1186.1 684.083 L1186.66 684.083 L1187.22 684.083 L1187.78 684.083 L1188.34 684.083 L1188.9 684.083 L1189.46 684.083 L1190.02 684.083 L1190.58 684.083 L1191.14 684.083 L1191.7 684.083 L1192.25 684.083 L1192.81 684.083 L1193.37 684.083 L1193.93 684.083 L1194.49 684.083 L1195.05 684.083 L1195.61 684.083 L1196.17 684.083 L1196.73 684.083 L1197.29 684.083 L1197.85 684.083 L1198.41 684.083 L1198.97 684.083 L1199.52 684.083 L1200.08 684.083 L1200.64 684.083 L1201.2 684.083 L1201.76 684.083 L1202.32 684.083 L1202.88 684.083 L1203.44 684.083 L1204 684.083 L1204.56 684.083 L1205.12 684.083 L1205.68 684.083 L1206.24 684.083 L1206.8 684.083 L1207.35 684.083 L1207.91 684.083 L1208.47 684.083 L1209.03 684.083 L1209.59 684.083 L1210.15 684.083 L1210.71 684.083 L1211.27 684.083 L1211.83 684.083 L1212.39 684.083 L1212.95 684.083 L1213.51 684.083 L1214.07 684.083 L1214.62 684.083 L1215.18 684.083 L1215.74 684.083 L1216.3 684.083 L1216.86 684.083 L1217.42 684.083 L1217.98 684.083 L1218.54 684.083 L1219.1 684.083 L1219.66 684.083 L1220.22 684.083 L1220.78 684.083 L1221.34 684.083 L1221.89 684.083 L1222.45 684.083 L1223.01 684.083 L1223.57 684.083 L1224.13 684.083 L1224.69 684.083 L1225.25 684.083 L1225.81 684.083 L1226.37 684.083 L1226.93 684.083 L1227.49 684.083 L1228.05 684.083 L1228.61 684.083 L1229.17 684.083 L1229.72 684.083 L1230.28 684.083 L1230.84 684.083 L1231.4 684.083 L1231.96 684.083 L1232.52 684.083 L1233.08 684.083 L1233.64 684.083 L1234.2 684.083 L1234.76 684.083 L1235.32 684.083 L1235.88 684.083 L1236.44 684.083 L1236.99 684.083 L1237.55 684.083 L1238.11 684.083 L1238.67 684.083 L1239.23 684.083 L1239.79 684.083 L1240.35 684.083 L1240.91 684.083 L1241.47 684.083 L1242.03 684.083 L1242.59 684.083 L1243.15 684.083 L1243.71 684.083 L1244.26 684.083 L1244.82 684.083 L1245.38 684.083 L1245.94 684.083 L1246.5 684.083 L1247.06 684.083 L1247.62 684.083 L1248.18 684.083 L1248.74 684.083 L1249.3 684.083 L1249.86 684.083 L1250.42 684.083 L1250.98 684.083 L1251.54 684.083 L1252.09 684.083 L1252.65 684.083 L1253.21 684.083 L1253.77 684.083 L1254.33 684.083 L1254.89 684.083 L1255.45 684.083 L1256.01 684.083 L1256.57 684.083 L1257.13 684.083 L1257.69 684.083 L1258.25 684.083 L1258.81 684.083 L1259.36 684.083 L1259.92 684.083 L1260.48 684.083 L1261.04 684.083 L1261.6 684.083 L1262.16 684.083 L1262.72 684.083 L1263.28 684.083 L1263.84 684.083 L1264.4 684.083 L1264.96 684.083 L1265.52 684.083 L1266.08 684.083 L1266.63 684.083 L1267.19 684.083 L1267.75 684.083 L1268.31 684.083 L1268.87 684.083 L1269.43 684.083 L1269.99 684.083 L1270.55 684.083 L1271.11 684.083 L1271.67 684.083 L1272.23 684.083 L1272.79 684.083 L1273.35 684.083 L1273.91 684.083 L1274.46 684.083 L1275.02 684.083 L1275.58 684.083 L1276.14 684.083 L1276.7 684.083 L1277.26 684.083 L1277.82 684.083 L1278.38 684.083 L1278.94 684.083 L1279.5 684.083 L1280.06 684.083 L1280.62 684.083 L1281.18 684.083 L1281.73 684.083 L1282.29 684.083 L1282.85 684.083 L1283.41 684.083 L1283.97 684.083 L1284.53 684.083 L1285.09 684.083 L1285.65 684.083 L1286.21 684.083 L1286.77 684.083 L1287.33 684.083 L1287.89 684.083 L1288.45 684.083 L1289 684.083 L1289.56 684.083 L1290.12 684.083 L1290.68 684.083 L1291.24 684.083 L1291.8 684.083 L1292.36 684.083 L1292.92 684.083 L1293.48 684.083 L1294.04 684.083 L1294.6 684.083 L1295.16 684.083 L1295.72 684.083 L1296.28 684.083 L1296.83 684.083 L1297.39 684.083 L1297.95 684.083 L1298.51 684.083 L1299.07 684.083 L1299.63 684.083 L1300.19 684.083 L1300.75 684.083 L1301.31 684.083 L1301.87 684.083 L1302.43 684.083 L1302.99 684.083 L1303.55 684.083 L1304.1 684.083 L1304.66 684.083 L1305.22 684.083 L1305.78 684.083 L1306.34 684.083 L1306.9 684.083 L1307.46 684.083 L1308.02 684.083 L1308.58 684.083 L1309.14 684.083 L1309.7 684.083 L1310.26 684.083 L1310.82 684.083 L1311.38 684.083 L1311.93 684.083 L1312.49 684.083 L1313.05 684.083 L1313.61 684.083 L1314.17 684.083 L1314.73 684.083 L1315.29 684.083 L1315.85 684.083 L1316.41 684.083 L1316.97 684.083 L1317.53 684.083 L1318.09 684.083 L1318.65 684.083 L1319.2 684.083 L1319.76 684.083 L1320.32 684.083 L1320.88 684.083 L1321.44 684.083 L1322 684.083 L1322.56 684.083 L1323.12 684.083 L1323.68 684.083 L1324.24 684.083 L1324.8 684.083 L1325.36 684.083 L1325.92 684.083 L1326.47 684.083 L1327.03 684.083 L1327.59 684.083 L1328.15 684.083 L1328.71 684.083 L1329.27 684.083 L1329.83 684.083 L1330.39 684.083 L1330.95 684.083 L1331.51 684.083 L1332.07 684.083 L1332.63 684.083 L1333.19 684.083 L1333.75 684.083 L1334.3 684.083 L1334.86 684.083 L1335.42 684.083 L1335.98 684.083 L1336.54 684.083 L1337.1 684.083 L1337.66 684.083 L1338.22 684.083 L1338.78 684.083 L1339.34 684.083 L1339.9 684.083 L1340.46 684.083 L1341.02 684.083 L1341.57 684.083 L1342.13 684.083 L1342.69 684.083 L1343.25 684.083 L1343.81 684.083 L1344.37 684.083 L1344.93 684.083 L1345.49 684.083 L1346.05 684.083 L1346.61 684.083 L1347.17 684.083 L1347.73 684.083 L1348.29 684.083 L1348.84 684.083 L1349.4 684.083 L1349.96 684.083 L1350.52 684.083 L1351.08 684.083 L1351.64 684.083 L1352.2 684.083 L1352.76 684.083 L1353.32 684.083 L1353.88 684.083 L1354.44 684.083 L1355 684.083 L1355.56 684.083 L1356.12 684.083 L1356.67 684.083 L1357.23 684.083 L1357.79 684.083 L1358.35 684.083 L1358.91 684.083 L1359.47 684.083 L1360.03 684.083 L1360.59 684.083 L1361.15 684.083 L1361.71 684.083 L1362.27 684.083 L1362.83 684.083 L1363.39 684.083 L1363.94 684.083 L1364.5 684.083 L1365.06 684.083 L1365.62 684.083 L1366.18 684.083 L1366.74 684.083 L1367.3 684.083 L1367.86 684.083 L1368.42 684.083 L1368.98 684.083 L1369.54 684.083 L1370.1 684.083 L1370.66 684.083 L1371.21 684.083 L1371.77 684.083 L1372.33 684.083 L1372.89 684.083 L1373.45 684.083 L1374.01 684.083 L1374.57 684.083 L1375.13 684.083 L1375.69 684.083 L1376.25 684.083 L1376.81 684.083 L1377.37 684.083 L1377.93 684.083 L1378.49 684.083 L1379.04 684.083 L1379.6 684.083 L1380.16 684.083 L1380.72 684.083 L1381.28 684.083 L1381.84 684.083 L1382.4 684.083 L1382.96 684.083 L1383.52 684.083 L1384.08 684.083 L1384.64 684.083 L1385.2 684.083 L1385.76 684.083 L1386.31 684.083 L1386.87 684.083 L1387.43 684.083 L1387.99 684.083 L1388.55 684.083 L1389.11 684.083 L1389.67 684.083 L1390.23 684.083 L1390.79 684.083 L1391.35 684.083 L1391.91 684.083 L1392.47 684.083 L1393.03 684.083 L1393.58 684.083 L1394.14 684.083 L1394.7 684.083 L1395.26 684.083 L1395.82 684.083 L1396.38 684.083 L1396.94 684.083 L1397.5 684.083 L1398.06 684.083 L1398.62 684.083 L1399.18 684.083 L1399.74 684.083 L1400.3 684.083 L1400.86 684.083 L1401.41 684.083 L1401.97 684.083 L1402.53 684.083 L1403.09 684.083 L1403.65 684.083 L1404.21 684.083 L1404.77 684.083 L1405.33 684.083 L1405.89 684.083 L1406.45 684.083 L1407.01 684.083 L1407.57 684.083 L1408.13 684.083 L1408.68 684.083 L1409.24 684.083 L1409.8 684.083 L1410.36 684.083 L1410.92 684.083 L1411.48 684.083 L1412.04 684.083 L1412.6 684.083 L1413.16 684.083 L1413.72 684.083 L1414.28 684.083 L1414.84 684.083 L1415.4 684.083 L1415.95 684.083 L1416.51 684.083 L1417.07 684.083 L1417.63 684.083 L1418.19 684.083 L1418.75 684.083 L1419.31 684.083 L1419.87 684.083 L1420.43 684.083 L1420.99 684.083 L1421.55 684.083 L1422.11 684.083 L1422.67 684.083 L1423.23 684.083 L1423.78 684.083 L1424.34 684.083 L1424.9 684.083 L1425.46 684.083 L1426.02 684.083 L1426.58 684.083 L1427.14 684.083 L1427.7 684.083 L1428.26 684.083 L1428.82 684.083 L1429.38 684.083 L1429.94 684.083 L1430.5 684.083 L1431.05 684.083 L1431.61 684.083 L1432.17 684.083 L1432.73 684.083 L1433.29 684.083 L1433.85 684.083 L1434.41 684.083 L1434.97 684.083 L1435.53 684.083 L1436.09 684.083 L1436.65 684.083 L1437.21 684.083 L1437.77 684.083 L1438.33 684.083 L1438.88 684.083 L1439.44 684.083 L1440 684.083 L1440.56 684.083 L1441.12 684.083 L1441.68 684.083 L1442.24 684.083 L1442.8 684.083 L1443.36 684.083 L1443.92 684.083 L1444.48 684.083 L1445.04 684.083 L1445.6 684.083 L1446.15 684.083 L1446.71 684.083 L1447.27 684.083 L1447.83 684.083 L1448.39 684.083 L1448.95 684.083 L1449.51 684.083 L1450.07 684.083 L1450.63 684.083 L1451.19 684.083 L1451.75 684.083 L1452.31 684.083 L1452.87 684.083 L1453.42 684.083 L1453.98 684.083 L1454.54 684.083 L1455.1 684.083 L1455.66 684.083 L1456.22 684.083 L1456.78 684.083 L1457.34 684.083 L1457.9 684.083 L1458.46 684.083 L1459.02 684.083 L1459.58 684.083 L1460.14 684.083 L1460.7 684.083 L1461.25 684.083 L1461.81 684.083 L1462.37 684.083 L1462.93 684.083 L1463.49 684.083 L1464.05 684.083 L1464.61 684.083 L1465.17 684.083 L1465.73 684.083 L1466.29 684.083 L1466.85 684.083 L1467.41 684.083 L1467.97 684.083 L1468.52 684.083 L1469.08 684.083 L1469.64 684.083 L1470.2 684.083 L1470.76 684.083 L1471.32 684.083 L1471.88 684.083 L1472.44 684.083 L1473 684.083 L1473.56 684.083 L1474.12 684.083 L1474.68 684.083 L1475.24 684.083 L1475.79 684.083 L1476.35 684.083 L1476.91 684.083 L1477.47 684.083 L1478.03 684.083 L1478.59 684.083 L1479.15 684.083 L1479.71 684.083 L1480.27 684.083 L1480.83 684.083 L1481.39 684.083 L1481.95 684.083 L1482.51 684.083 L1483.07 684.083 L1483.62 684.083 L1484.18 684.083 L1484.74 684.083 L1485.3 684.083 L1485.86 684.083 L1486.42 684.083 L1486.98 684.083 L1487.54 684.083 L1488.1 684.083 L1488.66 684.083 L1489.22 684.083 L1489.78 684.083 L1490.34 684.083 L1490.89 684.083 L1491.45 684.083 L1492.01 684.083 L1492.57 684.083 L1493.13 684.083 L1493.69 684.083 L1494.25 684.083 L1494.81 684.083 L1495.37 684.083 L1495.93 684.083 L1496.49 684.083 L1497.05 684.083 L1497.61 684.083 L1498.16 684.083 L1498.72 684.083 L1499.28 684.083 L1499.84 684.083 L1500.4 684.083 L1500.96 684.083 L1501.52 684.083 L1502.08 684.083 L1502.64 684.083 L1503.2 684.083 L1503.76 684.083 L1504.32 684.083 L1504.88 684.083 L1505.44 684.083 L1505.99 684.083 L1506.55 684.083 L1507.11 684.083 L1507.67 684.083 L1508.23 684.083 L1508.79 684.083 L1509.35 684.083 L1509.91 684.083 L1510.47 684.083 L1511.03 684.083 L1511.59 684.083 L1512.15 684.083 L1512.71 684.083 L1513.26 684.083 L1513.82 684.083 L1514.38 684.083 L1514.94 684.083 L1515.5 684.083 L1516.06 684.083 L1516.62 684.083 L1517.18 684.083 L1517.74 684.083 L1518.3 684.083 L1518.86 684.083 L1519.42 684.083 L1519.98 684.083 L1520.53 684.083 L1521.09 684.083 L1521.65 684.083 L1522.21 684.083 L1522.77 684.083 L1523.33 684.083 L1523.89 684.083 L1524.45 684.083 L1525.01 684.083 L1525.57 684.083 L1526.13 684.083 L1526.69 684.083 L1527.25 684.083 L1527.81 684.083 L1528.36 684.083 L1528.92 684.083 L1529.48 684.083 L1530.04 684.083 L1530.6 684.083 L1531.16 684.083 L1531.72 684.083 L1532.28 684.083 L1532.84 684.083 L1533.4 684.083 L1533.96 684.083 L1534.52 684.083 L1535.08 684.083 L1535.63 684.083 L1536.19 684.083 L1536.75 684.083 L1537.31 684.083 L1537.87 684.083 L1538.43 684.083 L1538.99 684.083 L1539.55 684.083 L1540.11 684.083 L1540.67 684.083 L1541.23 684.083 L1541.79 684.083 L1542.35 684.083 L1542.9 684.083 L1543.46 684.083 L1544.02 684.083 L1544.58 684.083 L1545.14 684.083 L1545.7 684.083 L1546.26 684.083 L1546.82 684.083 L1547.38 684.083 L1547.94 684.083 L1548.5 684.083 L1549.06 684.083 L1549.62 684.083 L1550.18 684.083 L1550.73 684.083 L1551.29 684.083 L1551.85 684.083 L1552.41 684.083 L1552.97 684.083 L1553.53 684.083 L1554.09 684.083 L1554.65 684.083 L1555.21 684.083 L1555.77 684.083 L1556.33 684.083 L1556.89 684.083 L1557.45 684.083 L1558 684.083 L1558.56 684.083 L1559.12 684.083 L1559.68 684.083 L1560.24 684.083 L1560.8 684.083 L1561.36 684.083 L1561.92 684.083 L1562.48 684.083 L1563.04 684.083 L1563.6 684.083 L1564.16 684.083 L1564.72 684.083 L1565.28 684.083 L1565.83 684.083 L1566.39 684.083 L1566.95 684.083 L1567.51 684.083 L1568.07 684.083 L1568.63 684.083 L1569.19 684.083 L1569.75 684.083 L1570.31 684.083 L1570.87 684.083 L1571.43 684.083 L1571.99 684.083 L1572.55 684.083 L1573.1 684.083 L1573.66 684.083 L1574.22 684.083 L1574.78 684.083 L1575.34 684.083 L1575.9 684.083 L1576.46 684.083 L1577.02 684.083 L1577.58 684.083 L1578.14 684.083 L1578.7 684.083 L1579.26 684.083 L1579.82 684.083 L1580.37 684.083 L1580.93 684.083 L1581.49 684.083 L1582.05 684.083 L1582.61 684.083 L1583.17 684.083 L1583.73 684.083 L1584.29 684.083 L1584.85 684.083 L1585.41 684.083 L1585.97 684.083 L1586.53 684.083 L1587.09 684.083 L1587.65 684.083 L1588.2 684.083 L1588.76 684.083 L1589.32 684.083 L1589.88 684.083 L1590.44 684.083 L1591 684.083 L1591.56 684.083 L1592.12 684.083 L1592.68 684.083 L1593.24 684.083 L1593.8 684.083 L1594.36 684.083 L1594.92 684.083 L1595.47 684.083 L1596.03 684.083 L1596.59 684.083 L1597.15 684.083 L1597.71 684.083 L1598.27 684.083 L1598.83 684.083 L1599.39 684.083 L1599.95 684.083 L1600.51 684.083 L1601.07 684.083 L1601.63 684.083 L1602.19 684.083 L1602.74 684.083 L1603.3 684.083 L1603.86 684.083 L1604.42 684.083 L1604.98 684.083 L1605.54 684.083 L1606.1 684.083 L1606.66 684.083 L1607.22 684.083 L1607.78 684.083 L1608.34 684.083 L1608.9 684.083 L1609.46 684.083 L1610.02 684.083 L1610.57 684.083 L1611.13 684.083 L1611.69 684.083 L1612.25 684.083 L1612.81 684.083 L1613.37 684.083 L1613.93 684.083 L1614.49 684.083 L1615.05 684.083 L1615.61 684.083 L1616.17 684.083 L1616.73 684.083 L1617.29 684.083 L1617.84 684.083 L1618.4 684.083 L1618.96 684.083 L1619.52 684.083 L1620.08 684.083 L1620.64 684.083 L1621.2 684.083 L1621.76 684.083 L1622.32 684.083 L1622.88 684.083 L1623.44 684.083 L1624 684.083 L1624.56 684.083 L1625.11 684.083 L1625.67 684.083 L1626.23 684.083 L1626.79 684.083 L1627.35 684.083 L1627.91 684.083 L1628.47 684.083 L1629.03 684.083 L1629.59 684.083 L1630.15 684.083 L1630.71 684.083 L1631.27 684.083 L1631.83 684.083 L1632.39 684.083 L1632.94 684.083 L1633.5 684.083 L1634.06 684.083 L1634.62 684.083 L1635.18 684.083 L1635.74 684.083 L1636.3 684.083 L1636.86 684.083 L1637.42 684.083 L1637.98 684.083 L1638.54 684.083 L1639.1 684.083 L1639.66 684.083 L1640.21 684.083 L1640.77 684.083 L1641.33 684.083 L1641.89 684.083 L1642.45 684.083 L1643.01 684.083 L1643.57 684.083 L1644.13 684.083 L1644.69 684.083 L1645.25 684.083 L1645.81 684.083 L1646.37 684.083 L1646.93 684.083 L1647.48 684.083 L1648.04 684.083 L1648.6 684.083 L1649.16 684.083 L1649.72 684.083 L1650.28 684.083 L1650.84 684.083 L1651.4 684.083 L1651.96 684.083 L1652.52 684.083 L1653.08 684.083 L1653.64 684.083 L1654.2 684.083 L1654.76 684.083 L1655.31 684.083 L1655.87 684.083 L1656.43 684.083 L1656.99 684.083 L1657.55 684.083 L1658.11 684.083 L1658.67 684.083 L1659.23 684.083 L1659.79 684.083 L1660.35 684.083 L1660.91 684.083 L1661.47 684.083 L1662.03 684.083 L1662.58 684.083 L1663.14 684.083 L1663.7 684.083 L1664.26 684.083 L1664.82 684.083 L1665.38 684.083 L1665.94 684.083 L1666.5 684.083 L1667.06 684.083 L1667.62 684.083 L1668.18 684.083 L1668.74 684.083 L1669.3 684.083 L1669.85 684.083 L1670.41 684.083 L1670.97 684.083 L1671.53 684.083 L1672.09 684.083 L1672.65 684.083 L1673.21 684.083 L1673.77 684.083 L1674.33 684.083 L1674.89 684.083 L1675.45 684.083 L1676.01 684.083 L1676.57 684.083 L1677.13 684.083 L1677.68 684.083 L1678.24 684.083 L1678.8 684.083 L1679.36 684.083 L1679.92 684.083 L1680.48 684.083 L1681.04 684.083 L1681.6 684.083 L1682.16 684.083 L1682.72 684.083 L1683.28 684.083 L1683.84 684.083 L1684.4 684.083 L1684.95 684.083 L1685.51 684.083 L1686.07 684.083 L1686.63 684.083 L1687.19 684.083 L1687.75 684.083 L1688.31 684.083 L1688.87 684.083 L1689.43 684.083 L1689.99 684.083 L1690.55 684.083 L1691.11 684.083 L1691.67 684.083 L1692.23 684.083 L1692.78 684.083 L1693.34 684.083 L1693.9 684.083 L1694.46 684.083 L1695.02 684.083 L1695.58 684.083 L1696.14 684.083 L1696.7 684.083 L1697.26 684.083 L1697.82 684.083 L1698.38 684.083 L1698.94 684.083 L1699.5 684.083 L1700.05 684.083 L1700.61 684.083 L1701.17 684.083 L1701.73 684.083 L1702.29 684.083 L1702.85 684.083 L1703.41 684.083 L1703.97 684.083 L1704.53 684.083 L1705.09 684.083 L1705.65 684.083 L1706.21 684.083 L1706.77 684.083 L1707.32 684.083 L1707.88 684.083 L1708.44 684.083 L1709 684.083 L1709.56 684.083 L1710.12 684.083 L1710.68 684.083 L1711.24 684.083 L1711.8 684.083 L1712.36 684.083 L1712.92 684.083 L1713.48 684.083 L1714.04 684.083 L1714.6 684.083 L1715.15 684.083 L1715.71 684.083 L1716.27 684.083 L1716.83 684.083 L1717.39 684.083 L1717.95 684.083 L1718.51 684.083 L1719.07 684.083 L1719.63 684.083 L1720.19 684.083 L1720.75 684.083 L1721.31 684.083 L1721.87 684.083 L1722.42 684.083 L1722.98 684.083 L1723.54 684.083 L1724.1 684.083 L1724.66 684.083 L1725.22 684.083 L1725.78 684.083 L1726.34 684.083 L1726.9 684.083 L1727.46 684.083 L1728.02 684.083 L1728.58 684.083 L1729.14 684.083 L1729.69 684.083 L1730.25 684.083 L1730.81 684.083 L1731.37 684.083 L1731.93 684.083 L1732.49 684.083 L1733.05 684.083 L1733.61 684.083 L1734.17 684.083 L1734.73 684.083 L1735.29 684.083 L1735.85 684.083 L1736.41 684.083 L1736.97 684.083 L1737.52 684.083 L1738.08 684.083 L1738.64 684.083 L1739.2 684.083 L1739.76 684.083 L1740.32 684.083 L1740.88 684.083 L1741.44 684.083 L1742 684.083 L1742.56 684.083 L1743.12 684.083 L1743.68 684.083 L1744.24 684.083 L1744.79 684.083 L1745.35 684.083 L1745.91 684.083 L1746.47 684.083 L1747.03 684.083 L1747.59 684.083 L1748.15 684.083 L1748.71 684.083 L1749.27 684.083 L1749.83 684.083 L1750.39 684.083 L1750.95 684.083 L1751.51 684.083 L1752.06 684.083 L1752.62 684.083 L1753.18 684.083 L1753.74 684.083 L1754.3 684.083 L1754.86 684.083 L1755.42 684.083 L1755.98 684.083 L1756.54 684.083 L1757.1 684.083 L1757.66 684.083 L1758.22 684.083 L1758.78 684.083 L1759.34 684.083 L1759.89 684.083 L1760.45 684.083 L1761.01 684.083 L1761.57 684.083 L1762.13 684.083 L1762.69 684.083 L1763.25 684.083 L1763.81 684.083 L1764.37 684.083 L1764.93 684.083 L1765.49 684.083 L1766.05 684.083 L1766.61 684.083 L1767.16 684.083 L1767.72 684.083 L1768.28 684.083 L1768.84 684.083 L1769.4 684.083 L1769.96 684.083 L1770.52 684.083 L1771.08 684.083 L1771.64 684.083 L1772.2 684.083 L1772.76 684.083 L1773.32 684.083 L1773.88 684.083 L1774.43 684.083 L1774.99 684.083 L1775.55 684.083 L1776.11 684.083 L1776.67 684.083 L1777.23 684.083 L1777.79 684.083 L1778.35 684.083 L1778.91 684.083 L1779.47 684.083 L1780.03 684.083 L1780.59 684.083 L1781.15 684.083 L1781.71 684.083 L1782.26 684.083 L1782.82 684.083 L1783.38 684.083 L1783.94 684.083 L1784.5 684.083 L1785.06 684.083 L1785.62 684.083 L1786.18 684.083 L1786.74 684.083 L1787.3 684.083 L1787.86 684.083 L1788.42 684.083 L1788.98 684.083 L1789.53 684.083 L1790.09 684.083 L1790.65 684.083 L1791.21 684.083 L1791.77 684.083 L1792.33 684.083 L1792.89 684.083 L1793.45 684.083 L1794.01 684.083 L1794.57 684.083 L1795.13 684.083 L1795.69 684.083 L1796.25 684.083 L1796.8 684.083 L1797.36 684.083 L1797.92 684.083 L1798.48 684.083 L1799.04 684.083 L1799.6 684.083 L1800.16 684.083 L1800.72 684.083 L1801.28 684.083 L1801.84 684.083 L1802.4 684.083 L1802.96 684.083 L1803.52 684.083 L1804.08 684.083 L1804.63 684.083 L1805.19 684.083 L1805.75 684.083 L1806.31 684.083 L1806.87 684.083 L1807.43 684.083 L1807.99 684.083 L1808.55 684.083 L1809.11 684.083 L1809.67 684.083 L1810.23 684.083 L1810.79 684.083 L1811.35 684.083 L1811.9 684.083 L1812.46 684.083 L1813.02 684.083 L1813.58 684.083 L1814.14 684.083 L1814.7 684.083 L1815.26 684.083 L1815.82 684.083 L1816.38 684.083 L1816.94 684.083 L1817.5 684.083 L1818.06 684.083 L1818.62 684.083 L1819.18 684.083 L1819.73 684.083 L1820.29 684.083 L1820.85 684.083 L1821.41 684.083 L1821.97 684.083 L1822.53 684.083 L1823.09 684.083 L1823.65 684.083 L1824.21 684.083 L1824.77 684.083 L1825.33 684.083 L1825.89 684.083 L1826.45 684.083 L1827 684.083 L1827.56 684.083 L1828.12 684.083 L1828.68 684.083 L1829.24 684.083 L1829.8 684.083 L1830.36 684.083 L1830.92 684.083 L1831.48 684.083 L1832.04 684.083 L1832.6 684.083 L1833.16 684.083 L1833.72 684.083 L1834.27 684.083 L1834.83 684.083 L1835.39 684.083 L1835.95 684.083 L1836.51 684.083 L1837.07 684.083 L1837.63 684.083 L1838.19 684.083 L1838.19 682.677 L1837.63 682.677 L1837.07 682.677 L1836.51 682.677 L1835.95 682.677 L1835.39 682.677 L1834.83 682.677 L1834.27 682.677 L1833.72 682.677 L1833.16 682.677 L1832.6 682.677 L1832.04 682.677 L1831.48 682.677 L1830.92 682.677 L1830.36 682.677 L1829.8 682.677 L1829.24 682.677 L1828.68 682.677 L1828.12 682.677 L1827.56 682.677 L1827 682.677 L1826.45 682.677 L1825.89 682.677 L1825.33 682.677 L1824.77 682.677 L1824.21 682.677 L1823.65 682.677 L1823.09 682.677 L1822.53 682.677 L1821.97 682.677 L1821.41 682.677 L1820.85 682.677 L1820.29 682.677 L1819.73 682.677 L1819.18 682.677 L1818.62 682.677 L1818.06 682.677 L1817.5 682.677 L1816.94 682.677 L1816.38 682.677 L1815.82 682.677 L1815.26 682.677 L1814.7 682.677 L1814.14 682.677 L1813.58 682.677 L1813.02 682.677 L1812.46 682.677 L1811.9 682.677 L1811.35 682.677 L1810.79 682.677 L1810.23 682.677 L1809.67 682.677 L1809.11 682.677 L1808.55 682.677 L1807.99 682.677 L1807.43 682.677 L1806.87 682.677 L1806.31 682.677 L1805.75 682.677 L1805.19 682.677 L1804.63 682.677 L1804.08 682.677 L1803.52 682.677 L1802.96 682.677 L1802.4 682.677 L1801.84 682.677 L1801.28 682.677 L1800.72 682.677 L1800.16 682.677 L1799.6 682.677 L1799.04 682.677 L1798.48 682.677 L1797.92 682.677 L1797.36 682.677 L1796.8 682.677 L1796.25 682.677 L1795.69 682.677 L1795.13 682.677 L1794.57 682.677 L1794.01 682.677 L1793.45 682.677 L1792.89 682.677 L1792.33 682.677 L1791.77 682.677 L1791.21 682.677 L1790.65 682.677 L1790.09 682.677 L1789.53 682.677 L1788.98 682.677 L1788.42 682.677 L1787.86 682.677 L1787.3 682.677 L1786.74 682.677 L1786.18 682.677 L1785.62 682.677 L1785.06 682.677 L1784.5 682.677 L1783.94 682.677 L1783.38 682.677 L1782.82 682.677 L1782.26 682.677 L1781.71 682.677 L1781.15 682.677 L1780.59 682.677 L1780.03 682.677 L1779.47 682.677 L1778.91 682.677 L1778.35 682.677 L1777.79 682.677 L1777.23 682.677 L1776.67 682.677 L1776.11 682.677 L1775.55 682.677 L1774.99 682.677 L1774.43 682.677 L1773.88 682.677 L1773.32 682.677 L1772.76 682.677 L1772.2 682.677 L1771.64 682.677 L1771.08 682.677 L1770.52 682.677 L1769.96 682.677 L1769.4 682.677 L1768.84 682.677 L1768.28 682.677 L1767.72 682.677 L1767.16 682.677 L1766.61 682.677 L1766.05 682.677 L1765.49 682.677 L1764.93 682.677 L1764.37 682.677 L1763.81 682.677 L1763.25 682.677 L1762.69 682.677 L1762.13 682.677 L1761.57 682.677 L1761.01 682.677 L1760.45 682.677 L1759.89 682.677 L1759.34 682.677 L1758.78 682.677 L1758.22 682.677 L1757.66 682.677 L1757.1 682.677 L1756.54 682.677 L1755.98 682.677 L1755.42 682.677 L1754.86 682.677 L1754.3 682.677 L1753.74 682.677 L1753.18 682.677 L1752.62 682.677 L1752.06 682.677 L1751.51 682.677 L1750.95 682.677 L1750.39 682.677 L1749.83 682.677 L1749.27 682.677 L1748.71 682.677 L1748.15 682.677 L1747.59 682.677 L1747.03 682.677 L1746.47 682.677 L1745.91 682.677 L1745.35 682.677 L1744.79 682.677 L1744.24 682.677 L1743.68 682.677 L1743.12 682.677 L1742.56 682.677 L1742 682.677 L1741.44 682.677 L1740.88 682.677 L1740.32 682.677 L1739.76 682.677 L1739.2 682.677 L1738.64 682.677 L1738.08 682.677 L1737.52 682.677 L1736.97 682.677 L1736.41 682.677 L1735.85 682.677 L1735.29 682.677 L1734.73 682.677 L1734.17 682.677 L1733.61 682.677 L1733.05 682.677 L1732.49 682.677 L1731.93 682.677 L1731.37 682.677 L1730.81 682.677 L1730.25 682.677 L1729.69 682.677 L1729.14 682.677 L1728.58 682.677 L1728.02 682.677 L1727.46 682.677 L1726.9 682.677 L1726.34 682.677 L1725.78 682.677 L1725.22 682.677 L1724.66 682.677 L1724.1 682.677 L1723.54 682.677 L1722.98 682.677 L1722.42 682.677 L1721.87 682.677 L1721.31 682.677 L1720.75 682.677 L1720.19 682.677 L1719.63 682.677 L1719.07 682.677 L1718.51 682.677 L1717.95 682.677 L1717.39 682.677 L1716.83 682.677 L1716.27 682.677 L1715.71 682.677 L1715.15 682.677 L1714.6 682.677 L1714.04 682.677 L1713.48 682.677 L1712.92 682.677 L1712.36 682.677 L1711.8 682.677 L1711.24 682.677 L1710.68 682.677 L1710.12 682.677 L1709.56 682.677 L1709 682.677 L1708.44 682.677 L1707.88 682.677 L1707.32 682.677 L1706.77 682.677 L1706.21 682.677 L1705.65 682.677 L1705.09 682.677 L1704.53 682.677 L1703.97 682.677 L1703.41 682.677 L1702.85 682.677 L1702.29 682.677 L1701.73 682.677 L1701.17 682.677 L1700.61 682.677 L1700.05 682.677 L1699.5 682.677 L1698.94 682.677 L1698.38 682.677 L1697.82 682.677 L1697.26 682.677 L1696.7 682.677 L1696.14 682.677 L1695.58 682.677 L1695.02 682.677 L1694.46 682.677 L1693.9 682.677 L1693.34 682.677 L1692.78 682.677 L1692.23 682.677 L1691.67 682.677 L1691.11 682.677 L1690.55 682.677 L1689.99 682.677 L1689.43 682.677 L1688.87 682.677 L1688.31 682.677 L1687.75 682.677 L1687.19 682.677 L1686.63 682.677 L1686.07 682.677 L1685.51 682.677 L1684.95 682.677 L1684.4 682.677 L1683.84 682.677 L1683.28 682.677 L1682.72 682.677 L1682.16 682.677 L1681.6 682.677 L1681.04 682.677 L1680.48 682.677 L1679.92 682.677 L1679.36 682.677 L1678.8 682.677 L1678.24 682.677 L1677.68 682.677 L1677.13 682.677 L1676.57 682.677 L1676.01 682.677 L1675.45 682.677 L1674.89 682.677 L1674.33 682.677 L1673.77 682.677 L1673.21 682.677 L1672.65 682.677 L1672.09 682.677 L1671.53 682.677 L1670.97 682.677 L1670.41 682.677 L1669.85 682.677 L1669.3 682.677 L1668.74 682.677 L1668.18 682.677 L1667.62 682.677 L1667.06 682.677 L1666.5 682.677 L1665.94 682.677 L1665.38 682.677 L1664.82 682.677 L1664.26 682.677 L1663.7 682.677 L1663.14 682.677 L1662.58 682.677 L1662.03 682.677 L1661.47 682.677 L1660.91 682.677 L1660.35 682.677 L1659.79 682.677 L1659.23 682.677 L1658.67 682.677 L1658.11 682.677 L1657.55 682.677 L1656.99 682.677 L1656.43 682.677 L1655.87 682.677 L1655.31 682.677 L1654.76 682.677 L1654.2 682.677 L1653.64 682.677 L1653.08 682.677 L1652.52 682.677 L1651.96 682.677 L1651.4 682.677 L1650.84 682.677 L1650.28 682.677 L1649.72 682.677 L1649.16 682.677 L1648.6 682.677 L1648.04 682.677 L1647.48 682.677 L1646.93 682.677 L1646.37 682.677 L1645.81 682.677 L1645.25 682.677 L1644.69 682.677 L1644.13 682.677 L1643.57 682.677 L1643.01 682.677 L1642.45 682.677 L1641.89 682.677 L1641.33 682.677 L1640.77 682.677 L1640.21 682.677 L1639.66 682.677 L1639.1 682.677 L1638.54 682.677 L1637.98 682.677 L1637.42 682.677 L1636.86 682.677 L1636.3 682.677 L1635.74 682.677 L1635.18 682.677 L1634.62 682.677 L1634.06 682.677 L1633.5 682.677 L1632.94 682.677 L1632.39 682.677 L1631.83 682.677 L1631.27 682.677 L1630.71 682.677 L1630.15 682.677 L1629.59 682.677 L1629.03 682.677 L1628.47 682.677 L1627.91 682.677 L1627.35 682.677 L1626.79 682.677 L1626.23 682.677 L1625.67 682.677 L1625.11 682.677 L1624.56 682.677 L1624 682.677 L1623.44 682.677 L1622.88 682.677 L1622.32 682.677 L1621.76 682.677 L1621.2 682.677 L1620.64 682.677 L1620.08 682.677 L1619.52 682.677 L1618.96 682.677 L1618.4 682.677 L1617.84 682.677 L1617.29 682.677 L1616.73 682.677 L1616.17 682.677 L1615.61 682.677 L1615.05 682.677 L1614.49 682.677 L1613.93 682.677 L1613.37 682.677 L1612.81 682.677 L1612.25 682.677 L1611.69 682.677 L1611.13 682.677 L1610.57 682.677 L1610.02 682.677 L1609.46 682.677 L1608.9 682.677 L1608.34 682.677 L1607.78 682.677 L1607.22 682.677 L1606.66 682.677 L1606.1 682.677 L1605.54 682.677 L1604.98 682.677 L1604.42 682.677 L1603.86 682.677 L1603.3 682.677 L1602.74 682.677 L1602.19 682.677 L1601.63 682.677 L1601.07 682.677 L1600.51 682.677 L1599.95 682.677 L1599.39 682.677 L1598.83 682.677 L1598.27 682.677 L1597.71 682.677 L1597.15 682.677 L1596.59 682.677 L1596.03 682.677 L1595.47 682.677 L1594.92 682.677 L1594.36 682.677 L1593.8 682.677 L1593.24 682.677 L1592.68 682.677 L1592.12 682.677 L1591.56 682.677 L1591 682.677 L1590.44 682.677 L1589.88 682.677 L1589.32 682.677 L1588.76 682.677 L1588.2 682.677 L1587.65 682.677 L1587.09 682.677 L1586.53 682.677 L1585.97 682.677 L1585.41 682.677 L1584.85 682.677 L1584.29 682.677 L1583.73 682.677 L1583.17 682.677 L1582.61 682.677 L1582.05 682.677 L1581.49 682.677 L1580.93 682.677 L1580.37 682.677 L1579.82 682.677 L1579.26 682.677 L1578.7 682.677 L1578.14 682.677 L1577.58 682.677 L1577.02 682.677 L1576.46 682.677 L1575.9 682.677 L1575.34 682.677 L1574.78 682.677 L1574.22 682.677 L1573.66 682.677 L1573.1 682.677 L1572.55 682.677 L1571.99 682.677 L1571.43 682.677 L1570.87 682.677 L1570.31 682.677 L1569.75 682.677 L1569.19 682.677 L1568.63 682.677 L1568.07 682.677 L1567.51 682.677 L1566.95 682.677 L1566.39 682.677 L1565.83 682.677 L1565.28 682.677 L1564.72 682.677 L1564.16 682.677 L1563.6 682.677 L1563.04 682.677 L1562.48 682.677 L1561.92 682.677 L1561.36 682.677 L1560.8 682.677 L1560.24 682.677 L1559.68 682.677 L1559.12 682.677 L1558.56 682.677 L1558 682.677 L1557.45 682.677 L1556.89 682.677 L1556.33 682.677 L1555.77 682.677 L1555.21 682.677 L1554.65 682.677 L1554.09 682.677 L1553.53 682.677 L1552.97 682.677 L1552.41 682.677 L1551.85 682.677 L1551.29 682.677 L1550.73 682.677 L1550.18 682.677 L1549.62 682.677 L1549.06 682.677 L1548.5 682.677 L1547.94 682.677 L1547.38 682.677 L1546.82 682.677 L1546.26 682.677 L1545.7 682.677 L1545.14 682.677 L1544.58 682.677 L1544.02 682.677 L1543.46 682.677 L1542.9 682.677 L1542.35 682.677 L1541.79 682.677 L1541.23 682.677 L1540.67 682.677 L1540.11 682.677 L1539.55 682.677 L1538.99 682.677 L1538.43 682.677 L1537.87 682.677 L1537.31 682.677 L1536.75 682.677 L1536.19 682.677 L1535.63 682.677 L1535.08 682.677 L1534.52 682.677 L1533.96 682.677 L1533.4 682.677 L1532.84 682.677 L1532.28 682.677 L1531.72 682.677 L1531.16 682.677 L1530.6 682.677 L1530.04 682.677 L1529.48 682.677 L1528.92 682.677 L1528.36 682.677 L1527.81 682.677 L1527.25 682.677 L1526.69 682.677 L1526.13 682.677 L1525.57 682.677 L1525.01 682.677 L1524.45 682.677 L1523.89 682.677 L1523.33 682.677 L1522.77 682.677 L1522.21 682.677 L1521.65 682.677 L1521.09 682.677 L1520.53 682.677 L1519.98 682.677 L1519.42 682.677 L1518.86 682.677 L1518.3 682.677 L1517.74 682.677 L1517.18 682.677 L1516.62 682.677 L1516.06 682.677 L1515.5 682.677 L1514.94 682.677 L1514.38 682.677 L1513.82 682.677 L1513.26 682.677 L1512.71 682.677 L1512.15 682.677 L1511.59 682.677 L1511.03 682.677 L1510.47 682.677 L1509.91 682.677 L1509.35 682.677 L1508.79 682.677 L1508.23 682.677 L1507.67 682.677 L1507.11 682.677 L1506.55 682.677 L1505.99 682.677 L1505.44 682.677 L1504.88 682.677 L1504.32 682.677 L1503.76 682.677 L1503.2 682.677 L1502.64 682.677 L1502.08 682.677 L1501.52 682.677 L1500.96 682.677 L1500.4 682.677 L1499.84 682.677 L1499.28 682.677 L1498.72 682.677 L1498.16 682.677 L1497.61 682.677 L1497.05 682.677 L1496.49 682.677 L1495.93 682.677 L1495.37 682.677 L1494.81 682.677 L1494.25 682.677 L1493.69 682.677 L1493.13 682.677 L1492.57 682.677 L1492.01 682.677 L1491.45 682.677 L1490.89 682.677 L1490.34 682.677 L1489.78 682.677 L1489.22 682.677 L1488.66 682.677 L1488.1 682.677 L1487.54 682.677 L1486.98 682.677 L1486.42 682.677 L1485.86 682.677 L1485.3 682.677 L1484.74 682.677 L1484.18 682.677 L1483.62 682.677 L1483.07 682.677 L1482.51 682.677 L1481.95 682.677 L1481.39 682.677 L1480.83 682.677 L1480.27 682.677 L1479.71 682.677 L1479.15 682.677 L1478.59 682.677 L1478.03 682.677 L1477.47 682.677 L1476.91 682.677 L1476.35 682.677 L1475.79 682.677 L1475.24 682.677 L1474.68 682.677 L1474.12 682.677 L1473.56 682.677 L1473 682.677 L1472.44 682.677 L1471.88 682.677 L1471.32 682.677 L1470.76 682.677 L1470.2 682.677 L1469.64 682.677 L1469.08 682.677 L1468.52 682.677 L1467.97 682.677 L1467.41 682.677 L1466.85 682.677 L1466.29 682.677 L1465.73 682.677 L1465.17 682.677 L1464.61 682.677 L1464.05 682.677 L1463.49 682.677 L1462.93 682.677 L1462.37 682.677 L1461.81 682.677 L1461.25 682.677 L1460.7 682.677 L1460.14 682.677 L1459.58 682.677 L1459.02 682.677 L1458.46 682.677 L1457.9 682.677 L1457.34 682.677 L1456.78 682.677 L1456.22 682.677 L1455.66 682.677 L1455.1 682.677 L1454.54 682.677 L1453.98 682.677 L1453.42 682.677 L1452.87 682.677 L1452.31 682.677 L1451.75 682.677 L1451.19 682.677 L1450.63 682.677 L1450.07 682.677 L1449.51 682.677 L1448.95 682.677 L1448.39 682.677 L1447.83 682.677 L1447.27 682.677 L1446.71 682.677 L1446.15 682.677 L1445.6 682.677 L1445.04 682.677 L1444.48 682.677 L1443.92 682.677 L1443.36 682.677 L1442.8 682.677 L1442.24 682.677 L1441.68 682.677 L1441.12 682.677 L1440.56 682.677 L1440 682.677 L1439.44 682.677 L1438.88 682.677 L1438.33 682.677 L1437.77 682.677 L1437.21 682.677 L1436.65 682.677 L1436.09 682.677 L1435.53 682.677 L1434.97 682.677 L1434.41 682.677 L1433.85 682.677 L1433.29 682.677 L1432.73 682.677 L1432.17 682.677 L1431.61 682.677 L1431.05 682.677 L1430.5 682.677 L1429.94 682.677 L1429.38 682.677 L1428.82 682.677 L1428.26 682.677 L1427.7 682.677 L1427.14 682.677 L1426.58 682.677 L1426.02 682.677 L1425.46 682.677 L1424.9 682.677 L1424.34 682.677 L1423.78 682.677 L1423.23 682.677 L1422.67 682.677 L1422.11 682.677 L1421.55 682.677 L1420.99 682.677 L1420.43 682.677 L1419.87 682.677 L1419.31 682.677 L1418.75 682.677 L1418.19 682.677 L1417.63 682.677 L1417.07 682.677 L1416.51 682.677 L1415.95 682.677 L1415.4 682.677 L1414.84 682.677 L1414.28 682.677 L1413.72 682.677 L1413.16 682.677 L1412.6 682.677 L1412.04 682.677 L1411.48 682.677 L1410.92 682.677 L1410.36 682.677 L1409.8 682.677 L1409.24 682.677 L1408.68 682.677 L1408.13 682.677 L1407.57 682.677 L1407.01 682.677 L1406.45 682.677 L1405.89 682.677 L1405.33 682.677 L1404.77 682.677 L1404.21 682.677 L1403.65 682.677 L1403.09 682.677 L1402.53 682.677 L1401.97 682.677 L1401.41 682.677 L1400.86 682.677 L1400.3 682.677 L1399.74 682.677 L1399.18 682.677 L1398.62 682.677 L1398.06 682.677 L1397.5 682.677 L1396.94 682.677 L1396.38 682.677 L1395.82 682.677 L1395.26 682.677 L1394.7 682.677 L1394.14 682.677 L1393.58 682.677 L1393.03 682.677 L1392.47 682.677 L1391.91 682.677 L1391.35 682.677 L1390.79 682.677 L1390.23 682.677 L1389.67 682.677 L1389.11 682.677 L1388.55 682.677 L1387.99 682.677 L1387.43 682.677 L1386.87 682.677 L1386.31 682.677 L1385.76 682.677 L1385.2 682.677 L1384.64 682.677 L1384.08 682.677 L1383.52 682.677 L1382.96 682.677 L1382.4 682.677 L1381.84 682.677 L1381.28 682.677 L1380.72 682.677 L1380.16 682.677 L1379.6 682.677 L1379.04 682.677 L1378.49 682.677 L1377.93 682.677 L1377.37 682.677 L1376.81 682.677 L1376.25 682.677 L1375.69 682.677 L1375.13 682.677 L1374.57 682.677 L1374.01 682.677 L1373.45 682.677 L1372.89 682.677 L1372.33 682.677 L1371.77 682.677 L1371.21 682.677 L1370.66 682.677 L1370.1 682.677 L1369.54 682.677 L1368.98 682.677 L1368.42 682.677 L1367.86 682.677 L1367.3 682.677 L1366.74 682.677 L1366.18 682.677 L1365.62 682.677 L1365.06 682.677 L1364.5 682.677 L1363.94 682.677 L1363.39 682.677 L1362.83 682.677 L1362.27 682.677 L1361.71 682.677 L1361.15 682.677 L1360.59 682.677 L1360.03 682.677 L1359.47 682.677 L1358.91 682.677 L1358.35 682.677 L1357.79 682.677 L1357.23 682.677 L1356.67 682.677 L1356.12 682.677 L1355.56 682.677 L1355 682.677 L1354.44 682.677 L1353.88 682.677 L1353.32 682.677 L1352.76 682.677 L1352.2 682.677 L1351.64 682.677 L1351.08 682.677 L1350.52 682.677 L1349.96 682.677 L1349.4 682.677 L1348.84 682.677 L1348.29 682.677 L1347.73 682.677 L1347.17 682.677 L1346.61 682.677 L1346.05 682.677 L1345.49 682.677 L1344.93 682.677 L1344.37 682.677 L1343.81 682.677 L1343.25 682.677 L1342.69 682.677 L1342.13 682.677 L1341.57 682.677 L1341.02 682.677 L1340.46 682.677 L1339.9 682.677 L1339.34 682.677 L1338.78 682.677 L1338.22 682.677 L1337.66 682.677 L1337.1 682.677 L1336.54 682.677 L1335.98 682.677 L1335.42 682.677 L1334.86 682.677 L1334.3 682.677 L1333.75 682.677 L1333.19 682.677 L1332.63 682.677 L1332.07 682.677 L1331.51 682.677 L1330.95 682.677 L1330.39 682.677 L1329.83 682.677 L1329.27 682.677 L1328.71 682.677 L1328.15 682.677 L1327.59 682.677 L1327.03 682.677 L1326.47 682.677 L1325.92 682.677 L1325.36 682.677 L1324.8 682.677 L1324.24 682.677 L1323.68 682.677 L1323.12 682.677 L1322.56 682.677 L1322 682.677 L1321.44 682.677 L1320.88 682.677 L1320.32 682.677 L1319.76 682.677 L1319.2 682.677 L1318.65 682.677 L1318.09 682.677 L1317.53 682.677 L1316.97 682.677 L1316.41 682.677 L1315.85 682.677 L1315.29 682.677 L1314.73 682.677 L1314.17 682.677 L1313.61 682.677 L1313.05 682.677 L1312.49 682.677 L1311.93 682.677 L1311.38 682.677 L1310.82 682.677 L1310.26 682.677 L1309.7 682.677 L1309.14 682.677 L1308.58 682.677 L1308.02 682.677 L1307.46 682.677 L1306.9 682.677 L1306.34 682.677 L1305.78 682.677 L1305.22 682.677 L1304.66 682.677 L1304.1 682.677 L1303.55 682.677 L1302.99 682.677 L1302.43 682.677 L1301.87 682.677 L1301.31 682.677 L1300.75 682.677 L1300.19 682.677 L1299.63 682.677 L1299.07 682.677 L1298.51 682.677 L1297.95 682.677 L1297.39 682.677 L1296.83 682.677 L1296.28 682.677 L1295.72 682.677 L1295.16 682.677 L1294.6 682.677 L1294.04 682.677 L1293.48 682.677 L1292.92 682.677 L1292.36 682.677 L1291.8 682.677 L1291.24 682.677 L1290.68 682.677 L1290.12 682.677 L1289.56 682.677 L1289 682.677 L1288.45 682.677 L1287.89 682.677 L1287.33 682.677 L1286.77 682.677 L1286.21 682.677 L1285.65 682.677 L1285.09 682.677 L1284.53 682.677 L1283.97 682.677 L1283.41 682.677 L1282.85 682.677 L1282.29 682.677 L1281.73 682.677 L1281.18 682.677 L1280.62 682.677 L1280.06 682.677 L1279.5 682.677 L1278.94 682.677 L1278.38 682.677 L1277.82 682.677 L1277.26 682.677 L1276.7 682.677 L1276.14 682.677 L1275.58 682.677 L1275.02 682.677 L1274.46 682.677 L1273.91 682.677 L1273.35 682.677 L1272.79 682.677 L1272.23 682.677 L1271.67 682.677 L1271.11 682.677 L1270.55 682.677 L1269.99 682.677 L1269.43 682.677 L1268.87 682.677 L1268.31 682.677 L1267.75 682.677 L1267.19 682.677 L1266.63 682.677 L1266.08 682.677 L1265.52 682.677 L1264.96 682.677 L1264.4 682.677 L1263.84 682.677 L1263.28 682.677 L1262.72 682.677 L1262.16 682.677 L1261.6 682.677 L1261.04 682.677 L1260.48 682.677 L1259.92 682.677 L1259.36 682.677 L1258.81 682.677 L1258.25 682.677 L1257.69 682.677 L1257.13 682.677 L1256.57 682.677 L1256.01 682.677 L1255.45 682.677 L1254.89 682.677 L1254.33 682.677 L1253.77 682.677 L1253.21 682.677 L1252.65 682.677 L1252.09 682.677 L1251.54 682.677 L1250.98 682.677 L1250.42 682.677 L1249.86 682.677 L1249.3 682.677 L1248.74 682.677 L1248.18 682.677 L1247.62 682.677 L1247.06 682.677 L1246.5 682.677 L1245.94 682.677 L1245.38 682.677 L1244.82 682.677 L1244.26 682.677 L1243.71 682.677 L1243.15 682.677 L1242.59 682.677 L1242.03 682.677 L1241.47 682.677 L1240.91 682.677 L1240.35 682.677 L1239.79 682.677 L1239.23 682.677 L1238.67 682.677 L1238.11 682.677 L1237.55 682.677 L1236.99 682.677 L1236.44 682.677 L1235.88 682.677 L1235.32 682.677 L1234.76 682.677 L1234.2 682.677 L1233.64 682.677 L1233.08 682.677 L1232.52 682.677 L1231.96 682.677 L1231.4 682.677 L1230.84 682.677 L1230.28 682.677 L1229.72 682.677 L1229.17 682.677 L1228.61 682.677 L1228.05 682.677 L1227.49 682.677 L1226.93 682.677 L1226.37 682.677 L1225.81 682.677 L1225.25 682.677 L1224.69 682.677 L1224.13 682.677 L1223.57 682.677 L1223.01 682.677 L1222.45 682.677 L1221.89 682.677 L1221.34 682.677 L1220.78 682.677 L1220.22 682.677 L1219.66 682.677 L1219.1 682.677 L1218.54 682.677 L1217.98 682.677 L1217.42 682.677 L1216.86 682.677 L1216.3 682.677 L1215.74 682.677 L1215.18 682.677 L1214.62 682.677 L1214.07 682.677 L1213.51 682.677 L1212.95 682.677 L1212.39 682.677 L1211.83 682.677 L1211.27 682.677 L1210.71 682.677 L1210.15 682.677 L1209.59 682.677 L1209.03 682.677 L1208.47 682.677 L1207.91 682.677 L1207.35 682.677 L1206.8 682.677 L1206.24 682.677 L1205.68 682.677 L1205.12 682.677 L1204.56 682.677 L1204 682.677 L1203.44 682.677 L1202.88 682.677 L1202.32 682.677 L1201.76 682.677 L1201.2 682.677 L1200.64 682.677 L1200.08 682.677 L1199.52 682.677 L1198.97 682.677 L1198.41 682.677 L1197.85 682.677 L1197.29 682.677 L1196.73 682.677 L1196.17 682.677 L1195.61 682.677 L1195.05 682.677 L1194.49 682.677 L1193.93 682.677 L1193.37 682.677 L1192.81 682.677 L1192.25 682.677 L1191.7 682.677 L1191.14 682.677 L1190.58 682.677 L1190.02 682.677 L1189.46 682.677 L1188.9 682.677 L1188.34 682.677 L1187.78 682.677 L1187.22 682.677 L1186.66 682.677 L1186.1 682.677 L1185.54 682.677 L1184.98 682.677 L1184.43 682.677 L1183.87 682.677 L1183.31 682.677 L1182.75 682.677 L1182.19 682.677 L1181.63 682.677 L1181.07 682.677 L1180.51 682.677 L1179.95 682.677 L1179.39 682.677 L1178.83 682.677 L1178.27 682.677 L1177.71 682.677 L1177.15 682.677 L1176.6 682.677 L1176.04 682.677 L1175.48 682.677 L1174.92 682.677 L1174.36 682.677 L1173.8 682.677 L1173.24 682.677 L1172.68 682.677 L1172.12 682.677 L1171.56 682.677 L1171 682.677 L1170.44 682.677 L1169.88 682.677 L1169.33 682.677 L1168.77 682.677 L1168.21 682.677 L1167.65 682.677 L1167.09 682.677 L1166.53 682.677 L1165.97 682.677 L1165.41 682.677 L1164.85 682.677 L1164.29 682.677 L1163.73 682.677 L1163.17 682.677 L1162.61 682.677 L1162.05 682.677 L1161.5 682.677 L1160.94 682.677 L1160.38 682.677 L1159.82 682.677 L1159.26 682.677 L1158.7 682.677 L1158.14 682.677 L1157.58 682.677 L1157.02 682.677 L1156.46 682.677 L1155.9 682.677 L1155.34 682.677 L1154.78 682.677 L1154.23 682.677 L1153.67 682.677 L1153.11 682.677 L1152.55 682.677 L1151.99 682.677 L1151.43 682.677 L1150.87 682.677 L1150.31 682.677 L1149.75 682.677 L1149.19 682.677 L1148.63 682.677 L1148.07 682.677 L1147.51 682.677 L1146.96 682.677 L1146.4 682.677 L1145.84 682.677 L1145.28 682.677 L1144.72 682.677 L1144.16 682.677 L1143.6 682.677 L1143.04 682.677 L1142.48 682.677 L1141.92 682.677 L1141.36 682.677 L1140.8 682.677 L1140.24 682.677 L1139.68 682.677 L1139.13 682.677 L1138.57 682.677 L1138.01 682.677 L1137.45 682.677 L1136.89 682.677 L1136.33 682.677 L1135.77 682.677 L1135.21 682.677 L1134.65 682.677 L1134.09 682.677 L1133.53 682.677 L1132.97 682.677 L1132.41 682.677 L1131.86 682.677 L1131.3 682.677 L1130.74 682.677 L1130.18 682.677 L1129.62 682.677 L1129.06 682.677 L1128.5 682.677 L1127.94 682.677 L1127.38 682.677 L1126.82 682.677 L1126.26 682.677 L1125.7 682.677 L1125.14 682.677 L1124.59 682.677 L1124.03 682.677 L1123.47 682.677 L1122.91 682.677 L1122.35 682.677 L1121.79 682.677 L1121.23 682.677 L1120.67 682.677 L1120.11 682.677 L1119.55 682.677 L1118.99 682.677 L1118.43 682.677 L1117.87 682.677 L1117.31 682.677 L1116.76 682.677 L1116.2 682.677 L1115.64 682.677 L1115.08 682.677 L1114.52 682.677 L1113.96 682.677 L1113.4 682.677 L1112.84 682.677 L1112.28 682.677 L1111.72 682.677 L1111.16 682.677 L1110.6 682.677 L1110.04 682.677 L1109.49 682.677 L1108.93 682.677 L1108.37 682.677 L1107.81 682.677 L1107.25 682.677 L1106.69 682.677 L1106.13 682.677 L1105.57 682.677 L1105.01 682.677 L1104.45 682.677 L1103.89 682.677 L1103.33 682.677 L1102.77 682.677 L1102.22 682.677 L1101.66 682.677 L1101.1 682.677 L1100.54 682.677 L1099.98 682.677 L1099.42 682.677 L1098.86 682.677 L1098.3 682.677 L1097.74 682.677 L1097.18 682.677 L1096.62 682.677 L1096.06 682.677 L1095.5 682.677 L1094.94 682.677 L1094.39 682.677 L1093.83 682.677 L1093.27 682.677 L1092.71 682.677 L1092.15 682.677 L1091.59 682.677 L1091.03 682.677 L1090.47 682.677 L1089.91 682.677 L1089.35 682.677 L1088.79 682.677 L1088.23 682.677 L1087.67 682.677 L1087.12 682.677 L1086.56 682.677 L1086 682.677 L1085.44 682.677 L1084.88 682.677 L1084.32 682.677 L1083.76 682.677 L1083.2 682.677 L1082.64 682.677 L1082.08 682.677 L1081.52 682.677 L1080.96 682.677 L1080.4 682.677 L1079.85 682.677 L1079.29 682.677 L1078.73 682.677 L1078.17 682.677 L1077.61 682.677 L1077.05 682.677 L1076.49 682.677 L1075.93 682.677 L1075.37 682.677 L1074.81 682.677 L1074.25 682.677 L1073.69 682.677 L1073.13 682.677 L1072.57 682.677 L1072.02 682.677 L1071.46 682.677 L1070.9 682.677 L1070.34 682.677 L1069.78 682.677 L1069.22 682.677 L1068.66 682.677 L1068.1 682.677 L1067.54 682.677 L1066.98 682.677 L1066.42 682.677 L1065.86 682.677 L1065.3 682.677 L1064.75 682.677 L1064.19 682.677 L1063.63 682.677 L1063.07 682.677 L1062.51 682.677 L1061.95 682.677 L1061.39 682.677 L1060.83 682.677 L1060.27 682.677 L1059.71 682.677 L1059.15 682.677 L1058.59 682.677 L1058.03 682.677 L1057.48 682.677 L1056.92 682.677 L1056.36 682.677 L1055.8 682.677 L1055.24 682.677 L1054.68 682.677 L1054.12 682.677 L1053.56 682.677 L1053 682.677 L1052.44 682.677 L1051.88 682.677 L1051.32 682.677 L1050.76 682.677 L1050.2 682.677 L1049.65 682.677 L1049.09 682.677 L1048.53 682.677 L1047.97 682.677 L1047.41 682.677 L1046.85 682.677 L1046.29 682.677 L1045.73 682.677 L1045.17 682.677 L1044.61 682.677 L1044.05 682.677 L1043.49 682.677 L1042.93 682.677 L1042.38 682.677 L1041.82 682.677 L1041.26 682.677 L1040.7 682.677 L1040.14 682.677 L1039.58 682.677 L1039.02 682.677 L1038.46 682.677 L1037.9 682.677 L1037.34 682.677 L1036.78 682.677 L1036.22 682.677 L1035.66 682.677 L1035.1 682.677 L1034.55 682.677 L1033.99 682.677 L1033.43 682.677 L1032.87 682.677 L1032.31 682.677 L1031.75 682.677 L1031.19 682.677 L1030.63 682.677 L1030.07 682.677 L1029.51 682.677 L1028.95 682.677 L1028.39 682.677 L1027.83 682.677 L1027.28 682.677 L1026.72 682.677 L1026.16 682.677 L1025.6 682.677 L1025.04 682.677 L1024.48 682.677 L1023.92 682.677 L1023.36 682.677 L1022.8 682.677 L1022.24 682.677 L1021.68 682.677 L1021.12 682.677 L1020.56 682.677 L1020.01 682.677 L1019.45 682.677 L1018.89 682.677 L1018.33 682.677 L1017.77 682.677 L1017.21 682.677 L1016.65 682.677 L1016.09 682.677 L1015.53 682.677 L1014.97 682.677 L1014.41 682.677 L1013.85 682.677 L1013.29 682.677 L1012.73 682.677 L1012.18 682.677 L1011.62 682.677 L1011.06 682.677 L1010.5 682.677 L1009.94 682.677 L1009.38 682.677 L1008.82 682.677 L1008.26 682.677 L1007.7 682.677 L1007.14 682.677 L1006.58 682.677 L1006.02 682.677 L1005.46 682.677 L1004.91 682.677 L1004.35 682.677 L1003.79 682.677 L1003.23 682.677 L1002.67 682.677 L1002.11 682.677 L1001.55 682.677 L1000.99 682.677 L1000.43 682.677 L999.872 682.677 L999.313 682.677 L998.754 682.677 L998.194 682.677 L997.635 682.677 L997.076 682.677 L996.517 682.677 L995.957 682.677 L995.398 682.677 L994.839 682.677 L994.28 682.677 L993.72 682.677 L993.161 682.677 L992.602 682.677 L992.043 682.677 L991.483 682.677 L990.924 682.677 L990.365 682.677 L989.806 682.677 L989.246 682.677 L988.687 682.677 L988.128 682.677 L987.569 682.677 L987.009 682.677 L986.45 682.677 L985.891 682.677 L985.332 682.677 L984.772 682.677 L984.213 682.677 L983.654 682.677 L983.095 682.677 L982.535 682.677 L981.976 682.677 L981.417 682.677 L980.858 682.677 L980.298 682.677 L979.739 682.677 L979.18 682.677 L978.621 682.677 L978.061 682.677 L977.502 682.677 L976.943 682.677 L976.384 682.677 L975.824 682.677 L975.265 682.677 L974.706 682.677 L974.147 682.677 L973.587 682.677 L973.028 682.677 L972.469 682.677 L971.91 682.677 L971.35 682.677 L970.791 682.677 L970.232 682.677 L969.673 682.677 L969.113 682.677 L968.554 682.677 L967.995 682.677 L967.436 682.677 L966.876 682.677 L966.317 682.677 L965.758 682.677 L965.199 682.677 L964.639 682.677 L964.08 682.677 L963.521 682.677 L962.962 682.677 L962.402 682.677 L961.843 682.677 L961.284 682.677 L960.725 682.677 L960.165 682.677 L959.606 682.677 L959.047 682.677 L958.488 682.677 L957.928 682.677 L957.369 682.677 L956.81 682.677 L956.251 682.677 L955.691 682.677 L955.132 682.677 L954.573 682.677 L954.014 682.677 L953.454 682.677 L952.895 682.677 L952.336 682.677 L951.777 682.677 L951.217 682.677 L950.658 682.677 L950.099 682.677 L949.54 682.677 L948.98 682.677 L948.421 682.677 L947.862 682.677 L947.303 682.677 L946.743 682.677 L946.184 682.677 L945.625 682.677 L945.066 682.677 L944.506 682.677 L943.947 682.677 L943.388 682.677 L942.829 682.677 L942.269 682.677 L941.71 682.677 L941.151 682.677 L940.592 682.677 L940.032 682.677 L939.473 682.677 L938.914 682.677 L938.355 682.677 L937.795 682.677 L937.236 682.677 L936.677 682.677 L936.118 682.677 L935.558 682.677 L934.999 682.677 L934.44 682.677 L933.881 682.677 L933.321 682.677 L932.762 682.677 L932.203 682.677 L931.644 682.677 L931.084 682.677 L930.525 682.677 L929.966 682.677 L929.406 682.677 L928.847 682.677 L928.288 682.677 L927.729 682.677 L927.169 682.677 L926.61 682.677 L926.051 682.677 L925.492 682.677 L924.932 682.677 L924.373 682.677 L923.814 682.677 L923.255 682.677 L922.695 682.677 L922.136 682.677 L921.577 682.677 L921.018 682.677 L920.458 682.677 L919.899 682.677 L919.34 682.677 L918.781 682.677 L918.221 682.677 L917.662 682.677 L917.103 682.677 L916.544 682.677 L915.984 682.677 L915.425 682.677 L914.866 682.677 L914.307 682.677 L913.747 682.677 L913.188 682.677 L912.629 682.677 L912.07 682.677 L911.51 682.677 L910.951 682.677 L910.392 682.677 L909.833 682.677 L909.273 682.677 L908.714 682.677 L908.155 682.677 L907.596 682.677 L907.036 682.677 L906.477 682.677 L905.918 682.677 L905.359 682.677 L904.799 682.677 L904.24 682.677 L903.681 682.677 L903.122 682.677 L902.562 682.677 L902.003 682.677 L901.444 682.677 L900.885 682.677 L900.325 682.677 L899.766 682.677 L899.207 682.677 L898.648 682.677 L898.088 682.677 L897.529 682.677 L896.97 682.677 L896.411 682.677 L895.851 682.677 L895.292 682.677 L894.733 682.677 L894.174 682.677 L893.614 682.677 L893.055 682.677 L892.496 682.677 L891.937 682.677 L891.377 682.677 L890.818 682.677 L890.259 682.677 L889.7 682.677 L889.14 682.677 L888.581 682.677 L888.022 682.677 L887.463 682.677 L886.903 682.677 L886.344 682.677 L885.785 682.677 L885.226 682.677 L884.666 682.677 L884.107 682.677 L883.548 682.677 L882.989 682.677 L882.429 682.677 L881.87 682.677 L881.311 682.677 L880.752 682.677 L880.192 682.677 L879.633 682.677 L879.074 682.677 L878.515 682.677 L877.955 682.677 L877.396 682.677 L876.837 682.677 L876.278 682.677 L875.718 682.677 L875.159 682.677 L874.6 682.677 L874.041 682.677 L873.481 682.677 L872.922 682.677 L872.363 682.677 L871.804 682.677 L871.244 682.677 L870.685 682.677 L870.126 682.677 L869.567 682.677 L869.007 682.677 L868.448 682.677 L867.889 682.677 L867.33 682.677 L866.77 682.677 L866.211 682.677 L865.652 682.677 L865.093 682.677 L864.533 682.677 L863.974 682.677 L863.415 682.677 L862.856 682.677 L862.296 682.677 L861.737 682.677 L861.178 682.677 L860.619 682.677 L860.059 682.677 L859.5 682.677 L858.941 682.677 L858.382 682.677 L857.822 682.677 L857.263 682.677 L856.704 682.677 L856.145 682.677 L855.585 682.677 L855.026 682.677 L854.467 682.677 L853.908 682.677 L853.348 682.677 L852.789 682.677 L852.23 682.677 L851.671 682.677 L851.111 682.677 L850.552 682.677 L849.993 682.677 L849.434 682.677 L848.874 682.677 L848.315 682.677 L847.756 682.677 L847.197 682.677 L846.637 682.677 L846.078 682.677 L845.519 682.677 L844.96 682.677 L844.4 682.677 L843.841 682.677 L843.282 682.677 L842.723 682.677 L842.163 682.677 L841.604 682.677 L841.045 682.677 L840.486 682.677 L839.926 682.677 L839.367 682.677 L838.808 682.677 L838.249 682.677 L837.689 682.677 L837.13 682.677 L836.571 682.677 L836.012 682.677 L835.452 682.677 L834.893 682.677 L834.334 682.677 L833.775 682.677 L833.215 682.677 L832.656 682.677 L832.097 682.677 L831.538 682.677 L830.978 682.677 L830.419 682.677 L829.86 682.677 L829.301 682.677 L828.741 682.677 L828.182 682.677 L827.623 682.677 L827.064 682.677 L826.504 682.677 L825.945 682.677 L825.386 682.677 L824.827 682.677 L824.267 682.677 L823.708 682.677 L823.149 682.677 L822.59 682.677 L822.03 682.677 L821.471 682.677 L820.912 682.677 L820.353 682.677 L819.793 682.677 L819.234 682.677 L818.675 682.677 L818.116 682.677 L817.556 682.677 L816.997 682.677 L816.438 682.677 L815.879 682.677 L815.319 682.677 L814.76 682.677 L814.201 682.677 L813.642 682.677 L813.082 682.677 L812.523 682.677 L811.964 682.677 L811.405 682.677 L810.845 682.677 L810.286 682.677 L809.727 682.677 L809.168 682.677 L808.608 682.677 L808.049 682.677 L807.49 682.677 L806.931 682.677 L806.371 682.677 L805.812 682.677 L805.253 682.677 L804.693 682.677 L804.134 682.677 L803.575 682.677 L803.016 682.677 L802.456 682.677 L801.897 682.677 L801.338 682.677 L800.779 682.677 L800.219 682.677 L799.66 682.677 L799.101 682.677 L798.542 682.677 L797.982 682.677 L797.423 682.677 L796.864 682.677 L796.305 682.677 L795.745 682.677 L795.186 682.677 L794.627 682.677 L794.068 682.677 L793.508 682.677 L792.949 682.677 L792.39 682.677 L791.831 682.677 L791.271 682.677 L790.712 682.677 L790.153 682.677 L789.594 682.677 L789.034 682.677 L788.475 682.677 L787.916 682.677 L787.357 682.677 L786.797 682.677 L786.238 682.677 L785.679 682.677 L785.12 682.677 L784.56 682.677 L784.001 682.677 L783.442 682.677 L782.883 682.677 L782.323 682.677 L781.764 682.677 L781.205 682.677 L780.646 682.677 L780.086 682.677 L779.527 682.677 L778.968 682.677 L778.409 682.677 L777.849 682.677 L777.29 682.677 L776.731 682.677 L776.172 682.677 L775.612 682.677 L775.053 682.677 L774.494 682.677 L773.935 682.677 L773.375 682.677 L772.816 682.677 L772.257 682.677 L771.698 682.677 L771.138 682.677 L770.579 682.677 L770.02 682.677 L769.461 682.677 L768.901 682.677 L768.342 682.677 L767.783 682.677 L767.224 682.677 L766.664 682.677 L766.105 682.677 L765.546 682.677 L764.987 682.677 L764.427 682.677 L763.868 682.677 L763.309 682.677 L762.75 682.677 L762.19 682.677 L761.631 682.677 L761.072 682.677 L760.513 682.677 L759.953 682.677 L759.394 682.677 L758.835 682.677 L758.276 682.677 L757.716 682.677 L757.157 682.677 L756.598 682.677 L756.039 682.677 L755.479 682.677 L754.92 682.677 L754.361 682.677 L753.802 682.677 L753.242 682.677 L752.683 682.677 L752.124 682.677 L751.565 682.677 L751.005 682.677 L750.446 682.677 L749.887 682.677 L749.328 682.677 L748.768 682.677 L748.209 682.677 L747.65 682.677 L747.091 682.677 L746.531 682.677 L745.972 682.677 L745.413 682.677 L744.854 682.677 L744.294 682.677 L743.735 682.677 L743.176 682.677 L742.617 682.677 L742.057 682.677 L741.498 682.677 L740.939 682.677 L740.38 682.677 L739.82 682.677 L739.261 682.677 L738.702 682.677 L738.143 682.677 L737.583 682.677 L737.024 682.677 L736.465 682.677 L735.906 682.677 L735.346 682.677 L734.787 682.677 L734.228 682.677 L733.669 682.677 L733.109 682.677 L732.55 682.677 L731.991 682.677 L731.432 682.677 L730.872 682.677 L730.313 682.677 L729.754 682.677 L729.195 682.677 L728.635 682.677 L728.076 682.677 L727.517 682.677 L726.958 682.677 L726.398 682.677 L725.839 682.677 L725.28 682.677 L724.721 682.677 L724.161 682.677 L723.602 682.677 L723.043 682.677 L722.484 682.677 L721.924 682.677 L721.365 682.677 L720.806 682.677 L720.247 682.677  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip953)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.364 720.806,683.364 721.365,683.364 721.924,683.364 722.484,683.364 723.043,683.364 723.602,683.364 724.161,683.364 724.721,683.364 725.28,683.364 725.839,683.364 726.398,683.364 726.958,683.364 727.517,683.364 728.076,683.364 728.635,683.364 729.195,683.364 729.754,683.364 730.313,683.364 730.872,683.364 731.432,683.364 731.991,683.364 732.55,683.364 733.109,683.364 733.669,683.364 734.228,683.364 734.787,683.364 735.346,683.364 735.906,683.364 736.465,683.364 737.024,683.364 737.583,683.364 738.143,683.364 738.702,683.364 739.261,683.364 739.82,683.364 740.38,683.364 740.939,683.364 741.498,683.364 742.057,683.364 742.617,683.364 743.176,683.364 743.735,683.364 744.294,683.364 744.854,683.364 745.413,683.364 745.972,683.364 746.531,683.364 747.091,683.364 747.65,683.364 748.209,683.364 748.768,683.364 749.328,683.364 749.887,683.364 750.446,683.364 751.005,683.364 751.565,683.364 752.124,683.364 752.683,683.364 753.242,683.364 753.802,683.364 754.361,683.364 754.92,683.364 755.479,683.364 756.039,683.364 756.598,683.364 757.157,683.364 757.716,683.364 758.276,683.364 758.835,683.364 759.394,683.364 759.953,683.364 760.513,683.364 761.072,683.364 761.631,683.364 762.19,683.364 762.75,683.364 763.309,683.364 763.868,683.364 764.427,683.364 764.987,683.364 765.546,683.364 766.105,683.364 766.664,683.364 767.224,683.364 767.783,683.364 768.342,683.364 768.901,683.364 769.461,683.364 770.02,683.364 770.579,683.364 771.138,683.364 771.698,683.364 772.257,683.364 772.816,683.364 773.375,683.364 773.935,683.364 774.494,683.364 775.053,683.364 775.612,683.364 776.172,683.364 776.731,683.364 777.29,683.364 777.849,683.364 778.409,683.364 778.968,683.364 779.527,683.364 780.086,683.364 780.646,683.364 781.205,683.364 781.764,683.364 782.323,683.364 782.883,683.364 783.442,683.364 784.001,683.364 784.56,683.364 785.12,683.364 785.679,683.364 786.238,683.364 786.797,683.364 787.357,683.364 787.916,683.364 788.475,683.364 789.034,683.364 789.594,683.364 790.153,683.364 790.712,683.364 791.271,683.364 791.831,683.364 792.39,683.364 792.949,683.364 793.508,683.364 794.068,683.364 794.627,683.364 795.186,683.364 795.745,683.364 796.305,683.364 796.864,683.364 797.423,683.364 797.982,683.364 798.542,683.364 799.101,683.364 799.66,683.364 800.219,683.364 800.779,683.364 801.338,683.364 801.897,683.364 802.456,683.364 803.016,683.364 803.575,683.364 804.134,683.364 804.693,683.364 805.253,683.364 805.812,683.364 806.371,683.364 806.931,683.364 807.49,683.364 808.049,683.364 808.608,683.364 809.168,683.364 809.727,683.364 810.286,683.364 810.845,683.364 811.405,683.364 811.964,683.364 812.523,683.364 813.082,683.364 813.642,683.364 814.201,683.364 814.76,683.364 815.319,683.364 815.879,683.364 816.438,683.364 816.997,683.364 817.556,683.364 818.116,683.364 818.675,683.364 819.234,683.364 819.793,683.364 820.353,683.364 820.912,683.364 821.471,683.364 822.03,683.364 822.59,683.364 823.149,683.364 823.708,683.364 824.267,683.364 824.827,683.364 825.386,683.364 825.945,683.364 826.504,683.364 827.064,683.364 827.623,683.364 828.182,683.364 828.741,683.364 829.301,683.364 829.86,683.364 830.419,683.364 830.978,683.364 831.538,683.364 832.097,683.364 832.656,683.364 833.215,683.364 833.775,683.364 834.334,683.364 834.893,683.364 835.452,683.364 836.012,683.364 836.571,683.364 837.13,683.364 837.689,683.364 838.249,683.364 838.808,683.364 839.367,683.364 839.926,683.364 840.486,683.364 841.045,683.364 841.604,683.364 842.163,683.364 842.723,683.364 843.282,683.364 843.841,683.364 844.4,683.364 844.96,683.364 845.519,683.364 846.078,683.364 846.637,683.364 847.197,683.364 847.756,683.364 848.315,683.364 848.874,683.364 849.434,683.364 849.993,683.364 850.552,683.364 851.111,683.364 851.671,683.364 852.23,683.364 852.789,683.364 853.348,683.364 853.908,683.364 854.467,683.364 855.026,683.364 855.585,683.364 856.145,683.364 856.704,683.364 857.263,683.364 857.822,683.364 858.382,683.364 858.941,683.364 859.5,683.364 860.059,683.364 860.619,683.364 861.178,683.364 861.737,683.364 862.296,683.364 862.856,683.364 863.415,683.364 863.974,683.364 864.533,683.364 865.093,683.364 865.652,683.364 866.211,683.364 866.77,683.364 867.33,683.364 867.889,683.364 868.448,683.364 869.007,683.364 869.567,683.364 870.126,683.364 870.685,683.364 871.244,683.364 871.804,683.364 872.363,683.364 872.922,683.364 873.481,683.364 874.041,683.364 874.6,683.364 875.159,683.364 875.718,683.364 876.278,683.364 876.837,683.364 877.396,683.364 877.955,683.364 878.515,683.364 879.074,683.364 879.633,683.364 880.192,683.364 880.752,683.364 881.311,683.364 881.87,683.364 882.429,683.364 882.989,683.364 883.548,683.364 884.107,683.364 884.666,683.364 885.226,683.364 885.785,683.364 886.344,683.364 886.903,683.364 887.463,683.364 888.022,683.364 888.581,683.364 889.14,683.364 889.7,683.364 890.259,683.364 890.818,683.364 891.377,683.364 891.937,683.364 892.496,683.364 893.055,683.364 893.614,683.364 894.174,683.364 894.733,683.364 895.292,683.364 895.851,683.364 896.411,683.364 896.97,683.364 897.529,683.364 898.088,683.364 898.648,683.364 899.207,683.364 899.766,683.364 900.325,683.364 900.885,683.364 901.444,683.364 902.003,683.364 902.562,683.364 903.122,683.364 903.681,683.364 904.24,683.364 904.799,683.364 905.359,683.364 905.918,683.364 906.477,683.364 907.036,683.364 907.596,683.364 908.155,683.364 908.714,683.364 909.273,683.364 909.833,683.364 910.392,683.364 910.951,683.364 911.51,683.364 912.07,683.364 912.629,683.364 913.188,683.364 913.747,683.364 914.307,683.364 914.866,683.364 915.425,683.364 915.984,683.364 916.544,683.364 917.103,683.364 917.662,683.364 918.221,683.364 918.781,683.364 919.34,683.364 919.899,683.364 920.458,683.364 921.018,683.364 921.577,683.364 922.136,683.364 922.695,683.364 923.255,683.364 923.814,683.364 924.373,683.364 924.932,683.364 925.492,683.364 926.051,683.364 926.61,683.364 927.169,683.364 927.729,683.364 928.288,683.364 928.847,683.364 929.406,683.364 929.966,683.364 930.525,683.364 931.084,683.364 931.644,683.364 932.203,683.364 932.762,683.364 933.321,683.364 933.881,683.364 934.44,683.364 934.999,683.364 935.558,683.364 936.118,683.364 936.677,683.364 937.236,683.364 937.795,683.364 938.355,683.364 938.914,683.364 939.473,683.364 940.032,683.364 940.592,683.364 941.151,683.364 941.71,683.364 942.269,683.364 942.829,683.364 943.388,683.364 943.947,683.364 944.506,683.364 945.066,683.364 945.625,683.364 946.184,683.364 946.743,683.364 947.303,683.364 947.862,683.364 948.421,683.364 948.98,683.364 949.54,683.364 950.099,683.364 950.658,683.364 951.217,683.364 951.777,683.364 952.336,683.364 952.895,683.364 953.454,683.364 954.014,683.364 954.573,683.364 955.132,683.364 955.691,683.364 956.251,683.364 956.81,683.364 957.369,683.364 957.928,683.364 958.488,683.364 959.047,683.364 959.606,683.364 960.165,683.364 960.725,683.364 961.284,683.364 961.843,683.364 962.402,683.364 962.962,683.364 963.521,683.364 964.08,683.364 964.639,683.364 965.199,683.364 965.758,683.364 966.317,683.364 966.876,683.364 967.436,683.364 967.995,683.364 968.554,683.364 969.113,683.364 969.673,683.364 970.232,683.364 970.791,683.364 971.35,683.364 971.91,683.364 972.469,683.364 973.028,683.364 973.587,683.364 974.147,683.364 974.706,683.364 975.265,683.364 975.824,683.364 976.384,683.364 976.943,683.364 977.502,683.364 978.061,683.364 978.621,683.364 979.18,683.364 979.739,683.364 980.298,683.364 980.858,683.364 981.417,683.364 981.976,683.364 982.535,683.364 983.095,683.364 983.654,683.364 984.213,683.364 984.772,683.364 985.332,683.364 985.891,683.364 986.45,683.364 987.009,683.364 987.569,683.364 988.128,683.364 988.687,683.364 989.246,683.364 989.806,683.364 990.365,683.364 990.924,683.364 991.483,683.364 992.043,683.364 992.602,683.364 993.161,683.364 993.72,683.364 994.28,683.364 994.839,683.364 995.398,683.364 995.957,683.364 996.517,683.364 997.076,683.364 997.635,683.364 998.194,683.364 998.754,683.364 999.313,683.364 999.872,683.364 1000.43,683.364 1000.99,683.364 1001.55,683.364 1002.11,683.364 1002.67,683.364 1003.23,683.364 1003.79,683.364 1004.35,683.364 1004.91,683.364 1005.46,683.364 1006.02,683.364 1006.58,683.364 1007.14,683.364 1007.7,683.364 1008.26,683.364 1008.82,683.364 1009.38,683.364 1009.94,683.364 1010.5,683.364 1011.06,683.364 1011.62,683.364 1012.18,683.364 1012.73,683.364 1013.29,683.364 1013.85,683.364 1014.41,683.364 1014.97,683.364 1015.53,683.364 1016.09,683.364 1016.65,683.364 1017.21,683.364 1017.77,683.364 1018.33,683.364 1018.89,683.364 1019.45,683.364 1020.01,683.364 1020.56,683.364 1021.12,683.364 1021.68,683.364 1022.24,683.364 1022.8,683.364 1023.36,683.364 1023.92,683.364 1024.48,683.364 1025.04,683.364 1025.6,683.364 1026.16,683.364 1026.72,683.364 1027.28,683.364 1027.83,683.364 1028.39,683.364 1028.95,683.364 1029.51,683.364 1030.07,683.364 1030.63,683.364 1031.19,683.364 1031.75,683.364 1032.31,683.364 1032.87,683.364 1033.43,683.364 1033.99,683.364 1034.55,683.364 1035.1,683.364 1035.66,683.364 1036.22,683.364 1036.78,683.364 1037.34,683.364 1037.9,683.364 1038.46,683.364 1039.02,683.364 1039.58,683.364 1040.14,683.364 1040.7,683.364 1041.26,683.364 1041.82,683.364 1042.38,683.364 1042.93,683.364 1043.49,683.364 1044.05,683.364 1044.61,683.364 1045.17,683.364 1045.73,683.364 1046.29,683.364 1046.85,683.364 1047.41,683.364 1047.97,683.364 1048.53,683.364 1049.09,683.364 1049.65,683.364 1050.2,683.364 1050.76,683.364 1051.32,683.364 1051.88,683.364 1052.44,683.364 1053,683.364 1053.56,683.364 1054.12,683.364 1054.68,683.364 1055.24,683.364 1055.8,683.364 1056.36,683.364 1056.92,683.364 1057.48,683.364 1058.03,683.364 1058.59,683.364 1059.15,683.364 1059.71,683.364 1060.27,683.364 1060.83,683.364 1061.39,683.364 1061.95,683.364 1062.51,683.364 1063.07,683.364 1063.63,683.364 1064.19,683.364 1064.75,683.364 1065.3,683.364 1065.86,683.364 1066.42,683.364 1066.98,683.364 1067.54,683.364 1068.1,683.364 1068.66,683.364 1069.22,683.364 1069.78,683.364 1070.34,683.364 1070.9,683.364 1071.46,683.364 1072.02,683.364 1072.57,683.364 1073.13,683.364 1073.69,683.364 1074.25,683.364 1074.81,683.364 1075.37,683.364 1075.93,683.364 1076.49,683.364 1077.05,683.364 1077.61,683.364 1078.17,683.364 1078.73,683.364 1079.29,683.364 1079.85,683.364 1080.4,683.364 1080.96,683.364 1081.52,683.364 1082.08,683.364 1082.64,683.364 1083.2,683.364 1083.76,683.364 1084.32,683.364 1084.88,683.364 1085.44,683.364 1086,683.364 1086.56,683.364 1087.12,683.364 1087.67,683.364 1088.23,683.364 1088.79,683.364 1089.35,683.364 1089.91,683.364 1090.47,683.364 1091.03,683.364 1091.59,683.364 1092.15,683.364 1092.71,683.364 1093.27,683.364 1093.83,683.364 1094.39,683.364 1094.94,683.364 1095.5,683.364 1096.06,683.364 1096.62,683.364 1097.18,683.364 1097.74,683.364 1098.3,683.364 1098.86,683.364 1099.42,683.364 1099.98,683.364 1100.54,683.364 1101.1,683.364 1101.66,683.364 1102.22,683.364 1102.77,683.364 1103.33,683.364 1103.89,683.364 1104.45,683.364 1105.01,683.364 1105.57,683.364 1106.13,683.364 1106.69,683.364 1107.25,683.364 1107.81,683.364 1108.37,683.364 1108.93,683.364 1109.49,683.364 1110.04,683.364 1110.6,683.364 1111.16,683.364 1111.72,683.364 1112.28,683.364 1112.84,683.364 1113.4,683.364 1113.96,683.364 1114.52,683.364 1115.08,683.364 1115.64,683.364 1116.2,683.364 1116.76,683.364 1117.31,683.364 1117.87,683.364 1118.43,683.364 1118.99,683.364 1119.55,683.364 1120.11,683.364 1120.67,683.364 1121.23,683.364 1121.79,683.364 1122.35,683.364 1122.91,683.364 1123.47,683.364 1124.03,683.364 1124.59,683.364 1125.14,683.364 1125.7,683.364 1126.26,683.364 1126.82,683.364 1127.38,683.364 1127.94,683.364 1128.5,683.364 1129.06,683.364 1129.62,683.364 1130.18,683.364 1130.74,683.364 1131.3,683.364 1131.86,683.364 1132.41,683.364 1132.97,683.364 1133.53,683.364 1134.09,683.364 1134.65,683.364 1135.21,683.364 1135.77,683.364 1136.33,683.364 1136.89,683.364 1137.45,683.364 1138.01,683.364 1138.57,683.364 1139.13,683.364 1139.68,683.364 1140.24,683.364 1140.8,683.364 1141.36,683.364 1141.92,683.364 1142.48,683.364 1143.04,683.364 1143.6,683.364 1144.16,683.364 1144.72,683.364 1145.28,683.364 1145.84,683.364 1146.4,683.364 1146.96,683.364 1147.51,683.364 1148.07,683.364 1148.63,683.364 1149.19,683.364 1149.75,683.364 1150.31,683.364 1150.87,683.364 1151.43,683.364 1151.99,683.364 1152.55,683.364 1153.11,683.364 1153.67,683.364 1154.23,683.364 1154.78,683.364 1155.34,683.364 1155.9,683.364 1156.46,683.364 1157.02,683.364 1157.58,683.364 1158.14,683.364 1158.7,683.364 1159.26,683.364 1159.82,683.364 1160.38,683.364 1160.94,683.364 1161.5,683.364 1162.05,683.364 1162.61,683.364 1163.17,683.364 1163.73,683.364 1164.29,683.364 1164.85,683.364 1165.41,683.364 1165.97,683.364 1166.53,683.364 1167.09,683.364 1167.65,683.364 1168.21,683.364 1168.77,683.364 1169.33,683.364 1169.88,683.364 1170.44,683.364 1171,683.364 1171.56,683.364 1172.12,683.364 1172.68,683.364 1173.24,683.364 1173.8,683.364 1174.36,683.364 1174.92,683.364 1175.48,683.364 1176.04,683.364 1176.6,683.364 1177.15,683.364 1177.71,683.364 1178.27,683.364 1178.83,683.364 1179.39,683.364 1179.95,683.364 1180.51,683.364 1181.07,683.364 1181.63,683.364 1182.19,683.364 1182.75,683.364 1183.31,683.364 1183.87,683.364 1184.43,683.364 1184.98,683.364 1185.54,683.364 1186.1,683.364 1186.66,683.364 1187.22,683.364 1187.78,683.364 1188.34,683.364 1188.9,683.364 1189.46,683.364 1190.02,683.364 1190.58,683.364 1191.14,683.364 1191.7,683.364 1192.25,683.364 1192.81,683.364 1193.37,683.364 1193.93,683.364 1194.49,683.364 1195.05,683.364 1195.61,683.364 1196.17,683.364 1196.73,683.364 1197.29,683.364 1197.85,683.364 1198.41,683.364 1198.97,683.364 1199.52,683.364 1200.08,683.364 1200.64,683.364 1201.2,683.364 1201.76,683.364 1202.32,683.364 1202.88,683.364 1203.44,683.364 1204,683.364 1204.56,683.364 1205.12,683.364 1205.68,683.364 1206.24,683.364 1206.8,683.364 1207.35,683.364 1207.91,683.364 1208.47,683.364 1209.03,683.364 1209.59,683.364 1210.15,683.364 1210.71,683.364 1211.27,683.364 1211.83,683.364 1212.39,683.364 1212.95,683.364 1213.51,683.364 1214.07,683.364 1214.62,683.364 1215.18,683.364 1215.74,683.364 1216.3,683.364 1216.86,683.364 1217.42,683.364 1217.98,683.364 1218.54,683.364 1219.1,683.364 1219.66,683.364 1220.22,683.364 1220.78,683.364 1221.34,683.364 1221.89,683.364 1222.45,683.364 1223.01,683.364 1223.57,683.364 1224.13,683.364 1224.69,683.364 1225.25,683.364 1225.81,683.364 1226.37,683.364 1226.93,683.364 1227.49,683.364 1228.05,683.364 1228.61,683.364 1229.17,683.364 1229.72,683.364 1230.28,683.364 1230.84,683.364 1231.4,683.364 1231.96,683.364 1232.52,683.364 1233.08,683.364 1233.64,683.364 1234.2,683.364 1234.76,683.364 1235.32,683.364 1235.88,683.364 1236.44,683.364 1236.99,683.364 1237.55,683.364 1238.11,683.364 1238.67,683.364 1239.23,683.364 1239.79,683.364 1240.35,683.364 1240.91,683.364 1241.47,683.364 1242.03,683.364 1242.59,683.364 1243.15,683.364 1243.71,683.364 1244.26,683.364 1244.82,683.364 1245.38,683.364 1245.94,683.364 1246.5,683.364 1247.06,683.364 1247.62,683.364 1248.18,683.364 1248.74,683.364 1249.3,683.364 1249.86,683.364 1250.42,683.364 1250.98,683.364 1251.54,683.364 1252.09,683.364 1252.65,683.364 1253.21,683.364 1253.77,683.364 1254.33,683.364 1254.89,683.364 1255.45,683.364 1256.01,683.364 1256.57,683.364 1257.13,683.364 1257.69,683.364 1258.25,683.364 1258.81,683.364 1259.36,683.364 1259.92,683.364 1260.48,683.364 1261.04,683.364 1261.6,683.364 1262.16,683.364 1262.72,683.364 1263.28,683.364 1263.84,683.364 1264.4,683.364 1264.96,683.364 1265.52,683.364 1266.08,683.364 1266.63,683.364 1267.19,683.364 1267.75,683.364 1268.31,683.364 1268.87,683.364 1269.43,683.364 1269.99,683.364 1270.55,683.364 1271.11,683.364 1271.67,683.364 1272.23,683.364 1272.79,683.364 1273.35,683.364 1273.91,683.364 1274.46,683.364 1275.02,683.364 1275.58,683.364 1276.14,683.364 1276.7,683.364 1277.26,683.364 1277.82,683.364 1278.38,683.364 1278.94,683.364 1279.5,683.364 1280.06,683.364 1280.62,683.364 1281.18,683.364 1281.73,683.364 1282.29,683.364 1282.85,683.364 1283.41,683.364 1283.97,683.364 1284.53,683.364 1285.09,683.364 1285.65,683.364 1286.21,683.364 1286.77,683.364 1287.33,683.364 1287.89,683.364 1288.45,683.364 1289,683.364 1289.56,683.364 1290.12,683.364 1290.68,683.364 1291.24,683.364 1291.8,683.364 1292.36,683.364 1292.92,683.364 1293.48,683.364 1294.04,683.364 1294.6,683.364 1295.16,683.364 1295.72,683.364 1296.28,683.364 1296.83,683.364 1297.39,683.364 1297.95,683.364 1298.51,683.364 1299.07,683.364 1299.63,683.364 1300.19,683.364 1300.75,683.364 1301.31,683.364 1301.87,683.364 1302.43,683.364 1302.99,683.364 1303.55,683.364 1304.1,683.364 1304.66,683.364 1305.22,683.364 1305.78,683.364 1306.34,683.364 1306.9,683.364 1307.46,683.364 1308.02,683.364 1308.58,683.364 1309.14,683.364 1309.7,683.364 1310.26,683.364 1310.82,683.364 1311.38,683.364 1311.93,683.364 1312.49,683.364 1313.05,683.364 1313.61,683.364 1314.17,683.364 1314.73,683.364 1315.29,683.364 1315.85,683.364 1316.41,683.364 1316.97,683.364 1317.53,683.364 1318.09,683.364 1318.65,683.364 1319.2,683.364 1319.76,683.364 1320.32,683.364 1320.88,683.364 1321.44,683.364 1322,683.364 1322.56,683.364 1323.12,683.364 1323.68,683.364 1324.24,683.364 1324.8,683.364 1325.36,683.364 1325.92,683.364 1326.47,683.364 1327.03,683.364 1327.59,683.364 1328.15,683.364 1328.71,683.364 1329.27,683.364 1329.83,683.364 1330.39,683.364 1330.95,683.364 1331.51,683.364 1332.07,683.364 1332.63,683.364 1333.19,683.364 1333.75,683.364 1334.3,683.364 1334.86,683.364 1335.42,683.364 1335.98,683.364 1336.54,683.364 1337.1,683.364 1337.66,683.364 1338.22,683.364 1338.78,683.364 1339.34,683.364 1339.9,683.364 1340.46,683.364 1341.02,683.364 1341.57,683.364 1342.13,683.364 1342.69,683.364 1343.25,683.364 1343.81,683.364 1344.37,683.364 1344.93,683.364 1345.49,683.364 1346.05,683.364 1346.61,683.364 1347.17,683.364 1347.73,683.364 1348.29,683.364 1348.84,683.364 1349.4,683.364 1349.96,683.364 1350.52,683.364 1351.08,683.364 1351.64,683.364 1352.2,683.364 1352.76,683.364 1353.32,683.364 1353.88,683.364 1354.44,683.364 1355,683.364 1355.56,683.364 1356.12,683.364 1356.67,683.364 1357.23,683.364 1357.79,683.364 1358.35,683.364 1358.91,683.364 1359.47,683.364 1360.03,683.364 1360.59,683.364 1361.15,683.364 1361.71,683.364 1362.27,683.364 1362.83,683.364 1363.39,683.364 1363.94,683.364 1364.5,683.364 1365.06,683.364 1365.62,683.364 1366.18,683.364 1366.74,683.364 1367.3,683.364 1367.86,683.364 1368.42,683.364 1368.98,683.364 1369.54,683.364 1370.1,683.364 1370.66,683.364 1371.21,683.364 1371.77,683.364 1372.33,683.364 1372.89,683.364 1373.45,683.364 1374.01,683.364 1374.57,683.364 1375.13,683.364 1375.69,683.364 1376.25,683.364 1376.81,683.364 1377.37,683.364 1377.93,683.364 1378.49,683.364 1379.04,683.364 1379.6,683.364 1380.16,683.364 1380.72,683.364 1381.28,683.364 1381.84,683.364 1382.4,683.364 1382.96,683.364 1383.52,683.364 1384.08,683.364 1384.64,683.364 1385.2,683.364 1385.76,683.364 1386.31,683.364 1386.87,683.364 1387.43,683.364 1387.99,683.364 1388.55,683.364 1389.11,683.364 1389.67,683.364 1390.23,683.364 1390.79,683.364 1391.35,683.364 1391.91,683.364 1392.47,683.364 1393.03,683.364 1393.58,683.364 1394.14,683.364 1394.7,683.364 1395.26,683.364 1395.82,683.364 1396.38,683.364 1396.94,683.364 1397.5,683.364 1398.06,683.364 1398.62,683.364 1399.18,683.364 1399.74,683.364 1400.3,683.364 1400.86,683.364 1401.41,683.364 1401.97,683.364 1402.53,683.364 1403.09,683.364 1403.65,683.364 1404.21,683.364 1404.77,683.364 1405.33,683.364 1405.89,683.364 1406.45,683.364 1407.01,683.364 1407.57,683.364 1408.13,683.364 1408.68,683.364 1409.24,683.364 1409.8,683.364 1410.36,683.364 1410.92,683.364 1411.48,683.364 1412.04,683.364 1412.6,683.364 1413.16,683.364 1413.72,683.364 1414.28,683.364 1414.84,683.364 1415.4,683.364 1415.95,683.364 1416.51,683.364 1417.07,683.364 1417.63,683.364 1418.19,683.364 1418.75,683.364 1419.31,683.364 1419.87,683.364 1420.43,683.364 1420.99,683.364 1421.55,683.364 1422.11,683.364 1422.67,683.364 1423.23,683.364 1423.78,683.364 1424.34,683.364 1424.9,683.364 1425.46,683.364 1426.02,683.364 1426.58,683.364 1427.14,683.364 1427.7,683.364 1428.26,683.364 1428.82,683.364 1429.38,683.364 1429.94,683.364 1430.5,683.364 1431.05,683.364 1431.61,683.364 1432.17,683.364 1432.73,683.364 1433.29,683.364 1433.85,683.364 1434.41,683.364 1434.97,683.364 1435.53,683.364 1436.09,683.364 1436.65,683.364 1437.21,683.364 1437.77,683.364 1438.33,683.364 1438.88,683.364 1439.44,683.364 1440,683.364 1440.56,683.364 1441.12,683.364 1441.68,683.364 1442.24,683.364 1442.8,683.364 1443.36,683.364 1443.92,683.364 1444.48,683.364 1445.04,683.364 1445.6,683.364 1446.15,683.364 1446.71,683.364 1447.27,683.364 1447.83,683.364 1448.39,683.364 1448.95,683.364 1449.51,683.364 1450.07,683.364 1450.63,683.364 1451.19,683.364 1451.75,683.364 1452.31,683.364 1452.87,683.364 1453.42,683.364 1453.98,683.364 1454.54,683.364 1455.1,683.364 1455.66,683.364 1456.22,683.364 1456.78,683.364 1457.34,683.364 1457.9,683.364 1458.46,683.364 1459.02,683.364 1459.58,683.364 1460.14,683.364 1460.7,683.364 1461.25,683.364 1461.81,683.364 1462.37,683.364 1462.93,683.364 1463.49,683.364 1464.05,683.364 1464.61,683.364 1465.17,683.364 1465.73,683.364 1466.29,683.364 1466.85,683.364 1467.41,683.364 1467.97,683.364 1468.52,683.364 1469.08,683.364 1469.64,683.364 1470.2,683.364 1470.76,683.364 1471.32,683.364 1471.88,683.364 1472.44,683.364 1473,683.364 1473.56,683.364 1474.12,683.364 1474.68,683.364 1475.24,683.364 1475.79,683.364 1476.35,683.364 1476.91,683.364 1477.47,683.364 1478.03,683.364 1478.59,683.364 1479.15,683.364 1479.71,683.364 1480.27,683.364 1480.83,683.364 1481.39,683.364 1481.95,683.364 1482.51,683.364 1483.07,683.364 1483.62,683.364 1484.18,683.364 1484.74,683.364 1485.3,683.364 1485.86,683.364 1486.42,683.364 1486.98,683.364 1487.54,683.364 1488.1,683.364 1488.66,683.364 1489.22,683.364 1489.78,683.364 1490.34,683.364 1490.89,683.364 1491.45,683.364 1492.01,683.364 1492.57,683.364 1493.13,683.364 1493.69,683.364 1494.25,683.364 1494.81,683.364 1495.37,683.364 1495.93,683.364 1496.49,683.364 1497.05,683.364 1497.61,683.364 1498.16,683.364 1498.72,683.364 1499.28,683.364 1499.84,683.364 1500.4,683.364 1500.96,683.364 1501.52,683.364 1502.08,683.364 1502.64,683.364 1503.2,683.364 1503.76,683.364 1504.32,683.364 1504.88,683.364 1505.44,683.364 1505.99,683.364 1506.55,683.364 1507.11,683.364 1507.67,683.364 1508.23,683.364 1508.79,683.364 1509.35,683.364 1509.91,683.364 1510.47,683.364 1511.03,683.364 1511.59,683.364 1512.15,683.364 1512.71,683.364 1513.26,683.364 1513.82,683.364 1514.38,683.364 1514.94,683.364 1515.5,683.364 1516.06,683.364 1516.62,683.364 1517.18,683.364 1517.74,683.364 1518.3,683.364 1518.86,683.364 1519.42,683.364 1519.98,683.364 1520.53,683.364 1521.09,683.364 1521.65,683.364 1522.21,683.364 1522.77,683.364 1523.33,683.364 1523.89,683.364 1524.45,683.364 1525.01,683.364 1525.57,683.364 1526.13,683.364 1526.69,683.364 1527.25,683.364 1527.81,683.364 1528.36,683.364 1528.92,683.364 1529.48,683.364 1530.04,683.364 1530.6,683.364 1531.16,683.364 1531.72,683.364 1532.28,683.364 1532.84,683.364 1533.4,683.364 1533.96,683.364 1534.52,683.364 1535.08,683.364 1535.63,683.364 1536.19,683.364 1536.75,683.364 1537.31,683.364 1537.87,683.364 1538.43,683.364 1538.99,683.364 1539.55,683.364 1540.11,683.364 1540.67,683.364 1541.23,683.364 1541.79,683.364 1542.35,683.364 1542.9,683.364 1543.46,683.364 1544.02,683.364 1544.58,683.364 1545.14,683.364 1545.7,683.364 1546.26,683.364 1546.82,683.364 1547.38,683.364 1547.94,683.364 1548.5,683.364 1549.06,683.364 1549.62,683.364 1550.18,683.364 1550.73,683.364 1551.29,683.364 1551.85,683.364 1552.41,683.364 1552.97,683.364 1553.53,683.364 1554.09,683.364 1554.65,683.364 1555.21,683.364 1555.77,683.364 1556.33,683.364 1556.89,683.364 1557.45,683.364 1558,683.364 1558.56,683.364 1559.12,683.364 1559.68,683.364 1560.24,683.364 1560.8,683.364 1561.36,683.364 1561.92,683.364 1562.48,683.364 1563.04,683.364 1563.6,683.364 1564.16,683.364 1564.72,683.364 1565.28,683.364 1565.83,683.364 1566.39,683.364 1566.95,683.364 1567.51,683.364 1568.07,683.364 1568.63,683.364 1569.19,683.364 1569.75,683.364 1570.31,683.364 1570.87,683.364 1571.43,683.364 1571.99,683.364 1572.55,683.364 1573.1,683.364 1573.66,683.364 1574.22,683.364 1574.78,683.364 1575.34,683.364 1575.9,683.364 1576.46,683.364 1577.02,683.364 1577.58,683.364 1578.14,683.364 1578.7,683.364 1579.26,683.364 1579.82,683.364 1580.37,683.364 1580.93,683.364 1581.49,683.364 1582.05,683.364 1582.61,683.364 1583.17,683.364 1583.73,683.364 1584.29,683.364 1584.85,683.364 1585.41,683.364 1585.97,683.364 1586.53,683.364 1587.09,683.364 1587.65,683.364 1588.2,683.364 1588.76,683.364 1589.32,683.364 1589.88,683.364 1590.44,683.364 1591,683.364 1591.56,683.364 1592.12,683.364 1592.68,683.364 1593.24,683.364 1593.8,683.364 1594.36,683.364 1594.92,683.364 1595.47,683.364 1596.03,683.364 1596.59,683.364 1597.15,683.364 1597.71,683.364 1598.27,683.364 1598.83,683.364 1599.39,683.364 1599.95,683.364 1600.51,683.364 1601.07,683.364 1601.63,683.364 1602.19,683.364 1602.74,683.364 1603.3,683.364 1603.86,683.364 1604.42,683.364 1604.98,683.364 1605.54,683.364 1606.1,683.364 1606.66,683.364 1607.22,683.364 1607.78,683.364 1608.34,683.364 1608.9,683.364 1609.46,683.364 1610.02,683.364 1610.57,683.364 1611.13,683.364 1611.69,683.364 1612.25,683.364 1612.81,683.364 1613.37,683.364 1613.93,683.364 1614.49,683.364 1615.05,683.364 1615.61,683.364 1616.17,683.364 1616.73,683.364 1617.29,683.364 1617.84,683.364 1618.4,683.364 1618.96,683.364 1619.52,683.364 1620.08,683.364 1620.64,683.364 1621.2,683.364 1621.76,683.364 1622.32,683.364 1622.88,683.364 1623.44,683.364 1624,683.364 1624.56,683.364 1625.11,683.364 1625.67,683.364 1626.23,683.364 1626.79,683.364 1627.35,683.364 1627.91,683.364 1628.47,683.364 1629.03,683.364 1629.59,683.364 1630.15,683.364 1630.71,683.364 1631.27,683.364 1631.83,683.364 1632.39,683.364 1632.94,683.364 1633.5,683.364 1634.06,683.364 1634.62,683.364 1635.18,683.364 1635.74,683.364 1636.3,683.364 1636.86,683.364 1637.42,683.364 1637.98,683.364 1638.54,683.364 1639.1,683.364 1639.66,683.364 1640.21,683.364 1640.77,683.364 1641.33,683.364 1641.89,683.364 1642.45,683.364 1643.01,683.364 1643.57,683.364 1644.13,683.364 1644.69,683.364 1645.25,683.364 1645.81,683.364 1646.37,683.364 1646.93,683.364 1647.48,683.364 1648.04,683.364 1648.6,683.364 1649.16,683.364 1649.72,683.364 1650.28,683.364 1650.84,683.364 1651.4,683.364 1651.96,683.364 1652.52,683.364 1653.08,683.364 1653.64,683.364 1654.2,683.364 1654.76,683.364 1655.31,683.364 1655.87,683.364 1656.43,683.364 1656.99,683.364 1657.55,683.364 1658.11,683.364 1658.67,683.364 1659.23,683.364 1659.79,683.364 1660.35,683.364 1660.91,683.364 1661.47,683.364 1662.03,683.364 1662.58,683.364 1663.14,683.364 1663.7,683.364 1664.26,683.364 1664.82,683.364 1665.38,683.364 1665.94,683.364 1666.5,683.364 1667.06,683.364 1667.62,683.364 1668.18,683.364 1668.74,683.364 1669.3,683.364 1669.85,683.364 1670.41,683.364 1670.97,683.364 1671.53,683.364 1672.09,683.364 1672.65,683.364 1673.21,683.364 1673.77,683.364 1674.33,683.364 1674.89,683.364 1675.45,683.364 1676.01,683.364 1676.57,683.364 1677.13,683.364 1677.68,683.364 1678.24,683.364 1678.8,683.364 1679.36,683.364 1679.92,683.364 1680.48,683.364 1681.04,683.364 1681.6,683.364 1682.16,683.364 1682.72,683.364 1683.28,683.364 1683.84,683.364 1684.4,683.364 1684.95,683.364 1685.51,683.364 1686.07,683.364 1686.63,683.364 1687.19,683.364 1687.75,683.364 1688.31,683.364 1688.87,683.364 1689.43,683.364 1689.99,683.364 1690.55,683.364 1691.11,683.364 1691.67,683.364 1692.23,683.364 1692.78,683.364 1693.34,683.364 1693.9,683.364 1694.46,683.364 1695.02,683.364 1695.58,683.364 1696.14,683.364 1696.7,683.364 1697.26,683.364 1697.82,683.364 1698.38,683.364 1698.94,683.364 1699.5,683.364 1700.05,683.364 1700.61,683.364 1701.17,683.364 1701.73,683.364 1702.29,683.364 1702.85,683.364 1703.41,683.364 1703.97,683.364 1704.53,683.364 1705.09,683.364 1705.65,683.364 1706.21,683.364 1706.77,683.364 1707.32,683.364 1707.88,683.364 1708.44,683.364 1709,683.364 1709.56,683.364 1710.12,683.364 1710.68,683.364 1711.24,683.364 1711.8,683.364 1712.36,683.364 1712.92,683.364 1713.48,683.364 1714.04,683.364 1714.6,683.364 1715.15,683.364 1715.71,683.364 1716.27,683.364 1716.83,683.364 1717.39,683.364 1717.95,683.364 1718.51,683.364 1719.07,683.364 1719.63,683.364 1720.19,683.364 1720.75,683.364 1721.31,683.364 1721.87,683.364 1722.42,683.364 1722.98,683.364 1723.54,683.364 1724.1,683.364 1724.66,683.364 1725.22,683.364 1725.78,683.364 1726.34,683.364 1726.9,683.364 1727.46,683.364 1728.02,683.364 1728.58,683.364 1729.14,683.364 1729.69,683.364 1730.25,683.364 1730.81,683.364 1731.37,683.364 1731.93,683.364 1732.49,683.364 1733.05,683.364 1733.61,683.364 1734.17,683.364 1734.73,683.364 1735.29,683.364 1735.85,683.364 1736.41,683.364 1736.97,683.364 1737.52,683.364 1738.08,683.364 1738.64,683.364 1739.2,683.364 1739.76,683.364 1740.32,683.364 1740.88,683.364 1741.44,683.364 1742,683.364 1742.56,683.364 1743.12,683.364 1743.68,683.364 1744.24,683.364 1744.79,683.364 1745.35,683.364 1745.91,683.364 1746.47,683.364 1747.03,683.364 1747.59,683.364 1748.15,683.364 1748.71,683.364 1749.27,683.364 1749.83,683.364 1750.39,683.364 1750.95,683.364 1751.51,683.364 1752.06,683.364 1752.62,683.364 1753.18,683.364 1753.74,683.364 1754.3,683.364 1754.86,683.364 1755.42,683.364 1755.98,683.364 1756.54,683.364 1757.1,683.364 1757.66,683.364 1758.22,683.364 1758.78,683.364 1759.34,683.364 1759.89,683.364 1760.45,683.364 1761.01,683.364 1761.57,683.364 1762.13,683.364 1762.69,683.364 1763.25,683.364 1763.81,683.364 1764.37,683.364 1764.93,683.364 1765.49,683.364 1766.05,683.364 1766.61,683.364 1767.16,683.364 1767.72,683.364 1768.28,683.364 1768.84,683.364 1769.4,683.364 1769.96,683.364 1770.52,683.364 1771.08,683.364 1771.64,683.364 1772.2,683.364 1772.76,683.364 1773.32,683.364 1773.88,683.364 1774.43,683.364 1774.99,683.364 1775.55,683.364 1776.11,683.364 1776.67,683.364 1777.23,683.364 1777.79,683.364 1778.35,683.364 1778.91,683.364 1779.47,683.364 1780.03,683.364 1780.59,683.364 1781.15,683.364 1781.71,683.364 1782.26,683.364 1782.82,683.364 1783.38,683.364 1783.94,683.364 1784.5,683.364 1785.06,683.364 1785.62,683.364 1786.18,683.364 1786.74,683.364 1787.3,683.364 1787.86,683.364 1788.42,683.364 1788.98,683.364 1789.53,683.364 1790.09,683.364 1790.65,683.364 1791.21,683.364 1791.77,683.364 1792.33,683.364 1792.89,683.364 1793.45,683.364 1794.01,683.364 1794.57,683.364 1795.13,683.364 1795.69,683.364 1796.25,683.364 1796.8,683.364 1797.36,683.364 1797.92,683.364 1798.48,683.364 1799.04,683.364 1799.6,683.364 1800.16,683.364 1800.72,683.364 1801.28,683.364 1801.84,683.364 1802.4,683.364 1802.96,683.364 1803.52,683.364 1804.08,683.364 1804.63,683.364 1805.19,683.364 1805.75,683.364 1806.31,683.364 1806.87,683.364 1807.43,683.364 1807.99,683.364 1808.55,683.364 1809.11,683.364 1809.67,683.364 1810.23,683.364 1810.79,683.364 1811.35,683.364 1811.9,683.364 1812.46,683.364 1813.02,683.364 1813.58,683.364 1814.14,683.364 1814.7,683.364 1815.26,683.364 1815.82,683.364 1816.38,683.364 1816.94,683.364 1817.5,683.364 1818.06,683.364 1818.62,683.364 1819.18,683.364 1819.73,683.364 1820.29,683.364 1820.85,683.364 1821.41,683.364 1821.97,683.364 1822.53,683.364 1823.09,683.364 1823.65,683.364 1824.21,683.364 1824.77,683.364 1825.33,683.364 1825.89,683.364 1826.45,683.364 1827,683.364 1827.56,683.364 1828.12,683.364 1828.68,683.364 1829.24,683.364 1829.8,683.364 1830.36,683.364 1830.92,683.364 1831.48,683.364 1832.04,683.364 1832.6,683.364 1833.16,683.364 1833.72,683.364 1834.27,683.364 1834.83,683.364 1835.39,683.364 1835.95,683.364 1836.51,683.364 1837.07,683.364 1837.63,683.364 1838.19,683.364 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.034848388368337 ± 0.019746100127070995\nProjected Energy: -4.013974917761051 ± (0.003617753346927266, 0.003462159763588879)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.476887</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3836e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.237e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.187e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.233e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.685e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.895e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133495\n -0.7590191922770924\n  0.1358418221962232\n  0.15789998694607554\n  0.8767114411781307\n  1.530592997097334\n  1.5835732611867321\n  3.072870330325869\n  3.125672653951833\n  4.862107221562175\n  6.260694850380599\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products are defined with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of FCIQMC as observable operators, e.g. for defining correlation functions. For concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nInterfaces.dot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
