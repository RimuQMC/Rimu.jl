var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21710528297336662 ± 0.0014534262201396538\n   G2(1) = 0.9169632409214103 ± 0.0007896709188992662\n   G2(2) = 0.9810383449247924 ± 0.0006955682698332015\n   G2(3) = 0.9868915453342281 ± 0.0010655438656408643\n   G2(4) = 0.9810383449247924 ± 0.0006955682698332015\n   G2(5) = 0.9169632409214103 ± 0.0007896709188992662\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.088869016131947 ± 0.13537647097162891\n   Replica 2: -4.071412062563461 ± 0.13309725438384784\n   Replica 3: -4.047001239798966 ± 0.12508893056190035\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip640\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip641\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip642\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.84 2211.02,1261.84 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.67 2211.02,1004.67 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.492 2211.02,747.492 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.316 2211.02,490.316 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.14 2211.02,233.14 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.84 423.181,1261.84 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.67 423.181,1004.67 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.492 423.181,747.492 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.316 423.181,490.316 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.14 423.181,233.14 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M356.339 1247.64 Q352.728 1247.64 350.899 1251.21 Q349.094 1254.75 349.094 1261.88 Q349.094 1268.99 350.899 1272.55 Q352.728 1276.09 356.339 1276.09 Q359.973 1276.09 361.779 1272.55 Q363.608 1268.99 363.608 1261.88 Q363.608 1254.75 361.779 1251.21 Q359.973 1247.64 356.339 1247.64 M356.339 1243.94 Q362.149 1243.94 365.205 1248.55 Q368.284 1253.13 368.284 1261.88 Q368.284 1270.61 365.205 1275.21 Q362.149 1279.8 356.339 1279.8 Q350.529 1279.8 347.45 1275.21 Q344.395 1270.61 344.395 1261.88 Q344.395 1253.13 347.45 1248.55 Q350.529 1243.94 356.339 1243.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M290.043 1018.01 L306.363 1018.01 L306.363 1021.95 L284.418 1021.95 L284.418 1018.01 Q287.08 1015.26 291.664 1010.63 Q296.27 1005.98 297.451 1004.63 Q299.696 1002.11 300.576 1000.37 Q301.478 998.615 301.478 996.925 Q301.478 994.171 299.534 992.435 Q297.613 990.698 294.511 990.698 Q292.312 990.698 289.858 991.462 Q287.427 992.226 284.65 993.777 L284.65 989.055 Q287.474 987.921 289.927 987.342 Q292.381 986.763 294.418 986.763 Q299.789 986.763 302.983 989.448 Q306.177 992.134 306.177 996.624 Q306.177 998.754 305.367 1000.68 Q304.58 1002.57 302.474 1005.17 Q301.895 1005.84 298.793 1009.05 Q295.691 1012.25 290.043 1018.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M316.224 987.388 L334.58 987.388 L334.58 991.323 L320.506 991.323 L320.506 999.796 Q321.524 999.448 322.543 999.286 Q323.562 999.101 324.58 999.101 Q330.367 999.101 333.747 1002.27 Q337.126 1005.44 337.126 1010.86 Q337.126 1016.44 333.654 1019.54 Q330.182 1022.62 323.862 1022.62 Q321.687 1022.62 319.418 1022.25 Q317.173 1021.88 314.765 1021.14 L314.765 1016.44 Q316.849 1017.57 319.071 1018.13 Q321.293 1018.68 323.77 1018.68 Q327.774 1018.68 330.112 1016.58 Q332.45 1014.47 332.45 1010.86 Q332.45 1007.25 330.112 1005.14 Q327.774 1003.04 323.77 1003.04 Q321.895 1003.04 320.02 1003.45 Q318.168 1003.87 316.224 1004.75 L316.224 987.388 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M356.339 990.467 Q352.728 990.467 350.899 994.032 Q349.094 997.573 349.094 1004.7 Q349.094 1011.81 350.899 1015.37 Q352.728 1018.92 356.339 1018.92 Q359.973 1018.92 361.779 1015.37 Q363.608 1011.81 363.608 1004.7 Q363.608 997.573 361.779 994.032 Q359.973 990.467 356.339 990.467 M356.339 986.763 Q362.149 986.763 365.205 991.37 Q368.284 995.953 368.284 1004.7 Q368.284 1013.43 365.205 1018.04 Q362.149 1022.62 356.339 1022.62 Q350.529 1022.62 347.45 1018.04 Q344.395 1013.43 344.395 1004.7 Q344.395 995.953 347.45 991.37 Q350.529 986.763 356.339 986.763 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M286.062 730.212 L304.418 730.212 L304.418 734.147 L290.344 734.147 L290.344 742.62 Q291.363 742.272 292.381 742.11 Q293.4 741.925 294.418 741.925 Q300.205 741.925 303.585 745.096 Q306.964 748.268 306.964 753.684 Q306.964 759.263 303.492 762.365 Q300.02 765.444 293.701 765.444 Q291.525 765.444 289.256 765.073 Q287.011 764.703 284.603 763.962 L284.603 759.263 Q286.687 760.397 288.909 760.953 Q291.131 761.508 293.608 761.508 Q297.613 761.508 299.951 759.402 Q302.288 757.295 302.288 753.684 Q302.288 750.073 299.951 747.967 Q297.613 745.86 293.608 745.86 Q291.733 745.86 289.858 746.277 Q288.006 746.694 286.062 747.573 L286.062 730.212 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M326.177 733.291 Q322.566 733.291 320.737 736.856 Q318.932 740.397 318.932 747.527 Q318.932 754.633 320.737 758.198 Q322.566 761.74 326.177 761.74 Q329.811 761.74 331.617 758.198 Q333.446 754.633 333.446 747.527 Q333.446 740.397 331.617 736.856 Q329.811 733.291 326.177 733.291 M326.177 729.587 Q331.987 729.587 335.043 734.194 Q338.122 738.777 338.122 747.527 Q338.122 756.254 335.043 760.86 Q331.987 765.444 326.177 765.444 Q320.367 765.444 317.288 760.86 Q314.233 756.254 314.233 747.527 Q314.233 738.777 317.288 734.194 Q320.367 729.587 326.177 729.587 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M356.339 733.291 Q352.728 733.291 350.899 736.856 Q349.094 740.397 349.094 747.527 Q349.094 754.633 350.899 758.198 Q352.728 761.74 356.339 761.74 Q359.973 761.74 361.779 758.198 Q363.608 754.633 363.608 747.527 Q363.608 740.397 361.779 736.856 Q359.973 733.291 356.339 733.291 M356.339 729.587 Q362.149 729.587 365.205 734.194 Q368.284 738.777 368.284 747.527 Q368.284 756.254 365.205 760.86 Q362.149 765.444 356.339 765.444 Q350.529 765.444 347.45 760.86 Q344.395 756.254 344.395 747.527 Q344.395 738.777 347.45 734.194 Q350.529 729.587 356.339 729.587 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M284.835 473.036 L307.057 473.036 L307.057 475.027 L294.511 507.596 L289.627 507.596 L301.432 476.971 L284.835 476.971 L284.835 473.036 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M316.224 473.036 L334.58 473.036 L334.58 476.971 L320.506 476.971 L320.506 485.444 Q321.524 485.096 322.543 484.934 Q323.562 484.749 324.58 484.749 Q330.367 484.749 333.747 487.92 Q337.126 491.092 337.126 496.508 Q337.126 502.087 333.654 505.189 Q330.182 508.267 323.862 508.267 Q321.687 508.267 319.418 507.897 Q317.173 507.527 314.765 506.786 L314.765 502.087 Q316.849 503.221 319.071 503.777 Q321.293 504.332 323.77 504.332 Q327.774 504.332 330.112 502.226 Q332.45 500.119 332.45 496.508 Q332.45 492.897 330.112 490.791 Q327.774 488.684 323.77 488.684 Q321.895 488.684 320.02 489.101 Q318.168 489.518 316.224 490.397 L316.224 473.036 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M356.339 476.115 Q352.728 476.115 350.899 479.68 Q349.094 483.221 349.094 490.351 Q349.094 497.457 350.899 501.022 Q352.728 504.564 356.339 504.564 Q359.973 504.564 361.779 501.022 Q363.608 497.457 363.608 490.351 Q363.608 483.221 361.779 479.68 Q359.973 476.115 356.339 476.115 M356.339 472.411 Q362.149 472.411 365.205 477.018 Q368.284 481.601 368.284 490.351 Q368.284 499.078 365.205 503.684 Q362.149 508.267 356.339 508.267 Q350.529 508.267 347.45 503.684 Q344.395 499.078 344.395 490.351 Q344.395 481.601 347.45 477.018 Q350.529 472.411 356.339 472.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M256.664 246.485 L264.303 246.485 L264.303 220.119 L255.992 221.786 L255.992 217.527 L264.256 215.86 L268.932 215.86 L268.932 246.485 L276.571 246.485 L276.571 250.42 L256.664 250.42 L256.664 246.485 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M296.015 218.939 Q292.404 218.939 290.576 222.504 Q288.77 226.045 288.77 233.175 Q288.77 240.281 290.576 243.846 Q292.404 247.388 296.015 247.388 Q299.65 247.388 301.455 243.846 Q303.284 240.281 303.284 233.175 Q303.284 226.045 301.455 222.504 Q299.65 218.939 296.015 218.939 M296.015 215.235 Q301.826 215.235 304.881 219.842 Q307.96 224.425 307.96 233.175 Q307.96 241.902 304.881 246.508 Q301.826 251.091 296.015 251.091 Q290.205 251.091 287.127 246.508 Q284.071 241.902 284.071 233.175 Q284.071 224.425 287.127 219.842 Q290.205 215.235 296.015 215.235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M326.177 218.939 Q322.566 218.939 320.737 222.504 Q318.932 226.045 318.932 233.175 Q318.932 240.281 320.737 243.846 Q322.566 247.388 326.177 247.388 Q329.811 247.388 331.617 243.846 Q333.446 240.281 333.446 233.175 Q333.446 226.045 331.617 222.504 Q329.811 218.939 326.177 218.939 M326.177 215.235 Q331.987 215.235 335.043 219.842 Q338.122 224.425 338.122 233.175 Q338.122 241.902 335.043 246.508 Q331.987 251.091 326.177 251.091 Q320.367 251.091 317.288 246.508 Q314.233 241.902 314.233 233.175 Q314.233 224.425 317.288 219.842 Q320.367 215.235 326.177 215.235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M356.339 218.939 Q352.728 218.939 350.899 222.504 Q349.094 226.045 349.094 233.175 Q349.094 240.281 350.899 243.846 Q352.728 247.388 356.339 247.388 Q359.973 247.388 361.779 243.846 Q363.608 240.281 363.608 233.175 Q363.608 226.045 361.779 222.504 Q359.973 218.939 356.339 218.939 M356.339 215.235 Q362.149 215.235 365.205 219.842 Q368.284 224.425 368.284 233.175 Q368.284 241.902 365.205 246.508 Q362.149 251.091 356.339 251.091 Q350.529 251.091 347.45 246.508 Q344.395 241.902 344.395 233.175 Q344.395 224.425 347.45 219.842 Q350.529 215.235 356.339 215.235 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip642)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.14 4017.76,233.14 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.52 456.554,1250.43 457.123,1250.27 457.691,1250 458.259,1249.68 458.828,1249.32 459.396,1248.88 459.964,1248.39 460.533,1247.81 461.101,1247.15 461.669,1246.42 462.238,1245.61 462.806,1244.71 463.375,1242.69 463.943,1240.63 464.511,1237.41 465.08,1236.17 465.648,1234.83 466.216,1233.4 466.785,1231.81 467.353,1230.1 467.921,1228.25 468.49,1225.23 469.058,1222.09 469.626,1219.85 470.195,1217.43 470.763,1214.84 471.331,1212.1 471.9,1209.18 472.468,1204.02 473.036,1200.7 473.605,1196.17 474.173,1192.5 474.741,1188.6 475.31,1184.48 475.878,1180.16 476.446,1174.62 477.015,1167.88 477.583,1160.85 478.152,1155.67 478.72,1149.28 479.288,1143.71 479.857,1134.95 480.425,1128.9 480.993,1122.63 481.562,1116.18 482.13,1108.46 482.698,1101.66 483.267,1092.55 483.835,1084.19 484.403,1075.78 484.972,1067.08 485.54,1059.28 486.108,1050.26 486.677,1039.95 487.245,1030.71 487.813,1021.31 488.382,1012.8 488.95,1003.06 489.518,990.111 490.087,980.366 490.655,970.551 491.224,960.582 491.792,949.571 492.36,940.491 492.929,928.248 493.497,919.024 494.065,909.633 494.634,897.059 495.202,887.764 495.77,875.325 496.339,864.046 496.907,852.627 497.475,843.377 498.044,832.168 498.612,823.064 499.18,808.736 499.749,797.645 500.317,785.675 500.885,772.802 501.454,762.072 502.022,753.437 502.59,744.825 503.159,735.088 503.727,726.511 504.295,717.896 504.864,706.266 505.432,697.019 506.001,686.773 506.569,675.731 507.137,668.02 507.706,659.225 508.274,650.396 508.842,640.794 509.411,632.256 509.979,620.706 510.547,613.497 511.116,605.322 511.684,597.373 512.252,589.471 512.821,580.378 513.389,570.793 513.957,564.389 514.526,555.981 515.094,549.705 515.662,543.545 516.231,538.255 516.799,531.04 517.367,523.008 517.936,514.177 518.504,506.422 519.072,502.094 519.641,495.663 520.209,490.333 520.778,482.986 521.346,475.869 521.914,468.014 522.483,462.349 523.051,455.708 523.619,450.441 524.188,442.236 524.756,436.473 525.324,432.957 525.893,429.219 526.461,424.336 527.029,420.7 527.598,416.165 528.166,413.755 528.734,409.404 529.303,405.081 529.871,400.808 530.439,395.538 531.008,390.419 531.576,387.491 532.144,383.553 532.713,382.059 533.281,378.432 533.85,373.616 534.418,370.081 534.986,366.847 535.555,365.594 536.123,363.137 536.691,359.618 537.26,355.165 537.828,352.088 538.396,347.909 538.965,347.989 539.533,344.764 540.101,340.912 540.67,338.038 541.238,336.484 541.806,334.552 542.375,331.893 542.943,329.303 543.511,325.64 544.08,322.23 544.648,319.992 545.216,317.532 545.785,315.469 546.353,312.342 546.921,310.555 547.49,309.623 548.058,309.64 548.627,308.536 549.195,306.544 549.763,305.454 550.332,304.492 550.9,302.323 551.468,302.271 552.037,301.155 552.605,299.328 553.173,296.972 553.742,295.002 554.31,293.912 554.878,292.794 555.447,287.856 556.015,291.546 556.583,290.508 557.152,290.595 557.72,291.548 558.288,289.288 558.857,288.108 559.425,285.941 559.993,282.244 560.562,281.277 561.13,281.454 561.698,280.587 562.267,279.981 562.835,281.003 563.404,277.072 563.972,276.223 564.54,273.146 565.109,271.534 565.677,272.059 566.245,269.689 566.814,270.206 567.382,268.59 567.95,267.944 568.519,266.79 569.087,266.485 569.655,265.111 570.224,263.77 570.792,260.443 571.36,260.24 571.929,261.412 572.497,259.305 573.065,259.585 573.634,257.475 574.202,255.378 574.77,252.314 575.339,251.57 575.907,251.84 576.476,252.26 577.044,250.352 577.612,251.881 578.181,252.193 578.749,253.555 579.317,254.823 579.886,255.988 580.454,255.087 581.022,254.063 581.591,251.01 582.159,250.393 582.727,251.809 583.296,251.056 583.864,251.209 584.432,249.458 585.001,249.667 585.569,249.963 586.137,249.058 586.706,250.32 587.274,249.439 587.842,247.655 588.411,247.739 588.979,249.377 589.547,251.727 590.116,249.584 590.684,247.64 591.253,250.049 591.821,248.045 592.389,246.056 592.958,245.453 593.526,244.725 594.094,245.262 594.663,242.712 595.231,240.193 595.799,240.931 596.368,243.533 596.936,244.091 597.504,245.606 598.073,245.852 598.641,247.39 599.209,246.631 599.778,248.862 600.346,248.983 600.914,249.167 601.483,250.05 602.051,248.002 602.619,247.935 603.188,241.788 603.756,241.988 604.325,242.605 604.893,242.849 605.461,243.1 606.03,242.321 606.598,241.724 607.166,241.239 607.735,241.631 608.303,242.003 608.871,242.556 609.44,243.062 610.008,246.454 610.576,247.464 611.145,247.343 611.713,248.39 612.281,245.392 612.85,243.398 613.418,243.553 613.986,243.982 614.555,243.837 615.123,245.262 615.691,242.386 616.26,243.882 616.828,244.03 617.396,242.162 617.965,243.426 618.533,243.593 619.102,242.859 619.67,243.087 620.238,244.397 620.807,246.763 621.375,247.676 621.943,245.719 622.512,245.453 623.08,245.283 623.648,245.143 624.217,244.835 624.785,245.745 625.353,245.629 625.922,243.502 626.49,243.275 627.058,241.173 627.627,240.898 628.195,243.013 628.763,241.938 629.332,240.06 629.9,240.417 630.468,241.545 631.037,242.522 631.605,240.206 632.173,240.448 632.742,238.386 633.31,239.511 633.879,238.871 634.447,240.198 635.015,239.312 635.584,239.635 636.152,239.863 636.72,238.929 637.289,239.249 637.857,238.311 638.425,238.481 638.994,238.618 639.562,239.81 640.13,238.822 640.699,237.038 641.267,238.129 641.835,236.364 642.404,235.659 642.972,235.118 643.54,234.742 644.109,236.383 644.677,236.768 645.245,239.248 645.814,239.338 646.382,238.402 646.951,238.566 647.519,237.762 648.087,235.01 648.656,238.555 649.224,237.542 649.792,239.17 650.361,240.452 650.929,238.65 651.497,236.007 652.066,236.492 652.634,239.769 653.202,239.818 653.771,241.696 654.339,240.597 654.907,239.407 655.476,237.354 656.044,238.584 656.612,238.751 657.181,238.695 657.749,238.614 658.317,237.912 658.886,236.957 659.454,236.997 660.022,237.256 660.591,235.445 661.159,236.893 661.728,238.421 662.296,237.462 662.864,238.57 663.433,238.677 664.001,239.701 664.569,240.617 665.138,241.517 665.706,241.579 666.274,240.153 666.843,238.991 667.411,237.971 667.979,236.109 668.548,235.294 669.116,234.611 669.684,234.991 670.253,236.548 670.821,234.515 671.389,236.065 671.958,234.334 672.526,235.81 673.094,237.258 673.663,238.451 674.231,240.628 674.799,240.575 675.368,240.477 675.936,241.325 676.505,242.236 677.073,240.97 677.641,240.814 678.21,240.464 678.778,240.644 679.346,240.747 679.915,241.881 680.483,243.646 681.051,241.123 681.62,241.143 682.188,243.933 682.756,245.698 683.325,243.307 683.893,244.077 684.461,242.741 685.03,243.487 685.598,241.692 686.166,242.471 686.735,243.046 687.303,241.645 687.871,241.516 688.44,241.086 689.008,240.645 689.577,240.14 690.145,239.843 690.713,239.614 691.282,239.51 691.85,237.408 692.418,238.305 692.987,240.087 693.555,240.739 694.123,240.29 694.692,238.767 695.26,239.555 695.828,238.099 696.397,238.091 696.965,236.902 697.533,234.739 698.102,236.779 698.67,236.514 699.238,236.234 699.807,236.157 700.375,237.217 700.943,236.19 701.512,237.357 702.08,235.207 702.648,234.254 703.217,234.209 703.785,237.303 704.354,235.808 704.922,233.787 705.49,233.812 706.059,231.88 706.627,231.99 707.195,232.328 707.764,232.57 708.332,232.729 708.9,232.821 709.469,231.779 710.037,231.802 710.605,231.915 711.174,231.023 711.742,232.52 712.31,232.883 712.879,232.209 713.447,233.393 714.015,232.793 714.584,232.877 715.152,232.061 715.72,229.268 716.289,228.751 716.857,229.556 717.425,230.014 717.994,232.636 718.562,233.153 719.131,233.308 719.699,233.492 720.267,233.703 720.836,234.884 721.404,235.892 721.972,237.004 722.541,238.062 723.109,234.969 723.677,237.309 724.246,236.526 724.814,235.556 725.382,235.703 725.951,237.735 726.519,235.62 727.087,237.598 727.656,239.6 728.224,238.487 728.792,238.185 729.361,238.008 729.929,238.52 730.497,236.303 731.066,233.009 731.634,234.885 732.203,234.916 732.771,236.976 733.339,235.608 733.908,235.654 734.476,234.62 735.044,235.725 735.613,235.639 736.181,235.645 736.749,234.393 737.318,233.354 737.886,231.422 738.454,232.749 739.023,231.942 739.591,232.1 740.159,232.419 740.728,231.602 741.296,230.822 741.864,230.202 742.433,228.297 743.001,228.795 743.569,224.95 744.138,225.751 744.706,226.349 745.274,229.105 745.843,231.65 746.411,231.97 746.98,233.266 747.548,231.433 748.116,230.863 748.685,231.262 749.253,233.592 749.821,235.898 750.39,236.757 750.958,236.755 751.526,237.499 752.095,236.488 752.663,236.434 753.231,236.328 753.8,236.09 754.368,235.151 754.936,235.268 755.505,236.416 756.073,236.416 756.641,236.277 757.21,238.338 757.778,238.142 758.346,239.083 758.915,239.784 759.483,239.67 760.052,238.345 760.62,236.274 761.188,236.974 761.757,235.98 762.325,236.118 762.893,234.935 763.462,235.025 764.03,236.081 764.598,235.128 765.167,235.132 765.735,235.38 766.303,235.536 766.872,236.496 767.44,236.421 768.008,236.304 768.577,237.284 769.145,236.112 769.713,235.002 770.282,235.085 770.85,236.074 771.418,235.783 771.987,237.683 772.555,236.427 773.123,235.542 773.692,237.546 774.26,235.365 774.829,234.139 775.397,234.402 775.965,233.539 776.534,233.535 777.102,232.566 777.67,234.797 778.239,231.722 778.807,231.038 779.375,231.334 779.944,231.497 780.512,233.967 781.08,233.769 781.649,232.9 782.217,236.064 782.785,235.916 783.354,234.999 783.922,235.935 784.49,234.78 785.059,234.799 785.627,235.9 786.195,235.958 786.764,234.919 787.332,234.967 787.9,234.844 788.469,235.735 789.037,233.579 789.606,231.529 790.174,229.756 790.742,229.074 791.311,229.3 791.879,231.613 792.447,231.903 793.016,233.112 793.584,233.229 794.152,235.356 794.721,237.349 795.289,237.173 795.857,236.876 796.426,235.657 796.994,237.723 797.562,238.608 798.131,238.37 798.699,238.075 799.267,237.654 799.836,238.448 800.404,239.033 800.972,237.763 801.541,237.699 802.109,238.456 802.678,237.767 803.246,235.476 803.814,235.122 804.383,232.98 804.951,231.878 805.519,232.098 806.088,232.253 806.656,228.129 807.224,227.52 807.793,229.143 808.361,229.583 808.929,229.859 809.498,231.185 810.066,231.316 810.634,229.59 811.203,229.717 811.771,226.89 812.339,227.425 812.908,229.268 813.476,232.574 814.044,232.792 814.613,233.002 815.181,233.947 815.749,235.061 816.318,234.938 816.886,236.022 817.455,236.868 818.023,236.68 818.591,236.41 819.16,235.363 819.728,236.406 820.296,237.368 820.865,237.313 821.433,236.009 822.001,233.782 822.57,232.859 823.138,231.916 823.706,234.216 824.275,234.219 824.843,233.214 825.411,234.285 825.98,236.358 826.548,234.275 827.116,233.441 827.685,230.643 828.253,232.047 828.821,231.191 829.39,233.633 829.958,231.653 830.526,233.978 831.095,235.179 831.663,234.113 832.232,234.303 832.8,235.55 833.368,237.373 833.937,238.333 834.505,239.136 835.073,239.687 835.642,238.235 836.21,237.043 836.778,235.863 837.347,233.761 837.915,234.598 838.483,235.722 839.052,234.45 839.62,235.357 840.188,233.478 840.757,231.578 841.325,232.891 841.893,232.133 842.462,231.272 843.03,229.34 843.598,229.554 844.167,231.04 844.735,234.522 845.304,234.365 845.872,233.212 846.44,235.516 847.009,235.591 847.577,235.454 848.145,234.44 848.714,235.52 849.282,236.224 849.85,235.954 850.419,234.748 850.987,233.711 851.555,234.592 852.124,233.437 852.692,234.443 853.26,234.508 853.829,235.39 854.397,235.376 854.965,234.196 855.534,234.301 856.102,232.298 856.67,232.444 857.239,233.73 857.807,231.5 858.375,229.542 858.944,230.9 859.512,230.085 860.081,229.232 860.649,230.546 861.217,230.806 861.786,232.077 862.354,232.07 862.922,231.191 863.491,231.477 864.059,229.593 864.627,233.999 865.196,235.92 865.764,234.773 866.332,234.725 866.901,234.828 867.469,232.941 868.037,231.98 868.606,232.931 869.174,231.141 869.742,230.369 870.311,230.874 870.879,230.015 871.447,230.541 872.016,229.6 872.584,229.857 873.152,231.232 873.721,231.438 874.289,232.869 874.858,229.98 875.426,231.362 875.994,232.808 876.563,235.858 877.131,236.792 877.699,238.848 878.268,238.338 878.836,234.972 879.404,233.946 879.973,236.109 880.541,235.923 881.109,238.986 881.678,238.75 882.246,238.503 882.814,239.14 883.383,238.929 883.951,240.617 884.519,237.285 885.088,238.254 885.656,237.913 886.224,236.721 886.793,236.571 887.361,236.454 887.93,236.248 888.498,232.922 889.066,230.957 889.635,232.163 890.203,229.184 890.771,228.404 891.34,227.857 891.908,227.163 892.476,229.056 893.045,230.511 893.613,228.974 894.181,229.444 894.75,227.847 895.318,230.542 895.886,231.744 896.455,232.018 897.023,236.322 897.591,238.325 898.16,240.089 898.728,240.569 899.296,238.963 899.865,237.406 900.433,236.08 901.001,236.905 901.57,236.534 902.138,233.385 902.707,235.338 903.275,235.159 903.843,235.022 904.412,234.247 904.98,235.215 905.548,234.183 906.117,233.371 906.685,231.258 907.253,231.49 907.822,231.75 908.39,232.119 908.958,233.397 909.527,233.35 910.095,233.376 910.663,233.413 911.232,233.808 911.8,232.917 912.368,234.915 912.937,233.798 913.505,233.92 914.073,233.99 914.642,234.862 915.21,234.815 915.779,234.811 916.347,234.694 916.915,235.57 917.484,233.35 918.052,234.238 918.62,234.355 919.189,234.244 919.757,232.073 920.325,228.239 920.894,230.575 921.462,229.947 922.03,231.347 922.599,229.517 923.167,228.706 923.735,228.988 924.304,229.424 924.872,230.636 925.44,231.168 926.009,234.202 926.577,235.204 927.145,236.373 927.714,236.09 928.282,235.957 928.85,237.72 929.419,235.788 929.987,234.606 930.556,233.598 931.124,233.444 931.692,234.581 932.261,233.637 932.829,232.801 933.397,232.764 933.966,227.738 934.534,228.222 935.102,227.855 935.671,229.164 936.239,230.616 936.807,232.968 937.376,234.228 937.944,235.312 938.512,234.332 939.081,229.107 939.649,231.663 940.217,232.975 940.786,236.185 941.354,237.251 941.922,239.102 942.491,237.684 943.059,237.556 943.627,236.182 944.196,237.078 944.764,236.759 945.333,237.645 945.901,238.437 946.469,239.118 947.038,237.606 947.606,235.273 948.174,236.222 948.743,235.873 949.311,236.8 949.879,236.425 950.448,239.393 951.016,238.95 951.584,238.484 952.153,238.087 952.721,237.725 953.289,235.216 953.858,232.003 954.426,229.976 954.994,230.18 955.563,230.281 956.131,230.637 956.699,232.116 957.268,232.252 957.836,232.362 958.405,229.433 958.973,228.735 959.541,229.11 960.11,229.27 960.678,230.384 961.246,231.937 961.815,232.109 962.383,232.149 962.951,232.508 963.52,231.577 964.088,231.664 964.656,232.733 965.225,232.673 965.793,230.714 966.361,232.007 966.93,231.084 967.498,231.136 968.066,231.309 968.635,232.571 969.203,234.679 969.771,235.767 970.34,234.631 970.908,232.429 971.476,233.609 972.045,232.831 972.613,232.966 973.182,231.749 973.75,232.949 974.318,232.153 974.887,231.492 975.455,232.854 976.023,231.887 976.592,229.869 977.16,231.211 977.728,231.239 978.297,230.436 978.865,231.99 979.433,231.008 980.002,230.115 980.57,231.394 981.138,233.661 981.707,235.765 982.275,235.579 982.843,237.404 983.412,237.135 983.98,236.977 984.548,239.009 985.117,237.649 985.685,234.257 986.253,235.07 986.822,236.104 987.39,238.085 987.959,238.769 988.527,239.415 989.095,239.909 989.664,240.53 990.232,239.951 990.8,241.43 991.369,238.877 991.937,236.452 992.505,236.221 993.074,235.003 993.642,234.766 994.21,234.474 994.779,234.039 995.347,231.92 995.915,234.075 996.484,232.986 997.052,231.853 997.62,232.065 998.189,232.942 998.757,232.904 999.325,230.878 999.894,231.073 1000.46,231.279 1001.03,231.274 1001.6,231.184 1002.17,229.421 1002.74,229.763 1003.3,228.868 1003.87,230.217 1004.44,232.417 1005.01,232.499 1005.58,232.546 1006.15,234.559 1006.71,233.531 1007.28,233.543 1007.85,234.3 1008.42,235.118 1008.99,234.975 1009.56,234.817 1010.12,234.596 1010.69,231.516 1011.26,231.735 1011.83,236.985 1012.4,237.618 1012.97,237.262 1013.53,236.914 1014.1,235.86 1014.67,235.916 1015.24,233.72 1015.81,232.61 1016.38,232.462 1016.94,233.458 1017.51,231.332 1018.08,233.628 1018.65,235.546 1019.22,238.396 1019.79,239.038 1020.35,240.607 1020.92,244.289 1021.49,244.658 1022.06,243.658 1022.63,239.712 1023.2,239.175 1023.76,239.739 1024.33,239.204 1024.9,239.38 1025.47,235.722 1026.04,236.414 1026.61,237.061 1027.17,238.623 1027.74,238.121 1028.31,237.548 1028.88,239.116 1029.45,237.561 1030.02,236.06 1030.58,235.725 1031.15,235.392 1031.72,231.789 1032.29,231.564 1032.86,232.537 1033.43,232.481 1033.99,228.262 1034.56,226.412 1035.13,226.804 1035.7,227.087 1036.27,229.188 1036.84,230.285 1037.4,230.297 1037.97,231.46 1038.54,231.67 1039.11,231.662 1039.68,230.557 1040.25,231.57 1040.81,228.18 1041.38,227.642 1041.95,229.268 1042.52,227.564 1043.09,226.931 1043.66,227.291 1044.22,228.72 1044.79,228.836 1045.36,229.046 1045.93,230.126 1046.5,229.108 1047.07,227.467 1047.63,228.857 1048.2,228.939 1048.77,227.168 1049.34,225.39 1049.91,224.815 1050.48,227.474 1051.05,226.939 1051.61,227.447 1052.18,226.066 1052.75,228.662 1053.32,229.245 1053.89,229.74 1054.46,232.079 1055.02,230.149 1055.59,228.489 1056.16,230.988 1056.73,233.341 1057.3,232.339 1057.87,230.554 1058.43,232.706 1059,234.842 1059.57,234.8 1060.14,238.134 1060.71,235.873 1061.28,234.798 1061.84,233.806 1062.41,235.704 1062.98,235.53 1063.55,238.494 1064.12,236.089 1064.69,237.709 1065.25,238.521 1065.82,238.258 1066.39,238.824 1066.96,238.338 1067.53,241.194 1068.1,240.625 1068.66,238.206 1069.23,235.711 1069.8,233.743 1070.37,231.729 1070.94,232.021 1071.51,232.261 1072.07,231.203 1072.64,232.335 1073.21,231.36 1073.78,229.71 1074.35,227.896 1074.92,229.227 1075.48,229.615 1076.05,229.895 1076.62,229.16 1077.19,228.314 1077.76,228.651 1078.33,229.75 1078.89,229.161 1079.46,229.406 1080.03,229.718 1080.6,228.894 1081.17,228.085 1081.74,227.434 1082.3,227.924 1082.87,224.121 1083.44,223.973 1084.01,224.708 1084.58,224.328 1085.15,225.186 1085.71,225.882 1086.28,228.435 1086.85,228.851 1087.42,230.415 1087.99,230.764 1088.56,230.111 1089.12,231.589 1089.69,230.976 1090.26,230.34 1090.83,233.505 1091.4,234.593 1091.97,234.681 1092.53,235.593 1093.1,235.584 1093.67,236.313 1094.24,236.314 1094.81,240.38 1095.38,239.831 1095.94,239.459 1096.51,240.078 1097.08,238.805 1097.65,239.528 1098.22,238 1098.79,237.831 1099.35,235.513 1099.92,236.419 1100.49,237.314 1101.06,239.017 1101.63,239.543 1102.2,240.114 1102.76,237.879 1103.33,238.629 1103.9,241.124 1104.47,241.542 1105.04,240.751 1105.61,239.295 1106.17,238.791 1106.74,239.502 1107.31,239.126 1107.88,239.63 1108.45,237.777 1109.02,237.311 1109.58,237.195 1110.15,235.726 1110.72,232.511 1111.29,232.558 1111.86,231.587 1112.43,230.618 1112.99,232.895 1113.56,232.779 1114.13,232.817 1114.7,231.818 1115.27,231.769 1115.84,230.607 1116.4,229.818 1116.97,230.011 1117.54,229.075 1118.11,229.159 1118.68,230.5 1119.25,231.654 1119.81,229.425 1120.38,229.71 1120.95,229.765 1121.52,232.014 1122.09,229.971 1122.66,231.18 1123.23,230.499 1123.79,230.64 1124.36,227.719 1124.93,226.058 1125.5,227.912 1126.07,227.531 1126.64,228.871 1127.2,229.134 1127.77,227.352 1128.34,228.885 1128.91,229.342 1129.48,228.558 1130.05,228.626 1130.61,228.806 1131.18,230.323 1131.75,230.691 1132.32,233.008 1132.89,233.129 1133.46,231.972 1134.02,235.279 1134.59,235.049 1135.16,235.959 1135.73,235.882 1136.3,234.664 1136.87,234.344 1137.43,233.523 1138,232.555 1138.57,230.666 1139.14,231.153 1139.71,231.457 1140.28,231.542 1140.84,232.802 1141.41,234.016 1141.98,236.144 1142.55,235.889 1143.12,235.903 1143.69,237.824 1144.25,237.323 1144.82,236.172 1145.39,239.165 1145.96,239.812 1146.53,240.33 1147.1,237.734 1147.66,239.35 1148.23,236.689 1148.8,234.413 1149.37,234.23 1149.94,232.025 1150.51,229.81 1151.07,229.068 1151.64,229.402 1152.21,232.821 1152.78,234.091 1153.35,234.062 1153.92,236.92 1154.48,236.722 1155.05,236.379 1155.62,234.057 1156.19,235.231 1156.76,235.05 1157.33,239.018 1157.89,238.829 1158.46,237.365 1159.03,238.194 1159.6,238.845 1160.17,240.491 1160.74,239.958 1161.3,237.357 1161.87,237.17 1162.44,234.918 1163.01,238.023 1163.58,237.737 1164.15,237.29 1164.71,237.033 1165.28,234.553 1165.85,235.529 1166.42,235.445 1166.99,235.2 1167.56,237.105 1168.12,235.889 1168.69,234.653 1169.26,236.761 1169.83,236.318 1170.4,236.111 1170.97,235.618 1171.53,235.333 1172.1,236.334 1172.67,236.951 1173.24,235.688 1173.81,234.278 1174.38,233.052 1174.94,231.966 1175.51,231.74 1176.08,231.651 1176.65,229.59 1177.22,230.629 1177.79,230.713 1178.35,229.588 1178.92,229.552 1179.49,230.574 1180.06,230.499 1180.63,230.605 1181.2,231.605 1181.76,230.539 1182.33,228.651 1182.9,226.68 1183.47,228.347 1184.04,228.78 1184.61,229.909 1185.17,229.004 1185.74,226.215 1186.31,225.73 1186.88,227.426 1187.45,227.706 1188.02,229.087 1188.58,230.488 1189.15,230.646 1189.72,232.139 1190.29,232.394 1190.86,230.275 1191.43,229.441 1192,228.836 1192.56,230.256 1193.13,231.406 1193.7,232.156 1194.27,231.311 1194.84,232.674 1195.41,231.685 1195.97,231.89 1196.54,231.948 1197.11,232.948 1197.68,233.019 1198.25,235.876 1198.82,235.671 1199.38,235.732 1199.95,233.531 1200.52,231.697 1201.09,232.699 1201.66,230.656 1202.23,230.753 1202.79,231.78 1203.36,232.855 1203.93,230.907 1204.5,231.249 1205.07,231.392 1205.64,232.529 1206.2,234.744 1206.77,233.568 1207.34,234.664 1207.91,232.647 1208.48,234.761 1209.05,234.667 1209.61,233.625 1210.18,233.583 1210.75,233.739 1211.32,232.716 1211.89,231.799 1212.46,230.853 1213.02,230.959 1213.59,229.84 1214.16,230.888 1214.73,231.125 1215.3,231.201 1215.87,228.515 1216.43,231.02 1217,231.151 1217.57,232.435 1218.14,232.563 1218.71,232.662 1219.28,232.868 1219.84,234.795 1220.41,234.595 1220.98,234.56 1221.55,235.433 1222.12,233.473 1222.69,234.759 1223.25,233.69 1223.82,235.73 1224.39,237.602 1224.96,239.299 1225.53,238.87 1226.1,237.572 1226.66,237.393 1227.23,236.042 1227.8,231.775 1228.37,231.907 1228.94,230.905 1229.51,232.178 1230.07,232.107 1230.64,234.278 1231.21,234.24 1231.78,233.37 1232.35,229.096 1232.92,229.427 1233.48,230.631 1234.05,233.8 1234.62,232.864 1235.19,233.91 1235.76,234.901 1236.33,235.697 1236.89,237.729 1237.46,236.244 1238.03,233.911 1238.6,232.961 1239.17,233.263 1239.74,234.279 1240.3,234.01 1240.87,236.216 1241.44,234.908 1242.01,234.975 1242.58,233.821 1243.15,233.487 1243.71,234.674 1244.28,236.714 1244.85,233.457 1245.42,234.527 1245.99,233.331 1246.56,233.463 1247.12,234.597 1247.69,234.467 1248.26,233.316 1248.83,233.348 1249.4,234.506 1249.97,233.322 1250.53,233.132 1251.1,232.876 1251.67,232.023 1252.24,228.853 1252.81,228.977 1253.38,229.11 1253.94,229.288 1254.51,229.532 1255.08,230.802 1255.65,229.663 1256.22,231.003 1256.79,227.883 1257.35,230.146 1257.92,230.569 1258.49,230.581 1259.06,231.095 1259.63,230.246 1260.2,230.735 1260.76,230.887 1261.33,230.949 1261.9,232.258 1262.47,232.388 1263.04,232.321 1263.61,234.377 1264.18,236.349 1264.74,236.22 1265.31,237.011 1265.88,238.802 1266.45,239.485 1267.02,237.984 1267.59,237.688 1268.15,238.473 1268.72,237.062 1269.29,235.779 1269.86,235.697 1270.43,235.559 1271,233.205 1271.56,232.263 1272.13,230.298 1272.7,229.465 1273.27,229.843 1273.84,232.198 1274.41,233.298 1274.97,232.203 1275.54,232.151 1276.11,232.429 1276.68,231.337 1277.25,230.7 1277.82,232.068 1278.38,232.176 1278.95,232.154 1279.52,233.307 1280.09,236.421 1280.66,236.053 1281.23,235.861 1281.79,235.737 1282.36,235.491 1282.93,235.205 1283.5,235.045 1284.07,231.68 1284.64,230.913 1285.2,230.968 1285.77,232.226 1286.34,232.472 1286.91,231.581 1287.48,231.9 1288.05,232.271 1288.61,234.296 1289.18,231.193 1289.75,231.402 1290.32,229.347 1290.89,229.777 1291.46,230.061 1292.02,231.521 1292.59,232.595 1293.16,234.527 1293.73,234.327 1294.3,234.388 1294.87,236.222 1295.43,235.859 1296,233.639 1296.57,231.185 1297.14,234.346 1297.71,234.249 1298.28,232.086 1298.84,232.043 1299.41,232.098 1299.98,231.895 1300.55,234.861 1301.12,233.751 1301.69,234.785 1302.25,232.594 1302.82,232.778 1303.39,230.929 1303.96,234.35 1304.53,236.22 1305.1,238 1305.66,235.705 1306.23,237.473 1306.8,235.116 1307.37,234.945 1307.94,235.697 1308.51,236.811 1309.07,235.641 1309.64,236.441 1310.21,235.334 1310.78,235.396 1311.35,233.222 1311.92,233.942 1312.48,233.754 1313.05,233.677 1313.62,234.702 1314.19,234.618 1314.76,233.796 1315.33,232.741 1315.89,231.715 1316.46,232.9 1317.03,232.958 1317.6,234.111 1318.17,236.324 1318.74,236.177 1319.3,234.863 1319.87,235.931 1320.44,235.654 1321.01,234.352 1321.58,230.97 1322.15,231.223 1322.71,231.354 1323.28,233.493 1323.85,233.573 1324.42,234.796 1324.99,234.742 1325.56,234.843 1326.12,232.723 1326.69,234.865 1327.26,232.397 1327.83,232.331 1328.4,233.273 1328.97,235.335 1329.53,238.226 1330.1,236.905 1330.67,236.513 1331.24,234.338 1331.81,233.264 1332.38,231.186 1332.94,230.231 1333.51,230.519 1334.08,227.624 1334.65,226.843 1335.22,226.225 1335.79,226.814 1336.36,227.4 1336.92,224.681 1337.49,226.222 1338.06,224.61 1338.63,225.31 1339.2,221.785 1339.77,221.712 1340.33,223.695 1340.9,224.406 1341.47,219.923 1342.04,220.024 1342.61,220.037 1343.18,219.895 1343.74,222.095 1344.31,222.585 1344.88,225.416 1345.45,226.803 1346.02,230.277 1346.59,232.948 1347.15,233.039 1347.72,234.05 1348.29,236.006 1348.86,238.098 1349.43,237.847 1350,238.637 1350.56,239.436 1351.13,237.974 1351.7,237.855 1352.27,240.589 1352.84,244.229 1353.41,240.612 1353.97,238.948 1354.54,238.545 1355.11,236.132 1355.68,234.769 1356.25,236.064 1356.82,237.015 1357.38,236.722 1357.95,237.882 1358.52,236.417 1359.09,238.373 1359.66,237.034 1360.23,233.69 1360.79,233.633 1361.36,233.5 1361.93,233.551 1362.5,236.648 1363.07,235.335 1363.64,235.131 1364.2,234.032 1364.77,231.862 1365.34,234.24 1365.91,234.173 1366.48,234.123 1367.05,234.189 1367.61,234.201 1368.18,235.126 1368.75,235.997 1369.32,234.644 1369.89,234.551 1370.46,236.401 1371.02,232.283 1371.59,233.417 1372.16,236.575 1372.73,236.225 1373.3,235.029 1373.87,233.921 1374.43,232.719 1375,230.674 1375.57,231.19 1376.14,232.49 1376.71,231.803 1377.28,230.757 1377.84,233.059 1378.41,232.038 1378.98,231.037 1379.55,232.119 1380.12,232.298 1380.69,234.689 1381.25,233.406 1381.82,231.226 1382.39,231.251 1382.96,231.46 1383.53,232.809 1384.1,233.117 1384.66,231.104 1385.23,229.263 1385.8,228.56 1386.37,229.714 1386.94,231.887 1387.51,234.041 1388.07,236.204 1388.64,233.756 1389.21,233.939 1389.78,234.742 1390.35,233.607 1390.92,234.474 1391.48,235.468 1392.05,236.526 1392.62,235.423 1393.19,236.208 1393.76,236.339 1394.33,235.079 1394.89,234.027 1395.46,233.794 1396.03,233.859 1396.6,234.824 1397.17,231.482 1397.74,229.404 1398.3,230.688 1398.87,233.801 1399.44,235.671 1400.01,232.409 1400.58,233.634 1401.15,232.686 1401.71,229.691 1402.28,228.927 1402.85,232.073 1403.42,232.256 1403.99,234.496 1404.56,235.807 1405.13,235.621 1405.69,237.411 1406.26,237.156 1406.83,236.79 1407.4,237.495 1407.97,236.149 1408.54,236.871 1409.1,237.473 1409.67,235.634 1410.24,237.36 1410.81,234.109 1411.38,233.909 1411.95,233.951 1412.51,237.803 1413.08,236.486 1413.65,237.259 1414.22,239.95 1414.79,237.421 1415.36,238.225 1415.92,237.674 1416.49,236.1 1417.06,234.78 1417.63,234.698 1418.2,234.621 1418.77,235.586 1419.33,234.331 1419.9,234.1 1420.47,234.999 1421.04,234.548 1421.61,236.374 1422.18,235.044 1422.74,234.982 1423.31,234.598 1423.88,234.495 1424.45,234.287 1425.02,235.233 1425.59,234.121 1426.15,234.865 1426.72,236.655 1427.29,237.24 1427.86,235.822 1428.43,236.714 1429,236.293 1429.56,236.821 1430.13,236.705 1430.7,235.382 1431.27,235.212 1431.84,235.144 1432.41,234.927 1432.97,235.605 1433.54,235.206 1434.11,236.074 1434.68,233.715 1435.25,234.675 1435.82,235.517 1436.38,235.281 1436.95,235.913 1437.52,235.492 1438.09,234.091 1438.66,233.673 1439.23,231.488 1439.79,230.452 1440.36,230.363 1440.93,229.603 1441.5,228.869 1442.07,227.931 1442.64,228.093 1443.2,227.209 1443.77,228.543 1444.34,230.799 1444.91,229.894 1445.48,227.969 1446.05,227.253 1446.61,226.358 1447.18,226.832 1447.75,227.429 1448.32,227.565 1448.89,225.824 1449.46,227.944 1450.02,227.23 1450.59,224.327 1451.16,223.912 1451.73,222.419 1452.3,222.009 1452.87,222.892 1453.43,223.654 1454,222.259 1454.57,223.077 1455.14,225.93 1455.71,228.312 1456.28,229.627 1456.84,228.669 1457.41,229.095 1457.98,231.382 1458.55,231.491 1459.12,233.564 1459.69,233.583 1460.25,233.531 1460.82,234.563 1461.39,233.691 1461.96,234.919 1462.53,232.889 1463.1,232.902 1463.66,234.034 1464.23,234.062 1464.8,234.216 1465.37,234.41 1465.94,235.433 1466.51,235.206 1467.07,235.972 1467.64,234.89 1468.21,233.76 1468.78,232.96 1469.35,233.291 1469.92,234.242 1470.48,233.345 1471.05,234.432 1471.62,236.445 1472.19,235.018 1472.76,236.058 1473.33,236.957 1473.89,234.536 1474.46,234.516 1475.03,233.449 1475.6,232.375 1476.17,233.232 1476.74,233.26 1477.31,234.294 1477.87,235.287 1478.44,235.16 1479.01,233.013 1479.58,231.011 1480.15,231.285 1480.72,231.51 1481.28,231.618 1481.85,231.791 1482.42,233.783 1482.99,234.802 1483.56,230.722 1484.13,230.943 1484.69,230.971 1485.26,230.232 1485.83,232.437 1486.4,232.582 1486.97,229.788 1487.54,231.21 1488.1,231.49 1488.67,233.903 1489.24,233.663 1489.81,232.802 1490.38,231.679 1490.95,230.733 1491.51,235.912 1492.08,236.757 1492.65,237.66 1493.22,236.316 1493.79,236.169 1494.36,235.863 1494.92,235.702 1495.49,235.659 1496.06,234.661 1496.63,234.64 1497.2,235.561 1497.77,234.662 1498.33,235.759 1498.9,235.841 1499.47,236.63 1500.04,237.319 1500.61,235.95 1501.18,237.398 1501.74,239.174 1502.31,238.702 1502.88,236.485 1503.45,235.43 1504.02,236.265 1504.59,235.817 1505.15,235.593 1505.72,234.209 1506.29,235.02 1506.86,234.861 1507.43,235.79 1508,231.382 1508.56,232.756 1509.13,233.813 1509.7,234.881 1510.27,234.784 1510.84,235.603 1511.41,235.236 1511.97,236.167 1512.54,235.852 1513.11,234.722 1513.68,235.848 1514.25,235.722 1514.82,234.43 1515.38,234.512 1515.95,237.661 1516.52,238.34 1517.09,236.904 1517.66,237.466 1518.23,238.236 1518.79,236.852 1519.36,238.594 1519.93,239.251 1520.5,239.872 1521.07,238.41 1521.64,238.823 1522.2,238.178 1522.77,238.755 1523.34,240.377 1523.91,237.419 1524.48,235.903 1525.05,236.623 1525.61,237.395 1526.18,237.186 1526.75,239.141 1527.32,236.721 1527.89,235.111 1528.46,234.641 1529.02,235.32 1529.59,236.113 1530.16,234.521 1530.73,232.084 1531.3,229.888 1531.87,228.919 1532.43,227.952 1533,229.206 1533.57,226.42 1534.14,226.686 1534.71,227.068 1535.28,228.424 1535.84,227.544 1536.41,228.086 1536.98,228.434 1537.55,229.514 1538.12,229.71 1538.69,226.643 1539.25,228.959 1539.82,229.085 1540.39,230.263 1540.96,231.319 1541.53,231.324 1542.1,228.237 1542.66,227.441 1543.23,229.975 1543.8,228.954 1544.37,230.021 1544.94,227.966 1545.51,228.204 1546.08,227.471 1546.64,228.839 1547.21,230.056 1547.78,230.297 1548.35,230.366 1548.92,230.329 1549.49,230.41 1550.05,230.38 1550.62,231.559 1551.19,233.821 1551.76,231.747 1552.33,230.666 1552.9,227.771 1553.46,228.101 1554.03,227.263 1554.6,227.94 1555.17,228.536 1555.74,226.915 1556.31,228.088 1556.87,228.228 1557.44,229.738 1558.01,229.969 1558.58,231.23 1559.15,229.328 1559.72,229.637 1560.28,230.028 1560.85,232.461 1561.42,232.724 1561.99,231.782 1562.56,230.953 1563.13,229.19 1563.69,229.579 1564.26,227.652 1564.83,229.117 1565.4,229.539 1565.97,230.068 1566.54,229.602 1567.1,229.722 1567.67,228.96 1568.24,230.546 1568.81,228.746 1569.38,228.391 1569.95,226.898 1570.51,229.475 1571.08,234.88 1571.65,234.776 1572.22,235.869 1572.79,236.988 1573.36,236.091 1573.92,235.804 1574.49,235.749 1575.06,236.75 1575.63,238.936 1576.2,238.588 1576.77,241.525 1577.33,242.062 1577.9,243.672 1578.47,241.999 1579.04,240.599 1579.61,241.207 1580.18,239.631 1580.74,238.185 1581.31,237.766 1581.88,236.406 1582.45,233.161 1583.02,234.12 1583.59,233.123 1584.15,230.193 1584.72,233.289 1585.29,234.063 1585.86,234.019 1586.43,232.025 1587,234.332 1587.56,230.08 1588.13,228.301 1588.7,227.604 1589.27,226.84 1589.84,228.359 1590.41,228.666 1590.97,231.181 1591.54,231.324 1592.11,231.293 1592.68,232.419 1593.25,235.564 1593.82,235.294 1594.38,236.124 1594.95,236.865 1595.52,238.683 1596.09,238.299 1596.66,237.852 1597.23,235.687 1597.79,236.424 1598.36,238.119 1598.93,236.537 1599.5,236.212 1600.07,236.05 1600.64,234.91 1601.2,233.706 1601.77,235.585 1602.34,237.544 1602.91,238.217 1603.48,235.956 1604.05,234.6 1604.61,233.158 1605.18,234.248 1605.75,234.306 1606.32,233.404 1606.89,236.359 1607.46,237.997 1608.02,239.685 1608.59,240.506 1609.16,239.793 1609.73,236.314 1610.3,236.923 1610.87,237.402 1611.43,237.175 1612,235.775 1612.57,235.515 1613.14,234.14 1613.71,233.867 1614.28,233.757 1614.84,233.654 1615.41,236.464 1615.98,234.026 1616.55,233.897 1617.12,233.673 1617.69,233.542 1618.26,233.641 1618.82,233.622 1619.39,233.775 1619.96,234.778 1620.53,235.74 1621.1,236.376 1621.67,235.907 1622.23,234.716 1622.8,233.313 1623.37,232.008 1623.94,231.073 1624.51,230.211 1625.08,228.436 1625.64,227.822 1626.21,229.937 1626.78,231.109 1627.35,230.206 1627.92,229.552 1628.49,228.396 1629.05,228.282 1629.62,225.502 1630.19,226.873 1630.76,226.249 1631.33,226.598 1631.9,227.163 1632.46,229.803 1633.03,228.93 1633.6,230.334 1634.17,229.75 1634.74,230.19 1635.31,229.442 1635.87,230.556 1636.44,231.841 1637.01,231.821 1637.58,232.047 1638.15,231.119 1638.72,232.411 1639.28,230.716 1639.85,231.921 1640.42,232.24 1640.99,233.462 1641.56,230.269 1642.13,232.537 1642.69,230.788 1643.26,231.125 1643.83,231.489 1644.4,233.679 1644.97,234.781 1645.54,234.836 1646.1,233.634 1646.67,233.55 1647.24,232.261 1647.81,230.343 1648.38,230.576 1648.95,229.588 1649.51,229.934 1650.08,232.462 1650.65,234.415 1651.22,235.541 1651.79,236.482 1652.36,237.153 1652.92,235.816 1653.49,235.662 1654.06,237.416 1654.63,236.827 1655.2,235.685 1655.77,236.598 1656.33,236.228 1656.9,237.107 1657.47,237.031 1658.04,239.759 1658.61,239.484 1659.18,239.147 1659.74,239.618 1660.31,240.191 1660.88,237.622 1661.45,237.188 1662.02,236.758 1662.59,235.274 1663.15,237.928 1663.72,232.317 1664.29,233.19 1664.86,232.823 1665.43,231.575 1666,231.768 1666.56,232.025 1667.13,229.685 1667.7,229.735 1668.27,228.751 1668.84,229.75 1669.41,229.568 1669.97,229.87 1670.54,230.144 1671.11,229.476 1671.68,228.496 1672.25,228.879 1672.82,230.245 1673.38,226.281 1673.95,228.919 1674.52,229.148 1675.09,228.319 1675.66,228.519 1676.23,227.808 1676.79,226.164 1677.36,224.722 1677.93,224.113 1678.5,223.581 1679.07,223.204 1679.64,223.983 1680.2,222.782 1680.77,220.478 1681.34,220.626 1681.91,222.527 1682.48,224.399 1683.05,225.09 1683.61,227.058 1684.18,227.794 1684.75,228.549 1685.32,230.144 1685.89,230.571 1686.46,231.806 1687.02,232.806 1687.59,232.984 1688.16,233.291 1688.73,232.318 1689.3,232.551 1689.87,231.741 1690.44,233.178 1691,235.34 1691.57,236.275 1692.14,235.118 1692.71,235.192 1693.28,236.206 1693.85,236.01 1694.41,235.957 1694.98,233.716 1695.55,236.84 1696.12,237.723 1696.69,238.763 1697.26,239.491 1697.82,239.198 1698.39,238.898 1698.96,237.672 1699.53,239.555 1700.1,240.358 1700.67,239.672 1701.23,239.255 1701.8,238.877 1702.37,237.631 1702.94,239.411 1703.51,238.688 1704.08,238.148 1704.64,241.1 1705.21,238.46 1705.78,235.989 1706.35,236.888 1706.92,236.818 1707.49,237.523 1708.05,238.118 1708.62,237.781 1709.19,238.357 1709.76,238.994 1710.33,240.573 1710.9,240.983 1711.46,239.451 1712.03,235.881 1712.6,236.859 1713.17,235.561 1713.74,237.401 1714.31,237.106 1714.87,235.757 1715.44,234.507 1716.01,233.548 1716.58,234.588 1717.15,233.514 1717.72,233.396 1718.28,232.112 1718.85,232.131 1719.42,230.015 1719.99,228.149 1720.56,227.536 1721.13,227.809 1721.69,228.258 1722.26,228.541 1722.83,226.828 1723.4,225.142 1723.97,224.692 1724.54,225.438 1725.1,225.185 1725.67,227.845 1726.24,228.134 1726.81,227.522 1727.38,227.038 1727.95,227.644 1728.51,227.044 1729.08,228.641 1729.65,229.054 1730.22,230.546 1730.79,229.873 1731.36,230.058 1731.92,230.446 1732.49,229.819 1733.06,232.102 1733.63,232.525 1734.2,232.555 1734.77,231.75 1735.33,233.952 1735.9,234.105 1736.47,234.109 1737.04,234.334 1737.61,238.383 1738.18,237.988 1738.74,236.598 1739.31,235.385 1739.88,235.267 1740.45,234.988 1741.02,236.013 1741.59,235.972 1742.15,233.777 1742.72,233.625 1743.29,235.749 1743.86,234.576 1744.43,234.539 1745,232.488 1745.56,232.383 1746.13,235.415 1746.7,239.352 1747.27,240.078 1747.84,239.626 1748.41,239.281 1748.97,238.584 1749.54,237.258 1750.11,240.005 1750.68,239.561 1751.25,241.235 1751.82,239.675 1752.38,238.254 1752.95,237.785 1753.52,238.51 1754.09,238.001 1754.66,238.966 1755.23,236.435 1755.79,235.157 1756.36,235.749 1756.93,234.487 1757.5,234.258 1758.07,234.214 1758.64,233.218 1759.21,232.955 1759.77,233.871 1760.34,234.878 1760.91,232.718 1761.48,233.701 1762.05,235.44 1762.62,235.194 1763.18,229.781 1763.75,233.128 1764.32,232.062 1764.89,231.155 1765.46,231.433 1766.03,231.149 1766.59,230.867 1767.16,231.845 1767.73,232.031 1768.3,233.25 1768.87,232.226 1769.44,230.23 1770,229.534 1770.57,228.844 1771.14,227.142 1771.71,227.359 1772.28,226.708 1772.85,228.123 1773.41,227.634 1773.98,228.014 1774.55,227.294 1775.12,226.734 1775.69,227.413 1776.26,228.874 1776.82,227.163 1777.39,228.59 1777.96,229.913 1778.53,228.481 1779.1,228.908 1779.67,230.497 1780.23,229.575 1780.8,229.87 1781.37,231.16 1781.94,231.667 1782.51,234.971 1783.08,232.773 1783.64,235.032 1784.21,235.978 1784.78,234.688 1785.35,234.657 1785.92,234.504 1786.49,234.552 1787.05,233.266 1787.62,233.118 1788.19,233.115 1788.76,232.001 1789.33,232.062 1789.9,232.202 1790.46,233.429 1791.03,232.472 1791.6,233.65 1792.17,233.807 1792.74,234.951 1793.31,234.702 1793.87,236.664 1794.44,236.695 1795.01,236.493 1795.58,239.423 1796.15,238.107 1796.72,233.839 1797.28,232.978 1797.85,230.843 1798.42,229.841 1798.99,228.998 1799.56,228.452 1800.13,228.68 1800.69,228.121 1801.26,229.651 1801.83,229.717 1802.4,232.061 1802.97,233.154 1803.54,232.108 1804.1,231.074 1804.67,233.271 1805.24,236.311 1805.81,236.277 1806.38,237.989 1806.95,238.598 1807.51,238.222 1808.08,238.963 1808.65,239.573 1809.22,237.139 1809.79,237.718 1810.36,237.507 1810.92,236.197 1811.49,236.844 1812.06,233.336 1812.63,232.266 1813.2,232.202 1813.77,232.301 1814.33,232.499 1814.9,232.495 1815.47,231.382 1816.04,234.541 1816.61,234.597 1817.18,235.655 1817.74,235.547 1818.31,235.289 1818.88,234.164 1819.45,233.101 1820.02,231.004 1820.59,232.114 1821.15,232.396 1821.72,234.435 1822.29,233.086 1822.86,234.062 1823.43,234.116 1824,233.082 1824.56,235.217 1825.13,238.184 1825.7,236.69 1826.27,236.599 1826.84,235.447 1827.41,233.061 1827.97,230.802 1828.54,230.069 1829.11,229.303 1829.68,228.484 1830.25,228.574 1830.82,228.639 1831.39,229.018 1831.95,230.286 1832.52,230.568 1833.09,230.925 1833.66,233.146 1834.23,232.954 1834.8,232.963 1835.36,233.887 1835.93,231.79 1836.5,232.895 1837.07,230.944 1837.64,232.066 1838.21,232.116 1838.77,233.579 1839.34,233.729 1839.91,235.578 1840.48,236.269 1841.05,235.209 1841.62,232.06 1842.18,234.05 1842.75,235.081 1843.32,232.993 1843.89,234.094 1844.46,233.126 1845.03,235.039 1845.59,234.863 1846.16,234.738 1846.73,234.581 1847.3,240.427 1847.87,240.68 1848.44,240.075 1849,239.53 1849.57,241.036 1850.14,238.288 1850.71,239.095 1851.28,240.812 1851.85,241.349 1852.41,242.512 1852.98,238.815 1853.55,238.346 1854.12,236.735 1854.69,234.282 1855.26,233.042 1855.82,229.017 1856.39,230.138 1856.96,231.256 1857.53,231.256 1858.1,233.382 1858.67,232.361 1859.23,232.131 1859.8,230.949 1860.37,232.029 1860.94,233.167 1861.51,231.082 1862.08,230.992 1862.64,229.019 1863.21,229.201 1863.78,228.365 1864.35,229.635 1864.92,231.076 1865.49,235.249 1866.05,237.207 1866.62,237.089 1867.19,235.661 1867.76,235.483 1868.33,236.232 1868.9,235.984 1869.46,234.691 1870.03,234.694 1870.6,234.339 1871.17,231.252 1871.74,232.367 1872.31,232.319 1872.87,233.349 1873.44,230.333 1874.01,232.755 1874.58,229.663 1875.15,229.673 1875.72,231.792 1876.28,232.785 1876.85,230.498 1877.42,229.518 1877.99,229.66 1878.56,229.821 1879.13,230.843 1879.69,233.025 1880.26,232.039 1880.83,231.19 1881.4,231.324 1881.97,233.539 1882.54,234.425 1883.1,233.035 1883.67,233.948 1884.24,234.113 1884.81,234.145 1885.38,232.138 1885.95,233.318 1886.51,234.071 1887.08,231.708 1887.65,231.708 1888.22,230.779 1888.79,231.95 1889.36,232.889 1889.92,233.001 1890.49,234.979 1891.06,235.766 1891.63,234.541 1892.2,236.341 1892.77,233.948 1893.33,234.6 1893.9,235.387 1894.47,234.173 1895.04,234.272 1895.61,233.876 1896.18,233.69 1896.74,233.447 1897.31,233.689 1897.88,233.611 1898.45,232.504 1899.02,234.56 1899.59,232.545 1900.16,231.537 1900.72,230.401 1901.29,228.546 1901.86,229.611 1902.43,229.766 1903,229.786 1903.57,228.766 1904.13,229.077 1904.7,229.183 1905.27,229.556 1905.84,230.947 1906.41,231.011 1906.98,231.099 1907.54,229.264 1908.11,229.346 1908.68,229.736 1909.25,228.975 1909.82,229.283 1910.39,230.619 1910.95,231.705 1911.52,231.772 1912.09,232.123 1912.66,234.146 1913.23,233.001 1913.8,234.227 1914.36,232.286 1914.93,231.327 1915.5,232.358 1916.07,232.548 1916.64,231.761 1917.21,232.039 1917.77,231.157 1918.34,229.335 1918.91,228.541 1919.48,230.02 1920.05,231.397 1920.62,229.29 1921.18,229.666 1921.75,229.968 1922.32,230.26 1922.89,229.633 1923.46,229.973 1924.03,230.325 1924.59,230.531 1925.16,229.595 1925.73,230.05 1926.3,229.536 1926.87,230.148 1927.44,229.317 1928,229.569 1928.57,229.898 1929.14,230.232 1929.71,231.492 1930.28,231.51 1930.85,232.849 1931.41,231.955 1931.98,229.844 1932.55,229.188 1933.12,229.564 1933.69,232.812 1934.26,232.874 1934.82,232.917 1935.39,232.251 1935.96,231.552 1936.53,232.851 1937.1,231.943 1937.67,231.03 1938.23,233.067 1938.8,235.142 1939.37,236.023 1939.94,234.856 1940.51,234.801 1941.08,234.573 1941.64,234.706 1942.21,231.546 1942.78,231.856 1943.35,233.02 1943.92,233.353 1944.49,233.817 1945.05,233.723 1945.62,234.703 1946.19,235.621 1946.76,235.36 1947.33,235.232 1947.9,233.937 1948.46,234.007 1949.03,233.019 1949.6,231.195 1950.17,230.254 1950.74,232.872 1951.31,231.898 1951.87,231.075 1952.44,233.406 1953.01,234.644 1953.58,233.63 1954.15,235.629 1954.72,235.603 1955.28,235.461 1955.85,237.561 1956.42,238.496 1956.99,237.892 1957.56,238.626 1958.13,237.41 1958.69,239.212 1959.26,239.804 1959.83,240.414 1960.4,239.876 1960.97,239.394 1961.54,236.889 1962.1,234.501 1962.67,236.307 1963.24,236.962 1963.81,238.852 1964.38,238.461 1964.95,239.007 1965.51,238.504 1966.08,237.846 1966.65,235.377 1967.22,234.014 1967.79,233.906 1968.36,234.813 1968.92,234.724 1969.49,232.301 1970.06,230.447 1970.63,229.48 1971.2,231.84 1971.77,230.701 1972.34,233.14 1972.9,233.164 1973.47,233.9 1974.04,233.968 1974.61,230.935 1975.18,231.08 1975.75,232.078 1976.31,232.072 1976.88,234.907 1977.45,233.632 1978.02,234.581 1978.59,233.373 1979.16,232.265 1979.72,234.451 1980.29,235.176 1980.86,238.202 1981.43,236.738 1982,233.523 1982.57,230.507 1983.13,229.571 1983.7,229.924 1984.27,231.066 1984.84,229.105 1985.41,229.471 1985.98,228.413 1986.54,229.667 1987.11,228.748 1987.68,229.159 1988.25,229.308 1988.82,230.779 1989.39,229.701 1989.95,230.086 1990.52,227.434 1991.09,228.745 1991.66,230.36 1992.23,230.251 1992.8,231.518 1993.36,232.741 1993.93,233.802 1994.5,233.786 1995.07,233.841 1995.64,233.907 1996.21,232.773 1996.77,234.964 1997.34,235.876 1997.91,236.656 1998.48,236.704 1999.05,237.674 1999.62,236.254 2000.18,237.214 2000.75,235.786 2001.32,232.508 2001.89,231.405 2002.46,232.598 2003.03,233.563 2003.59,233.561 2004.16,234.544 2004.73,235.698 2005.3,234.484 2005.87,234.202 2006.44,234.934 2007,235.827 2007.57,235.544 2008.14,236.363 2008.71,232.1 2009.28,232.228 2009.85,234.292 2010.41,233.184 2010.98,233.249 2011.55,233.425 2012.12,233.363 2012.69,238.432 2013.26,235.891 2013.82,233.492 2014.39,232.609 2014.96,229.9 2015.53,227.007 2016.1,229.514 2016.67,229.894 2017.23,232.148 2017.8,229.282 2018.37,230.626 2018.94,230.793 2019.51,230.824 2020.08,232.265 2020.64,232.44 2021.21,232.74 2021.78,232.886 2022.35,231.957 2022.92,231.067 2023.49,231.255 2024.05,232.96 2024.62,231.933 2025.19,233.118 2025.76,233.046 2026.33,233.992 2026.9,235.872 2027.46,236.804 2028.03,233.503 2028.6,237.55 2029.17,238.224 2029.74,237.969 2030.31,237.636 2030.87,236.246 2031.44,235.098 2032.01,234.979 2032.58,234.967 2033.15,233.856 2033.72,233.808 2034.28,233.844 2034.85,233.646 2035.42,233.655 2035.99,235.844 2036.56,233.429 2037.13,234.122 2037.69,232.869 2038.26,231.52 2038.83,229.871 2039.4,230.018 2039.97,233.203 2040.54,234.171 2041.11,233.172 2041.67,235.446 2042.24,233.06 2042.81,232.931 2043.38,233.818 2043.95,233.778 2044.52,233.567 2045.08,233.576 2045.65,233.411 2046.22,234.261 2046.79,234.262 2047.36,236.289 2047.93,235.239 2048.49,235.154 2049.06,236.362 2049.63,235.359 2050.2,235.133 2050.77,236.212 2051.34,233.848 2051.9,233.805 2052.47,232.472 2053.04,231.61 2053.61,232.486 2054.18,233.358 2054.75,232.086 2055.31,234.022 2055.88,235.934 2056.45,233.569 2057.02,232.591 2057.59,234.711 2058.16,236.782 2058.72,238.506 2059.29,237.949 2059.86,235.646 2060.43,232.334 2061,233.418 2061.57,233.092 2062.13,232.046 2062.7,230.082 2063.27,231.232 2063.84,229.119 2064.41,228.55 2064.98,230.055 2065.54,230.307 2066.11,229.541 2066.68,228.566 2067.25,228.514 2067.82,228.967 2068.39,230.306 2068.95,230.712 2069.52,229.84 2070.09,229.153 2070.66,231.714 2071.23,231.928 2071.8,233.045 2072.36,234.109 2072.93,233.149 2073.5,234.198 2074.07,235.271 2074.64,232.053 2075.21,232.189 2075.77,229.289 2076.34,229.495 2076.91,228.641 2077.48,226.865 2078.05,227.083 2078.62,227.691 2079.18,226.997 2079.75,228.513 2080.32,232.035 2080.89,232.464 2081.46,234.727 2082.03,234.682 2082.59,233.566 2083.16,235.636 2083.73,235.652 2084.3,235.678 2084.87,234.268 2085.44,234.249 2086,233.374 2086.57,233.473 2087.14,234.718 2087.71,236.596 2088.28,235.174 2088.85,236.106 2089.41,236.786 2089.98,236.448 2090.55,237.267 2091.12,237.132 2091.69,236.892 2092.26,233.577 2092.82,231.552 2093.39,231.46 2093.96,232.543 2094.53,230.728 2095.1,230.911 2095.67,233.044 2096.23,233.091 2096.8,233.023 2097.37,233.272 2097.94,232.369 2098.51,232.366 2099.08,233.476 2099.64,231.398 2100.21,230.625 2100.78,232.11 2101.35,233.131 2101.92,232.132 2102.49,233.095 2103.05,235.088 2103.62,236.013 2104.19,236.911 2104.76,235.535 2105.33,235.21 2105.9,236.02 2106.46,237.918 2107.03,237.557 2107.6,237.405 2108.17,238.785 2108.74,237.198 2109.31,237.801 2109.87,236.355 2110.44,236.066 2111.01,234.613 2111.58,232.284 2112.15,229.387 2112.72,227.787 2113.29,229.153 2113.85,229.256 2114.42,229.531 2114.99,231.779 2115.56,230.832 2116.13,231.825 2116.7,229.894 2117.26,230.23 2117.83,229.55 2118.4,229.731 2118.97,229.081 2119.54,230.368 2120.11,229.451 2120.67,229.883 2121.24,228.002 2121.81,230.417 2122.38,231.595 2122.95,231.517 2123.52,230.434 2124.08,229.591 2124.65,230.966 2125.22,231.053 2125.79,232.405 2126.36,230.499 2126.93,230.87 2127.49,233.257 2128.06,232.289 2128.63,232.233 2129.2,233.689 2129.77,232.761 2130.34,234.119 2130.9,233.046 2131.47,233.038 2132.04,233.179 2132.61,232.359 2133.18,231.326 2133.75,232.532 2134.31,232.781 2134.88,233.87 2135.45,234.01 2136.02,232.864 2136.59,236.012 2137.16,237.784 2137.72,237.651 2138.29,237.487 2138.86,239.072 2139.43,238.682 2140,238.294 2140.57,236.695 2141.13,235.387 2141.7,236.362 2142.27,237.196 2142.84,239.01 2143.41,241.851 2143.98,241.051 2144.54,241.412 2145.11,240.874 2145.68,239.293 2146.25,231.518 2146.82,232.46 2147.39,233.449 2147.95,234.399 2148.52,235.351 2149.09,234.017 2149.66,231.984 2150.23,232.84 2150.8,231.964 2151.36,234.173 2151.93,235.086 2152.5,236.812 2153.07,235.651 2153.64,237.514 2154.21,237.991 2154.77,237.61 2155.34,238.114 2155.91,237.623 2156.48,236.164 2157.05,236.882 2157.62,235.421 2158.18,234.186 2158.75,235.248 2159.32,233.985 2159.89,232.583 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.027\n  with uncertainty of ± 0.002405106677506687\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01786 ± (0.00253172, 0.00249907) (MC)\n  95% confidence interval: [-4.02256, -4.01268]) (MC)\n  linear error propagation: -4.01779 ± 0.00252634\n  |δ_y| = |0.00159874| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017859828652989, val_l = 0.004696420513114141, val_u = 0.005175047622548945)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip670\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip671\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip670)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip672\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.54 2211.02,1145.54 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,982.575 2211.02,982.575 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,819.609 2211.02,819.609 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,656.644 2211.02,656.644 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,493.678 2211.02,493.678 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,330.713 2211.02,330.713 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.54 365.751,1145.54 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,982.575 365.751,982.575 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,819.609 365.751,819.609 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,656.644 365.751,656.644 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,493.678 365.751,493.678 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,330.713 365.751,330.713 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M298.909 1131.34 Q295.298 1131.34 293.469 1134.9 Q291.664 1138.45 291.664 1145.57 Q291.664 1152.68 293.469 1156.25 Q295.298 1159.79 298.909 1159.79 Q302.543 1159.79 304.349 1156.25 Q306.177 1152.68 306.177 1145.57 Q306.177 1138.45 304.349 1134.9 Q302.543 1131.34 298.909 1131.34 M298.909 1127.64 Q304.719 1127.64 307.775 1132.24 Q310.853 1136.82 310.853 1145.57 Q310.853 1154.3 307.775 1158.91 Q304.719 1163.49 298.909 1163.49 Q293.099 1163.49 290.02 1158.91 Q286.964 1154.3 286.964 1145.57 Q286.964 1136.82 290.02 1132.24 Q293.099 1127.64 298.909 1127.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M259.557 995.92 L267.196 995.92 L267.196 969.554 L258.886 971.221 L258.886 966.961 L267.15 965.295 L271.826 965.295 L271.826 995.92 L279.465 995.92 L279.465 999.855 L259.557 999.855 L259.557 995.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M298.909 968.373 Q295.298 968.373 293.469 971.938 Q291.664 975.48 291.664 982.609 Q291.664 989.716 293.469 993.281 Q295.298 996.822 298.909 996.822 Q302.543 996.822 304.349 993.281 Q306.177 989.716 306.177 982.609 Q306.177 975.48 304.349 971.938 Q302.543 968.373 298.909 968.373 M298.909 964.67 Q304.719 964.67 307.775 969.276 Q310.853 973.859 310.853 982.609 Q310.853 991.336 307.775 995.943 Q304.719 1000.53 298.909 1000.53 Q293.099 1000.53 290.02 995.943 Q286.964 991.336 286.964 982.609 Q286.964 973.859 290.02 969.276 Q293.099 964.67 298.909 964.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M262.775 832.954 L279.094 832.954 L279.094 836.889 L257.15 836.889 L257.15 832.954 Q259.812 830.2 264.395 825.57 Q269.002 820.917 270.182 819.575 Q272.428 817.051 273.307 815.315 Q274.21 813.556 274.21 811.866 Q274.21 809.112 272.266 807.376 Q270.344 805.639 267.242 805.639 Q265.043 805.639 262.59 806.403 Q260.159 807.167 257.381 808.718 L257.381 803.996 Q260.205 802.862 262.659 802.283 Q265.113 801.704 267.15 801.704 Q272.52 801.704 275.715 804.389 Q278.909 807.075 278.909 811.565 Q278.909 813.695 278.099 815.616 Q277.312 817.514 275.205 820.107 Q274.627 820.778 271.525 823.996 Q268.423 827.19 262.775 832.954 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M298.909 805.408 Q295.298 805.408 293.469 808.973 Q291.664 812.514 291.664 819.644 Q291.664 826.75 293.469 830.315 Q295.298 833.857 298.909 833.857 Q302.543 833.857 304.349 830.315 Q306.177 826.75 306.177 819.644 Q306.177 812.514 304.349 808.973 Q302.543 805.408 298.909 805.408 M298.909 801.704 Q304.719 801.704 307.775 806.311 Q310.853 810.894 310.853 819.644 Q310.853 828.371 307.775 832.977 Q304.719 837.561 298.909 837.561 Q293.099 837.561 290.02 832.977 Q286.964 828.371 286.964 819.644 Q286.964 810.894 290.02 806.311 Q293.099 801.704 298.909 801.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M272.914 655.29 Q276.27 656.007 278.145 658.276 Q280.043 660.544 280.043 663.878 Q280.043 668.993 276.525 671.794 Q273.006 674.595 266.525 674.595 Q264.349 674.595 262.034 674.155 Q259.742 673.739 257.289 672.882 L257.289 668.368 Q259.233 669.503 261.548 670.081 Q263.863 670.66 266.386 670.66 Q270.784 670.66 273.076 668.924 Q275.39 667.188 275.39 663.878 Q275.39 660.822 273.238 659.109 Q271.108 657.373 267.289 657.373 L263.261 657.373 L263.261 653.53 L267.474 653.53 Q270.923 653.53 272.752 652.165 Q274.58 650.776 274.58 648.183 Q274.58 645.521 272.682 644.109 Q270.807 642.674 267.289 642.674 Q265.367 642.674 263.168 643.091 Q260.969 643.507 258.33 644.387 L258.33 640.22 Q260.992 639.48 263.307 639.109 Q265.645 638.739 267.705 638.739 Q273.029 638.739 276.131 641.169 Q279.233 643.577 279.233 647.697 Q279.233 650.567 277.59 652.558 Q275.946 654.526 272.914 655.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M298.909 642.443 Q295.298 642.443 293.469 646.007 Q291.664 649.549 291.664 656.679 Q291.664 663.785 293.469 667.35 Q295.298 670.891 298.909 670.891 Q302.543 670.891 304.349 667.35 Q306.177 663.785 306.177 656.679 Q306.177 649.549 304.349 646.007 Q302.543 642.443 298.909 642.443 M298.909 638.739 Q304.719 638.739 307.775 643.345 Q310.853 647.929 310.853 656.679 Q310.853 665.405 307.775 670.012 Q304.719 674.595 298.909 674.595 Q293.099 674.595 290.02 670.012 Q286.964 665.405 286.964 656.679 Q286.964 647.929 290.02 643.345 Q293.099 638.739 298.909 638.739 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M271.594 480.472 L259.789 498.921 L271.594 498.921 L271.594 480.472 M270.367 476.398 L276.247 476.398 L276.247 498.921 L281.177 498.921 L281.177 502.81 L276.247 502.81 L276.247 510.958 L271.594 510.958 L271.594 502.81 L255.992 502.81 L255.992 498.296 L270.367 476.398 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M298.909 479.477 Q295.298 479.477 293.469 483.042 Q291.664 486.584 291.664 493.713 Q291.664 500.82 293.469 504.384 Q295.298 507.926 298.909 507.926 Q302.543 507.926 304.349 504.384 Q306.177 500.82 306.177 493.713 Q306.177 486.584 304.349 483.042 Q302.543 479.477 298.909 479.477 M298.909 475.773 Q304.719 475.773 307.775 480.38 Q310.853 484.963 310.853 493.713 Q310.853 502.44 307.775 507.046 Q304.719 511.63 298.909 511.63 Q293.099 511.63 290.02 507.046 Q286.964 502.44 286.964 493.713 Q286.964 484.963 290.02 480.38 Q293.099 475.773 298.909 475.773 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M258.793 313.433 L277.15 313.433 L277.15 317.368 L263.076 317.368 L263.076 325.84 Q264.094 325.493 265.113 325.331 Q266.131 325.146 267.15 325.146 Q272.937 325.146 276.316 328.317 Q279.696 331.488 279.696 336.905 Q279.696 342.484 276.224 345.586 Q272.752 348.664 266.432 348.664 Q264.256 348.664 261.988 348.294 Q259.742 347.924 257.335 347.183 L257.335 342.484 Q259.418 343.618 261.641 344.174 Q263.863 344.729 266.34 344.729 Q270.344 344.729 272.682 342.623 Q275.02 340.516 275.02 336.905 Q275.02 333.294 272.682 331.188 Q270.344 329.081 266.34 329.081 Q264.465 329.081 262.59 329.498 Q260.738 329.914 258.793 330.794 L258.793 313.433 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M298.909 316.512 Q295.298 316.512 293.469 320.076 Q291.664 323.618 291.664 330.748 Q291.664 337.854 293.469 341.419 Q295.298 344.961 298.909 344.961 Q302.543 344.961 304.349 341.419 Q306.177 337.854 306.177 330.748 Q306.177 323.618 304.349 320.076 Q302.543 316.512 298.909 316.512 M298.909 312.808 Q304.719 312.808 307.775 317.414 Q310.853 321.998 310.853 330.748 Q310.853 339.475 307.775 344.081 Q304.719 348.664 298.909 348.664 Q293.099 348.664 290.02 344.081 Q286.964 339.475 286.964 330.748 Q286.964 321.998 290.02 317.414 Q293.099 312.808 298.909 312.808 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip672)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1152.21 400.199,1035.4 400.786,928.31 401.372,829.836 401.958,743.625 402.545,662.64 403.131,585.01 403.718,516.044 404.304,451.645 404.891,395.054 405.477,343.835 406.063,297.789 406.65,256.58 407.236,219.895 407.823,260.866 408.409,293.367 408.995,379.628 409.582,348.334 410.168,319.349 410.755,293.167 411.341,271.873 411.927,253.459 412.514,238.183 413.1,263.371 413.687,285.776 414.273,274.059 414.86,265.123 415.446,258.346 416.032,253.399 416.619,250.291 417.205,296.986 417.792,296.256 418.378,317.648 418.964,318.215 419.551,320.59 420.137,324.438 420.724,329.244 421.31,350.453 421.896,385.155 422.483,418.759 423.069,424.734 423.656,443.147 424.242,449.686 424.829,488.442 425.415,495.808 426.001,503.722 426.588,511.781 427.174,529.506 427.761,537.546 428.347,562.598 428.933,579.716 429.52,595.413 430.106,611.582 430.693,620.411 431.279,635.937 431.865,658.004 432.452,672.237 433.038,686.324 433.625,694.699 434.211,708.728 434.798,737.654 435.384,749.798 435.97,761.584 436.557,773.434 437.143,789.15 437.73,796.178 438.316,815.563 438.902,822.469 439.489,829.757 440.075,848.454 440.662,854.882 441.248,872.006 441.835,884.731 442.421,897.593 443.007,903.28 443.594,914.98 444.18,920.098 444.767,940.61 445.353,951.39 445.939,964.497 446.526,979.886 447.112,989.356 447.699,993.312 448.285,997.273 448.871,1004.15 449.458,1008.17 450.044,1012.37 450.631,1023.89 451.217,1029.78 451.804,1038.05 452.39,1048.18 452.976,1050.89 453.563,1056.11 454.149,1061.51 454.736,1068.67 455.322,1073.67 455.908,1085.04 456.495,1087.58 457.081,1092.21 457.668,1096.5 458.254,1100.82 458.84,1107.6 459.427,1115.44 460.013,1117.33 460.6,1123.13 461.186,1125.08 461.773,1126.95 462.359,1127.34 462.945,1131.36 463.532,1136.98 464.118,1144.15 464.705,1149.55 465.291,1149.1 465.877,1152.4 466.464,1153.94 467.05,1159.04 467.637,1163.88 468.223,1170.09 468.809,1172.79 469.396,1177.22 469.982,1179.52 470.569,1186.71 471.155,1190.1 471.742,1190.01 472.328,1190.37 472.914,1192.63 473.501,1193.03 474.087,1194.93 474.674,1193.6 475.26,1195.37 475.846,1197.2 476.433,1199.05 477.019,1202.52 477.606,1205.88 478.192,1206.01 478.778,1207.75 479.365,1205.89 479.951,1207.28 480.538,1210.54 481.124,1211.99 481.711,1213.08 482.297,1211.31 482.883,1211.36 483.47,1213.03 484.056,1216.16 484.643,1217.37 485.229,1220.26 485.815,1217.06 486.402,1218.66 486.988,1221.24 487.575,1222.5 488.161,1221.93 488.748,1221.94 489.334,1223.04 489.92,1224.11 490.507,1226.76 491.093,1229.14 491.68,1229.94 492.266,1231.11 492.852,1231.78 493.439,1233.99 494.025,1234.4 494.612,1233.67 495.198,1231.63 495.784,1231.16 496.371,1231.95 496.957,1231.53 497.544,1230.97 498.13,1232.1 498.717,1230.36 499.303,1230.09 499.889,1230.84 500.476,1232.35 501.062,1233.4 501.649,1233.28 502.235,1233.22 502.821,1238.42 503.408,1231.95 503.994,1231.85 504.581,1230.23 505.167,1227.43 505.753,1229 506.34,1229.15 506.926,1230.67 507.513,1234.33 508.099,1234.36 508.686,1232.87 509.272,1232.8 509.858,1232.39 510.445,1229.79 511.031,1233.86 511.618,1233.87 512.204,1236.9 512.79,1238.03 513.377,1236.33 513.963,1238.51 514.55,1236.87 515.136,1238.08 515.722,1238.03 516.309,1238.68 516.895,1238.22 517.482,1239.19 518.068,1240.16 518.655,1243.8 519.241,1243.36 519.827,1241.11 520.414,1243.18 521,1242.14 521.587,1244.25 522.173,1246.4 522.759,1249.88 523.346,1250.37 523.932,1249.54 524.519,1248.51 525.105,1250.53 525.691,1248.08 526.278,1247.19 526.864,1244.91 527.451,1242.71 528.037,1240.61 528.624,1241.22 529.21,1242.01 529.796,1245.5 530.383,1245.85 530.969,1243.55 531.556,1244.06 532.142,1243.4 532.728,1245.24 533.315,1244.55 533.901,1243.74 534.488,1244.5 535.074,1242.43 535.661,1243.15 536.247,1245.07 536.833,1244.59 537.42,1242.07 538.006,1238.57 538.593,1240.91 539.179,1243.04 539.765,1239.51 540.352,1241.71 540.938,1243.93 541.525,1244.39 542.111,1245.03 542.697,1244.03 543.284,1247.06 543.87,1250.09 544.457,1248.95 545.043,1245.36 545.63,1244.37 546.216,1242.11 546.802,1241.47 547.389,1239.13 547.975,1239.76 548.562,1236.49 549.148,1235.93 549.734,1235.28 550.321,1233.72 550.907,1235.97 551.494,1235.68 552.08,1243.34 552.666,1242.86 553.253,1241.83 553.839,1241.27 554.426,1240.7 555.012,1241.46 555.599,1242 556.185,1242.42 556.771,1241.7 557.358,1241 557.944,1240.05 558.531,1239.15 559.117,1234.46 559.703,1232.8 560.29,1232.59 560.876,1230.86 561.463,1234.4 562.049,1236.69 562.635,1236.23 563.222,1235.4 563.808,1235.31 564.395,1233.18 564.981,1236.63 565.568,1234.44 566.154,1233.97 566.74,1236.13 567.327,1234.25 567.913,1233.77 568.5,1234.46 569.086,1233.92 569.672,1231.96 570.259,1228.57 570.845,1227.03 571.432,1229.22 572.018,1229.25 572.605,1229.16 573.191,1229.03 573.777,1229.13 574.364,1227.64 574.95,1227.47 575.537,1229.93 576.123,1229.96 576.709,1232.45 577.296,1232.6 577.882,1229.65 578.469,1230.8 579.055,1233.02 579.641,1232.38 580.228,1230.72 580.814,1229.23 581.401,1232.01 581.987,1231.52 582.574,1234.02 583.16,1232.42 583.746,1233.09 584.333,1231.22 584.919,1232.19 585.506,1231.61 586.092,1231.15 586.678,1232.2 587.265,1231.63 587.851,1232.7 588.438,1232.34 589.024,1232.03 589.61,1230.34 590.197,1231.46 590.783,1233.63 591.37,1232.11 591.956,1234.28 592.543,1235.11 593.129,1235.75 593.715,1236.18 594.302,1234.02 594.888,1233.44 595.475,1230.12 596.061,1229.85 596.647,1230.91 597.234,1230.56 597.82,1231.47 598.407,1234.92 598.993,1230.27 599.579,1231.45 600.166,1229.22 600.752,1227.4 601.339,1229.56 601.925,1232.85 602.512,1232.15 603.098,1227.81 603.684,1227.58 604.271,1224.96 604.857,1226.17 605.444,1227.53 606.03,1230.04 606.616,1228.34 607.203,1227.98 607.789,1227.91 608.376,1227.88 608.962,1228.65 609.548,1229.77 610.135,1229.62 610.721,1229.18 611.308,1231.43 611.894,1229.49 612.481,1227.41 613.067,1228.53 613.653,1226.98 614.24,1226.7 614.826,1225.23 615.413,1223.87 615.999,1222.5 616.585,1222.21 617.172,1223.85 617.758,1225.19 618.345,1226.36 618.931,1228.66 619.518,1229.64 620.104,1230.47 620.69,1229.94 621.277,1227.87 621.863,1230.42 622.45,1228.38 623.036,1230.55 623.622,1228.6 624.209,1226.66 624.795,1225 625.382,1222.04 625.968,1221.92 626.554,1221.85 627.141,1220.56 627.727,1219.17 628.314,1220.59 628.9,1220.59 629.487,1220.85 630.073,1220.43 630.659,1220.11 631.246,1218.43 631.832,1215.91 632.419,1218.93 633.005,1218.7 633.591,1214.86 634.178,1212.28 634.764,1215.08 635.351,1213.82 635.937,1215.28 636.523,1214.06 637.11,1216.14 637.696,1214.91 638.283,1213.92 638.869,1215.5 639.456,1215.45 640.042,1215.79 640.628,1216.17 641.215,1216.63 641.801,1216.84 642.388,1216.97 642.974,1216.94 643.56,1219.51 644.147,1218.24 644.733,1215.79 645.32,1214.76 645.906,1215.15 646.492,1216.95 647.079,1215.78 647.665,1217.51 648.252,1217.4 648.838,1218.82 649.425,1221.52 650.011,1218.84 650.597,1219.09 651.184,1219.37 651.77,1219.39 652.357,1217.94 652.943,1219.17 653.529,1217.58 654.116,1220.26 654.702,1221.44 655.289,1221.47 655.875,1217.43 656.462,1219.26 657.048,1221.81 657.634,1221.76 658.221,1224.24 658.807,1224.13 659.394,1223.73 659.98,1223.43 660.566,1223.24 661.153,1223.14 661.739,1224.49 662.326,1224.49 662.912,1224.38 663.498,1225.56 664.085,1223.68 664.671,1223.23 665.258,1224.11 665.844,1222.6 666.431,1223.37 667.017,1223.27 667.603,1224.33 668.19,1227.96 668.776,1228.73 669.363,1227.8 669.949,1227.3 670.535,1224 671.122,1223.34 671.708,1223.14 672.295,1222.9 672.881,1222.62 673.467,1221.07 674.054,1219.72 674.64,1218.21 675.227,1216.74 675.813,1220.63 676.4,1217.55 676.986,1218.46 677.572,1219.63 678.159,1219.38 678.745,1216.67 679.332,1219.3 679.918,1216.67 680.504,1213.96 681.091,1215.24 681.677,1215.5 682.264,1215.6 682.85,1214.81 683.436,1217.55 684.023,1221.74 684.609,1219.31 685.196,1219.23 685.782,1216.51 686.369,1218.19 686.955,1218.07 687.541,1219.34 688.128,1217.87 688.714,1217.92 689.301,1217.85 689.887,1219.41 690.473,1220.72 691.06,1223.21 691.646,1221.54 692.233,1222.59 692.819,1222.42 693.405,1222.03 693.992,1223.1 694.578,1224.15 695.165,1225.01 695.751,1227.53 696.338,1227.02 696.924,1232.07 697.51,1231.25 698.097,1230.67 698.683,1227.29 699.27,1224.11 699.856,1223.74 700.442,1222.09 701.029,1224.46 701.615,1225.24 702.202,1224.78 702.788,1221.82 703.375,1218.82 703.961,1217.64 704.547,1217.55 705.134,1216.49 705.72,1217.69 706.307,1217.68 706.893,1217.73 707.479,1217.96 708.066,1219.1 708.652,1218.9 709.239,1217.35 709.825,1217.27 710.411,1217.37 710.998,1214.61 711.584,1214.74 712.171,1213.39 712.757,1212.32 713.344,1212.3 713.93,1213.86 714.516,1216.42 715.103,1215.43 715.689,1216.62 716.276,1216.37 716.862,1217.83 717.448,1217.66 718.035,1216.25 718.621,1217.41 719.208,1217.35 719.794,1216.98 720.38,1216.72 720.967,1215.42 721.553,1215.43 722.14,1215.5 722.726,1214.14 723.313,1215.56 723.899,1216.92 724.485,1216.77 725.072,1215.44 725.658,1215.74 726.245,1213.21 726.831,1214.72 727.417,1215.79 728.004,1213.13 728.59,1215.84 729.177,1217.37 729.763,1217.01 730.349,1218.09 730.936,1218.09 731.522,1219.33 732.109,1216.46 732.695,1220.39 733.282,1221.31 733.868,1220.98 734.454,1220.82 735.041,1217.67 735.627,1217.9 736.214,1219.01 736.8,1214.92 737.386,1215.04 737.973,1216.16 738.559,1214.9 739.146,1216.32 739.732,1216.26 740.318,1214.79 740.905,1214.64 741.491,1215.92 742.078,1215.81 742.664,1215.92 743.251,1214.73 743.837,1217.45 744.423,1220.09 745.01,1222.41 745.596,1223.38 746.183,1223.19 746.769,1220.31 747.355,1219.97 747.942,1218.44 748.528,1218.29 749.115,1215.53 749.701,1212.89 750.288,1213.01 750.874,1213.3 751.46,1214.78 752.047,1212.04 752.633,1210.77 753.22,1210.94 753.806,1211.2 754.392,1211.62 754.979,1210.47 755.565,1209.57 756.152,1211.08 756.738,1211.04 757.324,1209.94 757.911,1210.7 758.497,1213.56 759.084,1213.95 759.67,1216.68 760.257,1218.1 760.843,1217.85 761.429,1217.68 762.016,1223.02 762.602,1223.93 763.189,1221.98 763.775,1221.51 764.361,1221.25 764.948,1219.62 765.534,1219.5 766.121,1221.77 766.707,1221.7 767.293,1225.42 767.88,1224.89 768.466,1222.67 769.053,1218.5 769.639,1218.23 770.226,1217.97 770.812,1216.75 771.398,1215.29 771.985,1215.4 772.571,1213.95 773.158,1212.78 773.744,1212.93 774.33,1213.19 774.917,1214.46 775.503,1213.05 776.09,1211.72 776.676,1211.69 777.262,1213.27 777.849,1216.08 778.435,1217.26 779.022,1218.49 779.608,1215.55 780.195,1215.51 780.781,1216.79 781.367,1215.4 781.954,1212.68 782.54,1215.3 783.127,1216.35 783.713,1219.96 784.299,1218.21 784.886,1219.34 785.472,1216.24 786.059,1218.78 786.645,1215.82 787.232,1214.24 787.818,1215.57 788.404,1215.3 788.991,1213.65 789.577,1211.23 790.164,1209.87 790.75,1208.7 791.336,1207.83 791.923,1209.55 792.509,1210.97 793.096,1212.4 793.682,1215.05 794.268,1213.95 794.855,1212.46 795.441,1214.04 796.028,1212.83 796.614,1215.21 797.201,1217.66 797.787,1216 798.373,1216.99 798.96,1218.12 799.546,1220.66 800.133,1220.48 800.719,1218.66 801.305,1214.21 801.892,1214.38 802.478,1215.84 803.065,1212.85 803.651,1212.7 804.237,1212.81 804.824,1214.07 805.41,1212.64 805.997,1211.66 806.583,1211.93 807.17,1213.42 807.756,1214.73 808.342,1213.57 808.929,1215.03 809.515,1213.72 810.102,1213.6 810.688,1212.43 811.274,1212.39 811.861,1213.86 812.447,1213.7 813.034,1216.26 813.62,1216.09 814.206,1214.44 814.793,1217.31 815.379,1219.88 815.966,1218.22 816.552,1219.32 817.139,1220.5 817.725,1218.91 818.311,1218.64 818.898,1217.05 819.484,1217.09 820.071,1218.25 820.657,1217.93 821.243,1220.4 821.83,1214.81 822.416,1212.3 823.003,1213.71 823.589,1213.73 824.175,1213.56 824.762,1215.96 825.348,1217.2 825.935,1216 826.521,1218.32 827.108,1219.37 827.694,1218.79 828.28,1219.95 828.867,1219.35 829.453,1220.63 830.04,1220.39 830.626,1218.7 831.212,1218.48 831.799,1216.68 832.385,1220.41 832.972,1218.71 833.558,1216.89 834.145,1212.95 834.731,1211.67 835.317,1208.91 835.904,1209.42 836.49,1213.66 837.077,1214.94 837.663,1212.12 838.249,1212.28 838.836,1208.24 839.422,1208.39 840.009,1208.57 840.595,1207.61 841.181,1207.73 841.768,1205.39 842.354,1209.53 842.941,1208.17 843.527,1208.48 844.114,1209.9 844.7,1210.01 845.286,1210.07 845.873,1210.26 846.459,1214.48 847.046,1217.02 847.632,1215.52 848.218,1219.39 848.805,1220.49 849.391,1221.32 849.978,1222.34 850.564,1220.06 851.15,1218.29 851.737,1220.33 852.323,1219.83 852.91,1221.98 853.496,1218.65 854.083,1217.16 854.669,1216.84 855.255,1211.3 855.842,1208.62 856.428,1206.2 857.015,1205.39 857.601,1207.3 858.187,1209.17 858.774,1210.78 859.36,1209.64 859.947,1210.02 860.533,1214.01 861.119,1211.48 861.706,1211.66 862.292,1211.78 862.879,1212.74 863.465,1211.46 864.052,1212.74 864.638,1213.76 865.224,1216.49 865.811,1216.24 866.397,1215.94 866.984,1215.5 867.57,1213.88 868.156,1213.93 868.743,1213.89 869.329,1213.84 869.916,1213.32 870.502,1214.46 871.089,1211.88 871.675,1213.28 872.261,1213.1 872.848,1212.99 873.434,1211.84 874.021,1211.86 874.607,1211.82 875.193,1211.93 875.78,1210.76 876.366,1213.57 876.953,1212.41 877.539,1212.23 878.125,1212.35 878.712,1215.13 879.298,1220.09 879.885,1217.21 880.471,1218.09 881.058,1216.36 881.644,1218.76 882.23,1219.9 882.817,1219.65 883.403,1219.19 883.99,1217.73 884.576,1217.1 885.162,1213.23 885.749,1211.91 886.335,1210.34 886.922,1210.63 887.508,1210.72 888.094,1208.36 888.681,1210.75 889.267,1212.22 889.854,1213.49 890.44,1213.67 891.027,1212.19 891.613,1213.38 892.199,1214.45 892.786,1214.5 893.372,1220.99 893.959,1220.51 894.545,1221.1 895.131,1219.55 895.718,1217.78 896.304,1214.81 896.891,1213.18 897.477,1211.75 898.063,1212.97 898.65,1219.68 899.236,1216.49 899.823,1214.83 900.409,1210.68 900.996,1209.22 901.582,1206.71 902.168,1208.4 902.755,1208.45 903.341,1210.12 903.928,1208.88 904.514,1209.2 905.1,1207.96 905.687,1206.81 906.273,1205.79 906.86,1207.6 907.446,1210.52 908.032,1209.23 908.619,1209.61 909.205,1208.34 909.792,1208.73 910.378,1204.79 910.965,1205.21 911.551,1205.67 912.137,1206.05 912.724,1206.39 913.31,1209.53 913.897,1213.63 914.483,1216.27 915.069,1216.09 915.656,1216.04 916.242,1215.65 916.829,1213.8 917.415,1213.65 918.002,1213.54 918.588,1217.33 919.174,1218.32 919.761,1217.95 920.347,1217.85 920.934,1216.51 921.52,1214.58 922.106,1214.39 922.693,1214.36 923.279,1213.92 923.866,1215.14 924.452,1215.07 925.038,1213.72 925.625,1213.81 926.211,1216.35 926.798,1214.75 927.384,1215.97 927.971,1215.95 928.557,1215.78 929.143,1214.2 929.73,1211.48 930.316,1210.04 930.903,1211.44 931.489,1214.25 932.075,1212.74 932.662,1213.74 933.248,1213.57 933.835,1215.15 934.421,1213.63 935.007,1214.66 935.594,1215.54 936.18,1213.83 936.767,1215.08 937.353,1217.72 937.94,1216.07 938.526,1216.08 939.112,1217.17 939.699,1215.23 940.285,1216.53 940.872,1217.73 941.458,1216.16 942.044,1213.27 942.631,1210.54 943.217,1210.71 943.804,1208.28 944.39,1208.52 944.976,1208.63 945.563,1205.89 946.149,1207.51 946.736,1211.79 947.322,1210.71 947.909,1209.32 948.495,1206.67 949.081,1205.66 949.668,1204.68 950.254,1203.88 950.841,1202.89 951.427,1203.46 952.013,1201.36 952.6,1204.47 953.186,1207.48 953.773,1207.69 954.359,1209.19 954.945,1209.45 955.532,1209.79 956.118,1210.32 956.705,1213.03 957.291,1210.28 957.878,1211.66 958.464,1213.13 959.05,1212.89 959.637,1211.78 960.223,1211.84 960.81,1214.46 961.396,1214.26 961.982,1214.05 962.569,1214.1 963.155,1214.27 963.742,1216.59 964.328,1216.24 964.915,1217.48 965.501,1215.85 966.087,1213.09 966.674,1213 967.26,1212.96 967.847,1210.37 968.433,1211.66 969.019,1211.64 969.606,1210.65 970.192,1209.56 970.779,1209.69 971.365,1209.85 971.951,1210.1 972.538,1214.04 973.124,1213.8 973.711,1207.04 974.297,1206.12 974.884,1206.47 975.47,1206.81 976.056,1208.09 976.643,1207.94 977.229,1210.72 977.816,1212.14 978.402,1212.34 978.988,1211.07 979.575,1213.81 980.161,1210.89 980.748,1208.39 981.334,1204.64 981.92,1203.67 982.507,1201.48 983.093,1196.48 983.68,1195.72 984.266,1196.73 984.853,1201.61 985.439,1202.14 986.025,1201.25 986.612,1201.78 987.198,1201.39 987.785,1205.99 988.371,1205.02 988.957,1204.1 989.544,1201.97 990.13,1202.48 990.717,1203.1 991.303,1200.95 991.889,1202.82 992.476,1204.66 993.062,1205.02 993.649,1205.38 994.235,1209.99 994.822,1210.31 995.408,1209.09 995.994,1209.18 996.581,1214.64 997.167,1217.14 997.754,1216.8 998.34,1216.6 998.926,1214.05 999.513,1212.74 1000.1,1212.79 1000.69,1211.37 1001.27,1211.14 1001.86,1211.19 1002.44,1212.65 1003.03,1211.41 1003.62,1215.82 1004.2,1216.63 1004.79,1214.68 1005.38,1216.97 1005.96,1217.92 1006.55,1217.62 1007.14,1215.93 1007.72,1215.89 1008.31,1215.73 1008.9,1214.44 1009.48,1215.83 1010.07,1218.04 1010.65,1216.4 1011.24,1216.4 1011.83,1218.78 1012.41,1221.22 1013,1222.15 1013.59,1218.95 1014.17,1219.78 1014.76,1219.28 1015.35,1221.2 1015.93,1218.04 1016.52,1217.41 1017.11,1216.87 1017.69,1213.94 1018.28,1216.45 1018.86,1218.67 1019.45,1215.56 1020.04,1212.58 1020.62,1213.87 1021.21,1216.19 1021.8,1213.48 1022.38,1210.73 1022.97,1210.74 1023.56,1206.37 1024.14,1209.18 1024.73,1210.5 1025.32,1211.75 1025.9,1209.27 1026.49,1209.43 1027.07,1205.53 1027.66,1208.51 1028.25,1206.33 1028.83,1205.16 1029.42,1205.37 1030.01,1204.5 1030.59,1204.99 1031.18,1201.14 1031.77,1201.68 1032.35,1204.63 1032.94,1207.74 1033.52,1210.23 1034.11,1212.81 1034.7,1212.47 1035.28,1212.19 1035.87,1213.58 1036.46,1212.17 1037.04,1213.44 1037.63,1215.62 1038.22,1218.04 1038.8,1216.46 1039.39,1216.06 1039.98,1215.79 1040.56,1216.82 1041.15,1218 1041.73,1217.69 1042.32,1216.39 1042.91,1217.24 1043.49,1217.02 1044.08,1216.71 1044.67,1217.86 1045.25,1219.01 1045.84,1219.97 1046.43,1219.49 1047.01,1224.5 1047.6,1224.92 1048.19,1224.21 1048.77,1224.91 1049.36,1224.03 1049.94,1223.34 1050.53,1220.24 1051.12,1219.83 1051.7,1217.92 1052.29,1217.54 1052.88,1218.44 1053.46,1216.61 1054.05,1217.44 1054.64,1218.32 1055.22,1214.3 1055.81,1212.88 1056.39,1212.73 1056.98,1211.51 1057.57,1211.46 1058.15,1210.45 1058.74,1210.37 1059.33,1205.01 1059.91,1205.54 1060.5,1205.85 1061.09,1204.89 1061.67,1206.37 1062.26,1205.28 1062.85,1207.11 1063.43,1207.2 1064.02,1210.09 1064.6,1208.86 1065.19,1207.61 1065.78,1205.29 1066.36,1204.46 1066.95,1203.55 1067.54,1206.28 1068.12,1205.19 1068.71,1201.8 1069.3,1201.05 1069.88,1201.87 1070.47,1203.57 1071.06,1204.07 1071.64,1203 1072.23,1203.33 1072.81,1202.52 1073.4,1204.77 1073.99,1205.25 1074.57,1205.3 1075.16,1207.1 1075.75,1211.19 1076.33,1211.15 1076.92,1212.42 1077.51,1213.71 1078.09,1210.83 1078.68,1210.99 1079.26,1210.95 1079.85,1212.25 1080.44,1212.34 1081.02,1213.88 1081.61,1214.96 1082.2,1214.79 1082.78,1216.08 1083.37,1216.07 1083.96,1214.45 1084.54,1213.02 1085.13,1215.94 1085.72,1215.66 1086.3,1215.68 1086.89,1212.86 1087.47,1215.53 1088.06,1214.05 1088.65,1214.98 1089.23,1214.86 1089.82,1218.69 1090.41,1220.96 1090.99,1218.75 1091.58,1219.38 1092.17,1217.79 1092.75,1217.56 1093.34,1219.96 1093.93,1218.13 1094.51,1217.65 1095.1,1218.76 1095.68,1218.78 1096.27,1218.67 1096.86,1216.82 1097.44,1216.42 1098.03,1213.49 1098.62,1213.34 1099.2,1214.83 1099.79,1210.58 1100.38,1210.83 1100.96,1209.6 1101.55,1209.63 1102.14,1211.14 1102.72,1211.51 1103.31,1212.54 1103.89,1213.78 1104.48,1216.24 1105.07,1215.67 1105.65,1215.33 1106.24,1215.26 1106.83,1213.68 1107.41,1212.12 1108,1209.34 1108.59,1209.59 1109.17,1209.5 1109.76,1206.94 1110.34,1207.47 1110.93,1208.86 1111.52,1204.9 1112.1,1203.9 1112.69,1203.06 1113.28,1206.25 1113.86,1204.03 1114.45,1207.33 1115.04,1210.19 1115.62,1210.39 1116.21,1213.22 1116.8,1216.1 1117.38,1217.14 1117.97,1216.82 1118.55,1212.5 1119.14,1210.87 1119.73,1210.88 1120.31,1207.15 1120.9,1207.31 1121.49,1207.67 1122.07,1210.59 1122.66,1209.05 1123.25,1209.23 1123.83,1204.03 1124.42,1204.13 1125.01,1205.89 1125.59,1204.7 1126.18,1203.73 1126.76,1201.44 1127.35,1201.95 1127.94,1205.16 1128.52,1205.29 1129.11,1208.11 1129.7,1204.04 1130.28,1204.28 1130.87,1204.75 1131.46,1204.98 1132.04,1208.09 1132.63,1206.79 1133.21,1206.84 1133.8,1207.1 1134.39,1204.58 1134.97,1206.05 1135.56,1207.58 1136.15,1204.81 1136.73,1205.3 1137.32,1205.48 1137.91,1206.05 1138.49,1206.35 1139.08,1205 1139.67,1204.12 1140.25,1205.66 1140.84,1207.42 1141.42,1208.98 1142.01,1210.38 1142.6,1210.71 1143.18,1210.86 1143.77,1213.55 1144.36,1212.3 1144.94,1212.26 1145.53,1213.77 1146.12,1213.91 1146.7,1212.68 1147.29,1212.84 1147.88,1212.77 1148.46,1211.54 1149.05,1212.96 1149.63,1215.46 1150.22,1218.11 1150.81,1216.12 1151.39,1215.69 1151.98,1214.35 1152.57,1215.59 1153.15,1219.28 1153.74,1220.08 1154.33,1218.09 1154.91,1217.87 1155.5,1216.23 1156.09,1214.53 1156.67,1214.39 1157.26,1212.53 1157.84,1212.23 1158.43,1214.98 1159.02,1216.13 1159.6,1217 1160.19,1215.28 1160.78,1213.87 1161.36,1212.95 1161.95,1214.06 1162.54,1212.35 1163.12,1213.64 1163.71,1213.41 1164.29,1213.37 1164.88,1212.1 1165.47,1212.02 1166.05,1208.32 1166.64,1208.52 1167.23,1208.38 1167.81,1211.16 1168.4,1213.52 1168.99,1212.26 1169.57,1214.91 1170.16,1214.85 1170.75,1213.58 1171.33,1212.23 1171.92,1214.75 1172.5,1214.37 1173.09,1214.23 1173.68,1212.81 1174.26,1209.96 1174.85,1211.44 1175.44,1210.01 1176.02,1212.58 1176.61,1209.86 1177.2,1209.94 1177.78,1211.25 1178.37,1211.29 1178.96,1211.08 1179.54,1212.38 1180.13,1213.58 1180.71,1214.83 1181.3,1214.75 1181.89,1216.25 1182.47,1214.99 1183.06,1214.74 1183.65,1214.69 1184.23,1218.2 1184.82,1215.09 1185.41,1214.97 1185.99,1213.37 1186.58,1213.22 1187.16,1213.11 1187.75,1212.85 1188.34,1210.36 1188.92,1210.58 1189.51,1210.59 1190.1,1209.42 1190.68,1211.9 1191.27,1210.23 1191.86,1211.57 1192.44,1208.92 1193.03,1206.42 1193.62,1204.11 1194.2,1204.51 1194.79,1206.05 1195.37,1206.17 1195.96,1207.81 1196.55,1213.26 1197.13,1213.12 1197.72,1214.45 1198.31,1212.86 1198.89,1212.98 1199.48,1210.2 1200.07,1210.22 1200.65,1211.31 1201.24,1216.82 1201.83,1216.5 1202.41,1215.04 1203,1211.01 1203.58,1212.2 1204.17,1210.86 1204.76,1209.56 1205.34,1208.48 1205.93,1205.78 1206.52,1207.59 1207.1,1210.53 1207.69,1211.74 1208.28,1211.36 1208.86,1210.04 1209.45,1210.36 1210.03,1207.48 1210.62,1209.1 1211.21,1208.96 1211.79,1210.41 1212.38,1210.83 1212.97,1209.28 1213.55,1206.6 1214.14,1210.73 1214.73,1209.33 1215.31,1210.85 1215.9,1210.67 1216.49,1209.2 1217.07,1209.33 1217.66,1210.78 1218.24,1210.74 1218.83,1209.23 1219.42,1210.73 1220,1210.97 1220.59,1211.3 1221.18,1212.41 1221.76,1216.53 1222.35,1216.47 1222.94,1216.41 1223.52,1216.28 1224.11,1216.06 1224.7,1214.52 1225.28,1216.05 1225.87,1214.41 1226.45,1218.48 1227.04,1215.7 1227.63,1215.23 1228.21,1215.28 1228.8,1214.68 1229.39,1215.83 1229.97,1215.27 1230.56,1215.14 1231.15,1215.11 1231.73,1213.48 1232.32,1213.33 1232.91,1213.44 1233.49,1210.8 1234.08,1208.21 1234.66,1208.3 1235.25,1207.2 1235.84,1204.77 1236.42,1203.74 1237.01,1205.53 1237.6,1205.79 1238.18,1204.65 1238.77,1206.35 1239.36,1207.92 1239.94,1207.96 1240.53,1208.07 1241.11,1211.05 1241.7,1212.27 1242.29,1214.83 1242.87,1215.97 1243.46,1215.58 1244.05,1212.62 1244.63,1211.23 1245.22,1212.64 1245.81,1212.73 1246.39,1212.39 1246.98,1213.82 1247.57,1214.69 1248.15,1212.99 1248.74,1212.87 1249.32,1212.93 1249.91,1211.46 1250.5,1207.43 1251.08,1207.82 1251.67,1208 1252.26,1208.09 1252.84,1208.34 1253.43,1208.65 1254.02,1208.81 1254.6,1213.11 1255.19,1214.13 1255.78,1214.12 1256.36,1212.55 1256.95,1212.26 1257.53,1213.42 1258.12,1213.05 1258.71,1212.6 1259.29,1210.01 1259.88,1213.99 1260.47,1213.77 1261.05,1216.46 1261.64,1216 1262.23,1215.72 1262.81,1213.92 1263.4,1212.57 1263.98,1210.09 1264.57,1210.31 1265.16,1210.2 1265.74,1207.79 1266.33,1208.19 1266.92,1210.99 1267.5,1214.15 1268.09,1210.11 1268.68,1210.21 1269.26,1212.98 1269.85,1213.06 1270.44,1213.02 1271.02,1213.3 1271.61,1209.5 1272.19,1210.89 1272.78,1209.54 1273.37,1212.33 1273.95,1212.11 1274.54,1214.51 1275.13,1210.14 1275.71,1207.69 1276.3,1205.3 1276.89,1208.15 1277.47,1205.79 1278.06,1208.74 1278.65,1208.91 1279.23,1207.89 1279.82,1206.38 1280.4,1207.81 1280.99,1206.71 1281.58,1208.06 1282.16,1207.92 1282.75,1210.68 1283.34,1209.74 1283.92,1209.97 1284.51,1210.05 1285.1,1208.71 1285.68,1208.78 1286.27,1209.81 1286.86,1211.15 1287.44,1212.49 1288.03,1211 1288.61,1210.93 1289.2,1209.44 1289.79,1206.55 1290.37,1206.66 1290.96,1208.28 1291.55,1206.86 1292.13,1207.14 1292.72,1208.77 1293.31,1213.11 1293.89,1212.83 1294.48,1212.71 1295.06,1210 1295.65,1209.88 1296.24,1208.29 1296.82,1208.32 1297.41,1208.15 1298,1210.85 1298.58,1208.08 1299.17,1211.23 1299.76,1211.34 1300.34,1210.14 1300.93,1207.47 1301.52,1203.66 1302.1,1205.25 1302.69,1205.66 1303.27,1208.39 1303.86,1209.75 1304.45,1212.43 1305.03,1213.71 1305.62,1213.42 1306.21,1217.21 1306.79,1218.35 1307.38,1219.31 1307.97,1218.72 1308.55,1218.13 1309.14,1221.77 1309.73,1220 1310.31,1222.25 1310.9,1221.56 1311.48,1226.28 1312.07,1226.66 1312.66,1224.41 1313.24,1223.73 1313.83,1229.69 1314.42,1229.89 1315,1230.21 1315.59,1230.72 1316.18,1228.24 1316.76,1227.89 1317.35,1224.53 1317.93,1222.95 1318.52,1218.63 1319.11,1215.26 1319.69,1215.15 1320.28,1213.84 1320.87,1211.28 1321.45,1208.5 1322.04,1208.7 1322.63,1207.55 1323.21,1206.37 1323.8,1208.11 1324.39,1208.15 1324.97,1204.47 1325.56,1199.53 1326.14,1203.97 1326.73,1205.94 1327.32,1206.32 1327.9,1209.31 1328.49,1211 1329.08,1209.28 1329.66,1207.98 1330.25,1208.26 1330.84,1206.66 1331.42,1208.44 1332.01,1205.82 1332.6,1207.43 1333.18,1211.66 1333.77,1211.72 1334.35,1211.88 1334.94,1211.8 1335.53,1207.78 1336.11,1209.39 1336.7,1209.6 1337.29,1210.98 1337.87,1213.76 1338.46,1210.72 1339.05,1210.78 1339.63,1210.81 1340.22,1210.7 1340.8,1210.66 1341.39,1209.44 1341.98,1208.26 1342.56,1209.94 1343.15,1210.02 1343.74,1207.59 1344.32,1212.83 1344.91,1211.39 1345.5,1207.29 1346.08,1207.66 1346.67,1209.13 1347.26,1210.52 1347.84,1212.05 1348.43,1214.7 1349.01,1214.1 1349.6,1212.47 1350.19,1213.37 1350.77,1214.76 1351.36,1211.85 1351.95,1213.17 1352.53,1214.49 1353.12,1213.14 1353.71,1212.94 1354.29,1209.87 1354.88,1211.49 1355.47,1214.3 1356.05,1214.31 1356.64,1214.09 1357.22,1212.39 1357.81,1212 1358.4,1214.6 1358.98,1217.03 1359.57,1218.03 1360.16,1216.66 1360.74,1213.95 1361.33,1211.19 1361.92,1208.37 1362.5,1211.46 1363.09,1211.21 1363.68,1210.15 1364.26,1211.58 1364.85,1210.44 1365.43,1209.12 1366.02,1207.69 1366.61,1209.04 1367.19,1207.96 1367.78,1207.71 1368.37,1209.26 1368.95,1210.58 1369.54,1210.86 1370.13,1210.75 1370.71,1209.49 1371.3,1213.77 1371.88,1216.49 1372.47,1214.93 1373.06,1210.97 1373.64,1208.53 1374.23,1212.69 1374.82,1211.12 1375.4,1212.33 1375.99,1216.21 1376.58,1217.28 1377.16,1213.33 1377.75,1213.12 1378.34,1210.25 1378.92,1208.52 1379.51,1208.69 1380.09,1206.3 1380.68,1206.53 1381.27,1206.9 1381.85,1205.89 1382.44,1207.53 1383.03,1206.52 1383.61,1205.64 1384.2,1207.91 1384.79,1205.61 1385.37,1209.72 1385.96,1209.95 1386.55,1209.88 1387.13,1204.87 1387.72,1206.46 1388.3,1205.37 1388.89,1201.77 1389.48,1204.88 1390.06,1203.73 1390.65,1204.31 1391.24,1206.24 1391.82,1207.88 1392.41,1207.94 1393,1208 1393.58,1206.71 1394.17,1208.28 1394.75,1208.55 1395.34,1207.36 1395.93,1207.89 1396.51,1205.49 1397.1,1207.13 1397.69,1207.17 1398.27,1207.62 1398.86,1207.71 1399.45,1207.95 1400.03,1206.69 1400.62,1208.08 1401.21,1207.09 1401.79,1204.73 1402.38,1203.88 1402.96,1205.62 1403.55,1204.39 1404.14,1204.85 1404.72,1204.08 1405.31,1204.14 1405.9,1205.76 1406.48,1205.93 1407.07,1205.96 1407.66,1206.19 1408.24,1205.27 1408.83,1205.72 1409.42,1204.55 1410,1207.53 1410.59,1206.27 1411.17,1205.14 1411.76,1205.39 1412.35,1204.51 1412.93,1204.99 1413.52,1206.74 1414.11,1207.26 1414.69,1210.07 1415.28,1211.45 1415.87,1211.63 1416.45,1212.68 1417.04,1213.71 1417.63,1215.03 1418.21,1214.95 1418.8,1216.22 1419.38,1214.65 1419.97,1211.86 1420.56,1213.09 1421.14,1215.65 1421.73,1216.7 1422.32,1218 1422.9,1217.56 1423.49,1216.95 1424.08,1216.92 1424.66,1219.3 1425.25,1216.76 1425.83,1217.81 1426.42,1221.68 1427.01,1222.44 1427.59,1224.58 1428.18,1225.38 1428.77,1224.53 1429.35,1223.81 1429.94,1225.84 1430.53,1225.06 1431.11,1221.66 1431.7,1218.78 1432.29,1217.21 1432.87,1218.53 1433.46,1218.1 1434.04,1215.25 1434.63,1215.15 1435.22,1212.52 1435.8,1212.48 1436.39,1212.54 1436.98,1211.19 1437.56,1212.29 1438.15,1210.68 1438.74,1213.26 1439.32,1213.25 1439.91,1211.8 1440.5,1211.74 1441.08,1211.51 1441.67,1211.24 1442.25,1209.88 1442.84,1210.11 1443.43,1209.07 1444.01,1210.4 1444.6,1211.82 1445.19,1212.84 1445.77,1212.41 1446.36,1211.18 1446.95,1212.31 1447.53,1210.9 1448.12,1208.26 1448.7,1210.02 1449.29,1208.63 1449.88,1207.39 1450.46,1210.43 1451.05,1210.42 1451.64,1211.77 1452.22,1213.15 1452.81,1212.06 1453.4,1212.02 1453.98,1210.68 1454.57,1209.36 1455.16,1209.47 1455.74,1212.2 1456.33,1214.79 1456.91,1214.49 1457.5,1214.25 1458.09,1214.15 1458.67,1213.96 1459.26,1211.42 1459.85,1210.09 1460.43,1215.32 1461.02,1215.1 1461.61,1215.11 1462.19,1216.12 1462.78,1213.35 1463.37,1213.18 1463.95,1216.8 1464.54,1215.05 1465.12,1214.74 1465.71,1211.66 1466.3,1211.95 1466.88,1213.05 1467.47,1214.51 1468.06,1215.77 1468.64,1209.14 1469.23,1207.97 1469.82,1206.71 1470.4,1208.33 1470.99,1208.44 1471.57,1208.76 1472.16,1208.9 1472.75,1208.89 1473.33,1210.12 1473.92,1210.11 1474.51,1208.88 1475.09,1209.98 1475.68,1208.52 1476.27,1208.35 1476.85,1207.26 1477.44,1206.28 1478.03,1207.95 1478.61,1206 1479.2,1203.58 1479.78,1204.04 1480.37,1206.78 1480.96,1208.06 1481.54,1206.92 1482.13,1207.42 1482.72,1207.65 1483.3,1209.37 1483.89,1208.3 1484.48,1208.46 1485.06,1207.21 1485.65,1212.84 1486.24,1211.11 1486.82,1209.76 1487.41,1208.36 1487.99,1208.44 1488.58,1207.34 1489.17,1207.75 1489.75,1206.49 1490.34,1206.82 1490.93,1208.21 1491.51,1206.72 1492.1,1206.81 1492.69,1208.42 1493.27,1208.28 1493.86,1204.16 1494.45,1203.17 1495.03,1204.9 1495.62,1204.07 1496.2,1202.96 1496.79,1204.63 1497.38,1202.28 1497.96,1201.28 1498.55,1200.32 1499.14,1202.05 1499.72,1201.38 1500.31,1202.07 1500.9,1201.19 1501.48,1198.94 1502.07,1202.6 1502.65,1204.46 1503.24,1203.46 1503.83,1202.37 1504.41,1202.53 1505,1199.89 1505.59,1202.88 1506.17,1204.87 1506.76,1205.43 1507.35,1204.51 1507.93,1203.43 1508.52,1205.42 1509.11,1208.53 1509.69,1211.39 1510.28,1212.72 1510.86,1214.08 1511.45,1212.59 1512.04,1216.28 1512.62,1216.1 1513.21,1215.78 1513.8,1214.18 1514.38,1215.44 1514.97,1214.88 1515.56,1214.56 1516.14,1213.29 1516.73,1213.13 1517.32,1217.16 1517.9,1214.35 1518.49,1214.29 1519.07,1212.88 1519.66,1211.59 1520.25,1211.63 1520.83,1215.65 1521.42,1216.8 1522.01,1213.68 1522.59,1215.08 1523.18,1213.81 1523.77,1216.53 1524.35,1216.36 1524.94,1217.42 1525.52,1215.81 1526.11,1214.35 1526.7,1214.12 1527.28,1214.1 1527.87,1214.22 1528.46,1214.18 1529.04,1214.29 1529.63,1212.84 1530.22,1209.96 1530.8,1212.62 1531.39,1214.05 1531.98,1217.84 1532.56,1217.55 1533.15,1218.76 1533.73,1218.03 1534.32,1217.4 1534.91,1219.6 1535.49,1218.25 1536.08,1218.2 1536.67,1216.38 1537.25,1216.17 1537.84,1214.62 1538.43,1217.12 1539.01,1216.82 1539.6,1216.4 1540.19,1213.34 1540.77,1213.02 1541.36,1214.25 1541.94,1215.35 1542.53,1217.68 1543.12,1217.28 1543.7,1219.85 1544.29,1218.1 1544.88,1217.66 1545.46,1217.07 1546.05,1217.75 1546.64,1217.68 1547.22,1218.75 1547.81,1216.81 1548.4,1219.2 1548.98,1219.77 1549.57,1221.81 1550.15,1218.65 1550.74,1211.76 1551.33,1211.85 1551.91,1210.39 1552.5,1208.87 1553.09,1209.94 1553.67,1210.24 1554.26,1210.24 1554.85,1208.88 1555.43,1205.95 1556.02,1206.25 1556.6,1202.29 1557.19,1201.38 1557.78,1199.05 1558.36,1200.96 1558.95,1202.56 1559.54,1201.58 1560.12,1203.43 1560.71,1205.14 1561.3,1205.56 1561.88,1207.2 1562.47,1211.32 1563.06,1210.08 1563.64,1211.35 1564.23,1215.13 1564.81,1211.21 1565.4,1210.2 1565.99,1210.23 1566.57,1212.79 1567.16,1209.84 1567.75,1215.3 1568.33,1217.67 1568.92,1218.69 1569.51,1219.81 1570.09,1218.01 1570.68,1217.74 1571.27,1214.61 1571.85,1214.48 1572.44,1214.56 1573.02,1213.16 1573.61,1209.1 1574.2,1209.39 1574.78,1208.26 1575.37,1207.23 1575.96,1204.77 1576.54,1205.13 1577.13,1205.58 1577.72,1208.27 1578.3,1207.25 1578.89,1204.96 1579.47,1206.89 1580.06,1207.23 1580.65,1207.36 1581.23,1208.76 1581.82,1210.27 1582.41,1207.83 1582.99,1205.22 1583.58,1204.24 1584.17,1207.04 1584.75,1208.73 1585.34,1210.56 1585.93,1209.15 1586.51,1209.04 1587.1,1210.18 1587.68,1206.35 1588.27,1204.14 1588.86,1201.82 1589.44,1200.59 1590.03,1201.33 1590.62,1205.68 1591.2,1204.81 1591.79,1204.09 1592.38,1204.28 1592.96,1205.99 1593.55,1206.26 1594.14,1207.98 1594.72,1208.31 1595.31,1208.43 1595.89,1208.55 1596.48,1204.9 1597.07,1207.97 1597.65,1208.11 1598.24,1208.38 1598.83,1208.54 1599.41,1208.4 1600,1208.41 1600.59,1208.2 1601.17,1206.89 1601.76,1205.6 1602.34,1204.71 1602.93,1205.24 1603.52,1206.71 1604.1,1208.49 1604.69,1210.17 1605.28,1211.4 1605.86,1212.57 1606.45,1214.93 1607.04,1215.84 1607.62,1213.25 1608.21,1211.82 1608.8,1213.03 1609.38,1213.95 1609.97,1215.53 1610.55,1215.8 1611.14,1219.49 1611.73,1217.92 1612.31,1218.88 1612.9,1218.61 1613.49,1218.05 1614.07,1214.8 1614.66,1216.01 1615.25,1214.31 1615.83,1215.13 1616.42,1214.65 1617.01,1215.69 1617.59,1214.35 1618.18,1212.76 1618.76,1212.81 1619.35,1212.56 1619.94,1213.78 1620.52,1212.17 1621.11,1214.37 1621.7,1212.88 1622.28,1212.5 1622.87,1210.94 1623.46,1215.05 1624.04,1212.2 1624.63,1214.47 1625.22,1214.1 1625.8,1213.68 1626.39,1210.89 1626.97,1209.45 1627.56,1209.34 1628.15,1210.85 1628.73,1210.95 1629.32,1212.6 1629.91,1215.1 1630.49,1214.87 1631.08,1216.21 1631.67,1215.85 1632.25,1212.67 1632.84,1210.16 1633.42,1208.67 1634.01,1207.39 1634.6,1206.44 1635.18,1208.07 1635.77,1208.2 1636.36,1205.86 1636.94,1206.52 1637.53,1207.9 1638.12,1206.66 1638.7,1207.05 1639.29,1205.83 1639.88,1205.83 1640.46,1202.19 1641.05,1202.37 1641.63,1202.65 1642.22,1201.89 1642.81,1200.98 1643.39,1204.14 1643.98,1204.59 1644.57,1205.04 1645.15,1206.87 1645.74,1203.38 1646.33,1210.52 1646.91,1209.41 1647.5,1209.89 1648.09,1211.51 1648.67,1211.3 1649.26,1211 1649.84,1214.05 1650.43,1214.07 1651.02,1215.42 1651.6,1214.25 1652.19,1214.57 1652.78,1214.27 1653.36,1214 1653.95,1214.94 1654.54,1216.29 1655.12,1215.91 1655.71,1214.26 1656.29,1219.44 1656.88,1216.22 1657.47,1216.03 1658.05,1217.2 1658.64,1217.06 1659.23,1218.09 1659.81,1220.34 1660.4,1222.37 1660.99,1223.36 1661.57,1224.27 1662.16,1224.99 1662.75,1224.25 1663.33,1226.02 1663.92,1229.22 1664.5,1229.35 1665.09,1227.24 1665.68,1225.11 1666.26,1224.44 1666.85,1222.12 1667.44,1221.33 1668.02,1220.49 1668.61,1218.55 1669.2,1218.08 1669.78,1216.55 1670.37,1215.29 1670.96,1215.07 1671.54,1214.68 1672.13,1215.93 1672.71,1215.65 1673.3,1216.71 1673.89,1214.89 1674.47,1212.09 1675.06,1210.82 1675.65,1212.24 1676.23,1212.1 1676.82,1210.73 1677.41,1210.91 1677.99,1210.9 1678.58,1213.73 1679.17,1209.67 1679.75,1208.43 1680.34,1206.97 1680.92,1205.88 1681.51,1206.09 1682.1,1206.33 1682.68,1207.78 1683.27,1205.22 1683.86,1204.01 1684.44,1204.72 1685.03,1205.09 1685.62,1205.43 1686.2,1206.9 1686.79,1204.47 1687.37,1205.26 1687.96,1205.82 1688.55,1201.85 1689.13,1205.08 1689.72,1208.15 1690.31,1206.91 1690.89,1206.91 1691.48,1205.9 1692.07,1205.02 1692.65,1205.33 1693.24,1204.46 1693.83,1203.5 1694.41,1201.3 1695,1200.58 1695.58,1202.37 1696.17,1206.85 1696.76,1205.51 1697.34,1207.1 1697.93,1204.65 1698.52,1204.92 1699.1,1206.57 1699.69,1208.12 1700.28,1209.33 1700.86,1207.97 1701.45,1209.33 1702.04,1209.47 1702.62,1211.12 1703.21,1211.12 1703.79,1213.88 1704.38,1216.36 1704.97,1217.28 1705.55,1217.07 1706.14,1216.62 1706.73,1216.38 1707.31,1218.7 1707.9,1221.03 1708.49,1221.81 1709.07,1221.06 1709.66,1221.58 1710.24,1218.37 1710.83,1218.13 1711.42,1219.04 1712,1219.81 1712.59,1219.18 1713.18,1220.09 1713.76,1218.19 1714.35,1217.77 1714.94,1215.95 1715.52,1216.89 1716.11,1216.73 1716.7,1216.31 1717.28,1217.19 1717.87,1214.32 1718.45,1213.8 1719.04,1213.78 1719.63,1214.84 1720.21,1212.03 1720.8,1211.81 1721.39,1211.78 1721.97,1211.46 1722.56,1206.18 1723.15,1206.56 1723.73,1208.24 1724.32,1209.73 1724.91,1209.82 1725.49,1210.13 1726.08,1208.75 1726.66,1208.73 1727.25,1211.51 1727.84,1211.69 1728.42,1208.92 1729.01,1210.38 1729.6,1210.39 1730.18,1213 1730.77,1213.16 1731.36,1209.25 1731.94,1204.09 1732.53,1202.98 1733.11,1203.39 1733.7,1203.68 1734.29,1204.43 1734.87,1206.01 1735.46,1202.34 1736.05,1202.74 1736.63,1200.4 1737.22,1202.22 1737.81,1203.9 1738.39,1204.38 1738.98,1203.32 1739.57,1203.85 1740.15,1202.47 1740.74,1205.61 1741.32,1207.18 1741.91,1206.36 1742.5,1207.93 1743.08,1208.19 1743.67,1208.22 1744.26,1209.48 1744.84,1209.82 1745.43,1208.64 1746.02,1207.32 1746.6,1210.07 1747.19,1208.81 1747.78,1206.54 1748.36,1206.81 1748.95,1213.75 1749.53,1209.51 1750.12,1210.89 1750.71,1212.09 1751.29,1211.78 1751.88,1212.19 1752.47,1212.6 1753.05,1211.4 1753.64,1211.19 1754.23,1209.64 1754.81,1210.96 1755.4,1213.56 1755.99,1214.53 1756.57,1215.51 1757.16,1217.81 1757.74,1217.68 1758.33,1218.67 1758.92,1217.01 1759.5,1217.77 1760.09,1217.42 1760.68,1218.47 1761.26,1219.34 1761.85,1218.63 1762.44,1216.89 1763.02,1219.2 1763.61,1217.52 1764.19,1215.93 1764.78,1217.85 1765.37,1217.42 1765.95,1215.48 1766.54,1216.74 1767.13,1216.45 1767.71,1214.87 1768.3,1214.26 1768.89,1210.03 1769.47,1212.83 1770.06,1209.91 1770.65,1208.64 1771.23,1210.24 1771.82,1210.24 1772.4,1210.4 1772.99,1210.3 1773.58,1211.93 1774.16,1212.12 1774.75,1212.12 1775.34,1213.56 1775.92,1213.51 1776.51,1213.36 1777.1,1211.8 1777.68,1213.03 1778.27,1211.52 1778.86,1211.31 1779.44,1209.81 1780.03,1210.08 1780.61,1207.5 1781.2,1207.37 1781.79,1207.54 1782.37,1203.65 1782.96,1205.2 1783.55,1210.61 1784.13,1211.71 1784.72,1214.47 1785.31,1215.82 1785.89,1216.99 1786.48,1217.79 1787.06,1217.62 1787.65,1218.45 1788.24,1216.61 1788.82,1216.61 1789.41,1213.67 1790,1212.29 1790.58,1213.64 1791.17,1215 1791.76,1212.22 1792.34,1208.28 1792.93,1208.24 1793.52,1205.94 1794.1,1205.02 1794.69,1205.37 1795.27,1204.28 1795.86,1203.34 1796.45,1206.34 1797.03,1205.49 1797.62,1205.64 1798.21,1207.23 1798.79,1206.32 1799.38,1210.77 1799.97,1212.14 1800.55,1212.25 1801.14,1212.14 1801.73,1211.91 1802.31,1211.93 1802.9,1213.38 1803.48,1209.35 1804.07,1209.24 1804.66,1207.83 1805.24,1207.91 1805.83,1208.18 1806.42,1209.58 1807,1210.93 1807.59,1213.64 1808.18,1212.26 1808.76,1211.92 1809.35,1209.3 1809.94,1211.02 1810.52,1209.76 1811.11,1209.66 1811.69,1210.98 1812.28,1208.21 1812.87,1204.31 1813.45,1206.12 1814.04,1206.15 1814.63,1207.56 1815.21,1210.59 1815.8,1213.51 1816.39,1214.51 1816.97,1215.58 1817.56,1216.73 1818.14,1216.73 1818.73,1216.76 1819.32,1216.39 1819.9,1214.86 1820.49,1214.57 1821.08,1214.17 1821.66,1211.36 1822.25,1211.61 1822.84,1211.6 1823.42,1210.41 1824.01,1213.1 1824.6,1211.71 1825.18,1214.23 1825.77,1212.84 1826.35,1212.8 1826.94,1210.94 1827.53,1210.73 1828.11,1208.32 1828.7,1207.37 1829.29,1208.66 1829.87,1212.68 1830.46,1210.14 1831.05,1208.78 1831.63,1211.43 1832.22,1210.01 1832.81,1211.24 1833.39,1208.76 1833.98,1208.94 1834.56,1209.06 1835.15,1209.22 1835.74,1201.6 1836.32,1201.08 1836.91,1201.68 1837.5,1202.21 1838.08,1200.09 1838.67,1203.46 1839.26,1202.28 1839.84,1199.9 1840.43,1199 1841.01,1197.28 1841.6,1201.85 1842.19,1202.32 1842.77,1204.28 1843.36,1207.37 1843.95,1208.94 1844.53,1214.13 1845.12,1212.8 1845.71,1211.43 1846.29,1211.48 1846.88,1208.78 1847.47,1210.09 1848.05,1210.41 1848.64,1211.96 1849.22,1210.62 1849.81,1209.18 1850.4,1211.87 1850.98,1212.04 1851.57,1214.64 1852.16,1214.51 1852.74,1215.68 1853.33,1214.17 1853.92,1212.4 1854.5,1207.06 1855.09,1204.46 1855.68,1204.51 1856.26,1206.26 1856.85,1206.43 1857.43,1205.4 1858.02,1205.64 1858.61,1207.25 1859.19,1207.2 1859.78,1207.62 1860.37,1211.58 1860.95,1210.19 1861.54,1210.27 1862.13,1208.96 1862.71,1212.85 1863.3,1209.8 1863.88,1213.8 1864.47,1213.87 1865.06,1211.23 1865.64,1209.98 1866.23,1212.94 1866.82,1214.27 1867.4,1214.18 1867.99,1214.06 1868.58,1212.82 1869.16,1210.06 1869.75,1211.34 1870.34,1212.47 1870.92,1212.34 1871.51,1209.53 1872.09,1208.37 1872.68,1210.14 1873.27,1208.96 1873.85,1208.72 1874.44,1208.66 1875.03,1211.23 1875.61,1209.73 1876.2,1208.75 1876.79,1211.78 1877.37,1211.81 1877.96,1213.05 1878.55,1211.6 1879.13,1210.42 1879.72,1210.28 1880.3,1207.72 1880.89,1206.66 1881.48,1208.18 1882.06,1205.81 1882.65,1208.83 1883.24,1207.96 1883.82,1206.91 1884.41,1208.42 1885,1208.27 1885.58,1208.75 1886.17,1208.97 1886.76,1209.27 1887.34,1208.95 1887.93,1209.04 1888.51,1210.46 1889.1,1207.81 1889.69,1210.38 1890.27,1211.7 1890.86,1213.21 1891.45,1215.67 1892.03,1214.41 1892.62,1214.3 1893.21,1214.36 1893.79,1215.76 1894.38,1215.47 1894.96,1215.44 1895.55,1215.06 1896.14,1213.35 1896.72,1213.33 1897.31,1213.27 1897.9,1215.68 1898.48,1215.68 1899.07,1215.27 1899.66,1216.33 1900.24,1216.04 1900.83,1214.42 1901.42,1213.08 1902,1213.03 1902.59,1212.61 1903.17,1210.02 1903.76,1211.48 1904.35,1209.9 1904.93,1212.38 1905.52,1213.64 1906.11,1212.35 1906.69,1212.13 1907.28,1213.16 1907.87,1212.84 1908.45,1214 1909.04,1216.4 1909.63,1217.52 1910.21,1215.73 1910.8,1214.03 1911.38,1216.8 1911.97,1216.41 1912.56,1216.11 1913.14,1215.81 1913.73,1216.69 1914.32,1216.34 1914.9,1215.97 1915.49,1215.77 1916.08,1217.05 1916.66,1216.55 1917.25,1217.29 1917.83,1216.59 1918.42,1217.74 1919.01,1217.51 1919.59,1217.18 1920.18,1216.83 1920.77,1215.28 1921.35,1215.3 1921.94,1213.61 1922.53,1214.77 1923.11,1217.52 1923.7,1218.45 1924.29,1218.07 1924.87,1213.97 1925.46,1213.9 1926.04,1213.85 1926.63,1214.71 1927.22,1215.64 1927.8,1214 1928.39,1215.18 1928.98,1216.39 1929.56,1213.81 1930.15,1211.13 1930.74,1209.94 1931.32,1211.38 1931.91,1211.4 1932.5,1211.66 1933.08,1211.45 1933.67,1215.49 1934.25,1215.13 1934.84,1213.66 1935.43,1213.24 1936.01,1212.63 1936.6,1212.73 1937.19,1211.45 1937.77,1210.22 1938.36,1210.5 1938.95,1210.61 1939.53,1212.23 1940.12,1212.12 1940.71,1213.38 1941.29,1215.73 1941.88,1217 1942.46,1213.69 1943.05,1214.96 1943.64,1216.05 1944.22,1213.09 1944.81,1211.48 1945.4,1212.76 1945.98,1210.16 1946.57,1210.13 1947.16,1210.25 1947.74,1207.47 1948.33,1206.14 1948.91,1206.79 1949.5,1205.71 1950.09,1207.15 1950.67,1204.7 1951.26,1203.78 1951.85,1202.82 1952.43,1203.33 1953.02,1203.79 1953.61,1206.88 1954.19,1209.88 1954.78,1207.51 1955.37,1206.58 1955.95,1204.03 1956.54,1204.39 1957.12,1203.54 1957.71,1204.05 1958.3,1204.77 1958.88,1207.85 1959.47,1209.56 1960.06,1209.68 1960.64,1208.48 1961.23,1208.55 1961.82,1211.65 1962.4,1214.06 1962.99,1215.38 1963.58,1212.42 1964.16,1213.93 1964.75,1210.84 1965.33,1210.81 1965.92,1209.86 1966.51,1209.75 1967.09,1213.65 1967.68,1213.51 1968.27,1212.28 1968.85,1212.31 1969.44,1208.68 1970.03,1210.28 1970.61,1209.04 1971.2,1210.57 1971.78,1211.99 1972.37,1209.19 1972.96,1208.22 1973.54,1204.24 1974.13,1206.01 1974.72,1210.08 1975.3,1213.97 1975.89,1215.24 1976.48,1214.88 1977.06,1213.48 1977.65,1216.07 1978.24,1215.7 1978.82,1217.15 1979.41,1215.66 1979.99,1216.93 1980.58,1216.51 1981.17,1216.42 1981.75,1214.62 1982.34,1216.07 1982.93,1215.66 1983.51,1219.15 1984.1,1217.61 1984.69,1215.64 1985.27,1215.85 1985.86,1214.29 1986.45,1212.75 1987.03,1211.39 1987.62,1211.39 1988.2,1211.3 1988.79,1211.2 1989.38,1212.65 1989.96,1209.82 1990.55,1208.6 1991.14,1207.51 1991.72,1207.36 1992.31,1206.01 1992.9,1207.74 1993.48,1206.42 1994.07,1208.17 1994.65,1212.34 1995.24,1213.78 1995.83,1212.28 1996.41,1211.05 1997,1211.04 1997.59,1209.76 1998.17,1208.23 1998.76,1209.74 1999.35,1210.07 1999.93,1209.09 2000.52,1207.89 2001.11,1208.19 2001.69,1207.07 2002.28,1212.5 2002.86,1212.36 2003.45,1209.72 2004.04,1211.12 2004.62,1211.04 2005.21,1210.81 2005.8,1210.88 2006.38,1204.3 2006.97,1207.47 2007.56,1210.5 2008.14,1211.63 2008.73,1215.14 2009.32,1218.95 2009.9,1215.88 2010.49,1215.48 2011.07,1212.65 2011.66,1216.38 2012.25,1214.74 2012.83,1214.59 2013.42,1214.61 2014.01,1212.81 2014.59,1212.6 2015.18,1212.23 2015.77,1212.06 2016.35,1213.26 2016.94,1214.44 2017.53,1214.25 2018.11,1212.1 2018.7,1213.43 2019.28,1211.93 2019.87,1212.02 2020.46,1210.8 2021.04,1208.34 2021.63,1207.07 2022.22,1211.25 2022.8,1206 2023.39,1205.01 2023.98,1205.21 2024.56,1205.52 2025.15,1207.21 2025.73,1208.62 2026.32,1208.72 2026.91,1208.69 2027.49,1210.08 2028.08,1210.13 2028.67,1210.06 2029.25,1210.3 2029.84,1210.28 2030.43,1207.43 2031.01,1210.49 2031.6,1209.58 2032.19,1211.18 2032.77,1212.93 2033.36,1215.1 2033.94,1214.99 2034.53,1210.96 2035.12,1209.7 2035.7,1210.97 2036.29,1208.03 2036.88,1211.05 2037.46,1211.22 2038.05,1210.08 2038.64,1210.12 2039.22,1210.37 2039.81,1210.35 2040.4,1210.55 2040.98,1209.45 2041.57,1209.42 2042.15,1206.76 2042.74,1208.04 2043.33,1208.1 2043.91,1206.48 2044.5,1207.7 2045.09,1207.94 2045.67,1206.49 2046.26,1209.47 2046.85,1209.51 2047.43,1211.22 2048.02,1212.35 2048.6,1211.26 2049.19,1210.15 2049.78,1211.78 2050.36,1209.31 2050.95,1206.81 2051.54,1209.8 2052.12,1211.05 2052.71,1208.33 2053.3,1205.6 2053.88,1203.27 2054.47,1203.86 2055.06,1206.72 2055.64,1210.94 2056.23,1209.56 2056.81,1209.98 2057.4,1211.33 2057.99,1213.89 2058.57,1212.49 2059.16,1215.26 2059.75,1216.09 2060.33,1214.27 2060.92,1214.02 2061.51,1215.08 2062.09,1216.43 2062.68,1216.61 2063.27,1216.15 2063.85,1214.53 2064.44,1214.07 2065.02,1215.26 2065.61,1216.23 2066.2,1213.03 2066.78,1212.79 2067.37,1211.38 2067.96,1210 2068.54,1211.22 2069.13,1209.86 2069.72,1208.45 2070.3,1212.55 2070.89,1212.41 2071.48,1216.17 2072.06,1216 2072.65,1217.19 2073.23,1219.59 2073.82,1219.47 2074.41,1218.84 2074.99,1219.87 2075.58,1218.08 2076.17,1213.65 2076.75,1213.13 2077.34,1210.22 2077.93,1210.24 2078.51,1211.64 2079.1,1208.95 2079.68,1208.87 2080.27,1208.77 2080.86,1210.53 2081.44,1210.53 2082.03,1211.63 2082.62,1211.5 2083.2,1209.88 2083.79,1207.4 2084.38,1209.16 2084.96,1207.9 2085.55,1206.94 2086.14,1207.29 2086.72,1206.14 2087.31,1206.21 2087.89,1206.42 2088.48,1210.62 2089.07,1213.23 2089.65,1213.38 2090.24,1212.03 2090.83,1214.39 2091.41,1214.21 2092,1211.51 2092.59,1211.46 2093.17,1211.54 2093.76,1211.23 2094.35,1212.39 2094.93,1212.41 2095.52,1211 2096.1,1213.67 2096.69,1214.72 2097.28,1212.86 2097.86,1211.57 2098.45,1212.86 2099.04,1211.64 2099.62,1209.06 2100.21,1207.82 2100.8,1206.58 2101.38,1208.27 2101.97,1208.63 2102.55,1207.52 2103.14,1204.99 2103.73,1205.34 2104.31,1205.42 2104.9,1203.52 2105.49,1205.44 2106.07,1204.55 2106.66,1206.31 2107.25,1206.6 2107.83,1208.41 2108.42,1211.39 2109.01,1215.14 2109.59,1217.3 2110.18,1215.68 2110.76,1215.64 2111.35,1215.39 2111.94,1212.58 2112.52,1213.84 2113.11,1212.61 2113.7,1215.14 2114.28,1214.79 2114.87,1215.74 2115.46,1215.59 2116.04,1216.52 2116.63,1214.96 2117.22,1216.21 2117.8,1215.75 2118.39,1218.26 2118.97,1215.28 2119.56,1213.82 2120.15,1213.96 2120.73,1215.4 2121.32,1216.56 2121.91,1214.87 2122.49,1214.82 2123.08,1213.13 2123.67,1215.6 2124.25,1215.19 2124.84,1212.17 2125.42,1213.42 2126.01,1213.51 2126.6,1211.65 2127.18,1212.84 2127.77,1211.09 2128.36,1212.45 2128.94,1212.47 2129.53,1212.29 2130.12,1213.34 2130.7,1214.7 2131.29,1213.19 2131.88,1212.88 2132.46,1211.48 2133.05,1211.28 2133.63,1212.74 2134.22,1208.67 2134.81,1206.3 2135.39,1206.36 2135.98,1206.46 2136.57,1204.29 2137.15,1204.64 2137.74,1205 2138.33,1206.95 2138.91,1208.56 2139.5,1207.23 2140.09,1206.07 2140.67,1203.61 2141.26,1199.76 2141.84,1200.58 2142.43,1199.91 2143.02,1200.4 2143.6,1202.26 2144.19,1212.18 2144.78,1211 2145.36,1209.74 2145.95,1208.51 2146.54,1207.24 2147.12,1208.91 2147.71,1211.52 2148.3,1210.44 2148.88,1211.58 2149.47,1208.76 2150.05,1207.55 2150.64,1205.26 2151.23,1206.67 2151.81,1204.19 2152.4,1203.46 2152.99,1203.83 2153.57,1203.07 2154.16,1203.58 2154.75,1205.36 2155.33,1204.35 2155.92,1206.15 2156.5,1207.69 2157.09,1206.29 2157.68,1207.87 2158.26,1209.66 \"/>\n<path clip-path=\"url(#clip672)\" d=\"M986.025 1211.7 L986.612 1211.7 L987.198 1211.7 L987.785 1211.7 L988.371 1211.7 L988.957 1211.7 L989.544 1211.7 L990.13 1211.7 L990.717 1211.7 L991.303 1211.7 L991.889 1211.7 L992.476 1211.7 L993.062 1211.7 L993.649 1211.7 L994.235 1211.7 L994.822 1211.7 L995.408 1211.7 L995.994 1211.7 L996.581 1211.7 L997.167 1211.7 L997.754 1211.7 L998.34 1211.7 L998.926 1211.7 L999.513 1211.7 L1000.1 1211.7 L1000.69 1211.7 L1001.27 1211.7 L1001.86 1211.7 L1002.44 1211.7 L1003.03 1211.7 L1003.62 1211.7 L1004.2 1211.7 L1004.79 1211.7 L1005.38 1211.7 L1005.96 1211.7 L1006.55 1211.7 L1007.14 1211.7 L1007.72 1211.7 L1008.31 1211.7 L1008.9 1211.7 L1009.48 1211.7 L1010.07 1211.7 L1010.65 1211.7 L1011.24 1211.7 L1011.83 1211.7 L1012.41 1211.7 L1013 1211.7 L1013.59 1211.7 L1014.17 1211.7 L1014.76 1211.7 L1015.35 1211.7 L1015.93 1211.7 L1016.52 1211.7 L1017.11 1211.7 L1017.69 1211.7 L1018.28 1211.7 L1018.86 1211.7 L1019.45 1211.7 L1020.04 1211.7 L1020.62 1211.7 L1021.21 1211.7 L1021.8 1211.7 L1022.38 1211.7 L1022.97 1211.7 L1023.56 1211.7 L1024.14 1211.7 L1024.73 1211.7 L1025.32 1211.7 L1025.9 1211.7 L1026.49 1211.7 L1027.07 1211.7 L1027.66 1211.7 L1028.25 1211.7 L1028.83 1211.7 L1029.42 1211.7 L1030.01 1211.7 L1030.59 1211.7 L1031.18 1211.7 L1031.77 1211.7 L1032.35 1211.7 L1032.94 1211.7 L1033.52 1211.7 L1034.11 1211.7 L1034.7 1211.7 L1035.28 1211.7 L1035.87 1211.7 L1036.46 1211.7 L1037.04 1211.7 L1037.63 1211.7 L1038.22 1211.7 L1038.8 1211.7 L1039.39 1211.7 L1039.98 1211.7 L1040.56 1211.7 L1041.15 1211.7 L1041.73 1211.7 L1042.32 1211.7 L1042.91 1211.7 L1043.49 1211.7 L1044.08 1211.7 L1044.67 1211.7 L1045.25 1211.7 L1045.84 1211.7 L1046.43 1211.7 L1047.01 1211.7 L1047.6 1211.7 L1048.19 1211.7 L1048.77 1211.7 L1049.36 1211.7 L1049.94 1211.7 L1050.53 1211.7 L1051.12 1211.7 L1051.7 1211.7 L1052.29 1211.7 L1052.88 1211.7 L1053.46 1211.7 L1054.05 1211.7 L1054.64 1211.7 L1055.22 1211.7 L1055.81 1211.7 L1056.39 1211.7 L1056.98 1211.7 L1057.57 1211.7 L1058.15 1211.7 L1058.74 1211.7 L1059.33 1211.7 L1059.91 1211.7 L1060.5 1211.7 L1061.09 1211.7 L1061.67 1211.7 L1062.26 1211.7 L1062.85 1211.7 L1063.43 1211.7 L1064.02 1211.7 L1064.6 1211.7 L1065.19 1211.7 L1065.78 1211.7 L1066.36 1211.7 L1066.95 1211.7 L1067.54 1211.7 L1068.12 1211.7 L1068.71 1211.7 L1069.3 1211.7 L1069.88 1211.7 L1070.47 1211.7 L1071.06 1211.7 L1071.64 1211.7 L1072.23 1211.7 L1072.81 1211.7 L1073.4 1211.7 L1073.99 1211.7 L1074.57 1211.7 L1075.16 1211.7 L1075.75 1211.7 L1076.33 1211.7 L1076.92 1211.7 L1077.51 1211.7 L1078.09 1211.7 L1078.68 1211.7 L1079.26 1211.7 L1079.85 1211.7 L1080.44 1211.7 L1081.02 1211.7 L1081.61 1211.7 L1082.2 1211.7 L1082.78 1211.7 L1083.37 1211.7 L1083.96 1211.7 L1084.54 1211.7 L1085.13 1211.7 L1085.72 1211.7 L1086.3 1211.7 L1086.89 1211.7 L1087.47 1211.7 L1088.06 1211.7 L1088.65 1211.7 L1089.23 1211.7 L1089.82 1211.7 L1090.41 1211.7 L1090.99 1211.7 L1091.58 1211.7 L1092.17 1211.7 L1092.75 1211.7 L1093.34 1211.7 L1093.93 1211.7 L1094.51 1211.7 L1095.1 1211.7 L1095.68 1211.7 L1096.27 1211.7 L1096.86 1211.7 L1097.44 1211.7 L1098.03 1211.7 L1098.62 1211.7 L1099.2 1211.7 L1099.79 1211.7 L1100.38 1211.7 L1100.96 1211.7 L1101.55 1211.7 L1102.14 1211.7 L1102.72 1211.7 L1103.31 1211.7 L1103.89 1211.7 L1104.48 1211.7 L1105.07 1211.7 L1105.65 1211.7 L1106.24 1211.7 L1106.83 1211.7 L1107.41 1211.7 L1108 1211.7 L1108.59 1211.7 L1109.17 1211.7 L1109.76 1211.7 L1110.34 1211.7 L1110.93 1211.7 L1111.52 1211.7 L1112.1 1211.7 L1112.69 1211.7 L1113.28 1211.7 L1113.86 1211.7 L1114.45 1211.7 L1115.04 1211.7 L1115.62 1211.7 L1116.21 1211.7 L1116.8 1211.7 L1117.38 1211.7 L1117.97 1211.7 L1118.55 1211.7 L1119.14 1211.7 L1119.73 1211.7 L1120.31 1211.7 L1120.9 1211.7 L1121.49 1211.7 L1122.07 1211.7 L1122.66 1211.7 L1123.25 1211.7 L1123.83 1211.7 L1124.42 1211.7 L1125.01 1211.7 L1125.59 1211.7 L1126.18 1211.7 L1126.76 1211.7 L1127.35 1211.7 L1127.94 1211.7 L1128.52 1211.7 L1129.11 1211.7 L1129.7 1211.7 L1130.28 1211.7 L1130.87 1211.7 L1131.46 1211.7 L1132.04 1211.7 L1132.63 1211.7 L1133.21 1211.7 L1133.8 1211.7 L1134.39 1211.7 L1134.97 1211.7 L1135.56 1211.7 L1136.15 1211.7 L1136.73 1211.7 L1137.32 1211.7 L1137.91 1211.7 L1138.49 1211.7 L1139.08 1211.7 L1139.67 1211.7 L1140.25 1211.7 L1140.84 1211.7 L1141.42 1211.7 L1142.01 1211.7 L1142.6 1211.7 L1143.18 1211.7 L1143.77 1211.7 L1144.36 1211.7 L1144.94 1211.7 L1145.53 1211.7 L1146.12 1211.7 L1146.7 1211.7 L1147.29 1211.7 L1147.88 1211.7 L1148.46 1211.7 L1149.05 1211.7 L1149.63 1211.7 L1150.22 1211.7 L1150.81 1211.7 L1151.39 1211.7 L1151.98 1211.7 L1152.57 1211.7 L1153.15 1211.7 L1153.74 1211.7 L1154.33 1211.7 L1154.91 1211.7 L1155.5 1211.7 L1156.09 1211.7 L1156.67 1211.7 L1157.26 1211.7 L1157.84 1211.7 L1158.43 1211.7 L1159.02 1211.7 L1159.6 1211.7 L1160.19 1211.7 L1160.78 1211.7 L1161.36 1211.7 L1161.95 1211.7 L1162.54 1211.7 L1163.12 1211.7 L1163.71 1211.7 L1164.29 1211.7 L1164.88 1211.7 L1165.47 1211.7 L1166.05 1211.7 L1166.64 1211.7 L1167.23 1211.7 L1167.81 1211.7 L1168.4 1211.7 L1168.99 1211.7 L1169.57 1211.7 L1170.16 1211.7 L1170.75 1211.7 L1171.33 1211.7 L1171.92 1211.7 L1172.5 1211.7 L1173.09 1211.7 L1173.68 1211.7 L1174.26 1211.7 L1174.85 1211.7 L1175.44 1211.7 L1176.02 1211.7 L1176.61 1211.7 L1177.2 1211.7 L1177.78 1211.7 L1178.37 1211.7 L1178.96 1211.7 L1179.54 1211.7 L1180.13 1211.7 L1180.71 1211.7 L1181.3 1211.7 L1181.89 1211.7 L1182.47 1211.7 L1183.06 1211.7 L1183.65 1211.7 L1184.23 1211.7 L1184.82 1211.7 L1185.41 1211.7 L1185.99 1211.7 L1186.58 1211.7 L1187.16 1211.7 L1187.75 1211.7 L1188.34 1211.7 L1188.92 1211.7 L1189.51 1211.7 L1190.1 1211.7 L1190.68 1211.7 L1191.27 1211.7 L1191.86 1211.7 L1192.44 1211.7 L1193.03 1211.7 L1193.62 1211.7 L1194.2 1211.7 L1194.79 1211.7 L1195.37 1211.7 L1195.96 1211.7 L1196.55 1211.7 L1197.13 1211.7 L1197.72 1211.7 L1198.31 1211.7 L1198.89 1211.7 L1199.48 1211.7 L1200.07 1211.7 L1200.65 1211.7 L1201.24 1211.7 L1201.83 1211.7 L1202.41 1211.7 L1203 1211.7 L1203.58 1211.7 L1204.17 1211.7 L1204.76 1211.7 L1205.34 1211.7 L1205.93 1211.7 L1206.52 1211.7 L1207.1 1211.7 L1207.69 1211.7 L1208.28 1211.7 L1208.86 1211.7 L1209.45 1211.7 L1210.03 1211.7 L1210.62 1211.7 L1211.21 1211.7 L1211.79 1211.7 L1212.38 1211.7 L1212.97 1211.7 L1213.55 1211.7 L1214.14 1211.7 L1214.73 1211.7 L1215.31 1211.7 L1215.9 1211.7 L1216.49 1211.7 L1217.07 1211.7 L1217.66 1211.7 L1218.24 1211.7 L1218.83 1211.7 L1219.42 1211.7 L1220 1211.7 L1220.59 1211.7 L1221.18 1211.7 L1221.76 1211.7 L1222.35 1211.7 L1222.94 1211.7 L1223.52 1211.7 L1224.11 1211.7 L1224.7 1211.7 L1225.28 1211.7 L1225.87 1211.7 L1226.45 1211.7 L1227.04 1211.7 L1227.63 1211.7 L1228.21 1211.7 L1228.8 1211.7 L1229.39 1211.7 L1229.97 1211.7 L1230.56 1211.7 L1231.15 1211.7 L1231.73 1211.7 L1232.32 1211.7 L1232.91 1211.7 L1233.49 1211.7 L1234.08 1211.7 L1234.66 1211.7 L1235.25 1211.7 L1235.84 1211.7 L1236.42 1211.7 L1237.01 1211.7 L1237.6 1211.7 L1238.18 1211.7 L1238.77 1211.7 L1239.36 1211.7 L1239.94 1211.7 L1240.53 1211.7 L1241.11 1211.7 L1241.7 1211.7 L1242.29 1211.7 L1242.87 1211.7 L1243.46 1211.7 L1244.05 1211.7 L1244.63 1211.7 L1245.22 1211.7 L1245.81 1211.7 L1246.39 1211.7 L1246.98 1211.7 L1247.57 1211.7 L1248.15 1211.7 L1248.74 1211.7 L1249.32 1211.7 L1249.91 1211.7 L1250.5 1211.7 L1251.08 1211.7 L1251.67 1211.7 L1252.26 1211.7 L1252.84 1211.7 L1253.43 1211.7 L1254.02 1211.7 L1254.6 1211.7 L1255.19 1211.7 L1255.78 1211.7 L1256.36 1211.7 L1256.95 1211.7 L1257.53 1211.7 L1258.12 1211.7 L1258.71 1211.7 L1259.29 1211.7 L1259.88 1211.7 L1260.47 1211.7 L1261.05 1211.7 L1261.64 1211.7 L1262.23 1211.7 L1262.81 1211.7 L1263.4 1211.7 L1263.98 1211.7 L1264.57 1211.7 L1265.16 1211.7 L1265.74 1211.7 L1266.33 1211.7 L1266.92 1211.7 L1267.5 1211.7 L1268.09 1211.7 L1268.68 1211.7 L1269.26 1211.7 L1269.85 1211.7 L1270.44 1211.7 L1271.02 1211.7 L1271.61 1211.7 L1272.19 1211.7 L1272.78 1211.7 L1273.37 1211.7 L1273.95 1211.7 L1274.54 1211.7 L1275.13 1211.7 L1275.71 1211.7 L1276.3 1211.7 L1276.89 1211.7 L1277.47 1211.7 L1278.06 1211.7 L1278.65 1211.7 L1279.23 1211.7 L1279.82 1211.7 L1280.4 1211.7 L1280.99 1211.7 L1281.58 1211.7 L1282.16 1211.7 L1282.75 1211.7 L1283.34 1211.7 L1283.92 1211.7 L1284.51 1211.7 L1285.1 1211.7 L1285.68 1211.7 L1286.27 1211.7 L1286.86 1211.7 L1287.44 1211.7 L1288.03 1211.7 L1288.61 1211.7 L1289.2 1211.7 L1289.79 1211.7 L1290.37 1211.7 L1290.96 1211.7 L1291.55 1211.7 L1292.13 1211.7 L1292.72 1211.7 L1293.31 1211.7 L1293.89 1211.7 L1294.48 1211.7 L1295.06 1211.7 L1295.65 1211.7 L1296.24 1211.7 L1296.82 1211.7 L1297.41 1211.7 L1298 1211.7 L1298.58 1211.7 L1299.17 1211.7 L1299.76 1211.7 L1300.34 1211.7 L1300.93 1211.7 L1301.52 1211.7 L1302.1 1211.7 L1302.69 1211.7 L1303.27 1211.7 L1303.86 1211.7 L1304.45 1211.7 L1305.03 1211.7 L1305.62 1211.7 L1306.21 1211.7 L1306.79 1211.7 L1307.38 1211.7 L1307.97 1211.7 L1308.55 1211.7 L1309.14 1211.7 L1309.73 1211.7 L1310.31 1211.7 L1310.9 1211.7 L1311.48 1211.7 L1312.07 1211.7 L1312.66 1211.7 L1313.24 1211.7 L1313.83 1211.7 L1314.42 1211.7 L1315 1211.7 L1315.59 1211.7 L1316.18 1211.7 L1316.76 1211.7 L1317.35 1211.7 L1317.93 1211.7 L1318.52 1211.7 L1319.11 1211.7 L1319.69 1211.7 L1320.28 1211.7 L1320.87 1211.7 L1321.45 1211.7 L1322.04 1211.7 L1322.63 1211.7 L1323.21 1211.7 L1323.8 1211.7 L1324.39 1211.7 L1324.97 1211.7 L1325.56 1211.7 L1326.14 1211.7 L1326.73 1211.7 L1327.32 1211.7 L1327.9 1211.7 L1328.49 1211.7 L1329.08 1211.7 L1329.66 1211.7 L1330.25 1211.7 L1330.84 1211.7 L1331.42 1211.7 L1332.01 1211.7 L1332.6 1211.7 L1333.18 1211.7 L1333.77 1211.7 L1334.35 1211.7 L1334.94 1211.7 L1335.53 1211.7 L1336.11 1211.7 L1336.7 1211.7 L1337.29 1211.7 L1337.87 1211.7 L1338.46 1211.7 L1339.05 1211.7 L1339.63 1211.7 L1340.22 1211.7 L1340.8 1211.7 L1341.39 1211.7 L1341.98 1211.7 L1342.56 1211.7 L1343.15 1211.7 L1343.74 1211.7 L1344.32 1211.7 L1344.91 1211.7 L1345.5 1211.7 L1346.08 1211.7 L1346.67 1211.7 L1347.26 1211.7 L1347.84 1211.7 L1348.43 1211.7 L1349.01 1211.7 L1349.6 1211.7 L1350.19 1211.7 L1350.77 1211.7 L1351.36 1211.7 L1351.95 1211.7 L1352.53 1211.7 L1353.12 1211.7 L1353.71 1211.7 L1354.29 1211.7 L1354.88 1211.7 L1355.47 1211.7 L1356.05 1211.7 L1356.64 1211.7 L1357.22 1211.7 L1357.81 1211.7 L1358.4 1211.7 L1358.98 1211.7 L1359.57 1211.7 L1360.16 1211.7 L1360.74 1211.7 L1361.33 1211.7 L1361.92 1211.7 L1362.5 1211.7 L1363.09 1211.7 L1363.68 1211.7 L1364.26 1211.7 L1364.85 1211.7 L1365.43 1211.7 L1366.02 1211.7 L1366.61 1211.7 L1367.19 1211.7 L1367.78 1211.7 L1368.37 1211.7 L1368.95 1211.7 L1369.54 1211.7 L1370.13 1211.7 L1370.71 1211.7 L1371.3 1211.7 L1371.88 1211.7 L1372.47 1211.7 L1373.06 1211.7 L1373.64 1211.7 L1374.23 1211.7 L1374.82 1211.7 L1375.4 1211.7 L1375.99 1211.7 L1376.58 1211.7 L1377.16 1211.7 L1377.75 1211.7 L1378.34 1211.7 L1378.92 1211.7 L1379.51 1211.7 L1380.09 1211.7 L1380.68 1211.7 L1381.27 1211.7 L1381.85 1211.7 L1382.44 1211.7 L1383.03 1211.7 L1383.61 1211.7 L1384.2 1211.7 L1384.79 1211.7 L1385.37 1211.7 L1385.96 1211.7 L1386.55 1211.7 L1387.13 1211.7 L1387.72 1211.7 L1388.3 1211.7 L1388.89 1211.7 L1389.48 1211.7 L1390.06 1211.7 L1390.65 1211.7 L1391.24 1211.7 L1391.82 1211.7 L1392.41 1211.7 L1393 1211.7 L1393.58 1211.7 L1394.17 1211.7 L1394.75 1211.7 L1395.34 1211.7 L1395.93 1211.7 L1396.51 1211.7 L1397.1 1211.7 L1397.69 1211.7 L1398.27 1211.7 L1398.86 1211.7 L1399.45 1211.7 L1400.03 1211.7 L1400.62 1211.7 L1401.21 1211.7 L1401.79 1211.7 L1402.38 1211.7 L1402.96 1211.7 L1403.55 1211.7 L1404.14 1211.7 L1404.72 1211.7 L1405.31 1211.7 L1405.9 1211.7 L1406.48 1211.7 L1407.07 1211.7 L1407.66 1211.7 L1408.24 1211.7 L1408.83 1211.7 L1409.42 1211.7 L1410 1211.7 L1410.59 1211.7 L1411.17 1211.7 L1411.76 1211.7 L1412.35 1211.7 L1412.93 1211.7 L1413.52 1211.7 L1414.11 1211.7 L1414.69 1211.7 L1415.28 1211.7 L1415.87 1211.7 L1416.45 1211.7 L1417.04 1211.7 L1417.63 1211.7 L1418.21 1211.7 L1418.8 1211.7 L1419.38 1211.7 L1419.97 1211.7 L1420.56 1211.7 L1421.14 1211.7 L1421.73 1211.7 L1422.32 1211.7 L1422.9 1211.7 L1423.49 1211.7 L1424.08 1211.7 L1424.66 1211.7 L1425.25 1211.7 L1425.83 1211.7 L1426.42 1211.7 L1427.01 1211.7 L1427.59 1211.7 L1428.18 1211.7 L1428.77 1211.7 L1429.35 1211.7 L1429.94 1211.7 L1430.53 1211.7 L1431.11 1211.7 L1431.7 1211.7 L1432.29 1211.7 L1432.87 1211.7 L1433.46 1211.7 L1434.04 1211.7 L1434.63 1211.7 L1435.22 1211.7 L1435.8 1211.7 L1436.39 1211.7 L1436.98 1211.7 L1437.56 1211.7 L1438.15 1211.7 L1438.74 1211.7 L1439.32 1211.7 L1439.91 1211.7 L1440.5 1211.7 L1441.08 1211.7 L1441.67 1211.7 L1442.25 1211.7 L1442.84 1211.7 L1443.43 1211.7 L1444.01 1211.7 L1444.6 1211.7 L1445.19 1211.7 L1445.77 1211.7 L1446.36 1211.7 L1446.95 1211.7 L1447.53 1211.7 L1448.12 1211.7 L1448.7 1211.7 L1449.29 1211.7 L1449.88 1211.7 L1450.46 1211.7 L1451.05 1211.7 L1451.64 1211.7 L1452.22 1211.7 L1452.81 1211.7 L1453.4 1211.7 L1453.98 1211.7 L1454.57 1211.7 L1455.16 1211.7 L1455.74 1211.7 L1456.33 1211.7 L1456.91 1211.7 L1457.5 1211.7 L1458.09 1211.7 L1458.67 1211.7 L1459.26 1211.7 L1459.85 1211.7 L1460.43 1211.7 L1461.02 1211.7 L1461.61 1211.7 L1462.19 1211.7 L1462.78 1211.7 L1463.37 1211.7 L1463.95 1211.7 L1464.54 1211.7 L1465.12 1211.7 L1465.71 1211.7 L1466.3 1211.7 L1466.88 1211.7 L1467.47 1211.7 L1468.06 1211.7 L1468.64 1211.7 L1469.23 1211.7 L1469.82 1211.7 L1470.4 1211.7 L1470.99 1211.7 L1471.57 1211.7 L1472.16 1211.7 L1472.75 1211.7 L1473.33 1211.7 L1473.92 1211.7 L1474.51 1211.7 L1475.09 1211.7 L1475.68 1211.7 L1476.27 1211.7 L1476.85 1211.7 L1477.44 1211.7 L1478.03 1211.7 L1478.61 1211.7 L1479.2 1211.7 L1479.78 1211.7 L1480.37 1211.7 L1480.96 1211.7 L1481.54 1211.7 L1482.13 1211.7 L1482.72 1211.7 L1483.3 1211.7 L1483.89 1211.7 L1484.48 1211.7 L1485.06 1211.7 L1485.65 1211.7 L1486.24 1211.7 L1486.82 1211.7 L1487.41 1211.7 L1487.99 1211.7 L1488.58 1211.7 L1489.17 1211.7 L1489.75 1211.7 L1490.34 1211.7 L1490.93 1211.7 L1491.51 1211.7 L1492.1 1211.7 L1492.69 1211.7 L1493.27 1211.7 L1493.86 1211.7 L1494.45 1211.7 L1495.03 1211.7 L1495.62 1211.7 L1496.2 1211.7 L1496.79 1211.7 L1497.38 1211.7 L1497.96 1211.7 L1498.55 1211.7 L1499.14 1211.7 L1499.72 1211.7 L1500.31 1211.7 L1500.9 1211.7 L1501.48 1211.7 L1502.07 1211.7 L1502.65 1211.7 L1503.24 1211.7 L1503.83 1211.7 L1504.41 1211.7 L1505 1211.7 L1505.59 1211.7 L1506.17 1211.7 L1506.76 1211.7 L1507.35 1211.7 L1507.93 1211.7 L1508.52 1211.7 L1509.11 1211.7 L1509.69 1211.7 L1510.28 1211.7 L1510.86 1211.7 L1511.45 1211.7 L1512.04 1211.7 L1512.62 1211.7 L1513.21 1211.7 L1513.8 1211.7 L1514.38 1211.7 L1514.97 1211.7 L1515.56 1211.7 L1516.14 1211.7 L1516.73 1211.7 L1517.32 1211.7 L1517.9 1211.7 L1518.49 1211.7 L1519.07 1211.7 L1519.66 1211.7 L1520.25 1211.7 L1520.83 1211.7 L1521.42 1211.7 L1522.01 1211.7 L1522.59 1211.7 L1523.18 1211.7 L1523.77 1211.7 L1524.35 1211.7 L1524.94 1211.7 L1525.52 1211.7 L1526.11 1211.7 L1526.7 1211.7 L1527.28 1211.7 L1527.87 1211.7 L1528.46 1211.7 L1529.04 1211.7 L1529.63 1211.7 L1530.22 1211.7 L1530.8 1211.7 L1531.39 1211.7 L1531.98 1211.7 L1532.56 1211.7 L1533.15 1211.7 L1533.73 1211.7 L1534.32 1211.7 L1534.91 1211.7 L1535.49 1211.7 L1536.08 1211.7 L1536.67 1211.7 L1537.25 1211.7 L1537.84 1211.7 L1538.43 1211.7 L1539.01 1211.7 L1539.6 1211.7 L1540.19 1211.7 L1540.77 1211.7 L1541.36 1211.7 L1541.94 1211.7 L1542.53 1211.7 L1543.12 1211.7 L1543.7 1211.7 L1544.29 1211.7 L1544.88 1211.7 L1545.46 1211.7 L1546.05 1211.7 L1546.64 1211.7 L1547.22 1211.7 L1547.81 1211.7 L1548.4 1211.7 L1548.98 1211.7 L1549.57 1211.7 L1550.15 1211.7 L1550.74 1211.7 L1551.33 1211.7 L1551.91 1211.7 L1552.5 1211.7 L1553.09 1211.7 L1553.67 1211.7 L1554.26 1211.7 L1554.85 1211.7 L1555.43 1211.7 L1556.02 1211.7 L1556.6 1211.7 L1557.19 1211.7 L1557.78 1211.7 L1558.36 1211.7 L1558.95 1211.7 L1559.54 1211.7 L1560.12 1211.7 L1560.71 1211.7 L1561.3 1211.7 L1561.88 1211.7 L1562.47 1211.7 L1563.06 1211.7 L1563.64 1211.7 L1564.23 1211.7 L1564.81 1211.7 L1565.4 1211.7 L1565.99 1211.7 L1566.57 1211.7 L1567.16 1211.7 L1567.75 1211.7 L1568.33 1211.7 L1568.92 1211.7 L1569.51 1211.7 L1570.09 1211.7 L1570.68 1211.7 L1571.27 1211.7 L1571.85 1211.7 L1572.44 1211.7 L1573.02 1211.7 L1573.61 1211.7 L1574.2 1211.7 L1574.78 1211.7 L1575.37 1211.7 L1575.96 1211.7 L1576.54 1211.7 L1577.13 1211.7 L1577.72 1211.7 L1578.3 1211.7 L1578.89 1211.7 L1579.47 1211.7 L1580.06 1211.7 L1580.65 1211.7 L1581.23 1211.7 L1581.82 1211.7 L1582.41 1211.7 L1582.99 1211.7 L1583.58 1211.7 L1584.17 1211.7 L1584.75 1211.7 L1585.34 1211.7 L1585.93 1211.7 L1586.51 1211.7 L1587.1 1211.7 L1587.68 1211.7 L1588.27 1211.7 L1588.86 1211.7 L1589.44 1211.7 L1590.03 1211.7 L1590.62 1211.7 L1591.2 1211.7 L1591.79 1211.7 L1592.38 1211.7 L1592.96 1211.7 L1593.55 1211.7 L1594.14 1211.7 L1594.72 1211.7 L1595.31 1211.7 L1595.89 1211.7 L1596.48 1211.7 L1597.07 1211.7 L1597.65 1211.7 L1598.24 1211.7 L1598.83 1211.7 L1599.41 1211.7 L1600 1211.7 L1600.59 1211.7 L1601.17 1211.7 L1601.76 1211.7 L1602.34 1211.7 L1602.93 1211.7 L1603.52 1211.7 L1604.1 1211.7 L1604.69 1211.7 L1605.28 1211.7 L1605.86 1211.7 L1606.45 1211.7 L1607.04 1211.7 L1607.62 1211.7 L1608.21 1211.7 L1608.8 1211.7 L1609.38 1211.7 L1609.97 1211.7 L1610.55 1211.7 L1611.14 1211.7 L1611.73 1211.7 L1612.31 1211.7 L1612.9 1211.7 L1613.49 1211.7 L1614.07 1211.7 L1614.66 1211.7 L1615.25 1211.7 L1615.83 1211.7 L1616.42 1211.7 L1617.01 1211.7 L1617.59 1211.7 L1618.18 1211.7 L1618.76 1211.7 L1619.35 1211.7 L1619.94 1211.7 L1620.52 1211.7 L1621.11 1211.7 L1621.7 1211.7 L1622.28 1211.7 L1622.87 1211.7 L1623.46 1211.7 L1624.04 1211.7 L1624.63 1211.7 L1625.22 1211.7 L1625.8 1211.7 L1626.39 1211.7 L1626.97 1211.7 L1627.56 1211.7 L1628.15 1211.7 L1628.73 1211.7 L1629.32 1211.7 L1629.91 1211.7 L1630.49 1211.7 L1631.08 1211.7 L1631.67 1211.7 L1632.25 1211.7 L1632.84 1211.7 L1633.42 1211.7 L1634.01 1211.7 L1634.6 1211.7 L1635.18 1211.7 L1635.77 1211.7 L1636.36 1211.7 L1636.94 1211.7 L1637.53 1211.7 L1638.12 1211.7 L1638.7 1211.7 L1639.29 1211.7 L1639.88 1211.7 L1640.46 1211.7 L1641.05 1211.7 L1641.63 1211.7 L1642.22 1211.7 L1642.81 1211.7 L1643.39 1211.7 L1643.98 1211.7 L1644.57 1211.7 L1645.15 1211.7 L1645.74 1211.7 L1646.33 1211.7 L1646.91 1211.7 L1647.5 1211.7 L1648.09 1211.7 L1648.67 1211.7 L1649.26 1211.7 L1649.84 1211.7 L1650.43 1211.7 L1651.02 1211.7 L1651.6 1211.7 L1652.19 1211.7 L1652.78 1211.7 L1653.36 1211.7 L1653.95 1211.7 L1654.54 1211.7 L1655.12 1211.7 L1655.71 1211.7 L1656.29 1211.7 L1656.88 1211.7 L1657.47 1211.7 L1658.05 1211.7 L1658.64 1211.7 L1659.23 1211.7 L1659.81 1211.7 L1660.4 1211.7 L1660.99 1211.7 L1661.57 1211.7 L1662.16 1211.7 L1662.75 1211.7 L1663.33 1211.7 L1663.92 1211.7 L1664.5 1211.7 L1665.09 1211.7 L1665.68 1211.7 L1666.26 1211.7 L1666.85 1211.7 L1667.44 1211.7 L1668.02 1211.7 L1668.61 1211.7 L1669.2 1211.7 L1669.78 1211.7 L1670.37 1211.7 L1670.96 1211.7 L1671.54 1211.7 L1672.13 1211.7 L1672.71 1211.7 L1673.3 1211.7 L1673.89 1211.7 L1674.47 1211.7 L1675.06 1211.7 L1675.65 1211.7 L1676.23 1211.7 L1676.82 1211.7 L1677.41 1211.7 L1677.99 1211.7 L1678.58 1211.7 L1679.17 1211.7 L1679.75 1211.7 L1680.34 1211.7 L1680.92 1211.7 L1681.51 1211.7 L1682.1 1211.7 L1682.68 1211.7 L1683.27 1211.7 L1683.86 1211.7 L1684.44 1211.7 L1685.03 1211.7 L1685.62 1211.7 L1686.2 1211.7 L1686.79 1211.7 L1687.37 1211.7 L1687.96 1211.7 L1688.55 1211.7 L1689.13 1211.7 L1689.72 1211.7 L1690.31 1211.7 L1690.89 1211.7 L1691.48 1211.7 L1692.07 1211.7 L1692.65 1211.7 L1693.24 1211.7 L1693.83 1211.7 L1694.41 1211.7 L1695 1211.7 L1695.58 1211.7 L1696.17 1211.7 L1696.76 1211.7 L1697.34 1211.7 L1697.93 1211.7 L1698.52 1211.7 L1699.1 1211.7 L1699.69 1211.7 L1700.28 1211.7 L1700.86 1211.7 L1701.45 1211.7 L1702.04 1211.7 L1702.62 1211.7 L1703.21 1211.7 L1703.79 1211.7 L1704.38 1211.7 L1704.97 1211.7 L1705.55 1211.7 L1706.14 1211.7 L1706.73 1211.7 L1707.31 1211.7 L1707.9 1211.7 L1708.49 1211.7 L1709.07 1211.7 L1709.66 1211.7 L1710.24 1211.7 L1710.83 1211.7 L1711.42 1211.7 L1712 1211.7 L1712.59 1211.7 L1713.18 1211.7 L1713.76 1211.7 L1714.35 1211.7 L1714.94 1211.7 L1715.52 1211.7 L1716.11 1211.7 L1716.7 1211.7 L1717.28 1211.7 L1717.87 1211.7 L1718.45 1211.7 L1719.04 1211.7 L1719.63 1211.7 L1720.21 1211.7 L1720.8 1211.7 L1721.39 1211.7 L1721.97 1211.7 L1722.56 1211.7 L1723.15 1211.7 L1723.73 1211.7 L1724.32 1211.7 L1724.91 1211.7 L1725.49 1211.7 L1726.08 1211.7 L1726.66 1211.7 L1727.25 1211.7 L1727.84 1211.7 L1728.42 1211.7 L1729.01 1211.7 L1729.6 1211.7 L1730.18 1211.7 L1730.77 1211.7 L1731.36 1211.7 L1731.94 1211.7 L1732.53 1211.7 L1733.11 1211.7 L1733.7 1211.7 L1734.29 1211.7 L1734.87 1211.7 L1735.46 1211.7 L1736.05 1211.7 L1736.63 1211.7 L1737.22 1211.7 L1737.81 1211.7 L1738.39 1211.7 L1738.98 1211.7 L1739.57 1211.7 L1740.15 1211.7 L1740.74 1211.7 L1741.32 1211.7 L1741.91 1211.7 L1742.5 1211.7 L1743.08 1211.7 L1743.67 1211.7 L1744.26 1211.7 L1744.84 1211.7 L1745.43 1211.7 L1746.02 1211.7 L1746.6 1211.7 L1747.19 1211.7 L1747.78 1211.7 L1748.36 1211.7 L1748.95 1211.7 L1749.53 1211.7 L1750.12 1211.7 L1750.71 1211.7 L1751.29 1211.7 L1751.88 1211.7 L1752.47 1211.7 L1753.05 1211.7 L1753.64 1211.7 L1754.23 1211.7 L1754.81 1211.7 L1755.4 1211.7 L1755.99 1211.7 L1756.57 1211.7 L1757.16 1211.7 L1757.74 1211.7 L1758.33 1211.7 L1758.92 1211.7 L1759.5 1211.7 L1760.09 1211.7 L1760.68 1211.7 L1761.26 1211.7 L1761.85 1211.7 L1762.44 1211.7 L1763.02 1211.7 L1763.61 1211.7 L1764.19 1211.7 L1764.78 1211.7 L1765.37 1211.7 L1765.95 1211.7 L1766.54 1211.7 L1767.13 1211.7 L1767.71 1211.7 L1768.3 1211.7 L1768.89 1211.7 L1769.47 1211.7 L1770.06 1211.7 L1770.65 1211.7 L1771.23 1211.7 L1771.82 1211.7 L1772.4 1211.7 L1772.99 1211.7 L1773.58 1211.7 L1774.16 1211.7 L1774.75 1211.7 L1775.34 1211.7 L1775.92 1211.7 L1776.51 1211.7 L1777.1 1211.7 L1777.68 1211.7 L1778.27 1211.7 L1778.86 1211.7 L1779.44 1211.7 L1780.03 1211.7 L1780.61 1211.7 L1781.2 1211.7 L1781.79 1211.7 L1782.37 1211.7 L1782.96 1211.7 L1783.55 1211.7 L1784.13 1211.7 L1784.72 1211.7 L1785.31 1211.7 L1785.89 1211.7 L1786.48 1211.7 L1787.06 1211.7 L1787.65 1211.7 L1788.24 1211.7 L1788.82 1211.7 L1789.41 1211.7 L1790 1211.7 L1790.58 1211.7 L1791.17 1211.7 L1791.76 1211.7 L1792.34 1211.7 L1792.93 1211.7 L1793.52 1211.7 L1794.1 1211.7 L1794.69 1211.7 L1795.27 1211.7 L1795.86 1211.7 L1796.45 1211.7 L1797.03 1211.7 L1797.62 1211.7 L1798.21 1211.7 L1798.79 1211.7 L1799.38 1211.7 L1799.97 1211.7 L1800.55 1211.7 L1801.14 1211.7 L1801.73 1211.7 L1802.31 1211.7 L1802.9 1211.7 L1803.48 1211.7 L1804.07 1211.7 L1804.66 1211.7 L1805.24 1211.7 L1805.83 1211.7 L1806.42 1211.7 L1807 1211.7 L1807.59 1211.7 L1808.18 1211.7 L1808.76 1211.7 L1809.35 1211.7 L1809.94 1211.7 L1810.52 1211.7 L1811.11 1211.7 L1811.69 1211.7 L1812.28 1211.7 L1812.87 1211.7 L1813.45 1211.7 L1814.04 1211.7 L1814.63 1211.7 L1815.21 1211.7 L1815.8 1211.7 L1816.39 1211.7 L1816.97 1211.7 L1817.56 1211.7 L1818.14 1211.7 L1818.73 1211.7 L1819.32 1211.7 L1819.9 1211.7 L1820.49 1211.7 L1821.08 1211.7 L1821.66 1211.7 L1822.25 1211.7 L1822.84 1211.7 L1823.42 1211.7 L1824.01 1211.7 L1824.6 1211.7 L1825.18 1211.7 L1825.77 1211.7 L1826.35 1211.7 L1826.94 1211.7 L1827.53 1211.7 L1828.11 1211.7 L1828.7 1211.7 L1829.29 1211.7 L1829.87 1211.7 L1830.46 1211.7 L1831.05 1211.7 L1831.63 1211.7 L1832.22 1211.7 L1832.81 1211.7 L1833.39 1211.7 L1833.98 1211.7 L1834.56 1211.7 L1835.15 1211.7 L1835.74 1211.7 L1836.32 1211.7 L1836.91 1211.7 L1837.5 1211.7 L1838.08 1211.7 L1838.67 1211.7 L1839.26 1211.7 L1839.84 1211.7 L1840.43 1211.7 L1841.01 1211.7 L1841.6 1211.7 L1842.19 1211.7 L1842.77 1211.7 L1843.36 1211.7 L1843.95 1211.7 L1844.53 1211.7 L1845.12 1211.7 L1845.71 1211.7 L1846.29 1211.7 L1846.88 1211.7 L1847.47 1211.7 L1848.05 1211.7 L1848.64 1211.7 L1849.22 1211.7 L1849.81 1211.7 L1850.4 1211.7 L1850.98 1211.7 L1851.57 1211.7 L1852.16 1211.7 L1852.74 1211.7 L1853.33 1211.7 L1853.92 1211.7 L1854.5 1211.7 L1855.09 1211.7 L1855.68 1211.7 L1856.26 1211.7 L1856.85 1211.7 L1857.43 1211.7 L1858.02 1211.7 L1858.61 1211.7 L1859.19 1211.7 L1859.78 1211.7 L1860.37 1211.7 L1860.95 1211.7 L1861.54 1211.7 L1862.13 1211.7 L1862.71 1211.7 L1863.3 1211.7 L1863.88 1211.7 L1864.47 1211.7 L1865.06 1211.7 L1865.64 1211.7 L1866.23 1211.7 L1866.82 1211.7 L1867.4 1211.7 L1867.99 1211.7 L1868.58 1211.7 L1869.16 1211.7 L1869.75 1211.7 L1870.34 1211.7 L1870.92 1211.7 L1871.51 1211.7 L1872.09 1211.7 L1872.68 1211.7 L1873.27 1211.7 L1873.85 1211.7 L1874.44 1211.7 L1875.03 1211.7 L1875.61 1211.7 L1876.2 1211.7 L1876.79 1211.7 L1877.37 1211.7 L1877.96 1211.7 L1878.55 1211.7 L1879.13 1211.7 L1879.72 1211.7 L1880.3 1211.7 L1880.89 1211.7 L1881.48 1211.7 L1882.06 1211.7 L1882.65 1211.7 L1883.24 1211.7 L1883.82 1211.7 L1884.41 1211.7 L1885 1211.7 L1885.58 1211.7 L1886.17 1211.7 L1886.76 1211.7 L1887.34 1211.7 L1887.93 1211.7 L1888.51 1211.7 L1889.1 1211.7 L1889.69 1211.7 L1890.27 1211.7 L1890.86 1211.7 L1891.45 1211.7 L1892.03 1211.7 L1892.62 1211.7 L1893.21 1211.7 L1893.79 1211.7 L1894.38 1211.7 L1894.96 1211.7 L1895.55 1211.7 L1896.14 1211.7 L1896.72 1211.7 L1897.31 1211.7 L1897.9 1211.7 L1898.48 1211.7 L1899.07 1211.7 L1899.66 1211.7 L1900.24 1211.7 L1900.83 1211.7 L1901.42 1211.7 L1902 1211.7 L1902.59 1211.7 L1903.17 1211.7 L1903.76 1211.7 L1904.35 1211.7 L1904.93 1211.7 L1905.52 1211.7 L1906.11 1211.7 L1906.69 1211.7 L1907.28 1211.7 L1907.87 1211.7 L1908.45 1211.7 L1909.04 1211.7 L1909.63 1211.7 L1910.21 1211.7 L1910.8 1211.7 L1911.38 1211.7 L1911.97 1211.7 L1912.56 1211.7 L1913.14 1211.7 L1913.73 1211.7 L1914.32 1211.7 L1914.9 1211.7 L1915.49 1211.7 L1916.08 1211.7 L1916.66 1211.7 L1917.25 1211.7 L1917.83 1211.7 L1918.42 1211.7 L1919.01 1211.7 L1919.59 1211.7 L1920.18 1211.7 L1920.77 1211.7 L1921.35 1211.7 L1921.94 1211.7 L1922.53 1211.7 L1923.11 1211.7 L1923.7 1211.7 L1924.29 1211.7 L1924.87 1211.7 L1925.46 1211.7 L1926.04 1211.7 L1926.63 1211.7 L1927.22 1211.7 L1927.8 1211.7 L1928.39 1211.7 L1928.98 1211.7 L1929.56 1211.7 L1930.15 1211.7 L1930.74 1211.7 L1931.32 1211.7 L1931.91 1211.7 L1932.5 1211.7 L1933.08 1211.7 L1933.67 1211.7 L1934.25 1211.7 L1934.84 1211.7 L1935.43 1211.7 L1936.01 1211.7 L1936.6 1211.7 L1937.19 1211.7 L1937.77 1211.7 L1938.36 1211.7 L1938.95 1211.7 L1939.53 1211.7 L1940.12 1211.7 L1940.71 1211.7 L1941.29 1211.7 L1941.88 1211.7 L1942.46 1211.7 L1943.05 1211.7 L1943.64 1211.7 L1944.22 1211.7 L1944.81 1211.7 L1945.4 1211.7 L1945.98 1211.7 L1946.57 1211.7 L1947.16 1211.7 L1947.74 1211.7 L1948.33 1211.7 L1948.91 1211.7 L1949.5 1211.7 L1950.09 1211.7 L1950.67 1211.7 L1951.26 1211.7 L1951.85 1211.7 L1952.43 1211.7 L1953.02 1211.7 L1953.61 1211.7 L1954.19 1211.7 L1954.78 1211.7 L1955.37 1211.7 L1955.95 1211.7 L1956.54 1211.7 L1957.12 1211.7 L1957.71 1211.7 L1958.3 1211.7 L1958.88 1211.7 L1959.47 1211.7 L1960.06 1211.7 L1960.64 1211.7 L1961.23 1211.7 L1961.82 1211.7 L1962.4 1211.7 L1962.99 1211.7 L1963.58 1211.7 L1964.16 1211.7 L1964.75 1211.7 L1965.33 1211.7 L1965.92 1211.7 L1966.51 1211.7 L1967.09 1211.7 L1967.68 1211.7 L1968.27 1211.7 L1968.85 1211.7 L1969.44 1211.7 L1970.03 1211.7 L1970.61 1211.7 L1971.2 1211.7 L1971.78 1211.7 L1972.37 1211.7 L1972.96 1211.7 L1973.54 1211.7 L1974.13 1211.7 L1974.72 1211.7 L1975.3 1211.7 L1975.89 1211.7 L1976.48 1211.7 L1977.06 1211.7 L1977.65 1211.7 L1978.24 1211.7 L1978.82 1211.7 L1979.41 1211.7 L1979.99 1211.7 L1980.58 1211.7 L1981.17 1211.7 L1981.75 1211.7 L1982.34 1211.7 L1982.93 1211.7 L1983.51 1211.7 L1984.1 1211.7 L1984.69 1211.7 L1985.27 1211.7 L1985.86 1211.7 L1986.45 1211.7 L1987.03 1211.7 L1987.62 1211.7 L1988.2 1211.7 L1988.79 1211.7 L1989.38 1211.7 L1989.96 1211.7 L1990.55 1211.7 L1991.14 1211.7 L1991.72 1211.7 L1992.31 1211.7 L1992.9 1211.7 L1993.48 1211.7 L1994.07 1211.7 L1994.65 1211.7 L1995.24 1211.7 L1995.83 1211.7 L1996.41 1211.7 L1997 1211.7 L1997.59 1211.7 L1998.17 1211.7 L1998.76 1211.7 L1999.35 1211.7 L1999.93 1211.7 L2000.52 1211.7 L2001.11 1211.7 L2001.69 1211.7 L2002.28 1211.7 L2002.86 1211.7 L2003.45 1211.7 L2004.04 1211.7 L2004.62 1211.7 L2005.21 1211.7 L2005.8 1211.7 L2006.38 1211.7 L2006.97 1211.7 L2007.56 1211.7 L2008.14 1211.7 L2008.73 1211.7 L2009.32 1211.7 L2009.9 1211.7 L2010.49 1211.7 L2011.07 1211.7 L2011.66 1211.7 L2012.25 1211.7 L2012.83 1211.7 L2013.42 1211.7 L2014.01 1211.7 L2014.59 1211.7 L2015.18 1211.7 L2015.77 1211.7 L2016.35 1211.7 L2016.94 1211.7 L2017.53 1211.7 L2018.11 1211.7 L2018.7 1211.7 L2019.28 1211.7 L2019.87 1211.7 L2020.46 1211.7 L2021.04 1211.7 L2021.63 1211.7 L2022.22 1211.7 L2022.8 1211.7 L2023.39 1211.7 L2023.98 1211.7 L2024.56 1211.7 L2025.15 1211.7 L2025.73 1211.7 L2026.32 1211.7 L2026.91 1211.7 L2027.49 1211.7 L2028.08 1211.7 L2028.67 1211.7 L2029.25 1211.7 L2029.84 1211.7 L2030.43 1211.7 L2031.01 1211.7 L2031.6 1211.7 L2032.19 1211.7 L2032.77 1211.7 L2033.36 1211.7 L2033.94 1211.7 L2034.53 1211.7 L2035.12 1211.7 L2035.7 1211.7 L2036.29 1211.7 L2036.88 1211.7 L2037.46 1211.7 L2038.05 1211.7 L2038.64 1211.7 L2039.22 1211.7 L2039.81 1211.7 L2040.4 1211.7 L2040.98 1211.7 L2041.57 1211.7 L2042.15 1211.7 L2042.74 1211.7 L2043.33 1211.7 L2043.91 1211.7 L2044.5 1211.7 L2045.09 1211.7 L2045.67 1211.7 L2046.26 1211.7 L2046.85 1211.7 L2047.43 1211.7 L2048.02 1211.7 L2048.6 1211.7 L2049.19 1211.7 L2049.78 1211.7 L2050.36 1211.7 L2050.95 1211.7 L2051.54 1211.7 L2052.12 1211.7 L2052.71 1211.7 L2053.3 1211.7 L2053.88 1211.7 L2054.47 1211.7 L2055.06 1211.7 L2055.64 1211.7 L2056.23 1211.7 L2056.81 1211.7 L2057.4 1211.7 L2057.99 1211.7 L2058.57 1211.7 L2059.16 1211.7 L2059.75 1211.7 L2060.33 1211.7 L2060.92 1211.7 L2061.51 1211.7 L2062.09 1211.7 L2062.68 1211.7 L2063.27 1211.7 L2063.85 1211.7 L2064.44 1211.7 L2065.02 1211.7 L2065.61 1211.7 L2066.2 1211.7 L2066.78 1211.7 L2067.37 1211.7 L2067.96 1211.7 L2068.54 1211.7 L2069.13 1211.7 L2069.72 1211.7 L2070.3 1211.7 L2070.89 1211.7 L2071.48 1211.7 L2072.06 1211.7 L2072.65 1211.7 L2073.23 1211.7 L2073.82 1211.7 L2074.41 1211.7 L2074.99 1211.7 L2075.58 1211.7 L2076.17 1211.7 L2076.75 1211.7 L2077.34 1211.7 L2077.93 1211.7 L2078.51 1211.7 L2079.1 1211.7 L2079.68 1211.7 L2080.27 1211.7 L2080.86 1211.7 L2081.44 1211.7 L2082.03 1211.7 L2082.62 1211.7 L2083.2 1211.7 L2083.79 1211.7 L2084.38 1211.7 L2084.96 1211.7 L2085.55 1211.7 L2086.14 1211.7 L2086.72 1211.7 L2087.31 1211.7 L2087.89 1211.7 L2088.48 1211.7 L2089.07 1211.7 L2089.65 1211.7 L2090.24 1211.7 L2090.83 1211.7 L2091.41 1211.7 L2092 1211.7 L2092.59 1211.7 L2093.17 1211.7 L2093.76 1211.7 L2094.35 1211.7 L2094.93 1211.7 L2095.52 1211.7 L2096.1 1211.7 L2096.69 1211.7 L2097.28 1211.7 L2097.86 1211.7 L2098.45 1211.7 L2099.04 1211.7 L2099.62 1211.7 L2100.21 1211.7 L2100.8 1211.7 L2101.38 1211.7 L2101.97 1211.7 L2102.55 1211.7 L2103.14 1211.7 L2103.73 1211.7 L2104.31 1211.7 L2104.9 1211.7 L2105.49 1211.7 L2106.07 1211.7 L2106.66 1211.7 L2107.25 1211.7 L2107.83 1211.7 L2108.42 1211.7 L2109.01 1211.7 L2109.59 1211.7 L2110.18 1211.7 L2110.76 1211.7 L2111.35 1211.7 L2111.94 1211.7 L2112.52 1211.7 L2113.11 1211.7 L2113.7 1211.7 L2114.28 1211.7 L2114.87 1211.7 L2115.46 1211.7 L2116.04 1211.7 L2116.63 1211.7 L2117.22 1211.7 L2117.8 1211.7 L2118.39 1211.7 L2118.97 1211.7 L2119.56 1211.7 L2120.15 1211.7 L2120.73 1211.7 L2121.32 1211.7 L2121.91 1211.7 L2122.49 1211.7 L2123.08 1211.7 L2123.67 1211.7 L2124.25 1211.7 L2124.84 1211.7 L2125.42 1211.7 L2126.01 1211.7 L2126.6 1211.7 L2127.18 1211.7 L2127.77 1211.7 L2128.36 1211.7 L2128.94 1211.7 L2129.53 1211.7 L2130.12 1211.7 L2130.7 1211.7 L2131.29 1211.7 L2131.88 1211.7 L2132.46 1211.7 L2133.05 1211.7 L2133.63 1211.7 L2134.22 1211.7 L2134.81 1211.7 L2135.39 1211.7 L2135.98 1211.7 L2136.57 1211.7 L2137.15 1211.7 L2137.74 1211.7 L2138.33 1211.7 L2138.91 1211.7 L2139.5 1211.7 L2140.09 1211.7 L2140.67 1211.7 L2141.26 1211.7 L2141.84 1211.7 L2142.43 1211.7 L2143.02 1211.7 L2143.6 1211.7 L2144.19 1211.7 L2144.78 1211.7 L2145.36 1211.7 L2145.95 1211.7 L2146.54 1211.7 L2147.12 1211.7 L2147.71 1211.7 L2148.3 1211.7 L2148.88 1211.7 L2149.47 1211.7 L2150.05 1211.7 L2150.64 1211.7 L2151.23 1211.7 L2151.81 1211.7 L2152.4 1211.7 L2152.99 1211.7 L2153.57 1211.7 L2154.16 1211.7 L2154.75 1211.7 L2155.33 1211.7 L2155.92 1211.7 L2156.5 1211.7 L2157.09 1211.7 L2157.68 1211.7 L2158.26 1211.7 L2158.26 1210.83 L2157.68 1210.83 L2157.09 1210.83 L2156.5 1210.83 L2155.92 1210.83 L2155.33 1210.83 L2154.75 1210.83 L2154.16 1210.83 L2153.57 1210.83 L2152.99 1210.83 L2152.4 1210.83 L2151.81 1210.83 L2151.23 1210.83 L2150.64 1210.83 L2150.05 1210.83 L2149.47 1210.83 L2148.88 1210.83 L2148.3 1210.83 L2147.71 1210.83 L2147.12 1210.83 L2146.54 1210.83 L2145.95 1210.83 L2145.36 1210.83 L2144.78 1210.83 L2144.19 1210.83 L2143.6 1210.83 L2143.02 1210.83 L2142.43 1210.83 L2141.84 1210.83 L2141.26 1210.83 L2140.67 1210.83 L2140.09 1210.83 L2139.5 1210.83 L2138.91 1210.83 L2138.33 1210.83 L2137.74 1210.83 L2137.15 1210.83 L2136.57 1210.83 L2135.98 1210.83 L2135.39 1210.83 L2134.81 1210.83 L2134.22 1210.83 L2133.63 1210.83 L2133.05 1210.83 L2132.46 1210.83 L2131.88 1210.83 L2131.29 1210.83 L2130.7 1210.83 L2130.12 1210.83 L2129.53 1210.83 L2128.94 1210.83 L2128.36 1210.83 L2127.77 1210.83 L2127.18 1210.83 L2126.6 1210.83 L2126.01 1210.83 L2125.42 1210.83 L2124.84 1210.83 L2124.25 1210.83 L2123.67 1210.83 L2123.08 1210.83 L2122.49 1210.83 L2121.91 1210.83 L2121.32 1210.83 L2120.73 1210.83 L2120.15 1210.83 L2119.56 1210.83 L2118.97 1210.83 L2118.39 1210.83 L2117.8 1210.83 L2117.22 1210.83 L2116.63 1210.83 L2116.04 1210.83 L2115.46 1210.83 L2114.87 1210.83 L2114.28 1210.83 L2113.7 1210.83 L2113.11 1210.83 L2112.52 1210.83 L2111.94 1210.83 L2111.35 1210.83 L2110.76 1210.83 L2110.18 1210.83 L2109.59 1210.83 L2109.01 1210.83 L2108.42 1210.83 L2107.83 1210.83 L2107.25 1210.83 L2106.66 1210.83 L2106.07 1210.83 L2105.49 1210.83 L2104.9 1210.83 L2104.31 1210.83 L2103.73 1210.83 L2103.14 1210.83 L2102.55 1210.83 L2101.97 1210.83 L2101.38 1210.83 L2100.8 1210.83 L2100.21 1210.83 L2099.62 1210.83 L2099.04 1210.83 L2098.45 1210.83 L2097.86 1210.83 L2097.28 1210.83 L2096.69 1210.83 L2096.1 1210.83 L2095.52 1210.83 L2094.93 1210.83 L2094.35 1210.83 L2093.76 1210.83 L2093.17 1210.83 L2092.59 1210.83 L2092 1210.83 L2091.41 1210.83 L2090.83 1210.83 L2090.24 1210.83 L2089.65 1210.83 L2089.07 1210.83 L2088.48 1210.83 L2087.89 1210.83 L2087.31 1210.83 L2086.72 1210.83 L2086.14 1210.83 L2085.55 1210.83 L2084.96 1210.83 L2084.38 1210.83 L2083.79 1210.83 L2083.2 1210.83 L2082.62 1210.83 L2082.03 1210.83 L2081.44 1210.83 L2080.86 1210.83 L2080.27 1210.83 L2079.68 1210.83 L2079.1 1210.83 L2078.51 1210.83 L2077.93 1210.83 L2077.34 1210.83 L2076.75 1210.83 L2076.17 1210.83 L2075.58 1210.83 L2074.99 1210.83 L2074.41 1210.83 L2073.82 1210.83 L2073.23 1210.83 L2072.65 1210.83 L2072.06 1210.83 L2071.48 1210.83 L2070.89 1210.83 L2070.3 1210.83 L2069.72 1210.83 L2069.13 1210.83 L2068.54 1210.83 L2067.96 1210.83 L2067.37 1210.83 L2066.78 1210.83 L2066.2 1210.83 L2065.61 1210.83 L2065.02 1210.83 L2064.44 1210.83 L2063.85 1210.83 L2063.27 1210.83 L2062.68 1210.83 L2062.09 1210.83 L2061.51 1210.83 L2060.92 1210.83 L2060.33 1210.83 L2059.75 1210.83 L2059.16 1210.83 L2058.57 1210.83 L2057.99 1210.83 L2057.4 1210.83 L2056.81 1210.83 L2056.23 1210.83 L2055.64 1210.83 L2055.06 1210.83 L2054.47 1210.83 L2053.88 1210.83 L2053.3 1210.83 L2052.71 1210.83 L2052.12 1210.83 L2051.54 1210.83 L2050.95 1210.83 L2050.36 1210.83 L2049.78 1210.83 L2049.19 1210.83 L2048.6 1210.83 L2048.02 1210.83 L2047.43 1210.83 L2046.85 1210.83 L2046.26 1210.83 L2045.67 1210.83 L2045.09 1210.83 L2044.5 1210.83 L2043.91 1210.83 L2043.33 1210.83 L2042.74 1210.83 L2042.15 1210.83 L2041.57 1210.83 L2040.98 1210.83 L2040.4 1210.83 L2039.81 1210.83 L2039.22 1210.83 L2038.64 1210.83 L2038.05 1210.83 L2037.46 1210.83 L2036.88 1210.83 L2036.29 1210.83 L2035.7 1210.83 L2035.12 1210.83 L2034.53 1210.83 L2033.94 1210.83 L2033.36 1210.83 L2032.77 1210.83 L2032.19 1210.83 L2031.6 1210.83 L2031.01 1210.83 L2030.43 1210.83 L2029.84 1210.83 L2029.25 1210.83 L2028.67 1210.83 L2028.08 1210.83 L2027.49 1210.83 L2026.91 1210.83 L2026.32 1210.83 L2025.73 1210.83 L2025.15 1210.83 L2024.56 1210.83 L2023.98 1210.83 L2023.39 1210.83 L2022.8 1210.83 L2022.22 1210.83 L2021.63 1210.83 L2021.04 1210.83 L2020.46 1210.83 L2019.87 1210.83 L2019.28 1210.83 L2018.7 1210.83 L2018.11 1210.83 L2017.53 1210.83 L2016.94 1210.83 L2016.35 1210.83 L2015.77 1210.83 L2015.18 1210.83 L2014.59 1210.83 L2014.01 1210.83 L2013.42 1210.83 L2012.83 1210.83 L2012.25 1210.83 L2011.66 1210.83 L2011.07 1210.83 L2010.49 1210.83 L2009.9 1210.83 L2009.32 1210.83 L2008.73 1210.83 L2008.14 1210.83 L2007.56 1210.83 L2006.97 1210.83 L2006.38 1210.83 L2005.8 1210.83 L2005.21 1210.83 L2004.62 1210.83 L2004.04 1210.83 L2003.45 1210.83 L2002.86 1210.83 L2002.28 1210.83 L2001.69 1210.83 L2001.11 1210.83 L2000.52 1210.83 L1999.93 1210.83 L1999.35 1210.83 L1998.76 1210.83 L1998.17 1210.83 L1997.59 1210.83 L1997 1210.83 L1996.41 1210.83 L1995.83 1210.83 L1995.24 1210.83 L1994.65 1210.83 L1994.07 1210.83 L1993.48 1210.83 L1992.9 1210.83 L1992.31 1210.83 L1991.72 1210.83 L1991.14 1210.83 L1990.55 1210.83 L1989.96 1210.83 L1989.38 1210.83 L1988.79 1210.83 L1988.2 1210.83 L1987.62 1210.83 L1987.03 1210.83 L1986.45 1210.83 L1985.86 1210.83 L1985.27 1210.83 L1984.69 1210.83 L1984.1 1210.83 L1983.51 1210.83 L1982.93 1210.83 L1982.34 1210.83 L1981.75 1210.83 L1981.17 1210.83 L1980.58 1210.83 L1979.99 1210.83 L1979.41 1210.83 L1978.82 1210.83 L1978.24 1210.83 L1977.65 1210.83 L1977.06 1210.83 L1976.48 1210.83 L1975.89 1210.83 L1975.3 1210.83 L1974.72 1210.83 L1974.13 1210.83 L1973.54 1210.83 L1972.96 1210.83 L1972.37 1210.83 L1971.78 1210.83 L1971.2 1210.83 L1970.61 1210.83 L1970.03 1210.83 L1969.44 1210.83 L1968.85 1210.83 L1968.27 1210.83 L1967.68 1210.83 L1967.09 1210.83 L1966.51 1210.83 L1965.92 1210.83 L1965.33 1210.83 L1964.75 1210.83 L1964.16 1210.83 L1963.58 1210.83 L1962.99 1210.83 L1962.4 1210.83 L1961.82 1210.83 L1961.23 1210.83 L1960.64 1210.83 L1960.06 1210.83 L1959.47 1210.83 L1958.88 1210.83 L1958.3 1210.83 L1957.71 1210.83 L1957.12 1210.83 L1956.54 1210.83 L1955.95 1210.83 L1955.37 1210.83 L1954.78 1210.83 L1954.19 1210.83 L1953.61 1210.83 L1953.02 1210.83 L1952.43 1210.83 L1951.85 1210.83 L1951.26 1210.83 L1950.67 1210.83 L1950.09 1210.83 L1949.5 1210.83 L1948.91 1210.83 L1948.33 1210.83 L1947.74 1210.83 L1947.16 1210.83 L1946.57 1210.83 L1945.98 1210.83 L1945.4 1210.83 L1944.81 1210.83 L1944.22 1210.83 L1943.64 1210.83 L1943.05 1210.83 L1942.46 1210.83 L1941.88 1210.83 L1941.29 1210.83 L1940.71 1210.83 L1940.12 1210.83 L1939.53 1210.83 L1938.95 1210.83 L1938.36 1210.83 L1937.77 1210.83 L1937.19 1210.83 L1936.6 1210.83 L1936.01 1210.83 L1935.43 1210.83 L1934.84 1210.83 L1934.25 1210.83 L1933.67 1210.83 L1933.08 1210.83 L1932.5 1210.83 L1931.91 1210.83 L1931.32 1210.83 L1930.74 1210.83 L1930.15 1210.83 L1929.56 1210.83 L1928.98 1210.83 L1928.39 1210.83 L1927.8 1210.83 L1927.22 1210.83 L1926.63 1210.83 L1926.04 1210.83 L1925.46 1210.83 L1924.87 1210.83 L1924.29 1210.83 L1923.7 1210.83 L1923.11 1210.83 L1922.53 1210.83 L1921.94 1210.83 L1921.35 1210.83 L1920.77 1210.83 L1920.18 1210.83 L1919.59 1210.83 L1919.01 1210.83 L1918.42 1210.83 L1917.83 1210.83 L1917.25 1210.83 L1916.66 1210.83 L1916.08 1210.83 L1915.49 1210.83 L1914.9 1210.83 L1914.32 1210.83 L1913.73 1210.83 L1913.14 1210.83 L1912.56 1210.83 L1911.97 1210.83 L1911.38 1210.83 L1910.8 1210.83 L1910.21 1210.83 L1909.63 1210.83 L1909.04 1210.83 L1908.45 1210.83 L1907.87 1210.83 L1907.28 1210.83 L1906.69 1210.83 L1906.11 1210.83 L1905.52 1210.83 L1904.93 1210.83 L1904.35 1210.83 L1903.76 1210.83 L1903.17 1210.83 L1902.59 1210.83 L1902 1210.83 L1901.42 1210.83 L1900.83 1210.83 L1900.24 1210.83 L1899.66 1210.83 L1899.07 1210.83 L1898.48 1210.83 L1897.9 1210.83 L1897.31 1210.83 L1896.72 1210.83 L1896.14 1210.83 L1895.55 1210.83 L1894.96 1210.83 L1894.38 1210.83 L1893.79 1210.83 L1893.21 1210.83 L1892.62 1210.83 L1892.03 1210.83 L1891.45 1210.83 L1890.86 1210.83 L1890.27 1210.83 L1889.69 1210.83 L1889.1 1210.83 L1888.51 1210.83 L1887.93 1210.83 L1887.34 1210.83 L1886.76 1210.83 L1886.17 1210.83 L1885.58 1210.83 L1885 1210.83 L1884.41 1210.83 L1883.82 1210.83 L1883.24 1210.83 L1882.65 1210.83 L1882.06 1210.83 L1881.48 1210.83 L1880.89 1210.83 L1880.3 1210.83 L1879.72 1210.83 L1879.13 1210.83 L1878.55 1210.83 L1877.96 1210.83 L1877.37 1210.83 L1876.79 1210.83 L1876.2 1210.83 L1875.61 1210.83 L1875.03 1210.83 L1874.44 1210.83 L1873.85 1210.83 L1873.27 1210.83 L1872.68 1210.83 L1872.09 1210.83 L1871.51 1210.83 L1870.92 1210.83 L1870.34 1210.83 L1869.75 1210.83 L1869.16 1210.83 L1868.58 1210.83 L1867.99 1210.83 L1867.4 1210.83 L1866.82 1210.83 L1866.23 1210.83 L1865.64 1210.83 L1865.06 1210.83 L1864.47 1210.83 L1863.88 1210.83 L1863.3 1210.83 L1862.71 1210.83 L1862.13 1210.83 L1861.54 1210.83 L1860.95 1210.83 L1860.37 1210.83 L1859.78 1210.83 L1859.19 1210.83 L1858.61 1210.83 L1858.02 1210.83 L1857.43 1210.83 L1856.85 1210.83 L1856.26 1210.83 L1855.68 1210.83 L1855.09 1210.83 L1854.5 1210.83 L1853.92 1210.83 L1853.33 1210.83 L1852.74 1210.83 L1852.16 1210.83 L1851.57 1210.83 L1850.98 1210.83 L1850.4 1210.83 L1849.81 1210.83 L1849.22 1210.83 L1848.64 1210.83 L1848.05 1210.83 L1847.47 1210.83 L1846.88 1210.83 L1846.29 1210.83 L1845.71 1210.83 L1845.12 1210.83 L1844.53 1210.83 L1843.95 1210.83 L1843.36 1210.83 L1842.77 1210.83 L1842.19 1210.83 L1841.6 1210.83 L1841.01 1210.83 L1840.43 1210.83 L1839.84 1210.83 L1839.26 1210.83 L1838.67 1210.83 L1838.08 1210.83 L1837.5 1210.83 L1836.91 1210.83 L1836.32 1210.83 L1835.74 1210.83 L1835.15 1210.83 L1834.56 1210.83 L1833.98 1210.83 L1833.39 1210.83 L1832.81 1210.83 L1832.22 1210.83 L1831.63 1210.83 L1831.05 1210.83 L1830.46 1210.83 L1829.87 1210.83 L1829.29 1210.83 L1828.7 1210.83 L1828.11 1210.83 L1827.53 1210.83 L1826.94 1210.83 L1826.35 1210.83 L1825.77 1210.83 L1825.18 1210.83 L1824.6 1210.83 L1824.01 1210.83 L1823.42 1210.83 L1822.84 1210.83 L1822.25 1210.83 L1821.66 1210.83 L1821.08 1210.83 L1820.49 1210.83 L1819.9 1210.83 L1819.32 1210.83 L1818.73 1210.83 L1818.14 1210.83 L1817.56 1210.83 L1816.97 1210.83 L1816.39 1210.83 L1815.8 1210.83 L1815.21 1210.83 L1814.63 1210.83 L1814.04 1210.83 L1813.45 1210.83 L1812.87 1210.83 L1812.28 1210.83 L1811.69 1210.83 L1811.11 1210.83 L1810.52 1210.83 L1809.94 1210.83 L1809.35 1210.83 L1808.76 1210.83 L1808.18 1210.83 L1807.59 1210.83 L1807 1210.83 L1806.42 1210.83 L1805.83 1210.83 L1805.24 1210.83 L1804.66 1210.83 L1804.07 1210.83 L1803.48 1210.83 L1802.9 1210.83 L1802.31 1210.83 L1801.73 1210.83 L1801.14 1210.83 L1800.55 1210.83 L1799.97 1210.83 L1799.38 1210.83 L1798.79 1210.83 L1798.21 1210.83 L1797.62 1210.83 L1797.03 1210.83 L1796.45 1210.83 L1795.86 1210.83 L1795.27 1210.83 L1794.69 1210.83 L1794.1 1210.83 L1793.52 1210.83 L1792.93 1210.83 L1792.34 1210.83 L1791.76 1210.83 L1791.17 1210.83 L1790.58 1210.83 L1790 1210.83 L1789.41 1210.83 L1788.82 1210.83 L1788.24 1210.83 L1787.65 1210.83 L1787.06 1210.83 L1786.48 1210.83 L1785.89 1210.83 L1785.31 1210.83 L1784.72 1210.83 L1784.13 1210.83 L1783.55 1210.83 L1782.96 1210.83 L1782.37 1210.83 L1781.79 1210.83 L1781.2 1210.83 L1780.61 1210.83 L1780.03 1210.83 L1779.44 1210.83 L1778.86 1210.83 L1778.27 1210.83 L1777.68 1210.83 L1777.1 1210.83 L1776.51 1210.83 L1775.92 1210.83 L1775.34 1210.83 L1774.75 1210.83 L1774.16 1210.83 L1773.58 1210.83 L1772.99 1210.83 L1772.4 1210.83 L1771.82 1210.83 L1771.23 1210.83 L1770.65 1210.83 L1770.06 1210.83 L1769.47 1210.83 L1768.89 1210.83 L1768.3 1210.83 L1767.71 1210.83 L1767.13 1210.83 L1766.54 1210.83 L1765.95 1210.83 L1765.37 1210.83 L1764.78 1210.83 L1764.19 1210.83 L1763.61 1210.83 L1763.02 1210.83 L1762.44 1210.83 L1761.85 1210.83 L1761.26 1210.83 L1760.68 1210.83 L1760.09 1210.83 L1759.5 1210.83 L1758.92 1210.83 L1758.33 1210.83 L1757.74 1210.83 L1757.16 1210.83 L1756.57 1210.83 L1755.99 1210.83 L1755.4 1210.83 L1754.81 1210.83 L1754.23 1210.83 L1753.64 1210.83 L1753.05 1210.83 L1752.47 1210.83 L1751.88 1210.83 L1751.29 1210.83 L1750.71 1210.83 L1750.12 1210.83 L1749.53 1210.83 L1748.95 1210.83 L1748.36 1210.83 L1747.78 1210.83 L1747.19 1210.83 L1746.6 1210.83 L1746.02 1210.83 L1745.43 1210.83 L1744.84 1210.83 L1744.26 1210.83 L1743.67 1210.83 L1743.08 1210.83 L1742.5 1210.83 L1741.91 1210.83 L1741.32 1210.83 L1740.74 1210.83 L1740.15 1210.83 L1739.57 1210.83 L1738.98 1210.83 L1738.39 1210.83 L1737.81 1210.83 L1737.22 1210.83 L1736.63 1210.83 L1736.05 1210.83 L1735.46 1210.83 L1734.87 1210.83 L1734.29 1210.83 L1733.7 1210.83 L1733.11 1210.83 L1732.53 1210.83 L1731.94 1210.83 L1731.36 1210.83 L1730.77 1210.83 L1730.18 1210.83 L1729.6 1210.83 L1729.01 1210.83 L1728.42 1210.83 L1727.84 1210.83 L1727.25 1210.83 L1726.66 1210.83 L1726.08 1210.83 L1725.49 1210.83 L1724.91 1210.83 L1724.32 1210.83 L1723.73 1210.83 L1723.15 1210.83 L1722.56 1210.83 L1721.97 1210.83 L1721.39 1210.83 L1720.8 1210.83 L1720.21 1210.83 L1719.63 1210.83 L1719.04 1210.83 L1718.45 1210.83 L1717.87 1210.83 L1717.28 1210.83 L1716.7 1210.83 L1716.11 1210.83 L1715.52 1210.83 L1714.94 1210.83 L1714.35 1210.83 L1713.76 1210.83 L1713.18 1210.83 L1712.59 1210.83 L1712 1210.83 L1711.42 1210.83 L1710.83 1210.83 L1710.24 1210.83 L1709.66 1210.83 L1709.07 1210.83 L1708.49 1210.83 L1707.9 1210.83 L1707.31 1210.83 L1706.73 1210.83 L1706.14 1210.83 L1705.55 1210.83 L1704.97 1210.83 L1704.38 1210.83 L1703.79 1210.83 L1703.21 1210.83 L1702.62 1210.83 L1702.04 1210.83 L1701.45 1210.83 L1700.86 1210.83 L1700.28 1210.83 L1699.69 1210.83 L1699.1 1210.83 L1698.52 1210.83 L1697.93 1210.83 L1697.34 1210.83 L1696.76 1210.83 L1696.17 1210.83 L1695.58 1210.83 L1695 1210.83 L1694.41 1210.83 L1693.83 1210.83 L1693.24 1210.83 L1692.65 1210.83 L1692.07 1210.83 L1691.48 1210.83 L1690.89 1210.83 L1690.31 1210.83 L1689.72 1210.83 L1689.13 1210.83 L1688.55 1210.83 L1687.96 1210.83 L1687.37 1210.83 L1686.79 1210.83 L1686.2 1210.83 L1685.62 1210.83 L1685.03 1210.83 L1684.44 1210.83 L1683.86 1210.83 L1683.27 1210.83 L1682.68 1210.83 L1682.1 1210.83 L1681.51 1210.83 L1680.92 1210.83 L1680.34 1210.83 L1679.75 1210.83 L1679.17 1210.83 L1678.58 1210.83 L1677.99 1210.83 L1677.41 1210.83 L1676.82 1210.83 L1676.23 1210.83 L1675.65 1210.83 L1675.06 1210.83 L1674.47 1210.83 L1673.89 1210.83 L1673.3 1210.83 L1672.71 1210.83 L1672.13 1210.83 L1671.54 1210.83 L1670.96 1210.83 L1670.37 1210.83 L1669.78 1210.83 L1669.2 1210.83 L1668.61 1210.83 L1668.02 1210.83 L1667.44 1210.83 L1666.85 1210.83 L1666.26 1210.83 L1665.68 1210.83 L1665.09 1210.83 L1664.5 1210.83 L1663.92 1210.83 L1663.33 1210.83 L1662.75 1210.83 L1662.16 1210.83 L1661.57 1210.83 L1660.99 1210.83 L1660.4 1210.83 L1659.81 1210.83 L1659.23 1210.83 L1658.64 1210.83 L1658.05 1210.83 L1657.47 1210.83 L1656.88 1210.83 L1656.29 1210.83 L1655.71 1210.83 L1655.12 1210.83 L1654.54 1210.83 L1653.95 1210.83 L1653.36 1210.83 L1652.78 1210.83 L1652.19 1210.83 L1651.6 1210.83 L1651.02 1210.83 L1650.43 1210.83 L1649.84 1210.83 L1649.26 1210.83 L1648.67 1210.83 L1648.09 1210.83 L1647.5 1210.83 L1646.91 1210.83 L1646.33 1210.83 L1645.74 1210.83 L1645.15 1210.83 L1644.57 1210.83 L1643.98 1210.83 L1643.39 1210.83 L1642.81 1210.83 L1642.22 1210.83 L1641.63 1210.83 L1641.05 1210.83 L1640.46 1210.83 L1639.88 1210.83 L1639.29 1210.83 L1638.7 1210.83 L1638.12 1210.83 L1637.53 1210.83 L1636.94 1210.83 L1636.36 1210.83 L1635.77 1210.83 L1635.18 1210.83 L1634.6 1210.83 L1634.01 1210.83 L1633.42 1210.83 L1632.84 1210.83 L1632.25 1210.83 L1631.67 1210.83 L1631.08 1210.83 L1630.49 1210.83 L1629.91 1210.83 L1629.32 1210.83 L1628.73 1210.83 L1628.15 1210.83 L1627.56 1210.83 L1626.97 1210.83 L1626.39 1210.83 L1625.8 1210.83 L1625.22 1210.83 L1624.63 1210.83 L1624.04 1210.83 L1623.46 1210.83 L1622.87 1210.83 L1622.28 1210.83 L1621.7 1210.83 L1621.11 1210.83 L1620.52 1210.83 L1619.94 1210.83 L1619.35 1210.83 L1618.76 1210.83 L1618.18 1210.83 L1617.59 1210.83 L1617.01 1210.83 L1616.42 1210.83 L1615.83 1210.83 L1615.25 1210.83 L1614.66 1210.83 L1614.07 1210.83 L1613.49 1210.83 L1612.9 1210.83 L1612.31 1210.83 L1611.73 1210.83 L1611.14 1210.83 L1610.55 1210.83 L1609.97 1210.83 L1609.38 1210.83 L1608.8 1210.83 L1608.21 1210.83 L1607.62 1210.83 L1607.04 1210.83 L1606.45 1210.83 L1605.86 1210.83 L1605.28 1210.83 L1604.69 1210.83 L1604.1 1210.83 L1603.52 1210.83 L1602.93 1210.83 L1602.34 1210.83 L1601.76 1210.83 L1601.17 1210.83 L1600.59 1210.83 L1600 1210.83 L1599.41 1210.83 L1598.83 1210.83 L1598.24 1210.83 L1597.65 1210.83 L1597.07 1210.83 L1596.48 1210.83 L1595.89 1210.83 L1595.31 1210.83 L1594.72 1210.83 L1594.14 1210.83 L1593.55 1210.83 L1592.96 1210.83 L1592.38 1210.83 L1591.79 1210.83 L1591.2 1210.83 L1590.62 1210.83 L1590.03 1210.83 L1589.44 1210.83 L1588.86 1210.83 L1588.27 1210.83 L1587.68 1210.83 L1587.1 1210.83 L1586.51 1210.83 L1585.93 1210.83 L1585.34 1210.83 L1584.75 1210.83 L1584.17 1210.83 L1583.58 1210.83 L1582.99 1210.83 L1582.41 1210.83 L1581.82 1210.83 L1581.23 1210.83 L1580.65 1210.83 L1580.06 1210.83 L1579.47 1210.83 L1578.89 1210.83 L1578.3 1210.83 L1577.72 1210.83 L1577.13 1210.83 L1576.54 1210.83 L1575.96 1210.83 L1575.37 1210.83 L1574.78 1210.83 L1574.2 1210.83 L1573.61 1210.83 L1573.02 1210.83 L1572.44 1210.83 L1571.85 1210.83 L1571.27 1210.83 L1570.68 1210.83 L1570.09 1210.83 L1569.51 1210.83 L1568.92 1210.83 L1568.33 1210.83 L1567.75 1210.83 L1567.16 1210.83 L1566.57 1210.83 L1565.99 1210.83 L1565.4 1210.83 L1564.81 1210.83 L1564.23 1210.83 L1563.64 1210.83 L1563.06 1210.83 L1562.47 1210.83 L1561.88 1210.83 L1561.3 1210.83 L1560.71 1210.83 L1560.12 1210.83 L1559.54 1210.83 L1558.95 1210.83 L1558.36 1210.83 L1557.78 1210.83 L1557.19 1210.83 L1556.6 1210.83 L1556.02 1210.83 L1555.43 1210.83 L1554.85 1210.83 L1554.26 1210.83 L1553.67 1210.83 L1553.09 1210.83 L1552.5 1210.83 L1551.91 1210.83 L1551.33 1210.83 L1550.74 1210.83 L1550.15 1210.83 L1549.57 1210.83 L1548.98 1210.83 L1548.4 1210.83 L1547.81 1210.83 L1547.22 1210.83 L1546.64 1210.83 L1546.05 1210.83 L1545.46 1210.83 L1544.88 1210.83 L1544.29 1210.83 L1543.7 1210.83 L1543.12 1210.83 L1542.53 1210.83 L1541.94 1210.83 L1541.36 1210.83 L1540.77 1210.83 L1540.19 1210.83 L1539.6 1210.83 L1539.01 1210.83 L1538.43 1210.83 L1537.84 1210.83 L1537.25 1210.83 L1536.67 1210.83 L1536.08 1210.83 L1535.49 1210.83 L1534.91 1210.83 L1534.32 1210.83 L1533.73 1210.83 L1533.15 1210.83 L1532.56 1210.83 L1531.98 1210.83 L1531.39 1210.83 L1530.8 1210.83 L1530.22 1210.83 L1529.63 1210.83 L1529.04 1210.83 L1528.46 1210.83 L1527.87 1210.83 L1527.28 1210.83 L1526.7 1210.83 L1526.11 1210.83 L1525.52 1210.83 L1524.94 1210.83 L1524.35 1210.83 L1523.77 1210.83 L1523.18 1210.83 L1522.59 1210.83 L1522.01 1210.83 L1521.42 1210.83 L1520.83 1210.83 L1520.25 1210.83 L1519.66 1210.83 L1519.07 1210.83 L1518.49 1210.83 L1517.9 1210.83 L1517.32 1210.83 L1516.73 1210.83 L1516.14 1210.83 L1515.56 1210.83 L1514.97 1210.83 L1514.38 1210.83 L1513.8 1210.83 L1513.21 1210.83 L1512.62 1210.83 L1512.04 1210.83 L1511.45 1210.83 L1510.86 1210.83 L1510.28 1210.83 L1509.69 1210.83 L1509.11 1210.83 L1508.52 1210.83 L1507.93 1210.83 L1507.35 1210.83 L1506.76 1210.83 L1506.17 1210.83 L1505.59 1210.83 L1505 1210.83 L1504.41 1210.83 L1503.83 1210.83 L1503.24 1210.83 L1502.65 1210.83 L1502.07 1210.83 L1501.48 1210.83 L1500.9 1210.83 L1500.31 1210.83 L1499.72 1210.83 L1499.14 1210.83 L1498.55 1210.83 L1497.96 1210.83 L1497.38 1210.83 L1496.79 1210.83 L1496.2 1210.83 L1495.62 1210.83 L1495.03 1210.83 L1494.45 1210.83 L1493.86 1210.83 L1493.27 1210.83 L1492.69 1210.83 L1492.1 1210.83 L1491.51 1210.83 L1490.93 1210.83 L1490.34 1210.83 L1489.75 1210.83 L1489.17 1210.83 L1488.58 1210.83 L1487.99 1210.83 L1487.41 1210.83 L1486.82 1210.83 L1486.24 1210.83 L1485.65 1210.83 L1485.06 1210.83 L1484.48 1210.83 L1483.89 1210.83 L1483.3 1210.83 L1482.72 1210.83 L1482.13 1210.83 L1481.54 1210.83 L1480.96 1210.83 L1480.37 1210.83 L1479.78 1210.83 L1479.2 1210.83 L1478.61 1210.83 L1478.03 1210.83 L1477.44 1210.83 L1476.85 1210.83 L1476.27 1210.83 L1475.68 1210.83 L1475.09 1210.83 L1474.51 1210.83 L1473.92 1210.83 L1473.33 1210.83 L1472.75 1210.83 L1472.16 1210.83 L1471.57 1210.83 L1470.99 1210.83 L1470.4 1210.83 L1469.82 1210.83 L1469.23 1210.83 L1468.64 1210.83 L1468.06 1210.83 L1467.47 1210.83 L1466.88 1210.83 L1466.3 1210.83 L1465.71 1210.83 L1465.12 1210.83 L1464.54 1210.83 L1463.95 1210.83 L1463.37 1210.83 L1462.78 1210.83 L1462.19 1210.83 L1461.61 1210.83 L1461.02 1210.83 L1460.43 1210.83 L1459.85 1210.83 L1459.26 1210.83 L1458.67 1210.83 L1458.09 1210.83 L1457.5 1210.83 L1456.91 1210.83 L1456.33 1210.83 L1455.74 1210.83 L1455.16 1210.83 L1454.57 1210.83 L1453.98 1210.83 L1453.4 1210.83 L1452.81 1210.83 L1452.22 1210.83 L1451.64 1210.83 L1451.05 1210.83 L1450.46 1210.83 L1449.88 1210.83 L1449.29 1210.83 L1448.7 1210.83 L1448.12 1210.83 L1447.53 1210.83 L1446.95 1210.83 L1446.36 1210.83 L1445.77 1210.83 L1445.19 1210.83 L1444.6 1210.83 L1444.01 1210.83 L1443.43 1210.83 L1442.84 1210.83 L1442.25 1210.83 L1441.67 1210.83 L1441.08 1210.83 L1440.5 1210.83 L1439.91 1210.83 L1439.32 1210.83 L1438.74 1210.83 L1438.15 1210.83 L1437.56 1210.83 L1436.98 1210.83 L1436.39 1210.83 L1435.8 1210.83 L1435.22 1210.83 L1434.63 1210.83 L1434.04 1210.83 L1433.46 1210.83 L1432.87 1210.83 L1432.29 1210.83 L1431.7 1210.83 L1431.11 1210.83 L1430.53 1210.83 L1429.94 1210.83 L1429.35 1210.83 L1428.77 1210.83 L1428.18 1210.83 L1427.59 1210.83 L1427.01 1210.83 L1426.42 1210.83 L1425.83 1210.83 L1425.25 1210.83 L1424.66 1210.83 L1424.08 1210.83 L1423.49 1210.83 L1422.9 1210.83 L1422.32 1210.83 L1421.73 1210.83 L1421.14 1210.83 L1420.56 1210.83 L1419.97 1210.83 L1419.38 1210.83 L1418.8 1210.83 L1418.21 1210.83 L1417.63 1210.83 L1417.04 1210.83 L1416.45 1210.83 L1415.87 1210.83 L1415.28 1210.83 L1414.69 1210.83 L1414.11 1210.83 L1413.52 1210.83 L1412.93 1210.83 L1412.35 1210.83 L1411.76 1210.83 L1411.17 1210.83 L1410.59 1210.83 L1410 1210.83 L1409.42 1210.83 L1408.83 1210.83 L1408.24 1210.83 L1407.66 1210.83 L1407.07 1210.83 L1406.48 1210.83 L1405.9 1210.83 L1405.31 1210.83 L1404.72 1210.83 L1404.14 1210.83 L1403.55 1210.83 L1402.96 1210.83 L1402.38 1210.83 L1401.79 1210.83 L1401.21 1210.83 L1400.62 1210.83 L1400.03 1210.83 L1399.45 1210.83 L1398.86 1210.83 L1398.27 1210.83 L1397.69 1210.83 L1397.1 1210.83 L1396.51 1210.83 L1395.93 1210.83 L1395.34 1210.83 L1394.75 1210.83 L1394.17 1210.83 L1393.58 1210.83 L1393 1210.83 L1392.41 1210.83 L1391.82 1210.83 L1391.24 1210.83 L1390.65 1210.83 L1390.06 1210.83 L1389.48 1210.83 L1388.89 1210.83 L1388.3 1210.83 L1387.72 1210.83 L1387.13 1210.83 L1386.55 1210.83 L1385.96 1210.83 L1385.37 1210.83 L1384.79 1210.83 L1384.2 1210.83 L1383.61 1210.83 L1383.03 1210.83 L1382.44 1210.83 L1381.85 1210.83 L1381.27 1210.83 L1380.68 1210.83 L1380.09 1210.83 L1379.51 1210.83 L1378.92 1210.83 L1378.34 1210.83 L1377.75 1210.83 L1377.16 1210.83 L1376.58 1210.83 L1375.99 1210.83 L1375.4 1210.83 L1374.82 1210.83 L1374.23 1210.83 L1373.64 1210.83 L1373.06 1210.83 L1372.47 1210.83 L1371.88 1210.83 L1371.3 1210.83 L1370.71 1210.83 L1370.13 1210.83 L1369.54 1210.83 L1368.95 1210.83 L1368.37 1210.83 L1367.78 1210.83 L1367.19 1210.83 L1366.61 1210.83 L1366.02 1210.83 L1365.43 1210.83 L1364.85 1210.83 L1364.26 1210.83 L1363.68 1210.83 L1363.09 1210.83 L1362.5 1210.83 L1361.92 1210.83 L1361.33 1210.83 L1360.74 1210.83 L1360.16 1210.83 L1359.57 1210.83 L1358.98 1210.83 L1358.4 1210.83 L1357.81 1210.83 L1357.22 1210.83 L1356.64 1210.83 L1356.05 1210.83 L1355.47 1210.83 L1354.88 1210.83 L1354.29 1210.83 L1353.71 1210.83 L1353.12 1210.83 L1352.53 1210.83 L1351.95 1210.83 L1351.36 1210.83 L1350.77 1210.83 L1350.19 1210.83 L1349.6 1210.83 L1349.01 1210.83 L1348.43 1210.83 L1347.84 1210.83 L1347.26 1210.83 L1346.67 1210.83 L1346.08 1210.83 L1345.5 1210.83 L1344.91 1210.83 L1344.32 1210.83 L1343.74 1210.83 L1343.15 1210.83 L1342.56 1210.83 L1341.98 1210.83 L1341.39 1210.83 L1340.8 1210.83 L1340.22 1210.83 L1339.63 1210.83 L1339.05 1210.83 L1338.46 1210.83 L1337.87 1210.83 L1337.29 1210.83 L1336.7 1210.83 L1336.11 1210.83 L1335.53 1210.83 L1334.94 1210.83 L1334.35 1210.83 L1333.77 1210.83 L1333.18 1210.83 L1332.6 1210.83 L1332.01 1210.83 L1331.42 1210.83 L1330.84 1210.83 L1330.25 1210.83 L1329.66 1210.83 L1329.08 1210.83 L1328.49 1210.83 L1327.9 1210.83 L1327.32 1210.83 L1326.73 1210.83 L1326.14 1210.83 L1325.56 1210.83 L1324.97 1210.83 L1324.39 1210.83 L1323.8 1210.83 L1323.21 1210.83 L1322.63 1210.83 L1322.04 1210.83 L1321.45 1210.83 L1320.87 1210.83 L1320.28 1210.83 L1319.69 1210.83 L1319.11 1210.83 L1318.52 1210.83 L1317.93 1210.83 L1317.35 1210.83 L1316.76 1210.83 L1316.18 1210.83 L1315.59 1210.83 L1315 1210.83 L1314.42 1210.83 L1313.83 1210.83 L1313.24 1210.83 L1312.66 1210.83 L1312.07 1210.83 L1311.48 1210.83 L1310.9 1210.83 L1310.31 1210.83 L1309.73 1210.83 L1309.14 1210.83 L1308.55 1210.83 L1307.97 1210.83 L1307.38 1210.83 L1306.79 1210.83 L1306.21 1210.83 L1305.62 1210.83 L1305.03 1210.83 L1304.45 1210.83 L1303.86 1210.83 L1303.27 1210.83 L1302.69 1210.83 L1302.1 1210.83 L1301.52 1210.83 L1300.93 1210.83 L1300.34 1210.83 L1299.76 1210.83 L1299.17 1210.83 L1298.58 1210.83 L1298 1210.83 L1297.41 1210.83 L1296.82 1210.83 L1296.24 1210.83 L1295.65 1210.83 L1295.06 1210.83 L1294.48 1210.83 L1293.89 1210.83 L1293.31 1210.83 L1292.72 1210.83 L1292.13 1210.83 L1291.55 1210.83 L1290.96 1210.83 L1290.37 1210.83 L1289.79 1210.83 L1289.2 1210.83 L1288.61 1210.83 L1288.03 1210.83 L1287.44 1210.83 L1286.86 1210.83 L1286.27 1210.83 L1285.68 1210.83 L1285.1 1210.83 L1284.51 1210.83 L1283.92 1210.83 L1283.34 1210.83 L1282.75 1210.83 L1282.16 1210.83 L1281.58 1210.83 L1280.99 1210.83 L1280.4 1210.83 L1279.82 1210.83 L1279.23 1210.83 L1278.65 1210.83 L1278.06 1210.83 L1277.47 1210.83 L1276.89 1210.83 L1276.3 1210.83 L1275.71 1210.83 L1275.13 1210.83 L1274.54 1210.83 L1273.95 1210.83 L1273.37 1210.83 L1272.78 1210.83 L1272.19 1210.83 L1271.61 1210.83 L1271.02 1210.83 L1270.44 1210.83 L1269.85 1210.83 L1269.26 1210.83 L1268.68 1210.83 L1268.09 1210.83 L1267.5 1210.83 L1266.92 1210.83 L1266.33 1210.83 L1265.74 1210.83 L1265.16 1210.83 L1264.57 1210.83 L1263.98 1210.83 L1263.4 1210.83 L1262.81 1210.83 L1262.23 1210.83 L1261.64 1210.83 L1261.05 1210.83 L1260.47 1210.83 L1259.88 1210.83 L1259.29 1210.83 L1258.71 1210.83 L1258.12 1210.83 L1257.53 1210.83 L1256.95 1210.83 L1256.36 1210.83 L1255.78 1210.83 L1255.19 1210.83 L1254.6 1210.83 L1254.02 1210.83 L1253.43 1210.83 L1252.84 1210.83 L1252.26 1210.83 L1251.67 1210.83 L1251.08 1210.83 L1250.5 1210.83 L1249.91 1210.83 L1249.32 1210.83 L1248.74 1210.83 L1248.15 1210.83 L1247.57 1210.83 L1246.98 1210.83 L1246.39 1210.83 L1245.81 1210.83 L1245.22 1210.83 L1244.63 1210.83 L1244.05 1210.83 L1243.46 1210.83 L1242.87 1210.83 L1242.29 1210.83 L1241.7 1210.83 L1241.11 1210.83 L1240.53 1210.83 L1239.94 1210.83 L1239.36 1210.83 L1238.77 1210.83 L1238.18 1210.83 L1237.6 1210.83 L1237.01 1210.83 L1236.42 1210.83 L1235.84 1210.83 L1235.25 1210.83 L1234.66 1210.83 L1234.08 1210.83 L1233.49 1210.83 L1232.91 1210.83 L1232.32 1210.83 L1231.73 1210.83 L1231.15 1210.83 L1230.56 1210.83 L1229.97 1210.83 L1229.39 1210.83 L1228.8 1210.83 L1228.21 1210.83 L1227.63 1210.83 L1227.04 1210.83 L1226.45 1210.83 L1225.87 1210.83 L1225.28 1210.83 L1224.7 1210.83 L1224.11 1210.83 L1223.52 1210.83 L1222.94 1210.83 L1222.35 1210.83 L1221.76 1210.83 L1221.18 1210.83 L1220.59 1210.83 L1220 1210.83 L1219.42 1210.83 L1218.83 1210.83 L1218.24 1210.83 L1217.66 1210.83 L1217.07 1210.83 L1216.49 1210.83 L1215.9 1210.83 L1215.31 1210.83 L1214.73 1210.83 L1214.14 1210.83 L1213.55 1210.83 L1212.97 1210.83 L1212.38 1210.83 L1211.79 1210.83 L1211.21 1210.83 L1210.62 1210.83 L1210.03 1210.83 L1209.45 1210.83 L1208.86 1210.83 L1208.28 1210.83 L1207.69 1210.83 L1207.1 1210.83 L1206.52 1210.83 L1205.93 1210.83 L1205.34 1210.83 L1204.76 1210.83 L1204.17 1210.83 L1203.58 1210.83 L1203 1210.83 L1202.41 1210.83 L1201.83 1210.83 L1201.24 1210.83 L1200.65 1210.83 L1200.07 1210.83 L1199.48 1210.83 L1198.89 1210.83 L1198.31 1210.83 L1197.72 1210.83 L1197.13 1210.83 L1196.55 1210.83 L1195.96 1210.83 L1195.37 1210.83 L1194.79 1210.83 L1194.2 1210.83 L1193.62 1210.83 L1193.03 1210.83 L1192.44 1210.83 L1191.86 1210.83 L1191.27 1210.83 L1190.68 1210.83 L1190.1 1210.83 L1189.51 1210.83 L1188.92 1210.83 L1188.34 1210.83 L1187.75 1210.83 L1187.16 1210.83 L1186.58 1210.83 L1185.99 1210.83 L1185.41 1210.83 L1184.82 1210.83 L1184.23 1210.83 L1183.65 1210.83 L1183.06 1210.83 L1182.47 1210.83 L1181.89 1210.83 L1181.3 1210.83 L1180.71 1210.83 L1180.13 1210.83 L1179.54 1210.83 L1178.96 1210.83 L1178.37 1210.83 L1177.78 1210.83 L1177.2 1210.83 L1176.61 1210.83 L1176.02 1210.83 L1175.44 1210.83 L1174.85 1210.83 L1174.26 1210.83 L1173.68 1210.83 L1173.09 1210.83 L1172.5 1210.83 L1171.92 1210.83 L1171.33 1210.83 L1170.75 1210.83 L1170.16 1210.83 L1169.57 1210.83 L1168.99 1210.83 L1168.4 1210.83 L1167.81 1210.83 L1167.23 1210.83 L1166.64 1210.83 L1166.05 1210.83 L1165.47 1210.83 L1164.88 1210.83 L1164.29 1210.83 L1163.71 1210.83 L1163.12 1210.83 L1162.54 1210.83 L1161.95 1210.83 L1161.36 1210.83 L1160.78 1210.83 L1160.19 1210.83 L1159.6 1210.83 L1159.02 1210.83 L1158.43 1210.83 L1157.84 1210.83 L1157.26 1210.83 L1156.67 1210.83 L1156.09 1210.83 L1155.5 1210.83 L1154.91 1210.83 L1154.33 1210.83 L1153.74 1210.83 L1153.15 1210.83 L1152.57 1210.83 L1151.98 1210.83 L1151.39 1210.83 L1150.81 1210.83 L1150.22 1210.83 L1149.63 1210.83 L1149.05 1210.83 L1148.46 1210.83 L1147.88 1210.83 L1147.29 1210.83 L1146.7 1210.83 L1146.12 1210.83 L1145.53 1210.83 L1144.94 1210.83 L1144.36 1210.83 L1143.77 1210.83 L1143.18 1210.83 L1142.6 1210.83 L1142.01 1210.83 L1141.42 1210.83 L1140.84 1210.83 L1140.25 1210.83 L1139.67 1210.83 L1139.08 1210.83 L1138.49 1210.83 L1137.91 1210.83 L1137.32 1210.83 L1136.73 1210.83 L1136.15 1210.83 L1135.56 1210.83 L1134.97 1210.83 L1134.39 1210.83 L1133.8 1210.83 L1133.21 1210.83 L1132.63 1210.83 L1132.04 1210.83 L1131.46 1210.83 L1130.87 1210.83 L1130.28 1210.83 L1129.7 1210.83 L1129.11 1210.83 L1128.52 1210.83 L1127.94 1210.83 L1127.35 1210.83 L1126.76 1210.83 L1126.18 1210.83 L1125.59 1210.83 L1125.01 1210.83 L1124.42 1210.83 L1123.83 1210.83 L1123.25 1210.83 L1122.66 1210.83 L1122.07 1210.83 L1121.49 1210.83 L1120.9 1210.83 L1120.31 1210.83 L1119.73 1210.83 L1119.14 1210.83 L1118.55 1210.83 L1117.97 1210.83 L1117.38 1210.83 L1116.8 1210.83 L1116.21 1210.83 L1115.62 1210.83 L1115.04 1210.83 L1114.45 1210.83 L1113.86 1210.83 L1113.28 1210.83 L1112.69 1210.83 L1112.1 1210.83 L1111.52 1210.83 L1110.93 1210.83 L1110.34 1210.83 L1109.76 1210.83 L1109.17 1210.83 L1108.59 1210.83 L1108 1210.83 L1107.41 1210.83 L1106.83 1210.83 L1106.24 1210.83 L1105.65 1210.83 L1105.07 1210.83 L1104.48 1210.83 L1103.89 1210.83 L1103.31 1210.83 L1102.72 1210.83 L1102.14 1210.83 L1101.55 1210.83 L1100.96 1210.83 L1100.38 1210.83 L1099.79 1210.83 L1099.2 1210.83 L1098.62 1210.83 L1098.03 1210.83 L1097.44 1210.83 L1096.86 1210.83 L1096.27 1210.83 L1095.68 1210.83 L1095.1 1210.83 L1094.51 1210.83 L1093.93 1210.83 L1093.34 1210.83 L1092.75 1210.83 L1092.17 1210.83 L1091.58 1210.83 L1090.99 1210.83 L1090.41 1210.83 L1089.82 1210.83 L1089.23 1210.83 L1088.65 1210.83 L1088.06 1210.83 L1087.47 1210.83 L1086.89 1210.83 L1086.3 1210.83 L1085.72 1210.83 L1085.13 1210.83 L1084.54 1210.83 L1083.96 1210.83 L1083.37 1210.83 L1082.78 1210.83 L1082.2 1210.83 L1081.61 1210.83 L1081.02 1210.83 L1080.44 1210.83 L1079.85 1210.83 L1079.26 1210.83 L1078.68 1210.83 L1078.09 1210.83 L1077.51 1210.83 L1076.92 1210.83 L1076.33 1210.83 L1075.75 1210.83 L1075.16 1210.83 L1074.57 1210.83 L1073.99 1210.83 L1073.4 1210.83 L1072.81 1210.83 L1072.23 1210.83 L1071.64 1210.83 L1071.06 1210.83 L1070.47 1210.83 L1069.88 1210.83 L1069.3 1210.83 L1068.71 1210.83 L1068.12 1210.83 L1067.54 1210.83 L1066.95 1210.83 L1066.36 1210.83 L1065.78 1210.83 L1065.19 1210.83 L1064.6 1210.83 L1064.02 1210.83 L1063.43 1210.83 L1062.85 1210.83 L1062.26 1210.83 L1061.67 1210.83 L1061.09 1210.83 L1060.5 1210.83 L1059.91 1210.83 L1059.33 1210.83 L1058.74 1210.83 L1058.15 1210.83 L1057.57 1210.83 L1056.98 1210.83 L1056.39 1210.83 L1055.81 1210.83 L1055.22 1210.83 L1054.64 1210.83 L1054.05 1210.83 L1053.46 1210.83 L1052.88 1210.83 L1052.29 1210.83 L1051.7 1210.83 L1051.12 1210.83 L1050.53 1210.83 L1049.94 1210.83 L1049.36 1210.83 L1048.77 1210.83 L1048.19 1210.83 L1047.6 1210.83 L1047.01 1210.83 L1046.43 1210.83 L1045.84 1210.83 L1045.25 1210.83 L1044.67 1210.83 L1044.08 1210.83 L1043.49 1210.83 L1042.91 1210.83 L1042.32 1210.83 L1041.73 1210.83 L1041.15 1210.83 L1040.56 1210.83 L1039.98 1210.83 L1039.39 1210.83 L1038.8 1210.83 L1038.22 1210.83 L1037.63 1210.83 L1037.04 1210.83 L1036.46 1210.83 L1035.87 1210.83 L1035.28 1210.83 L1034.7 1210.83 L1034.11 1210.83 L1033.52 1210.83 L1032.94 1210.83 L1032.35 1210.83 L1031.77 1210.83 L1031.18 1210.83 L1030.59 1210.83 L1030.01 1210.83 L1029.42 1210.83 L1028.83 1210.83 L1028.25 1210.83 L1027.66 1210.83 L1027.07 1210.83 L1026.49 1210.83 L1025.9 1210.83 L1025.32 1210.83 L1024.73 1210.83 L1024.14 1210.83 L1023.56 1210.83 L1022.97 1210.83 L1022.38 1210.83 L1021.8 1210.83 L1021.21 1210.83 L1020.62 1210.83 L1020.04 1210.83 L1019.45 1210.83 L1018.86 1210.83 L1018.28 1210.83 L1017.69 1210.83 L1017.11 1210.83 L1016.52 1210.83 L1015.93 1210.83 L1015.35 1210.83 L1014.76 1210.83 L1014.17 1210.83 L1013.59 1210.83 L1013 1210.83 L1012.41 1210.83 L1011.83 1210.83 L1011.24 1210.83 L1010.65 1210.83 L1010.07 1210.83 L1009.48 1210.83 L1008.9 1210.83 L1008.31 1210.83 L1007.72 1210.83 L1007.14 1210.83 L1006.55 1210.83 L1005.96 1210.83 L1005.38 1210.83 L1004.79 1210.83 L1004.2 1210.83 L1003.62 1210.83 L1003.03 1210.83 L1002.44 1210.83 L1001.86 1210.83 L1001.27 1210.83 L1000.69 1210.83 L1000.1 1210.83 L999.513 1210.83 L998.926 1210.83 L998.34 1210.83 L997.754 1210.83 L997.167 1210.83 L996.581 1210.83 L995.994 1210.83 L995.408 1210.83 L994.822 1210.83 L994.235 1210.83 L993.649 1210.83 L993.062 1210.83 L992.476 1210.83 L991.889 1210.83 L991.303 1210.83 L990.717 1210.83 L990.13 1210.83 L989.544 1210.83 L988.957 1210.83 L988.371 1210.83 L987.785 1210.83 L987.198 1210.83 L986.612 1210.83 L986.025 1210.83  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.26 986.612,1211.26 987.198,1211.26 987.785,1211.26 988.371,1211.26 988.957,1211.26 989.544,1211.26 990.13,1211.26 990.717,1211.26 991.303,1211.26 991.889,1211.26 992.476,1211.26 993.062,1211.26 993.649,1211.26 994.235,1211.26 994.822,1211.26 995.408,1211.26 995.994,1211.26 996.581,1211.26 997.167,1211.26 997.754,1211.26 998.34,1211.26 998.926,1211.26 999.513,1211.26 1000.1,1211.26 1000.69,1211.26 1001.27,1211.26 1001.86,1211.26 1002.44,1211.26 1003.03,1211.26 1003.62,1211.26 1004.2,1211.26 1004.79,1211.26 1005.38,1211.26 1005.96,1211.26 1006.55,1211.26 1007.14,1211.26 1007.72,1211.26 1008.31,1211.26 1008.9,1211.26 1009.48,1211.26 1010.07,1211.26 1010.65,1211.26 1011.24,1211.26 1011.83,1211.26 1012.41,1211.26 1013,1211.26 1013.59,1211.26 1014.17,1211.26 1014.76,1211.26 1015.35,1211.26 1015.93,1211.26 1016.52,1211.26 1017.11,1211.26 1017.69,1211.26 1018.28,1211.26 1018.86,1211.26 1019.45,1211.26 1020.04,1211.26 1020.62,1211.26 1021.21,1211.26 1021.8,1211.26 1022.38,1211.26 1022.97,1211.26 1023.56,1211.26 1024.14,1211.26 1024.73,1211.26 1025.32,1211.26 1025.9,1211.26 1026.49,1211.26 1027.07,1211.26 1027.66,1211.26 1028.25,1211.26 1028.83,1211.26 1029.42,1211.26 1030.01,1211.26 1030.59,1211.26 1031.18,1211.26 1031.77,1211.26 1032.35,1211.26 1032.94,1211.26 1033.52,1211.26 1034.11,1211.26 1034.7,1211.26 1035.28,1211.26 1035.87,1211.26 1036.46,1211.26 1037.04,1211.26 1037.63,1211.26 1038.22,1211.26 1038.8,1211.26 1039.39,1211.26 1039.98,1211.26 1040.56,1211.26 1041.15,1211.26 1041.73,1211.26 1042.32,1211.26 1042.91,1211.26 1043.49,1211.26 1044.08,1211.26 1044.67,1211.26 1045.25,1211.26 1045.84,1211.26 1046.43,1211.26 1047.01,1211.26 1047.6,1211.26 1048.19,1211.26 1048.77,1211.26 1049.36,1211.26 1049.94,1211.26 1050.53,1211.26 1051.12,1211.26 1051.7,1211.26 1052.29,1211.26 1052.88,1211.26 1053.46,1211.26 1054.05,1211.26 1054.64,1211.26 1055.22,1211.26 1055.81,1211.26 1056.39,1211.26 1056.98,1211.26 1057.57,1211.26 1058.15,1211.26 1058.74,1211.26 1059.33,1211.26 1059.91,1211.26 1060.5,1211.26 1061.09,1211.26 1061.67,1211.26 1062.26,1211.26 1062.85,1211.26 1063.43,1211.26 1064.02,1211.26 1064.6,1211.26 1065.19,1211.26 1065.78,1211.26 1066.36,1211.26 1066.95,1211.26 1067.54,1211.26 1068.12,1211.26 1068.71,1211.26 1069.3,1211.26 1069.88,1211.26 1070.47,1211.26 1071.06,1211.26 1071.64,1211.26 1072.23,1211.26 1072.81,1211.26 1073.4,1211.26 1073.99,1211.26 1074.57,1211.26 1075.16,1211.26 1075.75,1211.26 1076.33,1211.26 1076.92,1211.26 1077.51,1211.26 1078.09,1211.26 1078.68,1211.26 1079.26,1211.26 1079.85,1211.26 1080.44,1211.26 1081.02,1211.26 1081.61,1211.26 1082.2,1211.26 1082.78,1211.26 1083.37,1211.26 1083.96,1211.26 1084.54,1211.26 1085.13,1211.26 1085.72,1211.26 1086.3,1211.26 1086.89,1211.26 1087.47,1211.26 1088.06,1211.26 1088.65,1211.26 1089.23,1211.26 1089.82,1211.26 1090.41,1211.26 1090.99,1211.26 1091.58,1211.26 1092.17,1211.26 1092.75,1211.26 1093.34,1211.26 1093.93,1211.26 1094.51,1211.26 1095.1,1211.26 1095.68,1211.26 1096.27,1211.26 1096.86,1211.26 1097.44,1211.26 1098.03,1211.26 1098.62,1211.26 1099.2,1211.26 1099.79,1211.26 1100.38,1211.26 1100.96,1211.26 1101.55,1211.26 1102.14,1211.26 1102.72,1211.26 1103.31,1211.26 1103.89,1211.26 1104.48,1211.26 1105.07,1211.26 1105.65,1211.26 1106.24,1211.26 1106.83,1211.26 1107.41,1211.26 1108,1211.26 1108.59,1211.26 1109.17,1211.26 1109.76,1211.26 1110.34,1211.26 1110.93,1211.26 1111.52,1211.26 1112.1,1211.26 1112.69,1211.26 1113.28,1211.26 1113.86,1211.26 1114.45,1211.26 1115.04,1211.26 1115.62,1211.26 1116.21,1211.26 1116.8,1211.26 1117.38,1211.26 1117.97,1211.26 1118.55,1211.26 1119.14,1211.26 1119.73,1211.26 1120.31,1211.26 1120.9,1211.26 1121.49,1211.26 1122.07,1211.26 1122.66,1211.26 1123.25,1211.26 1123.83,1211.26 1124.42,1211.26 1125.01,1211.26 1125.59,1211.26 1126.18,1211.26 1126.76,1211.26 1127.35,1211.26 1127.94,1211.26 1128.52,1211.26 1129.11,1211.26 1129.7,1211.26 1130.28,1211.26 1130.87,1211.26 1131.46,1211.26 1132.04,1211.26 1132.63,1211.26 1133.21,1211.26 1133.8,1211.26 1134.39,1211.26 1134.97,1211.26 1135.56,1211.26 1136.15,1211.26 1136.73,1211.26 1137.32,1211.26 1137.91,1211.26 1138.49,1211.26 1139.08,1211.26 1139.67,1211.26 1140.25,1211.26 1140.84,1211.26 1141.42,1211.26 1142.01,1211.26 1142.6,1211.26 1143.18,1211.26 1143.77,1211.26 1144.36,1211.26 1144.94,1211.26 1145.53,1211.26 1146.12,1211.26 1146.7,1211.26 1147.29,1211.26 1147.88,1211.26 1148.46,1211.26 1149.05,1211.26 1149.63,1211.26 1150.22,1211.26 1150.81,1211.26 1151.39,1211.26 1151.98,1211.26 1152.57,1211.26 1153.15,1211.26 1153.74,1211.26 1154.33,1211.26 1154.91,1211.26 1155.5,1211.26 1156.09,1211.26 1156.67,1211.26 1157.26,1211.26 1157.84,1211.26 1158.43,1211.26 1159.02,1211.26 1159.6,1211.26 1160.19,1211.26 1160.78,1211.26 1161.36,1211.26 1161.95,1211.26 1162.54,1211.26 1163.12,1211.26 1163.71,1211.26 1164.29,1211.26 1164.88,1211.26 1165.47,1211.26 1166.05,1211.26 1166.64,1211.26 1167.23,1211.26 1167.81,1211.26 1168.4,1211.26 1168.99,1211.26 1169.57,1211.26 1170.16,1211.26 1170.75,1211.26 1171.33,1211.26 1171.92,1211.26 1172.5,1211.26 1173.09,1211.26 1173.68,1211.26 1174.26,1211.26 1174.85,1211.26 1175.44,1211.26 1176.02,1211.26 1176.61,1211.26 1177.2,1211.26 1177.78,1211.26 1178.37,1211.26 1178.96,1211.26 1179.54,1211.26 1180.13,1211.26 1180.71,1211.26 1181.3,1211.26 1181.89,1211.26 1182.47,1211.26 1183.06,1211.26 1183.65,1211.26 1184.23,1211.26 1184.82,1211.26 1185.41,1211.26 1185.99,1211.26 1186.58,1211.26 1187.16,1211.26 1187.75,1211.26 1188.34,1211.26 1188.92,1211.26 1189.51,1211.26 1190.1,1211.26 1190.68,1211.26 1191.27,1211.26 1191.86,1211.26 1192.44,1211.26 1193.03,1211.26 1193.62,1211.26 1194.2,1211.26 1194.79,1211.26 1195.37,1211.26 1195.96,1211.26 1196.55,1211.26 1197.13,1211.26 1197.72,1211.26 1198.31,1211.26 1198.89,1211.26 1199.48,1211.26 1200.07,1211.26 1200.65,1211.26 1201.24,1211.26 1201.83,1211.26 1202.41,1211.26 1203,1211.26 1203.58,1211.26 1204.17,1211.26 1204.76,1211.26 1205.34,1211.26 1205.93,1211.26 1206.52,1211.26 1207.1,1211.26 1207.69,1211.26 1208.28,1211.26 1208.86,1211.26 1209.45,1211.26 1210.03,1211.26 1210.62,1211.26 1211.21,1211.26 1211.79,1211.26 1212.38,1211.26 1212.97,1211.26 1213.55,1211.26 1214.14,1211.26 1214.73,1211.26 1215.31,1211.26 1215.9,1211.26 1216.49,1211.26 1217.07,1211.26 1217.66,1211.26 1218.24,1211.26 1218.83,1211.26 1219.42,1211.26 1220,1211.26 1220.59,1211.26 1221.18,1211.26 1221.76,1211.26 1222.35,1211.26 1222.94,1211.26 1223.52,1211.26 1224.11,1211.26 1224.7,1211.26 1225.28,1211.26 1225.87,1211.26 1226.45,1211.26 1227.04,1211.26 1227.63,1211.26 1228.21,1211.26 1228.8,1211.26 1229.39,1211.26 1229.97,1211.26 1230.56,1211.26 1231.15,1211.26 1231.73,1211.26 1232.32,1211.26 1232.91,1211.26 1233.49,1211.26 1234.08,1211.26 1234.66,1211.26 1235.25,1211.26 1235.84,1211.26 1236.42,1211.26 1237.01,1211.26 1237.6,1211.26 1238.18,1211.26 1238.77,1211.26 1239.36,1211.26 1239.94,1211.26 1240.53,1211.26 1241.11,1211.26 1241.7,1211.26 1242.29,1211.26 1242.87,1211.26 1243.46,1211.26 1244.05,1211.26 1244.63,1211.26 1245.22,1211.26 1245.81,1211.26 1246.39,1211.26 1246.98,1211.26 1247.57,1211.26 1248.15,1211.26 1248.74,1211.26 1249.32,1211.26 1249.91,1211.26 1250.5,1211.26 1251.08,1211.26 1251.67,1211.26 1252.26,1211.26 1252.84,1211.26 1253.43,1211.26 1254.02,1211.26 1254.6,1211.26 1255.19,1211.26 1255.78,1211.26 1256.36,1211.26 1256.95,1211.26 1257.53,1211.26 1258.12,1211.26 1258.71,1211.26 1259.29,1211.26 1259.88,1211.26 1260.47,1211.26 1261.05,1211.26 1261.64,1211.26 1262.23,1211.26 1262.81,1211.26 1263.4,1211.26 1263.98,1211.26 1264.57,1211.26 1265.16,1211.26 1265.74,1211.26 1266.33,1211.26 1266.92,1211.26 1267.5,1211.26 1268.09,1211.26 1268.68,1211.26 1269.26,1211.26 1269.85,1211.26 1270.44,1211.26 1271.02,1211.26 1271.61,1211.26 1272.19,1211.26 1272.78,1211.26 1273.37,1211.26 1273.95,1211.26 1274.54,1211.26 1275.13,1211.26 1275.71,1211.26 1276.3,1211.26 1276.89,1211.26 1277.47,1211.26 1278.06,1211.26 1278.65,1211.26 1279.23,1211.26 1279.82,1211.26 1280.4,1211.26 1280.99,1211.26 1281.58,1211.26 1282.16,1211.26 1282.75,1211.26 1283.34,1211.26 1283.92,1211.26 1284.51,1211.26 1285.1,1211.26 1285.68,1211.26 1286.27,1211.26 1286.86,1211.26 1287.44,1211.26 1288.03,1211.26 1288.61,1211.26 1289.2,1211.26 1289.79,1211.26 1290.37,1211.26 1290.96,1211.26 1291.55,1211.26 1292.13,1211.26 1292.72,1211.26 1293.31,1211.26 1293.89,1211.26 1294.48,1211.26 1295.06,1211.26 1295.65,1211.26 1296.24,1211.26 1296.82,1211.26 1297.41,1211.26 1298,1211.26 1298.58,1211.26 1299.17,1211.26 1299.76,1211.26 1300.34,1211.26 1300.93,1211.26 1301.52,1211.26 1302.1,1211.26 1302.69,1211.26 1303.27,1211.26 1303.86,1211.26 1304.45,1211.26 1305.03,1211.26 1305.62,1211.26 1306.21,1211.26 1306.79,1211.26 1307.38,1211.26 1307.97,1211.26 1308.55,1211.26 1309.14,1211.26 1309.73,1211.26 1310.31,1211.26 1310.9,1211.26 1311.48,1211.26 1312.07,1211.26 1312.66,1211.26 1313.24,1211.26 1313.83,1211.26 1314.42,1211.26 1315,1211.26 1315.59,1211.26 1316.18,1211.26 1316.76,1211.26 1317.35,1211.26 1317.93,1211.26 1318.52,1211.26 1319.11,1211.26 1319.69,1211.26 1320.28,1211.26 1320.87,1211.26 1321.45,1211.26 1322.04,1211.26 1322.63,1211.26 1323.21,1211.26 1323.8,1211.26 1324.39,1211.26 1324.97,1211.26 1325.56,1211.26 1326.14,1211.26 1326.73,1211.26 1327.32,1211.26 1327.9,1211.26 1328.49,1211.26 1329.08,1211.26 1329.66,1211.26 1330.25,1211.26 1330.84,1211.26 1331.42,1211.26 1332.01,1211.26 1332.6,1211.26 1333.18,1211.26 1333.77,1211.26 1334.35,1211.26 1334.94,1211.26 1335.53,1211.26 1336.11,1211.26 1336.7,1211.26 1337.29,1211.26 1337.87,1211.26 1338.46,1211.26 1339.05,1211.26 1339.63,1211.26 1340.22,1211.26 1340.8,1211.26 1341.39,1211.26 1341.98,1211.26 1342.56,1211.26 1343.15,1211.26 1343.74,1211.26 1344.32,1211.26 1344.91,1211.26 1345.5,1211.26 1346.08,1211.26 1346.67,1211.26 1347.26,1211.26 1347.84,1211.26 1348.43,1211.26 1349.01,1211.26 1349.6,1211.26 1350.19,1211.26 1350.77,1211.26 1351.36,1211.26 1351.95,1211.26 1352.53,1211.26 1353.12,1211.26 1353.71,1211.26 1354.29,1211.26 1354.88,1211.26 1355.47,1211.26 1356.05,1211.26 1356.64,1211.26 1357.22,1211.26 1357.81,1211.26 1358.4,1211.26 1358.98,1211.26 1359.57,1211.26 1360.16,1211.26 1360.74,1211.26 1361.33,1211.26 1361.92,1211.26 1362.5,1211.26 1363.09,1211.26 1363.68,1211.26 1364.26,1211.26 1364.85,1211.26 1365.43,1211.26 1366.02,1211.26 1366.61,1211.26 1367.19,1211.26 1367.78,1211.26 1368.37,1211.26 1368.95,1211.26 1369.54,1211.26 1370.13,1211.26 1370.71,1211.26 1371.3,1211.26 1371.88,1211.26 1372.47,1211.26 1373.06,1211.26 1373.64,1211.26 1374.23,1211.26 1374.82,1211.26 1375.4,1211.26 1375.99,1211.26 1376.58,1211.26 1377.16,1211.26 1377.75,1211.26 1378.34,1211.26 1378.92,1211.26 1379.51,1211.26 1380.09,1211.26 1380.68,1211.26 1381.27,1211.26 1381.85,1211.26 1382.44,1211.26 1383.03,1211.26 1383.61,1211.26 1384.2,1211.26 1384.79,1211.26 1385.37,1211.26 1385.96,1211.26 1386.55,1211.26 1387.13,1211.26 1387.72,1211.26 1388.3,1211.26 1388.89,1211.26 1389.48,1211.26 1390.06,1211.26 1390.65,1211.26 1391.24,1211.26 1391.82,1211.26 1392.41,1211.26 1393,1211.26 1393.58,1211.26 1394.17,1211.26 1394.75,1211.26 1395.34,1211.26 1395.93,1211.26 1396.51,1211.26 1397.1,1211.26 1397.69,1211.26 1398.27,1211.26 1398.86,1211.26 1399.45,1211.26 1400.03,1211.26 1400.62,1211.26 1401.21,1211.26 1401.79,1211.26 1402.38,1211.26 1402.96,1211.26 1403.55,1211.26 1404.14,1211.26 1404.72,1211.26 1405.31,1211.26 1405.9,1211.26 1406.48,1211.26 1407.07,1211.26 1407.66,1211.26 1408.24,1211.26 1408.83,1211.26 1409.42,1211.26 1410,1211.26 1410.59,1211.26 1411.17,1211.26 1411.76,1211.26 1412.35,1211.26 1412.93,1211.26 1413.52,1211.26 1414.11,1211.26 1414.69,1211.26 1415.28,1211.26 1415.87,1211.26 1416.45,1211.26 1417.04,1211.26 1417.63,1211.26 1418.21,1211.26 1418.8,1211.26 1419.38,1211.26 1419.97,1211.26 1420.56,1211.26 1421.14,1211.26 1421.73,1211.26 1422.32,1211.26 1422.9,1211.26 1423.49,1211.26 1424.08,1211.26 1424.66,1211.26 1425.25,1211.26 1425.83,1211.26 1426.42,1211.26 1427.01,1211.26 1427.59,1211.26 1428.18,1211.26 1428.77,1211.26 1429.35,1211.26 1429.94,1211.26 1430.53,1211.26 1431.11,1211.26 1431.7,1211.26 1432.29,1211.26 1432.87,1211.26 1433.46,1211.26 1434.04,1211.26 1434.63,1211.26 1435.22,1211.26 1435.8,1211.26 1436.39,1211.26 1436.98,1211.26 1437.56,1211.26 1438.15,1211.26 1438.74,1211.26 1439.32,1211.26 1439.91,1211.26 1440.5,1211.26 1441.08,1211.26 1441.67,1211.26 1442.25,1211.26 1442.84,1211.26 1443.43,1211.26 1444.01,1211.26 1444.6,1211.26 1445.19,1211.26 1445.77,1211.26 1446.36,1211.26 1446.95,1211.26 1447.53,1211.26 1448.12,1211.26 1448.7,1211.26 1449.29,1211.26 1449.88,1211.26 1450.46,1211.26 1451.05,1211.26 1451.64,1211.26 1452.22,1211.26 1452.81,1211.26 1453.4,1211.26 1453.98,1211.26 1454.57,1211.26 1455.16,1211.26 1455.74,1211.26 1456.33,1211.26 1456.91,1211.26 1457.5,1211.26 1458.09,1211.26 1458.67,1211.26 1459.26,1211.26 1459.85,1211.26 1460.43,1211.26 1461.02,1211.26 1461.61,1211.26 1462.19,1211.26 1462.78,1211.26 1463.37,1211.26 1463.95,1211.26 1464.54,1211.26 1465.12,1211.26 1465.71,1211.26 1466.3,1211.26 1466.88,1211.26 1467.47,1211.26 1468.06,1211.26 1468.64,1211.26 1469.23,1211.26 1469.82,1211.26 1470.4,1211.26 1470.99,1211.26 1471.57,1211.26 1472.16,1211.26 1472.75,1211.26 1473.33,1211.26 1473.92,1211.26 1474.51,1211.26 1475.09,1211.26 1475.68,1211.26 1476.27,1211.26 1476.85,1211.26 1477.44,1211.26 1478.03,1211.26 1478.61,1211.26 1479.2,1211.26 1479.78,1211.26 1480.37,1211.26 1480.96,1211.26 1481.54,1211.26 1482.13,1211.26 1482.72,1211.26 1483.3,1211.26 1483.89,1211.26 1484.48,1211.26 1485.06,1211.26 1485.65,1211.26 1486.24,1211.26 1486.82,1211.26 1487.41,1211.26 1487.99,1211.26 1488.58,1211.26 1489.17,1211.26 1489.75,1211.26 1490.34,1211.26 1490.93,1211.26 1491.51,1211.26 1492.1,1211.26 1492.69,1211.26 1493.27,1211.26 1493.86,1211.26 1494.45,1211.26 1495.03,1211.26 1495.62,1211.26 1496.2,1211.26 1496.79,1211.26 1497.38,1211.26 1497.96,1211.26 1498.55,1211.26 1499.14,1211.26 1499.72,1211.26 1500.31,1211.26 1500.9,1211.26 1501.48,1211.26 1502.07,1211.26 1502.65,1211.26 1503.24,1211.26 1503.83,1211.26 1504.41,1211.26 1505,1211.26 1505.59,1211.26 1506.17,1211.26 1506.76,1211.26 1507.35,1211.26 1507.93,1211.26 1508.52,1211.26 1509.11,1211.26 1509.69,1211.26 1510.28,1211.26 1510.86,1211.26 1511.45,1211.26 1512.04,1211.26 1512.62,1211.26 1513.21,1211.26 1513.8,1211.26 1514.38,1211.26 1514.97,1211.26 1515.56,1211.26 1516.14,1211.26 1516.73,1211.26 1517.32,1211.26 1517.9,1211.26 1518.49,1211.26 1519.07,1211.26 1519.66,1211.26 1520.25,1211.26 1520.83,1211.26 1521.42,1211.26 1522.01,1211.26 1522.59,1211.26 1523.18,1211.26 1523.77,1211.26 1524.35,1211.26 1524.94,1211.26 1525.52,1211.26 1526.11,1211.26 1526.7,1211.26 1527.28,1211.26 1527.87,1211.26 1528.46,1211.26 1529.04,1211.26 1529.63,1211.26 1530.22,1211.26 1530.8,1211.26 1531.39,1211.26 1531.98,1211.26 1532.56,1211.26 1533.15,1211.26 1533.73,1211.26 1534.32,1211.26 1534.91,1211.26 1535.49,1211.26 1536.08,1211.26 1536.67,1211.26 1537.25,1211.26 1537.84,1211.26 1538.43,1211.26 1539.01,1211.26 1539.6,1211.26 1540.19,1211.26 1540.77,1211.26 1541.36,1211.26 1541.94,1211.26 1542.53,1211.26 1543.12,1211.26 1543.7,1211.26 1544.29,1211.26 1544.88,1211.26 1545.46,1211.26 1546.05,1211.26 1546.64,1211.26 1547.22,1211.26 1547.81,1211.26 1548.4,1211.26 1548.98,1211.26 1549.57,1211.26 1550.15,1211.26 1550.74,1211.26 1551.33,1211.26 1551.91,1211.26 1552.5,1211.26 1553.09,1211.26 1553.67,1211.26 1554.26,1211.26 1554.85,1211.26 1555.43,1211.26 1556.02,1211.26 1556.6,1211.26 1557.19,1211.26 1557.78,1211.26 1558.36,1211.26 1558.95,1211.26 1559.54,1211.26 1560.12,1211.26 1560.71,1211.26 1561.3,1211.26 1561.88,1211.26 1562.47,1211.26 1563.06,1211.26 1563.64,1211.26 1564.23,1211.26 1564.81,1211.26 1565.4,1211.26 1565.99,1211.26 1566.57,1211.26 1567.16,1211.26 1567.75,1211.26 1568.33,1211.26 1568.92,1211.26 1569.51,1211.26 1570.09,1211.26 1570.68,1211.26 1571.27,1211.26 1571.85,1211.26 1572.44,1211.26 1573.02,1211.26 1573.61,1211.26 1574.2,1211.26 1574.78,1211.26 1575.37,1211.26 1575.96,1211.26 1576.54,1211.26 1577.13,1211.26 1577.72,1211.26 1578.3,1211.26 1578.89,1211.26 1579.47,1211.26 1580.06,1211.26 1580.65,1211.26 1581.23,1211.26 1581.82,1211.26 1582.41,1211.26 1582.99,1211.26 1583.58,1211.26 1584.17,1211.26 1584.75,1211.26 1585.34,1211.26 1585.93,1211.26 1586.51,1211.26 1587.1,1211.26 1587.68,1211.26 1588.27,1211.26 1588.86,1211.26 1589.44,1211.26 1590.03,1211.26 1590.62,1211.26 1591.2,1211.26 1591.79,1211.26 1592.38,1211.26 1592.96,1211.26 1593.55,1211.26 1594.14,1211.26 1594.72,1211.26 1595.31,1211.26 1595.89,1211.26 1596.48,1211.26 1597.07,1211.26 1597.65,1211.26 1598.24,1211.26 1598.83,1211.26 1599.41,1211.26 1600,1211.26 1600.59,1211.26 1601.17,1211.26 1601.76,1211.26 1602.34,1211.26 1602.93,1211.26 1603.52,1211.26 1604.1,1211.26 1604.69,1211.26 1605.28,1211.26 1605.86,1211.26 1606.45,1211.26 1607.04,1211.26 1607.62,1211.26 1608.21,1211.26 1608.8,1211.26 1609.38,1211.26 1609.97,1211.26 1610.55,1211.26 1611.14,1211.26 1611.73,1211.26 1612.31,1211.26 1612.9,1211.26 1613.49,1211.26 1614.07,1211.26 1614.66,1211.26 1615.25,1211.26 1615.83,1211.26 1616.42,1211.26 1617.01,1211.26 1617.59,1211.26 1618.18,1211.26 1618.76,1211.26 1619.35,1211.26 1619.94,1211.26 1620.52,1211.26 1621.11,1211.26 1621.7,1211.26 1622.28,1211.26 1622.87,1211.26 1623.46,1211.26 1624.04,1211.26 1624.63,1211.26 1625.22,1211.26 1625.8,1211.26 1626.39,1211.26 1626.97,1211.26 1627.56,1211.26 1628.15,1211.26 1628.73,1211.26 1629.32,1211.26 1629.91,1211.26 1630.49,1211.26 1631.08,1211.26 1631.67,1211.26 1632.25,1211.26 1632.84,1211.26 1633.42,1211.26 1634.01,1211.26 1634.6,1211.26 1635.18,1211.26 1635.77,1211.26 1636.36,1211.26 1636.94,1211.26 1637.53,1211.26 1638.12,1211.26 1638.7,1211.26 1639.29,1211.26 1639.88,1211.26 1640.46,1211.26 1641.05,1211.26 1641.63,1211.26 1642.22,1211.26 1642.81,1211.26 1643.39,1211.26 1643.98,1211.26 1644.57,1211.26 1645.15,1211.26 1645.74,1211.26 1646.33,1211.26 1646.91,1211.26 1647.5,1211.26 1648.09,1211.26 1648.67,1211.26 1649.26,1211.26 1649.84,1211.26 1650.43,1211.26 1651.02,1211.26 1651.6,1211.26 1652.19,1211.26 1652.78,1211.26 1653.36,1211.26 1653.95,1211.26 1654.54,1211.26 1655.12,1211.26 1655.71,1211.26 1656.29,1211.26 1656.88,1211.26 1657.47,1211.26 1658.05,1211.26 1658.64,1211.26 1659.23,1211.26 1659.81,1211.26 1660.4,1211.26 1660.99,1211.26 1661.57,1211.26 1662.16,1211.26 1662.75,1211.26 1663.33,1211.26 1663.92,1211.26 1664.5,1211.26 1665.09,1211.26 1665.68,1211.26 1666.26,1211.26 1666.85,1211.26 1667.44,1211.26 1668.02,1211.26 1668.61,1211.26 1669.2,1211.26 1669.78,1211.26 1670.37,1211.26 1670.96,1211.26 1671.54,1211.26 1672.13,1211.26 1672.71,1211.26 1673.3,1211.26 1673.89,1211.26 1674.47,1211.26 1675.06,1211.26 1675.65,1211.26 1676.23,1211.26 1676.82,1211.26 1677.41,1211.26 1677.99,1211.26 1678.58,1211.26 1679.17,1211.26 1679.75,1211.26 1680.34,1211.26 1680.92,1211.26 1681.51,1211.26 1682.1,1211.26 1682.68,1211.26 1683.27,1211.26 1683.86,1211.26 1684.44,1211.26 1685.03,1211.26 1685.62,1211.26 1686.2,1211.26 1686.79,1211.26 1687.37,1211.26 1687.96,1211.26 1688.55,1211.26 1689.13,1211.26 1689.72,1211.26 1690.31,1211.26 1690.89,1211.26 1691.48,1211.26 1692.07,1211.26 1692.65,1211.26 1693.24,1211.26 1693.83,1211.26 1694.41,1211.26 1695,1211.26 1695.58,1211.26 1696.17,1211.26 1696.76,1211.26 1697.34,1211.26 1697.93,1211.26 1698.52,1211.26 1699.1,1211.26 1699.69,1211.26 1700.28,1211.26 1700.86,1211.26 1701.45,1211.26 1702.04,1211.26 1702.62,1211.26 1703.21,1211.26 1703.79,1211.26 1704.38,1211.26 1704.97,1211.26 1705.55,1211.26 1706.14,1211.26 1706.73,1211.26 1707.31,1211.26 1707.9,1211.26 1708.49,1211.26 1709.07,1211.26 1709.66,1211.26 1710.24,1211.26 1710.83,1211.26 1711.42,1211.26 1712,1211.26 1712.59,1211.26 1713.18,1211.26 1713.76,1211.26 1714.35,1211.26 1714.94,1211.26 1715.52,1211.26 1716.11,1211.26 1716.7,1211.26 1717.28,1211.26 1717.87,1211.26 1718.45,1211.26 1719.04,1211.26 1719.63,1211.26 1720.21,1211.26 1720.8,1211.26 1721.39,1211.26 1721.97,1211.26 1722.56,1211.26 1723.15,1211.26 1723.73,1211.26 1724.32,1211.26 1724.91,1211.26 1725.49,1211.26 1726.08,1211.26 1726.66,1211.26 1727.25,1211.26 1727.84,1211.26 1728.42,1211.26 1729.01,1211.26 1729.6,1211.26 1730.18,1211.26 1730.77,1211.26 1731.36,1211.26 1731.94,1211.26 1732.53,1211.26 1733.11,1211.26 1733.7,1211.26 1734.29,1211.26 1734.87,1211.26 1735.46,1211.26 1736.05,1211.26 1736.63,1211.26 1737.22,1211.26 1737.81,1211.26 1738.39,1211.26 1738.98,1211.26 1739.57,1211.26 1740.15,1211.26 1740.74,1211.26 1741.32,1211.26 1741.91,1211.26 1742.5,1211.26 1743.08,1211.26 1743.67,1211.26 1744.26,1211.26 1744.84,1211.26 1745.43,1211.26 1746.02,1211.26 1746.6,1211.26 1747.19,1211.26 1747.78,1211.26 1748.36,1211.26 1748.95,1211.26 1749.53,1211.26 1750.12,1211.26 1750.71,1211.26 1751.29,1211.26 1751.88,1211.26 1752.47,1211.26 1753.05,1211.26 1753.64,1211.26 1754.23,1211.26 1754.81,1211.26 1755.4,1211.26 1755.99,1211.26 1756.57,1211.26 1757.16,1211.26 1757.74,1211.26 1758.33,1211.26 1758.92,1211.26 1759.5,1211.26 1760.09,1211.26 1760.68,1211.26 1761.26,1211.26 1761.85,1211.26 1762.44,1211.26 1763.02,1211.26 1763.61,1211.26 1764.19,1211.26 1764.78,1211.26 1765.37,1211.26 1765.95,1211.26 1766.54,1211.26 1767.13,1211.26 1767.71,1211.26 1768.3,1211.26 1768.89,1211.26 1769.47,1211.26 1770.06,1211.26 1770.65,1211.26 1771.23,1211.26 1771.82,1211.26 1772.4,1211.26 1772.99,1211.26 1773.58,1211.26 1774.16,1211.26 1774.75,1211.26 1775.34,1211.26 1775.92,1211.26 1776.51,1211.26 1777.1,1211.26 1777.68,1211.26 1778.27,1211.26 1778.86,1211.26 1779.44,1211.26 1780.03,1211.26 1780.61,1211.26 1781.2,1211.26 1781.79,1211.26 1782.37,1211.26 1782.96,1211.26 1783.55,1211.26 1784.13,1211.26 1784.72,1211.26 1785.31,1211.26 1785.89,1211.26 1786.48,1211.26 1787.06,1211.26 1787.65,1211.26 1788.24,1211.26 1788.82,1211.26 1789.41,1211.26 1790,1211.26 1790.58,1211.26 1791.17,1211.26 1791.76,1211.26 1792.34,1211.26 1792.93,1211.26 1793.52,1211.26 1794.1,1211.26 1794.69,1211.26 1795.27,1211.26 1795.86,1211.26 1796.45,1211.26 1797.03,1211.26 1797.62,1211.26 1798.21,1211.26 1798.79,1211.26 1799.38,1211.26 1799.97,1211.26 1800.55,1211.26 1801.14,1211.26 1801.73,1211.26 1802.31,1211.26 1802.9,1211.26 1803.48,1211.26 1804.07,1211.26 1804.66,1211.26 1805.24,1211.26 1805.83,1211.26 1806.42,1211.26 1807,1211.26 1807.59,1211.26 1808.18,1211.26 1808.76,1211.26 1809.35,1211.26 1809.94,1211.26 1810.52,1211.26 1811.11,1211.26 1811.69,1211.26 1812.28,1211.26 1812.87,1211.26 1813.45,1211.26 1814.04,1211.26 1814.63,1211.26 1815.21,1211.26 1815.8,1211.26 1816.39,1211.26 1816.97,1211.26 1817.56,1211.26 1818.14,1211.26 1818.73,1211.26 1819.32,1211.26 1819.9,1211.26 1820.49,1211.26 1821.08,1211.26 1821.66,1211.26 1822.25,1211.26 1822.84,1211.26 1823.42,1211.26 1824.01,1211.26 1824.6,1211.26 1825.18,1211.26 1825.77,1211.26 1826.35,1211.26 1826.94,1211.26 1827.53,1211.26 1828.11,1211.26 1828.7,1211.26 1829.29,1211.26 1829.87,1211.26 1830.46,1211.26 1831.05,1211.26 1831.63,1211.26 1832.22,1211.26 1832.81,1211.26 1833.39,1211.26 1833.98,1211.26 1834.56,1211.26 1835.15,1211.26 1835.74,1211.26 1836.32,1211.26 1836.91,1211.26 1837.5,1211.26 1838.08,1211.26 1838.67,1211.26 1839.26,1211.26 1839.84,1211.26 1840.43,1211.26 1841.01,1211.26 1841.6,1211.26 1842.19,1211.26 1842.77,1211.26 1843.36,1211.26 1843.95,1211.26 1844.53,1211.26 1845.12,1211.26 1845.71,1211.26 1846.29,1211.26 1846.88,1211.26 1847.47,1211.26 1848.05,1211.26 1848.64,1211.26 1849.22,1211.26 1849.81,1211.26 1850.4,1211.26 1850.98,1211.26 1851.57,1211.26 1852.16,1211.26 1852.74,1211.26 1853.33,1211.26 1853.92,1211.26 1854.5,1211.26 1855.09,1211.26 1855.68,1211.26 1856.26,1211.26 1856.85,1211.26 1857.43,1211.26 1858.02,1211.26 1858.61,1211.26 1859.19,1211.26 1859.78,1211.26 1860.37,1211.26 1860.95,1211.26 1861.54,1211.26 1862.13,1211.26 1862.71,1211.26 1863.3,1211.26 1863.88,1211.26 1864.47,1211.26 1865.06,1211.26 1865.64,1211.26 1866.23,1211.26 1866.82,1211.26 1867.4,1211.26 1867.99,1211.26 1868.58,1211.26 1869.16,1211.26 1869.75,1211.26 1870.34,1211.26 1870.92,1211.26 1871.51,1211.26 1872.09,1211.26 1872.68,1211.26 1873.27,1211.26 1873.85,1211.26 1874.44,1211.26 1875.03,1211.26 1875.61,1211.26 1876.2,1211.26 1876.79,1211.26 1877.37,1211.26 1877.96,1211.26 1878.55,1211.26 1879.13,1211.26 1879.72,1211.26 1880.3,1211.26 1880.89,1211.26 1881.48,1211.26 1882.06,1211.26 1882.65,1211.26 1883.24,1211.26 1883.82,1211.26 1884.41,1211.26 1885,1211.26 1885.58,1211.26 1886.17,1211.26 1886.76,1211.26 1887.34,1211.26 1887.93,1211.26 1888.51,1211.26 1889.1,1211.26 1889.69,1211.26 1890.27,1211.26 1890.86,1211.26 1891.45,1211.26 1892.03,1211.26 1892.62,1211.26 1893.21,1211.26 1893.79,1211.26 1894.38,1211.26 1894.96,1211.26 1895.55,1211.26 1896.14,1211.26 1896.72,1211.26 1897.31,1211.26 1897.9,1211.26 1898.48,1211.26 1899.07,1211.26 1899.66,1211.26 1900.24,1211.26 1900.83,1211.26 1901.42,1211.26 1902,1211.26 1902.59,1211.26 1903.17,1211.26 1903.76,1211.26 1904.35,1211.26 1904.93,1211.26 1905.52,1211.26 1906.11,1211.26 1906.69,1211.26 1907.28,1211.26 1907.87,1211.26 1908.45,1211.26 1909.04,1211.26 1909.63,1211.26 1910.21,1211.26 1910.8,1211.26 1911.38,1211.26 1911.97,1211.26 1912.56,1211.26 1913.14,1211.26 1913.73,1211.26 1914.32,1211.26 1914.9,1211.26 1915.49,1211.26 1916.08,1211.26 1916.66,1211.26 1917.25,1211.26 1917.83,1211.26 1918.42,1211.26 1919.01,1211.26 1919.59,1211.26 1920.18,1211.26 1920.77,1211.26 1921.35,1211.26 1921.94,1211.26 1922.53,1211.26 1923.11,1211.26 1923.7,1211.26 1924.29,1211.26 1924.87,1211.26 1925.46,1211.26 1926.04,1211.26 1926.63,1211.26 1927.22,1211.26 1927.8,1211.26 1928.39,1211.26 1928.98,1211.26 1929.56,1211.26 1930.15,1211.26 1930.74,1211.26 1931.32,1211.26 1931.91,1211.26 1932.5,1211.26 1933.08,1211.26 1933.67,1211.26 1934.25,1211.26 1934.84,1211.26 1935.43,1211.26 1936.01,1211.26 1936.6,1211.26 1937.19,1211.26 1937.77,1211.26 1938.36,1211.26 1938.95,1211.26 1939.53,1211.26 1940.12,1211.26 1940.71,1211.26 1941.29,1211.26 1941.88,1211.26 1942.46,1211.26 1943.05,1211.26 1943.64,1211.26 1944.22,1211.26 1944.81,1211.26 1945.4,1211.26 1945.98,1211.26 1946.57,1211.26 1947.16,1211.26 1947.74,1211.26 1948.33,1211.26 1948.91,1211.26 1949.5,1211.26 1950.09,1211.26 1950.67,1211.26 1951.26,1211.26 1951.85,1211.26 1952.43,1211.26 1953.02,1211.26 1953.61,1211.26 1954.19,1211.26 1954.78,1211.26 1955.37,1211.26 1955.95,1211.26 1956.54,1211.26 1957.12,1211.26 1957.71,1211.26 1958.3,1211.26 1958.88,1211.26 1959.47,1211.26 1960.06,1211.26 1960.64,1211.26 1961.23,1211.26 1961.82,1211.26 1962.4,1211.26 1962.99,1211.26 1963.58,1211.26 1964.16,1211.26 1964.75,1211.26 1965.33,1211.26 1965.92,1211.26 1966.51,1211.26 1967.09,1211.26 1967.68,1211.26 1968.27,1211.26 1968.85,1211.26 1969.44,1211.26 1970.03,1211.26 1970.61,1211.26 1971.2,1211.26 1971.78,1211.26 1972.37,1211.26 1972.96,1211.26 1973.54,1211.26 1974.13,1211.26 1974.72,1211.26 1975.3,1211.26 1975.89,1211.26 1976.48,1211.26 1977.06,1211.26 1977.65,1211.26 1978.24,1211.26 1978.82,1211.26 1979.41,1211.26 1979.99,1211.26 1980.58,1211.26 1981.17,1211.26 1981.75,1211.26 1982.34,1211.26 1982.93,1211.26 1983.51,1211.26 1984.1,1211.26 1984.69,1211.26 1985.27,1211.26 1985.86,1211.26 1986.45,1211.26 1987.03,1211.26 1987.62,1211.26 1988.2,1211.26 1988.79,1211.26 1989.38,1211.26 1989.96,1211.26 1990.55,1211.26 1991.14,1211.26 1991.72,1211.26 1992.31,1211.26 1992.9,1211.26 1993.48,1211.26 1994.07,1211.26 1994.65,1211.26 1995.24,1211.26 1995.83,1211.26 1996.41,1211.26 1997,1211.26 1997.59,1211.26 1998.17,1211.26 1998.76,1211.26 1999.35,1211.26 1999.93,1211.26 2000.52,1211.26 2001.11,1211.26 2001.69,1211.26 2002.28,1211.26 2002.86,1211.26 2003.45,1211.26 2004.04,1211.26 2004.62,1211.26 2005.21,1211.26 2005.8,1211.26 2006.38,1211.26 2006.97,1211.26 2007.56,1211.26 2008.14,1211.26 2008.73,1211.26 2009.32,1211.26 2009.9,1211.26 2010.49,1211.26 2011.07,1211.26 2011.66,1211.26 2012.25,1211.26 2012.83,1211.26 2013.42,1211.26 2014.01,1211.26 2014.59,1211.26 2015.18,1211.26 2015.77,1211.26 2016.35,1211.26 2016.94,1211.26 2017.53,1211.26 2018.11,1211.26 2018.7,1211.26 2019.28,1211.26 2019.87,1211.26 2020.46,1211.26 2021.04,1211.26 2021.63,1211.26 2022.22,1211.26 2022.8,1211.26 2023.39,1211.26 2023.98,1211.26 2024.56,1211.26 2025.15,1211.26 2025.73,1211.26 2026.32,1211.26 2026.91,1211.26 2027.49,1211.26 2028.08,1211.26 2028.67,1211.26 2029.25,1211.26 2029.84,1211.26 2030.43,1211.26 2031.01,1211.26 2031.6,1211.26 2032.19,1211.26 2032.77,1211.26 2033.36,1211.26 2033.94,1211.26 2034.53,1211.26 2035.12,1211.26 2035.7,1211.26 2036.29,1211.26 2036.88,1211.26 2037.46,1211.26 2038.05,1211.26 2038.64,1211.26 2039.22,1211.26 2039.81,1211.26 2040.4,1211.26 2040.98,1211.26 2041.57,1211.26 2042.15,1211.26 2042.74,1211.26 2043.33,1211.26 2043.91,1211.26 2044.5,1211.26 2045.09,1211.26 2045.67,1211.26 2046.26,1211.26 2046.85,1211.26 2047.43,1211.26 2048.02,1211.26 2048.6,1211.26 2049.19,1211.26 2049.78,1211.26 2050.36,1211.26 2050.95,1211.26 2051.54,1211.26 2052.12,1211.26 2052.71,1211.26 2053.3,1211.26 2053.88,1211.26 2054.47,1211.26 2055.06,1211.26 2055.64,1211.26 2056.23,1211.26 2056.81,1211.26 2057.4,1211.26 2057.99,1211.26 2058.57,1211.26 2059.16,1211.26 2059.75,1211.26 2060.33,1211.26 2060.92,1211.26 2061.51,1211.26 2062.09,1211.26 2062.68,1211.26 2063.27,1211.26 2063.85,1211.26 2064.44,1211.26 2065.02,1211.26 2065.61,1211.26 2066.2,1211.26 2066.78,1211.26 2067.37,1211.26 2067.96,1211.26 2068.54,1211.26 2069.13,1211.26 2069.72,1211.26 2070.3,1211.26 2070.89,1211.26 2071.48,1211.26 2072.06,1211.26 2072.65,1211.26 2073.23,1211.26 2073.82,1211.26 2074.41,1211.26 2074.99,1211.26 2075.58,1211.26 2076.17,1211.26 2076.75,1211.26 2077.34,1211.26 2077.93,1211.26 2078.51,1211.26 2079.1,1211.26 2079.68,1211.26 2080.27,1211.26 2080.86,1211.26 2081.44,1211.26 2082.03,1211.26 2082.62,1211.26 2083.2,1211.26 2083.79,1211.26 2084.38,1211.26 2084.96,1211.26 2085.55,1211.26 2086.14,1211.26 2086.72,1211.26 2087.31,1211.26 2087.89,1211.26 2088.48,1211.26 2089.07,1211.26 2089.65,1211.26 2090.24,1211.26 2090.83,1211.26 2091.41,1211.26 2092,1211.26 2092.59,1211.26 2093.17,1211.26 2093.76,1211.26 2094.35,1211.26 2094.93,1211.26 2095.52,1211.26 2096.1,1211.26 2096.69,1211.26 2097.28,1211.26 2097.86,1211.26 2098.45,1211.26 2099.04,1211.26 2099.62,1211.26 2100.21,1211.26 2100.8,1211.26 2101.38,1211.26 2101.97,1211.26 2102.55,1211.26 2103.14,1211.26 2103.73,1211.26 2104.31,1211.26 2104.9,1211.26 2105.49,1211.26 2106.07,1211.26 2106.66,1211.26 2107.25,1211.26 2107.83,1211.26 2108.42,1211.26 2109.01,1211.26 2109.59,1211.26 2110.18,1211.26 2110.76,1211.26 2111.35,1211.26 2111.94,1211.26 2112.52,1211.26 2113.11,1211.26 2113.7,1211.26 2114.28,1211.26 2114.87,1211.26 2115.46,1211.26 2116.04,1211.26 2116.63,1211.26 2117.22,1211.26 2117.8,1211.26 2118.39,1211.26 2118.97,1211.26 2119.56,1211.26 2120.15,1211.26 2120.73,1211.26 2121.32,1211.26 2121.91,1211.26 2122.49,1211.26 2123.08,1211.26 2123.67,1211.26 2124.25,1211.26 2124.84,1211.26 2125.42,1211.26 2126.01,1211.26 2126.6,1211.26 2127.18,1211.26 2127.77,1211.26 2128.36,1211.26 2128.94,1211.26 2129.53,1211.26 2130.12,1211.26 2130.7,1211.26 2131.29,1211.26 2131.88,1211.26 2132.46,1211.26 2133.05,1211.26 2133.63,1211.26 2134.22,1211.26 2134.81,1211.26 2135.39,1211.26 2135.98,1211.26 2136.57,1211.26 2137.15,1211.26 2137.74,1211.26 2138.33,1211.26 2138.91,1211.26 2139.5,1211.26 2140.09,1211.26 2140.67,1211.26 2141.26,1211.26 2141.84,1211.26 2142.43,1211.26 2143.02,1211.26 2143.6,1211.26 2144.19,1211.26 2144.78,1211.26 2145.36,1211.26 2145.95,1211.26 2146.54,1211.26 2147.12,1211.26 2147.71,1211.26 2148.3,1211.26 2148.88,1211.26 2149.47,1211.26 2150.05,1211.26 2150.64,1211.26 2151.23,1211.26 2151.81,1211.26 2152.4,1211.26 2152.99,1211.26 2153.57,1211.26 2154.16,1211.26 2154.75,1211.26 2155.33,1211.26 2155.92,1211.26 2156.5,1211.26 2157.09,1211.26 2157.68,1211.26 2158.26,1211.26 \"/>\n<path clip-path=\"url(#clip672)\" d=\"M986.025 1211.09 L986.612 1211.09 L987.198 1211.09 L987.785 1211.09 L988.371 1211.09 L988.957 1211.09 L989.544 1211.09 L990.13 1211.09 L990.717 1211.09 L991.303 1211.09 L991.889 1211.09 L992.476 1211.09 L993.062 1211.09 L993.649 1211.09 L994.235 1211.09 L994.822 1211.09 L995.408 1211.09 L995.994 1211.09 L996.581 1211.09 L997.167 1211.09 L997.754 1211.09 L998.34 1211.09 L998.926 1211.09 L999.513 1211.09 L1000.1 1211.09 L1000.69 1211.09 L1001.27 1211.09 L1001.86 1211.09 L1002.44 1211.09 L1003.03 1211.09 L1003.62 1211.09 L1004.2 1211.09 L1004.79 1211.09 L1005.38 1211.09 L1005.96 1211.09 L1006.55 1211.09 L1007.14 1211.09 L1007.72 1211.09 L1008.31 1211.09 L1008.9 1211.09 L1009.48 1211.09 L1010.07 1211.09 L1010.65 1211.09 L1011.24 1211.09 L1011.83 1211.09 L1012.41 1211.09 L1013 1211.09 L1013.59 1211.09 L1014.17 1211.09 L1014.76 1211.09 L1015.35 1211.09 L1015.93 1211.09 L1016.52 1211.09 L1017.11 1211.09 L1017.69 1211.09 L1018.28 1211.09 L1018.86 1211.09 L1019.45 1211.09 L1020.04 1211.09 L1020.62 1211.09 L1021.21 1211.09 L1021.8 1211.09 L1022.38 1211.09 L1022.97 1211.09 L1023.56 1211.09 L1024.14 1211.09 L1024.73 1211.09 L1025.32 1211.09 L1025.9 1211.09 L1026.49 1211.09 L1027.07 1211.09 L1027.66 1211.09 L1028.25 1211.09 L1028.83 1211.09 L1029.42 1211.09 L1030.01 1211.09 L1030.59 1211.09 L1031.18 1211.09 L1031.77 1211.09 L1032.35 1211.09 L1032.94 1211.09 L1033.52 1211.09 L1034.11 1211.09 L1034.7 1211.09 L1035.28 1211.09 L1035.87 1211.09 L1036.46 1211.09 L1037.04 1211.09 L1037.63 1211.09 L1038.22 1211.09 L1038.8 1211.09 L1039.39 1211.09 L1039.98 1211.09 L1040.56 1211.09 L1041.15 1211.09 L1041.73 1211.09 L1042.32 1211.09 L1042.91 1211.09 L1043.49 1211.09 L1044.08 1211.09 L1044.67 1211.09 L1045.25 1211.09 L1045.84 1211.09 L1046.43 1211.09 L1047.01 1211.09 L1047.6 1211.09 L1048.19 1211.09 L1048.77 1211.09 L1049.36 1211.09 L1049.94 1211.09 L1050.53 1211.09 L1051.12 1211.09 L1051.7 1211.09 L1052.29 1211.09 L1052.88 1211.09 L1053.46 1211.09 L1054.05 1211.09 L1054.64 1211.09 L1055.22 1211.09 L1055.81 1211.09 L1056.39 1211.09 L1056.98 1211.09 L1057.57 1211.09 L1058.15 1211.09 L1058.74 1211.09 L1059.33 1211.09 L1059.91 1211.09 L1060.5 1211.09 L1061.09 1211.09 L1061.67 1211.09 L1062.26 1211.09 L1062.85 1211.09 L1063.43 1211.09 L1064.02 1211.09 L1064.6 1211.09 L1065.19 1211.09 L1065.78 1211.09 L1066.36 1211.09 L1066.95 1211.09 L1067.54 1211.09 L1068.12 1211.09 L1068.71 1211.09 L1069.3 1211.09 L1069.88 1211.09 L1070.47 1211.09 L1071.06 1211.09 L1071.64 1211.09 L1072.23 1211.09 L1072.81 1211.09 L1073.4 1211.09 L1073.99 1211.09 L1074.57 1211.09 L1075.16 1211.09 L1075.75 1211.09 L1076.33 1211.09 L1076.92 1211.09 L1077.51 1211.09 L1078.09 1211.09 L1078.68 1211.09 L1079.26 1211.09 L1079.85 1211.09 L1080.44 1211.09 L1081.02 1211.09 L1081.61 1211.09 L1082.2 1211.09 L1082.78 1211.09 L1083.37 1211.09 L1083.96 1211.09 L1084.54 1211.09 L1085.13 1211.09 L1085.72 1211.09 L1086.3 1211.09 L1086.89 1211.09 L1087.47 1211.09 L1088.06 1211.09 L1088.65 1211.09 L1089.23 1211.09 L1089.82 1211.09 L1090.41 1211.09 L1090.99 1211.09 L1091.58 1211.09 L1092.17 1211.09 L1092.75 1211.09 L1093.34 1211.09 L1093.93 1211.09 L1094.51 1211.09 L1095.1 1211.09 L1095.68 1211.09 L1096.27 1211.09 L1096.86 1211.09 L1097.44 1211.09 L1098.03 1211.09 L1098.62 1211.09 L1099.2 1211.09 L1099.79 1211.09 L1100.38 1211.09 L1100.96 1211.09 L1101.55 1211.09 L1102.14 1211.09 L1102.72 1211.09 L1103.31 1211.09 L1103.89 1211.09 L1104.48 1211.09 L1105.07 1211.09 L1105.65 1211.09 L1106.24 1211.09 L1106.83 1211.09 L1107.41 1211.09 L1108 1211.09 L1108.59 1211.09 L1109.17 1211.09 L1109.76 1211.09 L1110.34 1211.09 L1110.93 1211.09 L1111.52 1211.09 L1112.1 1211.09 L1112.69 1211.09 L1113.28 1211.09 L1113.86 1211.09 L1114.45 1211.09 L1115.04 1211.09 L1115.62 1211.09 L1116.21 1211.09 L1116.8 1211.09 L1117.38 1211.09 L1117.97 1211.09 L1118.55 1211.09 L1119.14 1211.09 L1119.73 1211.09 L1120.31 1211.09 L1120.9 1211.09 L1121.49 1211.09 L1122.07 1211.09 L1122.66 1211.09 L1123.25 1211.09 L1123.83 1211.09 L1124.42 1211.09 L1125.01 1211.09 L1125.59 1211.09 L1126.18 1211.09 L1126.76 1211.09 L1127.35 1211.09 L1127.94 1211.09 L1128.52 1211.09 L1129.11 1211.09 L1129.7 1211.09 L1130.28 1211.09 L1130.87 1211.09 L1131.46 1211.09 L1132.04 1211.09 L1132.63 1211.09 L1133.21 1211.09 L1133.8 1211.09 L1134.39 1211.09 L1134.97 1211.09 L1135.56 1211.09 L1136.15 1211.09 L1136.73 1211.09 L1137.32 1211.09 L1137.91 1211.09 L1138.49 1211.09 L1139.08 1211.09 L1139.67 1211.09 L1140.25 1211.09 L1140.84 1211.09 L1141.42 1211.09 L1142.01 1211.09 L1142.6 1211.09 L1143.18 1211.09 L1143.77 1211.09 L1144.36 1211.09 L1144.94 1211.09 L1145.53 1211.09 L1146.12 1211.09 L1146.7 1211.09 L1147.29 1211.09 L1147.88 1211.09 L1148.46 1211.09 L1149.05 1211.09 L1149.63 1211.09 L1150.22 1211.09 L1150.81 1211.09 L1151.39 1211.09 L1151.98 1211.09 L1152.57 1211.09 L1153.15 1211.09 L1153.74 1211.09 L1154.33 1211.09 L1154.91 1211.09 L1155.5 1211.09 L1156.09 1211.09 L1156.67 1211.09 L1157.26 1211.09 L1157.84 1211.09 L1158.43 1211.09 L1159.02 1211.09 L1159.6 1211.09 L1160.19 1211.09 L1160.78 1211.09 L1161.36 1211.09 L1161.95 1211.09 L1162.54 1211.09 L1163.12 1211.09 L1163.71 1211.09 L1164.29 1211.09 L1164.88 1211.09 L1165.47 1211.09 L1166.05 1211.09 L1166.64 1211.09 L1167.23 1211.09 L1167.81 1211.09 L1168.4 1211.09 L1168.99 1211.09 L1169.57 1211.09 L1170.16 1211.09 L1170.75 1211.09 L1171.33 1211.09 L1171.92 1211.09 L1172.5 1211.09 L1173.09 1211.09 L1173.68 1211.09 L1174.26 1211.09 L1174.85 1211.09 L1175.44 1211.09 L1176.02 1211.09 L1176.61 1211.09 L1177.2 1211.09 L1177.78 1211.09 L1178.37 1211.09 L1178.96 1211.09 L1179.54 1211.09 L1180.13 1211.09 L1180.71 1211.09 L1181.3 1211.09 L1181.89 1211.09 L1182.47 1211.09 L1183.06 1211.09 L1183.65 1211.09 L1184.23 1211.09 L1184.82 1211.09 L1185.41 1211.09 L1185.99 1211.09 L1186.58 1211.09 L1187.16 1211.09 L1187.75 1211.09 L1188.34 1211.09 L1188.92 1211.09 L1189.51 1211.09 L1190.1 1211.09 L1190.68 1211.09 L1191.27 1211.09 L1191.86 1211.09 L1192.44 1211.09 L1193.03 1211.09 L1193.62 1211.09 L1194.2 1211.09 L1194.79 1211.09 L1195.37 1211.09 L1195.96 1211.09 L1196.55 1211.09 L1197.13 1211.09 L1197.72 1211.09 L1198.31 1211.09 L1198.89 1211.09 L1199.48 1211.09 L1200.07 1211.09 L1200.65 1211.09 L1201.24 1211.09 L1201.83 1211.09 L1202.41 1211.09 L1203 1211.09 L1203.58 1211.09 L1204.17 1211.09 L1204.76 1211.09 L1205.34 1211.09 L1205.93 1211.09 L1206.52 1211.09 L1207.1 1211.09 L1207.69 1211.09 L1208.28 1211.09 L1208.86 1211.09 L1209.45 1211.09 L1210.03 1211.09 L1210.62 1211.09 L1211.21 1211.09 L1211.79 1211.09 L1212.38 1211.09 L1212.97 1211.09 L1213.55 1211.09 L1214.14 1211.09 L1214.73 1211.09 L1215.31 1211.09 L1215.9 1211.09 L1216.49 1211.09 L1217.07 1211.09 L1217.66 1211.09 L1218.24 1211.09 L1218.83 1211.09 L1219.42 1211.09 L1220 1211.09 L1220.59 1211.09 L1221.18 1211.09 L1221.76 1211.09 L1222.35 1211.09 L1222.94 1211.09 L1223.52 1211.09 L1224.11 1211.09 L1224.7 1211.09 L1225.28 1211.09 L1225.87 1211.09 L1226.45 1211.09 L1227.04 1211.09 L1227.63 1211.09 L1228.21 1211.09 L1228.8 1211.09 L1229.39 1211.09 L1229.97 1211.09 L1230.56 1211.09 L1231.15 1211.09 L1231.73 1211.09 L1232.32 1211.09 L1232.91 1211.09 L1233.49 1211.09 L1234.08 1211.09 L1234.66 1211.09 L1235.25 1211.09 L1235.84 1211.09 L1236.42 1211.09 L1237.01 1211.09 L1237.6 1211.09 L1238.18 1211.09 L1238.77 1211.09 L1239.36 1211.09 L1239.94 1211.09 L1240.53 1211.09 L1241.11 1211.09 L1241.7 1211.09 L1242.29 1211.09 L1242.87 1211.09 L1243.46 1211.09 L1244.05 1211.09 L1244.63 1211.09 L1245.22 1211.09 L1245.81 1211.09 L1246.39 1211.09 L1246.98 1211.09 L1247.57 1211.09 L1248.15 1211.09 L1248.74 1211.09 L1249.32 1211.09 L1249.91 1211.09 L1250.5 1211.09 L1251.08 1211.09 L1251.67 1211.09 L1252.26 1211.09 L1252.84 1211.09 L1253.43 1211.09 L1254.02 1211.09 L1254.6 1211.09 L1255.19 1211.09 L1255.78 1211.09 L1256.36 1211.09 L1256.95 1211.09 L1257.53 1211.09 L1258.12 1211.09 L1258.71 1211.09 L1259.29 1211.09 L1259.88 1211.09 L1260.47 1211.09 L1261.05 1211.09 L1261.64 1211.09 L1262.23 1211.09 L1262.81 1211.09 L1263.4 1211.09 L1263.98 1211.09 L1264.57 1211.09 L1265.16 1211.09 L1265.74 1211.09 L1266.33 1211.09 L1266.92 1211.09 L1267.5 1211.09 L1268.09 1211.09 L1268.68 1211.09 L1269.26 1211.09 L1269.85 1211.09 L1270.44 1211.09 L1271.02 1211.09 L1271.61 1211.09 L1272.19 1211.09 L1272.78 1211.09 L1273.37 1211.09 L1273.95 1211.09 L1274.54 1211.09 L1275.13 1211.09 L1275.71 1211.09 L1276.3 1211.09 L1276.89 1211.09 L1277.47 1211.09 L1278.06 1211.09 L1278.65 1211.09 L1279.23 1211.09 L1279.82 1211.09 L1280.4 1211.09 L1280.99 1211.09 L1281.58 1211.09 L1282.16 1211.09 L1282.75 1211.09 L1283.34 1211.09 L1283.92 1211.09 L1284.51 1211.09 L1285.1 1211.09 L1285.68 1211.09 L1286.27 1211.09 L1286.86 1211.09 L1287.44 1211.09 L1288.03 1211.09 L1288.61 1211.09 L1289.2 1211.09 L1289.79 1211.09 L1290.37 1211.09 L1290.96 1211.09 L1291.55 1211.09 L1292.13 1211.09 L1292.72 1211.09 L1293.31 1211.09 L1293.89 1211.09 L1294.48 1211.09 L1295.06 1211.09 L1295.65 1211.09 L1296.24 1211.09 L1296.82 1211.09 L1297.41 1211.09 L1298 1211.09 L1298.58 1211.09 L1299.17 1211.09 L1299.76 1211.09 L1300.34 1211.09 L1300.93 1211.09 L1301.52 1211.09 L1302.1 1211.09 L1302.69 1211.09 L1303.27 1211.09 L1303.86 1211.09 L1304.45 1211.09 L1305.03 1211.09 L1305.62 1211.09 L1306.21 1211.09 L1306.79 1211.09 L1307.38 1211.09 L1307.97 1211.09 L1308.55 1211.09 L1309.14 1211.09 L1309.73 1211.09 L1310.31 1211.09 L1310.9 1211.09 L1311.48 1211.09 L1312.07 1211.09 L1312.66 1211.09 L1313.24 1211.09 L1313.83 1211.09 L1314.42 1211.09 L1315 1211.09 L1315.59 1211.09 L1316.18 1211.09 L1316.76 1211.09 L1317.35 1211.09 L1317.93 1211.09 L1318.52 1211.09 L1319.11 1211.09 L1319.69 1211.09 L1320.28 1211.09 L1320.87 1211.09 L1321.45 1211.09 L1322.04 1211.09 L1322.63 1211.09 L1323.21 1211.09 L1323.8 1211.09 L1324.39 1211.09 L1324.97 1211.09 L1325.56 1211.09 L1326.14 1211.09 L1326.73 1211.09 L1327.32 1211.09 L1327.9 1211.09 L1328.49 1211.09 L1329.08 1211.09 L1329.66 1211.09 L1330.25 1211.09 L1330.84 1211.09 L1331.42 1211.09 L1332.01 1211.09 L1332.6 1211.09 L1333.18 1211.09 L1333.77 1211.09 L1334.35 1211.09 L1334.94 1211.09 L1335.53 1211.09 L1336.11 1211.09 L1336.7 1211.09 L1337.29 1211.09 L1337.87 1211.09 L1338.46 1211.09 L1339.05 1211.09 L1339.63 1211.09 L1340.22 1211.09 L1340.8 1211.09 L1341.39 1211.09 L1341.98 1211.09 L1342.56 1211.09 L1343.15 1211.09 L1343.74 1211.09 L1344.32 1211.09 L1344.91 1211.09 L1345.5 1211.09 L1346.08 1211.09 L1346.67 1211.09 L1347.26 1211.09 L1347.84 1211.09 L1348.43 1211.09 L1349.01 1211.09 L1349.6 1211.09 L1350.19 1211.09 L1350.77 1211.09 L1351.36 1211.09 L1351.95 1211.09 L1352.53 1211.09 L1353.12 1211.09 L1353.71 1211.09 L1354.29 1211.09 L1354.88 1211.09 L1355.47 1211.09 L1356.05 1211.09 L1356.64 1211.09 L1357.22 1211.09 L1357.81 1211.09 L1358.4 1211.09 L1358.98 1211.09 L1359.57 1211.09 L1360.16 1211.09 L1360.74 1211.09 L1361.33 1211.09 L1361.92 1211.09 L1362.5 1211.09 L1363.09 1211.09 L1363.68 1211.09 L1364.26 1211.09 L1364.85 1211.09 L1365.43 1211.09 L1366.02 1211.09 L1366.61 1211.09 L1367.19 1211.09 L1367.78 1211.09 L1368.37 1211.09 L1368.95 1211.09 L1369.54 1211.09 L1370.13 1211.09 L1370.71 1211.09 L1371.3 1211.09 L1371.88 1211.09 L1372.47 1211.09 L1373.06 1211.09 L1373.64 1211.09 L1374.23 1211.09 L1374.82 1211.09 L1375.4 1211.09 L1375.99 1211.09 L1376.58 1211.09 L1377.16 1211.09 L1377.75 1211.09 L1378.34 1211.09 L1378.92 1211.09 L1379.51 1211.09 L1380.09 1211.09 L1380.68 1211.09 L1381.27 1211.09 L1381.85 1211.09 L1382.44 1211.09 L1383.03 1211.09 L1383.61 1211.09 L1384.2 1211.09 L1384.79 1211.09 L1385.37 1211.09 L1385.96 1211.09 L1386.55 1211.09 L1387.13 1211.09 L1387.72 1211.09 L1388.3 1211.09 L1388.89 1211.09 L1389.48 1211.09 L1390.06 1211.09 L1390.65 1211.09 L1391.24 1211.09 L1391.82 1211.09 L1392.41 1211.09 L1393 1211.09 L1393.58 1211.09 L1394.17 1211.09 L1394.75 1211.09 L1395.34 1211.09 L1395.93 1211.09 L1396.51 1211.09 L1397.1 1211.09 L1397.69 1211.09 L1398.27 1211.09 L1398.86 1211.09 L1399.45 1211.09 L1400.03 1211.09 L1400.62 1211.09 L1401.21 1211.09 L1401.79 1211.09 L1402.38 1211.09 L1402.96 1211.09 L1403.55 1211.09 L1404.14 1211.09 L1404.72 1211.09 L1405.31 1211.09 L1405.9 1211.09 L1406.48 1211.09 L1407.07 1211.09 L1407.66 1211.09 L1408.24 1211.09 L1408.83 1211.09 L1409.42 1211.09 L1410 1211.09 L1410.59 1211.09 L1411.17 1211.09 L1411.76 1211.09 L1412.35 1211.09 L1412.93 1211.09 L1413.52 1211.09 L1414.11 1211.09 L1414.69 1211.09 L1415.28 1211.09 L1415.87 1211.09 L1416.45 1211.09 L1417.04 1211.09 L1417.63 1211.09 L1418.21 1211.09 L1418.8 1211.09 L1419.38 1211.09 L1419.97 1211.09 L1420.56 1211.09 L1421.14 1211.09 L1421.73 1211.09 L1422.32 1211.09 L1422.9 1211.09 L1423.49 1211.09 L1424.08 1211.09 L1424.66 1211.09 L1425.25 1211.09 L1425.83 1211.09 L1426.42 1211.09 L1427.01 1211.09 L1427.59 1211.09 L1428.18 1211.09 L1428.77 1211.09 L1429.35 1211.09 L1429.94 1211.09 L1430.53 1211.09 L1431.11 1211.09 L1431.7 1211.09 L1432.29 1211.09 L1432.87 1211.09 L1433.46 1211.09 L1434.04 1211.09 L1434.63 1211.09 L1435.22 1211.09 L1435.8 1211.09 L1436.39 1211.09 L1436.98 1211.09 L1437.56 1211.09 L1438.15 1211.09 L1438.74 1211.09 L1439.32 1211.09 L1439.91 1211.09 L1440.5 1211.09 L1441.08 1211.09 L1441.67 1211.09 L1442.25 1211.09 L1442.84 1211.09 L1443.43 1211.09 L1444.01 1211.09 L1444.6 1211.09 L1445.19 1211.09 L1445.77 1211.09 L1446.36 1211.09 L1446.95 1211.09 L1447.53 1211.09 L1448.12 1211.09 L1448.7 1211.09 L1449.29 1211.09 L1449.88 1211.09 L1450.46 1211.09 L1451.05 1211.09 L1451.64 1211.09 L1452.22 1211.09 L1452.81 1211.09 L1453.4 1211.09 L1453.98 1211.09 L1454.57 1211.09 L1455.16 1211.09 L1455.74 1211.09 L1456.33 1211.09 L1456.91 1211.09 L1457.5 1211.09 L1458.09 1211.09 L1458.67 1211.09 L1459.26 1211.09 L1459.85 1211.09 L1460.43 1211.09 L1461.02 1211.09 L1461.61 1211.09 L1462.19 1211.09 L1462.78 1211.09 L1463.37 1211.09 L1463.95 1211.09 L1464.54 1211.09 L1465.12 1211.09 L1465.71 1211.09 L1466.3 1211.09 L1466.88 1211.09 L1467.47 1211.09 L1468.06 1211.09 L1468.64 1211.09 L1469.23 1211.09 L1469.82 1211.09 L1470.4 1211.09 L1470.99 1211.09 L1471.57 1211.09 L1472.16 1211.09 L1472.75 1211.09 L1473.33 1211.09 L1473.92 1211.09 L1474.51 1211.09 L1475.09 1211.09 L1475.68 1211.09 L1476.27 1211.09 L1476.85 1211.09 L1477.44 1211.09 L1478.03 1211.09 L1478.61 1211.09 L1479.2 1211.09 L1479.78 1211.09 L1480.37 1211.09 L1480.96 1211.09 L1481.54 1211.09 L1482.13 1211.09 L1482.72 1211.09 L1483.3 1211.09 L1483.89 1211.09 L1484.48 1211.09 L1485.06 1211.09 L1485.65 1211.09 L1486.24 1211.09 L1486.82 1211.09 L1487.41 1211.09 L1487.99 1211.09 L1488.58 1211.09 L1489.17 1211.09 L1489.75 1211.09 L1490.34 1211.09 L1490.93 1211.09 L1491.51 1211.09 L1492.1 1211.09 L1492.69 1211.09 L1493.27 1211.09 L1493.86 1211.09 L1494.45 1211.09 L1495.03 1211.09 L1495.62 1211.09 L1496.2 1211.09 L1496.79 1211.09 L1497.38 1211.09 L1497.96 1211.09 L1498.55 1211.09 L1499.14 1211.09 L1499.72 1211.09 L1500.31 1211.09 L1500.9 1211.09 L1501.48 1211.09 L1502.07 1211.09 L1502.65 1211.09 L1503.24 1211.09 L1503.83 1211.09 L1504.41 1211.09 L1505 1211.09 L1505.59 1211.09 L1506.17 1211.09 L1506.76 1211.09 L1507.35 1211.09 L1507.93 1211.09 L1508.52 1211.09 L1509.11 1211.09 L1509.69 1211.09 L1510.28 1211.09 L1510.86 1211.09 L1511.45 1211.09 L1512.04 1211.09 L1512.62 1211.09 L1513.21 1211.09 L1513.8 1211.09 L1514.38 1211.09 L1514.97 1211.09 L1515.56 1211.09 L1516.14 1211.09 L1516.73 1211.09 L1517.32 1211.09 L1517.9 1211.09 L1518.49 1211.09 L1519.07 1211.09 L1519.66 1211.09 L1520.25 1211.09 L1520.83 1211.09 L1521.42 1211.09 L1522.01 1211.09 L1522.59 1211.09 L1523.18 1211.09 L1523.77 1211.09 L1524.35 1211.09 L1524.94 1211.09 L1525.52 1211.09 L1526.11 1211.09 L1526.7 1211.09 L1527.28 1211.09 L1527.87 1211.09 L1528.46 1211.09 L1529.04 1211.09 L1529.63 1211.09 L1530.22 1211.09 L1530.8 1211.09 L1531.39 1211.09 L1531.98 1211.09 L1532.56 1211.09 L1533.15 1211.09 L1533.73 1211.09 L1534.32 1211.09 L1534.91 1211.09 L1535.49 1211.09 L1536.08 1211.09 L1536.67 1211.09 L1537.25 1211.09 L1537.84 1211.09 L1538.43 1211.09 L1539.01 1211.09 L1539.6 1211.09 L1540.19 1211.09 L1540.77 1211.09 L1541.36 1211.09 L1541.94 1211.09 L1542.53 1211.09 L1543.12 1211.09 L1543.7 1211.09 L1544.29 1211.09 L1544.88 1211.09 L1545.46 1211.09 L1546.05 1211.09 L1546.64 1211.09 L1547.22 1211.09 L1547.81 1211.09 L1548.4 1211.09 L1548.98 1211.09 L1549.57 1211.09 L1550.15 1211.09 L1550.74 1211.09 L1551.33 1211.09 L1551.91 1211.09 L1552.5 1211.09 L1553.09 1211.09 L1553.67 1211.09 L1554.26 1211.09 L1554.85 1211.09 L1555.43 1211.09 L1556.02 1211.09 L1556.6 1211.09 L1557.19 1211.09 L1557.78 1211.09 L1558.36 1211.09 L1558.95 1211.09 L1559.54 1211.09 L1560.12 1211.09 L1560.71 1211.09 L1561.3 1211.09 L1561.88 1211.09 L1562.47 1211.09 L1563.06 1211.09 L1563.64 1211.09 L1564.23 1211.09 L1564.81 1211.09 L1565.4 1211.09 L1565.99 1211.09 L1566.57 1211.09 L1567.16 1211.09 L1567.75 1211.09 L1568.33 1211.09 L1568.92 1211.09 L1569.51 1211.09 L1570.09 1211.09 L1570.68 1211.09 L1571.27 1211.09 L1571.85 1211.09 L1572.44 1211.09 L1573.02 1211.09 L1573.61 1211.09 L1574.2 1211.09 L1574.78 1211.09 L1575.37 1211.09 L1575.96 1211.09 L1576.54 1211.09 L1577.13 1211.09 L1577.72 1211.09 L1578.3 1211.09 L1578.89 1211.09 L1579.47 1211.09 L1580.06 1211.09 L1580.65 1211.09 L1581.23 1211.09 L1581.82 1211.09 L1582.41 1211.09 L1582.99 1211.09 L1583.58 1211.09 L1584.17 1211.09 L1584.75 1211.09 L1585.34 1211.09 L1585.93 1211.09 L1586.51 1211.09 L1587.1 1211.09 L1587.68 1211.09 L1588.27 1211.09 L1588.86 1211.09 L1589.44 1211.09 L1590.03 1211.09 L1590.62 1211.09 L1591.2 1211.09 L1591.79 1211.09 L1592.38 1211.09 L1592.96 1211.09 L1593.55 1211.09 L1594.14 1211.09 L1594.72 1211.09 L1595.31 1211.09 L1595.89 1211.09 L1596.48 1211.09 L1597.07 1211.09 L1597.65 1211.09 L1598.24 1211.09 L1598.83 1211.09 L1599.41 1211.09 L1600 1211.09 L1600.59 1211.09 L1601.17 1211.09 L1601.76 1211.09 L1602.34 1211.09 L1602.93 1211.09 L1603.52 1211.09 L1604.1 1211.09 L1604.69 1211.09 L1605.28 1211.09 L1605.86 1211.09 L1606.45 1211.09 L1607.04 1211.09 L1607.62 1211.09 L1608.21 1211.09 L1608.8 1211.09 L1609.38 1211.09 L1609.97 1211.09 L1610.55 1211.09 L1611.14 1211.09 L1611.73 1211.09 L1612.31 1211.09 L1612.9 1211.09 L1613.49 1211.09 L1614.07 1211.09 L1614.66 1211.09 L1615.25 1211.09 L1615.83 1211.09 L1616.42 1211.09 L1617.01 1211.09 L1617.59 1211.09 L1618.18 1211.09 L1618.76 1211.09 L1619.35 1211.09 L1619.94 1211.09 L1620.52 1211.09 L1621.11 1211.09 L1621.7 1211.09 L1622.28 1211.09 L1622.87 1211.09 L1623.46 1211.09 L1624.04 1211.09 L1624.63 1211.09 L1625.22 1211.09 L1625.8 1211.09 L1626.39 1211.09 L1626.97 1211.09 L1627.56 1211.09 L1628.15 1211.09 L1628.73 1211.09 L1629.32 1211.09 L1629.91 1211.09 L1630.49 1211.09 L1631.08 1211.09 L1631.67 1211.09 L1632.25 1211.09 L1632.84 1211.09 L1633.42 1211.09 L1634.01 1211.09 L1634.6 1211.09 L1635.18 1211.09 L1635.77 1211.09 L1636.36 1211.09 L1636.94 1211.09 L1637.53 1211.09 L1638.12 1211.09 L1638.7 1211.09 L1639.29 1211.09 L1639.88 1211.09 L1640.46 1211.09 L1641.05 1211.09 L1641.63 1211.09 L1642.22 1211.09 L1642.81 1211.09 L1643.39 1211.09 L1643.98 1211.09 L1644.57 1211.09 L1645.15 1211.09 L1645.74 1211.09 L1646.33 1211.09 L1646.91 1211.09 L1647.5 1211.09 L1648.09 1211.09 L1648.67 1211.09 L1649.26 1211.09 L1649.84 1211.09 L1650.43 1211.09 L1651.02 1211.09 L1651.6 1211.09 L1652.19 1211.09 L1652.78 1211.09 L1653.36 1211.09 L1653.95 1211.09 L1654.54 1211.09 L1655.12 1211.09 L1655.71 1211.09 L1656.29 1211.09 L1656.88 1211.09 L1657.47 1211.09 L1658.05 1211.09 L1658.64 1211.09 L1659.23 1211.09 L1659.81 1211.09 L1660.4 1211.09 L1660.99 1211.09 L1661.57 1211.09 L1662.16 1211.09 L1662.75 1211.09 L1663.33 1211.09 L1663.92 1211.09 L1664.5 1211.09 L1665.09 1211.09 L1665.68 1211.09 L1666.26 1211.09 L1666.85 1211.09 L1667.44 1211.09 L1668.02 1211.09 L1668.61 1211.09 L1669.2 1211.09 L1669.78 1211.09 L1670.37 1211.09 L1670.96 1211.09 L1671.54 1211.09 L1672.13 1211.09 L1672.71 1211.09 L1673.3 1211.09 L1673.89 1211.09 L1674.47 1211.09 L1675.06 1211.09 L1675.65 1211.09 L1676.23 1211.09 L1676.82 1211.09 L1677.41 1211.09 L1677.99 1211.09 L1678.58 1211.09 L1679.17 1211.09 L1679.75 1211.09 L1680.34 1211.09 L1680.92 1211.09 L1681.51 1211.09 L1682.1 1211.09 L1682.68 1211.09 L1683.27 1211.09 L1683.86 1211.09 L1684.44 1211.09 L1685.03 1211.09 L1685.62 1211.09 L1686.2 1211.09 L1686.79 1211.09 L1687.37 1211.09 L1687.96 1211.09 L1688.55 1211.09 L1689.13 1211.09 L1689.72 1211.09 L1690.31 1211.09 L1690.89 1211.09 L1691.48 1211.09 L1692.07 1211.09 L1692.65 1211.09 L1693.24 1211.09 L1693.83 1211.09 L1694.41 1211.09 L1695 1211.09 L1695.58 1211.09 L1696.17 1211.09 L1696.76 1211.09 L1697.34 1211.09 L1697.93 1211.09 L1698.52 1211.09 L1699.1 1211.09 L1699.69 1211.09 L1700.28 1211.09 L1700.86 1211.09 L1701.45 1211.09 L1702.04 1211.09 L1702.62 1211.09 L1703.21 1211.09 L1703.79 1211.09 L1704.38 1211.09 L1704.97 1211.09 L1705.55 1211.09 L1706.14 1211.09 L1706.73 1211.09 L1707.31 1211.09 L1707.9 1211.09 L1708.49 1211.09 L1709.07 1211.09 L1709.66 1211.09 L1710.24 1211.09 L1710.83 1211.09 L1711.42 1211.09 L1712 1211.09 L1712.59 1211.09 L1713.18 1211.09 L1713.76 1211.09 L1714.35 1211.09 L1714.94 1211.09 L1715.52 1211.09 L1716.11 1211.09 L1716.7 1211.09 L1717.28 1211.09 L1717.87 1211.09 L1718.45 1211.09 L1719.04 1211.09 L1719.63 1211.09 L1720.21 1211.09 L1720.8 1211.09 L1721.39 1211.09 L1721.97 1211.09 L1722.56 1211.09 L1723.15 1211.09 L1723.73 1211.09 L1724.32 1211.09 L1724.91 1211.09 L1725.49 1211.09 L1726.08 1211.09 L1726.66 1211.09 L1727.25 1211.09 L1727.84 1211.09 L1728.42 1211.09 L1729.01 1211.09 L1729.6 1211.09 L1730.18 1211.09 L1730.77 1211.09 L1731.36 1211.09 L1731.94 1211.09 L1732.53 1211.09 L1733.11 1211.09 L1733.7 1211.09 L1734.29 1211.09 L1734.87 1211.09 L1735.46 1211.09 L1736.05 1211.09 L1736.63 1211.09 L1737.22 1211.09 L1737.81 1211.09 L1738.39 1211.09 L1738.98 1211.09 L1739.57 1211.09 L1740.15 1211.09 L1740.74 1211.09 L1741.32 1211.09 L1741.91 1211.09 L1742.5 1211.09 L1743.08 1211.09 L1743.67 1211.09 L1744.26 1211.09 L1744.84 1211.09 L1745.43 1211.09 L1746.02 1211.09 L1746.6 1211.09 L1747.19 1211.09 L1747.78 1211.09 L1748.36 1211.09 L1748.95 1211.09 L1749.53 1211.09 L1750.12 1211.09 L1750.71 1211.09 L1751.29 1211.09 L1751.88 1211.09 L1752.47 1211.09 L1753.05 1211.09 L1753.64 1211.09 L1754.23 1211.09 L1754.81 1211.09 L1755.4 1211.09 L1755.99 1211.09 L1756.57 1211.09 L1757.16 1211.09 L1757.74 1211.09 L1758.33 1211.09 L1758.92 1211.09 L1759.5 1211.09 L1760.09 1211.09 L1760.68 1211.09 L1761.26 1211.09 L1761.85 1211.09 L1762.44 1211.09 L1763.02 1211.09 L1763.61 1211.09 L1764.19 1211.09 L1764.78 1211.09 L1765.37 1211.09 L1765.95 1211.09 L1766.54 1211.09 L1767.13 1211.09 L1767.71 1211.09 L1768.3 1211.09 L1768.89 1211.09 L1769.47 1211.09 L1770.06 1211.09 L1770.65 1211.09 L1771.23 1211.09 L1771.82 1211.09 L1772.4 1211.09 L1772.99 1211.09 L1773.58 1211.09 L1774.16 1211.09 L1774.75 1211.09 L1775.34 1211.09 L1775.92 1211.09 L1776.51 1211.09 L1777.1 1211.09 L1777.68 1211.09 L1778.27 1211.09 L1778.86 1211.09 L1779.44 1211.09 L1780.03 1211.09 L1780.61 1211.09 L1781.2 1211.09 L1781.79 1211.09 L1782.37 1211.09 L1782.96 1211.09 L1783.55 1211.09 L1784.13 1211.09 L1784.72 1211.09 L1785.31 1211.09 L1785.89 1211.09 L1786.48 1211.09 L1787.06 1211.09 L1787.65 1211.09 L1788.24 1211.09 L1788.82 1211.09 L1789.41 1211.09 L1790 1211.09 L1790.58 1211.09 L1791.17 1211.09 L1791.76 1211.09 L1792.34 1211.09 L1792.93 1211.09 L1793.52 1211.09 L1794.1 1211.09 L1794.69 1211.09 L1795.27 1211.09 L1795.86 1211.09 L1796.45 1211.09 L1797.03 1211.09 L1797.62 1211.09 L1798.21 1211.09 L1798.79 1211.09 L1799.38 1211.09 L1799.97 1211.09 L1800.55 1211.09 L1801.14 1211.09 L1801.73 1211.09 L1802.31 1211.09 L1802.9 1211.09 L1803.48 1211.09 L1804.07 1211.09 L1804.66 1211.09 L1805.24 1211.09 L1805.83 1211.09 L1806.42 1211.09 L1807 1211.09 L1807.59 1211.09 L1808.18 1211.09 L1808.76 1211.09 L1809.35 1211.09 L1809.94 1211.09 L1810.52 1211.09 L1811.11 1211.09 L1811.69 1211.09 L1812.28 1211.09 L1812.87 1211.09 L1813.45 1211.09 L1814.04 1211.09 L1814.63 1211.09 L1815.21 1211.09 L1815.8 1211.09 L1816.39 1211.09 L1816.97 1211.09 L1817.56 1211.09 L1818.14 1211.09 L1818.73 1211.09 L1819.32 1211.09 L1819.9 1211.09 L1820.49 1211.09 L1821.08 1211.09 L1821.66 1211.09 L1822.25 1211.09 L1822.84 1211.09 L1823.42 1211.09 L1824.01 1211.09 L1824.6 1211.09 L1825.18 1211.09 L1825.77 1211.09 L1826.35 1211.09 L1826.94 1211.09 L1827.53 1211.09 L1828.11 1211.09 L1828.7 1211.09 L1829.29 1211.09 L1829.87 1211.09 L1830.46 1211.09 L1831.05 1211.09 L1831.63 1211.09 L1832.22 1211.09 L1832.81 1211.09 L1833.39 1211.09 L1833.98 1211.09 L1834.56 1211.09 L1835.15 1211.09 L1835.74 1211.09 L1836.32 1211.09 L1836.91 1211.09 L1837.5 1211.09 L1838.08 1211.09 L1838.67 1211.09 L1839.26 1211.09 L1839.84 1211.09 L1840.43 1211.09 L1841.01 1211.09 L1841.6 1211.09 L1842.19 1211.09 L1842.77 1211.09 L1843.36 1211.09 L1843.95 1211.09 L1844.53 1211.09 L1845.12 1211.09 L1845.71 1211.09 L1846.29 1211.09 L1846.88 1211.09 L1847.47 1211.09 L1848.05 1211.09 L1848.64 1211.09 L1849.22 1211.09 L1849.81 1211.09 L1850.4 1211.09 L1850.98 1211.09 L1851.57 1211.09 L1852.16 1211.09 L1852.74 1211.09 L1853.33 1211.09 L1853.92 1211.09 L1854.5 1211.09 L1855.09 1211.09 L1855.68 1211.09 L1856.26 1211.09 L1856.85 1211.09 L1857.43 1211.09 L1858.02 1211.09 L1858.61 1211.09 L1859.19 1211.09 L1859.78 1211.09 L1860.37 1211.09 L1860.95 1211.09 L1861.54 1211.09 L1862.13 1211.09 L1862.71 1211.09 L1863.3 1211.09 L1863.88 1211.09 L1864.47 1211.09 L1865.06 1211.09 L1865.64 1211.09 L1866.23 1211.09 L1866.82 1211.09 L1867.4 1211.09 L1867.99 1211.09 L1868.58 1211.09 L1869.16 1211.09 L1869.75 1211.09 L1870.34 1211.09 L1870.92 1211.09 L1871.51 1211.09 L1872.09 1211.09 L1872.68 1211.09 L1873.27 1211.09 L1873.85 1211.09 L1874.44 1211.09 L1875.03 1211.09 L1875.61 1211.09 L1876.2 1211.09 L1876.79 1211.09 L1877.37 1211.09 L1877.96 1211.09 L1878.55 1211.09 L1879.13 1211.09 L1879.72 1211.09 L1880.3 1211.09 L1880.89 1211.09 L1881.48 1211.09 L1882.06 1211.09 L1882.65 1211.09 L1883.24 1211.09 L1883.82 1211.09 L1884.41 1211.09 L1885 1211.09 L1885.58 1211.09 L1886.17 1211.09 L1886.76 1211.09 L1887.34 1211.09 L1887.93 1211.09 L1888.51 1211.09 L1889.1 1211.09 L1889.69 1211.09 L1890.27 1211.09 L1890.86 1211.09 L1891.45 1211.09 L1892.03 1211.09 L1892.62 1211.09 L1893.21 1211.09 L1893.79 1211.09 L1894.38 1211.09 L1894.96 1211.09 L1895.55 1211.09 L1896.14 1211.09 L1896.72 1211.09 L1897.31 1211.09 L1897.9 1211.09 L1898.48 1211.09 L1899.07 1211.09 L1899.66 1211.09 L1900.24 1211.09 L1900.83 1211.09 L1901.42 1211.09 L1902 1211.09 L1902.59 1211.09 L1903.17 1211.09 L1903.76 1211.09 L1904.35 1211.09 L1904.93 1211.09 L1905.52 1211.09 L1906.11 1211.09 L1906.69 1211.09 L1907.28 1211.09 L1907.87 1211.09 L1908.45 1211.09 L1909.04 1211.09 L1909.63 1211.09 L1910.21 1211.09 L1910.8 1211.09 L1911.38 1211.09 L1911.97 1211.09 L1912.56 1211.09 L1913.14 1211.09 L1913.73 1211.09 L1914.32 1211.09 L1914.9 1211.09 L1915.49 1211.09 L1916.08 1211.09 L1916.66 1211.09 L1917.25 1211.09 L1917.83 1211.09 L1918.42 1211.09 L1919.01 1211.09 L1919.59 1211.09 L1920.18 1211.09 L1920.77 1211.09 L1921.35 1211.09 L1921.94 1211.09 L1922.53 1211.09 L1923.11 1211.09 L1923.7 1211.09 L1924.29 1211.09 L1924.87 1211.09 L1925.46 1211.09 L1926.04 1211.09 L1926.63 1211.09 L1927.22 1211.09 L1927.8 1211.09 L1928.39 1211.09 L1928.98 1211.09 L1929.56 1211.09 L1930.15 1211.09 L1930.74 1211.09 L1931.32 1211.09 L1931.91 1211.09 L1932.5 1211.09 L1933.08 1211.09 L1933.67 1211.09 L1934.25 1211.09 L1934.84 1211.09 L1935.43 1211.09 L1936.01 1211.09 L1936.6 1211.09 L1937.19 1211.09 L1937.77 1211.09 L1938.36 1211.09 L1938.95 1211.09 L1939.53 1211.09 L1940.12 1211.09 L1940.71 1211.09 L1941.29 1211.09 L1941.88 1211.09 L1942.46 1211.09 L1943.05 1211.09 L1943.64 1211.09 L1944.22 1211.09 L1944.81 1211.09 L1945.4 1211.09 L1945.98 1211.09 L1946.57 1211.09 L1947.16 1211.09 L1947.74 1211.09 L1948.33 1211.09 L1948.91 1211.09 L1949.5 1211.09 L1950.09 1211.09 L1950.67 1211.09 L1951.26 1211.09 L1951.85 1211.09 L1952.43 1211.09 L1953.02 1211.09 L1953.61 1211.09 L1954.19 1211.09 L1954.78 1211.09 L1955.37 1211.09 L1955.95 1211.09 L1956.54 1211.09 L1957.12 1211.09 L1957.71 1211.09 L1958.3 1211.09 L1958.88 1211.09 L1959.47 1211.09 L1960.06 1211.09 L1960.64 1211.09 L1961.23 1211.09 L1961.82 1211.09 L1962.4 1211.09 L1962.99 1211.09 L1963.58 1211.09 L1964.16 1211.09 L1964.75 1211.09 L1965.33 1211.09 L1965.92 1211.09 L1966.51 1211.09 L1967.09 1211.09 L1967.68 1211.09 L1968.27 1211.09 L1968.85 1211.09 L1969.44 1211.09 L1970.03 1211.09 L1970.61 1211.09 L1971.2 1211.09 L1971.78 1211.09 L1972.37 1211.09 L1972.96 1211.09 L1973.54 1211.09 L1974.13 1211.09 L1974.72 1211.09 L1975.3 1211.09 L1975.89 1211.09 L1976.48 1211.09 L1977.06 1211.09 L1977.65 1211.09 L1978.24 1211.09 L1978.82 1211.09 L1979.41 1211.09 L1979.99 1211.09 L1980.58 1211.09 L1981.17 1211.09 L1981.75 1211.09 L1982.34 1211.09 L1982.93 1211.09 L1983.51 1211.09 L1984.1 1211.09 L1984.69 1211.09 L1985.27 1211.09 L1985.86 1211.09 L1986.45 1211.09 L1987.03 1211.09 L1987.62 1211.09 L1988.2 1211.09 L1988.79 1211.09 L1989.38 1211.09 L1989.96 1211.09 L1990.55 1211.09 L1991.14 1211.09 L1991.72 1211.09 L1992.31 1211.09 L1992.9 1211.09 L1993.48 1211.09 L1994.07 1211.09 L1994.65 1211.09 L1995.24 1211.09 L1995.83 1211.09 L1996.41 1211.09 L1997 1211.09 L1997.59 1211.09 L1998.17 1211.09 L1998.76 1211.09 L1999.35 1211.09 L1999.93 1211.09 L2000.52 1211.09 L2001.11 1211.09 L2001.69 1211.09 L2002.28 1211.09 L2002.86 1211.09 L2003.45 1211.09 L2004.04 1211.09 L2004.62 1211.09 L2005.21 1211.09 L2005.8 1211.09 L2006.38 1211.09 L2006.97 1211.09 L2007.56 1211.09 L2008.14 1211.09 L2008.73 1211.09 L2009.32 1211.09 L2009.9 1211.09 L2010.49 1211.09 L2011.07 1211.09 L2011.66 1211.09 L2012.25 1211.09 L2012.83 1211.09 L2013.42 1211.09 L2014.01 1211.09 L2014.59 1211.09 L2015.18 1211.09 L2015.77 1211.09 L2016.35 1211.09 L2016.94 1211.09 L2017.53 1211.09 L2018.11 1211.09 L2018.7 1211.09 L2019.28 1211.09 L2019.87 1211.09 L2020.46 1211.09 L2021.04 1211.09 L2021.63 1211.09 L2022.22 1211.09 L2022.8 1211.09 L2023.39 1211.09 L2023.98 1211.09 L2024.56 1211.09 L2025.15 1211.09 L2025.73 1211.09 L2026.32 1211.09 L2026.91 1211.09 L2027.49 1211.09 L2028.08 1211.09 L2028.67 1211.09 L2029.25 1211.09 L2029.84 1211.09 L2030.43 1211.09 L2031.01 1211.09 L2031.6 1211.09 L2032.19 1211.09 L2032.77 1211.09 L2033.36 1211.09 L2033.94 1211.09 L2034.53 1211.09 L2035.12 1211.09 L2035.7 1211.09 L2036.29 1211.09 L2036.88 1211.09 L2037.46 1211.09 L2038.05 1211.09 L2038.64 1211.09 L2039.22 1211.09 L2039.81 1211.09 L2040.4 1211.09 L2040.98 1211.09 L2041.57 1211.09 L2042.15 1211.09 L2042.74 1211.09 L2043.33 1211.09 L2043.91 1211.09 L2044.5 1211.09 L2045.09 1211.09 L2045.67 1211.09 L2046.26 1211.09 L2046.85 1211.09 L2047.43 1211.09 L2048.02 1211.09 L2048.6 1211.09 L2049.19 1211.09 L2049.78 1211.09 L2050.36 1211.09 L2050.95 1211.09 L2051.54 1211.09 L2052.12 1211.09 L2052.71 1211.09 L2053.3 1211.09 L2053.88 1211.09 L2054.47 1211.09 L2055.06 1211.09 L2055.64 1211.09 L2056.23 1211.09 L2056.81 1211.09 L2057.4 1211.09 L2057.99 1211.09 L2058.57 1211.09 L2059.16 1211.09 L2059.75 1211.09 L2060.33 1211.09 L2060.92 1211.09 L2061.51 1211.09 L2062.09 1211.09 L2062.68 1211.09 L2063.27 1211.09 L2063.85 1211.09 L2064.44 1211.09 L2065.02 1211.09 L2065.61 1211.09 L2066.2 1211.09 L2066.78 1211.09 L2067.37 1211.09 L2067.96 1211.09 L2068.54 1211.09 L2069.13 1211.09 L2069.72 1211.09 L2070.3 1211.09 L2070.89 1211.09 L2071.48 1211.09 L2072.06 1211.09 L2072.65 1211.09 L2073.23 1211.09 L2073.82 1211.09 L2074.41 1211.09 L2074.99 1211.09 L2075.58 1211.09 L2076.17 1211.09 L2076.75 1211.09 L2077.34 1211.09 L2077.93 1211.09 L2078.51 1211.09 L2079.1 1211.09 L2079.68 1211.09 L2080.27 1211.09 L2080.86 1211.09 L2081.44 1211.09 L2082.03 1211.09 L2082.62 1211.09 L2083.2 1211.09 L2083.79 1211.09 L2084.38 1211.09 L2084.96 1211.09 L2085.55 1211.09 L2086.14 1211.09 L2086.72 1211.09 L2087.31 1211.09 L2087.89 1211.09 L2088.48 1211.09 L2089.07 1211.09 L2089.65 1211.09 L2090.24 1211.09 L2090.83 1211.09 L2091.41 1211.09 L2092 1211.09 L2092.59 1211.09 L2093.17 1211.09 L2093.76 1211.09 L2094.35 1211.09 L2094.93 1211.09 L2095.52 1211.09 L2096.1 1211.09 L2096.69 1211.09 L2097.28 1211.09 L2097.86 1211.09 L2098.45 1211.09 L2099.04 1211.09 L2099.62 1211.09 L2100.21 1211.09 L2100.8 1211.09 L2101.38 1211.09 L2101.97 1211.09 L2102.55 1211.09 L2103.14 1211.09 L2103.73 1211.09 L2104.31 1211.09 L2104.9 1211.09 L2105.49 1211.09 L2106.07 1211.09 L2106.66 1211.09 L2107.25 1211.09 L2107.83 1211.09 L2108.42 1211.09 L2109.01 1211.09 L2109.59 1211.09 L2110.18 1211.09 L2110.76 1211.09 L2111.35 1211.09 L2111.94 1211.09 L2112.52 1211.09 L2113.11 1211.09 L2113.7 1211.09 L2114.28 1211.09 L2114.87 1211.09 L2115.46 1211.09 L2116.04 1211.09 L2116.63 1211.09 L2117.22 1211.09 L2117.8 1211.09 L2118.39 1211.09 L2118.97 1211.09 L2119.56 1211.09 L2120.15 1211.09 L2120.73 1211.09 L2121.32 1211.09 L2121.91 1211.09 L2122.49 1211.09 L2123.08 1211.09 L2123.67 1211.09 L2124.25 1211.09 L2124.84 1211.09 L2125.42 1211.09 L2126.01 1211.09 L2126.6 1211.09 L2127.18 1211.09 L2127.77 1211.09 L2128.36 1211.09 L2128.94 1211.09 L2129.53 1211.09 L2130.12 1211.09 L2130.7 1211.09 L2131.29 1211.09 L2131.88 1211.09 L2132.46 1211.09 L2133.05 1211.09 L2133.63 1211.09 L2134.22 1211.09 L2134.81 1211.09 L2135.39 1211.09 L2135.98 1211.09 L2136.57 1211.09 L2137.15 1211.09 L2137.74 1211.09 L2138.33 1211.09 L2138.91 1211.09 L2139.5 1211.09 L2140.09 1211.09 L2140.67 1211.09 L2141.26 1211.09 L2141.84 1211.09 L2142.43 1211.09 L2143.02 1211.09 L2143.6 1211.09 L2144.19 1211.09 L2144.78 1211.09 L2145.36 1211.09 L2145.95 1211.09 L2146.54 1211.09 L2147.12 1211.09 L2147.71 1211.09 L2148.3 1211.09 L2148.88 1211.09 L2149.47 1211.09 L2150.05 1211.09 L2150.64 1211.09 L2151.23 1211.09 L2151.81 1211.09 L2152.4 1211.09 L2152.99 1211.09 L2153.57 1211.09 L2154.16 1211.09 L2154.75 1211.09 L2155.33 1211.09 L2155.92 1211.09 L2156.5 1211.09 L2157.09 1211.09 L2157.68 1211.09 L2158.26 1211.09 L2158.26 1210.93 L2157.68 1210.93 L2157.09 1210.93 L2156.5 1210.93 L2155.92 1210.93 L2155.33 1210.93 L2154.75 1210.93 L2154.16 1210.93 L2153.57 1210.93 L2152.99 1210.93 L2152.4 1210.93 L2151.81 1210.93 L2151.23 1210.93 L2150.64 1210.93 L2150.05 1210.93 L2149.47 1210.93 L2148.88 1210.93 L2148.3 1210.93 L2147.71 1210.93 L2147.12 1210.93 L2146.54 1210.93 L2145.95 1210.93 L2145.36 1210.93 L2144.78 1210.93 L2144.19 1210.93 L2143.6 1210.93 L2143.02 1210.93 L2142.43 1210.93 L2141.84 1210.93 L2141.26 1210.93 L2140.67 1210.93 L2140.09 1210.93 L2139.5 1210.93 L2138.91 1210.93 L2138.33 1210.93 L2137.74 1210.93 L2137.15 1210.93 L2136.57 1210.93 L2135.98 1210.93 L2135.39 1210.93 L2134.81 1210.93 L2134.22 1210.93 L2133.63 1210.93 L2133.05 1210.93 L2132.46 1210.93 L2131.88 1210.93 L2131.29 1210.93 L2130.7 1210.93 L2130.12 1210.93 L2129.53 1210.93 L2128.94 1210.93 L2128.36 1210.93 L2127.77 1210.93 L2127.18 1210.93 L2126.6 1210.93 L2126.01 1210.93 L2125.42 1210.93 L2124.84 1210.93 L2124.25 1210.93 L2123.67 1210.93 L2123.08 1210.93 L2122.49 1210.93 L2121.91 1210.93 L2121.32 1210.93 L2120.73 1210.93 L2120.15 1210.93 L2119.56 1210.93 L2118.97 1210.93 L2118.39 1210.93 L2117.8 1210.93 L2117.22 1210.93 L2116.63 1210.93 L2116.04 1210.93 L2115.46 1210.93 L2114.87 1210.93 L2114.28 1210.93 L2113.7 1210.93 L2113.11 1210.93 L2112.52 1210.93 L2111.94 1210.93 L2111.35 1210.93 L2110.76 1210.93 L2110.18 1210.93 L2109.59 1210.93 L2109.01 1210.93 L2108.42 1210.93 L2107.83 1210.93 L2107.25 1210.93 L2106.66 1210.93 L2106.07 1210.93 L2105.49 1210.93 L2104.9 1210.93 L2104.31 1210.93 L2103.73 1210.93 L2103.14 1210.93 L2102.55 1210.93 L2101.97 1210.93 L2101.38 1210.93 L2100.8 1210.93 L2100.21 1210.93 L2099.62 1210.93 L2099.04 1210.93 L2098.45 1210.93 L2097.86 1210.93 L2097.28 1210.93 L2096.69 1210.93 L2096.1 1210.93 L2095.52 1210.93 L2094.93 1210.93 L2094.35 1210.93 L2093.76 1210.93 L2093.17 1210.93 L2092.59 1210.93 L2092 1210.93 L2091.41 1210.93 L2090.83 1210.93 L2090.24 1210.93 L2089.65 1210.93 L2089.07 1210.93 L2088.48 1210.93 L2087.89 1210.93 L2087.31 1210.93 L2086.72 1210.93 L2086.14 1210.93 L2085.55 1210.93 L2084.96 1210.93 L2084.38 1210.93 L2083.79 1210.93 L2083.2 1210.93 L2082.62 1210.93 L2082.03 1210.93 L2081.44 1210.93 L2080.86 1210.93 L2080.27 1210.93 L2079.68 1210.93 L2079.1 1210.93 L2078.51 1210.93 L2077.93 1210.93 L2077.34 1210.93 L2076.75 1210.93 L2076.17 1210.93 L2075.58 1210.93 L2074.99 1210.93 L2074.41 1210.93 L2073.82 1210.93 L2073.23 1210.93 L2072.65 1210.93 L2072.06 1210.93 L2071.48 1210.93 L2070.89 1210.93 L2070.3 1210.93 L2069.72 1210.93 L2069.13 1210.93 L2068.54 1210.93 L2067.96 1210.93 L2067.37 1210.93 L2066.78 1210.93 L2066.2 1210.93 L2065.61 1210.93 L2065.02 1210.93 L2064.44 1210.93 L2063.85 1210.93 L2063.27 1210.93 L2062.68 1210.93 L2062.09 1210.93 L2061.51 1210.93 L2060.92 1210.93 L2060.33 1210.93 L2059.75 1210.93 L2059.16 1210.93 L2058.57 1210.93 L2057.99 1210.93 L2057.4 1210.93 L2056.81 1210.93 L2056.23 1210.93 L2055.64 1210.93 L2055.06 1210.93 L2054.47 1210.93 L2053.88 1210.93 L2053.3 1210.93 L2052.71 1210.93 L2052.12 1210.93 L2051.54 1210.93 L2050.95 1210.93 L2050.36 1210.93 L2049.78 1210.93 L2049.19 1210.93 L2048.6 1210.93 L2048.02 1210.93 L2047.43 1210.93 L2046.85 1210.93 L2046.26 1210.93 L2045.67 1210.93 L2045.09 1210.93 L2044.5 1210.93 L2043.91 1210.93 L2043.33 1210.93 L2042.74 1210.93 L2042.15 1210.93 L2041.57 1210.93 L2040.98 1210.93 L2040.4 1210.93 L2039.81 1210.93 L2039.22 1210.93 L2038.64 1210.93 L2038.05 1210.93 L2037.46 1210.93 L2036.88 1210.93 L2036.29 1210.93 L2035.7 1210.93 L2035.12 1210.93 L2034.53 1210.93 L2033.94 1210.93 L2033.36 1210.93 L2032.77 1210.93 L2032.19 1210.93 L2031.6 1210.93 L2031.01 1210.93 L2030.43 1210.93 L2029.84 1210.93 L2029.25 1210.93 L2028.67 1210.93 L2028.08 1210.93 L2027.49 1210.93 L2026.91 1210.93 L2026.32 1210.93 L2025.73 1210.93 L2025.15 1210.93 L2024.56 1210.93 L2023.98 1210.93 L2023.39 1210.93 L2022.8 1210.93 L2022.22 1210.93 L2021.63 1210.93 L2021.04 1210.93 L2020.46 1210.93 L2019.87 1210.93 L2019.28 1210.93 L2018.7 1210.93 L2018.11 1210.93 L2017.53 1210.93 L2016.94 1210.93 L2016.35 1210.93 L2015.77 1210.93 L2015.18 1210.93 L2014.59 1210.93 L2014.01 1210.93 L2013.42 1210.93 L2012.83 1210.93 L2012.25 1210.93 L2011.66 1210.93 L2011.07 1210.93 L2010.49 1210.93 L2009.9 1210.93 L2009.32 1210.93 L2008.73 1210.93 L2008.14 1210.93 L2007.56 1210.93 L2006.97 1210.93 L2006.38 1210.93 L2005.8 1210.93 L2005.21 1210.93 L2004.62 1210.93 L2004.04 1210.93 L2003.45 1210.93 L2002.86 1210.93 L2002.28 1210.93 L2001.69 1210.93 L2001.11 1210.93 L2000.52 1210.93 L1999.93 1210.93 L1999.35 1210.93 L1998.76 1210.93 L1998.17 1210.93 L1997.59 1210.93 L1997 1210.93 L1996.41 1210.93 L1995.83 1210.93 L1995.24 1210.93 L1994.65 1210.93 L1994.07 1210.93 L1993.48 1210.93 L1992.9 1210.93 L1992.31 1210.93 L1991.72 1210.93 L1991.14 1210.93 L1990.55 1210.93 L1989.96 1210.93 L1989.38 1210.93 L1988.79 1210.93 L1988.2 1210.93 L1987.62 1210.93 L1987.03 1210.93 L1986.45 1210.93 L1985.86 1210.93 L1985.27 1210.93 L1984.69 1210.93 L1984.1 1210.93 L1983.51 1210.93 L1982.93 1210.93 L1982.34 1210.93 L1981.75 1210.93 L1981.17 1210.93 L1980.58 1210.93 L1979.99 1210.93 L1979.41 1210.93 L1978.82 1210.93 L1978.24 1210.93 L1977.65 1210.93 L1977.06 1210.93 L1976.48 1210.93 L1975.89 1210.93 L1975.3 1210.93 L1974.72 1210.93 L1974.13 1210.93 L1973.54 1210.93 L1972.96 1210.93 L1972.37 1210.93 L1971.78 1210.93 L1971.2 1210.93 L1970.61 1210.93 L1970.03 1210.93 L1969.44 1210.93 L1968.85 1210.93 L1968.27 1210.93 L1967.68 1210.93 L1967.09 1210.93 L1966.51 1210.93 L1965.92 1210.93 L1965.33 1210.93 L1964.75 1210.93 L1964.16 1210.93 L1963.58 1210.93 L1962.99 1210.93 L1962.4 1210.93 L1961.82 1210.93 L1961.23 1210.93 L1960.64 1210.93 L1960.06 1210.93 L1959.47 1210.93 L1958.88 1210.93 L1958.3 1210.93 L1957.71 1210.93 L1957.12 1210.93 L1956.54 1210.93 L1955.95 1210.93 L1955.37 1210.93 L1954.78 1210.93 L1954.19 1210.93 L1953.61 1210.93 L1953.02 1210.93 L1952.43 1210.93 L1951.85 1210.93 L1951.26 1210.93 L1950.67 1210.93 L1950.09 1210.93 L1949.5 1210.93 L1948.91 1210.93 L1948.33 1210.93 L1947.74 1210.93 L1947.16 1210.93 L1946.57 1210.93 L1945.98 1210.93 L1945.4 1210.93 L1944.81 1210.93 L1944.22 1210.93 L1943.64 1210.93 L1943.05 1210.93 L1942.46 1210.93 L1941.88 1210.93 L1941.29 1210.93 L1940.71 1210.93 L1940.12 1210.93 L1939.53 1210.93 L1938.95 1210.93 L1938.36 1210.93 L1937.77 1210.93 L1937.19 1210.93 L1936.6 1210.93 L1936.01 1210.93 L1935.43 1210.93 L1934.84 1210.93 L1934.25 1210.93 L1933.67 1210.93 L1933.08 1210.93 L1932.5 1210.93 L1931.91 1210.93 L1931.32 1210.93 L1930.74 1210.93 L1930.15 1210.93 L1929.56 1210.93 L1928.98 1210.93 L1928.39 1210.93 L1927.8 1210.93 L1927.22 1210.93 L1926.63 1210.93 L1926.04 1210.93 L1925.46 1210.93 L1924.87 1210.93 L1924.29 1210.93 L1923.7 1210.93 L1923.11 1210.93 L1922.53 1210.93 L1921.94 1210.93 L1921.35 1210.93 L1920.77 1210.93 L1920.18 1210.93 L1919.59 1210.93 L1919.01 1210.93 L1918.42 1210.93 L1917.83 1210.93 L1917.25 1210.93 L1916.66 1210.93 L1916.08 1210.93 L1915.49 1210.93 L1914.9 1210.93 L1914.32 1210.93 L1913.73 1210.93 L1913.14 1210.93 L1912.56 1210.93 L1911.97 1210.93 L1911.38 1210.93 L1910.8 1210.93 L1910.21 1210.93 L1909.63 1210.93 L1909.04 1210.93 L1908.45 1210.93 L1907.87 1210.93 L1907.28 1210.93 L1906.69 1210.93 L1906.11 1210.93 L1905.52 1210.93 L1904.93 1210.93 L1904.35 1210.93 L1903.76 1210.93 L1903.17 1210.93 L1902.59 1210.93 L1902 1210.93 L1901.42 1210.93 L1900.83 1210.93 L1900.24 1210.93 L1899.66 1210.93 L1899.07 1210.93 L1898.48 1210.93 L1897.9 1210.93 L1897.31 1210.93 L1896.72 1210.93 L1896.14 1210.93 L1895.55 1210.93 L1894.96 1210.93 L1894.38 1210.93 L1893.79 1210.93 L1893.21 1210.93 L1892.62 1210.93 L1892.03 1210.93 L1891.45 1210.93 L1890.86 1210.93 L1890.27 1210.93 L1889.69 1210.93 L1889.1 1210.93 L1888.51 1210.93 L1887.93 1210.93 L1887.34 1210.93 L1886.76 1210.93 L1886.17 1210.93 L1885.58 1210.93 L1885 1210.93 L1884.41 1210.93 L1883.82 1210.93 L1883.24 1210.93 L1882.65 1210.93 L1882.06 1210.93 L1881.48 1210.93 L1880.89 1210.93 L1880.3 1210.93 L1879.72 1210.93 L1879.13 1210.93 L1878.55 1210.93 L1877.96 1210.93 L1877.37 1210.93 L1876.79 1210.93 L1876.2 1210.93 L1875.61 1210.93 L1875.03 1210.93 L1874.44 1210.93 L1873.85 1210.93 L1873.27 1210.93 L1872.68 1210.93 L1872.09 1210.93 L1871.51 1210.93 L1870.92 1210.93 L1870.34 1210.93 L1869.75 1210.93 L1869.16 1210.93 L1868.58 1210.93 L1867.99 1210.93 L1867.4 1210.93 L1866.82 1210.93 L1866.23 1210.93 L1865.64 1210.93 L1865.06 1210.93 L1864.47 1210.93 L1863.88 1210.93 L1863.3 1210.93 L1862.71 1210.93 L1862.13 1210.93 L1861.54 1210.93 L1860.95 1210.93 L1860.37 1210.93 L1859.78 1210.93 L1859.19 1210.93 L1858.61 1210.93 L1858.02 1210.93 L1857.43 1210.93 L1856.85 1210.93 L1856.26 1210.93 L1855.68 1210.93 L1855.09 1210.93 L1854.5 1210.93 L1853.92 1210.93 L1853.33 1210.93 L1852.74 1210.93 L1852.16 1210.93 L1851.57 1210.93 L1850.98 1210.93 L1850.4 1210.93 L1849.81 1210.93 L1849.22 1210.93 L1848.64 1210.93 L1848.05 1210.93 L1847.47 1210.93 L1846.88 1210.93 L1846.29 1210.93 L1845.71 1210.93 L1845.12 1210.93 L1844.53 1210.93 L1843.95 1210.93 L1843.36 1210.93 L1842.77 1210.93 L1842.19 1210.93 L1841.6 1210.93 L1841.01 1210.93 L1840.43 1210.93 L1839.84 1210.93 L1839.26 1210.93 L1838.67 1210.93 L1838.08 1210.93 L1837.5 1210.93 L1836.91 1210.93 L1836.32 1210.93 L1835.74 1210.93 L1835.15 1210.93 L1834.56 1210.93 L1833.98 1210.93 L1833.39 1210.93 L1832.81 1210.93 L1832.22 1210.93 L1831.63 1210.93 L1831.05 1210.93 L1830.46 1210.93 L1829.87 1210.93 L1829.29 1210.93 L1828.7 1210.93 L1828.11 1210.93 L1827.53 1210.93 L1826.94 1210.93 L1826.35 1210.93 L1825.77 1210.93 L1825.18 1210.93 L1824.6 1210.93 L1824.01 1210.93 L1823.42 1210.93 L1822.84 1210.93 L1822.25 1210.93 L1821.66 1210.93 L1821.08 1210.93 L1820.49 1210.93 L1819.9 1210.93 L1819.32 1210.93 L1818.73 1210.93 L1818.14 1210.93 L1817.56 1210.93 L1816.97 1210.93 L1816.39 1210.93 L1815.8 1210.93 L1815.21 1210.93 L1814.63 1210.93 L1814.04 1210.93 L1813.45 1210.93 L1812.87 1210.93 L1812.28 1210.93 L1811.69 1210.93 L1811.11 1210.93 L1810.52 1210.93 L1809.94 1210.93 L1809.35 1210.93 L1808.76 1210.93 L1808.18 1210.93 L1807.59 1210.93 L1807 1210.93 L1806.42 1210.93 L1805.83 1210.93 L1805.24 1210.93 L1804.66 1210.93 L1804.07 1210.93 L1803.48 1210.93 L1802.9 1210.93 L1802.31 1210.93 L1801.73 1210.93 L1801.14 1210.93 L1800.55 1210.93 L1799.97 1210.93 L1799.38 1210.93 L1798.79 1210.93 L1798.21 1210.93 L1797.62 1210.93 L1797.03 1210.93 L1796.45 1210.93 L1795.86 1210.93 L1795.27 1210.93 L1794.69 1210.93 L1794.1 1210.93 L1793.52 1210.93 L1792.93 1210.93 L1792.34 1210.93 L1791.76 1210.93 L1791.17 1210.93 L1790.58 1210.93 L1790 1210.93 L1789.41 1210.93 L1788.82 1210.93 L1788.24 1210.93 L1787.65 1210.93 L1787.06 1210.93 L1786.48 1210.93 L1785.89 1210.93 L1785.31 1210.93 L1784.72 1210.93 L1784.13 1210.93 L1783.55 1210.93 L1782.96 1210.93 L1782.37 1210.93 L1781.79 1210.93 L1781.2 1210.93 L1780.61 1210.93 L1780.03 1210.93 L1779.44 1210.93 L1778.86 1210.93 L1778.27 1210.93 L1777.68 1210.93 L1777.1 1210.93 L1776.51 1210.93 L1775.92 1210.93 L1775.34 1210.93 L1774.75 1210.93 L1774.16 1210.93 L1773.58 1210.93 L1772.99 1210.93 L1772.4 1210.93 L1771.82 1210.93 L1771.23 1210.93 L1770.65 1210.93 L1770.06 1210.93 L1769.47 1210.93 L1768.89 1210.93 L1768.3 1210.93 L1767.71 1210.93 L1767.13 1210.93 L1766.54 1210.93 L1765.95 1210.93 L1765.37 1210.93 L1764.78 1210.93 L1764.19 1210.93 L1763.61 1210.93 L1763.02 1210.93 L1762.44 1210.93 L1761.85 1210.93 L1761.26 1210.93 L1760.68 1210.93 L1760.09 1210.93 L1759.5 1210.93 L1758.92 1210.93 L1758.33 1210.93 L1757.74 1210.93 L1757.16 1210.93 L1756.57 1210.93 L1755.99 1210.93 L1755.4 1210.93 L1754.81 1210.93 L1754.23 1210.93 L1753.64 1210.93 L1753.05 1210.93 L1752.47 1210.93 L1751.88 1210.93 L1751.29 1210.93 L1750.71 1210.93 L1750.12 1210.93 L1749.53 1210.93 L1748.95 1210.93 L1748.36 1210.93 L1747.78 1210.93 L1747.19 1210.93 L1746.6 1210.93 L1746.02 1210.93 L1745.43 1210.93 L1744.84 1210.93 L1744.26 1210.93 L1743.67 1210.93 L1743.08 1210.93 L1742.5 1210.93 L1741.91 1210.93 L1741.32 1210.93 L1740.74 1210.93 L1740.15 1210.93 L1739.57 1210.93 L1738.98 1210.93 L1738.39 1210.93 L1737.81 1210.93 L1737.22 1210.93 L1736.63 1210.93 L1736.05 1210.93 L1735.46 1210.93 L1734.87 1210.93 L1734.29 1210.93 L1733.7 1210.93 L1733.11 1210.93 L1732.53 1210.93 L1731.94 1210.93 L1731.36 1210.93 L1730.77 1210.93 L1730.18 1210.93 L1729.6 1210.93 L1729.01 1210.93 L1728.42 1210.93 L1727.84 1210.93 L1727.25 1210.93 L1726.66 1210.93 L1726.08 1210.93 L1725.49 1210.93 L1724.91 1210.93 L1724.32 1210.93 L1723.73 1210.93 L1723.15 1210.93 L1722.56 1210.93 L1721.97 1210.93 L1721.39 1210.93 L1720.8 1210.93 L1720.21 1210.93 L1719.63 1210.93 L1719.04 1210.93 L1718.45 1210.93 L1717.87 1210.93 L1717.28 1210.93 L1716.7 1210.93 L1716.11 1210.93 L1715.52 1210.93 L1714.94 1210.93 L1714.35 1210.93 L1713.76 1210.93 L1713.18 1210.93 L1712.59 1210.93 L1712 1210.93 L1711.42 1210.93 L1710.83 1210.93 L1710.24 1210.93 L1709.66 1210.93 L1709.07 1210.93 L1708.49 1210.93 L1707.9 1210.93 L1707.31 1210.93 L1706.73 1210.93 L1706.14 1210.93 L1705.55 1210.93 L1704.97 1210.93 L1704.38 1210.93 L1703.79 1210.93 L1703.21 1210.93 L1702.62 1210.93 L1702.04 1210.93 L1701.45 1210.93 L1700.86 1210.93 L1700.28 1210.93 L1699.69 1210.93 L1699.1 1210.93 L1698.52 1210.93 L1697.93 1210.93 L1697.34 1210.93 L1696.76 1210.93 L1696.17 1210.93 L1695.58 1210.93 L1695 1210.93 L1694.41 1210.93 L1693.83 1210.93 L1693.24 1210.93 L1692.65 1210.93 L1692.07 1210.93 L1691.48 1210.93 L1690.89 1210.93 L1690.31 1210.93 L1689.72 1210.93 L1689.13 1210.93 L1688.55 1210.93 L1687.96 1210.93 L1687.37 1210.93 L1686.79 1210.93 L1686.2 1210.93 L1685.62 1210.93 L1685.03 1210.93 L1684.44 1210.93 L1683.86 1210.93 L1683.27 1210.93 L1682.68 1210.93 L1682.1 1210.93 L1681.51 1210.93 L1680.92 1210.93 L1680.34 1210.93 L1679.75 1210.93 L1679.17 1210.93 L1678.58 1210.93 L1677.99 1210.93 L1677.41 1210.93 L1676.82 1210.93 L1676.23 1210.93 L1675.65 1210.93 L1675.06 1210.93 L1674.47 1210.93 L1673.89 1210.93 L1673.3 1210.93 L1672.71 1210.93 L1672.13 1210.93 L1671.54 1210.93 L1670.96 1210.93 L1670.37 1210.93 L1669.78 1210.93 L1669.2 1210.93 L1668.61 1210.93 L1668.02 1210.93 L1667.44 1210.93 L1666.85 1210.93 L1666.26 1210.93 L1665.68 1210.93 L1665.09 1210.93 L1664.5 1210.93 L1663.92 1210.93 L1663.33 1210.93 L1662.75 1210.93 L1662.16 1210.93 L1661.57 1210.93 L1660.99 1210.93 L1660.4 1210.93 L1659.81 1210.93 L1659.23 1210.93 L1658.64 1210.93 L1658.05 1210.93 L1657.47 1210.93 L1656.88 1210.93 L1656.29 1210.93 L1655.71 1210.93 L1655.12 1210.93 L1654.54 1210.93 L1653.95 1210.93 L1653.36 1210.93 L1652.78 1210.93 L1652.19 1210.93 L1651.6 1210.93 L1651.02 1210.93 L1650.43 1210.93 L1649.84 1210.93 L1649.26 1210.93 L1648.67 1210.93 L1648.09 1210.93 L1647.5 1210.93 L1646.91 1210.93 L1646.33 1210.93 L1645.74 1210.93 L1645.15 1210.93 L1644.57 1210.93 L1643.98 1210.93 L1643.39 1210.93 L1642.81 1210.93 L1642.22 1210.93 L1641.63 1210.93 L1641.05 1210.93 L1640.46 1210.93 L1639.88 1210.93 L1639.29 1210.93 L1638.7 1210.93 L1638.12 1210.93 L1637.53 1210.93 L1636.94 1210.93 L1636.36 1210.93 L1635.77 1210.93 L1635.18 1210.93 L1634.6 1210.93 L1634.01 1210.93 L1633.42 1210.93 L1632.84 1210.93 L1632.25 1210.93 L1631.67 1210.93 L1631.08 1210.93 L1630.49 1210.93 L1629.91 1210.93 L1629.32 1210.93 L1628.73 1210.93 L1628.15 1210.93 L1627.56 1210.93 L1626.97 1210.93 L1626.39 1210.93 L1625.8 1210.93 L1625.22 1210.93 L1624.63 1210.93 L1624.04 1210.93 L1623.46 1210.93 L1622.87 1210.93 L1622.28 1210.93 L1621.7 1210.93 L1621.11 1210.93 L1620.52 1210.93 L1619.94 1210.93 L1619.35 1210.93 L1618.76 1210.93 L1618.18 1210.93 L1617.59 1210.93 L1617.01 1210.93 L1616.42 1210.93 L1615.83 1210.93 L1615.25 1210.93 L1614.66 1210.93 L1614.07 1210.93 L1613.49 1210.93 L1612.9 1210.93 L1612.31 1210.93 L1611.73 1210.93 L1611.14 1210.93 L1610.55 1210.93 L1609.97 1210.93 L1609.38 1210.93 L1608.8 1210.93 L1608.21 1210.93 L1607.62 1210.93 L1607.04 1210.93 L1606.45 1210.93 L1605.86 1210.93 L1605.28 1210.93 L1604.69 1210.93 L1604.1 1210.93 L1603.52 1210.93 L1602.93 1210.93 L1602.34 1210.93 L1601.76 1210.93 L1601.17 1210.93 L1600.59 1210.93 L1600 1210.93 L1599.41 1210.93 L1598.83 1210.93 L1598.24 1210.93 L1597.65 1210.93 L1597.07 1210.93 L1596.48 1210.93 L1595.89 1210.93 L1595.31 1210.93 L1594.72 1210.93 L1594.14 1210.93 L1593.55 1210.93 L1592.96 1210.93 L1592.38 1210.93 L1591.79 1210.93 L1591.2 1210.93 L1590.62 1210.93 L1590.03 1210.93 L1589.44 1210.93 L1588.86 1210.93 L1588.27 1210.93 L1587.68 1210.93 L1587.1 1210.93 L1586.51 1210.93 L1585.93 1210.93 L1585.34 1210.93 L1584.75 1210.93 L1584.17 1210.93 L1583.58 1210.93 L1582.99 1210.93 L1582.41 1210.93 L1581.82 1210.93 L1581.23 1210.93 L1580.65 1210.93 L1580.06 1210.93 L1579.47 1210.93 L1578.89 1210.93 L1578.3 1210.93 L1577.72 1210.93 L1577.13 1210.93 L1576.54 1210.93 L1575.96 1210.93 L1575.37 1210.93 L1574.78 1210.93 L1574.2 1210.93 L1573.61 1210.93 L1573.02 1210.93 L1572.44 1210.93 L1571.85 1210.93 L1571.27 1210.93 L1570.68 1210.93 L1570.09 1210.93 L1569.51 1210.93 L1568.92 1210.93 L1568.33 1210.93 L1567.75 1210.93 L1567.16 1210.93 L1566.57 1210.93 L1565.99 1210.93 L1565.4 1210.93 L1564.81 1210.93 L1564.23 1210.93 L1563.64 1210.93 L1563.06 1210.93 L1562.47 1210.93 L1561.88 1210.93 L1561.3 1210.93 L1560.71 1210.93 L1560.12 1210.93 L1559.54 1210.93 L1558.95 1210.93 L1558.36 1210.93 L1557.78 1210.93 L1557.19 1210.93 L1556.6 1210.93 L1556.02 1210.93 L1555.43 1210.93 L1554.85 1210.93 L1554.26 1210.93 L1553.67 1210.93 L1553.09 1210.93 L1552.5 1210.93 L1551.91 1210.93 L1551.33 1210.93 L1550.74 1210.93 L1550.15 1210.93 L1549.57 1210.93 L1548.98 1210.93 L1548.4 1210.93 L1547.81 1210.93 L1547.22 1210.93 L1546.64 1210.93 L1546.05 1210.93 L1545.46 1210.93 L1544.88 1210.93 L1544.29 1210.93 L1543.7 1210.93 L1543.12 1210.93 L1542.53 1210.93 L1541.94 1210.93 L1541.36 1210.93 L1540.77 1210.93 L1540.19 1210.93 L1539.6 1210.93 L1539.01 1210.93 L1538.43 1210.93 L1537.84 1210.93 L1537.25 1210.93 L1536.67 1210.93 L1536.08 1210.93 L1535.49 1210.93 L1534.91 1210.93 L1534.32 1210.93 L1533.73 1210.93 L1533.15 1210.93 L1532.56 1210.93 L1531.98 1210.93 L1531.39 1210.93 L1530.8 1210.93 L1530.22 1210.93 L1529.63 1210.93 L1529.04 1210.93 L1528.46 1210.93 L1527.87 1210.93 L1527.28 1210.93 L1526.7 1210.93 L1526.11 1210.93 L1525.52 1210.93 L1524.94 1210.93 L1524.35 1210.93 L1523.77 1210.93 L1523.18 1210.93 L1522.59 1210.93 L1522.01 1210.93 L1521.42 1210.93 L1520.83 1210.93 L1520.25 1210.93 L1519.66 1210.93 L1519.07 1210.93 L1518.49 1210.93 L1517.9 1210.93 L1517.32 1210.93 L1516.73 1210.93 L1516.14 1210.93 L1515.56 1210.93 L1514.97 1210.93 L1514.38 1210.93 L1513.8 1210.93 L1513.21 1210.93 L1512.62 1210.93 L1512.04 1210.93 L1511.45 1210.93 L1510.86 1210.93 L1510.28 1210.93 L1509.69 1210.93 L1509.11 1210.93 L1508.52 1210.93 L1507.93 1210.93 L1507.35 1210.93 L1506.76 1210.93 L1506.17 1210.93 L1505.59 1210.93 L1505 1210.93 L1504.41 1210.93 L1503.83 1210.93 L1503.24 1210.93 L1502.65 1210.93 L1502.07 1210.93 L1501.48 1210.93 L1500.9 1210.93 L1500.31 1210.93 L1499.72 1210.93 L1499.14 1210.93 L1498.55 1210.93 L1497.96 1210.93 L1497.38 1210.93 L1496.79 1210.93 L1496.2 1210.93 L1495.62 1210.93 L1495.03 1210.93 L1494.45 1210.93 L1493.86 1210.93 L1493.27 1210.93 L1492.69 1210.93 L1492.1 1210.93 L1491.51 1210.93 L1490.93 1210.93 L1490.34 1210.93 L1489.75 1210.93 L1489.17 1210.93 L1488.58 1210.93 L1487.99 1210.93 L1487.41 1210.93 L1486.82 1210.93 L1486.24 1210.93 L1485.65 1210.93 L1485.06 1210.93 L1484.48 1210.93 L1483.89 1210.93 L1483.3 1210.93 L1482.72 1210.93 L1482.13 1210.93 L1481.54 1210.93 L1480.96 1210.93 L1480.37 1210.93 L1479.78 1210.93 L1479.2 1210.93 L1478.61 1210.93 L1478.03 1210.93 L1477.44 1210.93 L1476.85 1210.93 L1476.27 1210.93 L1475.68 1210.93 L1475.09 1210.93 L1474.51 1210.93 L1473.92 1210.93 L1473.33 1210.93 L1472.75 1210.93 L1472.16 1210.93 L1471.57 1210.93 L1470.99 1210.93 L1470.4 1210.93 L1469.82 1210.93 L1469.23 1210.93 L1468.64 1210.93 L1468.06 1210.93 L1467.47 1210.93 L1466.88 1210.93 L1466.3 1210.93 L1465.71 1210.93 L1465.12 1210.93 L1464.54 1210.93 L1463.95 1210.93 L1463.37 1210.93 L1462.78 1210.93 L1462.19 1210.93 L1461.61 1210.93 L1461.02 1210.93 L1460.43 1210.93 L1459.85 1210.93 L1459.26 1210.93 L1458.67 1210.93 L1458.09 1210.93 L1457.5 1210.93 L1456.91 1210.93 L1456.33 1210.93 L1455.74 1210.93 L1455.16 1210.93 L1454.57 1210.93 L1453.98 1210.93 L1453.4 1210.93 L1452.81 1210.93 L1452.22 1210.93 L1451.64 1210.93 L1451.05 1210.93 L1450.46 1210.93 L1449.88 1210.93 L1449.29 1210.93 L1448.7 1210.93 L1448.12 1210.93 L1447.53 1210.93 L1446.95 1210.93 L1446.36 1210.93 L1445.77 1210.93 L1445.19 1210.93 L1444.6 1210.93 L1444.01 1210.93 L1443.43 1210.93 L1442.84 1210.93 L1442.25 1210.93 L1441.67 1210.93 L1441.08 1210.93 L1440.5 1210.93 L1439.91 1210.93 L1439.32 1210.93 L1438.74 1210.93 L1438.15 1210.93 L1437.56 1210.93 L1436.98 1210.93 L1436.39 1210.93 L1435.8 1210.93 L1435.22 1210.93 L1434.63 1210.93 L1434.04 1210.93 L1433.46 1210.93 L1432.87 1210.93 L1432.29 1210.93 L1431.7 1210.93 L1431.11 1210.93 L1430.53 1210.93 L1429.94 1210.93 L1429.35 1210.93 L1428.77 1210.93 L1428.18 1210.93 L1427.59 1210.93 L1427.01 1210.93 L1426.42 1210.93 L1425.83 1210.93 L1425.25 1210.93 L1424.66 1210.93 L1424.08 1210.93 L1423.49 1210.93 L1422.9 1210.93 L1422.32 1210.93 L1421.73 1210.93 L1421.14 1210.93 L1420.56 1210.93 L1419.97 1210.93 L1419.38 1210.93 L1418.8 1210.93 L1418.21 1210.93 L1417.63 1210.93 L1417.04 1210.93 L1416.45 1210.93 L1415.87 1210.93 L1415.28 1210.93 L1414.69 1210.93 L1414.11 1210.93 L1413.52 1210.93 L1412.93 1210.93 L1412.35 1210.93 L1411.76 1210.93 L1411.17 1210.93 L1410.59 1210.93 L1410 1210.93 L1409.42 1210.93 L1408.83 1210.93 L1408.24 1210.93 L1407.66 1210.93 L1407.07 1210.93 L1406.48 1210.93 L1405.9 1210.93 L1405.31 1210.93 L1404.72 1210.93 L1404.14 1210.93 L1403.55 1210.93 L1402.96 1210.93 L1402.38 1210.93 L1401.79 1210.93 L1401.21 1210.93 L1400.62 1210.93 L1400.03 1210.93 L1399.45 1210.93 L1398.86 1210.93 L1398.27 1210.93 L1397.69 1210.93 L1397.1 1210.93 L1396.51 1210.93 L1395.93 1210.93 L1395.34 1210.93 L1394.75 1210.93 L1394.17 1210.93 L1393.58 1210.93 L1393 1210.93 L1392.41 1210.93 L1391.82 1210.93 L1391.24 1210.93 L1390.65 1210.93 L1390.06 1210.93 L1389.48 1210.93 L1388.89 1210.93 L1388.3 1210.93 L1387.72 1210.93 L1387.13 1210.93 L1386.55 1210.93 L1385.96 1210.93 L1385.37 1210.93 L1384.79 1210.93 L1384.2 1210.93 L1383.61 1210.93 L1383.03 1210.93 L1382.44 1210.93 L1381.85 1210.93 L1381.27 1210.93 L1380.68 1210.93 L1380.09 1210.93 L1379.51 1210.93 L1378.92 1210.93 L1378.34 1210.93 L1377.75 1210.93 L1377.16 1210.93 L1376.58 1210.93 L1375.99 1210.93 L1375.4 1210.93 L1374.82 1210.93 L1374.23 1210.93 L1373.64 1210.93 L1373.06 1210.93 L1372.47 1210.93 L1371.88 1210.93 L1371.3 1210.93 L1370.71 1210.93 L1370.13 1210.93 L1369.54 1210.93 L1368.95 1210.93 L1368.37 1210.93 L1367.78 1210.93 L1367.19 1210.93 L1366.61 1210.93 L1366.02 1210.93 L1365.43 1210.93 L1364.85 1210.93 L1364.26 1210.93 L1363.68 1210.93 L1363.09 1210.93 L1362.5 1210.93 L1361.92 1210.93 L1361.33 1210.93 L1360.74 1210.93 L1360.16 1210.93 L1359.57 1210.93 L1358.98 1210.93 L1358.4 1210.93 L1357.81 1210.93 L1357.22 1210.93 L1356.64 1210.93 L1356.05 1210.93 L1355.47 1210.93 L1354.88 1210.93 L1354.29 1210.93 L1353.71 1210.93 L1353.12 1210.93 L1352.53 1210.93 L1351.95 1210.93 L1351.36 1210.93 L1350.77 1210.93 L1350.19 1210.93 L1349.6 1210.93 L1349.01 1210.93 L1348.43 1210.93 L1347.84 1210.93 L1347.26 1210.93 L1346.67 1210.93 L1346.08 1210.93 L1345.5 1210.93 L1344.91 1210.93 L1344.32 1210.93 L1343.74 1210.93 L1343.15 1210.93 L1342.56 1210.93 L1341.98 1210.93 L1341.39 1210.93 L1340.8 1210.93 L1340.22 1210.93 L1339.63 1210.93 L1339.05 1210.93 L1338.46 1210.93 L1337.87 1210.93 L1337.29 1210.93 L1336.7 1210.93 L1336.11 1210.93 L1335.53 1210.93 L1334.94 1210.93 L1334.35 1210.93 L1333.77 1210.93 L1333.18 1210.93 L1332.6 1210.93 L1332.01 1210.93 L1331.42 1210.93 L1330.84 1210.93 L1330.25 1210.93 L1329.66 1210.93 L1329.08 1210.93 L1328.49 1210.93 L1327.9 1210.93 L1327.32 1210.93 L1326.73 1210.93 L1326.14 1210.93 L1325.56 1210.93 L1324.97 1210.93 L1324.39 1210.93 L1323.8 1210.93 L1323.21 1210.93 L1322.63 1210.93 L1322.04 1210.93 L1321.45 1210.93 L1320.87 1210.93 L1320.28 1210.93 L1319.69 1210.93 L1319.11 1210.93 L1318.52 1210.93 L1317.93 1210.93 L1317.35 1210.93 L1316.76 1210.93 L1316.18 1210.93 L1315.59 1210.93 L1315 1210.93 L1314.42 1210.93 L1313.83 1210.93 L1313.24 1210.93 L1312.66 1210.93 L1312.07 1210.93 L1311.48 1210.93 L1310.9 1210.93 L1310.31 1210.93 L1309.73 1210.93 L1309.14 1210.93 L1308.55 1210.93 L1307.97 1210.93 L1307.38 1210.93 L1306.79 1210.93 L1306.21 1210.93 L1305.62 1210.93 L1305.03 1210.93 L1304.45 1210.93 L1303.86 1210.93 L1303.27 1210.93 L1302.69 1210.93 L1302.1 1210.93 L1301.52 1210.93 L1300.93 1210.93 L1300.34 1210.93 L1299.76 1210.93 L1299.17 1210.93 L1298.58 1210.93 L1298 1210.93 L1297.41 1210.93 L1296.82 1210.93 L1296.24 1210.93 L1295.65 1210.93 L1295.06 1210.93 L1294.48 1210.93 L1293.89 1210.93 L1293.31 1210.93 L1292.72 1210.93 L1292.13 1210.93 L1291.55 1210.93 L1290.96 1210.93 L1290.37 1210.93 L1289.79 1210.93 L1289.2 1210.93 L1288.61 1210.93 L1288.03 1210.93 L1287.44 1210.93 L1286.86 1210.93 L1286.27 1210.93 L1285.68 1210.93 L1285.1 1210.93 L1284.51 1210.93 L1283.92 1210.93 L1283.34 1210.93 L1282.75 1210.93 L1282.16 1210.93 L1281.58 1210.93 L1280.99 1210.93 L1280.4 1210.93 L1279.82 1210.93 L1279.23 1210.93 L1278.65 1210.93 L1278.06 1210.93 L1277.47 1210.93 L1276.89 1210.93 L1276.3 1210.93 L1275.71 1210.93 L1275.13 1210.93 L1274.54 1210.93 L1273.95 1210.93 L1273.37 1210.93 L1272.78 1210.93 L1272.19 1210.93 L1271.61 1210.93 L1271.02 1210.93 L1270.44 1210.93 L1269.85 1210.93 L1269.26 1210.93 L1268.68 1210.93 L1268.09 1210.93 L1267.5 1210.93 L1266.92 1210.93 L1266.33 1210.93 L1265.74 1210.93 L1265.16 1210.93 L1264.57 1210.93 L1263.98 1210.93 L1263.4 1210.93 L1262.81 1210.93 L1262.23 1210.93 L1261.64 1210.93 L1261.05 1210.93 L1260.47 1210.93 L1259.88 1210.93 L1259.29 1210.93 L1258.71 1210.93 L1258.12 1210.93 L1257.53 1210.93 L1256.95 1210.93 L1256.36 1210.93 L1255.78 1210.93 L1255.19 1210.93 L1254.6 1210.93 L1254.02 1210.93 L1253.43 1210.93 L1252.84 1210.93 L1252.26 1210.93 L1251.67 1210.93 L1251.08 1210.93 L1250.5 1210.93 L1249.91 1210.93 L1249.32 1210.93 L1248.74 1210.93 L1248.15 1210.93 L1247.57 1210.93 L1246.98 1210.93 L1246.39 1210.93 L1245.81 1210.93 L1245.22 1210.93 L1244.63 1210.93 L1244.05 1210.93 L1243.46 1210.93 L1242.87 1210.93 L1242.29 1210.93 L1241.7 1210.93 L1241.11 1210.93 L1240.53 1210.93 L1239.94 1210.93 L1239.36 1210.93 L1238.77 1210.93 L1238.18 1210.93 L1237.6 1210.93 L1237.01 1210.93 L1236.42 1210.93 L1235.84 1210.93 L1235.25 1210.93 L1234.66 1210.93 L1234.08 1210.93 L1233.49 1210.93 L1232.91 1210.93 L1232.32 1210.93 L1231.73 1210.93 L1231.15 1210.93 L1230.56 1210.93 L1229.97 1210.93 L1229.39 1210.93 L1228.8 1210.93 L1228.21 1210.93 L1227.63 1210.93 L1227.04 1210.93 L1226.45 1210.93 L1225.87 1210.93 L1225.28 1210.93 L1224.7 1210.93 L1224.11 1210.93 L1223.52 1210.93 L1222.94 1210.93 L1222.35 1210.93 L1221.76 1210.93 L1221.18 1210.93 L1220.59 1210.93 L1220 1210.93 L1219.42 1210.93 L1218.83 1210.93 L1218.24 1210.93 L1217.66 1210.93 L1217.07 1210.93 L1216.49 1210.93 L1215.9 1210.93 L1215.31 1210.93 L1214.73 1210.93 L1214.14 1210.93 L1213.55 1210.93 L1212.97 1210.93 L1212.38 1210.93 L1211.79 1210.93 L1211.21 1210.93 L1210.62 1210.93 L1210.03 1210.93 L1209.45 1210.93 L1208.86 1210.93 L1208.28 1210.93 L1207.69 1210.93 L1207.1 1210.93 L1206.52 1210.93 L1205.93 1210.93 L1205.34 1210.93 L1204.76 1210.93 L1204.17 1210.93 L1203.58 1210.93 L1203 1210.93 L1202.41 1210.93 L1201.83 1210.93 L1201.24 1210.93 L1200.65 1210.93 L1200.07 1210.93 L1199.48 1210.93 L1198.89 1210.93 L1198.31 1210.93 L1197.72 1210.93 L1197.13 1210.93 L1196.55 1210.93 L1195.96 1210.93 L1195.37 1210.93 L1194.79 1210.93 L1194.2 1210.93 L1193.62 1210.93 L1193.03 1210.93 L1192.44 1210.93 L1191.86 1210.93 L1191.27 1210.93 L1190.68 1210.93 L1190.1 1210.93 L1189.51 1210.93 L1188.92 1210.93 L1188.34 1210.93 L1187.75 1210.93 L1187.16 1210.93 L1186.58 1210.93 L1185.99 1210.93 L1185.41 1210.93 L1184.82 1210.93 L1184.23 1210.93 L1183.65 1210.93 L1183.06 1210.93 L1182.47 1210.93 L1181.89 1210.93 L1181.3 1210.93 L1180.71 1210.93 L1180.13 1210.93 L1179.54 1210.93 L1178.96 1210.93 L1178.37 1210.93 L1177.78 1210.93 L1177.2 1210.93 L1176.61 1210.93 L1176.02 1210.93 L1175.44 1210.93 L1174.85 1210.93 L1174.26 1210.93 L1173.68 1210.93 L1173.09 1210.93 L1172.5 1210.93 L1171.92 1210.93 L1171.33 1210.93 L1170.75 1210.93 L1170.16 1210.93 L1169.57 1210.93 L1168.99 1210.93 L1168.4 1210.93 L1167.81 1210.93 L1167.23 1210.93 L1166.64 1210.93 L1166.05 1210.93 L1165.47 1210.93 L1164.88 1210.93 L1164.29 1210.93 L1163.71 1210.93 L1163.12 1210.93 L1162.54 1210.93 L1161.95 1210.93 L1161.36 1210.93 L1160.78 1210.93 L1160.19 1210.93 L1159.6 1210.93 L1159.02 1210.93 L1158.43 1210.93 L1157.84 1210.93 L1157.26 1210.93 L1156.67 1210.93 L1156.09 1210.93 L1155.5 1210.93 L1154.91 1210.93 L1154.33 1210.93 L1153.74 1210.93 L1153.15 1210.93 L1152.57 1210.93 L1151.98 1210.93 L1151.39 1210.93 L1150.81 1210.93 L1150.22 1210.93 L1149.63 1210.93 L1149.05 1210.93 L1148.46 1210.93 L1147.88 1210.93 L1147.29 1210.93 L1146.7 1210.93 L1146.12 1210.93 L1145.53 1210.93 L1144.94 1210.93 L1144.36 1210.93 L1143.77 1210.93 L1143.18 1210.93 L1142.6 1210.93 L1142.01 1210.93 L1141.42 1210.93 L1140.84 1210.93 L1140.25 1210.93 L1139.67 1210.93 L1139.08 1210.93 L1138.49 1210.93 L1137.91 1210.93 L1137.32 1210.93 L1136.73 1210.93 L1136.15 1210.93 L1135.56 1210.93 L1134.97 1210.93 L1134.39 1210.93 L1133.8 1210.93 L1133.21 1210.93 L1132.63 1210.93 L1132.04 1210.93 L1131.46 1210.93 L1130.87 1210.93 L1130.28 1210.93 L1129.7 1210.93 L1129.11 1210.93 L1128.52 1210.93 L1127.94 1210.93 L1127.35 1210.93 L1126.76 1210.93 L1126.18 1210.93 L1125.59 1210.93 L1125.01 1210.93 L1124.42 1210.93 L1123.83 1210.93 L1123.25 1210.93 L1122.66 1210.93 L1122.07 1210.93 L1121.49 1210.93 L1120.9 1210.93 L1120.31 1210.93 L1119.73 1210.93 L1119.14 1210.93 L1118.55 1210.93 L1117.97 1210.93 L1117.38 1210.93 L1116.8 1210.93 L1116.21 1210.93 L1115.62 1210.93 L1115.04 1210.93 L1114.45 1210.93 L1113.86 1210.93 L1113.28 1210.93 L1112.69 1210.93 L1112.1 1210.93 L1111.52 1210.93 L1110.93 1210.93 L1110.34 1210.93 L1109.76 1210.93 L1109.17 1210.93 L1108.59 1210.93 L1108 1210.93 L1107.41 1210.93 L1106.83 1210.93 L1106.24 1210.93 L1105.65 1210.93 L1105.07 1210.93 L1104.48 1210.93 L1103.89 1210.93 L1103.31 1210.93 L1102.72 1210.93 L1102.14 1210.93 L1101.55 1210.93 L1100.96 1210.93 L1100.38 1210.93 L1099.79 1210.93 L1099.2 1210.93 L1098.62 1210.93 L1098.03 1210.93 L1097.44 1210.93 L1096.86 1210.93 L1096.27 1210.93 L1095.68 1210.93 L1095.1 1210.93 L1094.51 1210.93 L1093.93 1210.93 L1093.34 1210.93 L1092.75 1210.93 L1092.17 1210.93 L1091.58 1210.93 L1090.99 1210.93 L1090.41 1210.93 L1089.82 1210.93 L1089.23 1210.93 L1088.65 1210.93 L1088.06 1210.93 L1087.47 1210.93 L1086.89 1210.93 L1086.3 1210.93 L1085.72 1210.93 L1085.13 1210.93 L1084.54 1210.93 L1083.96 1210.93 L1083.37 1210.93 L1082.78 1210.93 L1082.2 1210.93 L1081.61 1210.93 L1081.02 1210.93 L1080.44 1210.93 L1079.85 1210.93 L1079.26 1210.93 L1078.68 1210.93 L1078.09 1210.93 L1077.51 1210.93 L1076.92 1210.93 L1076.33 1210.93 L1075.75 1210.93 L1075.16 1210.93 L1074.57 1210.93 L1073.99 1210.93 L1073.4 1210.93 L1072.81 1210.93 L1072.23 1210.93 L1071.64 1210.93 L1071.06 1210.93 L1070.47 1210.93 L1069.88 1210.93 L1069.3 1210.93 L1068.71 1210.93 L1068.12 1210.93 L1067.54 1210.93 L1066.95 1210.93 L1066.36 1210.93 L1065.78 1210.93 L1065.19 1210.93 L1064.6 1210.93 L1064.02 1210.93 L1063.43 1210.93 L1062.85 1210.93 L1062.26 1210.93 L1061.67 1210.93 L1061.09 1210.93 L1060.5 1210.93 L1059.91 1210.93 L1059.33 1210.93 L1058.74 1210.93 L1058.15 1210.93 L1057.57 1210.93 L1056.98 1210.93 L1056.39 1210.93 L1055.81 1210.93 L1055.22 1210.93 L1054.64 1210.93 L1054.05 1210.93 L1053.46 1210.93 L1052.88 1210.93 L1052.29 1210.93 L1051.7 1210.93 L1051.12 1210.93 L1050.53 1210.93 L1049.94 1210.93 L1049.36 1210.93 L1048.77 1210.93 L1048.19 1210.93 L1047.6 1210.93 L1047.01 1210.93 L1046.43 1210.93 L1045.84 1210.93 L1045.25 1210.93 L1044.67 1210.93 L1044.08 1210.93 L1043.49 1210.93 L1042.91 1210.93 L1042.32 1210.93 L1041.73 1210.93 L1041.15 1210.93 L1040.56 1210.93 L1039.98 1210.93 L1039.39 1210.93 L1038.8 1210.93 L1038.22 1210.93 L1037.63 1210.93 L1037.04 1210.93 L1036.46 1210.93 L1035.87 1210.93 L1035.28 1210.93 L1034.7 1210.93 L1034.11 1210.93 L1033.52 1210.93 L1032.94 1210.93 L1032.35 1210.93 L1031.77 1210.93 L1031.18 1210.93 L1030.59 1210.93 L1030.01 1210.93 L1029.42 1210.93 L1028.83 1210.93 L1028.25 1210.93 L1027.66 1210.93 L1027.07 1210.93 L1026.49 1210.93 L1025.9 1210.93 L1025.32 1210.93 L1024.73 1210.93 L1024.14 1210.93 L1023.56 1210.93 L1022.97 1210.93 L1022.38 1210.93 L1021.8 1210.93 L1021.21 1210.93 L1020.62 1210.93 L1020.04 1210.93 L1019.45 1210.93 L1018.86 1210.93 L1018.28 1210.93 L1017.69 1210.93 L1017.11 1210.93 L1016.52 1210.93 L1015.93 1210.93 L1015.35 1210.93 L1014.76 1210.93 L1014.17 1210.93 L1013.59 1210.93 L1013 1210.93 L1012.41 1210.93 L1011.83 1210.93 L1011.24 1210.93 L1010.65 1210.93 L1010.07 1210.93 L1009.48 1210.93 L1008.9 1210.93 L1008.31 1210.93 L1007.72 1210.93 L1007.14 1210.93 L1006.55 1210.93 L1005.96 1210.93 L1005.38 1210.93 L1004.79 1210.93 L1004.2 1210.93 L1003.62 1210.93 L1003.03 1210.93 L1002.44 1210.93 L1001.86 1210.93 L1001.27 1210.93 L1000.69 1210.93 L1000.1 1210.93 L999.513 1210.93 L998.926 1210.93 L998.34 1210.93 L997.754 1210.93 L997.167 1210.93 L996.581 1210.93 L995.994 1210.93 L995.408 1210.93 L994.822 1210.93 L994.235 1210.93 L993.649 1210.93 L993.062 1210.93 L992.476 1210.93 L991.889 1210.93 L991.303 1210.93 L990.717 1210.93 L990.13 1210.93 L989.544 1210.93 L988.957 1210.93 L988.371 1210.93 L987.785 1210.93 L987.198 1210.93 L986.612 1210.93 L986.025 1210.93  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.02 986.612,1211.02 987.198,1211.02 987.785,1211.02 988.371,1211.02 988.957,1211.02 989.544,1211.02 990.13,1211.02 990.717,1211.02 991.303,1211.02 991.889,1211.02 992.476,1211.02 993.062,1211.02 993.649,1211.02 994.235,1211.02 994.822,1211.02 995.408,1211.02 995.994,1211.02 996.581,1211.02 997.167,1211.02 997.754,1211.02 998.34,1211.02 998.926,1211.02 999.513,1211.02 1000.1,1211.02 1000.69,1211.02 1001.27,1211.02 1001.86,1211.02 1002.44,1211.02 1003.03,1211.02 1003.62,1211.02 1004.2,1211.02 1004.79,1211.02 1005.38,1211.02 1005.96,1211.02 1006.55,1211.02 1007.14,1211.02 1007.72,1211.02 1008.31,1211.02 1008.9,1211.02 1009.48,1211.02 1010.07,1211.02 1010.65,1211.02 1011.24,1211.02 1011.83,1211.02 1012.41,1211.02 1013,1211.02 1013.59,1211.02 1014.17,1211.02 1014.76,1211.02 1015.35,1211.02 1015.93,1211.02 1016.52,1211.02 1017.11,1211.02 1017.69,1211.02 1018.28,1211.02 1018.86,1211.02 1019.45,1211.02 1020.04,1211.02 1020.62,1211.02 1021.21,1211.02 1021.8,1211.02 1022.38,1211.02 1022.97,1211.02 1023.56,1211.02 1024.14,1211.02 1024.73,1211.02 1025.32,1211.02 1025.9,1211.02 1026.49,1211.02 1027.07,1211.02 1027.66,1211.02 1028.25,1211.02 1028.83,1211.02 1029.42,1211.02 1030.01,1211.02 1030.59,1211.02 1031.18,1211.02 1031.77,1211.02 1032.35,1211.02 1032.94,1211.02 1033.52,1211.02 1034.11,1211.02 1034.7,1211.02 1035.28,1211.02 1035.87,1211.02 1036.46,1211.02 1037.04,1211.02 1037.63,1211.02 1038.22,1211.02 1038.8,1211.02 1039.39,1211.02 1039.98,1211.02 1040.56,1211.02 1041.15,1211.02 1041.73,1211.02 1042.32,1211.02 1042.91,1211.02 1043.49,1211.02 1044.08,1211.02 1044.67,1211.02 1045.25,1211.02 1045.84,1211.02 1046.43,1211.02 1047.01,1211.02 1047.6,1211.02 1048.19,1211.02 1048.77,1211.02 1049.36,1211.02 1049.94,1211.02 1050.53,1211.02 1051.12,1211.02 1051.7,1211.02 1052.29,1211.02 1052.88,1211.02 1053.46,1211.02 1054.05,1211.02 1054.64,1211.02 1055.22,1211.02 1055.81,1211.02 1056.39,1211.02 1056.98,1211.02 1057.57,1211.02 1058.15,1211.02 1058.74,1211.02 1059.33,1211.02 1059.91,1211.02 1060.5,1211.02 1061.09,1211.02 1061.67,1211.02 1062.26,1211.02 1062.85,1211.02 1063.43,1211.02 1064.02,1211.02 1064.6,1211.02 1065.19,1211.02 1065.78,1211.02 1066.36,1211.02 1066.95,1211.02 1067.54,1211.02 1068.12,1211.02 1068.71,1211.02 1069.3,1211.02 1069.88,1211.02 1070.47,1211.02 1071.06,1211.02 1071.64,1211.02 1072.23,1211.02 1072.81,1211.02 1073.4,1211.02 1073.99,1211.02 1074.57,1211.02 1075.16,1211.02 1075.75,1211.02 1076.33,1211.02 1076.92,1211.02 1077.51,1211.02 1078.09,1211.02 1078.68,1211.02 1079.26,1211.02 1079.85,1211.02 1080.44,1211.02 1081.02,1211.02 1081.61,1211.02 1082.2,1211.02 1082.78,1211.02 1083.37,1211.02 1083.96,1211.02 1084.54,1211.02 1085.13,1211.02 1085.72,1211.02 1086.3,1211.02 1086.89,1211.02 1087.47,1211.02 1088.06,1211.02 1088.65,1211.02 1089.23,1211.02 1089.82,1211.02 1090.41,1211.02 1090.99,1211.02 1091.58,1211.02 1092.17,1211.02 1092.75,1211.02 1093.34,1211.02 1093.93,1211.02 1094.51,1211.02 1095.1,1211.02 1095.68,1211.02 1096.27,1211.02 1096.86,1211.02 1097.44,1211.02 1098.03,1211.02 1098.62,1211.02 1099.2,1211.02 1099.79,1211.02 1100.38,1211.02 1100.96,1211.02 1101.55,1211.02 1102.14,1211.02 1102.72,1211.02 1103.31,1211.02 1103.89,1211.02 1104.48,1211.02 1105.07,1211.02 1105.65,1211.02 1106.24,1211.02 1106.83,1211.02 1107.41,1211.02 1108,1211.02 1108.59,1211.02 1109.17,1211.02 1109.76,1211.02 1110.34,1211.02 1110.93,1211.02 1111.52,1211.02 1112.1,1211.02 1112.69,1211.02 1113.28,1211.02 1113.86,1211.02 1114.45,1211.02 1115.04,1211.02 1115.62,1211.02 1116.21,1211.02 1116.8,1211.02 1117.38,1211.02 1117.97,1211.02 1118.55,1211.02 1119.14,1211.02 1119.73,1211.02 1120.31,1211.02 1120.9,1211.02 1121.49,1211.02 1122.07,1211.02 1122.66,1211.02 1123.25,1211.02 1123.83,1211.02 1124.42,1211.02 1125.01,1211.02 1125.59,1211.02 1126.18,1211.02 1126.76,1211.02 1127.35,1211.02 1127.94,1211.02 1128.52,1211.02 1129.11,1211.02 1129.7,1211.02 1130.28,1211.02 1130.87,1211.02 1131.46,1211.02 1132.04,1211.02 1132.63,1211.02 1133.21,1211.02 1133.8,1211.02 1134.39,1211.02 1134.97,1211.02 1135.56,1211.02 1136.15,1211.02 1136.73,1211.02 1137.32,1211.02 1137.91,1211.02 1138.49,1211.02 1139.08,1211.02 1139.67,1211.02 1140.25,1211.02 1140.84,1211.02 1141.42,1211.02 1142.01,1211.02 1142.6,1211.02 1143.18,1211.02 1143.77,1211.02 1144.36,1211.02 1144.94,1211.02 1145.53,1211.02 1146.12,1211.02 1146.7,1211.02 1147.29,1211.02 1147.88,1211.02 1148.46,1211.02 1149.05,1211.02 1149.63,1211.02 1150.22,1211.02 1150.81,1211.02 1151.39,1211.02 1151.98,1211.02 1152.57,1211.02 1153.15,1211.02 1153.74,1211.02 1154.33,1211.02 1154.91,1211.02 1155.5,1211.02 1156.09,1211.02 1156.67,1211.02 1157.26,1211.02 1157.84,1211.02 1158.43,1211.02 1159.02,1211.02 1159.6,1211.02 1160.19,1211.02 1160.78,1211.02 1161.36,1211.02 1161.95,1211.02 1162.54,1211.02 1163.12,1211.02 1163.71,1211.02 1164.29,1211.02 1164.88,1211.02 1165.47,1211.02 1166.05,1211.02 1166.64,1211.02 1167.23,1211.02 1167.81,1211.02 1168.4,1211.02 1168.99,1211.02 1169.57,1211.02 1170.16,1211.02 1170.75,1211.02 1171.33,1211.02 1171.92,1211.02 1172.5,1211.02 1173.09,1211.02 1173.68,1211.02 1174.26,1211.02 1174.85,1211.02 1175.44,1211.02 1176.02,1211.02 1176.61,1211.02 1177.2,1211.02 1177.78,1211.02 1178.37,1211.02 1178.96,1211.02 1179.54,1211.02 1180.13,1211.02 1180.71,1211.02 1181.3,1211.02 1181.89,1211.02 1182.47,1211.02 1183.06,1211.02 1183.65,1211.02 1184.23,1211.02 1184.82,1211.02 1185.41,1211.02 1185.99,1211.02 1186.58,1211.02 1187.16,1211.02 1187.75,1211.02 1188.34,1211.02 1188.92,1211.02 1189.51,1211.02 1190.1,1211.02 1190.68,1211.02 1191.27,1211.02 1191.86,1211.02 1192.44,1211.02 1193.03,1211.02 1193.62,1211.02 1194.2,1211.02 1194.79,1211.02 1195.37,1211.02 1195.96,1211.02 1196.55,1211.02 1197.13,1211.02 1197.72,1211.02 1198.31,1211.02 1198.89,1211.02 1199.48,1211.02 1200.07,1211.02 1200.65,1211.02 1201.24,1211.02 1201.83,1211.02 1202.41,1211.02 1203,1211.02 1203.58,1211.02 1204.17,1211.02 1204.76,1211.02 1205.34,1211.02 1205.93,1211.02 1206.52,1211.02 1207.1,1211.02 1207.69,1211.02 1208.28,1211.02 1208.86,1211.02 1209.45,1211.02 1210.03,1211.02 1210.62,1211.02 1211.21,1211.02 1211.79,1211.02 1212.38,1211.02 1212.97,1211.02 1213.55,1211.02 1214.14,1211.02 1214.73,1211.02 1215.31,1211.02 1215.9,1211.02 1216.49,1211.02 1217.07,1211.02 1217.66,1211.02 1218.24,1211.02 1218.83,1211.02 1219.42,1211.02 1220,1211.02 1220.59,1211.02 1221.18,1211.02 1221.76,1211.02 1222.35,1211.02 1222.94,1211.02 1223.52,1211.02 1224.11,1211.02 1224.7,1211.02 1225.28,1211.02 1225.87,1211.02 1226.45,1211.02 1227.04,1211.02 1227.63,1211.02 1228.21,1211.02 1228.8,1211.02 1229.39,1211.02 1229.97,1211.02 1230.56,1211.02 1231.15,1211.02 1231.73,1211.02 1232.32,1211.02 1232.91,1211.02 1233.49,1211.02 1234.08,1211.02 1234.66,1211.02 1235.25,1211.02 1235.84,1211.02 1236.42,1211.02 1237.01,1211.02 1237.6,1211.02 1238.18,1211.02 1238.77,1211.02 1239.36,1211.02 1239.94,1211.02 1240.53,1211.02 1241.11,1211.02 1241.7,1211.02 1242.29,1211.02 1242.87,1211.02 1243.46,1211.02 1244.05,1211.02 1244.63,1211.02 1245.22,1211.02 1245.81,1211.02 1246.39,1211.02 1246.98,1211.02 1247.57,1211.02 1248.15,1211.02 1248.74,1211.02 1249.32,1211.02 1249.91,1211.02 1250.5,1211.02 1251.08,1211.02 1251.67,1211.02 1252.26,1211.02 1252.84,1211.02 1253.43,1211.02 1254.02,1211.02 1254.6,1211.02 1255.19,1211.02 1255.78,1211.02 1256.36,1211.02 1256.95,1211.02 1257.53,1211.02 1258.12,1211.02 1258.71,1211.02 1259.29,1211.02 1259.88,1211.02 1260.47,1211.02 1261.05,1211.02 1261.64,1211.02 1262.23,1211.02 1262.81,1211.02 1263.4,1211.02 1263.98,1211.02 1264.57,1211.02 1265.16,1211.02 1265.74,1211.02 1266.33,1211.02 1266.92,1211.02 1267.5,1211.02 1268.09,1211.02 1268.68,1211.02 1269.26,1211.02 1269.85,1211.02 1270.44,1211.02 1271.02,1211.02 1271.61,1211.02 1272.19,1211.02 1272.78,1211.02 1273.37,1211.02 1273.95,1211.02 1274.54,1211.02 1275.13,1211.02 1275.71,1211.02 1276.3,1211.02 1276.89,1211.02 1277.47,1211.02 1278.06,1211.02 1278.65,1211.02 1279.23,1211.02 1279.82,1211.02 1280.4,1211.02 1280.99,1211.02 1281.58,1211.02 1282.16,1211.02 1282.75,1211.02 1283.34,1211.02 1283.92,1211.02 1284.51,1211.02 1285.1,1211.02 1285.68,1211.02 1286.27,1211.02 1286.86,1211.02 1287.44,1211.02 1288.03,1211.02 1288.61,1211.02 1289.2,1211.02 1289.79,1211.02 1290.37,1211.02 1290.96,1211.02 1291.55,1211.02 1292.13,1211.02 1292.72,1211.02 1293.31,1211.02 1293.89,1211.02 1294.48,1211.02 1295.06,1211.02 1295.65,1211.02 1296.24,1211.02 1296.82,1211.02 1297.41,1211.02 1298,1211.02 1298.58,1211.02 1299.17,1211.02 1299.76,1211.02 1300.34,1211.02 1300.93,1211.02 1301.52,1211.02 1302.1,1211.02 1302.69,1211.02 1303.27,1211.02 1303.86,1211.02 1304.45,1211.02 1305.03,1211.02 1305.62,1211.02 1306.21,1211.02 1306.79,1211.02 1307.38,1211.02 1307.97,1211.02 1308.55,1211.02 1309.14,1211.02 1309.73,1211.02 1310.31,1211.02 1310.9,1211.02 1311.48,1211.02 1312.07,1211.02 1312.66,1211.02 1313.24,1211.02 1313.83,1211.02 1314.42,1211.02 1315,1211.02 1315.59,1211.02 1316.18,1211.02 1316.76,1211.02 1317.35,1211.02 1317.93,1211.02 1318.52,1211.02 1319.11,1211.02 1319.69,1211.02 1320.28,1211.02 1320.87,1211.02 1321.45,1211.02 1322.04,1211.02 1322.63,1211.02 1323.21,1211.02 1323.8,1211.02 1324.39,1211.02 1324.97,1211.02 1325.56,1211.02 1326.14,1211.02 1326.73,1211.02 1327.32,1211.02 1327.9,1211.02 1328.49,1211.02 1329.08,1211.02 1329.66,1211.02 1330.25,1211.02 1330.84,1211.02 1331.42,1211.02 1332.01,1211.02 1332.6,1211.02 1333.18,1211.02 1333.77,1211.02 1334.35,1211.02 1334.94,1211.02 1335.53,1211.02 1336.11,1211.02 1336.7,1211.02 1337.29,1211.02 1337.87,1211.02 1338.46,1211.02 1339.05,1211.02 1339.63,1211.02 1340.22,1211.02 1340.8,1211.02 1341.39,1211.02 1341.98,1211.02 1342.56,1211.02 1343.15,1211.02 1343.74,1211.02 1344.32,1211.02 1344.91,1211.02 1345.5,1211.02 1346.08,1211.02 1346.67,1211.02 1347.26,1211.02 1347.84,1211.02 1348.43,1211.02 1349.01,1211.02 1349.6,1211.02 1350.19,1211.02 1350.77,1211.02 1351.36,1211.02 1351.95,1211.02 1352.53,1211.02 1353.12,1211.02 1353.71,1211.02 1354.29,1211.02 1354.88,1211.02 1355.47,1211.02 1356.05,1211.02 1356.64,1211.02 1357.22,1211.02 1357.81,1211.02 1358.4,1211.02 1358.98,1211.02 1359.57,1211.02 1360.16,1211.02 1360.74,1211.02 1361.33,1211.02 1361.92,1211.02 1362.5,1211.02 1363.09,1211.02 1363.68,1211.02 1364.26,1211.02 1364.85,1211.02 1365.43,1211.02 1366.02,1211.02 1366.61,1211.02 1367.19,1211.02 1367.78,1211.02 1368.37,1211.02 1368.95,1211.02 1369.54,1211.02 1370.13,1211.02 1370.71,1211.02 1371.3,1211.02 1371.88,1211.02 1372.47,1211.02 1373.06,1211.02 1373.64,1211.02 1374.23,1211.02 1374.82,1211.02 1375.4,1211.02 1375.99,1211.02 1376.58,1211.02 1377.16,1211.02 1377.75,1211.02 1378.34,1211.02 1378.92,1211.02 1379.51,1211.02 1380.09,1211.02 1380.68,1211.02 1381.27,1211.02 1381.85,1211.02 1382.44,1211.02 1383.03,1211.02 1383.61,1211.02 1384.2,1211.02 1384.79,1211.02 1385.37,1211.02 1385.96,1211.02 1386.55,1211.02 1387.13,1211.02 1387.72,1211.02 1388.3,1211.02 1388.89,1211.02 1389.48,1211.02 1390.06,1211.02 1390.65,1211.02 1391.24,1211.02 1391.82,1211.02 1392.41,1211.02 1393,1211.02 1393.58,1211.02 1394.17,1211.02 1394.75,1211.02 1395.34,1211.02 1395.93,1211.02 1396.51,1211.02 1397.1,1211.02 1397.69,1211.02 1398.27,1211.02 1398.86,1211.02 1399.45,1211.02 1400.03,1211.02 1400.62,1211.02 1401.21,1211.02 1401.79,1211.02 1402.38,1211.02 1402.96,1211.02 1403.55,1211.02 1404.14,1211.02 1404.72,1211.02 1405.31,1211.02 1405.9,1211.02 1406.48,1211.02 1407.07,1211.02 1407.66,1211.02 1408.24,1211.02 1408.83,1211.02 1409.42,1211.02 1410,1211.02 1410.59,1211.02 1411.17,1211.02 1411.76,1211.02 1412.35,1211.02 1412.93,1211.02 1413.52,1211.02 1414.11,1211.02 1414.69,1211.02 1415.28,1211.02 1415.87,1211.02 1416.45,1211.02 1417.04,1211.02 1417.63,1211.02 1418.21,1211.02 1418.8,1211.02 1419.38,1211.02 1419.97,1211.02 1420.56,1211.02 1421.14,1211.02 1421.73,1211.02 1422.32,1211.02 1422.9,1211.02 1423.49,1211.02 1424.08,1211.02 1424.66,1211.02 1425.25,1211.02 1425.83,1211.02 1426.42,1211.02 1427.01,1211.02 1427.59,1211.02 1428.18,1211.02 1428.77,1211.02 1429.35,1211.02 1429.94,1211.02 1430.53,1211.02 1431.11,1211.02 1431.7,1211.02 1432.29,1211.02 1432.87,1211.02 1433.46,1211.02 1434.04,1211.02 1434.63,1211.02 1435.22,1211.02 1435.8,1211.02 1436.39,1211.02 1436.98,1211.02 1437.56,1211.02 1438.15,1211.02 1438.74,1211.02 1439.32,1211.02 1439.91,1211.02 1440.5,1211.02 1441.08,1211.02 1441.67,1211.02 1442.25,1211.02 1442.84,1211.02 1443.43,1211.02 1444.01,1211.02 1444.6,1211.02 1445.19,1211.02 1445.77,1211.02 1446.36,1211.02 1446.95,1211.02 1447.53,1211.02 1448.12,1211.02 1448.7,1211.02 1449.29,1211.02 1449.88,1211.02 1450.46,1211.02 1451.05,1211.02 1451.64,1211.02 1452.22,1211.02 1452.81,1211.02 1453.4,1211.02 1453.98,1211.02 1454.57,1211.02 1455.16,1211.02 1455.74,1211.02 1456.33,1211.02 1456.91,1211.02 1457.5,1211.02 1458.09,1211.02 1458.67,1211.02 1459.26,1211.02 1459.85,1211.02 1460.43,1211.02 1461.02,1211.02 1461.61,1211.02 1462.19,1211.02 1462.78,1211.02 1463.37,1211.02 1463.95,1211.02 1464.54,1211.02 1465.12,1211.02 1465.71,1211.02 1466.3,1211.02 1466.88,1211.02 1467.47,1211.02 1468.06,1211.02 1468.64,1211.02 1469.23,1211.02 1469.82,1211.02 1470.4,1211.02 1470.99,1211.02 1471.57,1211.02 1472.16,1211.02 1472.75,1211.02 1473.33,1211.02 1473.92,1211.02 1474.51,1211.02 1475.09,1211.02 1475.68,1211.02 1476.27,1211.02 1476.85,1211.02 1477.44,1211.02 1478.03,1211.02 1478.61,1211.02 1479.2,1211.02 1479.78,1211.02 1480.37,1211.02 1480.96,1211.02 1481.54,1211.02 1482.13,1211.02 1482.72,1211.02 1483.3,1211.02 1483.89,1211.02 1484.48,1211.02 1485.06,1211.02 1485.65,1211.02 1486.24,1211.02 1486.82,1211.02 1487.41,1211.02 1487.99,1211.02 1488.58,1211.02 1489.17,1211.02 1489.75,1211.02 1490.34,1211.02 1490.93,1211.02 1491.51,1211.02 1492.1,1211.02 1492.69,1211.02 1493.27,1211.02 1493.86,1211.02 1494.45,1211.02 1495.03,1211.02 1495.62,1211.02 1496.2,1211.02 1496.79,1211.02 1497.38,1211.02 1497.96,1211.02 1498.55,1211.02 1499.14,1211.02 1499.72,1211.02 1500.31,1211.02 1500.9,1211.02 1501.48,1211.02 1502.07,1211.02 1502.65,1211.02 1503.24,1211.02 1503.83,1211.02 1504.41,1211.02 1505,1211.02 1505.59,1211.02 1506.17,1211.02 1506.76,1211.02 1507.35,1211.02 1507.93,1211.02 1508.52,1211.02 1509.11,1211.02 1509.69,1211.02 1510.28,1211.02 1510.86,1211.02 1511.45,1211.02 1512.04,1211.02 1512.62,1211.02 1513.21,1211.02 1513.8,1211.02 1514.38,1211.02 1514.97,1211.02 1515.56,1211.02 1516.14,1211.02 1516.73,1211.02 1517.32,1211.02 1517.9,1211.02 1518.49,1211.02 1519.07,1211.02 1519.66,1211.02 1520.25,1211.02 1520.83,1211.02 1521.42,1211.02 1522.01,1211.02 1522.59,1211.02 1523.18,1211.02 1523.77,1211.02 1524.35,1211.02 1524.94,1211.02 1525.52,1211.02 1526.11,1211.02 1526.7,1211.02 1527.28,1211.02 1527.87,1211.02 1528.46,1211.02 1529.04,1211.02 1529.63,1211.02 1530.22,1211.02 1530.8,1211.02 1531.39,1211.02 1531.98,1211.02 1532.56,1211.02 1533.15,1211.02 1533.73,1211.02 1534.32,1211.02 1534.91,1211.02 1535.49,1211.02 1536.08,1211.02 1536.67,1211.02 1537.25,1211.02 1537.84,1211.02 1538.43,1211.02 1539.01,1211.02 1539.6,1211.02 1540.19,1211.02 1540.77,1211.02 1541.36,1211.02 1541.94,1211.02 1542.53,1211.02 1543.12,1211.02 1543.7,1211.02 1544.29,1211.02 1544.88,1211.02 1545.46,1211.02 1546.05,1211.02 1546.64,1211.02 1547.22,1211.02 1547.81,1211.02 1548.4,1211.02 1548.98,1211.02 1549.57,1211.02 1550.15,1211.02 1550.74,1211.02 1551.33,1211.02 1551.91,1211.02 1552.5,1211.02 1553.09,1211.02 1553.67,1211.02 1554.26,1211.02 1554.85,1211.02 1555.43,1211.02 1556.02,1211.02 1556.6,1211.02 1557.19,1211.02 1557.78,1211.02 1558.36,1211.02 1558.95,1211.02 1559.54,1211.02 1560.12,1211.02 1560.71,1211.02 1561.3,1211.02 1561.88,1211.02 1562.47,1211.02 1563.06,1211.02 1563.64,1211.02 1564.23,1211.02 1564.81,1211.02 1565.4,1211.02 1565.99,1211.02 1566.57,1211.02 1567.16,1211.02 1567.75,1211.02 1568.33,1211.02 1568.92,1211.02 1569.51,1211.02 1570.09,1211.02 1570.68,1211.02 1571.27,1211.02 1571.85,1211.02 1572.44,1211.02 1573.02,1211.02 1573.61,1211.02 1574.2,1211.02 1574.78,1211.02 1575.37,1211.02 1575.96,1211.02 1576.54,1211.02 1577.13,1211.02 1577.72,1211.02 1578.3,1211.02 1578.89,1211.02 1579.47,1211.02 1580.06,1211.02 1580.65,1211.02 1581.23,1211.02 1581.82,1211.02 1582.41,1211.02 1582.99,1211.02 1583.58,1211.02 1584.17,1211.02 1584.75,1211.02 1585.34,1211.02 1585.93,1211.02 1586.51,1211.02 1587.1,1211.02 1587.68,1211.02 1588.27,1211.02 1588.86,1211.02 1589.44,1211.02 1590.03,1211.02 1590.62,1211.02 1591.2,1211.02 1591.79,1211.02 1592.38,1211.02 1592.96,1211.02 1593.55,1211.02 1594.14,1211.02 1594.72,1211.02 1595.31,1211.02 1595.89,1211.02 1596.48,1211.02 1597.07,1211.02 1597.65,1211.02 1598.24,1211.02 1598.83,1211.02 1599.41,1211.02 1600,1211.02 1600.59,1211.02 1601.17,1211.02 1601.76,1211.02 1602.34,1211.02 1602.93,1211.02 1603.52,1211.02 1604.1,1211.02 1604.69,1211.02 1605.28,1211.02 1605.86,1211.02 1606.45,1211.02 1607.04,1211.02 1607.62,1211.02 1608.21,1211.02 1608.8,1211.02 1609.38,1211.02 1609.97,1211.02 1610.55,1211.02 1611.14,1211.02 1611.73,1211.02 1612.31,1211.02 1612.9,1211.02 1613.49,1211.02 1614.07,1211.02 1614.66,1211.02 1615.25,1211.02 1615.83,1211.02 1616.42,1211.02 1617.01,1211.02 1617.59,1211.02 1618.18,1211.02 1618.76,1211.02 1619.35,1211.02 1619.94,1211.02 1620.52,1211.02 1621.11,1211.02 1621.7,1211.02 1622.28,1211.02 1622.87,1211.02 1623.46,1211.02 1624.04,1211.02 1624.63,1211.02 1625.22,1211.02 1625.8,1211.02 1626.39,1211.02 1626.97,1211.02 1627.56,1211.02 1628.15,1211.02 1628.73,1211.02 1629.32,1211.02 1629.91,1211.02 1630.49,1211.02 1631.08,1211.02 1631.67,1211.02 1632.25,1211.02 1632.84,1211.02 1633.42,1211.02 1634.01,1211.02 1634.6,1211.02 1635.18,1211.02 1635.77,1211.02 1636.36,1211.02 1636.94,1211.02 1637.53,1211.02 1638.12,1211.02 1638.7,1211.02 1639.29,1211.02 1639.88,1211.02 1640.46,1211.02 1641.05,1211.02 1641.63,1211.02 1642.22,1211.02 1642.81,1211.02 1643.39,1211.02 1643.98,1211.02 1644.57,1211.02 1645.15,1211.02 1645.74,1211.02 1646.33,1211.02 1646.91,1211.02 1647.5,1211.02 1648.09,1211.02 1648.67,1211.02 1649.26,1211.02 1649.84,1211.02 1650.43,1211.02 1651.02,1211.02 1651.6,1211.02 1652.19,1211.02 1652.78,1211.02 1653.36,1211.02 1653.95,1211.02 1654.54,1211.02 1655.12,1211.02 1655.71,1211.02 1656.29,1211.02 1656.88,1211.02 1657.47,1211.02 1658.05,1211.02 1658.64,1211.02 1659.23,1211.02 1659.81,1211.02 1660.4,1211.02 1660.99,1211.02 1661.57,1211.02 1662.16,1211.02 1662.75,1211.02 1663.33,1211.02 1663.92,1211.02 1664.5,1211.02 1665.09,1211.02 1665.68,1211.02 1666.26,1211.02 1666.85,1211.02 1667.44,1211.02 1668.02,1211.02 1668.61,1211.02 1669.2,1211.02 1669.78,1211.02 1670.37,1211.02 1670.96,1211.02 1671.54,1211.02 1672.13,1211.02 1672.71,1211.02 1673.3,1211.02 1673.89,1211.02 1674.47,1211.02 1675.06,1211.02 1675.65,1211.02 1676.23,1211.02 1676.82,1211.02 1677.41,1211.02 1677.99,1211.02 1678.58,1211.02 1679.17,1211.02 1679.75,1211.02 1680.34,1211.02 1680.92,1211.02 1681.51,1211.02 1682.1,1211.02 1682.68,1211.02 1683.27,1211.02 1683.86,1211.02 1684.44,1211.02 1685.03,1211.02 1685.62,1211.02 1686.2,1211.02 1686.79,1211.02 1687.37,1211.02 1687.96,1211.02 1688.55,1211.02 1689.13,1211.02 1689.72,1211.02 1690.31,1211.02 1690.89,1211.02 1691.48,1211.02 1692.07,1211.02 1692.65,1211.02 1693.24,1211.02 1693.83,1211.02 1694.41,1211.02 1695,1211.02 1695.58,1211.02 1696.17,1211.02 1696.76,1211.02 1697.34,1211.02 1697.93,1211.02 1698.52,1211.02 1699.1,1211.02 1699.69,1211.02 1700.28,1211.02 1700.86,1211.02 1701.45,1211.02 1702.04,1211.02 1702.62,1211.02 1703.21,1211.02 1703.79,1211.02 1704.38,1211.02 1704.97,1211.02 1705.55,1211.02 1706.14,1211.02 1706.73,1211.02 1707.31,1211.02 1707.9,1211.02 1708.49,1211.02 1709.07,1211.02 1709.66,1211.02 1710.24,1211.02 1710.83,1211.02 1711.42,1211.02 1712,1211.02 1712.59,1211.02 1713.18,1211.02 1713.76,1211.02 1714.35,1211.02 1714.94,1211.02 1715.52,1211.02 1716.11,1211.02 1716.7,1211.02 1717.28,1211.02 1717.87,1211.02 1718.45,1211.02 1719.04,1211.02 1719.63,1211.02 1720.21,1211.02 1720.8,1211.02 1721.39,1211.02 1721.97,1211.02 1722.56,1211.02 1723.15,1211.02 1723.73,1211.02 1724.32,1211.02 1724.91,1211.02 1725.49,1211.02 1726.08,1211.02 1726.66,1211.02 1727.25,1211.02 1727.84,1211.02 1728.42,1211.02 1729.01,1211.02 1729.6,1211.02 1730.18,1211.02 1730.77,1211.02 1731.36,1211.02 1731.94,1211.02 1732.53,1211.02 1733.11,1211.02 1733.7,1211.02 1734.29,1211.02 1734.87,1211.02 1735.46,1211.02 1736.05,1211.02 1736.63,1211.02 1737.22,1211.02 1737.81,1211.02 1738.39,1211.02 1738.98,1211.02 1739.57,1211.02 1740.15,1211.02 1740.74,1211.02 1741.32,1211.02 1741.91,1211.02 1742.5,1211.02 1743.08,1211.02 1743.67,1211.02 1744.26,1211.02 1744.84,1211.02 1745.43,1211.02 1746.02,1211.02 1746.6,1211.02 1747.19,1211.02 1747.78,1211.02 1748.36,1211.02 1748.95,1211.02 1749.53,1211.02 1750.12,1211.02 1750.71,1211.02 1751.29,1211.02 1751.88,1211.02 1752.47,1211.02 1753.05,1211.02 1753.64,1211.02 1754.23,1211.02 1754.81,1211.02 1755.4,1211.02 1755.99,1211.02 1756.57,1211.02 1757.16,1211.02 1757.74,1211.02 1758.33,1211.02 1758.92,1211.02 1759.5,1211.02 1760.09,1211.02 1760.68,1211.02 1761.26,1211.02 1761.85,1211.02 1762.44,1211.02 1763.02,1211.02 1763.61,1211.02 1764.19,1211.02 1764.78,1211.02 1765.37,1211.02 1765.95,1211.02 1766.54,1211.02 1767.13,1211.02 1767.71,1211.02 1768.3,1211.02 1768.89,1211.02 1769.47,1211.02 1770.06,1211.02 1770.65,1211.02 1771.23,1211.02 1771.82,1211.02 1772.4,1211.02 1772.99,1211.02 1773.58,1211.02 1774.16,1211.02 1774.75,1211.02 1775.34,1211.02 1775.92,1211.02 1776.51,1211.02 1777.1,1211.02 1777.68,1211.02 1778.27,1211.02 1778.86,1211.02 1779.44,1211.02 1780.03,1211.02 1780.61,1211.02 1781.2,1211.02 1781.79,1211.02 1782.37,1211.02 1782.96,1211.02 1783.55,1211.02 1784.13,1211.02 1784.72,1211.02 1785.31,1211.02 1785.89,1211.02 1786.48,1211.02 1787.06,1211.02 1787.65,1211.02 1788.24,1211.02 1788.82,1211.02 1789.41,1211.02 1790,1211.02 1790.58,1211.02 1791.17,1211.02 1791.76,1211.02 1792.34,1211.02 1792.93,1211.02 1793.52,1211.02 1794.1,1211.02 1794.69,1211.02 1795.27,1211.02 1795.86,1211.02 1796.45,1211.02 1797.03,1211.02 1797.62,1211.02 1798.21,1211.02 1798.79,1211.02 1799.38,1211.02 1799.97,1211.02 1800.55,1211.02 1801.14,1211.02 1801.73,1211.02 1802.31,1211.02 1802.9,1211.02 1803.48,1211.02 1804.07,1211.02 1804.66,1211.02 1805.24,1211.02 1805.83,1211.02 1806.42,1211.02 1807,1211.02 1807.59,1211.02 1808.18,1211.02 1808.76,1211.02 1809.35,1211.02 1809.94,1211.02 1810.52,1211.02 1811.11,1211.02 1811.69,1211.02 1812.28,1211.02 1812.87,1211.02 1813.45,1211.02 1814.04,1211.02 1814.63,1211.02 1815.21,1211.02 1815.8,1211.02 1816.39,1211.02 1816.97,1211.02 1817.56,1211.02 1818.14,1211.02 1818.73,1211.02 1819.32,1211.02 1819.9,1211.02 1820.49,1211.02 1821.08,1211.02 1821.66,1211.02 1822.25,1211.02 1822.84,1211.02 1823.42,1211.02 1824.01,1211.02 1824.6,1211.02 1825.18,1211.02 1825.77,1211.02 1826.35,1211.02 1826.94,1211.02 1827.53,1211.02 1828.11,1211.02 1828.7,1211.02 1829.29,1211.02 1829.87,1211.02 1830.46,1211.02 1831.05,1211.02 1831.63,1211.02 1832.22,1211.02 1832.81,1211.02 1833.39,1211.02 1833.98,1211.02 1834.56,1211.02 1835.15,1211.02 1835.74,1211.02 1836.32,1211.02 1836.91,1211.02 1837.5,1211.02 1838.08,1211.02 1838.67,1211.02 1839.26,1211.02 1839.84,1211.02 1840.43,1211.02 1841.01,1211.02 1841.6,1211.02 1842.19,1211.02 1842.77,1211.02 1843.36,1211.02 1843.95,1211.02 1844.53,1211.02 1845.12,1211.02 1845.71,1211.02 1846.29,1211.02 1846.88,1211.02 1847.47,1211.02 1848.05,1211.02 1848.64,1211.02 1849.22,1211.02 1849.81,1211.02 1850.4,1211.02 1850.98,1211.02 1851.57,1211.02 1852.16,1211.02 1852.74,1211.02 1853.33,1211.02 1853.92,1211.02 1854.5,1211.02 1855.09,1211.02 1855.68,1211.02 1856.26,1211.02 1856.85,1211.02 1857.43,1211.02 1858.02,1211.02 1858.61,1211.02 1859.19,1211.02 1859.78,1211.02 1860.37,1211.02 1860.95,1211.02 1861.54,1211.02 1862.13,1211.02 1862.71,1211.02 1863.3,1211.02 1863.88,1211.02 1864.47,1211.02 1865.06,1211.02 1865.64,1211.02 1866.23,1211.02 1866.82,1211.02 1867.4,1211.02 1867.99,1211.02 1868.58,1211.02 1869.16,1211.02 1869.75,1211.02 1870.34,1211.02 1870.92,1211.02 1871.51,1211.02 1872.09,1211.02 1872.68,1211.02 1873.27,1211.02 1873.85,1211.02 1874.44,1211.02 1875.03,1211.02 1875.61,1211.02 1876.2,1211.02 1876.79,1211.02 1877.37,1211.02 1877.96,1211.02 1878.55,1211.02 1879.13,1211.02 1879.72,1211.02 1880.3,1211.02 1880.89,1211.02 1881.48,1211.02 1882.06,1211.02 1882.65,1211.02 1883.24,1211.02 1883.82,1211.02 1884.41,1211.02 1885,1211.02 1885.58,1211.02 1886.17,1211.02 1886.76,1211.02 1887.34,1211.02 1887.93,1211.02 1888.51,1211.02 1889.1,1211.02 1889.69,1211.02 1890.27,1211.02 1890.86,1211.02 1891.45,1211.02 1892.03,1211.02 1892.62,1211.02 1893.21,1211.02 1893.79,1211.02 1894.38,1211.02 1894.96,1211.02 1895.55,1211.02 1896.14,1211.02 1896.72,1211.02 1897.31,1211.02 1897.9,1211.02 1898.48,1211.02 1899.07,1211.02 1899.66,1211.02 1900.24,1211.02 1900.83,1211.02 1901.42,1211.02 1902,1211.02 1902.59,1211.02 1903.17,1211.02 1903.76,1211.02 1904.35,1211.02 1904.93,1211.02 1905.52,1211.02 1906.11,1211.02 1906.69,1211.02 1907.28,1211.02 1907.87,1211.02 1908.45,1211.02 1909.04,1211.02 1909.63,1211.02 1910.21,1211.02 1910.8,1211.02 1911.38,1211.02 1911.97,1211.02 1912.56,1211.02 1913.14,1211.02 1913.73,1211.02 1914.32,1211.02 1914.9,1211.02 1915.49,1211.02 1916.08,1211.02 1916.66,1211.02 1917.25,1211.02 1917.83,1211.02 1918.42,1211.02 1919.01,1211.02 1919.59,1211.02 1920.18,1211.02 1920.77,1211.02 1921.35,1211.02 1921.94,1211.02 1922.53,1211.02 1923.11,1211.02 1923.7,1211.02 1924.29,1211.02 1924.87,1211.02 1925.46,1211.02 1926.04,1211.02 1926.63,1211.02 1927.22,1211.02 1927.8,1211.02 1928.39,1211.02 1928.98,1211.02 1929.56,1211.02 1930.15,1211.02 1930.74,1211.02 1931.32,1211.02 1931.91,1211.02 1932.5,1211.02 1933.08,1211.02 1933.67,1211.02 1934.25,1211.02 1934.84,1211.02 1935.43,1211.02 1936.01,1211.02 1936.6,1211.02 1937.19,1211.02 1937.77,1211.02 1938.36,1211.02 1938.95,1211.02 1939.53,1211.02 1940.12,1211.02 1940.71,1211.02 1941.29,1211.02 1941.88,1211.02 1942.46,1211.02 1943.05,1211.02 1943.64,1211.02 1944.22,1211.02 1944.81,1211.02 1945.4,1211.02 1945.98,1211.02 1946.57,1211.02 1947.16,1211.02 1947.74,1211.02 1948.33,1211.02 1948.91,1211.02 1949.5,1211.02 1950.09,1211.02 1950.67,1211.02 1951.26,1211.02 1951.85,1211.02 1952.43,1211.02 1953.02,1211.02 1953.61,1211.02 1954.19,1211.02 1954.78,1211.02 1955.37,1211.02 1955.95,1211.02 1956.54,1211.02 1957.12,1211.02 1957.71,1211.02 1958.3,1211.02 1958.88,1211.02 1959.47,1211.02 1960.06,1211.02 1960.64,1211.02 1961.23,1211.02 1961.82,1211.02 1962.4,1211.02 1962.99,1211.02 1963.58,1211.02 1964.16,1211.02 1964.75,1211.02 1965.33,1211.02 1965.92,1211.02 1966.51,1211.02 1967.09,1211.02 1967.68,1211.02 1968.27,1211.02 1968.85,1211.02 1969.44,1211.02 1970.03,1211.02 1970.61,1211.02 1971.2,1211.02 1971.78,1211.02 1972.37,1211.02 1972.96,1211.02 1973.54,1211.02 1974.13,1211.02 1974.72,1211.02 1975.3,1211.02 1975.89,1211.02 1976.48,1211.02 1977.06,1211.02 1977.65,1211.02 1978.24,1211.02 1978.82,1211.02 1979.41,1211.02 1979.99,1211.02 1980.58,1211.02 1981.17,1211.02 1981.75,1211.02 1982.34,1211.02 1982.93,1211.02 1983.51,1211.02 1984.1,1211.02 1984.69,1211.02 1985.27,1211.02 1985.86,1211.02 1986.45,1211.02 1987.03,1211.02 1987.62,1211.02 1988.2,1211.02 1988.79,1211.02 1989.38,1211.02 1989.96,1211.02 1990.55,1211.02 1991.14,1211.02 1991.72,1211.02 1992.31,1211.02 1992.9,1211.02 1993.48,1211.02 1994.07,1211.02 1994.65,1211.02 1995.24,1211.02 1995.83,1211.02 1996.41,1211.02 1997,1211.02 1997.59,1211.02 1998.17,1211.02 1998.76,1211.02 1999.35,1211.02 1999.93,1211.02 2000.52,1211.02 2001.11,1211.02 2001.69,1211.02 2002.28,1211.02 2002.86,1211.02 2003.45,1211.02 2004.04,1211.02 2004.62,1211.02 2005.21,1211.02 2005.8,1211.02 2006.38,1211.02 2006.97,1211.02 2007.56,1211.02 2008.14,1211.02 2008.73,1211.02 2009.32,1211.02 2009.9,1211.02 2010.49,1211.02 2011.07,1211.02 2011.66,1211.02 2012.25,1211.02 2012.83,1211.02 2013.42,1211.02 2014.01,1211.02 2014.59,1211.02 2015.18,1211.02 2015.77,1211.02 2016.35,1211.02 2016.94,1211.02 2017.53,1211.02 2018.11,1211.02 2018.7,1211.02 2019.28,1211.02 2019.87,1211.02 2020.46,1211.02 2021.04,1211.02 2021.63,1211.02 2022.22,1211.02 2022.8,1211.02 2023.39,1211.02 2023.98,1211.02 2024.56,1211.02 2025.15,1211.02 2025.73,1211.02 2026.32,1211.02 2026.91,1211.02 2027.49,1211.02 2028.08,1211.02 2028.67,1211.02 2029.25,1211.02 2029.84,1211.02 2030.43,1211.02 2031.01,1211.02 2031.6,1211.02 2032.19,1211.02 2032.77,1211.02 2033.36,1211.02 2033.94,1211.02 2034.53,1211.02 2035.12,1211.02 2035.7,1211.02 2036.29,1211.02 2036.88,1211.02 2037.46,1211.02 2038.05,1211.02 2038.64,1211.02 2039.22,1211.02 2039.81,1211.02 2040.4,1211.02 2040.98,1211.02 2041.57,1211.02 2042.15,1211.02 2042.74,1211.02 2043.33,1211.02 2043.91,1211.02 2044.5,1211.02 2045.09,1211.02 2045.67,1211.02 2046.26,1211.02 2046.85,1211.02 2047.43,1211.02 2048.02,1211.02 2048.6,1211.02 2049.19,1211.02 2049.78,1211.02 2050.36,1211.02 2050.95,1211.02 2051.54,1211.02 2052.12,1211.02 2052.71,1211.02 2053.3,1211.02 2053.88,1211.02 2054.47,1211.02 2055.06,1211.02 2055.64,1211.02 2056.23,1211.02 2056.81,1211.02 2057.4,1211.02 2057.99,1211.02 2058.57,1211.02 2059.16,1211.02 2059.75,1211.02 2060.33,1211.02 2060.92,1211.02 2061.51,1211.02 2062.09,1211.02 2062.68,1211.02 2063.27,1211.02 2063.85,1211.02 2064.44,1211.02 2065.02,1211.02 2065.61,1211.02 2066.2,1211.02 2066.78,1211.02 2067.37,1211.02 2067.96,1211.02 2068.54,1211.02 2069.13,1211.02 2069.72,1211.02 2070.3,1211.02 2070.89,1211.02 2071.48,1211.02 2072.06,1211.02 2072.65,1211.02 2073.23,1211.02 2073.82,1211.02 2074.41,1211.02 2074.99,1211.02 2075.58,1211.02 2076.17,1211.02 2076.75,1211.02 2077.34,1211.02 2077.93,1211.02 2078.51,1211.02 2079.1,1211.02 2079.68,1211.02 2080.27,1211.02 2080.86,1211.02 2081.44,1211.02 2082.03,1211.02 2082.62,1211.02 2083.2,1211.02 2083.79,1211.02 2084.38,1211.02 2084.96,1211.02 2085.55,1211.02 2086.14,1211.02 2086.72,1211.02 2087.31,1211.02 2087.89,1211.02 2088.48,1211.02 2089.07,1211.02 2089.65,1211.02 2090.24,1211.02 2090.83,1211.02 2091.41,1211.02 2092,1211.02 2092.59,1211.02 2093.17,1211.02 2093.76,1211.02 2094.35,1211.02 2094.93,1211.02 2095.52,1211.02 2096.1,1211.02 2096.69,1211.02 2097.28,1211.02 2097.86,1211.02 2098.45,1211.02 2099.04,1211.02 2099.62,1211.02 2100.21,1211.02 2100.8,1211.02 2101.38,1211.02 2101.97,1211.02 2102.55,1211.02 2103.14,1211.02 2103.73,1211.02 2104.31,1211.02 2104.9,1211.02 2105.49,1211.02 2106.07,1211.02 2106.66,1211.02 2107.25,1211.02 2107.83,1211.02 2108.42,1211.02 2109.01,1211.02 2109.59,1211.02 2110.18,1211.02 2110.76,1211.02 2111.35,1211.02 2111.94,1211.02 2112.52,1211.02 2113.11,1211.02 2113.7,1211.02 2114.28,1211.02 2114.87,1211.02 2115.46,1211.02 2116.04,1211.02 2116.63,1211.02 2117.22,1211.02 2117.8,1211.02 2118.39,1211.02 2118.97,1211.02 2119.56,1211.02 2120.15,1211.02 2120.73,1211.02 2121.32,1211.02 2121.91,1211.02 2122.49,1211.02 2123.08,1211.02 2123.67,1211.02 2124.25,1211.02 2124.84,1211.02 2125.42,1211.02 2126.01,1211.02 2126.6,1211.02 2127.18,1211.02 2127.77,1211.02 2128.36,1211.02 2128.94,1211.02 2129.53,1211.02 2130.12,1211.02 2130.7,1211.02 2131.29,1211.02 2131.88,1211.02 2132.46,1211.02 2133.05,1211.02 2133.63,1211.02 2134.22,1211.02 2134.81,1211.02 2135.39,1211.02 2135.98,1211.02 2136.57,1211.02 2137.15,1211.02 2137.74,1211.02 2138.33,1211.02 2138.91,1211.02 2139.5,1211.02 2140.09,1211.02 2140.67,1211.02 2141.26,1211.02 2141.84,1211.02 2142.43,1211.02 2143.02,1211.02 2143.6,1211.02 2144.19,1211.02 2144.78,1211.02 2145.36,1211.02 2145.95,1211.02 2146.54,1211.02 2147.12,1211.02 2147.71,1211.02 2148.3,1211.02 2148.88,1211.02 2149.47,1211.02 2150.05,1211.02 2150.64,1211.02 2151.23,1211.02 2151.81,1211.02 2152.4,1211.02 2152.99,1211.02 2153.57,1211.02 2154.16,1211.02 2154.75,1211.02 2155.33,1211.02 2155.92,1211.02 2156.5,1211.02 2157.09,1211.02 2157.68,1211.02 2158.26,1211.02 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.95,1192.8 1399.66,899.083 \"/>\n<polyline clip-path=\"url(#clip672)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.65 985.439,1192.8 2158.26,1192.8 2158.26,1228.65 985.439,1228.65 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip670)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip670)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip673\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip670)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip670)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip670)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip673)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1456.43 162.114,-2761.65 162.673,-3961.91 163.232,-5012.69 163.792,-5999.79 164.351,-6945.99 164.91,-7786.57 165.469,-8571.51 166.029,-9261.27 166.588,-9885.55 167.147,-10446.8 167.706,-10949.1 168.266,-11396.2 168.825,-10896.8 169.384,-10500.7 169.943,-9449.29 170.503,-9830.72 171.062,-10184 171.621,-10503.1 172.18,-10762.7 172.74,-10987.1 173.299,-11173.3 173.858,-10866.3 174.417,-10593.2 174.977,-10736 175.536,-10844.9 176.095,-10927.5 176.655,-10987.8 177.214,-11025.7 177.773,-10456.6 178.332,-10465.5 178.892,-10204.7 179.451,-10197.8 180.01,-10168.9 180.569,-10122 181.129,-10063.4 181.688,-9804.89 182.247,-9381.92 182.806,-8972.34 183.366,-8899.51 183.925,-8675.09 184.484,-8595.38 185.043,-8123.01 185.603,-8033.22 186.162,-7936.76 186.721,-7838.53 187.28,-7622.49 187.84,-7524.5 188.399,-7219.15 188.958,-7010.51 189.517,-6819.18 190.077,-6622.11 190.636,-6514.5 191.195,-6325.25 191.754,-6056.29 192.314,-5882.81 192.873,-5711.11 193.432,-5609.04 193.991,-5438.04 194.551,-5085.48 195.11,-4937.46 195.669,-4793.8 196.228,-4649.37 196.788,-4457.81 197.347,-4372.15 197.906,-4135.88 198.465,-4051.7 199.025,-3962.88 199.584,-3734.99 200.143,-3656.63 200.702,-3447.92 201.262,-3292.82 201.821,-3136.05 202.38,-3066.73 202.939,-2924.13 203.499,-2861.74 204.058,-2611.73 204.617,-2480.35 205.176,-2320.59 205.736,-2133.02 206.295,-2017.59 206.854,-1969.37 207.413,-1921.1 207.973,-1837.31 208.532,-1788.23 209.091,-1737.06 209.65,-1596.68 210.21,-1524.93 210.769,-1424.09 211.328,-1300.63 211.887,-1267.56 212.447,-1203.9 213.006,-1138.11 213.565,-1050.88 214.124,-989.964 214.684,-851.348 215.243,-820.387 215.802,-764.001 216.361,-711.656 216.921,-658.951 217.48,-576.359 218.039,-480.86 218.598,-457.785 219.158,-387.052 219.717,-363.276 220.276,-340.577 220.835,-335.783 221.395,-286.8 221.954,-218.286 222.513,-130.894 223.072,-65.0498 223.632,-70.5804 224.191,-30.2767 224.75,-11.5506 225.309,50.6283 225.869,109.646 226.428,185.283 226.987,218.179 227.546,272.142 228.106,300.21 228.665,387.868 229.224,429.229 229.783,428.144 230.343,432.428 230.902,460.005 231.461,464.867 232.02,488.05 232.58,471.894 233.139,493.478 233.698,515.737 234.257,538.248 234.817,580.604 235.376,621.497 235.935,623.142 236.494,644.297 237.054,621.613 237.613,638.589 238.172,678.324 238.731,696.042 239.291,709.308 239.85,687.737 240.409,688.3 240.968,708.716 241.528,746.816 242.087,761.6 242.646,796.843 243.205,757.826 243.765,777.307 244.324,808.735 244.883,824.057 245.442,817.129 246.002,817.276 246.561,830.715 247.12,843.717 247.679,876.057 248.239,905.049 248.798,914.827 249.357,929.065 249.916,937.237 250.476,964.19 251.035,969.195 251.594,960.208 252.153,935.375 252.713,929.585 253.272,939.235 253.831,934.195 254.39,927.315 254.95,941.15 255.509,919.906 256.068,916.632 256.627,925.698 257.187,944.186 257.746,956.888 258.305,955.438 258.864,954.798 259.424,1018.18 259.983,939.302 260.542,938.047 261.101,918.368 261.661,884.191 262.22,903.316 262.779,905.138 263.338,923.708 263.898,968.253 264.457,968.692 265.016,950.533 265.575,949.588 266.135,944.579 266.694,912.894 267.253,962.573 267.812,962.669 268.372,999.605 268.931,1013.39 269.49,992.718 270.049,1019.22 270.609,999.277 271.168,1014.01 271.727,1013.4 272.286,1021.27 272.846,1015.66 273.405,1027.55 273.964,1039.31 274.523,1083.65 275.083,1078.37 275.642,1050.92 276.201,1076.17 276.76,1063.45 277.32,1089.25 277.879,1115.45 278.438,1157.78 278.997,1163.74 279.557,1153.66 280.116,1141.08 280.675,1165.72 281.234,1135.85 281.794,1124.99 282.353,1097.18 282.912,1070.4 283.471,1044.87 284.031,1052.24 284.59,1061.88 285.149,1104.38 285.708,1108.69 286.268,1080.61 286.827,1086.86 287.386,1078.83 287.945,1101.25 288.505,1092.83 289.064,1082.94 289.623,1092.19 290.182,1067.02 290.742,1075.78 291.301,1099.25 291.86,1093.38 292.419,1062.65 292.979,1019.92 293.538,1048.47 294.097,1074.45 294.656,1031.39 295.216,1058.19 295.775,1085.33 296.334,1090.92 296.893,1098.71 297.453,1086.56 298.012,1123.39 298.571,1160.43 299.13,1146.53 299.69,1102.75 300.249,1090.65 300.808,1063.09 301.368,1055.3 301.927,1026.79 302.486,1034.48 303.045,994.626 303.605,987.797 304.164,979.914 304.723,960.793 305.282,988.291 305.842,984.741 306.401,1078.1 306.96,1072.25 307.519,1059.69 308.079,1052.87 308.638,1045.87 309.197,1055.16 309.756,1061.8 310.316,1066.84 310.875,1058.11 311.434,1049.56 311.993,1038.02 312.553,1027.04 313.112,969.913 313.671,949.638 314.23,947.113 314.79,925.972 315.349,969.1 315.908,997.05 316.467,991.402 317.027,981.343 317.586,980.283 318.145,954.257 318.704,996.281 319.264,969.602 319.823,963.916 320.382,990.248 320.941,967.342 321.501,961.487 322.06,969.927 322.619,963.276 323.178,939.341 323.738,898.104 324.297,879.278 324.856,906.001 325.415,906.337 325.975,905.23 326.534,903.679 327.093,904.86 327.652,886.716 328.212,884.656 328.771,914.667 329.33,915.057 329.889,945.326 330.449,947.189 331.008,911.182 331.567,925.21 332.126,952.298 332.686,944.491 333.245,924.318 333.804,906.181 334.363,940.065 334.923,934.022 335.482,964.449 336.041,944.999 336.6,953.175 337.16,930.348 337.719,942.213 338.278,935.177 338.837,929.555 339.397,942.28 339.956,935.414 340.515,948.374 341.074,944.086 341.634,940.255 342.193,919.674 342.752,933.26 343.311,959.747 343.871,941.275 344.43,967.653 344.989,977.797 345.548,985.554 346.108,990.886 346.667,964.461 347.226,957.385 347.785,917.001 348.345,913.676 348.904,926.577 349.463,922.353 350.022,933.407 350.582,975.472 351.141,918.848 351.7,933.208 352.259,906.058 352.819,883.862 353.378,910.154 353.937,950.263 354.496,941.717 355.056,888.799 355.615,885.97 356.174,854.089 356.733,868.883 357.293,885.448 357.852,916.019 358.411,895.232 358.97,890.912 359.53,890.064 360.089,889.625 360.648,899.036 361.207,912.67 361.767,910.851 362.326,905.562 362.885,932.913 363.444,909.321 364.004,883.972 364.563,897.529 365.122,878.646 365.681,875.272 366.241,857.329 366.8,840.761 367.359,824.146 367.918,820.561 368.478,840.591 369.037,856.84 369.596,871.185 370.155,899.131 370.715,911.083 371.274,921.205 371.833,914.745 372.392,889.574 372.952,920.641 373.511,895.741 374.07,922.16 374.629,898.484 375.189,874.774 375.748,854.615 376.307,818.447 376.866,816.971 377.426,816.221 377.985,800.494 378.544,783.468 379.103,800.768 379.663,800.804 380.222,803.988 380.781,798.863 381.34,794.903 381.9,774.533 382.459,743.743 383.018,780.594 383.577,777.803 384.137,730.958 384.696,699.482 385.255,733.669 385.814,718.25 386.374,736.11 386.933,721.268 387.492,746.597 388.051,731.559 388.611,719.515 389.17,738.726 389.729,738.138 390.288,742.359 390.848,746.902 391.407,752.578 391.966,755.13 392.525,756.677 393.085,756.325 393.644,787.637 394.203,772.12 394.762,742.283 395.322,729.78 395.881,734.543 396.44,756.47 396.999,742.24 397.559,763.327 398.118,761.911 398.677,779.199 399.236,812.198 399.796,779.474 400.355,782.537 400.914,785.925 401.473,786.186 402.033,768.487 402.592,783.465 403.151,764.067 403.71,796.739 404.27,811.153 404.829,811.514 405.388,762.301 405.947,784.654 406.507,815.721 407.066,815.127 407.625,845.357 408.184,844.01 408.744,839.044 409.303,835.478 409.862,833.154 410.421,831.837 410.981,848.335 411.54,848.397 412.099,847.032 412.658,861.439 413.218,838.531 413.777,833.02 414.336,843.708 414.895,825.345 415.455,834.717 416.014,833.51 416.573,846.433 417.132,890.666 417.692,899.975 418.251,888.698 418.81,882.612 419.369,842.327 419.929,834.35 420.488,831.898 421.047,828.953 421.606,825.506 422.166,806.712 422.725,790.254 423.284,771.817 423.843,753.879 424.403,801.259 424.962,763.72 425.521,774.802 426.08,789.088 426.64,786.019 427.199,753.088 427.758,785.109 428.318,753.073 428.877,719.976 429.436,735.609 429.995,738.746 430.555,739.985 431.114,730.36 431.673,763.78 432.232,814.783 432.792,785.231 433.351,784.202 433.91,751.117 434.469,771.543 435.029,770.058 435.588,785.603 436.147,767.692 436.706,768.256 437.266,767.391 437.825,786.38 438.384,802.371 438.943,832.717 439.503,812.372 440.062,825.196 440.621,823.082 441.18,818.37 441.74,831.463 442.299,844.206 442.858,854.653 443.417,885.459 443.977,879.145 444.536,940.707 445.095,930.699 445.654,923.613 446.214,882.503 446.773,843.767 447.332,839.186 447.891,819.137 448.451,847.965 449.01,857.441 449.569,851.877 450.128,815.773 450.688,779.241 451.247,764.808 451.806,763.715 452.365,750.835 452.925,765.475 453.484,765.297 454.043,765.952 454.602,768.721 455.162,782.635 455.721,780.176 456.28,761.376 456.839,760.367 457.399,761.547 457.958,727.976 458.517,729.464 459.076,713.015 459.636,700.056 460.195,699.8 460.754,718.782 461.313,749.935 461.873,737.896 462.432,752.427 462.991,749.354 463.55,767.122 464.11,765.148 464.669,747.884 465.228,762.034 465.787,761.35 466.347,756.819 466.906,753.665 467.465,737.759 468.024,737.903 468.584,738.728 469.143,722.252 469.702,739.511 470.261,756.123 470.821,754.236 471.38,738.015 471.939,741.704 472.498,710.845 473.058,729.307 473.617,742.259 474.176,709.842 474.735,742.95 475.295,761.612 475.854,757.159 476.413,770.368 476.972,770.309 477.532,785.458 478.091,750.466 478.65,798.413 479.209,809.611 479.769,805.595 480.328,803.597 480.887,765.197 481.446,768.065 482.006,781.569 482.565,731.718 483.124,733.148 483.683,746.781 484.243,731.414 484.802,748.802 485.361,747.993 485.92,730.097 486.48,728.323 487.039,743.848 487.598,742.554 488.157,743.919 488.717,729.33 489.276,762.552 489.835,794.691 490.394,823.051 490.954,834.806 491.513,832.512 492.072,797.343 492.631,793.251 493.191,774.601 493.75,772.761 494.309,739.182 494.868,707 495.428,708.479 495.987,711.931 496.546,730.043 497.105,696.598 497.665,681.166 498.224,683.247 498.783,686.302 499.342,691.435 499.902,677.464 500.461,666.545 501.02,684.841 501.579,684.415 502.139,671.015 502.698,680.289 503.257,715.07 503.816,719.933 504.376,753.113 504.935,770.507 505.494,767.436 506.053,765.32 506.613,830.382 507.172,841.469 507.731,817.745 508.29,812.076 508.85,808.837 509.409,789.018 509.968,787.561 510.527,815.237 511.087,814.338 511.646,859.73 512.205,853.282 512.764,826.133 513.324,775.353 513.883,772.089 514.442,768.895 515.001,754.039 515.561,736.22 516.12,737.56 516.679,719.882 517.238,705.618 517.798,707.447 518.357,710.622 518.916,726.144 519.475,708.971 520.035,692.758 520.594,692.312 521.153,711.647 521.712,745.901 522.272,760.248 522.831,775.182 523.39,739.321 523.949,738.947 524.509,754.455 525.068,737.548 525.627,704.46 526.186,736.351 526.746,749.162 527.305,793.094 527.864,771.785 528.423,785.595 528.983,747.749 529.542,778.783 530.101,742.614 530.66,723.408 531.22,739.599 531.779,736.295 532.338,716.248 532.897,686.696 533.457,670.192 534.016,655.865 534.575,645.27 535.134,666.237 535.694,683.536 536.253,700.969 536.812,733.298 537.371,719.905 537.931,701.721 538.49,720.997 539.049,706.285 539.608,735.237 540.168,765.045 540.727,744.869 541.286,756.873 541.845,770.727 542.405,801.665 542.964,799.471 543.523,777.235 544.082,723.042 544.642,725.095 545.201,742.886 545.76,706.518 546.319,704.602 546.879,706.014 547.438,721.29 547.997,703.854 548.556,691.988 549.116,695.296 549.675,713.467 550.234,729.328 550.793,715.265 551.353,733.03 551.912,717.071 552.471,715.652 553.031,701.296 553.59,700.823 554.149,718.757 554.708,716.781 555.268,747.978 555.827,745.947 556.386,725.887 556.945,760.837 557.505,792.106 558.064,771.877 558.623,785.376 559.182,799.711 559.742,780.288 560.301,777.003 560.86,757.722 561.419,758.166 561.979,772.327 562.538,768.433 563.097,798.544 563.656,730.313 564.216,699.726 564.775,716.972 565.334,717.23 565.893,715.119 566.453,744.353 567.012,759.541 567.571,744.919 568.13,773.157 568.69,785.922 569.249,778.837 569.808,793.028 570.367,785.731 570.927,801.317 571.486,798.37 572.045,777.769 572.604,775.116 573.164,753.114 573.723,798.651 574.282,777.898 574.841,755.684 575.401,707.675 575.96,692.075 576.519,658.405 577.078,664.721 577.638,716.323 578.197,731.939 578.756,697.554 579.315,699.573 579.875,650.237 580.434,652.168 580.993,654.344 581.552,642.601 582.112,644.084 582.671,615.514 583.23,666.001 583.789,649.377 584.349,653.19 584.908,670.564 585.467,671.836 586.026,672.619 586.586,674.859 587.145,726.368 587.704,757.357 588.263,739.057 588.823,786.188 589.382,799.653 589.941,809.685 590.5,822.19 591.06,794.351 591.619,772.756 592.178,797.702 592.737,791.604 593.297,817.81 593.856,777.132 594.415,759.038 594.974,755.156 595.534,687.619 596.093,654.95 596.652,625.374 597.211,615.606 597.771,638.775 598.33,661.63 598.889,681.269 599.448,667.312 600.008,672.015 600.567,720.672 601.126,689.785 601.685,691.928 602.245,693.475 602.804,705.124 603.363,689.496 603.922,705.151 604.482,717.624 605.041,750.824 605.6,747.756 606.159,744.171 606.719,738.785 607.278,718.974 607.837,719.643 608.396,719.162 608.956,718.515 609.515,712.195 610.074,726.036 610.633,694.598 611.193,711.677 611.752,709.546 612.311,708.199 612.87,694.186 613.43,694.393 613.989,693.933 614.548,695.261 615.107,680.951 615.667,715.226 616.226,701.153 616.785,698.968 617.344,700.35 617.904,734.222 618.463,794.773 619.022,759.622 619.581,770.28 620.141,749.253 620.7,778.565 621.259,792.415 621.818,789.348 622.378,783.798 622.937,765.899 623.496,758.314 624.055,711.133 624.615,694.989 625.174,675.885 625.733,679.367 626.292,680.551 626.852,651.802 627.411,680.932 627.97,698.77 628.529,714.214 629.089,716.499 629.648,698.485 630.207,712.915 630.766,725.937 631.326,726.629 631.885,805.709 632.444,799.795 633.003,807.061 633.563,788.152 634.122,766.578 634.681,730.341 635.24,710.531 635.8,693.094 636.359,707.895 636.918,789.736 637.477,750.803 638.037,730.611 638.596,680.016 639.155,662.222 639.714,631.641 640.274,652.243 640.833,652.864 641.392,673.229 641.951,658.111 642.511,661.939 643.07,646.812 643.629,632.872 644.188,620.439 644.748,642.537 645.307,678.03 645.866,662.39 646.425,666.936 646.985,651.442 647.544,656.24 648.103,608.239 648.662,613.327 649.222,618.915 649.781,623.549 650.34,627.74 650.899,665.979 651.459,715.982 652.018,748.213 652.577,745.976 653.136,745.31 653.696,740.59 654.255,718.106 654.814,716.28 655.373,714.826 655.933,761.111 656.492,773.204 657.051,768.673 657.61,767.407 658.17,751.107 658.729,727.542 659.288,725.197 659.847,724.896 660.407,719.547 660.966,734.391 661.525,733.509 662.084,717.133 662.644,718.209 663.203,749.178 663.762,729.589 664.321,744.456 664.881,744.269 665.44,742.174 665.999,722.867 666.558,689.827 667.118,672.165 667.677,689.287 668.236,723.543 668.795,705.162 669.355,717.286 669.914,715.247 670.473,734.459 671.032,716.002 671.592,728.593 672.151,739.303 672.71,718.374 673.269,733.68 673.829,765.792 674.388,745.72 674.947,745.874 675.506,759.073 676.066,735.476 676.625,751.284 677.184,765.974 677.743,746.799 678.303,711.637 678.862,678.284 679.421,680.408 679.981,650.793 680.54,653.738 681.099,654.995 681.658,621.635 682.218,641.354 682.777,693.556 683.336,680.384 683.895,663.458 684.455,631.201 685.014,618.838 685.573,606.85 686.132,597.083 686.692,585.132 687.251,592.028 687.81,566.439 688.369,604.362 688.929,640.963 689.488,643.588 690.047,661.882 690.606,665.038 691.166,669.141 691.725,675.596 692.284,708.701 692.843,675.128 693.403,692.003 693.962,709.897 694.521,706.947 695.08,693.467 695.64,694.128 696.199,726.084 696.758,723.72 697.317,721.123 697.877,721.766 698.436,723.762 698.995,752.067 699.554,747.841 700.114,762.933 700.673,743.067 701.232,709.371 701.791,708.3 702.351,707.766 702.91,676.217 703.469,691.995 704.028,691.687 704.588,679.613 705.147,666.353 705.706,668.003 706.265,669.928 706.825,672.899 707.384,720.965 707.943,718.025 708.502,635.635 709.062,624.432 709.621,628.679 710.18,632.902 710.739,648.4 711.299,646.674 711.858,680.47 712.417,697.785 712.976,700.278 713.536,684.801 714.095,718.179 714.654,682.58 715.213,652.17 715.773,606.346 716.332,594.542 716.891,567.84 717.45,506.978 718.01,497.637 718.569,509.984 719.128,569.42 719.687,575.888 720.247,565.081 720.806,571.516 721.365,566.85 721.924,622.801 722.484,611.065 723.043,599.819 723.602,573.89 724.161,580.132 724.721,587.66 725.28,561.465 725.839,584.233 726.398,606.599 726.958,610.993 727.517,615.462 728.076,671.557 728.635,675.512 729.195,660.681 729.754,661.754 730.313,728.256 730.872,758.732 731.432,754.67 731.991,752.19 732.55,721.106 733.109,705.1 733.669,705.795 734.228,688.39 734.787,685.609 735.346,686.18 735.906,704.023 736.465,688.889 737.024,742.616 737.583,752.571 738.143,728.762 738.702,756.689 739.261,768.316 739.82,764.591 740.38,743.994 740.939,743.54 741.498,741.572 742.057,725.865 742.617,742.79 743.176,769.766 743.735,749.709 744.294,749.75 744.854,778.811 745.413,808.48 745.972,819.862 746.531,780.797 747.091,790.928 747.65,784.882 748.209,808.26 748.768,769.763 749.328,761.998 749.887,755.431 750.446,719.708 751.005,750.382 751.565,777.361 752.124,739.544 752.683,703.173 753.242,718.898 753.802,747.224 754.361,714.164 754.92,680.626 755.479,680.754 756.039,627.547 756.598,661.763 757.157,677.883 757.716,693.02 758.276,662.861 758.835,664.818 759.394,617.193 759.953,653.585 760.513,627.061 761.072,612.792 761.631,615.29 762.19,604.738 762.75,610.665 763.309,563.774 763.868,570.304 764.427,606.338 764.987,644.226 765.546,674.485 766.105,706.013 766.664,701.859 767.224,698.433 767.783,715.346 768.342,698.13 768.901,713.716 769.461,740.197 770.02,769.726 770.579,750.454 771.138,745.582 771.698,742.272 772.257,754.808 772.816,769.302 773.375,765.502 773.935,749.638 774.494,759.936 775.053,757.311 775.612,753.573 776.172,767.556 776.731,781.556 777.29,793.314 777.849,787.402 778.409,848.509 778.968,853.597 779.527,844.941 780.086,853.462 780.646,842.763 781.205,834.337 781.764,796.576 782.323,791.498 782.883,768.263 783.442,763.624 784.001,774.619 784.56,752.307 785.12,762.423 785.679,773.096 786.238,724.156 786.797,706.875 787.357,705.048 787.916,690.164 788.475,689.558 789.034,677.279 789.594,676.283 790.153,610.916 790.712,617.367 791.271,621.199 791.831,609.422 792.39,627.45 792.949,614.237 793.508,636.466 794.068,637.63 794.627,672.829 795.186,657.79 795.745,642.623 796.305,614.356 796.864,604.2 797.423,593.169 797.982,626.424 798.542,613.074 799.101,571.811 799.66,562.695 800.219,572.641 800.779,593.377 801.338,599.463 801.897,586.435 802.456,590.43 803.016,580.587 803.575,607.933 804.134,613.865 804.693,614.414 805.253,636.373 805.812,686.279 806.371,685.728 806.931,701.196 807.49,716.91 808.049,681.855 808.608,683.759 809.168,683.285 809.727,699.11 810.286,700.278 810.845,718.978 811.405,732.163 811.964,730.153 812.523,745.817 813.082,745.755 813.642,725.919 814.201,708.578 814.76,744.082 815.319,740.744 815.879,740.937 816.438,706.624 816.997,739.086 817.556,721.063 818.116,732.383 818.675,730.985 819.234,777.594 819.793,805.273 820.353,778.427 820.912,786.005 821.471,766.728 822.03,763.905 822.59,793.086 823.149,770.839 823.708,764.977 824.267,778.452 824.827,778.789 825.386,777.361 825.945,754.88 826.504,749.968 827.064,714.261 827.623,712.396 828.182,730.613 828.741,678.856 829.301,681.817 829.86,666.863 830.419,667.196 830.978,685.589 831.538,690.166 832.097,702.736 832.656,717.86 833.215,747.761 833.775,740.877 834.334,736.702 834.893,735.887 835.452,716.546 836.012,697.526 836.571,663.656 837.13,666.756 837.689,665.684 838.249,634.448 838.808,640.936 839.367,657.835 839.926,609.534 840.486,597.408 841.045,587.124 841.604,626.026 842.163,599.017 842.723,639.22 843.282,674.066 843.841,676.548 844.4,710.955 844.96,746.13 845.519,758.808 846.078,754.811 846.637,702.204 847.197,682.288 847.756,682.456 848.315,637.031 848.874,638.997 849.434,643.313 849.993,678.969 850.552,660.156 851.111,662.364 851.671,599.022 852.23,600.199 852.789,621.611 853.348,607.187 853.908,595.309 854.467,567.435 855.026,573.618 855.585,612.695 856.145,614.359 856.704,648.693 857.263,599.065 857.822,602.071 858.382,607.721 858.941,610.501 859.5,648.48 860.059,632.634 860.619,633.228 861.178,636.376 861.737,605.639 862.296,623.625 862.856,642.294 863.415,608.531 863.974,614.42 864.533,616.702 865.093,623.568 865.652,627.298 866.211,610.815 866.77,600.064 867.33,618.844 867.889,640.323 868.448,659.287 869.007,676.421 869.567,680.34 870.126,682.177 870.685,715.024 871.244,699.806 871.804,699.249 872.363,717.685 872.922,719.345 873.481,704.393 874.041,706.359 874.6,705.507 875.159,690.561 875.718,707.804 876.278,738.247 876.837,770.531 877.396,746.386 877.955,741.072 878.515,724.699 879.074,739.899 879.633,784.895 880.192,794.612 880.752,770.333 881.311,767.716 881.87,747.723 882.429,726.965 882.989,725.3 883.548,702.593 884.107,698.891 884.666,732.451 885.226,746.43 885.785,757.067 886.344,736.09 886.903,718.91 887.463,707.64 888.022,721.244 888.581,700.358 889.14,716.065 889.7,713.282 890.259,712.759 890.818,697.389 891.377,696.325 891.937,651.287 892.496,653.68 893.055,651.938 893.614,685.856 894.174,714.621 894.733,699.292 895.292,731.577 895.851,730.822 896.411,715.397 896.97,698.892 897.529,729.637 898.088,724.951 898.648,723.295 899.207,705.934 899.766,671.204 900.325,689.254 900.885,671.843 901.444,703.171 902.003,669.993 902.562,670.98 903.122,686.929 903.681,687.442 904.24,684.847 904.799,700.786 905.359,715.355 905.918,730.64 906.477,729.689 907.036,747.938 907.596,732.499 908.155,729.457 908.714,728.893 909.273,771.674 909.833,733.752 910.392,732.345 910.951,712.755 911.51,710.961 912.07,709.59 912.629,706.493 913.188,676.183 913.747,678.828 914.307,678.939 914.866,664.717 915.425,694.936 915.984,674.542 916.544,690.907 917.103,658.546 917.662,628.141 918.221,599.886 918.781,604.784 919.34,623.548 919.899,625.011 920.458,645.054 921.018,711.441 921.577,709.783 922.136,725.928 922.695,706.591 923.255,708.014 923.814,674.116 924.373,674.373 924.932,687.737 925.492,754.885 926.051,750.94 926.61,733.169 927.169,684.055 927.729,698.6 928.288,682.2 928.847,666.328 929.406,653.227 929.966,620.301 930.525,642.366 931.084,678.238 931.644,692.972 932.203,688.272 932.762,672.218 933.321,676.103 933.881,641.011 934.44,660.708 934.999,659.102 935.558,676.741 936.118,681.795 936.677,662.975 937.236,630.282 937.795,680.591 938.355,663.609 938.914,682.041 939.473,679.907 940.032,661.924 940.592,663.532 941.151,681.268 941.71,680.709 942.269,662.378 942.829,680.627 943.388,683.571 943.947,687.605 944.506,701.109 945.066,751.267 945.625,750.644 946.184,749.848 946.743,748.296 947.303,745.645 947.862,726.809 948.421,745.43 948.98,725.444 949.54,775.093 950.099,741.196 950.658,735.468 951.217,736.071 951.777,728.781 952.336,742.756 952.895,735.975 953.454,734.327 954.014,734.041 954.573,714.123 955.132,712.348 955.691,713.632 956.251,681.496 956.81,649.965 957.369,651.022 957.928,637.551 958.488,608.011 959.047,595.424 959.606,617.235 960.165,620.434 960.725,606.587 961.284,627.274 961.843,646.341 962.402,646.816 962.962,648.197 963.521,684.585 964.08,699.408 964.639,730.579 965.199,744.548 965.758,739.746 966.317,703.725 966.876,686.701 967.436,703.886 967.995,705.005 968.554,700.925 969.113,718.33 969.673,728.905 970.232,708.143 970.791,706.765 971.35,707.418 971.91,689.562 972.469,640.356 973.028,645.161 973.587,647.298 974.147,648.413 974.706,651.501 975.265,655.288 975.824,657.177 976.384,709.607 976.943,722.132 977.502,721.947 978.061,702.826 978.621,699.239 979.18,713.473 979.739,708.924 980.298,703.474 980.858,671.826 981.417,720.348 981.976,717.658 982.535,750.484 983.095,744.901 983.654,741.478 984.213,719.477 984.772,703.084 985.332,672.787 985.891,675.51 986.45,674.191 987.009,644.845 987.569,649.634 988.128,683.814 988.687,722.306 989.246,673.115 989.806,674.281 990.365,708.019 990.924,709.026 991.483,708.499 992.043,712.015 992.602,665.644 993.161,682.629 993.72,666.131 994.28,700.156 994.839,697.424 995.398,726.646 995.957,673.453 996.517,643.543 997.076,614.442 997.635,649.224 998.194,620.48 998.754,656.39 999.313,658.476 999.872,646.052 1000.43,627.645 1000.99,645.003 1001.55,631.593 1002.11,648.056 1002.67,646.399 1003.23,679.994 1003.79,668.615 1004.35,671.339 1004.91,672.361 1005.46,656.035 1006.02,656.866 1006.58,669.376 1007.14,685.794 1007.7,702.079 1008.26,683.864 1008.82,683.024 1009.38,664.911 1009.94,629.67 1010.5,630.996 1011.06,650.818 1011.62,633.412 1012.18,636.928 1012.73,656.701 1013.29,709.599 1013.85,706.284 1014.41,704.811 1014.97,671.68 1015.53,670.313 1016.09,650.898 1016.65,651.226 1017.21,649.145 1017.77,682.037 1018.33,648.392 1018.89,686.774 1019.45,688.037 1020.01,673.45 1020.56,640.887 1021.12,594.49 1021.68,613.821 1022.24,618.851 1022.8,652.155 1023.36,668.72 1023.92,701.397 1024.48,717.015 1025.04,713.385 1025.6,759.627 1026.16,773.561 1026.72,785.173 1027.28,778.074 1027.83,770.852 1028.39,815.169 1028.95,793.663 1029.51,821.014 1030.07,812.684 1030.63,870.124 1031.19,874.745 1031.75,847.337 1032.31,839.136 1032.87,911.708 1033.43,914.194 1033.99,918.027 1034.55,924.246 1035.1,894.055 1035.66,889.805 1036.22,848.836 1036.78,829.517 1037.34,776.969 1037.9,735.836 1038.46,734.463 1039.02,718.556 1039.58,687.397 1040.14,653.432 1040.7,655.866 1041.26,641.896 1041.82,627.538 1042.38,648.742 1042.93,649.135 1043.49,604.337 1044.05,544.146 1044.61,598.222 1045.17,622.291 1045.73,626.875 1046.29,663.373 1046.85,683.971 1047.41,663.013 1047.97,647.08 1048.53,650.52 1049.09,631.062 1049.65,652.766 1050.2,620.803 1050.76,640.378 1051.32,691.971 1051.88,692.692 1052.44,694.648 1053,693.725 1053.56,644.716 1054.12,664.361 1054.68,666.914 1055.24,683.641 1055.8,717.55 1056.36,680.481 1056.92,681.194 1057.48,681.653 1058.03,680.321 1058.59,679.796 1059.15,664.87 1059.71,650.511 1060.27,670.98 1060.83,671.992 1061.39,642.336 1061.95,706.282 1062.51,688.697 1063.07,638.752 1063.63,643.224 1064.19,661.166 1064.75,678.063 1065.3,696.762 1065.86,729.06 1066.42,721.713 1066.98,701.864 1067.54,712.868 1068.1,729.739 1068.66,694.243 1069.22,710.356 1069.78,726.433 1070.34,710.065 1070.9,707.553 1071.46,670.137 1072.02,689.892 1072.57,724.124 1073.13,724.318 1073.69,721.617 1074.25,700.898 1074.81,696.157 1075.37,727.849 1075.93,757.407 1076.49,769.628 1077.05,752.927 1077.61,719.826 1078.17,686.282 1078.73,651.846 1079.29,689.549 1079.85,686.468 1080.4,673.557 1080.96,690.959 1081.52,677.139 1082.08,661.044 1082.64,643.603 1083.2,659.992 1083.76,646.883 1084.32,643.862 1084.88,662.776 1085.44,678.774 1086,682.17 1086.56,680.936 1087.12,665.494 1087.67,717.638 1088.23,750.795 1088.79,731.791 1089.35,683.531 1089.91,653.823 1090.47,704.479 1091.03,685.404 1091.59,700.191 1092.15,747.431 1092.71,760.486 1093.27,712.347 1093.83,709.799 1094.39,674.763 1094.94,653.649 1095.5,655.77 1096.06,626.695 1096.62,629.416 1097.18,633.952 1097.74,621.678 1098.3,641.613 1098.86,629.268 1099.42,618.594 1099.98,646.317 1100.54,618.271 1101.1,668.31 1101.66,671.161 1102.22,670.258 1102.77,609.167 1103.33,628.554 1103.89,615.283 1104.45,571.392 1105.01,609.346 1105.57,595.29 1106.13,602.435 1106.69,625.922 1107.25,645.849 1107.81,646.646 1108.37,647.377 1108.93,631.686 1109.49,650.737 1110.04,654.016 1110.6,639.531 1111.16,646.067 1111.72,616.799 1112.28,636.802 1112.84,637.202 1113.4,642.684 1113.96,643.859 1114.52,646.718 1115.08,631.444 1115.64,648.347 1116.2,636.305 1116.76,607.497 1117.31,597.147 1117.87,618.305 1118.43,603.379 1118.99,608.917 1119.55,599.603 1120.11,600.291 1120.67,620.092 1121.23,622.082 1121.79,622.525 1122.35,625.318 1122.91,614.064 1123.47,619.599 1124.03,605.254 1124.59,641.574 1125.14,626.263 1125.7,612.496 1126.26,615.488 1126.82,604.841 1127.38,610.635 1127.94,632.013 1128.5,638.317 1129.06,672.564 1129.62,689.35 1130.18,691.591 1130.74,704.376 1131.3,716.987 1131.86,733.019 1132.41,732.089 1132.97,747.499 1133.53,728.407 1134.09,694.405 1134.65,709.349 1135.21,740.545 1135.77,753.368 1136.33,769.192 1136.89,763.858 1137.45,756.452 1138.01,756.086 1138.57,785.06 1139.13,754.118 1139.68,766.895 1140.24,814.139 1140.8,823.329 1141.36,849.475 1141.92,859.162 1142.48,848.802 1143.04,840.071 1143.6,864.741 1144.16,855.331 1144.72,813.849 1145.28,778.76 1145.84,759.604 1146.4,775.724 1146.96,770.416 1147.51,735.736 1148.07,734.562 1148.63,702.432 1149.19,701.999 1149.75,702.681 1150.31,686.288 1150.87,699.602 1151.43,680.064 1151.99,711.518 1152.55,711.386 1153.11,693.628 1153.67,692.897 1154.23,690.186 1154.78,686.799 1155.34,670.25 1155.9,673.132 1156.46,660.399 1157.02,676.605 1157.58,693.885 1158.14,706.308 1158.7,701.144 1159.26,686.104 1159.82,699.908 1160.38,682.704 1160.94,650.517 1161.5,672.029 1162.05,655.027 1162.61,639.91 1163.17,676.973 1163.73,676.855 1164.29,693.254 1164.85,710.085 1165.41,696.818 1165.97,696.346 1166.53,680.013 1167.09,663.982 1167.65,665.326 1168.21,698.566 1168.77,730.112 1169.33,726.454 1169.88,723.491 1170.44,722.303 1171,720.041 1171.56,689.083 1172.12,672.814 1172.68,736.554 1173.24,733.84 1173.8,734.076 1174.36,746.347 1174.92,712.564 1175.48,710.511 1176.04,754.619 1176.6,733.304 1177.15,729.497 1177.71,692 1178.27,695.543 1178.83,708.956 1179.39,726.734 1179.95,742.071 1180.51,661.193 1181.07,646.987 1181.63,631.578 1182.19,651.434 1182.75,652.773 1183.31,656.665 1183.87,658.368 1184.43,658.263 1184.98,673.236 1185.54,673.093 1186.1,658.092 1186.66,671.542 1187.22,653.748 1187.78,651.637 1188.34,638.33 1188.9,626.367 1189.46,646.714 1190.02,622.945 1190.58,593.508 1191.14,599.113 1191.7,632.478 1192.25,648.112 1192.81,634.213 1193.37,640.328 1193.93,643.037 1194.49,664.11 1195.05,650.986 1195.61,652.915 1196.17,637.714 1196.73,706.388 1197.29,685.304 1197.85,668.765 1198.41,651.701 1198.97,652.702 1199.52,639.264 1200.08,644.288 1200.64,628.945 1201.2,632.985 1201.76,649.975 1202.32,631.715 1202.88,632.865 1203.44,652.458 1204,650.768 1204.56,600.595 1205.12,588.438 1205.68,609.554 1206.24,599.498 1206.8,585.979 1207.35,606.287 1207.91,577.583 1208.47,565.468 1209.03,553.742 1209.59,574.817 1210.15,566.649 1210.71,575.097 1211.27,564.409 1211.83,536.942 1212.39,581.567 1212.95,604.213 1213.51,591.985 1214.07,578.688 1214.62,580.687 1215.18,548.471 1215.74,584.919 1216.3,609.25 1216.86,616.066 1217.42,604.88 1217.98,591.68 1218.54,615.903 1219.1,653.867 1219.66,688.732 1220.22,704.948 1220.78,721.408 1221.34,703.332 1221.89,748.223 1222.45,746.119 1223.01,742.129 1223.57,722.744 1224.13,738.004 1224.69,731.23 1225.25,727.33 1225.81,711.823 1226.37,709.876 1226.93,759.023 1227.49,724.72 1228.05,724.033 1228.61,706.779 1229.17,691.076 1229.72,691.547 1230.28,740.588 1230.84,754.583 1231.4,716.59 1231.96,733.593 1232.52,718.128 1233.08,751.338 1233.64,749.198 1234.2,762.208 1234.76,742.515 1235.32,724.731 1235.88,721.896 1236.44,721.689 1236.99,723.125 1237.55,722.719 1238.11,724.036 1238.67,706.347 1239.23,671.211 1239.79,703.664 1240.35,721.098 1240.91,767.293 1241.47,763.784 1242.03,778.468 1242.59,769.668 1243.15,761.925 1243.71,788.755 1244.26,772.282 1244.82,771.656 1245.38,749.476 1245.94,746.896 1246.5,728.044 1247.06,758.527 1247.62,754.84 1248.18,749.788 1248.74,712.476 1249.3,708.553 1249.86,723.514 1250.42,736.96 1250.98,765.345 1251.54,760.444 1252.09,791.769 1252.65,770.498 1253.21,765.113 1253.77,757.91 1254.33,766.183 1254.89,765.377 1255.45,778.404 1256.01,754.777 1256.57,783.84 1257.13,790.764 1257.69,815.634 1258.25,777.148 1258.81,693.188 1259.36,694.3 1259.92,676.533 1260.48,657.998 1261.04,670.999 1261.6,674.606 1262.16,674.664 1262.72,658.029 1263.28,622.314 1263.84,626.028 1264.4,577.747 1264.96,566.617 1265.52,538.248 1266.08,561.584 1266.63,581.065 1267.19,569.105 1267.75,591.602 1268.31,612.505 1268.87,617.575 1269.43,637.65 1269.99,687.854 1270.55,672.734 1271.11,688.147 1271.67,734.247 1272.23,686.45 1272.79,674.195 1273.35,674.599 1273.91,705.751 1274.46,669.736 1275.02,736.307 1275.58,765.182 1276.14,777.594 1276.7,791.268 1277.26,769.396 1277.82,766.061 1278.38,727.942 1278.94,726.295 1279.5,727.334 1280.06,710.193 1280.62,660.826 1281.18,664.342 1281.73,650.565 1282.29,637.93 1282.85,607.989 1283.41,612.359 1283.97,617.836 1284.53,650.607 1285.09,638.177 1285.65,610.344 1286.21,633.836 1286.77,637.925 1287.33,639.534 1287.89,656.638 1288.45,675.085 1289,645.251 1289.56,613.53 1290.12,601.514 1290.68,635.705 1291.24,656.232 1291.8,678.525 1292.36,661.335 1292.92,660.085 1293.48,673.936 1294.04,627.224 1294.6,600.317 1295.16,572.06 1295.72,557.01 1296.28,566.044 1296.83,619.05 1297.39,608.454 1297.95,599.707 1298.51,601.975 1299.07,622.859 1299.63,626.146 1300.19,647.109 1300.75,651.104 1301.31,652.617 1301.87,654.051 1302.43,609.537 1302.99,646.997 1303.55,648.754 1304.1,652.047 1304.66,653.949 1305.22,652.275 1305.78,652.407 1306.34,649.848 1306.9,633.838 1307.46,618.134 1308.02,607.295 1308.58,613.693 1309.14,631.647 1309.7,653.284 1310.26,673.78 1310.82,688.836 1311.38,703.032 1311.93,731.794 1312.49,742.87 1313.05,711.329 1313.61,693.89 1314.17,708.709 1314.73,719.886 1315.29,739.131 1315.85,742.381 1316.41,787.415 1316.97,768.309 1317.53,780.02 1318.09,776.675 1318.65,769.839 1319.2,730.275 1319.76,745.016 1320.32,724.258 1320.88,734.305 1321.44,728.431 1322,741.087 1322.56,724.735 1323.12,705.326 1323.68,706.041 1324.24,702.892 1324.8,717.82 1325.36,698.125 1325.92,725.015 1326.47,706.81 1327.03,702.155 1327.59,683.197 1328.15,733.344 1328.71,698.552 1329.27,726.25 1329.83,721.686 1330.39,716.574 1330.95,682.603 1331.51,665.058 1332.07,663.676 1332.63,682.111 1333.19,683.285 1333.75,703.468 1334.3,733.899 1334.86,731.095 1335.42,747.406 1335.98,743.08 1336.54,704.311 1337.1,673.739 1337.66,655.576 1338.22,639.961 1338.78,628.309 1339.34,648.212 1339.9,649.804 1340.46,621.296 1341.02,629.295 1341.57,646.198 1342.13,630.994 1342.69,635.763 1343.25,620.912 1343.81,620.89 1344.37,576.483 1344.93,578.798 1345.49,582.171 1346.05,572.838 1346.61,561.738 1347.17,600.265 1347.73,605.74 1348.29,611.284 1348.84,633.611 1349.4,590.994 1349.96,678.1 1350.52,664.605 1351.08,670.369 1351.64,690.112 1352.2,687.555 1352.76,683.93 1353.32,721.062 1353.88,721.348 1354.44,737.849 1355,723.516 1355.56,727.415 1356.12,723.778 1356.67,720.482 1357.23,731.898 1357.79,748.41 1358.35,743.824 1358.91,723.689 1359.47,786.748 1360.03,747.52 1360.59,745.234 1361.15,759.471 1361.71,757.817 1362.27,770.384 1362.83,797.782 1363.39,822.483 1363.94,834.585 1364.5,845.662 1365.06,854.488 1365.62,845.391 1366.18,866.948 1366.74,906.036 1367.3,907.608 1367.86,881.842 1368.42,855.877 1368.98,847.768 1369.54,819.444 1370.1,809.789 1370.66,799.598 1371.21,775.976 1371.77,770.199 1372.33,751.569 1372.89,736.225 1373.45,733.531 1374.01,728.739 1374.57,744.016 1375.13,740.613 1375.69,753.545 1376.25,731.345 1376.81,697.231 1377.37,681.777 1377.93,699.084 1378.49,697.301 1379.04,680.654 1379.6,682.8 1380.16,682.752 1380.72,717.245 1381.28,667.749 1381.84,652.631 1382.4,634.749 1382.96,621.464 1383.52,624.135 1384.08,627.021 1384.64,644.657 1385.2,613.418 1385.76,598.696 1386.31,607.335 1386.87,611.916 1387.43,616.019 1387.99,633.98 1388.55,604.387 1389.11,613.901 1389.67,620.733 1390.23,572.384 1390.79,611.769 1391.35,649.214 1391.91,634.123 1392.47,634.067 1393.03,621.778 1393.58,611.008 1394.14,614.796 1394.7,604.241 1395.26,592.536 1395.82,565.675 1396.38,556.868 1396.94,578.735 1397.5,633.283 1398.06,616.972 1398.62,636.343 1399.18,606.503 1399.74,609.849 1400.3,629.95 1400.86,648.866 1401.41,663.575 1401.97,647.053 1402.53,663.536 1403.09,665.278 1403.65,685.419 1404.21,685.44 1404.77,719.021 1405.33,749.275 1405.89,760.43 1406.45,757.871 1407.01,752.469 1407.57,749.537 1408.13,777.803 1408.68,806.136 1409.24,815.625 1409.8,806.565 1410.36,812.893 1410.92,773.703 1411.48,770.796 1412.04,781.926 1412.6,791.248 1413.16,783.624 1413.72,794.722 1414.28,771.574 1414.84,766.477 1415.4,744.297 1415.95,755.673 1416.51,753.787 1417.07,748.629 1417.63,759.312 1418.19,724.448 1418.75,718.109 1419.31,717.831 1419.87,730.673 1420.43,696.426 1420.99,693.762 1421.55,693.394 1422.11,689.543 1422.67,625.184 1423.23,629.811 1423.78,650.306 1424.34,668.396 1424.9,669.562 1425.46,673.305 1426.02,656.548 1426.58,656.316 1427.14,690.083 1427.7,692.274 1428.26,658.613 1428.82,676.322 1429.38,676.462 1429.94,708.358 1430.5,710.209 1431.05,662.633 1431.61,599.652 1432.17,586.209 1432.73,591.22 1433.29,594.687 1433.85,603.82 1434.41,623.133 1434.97,578.347 1435.53,583.261 1436.09,554.696 1436.65,576.953 1437.21,597.431 1437.77,603.272 1438.33,590.361 1438.88,596.762 1439.44,579.97 1440,618.219 1440.56,637.385 1441.12,627.415 1441.68,646.534 1442.24,649.721 1442.8,650.084 1443.36,665.452 1443.92,669.559 1444.48,655.184 1445.04,639.079 1445.6,672.597 1446.15,657.234 1446.71,629.619 1447.27,632.798 1447.83,717.402 1448.39,665.782 1448.95,682.567 1449.51,697.18 1450.07,693.422 1450.63,698.414 1451.19,703.454 1451.75,688.771 1452.31,686.241 1452.87,667.401 1453.42,683.492 1453.98,715.163 1454.54,726.99 1455.1,738.933 1455.66,766.942 1456.22,765.39 1456.78,777.371 1457.34,757.171 1457.9,766.392 1458.46,762.13 1459.02,774.99 1459.58,785.564 1460.14,776.896 1460.7,755.757 1461.25,783.905 1461.81,763.365 1462.37,744.011 1462.93,767.471 1463.49,762.209 1464.05,738.57 1464.61,753.872 1465.17,750.325 1465.73,731.074 1466.29,723.696 1466.85,672.089 1467.41,706.181 1467.97,670.677 1468.52,655.144 1469.08,674.645 1469.64,674.648 1470.2,676.589 1470.76,675.414 1471.32,695.257 1471.88,697.557 1472.44,697.608 1473,715.158 1473.56,714.54 1474.12,712.681 1474.68,693.648 1475.24,708.624 1475.79,690.272 1476.35,687.646 1476.91,669.387 1477.47,672.758 1478.03,641.278 1478.59,639.712 1479.15,641.8 1479.71,594.373 1480.27,613.275 1480.83,679.177 1481.39,692.526 1481.95,726.171 1482.51,742.625 1483.07,756.888 1483.62,766.724 1484.18,764.596 1484.74,774.738 1485.3,752.283 1485.86,752.32 1486.42,716.521 1486.98,699.638 1487.54,716.116 1488.1,732.694 1488.66,698.745 1489.22,650.732 1489.78,650.297 1490.34,622.246 1490.89,611.097 1491.45,615.356 1492.01,602.052 1492.57,590.581 1493.13,627.12 1493.69,616.73 1494.25,618.645 1494.81,638.011 1495.37,626.832 1495.93,681.063 1496.49,697.864 1497.05,699.144 1497.61,697.875 1498.16,695.008 1498.72,695.279 1499.28,712.985 1499.84,663.773 1500.4,662.455 1500.96,645.296 1501.52,646.23 1502.08,649.549 1502.64,666.647 1503.2,683.079 1503.76,716.101 1504.32,699.295 1504.88,695.171 1505.44,663.263 1505.99,684.138 1506.55,668.764 1507.11,667.639 1507.67,683.628 1508.23,649.971 1508.79,602.417 1509.35,624.499 1509.91,624.842 1510.47,641.972 1511.03,678.893 1511.59,714.468 1512.15,726.713 1512.71,739.69 1513.26,753.717 1513.82,753.749 1514.38,754.128 1514.94,749.572 1515.5,730.938 1516.06,727.378 1516.62,722.569 1517.18,688.296 1517.74,691.307 1518.3,691.234 1518.86,676.718 1519.42,709.518 1519.98,692.533 1520.53,723.316 1521.09,706.342 1521.65,705.884 1522.21,683.159 1522.77,680.658 1523.33,651.306 1523.89,639.636 1524.45,655.405 1525.01,704.414 1525.57,673.393 1526.13,656.837 1526.69,689.177 1527.25,671.865 1527.81,686.831 1528.36,656.667 1528.92,658.844 1529.48,660.297 1530.04,662.272 1530.6,569.329 1531.16,563.051 1531.72,570.318 1532.28,576.803 1532.84,550.939 1533.4,592.06 1533.96,577.685 1534.52,548.601 1535.08,537.691 1535.63,516.671 1536.19,572.436 1536.75,578.113 1537.31,601.993 1537.87,639.619 1538.43,658.811 1538.99,722.123 1539.55,705.803 1540.11,689.145 1540.67,689.729 1541.23,656.849 1541.79,672.857 1542.35,676.713 1542.9,695.614 1543.46,679.297 1544.02,661.727 1544.58,694.534 1545.14,696.589 1545.7,728.238 1546.26,726.663 1546.82,740.981 1547.38,722.524 1547.94,700.962 1548.5,635.86 1549.06,604.266 1549.62,604.858 1550.18,626.208 1550.73,628.24 1551.29,615.681 1551.85,618.653 1552.41,638.184 1552.97,637.666 1553.53,642.78 1554.09,691.039 1554.65,674.066 1555.21,675.069 1555.77,659.093 1556.33,706.492 1556.89,669.247 1557.45,718.004 1558,718.918 1558.56,686.677 1559.12,671.455 1559.68,707.548 1560.24,723.766 1560.8,722.648 1561.36,721.196 1561.92,706.163 1562.48,672.521 1563.04,688.08 1563.6,701.791 1564.16,700.273 1564.72,665.967 1565.28,651.873 1565.83,673.388 1566.39,659.034 1566.95,656.178 1567.51,655.367 1568.07,686.677 1568.63,668.401 1569.19,656.482 1569.75,693.413 1570.31,693.854 1570.87,708.918 1571.43,691.22 1571.99,676.8 1572.55,675.123 1573.1,643.974 1573.66,630.979 1574.22,649.502 1574.78,620.64 1575.34,657.438 1575.9,646.897 1576.46,634.022 1577.02,652.483 1577.58,650.613 1578.14,656.505 1578.7,659.198 1579.26,662.863 1579.82,658.953 1580.37,660.019 1580.93,677.307 1581.49,645.1 1582.05,676.423 1582.61,692.465 1583.17,710.828 1583.73,740.803 1584.29,725.495 1584.85,724.149 1585.41,724.885 1585.97,741.925 1586.53,738.395 1587.09,737.987 1587.65,733.35 1588.2,712.605 1588.76,712.274 1589.32,711.535 1589.88,740.995 1590.44,740.908 1591,735.954 1591.56,748.945 1592.12,745.405 1592.68,725.608 1593.24,709.313 1593.8,708.692 1594.36,703.599 1594.92,672.026 1595.47,689.776 1596.03,670.49 1596.59,700.741 1597.15,716.097 1597.71,700.422 1598.27,697.675 1598.83,710.246 1599.39,706.302 1599.95,720.519 1600.51,749.76 1601.07,763.383 1601.63,741.596 1602.19,720.907 1602.74,754.558 1603.3,749.833 1603.86,746.169 1604.42,742.552 1604.98,753.295 1605.54,749.03 1606.1,744.482 1606.66,742.115 1607.22,757.618 1607.78,751.577 1608.34,760.588 1608.9,752.093 1609.46,766.064 1610.02,763.296 1610.57,759.229 1611.13,754.979 1611.69,736.073 1612.25,736.297 1612.81,715.719 1613.37,729.881 1613.93,763.432 1614.49,774.762 1615.05,770.066 1615.61,720.103 1616.17,719.218 1616.73,718.625 1617.29,729.182 1617.84,740.46 1618.4,720.502 1618.96,734.879 1619.52,749.62 1620.08,718.213 1620.64,685.511 1621.2,670.967 1621.76,688.508 1622.32,688.843 1622.88,691.934 1623.44,689.387 1624,738.692 1624.56,734.299 1625.11,716.369 1625.67,711.17 1626.23,703.779 1626.79,705.051 1627.35,689.414 1627.91,674.447 1628.47,677.806 1629.03,679.132 1629.59,698.913 1630.15,697.566 1630.71,712.878 1631.27,741.629 1631.83,757.008 1632.39,716.716 1632.94,732.142 1633.5,745.469 1634.06,709.402 1634.62,689.806 1635.18,705.331 1635.74,673.63 1636.3,673.28 1636.86,674.758 1637.42,640.844 1637.98,624.677 1638.54,632.576 1639.1,619.489 1639.66,637.042 1640.21,607.171 1640.77,595.916 1641.33,584.17 1641.89,590.441 1642.45,596.005 1643.01,633.72 1643.57,670.277 1644.13,641.341 1644.69,630.017 1645.25,598.911 1645.81,603.328 1646.37,593.033 1646.93,599.187 1647.48,607.937 1648.04,645.514 1648.6,666.332 1649.16,667.776 1649.72,653.219 1650.28,654.112 1650.84,691.809 1651.4,721.231 1651.96,737.256 1652.52,701.289 1653.08,719.602 1653.64,681.976 1654.2,681.587 1654.76,669.991 1655.31,668.681 1655.87,716.178 1656.43,714.577 1656.99,699.518 1657.55,699.942 1658.11,655.589 1658.67,675.15 1659.23,660.037 1659.79,678.63 1660.35,696.017 1660.91,661.842 1661.47,649.984 1662.03,601.511 1662.58,623.117 1663.14,672.746 1663.7,720.106 1664.26,735.614 1664.82,731.182 1665.38,714.212 1665.94,745.662 1666.5,741.17 1667.06,758.891 1667.62,740.677 1668.18,756.179 1668.74,751.069 1669.3,749.96 1669.85,728.032 1670.41,745.7 1670.97,740.713 1671.53,783.27 1672.09,764.473 1672.65,740.461 1673.21,743.035 1673.77,724.004 1674.33,705.262 1674.89,688.67 1675.45,688.716 1676.01,687.638 1676.57,686.392 1677.13,704.029 1677.68,669.597 1678.24,654.63 1678.8,641.444 1679.36,639.609 1679.92,623.162 1680.48,644.216 1681.04,628.065 1681.6,649.378 1682.16,700.264 1682.72,717.808 1683.28,699.572 1683.84,684.541 1684.4,684.447 1684.95,668.8 1685.51,650.15 1686.07,668.525 1686.63,672.561 1687.19,660.684 1687.75,646.024 1688.31,649.673 1688.87,635.989 1689.43,702.219 1689.99,700.53 1690.55,668.287 1691.11,685.405 1691.67,684.361 1692.23,681.564 1692.78,682.442 1693.34,602.292 1693.9,640.852 1694.46,677.854 1695.02,691.66 1695.58,734.426 1696.14,780.793 1696.7,743.369 1697.26,738.521 1697.82,704.082 1698.38,749.442 1698.94,729.52 1699.5,727.665 1700.05,727.915 1700.61,705.96 1701.17,703.465 1701.73,698.963 1702.29,696.787 1702.85,711.492 1703.41,725.852 1703.97,723.546 1704.53,697.281 1705.09,713.509 1705.65,695.226 1706.21,696.365 1706.77,681.484 1707.32,651.545 1707.88,635.966 1708.44,686.958 1709,622.934 1709.56,610.896 1710.12,613.355 1710.68,617.127 1711.24,637.724 1711.8,654.889 1712.36,656.168 1712.92,655.784 1713.48,672.749 1714.04,673.281 1714.6,672.505 1715.15,675.416 1715.71,675.113 1716.27,640.411 1716.83,677.682 1717.39,666.665 1717.95,686.117 1718.51,707.432 1719.07,733.844 1719.63,732.546 1720.19,683.408 1720.75,668.128 1721.31,683.562 1721.87,647.672 1722.42,684.594 1722.98,686.662 1723.54,672.746 1724.1,673.155 1724.66,676.293 1725.22,676.018 1725.78,678.475 1726.34,664.999 1726.9,664.64 1727.46,632.286 1728.02,647.898 1728.58,648.587 1729.14,628.884 1729.69,643.733 1730.25,646.609 1730.81,628.955 1731.37,665.324 1731.93,665.783 1732.49,686.579 1733.05,700.347 1733.61,687.042 1734.17,673.505 1734.73,693.466 1735.29,663.292 1735.85,632.84 1736.41,669.298 1736.97,684.575 1737.52,651.325 1738.08,618.124 1738.64,589.719 1739.2,596.878 1739.76,631.793 1740.32,683.245 1740.88,666.424 1741.44,671.48 1742,687.964 1742.56,719.187 1743.12,702.044 1743.68,735.836 1744.24,745.999 1744.79,723.789 1745.35,720.78 1745.91,733.684 1746.47,750.104 1747.03,752.322 1747.59,746.642 1748.15,726.907 1748.71,721.395 1749.27,735.849 1749.83,747.652 1750.39,708.647 1750.95,705.711 1751.51,688.506 1752.06,671.755 1752.62,686.598 1753.18,670.046 1753.74,652.793 1754.3,702.856 1754.86,701.061 1755.42,746.94 1755.98,744.885 1756.54,759.422 1757.1,788.646 1757.66,787.152 1758.22,779.505 1758.78,792.058 1759.34,770.182 1759.89,716.274 1760.45,709.864 1761.01,674.395 1761.57,674.609 1762.13,691.737 1762.69,658.941 1763.25,657.92 1763.81,656.727 1764.37,678.197 1764.93,678.148 1765.49,691.602 1766.05,689.977 1766.61,670.242 1767.16,640.089 1767.72,661.474 1768.28,646.138 1768.84,634.47 1769.4,638.683 1769.96,624.699 1770.52,625.557 1771.08,628.128 1771.64,679.298 1772.2,711.05 1772.76,712.985 1773.32,696.471 1773.88,725.204 1774.43,723.069 1774.99,690.186 1775.55,689.48 1776.11,690.563 1776.67,686.685 1777.23,700.862 1777.79,701.147 1778.35,683.906 1778.91,716.512 1779.47,729.208 1780.03,706.625 1780.59,690.868 1781.15,706.596 1781.71,691.748 1782.26,660.335 1782.82,645.119 1783.38,630.03 1783.94,650.616 1784.5,655.003 1785.06,641.567 1785.62,610.658 1786.18,614.897 1786.74,615.942 1787.3,592.773 1787.86,616.145 1788.42,605.351 1788.98,626.775 1789.53,630.342 1790.09,652.376 1790.65,688.637 1791.21,734.438 1791.77,760.7 1792.33,740.914 1792.89,740.53 1793.45,737.407 1794.01,703.195 1794.57,718.506 1795.13,703.597 1795.69,734.359 1796.25,730.083 1796.8,741.673 1797.36,739.929 1797.92,751.191 1798.48,732.226 1799.04,747.483 1799.6,741.847 1800.16,772.356 1800.72,736.043 1801.28,718.35 1801.84,720.059 1802.4,737.586 1802.96,751.667 1803.52,731.152 1804.08,730.456 1804.63,709.833 1805.19,740.034 1805.75,735.018 1806.31,698.157 1806.87,713.364 1807.43,714.512 1807.99,691.857 1808.55,706.304 1809.11,685.016 1809.67,701.629 1810.23,701.791 1810.79,699.601 1811.35,712.496 1811.9,728.989 1812.46,710.583 1813.02,706.843 1813.58,689.784 1814.14,687.364 1814.7,705.146 1815.26,655.57 1815.82,626.664 1816.38,627.326 1816.94,628.53 1817.5,602.088 1818.06,606.43 1818.62,610.851 1819.18,634.555 1819.73,654.124 1820.29,638.02 1820.85,623.841 1821.41,593.872 1821.97,546.968 1822.53,556.976 1823.09,548.788 1823.65,554.756 1824.21,577.439 1824.77,698.31 1825.33,683.978 1825.89,668.617 1826.45,653.548 1827,638.133 1827.56,658.488 1828.12,690.247 1828.68,677.134 1829.24,691.015 1829.8,656.58 1830.36,641.848 1830.92,613.972 1831.48,631.194 1832.04,600.963 1832.6,592.057 1833.16,596.583 1833.72,587.228 1834.27,593.449 1834.83,615.145 1835.39,602.858 1835.95,624.783 1836.51,643.572 1837.07,626.492 1837.63,645.758 1838.19,667.594 \"/>\n<path clip-path=\"url(#clip673)\" d=\"M720.247 692.4 L720.806 692.4 L721.365 692.4 L721.924 692.4 L722.484 692.4 L723.043 692.4 L723.602 692.4 L724.161 692.4 L724.721 692.4 L725.28 692.4 L725.839 692.4 L726.398 692.4 L726.958 692.4 L727.517 692.4 L728.076 692.4 L728.635 692.4 L729.195 692.4 L729.754 692.4 L730.313 692.4 L730.872 692.4 L731.432 692.4 L731.991 692.4 L732.55 692.4 L733.109 692.4 L733.669 692.4 L734.228 692.4 L734.787 692.4 L735.346 692.4 L735.906 692.4 L736.465 692.4 L737.024 692.4 L737.583 692.4 L738.143 692.4 L738.702 692.4 L739.261 692.4 L739.82 692.4 L740.38 692.4 L740.939 692.4 L741.498 692.4 L742.057 692.4 L742.617 692.4 L743.176 692.4 L743.735 692.4 L744.294 692.4 L744.854 692.4 L745.413 692.4 L745.972 692.4 L746.531 692.4 L747.091 692.4 L747.65 692.4 L748.209 692.4 L748.768 692.4 L749.328 692.4 L749.887 692.4 L750.446 692.4 L751.005 692.4 L751.565 692.4 L752.124 692.4 L752.683 692.4 L753.242 692.4 L753.802 692.4 L754.361 692.4 L754.92 692.4 L755.479 692.4 L756.039 692.4 L756.598 692.4 L757.157 692.4 L757.716 692.4 L758.276 692.4 L758.835 692.4 L759.394 692.4 L759.953 692.4 L760.513 692.4 L761.072 692.4 L761.631 692.4 L762.19 692.4 L762.75 692.4 L763.309 692.4 L763.868 692.4 L764.427 692.4 L764.987 692.4 L765.546 692.4 L766.105 692.4 L766.664 692.4 L767.224 692.4 L767.783 692.4 L768.342 692.4 L768.901 692.4 L769.461 692.4 L770.02 692.4 L770.579 692.4 L771.138 692.4 L771.698 692.4 L772.257 692.4 L772.816 692.4 L773.375 692.4 L773.935 692.4 L774.494 692.4 L775.053 692.4 L775.612 692.4 L776.172 692.4 L776.731 692.4 L777.29 692.4 L777.849 692.4 L778.409 692.4 L778.968 692.4 L779.527 692.4 L780.086 692.4 L780.646 692.4 L781.205 692.4 L781.764 692.4 L782.323 692.4 L782.883 692.4 L783.442 692.4 L784.001 692.4 L784.56 692.4 L785.12 692.4 L785.679 692.4 L786.238 692.4 L786.797 692.4 L787.357 692.4 L787.916 692.4 L788.475 692.4 L789.034 692.4 L789.594 692.4 L790.153 692.4 L790.712 692.4 L791.271 692.4 L791.831 692.4 L792.39 692.4 L792.949 692.4 L793.508 692.4 L794.068 692.4 L794.627 692.4 L795.186 692.4 L795.745 692.4 L796.305 692.4 L796.864 692.4 L797.423 692.4 L797.982 692.4 L798.542 692.4 L799.101 692.4 L799.66 692.4 L800.219 692.4 L800.779 692.4 L801.338 692.4 L801.897 692.4 L802.456 692.4 L803.016 692.4 L803.575 692.4 L804.134 692.4 L804.693 692.4 L805.253 692.4 L805.812 692.4 L806.371 692.4 L806.931 692.4 L807.49 692.4 L808.049 692.4 L808.608 692.4 L809.168 692.4 L809.727 692.4 L810.286 692.4 L810.845 692.4 L811.405 692.4 L811.964 692.4 L812.523 692.4 L813.082 692.4 L813.642 692.4 L814.201 692.4 L814.76 692.4 L815.319 692.4 L815.879 692.4 L816.438 692.4 L816.997 692.4 L817.556 692.4 L818.116 692.4 L818.675 692.4 L819.234 692.4 L819.793 692.4 L820.353 692.4 L820.912 692.4 L821.471 692.4 L822.03 692.4 L822.59 692.4 L823.149 692.4 L823.708 692.4 L824.267 692.4 L824.827 692.4 L825.386 692.4 L825.945 692.4 L826.504 692.4 L827.064 692.4 L827.623 692.4 L828.182 692.4 L828.741 692.4 L829.301 692.4 L829.86 692.4 L830.419 692.4 L830.978 692.4 L831.538 692.4 L832.097 692.4 L832.656 692.4 L833.215 692.4 L833.775 692.4 L834.334 692.4 L834.893 692.4 L835.452 692.4 L836.012 692.4 L836.571 692.4 L837.13 692.4 L837.689 692.4 L838.249 692.4 L838.808 692.4 L839.367 692.4 L839.926 692.4 L840.486 692.4 L841.045 692.4 L841.604 692.4 L842.163 692.4 L842.723 692.4 L843.282 692.4 L843.841 692.4 L844.4 692.4 L844.96 692.4 L845.519 692.4 L846.078 692.4 L846.637 692.4 L847.197 692.4 L847.756 692.4 L848.315 692.4 L848.874 692.4 L849.434 692.4 L849.993 692.4 L850.552 692.4 L851.111 692.4 L851.671 692.4 L852.23 692.4 L852.789 692.4 L853.348 692.4 L853.908 692.4 L854.467 692.4 L855.026 692.4 L855.585 692.4 L856.145 692.4 L856.704 692.4 L857.263 692.4 L857.822 692.4 L858.382 692.4 L858.941 692.4 L859.5 692.4 L860.059 692.4 L860.619 692.4 L861.178 692.4 L861.737 692.4 L862.296 692.4 L862.856 692.4 L863.415 692.4 L863.974 692.4 L864.533 692.4 L865.093 692.4 L865.652 692.4 L866.211 692.4 L866.77 692.4 L867.33 692.4 L867.889 692.4 L868.448 692.4 L869.007 692.4 L869.567 692.4 L870.126 692.4 L870.685 692.4 L871.244 692.4 L871.804 692.4 L872.363 692.4 L872.922 692.4 L873.481 692.4 L874.041 692.4 L874.6 692.4 L875.159 692.4 L875.718 692.4 L876.278 692.4 L876.837 692.4 L877.396 692.4 L877.955 692.4 L878.515 692.4 L879.074 692.4 L879.633 692.4 L880.192 692.4 L880.752 692.4 L881.311 692.4 L881.87 692.4 L882.429 692.4 L882.989 692.4 L883.548 692.4 L884.107 692.4 L884.666 692.4 L885.226 692.4 L885.785 692.4 L886.344 692.4 L886.903 692.4 L887.463 692.4 L888.022 692.4 L888.581 692.4 L889.14 692.4 L889.7 692.4 L890.259 692.4 L890.818 692.4 L891.377 692.4 L891.937 692.4 L892.496 692.4 L893.055 692.4 L893.614 692.4 L894.174 692.4 L894.733 692.4 L895.292 692.4 L895.851 692.4 L896.411 692.4 L896.97 692.4 L897.529 692.4 L898.088 692.4 L898.648 692.4 L899.207 692.4 L899.766 692.4 L900.325 692.4 L900.885 692.4 L901.444 692.4 L902.003 692.4 L902.562 692.4 L903.122 692.4 L903.681 692.4 L904.24 692.4 L904.799 692.4 L905.359 692.4 L905.918 692.4 L906.477 692.4 L907.036 692.4 L907.596 692.4 L908.155 692.4 L908.714 692.4 L909.273 692.4 L909.833 692.4 L910.392 692.4 L910.951 692.4 L911.51 692.4 L912.07 692.4 L912.629 692.4 L913.188 692.4 L913.747 692.4 L914.307 692.4 L914.866 692.4 L915.425 692.4 L915.984 692.4 L916.544 692.4 L917.103 692.4 L917.662 692.4 L918.221 692.4 L918.781 692.4 L919.34 692.4 L919.899 692.4 L920.458 692.4 L921.018 692.4 L921.577 692.4 L922.136 692.4 L922.695 692.4 L923.255 692.4 L923.814 692.4 L924.373 692.4 L924.932 692.4 L925.492 692.4 L926.051 692.4 L926.61 692.4 L927.169 692.4 L927.729 692.4 L928.288 692.4 L928.847 692.4 L929.406 692.4 L929.966 692.4 L930.525 692.4 L931.084 692.4 L931.644 692.4 L932.203 692.4 L932.762 692.4 L933.321 692.4 L933.881 692.4 L934.44 692.4 L934.999 692.4 L935.558 692.4 L936.118 692.4 L936.677 692.4 L937.236 692.4 L937.795 692.4 L938.355 692.4 L938.914 692.4 L939.473 692.4 L940.032 692.4 L940.592 692.4 L941.151 692.4 L941.71 692.4 L942.269 692.4 L942.829 692.4 L943.388 692.4 L943.947 692.4 L944.506 692.4 L945.066 692.4 L945.625 692.4 L946.184 692.4 L946.743 692.4 L947.303 692.4 L947.862 692.4 L948.421 692.4 L948.98 692.4 L949.54 692.4 L950.099 692.4 L950.658 692.4 L951.217 692.4 L951.777 692.4 L952.336 692.4 L952.895 692.4 L953.454 692.4 L954.014 692.4 L954.573 692.4 L955.132 692.4 L955.691 692.4 L956.251 692.4 L956.81 692.4 L957.369 692.4 L957.928 692.4 L958.488 692.4 L959.047 692.4 L959.606 692.4 L960.165 692.4 L960.725 692.4 L961.284 692.4 L961.843 692.4 L962.402 692.4 L962.962 692.4 L963.521 692.4 L964.08 692.4 L964.639 692.4 L965.199 692.4 L965.758 692.4 L966.317 692.4 L966.876 692.4 L967.436 692.4 L967.995 692.4 L968.554 692.4 L969.113 692.4 L969.673 692.4 L970.232 692.4 L970.791 692.4 L971.35 692.4 L971.91 692.4 L972.469 692.4 L973.028 692.4 L973.587 692.4 L974.147 692.4 L974.706 692.4 L975.265 692.4 L975.824 692.4 L976.384 692.4 L976.943 692.4 L977.502 692.4 L978.061 692.4 L978.621 692.4 L979.18 692.4 L979.739 692.4 L980.298 692.4 L980.858 692.4 L981.417 692.4 L981.976 692.4 L982.535 692.4 L983.095 692.4 L983.654 692.4 L984.213 692.4 L984.772 692.4 L985.332 692.4 L985.891 692.4 L986.45 692.4 L987.009 692.4 L987.569 692.4 L988.128 692.4 L988.687 692.4 L989.246 692.4 L989.806 692.4 L990.365 692.4 L990.924 692.4 L991.483 692.4 L992.043 692.4 L992.602 692.4 L993.161 692.4 L993.72 692.4 L994.28 692.4 L994.839 692.4 L995.398 692.4 L995.957 692.4 L996.517 692.4 L997.076 692.4 L997.635 692.4 L998.194 692.4 L998.754 692.4 L999.313 692.4 L999.872 692.4 L1000.43 692.4 L1000.99 692.4 L1001.55 692.4 L1002.11 692.4 L1002.67 692.4 L1003.23 692.4 L1003.79 692.4 L1004.35 692.4 L1004.91 692.4 L1005.46 692.4 L1006.02 692.4 L1006.58 692.4 L1007.14 692.4 L1007.7 692.4 L1008.26 692.4 L1008.82 692.4 L1009.38 692.4 L1009.94 692.4 L1010.5 692.4 L1011.06 692.4 L1011.62 692.4 L1012.18 692.4 L1012.73 692.4 L1013.29 692.4 L1013.85 692.4 L1014.41 692.4 L1014.97 692.4 L1015.53 692.4 L1016.09 692.4 L1016.65 692.4 L1017.21 692.4 L1017.77 692.4 L1018.33 692.4 L1018.89 692.4 L1019.45 692.4 L1020.01 692.4 L1020.56 692.4 L1021.12 692.4 L1021.68 692.4 L1022.24 692.4 L1022.8 692.4 L1023.36 692.4 L1023.92 692.4 L1024.48 692.4 L1025.04 692.4 L1025.6 692.4 L1026.16 692.4 L1026.72 692.4 L1027.28 692.4 L1027.83 692.4 L1028.39 692.4 L1028.95 692.4 L1029.51 692.4 L1030.07 692.4 L1030.63 692.4 L1031.19 692.4 L1031.75 692.4 L1032.31 692.4 L1032.87 692.4 L1033.43 692.4 L1033.99 692.4 L1034.55 692.4 L1035.1 692.4 L1035.66 692.4 L1036.22 692.4 L1036.78 692.4 L1037.34 692.4 L1037.9 692.4 L1038.46 692.4 L1039.02 692.4 L1039.58 692.4 L1040.14 692.4 L1040.7 692.4 L1041.26 692.4 L1041.82 692.4 L1042.38 692.4 L1042.93 692.4 L1043.49 692.4 L1044.05 692.4 L1044.61 692.4 L1045.17 692.4 L1045.73 692.4 L1046.29 692.4 L1046.85 692.4 L1047.41 692.4 L1047.97 692.4 L1048.53 692.4 L1049.09 692.4 L1049.65 692.4 L1050.2 692.4 L1050.76 692.4 L1051.32 692.4 L1051.88 692.4 L1052.44 692.4 L1053 692.4 L1053.56 692.4 L1054.12 692.4 L1054.68 692.4 L1055.24 692.4 L1055.8 692.4 L1056.36 692.4 L1056.92 692.4 L1057.48 692.4 L1058.03 692.4 L1058.59 692.4 L1059.15 692.4 L1059.71 692.4 L1060.27 692.4 L1060.83 692.4 L1061.39 692.4 L1061.95 692.4 L1062.51 692.4 L1063.07 692.4 L1063.63 692.4 L1064.19 692.4 L1064.75 692.4 L1065.3 692.4 L1065.86 692.4 L1066.42 692.4 L1066.98 692.4 L1067.54 692.4 L1068.1 692.4 L1068.66 692.4 L1069.22 692.4 L1069.78 692.4 L1070.34 692.4 L1070.9 692.4 L1071.46 692.4 L1072.02 692.4 L1072.57 692.4 L1073.13 692.4 L1073.69 692.4 L1074.25 692.4 L1074.81 692.4 L1075.37 692.4 L1075.93 692.4 L1076.49 692.4 L1077.05 692.4 L1077.61 692.4 L1078.17 692.4 L1078.73 692.4 L1079.29 692.4 L1079.85 692.4 L1080.4 692.4 L1080.96 692.4 L1081.52 692.4 L1082.08 692.4 L1082.64 692.4 L1083.2 692.4 L1083.76 692.4 L1084.32 692.4 L1084.88 692.4 L1085.44 692.4 L1086 692.4 L1086.56 692.4 L1087.12 692.4 L1087.67 692.4 L1088.23 692.4 L1088.79 692.4 L1089.35 692.4 L1089.91 692.4 L1090.47 692.4 L1091.03 692.4 L1091.59 692.4 L1092.15 692.4 L1092.71 692.4 L1093.27 692.4 L1093.83 692.4 L1094.39 692.4 L1094.94 692.4 L1095.5 692.4 L1096.06 692.4 L1096.62 692.4 L1097.18 692.4 L1097.74 692.4 L1098.3 692.4 L1098.86 692.4 L1099.42 692.4 L1099.98 692.4 L1100.54 692.4 L1101.1 692.4 L1101.66 692.4 L1102.22 692.4 L1102.77 692.4 L1103.33 692.4 L1103.89 692.4 L1104.45 692.4 L1105.01 692.4 L1105.57 692.4 L1106.13 692.4 L1106.69 692.4 L1107.25 692.4 L1107.81 692.4 L1108.37 692.4 L1108.93 692.4 L1109.49 692.4 L1110.04 692.4 L1110.6 692.4 L1111.16 692.4 L1111.72 692.4 L1112.28 692.4 L1112.84 692.4 L1113.4 692.4 L1113.96 692.4 L1114.52 692.4 L1115.08 692.4 L1115.64 692.4 L1116.2 692.4 L1116.76 692.4 L1117.31 692.4 L1117.87 692.4 L1118.43 692.4 L1118.99 692.4 L1119.55 692.4 L1120.11 692.4 L1120.67 692.4 L1121.23 692.4 L1121.79 692.4 L1122.35 692.4 L1122.91 692.4 L1123.47 692.4 L1124.03 692.4 L1124.59 692.4 L1125.14 692.4 L1125.7 692.4 L1126.26 692.4 L1126.82 692.4 L1127.38 692.4 L1127.94 692.4 L1128.5 692.4 L1129.06 692.4 L1129.62 692.4 L1130.18 692.4 L1130.74 692.4 L1131.3 692.4 L1131.86 692.4 L1132.41 692.4 L1132.97 692.4 L1133.53 692.4 L1134.09 692.4 L1134.65 692.4 L1135.21 692.4 L1135.77 692.4 L1136.33 692.4 L1136.89 692.4 L1137.45 692.4 L1138.01 692.4 L1138.57 692.4 L1139.13 692.4 L1139.68 692.4 L1140.24 692.4 L1140.8 692.4 L1141.36 692.4 L1141.92 692.4 L1142.48 692.4 L1143.04 692.4 L1143.6 692.4 L1144.16 692.4 L1144.72 692.4 L1145.28 692.4 L1145.84 692.4 L1146.4 692.4 L1146.96 692.4 L1147.51 692.4 L1148.07 692.4 L1148.63 692.4 L1149.19 692.4 L1149.75 692.4 L1150.31 692.4 L1150.87 692.4 L1151.43 692.4 L1151.99 692.4 L1152.55 692.4 L1153.11 692.4 L1153.67 692.4 L1154.23 692.4 L1154.78 692.4 L1155.34 692.4 L1155.9 692.4 L1156.46 692.4 L1157.02 692.4 L1157.58 692.4 L1158.14 692.4 L1158.7 692.4 L1159.26 692.4 L1159.82 692.4 L1160.38 692.4 L1160.94 692.4 L1161.5 692.4 L1162.05 692.4 L1162.61 692.4 L1163.17 692.4 L1163.73 692.4 L1164.29 692.4 L1164.85 692.4 L1165.41 692.4 L1165.97 692.4 L1166.53 692.4 L1167.09 692.4 L1167.65 692.4 L1168.21 692.4 L1168.77 692.4 L1169.33 692.4 L1169.88 692.4 L1170.44 692.4 L1171 692.4 L1171.56 692.4 L1172.12 692.4 L1172.68 692.4 L1173.24 692.4 L1173.8 692.4 L1174.36 692.4 L1174.92 692.4 L1175.48 692.4 L1176.04 692.4 L1176.6 692.4 L1177.15 692.4 L1177.71 692.4 L1178.27 692.4 L1178.83 692.4 L1179.39 692.4 L1179.95 692.4 L1180.51 692.4 L1181.07 692.4 L1181.63 692.4 L1182.19 692.4 L1182.75 692.4 L1183.31 692.4 L1183.87 692.4 L1184.43 692.4 L1184.98 692.4 L1185.54 692.4 L1186.1 692.4 L1186.66 692.4 L1187.22 692.4 L1187.78 692.4 L1188.34 692.4 L1188.9 692.4 L1189.46 692.4 L1190.02 692.4 L1190.58 692.4 L1191.14 692.4 L1191.7 692.4 L1192.25 692.4 L1192.81 692.4 L1193.37 692.4 L1193.93 692.4 L1194.49 692.4 L1195.05 692.4 L1195.61 692.4 L1196.17 692.4 L1196.73 692.4 L1197.29 692.4 L1197.85 692.4 L1198.41 692.4 L1198.97 692.4 L1199.52 692.4 L1200.08 692.4 L1200.64 692.4 L1201.2 692.4 L1201.76 692.4 L1202.32 692.4 L1202.88 692.4 L1203.44 692.4 L1204 692.4 L1204.56 692.4 L1205.12 692.4 L1205.68 692.4 L1206.24 692.4 L1206.8 692.4 L1207.35 692.4 L1207.91 692.4 L1208.47 692.4 L1209.03 692.4 L1209.59 692.4 L1210.15 692.4 L1210.71 692.4 L1211.27 692.4 L1211.83 692.4 L1212.39 692.4 L1212.95 692.4 L1213.51 692.4 L1214.07 692.4 L1214.62 692.4 L1215.18 692.4 L1215.74 692.4 L1216.3 692.4 L1216.86 692.4 L1217.42 692.4 L1217.98 692.4 L1218.54 692.4 L1219.1 692.4 L1219.66 692.4 L1220.22 692.4 L1220.78 692.4 L1221.34 692.4 L1221.89 692.4 L1222.45 692.4 L1223.01 692.4 L1223.57 692.4 L1224.13 692.4 L1224.69 692.4 L1225.25 692.4 L1225.81 692.4 L1226.37 692.4 L1226.93 692.4 L1227.49 692.4 L1228.05 692.4 L1228.61 692.4 L1229.17 692.4 L1229.72 692.4 L1230.28 692.4 L1230.84 692.4 L1231.4 692.4 L1231.96 692.4 L1232.52 692.4 L1233.08 692.4 L1233.64 692.4 L1234.2 692.4 L1234.76 692.4 L1235.32 692.4 L1235.88 692.4 L1236.44 692.4 L1236.99 692.4 L1237.55 692.4 L1238.11 692.4 L1238.67 692.4 L1239.23 692.4 L1239.79 692.4 L1240.35 692.4 L1240.91 692.4 L1241.47 692.4 L1242.03 692.4 L1242.59 692.4 L1243.15 692.4 L1243.71 692.4 L1244.26 692.4 L1244.82 692.4 L1245.38 692.4 L1245.94 692.4 L1246.5 692.4 L1247.06 692.4 L1247.62 692.4 L1248.18 692.4 L1248.74 692.4 L1249.3 692.4 L1249.86 692.4 L1250.42 692.4 L1250.98 692.4 L1251.54 692.4 L1252.09 692.4 L1252.65 692.4 L1253.21 692.4 L1253.77 692.4 L1254.33 692.4 L1254.89 692.4 L1255.45 692.4 L1256.01 692.4 L1256.57 692.4 L1257.13 692.4 L1257.69 692.4 L1258.25 692.4 L1258.81 692.4 L1259.36 692.4 L1259.92 692.4 L1260.48 692.4 L1261.04 692.4 L1261.6 692.4 L1262.16 692.4 L1262.72 692.4 L1263.28 692.4 L1263.84 692.4 L1264.4 692.4 L1264.96 692.4 L1265.52 692.4 L1266.08 692.4 L1266.63 692.4 L1267.19 692.4 L1267.75 692.4 L1268.31 692.4 L1268.87 692.4 L1269.43 692.4 L1269.99 692.4 L1270.55 692.4 L1271.11 692.4 L1271.67 692.4 L1272.23 692.4 L1272.79 692.4 L1273.35 692.4 L1273.91 692.4 L1274.46 692.4 L1275.02 692.4 L1275.58 692.4 L1276.14 692.4 L1276.7 692.4 L1277.26 692.4 L1277.82 692.4 L1278.38 692.4 L1278.94 692.4 L1279.5 692.4 L1280.06 692.4 L1280.62 692.4 L1281.18 692.4 L1281.73 692.4 L1282.29 692.4 L1282.85 692.4 L1283.41 692.4 L1283.97 692.4 L1284.53 692.4 L1285.09 692.4 L1285.65 692.4 L1286.21 692.4 L1286.77 692.4 L1287.33 692.4 L1287.89 692.4 L1288.45 692.4 L1289 692.4 L1289.56 692.4 L1290.12 692.4 L1290.68 692.4 L1291.24 692.4 L1291.8 692.4 L1292.36 692.4 L1292.92 692.4 L1293.48 692.4 L1294.04 692.4 L1294.6 692.4 L1295.16 692.4 L1295.72 692.4 L1296.28 692.4 L1296.83 692.4 L1297.39 692.4 L1297.95 692.4 L1298.51 692.4 L1299.07 692.4 L1299.63 692.4 L1300.19 692.4 L1300.75 692.4 L1301.31 692.4 L1301.87 692.4 L1302.43 692.4 L1302.99 692.4 L1303.55 692.4 L1304.1 692.4 L1304.66 692.4 L1305.22 692.4 L1305.78 692.4 L1306.34 692.4 L1306.9 692.4 L1307.46 692.4 L1308.02 692.4 L1308.58 692.4 L1309.14 692.4 L1309.7 692.4 L1310.26 692.4 L1310.82 692.4 L1311.38 692.4 L1311.93 692.4 L1312.49 692.4 L1313.05 692.4 L1313.61 692.4 L1314.17 692.4 L1314.73 692.4 L1315.29 692.4 L1315.85 692.4 L1316.41 692.4 L1316.97 692.4 L1317.53 692.4 L1318.09 692.4 L1318.65 692.4 L1319.2 692.4 L1319.76 692.4 L1320.32 692.4 L1320.88 692.4 L1321.44 692.4 L1322 692.4 L1322.56 692.4 L1323.12 692.4 L1323.68 692.4 L1324.24 692.4 L1324.8 692.4 L1325.36 692.4 L1325.92 692.4 L1326.47 692.4 L1327.03 692.4 L1327.59 692.4 L1328.15 692.4 L1328.71 692.4 L1329.27 692.4 L1329.83 692.4 L1330.39 692.4 L1330.95 692.4 L1331.51 692.4 L1332.07 692.4 L1332.63 692.4 L1333.19 692.4 L1333.75 692.4 L1334.3 692.4 L1334.86 692.4 L1335.42 692.4 L1335.98 692.4 L1336.54 692.4 L1337.1 692.4 L1337.66 692.4 L1338.22 692.4 L1338.78 692.4 L1339.34 692.4 L1339.9 692.4 L1340.46 692.4 L1341.02 692.4 L1341.57 692.4 L1342.13 692.4 L1342.69 692.4 L1343.25 692.4 L1343.81 692.4 L1344.37 692.4 L1344.93 692.4 L1345.49 692.4 L1346.05 692.4 L1346.61 692.4 L1347.17 692.4 L1347.73 692.4 L1348.29 692.4 L1348.84 692.4 L1349.4 692.4 L1349.96 692.4 L1350.52 692.4 L1351.08 692.4 L1351.64 692.4 L1352.2 692.4 L1352.76 692.4 L1353.32 692.4 L1353.88 692.4 L1354.44 692.4 L1355 692.4 L1355.56 692.4 L1356.12 692.4 L1356.67 692.4 L1357.23 692.4 L1357.79 692.4 L1358.35 692.4 L1358.91 692.4 L1359.47 692.4 L1360.03 692.4 L1360.59 692.4 L1361.15 692.4 L1361.71 692.4 L1362.27 692.4 L1362.83 692.4 L1363.39 692.4 L1363.94 692.4 L1364.5 692.4 L1365.06 692.4 L1365.62 692.4 L1366.18 692.4 L1366.74 692.4 L1367.3 692.4 L1367.86 692.4 L1368.42 692.4 L1368.98 692.4 L1369.54 692.4 L1370.1 692.4 L1370.66 692.4 L1371.21 692.4 L1371.77 692.4 L1372.33 692.4 L1372.89 692.4 L1373.45 692.4 L1374.01 692.4 L1374.57 692.4 L1375.13 692.4 L1375.69 692.4 L1376.25 692.4 L1376.81 692.4 L1377.37 692.4 L1377.93 692.4 L1378.49 692.4 L1379.04 692.4 L1379.6 692.4 L1380.16 692.4 L1380.72 692.4 L1381.28 692.4 L1381.84 692.4 L1382.4 692.4 L1382.96 692.4 L1383.52 692.4 L1384.08 692.4 L1384.64 692.4 L1385.2 692.4 L1385.76 692.4 L1386.31 692.4 L1386.87 692.4 L1387.43 692.4 L1387.99 692.4 L1388.55 692.4 L1389.11 692.4 L1389.67 692.4 L1390.23 692.4 L1390.79 692.4 L1391.35 692.4 L1391.91 692.4 L1392.47 692.4 L1393.03 692.4 L1393.58 692.4 L1394.14 692.4 L1394.7 692.4 L1395.26 692.4 L1395.82 692.4 L1396.38 692.4 L1396.94 692.4 L1397.5 692.4 L1398.06 692.4 L1398.62 692.4 L1399.18 692.4 L1399.74 692.4 L1400.3 692.4 L1400.86 692.4 L1401.41 692.4 L1401.97 692.4 L1402.53 692.4 L1403.09 692.4 L1403.65 692.4 L1404.21 692.4 L1404.77 692.4 L1405.33 692.4 L1405.89 692.4 L1406.45 692.4 L1407.01 692.4 L1407.57 692.4 L1408.13 692.4 L1408.68 692.4 L1409.24 692.4 L1409.8 692.4 L1410.36 692.4 L1410.92 692.4 L1411.48 692.4 L1412.04 692.4 L1412.6 692.4 L1413.16 692.4 L1413.72 692.4 L1414.28 692.4 L1414.84 692.4 L1415.4 692.4 L1415.95 692.4 L1416.51 692.4 L1417.07 692.4 L1417.63 692.4 L1418.19 692.4 L1418.75 692.4 L1419.31 692.4 L1419.87 692.4 L1420.43 692.4 L1420.99 692.4 L1421.55 692.4 L1422.11 692.4 L1422.67 692.4 L1423.23 692.4 L1423.78 692.4 L1424.34 692.4 L1424.9 692.4 L1425.46 692.4 L1426.02 692.4 L1426.58 692.4 L1427.14 692.4 L1427.7 692.4 L1428.26 692.4 L1428.82 692.4 L1429.38 692.4 L1429.94 692.4 L1430.5 692.4 L1431.05 692.4 L1431.61 692.4 L1432.17 692.4 L1432.73 692.4 L1433.29 692.4 L1433.85 692.4 L1434.41 692.4 L1434.97 692.4 L1435.53 692.4 L1436.09 692.4 L1436.65 692.4 L1437.21 692.4 L1437.77 692.4 L1438.33 692.4 L1438.88 692.4 L1439.44 692.4 L1440 692.4 L1440.56 692.4 L1441.12 692.4 L1441.68 692.4 L1442.24 692.4 L1442.8 692.4 L1443.36 692.4 L1443.92 692.4 L1444.48 692.4 L1445.04 692.4 L1445.6 692.4 L1446.15 692.4 L1446.71 692.4 L1447.27 692.4 L1447.83 692.4 L1448.39 692.4 L1448.95 692.4 L1449.51 692.4 L1450.07 692.4 L1450.63 692.4 L1451.19 692.4 L1451.75 692.4 L1452.31 692.4 L1452.87 692.4 L1453.42 692.4 L1453.98 692.4 L1454.54 692.4 L1455.1 692.4 L1455.66 692.4 L1456.22 692.4 L1456.78 692.4 L1457.34 692.4 L1457.9 692.4 L1458.46 692.4 L1459.02 692.4 L1459.58 692.4 L1460.14 692.4 L1460.7 692.4 L1461.25 692.4 L1461.81 692.4 L1462.37 692.4 L1462.93 692.4 L1463.49 692.4 L1464.05 692.4 L1464.61 692.4 L1465.17 692.4 L1465.73 692.4 L1466.29 692.4 L1466.85 692.4 L1467.41 692.4 L1467.97 692.4 L1468.52 692.4 L1469.08 692.4 L1469.64 692.4 L1470.2 692.4 L1470.76 692.4 L1471.32 692.4 L1471.88 692.4 L1472.44 692.4 L1473 692.4 L1473.56 692.4 L1474.12 692.4 L1474.68 692.4 L1475.24 692.4 L1475.79 692.4 L1476.35 692.4 L1476.91 692.4 L1477.47 692.4 L1478.03 692.4 L1478.59 692.4 L1479.15 692.4 L1479.71 692.4 L1480.27 692.4 L1480.83 692.4 L1481.39 692.4 L1481.95 692.4 L1482.51 692.4 L1483.07 692.4 L1483.62 692.4 L1484.18 692.4 L1484.74 692.4 L1485.3 692.4 L1485.86 692.4 L1486.42 692.4 L1486.98 692.4 L1487.54 692.4 L1488.1 692.4 L1488.66 692.4 L1489.22 692.4 L1489.78 692.4 L1490.34 692.4 L1490.89 692.4 L1491.45 692.4 L1492.01 692.4 L1492.57 692.4 L1493.13 692.4 L1493.69 692.4 L1494.25 692.4 L1494.81 692.4 L1495.37 692.4 L1495.93 692.4 L1496.49 692.4 L1497.05 692.4 L1497.61 692.4 L1498.16 692.4 L1498.72 692.4 L1499.28 692.4 L1499.84 692.4 L1500.4 692.4 L1500.96 692.4 L1501.52 692.4 L1502.08 692.4 L1502.64 692.4 L1503.2 692.4 L1503.76 692.4 L1504.32 692.4 L1504.88 692.4 L1505.44 692.4 L1505.99 692.4 L1506.55 692.4 L1507.11 692.4 L1507.67 692.4 L1508.23 692.4 L1508.79 692.4 L1509.35 692.4 L1509.91 692.4 L1510.47 692.4 L1511.03 692.4 L1511.59 692.4 L1512.15 692.4 L1512.71 692.4 L1513.26 692.4 L1513.82 692.4 L1514.38 692.4 L1514.94 692.4 L1515.5 692.4 L1516.06 692.4 L1516.62 692.4 L1517.18 692.4 L1517.74 692.4 L1518.3 692.4 L1518.86 692.4 L1519.42 692.4 L1519.98 692.4 L1520.53 692.4 L1521.09 692.4 L1521.65 692.4 L1522.21 692.4 L1522.77 692.4 L1523.33 692.4 L1523.89 692.4 L1524.45 692.4 L1525.01 692.4 L1525.57 692.4 L1526.13 692.4 L1526.69 692.4 L1527.25 692.4 L1527.81 692.4 L1528.36 692.4 L1528.92 692.4 L1529.48 692.4 L1530.04 692.4 L1530.6 692.4 L1531.16 692.4 L1531.72 692.4 L1532.28 692.4 L1532.84 692.4 L1533.4 692.4 L1533.96 692.4 L1534.52 692.4 L1535.08 692.4 L1535.63 692.4 L1536.19 692.4 L1536.75 692.4 L1537.31 692.4 L1537.87 692.4 L1538.43 692.4 L1538.99 692.4 L1539.55 692.4 L1540.11 692.4 L1540.67 692.4 L1541.23 692.4 L1541.79 692.4 L1542.35 692.4 L1542.9 692.4 L1543.46 692.4 L1544.02 692.4 L1544.58 692.4 L1545.14 692.4 L1545.7 692.4 L1546.26 692.4 L1546.82 692.4 L1547.38 692.4 L1547.94 692.4 L1548.5 692.4 L1549.06 692.4 L1549.62 692.4 L1550.18 692.4 L1550.73 692.4 L1551.29 692.4 L1551.85 692.4 L1552.41 692.4 L1552.97 692.4 L1553.53 692.4 L1554.09 692.4 L1554.65 692.4 L1555.21 692.4 L1555.77 692.4 L1556.33 692.4 L1556.89 692.4 L1557.45 692.4 L1558 692.4 L1558.56 692.4 L1559.12 692.4 L1559.68 692.4 L1560.24 692.4 L1560.8 692.4 L1561.36 692.4 L1561.92 692.4 L1562.48 692.4 L1563.04 692.4 L1563.6 692.4 L1564.16 692.4 L1564.72 692.4 L1565.28 692.4 L1565.83 692.4 L1566.39 692.4 L1566.95 692.4 L1567.51 692.4 L1568.07 692.4 L1568.63 692.4 L1569.19 692.4 L1569.75 692.4 L1570.31 692.4 L1570.87 692.4 L1571.43 692.4 L1571.99 692.4 L1572.55 692.4 L1573.1 692.4 L1573.66 692.4 L1574.22 692.4 L1574.78 692.4 L1575.34 692.4 L1575.9 692.4 L1576.46 692.4 L1577.02 692.4 L1577.58 692.4 L1578.14 692.4 L1578.7 692.4 L1579.26 692.4 L1579.82 692.4 L1580.37 692.4 L1580.93 692.4 L1581.49 692.4 L1582.05 692.4 L1582.61 692.4 L1583.17 692.4 L1583.73 692.4 L1584.29 692.4 L1584.85 692.4 L1585.41 692.4 L1585.97 692.4 L1586.53 692.4 L1587.09 692.4 L1587.65 692.4 L1588.2 692.4 L1588.76 692.4 L1589.32 692.4 L1589.88 692.4 L1590.44 692.4 L1591 692.4 L1591.56 692.4 L1592.12 692.4 L1592.68 692.4 L1593.24 692.4 L1593.8 692.4 L1594.36 692.4 L1594.92 692.4 L1595.47 692.4 L1596.03 692.4 L1596.59 692.4 L1597.15 692.4 L1597.71 692.4 L1598.27 692.4 L1598.83 692.4 L1599.39 692.4 L1599.95 692.4 L1600.51 692.4 L1601.07 692.4 L1601.63 692.4 L1602.19 692.4 L1602.74 692.4 L1603.3 692.4 L1603.86 692.4 L1604.42 692.4 L1604.98 692.4 L1605.54 692.4 L1606.1 692.4 L1606.66 692.4 L1607.22 692.4 L1607.78 692.4 L1608.34 692.4 L1608.9 692.4 L1609.46 692.4 L1610.02 692.4 L1610.57 692.4 L1611.13 692.4 L1611.69 692.4 L1612.25 692.4 L1612.81 692.4 L1613.37 692.4 L1613.93 692.4 L1614.49 692.4 L1615.05 692.4 L1615.61 692.4 L1616.17 692.4 L1616.73 692.4 L1617.29 692.4 L1617.84 692.4 L1618.4 692.4 L1618.96 692.4 L1619.52 692.4 L1620.08 692.4 L1620.64 692.4 L1621.2 692.4 L1621.76 692.4 L1622.32 692.4 L1622.88 692.4 L1623.44 692.4 L1624 692.4 L1624.56 692.4 L1625.11 692.4 L1625.67 692.4 L1626.23 692.4 L1626.79 692.4 L1627.35 692.4 L1627.91 692.4 L1628.47 692.4 L1629.03 692.4 L1629.59 692.4 L1630.15 692.4 L1630.71 692.4 L1631.27 692.4 L1631.83 692.4 L1632.39 692.4 L1632.94 692.4 L1633.5 692.4 L1634.06 692.4 L1634.62 692.4 L1635.18 692.4 L1635.74 692.4 L1636.3 692.4 L1636.86 692.4 L1637.42 692.4 L1637.98 692.4 L1638.54 692.4 L1639.1 692.4 L1639.66 692.4 L1640.21 692.4 L1640.77 692.4 L1641.33 692.4 L1641.89 692.4 L1642.45 692.4 L1643.01 692.4 L1643.57 692.4 L1644.13 692.4 L1644.69 692.4 L1645.25 692.4 L1645.81 692.4 L1646.37 692.4 L1646.93 692.4 L1647.48 692.4 L1648.04 692.4 L1648.6 692.4 L1649.16 692.4 L1649.72 692.4 L1650.28 692.4 L1650.84 692.4 L1651.4 692.4 L1651.96 692.4 L1652.52 692.4 L1653.08 692.4 L1653.64 692.4 L1654.2 692.4 L1654.76 692.4 L1655.31 692.4 L1655.87 692.4 L1656.43 692.4 L1656.99 692.4 L1657.55 692.4 L1658.11 692.4 L1658.67 692.4 L1659.23 692.4 L1659.79 692.4 L1660.35 692.4 L1660.91 692.4 L1661.47 692.4 L1662.03 692.4 L1662.58 692.4 L1663.14 692.4 L1663.7 692.4 L1664.26 692.4 L1664.82 692.4 L1665.38 692.4 L1665.94 692.4 L1666.5 692.4 L1667.06 692.4 L1667.62 692.4 L1668.18 692.4 L1668.74 692.4 L1669.3 692.4 L1669.85 692.4 L1670.41 692.4 L1670.97 692.4 L1671.53 692.4 L1672.09 692.4 L1672.65 692.4 L1673.21 692.4 L1673.77 692.4 L1674.33 692.4 L1674.89 692.4 L1675.45 692.4 L1676.01 692.4 L1676.57 692.4 L1677.13 692.4 L1677.68 692.4 L1678.24 692.4 L1678.8 692.4 L1679.36 692.4 L1679.92 692.4 L1680.48 692.4 L1681.04 692.4 L1681.6 692.4 L1682.16 692.4 L1682.72 692.4 L1683.28 692.4 L1683.84 692.4 L1684.4 692.4 L1684.95 692.4 L1685.51 692.4 L1686.07 692.4 L1686.63 692.4 L1687.19 692.4 L1687.75 692.4 L1688.31 692.4 L1688.87 692.4 L1689.43 692.4 L1689.99 692.4 L1690.55 692.4 L1691.11 692.4 L1691.67 692.4 L1692.23 692.4 L1692.78 692.4 L1693.34 692.4 L1693.9 692.4 L1694.46 692.4 L1695.02 692.4 L1695.58 692.4 L1696.14 692.4 L1696.7 692.4 L1697.26 692.4 L1697.82 692.4 L1698.38 692.4 L1698.94 692.4 L1699.5 692.4 L1700.05 692.4 L1700.61 692.4 L1701.17 692.4 L1701.73 692.4 L1702.29 692.4 L1702.85 692.4 L1703.41 692.4 L1703.97 692.4 L1704.53 692.4 L1705.09 692.4 L1705.65 692.4 L1706.21 692.4 L1706.77 692.4 L1707.32 692.4 L1707.88 692.4 L1708.44 692.4 L1709 692.4 L1709.56 692.4 L1710.12 692.4 L1710.68 692.4 L1711.24 692.4 L1711.8 692.4 L1712.36 692.4 L1712.92 692.4 L1713.48 692.4 L1714.04 692.4 L1714.6 692.4 L1715.15 692.4 L1715.71 692.4 L1716.27 692.4 L1716.83 692.4 L1717.39 692.4 L1717.95 692.4 L1718.51 692.4 L1719.07 692.4 L1719.63 692.4 L1720.19 692.4 L1720.75 692.4 L1721.31 692.4 L1721.87 692.4 L1722.42 692.4 L1722.98 692.4 L1723.54 692.4 L1724.1 692.4 L1724.66 692.4 L1725.22 692.4 L1725.78 692.4 L1726.34 692.4 L1726.9 692.4 L1727.46 692.4 L1728.02 692.4 L1728.58 692.4 L1729.14 692.4 L1729.69 692.4 L1730.25 692.4 L1730.81 692.4 L1731.37 692.4 L1731.93 692.4 L1732.49 692.4 L1733.05 692.4 L1733.61 692.4 L1734.17 692.4 L1734.73 692.4 L1735.29 692.4 L1735.85 692.4 L1736.41 692.4 L1736.97 692.4 L1737.52 692.4 L1738.08 692.4 L1738.64 692.4 L1739.2 692.4 L1739.76 692.4 L1740.32 692.4 L1740.88 692.4 L1741.44 692.4 L1742 692.4 L1742.56 692.4 L1743.12 692.4 L1743.68 692.4 L1744.24 692.4 L1744.79 692.4 L1745.35 692.4 L1745.91 692.4 L1746.47 692.4 L1747.03 692.4 L1747.59 692.4 L1748.15 692.4 L1748.71 692.4 L1749.27 692.4 L1749.83 692.4 L1750.39 692.4 L1750.95 692.4 L1751.51 692.4 L1752.06 692.4 L1752.62 692.4 L1753.18 692.4 L1753.74 692.4 L1754.3 692.4 L1754.86 692.4 L1755.42 692.4 L1755.98 692.4 L1756.54 692.4 L1757.1 692.4 L1757.66 692.4 L1758.22 692.4 L1758.78 692.4 L1759.34 692.4 L1759.89 692.4 L1760.45 692.4 L1761.01 692.4 L1761.57 692.4 L1762.13 692.4 L1762.69 692.4 L1763.25 692.4 L1763.81 692.4 L1764.37 692.4 L1764.93 692.4 L1765.49 692.4 L1766.05 692.4 L1766.61 692.4 L1767.16 692.4 L1767.72 692.4 L1768.28 692.4 L1768.84 692.4 L1769.4 692.4 L1769.96 692.4 L1770.52 692.4 L1771.08 692.4 L1771.64 692.4 L1772.2 692.4 L1772.76 692.4 L1773.32 692.4 L1773.88 692.4 L1774.43 692.4 L1774.99 692.4 L1775.55 692.4 L1776.11 692.4 L1776.67 692.4 L1777.23 692.4 L1777.79 692.4 L1778.35 692.4 L1778.91 692.4 L1779.47 692.4 L1780.03 692.4 L1780.59 692.4 L1781.15 692.4 L1781.71 692.4 L1782.26 692.4 L1782.82 692.4 L1783.38 692.4 L1783.94 692.4 L1784.5 692.4 L1785.06 692.4 L1785.62 692.4 L1786.18 692.4 L1786.74 692.4 L1787.3 692.4 L1787.86 692.4 L1788.42 692.4 L1788.98 692.4 L1789.53 692.4 L1790.09 692.4 L1790.65 692.4 L1791.21 692.4 L1791.77 692.4 L1792.33 692.4 L1792.89 692.4 L1793.45 692.4 L1794.01 692.4 L1794.57 692.4 L1795.13 692.4 L1795.69 692.4 L1796.25 692.4 L1796.8 692.4 L1797.36 692.4 L1797.92 692.4 L1798.48 692.4 L1799.04 692.4 L1799.6 692.4 L1800.16 692.4 L1800.72 692.4 L1801.28 692.4 L1801.84 692.4 L1802.4 692.4 L1802.96 692.4 L1803.52 692.4 L1804.08 692.4 L1804.63 692.4 L1805.19 692.4 L1805.75 692.4 L1806.31 692.4 L1806.87 692.4 L1807.43 692.4 L1807.99 692.4 L1808.55 692.4 L1809.11 692.4 L1809.67 692.4 L1810.23 692.4 L1810.79 692.4 L1811.35 692.4 L1811.9 692.4 L1812.46 692.4 L1813.02 692.4 L1813.58 692.4 L1814.14 692.4 L1814.7 692.4 L1815.26 692.4 L1815.82 692.4 L1816.38 692.4 L1816.94 692.4 L1817.5 692.4 L1818.06 692.4 L1818.62 692.4 L1819.18 692.4 L1819.73 692.4 L1820.29 692.4 L1820.85 692.4 L1821.41 692.4 L1821.97 692.4 L1822.53 692.4 L1823.09 692.4 L1823.65 692.4 L1824.21 692.4 L1824.77 692.4 L1825.33 692.4 L1825.89 692.4 L1826.45 692.4 L1827 692.4 L1827.56 692.4 L1828.12 692.4 L1828.68 692.4 L1829.24 692.4 L1829.8 692.4 L1830.36 692.4 L1830.92 692.4 L1831.48 692.4 L1832.04 692.4 L1832.6 692.4 L1833.16 692.4 L1833.72 692.4 L1834.27 692.4 L1834.83 692.4 L1835.39 692.4 L1835.95 692.4 L1836.51 692.4 L1837.07 692.4 L1837.63 692.4 L1838.19 692.4 L1838.19 681.847 L1837.63 681.847 L1837.07 681.847 L1836.51 681.847 L1835.95 681.847 L1835.39 681.847 L1834.83 681.847 L1834.27 681.847 L1833.72 681.847 L1833.16 681.847 L1832.6 681.847 L1832.04 681.847 L1831.48 681.847 L1830.92 681.847 L1830.36 681.847 L1829.8 681.847 L1829.24 681.847 L1828.68 681.847 L1828.12 681.847 L1827.56 681.847 L1827 681.847 L1826.45 681.847 L1825.89 681.847 L1825.33 681.847 L1824.77 681.847 L1824.21 681.847 L1823.65 681.847 L1823.09 681.847 L1822.53 681.847 L1821.97 681.847 L1821.41 681.847 L1820.85 681.847 L1820.29 681.847 L1819.73 681.847 L1819.18 681.847 L1818.62 681.847 L1818.06 681.847 L1817.5 681.847 L1816.94 681.847 L1816.38 681.847 L1815.82 681.847 L1815.26 681.847 L1814.7 681.847 L1814.14 681.847 L1813.58 681.847 L1813.02 681.847 L1812.46 681.847 L1811.9 681.847 L1811.35 681.847 L1810.79 681.847 L1810.23 681.847 L1809.67 681.847 L1809.11 681.847 L1808.55 681.847 L1807.99 681.847 L1807.43 681.847 L1806.87 681.847 L1806.31 681.847 L1805.75 681.847 L1805.19 681.847 L1804.63 681.847 L1804.08 681.847 L1803.52 681.847 L1802.96 681.847 L1802.4 681.847 L1801.84 681.847 L1801.28 681.847 L1800.72 681.847 L1800.16 681.847 L1799.6 681.847 L1799.04 681.847 L1798.48 681.847 L1797.92 681.847 L1797.36 681.847 L1796.8 681.847 L1796.25 681.847 L1795.69 681.847 L1795.13 681.847 L1794.57 681.847 L1794.01 681.847 L1793.45 681.847 L1792.89 681.847 L1792.33 681.847 L1791.77 681.847 L1791.21 681.847 L1790.65 681.847 L1790.09 681.847 L1789.53 681.847 L1788.98 681.847 L1788.42 681.847 L1787.86 681.847 L1787.3 681.847 L1786.74 681.847 L1786.18 681.847 L1785.62 681.847 L1785.06 681.847 L1784.5 681.847 L1783.94 681.847 L1783.38 681.847 L1782.82 681.847 L1782.26 681.847 L1781.71 681.847 L1781.15 681.847 L1780.59 681.847 L1780.03 681.847 L1779.47 681.847 L1778.91 681.847 L1778.35 681.847 L1777.79 681.847 L1777.23 681.847 L1776.67 681.847 L1776.11 681.847 L1775.55 681.847 L1774.99 681.847 L1774.43 681.847 L1773.88 681.847 L1773.32 681.847 L1772.76 681.847 L1772.2 681.847 L1771.64 681.847 L1771.08 681.847 L1770.52 681.847 L1769.96 681.847 L1769.4 681.847 L1768.84 681.847 L1768.28 681.847 L1767.72 681.847 L1767.16 681.847 L1766.61 681.847 L1766.05 681.847 L1765.49 681.847 L1764.93 681.847 L1764.37 681.847 L1763.81 681.847 L1763.25 681.847 L1762.69 681.847 L1762.13 681.847 L1761.57 681.847 L1761.01 681.847 L1760.45 681.847 L1759.89 681.847 L1759.34 681.847 L1758.78 681.847 L1758.22 681.847 L1757.66 681.847 L1757.1 681.847 L1756.54 681.847 L1755.98 681.847 L1755.42 681.847 L1754.86 681.847 L1754.3 681.847 L1753.74 681.847 L1753.18 681.847 L1752.62 681.847 L1752.06 681.847 L1751.51 681.847 L1750.95 681.847 L1750.39 681.847 L1749.83 681.847 L1749.27 681.847 L1748.71 681.847 L1748.15 681.847 L1747.59 681.847 L1747.03 681.847 L1746.47 681.847 L1745.91 681.847 L1745.35 681.847 L1744.79 681.847 L1744.24 681.847 L1743.68 681.847 L1743.12 681.847 L1742.56 681.847 L1742 681.847 L1741.44 681.847 L1740.88 681.847 L1740.32 681.847 L1739.76 681.847 L1739.2 681.847 L1738.64 681.847 L1738.08 681.847 L1737.52 681.847 L1736.97 681.847 L1736.41 681.847 L1735.85 681.847 L1735.29 681.847 L1734.73 681.847 L1734.17 681.847 L1733.61 681.847 L1733.05 681.847 L1732.49 681.847 L1731.93 681.847 L1731.37 681.847 L1730.81 681.847 L1730.25 681.847 L1729.69 681.847 L1729.14 681.847 L1728.58 681.847 L1728.02 681.847 L1727.46 681.847 L1726.9 681.847 L1726.34 681.847 L1725.78 681.847 L1725.22 681.847 L1724.66 681.847 L1724.1 681.847 L1723.54 681.847 L1722.98 681.847 L1722.42 681.847 L1721.87 681.847 L1721.31 681.847 L1720.75 681.847 L1720.19 681.847 L1719.63 681.847 L1719.07 681.847 L1718.51 681.847 L1717.95 681.847 L1717.39 681.847 L1716.83 681.847 L1716.27 681.847 L1715.71 681.847 L1715.15 681.847 L1714.6 681.847 L1714.04 681.847 L1713.48 681.847 L1712.92 681.847 L1712.36 681.847 L1711.8 681.847 L1711.24 681.847 L1710.68 681.847 L1710.12 681.847 L1709.56 681.847 L1709 681.847 L1708.44 681.847 L1707.88 681.847 L1707.32 681.847 L1706.77 681.847 L1706.21 681.847 L1705.65 681.847 L1705.09 681.847 L1704.53 681.847 L1703.97 681.847 L1703.41 681.847 L1702.85 681.847 L1702.29 681.847 L1701.73 681.847 L1701.17 681.847 L1700.61 681.847 L1700.05 681.847 L1699.5 681.847 L1698.94 681.847 L1698.38 681.847 L1697.82 681.847 L1697.26 681.847 L1696.7 681.847 L1696.14 681.847 L1695.58 681.847 L1695.02 681.847 L1694.46 681.847 L1693.9 681.847 L1693.34 681.847 L1692.78 681.847 L1692.23 681.847 L1691.67 681.847 L1691.11 681.847 L1690.55 681.847 L1689.99 681.847 L1689.43 681.847 L1688.87 681.847 L1688.31 681.847 L1687.75 681.847 L1687.19 681.847 L1686.63 681.847 L1686.07 681.847 L1685.51 681.847 L1684.95 681.847 L1684.4 681.847 L1683.84 681.847 L1683.28 681.847 L1682.72 681.847 L1682.16 681.847 L1681.6 681.847 L1681.04 681.847 L1680.48 681.847 L1679.92 681.847 L1679.36 681.847 L1678.8 681.847 L1678.24 681.847 L1677.68 681.847 L1677.13 681.847 L1676.57 681.847 L1676.01 681.847 L1675.45 681.847 L1674.89 681.847 L1674.33 681.847 L1673.77 681.847 L1673.21 681.847 L1672.65 681.847 L1672.09 681.847 L1671.53 681.847 L1670.97 681.847 L1670.41 681.847 L1669.85 681.847 L1669.3 681.847 L1668.74 681.847 L1668.18 681.847 L1667.62 681.847 L1667.06 681.847 L1666.5 681.847 L1665.94 681.847 L1665.38 681.847 L1664.82 681.847 L1664.26 681.847 L1663.7 681.847 L1663.14 681.847 L1662.58 681.847 L1662.03 681.847 L1661.47 681.847 L1660.91 681.847 L1660.35 681.847 L1659.79 681.847 L1659.23 681.847 L1658.67 681.847 L1658.11 681.847 L1657.55 681.847 L1656.99 681.847 L1656.43 681.847 L1655.87 681.847 L1655.31 681.847 L1654.76 681.847 L1654.2 681.847 L1653.64 681.847 L1653.08 681.847 L1652.52 681.847 L1651.96 681.847 L1651.4 681.847 L1650.84 681.847 L1650.28 681.847 L1649.72 681.847 L1649.16 681.847 L1648.6 681.847 L1648.04 681.847 L1647.48 681.847 L1646.93 681.847 L1646.37 681.847 L1645.81 681.847 L1645.25 681.847 L1644.69 681.847 L1644.13 681.847 L1643.57 681.847 L1643.01 681.847 L1642.45 681.847 L1641.89 681.847 L1641.33 681.847 L1640.77 681.847 L1640.21 681.847 L1639.66 681.847 L1639.1 681.847 L1638.54 681.847 L1637.98 681.847 L1637.42 681.847 L1636.86 681.847 L1636.3 681.847 L1635.74 681.847 L1635.18 681.847 L1634.62 681.847 L1634.06 681.847 L1633.5 681.847 L1632.94 681.847 L1632.39 681.847 L1631.83 681.847 L1631.27 681.847 L1630.71 681.847 L1630.15 681.847 L1629.59 681.847 L1629.03 681.847 L1628.47 681.847 L1627.91 681.847 L1627.35 681.847 L1626.79 681.847 L1626.23 681.847 L1625.67 681.847 L1625.11 681.847 L1624.56 681.847 L1624 681.847 L1623.44 681.847 L1622.88 681.847 L1622.32 681.847 L1621.76 681.847 L1621.2 681.847 L1620.64 681.847 L1620.08 681.847 L1619.52 681.847 L1618.96 681.847 L1618.4 681.847 L1617.84 681.847 L1617.29 681.847 L1616.73 681.847 L1616.17 681.847 L1615.61 681.847 L1615.05 681.847 L1614.49 681.847 L1613.93 681.847 L1613.37 681.847 L1612.81 681.847 L1612.25 681.847 L1611.69 681.847 L1611.13 681.847 L1610.57 681.847 L1610.02 681.847 L1609.46 681.847 L1608.9 681.847 L1608.34 681.847 L1607.78 681.847 L1607.22 681.847 L1606.66 681.847 L1606.1 681.847 L1605.54 681.847 L1604.98 681.847 L1604.42 681.847 L1603.86 681.847 L1603.3 681.847 L1602.74 681.847 L1602.19 681.847 L1601.63 681.847 L1601.07 681.847 L1600.51 681.847 L1599.95 681.847 L1599.39 681.847 L1598.83 681.847 L1598.27 681.847 L1597.71 681.847 L1597.15 681.847 L1596.59 681.847 L1596.03 681.847 L1595.47 681.847 L1594.92 681.847 L1594.36 681.847 L1593.8 681.847 L1593.24 681.847 L1592.68 681.847 L1592.12 681.847 L1591.56 681.847 L1591 681.847 L1590.44 681.847 L1589.88 681.847 L1589.32 681.847 L1588.76 681.847 L1588.2 681.847 L1587.65 681.847 L1587.09 681.847 L1586.53 681.847 L1585.97 681.847 L1585.41 681.847 L1584.85 681.847 L1584.29 681.847 L1583.73 681.847 L1583.17 681.847 L1582.61 681.847 L1582.05 681.847 L1581.49 681.847 L1580.93 681.847 L1580.37 681.847 L1579.82 681.847 L1579.26 681.847 L1578.7 681.847 L1578.14 681.847 L1577.58 681.847 L1577.02 681.847 L1576.46 681.847 L1575.9 681.847 L1575.34 681.847 L1574.78 681.847 L1574.22 681.847 L1573.66 681.847 L1573.1 681.847 L1572.55 681.847 L1571.99 681.847 L1571.43 681.847 L1570.87 681.847 L1570.31 681.847 L1569.75 681.847 L1569.19 681.847 L1568.63 681.847 L1568.07 681.847 L1567.51 681.847 L1566.95 681.847 L1566.39 681.847 L1565.83 681.847 L1565.28 681.847 L1564.72 681.847 L1564.16 681.847 L1563.6 681.847 L1563.04 681.847 L1562.48 681.847 L1561.92 681.847 L1561.36 681.847 L1560.8 681.847 L1560.24 681.847 L1559.68 681.847 L1559.12 681.847 L1558.56 681.847 L1558 681.847 L1557.45 681.847 L1556.89 681.847 L1556.33 681.847 L1555.77 681.847 L1555.21 681.847 L1554.65 681.847 L1554.09 681.847 L1553.53 681.847 L1552.97 681.847 L1552.41 681.847 L1551.85 681.847 L1551.29 681.847 L1550.73 681.847 L1550.18 681.847 L1549.62 681.847 L1549.06 681.847 L1548.5 681.847 L1547.94 681.847 L1547.38 681.847 L1546.82 681.847 L1546.26 681.847 L1545.7 681.847 L1545.14 681.847 L1544.58 681.847 L1544.02 681.847 L1543.46 681.847 L1542.9 681.847 L1542.35 681.847 L1541.79 681.847 L1541.23 681.847 L1540.67 681.847 L1540.11 681.847 L1539.55 681.847 L1538.99 681.847 L1538.43 681.847 L1537.87 681.847 L1537.31 681.847 L1536.75 681.847 L1536.19 681.847 L1535.63 681.847 L1535.08 681.847 L1534.52 681.847 L1533.96 681.847 L1533.4 681.847 L1532.84 681.847 L1532.28 681.847 L1531.72 681.847 L1531.16 681.847 L1530.6 681.847 L1530.04 681.847 L1529.48 681.847 L1528.92 681.847 L1528.36 681.847 L1527.81 681.847 L1527.25 681.847 L1526.69 681.847 L1526.13 681.847 L1525.57 681.847 L1525.01 681.847 L1524.45 681.847 L1523.89 681.847 L1523.33 681.847 L1522.77 681.847 L1522.21 681.847 L1521.65 681.847 L1521.09 681.847 L1520.53 681.847 L1519.98 681.847 L1519.42 681.847 L1518.86 681.847 L1518.3 681.847 L1517.74 681.847 L1517.18 681.847 L1516.62 681.847 L1516.06 681.847 L1515.5 681.847 L1514.94 681.847 L1514.38 681.847 L1513.82 681.847 L1513.26 681.847 L1512.71 681.847 L1512.15 681.847 L1511.59 681.847 L1511.03 681.847 L1510.47 681.847 L1509.91 681.847 L1509.35 681.847 L1508.79 681.847 L1508.23 681.847 L1507.67 681.847 L1507.11 681.847 L1506.55 681.847 L1505.99 681.847 L1505.44 681.847 L1504.88 681.847 L1504.32 681.847 L1503.76 681.847 L1503.2 681.847 L1502.64 681.847 L1502.08 681.847 L1501.52 681.847 L1500.96 681.847 L1500.4 681.847 L1499.84 681.847 L1499.28 681.847 L1498.72 681.847 L1498.16 681.847 L1497.61 681.847 L1497.05 681.847 L1496.49 681.847 L1495.93 681.847 L1495.37 681.847 L1494.81 681.847 L1494.25 681.847 L1493.69 681.847 L1493.13 681.847 L1492.57 681.847 L1492.01 681.847 L1491.45 681.847 L1490.89 681.847 L1490.34 681.847 L1489.78 681.847 L1489.22 681.847 L1488.66 681.847 L1488.1 681.847 L1487.54 681.847 L1486.98 681.847 L1486.42 681.847 L1485.86 681.847 L1485.3 681.847 L1484.74 681.847 L1484.18 681.847 L1483.62 681.847 L1483.07 681.847 L1482.51 681.847 L1481.95 681.847 L1481.39 681.847 L1480.83 681.847 L1480.27 681.847 L1479.71 681.847 L1479.15 681.847 L1478.59 681.847 L1478.03 681.847 L1477.47 681.847 L1476.91 681.847 L1476.35 681.847 L1475.79 681.847 L1475.24 681.847 L1474.68 681.847 L1474.12 681.847 L1473.56 681.847 L1473 681.847 L1472.44 681.847 L1471.88 681.847 L1471.32 681.847 L1470.76 681.847 L1470.2 681.847 L1469.64 681.847 L1469.08 681.847 L1468.52 681.847 L1467.97 681.847 L1467.41 681.847 L1466.85 681.847 L1466.29 681.847 L1465.73 681.847 L1465.17 681.847 L1464.61 681.847 L1464.05 681.847 L1463.49 681.847 L1462.93 681.847 L1462.37 681.847 L1461.81 681.847 L1461.25 681.847 L1460.7 681.847 L1460.14 681.847 L1459.58 681.847 L1459.02 681.847 L1458.46 681.847 L1457.9 681.847 L1457.34 681.847 L1456.78 681.847 L1456.22 681.847 L1455.66 681.847 L1455.1 681.847 L1454.54 681.847 L1453.98 681.847 L1453.42 681.847 L1452.87 681.847 L1452.31 681.847 L1451.75 681.847 L1451.19 681.847 L1450.63 681.847 L1450.07 681.847 L1449.51 681.847 L1448.95 681.847 L1448.39 681.847 L1447.83 681.847 L1447.27 681.847 L1446.71 681.847 L1446.15 681.847 L1445.6 681.847 L1445.04 681.847 L1444.48 681.847 L1443.92 681.847 L1443.36 681.847 L1442.8 681.847 L1442.24 681.847 L1441.68 681.847 L1441.12 681.847 L1440.56 681.847 L1440 681.847 L1439.44 681.847 L1438.88 681.847 L1438.33 681.847 L1437.77 681.847 L1437.21 681.847 L1436.65 681.847 L1436.09 681.847 L1435.53 681.847 L1434.97 681.847 L1434.41 681.847 L1433.85 681.847 L1433.29 681.847 L1432.73 681.847 L1432.17 681.847 L1431.61 681.847 L1431.05 681.847 L1430.5 681.847 L1429.94 681.847 L1429.38 681.847 L1428.82 681.847 L1428.26 681.847 L1427.7 681.847 L1427.14 681.847 L1426.58 681.847 L1426.02 681.847 L1425.46 681.847 L1424.9 681.847 L1424.34 681.847 L1423.78 681.847 L1423.23 681.847 L1422.67 681.847 L1422.11 681.847 L1421.55 681.847 L1420.99 681.847 L1420.43 681.847 L1419.87 681.847 L1419.31 681.847 L1418.75 681.847 L1418.19 681.847 L1417.63 681.847 L1417.07 681.847 L1416.51 681.847 L1415.95 681.847 L1415.4 681.847 L1414.84 681.847 L1414.28 681.847 L1413.72 681.847 L1413.16 681.847 L1412.6 681.847 L1412.04 681.847 L1411.48 681.847 L1410.92 681.847 L1410.36 681.847 L1409.8 681.847 L1409.24 681.847 L1408.68 681.847 L1408.13 681.847 L1407.57 681.847 L1407.01 681.847 L1406.45 681.847 L1405.89 681.847 L1405.33 681.847 L1404.77 681.847 L1404.21 681.847 L1403.65 681.847 L1403.09 681.847 L1402.53 681.847 L1401.97 681.847 L1401.41 681.847 L1400.86 681.847 L1400.3 681.847 L1399.74 681.847 L1399.18 681.847 L1398.62 681.847 L1398.06 681.847 L1397.5 681.847 L1396.94 681.847 L1396.38 681.847 L1395.82 681.847 L1395.26 681.847 L1394.7 681.847 L1394.14 681.847 L1393.58 681.847 L1393.03 681.847 L1392.47 681.847 L1391.91 681.847 L1391.35 681.847 L1390.79 681.847 L1390.23 681.847 L1389.67 681.847 L1389.11 681.847 L1388.55 681.847 L1387.99 681.847 L1387.43 681.847 L1386.87 681.847 L1386.31 681.847 L1385.76 681.847 L1385.2 681.847 L1384.64 681.847 L1384.08 681.847 L1383.52 681.847 L1382.96 681.847 L1382.4 681.847 L1381.84 681.847 L1381.28 681.847 L1380.72 681.847 L1380.16 681.847 L1379.6 681.847 L1379.04 681.847 L1378.49 681.847 L1377.93 681.847 L1377.37 681.847 L1376.81 681.847 L1376.25 681.847 L1375.69 681.847 L1375.13 681.847 L1374.57 681.847 L1374.01 681.847 L1373.45 681.847 L1372.89 681.847 L1372.33 681.847 L1371.77 681.847 L1371.21 681.847 L1370.66 681.847 L1370.1 681.847 L1369.54 681.847 L1368.98 681.847 L1368.42 681.847 L1367.86 681.847 L1367.3 681.847 L1366.74 681.847 L1366.18 681.847 L1365.62 681.847 L1365.06 681.847 L1364.5 681.847 L1363.94 681.847 L1363.39 681.847 L1362.83 681.847 L1362.27 681.847 L1361.71 681.847 L1361.15 681.847 L1360.59 681.847 L1360.03 681.847 L1359.47 681.847 L1358.91 681.847 L1358.35 681.847 L1357.79 681.847 L1357.23 681.847 L1356.67 681.847 L1356.12 681.847 L1355.56 681.847 L1355 681.847 L1354.44 681.847 L1353.88 681.847 L1353.32 681.847 L1352.76 681.847 L1352.2 681.847 L1351.64 681.847 L1351.08 681.847 L1350.52 681.847 L1349.96 681.847 L1349.4 681.847 L1348.84 681.847 L1348.29 681.847 L1347.73 681.847 L1347.17 681.847 L1346.61 681.847 L1346.05 681.847 L1345.49 681.847 L1344.93 681.847 L1344.37 681.847 L1343.81 681.847 L1343.25 681.847 L1342.69 681.847 L1342.13 681.847 L1341.57 681.847 L1341.02 681.847 L1340.46 681.847 L1339.9 681.847 L1339.34 681.847 L1338.78 681.847 L1338.22 681.847 L1337.66 681.847 L1337.1 681.847 L1336.54 681.847 L1335.98 681.847 L1335.42 681.847 L1334.86 681.847 L1334.3 681.847 L1333.75 681.847 L1333.19 681.847 L1332.63 681.847 L1332.07 681.847 L1331.51 681.847 L1330.95 681.847 L1330.39 681.847 L1329.83 681.847 L1329.27 681.847 L1328.71 681.847 L1328.15 681.847 L1327.59 681.847 L1327.03 681.847 L1326.47 681.847 L1325.92 681.847 L1325.36 681.847 L1324.8 681.847 L1324.24 681.847 L1323.68 681.847 L1323.12 681.847 L1322.56 681.847 L1322 681.847 L1321.44 681.847 L1320.88 681.847 L1320.32 681.847 L1319.76 681.847 L1319.2 681.847 L1318.65 681.847 L1318.09 681.847 L1317.53 681.847 L1316.97 681.847 L1316.41 681.847 L1315.85 681.847 L1315.29 681.847 L1314.73 681.847 L1314.17 681.847 L1313.61 681.847 L1313.05 681.847 L1312.49 681.847 L1311.93 681.847 L1311.38 681.847 L1310.82 681.847 L1310.26 681.847 L1309.7 681.847 L1309.14 681.847 L1308.58 681.847 L1308.02 681.847 L1307.46 681.847 L1306.9 681.847 L1306.34 681.847 L1305.78 681.847 L1305.22 681.847 L1304.66 681.847 L1304.1 681.847 L1303.55 681.847 L1302.99 681.847 L1302.43 681.847 L1301.87 681.847 L1301.31 681.847 L1300.75 681.847 L1300.19 681.847 L1299.63 681.847 L1299.07 681.847 L1298.51 681.847 L1297.95 681.847 L1297.39 681.847 L1296.83 681.847 L1296.28 681.847 L1295.72 681.847 L1295.16 681.847 L1294.6 681.847 L1294.04 681.847 L1293.48 681.847 L1292.92 681.847 L1292.36 681.847 L1291.8 681.847 L1291.24 681.847 L1290.68 681.847 L1290.12 681.847 L1289.56 681.847 L1289 681.847 L1288.45 681.847 L1287.89 681.847 L1287.33 681.847 L1286.77 681.847 L1286.21 681.847 L1285.65 681.847 L1285.09 681.847 L1284.53 681.847 L1283.97 681.847 L1283.41 681.847 L1282.85 681.847 L1282.29 681.847 L1281.73 681.847 L1281.18 681.847 L1280.62 681.847 L1280.06 681.847 L1279.5 681.847 L1278.94 681.847 L1278.38 681.847 L1277.82 681.847 L1277.26 681.847 L1276.7 681.847 L1276.14 681.847 L1275.58 681.847 L1275.02 681.847 L1274.46 681.847 L1273.91 681.847 L1273.35 681.847 L1272.79 681.847 L1272.23 681.847 L1271.67 681.847 L1271.11 681.847 L1270.55 681.847 L1269.99 681.847 L1269.43 681.847 L1268.87 681.847 L1268.31 681.847 L1267.75 681.847 L1267.19 681.847 L1266.63 681.847 L1266.08 681.847 L1265.52 681.847 L1264.96 681.847 L1264.4 681.847 L1263.84 681.847 L1263.28 681.847 L1262.72 681.847 L1262.16 681.847 L1261.6 681.847 L1261.04 681.847 L1260.48 681.847 L1259.92 681.847 L1259.36 681.847 L1258.81 681.847 L1258.25 681.847 L1257.69 681.847 L1257.13 681.847 L1256.57 681.847 L1256.01 681.847 L1255.45 681.847 L1254.89 681.847 L1254.33 681.847 L1253.77 681.847 L1253.21 681.847 L1252.65 681.847 L1252.09 681.847 L1251.54 681.847 L1250.98 681.847 L1250.42 681.847 L1249.86 681.847 L1249.3 681.847 L1248.74 681.847 L1248.18 681.847 L1247.62 681.847 L1247.06 681.847 L1246.5 681.847 L1245.94 681.847 L1245.38 681.847 L1244.82 681.847 L1244.26 681.847 L1243.71 681.847 L1243.15 681.847 L1242.59 681.847 L1242.03 681.847 L1241.47 681.847 L1240.91 681.847 L1240.35 681.847 L1239.79 681.847 L1239.23 681.847 L1238.67 681.847 L1238.11 681.847 L1237.55 681.847 L1236.99 681.847 L1236.44 681.847 L1235.88 681.847 L1235.32 681.847 L1234.76 681.847 L1234.2 681.847 L1233.64 681.847 L1233.08 681.847 L1232.52 681.847 L1231.96 681.847 L1231.4 681.847 L1230.84 681.847 L1230.28 681.847 L1229.72 681.847 L1229.17 681.847 L1228.61 681.847 L1228.05 681.847 L1227.49 681.847 L1226.93 681.847 L1226.37 681.847 L1225.81 681.847 L1225.25 681.847 L1224.69 681.847 L1224.13 681.847 L1223.57 681.847 L1223.01 681.847 L1222.45 681.847 L1221.89 681.847 L1221.34 681.847 L1220.78 681.847 L1220.22 681.847 L1219.66 681.847 L1219.1 681.847 L1218.54 681.847 L1217.98 681.847 L1217.42 681.847 L1216.86 681.847 L1216.3 681.847 L1215.74 681.847 L1215.18 681.847 L1214.62 681.847 L1214.07 681.847 L1213.51 681.847 L1212.95 681.847 L1212.39 681.847 L1211.83 681.847 L1211.27 681.847 L1210.71 681.847 L1210.15 681.847 L1209.59 681.847 L1209.03 681.847 L1208.47 681.847 L1207.91 681.847 L1207.35 681.847 L1206.8 681.847 L1206.24 681.847 L1205.68 681.847 L1205.12 681.847 L1204.56 681.847 L1204 681.847 L1203.44 681.847 L1202.88 681.847 L1202.32 681.847 L1201.76 681.847 L1201.2 681.847 L1200.64 681.847 L1200.08 681.847 L1199.52 681.847 L1198.97 681.847 L1198.41 681.847 L1197.85 681.847 L1197.29 681.847 L1196.73 681.847 L1196.17 681.847 L1195.61 681.847 L1195.05 681.847 L1194.49 681.847 L1193.93 681.847 L1193.37 681.847 L1192.81 681.847 L1192.25 681.847 L1191.7 681.847 L1191.14 681.847 L1190.58 681.847 L1190.02 681.847 L1189.46 681.847 L1188.9 681.847 L1188.34 681.847 L1187.78 681.847 L1187.22 681.847 L1186.66 681.847 L1186.1 681.847 L1185.54 681.847 L1184.98 681.847 L1184.43 681.847 L1183.87 681.847 L1183.31 681.847 L1182.75 681.847 L1182.19 681.847 L1181.63 681.847 L1181.07 681.847 L1180.51 681.847 L1179.95 681.847 L1179.39 681.847 L1178.83 681.847 L1178.27 681.847 L1177.71 681.847 L1177.15 681.847 L1176.6 681.847 L1176.04 681.847 L1175.48 681.847 L1174.92 681.847 L1174.36 681.847 L1173.8 681.847 L1173.24 681.847 L1172.68 681.847 L1172.12 681.847 L1171.56 681.847 L1171 681.847 L1170.44 681.847 L1169.88 681.847 L1169.33 681.847 L1168.77 681.847 L1168.21 681.847 L1167.65 681.847 L1167.09 681.847 L1166.53 681.847 L1165.97 681.847 L1165.41 681.847 L1164.85 681.847 L1164.29 681.847 L1163.73 681.847 L1163.17 681.847 L1162.61 681.847 L1162.05 681.847 L1161.5 681.847 L1160.94 681.847 L1160.38 681.847 L1159.82 681.847 L1159.26 681.847 L1158.7 681.847 L1158.14 681.847 L1157.58 681.847 L1157.02 681.847 L1156.46 681.847 L1155.9 681.847 L1155.34 681.847 L1154.78 681.847 L1154.23 681.847 L1153.67 681.847 L1153.11 681.847 L1152.55 681.847 L1151.99 681.847 L1151.43 681.847 L1150.87 681.847 L1150.31 681.847 L1149.75 681.847 L1149.19 681.847 L1148.63 681.847 L1148.07 681.847 L1147.51 681.847 L1146.96 681.847 L1146.4 681.847 L1145.84 681.847 L1145.28 681.847 L1144.72 681.847 L1144.16 681.847 L1143.6 681.847 L1143.04 681.847 L1142.48 681.847 L1141.92 681.847 L1141.36 681.847 L1140.8 681.847 L1140.24 681.847 L1139.68 681.847 L1139.13 681.847 L1138.57 681.847 L1138.01 681.847 L1137.45 681.847 L1136.89 681.847 L1136.33 681.847 L1135.77 681.847 L1135.21 681.847 L1134.65 681.847 L1134.09 681.847 L1133.53 681.847 L1132.97 681.847 L1132.41 681.847 L1131.86 681.847 L1131.3 681.847 L1130.74 681.847 L1130.18 681.847 L1129.62 681.847 L1129.06 681.847 L1128.5 681.847 L1127.94 681.847 L1127.38 681.847 L1126.82 681.847 L1126.26 681.847 L1125.7 681.847 L1125.14 681.847 L1124.59 681.847 L1124.03 681.847 L1123.47 681.847 L1122.91 681.847 L1122.35 681.847 L1121.79 681.847 L1121.23 681.847 L1120.67 681.847 L1120.11 681.847 L1119.55 681.847 L1118.99 681.847 L1118.43 681.847 L1117.87 681.847 L1117.31 681.847 L1116.76 681.847 L1116.2 681.847 L1115.64 681.847 L1115.08 681.847 L1114.52 681.847 L1113.96 681.847 L1113.4 681.847 L1112.84 681.847 L1112.28 681.847 L1111.72 681.847 L1111.16 681.847 L1110.6 681.847 L1110.04 681.847 L1109.49 681.847 L1108.93 681.847 L1108.37 681.847 L1107.81 681.847 L1107.25 681.847 L1106.69 681.847 L1106.13 681.847 L1105.57 681.847 L1105.01 681.847 L1104.45 681.847 L1103.89 681.847 L1103.33 681.847 L1102.77 681.847 L1102.22 681.847 L1101.66 681.847 L1101.1 681.847 L1100.54 681.847 L1099.98 681.847 L1099.42 681.847 L1098.86 681.847 L1098.3 681.847 L1097.74 681.847 L1097.18 681.847 L1096.62 681.847 L1096.06 681.847 L1095.5 681.847 L1094.94 681.847 L1094.39 681.847 L1093.83 681.847 L1093.27 681.847 L1092.71 681.847 L1092.15 681.847 L1091.59 681.847 L1091.03 681.847 L1090.47 681.847 L1089.91 681.847 L1089.35 681.847 L1088.79 681.847 L1088.23 681.847 L1087.67 681.847 L1087.12 681.847 L1086.56 681.847 L1086 681.847 L1085.44 681.847 L1084.88 681.847 L1084.32 681.847 L1083.76 681.847 L1083.2 681.847 L1082.64 681.847 L1082.08 681.847 L1081.52 681.847 L1080.96 681.847 L1080.4 681.847 L1079.85 681.847 L1079.29 681.847 L1078.73 681.847 L1078.17 681.847 L1077.61 681.847 L1077.05 681.847 L1076.49 681.847 L1075.93 681.847 L1075.37 681.847 L1074.81 681.847 L1074.25 681.847 L1073.69 681.847 L1073.13 681.847 L1072.57 681.847 L1072.02 681.847 L1071.46 681.847 L1070.9 681.847 L1070.34 681.847 L1069.78 681.847 L1069.22 681.847 L1068.66 681.847 L1068.1 681.847 L1067.54 681.847 L1066.98 681.847 L1066.42 681.847 L1065.86 681.847 L1065.3 681.847 L1064.75 681.847 L1064.19 681.847 L1063.63 681.847 L1063.07 681.847 L1062.51 681.847 L1061.95 681.847 L1061.39 681.847 L1060.83 681.847 L1060.27 681.847 L1059.71 681.847 L1059.15 681.847 L1058.59 681.847 L1058.03 681.847 L1057.48 681.847 L1056.92 681.847 L1056.36 681.847 L1055.8 681.847 L1055.24 681.847 L1054.68 681.847 L1054.12 681.847 L1053.56 681.847 L1053 681.847 L1052.44 681.847 L1051.88 681.847 L1051.32 681.847 L1050.76 681.847 L1050.2 681.847 L1049.65 681.847 L1049.09 681.847 L1048.53 681.847 L1047.97 681.847 L1047.41 681.847 L1046.85 681.847 L1046.29 681.847 L1045.73 681.847 L1045.17 681.847 L1044.61 681.847 L1044.05 681.847 L1043.49 681.847 L1042.93 681.847 L1042.38 681.847 L1041.82 681.847 L1041.26 681.847 L1040.7 681.847 L1040.14 681.847 L1039.58 681.847 L1039.02 681.847 L1038.46 681.847 L1037.9 681.847 L1037.34 681.847 L1036.78 681.847 L1036.22 681.847 L1035.66 681.847 L1035.1 681.847 L1034.55 681.847 L1033.99 681.847 L1033.43 681.847 L1032.87 681.847 L1032.31 681.847 L1031.75 681.847 L1031.19 681.847 L1030.63 681.847 L1030.07 681.847 L1029.51 681.847 L1028.95 681.847 L1028.39 681.847 L1027.83 681.847 L1027.28 681.847 L1026.72 681.847 L1026.16 681.847 L1025.6 681.847 L1025.04 681.847 L1024.48 681.847 L1023.92 681.847 L1023.36 681.847 L1022.8 681.847 L1022.24 681.847 L1021.68 681.847 L1021.12 681.847 L1020.56 681.847 L1020.01 681.847 L1019.45 681.847 L1018.89 681.847 L1018.33 681.847 L1017.77 681.847 L1017.21 681.847 L1016.65 681.847 L1016.09 681.847 L1015.53 681.847 L1014.97 681.847 L1014.41 681.847 L1013.85 681.847 L1013.29 681.847 L1012.73 681.847 L1012.18 681.847 L1011.62 681.847 L1011.06 681.847 L1010.5 681.847 L1009.94 681.847 L1009.38 681.847 L1008.82 681.847 L1008.26 681.847 L1007.7 681.847 L1007.14 681.847 L1006.58 681.847 L1006.02 681.847 L1005.46 681.847 L1004.91 681.847 L1004.35 681.847 L1003.79 681.847 L1003.23 681.847 L1002.67 681.847 L1002.11 681.847 L1001.55 681.847 L1000.99 681.847 L1000.43 681.847 L999.872 681.847 L999.313 681.847 L998.754 681.847 L998.194 681.847 L997.635 681.847 L997.076 681.847 L996.517 681.847 L995.957 681.847 L995.398 681.847 L994.839 681.847 L994.28 681.847 L993.72 681.847 L993.161 681.847 L992.602 681.847 L992.043 681.847 L991.483 681.847 L990.924 681.847 L990.365 681.847 L989.806 681.847 L989.246 681.847 L988.687 681.847 L988.128 681.847 L987.569 681.847 L987.009 681.847 L986.45 681.847 L985.891 681.847 L985.332 681.847 L984.772 681.847 L984.213 681.847 L983.654 681.847 L983.095 681.847 L982.535 681.847 L981.976 681.847 L981.417 681.847 L980.858 681.847 L980.298 681.847 L979.739 681.847 L979.18 681.847 L978.621 681.847 L978.061 681.847 L977.502 681.847 L976.943 681.847 L976.384 681.847 L975.824 681.847 L975.265 681.847 L974.706 681.847 L974.147 681.847 L973.587 681.847 L973.028 681.847 L972.469 681.847 L971.91 681.847 L971.35 681.847 L970.791 681.847 L970.232 681.847 L969.673 681.847 L969.113 681.847 L968.554 681.847 L967.995 681.847 L967.436 681.847 L966.876 681.847 L966.317 681.847 L965.758 681.847 L965.199 681.847 L964.639 681.847 L964.08 681.847 L963.521 681.847 L962.962 681.847 L962.402 681.847 L961.843 681.847 L961.284 681.847 L960.725 681.847 L960.165 681.847 L959.606 681.847 L959.047 681.847 L958.488 681.847 L957.928 681.847 L957.369 681.847 L956.81 681.847 L956.251 681.847 L955.691 681.847 L955.132 681.847 L954.573 681.847 L954.014 681.847 L953.454 681.847 L952.895 681.847 L952.336 681.847 L951.777 681.847 L951.217 681.847 L950.658 681.847 L950.099 681.847 L949.54 681.847 L948.98 681.847 L948.421 681.847 L947.862 681.847 L947.303 681.847 L946.743 681.847 L946.184 681.847 L945.625 681.847 L945.066 681.847 L944.506 681.847 L943.947 681.847 L943.388 681.847 L942.829 681.847 L942.269 681.847 L941.71 681.847 L941.151 681.847 L940.592 681.847 L940.032 681.847 L939.473 681.847 L938.914 681.847 L938.355 681.847 L937.795 681.847 L937.236 681.847 L936.677 681.847 L936.118 681.847 L935.558 681.847 L934.999 681.847 L934.44 681.847 L933.881 681.847 L933.321 681.847 L932.762 681.847 L932.203 681.847 L931.644 681.847 L931.084 681.847 L930.525 681.847 L929.966 681.847 L929.406 681.847 L928.847 681.847 L928.288 681.847 L927.729 681.847 L927.169 681.847 L926.61 681.847 L926.051 681.847 L925.492 681.847 L924.932 681.847 L924.373 681.847 L923.814 681.847 L923.255 681.847 L922.695 681.847 L922.136 681.847 L921.577 681.847 L921.018 681.847 L920.458 681.847 L919.899 681.847 L919.34 681.847 L918.781 681.847 L918.221 681.847 L917.662 681.847 L917.103 681.847 L916.544 681.847 L915.984 681.847 L915.425 681.847 L914.866 681.847 L914.307 681.847 L913.747 681.847 L913.188 681.847 L912.629 681.847 L912.07 681.847 L911.51 681.847 L910.951 681.847 L910.392 681.847 L909.833 681.847 L909.273 681.847 L908.714 681.847 L908.155 681.847 L907.596 681.847 L907.036 681.847 L906.477 681.847 L905.918 681.847 L905.359 681.847 L904.799 681.847 L904.24 681.847 L903.681 681.847 L903.122 681.847 L902.562 681.847 L902.003 681.847 L901.444 681.847 L900.885 681.847 L900.325 681.847 L899.766 681.847 L899.207 681.847 L898.648 681.847 L898.088 681.847 L897.529 681.847 L896.97 681.847 L896.411 681.847 L895.851 681.847 L895.292 681.847 L894.733 681.847 L894.174 681.847 L893.614 681.847 L893.055 681.847 L892.496 681.847 L891.937 681.847 L891.377 681.847 L890.818 681.847 L890.259 681.847 L889.7 681.847 L889.14 681.847 L888.581 681.847 L888.022 681.847 L887.463 681.847 L886.903 681.847 L886.344 681.847 L885.785 681.847 L885.226 681.847 L884.666 681.847 L884.107 681.847 L883.548 681.847 L882.989 681.847 L882.429 681.847 L881.87 681.847 L881.311 681.847 L880.752 681.847 L880.192 681.847 L879.633 681.847 L879.074 681.847 L878.515 681.847 L877.955 681.847 L877.396 681.847 L876.837 681.847 L876.278 681.847 L875.718 681.847 L875.159 681.847 L874.6 681.847 L874.041 681.847 L873.481 681.847 L872.922 681.847 L872.363 681.847 L871.804 681.847 L871.244 681.847 L870.685 681.847 L870.126 681.847 L869.567 681.847 L869.007 681.847 L868.448 681.847 L867.889 681.847 L867.33 681.847 L866.77 681.847 L866.211 681.847 L865.652 681.847 L865.093 681.847 L864.533 681.847 L863.974 681.847 L863.415 681.847 L862.856 681.847 L862.296 681.847 L861.737 681.847 L861.178 681.847 L860.619 681.847 L860.059 681.847 L859.5 681.847 L858.941 681.847 L858.382 681.847 L857.822 681.847 L857.263 681.847 L856.704 681.847 L856.145 681.847 L855.585 681.847 L855.026 681.847 L854.467 681.847 L853.908 681.847 L853.348 681.847 L852.789 681.847 L852.23 681.847 L851.671 681.847 L851.111 681.847 L850.552 681.847 L849.993 681.847 L849.434 681.847 L848.874 681.847 L848.315 681.847 L847.756 681.847 L847.197 681.847 L846.637 681.847 L846.078 681.847 L845.519 681.847 L844.96 681.847 L844.4 681.847 L843.841 681.847 L843.282 681.847 L842.723 681.847 L842.163 681.847 L841.604 681.847 L841.045 681.847 L840.486 681.847 L839.926 681.847 L839.367 681.847 L838.808 681.847 L838.249 681.847 L837.689 681.847 L837.13 681.847 L836.571 681.847 L836.012 681.847 L835.452 681.847 L834.893 681.847 L834.334 681.847 L833.775 681.847 L833.215 681.847 L832.656 681.847 L832.097 681.847 L831.538 681.847 L830.978 681.847 L830.419 681.847 L829.86 681.847 L829.301 681.847 L828.741 681.847 L828.182 681.847 L827.623 681.847 L827.064 681.847 L826.504 681.847 L825.945 681.847 L825.386 681.847 L824.827 681.847 L824.267 681.847 L823.708 681.847 L823.149 681.847 L822.59 681.847 L822.03 681.847 L821.471 681.847 L820.912 681.847 L820.353 681.847 L819.793 681.847 L819.234 681.847 L818.675 681.847 L818.116 681.847 L817.556 681.847 L816.997 681.847 L816.438 681.847 L815.879 681.847 L815.319 681.847 L814.76 681.847 L814.201 681.847 L813.642 681.847 L813.082 681.847 L812.523 681.847 L811.964 681.847 L811.405 681.847 L810.845 681.847 L810.286 681.847 L809.727 681.847 L809.168 681.847 L808.608 681.847 L808.049 681.847 L807.49 681.847 L806.931 681.847 L806.371 681.847 L805.812 681.847 L805.253 681.847 L804.693 681.847 L804.134 681.847 L803.575 681.847 L803.016 681.847 L802.456 681.847 L801.897 681.847 L801.338 681.847 L800.779 681.847 L800.219 681.847 L799.66 681.847 L799.101 681.847 L798.542 681.847 L797.982 681.847 L797.423 681.847 L796.864 681.847 L796.305 681.847 L795.745 681.847 L795.186 681.847 L794.627 681.847 L794.068 681.847 L793.508 681.847 L792.949 681.847 L792.39 681.847 L791.831 681.847 L791.271 681.847 L790.712 681.847 L790.153 681.847 L789.594 681.847 L789.034 681.847 L788.475 681.847 L787.916 681.847 L787.357 681.847 L786.797 681.847 L786.238 681.847 L785.679 681.847 L785.12 681.847 L784.56 681.847 L784.001 681.847 L783.442 681.847 L782.883 681.847 L782.323 681.847 L781.764 681.847 L781.205 681.847 L780.646 681.847 L780.086 681.847 L779.527 681.847 L778.968 681.847 L778.409 681.847 L777.849 681.847 L777.29 681.847 L776.731 681.847 L776.172 681.847 L775.612 681.847 L775.053 681.847 L774.494 681.847 L773.935 681.847 L773.375 681.847 L772.816 681.847 L772.257 681.847 L771.698 681.847 L771.138 681.847 L770.579 681.847 L770.02 681.847 L769.461 681.847 L768.901 681.847 L768.342 681.847 L767.783 681.847 L767.224 681.847 L766.664 681.847 L766.105 681.847 L765.546 681.847 L764.987 681.847 L764.427 681.847 L763.868 681.847 L763.309 681.847 L762.75 681.847 L762.19 681.847 L761.631 681.847 L761.072 681.847 L760.513 681.847 L759.953 681.847 L759.394 681.847 L758.835 681.847 L758.276 681.847 L757.716 681.847 L757.157 681.847 L756.598 681.847 L756.039 681.847 L755.479 681.847 L754.92 681.847 L754.361 681.847 L753.802 681.847 L753.242 681.847 L752.683 681.847 L752.124 681.847 L751.565 681.847 L751.005 681.847 L750.446 681.847 L749.887 681.847 L749.328 681.847 L748.768 681.847 L748.209 681.847 L747.65 681.847 L747.091 681.847 L746.531 681.847 L745.972 681.847 L745.413 681.847 L744.854 681.847 L744.294 681.847 L743.735 681.847 L743.176 681.847 L742.617 681.847 L742.057 681.847 L741.498 681.847 L740.939 681.847 L740.38 681.847 L739.82 681.847 L739.261 681.847 L738.702 681.847 L738.143 681.847 L737.583 681.847 L737.024 681.847 L736.465 681.847 L735.906 681.847 L735.346 681.847 L734.787 681.847 L734.228 681.847 L733.669 681.847 L733.109 681.847 L732.55 681.847 L731.991 681.847 L731.432 681.847 L730.872 681.847 L730.313 681.847 L729.754 681.847 L729.195 681.847 L728.635 681.847 L728.076 681.847 L727.517 681.847 L726.958 681.847 L726.398 681.847 L725.839 681.847 L725.28 681.847 L724.721 681.847 L724.161 681.847 L723.602 681.847 L723.043 681.847 L722.484 681.847 L721.924 681.847 L721.365 681.847 L720.806 681.847 L720.247 681.847  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.124 720.806,687.124 721.365,687.124 721.924,687.124 722.484,687.124 723.043,687.124 723.602,687.124 724.161,687.124 724.721,687.124 725.28,687.124 725.839,687.124 726.398,687.124 726.958,687.124 727.517,687.124 728.076,687.124 728.635,687.124 729.195,687.124 729.754,687.124 730.313,687.124 730.872,687.124 731.432,687.124 731.991,687.124 732.55,687.124 733.109,687.124 733.669,687.124 734.228,687.124 734.787,687.124 735.346,687.124 735.906,687.124 736.465,687.124 737.024,687.124 737.583,687.124 738.143,687.124 738.702,687.124 739.261,687.124 739.82,687.124 740.38,687.124 740.939,687.124 741.498,687.124 742.057,687.124 742.617,687.124 743.176,687.124 743.735,687.124 744.294,687.124 744.854,687.124 745.413,687.124 745.972,687.124 746.531,687.124 747.091,687.124 747.65,687.124 748.209,687.124 748.768,687.124 749.328,687.124 749.887,687.124 750.446,687.124 751.005,687.124 751.565,687.124 752.124,687.124 752.683,687.124 753.242,687.124 753.802,687.124 754.361,687.124 754.92,687.124 755.479,687.124 756.039,687.124 756.598,687.124 757.157,687.124 757.716,687.124 758.276,687.124 758.835,687.124 759.394,687.124 759.953,687.124 760.513,687.124 761.072,687.124 761.631,687.124 762.19,687.124 762.75,687.124 763.309,687.124 763.868,687.124 764.427,687.124 764.987,687.124 765.546,687.124 766.105,687.124 766.664,687.124 767.224,687.124 767.783,687.124 768.342,687.124 768.901,687.124 769.461,687.124 770.02,687.124 770.579,687.124 771.138,687.124 771.698,687.124 772.257,687.124 772.816,687.124 773.375,687.124 773.935,687.124 774.494,687.124 775.053,687.124 775.612,687.124 776.172,687.124 776.731,687.124 777.29,687.124 777.849,687.124 778.409,687.124 778.968,687.124 779.527,687.124 780.086,687.124 780.646,687.124 781.205,687.124 781.764,687.124 782.323,687.124 782.883,687.124 783.442,687.124 784.001,687.124 784.56,687.124 785.12,687.124 785.679,687.124 786.238,687.124 786.797,687.124 787.357,687.124 787.916,687.124 788.475,687.124 789.034,687.124 789.594,687.124 790.153,687.124 790.712,687.124 791.271,687.124 791.831,687.124 792.39,687.124 792.949,687.124 793.508,687.124 794.068,687.124 794.627,687.124 795.186,687.124 795.745,687.124 796.305,687.124 796.864,687.124 797.423,687.124 797.982,687.124 798.542,687.124 799.101,687.124 799.66,687.124 800.219,687.124 800.779,687.124 801.338,687.124 801.897,687.124 802.456,687.124 803.016,687.124 803.575,687.124 804.134,687.124 804.693,687.124 805.253,687.124 805.812,687.124 806.371,687.124 806.931,687.124 807.49,687.124 808.049,687.124 808.608,687.124 809.168,687.124 809.727,687.124 810.286,687.124 810.845,687.124 811.405,687.124 811.964,687.124 812.523,687.124 813.082,687.124 813.642,687.124 814.201,687.124 814.76,687.124 815.319,687.124 815.879,687.124 816.438,687.124 816.997,687.124 817.556,687.124 818.116,687.124 818.675,687.124 819.234,687.124 819.793,687.124 820.353,687.124 820.912,687.124 821.471,687.124 822.03,687.124 822.59,687.124 823.149,687.124 823.708,687.124 824.267,687.124 824.827,687.124 825.386,687.124 825.945,687.124 826.504,687.124 827.064,687.124 827.623,687.124 828.182,687.124 828.741,687.124 829.301,687.124 829.86,687.124 830.419,687.124 830.978,687.124 831.538,687.124 832.097,687.124 832.656,687.124 833.215,687.124 833.775,687.124 834.334,687.124 834.893,687.124 835.452,687.124 836.012,687.124 836.571,687.124 837.13,687.124 837.689,687.124 838.249,687.124 838.808,687.124 839.367,687.124 839.926,687.124 840.486,687.124 841.045,687.124 841.604,687.124 842.163,687.124 842.723,687.124 843.282,687.124 843.841,687.124 844.4,687.124 844.96,687.124 845.519,687.124 846.078,687.124 846.637,687.124 847.197,687.124 847.756,687.124 848.315,687.124 848.874,687.124 849.434,687.124 849.993,687.124 850.552,687.124 851.111,687.124 851.671,687.124 852.23,687.124 852.789,687.124 853.348,687.124 853.908,687.124 854.467,687.124 855.026,687.124 855.585,687.124 856.145,687.124 856.704,687.124 857.263,687.124 857.822,687.124 858.382,687.124 858.941,687.124 859.5,687.124 860.059,687.124 860.619,687.124 861.178,687.124 861.737,687.124 862.296,687.124 862.856,687.124 863.415,687.124 863.974,687.124 864.533,687.124 865.093,687.124 865.652,687.124 866.211,687.124 866.77,687.124 867.33,687.124 867.889,687.124 868.448,687.124 869.007,687.124 869.567,687.124 870.126,687.124 870.685,687.124 871.244,687.124 871.804,687.124 872.363,687.124 872.922,687.124 873.481,687.124 874.041,687.124 874.6,687.124 875.159,687.124 875.718,687.124 876.278,687.124 876.837,687.124 877.396,687.124 877.955,687.124 878.515,687.124 879.074,687.124 879.633,687.124 880.192,687.124 880.752,687.124 881.311,687.124 881.87,687.124 882.429,687.124 882.989,687.124 883.548,687.124 884.107,687.124 884.666,687.124 885.226,687.124 885.785,687.124 886.344,687.124 886.903,687.124 887.463,687.124 888.022,687.124 888.581,687.124 889.14,687.124 889.7,687.124 890.259,687.124 890.818,687.124 891.377,687.124 891.937,687.124 892.496,687.124 893.055,687.124 893.614,687.124 894.174,687.124 894.733,687.124 895.292,687.124 895.851,687.124 896.411,687.124 896.97,687.124 897.529,687.124 898.088,687.124 898.648,687.124 899.207,687.124 899.766,687.124 900.325,687.124 900.885,687.124 901.444,687.124 902.003,687.124 902.562,687.124 903.122,687.124 903.681,687.124 904.24,687.124 904.799,687.124 905.359,687.124 905.918,687.124 906.477,687.124 907.036,687.124 907.596,687.124 908.155,687.124 908.714,687.124 909.273,687.124 909.833,687.124 910.392,687.124 910.951,687.124 911.51,687.124 912.07,687.124 912.629,687.124 913.188,687.124 913.747,687.124 914.307,687.124 914.866,687.124 915.425,687.124 915.984,687.124 916.544,687.124 917.103,687.124 917.662,687.124 918.221,687.124 918.781,687.124 919.34,687.124 919.899,687.124 920.458,687.124 921.018,687.124 921.577,687.124 922.136,687.124 922.695,687.124 923.255,687.124 923.814,687.124 924.373,687.124 924.932,687.124 925.492,687.124 926.051,687.124 926.61,687.124 927.169,687.124 927.729,687.124 928.288,687.124 928.847,687.124 929.406,687.124 929.966,687.124 930.525,687.124 931.084,687.124 931.644,687.124 932.203,687.124 932.762,687.124 933.321,687.124 933.881,687.124 934.44,687.124 934.999,687.124 935.558,687.124 936.118,687.124 936.677,687.124 937.236,687.124 937.795,687.124 938.355,687.124 938.914,687.124 939.473,687.124 940.032,687.124 940.592,687.124 941.151,687.124 941.71,687.124 942.269,687.124 942.829,687.124 943.388,687.124 943.947,687.124 944.506,687.124 945.066,687.124 945.625,687.124 946.184,687.124 946.743,687.124 947.303,687.124 947.862,687.124 948.421,687.124 948.98,687.124 949.54,687.124 950.099,687.124 950.658,687.124 951.217,687.124 951.777,687.124 952.336,687.124 952.895,687.124 953.454,687.124 954.014,687.124 954.573,687.124 955.132,687.124 955.691,687.124 956.251,687.124 956.81,687.124 957.369,687.124 957.928,687.124 958.488,687.124 959.047,687.124 959.606,687.124 960.165,687.124 960.725,687.124 961.284,687.124 961.843,687.124 962.402,687.124 962.962,687.124 963.521,687.124 964.08,687.124 964.639,687.124 965.199,687.124 965.758,687.124 966.317,687.124 966.876,687.124 967.436,687.124 967.995,687.124 968.554,687.124 969.113,687.124 969.673,687.124 970.232,687.124 970.791,687.124 971.35,687.124 971.91,687.124 972.469,687.124 973.028,687.124 973.587,687.124 974.147,687.124 974.706,687.124 975.265,687.124 975.824,687.124 976.384,687.124 976.943,687.124 977.502,687.124 978.061,687.124 978.621,687.124 979.18,687.124 979.739,687.124 980.298,687.124 980.858,687.124 981.417,687.124 981.976,687.124 982.535,687.124 983.095,687.124 983.654,687.124 984.213,687.124 984.772,687.124 985.332,687.124 985.891,687.124 986.45,687.124 987.009,687.124 987.569,687.124 988.128,687.124 988.687,687.124 989.246,687.124 989.806,687.124 990.365,687.124 990.924,687.124 991.483,687.124 992.043,687.124 992.602,687.124 993.161,687.124 993.72,687.124 994.28,687.124 994.839,687.124 995.398,687.124 995.957,687.124 996.517,687.124 997.076,687.124 997.635,687.124 998.194,687.124 998.754,687.124 999.313,687.124 999.872,687.124 1000.43,687.124 1000.99,687.124 1001.55,687.124 1002.11,687.124 1002.67,687.124 1003.23,687.124 1003.79,687.124 1004.35,687.124 1004.91,687.124 1005.46,687.124 1006.02,687.124 1006.58,687.124 1007.14,687.124 1007.7,687.124 1008.26,687.124 1008.82,687.124 1009.38,687.124 1009.94,687.124 1010.5,687.124 1011.06,687.124 1011.62,687.124 1012.18,687.124 1012.73,687.124 1013.29,687.124 1013.85,687.124 1014.41,687.124 1014.97,687.124 1015.53,687.124 1016.09,687.124 1016.65,687.124 1017.21,687.124 1017.77,687.124 1018.33,687.124 1018.89,687.124 1019.45,687.124 1020.01,687.124 1020.56,687.124 1021.12,687.124 1021.68,687.124 1022.24,687.124 1022.8,687.124 1023.36,687.124 1023.92,687.124 1024.48,687.124 1025.04,687.124 1025.6,687.124 1026.16,687.124 1026.72,687.124 1027.28,687.124 1027.83,687.124 1028.39,687.124 1028.95,687.124 1029.51,687.124 1030.07,687.124 1030.63,687.124 1031.19,687.124 1031.75,687.124 1032.31,687.124 1032.87,687.124 1033.43,687.124 1033.99,687.124 1034.55,687.124 1035.1,687.124 1035.66,687.124 1036.22,687.124 1036.78,687.124 1037.34,687.124 1037.9,687.124 1038.46,687.124 1039.02,687.124 1039.58,687.124 1040.14,687.124 1040.7,687.124 1041.26,687.124 1041.82,687.124 1042.38,687.124 1042.93,687.124 1043.49,687.124 1044.05,687.124 1044.61,687.124 1045.17,687.124 1045.73,687.124 1046.29,687.124 1046.85,687.124 1047.41,687.124 1047.97,687.124 1048.53,687.124 1049.09,687.124 1049.65,687.124 1050.2,687.124 1050.76,687.124 1051.32,687.124 1051.88,687.124 1052.44,687.124 1053,687.124 1053.56,687.124 1054.12,687.124 1054.68,687.124 1055.24,687.124 1055.8,687.124 1056.36,687.124 1056.92,687.124 1057.48,687.124 1058.03,687.124 1058.59,687.124 1059.15,687.124 1059.71,687.124 1060.27,687.124 1060.83,687.124 1061.39,687.124 1061.95,687.124 1062.51,687.124 1063.07,687.124 1063.63,687.124 1064.19,687.124 1064.75,687.124 1065.3,687.124 1065.86,687.124 1066.42,687.124 1066.98,687.124 1067.54,687.124 1068.1,687.124 1068.66,687.124 1069.22,687.124 1069.78,687.124 1070.34,687.124 1070.9,687.124 1071.46,687.124 1072.02,687.124 1072.57,687.124 1073.13,687.124 1073.69,687.124 1074.25,687.124 1074.81,687.124 1075.37,687.124 1075.93,687.124 1076.49,687.124 1077.05,687.124 1077.61,687.124 1078.17,687.124 1078.73,687.124 1079.29,687.124 1079.85,687.124 1080.4,687.124 1080.96,687.124 1081.52,687.124 1082.08,687.124 1082.64,687.124 1083.2,687.124 1083.76,687.124 1084.32,687.124 1084.88,687.124 1085.44,687.124 1086,687.124 1086.56,687.124 1087.12,687.124 1087.67,687.124 1088.23,687.124 1088.79,687.124 1089.35,687.124 1089.91,687.124 1090.47,687.124 1091.03,687.124 1091.59,687.124 1092.15,687.124 1092.71,687.124 1093.27,687.124 1093.83,687.124 1094.39,687.124 1094.94,687.124 1095.5,687.124 1096.06,687.124 1096.62,687.124 1097.18,687.124 1097.74,687.124 1098.3,687.124 1098.86,687.124 1099.42,687.124 1099.98,687.124 1100.54,687.124 1101.1,687.124 1101.66,687.124 1102.22,687.124 1102.77,687.124 1103.33,687.124 1103.89,687.124 1104.45,687.124 1105.01,687.124 1105.57,687.124 1106.13,687.124 1106.69,687.124 1107.25,687.124 1107.81,687.124 1108.37,687.124 1108.93,687.124 1109.49,687.124 1110.04,687.124 1110.6,687.124 1111.16,687.124 1111.72,687.124 1112.28,687.124 1112.84,687.124 1113.4,687.124 1113.96,687.124 1114.52,687.124 1115.08,687.124 1115.64,687.124 1116.2,687.124 1116.76,687.124 1117.31,687.124 1117.87,687.124 1118.43,687.124 1118.99,687.124 1119.55,687.124 1120.11,687.124 1120.67,687.124 1121.23,687.124 1121.79,687.124 1122.35,687.124 1122.91,687.124 1123.47,687.124 1124.03,687.124 1124.59,687.124 1125.14,687.124 1125.7,687.124 1126.26,687.124 1126.82,687.124 1127.38,687.124 1127.94,687.124 1128.5,687.124 1129.06,687.124 1129.62,687.124 1130.18,687.124 1130.74,687.124 1131.3,687.124 1131.86,687.124 1132.41,687.124 1132.97,687.124 1133.53,687.124 1134.09,687.124 1134.65,687.124 1135.21,687.124 1135.77,687.124 1136.33,687.124 1136.89,687.124 1137.45,687.124 1138.01,687.124 1138.57,687.124 1139.13,687.124 1139.68,687.124 1140.24,687.124 1140.8,687.124 1141.36,687.124 1141.92,687.124 1142.48,687.124 1143.04,687.124 1143.6,687.124 1144.16,687.124 1144.72,687.124 1145.28,687.124 1145.84,687.124 1146.4,687.124 1146.96,687.124 1147.51,687.124 1148.07,687.124 1148.63,687.124 1149.19,687.124 1149.75,687.124 1150.31,687.124 1150.87,687.124 1151.43,687.124 1151.99,687.124 1152.55,687.124 1153.11,687.124 1153.67,687.124 1154.23,687.124 1154.78,687.124 1155.34,687.124 1155.9,687.124 1156.46,687.124 1157.02,687.124 1157.58,687.124 1158.14,687.124 1158.7,687.124 1159.26,687.124 1159.82,687.124 1160.38,687.124 1160.94,687.124 1161.5,687.124 1162.05,687.124 1162.61,687.124 1163.17,687.124 1163.73,687.124 1164.29,687.124 1164.85,687.124 1165.41,687.124 1165.97,687.124 1166.53,687.124 1167.09,687.124 1167.65,687.124 1168.21,687.124 1168.77,687.124 1169.33,687.124 1169.88,687.124 1170.44,687.124 1171,687.124 1171.56,687.124 1172.12,687.124 1172.68,687.124 1173.24,687.124 1173.8,687.124 1174.36,687.124 1174.92,687.124 1175.48,687.124 1176.04,687.124 1176.6,687.124 1177.15,687.124 1177.71,687.124 1178.27,687.124 1178.83,687.124 1179.39,687.124 1179.95,687.124 1180.51,687.124 1181.07,687.124 1181.63,687.124 1182.19,687.124 1182.75,687.124 1183.31,687.124 1183.87,687.124 1184.43,687.124 1184.98,687.124 1185.54,687.124 1186.1,687.124 1186.66,687.124 1187.22,687.124 1187.78,687.124 1188.34,687.124 1188.9,687.124 1189.46,687.124 1190.02,687.124 1190.58,687.124 1191.14,687.124 1191.7,687.124 1192.25,687.124 1192.81,687.124 1193.37,687.124 1193.93,687.124 1194.49,687.124 1195.05,687.124 1195.61,687.124 1196.17,687.124 1196.73,687.124 1197.29,687.124 1197.85,687.124 1198.41,687.124 1198.97,687.124 1199.52,687.124 1200.08,687.124 1200.64,687.124 1201.2,687.124 1201.76,687.124 1202.32,687.124 1202.88,687.124 1203.44,687.124 1204,687.124 1204.56,687.124 1205.12,687.124 1205.68,687.124 1206.24,687.124 1206.8,687.124 1207.35,687.124 1207.91,687.124 1208.47,687.124 1209.03,687.124 1209.59,687.124 1210.15,687.124 1210.71,687.124 1211.27,687.124 1211.83,687.124 1212.39,687.124 1212.95,687.124 1213.51,687.124 1214.07,687.124 1214.62,687.124 1215.18,687.124 1215.74,687.124 1216.3,687.124 1216.86,687.124 1217.42,687.124 1217.98,687.124 1218.54,687.124 1219.1,687.124 1219.66,687.124 1220.22,687.124 1220.78,687.124 1221.34,687.124 1221.89,687.124 1222.45,687.124 1223.01,687.124 1223.57,687.124 1224.13,687.124 1224.69,687.124 1225.25,687.124 1225.81,687.124 1226.37,687.124 1226.93,687.124 1227.49,687.124 1228.05,687.124 1228.61,687.124 1229.17,687.124 1229.72,687.124 1230.28,687.124 1230.84,687.124 1231.4,687.124 1231.96,687.124 1232.52,687.124 1233.08,687.124 1233.64,687.124 1234.2,687.124 1234.76,687.124 1235.32,687.124 1235.88,687.124 1236.44,687.124 1236.99,687.124 1237.55,687.124 1238.11,687.124 1238.67,687.124 1239.23,687.124 1239.79,687.124 1240.35,687.124 1240.91,687.124 1241.47,687.124 1242.03,687.124 1242.59,687.124 1243.15,687.124 1243.71,687.124 1244.26,687.124 1244.82,687.124 1245.38,687.124 1245.94,687.124 1246.5,687.124 1247.06,687.124 1247.62,687.124 1248.18,687.124 1248.74,687.124 1249.3,687.124 1249.86,687.124 1250.42,687.124 1250.98,687.124 1251.54,687.124 1252.09,687.124 1252.65,687.124 1253.21,687.124 1253.77,687.124 1254.33,687.124 1254.89,687.124 1255.45,687.124 1256.01,687.124 1256.57,687.124 1257.13,687.124 1257.69,687.124 1258.25,687.124 1258.81,687.124 1259.36,687.124 1259.92,687.124 1260.48,687.124 1261.04,687.124 1261.6,687.124 1262.16,687.124 1262.72,687.124 1263.28,687.124 1263.84,687.124 1264.4,687.124 1264.96,687.124 1265.52,687.124 1266.08,687.124 1266.63,687.124 1267.19,687.124 1267.75,687.124 1268.31,687.124 1268.87,687.124 1269.43,687.124 1269.99,687.124 1270.55,687.124 1271.11,687.124 1271.67,687.124 1272.23,687.124 1272.79,687.124 1273.35,687.124 1273.91,687.124 1274.46,687.124 1275.02,687.124 1275.58,687.124 1276.14,687.124 1276.7,687.124 1277.26,687.124 1277.82,687.124 1278.38,687.124 1278.94,687.124 1279.5,687.124 1280.06,687.124 1280.62,687.124 1281.18,687.124 1281.73,687.124 1282.29,687.124 1282.85,687.124 1283.41,687.124 1283.97,687.124 1284.53,687.124 1285.09,687.124 1285.65,687.124 1286.21,687.124 1286.77,687.124 1287.33,687.124 1287.89,687.124 1288.45,687.124 1289,687.124 1289.56,687.124 1290.12,687.124 1290.68,687.124 1291.24,687.124 1291.8,687.124 1292.36,687.124 1292.92,687.124 1293.48,687.124 1294.04,687.124 1294.6,687.124 1295.16,687.124 1295.72,687.124 1296.28,687.124 1296.83,687.124 1297.39,687.124 1297.95,687.124 1298.51,687.124 1299.07,687.124 1299.63,687.124 1300.19,687.124 1300.75,687.124 1301.31,687.124 1301.87,687.124 1302.43,687.124 1302.99,687.124 1303.55,687.124 1304.1,687.124 1304.66,687.124 1305.22,687.124 1305.78,687.124 1306.34,687.124 1306.9,687.124 1307.46,687.124 1308.02,687.124 1308.58,687.124 1309.14,687.124 1309.7,687.124 1310.26,687.124 1310.82,687.124 1311.38,687.124 1311.93,687.124 1312.49,687.124 1313.05,687.124 1313.61,687.124 1314.17,687.124 1314.73,687.124 1315.29,687.124 1315.85,687.124 1316.41,687.124 1316.97,687.124 1317.53,687.124 1318.09,687.124 1318.65,687.124 1319.2,687.124 1319.76,687.124 1320.32,687.124 1320.88,687.124 1321.44,687.124 1322,687.124 1322.56,687.124 1323.12,687.124 1323.68,687.124 1324.24,687.124 1324.8,687.124 1325.36,687.124 1325.92,687.124 1326.47,687.124 1327.03,687.124 1327.59,687.124 1328.15,687.124 1328.71,687.124 1329.27,687.124 1329.83,687.124 1330.39,687.124 1330.95,687.124 1331.51,687.124 1332.07,687.124 1332.63,687.124 1333.19,687.124 1333.75,687.124 1334.3,687.124 1334.86,687.124 1335.42,687.124 1335.98,687.124 1336.54,687.124 1337.1,687.124 1337.66,687.124 1338.22,687.124 1338.78,687.124 1339.34,687.124 1339.9,687.124 1340.46,687.124 1341.02,687.124 1341.57,687.124 1342.13,687.124 1342.69,687.124 1343.25,687.124 1343.81,687.124 1344.37,687.124 1344.93,687.124 1345.49,687.124 1346.05,687.124 1346.61,687.124 1347.17,687.124 1347.73,687.124 1348.29,687.124 1348.84,687.124 1349.4,687.124 1349.96,687.124 1350.52,687.124 1351.08,687.124 1351.64,687.124 1352.2,687.124 1352.76,687.124 1353.32,687.124 1353.88,687.124 1354.44,687.124 1355,687.124 1355.56,687.124 1356.12,687.124 1356.67,687.124 1357.23,687.124 1357.79,687.124 1358.35,687.124 1358.91,687.124 1359.47,687.124 1360.03,687.124 1360.59,687.124 1361.15,687.124 1361.71,687.124 1362.27,687.124 1362.83,687.124 1363.39,687.124 1363.94,687.124 1364.5,687.124 1365.06,687.124 1365.62,687.124 1366.18,687.124 1366.74,687.124 1367.3,687.124 1367.86,687.124 1368.42,687.124 1368.98,687.124 1369.54,687.124 1370.1,687.124 1370.66,687.124 1371.21,687.124 1371.77,687.124 1372.33,687.124 1372.89,687.124 1373.45,687.124 1374.01,687.124 1374.57,687.124 1375.13,687.124 1375.69,687.124 1376.25,687.124 1376.81,687.124 1377.37,687.124 1377.93,687.124 1378.49,687.124 1379.04,687.124 1379.6,687.124 1380.16,687.124 1380.72,687.124 1381.28,687.124 1381.84,687.124 1382.4,687.124 1382.96,687.124 1383.52,687.124 1384.08,687.124 1384.64,687.124 1385.2,687.124 1385.76,687.124 1386.31,687.124 1386.87,687.124 1387.43,687.124 1387.99,687.124 1388.55,687.124 1389.11,687.124 1389.67,687.124 1390.23,687.124 1390.79,687.124 1391.35,687.124 1391.91,687.124 1392.47,687.124 1393.03,687.124 1393.58,687.124 1394.14,687.124 1394.7,687.124 1395.26,687.124 1395.82,687.124 1396.38,687.124 1396.94,687.124 1397.5,687.124 1398.06,687.124 1398.62,687.124 1399.18,687.124 1399.74,687.124 1400.3,687.124 1400.86,687.124 1401.41,687.124 1401.97,687.124 1402.53,687.124 1403.09,687.124 1403.65,687.124 1404.21,687.124 1404.77,687.124 1405.33,687.124 1405.89,687.124 1406.45,687.124 1407.01,687.124 1407.57,687.124 1408.13,687.124 1408.68,687.124 1409.24,687.124 1409.8,687.124 1410.36,687.124 1410.92,687.124 1411.48,687.124 1412.04,687.124 1412.6,687.124 1413.16,687.124 1413.72,687.124 1414.28,687.124 1414.84,687.124 1415.4,687.124 1415.95,687.124 1416.51,687.124 1417.07,687.124 1417.63,687.124 1418.19,687.124 1418.75,687.124 1419.31,687.124 1419.87,687.124 1420.43,687.124 1420.99,687.124 1421.55,687.124 1422.11,687.124 1422.67,687.124 1423.23,687.124 1423.78,687.124 1424.34,687.124 1424.9,687.124 1425.46,687.124 1426.02,687.124 1426.58,687.124 1427.14,687.124 1427.7,687.124 1428.26,687.124 1428.82,687.124 1429.38,687.124 1429.94,687.124 1430.5,687.124 1431.05,687.124 1431.61,687.124 1432.17,687.124 1432.73,687.124 1433.29,687.124 1433.85,687.124 1434.41,687.124 1434.97,687.124 1435.53,687.124 1436.09,687.124 1436.65,687.124 1437.21,687.124 1437.77,687.124 1438.33,687.124 1438.88,687.124 1439.44,687.124 1440,687.124 1440.56,687.124 1441.12,687.124 1441.68,687.124 1442.24,687.124 1442.8,687.124 1443.36,687.124 1443.92,687.124 1444.48,687.124 1445.04,687.124 1445.6,687.124 1446.15,687.124 1446.71,687.124 1447.27,687.124 1447.83,687.124 1448.39,687.124 1448.95,687.124 1449.51,687.124 1450.07,687.124 1450.63,687.124 1451.19,687.124 1451.75,687.124 1452.31,687.124 1452.87,687.124 1453.42,687.124 1453.98,687.124 1454.54,687.124 1455.1,687.124 1455.66,687.124 1456.22,687.124 1456.78,687.124 1457.34,687.124 1457.9,687.124 1458.46,687.124 1459.02,687.124 1459.58,687.124 1460.14,687.124 1460.7,687.124 1461.25,687.124 1461.81,687.124 1462.37,687.124 1462.93,687.124 1463.49,687.124 1464.05,687.124 1464.61,687.124 1465.17,687.124 1465.73,687.124 1466.29,687.124 1466.85,687.124 1467.41,687.124 1467.97,687.124 1468.52,687.124 1469.08,687.124 1469.64,687.124 1470.2,687.124 1470.76,687.124 1471.32,687.124 1471.88,687.124 1472.44,687.124 1473,687.124 1473.56,687.124 1474.12,687.124 1474.68,687.124 1475.24,687.124 1475.79,687.124 1476.35,687.124 1476.91,687.124 1477.47,687.124 1478.03,687.124 1478.59,687.124 1479.15,687.124 1479.71,687.124 1480.27,687.124 1480.83,687.124 1481.39,687.124 1481.95,687.124 1482.51,687.124 1483.07,687.124 1483.62,687.124 1484.18,687.124 1484.74,687.124 1485.3,687.124 1485.86,687.124 1486.42,687.124 1486.98,687.124 1487.54,687.124 1488.1,687.124 1488.66,687.124 1489.22,687.124 1489.78,687.124 1490.34,687.124 1490.89,687.124 1491.45,687.124 1492.01,687.124 1492.57,687.124 1493.13,687.124 1493.69,687.124 1494.25,687.124 1494.81,687.124 1495.37,687.124 1495.93,687.124 1496.49,687.124 1497.05,687.124 1497.61,687.124 1498.16,687.124 1498.72,687.124 1499.28,687.124 1499.84,687.124 1500.4,687.124 1500.96,687.124 1501.52,687.124 1502.08,687.124 1502.64,687.124 1503.2,687.124 1503.76,687.124 1504.32,687.124 1504.88,687.124 1505.44,687.124 1505.99,687.124 1506.55,687.124 1507.11,687.124 1507.67,687.124 1508.23,687.124 1508.79,687.124 1509.35,687.124 1509.91,687.124 1510.47,687.124 1511.03,687.124 1511.59,687.124 1512.15,687.124 1512.71,687.124 1513.26,687.124 1513.82,687.124 1514.38,687.124 1514.94,687.124 1515.5,687.124 1516.06,687.124 1516.62,687.124 1517.18,687.124 1517.74,687.124 1518.3,687.124 1518.86,687.124 1519.42,687.124 1519.98,687.124 1520.53,687.124 1521.09,687.124 1521.65,687.124 1522.21,687.124 1522.77,687.124 1523.33,687.124 1523.89,687.124 1524.45,687.124 1525.01,687.124 1525.57,687.124 1526.13,687.124 1526.69,687.124 1527.25,687.124 1527.81,687.124 1528.36,687.124 1528.92,687.124 1529.48,687.124 1530.04,687.124 1530.6,687.124 1531.16,687.124 1531.72,687.124 1532.28,687.124 1532.84,687.124 1533.4,687.124 1533.96,687.124 1534.52,687.124 1535.08,687.124 1535.63,687.124 1536.19,687.124 1536.75,687.124 1537.31,687.124 1537.87,687.124 1538.43,687.124 1538.99,687.124 1539.55,687.124 1540.11,687.124 1540.67,687.124 1541.23,687.124 1541.79,687.124 1542.35,687.124 1542.9,687.124 1543.46,687.124 1544.02,687.124 1544.58,687.124 1545.14,687.124 1545.7,687.124 1546.26,687.124 1546.82,687.124 1547.38,687.124 1547.94,687.124 1548.5,687.124 1549.06,687.124 1549.62,687.124 1550.18,687.124 1550.73,687.124 1551.29,687.124 1551.85,687.124 1552.41,687.124 1552.97,687.124 1553.53,687.124 1554.09,687.124 1554.65,687.124 1555.21,687.124 1555.77,687.124 1556.33,687.124 1556.89,687.124 1557.45,687.124 1558,687.124 1558.56,687.124 1559.12,687.124 1559.68,687.124 1560.24,687.124 1560.8,687.124 1561.36,687.124 1561.92,687.124 1562.48,687.124 1563.04,687.124 1563.6,687.124 1564.16,687.124 1564.72,687.124 1565.28,687.124 1565.83,687.124 1566.39,687.124 1566.95,687.124 1567.51,687.124 1568.07,687.124 1568.63,687.124 1569.19,687.124 1569.75,687.124 1570.31,687.124 1570.87,687.124 1571.43,687.124 1571.99,687.124 1572.55,687.124 1573.1,687.124 1573.66,687.124 1574.22,687.124 1574.78,687.124 1575.34,687.124 1575.9,687.124 1576.46,687.124 1577.02,687.124 1577.58,687.124 1578.14,687.124 1578.7,687.124 1579.26,687.124 1579.82,687.124 1580.37,687.124 1580.93,687.124 1581.49,687.124 1582.05,687.124 1582.61,687.124 1583.17,687.124 1583.73,687.124 1584.29,687.124 1584.85,687.124 1585.41,687.124 1585.97,687.124 1586.53,687.124 1587.09,687.124 1587.65,687.124 1588.2,687.124 1588.76,687.124 1589.32,687.124 1589.88,687.124 1590.44,687.124 1591,687.124 1591.56,687.124 1592.12,687.124 1592.68,687.124 1593.24,687.124 1593.8,687.124 1594.36,687.124 1594.92,687.124 1595.47,687.124 1596.03,687.124 1596.59,687.124 1597.15,687.124 1597.71,687.124 1598.27,687.124 1598.83,687.124 1599.39,687.124 1599.95,687.124 1600.51,687.124 1601.07,687.124 1601.63,687.124 1602.19,687.124 1602.74,687.124 1603.3,687.124 1603.86,687.124 1604.42,687.124 1604.98,687.124 1605.54,687.124 1606.1,687.124 1606.66,687.124 1607.22,687.124 1607.78,687.124 1608.34,687.124 1608.9,687.124 1609.46,687.124 1610.02,687.124 1610.57,687.124 1611.13,687.124 1611.69,687.124 1612.25,687.124 1612.81,687.124 1613.37,687.124 1613.93,687.124 1614.49,687.124 1615.05,687.124 1615.61,687.124 1616.17,687.124 1616.73,687.124 1617.29,687.124 1617.84,687.124 1618.4,687.124 1618.96,687.124 1619.52,687.124 1620.08,687.124 1620.64,687.124 1621.2,687.124 1621.76,687.124 1622.32,687.124 1622.88,687.124 1623.44,687.124 1624,687.124 1624.56,687.124 1625.11,687.124 1625.67,687.124 1626.23,687.124 1626.79,687.124 1627.35,687.124 1627.91,687.124 1628.47,687.124 1629.03,687.124 1629.59,687.124 1630.15,687.124 1630.71,687.124 1631.27,687.124 1631.83,687.124 1632.39,687.124 1632.94,687.124 1633.5,687.124 1634.06,687.124 1634.62,687.124 1635.18,687.124 1635.74,687.124 1636.3,687.124 1636.86,687.124 1637.42,687.124 1637.98,687.124 1638.54,687.124 1639.1,687.124 1639.66,687.124 1640.21,687.124 1640.77,687.124 1641.33,687.124 1641.89,687.124 1642.45,687.124 1643.01,687.124 1643.57,687.124 1644.13,687.124 1644.69,687.124 1645.25,687.124 1645.81,687.124 1646.37,687.124 1646.93,687.124 1647.48,687.124 1648.04,687.124 1648.6,687.124 1649.16,687.124 1649.72,687.124 1650.28,687.124 1650.84,687.124 1651.4,687.124 1651.96,687.124 1652.52,687.124 1653.08,687.124 1653.64,687.124 1654.2,687.124 1654.76,687.124 1655.31,687.124 1655.87,687.124 1656.43,687.124 1656.99,687.124 1657.55,687.124 1658.11,687.124 1658.67,687.124 1659.23,687.124 1659.79,687.124 1660.35,687.124 1660.91,687.124 1661.47,687.124 1662.03,687.124 1662.58,687.124 1663.14,687.124 1663.7,687.124 1664.26,687.124 1664.82,687.124 1665.38,687.124 1665.94,687.124 1666.5,687.124 1667.06,687.124 1667.62,687.124 1668.18,687.124 1668.74,687.124 1669.3,687.124 1669.85,687.124 1670.41,687.124 1670.97,687.124 1671.53,687.124 1672.09,687.124 1672.65,687.124 1673.21,687.124 1673.77,687.124 1674.33,687.124 1674.89,687.124 1675.45,687.124 1676.01,687.124 1676.57,687.124 1677.13,687.124 1677.68,687.124 1678.24,687.124 1678.8,687.124 1679.36,687.124 1679.92,687.124 1680.48,687.124 1681.04,687.124 1681.6,687.124 1682.16,687.124 1682.72,687.124 1683.28,687.124 1683.84,687.124 1684.4,687.124 1684.95,687.124 1685.51,687.124 1686.07,687.124 1686.63,687.124 1687.19,687.124 1687.75,687.124 1688.31,687.124 1688.87,687.124 1689.43,687.124 1689.99,687.124 1690.55,687.124 1691.11,687.124 1691.67,687.124 1692.23,687.124 1692.78,687.124 1693.34,687.124 1693.9,687.124 1694.46,687.124 1695.02,687.124 1695.58,687.124 1696.14,687.124 1696.7,687.124 1697.26,687.124 1697.82,687.124 1698.38,687.124 1698.94,687.124 1699.5,687.124 1700.05,687.124 1700.61,687.124 1701.17,687.124 1701.73,687.124 1702.29,687.124 1702.85,687.124 1703.41,687.124 1703.97,687.124 1704.53,687.124 1705.09,687.124 1705.65,687.124 1706.21,687.124 1706.77,687.124 1707.32,687.124 1707.88,687.124 1708.44,687.124 1709,687.124 1709.56,687.124 1710.12,687.124 1710.68,687.124 1711.24,687.124 1711.8,687.124 1712.36,687.124 1712.92,687.124 1713.48,687.124 1714.04,687.124 1714.6,687.124 1715.15,687.124 1715.71,687.124 1716.27,687.124 1716.83,687.124 1717.39,687.124 1717.95,687.124 1718.51,687.124 1719.07,687.124 1719.63,687.124 1720.19,687.124 1720.75,687.124 1721.31,687.124 1721.87,687.124 1722.42,687.124 1722.98,687.124 1723.54,687.124 1724.1,687.124 1724.66,687.124 1725.22,687.124 1725.78,687.124 1726.34,687.124 1726.9,687.124 1727.46,687.124 1728.02,687.124 1728.58,687.124 1729.14,687.124 1729.69,687.124 1730.25,687.124 1730.81,687.124 1731.37,687.124 1731.93,687.124 1732.49,687.124 1733.05,687.124 1733.61,687.124 1734.17,687.124 1734.73,687.124 1735.29,687.124 1735.85,687.124 1736.41,687.124 1736.97,687.124 1737.52,687.124 1738.08,687.124 1738.64,687.124 1739.2,687.124 1739.76,687.124 1740.32,687.124 1740.88,687.124 1741.44,687.124 1742,687.124 1742.56,687.124 1743.12,687.124 1743.68,687.124 1744.24,687.124 1744.79,687.124 1745.35,687.124 1745.91,687.124 1746.47,687.124 1747.03,687.124 1747.59,687.124 1748.15,687.124 1748.71,687.124 1749.27,687.124 1749.83,687.124 1750.39,687.124 1750.95,687.124 1751.51,687.124 1752.06,687.124 1752.62,687.124 1753.18,687.124 1753.74,687.124 1754.3,687.124 1754.86,687.124 1755.42,687.124 1755.98,687.124 1756.54,687.124 1757.1,687.124 1757.66,687.124 1758.22,687.124 1758.78,687.124 1759.34,687.124 1759.89,687.124 1760.45,687.124 1761.01,687.124 1761.57,687.124 1762.13,687.124 1762.69,687.124 1763.25,687.124 1763.81,687.124 1764.37,687.124 1764.93,687.124 1765.49,687.124 1766.05,687.124 1766.61,687.124 1767.16,687.124 1767.72,687.124 1768.28,687.124 1768.84,687.124 1769.4,687.124 1769.96,687.124 1770.52,687.124 1771.08,687.124 1771.64,687.124 1772.2,687.124 1772.76,687.124 1773.32,687.124 1773.88,687.124 1774.43,687.124 1774.99,687.124 1775.55,687.124 1776.11,687.124 1776.67,687.124 1777.23,687.124 1777.79,687.124 1778.35,687.124 1778.91,687.124 1779.47,687.124 1780.03,687.124 1780.59,687.124 1781.15,687.124 1781.71,687.124 1782.26,687.124 1782.82,687.124 1783.38,687.124 1783.94,687.124 1784.5,687.124 1785.06,687.124 1785.62,687.124 1786.18,687.124 1786.74,687.124 1787.3,687.124 1787.86,687.124 1788.42,687.124 1788.98,687.124 1789.53,687.124 1790.09,687.124 1790.65,687.124 1791.21,687.124 1791.77,687.124 1792.33,687.124 1792.89,687.124 1793.45,687.124 1794.01,687.124 1794.57,687.124 1795.13,687.124 1795.69,687.124 1796.25,687.124 1796.8,687.124 1797.36,687.124 1797.92,687.124 1798.48,687.124 1799.04,687.124 1799.6,687.124 1800.16,687.124 1800.72,687.124 1801.28,687.124 1801.84,687.124 1802.4,687.124 1802.96,687.124 1803.52,687.124 1804.08,687.124 1804.63,687.124 1805.19,687.124 1805.75,687.124 1806.31,687.124 1806.87,687.124 1807.43,687.124 1807.99,687.124 1808.55,687.124 1809.11,687.124 1809.67,687.124 1810.23,687.124 1810.79,687.124 1811.35,687.124 1811.9,687.124 1812.46,687.124 1813.02,687.124 1813.58,687.124 1814.14,687.124 1814.7,687.124 1815.26,687.124 1815.82,687.124 1816.38,687.124 1816.94,687.124 1817.5,687.124 1818.06,687.124 1818.62,687.124 1819.18,687.124 1819.73,687.124 1820.29,687.124 1820.85,687.124 1821.41,687.124 1821.97,687.124 1822.53,687.124 1823.09,687.124 1823.65,687.124 1824.21,687.124 1824.77,687.124 1825.33,687.124 1825.89,687.124 1826.45,687.124 1827,687.124 1827.56,687.124 1828.12,687.124 1828.68,687.124 1829.24,687.124 1829.8,687.124 1830.36,687.124 1830.92,687.124 1831.48,687.124 1832.04,687.124 1832.6,687.124 1833.16,687.124 1833.72,687.124 1834.27,687.124 1834.83,687.124 1835.39,687.124 1835.95,687.124 1836.51,687.124 1837.07,687.124 1837.63,687.124 1838.19,687.124 \"/>\n<path clip-path=\"url(#clip673)\" d=\"M720.247 685.069 L720.806 685.069 L721.365 685.069 L721.924 685.069 L722.484 685.069 L723.043 685.069 L723.602 685.069 L724.161 685.069 L724.721 685.069 L725.28 685.069 L725.839 685.069 L726.398 685.069 L726.958 685.069 L727.517 685.069 L728.076 685.069 L728.635 685.069 L729.195 685.069 L729.754 685.069 L730.313 685.069 L730.872 685.069 L731.432 685.069 L731.991 685.069 L732.55 685.069 L733.109 685.069 L733.669 685.069 L734.228 685.069 L734.787 685.069 L735.346 685.069 L735.906 685.069 L736.465 685.069 L737.024 685.069 L737.583 685.069 L738.143 685.069 L738.702 685.069 L739.261 685.069 L739.82 685.069 L740.38 685.069 L740.939 685.069 L741.498 685.069 L742.057 685.069 L742.617 685.069 L743.176 685.069 L743.735 685.069 L744.294 685.069 L744.854 685.069 L745.413 685.069 L745.972 685.069 L746.531 685.069 L747.091 685.069 L747.65 685.069 L748.209 685.069 L748.768 685.069 L749.328 685.069 L749.887 685.069 L750.446 685.069 L751.005 685.069 L751.565 685.069 L752.124 685.069 L752.683 685.069 L753.242 685.069 L753.802 685.069 L754.361 685.069 L754.92 685.069 L755.479 685.069 L756.039 685.069 L756.598 685.069 L757.157 685.069 L757.716 685.069 L758.276 685.069 L758.835 685.069 L759.394 685.069 L759.953 685.069 L760.513 685.069 L761.072 685.069 L761.631 685.069 L762.19 685.069 L762.75 685.069 L763.309 685.069 L763.868 685.069 L764.427 685.069 L764.987 685.069 L765.546 685.069 L766.105 685.069 L766.664 685.069 L767.224 685.069 L767.783 685.069 L768.342 685.069 L768.901 685.069 L769.461 685.069 L770.02 685.069 L770.579 685.069 L771.138 685.069 L771.698 685.069 L772.257 685.069 L772.816 685.069 L773.375 685.069 L773.935 685.069 L774.494 685.069 L775.053 685.069 L775.612 685.069 L776.172 685.069 L776.731 685.069 L777.29 685.069 L777.849 685.069 L778.409 685.069 L778.968 685.069 L779.527 685.069 L780.086 685.069 L780.646 685.069 L781.205 685.069 L781.764 685.069 L782.323 685.069 L782.883 685.069 L783.442 685.069 L784.001 685.069 L784.56 685.069 L785.12 685.069 L785.679 685.069 L786.238 685.069 L786.797 685.069 L787.357 685.069 L787.916 685.069 L788.475 685.069 L789.034 685.069 L789.594 685.069 L790.153 685.069 L790.712 685.069 L791.271 685.069 L791.831 685.069 L792.39 685.069 L792.949 685.069 L793.508 685.069 L794.068 685.069 L794.627 685.069 L795.186 685.069 L795.745 685.069 L796.305 685.069 L796.864 685.069 L797.423 685.069 L797.982 685.069 L798.542 685.069 L799.101 685.069 L799.66 685.069 L800.219 685.069 L800.779 685.069 L801.338 685.069 L801.897 685.069 L802.456 685.069 L803.016 685.069 L803.575 685.069 L804.134 685.069 L804.693 685.069 L805.253 685.069 L805.812 685.069 L806.371 685.069 L806.931 685.069 L807.49 685.069 L808.049 685.069 L808.608 685.069 L809.168 685.069 L809.727 685.069 L810.286 685.069 L810.845 685.069 L811.405 685.069 L811.964 685.069 L812.523 685.069 L813.082 685.069 L813.642 685.069 L814.201 685.069 L814.76 685.069 L815.319 685.069 L815.879 685.069 L816.438 685.069 L816.997 685.069 L817.556 685.069 L818.116 685.069 L818.675 685.069 L819.234 685.069 L819.793 685.069 L820.353 685.069 L820.912 685.069 L821.471 685.069 L822.03 685.069 L822.59 685.069 L823.149 685.069 L823.708 685.069 L824.267 685.069 L824.827 685.069 L825.386 685.069 L825.945 685.069 L826.504 685.069 L827.064 685.069 L827.623 685.069 L828.182 685.069 L828.741 685.069 L829.301 685.069 L829.86 685.069 L830.419 685.069 L830.978 685.069 L831.538 685.069 L832.097 685.069 L832.656 685.069 L833.215 685.069 L833.775 685.069 L834.334 685.069 L834.893 685.069 L835.452 685.069 L836.012 685.069 L836.571 685.069 L837.13 685.069 L837.689 685.069 L838.249 685.069 L838.808 685.069 L839.367 685.069 L839.926 685.069 L840.486 685.069 L841.045 685.069 L841.604 685.069 L842.163 685.069 L842.723 685.069 L843.282 685.069 L843.841 685.069 L844.4 685.069 L844.96 685.069 L845.519 685.069 L846.078 685.069 L846.637 685.069 L847.197 685.069 L847.756 685.069 L848.315 685.069 L848.874 685.069 L849.434 685.069 L849.993 685.069 L850.552 685.069 L851.111 685.069 L851.671 685.069 L852.23 685.069 L852.789 685.069 L853.348 685.069 L853.908 685.069 L854.467 685.069 L855.026 685.069 L855.585 685.069 L856.145 685.069 L856.704 685.069 L857.263 685.069 L857.822 685.069 L858.382 685.069 L858.941 685.069 L859.5 685.069 L860.059 685.069 L860.619 685.069 L861.178 685.069 L861.737 685.069 L862.296 685.069 L862.856 685.069 L863.415 685.069 L863.974 685.069 L864.533 685.069 L865.093 685.069 L865.652 685.069 L866.211 685.069 L866.77 685.069 L867.33 685.069 L867.889 685.069 L868.448 685.069 L869.007 685.069 L869.567 685.069 L870.126 685.069 L870.685 685.069 L871.244 685.069 L871.804 685.069 L872.363 685.069 L872.922 685.069 L873.481 685.069 L874.041 685.069 L874.6 685.069 L875.159 685.069 L875.718 685.069 L876.278 685.069 L876.837 685.069 L877.396 685.069 L877.955 685.069 L878.515 685.069 L879.074 685.069 L879.633 685.069 L880.192 685.069 L880.752 685.069 L881.311 685.069 L881.87 685.069 L882.429 685.069 L882.989 685.069 L883.548 685.069 L884.107 685.069 L884.666 685.069 L885.226 685.069 L885.785 685.069 L886.344 685.069 L886.903 685.069 L887.463 685.069 L888.022 685.069 L888.581 685.069 L889.14 685.069 L889.7 685.069 L890.259 685.069 L890.818 685.069 L891.377 685.069 L891.937 685.069 L892.496 685.069 L893.055 685.069 L893.614 685.069 L894.174 685.069 L894.733 685.069 L895.292 685.069 L895.851 685.069 L896.411 685.069 L896.97 685.069 L897.529 685.069 L898.088 685.069 L898.648 685.069 L899.207 685.069 L899.766 685.069 L900.325 685.069 L900.885 685.069 L901.444 685.069 L902.003 685.069 L902.562 685.069 L903.122 685.069 L903.681 685.069 L904.24 685.069 L904.799 685.069 L905.359 685.069 L905.918 685.069 L906.477 685.069 L907.036 685.069 L907.596 685.069 L908.155 685.069 L908.714 685.069 L909.273 685.069 L909.833 685.069 L910.392 685.069 L910.951 685.069 L911.51 685.069 L912.07 685.069 L912.629 685.069 L913.188 685.069 L913.747 685.069 L914.307 685.069 L914.866 685.069 L915.425 685.069 L915.984 685.069 L916.544 685.069 L917.103 685.069 L917.662 685.069 L918.221 685.069 L918.781 685.069 L919.34 685.069 L919.899 685.069 L920.458 685.069 L921.018 685.069 L921.577 685.069 L922.136 685.069 L922.695 685.069 L923.255 685.069 L923.814 685.069 L924.373 685.069 L924.932 685.069 L925.492 685.069 L926.051 685.069 L926.61 685.069 L927.169 685.069 L927.729 685.069 L928.288 685.069 L928.847 685.069 L929.406 685.069 L929.966 685.069 L930.525 685.069 L931.084 685.069 L931.644 685.069 L932.203 685.069 L932.762 685.069 L933.321 685.069 L933.881 685.069 L934.44 685.069 L934.999 685.069 L935.558 685.069 L936.118 685.069 L936.677 685.069 L937.236 685.069 L937.795 685.069 L938.355 685.069 L938.914 685.069 L939.473 685.069 L940.032 685.069 L940.592 685.069 L941.151 685.069 L941.71 685.069 L942.269 685.069 L942.829 685.069 L943.388 685.069 L943.947 685.069 L944.506 685.069 L945.066 685.069 L945.625 685.069 L946.184 685.069 L946.743 685.069 L947.303 685.069 L947.862 685.069 L948.421 685.069 L948.98 685.069 L949.54 685.069 L950.099 685.069 L950.658 685.069 L951.217 685.069 L951.777 685.069 L952.336 685.069 L952.895 685.069 L953.454 685.069 L954.014 685.069 L954.573 685.069 L955.132 685.069 L955.691 685.069 L956.251 685.069 L956.81 685.069 L957.369 685.069 L957.928 685.069 L958.488 685.069 L959.047 685.069 L959.606 685.069 L960.165 685.069 L960.725 685.069 L961.284 685.069 L961.843 685.069 L962.402 685.069 L962.962 685.069 L963.521 685.069 L964.08 685.069 L964.639 685.069 L965.199 685.069 L965.758 685.069 L966.317 685.069 L966.876 685.069 L967.436 685.069 L967.995 685.069 L968.554 685.069 L969.113 685.069 L969.673 685.069 L970.232 685.069 L970.791 685.069 L971.35 685.069 L971.91 685.069 L972.469 685.069 L973.028 685.069 L973.587 685.069 L974.147 685.069 L974.706 685.069 L975.265 685.069 L975.824 685.069 L976.384 685.069 L976.943 685.069 L977.502 685.069 L978.061 685.069 L978.621 685.069 L979.18 685.069 L979.739 685.069 L980.298 685.069 L980.858 685.069 L981.417 685.069 L981.976 685.069 L982.535 685.069 L983.095 685.069 L983.654 685.069 L984.213 685.069 L984.772 685.069 L985.332 685.069 L985.891 685.069 L986.45 685.069 L987.009 685.069 L987.569 685.069 L988.128 685.069 L988.687 685.069 L989.246 685.069 L989.806 685.069 L990.365 685.069 L990.924 685.069 L991.483 685.069 L992.043 685.069 L992.602 685.069 L993.161 685.069 L993.72 685.069 L994.28 685.069 L994.839 685.069 L995.398 685.069 L995.957 685.069 L996.517 685.069 L997.076 685.069 L997.635 685.069 L998.194 685.069 L998.754 685.069 L999.313 685.069 L999.872 685.069 L1000.43 685.069 L1000.99 685.069 L1001.55 685.069 L1002.11 685.069 L1002.67 685.069 L1003.23 685.069 L1003.79 685.069 L1004.35 685.069 L1004.91 685.069 L1005.46 685.069 L1006.02 685.069 L1006.58 685.069 L1007.14 685.069 L1007.7 685.069 L1008.26 685.069 L1008.82 685.069 L1009.38 685.069 L1009.94 685.069 L1010.5 685.069 L1011.06 685.069 L1011.62 685.069 L1012.18 685.069 L1012.73 685.069 L1013.29 685.069 L1013.85 685.069 L1014.41 685.069 L1014.97 685.069 L1015.53 685.069 L1016.09 685.069 L1016.65 685.069 L1017.21 685.069 L1017.77 685.069 L1018.33 685.069 L1018.89 685.069 L1019.45 685.069 L1020.01 685.069 L1020.56 685.069 L1021.12 685.069 L1021.68 685.069 L1022.24 685.069 L1022.8 685.069 L1023.36 685.069 L1023.92 685.069 L1024.48 685.069 L1025.04 685.069 L1025.6 685.069 L1026.16 685.069 L1026.72 685.069 L1027.28 685.069 L1027.83 685.069 L1028.39 685.069 L1028.95 685.069 L1029.51 685.069 L1030.07 685.069 L1030.63 685.069 L1031.19 685.069 L1031.75 685.069 L1032.31 685.069 L1032.87 685.069 L1033.43 685.069 L1033.99 685.069 L1034.55 685.069 L1035.1 685.069 L1035.66 685.069 L1036.22 685.069 L1036.78 685.069 L1037.34 685.069 L1037.9 685.069 L1038.46 685.069 L1039.02 685.069 L1039.58 685.069 L1040.14 685.069 L1040.7 685.069 L1041.26 685.069 L1041.82 685.069 L1042.38 685.069 L1042.93 685.069 L1043.49 685.069 L1044.05 685.069 L1044.61 685.069 L1045.17 685.069 L1045.73 685.069 L1046.29 685.069 L1046.85 685.069 L1047.41 685.069 L1047.97 685.069 L1048.53 685.069 L1049.09 685.069 L1049.65 685.069 L1050.2 685.069 L1050.76 685.069 L1051.32 685.069 L1051.88 685.069 L1052.44 685.069 L1053 685.069 L1053.56 685.069 L1054.12 685.069 L1054.68 685.069 L1055.24 685.069 L1055.8 685.069 L1056.36 685.069 L1056.92 685.069 L1057.48 685.069 L1058.03 685.069 L1058.59 685.069 L1059.15 685.069 L1059.71 685.069 L1060.27 685.069 L1060.83 685.069 L1061.39 685.069 L1061.95 685.069 L1062.51 685.069 L1063.07 685.069 L1063.63 685.069 L1064.19 685.069 L1064.75 685.069 L1065.3 685.069 L1065.86 685.069 L1066.42 685.069 L1066.98 685.069 L1067.54 685.069 L1068.1 685.069 L1068.66 685.069 L1069.22 685.069 L1069.78 685.069 L1070.34 685.069 L1070.9 685.069 L1071.46 685.069 L1072.02 685.069 L1072.57 685.069 L1073.13 685.069 L1073.69 685.069 L1074.25 685.069 L1074.81 685.069 L1075.37 685.069 L1075.93 685.069 L1076.49 685.069 L1077.05 685.069 L1077.61 685.069 L1078.17 685.069 L1078.73 685.069 L1079.29 685.069 L1079.85 685.069 L1080.4 685.069 L1080.96 685.069 L1081.52 685.069 L1082.08 685.069 L1082.64 685.069 L1083.2 685.069 L1083.76 685.069 L1084.32 685.069 L1084.88 685.069 L1085.44 685.069 L1086 685.069 L1086.56 685.069 L1087.12 685.069 L1087.67 685.069 L1088.23 685.069 L1088.79 685.069 L1089.35 685.069 L1089.91 685.069 L1090.47 685.069 L1091.03 685.069 L1091.59 685.069 L1092.15 685.069 L1092.71 685.069 L1093.27 685.069 L1093.83 685.069 L1094.39 685.069 L1094.94 685.069 L1095.5 685.069 L1096.06 685.069 L1096.62 685.069 L1097.18 685.069 L1097.74 685.069 L1098.3 685.069 L1098.86 685.069 L1099.42 685.069 L1099.98 685.069 L1100.54 685.069 L1101.1 685.069 L1101.66 685.069 L1102.22 685.069 L1102.77 685.069 L1103.33 685.069 L1103.89 685.069 L1104.45 685.069 L1105.01 685.069 L1105.57 685.069 L1106.13 685.069 L1106.69 685.069 L1107.25 685.069 L1107.81 685.069 L1108.37 685.069 L1108.93 685.069 L1109.49 685.069 L1110.04 685.069 L1110.6 685.069 L1111.16 685.069 L1111.72 685.069 L1112.28 685.069 L1112.84 685.069 L1113.4 685.069 L1113.96 685.069 L1114.52 685.069 L1115.08 685.069 L1115.64 685.069 L1116.2 685.069 L1116.76 685.069 L1117.31 685.069 L1117.87 685.069 L1118.43 685.069 L1118.99 685.069 L1119.55 685.069 L1120.11 685.069 L1120.67 685.069 L1121.23 685.069 L1121.79 685.069 L1122.35 685.069 L1122.91 685.069 L1123.47 685.069 L1124.03 685.069 L1124.59 685.069 L1125.14 685.069 L1125.7 685.069 L1126.26 685.069 L1126.82 685.069 L1127.38 685.069 L1127.94 685.069 L1128.5 685.069 L1129.06 685.069 L1129.62 685.069 L1130.18 685.069 L1130.74 685.069 L1131.3 685.069 L1131.86 685.069 L1132.41 685.069 L1132.97 685.069 L1133.53 685.069 L1134.09 685.069 L1134.65 685.069 L1135.21 685.069 L1135.77 685.069 L1136.33 685.069 L1136.89 685.069 L1137.45 685.069 L1138.01 685.069 L1138.57 685.069 L1139.13 685.069 L1139.68 685.069 L1140.24 685.069 L1140.8 685.069 L1141.36 685.069 L1141.92 685.069 L1142.48 685.069 L1143.04 685.069 L1143.6 685.069 L1144.16 685.069 L1144.72 685.069 L1145.28 685.069 L1145.84 685.069 L1146.4 685.069 L1146.96 685.069 L1147.51 685.069 L1148.07 685.069 L1148.63 685.069 L1149.19 685.069 L1149.75 685.069 L1150.31 685.069 L1150.87 685.069 L1151.43 685.069 L1151.99 685.069 L1152.55 685.069 L1153.11 685.069 L1153.67 685.069 L1154.23 685.069 L1154.78 685.069 L1155.34 685.069 L1155.9 685.069 L1156.46 685.069 L1157.02 685.069 L1157.58 685.069 L1158.14 685.069 L1158.7 685.069 L1159.26 685.069 L1159.82 685.069 L1160.38 685.069 L1160.94 685.069 L1161.5 685.069 L1162.05 685.069 L1162.61 685.069 L1163.17 685.069 L1163.73 685.069 L1164.29 685.069 L1164.85 685.069 L1165.41 685.069 L1165.97 685.069 L1166.53 685.069 L1167.09 685.069 L1167.65 685.069 L1168.21 685.069 L1168.77 685.069 L1169.33 685.069 L1169.88 685.069 L1170.44 685.069 L1171 685.069 L1171.56 685.069 L1172.12 685.069 L1172.68 685.069 L1173.24 685.069 L1173.8 685.069 L1174.36 685.069 L1174.92 685.069 L1175.48 685.069 L1176.04 685.069 L1176.6 685.069 L1177.15 685.069 L1177.71 685.069 L1178.27 685.069 L1178.83 685.069 L1179.39 685.069 L1179.95 685.069 L1180.51 685.069 L1181.07 685.069 L1181.63 685.069 L1182.19 685.069 L1182.75 685.069 L1183.31 685.069 L1183.87 685.069 L1184.43 685.069 L1184.98 685.069 L1185.54 685.069 L1186.1 685.069 L1186.66 685.069 L1187.22 685.069 L1187.78 685.069 L1188.34 685.069 L1188.9 685.069 L1189.46 685.069 L1190.02 685.069 L1190.58 685.069 L1191.14 685.069 L1191.7 685.069 L1192.25 685.069 L1192.81 685.069 L1193.37 685.069 L1193.93 685.069 L1194.49 685.069 L1195.05 685.069 L1195.61 685.069 L1196.17 685.069 L1196.73 685.069 L1197.29 685.069 L1197.85 685.069 L1198.41 685.069 L1198.97 685.069 L1199.52 685.069 L1200.08 685.069 L1200.64 685.069 L1201.2 685.069 L1201.76 685.069 L1202.32 685.069 L1202.88 685.069 L1203.44 685.069 L1204 685.069 L1204.56 685.069 L1205.12 685.069 L1205.68 685.069 L1206.24 685.069 L1206.8 685.069 L1207.35 685.069 L1207.91 685.069 L1208.47 685.069 L1209.03 685.069 L1209.59 685.069 L1210.15 685.069 L1210.71 685.069 L1211.27 685.069 L1211.83 685.069 L1212.39 685.069 L1212.95 685.069 L1213.51 685.069 L1214.07 685.069 L1214.62 685.069 L1215.18 685.069 L1215.74 685.069 L1216.3 685.069 L1216.86 685.069 L1217.42 685.069 L1217.98 685.069 L1218.54 685.069 L1219.1 685.069 L1219.66 685.069 L1220.22 685.069 L1220.78 685.069 L1221.34 685.069 L1221.89 685.069 L1222.45 685.069 L1223.01 685.069 L1223.57 685.069 L1224.13 685.069 L1224.69 685.069 L1225.25 685.069 L1225.81 685.069 L1226.37 685.069 L1226.93 685.069 L1227.49 685.069 L1228.05 685.069 L1228.61 685.069 L1229.17 685.069 L1229.72 685.069 L1230.28 685.069 L1230.84 685.069 L1231.4 685.069 L1231.96 685.069 L1232.52 685.069 L1233.08 685.069 L1233.64 685.069 L1234.2 685.069 L1234.76 685.069 L1235.32 685.069 L1235.88 685.069 L1236.44 685.069 L1236.99 685.069 L1237.55 685.069 L1238.11 685.069 L1238.67 685.069 L1239.23 685.069 L1239.79 685.069 L1240.35 685.069 L1240.91 685.069 L1241.47 685.069 L1242.03 685.069 L1242.59 685.069 L1243.15 685.069 L1243.71 685.069 L1244.26 685.069 L1244.82 685.069 L1245.38 685.069 L1245.94 685.069 L1246.5 685.069 L1247.06 685.069 L1247.62 685.069 L1248.18 685.069 L1248.74 685.069 L1249.3 685.069 L1249.86 685.069 L1250.42 685.069 L1250.98 685.069 L1251.54 685.069 L1252.09 685.069 L1252.65 685.069 L1253.21 685.069 L1253.77 685.069 L1254.33 685.069 L1254.89 685.069 L1255.45 685.069 L1256.01 685.069 L1256.57 685.069 L1257.13 685.069 L1257.69 685.069 L1258.25 685.069 L1258.81 685.069 L1259.36 685.069 L1259.92 685.069 L1260.48 685.069 L1261.04 685.069 L1261.6 685.069 L1262.16 685.069 L1262.72 685.069 L1263.28 685.069 L1263.84 685.069 L1264.4 685.069 L1264.96 685.069 L1265.52 685.069 L1266.08 685.069 L1266.63 685.069 L1267.19 685.069 L1267.75 685.069 L1268.31 685.069 L1268.87 685.069 L1269.43 685.069 L1269.99 685.069 L1270.55 685.069 L1271.11 685.069 L1271.67 685.069 L1272.23 685.069 L1272.79 685.069 L1273.35 685.069 L1273.91 685.069 L1274.46 685.069 L1275.02 685.069 L1275.58 685.069 L1276.14 685.069 L1276.7 685.069 L1277.26 685.069 L1277.82 685.069 L1278.38 685.069 L1278.94 685.069 L1279.5 685.069 L1280.06 685.069 L1280.62 685.069 L1281.18 685.069 L1281.73 685.069 L1282.29 685.069 L1282.85 685.069 L1283.41 685.069 L1283.97 685.069 L1284.53 685.069 L1285.09 685.069 L1285.65 685.069 L1286.21 685.069 L1286.77 685.069 L1287.33 685.069 L1287.89 685.069 L1288.45 685.069 L1289 685.069 L1289.56 685.069 L1290.12 685.069 L1290.68 685.069 L1291.24 685.069 L1291.8 685.069 L1292.36 685.069 L1292.92 685.069 L1293.48 685.069 L1294.04 685.069 L1294.6 685.069 L1295.16 685.069 L1295.72 685.069 L1296.28 685.069 L1296.83 685.069 L1297.39 685.069 L1297.95 685.069 L1298.51 685.069 L1299.07 685.069 L1299.63 685.069 L1300.19 685.069 L1300.75 685.069 L1301.31 685.069 L1301.87 685.069 L1302.43 685.069 L1302.99 685.069 L1303.55 685.069 L1304.1 685.069 L1304.66 685.069 L1305.22 685.069 L1305.78 685.069 L1306.34 685.069 L1306.9 685.069 L1307.46 685.069 L1308.02 685.069 L1308.58 685.069 L1309.14 685.069 L1309.7 685.069 L1310.26 685.069 L1310.82 685.069 L1311.38 685.069 L1311.93 685.069 L1312.49 685.069 L1313.05 685.069 L1313.61 685.069 L1314.17 685.069 L1314.73 685.069 L1315.29 685.069 L1315.85 685.069 L1316.41 685.069 L1316.97 685.069 L1317.53 685.069 L1318.09 685.069 L1318.65 685.069 L1319.2 685.069 L1319.76 685.069 L1320.32 685.069 L1320.88 685.069 L1321.44 685.069 L1322 685.069 L1322.56 685.069 L1323.12 685.069 L1323.68 685.069 L1324.24 685.069 L1324.8 685.069 L1325.36 685.069 L1325.92 685.069 L1326.47 685.069 L1327.03 685.069 L1327.59 685.069 L1328.15 685.069 L1328.71 685.069 L1329.27 685.069 L1329.83 685.069 L1330.39 685.069 L1330.95 685.069 L1331.51 685.069 L1332.07 685.069 L1332.63 685.069 L1333.19 685.069 L1333.75 685.069 L1334.3 685.069 L1334.86 685.069 L1335.42 685.069 L1335.98 685.069 L1336.54 685.069 L1337.1 685.069 L1337.66 685.069 L1338.22 685.069 L1338.78 685.069 L1339.34 685.069 L1339.9 685.069 L1340.46 685.069 L1341.02 685.069 L1341.57 685.069 L1342.13 685.069 L1342.69 685.069 L1343.25 685.069 L1343.81 685.069 L1344.37 685.069 L1344.93 685.069 L1345.49 685.069 L1346.05 685.069 L1346.61 685.069 L1347.17 685.069 L1347.73 685.069 L1348.29 685.069 L1348.84 685.069 L1349.4 685.069 L1349.96 685.069 L1350.52 685.069 L1351.08 685.069 L1351.64 685.069 L1352.2 685.069 L1352.76 685.069 L1353.32 685.069 L1353.88 685.069 L1354.44 685.069 L1355 685.069 L1355.56 685.069 L1356.12 685.069 L1356.67 685.069 L1357.23 685.069 L1357.79 685.069 L1358.35 685.069 L1358.91 685.069 L1359.47 685.069 L1360.03 685.069 L1360.59 685.069 L1361.15 685.069 L1361.71 685.069 L1362.27 685.069 L1362.83 685.069 L1363.39 685.069 L1363.94 685.069 L1364.5 685.069 L1365.06 685.069 L1365.62 685.069 L1366.18 685.069 L1366.74 685.069 L1367.3 685.069 L1367.86 685.069 L1368.42 685.069 L1368.98 685.069 L1369.54 685.069 L1370.1 685.069 L1370.66 685.069 L1371.21 685.069 L1371.77 685.069 L1372.33 685.069 L1372.89 685.069 L1373.45 685.069 L1374.01 685.069 L1374.57 685.069 L1375.13 685.069 L1375.69 685.069 L1376.25 685.069 L1376.81 685.069 L1377.37 685.069 L1377.93 685.069 L1378.49 685.069 L1379.04 685.069 L1379.6 685.069 L1380.16 685.069 L1380.72 685.069 L1381.28 685.069 L1381.84 685.069 L1382.4 685.069 L1382.96 685.069 L1383.52 685.069 L1384.08 685.069 L1384.64 685.069 L1385.2 685.069 L1385.76 685.069 L1386.31 685.069 L1386.87 685.069 L1387.43 685.069 L1387.99 685.069 L1388.55 685.069 L1389.11 685.069 L1389.67 685.069 L1390.23 685.069 L1390.79 685.069 L1391.35 685.069 L1391.91 685.069 L1392.47 685.069 L1393.03 685.069 L1393.58 685.069 L1394.14 685.069 L1394.7 685.069 L1395.26 685.069 L1395.82 685.069 L1396.38 685.069 L1396.94 685.069 L1397.5 685.069 L1398.06 685.069 L1398.62 685.069 L1399.18 685.069 L1399.74 685.069 L1400.3 685.069 L1400.86 685.069 L1401.41 685.069 L1401.97 685.069 L1402.53 685.069 L1403.09 685.069 L1403.65 685.069 L1404.21 685.069 L1404.77 685.069 L1405.33 685.069 L1405.89 685.069 L1406.45 685.069 L1407.01 685.069 L1407.57 685.069 L1408.13 685.069 L1408.68 685.069 L1409.24 685.069 L1409.8 685.069 L1410.36 685.069 L1410.92 685.069 L1411.48 685.069 L1412.04 685.069 L1412.6 685.069 L1413.16 685.069 L1413.72 685.069 L1414.28 685.069 L1414.84 685.069 L1415.4 685.069 L1415.95 685.069 L1416.51 685.069 L1417.07 685.069 L1417.63 685.069 L1418.19 685.069 L1418.75 685.069 L1419.31 685.069 L1419.87 685.069 L1420.43 685.069 L1420.99 685.069 L1421.55 685.069 L1422.11 685.069 L1422.67 685.069 L1423.23 685.069 L1423.78 685.069 L1424.34 685.069 L1424.9 685.069 L1425.46 685.069 L1426.02 685.069 L1426.58 685.069 L1427.14 685.069 L1427.7 685.069 L1428.26 685.069 L1428.82 685.069 L1429.38 685.069 L1429.94 685.069 L1430.5 685.069 L1431.05 685.069 L1431.61 685.069 L1432.17 685.069 L1432.73 685.069 L1433.29 685.069 L1433.85 685.069 L1434.41 685.069 L1434.97 685.069 L1435.53 685.069 L1436.09 685.069 L1436.65 685.069 L1437.21 685.069 L1437.77 685.069 L1438.33 685.069 L1438.88 685.069 L1439.44 685.069 L1440 685.069 L1440.56 685.069 L1441.12 685.069 L1441.68 685.069 L1442.24 685.069 L1442.8 685.069 L1443.36 685.069 L1443.92 685.069 L1444.48 685.069 L1445.04 685.069 L1445.6 685.069 L1446.15 685.069 L1446.71 685.069 L1447.27 685.069 L1447.83 685.069 L1448.39 685.069 L1448.95 685.069 L1449.51 685.069 L1450.07 685.069 L1450.63 685.069 L1451.19 685.069 L1451.75 685.069 L1452.31 685.069 L1452.87 685.069 L1453.42 685.069 L1453.98 685.069 L1454.54 685.069 L1455.1 685.069 L1455.66 685.069 L1456.22 685.069 L1456.78 685.069 L1457.34 685.069 L1457.9 685.069 L1458.46 685.069 L1459.02 685.069 L1459.58 685.069 L1460.14 685.069 L1460.7 685.069 L1461.25 685.069 L1461.81 685.069 L1462.37 685.069 L1462.93 685.069 L1463.49 685.069 L1464.05 685.069 L1464.61 685.069 L1465.17 685.069 L1465.73 685.069 L1466.29 685.069 L1466.85 685.069 L1467.41 685.069 L1467.97 685.069 L1468.52 685.069 L1469.08 685.069 L1469.64 685.069 L1470.2 685.069 L1470.76 685.069 L1471.32 685.069 L1471.88 685.069 L1472.44 685.069 L1473 685.069 L1473.56 685.069 L1474.12 685.069 L1474.68 685.069 L1475.24 685.069 L1475.79 685.069 L1476.35 685.069 L1476.91 685.069 L1477.47 685.069 L1478.03 685.069 L1478.59 685.069 L1479.15 685.069 L1479.71 685.069 L1480.27 685.069 L1480.83 685.069 L1481.39 685.069 L1481.95 685.069 L1482.51 685.069 L1483.07 685.069 L1483.62 685.069 L1484.18 685.069 L1484.74 685.069 L1485.3 685.069 L1485.86 685.069 L1486.42 685.069 L1486.98 685.069 L1487.54 685.069 L1488.1 685.069 L1488.66 685.069 L1489.22 685.069 L1489.78 685.069 L1490.34 685.069 L1490.89 685.069 L1491.45 685.069 L1492.01 685.069 L1492.57 685.069 L1493.13 685.069 L1493.69 685.069 L1494.25 685.069 L1494.81 685.069 L1495.37 685.069 L1495.93 685.069 L1496.49 685.069 L1497.05 685.069 L1497.61 685.069 L1498.16 685.069 L1498.72 685.069 L1499.28 685.069 L1499.84 685.069 L1500.4 685.069 L1500.96 685.069 L1501.52 685.069 L1502.08 685.069 L1502.64 685.069 L1503.2 685.069 L1503.76 685.069 L1504.32 685.069 L1504.88 685.069 L1505.44 685.069 L1505.99 685.069 L1506.55 685.069 L1507.11 685.069 L1507.67 685.069 L1508.23 685.069 L1508.79 685.069 L1509.35 685.069 L1509.91 685.069 L1510.47 685.069 L1511.03 685.069 L1511.59 685.069 L1512.15 685.069 L1512.71 685.069 L1513.26 685.069 L1513.82 685.069 L1514.38 685.069 L1514.94 685.069 L1515.5 685.069 L1516.06 685.069 L1516.62 685.069 L1517.18 685.069 L1517.74 685.069 L1518.3 685.069 L1518.86 685.069 L1519.42 685.069 L1519.98 685.069 L1520.53 685.069 L1521.09 685.069 L1521.65 685.069 L1522.21 685.069 L1522.77 685.069 L1523.33 685.069 L1523.89 685.069 L1524.45 685.069 L1525.01 685.069 L1525.57 685.069 L1526.13 685.069 L1526.69 685.069 L1527.25 685.069 L1527.81 685.069 L1528.36 685.069 L1528.92 685.069 L1529.48 685.069 L1530.04 685.069 L1530.6 685.069 L1531.16 685.069 L1531.72 685.069 L1532.28 685.069 L1532.84 685.069 L1533.4 685.069 L1533.96 685.069 L1534.52 685.069 L1535.08 685.069 L1535.63 685.069 L1536.19 685.069 L1536.75 685.069 L1537.31 685.069 L1537.87 685.069 L1538.43 685.069 L1538.99 685.069 L1539.55 685.069 L1540.11 685.069 L1540.67 685.069 L1541.23 685.069 L1541.79 685.069 L1542.35 685.069 L1542.9 685.069 L1543.46 685.069 L1544.02 685.069 L1544.58 685.069 L1545.14 685.069 L1545.7 685.069 L1546.26 685.069 L1546.82 685.069 L1547.38 685.069 L1547.94 685.069 L1548.5 685.069 L1549.06 685.069 L1549.62 685.069 L1550.18 685.069 L1550.73 685.069 L1551.29 685.069 L1551.85 685.069 L1552.41 685.069 L1552.97 685.069 L1553.53 685.069 L1554.09 685.069 L1554.65 685.069 L1555.21 685.069 L1555.77 685.069 L1556.33 685.069 L1556.89 685.069 L1557.45 685.069 L1558 685.069 L1558.56 685.069 L1559.12 685.069 L1559.68 685.069 L1560.24 685.069 L1560.8 685.069 L1561.36 685.069 L1561.92 685.069 L1562.48 685.069 L1563.04 685.069 L1563.6 685.069 L1564.16 685.069 L1564.72 685.069 L1565.28 685.069 L1565.83 685.069 L1566.39 685.069 L1566.95 685.069 L1567.51 685.069 L1568.07 685.069 L1568.63 685.069 L1569.19 685.069 L1569.75 685.069 L1570.31 685.069 L1570.87 685.069 L1571.43 685.069 L1571.99 685.069 L1572.55 685.069 L1573.1 685.069 L1573.66 685.069 L1574.22 685.069 L1574.78 685.069 L1575.34 685.069 L1575.9 685.069 L1576.46 685.069 L1577.02 685.069 L1577.58 685.069 L1578.14 685.069 L1578.7 685.069 L1579.26 685.069 L1579.82 685.069 L1580.37 685.069 L1580.93 685.069 L1581.49 685.069 L1582.05 685.069 L1582.61 685.069 L1583.17 685.069 L1583.73 685.069 L1584.29 685.069 L1584.85 685.069 L1585.41 685.069 L1585.97 685.069 L1586.53 685.069 L1587.09 685.069 L1587.65 685.069 L1588.2 685.069 L1588.76 685.069 L1589.32 685.069 L1589.88 685.069 L1590.44 685.069 L1591 685.069 L1591.56 685.069 L1592.12 685.069 L1592.68 685.069 L1593.24 685.069 L1593.8 685.069 L1594.36 685.069 L1594.92 685.069 L1595.47 685.069 L1596.03 685.069 L1596.59 685.069 L1597.15 685.069 L1597.71 685.069 L1598.27 685.069 L1598.83 685.069 L1599.39 685.069 L1599.95 685.069 L1600.51 685.069 L1601.07 685.069 L1601.63 685.069 L1602.19 685.069 L1602.74 685.069 L1603.3 685.069 L1603.86 685.069 L1604.42 685.069 L1604.98 685.069 L1605.54 685.069 L1606.1 685.069 L1606.66 685.069 L1607.22 685.069 L1607.78 685.069 L1608.34 685.069 L1608.9 685.069 L1609.46 685.069 L1610.02 685.069 L1610.57 685.069 L1611.13 685.069 L1611.69 685.069 L1612.25 685.069 L1612.81 685.069 L1613.37 685.069 L1613.93 685.069 L1614.49 685.069 L1615.05 685.069 L1615.61 685.069 L1616.17 685.069 L1616.73 685.069 L1617.29 685.069 L1617.84 685.069 L1618.4 685.069 L1618.96 685.069 L1619.52 685.069 L1620.08 685.069 L1620.64 685.069 L1621.2 685.069 L1621.76 685.069 L1622.32 685.069 L1622.88 685.069 L1623.44 685.069 L1624 685.069 L1624.56 685.069 L1625.11 685.069 L1625.67 685.069 L1626.23 685.069 L1626.79 685.069 L1627.35 685.069 L1627.91 685.069 L1628.47 685.069 L1629.03 685.069 L1629.59 685.069 L1630.15 685.069 L1630.71 685.069 L1631.27 685.069 L1631.83 685.069 L1632.39 685.069 L1632.94 685.069 L1633.5 685.069 L1634.06 685.069 L1634.62 685.069 L1635.18 685.069 L1635.74 685.069 L1636.3 685.069 L1636.86 685.069 L1637.42 685.069 L1637.98 685.069 L1638.54 685.069 L1639.1 685.069 L1639.66 685.069 L1640.21 685.069 L1640.77 685.069 L1641.33 685.069 L1641.89 685.069 L1642.45 685.069 L1643.01 685.069 L1643.57 685.069 L1644.13 685.069 L1644.69 685.069 L1645.25 685.069 L1645.81 685.069 L1646.37 685.069 L1646.93 685.069 L1647.48 685.069 L1648.04 685.069 L1648.6 685.069 L1649.16 685.069 L1649.72 685.069 L1650.28 685.069 L1650.84 685.069 L1651.4 685.069 L1651.96 685.069 L1652.52 685.069 L1653.08 685.069 L1653.64 685.069 L1654.2 685.069 L1654.76 685.069 L1655.31 685.069 L1655.87 685.069 L1656.43 685.069 L1656.99 685.069 L1657.55 685.069 L1658.11 685.069 L1658.67 685.069 L1659.23 685.069 L1659.79 685.069 L1660.35 685.069 L1660.91 685.069 L1661.47 685.069 L1662.03 685.069 L1662.58 685.069 L1663.14 685.069 L1663.7 685.069 L1664.26 685.069 L1664.82 685.069 L1665.38 685.069 L1665.94 685.069 L1666.5 685.069 L1667.06 685.069 L1667.62 685.069 L1668.18 685.069 L1668.74 685.069 L1669.3 685.069 L1669.85 685.069 L1670.41 685.069 L1670.97 685.069 L1671.53 685.069 L1672.09 685.069 L1672.65 685.069 L1673.21 685.069 L1673.77 685.069 L1674.33 685.069 L1674.89 685.069 L1675.45 685.069 L1676.01 685.069 L1676.57 685.069 L1677.13 685.069 L1677.68 685.069 L1678.24 685.069 L1678.8 685.069 L1679.36 685.069 L1679.92 685.069 L1680.48 685.069 L1681.04 685.069 L1681.6 685.069 L1682.16 685.069 L1682.72 685.069 L1683.28 685.069 L1683.84 685.069 L1684.4 685.069 L1684.95 685.069 L1685.51 685.069 L1686.07 685.069 L1686.63 685.069 L1687.19 685.069 L1687.75 685.069 L1688.31 685.069 L1688.87 685.069 L1689.43 685.069 L1689.99 685.069 L1690.55 685.069 L1691.11 685.069 L1691.67 685.069 L1692.23 685.069 L1692.78 685.069 L1693.34 685.069 L1693.9 685.069 L1694.46 685.069 L1695.02 685.069 L1695.58 685.069 L1696.14 685.069 L1696.7 685.069 L1697.26 685.069 L1697.82 685.069 L1698.38 685.069 L1698.94 685.069 L1699.5 685.069 L1700.05 685.069 L1700.61 685.069 L1701.17 685.069 L1701.73 685.069 L1702.29 685.069 L1702.85 685.069 L1703.41 685.069 L1703.97 685.069 L1704.53 685.069 L1705.09 685.069 L1705.65 685.069 L1706.21 685.069 L1706.77 685.069 L1707.32 685.069 L1707.88 685.069 L1708.44 685.069 L1709 685.069 L1709.56 685.069 L1710.12 685.069 L1710.68 685.069 L1711.24 685.069 L1711.8 685.069 L1712.36 685.069 L1712.92 685.069 L1713.48 685.069 L1714.04 685.069 L1714.6 685.069 L1715.15 685.069 L1715.71 685.069 L1716.27 685.069 L1716.83 685.069 L1717.39 685.069 L1717.95 685.069 L1718.51 685.069 L1719.07 685.069 L1719.63 685.069 L1720.19 685.069 L1720.75 685.069 L1721.31 685.069 L1721.87 685.069 L1722.42 685.069 L1722.98 685.069 L1723.54 685.069 L1724.1 685.069 L1724.66 685.069 L1725.22 685.069 L1725.78 685.069 L1726.34 685.069 L1726.9 685.069 L1727.46 685.069 L1728.02 685.069 L1728.58 685.069 L1729.14 685.069 L1729.69 685.069 L1730.25 685.069 L1730.81 685.069 L1731.37 685.069 L1731.93 685.069 L1732.49 685.069 L1733.05 685.069 L1733.61 685.069 L1734.17 685.069 L1734.73 685.069 L1735.29 685.069 L1735.85 685.069 L1736.41 685.069 L1736.97 685.069 L1737.52 685.069 L1738.08 685.069 L1738.64 685.069 L1739.2 685.069 L1739.76 685.069 L1740.32 685.069 L1740.88 685.069 L1741.44 685.069 L1742 685.069 L1742.56 685.069 L1743.12 685.069 L1743.68 685.069 L1744.24 685.069 L1744.79 685.069 L1745.35 685.069 L1745.91 685.069 L1746.47 685.069 L1747.03 685.069 L1747.59 685.069 L1748.15 685.069 L1748.71 685.069 L1749.27 685.069 L1749.83 685.069 L1750.39 685.069 L1750.95 685.069 L1751.51 685.069 L1752.06 685.069 L1752.62 685.069 L1753.18 685.069 L1753.74 685.069 L1754.3 685.069 L1754.86 685.069 L1755.42 685.069 L1755.98 685.069 L1756.54 685.069 L1757.1 685.069 L1757.66 685.069 L1758.22 685.069 L1758.78 685.069 L1759.34 685.069 L1759.89 685.069 L1760.45 685.069 L1761.01 685.069 L1761.57 685.069 L1762.13 685.069 L1762.69 685.069 L1763.25 685.069 L1763.81 685.069 L1764.37 685.069 L1764.93 685.069 L1765.49 685.069 L1766.05 685.069 L1766.61 685.069 L1767.16 685.069 L1767.72 685.069 L1768.28 685.069 L1768.84 685.069 L1769.4 685.069 L1769.96 685.069 L1770.52 685.069 L1771.08 685.069 L1771.64 685.069 L1772.2 685.069 L1772.76 685.069 L1773.32 685.069 L1773.88 685.069 L1774.43 685.069 L1774.99 685.069 L1775.55 685.069 L1776.11 685.069 L1776.67 685.069 L1777.23 685.069 L1777.79 685.069 L1778.35 685.069 L1778.91 685.069 L1779.47 685.069 L1780.03 685.069 L1780.59 685.069 L1781.15 685.069 L1781.71 685.069 L1782.26 685.069 L1782.82 685.069 L1783.38 685.069 L1783.94 685.069 L1784.5 685.069 L1785.06 685.069 L1785.62 685.069 L1786.18 685.069 L1786.74 685.069 L1787.3 685.069 L1787.86 685.069 L1788.42 685.069 L1788.98 685.069 L1789.53 685.069 L1790.09 685.069 L1790.65 685.069 L1791.21 685.069 L1791.77 685.069 L1792.33 685.069 L1792.89 685.069 L1793.45 685.069 L1794.01 685.069 L1794.57 685.069 L1795.13 685.069 L1795.69 685.069 L1796.25 685.069 L1796.8 685.069 L1797.36 685.069 L1797.92 685.069 L1798.48 685.069 L1799.04 685.069 L1799.6 685.069 L1800.16 685.069 L1800.72 685.069 L1801.28 685.069 L1801.84 685.069 L1802.4 685.069 L1802.96 685.069 L1803.52 685.069 L1804.08 685.069 L1804.63 685.069 L1805.19 685.069 L1805.75 685.069 L1806.31 685.069 L1806.87 685.069 L1807.43 685.069 L1807.99 685.069 L1808.55 685.069 L1809.11 685.069 L1809.67 685.069 L1810.23 685.069 L1810.79 685.069 L1811.35 685.069 L1811.9 685.069 L1812.46 685.069 L1813.02 685.069 L1813.58 685.069 L1814.14 685.069 L1814.7 685.069 L1815.26 685.069 L1815.82 685.069 L1816.38 685.069 L1816.94 685.069 L1817.5 685.069 L1818.06 685.069 L1818.62 685.069 L1819.18 685.069 L1819.73 685.069 L1820.29 685.069 L1820.85 685.069 L1821.41 685.069 L1821.97 685.069 L1822.53 685.069 L1823.09 685.069 L1823.65 685.069 L1824.21 685.069 L1824.77 685.069 L1825.33 685.069 L1825.89 685.069 L1826.45 685.069 L1827 685.069 L1827.56 685.069 L1828.12 685.069 L1828.68 685.069 L1829.24 685.069 L1829.8 685.069 L1830.36 685.069 L1830.92 685.069 L1831.48 685.069 L1832.04 685.069 L1832.6 685.069 L1833.16 685.069 L1833.72 685.069 L1834.27 685.069 L1834.83 685.069 L1835.39 685.069 L1835.95 685.069 L1836.51 685.069 L1837.07 685.069 L1837.63 685.069 L1838.19 685.069 L1838.19 683.108 L1837.63 683.108 L1837.07 683.108 L1836.51 683.108 L1835.95 683.108 L1835.39 683.108 L1834.83 683.108 L1834.27 683.108 L1833.72 683.108 L1833.16 683.108 L1832.6 683.108 L1832.04 683.108 L1831.48 683.108 L1830.92 683.108 L1830.36 683.108 L1829.8 683.108 L1829.24 683.108 L1828.68 683.108 L1828.12 683.108 L1827.56 683.108 L1827 683.108 L1826.45 683.108 L1825.89 683.108 L1825.33 683.108 L1824.77 683.108 L1824.21 683.108 L1823.65 683.108 L1823.09 683.108 L1822.53 683.108 L1821.97 683.108 L1821.41 683.108 L1820.85 683.108 L1820.29 683.108 L1819.73 683.108 L1819.18 683.108 L1818.62 683.108 L1818.06 683.108 L1817.5 683.108 L1816.94 683.108 L1816.38 683.108 L1815.82 683.108 L1815.26 683.108 L1814.7 683.108 L1814.14 683.108 L1813.58 683.108 L1813.02 683.108 L1812.46 683.108 L1811.9 683.108 L1811.35 683.108 L1810.79 683.108 L1810.23 683.108 L1809.67 683.108 L1809.11 683.108 L1808.55 683.108 L1807.99 683.108 L1807.43 683.108 L1806.87 683.108 L1806.31 683.108 L1805.75 683.108 L1805.19 683.108 L1804.63 683.108 L1804.08 683.108 L1803.52 683.108 L1802.96 683.108 L1802.4 683.108 L1801.84 683.108 L1801.28 683.108 L1800.72 683.108 L1800.16 683.108 L1799.6 683.108 L1799.04 683.108 L1798.48 683.108 L1797.92 683.108 L1797.36 683.108 L1796.8 683.108 L1796.25 683.108 L1795.69 683.108 L1795.13 683.108 L1794.57 683.108 L1794.01 683.108 L1793.45 683.108 L1792.89 683.108 L1792.33 683.108 L1791.77 683.108 L1791.21 683.108 L1790.65 683.108 L1790.09 683.108 L1789.53 683.108 L1788.98 683.108 L1788.42 683.108 L1787.86 683.108 L1787.3 683.108 L1786.74 683.108 L1786.18 683.108 L1785.62 683.108 L1785.06 683.108 L1784.5 683.108 L1783.94 683.108 L1783.38 683.108 L1782.82 683.108 L1782.26 683.108 L1781.71 683.108 L1781.15 683.108 L1780.59 683.108 L1780.03 683.108 L1779.47 683.108 L1778.91 683.108 L1778.35 683.108 L1777.79 683.108 L1777.23 683.108 L1776.67 683.108 L1776.11 683.108 L1775.55 683.108 L1774.99 683.108 L1774.43 683.108 L1773.88 683.108 L1773.32 683.108 L1772.76 683.108 L1772.2 683.108 L1771.64 683.108 L1771.08 683.108 L1770.52 683.108 L1769.96 683.108 L1769.4 683.108 L1768.84 683.108 L1768.28 683.108 L1767.72 683.108 L1767.16 683.108 L1766.61 683.108 L1766.05 683.108 L1765.49 683.108 L1764.93 683.108 L1764.37 683.108 L1763.81 683.108 L1763.25 683.108 L1762.69 683.108 L1762.13 683.108 L1761.57 683.108 L1761.01 683.108 L1760.45 683.108 L1759.89 683.108 L1759.34 683.108 L1758.78 683.108 L1758.22 683.108 L1757.66 683.108 L1757.1 683.108 L1756.54 683.108 L1755.98 683.108 L1755.42 683.108 L1754.86 683.108 L1754.3 683.108 L1753.74 683.108 L1753.18 683.108 L1752.62 683.108 L1752.06 683.108 L1751.51 683.108 L1750.95 683.108 L1750.39 683.108 L1749.83 683.108 L1749.27 683.108 L1748.71 683.108 L1748.15 683.108 L1747.59 683.108 L1747.03 683.108 L1746.47 683.108 L1745.91 683.108 L1745.35 683.108 L1744.79 683.108 L1744.24 683.108 L1743.68 683.108 L1743.12 683.108 L1742.56 683.108 L1742 683.108 L1741.44 683.108 L1740.88 683.108 L1740.32 683.108 L1739.76 683.108 L1739.2 683.108 L1738.64 683.108 L1738.08 683.108 L1737.52 683.108 L1736.97 683.108 L1736.41 683.108 L1735.85 683.108 L1735.29 683.108 L1734.73 683.108 L1734.17 683.108 L1733.61 683.108 L1733.05 683.108 L1732.49 683.108 L1731.93 683.108 L1731.37 683.108 L1730.81 683.108 L1730.25 683.108 L1729.69 683.108 L1729.14 683.108 L1728.58 683.108 L1728.02 683.108 L1727.46 683.108 L1726.9 683.108 L1726.34 683.108 L1725.78 683.108 L1725.22 683.108 L1724.66 683.108 L1724.1 683.108 L1723.54 683.108 L1722.98 683.108 L1722.42 683.108 L1721.87 683.108 L1721.31 683.108 L1720.75 683.108 L1720.19 683.108 L1719.63 683.108 L1719.07 683.108 L1718.51 683.108 L1717.95 683.108 L1717.39 683.108 L1716.83 683.108 L1716.27 683.108 L1715.71 683.108 L1715.15 683.108 L1714.6 683.108 L1714.04 683.108 L1713.48 683.108 L1712.92 683.108 L1712.36 683.108 L1711.8 683.108 L1711.24 683.108 L1710.68 683.108 L1710.12 683.108 L1709.56 683.108 L1709 683.108 L1708.44 683.108 L1707.88 683.108 L1707.32 683.108 L1706.77 683.108 L1706.21 683.108 L1705.65 683.108 L1705.09 683.108 L1704.53 683.108 L1703.97 683.108 L1703.41 683.108 L1702.85 683.108 L1702.29 683.108 L1701.73 683.108 L1701.17 683.108 L1700.61 683.108 L1700.05 683.108 L1699.5 683.108 L1698.94 683.108 L1698.38 683.108 L1697.82 683.108 L1697.26 683.108 L1696.7 683.108 L1696.14 683.108 L1695.58 683.108 L1695.02 683.108 L1694.46 683.108 L1693.9 683.108 L1693.34 683.108 L1692.78 683.108 L1692.23 683.108 L1691.67 683.108 L1691.11 683.108 L1690.55 683.108 L1689.99 683.108 L1689.43 683.108 L1688.87 683.108 L1688.31 683.108 L1687.75 683.108 L1687.19 683.108 L1686.63 683.108 L1686.07 683.108 L1685.51 683.108 L1684.95 683.108 L1684.4 683.108 L1683.84 683.108 L1683.28 683.108 L1682.72 683.108 L1682.16 683.108 L1681.6 683.108 L1681.04 683.108 L1680.48 683.108 L1679.92 683.108 L1679.36 683.108 L1678.8 683.108 L1678.24 683.108 L1677.68 683.108 L1677.13 683.108 L1676.57 683.108 L1676.01 683.108 L1675.45 683.108 L1674.89 683.108 L1674.33 683.108 L1673.77 683.108 L1673.21 683.108 L1672.65 683.108 L1672.09 683.108 L1671.53 683.108 L1670.97 683.108 L1670.41 683.108 L1669.85 683.108 L1669.3 683.108 L1668.74 683.108 L1668.18 683.108 L1667.62 683.108 L1667.06 683.108 L1666.5 683.108 L1665.94 683.108 L1665.38 683.108 L1664.82 683.108 L1664.26 683.108 L1663.7 683.108 L1663.14 683.108 L1662.58 683.108 L1662.03 683.108 L1661.47 683.108 L1660.91 683.108 L1660.35 683.108 L1659.79 683.108 L1659.23 683.108 L1658.67 683.108 L1658.11 683.108 L1657.55 683.108 L1656.99 683.108 L1656.43 683.108 L1655.87 683.108 L1655.31 683.108 L1654.76 683.108 L1654.2 683.108 L1653.64 683.108 L1653.08 683.108 L1652.52 683.108 L1651.96 683.108 L1651.4 683.108 L1650.84 683.108 L1650.28 683.108 L1649.72 683.108 L1649.16 683.108 L1648.6 683.108 L1648.04 683.108 L1647.48 683.108 L1646.93 683.108 L1646.37 683.108 L1645.81 683.108 L1645.25 683.108 L1644.69 683.108 L1644.13 683.108 L1643.57 683.108 L1643.01 683.108 L1642.45 683.108 L1641.89 683.108 L1641.33 683.108 L1640.77 683.108 L1640.21 683.108 L1639.66 683.108 L1639.1 683.108 L1638.54 683.108 L1637.98 683.108 L1637.42 683.108 L1636.86 683.108 L1636.3 683.108 L1635.74 683.108 L1635.18 683.108 L1634.62 683.108 L1634.06 683.108 L1633.5 683.108 L1632.94 683.108 L1632.39 683.108 L1631.83 683.108 L1631.27 683.108 L1630.71 683.108 L1630.15 683.108 L1629.59 683.108 L1629.03 683.108 L1628.47 683.108 L1627.91 683.108 L1627.35 683.108 L1626.79 683.108 L1626.23 683.108 L1625.67 683.108 L1625.11 683.108 L1624.56 683.108 L1624 683.108 L1623.44 683.108 L1622.88 683.108 L1622.32 683.108 L1621.76 683.108 L1621.2 683.108 L1620.64 683.108 L1620.08 683.108 L1619.52 683.108 L1618.96 683.108 L1618.4 683.108 L1617.84 683.108 L1617.29 683.108 L1616.73 683.108 L1616.17 683.108 L1615.61 683.108 L1615.05 683.108 L1614.49 683.108 L1613.93 683.108 L1613.37 683.108 L1612.81 683.108 L1612.25 683.108 L1611.69 683.108 L1611.13 683.108 L1610.57 683.108 L1610.02 683.108 L1609.46 683.108 L1608.9 683.108 L1608.34 683.108 L1607.78 683.108 L1607.22 683.108 L1606.66 683.108 L1606.1 683.108 L1605.54 683.108 L1604.98 683.108 L1604.42 683.108 L1603.86 683.108 L1603.3 683.108 L1602.74 683.108 L1602.19 683.108 L1601.63 683.108 L1601.07 683.108 L1600.51 683.108 L1599.95 683.108 L1599.39 683.108 L1598.83 683.108 L1598.27 683.108 L1597.71 683.108 L1597.15 683.108 L1596.59 683.108 L1596.03 683.108 L1595.47 683.108 L1594.92 683.108 L1594.36 683.108 L1593.8 683.108 L1593.24 683.108 L1592.68 683.108 L1592.12 683.108 L1591.56 683.108 L1591 683.108 L1590.44 683.108 L1589.88 683.108 L1589.32 683.108 L1588.76 683.108 L1588.2 683.108 L1587.65 683.108 L1587.09 683.108 L1586.53 683.108 L1585.97 683.108 L1585.41 683.108 L1584.85 683.108 L1584.29 683.108 L1583.73 683.108 L1583.17 683.108 L1582.61 683.108 L1582.05 683.108 L1581.49 683.108 L1580.93 683.108 L1580.37 683.108 L1579.82 683.108 L1579.26 683.108 L1578.7 683.108 L1578.14 683.108 L1577.58 683.108 L1577.02 683.108 L1576.46 683.108 L1575.9 683.108 L1575.34 683.108 L1574.78 683.108 L1574.22 683.108 L1573.66 683.108 L1573.1 683.108 L1572.55 683.108 L1571.99 683.108 L1571.43 683.108 L1570.87 683.108 L1570.31 683.108 L1569.75 683.108 L1569.19 683.108 L1568.63 683.108 L1568.07 683.108 L1567.51 683.108 L1566.95 683.108 L1566.39 683.108 L1565.83 683.108 L1565.28 683.108 L1564.72 683.108 L1564.16 683.108 L1563.6 683.108 L1563.04 683.108 L1562.48 683.108 L1561.92 683.108 L1561.36 683.108 L1560.8 683.108 L1560.24 683.108 L1559.68 683.108 L1559.12 683.108 L1558.56 683.108 L1558 683.108 L1557.45 683.108 L1556.89 683.108 L1556.33 683.108 L1555.77 683.108 L1555.21 683.108 L1554.65 683.108 L1554.09 683.108 L1553.53 683.108 L1552.97 683.108 L1552.41 683.108 L1551.85 683.108 L1551.29 683.108 L1550.73 683.108 L1550.18 683.108 L1549.62 683.108 L1549.06 683.108 L1548.5 683.108 L1547.94 683.108 L1547.38 683.108 L1546.82 683.108 L1546.26 683.108 L1545.7 683.108 L1545.14 683.108 L1544.58 683.108 L1544.02 683.108 L1543.46 683.108 L1542.9 683.108 L1542.35 683.108 L1541.79 683.108 L1541.23 683.108 L1540.67 683.108 L1540.11 683.108 L1539.55 683.108 L1538.99 683.108 L1538.43 683.108 L1537.87 683.108 L1537.31 683.108 L1536.75 683.108 L1536.19 683.108 L1535.63 683.108 L1535.08 683.108 L1534.52 683.108 L1533.96 683.108 L1533.4 683.108 L1532.84 683.108 L1532.28 683.108 L1531.72 683.108 L1531.16 683.108 L1530.6 683.108 L1530.04 683.108 L1529.48 683.108 L1528.92 683.108 L1528.36 683.108 L1527.81 683.108 L1527.25 683.108 L1526.69 683.108 L1526.13 683.108 L1525.57 683.108 L1525.01 683.108 L1524.45 683.108 L1523.89 683.108 L1523.33 683.108 L1522.77 683.108 L1522.21 683.108 L1521.65 683.108 L1521.09 683.108 L1520.53 683.108 L1519.98 683.108 L1519.42 683.108 L1518.86 683.108 L1518.3 683.108 L1517.74 683.108 L1517.18 683.108 L1516.62 683.108 L1516.06 683.108 L1515.5 683.108 L1514.94 683.108 L1514.38 683.108 L1513.82 683.108 L1513.26 683.108 L1512.71 683.108 L1512.15 683.108 L1511.59 683.108 L1511.03 683.108 L1510.47 683.108 L1509.91 683.108 L1509.35 683.108 L1508.79 683.108 L1508.23 683.108 L1507.67 683.108 L1507.11 683.108 L1506.55 683.108 L1505.99 683.108 L1505.44 683.108 L1504.88 683.108 L1504.32 683.108 L1503.76 683.108 L1503.2 683.108 L1502.64 683.108 L1502.08 683.108 L1501.52 683.108 L1500.96 683.108 L1500.4 683.108 L1499.84 683.108 L1499.28 683.108 L1498.72 683.108 L1498.16 683.108 L1497.61 683.108 L1497.05 683.108 L1496.49 683.108 L1495.93 683.108 L1495.37 683.108 L1494.81 683.108 L1494.25 683.108 L1493.69 683.108 L1493.13 683.108 L1492.57 683.108 L1492.01 683.108 L1491.45 683.108 L1490.89 683.108 L1490.34 683.108 L1489.78 683.108 L1489.22 683.108 L1488.66 683.108 L1488.1 683.108 L1487.54 683.108 L1486.98 683.108 L1486.42 683.108 L1485.86 683.108 L1485.3 683.108 L1484.74 683.108 L1484.18 683.108 L1483.62 683.108 L1483.07 683.108 L1482.51 683.108 L1481.95 683.108 L1481.39 683.108 L1480.83 683.108 L1480.27 683.108 L1479.71 683.108 L1479.15 683.108 L1478.59 683.108 L1478.03 683.108 L1477.47 683.108 L1476.91 683.108 L1476.35 683.108 L1475.79 683.108 L1475.24 683.108 L1474.68 683.108 L1474.12 683.108 L1473.56 683.108 L1473 683.108 L1472.44 683.108 L1471.88 683.108 L1471.32 683.108 L1470.76 683.108 L1470.2 683.108 L1469.64 683.108 L1469.08 683.108 L1468.52 683.108 L1467.97 683.108 L1467.41 683.108 L1466.85 683.108 L1466.29 683.108 L1465.73 683.108 L1465.17 683.108 L1464.61 683.108 L1464.05 683.108 L1463.49 683.108 L1462.93 683.108 L1462.37 683.108 L1461.81 683.108 L1461.25 683.108 L1460.7 683.108 L1460.14 683.108 L1459.58 683.108 L1459.02 683.108 L1458.46 683.108 L1457.9 683.108 L1457.34 683.108 L1456.78 683.108 L1456.22 683.108 L1455.66 683.108 L1455.1 683.108 L1454.54 683.108 L1453.98 683.108 L1453.42 683.108 L1452.87 683.108 L1452.31 683.108 L1451.75 683.108 L1451.19 683.108 L1450.63 683.108 L1450.07 683.108 L1449.51 683.108 L1448.95 683.108 L1448.39 683.108 L1447.83 683.108 L1447.27 683.108 L1446.71 683.108 L1446.15 683.108 L1445.6 683.108 L1445.04 683.108 L1444.48 683.108 L1443.92 683.108 L1443.36 683.108 L1442.8 683.108 L1442.24 683.108 L1441.68 683.108 L1441.12 683.108 L1440.56 683.108 L1440 683.108 L1439.44 683.108 L1438.88 683.108 L1438.33 683.108 L1437.77 683.108 L1437.21 683.108 L1436.65 683.108 L1436.09 683.108 L1435.53 683.108 L1434.97 683.108 L1434.41 683.108 L1433.85 683.108 L1433.29 683.108 L1432.73 683.108 L1432.17 683.108 L1431.61 683.108 L1431.05 683.108 L1430.5 683.108 L1429.94 683.108 L1429.38 683.108 L1428.82 683.108 L1428.26 683.108 L1427.7 683.108 L1427.14 683.108 L1426.58 683.108 L1426.02 683.108 L1425.46 683.108 L1424.9 683.108 L1424.34 683.108 L1423.78 683.108 L1423.23 683.108 L1422.67 683.108 L1422.11 683.108 L1421.55 683.108 L1420.99 683.108 L1420.43 683.108 L1419.87 683.108 L1419.31 683.108 L1418.75 683.108 L1418.19 683.108 L1417.63 683.108 L1417.07 683.108 L1416.51 683.108 L1415.95 683.108 L1415.4 683.108 L1414.84 683.108 L1414.28 683.108 L1413.72 683.108 L1413.16 683.108 L1412.6 683.108 L1412.04 683.108 L1411.48 683.108 L1410.92 683.108 L1410.36 683.108 L1409.8 683.108 L1409.24 683.108 L1408.68 683.108 L1408.13 683.108 L1407.57 683.108 L1407.01 683.108 L1406.45 683.108 L1405.89 683.108 L1405.33 683.108 L1404.77 683.108 L1404.21 683.108 L1403.65 683.108 L1403.09 683.108 L1402.53 683.108 L1401.97 683.108 L1401.41 683.108 L1400.86 683.108 L1400.3 683.108 L1399.74 683.108 L1399.18 683.108 L1398.62 683.108 L1398.06 683.108 L1397.5 683.108 L1396.94 683.108 L1396.38 683.108 L1395.82 683.108 L1395.26 683.108 L1394.7 683.108 L1394.14 683.108 L1393.58 683.108 L1393.03 683.108 L1392.47 683.108 L1391.91 683.108 L1391.35 683.108 L1390.79 683.108 L1390.23 683.108 L1389.67 683.108 L1389.11 683.108 L1388.55 683.108 L1387.99 683.108 L1387.43 683.108 L1386.87 683.108 L1386.31 683.108 L1385.76 683.108 L1385.2 683.108 L1384.64 683.108 L1384.08 683.108 L1383.52 683.108 L1382.96 683.108 L1382.4 683.108 L1381.84 683.108 L1381.28 683.108 L1380.72 683.108 L1380.16 683.108 L1379.6 683.108 L1379.04 683.108 L1378.49 683.108 L1377.93 683.108 L1377.37 683.108 L1376.81 683.108 L1376.25 683.108 L1375.69 683.108 L1375.13 683.108 L1374.57 683.108 L1374.01 683.108 L1373.45 683.108 L1372.89 683.108 L1372.33 683.108 L1371.77 683.108 L1371.21 683.108 L1370.66 683.108 L1370.1 683.108 L1369.54 683.108 L1368.98 683.108 L1368.42 683.108 L1367.86 683.108 L1367.3 683.108 L1366.74 683.108 L1366.18 683.108 L1365.62 683.108 L1365.06 683.108 L1364.5 683.108 L1363.94 683.108 L1363.39 683.108 L1362.83 683.108 L1362.27 683.108 L1361.71 683.108 L1361.15 683.108 L1360.59 683.108 L1360.03 683.108 L1359.47 683.108 L1358.91 683.108 L1358.35 683.108 L1357.79 683.108 L1357.23 683.108 L1356.67 683.108 L1356.12 683.108 L1355.56 683.108 L1355 683.108 L1354.44 683.108 L1353.88 683.108 L1353.32 683.108 L1352.76 683.108 L1352.2 683.108 L1351.64 683.108 L1351.08 683.108 L1350.52 683.108 L1349.96 683.108 L1349.4 683.108 L1348.84 683.108 L1348.29 683.108 L1347.73 683.108 L1347.17 683.108 L1346.61 683.108 L1346.05 683.108 L1345.49 683.108 L1344.93 683.108 L1344.37 683.108 L1343.81 683.108 L1343.25 683.108 L1342.69 683.108 L1342.13 683.108 L1341.57 683.108 L1341.02 683.108 L1340.46 683.108 L1339.9 683.108 L1339.34 683.108 L1338.78 683.108 L1338.22 683.108 L1337.66 683.108 L1337.1 683.108 L1336.54 683.108 L1335.98 683.108 L1335.42 683.108 L1334.86 683.108 L1334.3 683.108 L1333.75 683.108 L1333.19 683.108 L1332.63 683.108 L1332.07 683.108 L1331.51 683.108 L1330.95 683.108 L1330.39 683.108 L1329.83 683.108 L1329.27 683.108 L1328.71 683.108 L1328.15 683.108 L1327.59 683.108 L1327.03 683.108 L1326.47 683.108 L1325.92 683.108 L1325.36 683.108 L1324.8 683.108 L1324.24 683.108 L1323.68 683.108 L1323.12 683.108 L1322.56 683.108 L1322 683.108 L1321.44 683.108 L1320.88 683.108 L1320.32 683.108 L1319.76 683.108 L1319.2 683.108 L1318.65 683.108 L1318.09 683.108 L1317.53 683.108 L1316.97 683.108 L1316.41 683.108 L1315.85 683.108 L1315.29 683.108 L1314.73 683.108 L1314.17 683.108 L1313.61 683.108 L1313.05 683.108 L1312.49 683.108 L1311.93 683.108 L1311.38 683.108 L1310.82 683.108 L1310.26 683.108 L1309.7 683.108 L1309.14 683.108 L1308.58 683.108 L1308.02 683.108 L1307.46 683.108 L1306.9 683.108 L1306.34 683.108 L1305.78 683.108 L1305.22 683.108 L1304.66 683.108 L1304.1 683.108 L1303.55 683.108 L1302.99 683.108 L1302.43 683.108 L1301.87 683.108 L1301.31 683.108 L1300.75 683.108 L1300.19 683.108 L1299.63 683.108 L1299.07 683.108 L1298.51 683.108 L1297.95 683.108 L1297.39 683.108 L1296.83 683.108 L1296.28 683.108 L1295.72 683.108 L1295.16 683.108 L1294.6 683.108 L1294.04 683.108 L1293.48 683.108 L1292.92 683.108 L1292.36 683.108 L1291.8 683.108 L1291.24 683.108 L1290.68 683.108 L1290.12 683.108 L1289.56 683.108 L1289 683.108 L1288.45 683.108 L1287.89 683.108 L1287.33 683.108 L1286.77 683.108 L1286.21 683.108 L1285.65 683.108 L1285.09 683.108 L1284.53 683.108 L1283.97 683.108 L1283.41 683.108 L1282.85 683.108 L1282.29 683.108 L1281.73 683.108 L1281.18 683.108 L1280.62 683.108 L1280.06 683.108 L1279.5 683.108 L1278.94 683.108 L1278.38 683.108 L1277.82 683.108 L1277.26 683.108 L1276.7 683.108 L1276.14 683.108 L1275.58 683.108 L1275.02 683.108 L1274.46 683.108 L1273.91 683.108 L1273.35 683.108 L1272.79 683.108 L1272.23 683.108 L1271.67 683.108 L1271.11 683.108 L1270.55 683.108 L1269.99 683.108 L1269.43 683.108 L1268.87 683.108 L1268.31 683.108 L1267.75 683.108 L1267.19 683.108 L1266.63 683.108 L1266.08 683.108 L1265.52 683.108 L1264.96 683.108 L1264.4 683.108 L1263.84 683.108 L1263.28 683.108 L1262.72 683.108 L1262.16 683.108 L1261.6 683.108 L1261.04 683.108 L1260.48 683.108 L1259.92 683.108 L1259.36 683.108 L1258.81 683.108 L1258.25 683.108 L1257.69 683.108 L1257.13 683.108 L1256.57 683.108 L1256.01 683.108 L1255.45 683.108 L1254.89 683.108 L1254.33 683.108 L1253.77 683.108 L1253.21 683.108 L1252.65 683.108 L1252.09 683.108 L1251.54 683.108 L1250.98 683.108 L1250.42 683.108 L1249.86 683.108 L1249.3 683.108 L1248.74 683.108 L1248.18 683.108 L1247.62 683.108 L1247.06 683.108 L1246.5 683.108 L1245.94 683.108 L1245.38 683.108 L1244.82 683.108 L1244.26 683.108 L1243.71 683.108 L1243.15 683.108 L1242.59 683.108 L1242.03 683.108 L1241.47 683.108 L1240.91 683.108 L1240.35 683.108 L1239.79 683.108 L1239.23 683.108 L1238.67 683.108 L1238.11 683.108 L1237.55 683.108 L1236.99 683.108 L1236.44 683.108 L1235.88 683.108 L1235.32 683.108 L1234.76 683.108 L1234.2 683.108 L1233.64 683.108 L1233.08 683.108 L1232.52 683.108 L1231.96 683.108 L1231.4 683.108 L1230.84 683.108 L1230.28 683.108 L1229.72 683.108 L1229.17 683.108 L1228.61 683.108 L1228.05 683.108 L1227.49 683.108 L1226.93 683.108 L1226.37 683.108 L1225.81 683.108 L1225.25 683.108 L1224.69 683.108 L1224.13 683.108 L1223.57 683.108 L1223.01 683.108 L1222.45 683.108 L1221.89 683.108 L1221.34 683.108 L1220.78 683.108 L1220.22 683.108 L1219.66 683.108 L1219.1 683.108 L1218.54 683.108 L1217.98 683.108 L1217.42 683.108 L1216.86 683.108 L1216.3 683.108 L1215.74 683.108 L1215.18 683.108 L1214.62 683.108 L1214.07 683.108 L1213.51 683.108 L1212.95 683.108 L1212.39 683.108 L1211.83 683.108 L1211.27 683.108 L1210.71 683.108 L1210.15 683.108 L1209.59 683.108 L1209.03 683.108 L1208.47 683.108 L1207.91 683.108 L1207.35 683.108 L1206.8 683.108 L1206.24 683.108 L1205.68 683.108 L1205.12 683.108 L1204.56 683.108 L1204 683.108 L1203.44 683.108 L1202.88 683.108 L1202.32 683.108 L1201.76 683.108 L1201.2 683.108 L1200.64 683.108 L1200.08 683.108 L1199.52 683.108 L1198.97 683.108 L1198.41 683.108 L1197.85 683.108 L1197.29 683.108 L1196.73 683.108 L1196.17 683.108 L1195.61 683.108 L1195.05 683.108 L1194.49 683.108 L1193.93 683.108 L1193.37 683.108 L1192.81 683.108 L1192.25 683.108 L1191.7 683.108 L1191.14 683.108 L1190.58 683.108 L1190.02 683.108 L1189.46 683.108 L1188.9 683.108 L1188.34 683.108 L1187.78 683.108 L1187.22 683.108 L1186.66 683.108 L1186.1 683.108 L1185.54 683.108 L1184.98 683.108 L1184.43 683.108 L1183.87 683.108 L1183.31 683.108 L1182.75 683.108 L1182.19 683.108 L1181.63 683.108 L1181.07 683.108 L1180.51 683.108 L1179.95 683.108 L1179.39 683.108 L1178.83 683.108 L1178.27 683.108 L1177.71 683.108 L1177.15 683.108 L1176.6 683.108 L1176.04 683.108 L1175.48 683.108 L1174.92 683.108 L1174.36 683.108 L1173.8 683.108 L1173.24 683.108 L1172.68 683.108 L1172.12 683.108 L1171.56 683.108 L1171 683.108 L1170.44 683.108 L1169.88 683.108 L1169.33 683.108 L1168.77 683.108 L1168.21 683.108 L1167.65 683.108 L1167.09 683.108 L1166.53 683.108 L1165.97 683.108 L1165.41 683.108 L1164.85 683.108 L1164.29 683.108 L1163.73 683.108 L1163.17 683.108 L1162.61 683.108 L1162.05 683.108 L1161.5 683.108 L1160.94 683.108 L1160.38 683.108 L1159.82 683.108 L1159.26 683.108 L1158.7 683.108 L1158.14 683.108 L1157.58 683.108 L1157.02 683.108 L1156.46 683.108 L1155.9 683.108 L1155.34 683.108 L1154.78 683.108 L1154.23 683.108 L1153.67 683.108 L1153.11 683.108 L1152.55 683.108 L1151.99 683.108 L1151.43 683.108 L1150.87 683.108 L1150.31 683.108 L1149.75 683.108 L1149.19 683.108 L1148.63 683.108 L1148.07 683.108 L1147.51 683.108 L1146.96 683.108 L1146.4 683.108 L1145.84 683.108 L1145.28 683.108 L1144.72 683.108 L1144.16 683.108 L1143.6 683.108 L1143.04 683.108 L1142.48 683.108 L1141.92 683.108 L1141.36 683.108 L1140.8 683.108 L1140.24 683.108 L1139.68 683.108 L1139.13 683.108 L1138.57 683.108 L1138.01 683.108 L1137.45 683.108 L1136.89 683.108 L1136.33 683.108 L1135.77 683.108 L1135.21 683.108 L1134.65 683.108 L1134.09 683.108 L1133.53 683.108 L1132.97 683.108 L1132.41 683.108 L1131.86 683.108 L1131.3 683.108 L1130.74 683.108 L1130.18 683.108 L1129.62 683.108 L1129.06 683.108 L1128.5 683.108 L1127.94 683.108 L1127.38 683.108 L1126.82 683.108 L1126.26 683.108 L1125.7 683.108 L1125.14 683.108 L1124.59 683.108 L1124.03 683.108 L1123.47 683.108 L1122.91 683.108 L1122.35 683.108 L1121.79 683.108 L1121.23 683.108 L1120.67 683.108 L1120.11 683.108 L1119.55 683.108 L1118.99 683.108 L1118.43 683.108 L1117.87 683.108 L1117.31 683.108 L1116.76 683.108 L1116.2 683.108 L1115.64 683.108 L1115.08 683.108 L1114.52 683.108 L1113.96 683.108 L1113.4 683.108 L1112.84 683.108 L1112.28 683.108 L1111.72 683.108 L1111.16 683.108 L1110.6 683.108 L1110.04 683.108 L1109.49 683.108 L1108.93 683.108 L1108.37 683.108 L1107.81 683.108 L1107.25 683.108 L1106.69 683.108 L1106.13 683.108 L1105.57 683.108 L1105.01 683.108 L1104.45 683.108 L1103.89 683.108 L1103.33 683.108 L1102.77 683.108 L1102.22 683.108 L1101.66 683.108 L1101.1 683.108 L1100.54 683.108 L1099.98 683.108 L1099.42 683.108 L1098.86 683.108 L1098.3 683.108 L1097.74 683.108 L1097.18 683.108 L1096.62 683.108 L1096.06 683.108 L1095.5 683.108 L1094.94 683.108 L1094.39 683.108 L1093.83 683.108 L1093.27 683.108 L1092.71 683.108 L1092.15 683.108 L1091.59 683.108 L1091.03 683.108 L1090.47 683.108 L1089.91 683.108 L1089.35 683.108 L1088.79 683.108 L1088.23 683.108 L1087.67 683.108 L1087.12 683.108 L1086.56 683.108 L1086 683.108 L1085.44 683.108 L1084.88 683.108 L1084.32 683.108 L1083.76 683.108 L1083.2 683.108 L1082.64 683.108 L1082.08 683.108 L1081.52 683.108 L1080.96 683.108 L1080.4 683.108 L1079.85 683.108 L1079.29 683.108 L1078.73 683.108 L1078.17 683.108 L1077.61 683.108 L1077.05 683.108 L1076.49 683.108 L1075.93 683.108 L1075.37 683.108 L1074.81 683.108 L1074.25 683.108 L1073.69 683.108 L1073.13 683.108 L1072.57 683.108 L1072.02 683.108 L1071.46 683.108 L1070.9 683.108 L1070.34 683.108 L1069.78 683.108 L1069.22 683.108 L1068.66 683.108 L1068.1 683.108 L1067.54 683.108 L1066.98 683.108 L1066.42 683.108 L1065.86 683.108 L1065.3 683.108 L1064.75 683.108 L1064.19 683.108 L1063.63 683.108 L1063.07 683.108 L1062.51 683.108 L1061.95 683.108 L1061.39 683.108 L1060.83 683.108 L1060.27 683.108 L1059.71 683.108 L1059.15 683.108 L1058.59 683.108 L1058.03 683.108 L1057.48 683.108 L1056.92 683.108 L1056.36 683.108 L1055.8 683.108 L1055.24 683.108 L1054.68 683.108 L1054.12 683.108 L1053.56 683.108 L1053 683.108 L1052.44 683.108 L1051.88 683.108 L1051.32 683.108 L1050.76 683.108 L1050.2 683.108 L1049.65 683.108 L1049.09 683.108 L1048.53 683.108 L1047.97 683.108 L1047.41 683.108 L1046.85 683.108 L1046.29 683.108 L1045.73 683.108 L1045.17 683.108 L1044.61 683.108 L1044.05 683.108 L1043.49 683.108 L1042.93 683.108 L1042.38 683.108 L1041.82 683.108 L1041.26 683.108 L1040.7 683.108 L1040.14 683.108 L1039.58 683.108 L1039.02 683.108 L1038.46 683.108 L1037.9 683.108 L1037.34 683.108 L1036.78 683.108 L1036.22 683.108 L1035.66 683.108 L1035.1 683.108 L1034.55 683.108 L1033.99 683.108 L1033.43 683.108 L1032.87 683.108 L1032.31 683.108 L1031.75 683.108 L1031.19 683.108 L1030.63 683.108 L1030.07 683.108 L1029.51 683.108 L1028.95 683.108 L1028.39 683.108 L1027.83 683.108 L1027.28 683.108 L1026.72 683.108 L1026.16 683.108 L1025.6 683.108 L1025.04 683.108 L1024.48 683.108 L1023.92 683.108 L1023.36 683.108 L1022.8 683.108 L1022.24 683.108 L1021.68 683.108 L1021.12 683.108 L1020.56 683.108 L1020.01 683.108 L1019.45 683.108 L1018.89 683.108 L1018.33 683.108 L1017.77 683.108 L1017.21 683.108 L1016.65 683.108 L1016.09 683.108 L1015.53 683.108 L1014.97 683.108 L1014.41 683.108 L1013.85 683.108 L1013.29 683.108 L1012.73 683.108 L1012.18 683.108 L1011.62 683.108 L1011.06 683.108 L1010.5 683.108 L1009.94 683.108 L1009.38 683.108 L1008.82 683.108 L1008.26 683.108 L1007.7 683.108 L1007.14 683.108 L1006.58 683.108 L1006.02 683.108 L1005.46 683.108 L1004.91 683.108 L1004.35 683.108 L1003.79 683.108 L1003.23 683.108 L1002.67 683.108 L1002.11 683.108 L1001.55 683.108 L1000.99 683.108 L1000.43 683.108 L999.872 683.108 L999.313 683.108 L998.754 683.108 L998.194 683.108 L997.635 683.108 L997.076 683.108 L996.517 683.108 L995.957 683.108 L995.398 683.108 L994.839 683.108 L994.28 683.108 L993.72 683.108 L993.161 683.108 L992.602 683.108 L992.043 683.108 L991.483 683.108 L990.924 683.108 L990.365 683.108 L989.806 683.108 L989.246 683.108 L988.687 683.108 L988.128 683.108 L987.569 683.108 L987.009 683.108 L986.45 683.108 L985.891 683.108 L985.332 683.108 L984.772 683.108 L984.213 683.108 L983.654 683.108 L983.095 683.108 L982.535 683.108 L981.976 683.108 L981.417 683.108 L980.858 683.108 L980.298 683.108 L979.739 683.108 L979.18 683.108 L978.621 683.108 L978.061 683.108 L977.502 683.108 L976.943 683.108 L976.384 683.108 L975.824 683.108 L975.265 683.108 L974.706 683.108 L974.147 683.108 L973.587 683.108 L973.028 683.108 L972.469 683.108 L971.91 683.108 L971.35 683.108 L970.791 683.108 L970.232 683.108 L969.673 683.108 L969.113 683.108 L968.554 683.108 L967.995 683.108 L967.436 683.108 L966.876 683.108 L966.317 683.108 L965.758 683.108 L965.199 683.108 L964.639 683.108 L964.08 683.108 L963.521 683.108 L962.962 683.108 L962.402 683.108 L961.843 683.108 L961.284 683.108 L960.725 683.108 L960.165 683.108 L959.606 683.108 L959.047 683.108 L958.488 683.108 L957.928 683.108 L957.369 683.108 L956.81 683.108 L956.251 683.108 L955.691 683.108 L955.132 683.108 L954.573 683.108 L954.014 683.108 L953.454 683.108 L952.895 683.108 L952.336 683.108 L951.777 683.108 L951.217 683.108 L950.658 683.108 L950.099 683.108 L949.54 683.108 L948.98 683.108 L948.421 683.108 L947.862 683.108 L947.303 683.108 L946.743 683.108 L946.184 683.108 L945.625 683.108 L945.066 683.108 L944.506 683.108 L943.947 683.108 L943.388 683.108 L942.829 683.108 L942.269 683.108 L941.71 683.108 L941.151 683.108 L940.592 683.108 L940.032 683.108 L939.473 683.108 L938.914 683.108 L938.355 683.108 L937.795 683.108 L937.236 683.108 L936.677 683.108 L936.118 683.108 L935.558 683.108 L934.999 683.108 L934.44 683.108 L933.881 683.108 L933.321 683.108 L932.762 683.108 L932.203 683.108 L931.644 683.108 L931.084 683.108 L930.525 683.108 L929.966 683.108 L929.406 683.108 L928.847 683.108 L928.288 683.108 L927.729 683.108 L927.169 683.108 L926.61 683.108 L926.051 683.108 L925.492 683.108 L924.932 683.108 L924.373 683.108 L923.814 683.108 L923.255 683.108 L922.695 683.108 L922.136 683.108 L921.577 683.108 L921.018 683.108 L920.458 683.108 L919.899 683.108 L919.34 683.108 L918.781 683.108 L918.221 683.108 L917.662 683.108 L917.103 683.108 L916.544 683.108 L915.984 683.108 L915.425 683.108 L914.866 683.108 L914.307 683.108 L913.747 683.108 L913.188 683.108 L912.629 683.108 L912.07 683.108 L911.51 683.108 L910.951 683.108 L910.392 683.108 L909.833 683.108 L909.273 683.108 L908.714 683.108 L908.155 683.108 L907.596 683.108 L907.036 683.108 L906.477 683.108 L905.918 683.108 L905.359 683.108 L904.799 683.108 L904.24 683.108 L903.681 683.108 L903.122 683.108 L902.562 683.108 L902.003 683.108 L901.444 683.108 L900.885 683.108 L900.325 683.108 L899.766 683.108 L899.207 683.108 L898.648 683.108 L898.088 683.108 L897.529 683.108 L896.97 683.108 L896.411 683.108 L895.851 683.108 L895.292 683.108 L894.733 683.108 L894.174 683.108 L893.614 683.108 L893.055 683.108 L892.496 683.108 L891.937 683.108 L891.377 683.108 L890.818 683.108 L890.259 683.108 L889.7 683.108 L889.14 683.108 L888.581 683.108 L888.022 683.108 L887.463 683.108 L886.903 683.108 L886.344 683.108 L885.785 683.108 L885.226 683.108 L884.666 683.108 L884.107 683.108 L883.548 683.108 L882.989 683.108 L882.429 683.108 L881.87 683.108 L881.311 683.108 L880.752 683.108 L880.192 683.108 L879.633 683.108 L879.074 683.108 L878.515 683.108 L877.955 683.108 L877.396 683.108 L876.837 683.108 L876.278 683.108 L875.718 683.108 L875.159 683.108 L874.6 683.108 L874.041 683.108 L873.481 683.108 L872.922 683.108 L872.363 683.108 L871.804 683.108 L871.244 683.108 L870.685 683.108 L870.126 683.108 L869.567 683.108 L869.007 683.108 L868.448 683.108 L867.889 683.108 L867.33 683.108 L866.77 683.108 L866.211 683.108 L865.652 683.108 L865.093 683.108 L864.533 683.108 L863.974 683.108 L863.415 683.108 L862.856 683.108 L862.296 683.108 L861.737 683.108 L861.178 683.108 L860.619 683.108 L860.059 683.108 L859.5 683.108 L858.941 683.108 L858.382 683.108 L857.822 683.108 L857.263 683.108 L856.704 683.108 L856.145 683.108 L855.585 683.108 L855.026 683.108 L854.467 683.108 L853.908 683.108 L853.348 683.108 L852.789 683.108 L852.23 683.108 L851.671 683.108 L851.111 683.108 L850.552 683.108 L849.993 683.108 L849.434 683.108 L848.874 683.108 L848.315 683.108 L847.756 683.108 L847.197 683.108 L846.637 683.108 L846.078 683.108 L845.519 683.108 L844.96 683.108 L844.4 683.108 L843.841 683.108 L843.282 683.108 L842.723 683.108 L842.163 683.108 L841.604 683.108 L841.045 683.108 L840.486 683.108 L839.926 683.108 L839.367 683.108 L838.808 683.108 L838.249 683.108 L837.689 683.108 L837.13 683.108 L836.571 683.108 L836.012 683.108 L835.452 683.108 L834.893 683.108 L834.334 683.108 L833.775 683.108 L833.215 683.108 L832.656 683.108 L832.097 683.108 L831.538 683.108 L830.978 683.108 L830.419 683.108 L829.86 683.108 L829.301 683.108 L828.741 683.108 L828.182 683.108 L827.623 683.108 L827.064 683.108 L826.504 683.108 L825.945 683.108 L825.386 683.108 L824.827 683.108 L824.267 683.108 L823.708 683.108 L823.149 683.108 L822.59 683.108 L822.03 683.108 L821.471 683.108 L820.912 683.108 L820.353 683.108 L819.793 683.108 L819.234 683.108 L818.675 683.108 L818.116 683.108 L817.556 683.108 L816.997 683.108 L816.438 683.108 L815.879 683.108 L815.319 683.108 L814.76 683.108 L814.201 683.108 L813.642 683.108 L813.082 683.108 L812.523 683.108 L811.964 683.108 L811.405 683.108 L810.845 683.108 L810.286 683.108 L809.727 683.108 L809.168 683.108 L808.608 683.108 L808.049 683.108 L807.49 683.108 L806.931 683.108 L806.371 683.108 L805.812 683.108 L805.253 683.108 L804.693 683.108 L804.134 683.108 L803.575 683.108 L803.016 683.108 L802.456 683.108 L801.897 683.108 L801.338 683.108 L800.779 683.108 L800.219 683.108 L799.66 683.108 L799.101 683.108 L798.542 683.108 L797.982 683.108 L797.423 683.108 L796.864 683.108 L796.305 683.108 L795.745 683.108 L795.186 683.108 L794.627 683.108 L794.068 683.108 L793.508 683.108 L792.949 683.108 L792.39 683.108 L791.831 683.108 L791.271 683.108 L790.712 683.108 L790.153 683.108 L789.594 683.108 L789.034 683.108 L788.475 683.108 L787.916 683.108 L787.357 683.108 L786.797 683.108 L786.238 683.108 L785.679 683.108 L785.12 683.108 L784.56 683.108 L784.001 683.108 L783.442 683.108 L782.883 683.108 L782.323 683.108 L781.764 683.108 L781.205 683.108 L780.646 683.108 L780.086 683.108 L779.527 683.108 L778.968 683.108 L778.409 683.108 L777.849 683.108 L777.29 683.108 L776.731 683.108 L776.172 683.108 L775.612 683.108 L775.053 683.108 L774.494 683.108 L773.935 683.108 L773.375 683.108 L772.816 683.108 L772.257 683.108 L771.698 683.108 L771.138 683.108 L770.579 683.108 L770.02 683.108 L769.461 683.108 L768.901 683.108 L768.342 683.108 L767.783 683.108 L767.224 683.108 L766.664 683.108 L766.105 683.108 L765.546 683.108 L764.987 683.108 L764.427 683.108 L763.868 683.108 L763.309 683.108 L762.75 683.108 L762.19 683.108 L761.631 683.108 L761.072 683.108 L760.513 683.108 L759.953 683.108 L759.394 683.108 L758.835 683.108 L758.276 683.108 L757.716 683.108 L757.157 683.108 L756.598 683.108 L756.039 683.108 L755.479 683.108 L754.92 683.108 L754.361 683.108 L753.802 683.108 L753.242 683.108 L752.683 683.108 L752.124 683.108 L751.565 683.108 L751.005 683.108 L750.446 683.108 L749.887 683.108 L749.328 683.108 L748.768 683.108 L748.209 683.108 L747.65 683.108 L747.091 683.108 L746.531 683.108 L745.972 683.108 L745.413 683.108 L744.854 683.108 L744.294 683.108 L743.735 683.108 L743.176 683.108 L742.617 683.108 L742.057 683.108 L741.498 683.108 L740.939 683.108 L740.38 683.108 L739.82 683.108 L739.261 683.108 L738.702 683.108 L738.143 683.108 L737.583 683.108 L737.024 683.108 L736.465 683.108 L735.906 683.108 L735.346 683.108 L734.787 683.108 L734.228 683.108 L733.669 683.108 L733.109 683.108 L732.55 683.108 L731.991 683.108 L731.432 683.108 L730.872 683.108 L730.313 683.108 L729.754 683.108 L729.195 683.108 L728.635 683.108 L728.076 683.108 L727.517 683.108 L726.958 683.108 L726.398 683.108 L725.839 683.108 L725.28 683.108 L724.721 683.108 L724.161 683.108 L723.602 683.108 L723.043 683.108 L722.484 683.108 L721.924 683.108 L721.365 683.108 L720.806 683.108 L720.247 683.108  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip673)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.136 720.806,684.136 721.365,684.136 721.924,684.136 722.484,684.136 723.043,684.136 723.602,684.136 724.161,684.136 724.721,684.136 725.28,684.136 725.839,684.136 726.398,684.136 726.958,684.136 727.517,684.136 728.076,684.136 728.635,684.136 729.195,684.136 729.754,684.136 730.313,684.136 730.872,684.136 731.432,684.136 731.991,684.136 732.55,684.136 733.109,684.136 733.669,684.136 734.228,684.136 734.787,684.136 735.346,684.136 735.906,684.136 736.465,684.136 737.024,684.136 737.583,684.136 738.143,684.136 738.702,684.136 739.261,684.136 739.82,684.136 740.38,684.136 740.939,684.136 741.498,684.136 742.057,684.136 742.617,684.136 743.176,684.136 743.735,684.136 744.294,684.136 744.854,684.136 745.413,684.136 745.972,684.136 746.531,684.136 747.091,684.136 747.65,684.136 748.209,684.136 748.768,684.136 749.328,684.136 749.887,684.136 750.446,684.136 751.005,684.136 751.565,684.136 752.124,684.136 752.683,684.136 753.242,684.136 753.802,684.136 754.361,684.136 754.92,684.136 755.479,684.136 756.039,684.136 756.598,684.136 757.157,684.136 757.716,684.136 758.276,684.136 758.835,684.136 759.394,684.136 759.953,684.136 760.513,684.136 761.072,684.136 761.631,684.136 762.19,684.136 762.75,684.136 763.309,684.136 763.868,684.136 764.427,684.136 764.987,684.136 765.546,684.136 766.105,684.136 766.664,684.136 767.224,684.136 767.783,684.136 768.342,684.136 768.901,684.136 769.461,684.136 770.02,684.136 770.579,684.136 771.138,684.136 771.698,684.136 772.257,684.136 772.816,684.136 773.375,684.136 773.935,684.136 774.494,684.136 775.053,684.136 775.612,684.136 776.172,684.136 776.731,684.136 777.29,684.136 777.849,684.136 778.409,684.136 778.968,684.136 779.527,684.136 780.086,684.136 780.646,684.136 781.205,684.136 781.764,684.136 782.323,684.136 782.883,684.136 783.442,684.136 784.001,684.136 784.56,684.136 785.12,684.136 785.679,684.136 786.238,684.136 786.797,684.136 787.357,684.136 787.916,684.136 788.475,684.136 789.034,684.136 789.594,684.136 790.153,684.136 790.712,684.136 791.271,684.136 791.831,684.136 792.39,684.136 792.949,684.136 793.508,684.136 794.068,684.136 794.627,684.136 795.186,684.136 795.745,684.136 796.305,684.136 796.864,684.136 797.423,684.136 797.982,684.136 798.542,684.136 799.101,684.136 799.66,684.136 800.219,684.136 800.779,684.136 801.338,684.136 801.897,684.136 802.456,684.136 803.016,684.136 803.575,684.136 804.134,684.136 804.693,684.136 805.253,684.136 805.812,684.136 806.371,684.136 806.931,684.136 807.49,684.136 808.049,684.136 808.608,684.136 809.168,684.136 809.727,684.136 810.286,684.136 810.845,684.136 811.405,684.136 811.964,684.136 812.523,684.136 813.082,684.136 813.642,684.136 814.201,684.136 814.76,684.136 815.319,684.136 815.879,684.136 816.438,684.136 816.997,684.136 817.556,684.136 818.116,684.136 818.675,684.136 819.234,684.136 819.793,684.136 820.353,684.136 820.912,684.136 821.471,684.136 822.03,684.136 822.59,684.136 823.149,684.136 823.708,684.136 824.267,684.136 824.827,684.136 825.386,684.136 825.945,684.136 826.504,684.136 827.064,684.136 827.623,684.136 828.182,684.136 828.741,684.136 829.301,684.136 829.86,684.136 830.419,684.136 830.978,684.136 831.538,684.136 832.097,684.136 832.656,684.136 833.215,684.136 833.775,684.136 834.334,684.136 834.893,684.136 835.452,684.136 836.012,684.136 836.571,684.136 837.13,684.136 837.689,684.136 838.249,684.136 838.808,684.136 839.367,684.136 839.926,684.136 840.486,684.136 841.045,684.136 841.604,684.136 842.163,684.136 842.723,684.136 843.282,684.136 843.841,684.136 844.4,684.136 844.96,684.136 845.519,684.136 846.078,684.136 846.637,684.136 847.197,684.136 847.756,684.136 848.315,684.136 848.874,684.136 849.434,684.136 849.993,684.136 850.552,684.136 851.111,684.136 851.671,684.136 852.23,684.136 852.789,684.136 853.348,684.136 853.908,684.136 854.467,684.136 855.026,684.136 855.585,684.136 856.145,684.136 856.704,684.136 857.263,684.136 857.822,684.136 858.382,684.136 858.941,684.136 859.5,684.136 860.059,684.136 860.619,684.136 861.178,684.136 861.737,684.136 862.296,684.136 862.856,684.136 863.415,684.136 863.974,684.136 864.533,684.136 865.093,684.136 865.652,684.136 866.211,684.136 866.77,684.136 867.33,684.136 867.889,684.136 868.448,684.136 869.007,684.136 869.567,684.136 870.126,684.136 870.685,684.136 871.244,684.136 871.804,684.136 872.363,684.136 872.922,684.136 873.481,684.136 874.041,684.136 874.6,684.136 875.159,684.136 875.718,684.136 876.278,684.136 876.837,684.136 877.396,684.136 877.955,684.136 878.515,684.136 879.074,684.136 879.633,684.136 880.192,684.136 880.752,684.136 881.311,684.136 881.87,684.136 882.429,684.136 882.989,684.136 883.548,684.136 884.107,684.136 884.666,684.136 885.226,684.136 885.785,684.136 886.344,684.136 886.903,684.136 887.463,684.136 888.022,684.136 888.581,684.136 889.14,684.136 889.7,684.136 890.259,684.136 890.818,684.136 891.377,684.136 891.937,684.136 892.496,684.136 893.055,684.136 893.614,684.136 894.174,684.136 894.733,684.136 895.292,684.136 895.851,684.136 896.411,684.136 896.97,684.136 897.529,684.136 898.088,684.136 898.648,684.136 899.207,684.136 899.766,684.136 900.325,684.136 900.885,684.136 901.444,684.136 902.003,684.136 902.562,684.136 903.122,684.136 903.681,684.136 904.24,684.136 904.799,684.136 905.359,684.136 905.918,684.136 906.477,684.136 907.036,684.136 907.596,684.136 908.155,684.136 908.714,684.136 909.273,684.136 909.833,684.136 910.392,684.136 910.951,684.136 911.51,684.136 912.07,684.136 912.629,684.136 913.188,684.136 913.747,684.136 914.307,684.136 914.866,684.136 915.425,684.136 915.984,684.136 916.544,684.136 917.103,684.136 917.662,684.136 918.221,684.136 918.781,684.136 919.34,684.136 919.899,684.136 920.458,684.136 921.018,684.136 921.577,684.136 922.136,684.136 922.695,684.136 923.255,684.136 923.814,684.136 924.373,684.136 924.932,684.136 925.492,684.136 926.051,684.136 926.61,684.136 927.169,684.136 927.729,684.136 928.288,684.136 928.847,684.136 929.406,684.136 929.966,684.136 930.525,684.136 931.084,684.136 931.644,684.136 932.203,684.136 932.762,684.136 933.321,684.136 933.881,684.136 934.44,684.136 934.999,684.136 935.558,684.136 936.118,684.136 936.677,684.136 937.236,684.136 937.795,684.136 938.355,684.136 938.914,684.136 939.473,684.136 940.032,684.136 940.592,684.136 941.151,684.136 941.71,684.136 942.269,684.136 942.829,684.136 943.388,684.136 943.947,684.136 944.506,684.136 945.066,684.136 945.625,684.136 946.184,684.136 946.743,684.136 947.303,684.136 947.862,684.136 948.421,684.136 948.98,684.136 949.54,684.136 950.099,684.136 950.658,684.136 951.217,684.136 951.777,684.136 952.336,684.136 952.895,684.136 953.454,684.136 954.014,684.136 954.573,684.136 955.132,684.136 955.691,684.136 956.251,684.136 956.81,684.136 957.369,684.136 957.928,684.136 958.488,684.136 959.047,684.136 959.606,684.136 960.165,684.136 960.725,684.136 961.284,684.136 961.843,684.136 962.402,684.136 962.962,684.136 963.521,684.136 964.08,684.136 964.639,684.136 965.199,684.136 965.758,684.136 966.317,684.136 966.876,684.136 967.436,684.136 967.995,684.136 968.554,684.136 969.113,684.136 969.673,684.136 970.232,684.136 970.791,684.136 971.35,684.136 971.91,684.136 972.469,684.136 973.028,684.136 973.587,684.136 974.147,684.136 974.706,684.136 975.265,684.136 975.824,684.136 976.384,684.136 976.943,684.136 977.502,684.136 978.061,684.136 978.621,684.136 979.18,684.136 979.739,684.136 980.298,684.136 980.858,684.136 981.417,684.136 981.976,684.136 982.535,684.136 983.095,684.136 983.654,684.136 984.213,684.136 984.772,684.136 985.332,684.136 985.891,684.136 986.45,684.136 987.009,684.136 987.569,684.136 988.128,684.136 988.687,684.136 989.246,684.136 989.806,684.136 990.365,684.136 990.924,684.136 991.483,684.136 992.043,684.136 992.602,684.136 993.161,684.136 993.72,684.136 994.28,684.136 994.839,684.136 995.398,684.136 995.957,684.136 996.517,684.136 997.076,684.136 997.635,684.136 998.194,684.136 998.754,684.136 999.313,684.136 999.872,684.136 1000.43,684.136 1000.99,684.136 1001.55,684.136 1002.11,684.136 1002.67,684.136 1003.23,684.136 1003.79,684.136 1004.35,684.136 1004.91,684.136 1005.46,684.136 1006.02,684.136 1006.58,684.136 1007.14,684.136 1007.7,684.136 1008.26,684.136 1008.82,684.136 1009.38,684.136 1009.94,684.136 1010.5,684.136 1011.06,684.136 1011.62,684.136 1012.18,684.136 1012.73,684.136 1013.29,684.136 1013.85,684.136 1014.41,684.136 1014.97,684.136 1015.53,684.136 1016.09,684.136 1016.65,684.136 1017.21,684.136 1017.77,684.136 1018.33,684.136 1018.89,684.136 1019.45,684.136 1020.01,684.136 1020.56,684.136 1021.12,684.136 1021.68,684.136 1022.24,684.136 1022.8,684.136 1023.36,684.136 1023.92,684.136 1024.48,684.136 1025.04,684.136 1025.6,684.136 1026.16,684.136 1026.72,684.136 1027.28,684.136 1027.83,684.136 1028.39,684.136 1028.95,684.136 1029.51,684.136 1030.07,684.136 1030.63,684.136 1031.19,684.136 1031.75,684.136 1032.31,684.136 1032.87,684.136 1033.43,684.136 1033.99,684.136 1034.55,684.136 1035.1,684.136 1035.66,684.136 1036.22,684.136 1036.78,684.136 1037.34,684.136 1037.9,684.136 1038.46,684.136 1039.02,684.136 1039.58,684.136 1040.14,684.136 1040.7,684.136 1041.26,684.136 1041.82,684.136 1042.38,684.136 1042.93,684.136 1043.49,684.136 1044.05,684.136 1044.61,684.136 1045.17,684.136 1045.73,684.136 1046.29,684.136 1046.85,684.136 1047.41,684.136 1047.97,684.136 1048.53,684.136 1049.09,684.136 1049.65,684.136 1050.2,684.136 1050.76,684.136 1051.32,684.136 1051.88,684.136 1052.44,684.136 1053,684.136 1053.56,684.136 1054.12,684.136 1054.68,684.136 1055.24,684.136 1055.8,684.136 1056.36,684.136 1056.92,684.136 1057.48,684.136 1058.03,684.136 1058.59,684.136 1059.15,684.136 1059.71,684.136 1060.27,684.136 1060.83,684.136 1061.39,684.136 1061.95,684.136 1062.51,684.136 1063.07,684.136 1063.63,684.136 1064.19,684.136 1064.75,684.136 1065.3,684.136 1065.86,684.136 1066.42,684.136 1066.98,684.136 1067.54,684.136 1068.1,684.136 1068.66,684.136 1069.22,684.136 1069.78,684.136 1070.34,684.136 1070.9,684.136 1071.46,684.136 1072.02,684.136 1072.57,684.136 1073.13,684.136 1073.69,684.136 1074.25,684.136 1074.81,684.136 1075.37,684.136 1075.93,684.136 1076.49,684.136 1077.05,684.136 1077.61,684.136 1078.17,684.136 1078.73,684.136 1079.29,684.136 1079.85,684.136 1080.4,684.136 1080.96,684.136 1081.52,684.136 1082.08,684.136 1082.64,684.136 1083.2,684.136 1083.76,684.136 1084.32,684.136 1084.88,684.136 1085.44,684.136 1086,684.136 1086.56,684.136 1087.12,684.136 1087.67,684.136 1088.23,684.136 1088.79,684.136 1089.35,684.136 1089.91,684.136 1090.47,684.136 1091.03,684.136 1091.59,684.136 1092.15,684.136 1092.71,684.136 1093.27,684.136 1093.83,684.136 1094.39,684.136 1094.94,684.136 1095.5,684.136 1096.06,684.136 1096.62,684.136 1097.18,684.136 1097.74,684.136 1098.3,684.136 1098.86,684.136 1099.42,684.136 1099.98,684.136 1100.54,684.136 1101.1,684.136 1101.66,684.136 1102.22,684.136 1102.77,684.136 1103.33,684.136 1103.89,684.136 1104.45,684.136 1105.01,684.136 1105.57,684.136 1106.13,684.136 1106.69,684.136 1107.25,684.136 1107.81,684.136 1108.37,684.136 1108.93,684.136 1109.49,684.136 1110.04,684.136 1110.6,684.136 1111.16,684.136 1111.72,684.136 1112.28,684.136 1112.84,684.136 1113.4,684.136 1113.96,684.136 1114.52,684.136 1115.08,684.136 1115.64,684.136 1116.2,684.136 1116.76,684.136 1117.31,684.136 1117.87,684.136 1118.43,684.136 1118.99,684.136 1119.55,684.136 1120.11,684.136 1120.67,684.136 1121.23,684.136 1121.79,684.136 1122.35,684.136 1122.91,684.136 1123.47,684.136 1124.03,684.136 1124.59,684.136 1125.14,684.136 1125.7,684.136 1126.26,684.136 1126.82,684.136 1127.38,684.136 1127.94,684.136 1128.5,684.136 1129.06,684.136 1129.62,684.136 1130.18,684.136 1130.74,684.136 1131.3,684.136 1131.86,684.136 1132.41,684.136 1132.97,684.136 1133.53,684.136 1134.09,684.136 1134.65,684.136 1135.21,684.136 1135.77,684.136 1136.33,684.136 1136.89,684.136 1137.45,684.136 1138.01,684.136 1138.57,684.136 1139.13,684.136 1139.68,684.136 1140.24,684.136 1140.8,684.136 1141.36,684.136 1141.92,684.136 1142.48,684.136 1143.04,684.136 1143.6,684.136 1144.16,684.136 1144.72,684.136 1145.28,684.136 1145.84,684.136 1146.4,684.136 1146.96,684.136 1147.51,684.136 1148.07,684.136 1148.63,684.136 1149.19,684.136 1149.75,684.136 1150.31,684.136 1150.87,684.136 1151.43,684.136 1151.99,684.136 1152.55,684.136 1153.11,684.136 1153.67,684.136 1154.23,684.136 1154.78,684.136 1155.34,684.136 1155.9,684.136 1156.46,684.136 1157.02,684.136 1157.58,684.136 1158.14,684.136 1158.7,684.136 1159.26,684.136 1159.82,684.136 1160.38,684.136 1160.94,684.136 1161.5,684.136 1162.05,684.136 1162.61,684.136 1163.17,684.136 1163.73,684.136 1164.29,684.136 1164.85,684.136 1165.41,684.136 1165.97,684.136 1166.53,684.136 1167.09,684.136 1167.65,684.136 1168.21,684.136 1168.77,684.136 1169.33,684.136 1169.88,684.136 1170.44,684.136 1171,684.136 1171.56,684.136 1172.12,684.136 1172.68,684.136 1173.24,684.136 1173.8,684.136 1174.36,684.136 1174.92,684.136 1175.48,684.136 1176.04,684.136 1176.6,684.136 1177.15,684.136 1177.71,684.136 1178.27,684.136 1178.83,684.136 1179.39,684.136 1179.95,684.136 1180.51,684.136 1181.07,684.136 1181.63,684.136 1182.19,684.136 1182.75,684.136 1183.31,684.136 1183.87,684.136 1184.43,684.136 1184.98,684.136 1185.54,684.136 1186.1,684.136 1186.66,684.136 1187.22,684.136 1187.78,684.136 1188.34,684.136 1188.9,684.136 1189.46,684.136 1190.02,684.136 1190.58,684.136 1191.14,684.136 1191.7,684.136 1192.25,684.136 1192.81,684.136 1193.37,684.136 1193.93,684.136 1194.49,684.136 1195.05,684.136 1195.61,684.136 1196.17,684.136 1196.73,684.136 1197.29,684.136 1197.85,684.136 1198.41,684.136 1198.97,684.136 1199.52,684.136 1200.08,684.136 1200.64,684.136 1201.2,684.136 1201.76,684.136 1202.32,684.136 1202.88,684.136 1203.44,684.136 1204,684.136 1204.56,684.136 1205.12,684.136 1205.68,684.136 1206.24,684.136 1206.8,684.136 1207.35,684.136 1207.91,684.136 1208.47,684.136 1209.03,684.136 1209.59,684.136 1210.15,684.136 1210.71,684.136 1211.27,684.136 1211.83,684.136 1212.39,684.136 1212.95,684.136 1213.51,684.136 1214.07,684.136 1214.62,684.136 1215.18,684.136 1215.74,684.136 1216.3,684.136 1216.86,684.136 1217.42,684.136 1217.98,684.136 1218.54,684.136 1219.1,684.136 1219.66,684.136 1220.22,684.136 1220.78,684.136 1221.34,684.136 1221.89,684.136 1222.45,684.136 1223.01,684.136 1223.57,684.136 1224.13,684.136 1224.69,684.136 1225.25,684.136 1225.81,684.136 1226.37,684.136 1226.93,684.136 1227.49,684.136 1228.05,684.136 1228.61,684.136 1229.17,684.136 1229.72,684.136 1230.28,684.136 1230.84,684.136 1231.4,684.136 1231.96,684.136 1232.52,684.136 1233.08,684.136 1233.64,684.136 1234.2,684.136 1234.76,684.136 1235.32,684.136 1235.88,684.136 1236.44,684.136 1236.99,684.136 1237.55,684.136 1238.11,684.136 1238.67,684.136 1239.23,684.136 1239.79,684.136 1240.35,684.136 1240.91,684.136 1241.47,684.136 1242.03,684.136 1242.59,684.136 1243.15,684.136 1243.71,684.136 1244.26,684.136 1244.82,684.136 1245.38,684.136 1245.94,684.136 1246.5,684.136 1247.06,684.136 1247.62,684.136 1248.18,684.136 1248.74,684.136 1249.3,684.136 1249.86,684.136 1250.42,684.136 1250.98,684.136 1251.54,684.136 1252.09,684.136 1252.65,684.136 1253.21,684.136 1253.77,684.136 1254.33,684.136 1254.89,684.136 1255.45,684.136 1256.01,684.136 1256.57,684.136 1257.13,684.136 1257.69,684.136 1258.25,684.136 1258.81,684.136 1259.36,684.136 1259.92,684.136 1260.48,684.136 1261.04,684.136 1261.6,684.136 1262.16,684.136 1262.72,684.136 1263.28,684.136 1263.84,684.136 1264.4,684.136 1264.96,684.136 1265.52,684.136 1266.08,684.136 1266.63,684.136 1267.19,684.136 1267.75,684.136 1268.31,684.136 1268.87,684.136 1269.43,684.136 1269.99,684.136 1270.55,684.136 1271.11,684.136 1271.67,684.136 1272.23,684.136 1272.79,684.136 1273.35,684.136 1273.91,684.136 1274.46,684.136 1275.02,684.136 1275.58,684.136 1276.14,684.136 1276.7,684.136 1277.26,684.136 1277.82,684.136 1278.38,684.136 1278.94,684.136 1279.5,684.136 1280.06,684.136 1280.62,684.136 1281.18,684.136 1281.73,684.136 1282.29,684.136 1282.85,684.136 1283.41,684.136 1283.97,684.136 1284.53,684.136 1285.09,684.136 1285.65,684.136 1286.21,684.136 1286.77,684.136 1287.33,684.136 1287.89,684.136 1288.45,684.136 1289,684.136 1289.56,684.136 1290.12,684.136 1290.68,684.136 1291.24,684.136 1291.8,684.136 1292.36,684.136 1292.92,684.136 1293.48,684.136 1294.04,684.136 1294.6,684.136 1295.16,684.136 1295.72,684.136 1296.28,684.136 1296.83,684.136 1297.39,684.136 1297.95,684.136 1298.51,684.136 1299.07,684.136 1299.63,684.136 1300.19,684.136 1300.75,684.136 1301.31,684.136 1301.87,684.136 1302.43,684.136 1302.99,684.136 1303.55,684.136 1304.1,684.136 1304.66,684.136 1305.22,684.136 1305.78,684.136 1306.34,684.136 1306.9,684.136 1307.46,684.136 1308.02,684.136 1308.58,684.136 1309.14,684.136 1309.7,684.136 1310.26,684.136 1310.82,684.136 1311.38,684.136 1311.93,684.136 1312.49,684.136 1313.05,684.136 1313.61,684.136 1314.17,684.136 1314.73,684.136 1315.29,684.136 1315.85,684.136 1316.41,684.136 1316.97,684.136 1317.53,684.136 1318.09,684.136 1318.65,684.136 1319.2,684.136 1319.76,684.136 1320.32,684.136 1320.88,684.136 1321.44,684.136 1322,684.136 1322.56,684.136 1323.12,684.136 1323.68,684.136 1324.24,684.136 1324.8,684.136 1325.36,684.136 1325.92,684.136 1326.47,684.136 1327.03,684.136 1327.59,684.136 1328.15,684.136 1328.71,684.136 1329.27,684.136 1329.83,684.136 1330.39,684.136 1330.95,684.136 1331.51,684.136 1332.07,684.136 1332.63,684.136 1333.19,684.136 1333.75,684.136 1334.3,684.136 1334.86,684.136 1335.42,684.136 1335.98,684.136 1336.54,684.136 1337.1,684.136 1337.66,684.136 1338.22,684.136 1338.78,684.136 1339.34,684.136 1339.9,684.136 1340.46,684.136 1341.02,684.136 1341.57,684.136 1342.13,684.136 1342.69,684.136 1343.25,684.136 1343.81,684.136 1344.37,684.136 1344.93,684.136 1345.49,684.136 1346.05,684.136 1346.61,684.136 1347.17,684.136 1347.73,684.136 1348.29,684.136 1348.84,684.136 1349.4,684.136 1349.96,684.136 1350.52,684.136 1351.08,684.136 1351.64,684.136 1352.2,684.136 1352.76,684.136 1353.32,684.136 1353.88,684.136 1354.44,684.136 1355,684.136 1355.56,684.136 1356.12,684.136 1356.67,684.136 1357.23,684.136 1357.79,684.136 1358.35,684.136 1358.91,684.136 1359.47,684.136 1360.03,684.136 1360.59,684.136 1361.15,684.136 1361.71,684.136 1362.27,684.136 1362.83,684.136 1363.39,684.136 1363.94,684.136 1364.5,684.136 1365.06,684.136 1365.62,684.136 1366.18,684.136 1366.74,684.136 1367.3,684.136 1367.86,684.136 1368.42,684.136 1368.98,684.136 1369.54,684.136 1370.1,684.136 1370.66,684.136 1371.21,684.136 1371.77,684.136 1372.33,684.136 1372.89,684.136 1373.45,684.136 1374.01,684.136 1374.57,684.136 1375.13,684.136 1375.69,684.136 1376.25,684.136 1376.81,684.136 1377.37,684.136 1377.93,684.136 1378.49,684.136 1379.04,684.136 1379.6,684.136 1380.16,684.136 1380.72,684.136 1381.28,684.136 1381.84,684.136 1382.4,684.136 1382.96,684.136 1383.52,684.136 1384.08,684.136 1384.64,684.136 1385.2,684.136 1385.76,684.136 1386.31,684.136 1386.87,684.136 1387.43,684.136 1387.99,684.136 1388.55,684.136 1389.11,684.136 1389.67,684.136 1390.23,684.136 1390.79,684.136 1391.35,684.136 1391.91,684.136 1392.47,684.136 1393.03,684.136 1393.58,684.136 1394.14,684.136 1394.7,684.136 1395.26,684.136 1395.82,684.136 1396.38,684.136 1396.94,684.136 1397.5,684.136 1398.06,684.136 1398.62,684.136 1399.18,684.136 1399.74,684.136 1400.3,684.136 1400.86,684.136 1401.41,684.136 1401.97,684.136 1402.53,684.136 1403.09,684.136 1403.65,684.136 1404.21,684.136 1404.77,684.136 1405.33,684.136 1405.89,684.136 1406.45,684.136 1407.01,684.136 1407.57,684.136 1408.13,684.136 1408.68,684.136 1409.24,684.136 1409.8,684.136 1410.36,684.136 1410.92,684.136 1411.48,684.136 1412.04,684.136 1412.6,684.136 1413.16,684.136 1413.72,684.136 1414.28,684.136 1414.84,684.136 1415.4,684.136 1415.95,684.136 1416.51,684.136 1417.07,684.136 1417.63,684.136 1418.19,684.136 1418.75,684.136 1419.31,684.136 1419.87,684.136 1420.43,684.136 1420.99,684.136 1421.55,684.136 1422.11,684.136 1422.67,684.136 1423.23,684.136 1423.78,684.136 1424.34,684.136 1424.9,684.136 1425.46,684.136 1426.02,684.136 1426.58,684.136 1427.14,684.136 1427.7,684.136 1428.26,684.136 1428.82,684.136 1429.38,684.136 1429.94,684.136 1430.5,684.136 1431.05,684.136 1431.61,684.136 1432.17,684.136 1432.73,684.136 1433.29,684.136 1433.85,684.136 1434.41,684.136 1434.97,684.136 1435.53,684.136 1436.09,684.136 1436.65,684.136 1437.21,684.136 1437.77,684.136 1438.33,684.136 1438.88,684.136 1439.44,684.136 1440,684.136 1440.56,684.136 1441.12,684.136 1441.68,684.136 1442.24,684.136 1442.8,684.136 1443.36,684.136 1443.92,684.136 1444.48,684.136 1445.04,684.136 1445.6,684.136 1446.15,684.136 1446.71,684.136 1447.27,684.136 1447.83,684.136 1448.39,684.136 1448.95,684.136 1449.51,684.136 1450.07,684.136 1450.63,684.136 1451.19,684.136 1451.75,684.136 1452.31,684.136 1452.87,684.136 1453.42,684.136 1453.98,684.136 1454.54,684.136 1455.1,684.136 1455.66,684.136 1456.22,684.136 1456.78,684.136 1457.34,684.136 1457.9,684.136 1458.46,684.136 1459.02,684.136 1459.58,684.136 1460.14,684.136 1460.7,684.136 1461.25,684.136 1461.81,684.136 1462.37,684.136 1462.93,684.136 1463.49,684.136 1464.05,684.136 1464.61,684.136 1465.17,684.136 1465.73,684.136 1466.29,684.136 1466.85,684.136 1467.41,684.136 1467.97,684.136 1468.52,684.136 1469.08,684.136 1469.64,684.136 1470.2,684.136 1470.76,684.136 1471.32,684.136 1471.88,684.136 1472.44,684.136 1473,684.136 1473.56,684.136 1474.12,684.136 1474.68,684.136 1475.24,684.136 1475.79,684.136 1476.35,684.136 1476.91,684.136 1477.47,684.136 1478.03,684.136 1478.59,684.136 1479.15,684.136 1479.71,684.136 1480.27,684.136 1480.83,684.136 1481.39,684.136 1481.95,684.136 1482.51,684.136 1483.07,684.136 1483.62,684.136 1484.18,684.136 1484.74,684.136 1485.3,684.136 1485.86,684.136 1486.42,684.136 1486.98,684.136 1487.54,684.136 1488.1,684.136 1488.66,684.136 1489.22,684.136 1489.78,684.136 1490.34,684.136 1490.89,684.136 1491.45,684.136 1492.01,684.136 1492.57,684.136 1493.13,684.136 1493.69,684.136 1494.25,684.136 1494.81,684.136 1495.37,684.136 1495.93,684.136 1496.49,684.136 1497.05,684.136 1497.61,684.136 1498.16,684.136 1498.72,684.136 1499.28,684.136 1499.84,684.136 1500.4,684.136 1500.96,684.136 1501.52,684.136 1502.08,684.136 1502.64,684.136 1503.2,684.136 1503.76,684.136 1504.32,684.136 1504.88,684.136 1505.44,684.136 1505.99,684.136 1506.55,684.136 1507.11,684.136 1507.67,684.136 1508.23,684.136 1508.79,684.136 1509.35,684.136 1509.91,684.136 1510.47,684.136 1511.03,684.136 1511.59,684.136 1512.15,684.136 1512.71,684.136 1513.26,684.136 1513.82,684.136 1514.38,684.136 1514.94,684.136 1515.5,684.136 1516.06,684.136 1516.62,684.136 1517.18,684.136 1517.74,684.136 1518.3,684.136 1518.86,684.136 1519.42,684.136 1519.98,684.136 1520.53,684.136 1521.09,684.136 1521.65,684.136 1522.21,684.136 1522.77,684.136 1523.33,684.136 1523.89,684.136 1524.45,684.136 1525.01,684.136 1525.57,684.136 1526.13,684.136 1526.69,684.136 1527.25,684.136 1527.81,684.136 1528.36,684.136 1528.92,684.136 1529.48,684.136 1530.04,684.136 1530.6,684.136 1531.16,684.136 1531.72,684.136 1532.28,684.136 1532.84,684.136 1533.4,684.136 1533.96,684.136 1534.52,684.136 1535.08,684.136 1535.63,684.136 1536.19,684.136 1536.75,684.136 1537.31,684.136 1537.87,684.136 1538.43,684.136 1538.99,684.136 1539.55,684.136 1540.11,684.136 1540.67,684.136 1541.23,684.136 1541.79,684.136 1542.35,684.136 1542.9,684.136 1543.46,684.136 1544.02,684.136 1544.58,684.136 1545.14,684.136 1545.7,684.136 1546.26,684.136 1546.82,684.136 1547.38,684.136 1547.94,684.136 1548.5,684.136 1549.06,684.136 1549.62,684.136 1550.18,684.136 1550.73,684.136 1551.29,684.136 1551.85,684.136 1552.41,684.136 1552.97,684.136 1553.53,684.136 1554.09,684.136 1554.65,684.136 1555.21,684.136 1555.77,684.136 1556.33,684.136 1556.89,684.136 1557.45,684.136 1558,684.136 1558.56,684.136 1559.12,684.136 1559.68,684.136 1560.24,684.136 1560.8,684.136 1561.36,684.136 1561.92,684.136 1562.48,684.136 1563.04,684.136 1563.6,684.136 1564.16,684.136 1564.72,684.136 1565.28,684.136 1565.83,684.136 1566.39,684.136 1566.95,684.136 1567.51,684.136 1568.07,684.136 1568.63,684.136 1569.19,684.136 1569.75,684.136 1570.31,684.136 1570.87,684.136 1571.43,684.136 1571.99,684.136 1572.55,684.136 1573.1,684.136 1573.66,684.136 1574.22,684.136 1574.78,684.136 1575.34,684.136 1575.9,684.136 1576.46,684.136 1577.02,684.136 1577.58,684.136 1578.14,684.136 1578.7,684.136 1579.26,684.136 1579.82,684.136 1580.37,684.136 1580.93,684.136 1581.49,684.136 1582.05,684.136 1582.61,684.136 1583.17,684.136 1583.73,684.136 1584.29,684.136 1584.85,684.136 1585.41,684.136 1585.97,684.136 1586.53,684.136 1587.09,684.136 1587.65,684.136 1588.2,684.136 1588.76,684.136 1589.32,684.136 1589.88,684.136 1590.44,684.136 1591,684.136 1591.56,684.136 1592.12,684.136 1592.68,684.136 1593.24,684.136 1593.8,684.136 1594.36,684.136 1594.92,684.136 1595.47,684.136 1596.03,684.136 1596.59,684.136 1597.15,684.136 1597.71,684.136 1598.27,684.136 1598.83,684.136 1599.39,684.136 1599.95,684.136 1600.51,684.136 1601.07,684.136 1601.63,684.136 1602.19,684.136 1602.74,684.136 1603.3,684.136 1603.86,684.136 1604.42,684.136 1604.98,684.136 1605.54,684.136 1606.1,684.136 1606.66,684.136 1607.22,684.136 1607.78,684.136 1608.34,684.136 1608.9,684.136 1609.46,684.136 1610.02,684.136 1610.57,684.136 1611.13,684.136 1611.69,684.136 1612.25,684.136 1612.81,684.136 1613.37,684.136 1613.93,684.136 1614.49,684.136 1615.05,684.136 1615.61,684.136 1616.17,684.136 1616.73,684.136 1617.29,684.136 1617.84,684.136 1618.4,684.136 1618.96,684.136 1619.52,684.136 1620.08,684.136 1620.64,684.136 1621.2,684.136 1621.76,684.136 1622.32,684.136 1622.88,684.136 1623.44,684.136 1624,684.136 1624.56,684.136 1625.11,684.136 1625.67,684.136 1626.23,684.136 1626.79,684.136 1627.35,684.136 1627.91,684.136 1628.47,684.136 1629.03,684.136 1629.59,684.136 1630.15,684.136 1630.71,684.136 1631.27,684.136 1631.83,684.136 1632.39,684.136 1632.94,684.136 1633.5,684.136 1634.06,684.136 1634.62,684.136 1635.18,684.136 1635.74,684.136 1636.3,684.136 1636.86,684.136 1637.42,684.136 1637.98,684.136 1638.54,684.136 1639.1,684.136 1639.66,684.136 1640.21,684.136 1640.77,684.136 1641.33,684.136 1641.89,684.136 1642.45,684.136 1643.01,684.136 1643.57,684.136 1644.13,684.136 1644.69,684.136 1645.25,684.136 1645.81,684.136 1646.37,684.136 1646.93,684.136 1647.48,684.136 1648.04,684.136 1648.6,684.136 1649.16,684.136 1649.72,684.136 1650.28,684.136 1650.84,684.136 1651.4,684.136 1651.96,684.136 1652.52,684.136 1653.08,684.136 1653.64,684.136 1654.2,684.136 1654.76,684.136 1655.31,684.136 1655.87,684.136 1656.43,684.136 1656.99,684.136 1657.55,684.136 1658.11,684.136 1658.67,684.136 1659.23,684.136 1659.79,684.136 1660.35,684.136 1660.91,684.136 1661.47,684.136 1662.03,684.136 1662.58,684.136 1663.14,684.136 1663.7,684.136 1664.26,684.136 1664.82,684.136 1665.38,684.136 1665.94,684.136 1666.5,684.136 1667.06,684.136 1667.62,684.136 1668.18,684.136 1668.74,684.136 1669.3,684.136 1669.85,684.136 1670.41,684.136 1670.97,684.136 1671.53,684.136 1672.09,684.136 1672.65,684.136 1673.21,684.136 1673.77,684.136 1674.33,684.136 1674.89,684.136 1675.45,684.136 1676.01,684.136 1676.57,684.136 1677.13,684.136 1677.68,684.136 1678.24,684.136 1678.8,684.136 1679.36,684.136 1679.92,684.136 1680.48,684.136 1681.04,684.136 1681.6,684.136 1682.16,684.136 1682.72,684.136 1683.28,684.136 1683.84,684.136 1684.4,684.136 1684.95,684.136 1685.51,684.136 1686.07,684.136 1686.63,684.136 1687.19,684.136 1687.75,684.136 1688.31,684.136 1688.87,684.136 1689.43,684.136 1689.99,684.136 1690.55,684.136 1691.11,684.136 1691.67,684.136 1692.23,684.136 1692.78,684.136 1693.34,684.136 1693.9,684.136 1694.46,684.136 1695.02,684.136 1695.58,684.136 1696.14,684.136 1696.7,684.136 1697.26,684.136 1697.82,684.136 1698.38,684.136 1698.94,684.136 1699.5,684.136 1700.05,684.136 1700.61,684.136 1701.17,684.136 1701.73,684.136 1702.29,684.136 1702.85,684.136 1703.41,684.136 1703.97,684.136 1704.53,684.136 1705.09,684.136 1705.65,684.136 1706.21,684.136 1706.77,684.136 1707.32,684.136 1707.88,684.136 1708.44,684.136 1709,684.136 1709.56,684.136 1710.12,684.136 1710.68,684.136 1711.24,684.136 1711.8,684.136 1712.36,684.136 1712.92,684.136 1713.48,684.136 1714.04,684.136 1714.6,684.136 1715.15,684.136 1715.71,684.136 1716.27,684.136 1716.83,684.136 1717.39,684.136 1717.95,684.136 1718.51,684.136 1719.07,684.136 1719.63,684.136 1720.19,684.136 1720.75,684.136 1721.31,684.136 1721.87,684.136 1722.42,684.136 1722.98,684.136 1723.54,684.136 1724.1,684.136 1724.66,684.136 1725.22,684.136 1725.78,684.136 1726.34,684.136 1726.9,684.136 1727.46,684.136 1728.02,684.136 1728.58,684.136 1729.14,684.136 1729.69,684.136 1730.25,684.136 1730.81,684.136 1731.37,684.136 1731.93,684.136 1732.49,684.136 1733.05,684.136 1733.61,684.136 1734.17,684.136 1734.73,684.136 1735.29,684.136 1735.85,684.136 1736.41,684.136 1736.97,684.136 1737.52,684.136 1738.08,684.136 1738.64,684.136 1739.2,684.136 1739.76,684.136 1740.32,684.136 1740.88,684.136 1741.44,684.136 1742,684.136 1742.56,684.136 1743.12,684.136 1743.68,684.136 1744.24,684.136 1744.79,684.136 1745.35,684.136 1745.91,684.136 1746.47,684.136 1747.03,684.136 1747.59,684.136 1748.15,684.136 1748.71,684.136 1749.27,684.136 1749.83,684.136 1750.39,684.136 1750.95,684.136 1751.51,684.136 1752.06,684.136 1752.62,684.136 1753.18,684.136 1753.74,684.136 1754.3,684.136 1754.86,684.136 1755.42,684.136 1755.98,684.136 1756.54,684.136 1757.1,684.136 1757.66,684.136 1758.22,684.136 1758.78,684.136 1759.34,684.136 1759.89,684.136 1760.45,684.136 1761.01,684.136 1761.57,684.136 1762.13,684.136 1762.69,684.136 1763.25,684.136 1763.81,684.136 1764.37,684.136 1764.93,684.136 1765.49,684.136 1766.05,684.136 1766.61,684.136 1767.16,684.136 1767.72,684.136 1768.28,684.136 1768.84,684.136 1769.4,684.136 1769.96,684.136 1770.52,684.136 1771.08,684.136 1771.64,684.136 1772.2,684.136 1772.76,684.136 1773.32,684.136 1773.88,684.136 1774.43,684.136 1774.99,684.136 1775.55,684.136 1776.11,684.136 1776.67,684.136 1777.23,684.136 1777.79,684.136 1778.35,684.136 1778.91,684.136 1779.47,684.136 1780.03,684.136 1780.59,684.136 1781.15,684.136 1781.71,684.136 1782.26,684.136 1782.82,684.136 1783.38,684.136 1783.94,684.136 1784.5,684.136 1785.06,684.136 1785.62,684.136 1786.18,684.136 1786.74,684.136 1787.3,684.136 1787.86,684.136 1788.42,684.136 1788.98,684.136 1789.53,684.136 1790.09,684.136 1790.65,684.136 1791.21,684.136 1791.77,684.136 1792.33,684.136 1792.89,684.136 1793.45,684.136 1794.01,684.136 1794.57,684.136 1795.13,684.136 1795.69,684.136 1796.25,684.136 1796.8,684.136 1797.36,684.136 1797.92,684.136 1798.48,684.136 1799.04,684.136 1799.6,684.136 1800.16,684.136 1800.72,684.136 1801.28,684.136 1801.84,684.136 1802.4,684.136 1802.96,684.136 1803.52,684.136 1804.08,684.136 1804.63,684.136 1805.19,684.136 1805.75,684.136 1806.31,684.136 1806.87,684.136 1807.43,684.136 1807.99,684.136 1808.55,684.136 1809.11,684.136 1809.67,684.136 1810.23,684.136 1810.79,684.136 1811.35,684.136 1811.9,684.136 1812.46,684.136 1813.02,684.136 1813.58,684.136 1814.14,684.136 1814.7,684.136 1815.26,684.136 1815.82,684.136 1816.38,684.136 1816.94,684.136 1817.5,684.136 1818.06,684.136 1818.62,684.136 1819.18,684.136 1819.73,684.136 1820.29,684.136 1820.85,684.136 1821.41,684.136 1821.97,684.136 1822.53,684.136 1823.09,684.136 1823.65,684.136 1824.21,684.136 1824.77,684.136 1825.33,684.136 1825.89,684.136 1826.45,684.136 1827,684.136 1827.56,684.136 1828.12,684.136 1828.68,684.136 1829.24,684.136 1829.8,684.136 1830.36,684.136 1830.92,684.136 1831.48,684.136 1832.04,684.136 1832.6,684.136 1833.16,684.136 1833.72,684.136 1834.27,684.136 1834.83,684.136 1835.39,684.136 1835.95,684.136 1836.51,684.136 1837.07,684.136 1837.63,684.136 1838.19,684.136 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.032900914779973 ± 0.02656527153790914\nProjected Energy: -4.017859828652989 ± (0.004696420513114141, 0.005175047622548945)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.471413</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4387e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1311e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.207e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.233e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.544e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.356e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.3631242916133566\n -0.7590191922770835\n  0.13584182219622143\n  0.15789998694608087\n  0.8767114411781289\n  1.5305929970973384\n  1.5835732611867348\n  3.0728703303258484\n  3.125672653951847\n  4.862107221562175\n  6.260694850380599\n  6.402671211183111\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
