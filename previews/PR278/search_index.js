var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21538431440457706 ± 0.0022945732119719446\n   G2(1) = 0.9161702598463868 ± 0.0010175366302469578\n   G2(2) = 0.9819770730404521 ± 0.0005626718977919954\n   G2(3) = 0.9883210198217455 ± 0.0008579496843302159\n   G2(4) = 0.9819770730404521 ± 0.0005626718977919954\n   G2(5) = 0.9161702598463868 ± 0.0010175366302469578\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9163918482319304 ± 0.1349421058694376\n   Replica 2: -4.054859427493225 ± 0.15509404357400575\n   Replica 3: -4.022853018466653 ± 0.1435339126709085\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip900\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip901\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip900)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip902\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.22 2211.02,1003.22 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.6 2211.02,745.6 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.983 2211.02,487.983 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.367 2211.02,230.367 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.22 423.181,1003.22 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.6 423.181,745.6 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.983 423.181,487.983 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.367 423.181,230.367 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M290.043 1016.56 L306.363 1016.56 L306.363 1020.5 L284.418 1020.5 L284.418 1016.56 Q287.08 1013.81 291.664 1009.18 Q296.27 1004.52 297.451 1003.18 Q299.696 1000.66 300.576 998.923 Q301.478 997.163 301.478 995.474 Q301.478 992.719 299.534 990.983 Q297.613 989.247 294.511 989.247 Q292.312 989.247 289.858 990.011 Q287.427 990.775 284.65 992.325 L284.65 987.603 Q287.474 986.469 289.927 985.89 Q292.381 985.312 294.418 985.312 Q299.789 985.312 302.983 987.997 Q306.177 990.682 306.177 995.173 Q306.177 997.302 305.367 999.224 Q304.58 1001.12 302.474 1003.71 Q301.895 1004.39 298.793 1007.6 Q295.691 1010.8 290.043 1016.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M316.224 985.937 L334.58 985.937 L334.58 989.872 L320.506 989.872 L320.506 998.344 Q321.524 997.997 322.543 997.835 Q323.562 997.65 324.58 997.65 Q330.367 997.65 333.747 1000.82 Q337.126 1003.99 337.126 1009.41 Q337.126 1014.99 333.654 1018.09 Q330.182 1021.17 323.862 1021.17 Q321.687 1021.17 319.418 1020.8 Q317.173 1020.43 314.765 1019.69 L314.765 1014.99 Q316.849 1016.12 319.071 1016.68 Q321.293 1017.23 323.77 1017.23 Q327.774 1017.23 330.112 1015.13 Q332.45 1013.02 332.45 1009.41 Q332.45 1005.8 330.112 1003.69 Q327.774 1001.58 323.77 1001.58 Q321.895 1001.58 320.02 1002 Q318.168 1002.42 316.224 1003.3 L316.224 985.937 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 989.015 Q352.728 989.015 350.899 992.58 Q349.094 996.122 349.094 1003.25 Q349.094 1010.36 350.899 1013.92 Q352.728 1017.46 356.339 1017.46 Q359.973 1017.46 361.779 1013.92 Q363.608 1010.36 363.608 1003.25 Q363.608 996.122 361.779 992.58 Q359.973 989.015 356.339 989.015 M356.339 985.312 Q362.149 985.312 365.205 989.918 Q368.284 994.501 368.284 1003.25 Q368.284 1011.98 365.205 1016.58 Q362.149 1021.17 356.339 1021.17 Q350.529 1021.17 347.45 1016.58 Q344.395 1011.98 344.395 1003.25 Q344.395 994.501 347.45 989.918 Q350.529 985.312 356.339 985.312 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M286.062 728.32 L304.418 728.32 L304.418 732.255 L290.344 732.255 L290.344 740.727 Q291.363 740.38 292.381 740.218 Q293.4 740.033 294.418 740.033 Q300.205 740.033 303.585 743.204 Q306.964 746.375 306.964 751.792 Q306.964 757.371 303.492 760.473 Q300.02 763.551 293.701 763.551 Q291.525 763.551 289.256 763.181 Q287.011 762.811 284.603 762.07 L284.603 757.371 Q286.687 758.505 288.909 759.061 Q291.131 759.616 293.608 759.616 Q297.613 759.616 299.951 757.51 Q302.288 755.403 302.288 751.792 Q302.288 748.181 299.951 746.075 Q297.613 743.968 293.608 743.968 Q291.733 743.968 289.858 744.385 Q288.006 744.801 286.062 745.681 L286.062 728.32 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M326.177 731.399 Q322.566 731.399 320.737 734.963 Q318.932 738.505 318.932 745.635 Q318.932 752.741 320.737 756.306 Q322.566 759.848 326.177 759.848 Q329.811 759.848 331.617 756.306 Q333.446 752.741 333.446 745.635 Q333.446 738.505 331.617 734.963 Q329.811 731.399 326.177 731.399 M326.177 727.695 Q331.987 727.695 335.043 732.301 Q338.122 736.885 338.122 745.635 Q338.122 754.362 335.043 758.968 Q331.987 763.551 326.177 763.551 Q320.367 763.551 317.288 758.968 Q314.233 754.362 314.233 745.635 Q314.233 736.885 317.288 732.301 Q320.367 727.695 326.177 727.695 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 731.399 Q352.728 731.399 350.899 734.963 Q349.094 738.505 349.094 745.635 Q349.094 752.741 350.899 756.306 Q352.728 759.848 356.339 759.848 Q359.973 759.848 361.779 756.306 Q363.608 752.741 363.608 745.635 Q363.608 738.505 361.779 734.963 Q359.973 731.399 356.339 731.399 M356.339 727.695 Q362.149 727.695 365.205 732.301 Q368.284 736.885 368.284 745.635 Q368.284 754.362 365.205 758.968 Q362.149 763.551 356.339 763.551 Q350.529 763.551 347.45 758.968 Q344.395 754.362 344.395 745.635 Q344.395 736.885 347.45 732.301 Q350.529 727.695 356.339 727.695 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M284.835 470.703 L307.057 470.703 L307.057 472.694 L294.511 505.263 L289.627 505.263 L301.432 474.639 L284.835 474.639 L284.835 470.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M316.224 470.703 L334.58 470.703 L334.58 474.639 L320.506 474.639 L320.506 483.111 Q321.524 482.764 322.543 482.601 Q323.562 482.416 324.58 482.416 Q330.367 482.416 333.747 485.588 Q337.126 488.759 337.126 494.175 Q337.126 499.754 333.654 502.856 Q330.182 505.935 323.862 505.935 Q321.687 505.935 319.418 505.564 Q317.173 505.194 314.765 504.453 L314.765 499.754 Q316.849 500.888 319.071 501.444 Q321.293 502 323.77 502 Q327.774 502 330.112 499.893 Q332.45 497.787 332.45 494.175 Q332.45 490.564 330.112 488.458 Q327.774 486.351 323.77 486.351 Q321.895 486.351 320.02 486.768 Q318.168 487.185 316.224 488.064 L316.224 470.703 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 473.782 Q352.728 473.782 350.899 477.347 Q349.094 480.889 349.094 488.018 Q349.094 495.125 350.899 498.689 Q352.728 502.231 356.339 502.231 Q359.973 502.231 361.779 498.689 Q363.608 495.125 363.608 488.018 Q363.608 480.889 361.779 477.347 Q359.973 473.782 356.339 473.782 M356.339 470.078 Q362.149 470.078 365.205 474.685 Q368.284 479.268 368.284 488.018 Q368.284 496.745 365.205 501.351 Q362.149 505.935 356.339 505.935 Q350.529 505.935 347.45 501.351 Q344.395 496.745 344.395 488.018 Q344.395 479.268 347.45 474.685 Q350.529 470.078 356.339 470.078 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M256.664 243.712 L264.303 243.712 L264.303 217.346 L255.992 219.013 L255.992 214.753 L264.256 213.087 L268.932 213.087 L268.932 243.712 L276.571 243.712 L276.571 247.647 L256.664 247.647 L256.664 243.712 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M296.015 216.165 Q292.404 216.165 290.576 219.73 Q288.77 223.272 288.77 230.402 Q288.77 237.508 290.576 241.073 Q292.404 244.614 296.015 244.614 Q299.65 244.614 301.455 241.073 Q303.284 237.508 303.284 230.402 Q303.284 223.272 301.455 219.73 Q299.65 216.165 296.015 216.165 M296.015 212.462 Q301.826 212.462 304.881 217.068 Q307.96 221.652 307.96 230.402 Q307.96 239.128 304.881 243.735 Q301.826 248.318 296.015 248.318 Q290.205 248.318 287.127 243.735 Q284.071 239.128 284.071 230.402 Q284.071 221.652 287.127 217.068 Q290.205 212.462 296.015 212.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M326.177 216.165 Q322.566 216.165 320.737 219.73 Q318.932 223.272 318.932 230.402 Q318.932 237.508 320.737 241.073 Q322.566 244.614 326.177 244.614 Q329.811 244.614 331.617 241.073 Q333.446 237.508 333.446 230.402 Q333.446 223.272 331.617 219.73 Q329.811 216.165 326.177 216.165 M326.177 212.462 Q331.987 212.462 335.043 217.068 Q338.122 221.652 338.122 230.402 Q338.122 239.128 335.043 243.735 Q331.987 248.318 326.177 248.318 Q320.367 248.318 317.288 243.735 Q314.233 239.128 314.233 230.402 Q314.233 221.652 317.288 217.068 Q320.367 212.462 326.177 212.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M356.339 216.165 Q352.728 216.165 350.899 219.73 Q349.094 223.272 349.094 230.402 Q349.094 237.508 350.899 241.073 Q352.728 244.614 356.339 244.614 Q359.973 244.614 361.779 241.073 Q363.608 237.508 363.608 230.402 Q363.608 223.272 361.779 219.73 Q359.973 216.165 356.339 216.165 M356.339 212.462 Q362.149 212.462 365.205 217.068 Q368.284 221.652 368.284 230.402 Q368.284 239.128 365.205 243.735 Q362.149 248.318 356.339 248.318 Q350.529 248.318 347.45 243.735 Q344.395 239.128 344.395 230.402 Q344.395 221.652 347.45 217.068 Q350.529 212.462 356.339 212.462 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip902)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.367 4017.76,230.367 \"/>\n<polyline clip-path=\"url(#clip902)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1247 459.396,1246.56 459.964,1246.11 460.533,1244.53 461.101,1243.93 461.669,1243.26 462.238,1242.49 462.806,1241.64 463.375,1238.6 463.943,1237.6 464.511,1236.5 465.08,1235.29 465.648,1233.95 466.216,1232.49 466.785,1229.9 467.353,1228.23 467.921,1226.4 468.49,1224.44 469.058,1222.32 469.626,1220.09 470.195,1217.68 470.763,1215.13 471.331,1212.38 471.9,1208.46 472.468,1205.36 473.036,1202.1 473.605,1198.64 474.173,1193.94 474.741,1189.05 475.31,1183.87 475.878,1179.56 476.446,1175.1 477.015,1169.36 477.583,1164.42 478.152,1159.32 478.72,1152.91 479.288,1147.31 479.857,1141.5 480.425,1134.42 480.993,1127.04 481.562,1120.47 482.13,1112.58 482.698,1102.54 483.267,1095.34 483.835,1087.86 484.403,1078.11 484.972,1070.4 485.54,1060.36 486.108,1050.24 486.677,1041.94 487.245,1032.56 487.813,1023.08 488.382,1013.45 488.95,1002.6 489.518,993.745 490.087,983.786 490.655,973.693 491.224,963.537 491.792,953.125 492.36,941.602 492.929,927.995 493.497,918.576 494.065,909.049 494.634,899.218 495.202,889.529 495.77,873.539 496.339,861.92 496.907,851.337 497.475,840.869 498.044,830.221 498.612,820.578 499.18,808.948 499.749,799.451 500.317,786.915 500.885,772.495 501.454,760.342 502.022,750.474 502.59,738.588 503.159,727.952 503.727,719.354 504.295,709.901 504.864,701.59 505.432,691.28 506.001,680.81 506.569,672.568 507.137,664.335 507.706,654.129 508.274,644.867 508.842,635.776 509.411,628.057 509.979,618.401 510.547,610.805 511.116,602.051 511.684,593.605 512.252,583.231 512.821,575.229 513.389,563.227 513.957,555.869 514.526,548.642 515.094,542.229 515.662,531.957 516.231,525.113 516.799,519.465 517.367,511.618 517.936,506.068 518.504,499.568 519.072,491.976 519.641,485.731 520.209,480.74 520.778,474.39 521.346,469.45 521.914,463.462 522.483,457.671 523.051,452.989 523.619,448.464 524.188,442.79 524.756,438.543 525.324,433.066 525.893,429.725 526.461,425.465 527.029,419.28 527.598,414.141 528.166,409.114 528.734,404.519 529.303,400.948 529.871,396.385 530.439,392.806 531.008,390.515 531.576,383.164 532.144,378.999 532.713,374.008 533.281,370.147 533.85,366.515 534.418,362.568 534.986,357.9 535.555,354.445 536.123,351.215 536.691,348.964 537.26,344.811 537.828,342.901 538.396,339.775 538.965,335.744 539.533,332.941 540.101,331.256 540.67,329.546 541.238,325.924 541.806,325.344 542.375,322.751 542.943,320.041 543.511,317.272 544.08,314.044 544.648,312.887 545.216,310.563 545.785,310.762 546.353,310.561 546.921,308.575 547.49,305.315 548.058,303.26 548.627,302.397 549.195,301.112 549.763,297.08 550.332,295.37 550.9,294.472 551.468,293.733 552.037,292.818 552.605,291.859 553.173,289.981 553.742,290.205 554.31,284.336 554.878,284.727 555.447,282.151 556.015,280.424 556.583,279.769 557.152,279.365 557.72,277.835 558.288,275.35 558.857,275.226 559.425,273.873 559.993,271.648 560.562,270.399 561.13,270.089 561.698,270.125 562.267,267.836 562.835,267.821 563.404,265.781 563.972,267.134 564.54,266.163 565.109,264.882 565.677,265.045 566.245,266.198 566.814,265.214 567.382,263.618 567.95,262.667 568.519,262.644 569.087,258.534 569.655,260.844 570.224,259.006 570.792,257.12 571.36,255.213 571.929,254.607 572.497,254.946 573.065,255.25 573.634,255.609 574.202,254.933 574.77,256.035 575.339,255.023 575.907,256.272 576.476,255.404 577.044,255.467 577.612,254.588 578.181,253.501 578.749,252.628 579.317,250.988 579.886,250.25 580.454,249.548 581.022,249.102 581.591,249.554 582.159,250.021 582.727,249.399 583.296,248.892 583.864,249.466 584.432,249.711 585.001,249.047 585.569,245.084 586.137,244.709 586.706,245.365 587.274,244.932 587.842,245.427 588.411,243.838 588.979,246.508 589.547,245.782 590.116,249.205 590.684,249.315 591.253,250.408 591.821,251.352 592.389,252.215 592.958,251.151 593.526,249.948 594.094,247.693 594.663,247.879 595.231,246.874 595.799,244.886 596.368,245.39 596.936,242.611 597.504,245.151 598.073,245.479 598.641,245.786 599.209,245.005 599.778,245.477 600.346,246.499 600.914,244.689 601.483,248.011 602.051,245.766 602.619,242.748 603.188,244.043 603.756,243.975 604.325,244 604.893,247.217 605.461,251.378 606.03,248.687 606.598,248.467 607.166,245.85 607.735,246.869 608.303,245.85 608.871,245.88 609.44,246.561 610.008,247.558 610.576,247.602 611.145,247.26 611.713,246.885 612.281,245.446 612.85,247.367 613.418,250.273 613.986,249.862 614.555,250.523 615.123,249.989 615.691,249.271 616.26,247.972 616.828,247.624 617.396,245.361 617.965,244.09 618.533,243.048 619.102,240.811 619.67,240.735 620.238,240.964 620.807,240.806 621.375,240.784 621.943,240.539 622.512,243.817 623.08,242.374 623.648,240.138 624.217,241.172 624.785,242.14 625.353,242.063 625.922,242.672 626.49,242.463 627.058,240.337 627.627,240.041 628.195,239.054 628.763,238.215 629.332,236.171 629.9,238.62 630.468,237.357 631.037,237.427 631.605,235.441 632.173,235.628 632.742,235.87 633.31,238.277 633.879,235.429 634.447,234.743 635.015,233.032 635.584,234.39 636.152,233.633 636.72,235.057 637.289,234.119 637.857,234.725 638.425,234.361 638.994,235.819 639.562,235.161 640.13,234.284 640.699,235.722 641.267,235.705 641.835,239.071 642.404,237.856 642.972,239.016 643.54,239.965 644.109,240.801 644.677,242.561 645.245,242.225 645.814,239.926 646.382,238.678 646.951,239.662 647.519,239.406 648.087,240.016 648.656,239.904 649.224,238.041 649.792,239.38 650.361,237.304 650.929,236.34 651.497,236.567 652.066,235.633 652.634,235.563 653.202,235.541 653.771,234.682 654.339,233.679 654.907,232.724 655.476,231.013 656.044,229.263 656.612,230.693 657.181,231.304 657.749,231.823 658.317,230.912 658.886,230.374 659.454,228.476 660.022,227.912 660.591,230.57 661.159,229.956 661.728,230.412 662.296,230.888 662.864,230.116 663.433,231.465 664.001,232.027 664.569,232.318 665.138,233.64 665.706,234.738 666.274,231.846 666.843,230.99 667.411,233.499 667.979,233.677 668.548,234.008 669.116,233.298 669.684,232.575 670.253,234.072 670.821,235.347 671.389,236.534 671.958,235.391 672.526,235.465 673.094,237.67 673.663,237.751 674.231,237.792 674.799,235.735 675.368,234.862 675.936,236.153 676.505,235.986 677.073,234.968 677.641,235.268 678.21,234.367 678.778,235.406 679.346,236.441 679.915,235.419 680.483,237.491 681.051,235.236 681.62,230.106 682.188,229.488 682.756,228.695 683.325,228.286 683.893,228.866 684.461,227.328 685.03,227.083 685.598,227.545 686.166,227.231 686.735,226.758 687.303,227.795 687.871,229.578 688.44,231.066 689.008,231.412 689.577,231.922 690.145,232.022 690.713,232.262 691.282,233.427 691.85,234.604 692.418,236.83 692.987,233.995 693.555,232.265 694.123,232.492 694.692,233.575 695.26,233.645 695.828,235.71 696.397,234.796 696.965,234.874 697.533,235.879 698.102,235.965 698.67,234.791 699.238,234.951 699.807,234.953 700.375,235.095 700.943,234.925 701.512,235.219 702.08,234.85 702.648,234.889 703.217,232.798 703.785,233.146 704.354,233.258 704.922,233.421 705.49,232.512 706.059,231.593 706.627,231.781 707.195,234.212 707.764,234.331 708.332,235.421 708.9,234.555 709.469,233.485 710.037,233.714 710.605,231.967 711.174,233.078 711.742,234.287 712.31,234.236 712.879,234.369 713.447,235.444 714.015,239.532 714.584,240.119 715.152,239.843 715.72,239.575 716.289,239.087 716.857,240.873 717.425,240.419 717.994,237.576 718.562,237.04 719.131,235.892 719.699,233.776 720.267,233.905 720.836,233.809 721.404,235.813 721.972,235.597 722.541,235.151 723.109,235.002 723.677,235.018 724.246,234.77 724.814,232.585 725.382,230.579 725.951,231.817 726.519,232.874 727.087,232.622 727.656,234.585 728.224,233.357 728.792,231.228 729.361,233.547 729.929,231.591 730.497,231.749 731.066,230.858 731.634,231.903 732.203,231.94 732.771,233.069 733.339,235.052 733.908,234.929 734.476,233.849 735.044,233.499 735.613,234.309 736.181,234.052 736.749,232.939 737.318,233.921 737.886,234.925 738.454,234.542 739.023,235.549 739.591,234.302 740.159,232.048 740.728,230.844 741.296,231.921 741.864,233.021 742.433,233.149 743.001,235.139 743.569,234.9 744.138,233.733 744.706,233.684 745.274,234.745 745.843,234.641 746.411,236.374 746.98,235.888 747.548,233.705 748.116,233.539 748.685,233.279 749.253,233.133 749.821,233.068 750.39,231.891 750.958,231.844 751.526,231.887 752.095,230.924 752.663,232.021 753.231,232.076 753.8,231.273 754.368,230.235 754.936,231.392 755.505,231.238 756.073,233.498 756.641,232.413 757.21,232.204 757.778,233.074 758.346,231.93 758.915,232.684 759.483,230.404 760.052,228.442 760.62,227.888 761.188,229.182 761.757,226.088 762.325,225.554 762.893,227.031 763.462,226.333 764.03,226.452 764.598,226.452 765.167,225.711 765.735,227.197 766.303,226.543 766.872,229.119 767.44,228.256 768.008,229.427 768.577,229.798 769.145,231.063 769.713,231.151 770.282,231.214 770.85,229.137 771.418,229.479 771.987,228.826 772.555,228.824 773.123,229.121 773.692,231.45 774.26,232.669 774.829,231.796 775.397,231.712 775.965,231.705 776.534,232.925 777.102,233.142 777.67,233.161 778.239,232.254 778.807,234.296 779.375,236.163 779.944,235.726 780.512,235.579 781.08,235.202 781.649,237.19 782.217,235.631 782.785,234.282 783.354,232.164 783.922,230.05 784.49,230.094 785.059,229.202 785.627,229.625 786.195,227.851 786.764,227.055 787.332,229.696 787.9,228.962 788.469,227.03 789.037,227.198 789.606,228.503 790.174,228.633 790.742,227.973 791.311,227.447 791.879,228.816 792.447,230.076 793.016,231.222 793.584,233.252 794.152,231.07 794.721,229.948 795.289,228.179 795.857,229.437 796.426,229.584 796.994,229.872 797.562,230.069 798.131,232.342 798.699,232.581 799.267,233.63 799.836,232.447 800.404,231.492 800.972,232.394 801.541,233.408 802.109,233.336 802.678,232.093 803.246,231.004 803.814,232.193 804.383,233.211 804.951,232.044 805.519,232.15 806.088,231.316 806.656,232.482 807.224,233.372 807.793,234.458 808.361,234.149 808.929,231.968 809.498,233.181 810.066,233.031 810.634,231.772 811.203,232.692 811.771,232.61 812.339,232.5 812.908,229.335 813.476,230.64 814.044,231.708 814.613,231.502 815.181,231.573 815.749,231.836 816.318,233.01 816.886,232.917 817.455,231.905 818.023,228.898 818.591,233.248 819.16,234.216 819.728,234.159 820.296,233.91 820.865,233.998 821.433,233.879 822.001,234.684 822.57,235.688 823.138,234.409 823.706,235.499 824.275,235.271 824.843,233.866 825.411,232.72 825.98,234.606 826.548,234.26 827.116,234.021 827.685,234.791 828.253,232.41 828.821,231.141 829.39,232.149 829.958,228.853 830.526,230.068 831.095,232.177 831.663,231.99 832.232,230.916 832.8,229.904 833.368,228.039 833.937,229.366 834.505,230.667 835.073,232.06 835.642,233.077 836.21,232.714 836.778,233.616 837.347,232.593 837.915,231.555 838.483,231.63 839.052,231.717 839.62,231.657 840.188,231.507 840.757,233.444 841.325,235.31 841.893,235.067 842.462,235.792 843.03,234.386 843.598,233.966 844.167,234.796 844.735,236.513 845.304,237.302 845.872,234.601 846.44,234.393 847.009,234.106 847.577,233.78 848.145,231.611 848.714,231.569 849.282,231.434 849.85,231.117 850.419,232.107 850.987,233.184 851.555,232.946 852.124,231.701 852.692,230.616 853.26,230.619 853.829,230.484 854.397,230.489 854.965,229.46 855.534,230.428 856.102,231.578 856.67,230.534 857.239,230.531 857.807,229.549 858.375,229.531 858.944,231.347 859.512,230.219 860.081,228.046 860.649,227.2 861.217,225.182 861.786,226.407 862.354,226.656 862.922,229.086 863.491,224.853 864.059,224.348 864.627,223.559 865.196,223.837 865.764,225.516 866.332,226.935 866.901,225.044 867.469,227.495 868.037,228.604 868.606,228.791 869.174,227.711 869.742,228.149 870.311,226.298 870.879,227.684 871.447,226.872 872.016,223.155 872.584,223.627 873.152,224.101 873.721,224.717 874.289,227.368 874.858,228.659 875.426,225.897 875.994,226.487 876.563,225.865 877.131,227.403 877.699,226.858 878.268,227.512 878.836,227.952 879.404,231.258 879.973,231.332 880.541,230.301 881.109,230.367 881.678,231.387 882.246,233.455 882.814,233.223 883.383,233.092 883.951,231.985 884.519,234.133 885.088,234.039 885.656,231.781 886.224,231.804 886.793,232.033 887.361,231.675 887.93,229.395 888.498,228.612 889.066,227.724 889.635,227.858 890.203,228.291 890.771,226.412 891.34,227.753 891.908,227.188 892.476,228.569 893.045,228.893 893.613,229.015 894.181,229.415 894.75,230.656 895.318,230.088 895.886,229.262 896.455,228.527 897.023,228.77 897.591,228.986 898.16,229.226 898.728,230.522 899.296,231.826 899.865,231.887 900.433,228.856 901.001,228.054 901.57,228.247 902.138,229.533 902.707,229.795 903.275,232.222 903.843,232.275 904.412,234.368 904.98,234.439 905.548,234.154 906.117,233.834 906.685,232.953 907.253,232.955 907.822,231.99 908.39,232.031 908.958,230.077 909.527,228.054 910.095,228.266 910.663,229.677 911.232,230.885 911.8,230.177 912.368,231.423 912.937,231.765 913.505,230.838 914.073,230.993 914.642,231.159 915.21,231.993 915.779,232.994 916.347,232.032 916.915,233.038 917.484,233.007 918.052,234.217 918.62,235.14 919.189,233.933 919.757,235.002 920.325,237.749 920.894,234.214 921.462,234.116 922.03,233.71 922.599,234.585 923.167,234.419 923.735,236.29 924.304,237.01 924.872,234.714 925.44,233.328 926.009,233.056 926.577,233.046 927.145,231.949 927.714,231.889 928.282,231.932 928.85,230.693 929.419,229.677 929.987,229.846 930.556,232.867 931.124,233.601 931.692,233.479 932.261,235.3 932.829,233.938 933.397,234.7 933.966,233.353 934.534,231.926 935.102,233.146 935.671,232.131 936.239,229.991 936.807,229.955 937.376,228.952 937.944,229.37 938.512,228.393 939.081,227.502 939.649,227.845 940.217,227.113 940.786,227.149 941.354,229.258 941.922,227.44 942.491,227.708 943.059,225.894 943.627,224.324 944.196,225.808 944.764,227.168 945.333,227.397 945.901,227.429 946.469,228.735 947.038,229.051 947.606,229.415 948.174,229.418 948.743,227.481 949.311,226.564 949.879,226.92 950.448,226.14 951.016,226.521 951.584,227.824 952.153,228.13 952.721,228.484 953.289,228.828 953.858,228.964 954.426,229.028 954.994,231.323 955.563,230.403 956.131,227.493 956.699,225.824 957.268,222.146 957.836,223.899 958.405,223.618 958.973,223.063 959.541,222.73 960.11,225.665 960.678,228.214 961.246,228.498 961.815,227.855 962.383,229.312 962.951,228.488 963.52,229.975 964.088,230.256 964.656,231.387 965.225,232.555 965.793,233.715 966.361,235.705 966.93,237.556 967.498,238.369 968.066,239.04 968.635,238.61 969.203,238.333 969.771,238.941 970.34,237.453 970.908,237.263 971.476,235.778 972.045,236.434 972.613,235.935 973.182,235.612 973.75,235.404 974.318,238.108 974.887,237.493 975.455,236.125 976.023,236.624 976.592,233.226 977.16,234.991 977.728,234.633 978.297,233.398 978.865,234.317 979.433,232.812 980.002,232.569 980.57,235.165 981.138,234.753 981.707,236.322 982.275,235.899 982.843,235.374 983.412,234.954 983.98,234.663 984.548,235.321 985.117,235.83 985.685,235.626 986.253,234.021 986.822,232.936 987.39,231.577 987.959,232.53 988.527,233.269 989.095,234.124 989.664,238.032 990.232,237.403 990.8,236.819 991.369,236.447 991.937,235.83 992.505,235.321 993.074,235.728 993.642,234.222 994.21,232.654 994.779,232.316 995.347,231.143 995.915,232.065 996.484,233.897 997.052,234.478 997.62,233.162 998.189,232.827 998.757,233.602 999.325,234.529 999.894,236.148 1000.46,235.652 1001.03,235.093 1001.6,232.656 1002.17,231.297 1002.74,230.142 1003.3,232.065 1003.87,231.651 1004.44,231.413 1005.01,231.332 1005.58,229.117 1006.15,229.048 1006.71,229.886 1007.28,230.807 1007.85,229.543 1008.42,231.318 1008.99,231.167 1009.56,230.694 1010.12,229.521 1010.69,230.404 1011.26,229.286 1011.83,228.057 1012.4,227.004 1012.97,228.047 1013.53,228.142 1014.1,228.349 1014.67,228.322 1015.24,226.196 1015.81,228.629 1016.38,226.434 1016.94,227.77 1017.51,228.057 1018.08,228.128 1018.65,228.243 1019.22,228.199 1019.79,230.194 1020.35,231.139 1020.92,232.051 1021.49,230.847 1022.06,228.649 1022.63,229.624 1023.2,230.694 1023.76,232.624 1024.33,232.465 1024.9,232.198 1025.47,232.1 1026.04,232.003 1026.61,230.84 1027.17,230.703 1027.74,229.629 1028.31,227.443 1028.88,228.582 1029.45,228.676 1030.02,228.821 1030.58,227.855 1031.15,227.952 1031.72,227.859 1032.29,227.111 1032.86,229.394 1033.43,228.446 1033.99,230.367 1034.56,231.273 1035.13,231.212 1035.7,231.181 1036.27,231.112 1036.84,231.116 1037.4,231.12 1037.97,230.02 1038.54,228.966 1039.11,228.903 1039.68,231.153 1040.25,230.871 1040.81,230.624 1041.38,232.563 1041.95,233.362 1042.52,234.204 1043.09,232.769 1043.66,231.354 1044.22,231.385 1044.79,231.284 1045.36,233.326 1045.93,234.858 1046.5,234.402 1047.07,234.13 1047.63,233.802 1048.2,233.584 1048.77,235.249 1049.34,234.665 1049.91,233.252 1050.48,232.766 1051.05,235.512 1051.61,234.707 1052.18,233.177 1052.75,231.746 1053.32,230.398 1053.89,231.063 1054.46,229.765 1055.02,229.69 1055.59,229.466 1056.16,228.315 1056.73,227.492 1057.3,229.536 1057.87,229.424 1058.43,228.278 1059,228.244 1059.57,225.051 1060.14,226.605 1060.71,226.753 1061.28,225.753 1061.84,224.052 1062.41,226.34 1062.98,226.671 1063.55,225.861 1064.12,225.895 1064.69,221.956 1065.25,222.301 1065.82,223.925 1066.39,223.37 1066.96,223.808 1067.53,224.26 1068.1,224.655 1068.66,226.303 1069.23,226.458 1069.8,228.93 1070.37,227.941 1070.94,227.154 1071.51,227.504 1072.07,227.76 1072.64,227.954 1073.21,228.035 1073.78,229.307 1074.35,227.188 1074.92,227.429 1075.48,226.576 1076.05,225.911 1076.62,225.176 1077.19,223.333 1077.76,223.823 1078.33,222.358 1078.89,219.895 1079.46,222.582 1080.03,225.218 1080.6,226.834 1081.17,228.111 1081.74,229.414 1082.3,230.358 1082.87,231.403 1083.44,231.377 1084.01,230.521 1084.58,229.674 1085.15,229.673 1085.71,232.703 1086.28,235.727 1086.85,235.425 1087.42,236.17 1087.99,234.103 1088.56,230.702 1089.12,228.769 1089.69,228.864 1090.26,230.269 1090.83,229.408 1091.4,229.379 1091.97,231.445 1092.53,232.499 1093.1,230.197 1093.67,231.289 1094.24,232.055 1094.81,229.001 1095.38,229.168 1095.94,227.21 1096.51,229.597 1097.08,231.77 1097.65,230.615 1098.22,232.676 1098.79,232.701 1099.35,232.765 1099.92,231.657 1100.49,231.36 1101.06,230.175 1101.63,229.834 1102.2,228.951 1102.76,230.423 1103.33,228.507 1103.9,228.729 1104.47,228.102 1105.04,228.403 1105.61,228.391 1106.17,227.772 1106.74,226.953 1107.31,223.921 1107.88,224.624 1108.45,223.102 1109.02,221.634 1109.58,223.403 1110.15,222.956 1110.72,222.753 1111.29,223.466 1111.86,223.105 1112.43,225.903 1112.99,227.342 1113.56,230.945 1114.13,234.194 1114.7,233.923 1115.27,233.847 1115.84,234.763 1116.4,239.657 1116.97,240.152 1117.54,240.414 1118.11,238.577 1118.68,239.034 1119.25,237.555 1119.81,236.212 1120.38,237.86 1120.95,239.576 1121.52,237.155 1122.09,236.709 1122.66,237.407 1123.23,237.114 1123.79,236.645 1124.36,234.14 1124.93,233.088 1125.5,231.739 1126.07,230.586 1126.64,231.726 1127.2,231.89 1127.77,231.625 1128.34,232.663 1128.91,231.543 1129.48,231.362 1130.05,230.157 1130.61,229.106 1131.18,230.278 1131.75,227.233 1132.32,226.406 1132.89,226.693 1133.46,225.891 1134.02,225.325 1134.59,226.631 1135.16,225.687 1135.73,227.076 1136.3,229.316 1136.87,229.356 1137.43,227.422 1138,228.733 1138.57,229.973 1139.14,229.008 1139.71,227.931 1140.28,228.196 1140.84,227.428 1141.41,226.595 1141.98,225.645 1142.55,226.084 1143.12,226.551 1143.69,225.944 1144.25,224.313 1144.82,223.702 1145.39,225.206 1145.96,224.474 1146.53,222.866 1147.1,223.411 1147.66,224.979 1148.23,227.624 1148.8,228.082 1149.37,227.176 1149.94,226.654 1150.51,227.219 1151.07,228.666 1151.64,230.878 1152.21,229.922 1152.78,231.076 1153.35,234.364 1153.92,237.179 1154.48,237.838 1155.05,238.398 1155.62,237.083 1156.19,239.745 1156.76,239.162 1157.33,235.907 1157.89,234.361 1158.46,233.156 1159.03,234.039 1159.6,233.807 1160.17,233.55 1160.74,233.469 1161.3,235.24 1161.87,232.44 1162.44,232.202 1163.01,231.905 1163.58,234.058 1164.15,231.803 1164.71,233.75 1165.28,233.837 1165.85,233.639 1166.42,232.262 1166.99,233.242 1167.56,234.105 1168.12,232.995 1168.69,230.857 1169.26,229.805 1169.83,230.869 1170.4,230.818 1170.97,230.821 1171.53,229.868 1172.1,230.13 1172.67,230.005 1173.24,230.904 1173.81,230.938 1174.38,230.03 1174.94,231.117 1175.51,231.205 1176.08,231.188 1176.65,229.339 1177.22,230.274 1177.79,229.326 1178.35,231.572 1178.92,229.414 1179.49,229.366 1180.06,227.373 1180.63,228.646 1181.2,227.827 1181.76,227.088 1182.33,228.467 1182.9,224.53 1183.47,226.055 1184.04,228.668 1184.61,229.747 1185.17,229.875 1185.74,229.187 1186.31,229.24 1186.88,229.132 1187.45,229.131 1188.02,227.281 1188.58,228.636 1189.15,228.941 1189.72,230.175 1190.29,230.223 1190.86,232.317 1191.43,231.356 1192,230.369 1192.56,231.488 1193.13,231.388 1193.7,231.634 1194.27,232.496 1194.84,233.515 1195.41,236.181 1195.97,242.069 1196.54,242.273 1197.11,239.342 1197.68,238.665 1198.25,238.031 1198.82,238.358 1199.38,238.785 1199.95,241.055 1200.52,241.34 1201.09,240.439 1201.66,238.552 1202.23,236.583 1202.79,237.196 1203.36,234.329 1203.93,232.868 1204.5,232.554 1205.07,232.237 1205.64,230.708 1206.2,229.467 1206.77,228.371 1207.34,226.558 1207.91,224.634 1208.48,224.07 1209.05,224.434 1209.61,224.813 1210.18,222.849 1210.75,225.183 1211.32,225.394 1211.89,222.681 1212.46,220.929 1213.02,222.443 1213.59,223.92 1214.16,225.342 1214.73,223.814 1215.3,224.366 1215.87,224.799 1216.43,225.169 1217,224.558 1217.57,224.053 1218.14,224.61 1218.71,223.115 1219.28,223.569 1219.84,223.106 1220.41,223.542 1220.98,224.166 1221.55,224.471 1222.12,224.913 1222.69,226.363 1223.25,226.576 1223.82,225.859 1224.39,225.166 1224.96,226.634 1225.53,227.145 1226.1,225.457 1226.66,223.914 1227.23,223.618 1227.8,224.149 1228.37,224.538 1228.94,224.94 1229.51,226.651 1230.07,225.104 1230.64,224.44 1231.21,226.124 1231.78,226.663 1232.35,225.069 1232.92,226.828 1233.48,228.382 1234.05,227.682 1234.62,231.218 1235.19,231.415 1235.76,231.627 1236.33,232.652 1236.89,233.658 1237.46,234.537 1238.03,233.604 1238.6,232.631 1239.17,232.702 1239.74,235.938 1240.3,235.568 1240.87,236.357 1241.44,233.95 1242.01,233.903 1242.58,233.818 1243.15,235.846 1243.71,235.696 1244.28,234.637 1244.85,235.492 1245.42,234.012 1245.99,231.872 1246.56,231.833 1247.12,231.943 1247.69,232.886 1248.26,232.859 1248.83,232.681 1249.4,230.353 1249.97,234.531 1250.53,234.519 1251.1,233.216 1251.67,233.198 1252.24,232.116 1252.81,229.946 1253.38,230.051 1253.94,228.227 1254.51,230.437 1255.08,229.214 1255.65,229.504 1256.22,228.446 1256.79,229.566 1257.35,229.856 1257.92,229.741 1258.49,231.763 1259.06,233.923 1259.63,232.701 1260.2,232.58 1260.76,233.692 1261.33,232.536 1261.9,235.513 1262.47,236.278 1263.04,233.737 1263.61,233.639 1264.18,232.493 1264.74,232.363 1265.31,231.233 1265.88,230.119 1266.45,231.328 1267.02,231.489 1267.59,233.587 1268.15,233.265 1268.72,232.96 1269.29,231.831 1269.86,232.923 1270.43,232.725 1271,230.589 1271.56,230.765 1272.13,228.812 1272.7,229.794 1273.27,231.182 1273.84,231.27 1274.41,231.121 1274.97,232.089 1275.54,232.954 1276.11,233.932 1276.68,232.577 1277.25,231.215 1277.82,231.057 1278.38,229.871 1278.95,232.048 1279.52,231.057 1280.09,231.754 1280.66,230.526 1281.23,229.627 1281.79,229.726 1282.36,228.768 1282.93,231.132 1283.5,231.078 1284.07,232.174 1284.64,232.127 1285.2,232.981 1285.77,234.092 1286.34,234.92 1286.91,233.546 1287.48,227.944 1288.05,228.082 1288.61,229.218 1289.18,230.331 1289.75,231.261 1290.32,229.142 1290.89,227.092 1291.46,227.062 1292.02,227.102 1292.59,227.308 1293.16,228.579 1293.73,227.736 1294.3,229.032 1294.87,230.839 1295.43,230.754 1296,229.73 1296.57,229.716 1297.14,226.819 1297.71,228.047 1298.28,228.345 1298.84,230.728 1299.41,232.875 1299.98,232.809 1300.55,233.969 1301.12,231.766 1301.69,229.604 1302.25,230.705 1302.82,230.533 1303.39,232.784 1303.96,232.482 1304.53,233.198 1305.1,233.335 1305.66,234.276 1306.23,232.819 1306.8,231.652 1307.37,229.602 1307.94,225.491 1308.51,225.57 1309.07,225.616 1309.64,227.153 1310.21,227.545 1310.78,226.797 1311.35,229.993 1311.92,230.125 1312.48,229.231 1313.05,230.29 1313.62,229.38 1314.19,225.457 1314.76,226.773 1315.33,228.036 1315.89,228.02 1316.46,230.497 1317.03,233.812 1317.6,235.543 1318.17,232.143 1318.74,236.263 1319.3,238.89 1319.87,239.427 1320.44,238.955 1321.01,237.435 1321.58,235.803 1322.15,235.466 1322.71,235.003 1323.28,230.426 1323.85,230.581 1324.42,230.531 1324.99,231.37 1325.56,231.202 1326.12,232.098 1326.69,228.753 1327.26,229.722 1327.83,231.834 1328.4,232.688 1328.97,235.788 1329.53,236.52 1330.1,237.443 1330.67,234.888 1331.24,232.336 1331.81,232.154 1332.38,228.86 1332.94,226.69 1333.51,229.859 1334.08,229.856 1334.65,229.966 1335.22,231.117 1335.79,230.074 1336.36,232.216 1336.92,231.044 1337.49,230.962 1338.06,229.913 1338.63,227.658 1339.2,227.82 1339.77,228.155 1340.33,228.197 1340.9,228.286 1341.47,227.423 1342.04,226.472 1342.61,224.738 1343.18,226.107 1343.74,226.344 1344.31,226.594 1344.88,226.802 1345.45,227.166 1346.02,228.431 1346.59,227.388 1347.15,226.565 1347.72,225.946 1348.29,226.172 1348.86,226.627 1349.43,229.058 1350,229.172 1350.56,230.442 1351.13,231.569 1351.7,229.321 1352.27,227.441 1352.84,228.902 1353.41,230.909 1353.97,229.826 1354.54,229.757 1355.11,230.948 1355.68,230.922 1356.25,230.885 1356.82,230.893 1357.38,228.59 1357.95,227.837 1358.52,228.988 1359.09,230.199 1359.66,231.366 1360.23,230.243 1360.79,232.202 1361.36,234.197 1361.93,235.013 1362.5,234.757 1363.07,233.5 1363.64,234.225 1364.2,231.922 1364.77,231.688 1365.34,231.672 1365.91,232.752 1366.48,232.427 1367.05,230.342 1367.61,230.491 1368.18,229.495 1368.75,229.217 1369.32,228.232 1369.89,228.085 1370.46,228.085 1371.02,229.136 1371.59,229.221 1372.16,231.212 1372.73,231.037 1373.3,229.959 1373.87,232.014 1374.43,231.774 1375,232.637 1375.57,231.283 1376.14,231.072 1376.71,230.023 1377.28,232.026 1377.84,233.049 1378.41,232.651 1378.98,232.333 1379.55,229.979 1380.12,229.906 1380.69,230.973 1381.25,229.96 1381.82,229.865 1382.39,227.743 1382.96,228.076 1383.53,227.323 1384.1,227.498 1384.66,226.829 1385.23,227.122 1385.8,226.544 1386.37,227.944 1386.94,229.117 1387.51,228.251 1388.07,229.58 1388.64,230.82 1389.21,231.908 1389.78,231.721 1390.35,230.551 1390.92,230.674 1391.48,230.558 1392.05,228.684 1392.62,230.028 1393.19,230.397 1393.76,229.331 1394.33,229.584 1394.89,230.692 1395.46,230.74 1396.03,229.55 1396.6,229.244 1397.17,229.23 1397.74,230.286 1398.3,229.211 1398.87,228.274 1399.44,226.536 1400.01,224.643 1400.58,225.138 1401.15,225.684 1401.71,225.885 1402.28,225.387 1402.85,225.783 1403.42,225.877 1403.99,225.181 1404.56,227.573 1405.13,226.797 1405.69,227.184 1406.26,229.555 1406.83,228.923 1407.4,230.077 1407.97,232.355 1408.54,233.34 1409.1,234.306 1409.67,233.11 1410.24,232.203 1410.81,234.283 1411.38,235.005 1411.95,236.119 1412.51,235.887 1413.08,236.659 1413.65,237.555 1414.22,236.801 1414.79,236.34 1415.36,235.89 1415.92,236.429 1416.49,239.049 1417.06,237.513 1417.63,234.957 1418.2,236.001 1418.77,234.619 1419.33,235.503 1419.9,236.178 1420.47,236.963 1421.04,236.54 1421.61,237.845 1422.18,237.165 1422.74,234.643 1423.31,233.316 1423.88,230.982 1424.45,227.648 1425.02,228.125 1425.59,227.159 1426.15,226.26 1426.72,226.597 1427.29,226.708 1427.86,228.961 1428.43,227.929 1429,227.047 1429.56,227.398 1430.13,227.65 1430.7,229.869 1431.27,229.852 1431.84,228.628 1432.41,225.592 1432.97,228.853 1433.54,229.74 1434.11,229.927 1434.68,230.836 1435.25,230.641 1435.82,228.31 1436.38,230.347 1436.95,230.91 1437.52,229.861 1438.09,229.934 1438.66,226.806 1439.23,223.046 1439.79,223.561 1440.36,223.221 1440.93,224.743 1441.5,226.232 1442.07,228.544 1442.64,229.379 1443.2,232.546 1443.77,231.246 1444.34,232.152 1444.91,231.07 1445.48,232.03 1446.05,233.925 1446.61,237.684 1447.18,238.133 1447.75,236.639 1448.32,237.163 1448.89,235.67 1449.46,235.175 1450.02,234.909 1450.59,232.396 1451.16,232.244 1451.73,232.118 1452.3,233.123 1452.87,231.696 1453.43,231.407 1454,230.107 1454.57,231.036 1455.14,231.967 1455.71,230.802 1456.28,229.669 1456.84,228.595 1457.41,226.771 1457.98,225.87 1458.55,223.093 1459.12,223.582 1459.69,225.106 1460.25,225.637 1460.82,228.033 1461.39,229.28 1461.96,228.431 1462.53,226.572 1463.1,226.726 1463.66,226.884 1464.23,226.113 1464.8,226.57 1465.37,227.985 1465.94,226.161 1466.51,227.152 1467.07,226.5 1467.64,226.812 1468.21,226.107 1468.78,225.271 1469.35,226.707 1469.92,225.91 1470.48,230.412 1471.05,230.407 1471.62,227.422 1472.19,228.79 1472.76,227.867 1473.33,231.281 1473.89,232.38 1474.46,233.276 1475.03,234.419 1475.6,233.153 1476.17,234.925 1476.74,234.689 1477.31,236.409 1477.87,234.897 1478.44,235.716 1479.01,236.175 1479.58,234.65 1480.15,235.443 1480.72,234.114 1481.28,237.992 1481.85,238.337 1482.42,236.644 1482.99,237.051 1483.56,236.724 1484.13,234.201 1484.69,230.706 1485.26,231.875 1485.83,232.799 1486.4,230.822 1486.97,228.686 1487.54,227.682 1488.1,225.82 1488.67,226.147 1489.24,227.426 1489.81,227.48 1490.38,228.665 1490.95,227.703 1491.51,230.013 1492.08,229.008 1492.65,231.202 1493.22,231.256 1493.79,231.376 1494.36,232.33 1494.92,231.077 1495.49,230.896 1496.06,230.444 1496.63,233.551 1497.2,232.063 1497.77,230.806 1498.33,229.723 1498.9,229.879 1499.47,230.797 1500.04,229.482 1500.61,230.388 1501.18,229.284 1501.74,229.149 1502.31,229.287 1502.88,230.591 1503.45,231.378 1504.02,227.302 1504.59,226.448 1505.15,227.591 1505.72,226.828 1506.29,229.018 1506.86,228.204 1507.43,228.477 1508,226.451 1508.56,227.849 1509.13,228.921 1509.7,226.904 1510.27,227.364 1510.84,227.586 1511.41,224.696 1511.97,227.105 1512.54,227.395 1513.11,226.503 1513.68,225.879 1514.25,226.311 1514.82,226.811 1515.38,226.091 1515.95,224.325 1516.52,224.66 1517.09,224.934 1517.66,225.485 1518.23,227.726 1518.79,227.902 1519.36,228.218 1519.93,229.272 1520.5,228.801 1521.07,229.002 1521.64,230.106 1522.2,229.209 1522.77,230.405 1523.34,229.514 1523.91,228.808 1524.48,229.993 1525.05,233.995 1525.61,234.906 1526.18,236.699 1526.75,236.268 1527.32,237.918 1527.89,237.415 1528.46,235.921 1529.02,234.314 1529.59,235.148 1530.16,233.928 1530.73,232.632 1531.3,233.782 1531.87,233.7 1532.43,232.287 1533,234.28 1533.57,233.837 1534.14,233.504 1534.71,234.604 1535.28,236.445 1535.84,234.953 1536.41,234.411 1536.98,233.122 1537.55,233.013 1538.12,232.756 1538.69,234.643 1539.25,234.208 1539.82,233.91 1540.39,233.713 1540.96,232.505 1541.53,233.473 1542.1,233.052 1542.66,232.673 1543.23,231.556 1543.8,231.304 1544.37,229.205 1544.94,227.174 1545.51,227.349 1546.08,227.205 1546.64,228.347 1547.21,227.267 1547.78,226.321 1548.35,226.448 1548.92,228.627 1549.49,227.565 1550.05,228.684 1550.62,228.774 1551.19,227.713 1551.76,227.894 1552.33,228.025 1552.9,228.184 1553.46,228.351 1554.03,230.374 1554.6,229.203 1555.17,227.554 1555.74,229.738 1556.31,228.08 1556.87,227.225 1557.44,228.461 1558.01,227.736 1558.58,228.88 1559.15,229.848 1559.72,228.744 1560.28,227.867 1560.85,228.912 1561.42,229.906 1561.99,230.122 1562.56,229.109 1563.13,230.275 1563.69,232.51 1564.26,233.192 1564.83,231.973 1565.4,231.891 1565.97,231.894 1566.54,229.821 1567.1,230.777 1567.67,231.888 1568.24,229.797 1568.81,229.535 1569.38,227.523 1569.95,227.655 1570.51,226.728 1571.08,230.014 1571.65,227.985 1572.22,228.472 1572.79,229.52 1573.36,229.778 1573.92,229.966 1574.49,232.149 1575.06,230.983 1575.63,230.052 1576.2,228.084 1576.77,229.254 1577.33,229.241 1577.9,229.495 1578.47,225.505 1579.04,224.868 1579.61,225.367 1580.18,225.693 1580.74,228.002 1581.31,231.316 1581.88,231.345 1582.45,230.121 1583.02,229.332 1583.59,229.394 1584.15,229.39 1584.72,227.233 1585.29,229.524 1585.86,226.584 1586.43,229.288 1587,229.532 1587.56,231.736 1588.13,232.676 1588.7,234.726 1589.27,235.206 1589.84,234.921 1590.41,234.611 1590.97,233.17 1591.54,233.882 1592.11,233.657 1592.68,232.418 1593.25,232.254 1593.82,232.04 1594.38,231.846 1594.95,231.714 1595.52,231.648 1596.09,237.571 1596.66,238.176 1597.23,234.354 1597.79,232.079 1598.36,233.03 1598.93,232.914 1599.5,232.578 1600.07,232.64 1600.64,232.408 1601.2,232.084 1601.77,235.045 1602.34,234.916 1602.91,232.35 1603.48,232.051 1604.05,230.86 1604.61,233.986 1605.18,230.711 1605.75,230.396 1606.32,232.485 1606.89,229.051 1607.46,228.97 1608.02,229.124 1608.59,229.262 1609.16,228.287 1609.73,228.333 1610.3,227.287 1610.87,228.55 1611.43,229.466 1612,229.389 1612.57,229.356 1613.14,231.269 1613.71,230.961 1614.28,230.908 1614.84,230.876 1615.41,232.618 1615.98,232.264 1616.55,230.947 1617.12,229.942 1617.69,226.528 1618.26,227.753 1618.82,225.671 1619.39,225.945 1619.96,225.07 1620.53,224.325 1621.1,225.801 1621.67,226.392 1622.23,225.514 1622.8,225.685 1623.37,223.972 1623.94,224.258 1624.51,225.885 1625.08,224.32 1625.64,224.781 1626.21,226.31 1626.78,227.492 1627.35,226.711 1627.92,227.041 1628.49,227.472 1629.05,226.684 1629.62,229.139 1630.19,229.421 1630.76,231.375 1631.33,232.297 1631.9,232.197 1632.46,232.246 1633.03,234.338 1633.6,234.222 1634.17,234.056 1634.74,233.859 1635.31,233.556 1635.87,231.485 1636.44,231.272 1637.01,229.266 1637.58,230.27 1638.15,231.499 1638.72,230.49 1639.28,230.364 1639.85,229.26 1640.42,231.413 1640.99,231.469 1641.56,234.654 1642.13,232.325 1642.69,231.322 1643.26,231.204 1643.83,229.043 1644.4,229.303 1644.97,226.501 1645.54,228.811 1646.1,227.996 1646.67,230.299 1647.24,226.18 1647.81,226.505 1648.38,230.922 1648.95,231.023 1649.51,233.344 1650.08,231.255 1650.65,230.425 1651.22,229.574 1651.79,231.63 1652.36,232.723 1652.92,234.723 1653.49,236.605 1654.06,235.176 1654.63,231.947 1655.2,230.888 1655.77,230.801 1656.33,230.809 1656.9,228.713 1657.47,230.048 1658.04,230.182 1658.61,231.274 1659.18,232.035 1659.74,233.117 1660.31,232.859 1660.88,232.837 1661.45,234.851 1662.02,235.593 1662.59,234.308 1663.15,235.009 1663.72,233.731 1664.29,231.422 1664.86,232.354 1665.43,233.144 1666,231.74 1666.56,231.857 1667.13,232.925 1667.7,232.819 1668.27,230.248 1668.84,228.015 1669.41,227.33 1669.97,228.423 1670.54,229.7 1671.11,231.846 1671.68,229.555 1672.25,230.477 1672.82,231.278 1673.38,227.714 1673.95,227.767 1674.52,228.95 1675.09,225.943 1675.66,224.228 1676.23,223.815 1676.79,225.234 1677.36,225.575 1677.93,222.978 1678.5,225.465 1679.07,224.788 1679.64,225.211 1680.2,226.504 1680.77,224.825 1681.34,226.367 1681.91,228.817 1682.48,229.077 1683.05,230.344 1683.61,229.181 1684.18,230.287 1684.75,229.333 1685.32,230.58 1685.89,227.542 1686.46,231.894 1687.02,234.145 1687.59,234.997 1688.16,235.723 1688.73,237.464 1689.3,235.943 1689.87,236.692 1690.44,237.392 1691,237.073 1691.57,237.437 1692.14,236.004 1692.71,236.602 1693.28,236.268 1693.85,235.789 1694.41,235.489 1694.98,233.093 1695.55,232.715 1696.12,231.433 1696.69,230.198 1697.26,231.462 1697.82,232.322 1698.39,231.844 1698.96,231.721 1699.53,232.602 1700.1,232.552 1700.67,234.187 1701.23,232.862 1701.8,228.443 1702.37,228.41 1702.94,228.622 1703.51,227.686 1704.08,227.839 1704.64,228.79 1705.21,227.894 1705.78,227.861 1706.35,227.934 1706.92,225.906 1707.49,226.015 1708.05,226.308 1708.62,225.56 1709.19,225.914 1709.76,226.207 1710.33,226.252 1710.9,226.585 1711.46,225.765 1712.03,225.189 1712.6,222.274 1713.17,221.775 1713.74,222.545 1714.31,224.166 1714.87,224.701 1715.44,224.996 1716.01,225.577 1716.58,225.12 1717.15,225.682 1717.72,225.949 1718.28,227.292 1718.85,225.363 1719.42,225.781 1719.99,225.228 1720.56,226.837 1721.13,228.366 1721.69,229.666 1722.26,229.864 1722.83,228.066 1723.4,231.548 1723.97,232.374 1724.54,233.442 1725.1,234.423 1725.67,235.22 1726.24,234.846 1726.81,234.713 1727.38,234.52 1727.95,234.319 1728.51,232.258 1729.08,233.468 1729.65,233.073 1730.22,228.771 1730.79,227.713 1731.36,229.168 1731.92,232.264 1732.49,234.049 1733.06,236.972 1733.63,237.388 1734.2,237.963 1734.77,238.634 1735.33,237.082 1735.9,236.74 1736.47,235.125 1737.04,233.696 1737.61,234.507 1738.18,232.086 1738.74,232.961 1739.31,234.02 1739.88,234.933 1740.45,233.61 1741.02,233.512 1741.59,233.248 1742.15,233.18 1742.72,233.099 1743.29,232.959 1743.86,230.694 1744.43,229.698 1745,228.764 1745.56,231.929 1746.13,231.625 1746.7,231.433 1747.27,230.253 1747.84,230.008 1748.41,228.887 1748.97,231.103 1749.54,232.773 1750.11,233.669 1750.68,233.391 1751.25,235.183 1751.82,234.986 1752.38,234.461 1752.95,234.923 1753.52,234.401 1754.09,233.987 1754.66,231.703 1755.23,231.452 1755.79,231.112 1756.36,231.044 1756.93,229.935 1757.5,230.994 1758.07,230.971 1758.64,230.942 1759.21,231.788 1759.77,230.595 1760.34,231.488 1760.91,232.379 1761.48,231.007 1762.05,231.896 1762.62,230.598 1763.18,232.487 1763.75,232.131 1764.32,232.932 1764.89,231.681 1765.46,229.346 1766.03,229.556 1766.59,228.654 1767.16,229.796 1767.73,229.71 1768.3,227.599 1768.87,230.853 1769.44,230.738 1770,231.712 1770.57,232.711 1771.14,235.542 1771.71,233.039 1772.28,233.664 1772.85,232.319 1773.41,229.978 1773.98,231.088 1774.55,233.064 1775.12,233.828 1775.69,234.471 1776.26,234.074 1776.82,233.779 1777.39,234.406 1777.96,233.94 1778.53,232.71 1779.1,234.524 1779.67,231.019 1780.23,229.955 1780.8,229.626 1781.37,227.246 1781.94,226.277 1782.51,226.436 1783.08,227.604 1783.64,227.64 1784.21,228.87 1784.78,227.733 1785.35,228.897 1785.92,229.035 1786.49,230.271 1787.05,230.119 1787.62,229.054 1788.19,231.101 1788.76,233.077 1789.33,233.871 1789.9,230.071 1790.46,229.952 1791.03,230.924 1791.6,230.676 1792.17,230.46 1792.74,233.228 1793.31,231.98 1793.87,232.007 1794.44,230.862 1795.01,230.814 1795.58,230.462 1796.15,231.432 1796.72,231.364 1797.28,229.195 1797.85,229.081 1798.42,228.312 1798.99,229.457 1799.56,232.546 1800.13,232.292 1800.69,233.032 1801.26,233.708 1801.83,234.367 1802.4,232.981 1802.97,232.705 1803.54,231.612 1804.1,232.337 1804.67,231.245 1805.24,230.983 1805.81,226.621 1806.38,227.792 1806.95,228.005 1807.51,228.093 1808.08,224.183 1808.65,225.541 1809.22,227.694 1809.79,225.872 1810.36,224.993 1810.92,225.317 1811.49,225.616 1812.06,224.95 1812.63,225.352 1813.2,226.668 1813.77,226.856 1814.33,225.758 1814.9,226.917 1815.47,224.253 1816.04,225.457 1816.61,230.948 1817.18,230.851 1817.74,231.791 1818.31,230.547 1818.88,231.323 1819.45,231.188 1820.02,230.908 1820.59,231.828 1821.15,231.69 1821.72,229.455 1822.29,229.398 1822.86,229.429 1823.43,228.507 1824,230.743 1824.56,229.62 1825.13,229.756 1825.7,229.812 1826.27,226.863 1826.84,224.124 1827.41,224.589 1827.97,224.987 1828.54,226.484 1829.11,226.759 1829.68,228.217 1830.25,229.376 1830.82,228.448 1831.39,229.604 1831.95,228.799 1832.52,228.892 1833.09,229.029 1833.66,228.112 1834.23,228.134 1834.8,227.24 1835.36,228.524 1835.93,227.493 1836.5,228.719 1837.07,229.894 1837.64,228.854 1838.21,228.006 1838.77,228.147 1839.34,229.554 1839.91,232.473 1840.48,232.21 1841.05,229.987 1841.62,232.319 1842.18,232.303 1842.75,231.1 1843.32,231.821 1843.89,230.632 1844.46,230.613 1845.03,232.612 1845.59,230.512 1846.16,230.455 1846.73,231.375 1847.3,230.177 1847.87,228.93 1848.44,226.814 1849,227.069 1849.57,229.625 1850.14,230.645 1850.71,230.464 1851.28,229.511 1851.85,229.556 1852.41,229.57 1852.98,228.642 1853.55,230.877 1854.12,228.78 1854.69,227.831 1855.26,229.039 1855.82,230.351 1856.39,232.259 1856.96,232.487 1857.53,232.291 1858.1,231.998 1858.67,231.076 1859.23,230.946 1859.8,232.741 1860.37,232.337 1860.94,233.426 1861.51,232.208 1862.08,230.738 1862.64,231.642 1863.21,230.382 1863.78,231.532 1864.35,229.705 1864.92,228.688 1865.49,231.901 1866.05,227.541 1866.62,225.812 1867.19,224.196 1867.76,223.662 1868.33,227.372 1868.9,227.742 1869.46,226.826 1870.03,227.089 1870.6,229.493 1871.17,229.618 1871.74,232.864 1872.31,230.45 1872.87,230.417 1873.44,228.413 1874.01,226.554 1874.58,225.789 1875.15,227.225 1875.72,228.508 1876.28,229.798 1876.85,229.763 1877.42,230.795 1877.99,231.876 1878.56,232.583 1879.13,232.068 1879.69,231.775 1880.26,230.678 1880.83,229.619 1881.4,227.656 1881.97,227.68 1882.54,226.792 1883.1,229.104 1883.67,228.435 1884.24,228.508 1884.81,228.795 1885.38,229.161 1885.95,231.57 1886.51,231.559 1887.08,232.582 1887.65,231.451 1888.22,230.457 1888.79,229.239 1889.36,229.356 1889.92,232.626 1890.49,232.544 1891.06,232.366 1891.63,233.477 1892.2,234.279 1892.77,234.046 1893.33,232.764 1893.9,233.72 1894.47,232.305 1895.04,233.207 1895.61,231.852 1896.18,229.615 1896.74,230.982 1897.31,228.881 1897.88,229.915 1898.45,228.865 1899.02,228.938 1899.59,229.116 1900.16,230.38 1900.72,231.385 1901.29,231.219 1901.86,230.069 1902.43,227.147 1903,227.436 1903.57,227.503 1904.13,228.731 1904.7,228.931 1905.27,229.109 1905.84,229.222 1906.41,228.408 1906.98,226.843 1907.54,227.169 1908.11,227.535 1908.68,228.826 1909.25,227.886 1909.82,230.296 1910.39,232.587 1910.95,232.807 1911.52,232.732 1912.09,232.683 1912.66,232.612 1913.23,230.532 1913.8,230.694 1914.36,231.847 1914.93,231.633 1915.5,231.429 1916.07,232.393 1916.64,233.37 1917.21,233.094 1917.77,233.89 1918.34,233.541 1918.91,233.33 1919.48,232.156 1920.05,230.921 1920.62,230.722 1921.18,232.782 1921.75,231.612 1922.32,230.524 1922.89,230.51 1923.46,231.751 1924.03,231.546 1924.59,231.297 1925.16,230.156 1925.73,232.471 1926.3,235.251 1926.87,235.108 1927.44,233.678 1928,233.401 1928.57,233.085 1929.14,231.762 1929.71,231.717 1930.28,229.645 1930.85,231.803 1931.41,230.479 1931.98,229.638 1932.55,228.435 1933.12,227.685 1933.69,226.742 1934.26,226.95 1934.82,224.99 1935.39,223.249 1935.96,222.751 1936.53,222.244 1937.1,221.767 1937.67,221.412 1938.23,221.104 1938.8,222.685 1939.37,222.106 1939.94,222.705 1940.51,223.62 1941.08,225.137 1941.64,226.78 1942.21,229.317 1942.78,230.527 1943.35,229.575 1943.92,228.711 1944.49,229.05 1945.05,228.176 1945.62,232.555 1946.19,231.5 1946.76,230.651 1947.33,228.698 1947.9,229.855 1948.46,230.213 1949.03,230.375 1949.6,232.786 1950.17,233.549 1950.74,233.574 1951.31,232.496 1951.87,234.546 1952.44,236.567 1953.01,238.018 1953.58,237.479 1954.15,239.989 1954.72,238.28 1955.28,240.807 1955.85,235.957 1956.42,238.792 1956.99,238.095 1957.56,237.594 1958.13,235.071 1958.69,233.742 1959.26,234.547 1959.83,235.34 1960.4,238.036 1960.97,239.451 1961.54,237.733 1962.1,237.375 1962.67,238.759 1963.24,236.147 1963.81,235.694 1964.38,239.175 1964.95,236.301 1965.51,234.806 1966.08,234.355 1966.65,231.839 1967.22,233.634 1967.79,232.289 1968.36,232.24 1968.92,231.996 1969.49,231.769 1970.06,231.508 1970.63,232.516 1971.2,230.471 1971.77,227.372 1972.34,228.529 1972.9,227.448 1973.47,228.7 1974.04,228.592 1974.61,226.549 1975.18,226.709 1975.75,226.882 1976.31,227.058 1976.88,227.23 1977.45,224.386 1978.02,224.59 1978.59,224.212 1979.16,224.441 1979.72,224.762 1980.29,226.344 1980.86,226.567 1981.43,226.776 1982,229.91 1982.57,229.98 1983.13,229.969 1983.7,227.963 1984.27,227.993 1984.84,229.048 1985.41,227.078 1985.98,229.189 1986.54,229.214 1987.11,229.196 1987.68,230.37 1988.25,229.194 1988.82,228.422 1989.39,228.638 1989.95,229.789 1990.52,229.575 1991.09,227.698 1991.66,229.753 1992.23,232.924 1992.8,231.705 1993.36,231.669 1993.93,228.393 1994.5,226.444 1995.07,226.705 1995.64,224.827 1996.21,225.222 1996.77,226.468 1997.34,225.537 1997.91,226.981 1998.48,226.331 1999.05,226.765 1999.62,226.1 2000.18,222.38 2000.75,222.161 2001.32,223.9 2001.89,224.421 2002.46,228.044 2003.03,230.151 2003.59,228.119 2004.16,231.359 2004.73,230.356 2005.3,233.636 2005.87,233.482 2006.44,233.242 2007,234.138 2007.57,233.898 2008.14,232.512 2008.71,231.265 2009.28,230.289 2009.85,232.427 2010.41,232.259 2010.98,232.955 2011.55,230.724 2012.12,230.967 2012.69,231.13 2013.26,232.204 2013.82,230.955 2014.39,230.57 2014.96,231.542 2015.53,231.53 2016.1,229.204 2016.67,226.976 2017.23,226.353 2017.8,225.639 2018.37,223.836 2018.94,226.472 2019.51,226.8 2020.08,228.069 2020.64,230.277 2021.21,230.275 2021.78,230.321 2022.35,229.512 2022.92,229.622 2023.49,229.92 2024.05,231.996 2024.62,231.878 2025.19,231.882 2025.76,230.814 2026.33,233.712 2026.9,232.326 2027.46,233.017 2028.03,231.799 2028.6,230.495 2029.17,230.289 2029.74,228.306 2030.31,226.704 2030.87,227.914 2031.44,228.142 2032.01,227.342 2032.58,226.602 2033.15,226.934 2033.72,228.267 2034.28,227.439 2034.85,227.817 2035.42,228.144 2035.99,228.444 2036.56,229.086 2037.13,229.305 2037.69,230.487 2038.26,232.636 2038.83,232.396 2039.4,231.299 2039.97,229.322 2040.54,229.397 2041.11,228.486 2041.67,230.769 2042.24,231.798 2042.81,231.749 2043.38,231.553 2043.95,232.641 2044.52,231.837 2045.08,234.887 2045.65,235.784 2046.22,235.539 2046.79,235.244 2047.36,235.798 2047.93,236.587 2048.49,237.225 2049.06,234.735 2049.63,234.508 2050.2,233.401 2050.77,232.021 2051.34,231.943 2051.9,230.827 2052.47,229.73 2053.04,228.694 2053.61,229.979 2054.18,230.018 2054.75,228.766 2055.31,228.776 2055.88,226.849 2056.45,229.31 2057.02,229.404 2057.59,230.601 2058.16,231.533 2058.72,231.508 2059.29,231.568 2059.86,233.479 2060.43,233.418 2061,234.203 2061.57,236 2062.13,236.651 2062.7,235.089 2063.27,233.822 2063.84,231.478 2064.41,232.697 2064.98,232.36 2065.54,233.373 2066.11,232.264 2066.68,233.123 2067.25,235.982 2067.82,237.412 2068.39,235.864 2068.95,233.261 2069.52,232.91 2070.09,232.625 2070.66,233.325 2071.23,233.201 2071.8,231.811 2072.36,232.506 2072.93,232.211 2073.5,230.912 2074.07,229.577 2074.64,227.411 2075.21,227.339 2075.77,228.742 2076.34,231.076 2076.91,229.88 2077.48,226.931 2078.05,228.129 2078.62,229.503 2079.18,229.769 2079.75,229.98 2080.32,228.989 2080.89,227.887 2081.46,228.853 2082.03,228.961 2082.59,227.898 2083.16,227.866 2083.73,228.84 2084.3,230.127 2084.87,232.194 2085.44,228.947 2086,229.986 2086.57,231.1 2087.14,228.791 2087.71,230.082 2088.28,227.731 2088.85,227.757 2089.41,228.891 2089.98,227.172 2090.55,225.235 2091.12,223.393 2091.69,224.98 2092.26,226.471 2092.82,225.631 2093.39,228.041 2093.96,227.241 2094.53,226.658 2095.1,228.045 2095.67,227.137 2096.23,228.415 2096.8,229.666 2097.37,231.887 2097.94,232.854 2098.51,231.599 2099.08,233.496 2099.64,232.201 2100.21,231.011 2100.78,230.874 2101.35,231.856 2101.92,231.643 2102.49,232.676 2103.05,232.447 2103.62,231.332 2104.19,230.339 2104.76,230.484 2105.33,230.424 2105.9,228.269 2106.46,229.357 2107.03,228.342 2107.6,230.695 2108.17,228.715 2108.74,227.001 2109.31,224.368 2109.87,223.943 2110.44,226.314 2111.01,227.579 2111.58,226.909 2112.15,227.117 2112.72,227.331 2113.29,226.519 2113.85,226.901 2114.42,225.19 2114.99,227.722 2115.56,228.989 2116.13,228.943 2116.7,230.17 2117.26,227.117 2117.83,227.382 2118.4,228.832 2118.97,228.969 2119.54,229.169 2120.11,229.643 2120.67,227.872 2121.24,228.12 2121.81,230.299 2122.38,230.34 2122.95,229.35 2123.52,228.341 2124.08,231.599 2124.65,234.891 2125.22,233.698 2125.79,232.527 2126.36,232.516 2126.93,232.463 2127.49,234.451 2128.06,235.357 2128.63,231.772 2129.2,230.767 2129.77,232.028 2130.34,228.906 2130.9,229.288 2131.47,230.445 2132.04,228.553 2132.61,230.062 2133.18,231.369 2133.75,231.289 2134.31,231.044 2134.88,230.858 2135.45,232.963 2136.02,231.869 2136.59,232.703 2137.16,233.571 2137.72,233.227 2138.29,231.099 2138.86,234.135 2139.43,233.677 2140,235.415 2140.57,235.256 2141.13,236.833 2141.7,237.422 2142.27,237.046 2142.84,237.641 2143.41,238.311 2143.98,237.815 2144.54,236.57 2145.11,237.203 2145.68,236.691 2146.25,235.951 2146.82,234.537 2147.39,236.294 2147.95,236.745 2148.52,234.278 2149.09,232.092 2149.66,230.736 2150.23,229.613 2150.8,228.547 2151.36,227.395 2151.93,227.392 2152.5,227.734 2153.07,222.796 2153.64,223.253 2154.21,224.721 2154.77,226.015 2155.34,226.124 2155.91,223.182 2156.48,223.717 2157.05,225.204 2157.62,226.802 2158.18,226.962 2158.75,228.061 2159.32,229.191 2159.89,231.444 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip900)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip900)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip900)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip900)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.041 ± 0.021\n  with uncertainty of ± 0.0013501064061627386\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01691 ± (0.003724, 0.00378466) (MC)\n  95% confidence interval: [-4.02413, -4.0094]) (MC)\n  linear error propagation: -4.01717 ± 0.00380952\n  |δ_y| = |0.00324608| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0169096573818805, val_l = 0.007217427032498058, val_u = 0.007513197963629814)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip930\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip931\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip930)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip932\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.12 2211.02,1143.12 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,978.491 2211.02,978.491 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,813.864 2211.02,813.864 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,649.237 2211.02,649.237 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,484.61 2211.02,484.61 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,319.984 2211.02,319.984 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.12 365.751,1143.12 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,978.491 365.751,978.491 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,813.864 365.751,813.864 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,649.237 365.751,649.237 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,484.61 365.751,484.61 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,319.984 365.751,319.984 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M298.909 1128.92 Q295.298 1128.92 293.469 1132.48 Q291.664 1136.02 291.664 1143.15 Q291.664 1150.26 293.469 1153.82 Q295.298 1157.37 298.909 1157.37 Q302.543 1157.37 304.349 1153.82 Q306.177 1150.26 306.177 1143.15 Q306.177 1136.02 304.349 1132.48 Q302.543 1128.92 298.909 1128.92 M298.909 1125.21 Q304.719 1125.21 307.775 1129.82 Q310.853 1134.4 310.853 1143.15 Q310.853 1151.88 307.775 1156.49 Q304.719 1161.07 298.909 1161.07 Q293.099 1161.07 290.02 1156.49 Q286.964 1151.88 286.964 1143.15 Q286.964 1134.4 290.02 1129.82 Q293.099 1125.21 298.909 1125.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M259.557 991.836 L267.196 991.836 L267.196 965.47 L258.886 967.137 L258.886 962.878 L267.15 961.211 L271.826 961.211 L271.826 991.836 L279.465 991.836 L279.465 995.771 L259.557 995.771 L259.557 991.836 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 964.29 Q295.298 964.29 293.469 967.855 Q291.664 971.396 291.664 978.526 Q291.664 985.632 293.469 989.197 Q295.298 992.739 298.909 992.739 Q302.543 992.739 304.349 989.197 Q306.177 985.632 306.177 978.526 Q306.177 971.396 304.349 967.855 Q302.543 964.29 298.909 964.29 M298.909 960.586 Q304.719 960.586 307.775 965.193 Q310.853 969.776 310.853 978.526 Q310.853 987.253 307.775 991.859 Q304.719 996.443 298.909 996.443 Q293.099 996.443 290.02 991.859 Q286.964 987.253 286.964 978.526 Q286.964 969.776 290.02 965.193 Q293.099 960.586 298.909 960.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M262.775 827.209 L279.094 827.209 L279.094 831.144 L257.15 831.144 L257.15 827.209 Q259.812 824.455 264.395 819.825 Q269.002 815.172 270.182 813.83 Q272.428 811.306 273.307 809.57 Q274.21 807.811 274.21 806.121 Q274.21 803.367 272.266 801.631 Q270.344 799.894 267.242 799.894 Q265.043 799.894 262.59 800.658 Q260.159 801.422 257.381 802.973 L257.381 798.251 Q260.205 797.117 262.659 796.538 Q265.113 795.959 267.15 795.959 Q272.52 795.959 275.715 798.644 Q278.909 801.33 278.909 805.82 Q278.909 807.95 278.099 809.871 Q277.312 811.769 275.205 814.362 Q274.627 815.033 271.525 818.251 Q268.423 821.445 262.775 827.209 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 799.663 Q295.298 799.663 293.469 803.228 Q291.664 806.769 291.664 813.899 Q291.664 821.005 293.469 824.57 Q295.298 828.112 298.909 828.112 Q302.543 828.112 304.349 824.57 Q306.177 821.005 306.177 813.899 Q306.177 806.769 304.349 803.228 Q302.543 799.663 298.909 799.663 M298.909 795.959 Q304.719 795.959 307.775 800.566 Q310.853 805.149 310.853 813.899 Q310.853 822.626 307.775 827.232 Q304.719 831.816 298.909 831.816 Q293.099 831.816 290.02 827.232 Q286.964 822.626 286.964 813.899 Q286.964 805.149 290.02 800.566 Q293.099 795.959 298.909 795.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M272.914 647.883 Q276.27 648.601 278.145 650.869 Q280.043 653.138 280.043 656.471 Q280.043 661.587 276.525 664.388 Q273.006 667.189 266.525 667.189 Q264.349 667.189 262.034 666.749 Q259.742 666.332 257.289 665.476 L257.289 660.962 Q259.233 662.096 261.548 662.675 Q263.863 663.254 266.386 663.254 Q270.784 663.254 273.076 661.517 Q275.39 659.781 275.39 656.471 Q275.39 653.416 273.238 651.703 Q271.108 649.967 267.289 649.967 L263.261 649.967 L263.261 646.124 L267.474 646.124 Q270.923 646.124 272.752 644.758 Q274.58 643.369 274.58 640.777 Q274.58 638.115 272.682 636.703 Q270.807 635.268 267.289 635.268 Q265.367 635.268 263.168 635.684 Q260.969 636.101 258.33 636.981 L258.33 632.814 Q260.992 632.073 263.307 631.703 Q265.645 631.332 267.705 631.332 Q273.029 631.332 276.131 633.763 Q279.233 636.17 279.233 640.291 Q279.233 643.161 277.59 645.152 Q275.946 647.119 272.914 647.883 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 635.036 Q295.298 635.036 293.469 638.601 Q291.664 642.143 291.664 649.272 Q291.664 656.379 293.469 659.943 Q295.298 663.485 298.909 663.485 Q302.543 663.485 304.349 659.943 Q306.177 656.379 306.177 649.272 Q306.177 642.143 304.349 638.601 Q302.543 635.036 298.909 635.036 M298.909 631.332 Q304.719 631.332 307.775 635.939 Q310.853 640.522 310.853 649.272 Q310.853 657.999 307.775 662.605 Q304.719 667.189 298.909 667.189 Q293.099 667.189 290.02 662.605 Q286.964 657.999 286.964 649.272 Q286.964 640.522 290.02 635.939 Q293.099 631.332 298.909 631.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M271.594 471.405 L259.789 489.854 L271.594 489.854 L271.594 471.405 M270.367 467.33 L276.247 467.33 L276.247 489.854 L281.177 489.854 L281.177 493.742 L276.247 493.742 L276.247 501.89 L271.594 501.89 L271.594 493.742 L255.992 493.742 L255.992 489.229 L270.367 467.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 470.409 Q295.298 470.409 293.469 473.974 Q291.664 477.516 291.664 484.645 Q291.664 491.752 293.469 495.316 Q295.298 498.858 298.909 498.858 Q302.543 498.858 304.349 495.316 Q306.177 491.752 306.177 484.645 Q306.177 477.516 304.349 473.974 Q302.543 470.409 298.909 470.409 M298.909 466.705 Q304.719 466.705 307.775 471.312 Q310.853 475.895 310.853 484.645 Q310.853 493.372 307.775 497.978 Q304.719 502.562 298.909 502.562 Q293.099 502.562 290.02 497.978 Q286.964 493.372 286.964 484.645 Q286.964 475.895 290.02 471.312 Q293.099 466.705 298.909 466.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M258.793 302.704 L277.15 302.704 L277.15 306.639 L263.076 306.639 L263.076 315.111 Q264.094 314.764 265.113 314.602 Q266.131 314.416 267.15 314.416 Q272.937 314.416 276.316 317.588 Q279.696 320.759 279.696 326.176 Q279.696 331.754 276.224 334.856 Q272.752 337.935 266.432 337.935 Q264.256 337.935 261.988 337.565 Q259.742 337.194 257.335 336.453 L257.335 331.754 Q259.418 332.889 261.641 333.444 Q263.863 334 266.34 334 Q270.344 334 272.682 331.893 Q275.02 329.787 275.02 326.176 Q275.02 322.565 272.682 320.458 Q270.344 318.352 266.34 318.352 Q264.465 318.352 262.59 318.768 Q260.738 319.185 258.793 320.065 L258.793 302.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M298.909 305.782 Q295.298 305.782 293.469 309.347 Q291.664 312.889 291.664 320.018 Q291.664 327.125 293.469 330.69 Q295.298 334.231 298.909 334.231 Q302.543 334.231 304.349 330.69 Q306.177 327.125 306.177 320.018 Q306.177 312.889 304.349 309.347 Q302.543 305.782 298.909 305.782 M298.909 302.079 Q304.719 302.079 307.775 306.685 Q310.853 311.268 310.853 320.018 Q310.853 328.745 307.775 333.352 Q304.719 337.935 298.909 337.935 Q293.099 337.935 290.02 333.352 Q286.964 328.745 286.964 320.018 Q286.964 311.268 290.02 306.685 Q293.099 302.079 298.909 302.079 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip932)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1021.82 400.199,910.377 400.786,808.127 401.372,714.45 401.958,628.774 402.545,550.571 403.131,696.028 403.718,624.172 404.304,553.651 404.891,578.623 405.477,517.448 406.063,462.002 406.65,411.913 407.236,366.836 407.823,459.574 408.409,417.445 408.995,379.719 409.582,346.111 410.168,317.638 410.755,292.515 411.341,315.107 411.927,293.525 412.514,275.825 413.1,260.64 413.687,248.644 414.273,237.808 414.86,229.844 415.446,223.373 416.032,219.895 416.619,243.861 417.205,242.58 417.792,242.492 418.378,243.867 418.964,267.82 419.551,290.582 420.137,313.96 420.724,318.742 421.31,323.74 421.896,345.202 422.483,352.059 423.069,358.919 423.656,380.117 424.242,388.672 424.829,397.563 425.415,418.265 426.001,439.227 426.588,449.793 427.174,470.778 427.761,507.717 428.347,518.16 428.933,529.365 429.52,556.006 430.106,565.988 430.693,590.541 431.279,613.555 431.865,623.681 432.452,639.249 433.038,654.203 433.625,668.883 434.211,688.962 434.798,697.82 435.384,711.431 435.97,724.901 436.557,737.938 437.143,751.436 437.73,768.991 438.316,794.194 438.902,801.913 439.489,809.766 440.075,818.481 440.662,826.42 441.248,856.171 441.835,870.103 442.421,880.28 443.007,889.883 443.594,899.875 444.18,906.643 444.767,919.267 445.353,925.493 445.939,940.34 446.526,960.148 447.112,973.501 447.699,980.707 448.285,993.124 448.871,1002.31 449.458,1006.44 450.044,1012.74 450.631,1016.36 451.217,1024.8 451.804,1033.65 452.39,1037.47 452.976,1041.37 453.563,1049.77 454.149,1056.16 454.736,1062.29 455.322,1065.61 455.908,1073.11 456.495,1076.46 457.081,1082.29 457.668,1087.62 458.254,1096.9 458.84,1101.62 459.427,1114.21 460.013,1118.03 460.6,1121.73 461.186,1124.04 461.773,1133.61 462.359,1137.05 462.945,1138.44 463.532,1143.91 464.118,1145.43 464.705,1148.75 465.291,1154.11 465.877,1157.26 466.464,1158.38 467.05,1161.94 467.637,1163.23 468.223,1166.41 468.809,1169.37 469.396,1170.62 469.982,1171.71 470.569,1174.79 471.155,1175.67 471.742,1178.64 472.328,1178.29 472.914,1179.49 473.501,1183.87 474.087,1186.72 474.674,1189.49 475.26,1191.7 475.846,1192.42 476.433,1194.76 477.019,1195.68 477.606,1194.71 478.192,1201.56 478.778,1203.69 479.365,1207.17 479.951,1209.05 480.538,1210.68 481.124,1212.86 481.711,1216.21 482.297,1217.86 482.883,1219.25 483.47,1219.29 484.056,1222.17 484.643,1221.87 485.229,1223.39 485.815,1226.3 486.402,1227.52 486.988,1227.2 487.575,1226.95 488.161,1229.5 488.748,1227.77 489.334,1228.94 489.92,1230.34 490.507,1231.89 491.093,1234.16 491.68,1233.57 492.266,1234.66 492.852,1232.25 493.439,1230.39 494.025,1231.06 494.612,1233.57 495.198,1234.47 495.784,1233.75 496.371,1233.64 496.957,1237.4 497.544,1238.02 498.13,1237.55 498.717,1236.88 499.303,1236.48 499.889,1236.17 500.476,1237.15 501.062,1235.27 501.649,1241.79 502.235,1239.83 502.821,1241.95 503.408,1242.96 503.994,1242.54 504.581,1241.8 505.167,1242.61 505.753,1244.76 506.34,1243.75 506.926,1244.43 507.513,1246.31 508.099,1246.93 508.686,1246.31 509.272,1245.22 509.858,1247.29 510.445,1246.33 511.031,1248.11 511.618,1245.37 512.204,1245.72 512.79,1246.52 513.377,1245.4 513.963,1242.94 514.55,1243.34 515.136,1244.58 515.722,1245 516.309,1244.19 516.895,1248.88 517.482,1245.05 518.068,1246.72 518.655,1248.51 519.241,1250.36 519.827,1250.53 520.414,1249.45 521,1248.41 521.587,1247.28 522.173,1247.53 522.759,1245.43 523.346,1246.11 523.932,1243.81 524.519,1244.3 525.105,1243.56 525.691,1244.09 526.278,1244.91 526.864,1245.48 527.451,1247.09 528.037,1247.54 528.624,1247.95 529.21,1248.05 529.796,1246.97 530.383,1245.85 530.969,1246.17 531.556,1246.35 532.142,1245.11 532.728,1244.3 533.315,1244.68 533.901,1249.45 534.488,1249.56 535.074,1248.33 535.661,1248.51 536.247,1247.48 536.833,1249.2 537.42,1245.32 538.006,1245.86 538.593,1240.93 539.179,1240.3 539.765,1238.36 540.352,1236.58 540.938,1234.89 541.525,1235.75 542.111,1236.81 542.697,1239.3 543.284,1238.6 543.87,1239.48 544.457,1241.69 545.043,1240.65 545.63,1243.93 546.216,1240.26 546.802,1239.45 547.389,1238.65 547.975,1239.29 548.562,1238.29 549.148,1236.55 549.734,1238.53 550.321,1233.76 550.907,1236.28 551.494,1239.87 552.08,1237.84 552.666,1237.58 553.253,1237.2 553.839,1232.59 554.426,1226.63 555.012,1229.66 555.599,1229.48 556.185,1232.48 556.771,1230.73 557.358,1231.66 557.944,1231.22 558.531,1229.92 559.117,1228.18 559.703,1227.68 560.29,1227.69 560.876,1227.75 561.463,1229.23 562.049,1226.3 562.635,1222 563.222,1222.03 563.808,1220.65 564.395,1220.84 564.981,1221.29 565.568,1222.52 566.154,1222.53 566.74,1225.09 567.327,1226.38 567.913,1227.4 568.5,1230.02 569.086,1229.86 569.672,1229.29 570.259,1229.22 570.845,1228.98 571.432,1229.04 572.018,1224.46 572.605,1226.02 573.191,1228.65 573.777,1227.04 574.364,1225.49 574.95,1225.28 575.537,1224.18 576.123,1224.14 576.709,1226.63 577.296,1226.76 577.882,1227.81 578.469,1228.69 579.055,1231.17 579.641,1227.81 580.228,1229.26 580.814,1228.99 581.401,1231.41 581.987,1231.03 582.574,1230.58 583.16,1227.28 583.746,1230.82 584.333,1231.59 584.919,1233.71 585.506,1231.87 586.092,1232.76 586.678,1230.81 587.265,1231.92 587.851,1231.03 588.438,1231.39 589.024,1229.38 589.61,1230.1 590.197,1231.13 590.783,1229.14 591.37,1229.03 591.956,1224.47 592.543,1225.85 593.129,1224.13 593.715,1222.66 594.302,1221.31 594.888,1218.73 595.475,1218.85 596.061,1221.58 596.647,1222.97 597.234,1221.47 597.82,1221.56 598.407,1220.53 598.993,1220.43 599.579,1222.63 600.166,1220.68 600.752,1223.17 601.339,1224.26 601.925,1223.81 602.512,1224.88 603.098,1224.83 603.684,1224.73 604.271,1225.72 604.857,1226.92 605.444,1228.08 606.03,1230.26 606.616,1232.52 607.203,1230.69 607.789,1229.88 608.376,1229.18 608.962,1230.33 609.548,1231.02 610.135,1233.49 610.721,1234.27 611.308,1230.88 611.894,1231.67 612.481,1231.09 613.067,1230.46 613.653,1231.46 614.24,1229.71 614.826,1228.94 615.413,1228.52 615.999,1226.74 616.585,1225.22 617.172,1228.89 617.758,1229.97 618.345,1226.68 618.931,1226.36 619.518,1225.85 620.104,1226.68 620.69,1227.55 621.277,1225.54 621.863,1223.77 622.45,1222.09 623.036,1223.43 623.622,1223.21 624.209,1220.18 624.795,1219.89 625.382,1219.65 625.968,1222.15 626.554,1223.16 627.141,1221.35 627.727,1221.42 628.314,1222.61 628.9,1222.1 629.487,1223.16 630.073,1221.69 630.659,1220.21 631.246,1221.39 631.832,1218.55 632.419,1221.32 633.005,1227.9 633.591,1228.71 634.178,1229.76 634.764,1230.34 635.351,1229.64 635.937,1231.68 636.523,1232.07 637.11,1231.56 637.696,1232.04 638.283,1232.73 638.869,1231.47 639.456,1229.22 640.042,1227.3 640.628,1226.83 641.215,1226.14 641.801,1225.97 642.388,1225.61 642.974,1224.04 643.56,1222.42 644.147,1219.4 644.733,1222.95 645.32,1225.11 645.906,1224.77 646.492,1223.3 647.079,1223.13 647.665,1220.34 648.252,1221.4 648.838,1221.18 649.425,1219.75 650.011,1219.5 650.597,1220.89 651.184,1220.57 651.77,1220.45 652.357,1220.15 652.943,1220.25 653.529,1219.75 654.116,1220.1 654.702,1219.94 655.289,1222.56 655.875,1222.04 656.462,1221.82 657.048,1221.54 657.634,1222.65 658.221,1223.79 658.807,1223.51 659.394,1220.3 659.98,1220.05 660.566,1218.52 661.153,1219.52 661.739,1220.81 662.326,1220.44 662.912,1222.63 663.498,1221.14 664.085,1219.49 664.671,1219.46 665.258,1219.18 665.844,1217.67 666.431,1212.18 667.017,1211.17 667.603,1211.28 668.19,1211.39 668.776,1211.8 669.363,1209.22 669.949,1209.55 670.535,1213.03 671.122,1213.55 671.708,1214.88 672.295,1217.51 672.881,1217.26 673.467,1217.29 674.054,1214.58 674.64,1214.72 675.227,1215.17 675.813,1215.24 676.4,1215.1 676.986,1215.31 677.572,1218.05 678.159,1220.62 678.745,1219 679.332,1217.58 679.918,1217.84 680.504,1215.22 681.091,1216.72 681.677,1219.42 682.264,1216.37 682.85,1218.84 683.436,1218.61 684.023,1219.73 684.609,1218.36 685.196,1218.27 685.782,1216.75 686.369,1214.09 686.955,1214.13 687.541,1215.43 688.128,1215.8 688.714,1214.66 689.301,1214.89 689.887,1216.25 690.473,1214.9 691.06,1213.5 691.646,1213.88 692.233,1212.46 692.819,1213.96 693.405,1216.8 693.992,1218.33 694.578,1216.91 695.165,1215.44 695.751,1215.2 696.338,1212.53 696.924,1212.72 697.51,1214.13 698.097,1214.11 698.683,1212.63 699.27,1212.66 699.856,1210.28 700.442,1210.76 701.029,1213.48 701.615,1213.61 702.202,1213.87 702.788,1213.98 703.375,1214 703.961,1215.47 704.547,1215.49 705.134,1215.4 705.72,1216.61 706.307,1215.17 706.893,1215.05 707.479,1216.06 708.066,1217.39 708.652,1215.88 709.239,1216.06 709.825,1213.08 710.411,1214.42 710.998,1214.64 711.584,1213.46 712.171,1214.88 712.757,1213.86 713.344,1216.77 713.93,1219.33 714.516,1220.1 715.103,1218.48 715.689,1222.53 716.276,1223.33 716.862,1221.54 717.448,1222.53 718.035,1222.48 718.621,1222.58 719.208,1223.64 719.794,1221.83 720.38,1222.76 720.967,1219.51 721.553,1220.66 722.14,1219.19 722.726,1218.73 723.313,1217.1 723.899,1216.96 724.485,1216.86 725.072,1219.55 725.658,1219.13 726.245,1220.01 726.831,1220.05 727.417,1219.7 728.004,1216.7 728.59,1215.08 729.177,1216.16 729.763,1216.23 730.349,1216.21 730.936,1214.58 731.522,1214.23 732.109,1214.14 732.695,1215.25 733.282,1212.53 733.868,1209.99 734.454,1210.41 735.041,1210.46 735.627,1210.82 736.214,1208.09 736.8,1209.96 737.386,1211.6 737.973,1214.26 738.559,1216.97 739.146,1216.93 739.732,1218.09 740.318,1217.57 740.905,1219.9 741.491,1221 742.078,1217.65 742.664,1218.62 743.251,1221.17 743.837,1221.04 744.423,1219.42 745.01,1219.3 745.596,1220.2 746.183,1220.95 746.769,1219.24 747.355,1217.64 747.942,1216.15 748.528,1213.48 749.115,1216.26 749.701,1217.7 750.288,1220.02 750.874,1218.43 751.46,1218.27 752.047,1217.91 752.633,1217.67 753.22,1214.71 753.806,1214.35 754.392,1212.92 754.979,1214.38 755.565,1215.57 756.152,1214.37 756.738,1212.99 757.324,1213.01 757.911,1214.55 758.497,1215.93 759.084,1214.36 759.67,1212.99 760.257,1214.44 760.843,1214.26 761.429,1215.3 762.016,1213.75 762.602,1212.54 763.189,1211.04 763.775,1211.34 764.361,1214.09 764.948,1212.47 765.534,1212.59 766.121,1214.17 766.707,1212.93 767.293,1212.98 767.88,1213.06 768.466,1217.14 769.053,1215.46 769.639,1214.06 770.226,1214.3 770.812,1214.18 771.398,1213.8 771.985,1212.23 772.571,1212.28 773.158,1213.54 773.744,1217.42 774.33,1211.78 774.917,1210.45 775.503,1210.42 776.09,1210.65 776.676,1210.44 777.262,1210.51 777.849,1209.36 778.435,1207.94 779.022,1209.48 779.608,1207.95 780.195,1208.11 780.781,1209.83 781.367,1211.23 781.954,1208.71 782.54,1209.05 783.127,1209.27 783.713,1208.16 784.299,1211.16 784.886,1212.77 785.472,1211.43 786.059,1215.68 786.645,1214.14 787.232,1211.4 787.818,1211.59 788.404,1212.95 788.991,1214.26 789.577,1216.7 790.164,1215.03 790.75,1213.36 791.336,1211.54 791.923,1210.16 792.509,1210.57 793.096,1209.33 793.682,1210.58 794.268,1211.88 794.855,1211.75 795.441,1211.61 796.028,1211.65 796.614,1211.82 797.201,1209.26 797.787,1206.73 798.373,1206.93 798.96,1205.86 799.546,1207.56 800.133,1208.01 800.719,1206.83 801.305,1204.46 801.892,1203.27 802.478,1206.63 803.065,1206.8 803.651,1207.07 804.237,1207.4 804.824,1210.15 805.41,1210.17 805.997,1210.32 806.583,1210.7 807.17,1209.39 807.756,1207.94 808.342,1208.18 808.929,1209.74 809.515,1211.12 810.102,1211.11 810.688,1211.28 811.274,1211.27 811.861,1212.61 812.447,1211.37 813.034,1209.87 813.62,1211.2 814.206,1211.2 814.793,1212.47 815.379,1212.52 815.966,1210.17 816.552,1211.62 817.139,1214.45 817.725,1215.61 818.311,1218.31 818.898,1216.85 819.484,1216.63 820.071,1213.56 820.657,1219.1 821.243,1219.89 821.83,1221.07 822.416,1220.88 823.003,1218.87 823.589,1217.15 824.175,1219.69 824.762,1216.65 825.348,1215.28 825.935,1215.08 826.521,1216.53 827.108,1216.02 827.694,1218.49 828.28,1216.79 828.867,1217.91 829.453,1222.82 830.04,1222.4 830.626,1221.95 831.212,1221.31 831.799,1218.02 832.385,1216.41 832.972,1220.05 833.558,1219.4 834.145,1220.3 834.731,1218.42 835.317,1219.2 835.904,1218.44 836.49,1217.94 837.077,1213.7 837.663,1213.58 838.249,1214.9 838.836,1214.81 839.422,1213.48 840.009,1210.76 840.595,1210.98 841.181,1211.08 841.768,1212.46 842.354,1209.61 842.941,1209.63 843.527,1212.49 844.114,1212.42 844.7,1212.09 845.286,1212.51 845.873,1215.45 846.459,1216.5 847.046,1217.7 847.632,1217.59 848.218,1217.09 848.805,1219.59 849.391,1217.94 849.978,1218.75 850.564,1217.03 851.15,1216.66 851.737,1216.53 852.323,1216.05 852.91,1214.45 853.496,1215.19 854.083,1216.27 854.669,1217.26 855.255,1216.99 855.842,1216.75 856.428,1216.47 857.015,1214.81 857.601,1213.1 858.187,1212.99 858.774,1216.9 859.36,1217.98 859.947,1217.79 860.533,1216.17 861.119,1215.85 861.706,1212.7 862.292,1212.58 862.879,1209.8 863.465,1209.6 864.052,1209.87 864.638,1210.19 865.224,1211.25 865.811,1211.19 866.397,1212.38 866.984,1212.28 867.57,1214.79 868.156,1217.43 868.743,1217.22 869.329,1215.43 869.916,1213.88 870.502,1214.79 871.089,1213.17 871.675,1212.69 872.261,1213.87 872.848,1213.65 873.434,1213.42 874.021,1212.31 874.607,1210.96 875.193,1212.15 875.78,1210.79 876.366,1210.77 876.953,1209.12 877.539,1207.81 878.125,1209.27 878.712,1207.78 879.298,1204.06 879.885,1208.5 880.471,1208.53 881.058,1208.96 881.644,1207.73 882.23,1207.84 882.817,1205.29 883.403,1204.19 883.99,1207.03 884.576,1208.73 885.162,1209.01 885.749,1208.96 886.335,1210.32 886.922,1210.36 887.508,1210.26 888.094,1211.84 888.681,1213.16 889.267,1212.95 889.854,1209.03 890.44,1208 891.027,1208.08 891.613,1205.62 892.199,1207.27 892.786,1206.18 893.372,1207.83 893.959,1209.62 894.545,1207.99 895.131,1209.24 895.718,1211.99 896.304,1212.05 896.891,1213.36 897.477,1212.86 898.063,1214.15 898.65,1215.36 899.236,1214.99 899.823,1216.01 900.409,1216.04 900.996,1213.38 901.582,1215.77 902.168,1215.5 902.755,1217.92 903.341,1220.08 903.928,1218.3 904.514,1216.65 905.1,1216.44 905.687,1216.47 906.273,1214.85 906.86,1214.48 907.446,1214.04 908.032,1214.06 908.619,1216.6 909.205,1217.87 909.792,1217.5 910.378,1218.6 910.965,1218.22 911.551,1216.62 912.137,1216.29 912.724,1215.89 913.31,1215.49 913.897,1215.35 914.483,1215.3 915.069,1212.34 915.656,1213.52 916.242,1217.31 916.829,1219.55 917.415,1224.43 918.002,1222.37 918.588,1222.9 919.174,1223.79 919.761,1224.41 920.347,1220.8 920.934,1217.61 921.52,1217.29 922.106,1218.18 922.693,1216.34 923.279,1217.44 923.866,1215.55 924.452,1215.2 925.038,1213.73 925.625,1212.17 926.211,1210.6 926.798,1207.91 927.384,1205.35 927.971,1204.09 928.557,1203.01 929.143,1203.35 929.73,1203.5 930.316,1202.5 930.903,1204.23 931.489,1204.3 932.075,1206.07 932.662,1205.07 933.248,1205.57 933.835,1205.85 934.421,1205.99 935.007,1202.31 935.594,1202.92 936.18,1204.54 936.767,1203.73 937.353,1208.02 937.94,1205.64 938.526,1205.99 939.112,1207.5 939.699,1206.22 940.285,1208.08 940.872,1208.34 941.458,1204.89 942.044,1205.3 942.631,1203.13 943.217,1203.54 943.804,1204.08 944.39,1204.5 944.976,1204.77 945.563,1203.8 946.149,1203 946.736,1203.13 947.322,1205.1 947.909,1206.42 948.495,1208.13 949.081,1206.86 949.668,1205.83 950.254,1204.64 950.841,1199.42 951.427,1200.05 952.013,1200.64 952.6,1200.96 953.186,1201.61 953.773,1202.14 954.359,1201.48 954.945,1203.31 955.532,1205.27 956.118,1205.65 956.705,1207.13 957.291,1205.91 957.878,1203.47 958.464,1202.62 959.05,1204.23 959.637,1204.6 960.223,1203.52 960.81,1202.23 961.396,1200 961.982,1200.5 962.569,1201.1 963.155,1204.17 963.742,1205.88 964.328,1207.37 964.915,1204.86 965.501,1205.36 966.087,1205.64 966.674,1205.72 967.26,1208.58 967.847,1208.7 968.433,1207.64 969.019,1206.45 969.606,1208.09 970.192,1205.8 970.779,1205.97 971.365,1206.57 971.951,1208.09 972.538,1206.96 973.124,1208.41 973.711,1210.04 974.297,1211.47 974.884,1210.2 975.47,1210.13 976.056,1209.92 976.643,1210.01 977.229,1212.82 977.816,1209.77 978.402,1212.67 978.988,1211.03 979.575,1210.72 980.161,1210.69 980.748,1210.6 981.334,1210.71 981.92,1208.17 982.507,1206.94 983.093,1205.73 983.68,1207.26 984.266,1210.11 984.853,1208.88 985.439,1207.51 986.025,1204.98 986.612,1205.13 987.198,1205.42 987.785,1205.51 988.371,1205.59 988.957,1207.06 989.544,1207.23 990.13,1208.62 990.717,1211.48 991.303,1210.08 991.889,1210 992.476,1209.86 993.062,1211.15 993.649,1211.09 994.235,1211.27 994.822,1212.31 995.408,1209.42 995.994,1210.68 996.581,1208.23 997.167,1207.05 997.754,1207.1 998.34,1207.12 998.926,1207.19 999.513,1207.17 1000.1,1207.14 1000.69,1208.56 1001.27,1209.94 1001.86,1210.06 1002.44,1207.16 1003.03,1207.51 1003.62,1207.82 1004.2,1205.28 1004.79,1204.18 1005.38,1203 1005.96,1204.78 1006.55,1206.57 1007.14,1206.5 1007.72,1206.61 1008.31,1203.92 1008.9,1201.84 1009.48,1202.32 1010.07,1202.57 1010.65,1202.9 1011.24,1203.1 1011.83,1200.84 1012.41,1201.48 1013,1203.22 1013.59,1203.78 1014.17,1200.12 1014.76,1201.05 1015.35,1202.94 1015.93,1204.73 1016.52,1206.46 1017.11,1205.59 1017.69,1207.26 1018.28,1207.38 1018.86,1207.69 1019.45,1209.21 1020.04,1210.33 1020.62,1207.74 1021.21,1207.91 1021.8,1209.43 1022.38,1209.53 1022.97,1213.73 1023.56,1211.84 1024.14,1211.75 1024.73,1213.14 1025.32,1215.46 1025.9,1212.66 1026.49,1212.33 1027.07,1213.47 1027.66,1213.55 1028.25,1218.76 1028.83,1218.53 1029.42,1216.63 1030.01,1217.52 1030.59,1217.13 1031.18,1216.71 1031.77,1216.35 1032.35,1214.36 1032.94,1214.26 1033.52,1211.15 1034.11,1212.47 1034.7,1213.56 1035.28,1213.18 1035.87,1212.92 1036.46,1212.74 1037.04,1212.69 1037.63,1211.1 1038.22,1213.88 1038.8,1213.65 1039.39,1214.83 1039.98,1215.79 1040.56,1216.86 1041.15,1219.38 1041.73,1218.93 1042.32,1220.99 1042.91,1224.38 1043.49,1221.17 1044.08,1217.95 1044.67,1215.99 1045.25,1214.42 1045.84,1212.78 1046.43,1211.57 1047.01,1210.21 1047.6,1210.22 1048.19,1211.31 1048.77,1212.41 1049.36,1212.43 1049.94,1208.49 1050.53,1204.47 1051.12,1204.73 1051.7,1203.63 1052.29,1206.19 1052.88,1210.53 1053.46,1213.04 1054.05,1212.96 1054.64,1211.17 1055.22,1212.29 1055.81,1212.35 1056.39,1209.69 1056.98,1208.28 1057.57,1211.23 1058.15,1209.81 1058.74,1208.79 1059.33,1212.73 1059.91,1212.54 1060.5,1215.12 1061.09,1212.1 1061.67,1209.28 1062.26,1210.75 1062.85,1208.06 1063.43,1207.97 1064.02,1207.82 1064.6,1209.21 1065.19,1209.56 1065.78,1211.08 1066.36,1211.53 1066.95,1212.7 1067.54,1210.81 1068.12,1213.31 1068.71,1213.07 1069.3,1213.92 1069.88,1213.59 1070.47,1213.66 1071.06,1214.51 1071.64,1215.64 1072.23,1219.66 1072.81,1218.92 1073.4,1221.04 1073.99,1223.12 1074.57,1221.05 1075.16,1221.81 1075.75,1222.26 1076.33,1221.53 1076.92,1222.17 1077.51,1218.73 1078.09,1216.98 1078.68,1212.36 1079.26,1208.1 1079.85,1208.36 1080.44,1208.37 1081.02,1207.08 1081.61,1200.55 1082.2,1199.66 1082.78,1199.06 1083.37,1201.22 1083.96,1200.41 1084.54,1202.13 1085.13,1203.7 1085.72,1201.39 1086.3,1198.94 1086.89,1201.89 1087.47,1202.3 1088.06,1201.22 1088.65,1201.43 1089.23,1201.87 1089.82,1204.99 1090.41,1206.27 1090.99,1207.96 1091.58,1209.43 1092.17,1207.94 1092.75,1207.69 1093.34,1207.99 1093.93,1206.61 1094.51,1208.01 1095.1,1208.22 1095.68,1209.76 1096.27,1211.14 1096.86,1209.64 1097.44,1213.61 1098.03,1214.76 1098.62,1214.49 1099.2,1215.63 1099.79,1216.47 1100.38,1214.91 1100.96,1216.23 1101.55,1214.54 1102.14,1211.71 1102.72,1211.69 1103.31,1214.23 1103.89,1212.6 1104.48,1211.03 1105.07,1212.29 1105.65,1213.73 1106.24,1213.45 1106.83,1214.5 1107.41,1215.66 1108,1216.99 1108.59,1216.54 1109.17,1216.04 1109.76,1216.93 1110.34,1219.16 1110.93,1220.1 1111.52,1218.32 1112.1,1219.4 1112.69,1221.64 1113.28,1221.12 1113.86,1219.27 1114.45,1215.97 1115.04,1215.44 1115.62,1216.68 1116.21,1217.44 1116.8,1216.8 1117.38,1215 1117.97,1212.16 1118.55,1213.39 1119.14,1211.9 1119.73,1207.59 1120.31,1203.8 1120.9,1202.76 1121.49,1201.83 1122.07,1203.35 1122.66,1199.68 1123.25,1200.2 1123.83,1204.25 1124.42,1206.13 1125.01,1207.61 1125.59,1206.38 1126.18,1206.59 1126.76,1206.84 1127.35,1206.87 1127.94,1204.47 1128.52,1208.01 1129.11,1208.26 1129.7,1208.6 1130.28,1205.75 1130.87,1208.6 1131.46,1206.02 1132.04,1205.82 1132.63,1205.99 1133.21,1207.71 1133.8,1206.38 1134.39,1205.18 1134.97,1206.53 1135.56,1209.26 1136.15,1210.62 1136.73,1209.24 1137.32,1209.3 1137.91,1209.28 1138.49,1210.51 1139.08,1210.18 1139.67,1210.35 1140.25,1209.19 1140.84,1209.13 1141.42,1210.3 1142.01,1208.89 1142.6,1208.76 1143.18,1208.76 1143.77,1211.15 1144.36,1209.96 1144.94,1211.19 1145.53,1208.29 1146.12,1211.07 1146.7,1211.16 1147.29,1213.78 1147.88,1212.2 1148.46,1213.31 1149.05,1214.34 1149.63,1212.63 1150.22,1217.79 1150.81,1215.96 1151.39,1212.67 1151.98,1211.31 1152.57,1211.16 1153.15,1212.07 1153.74,1212.03 1154.33,1212.2 1154.91,1212.23 1155.5,1214.67 1156.09,1212.99 1156.67,1212.63 1157.26,1211.06 1157.84,1211 1158.43,1208.28 1159.02,1209.48 1159.6,1210.74 1160.19,1209.28 1160.78,1209.38 1161.36,1209.04 1161.95,1207.88 1162.54,1206.49 1163.12,1202.92 1163.71,1195.03 1164.29,1194.46 1164.88,1198.02 1165.47,1198.67 1166.05,1199.29 1166.64,1198.67 1167.23,1197.9 1167.81,1194.7 1168.4,1194.05 1168.99,1194.95 1169.57,1197.18 1170.16,1199.55 1170.75,1198.59 1171.33,1202.17 1171.92,1203.98 1172.5,1204.33 1173.09,1204.68 1173.68,1206.63 1174.26,1208.24 1174.85,1209.69 1175.44,1212.1 1176.02,1214.69 1176.61,1215.57 1177.2,1215.26 1177.78,1214.92 1178.37,1217.6 1178.96,1214.77 1179.54,1214.63 1180.13,1218.27 1180.71,1220.73 1181.3,1219.01 1181.89,1217.31 1182.47,1215.63 1183.06,1217.73 1183.65,1217.19 1184.23,1216.78 1184.82,1216.44 1185.41,1217.36 1185.99,1218.17 1186.58,1217.61 1187.16,1219.69 1187.75,1219.29 1188.34,1220.06 1188.92,1219.68 1189.51,1219.04 1190.1,1218.81 1190.68,1218.38 1191.27,1216.64 1191.86,1216.47 1192.44,1217.5 1193.03,1218.51 1193.62,1216.74 1194.2,1216.17 1194.79,1218.44 1195.37,1220.57 1195.96,1221.12 1196.55,1220.6 1197.13,1220.25 1197.72,1219.88 1198.31,1217.8 1198.89,1219.9 1199.48,1220.9 1200.07,1218.86 1200.65,1218.27 1201.24,1220.44 1201.83,1218.29 1202.41,1216.36 1203,1217.32 1203.58,1212.78 1204.17,1212.5 1204.76,1212.2 1205.34,1210.83 1205.93,1209.45 1206.52,1208.22 1207.1,1209.33 1207.69,1210.52 1208.28,1210.37 1208.86,1206.08 1209.45,1206.42 1210.03,1205.25 1210.62,1208.25 1211.21,1208.22 1211.79,1208.24 1212.38,1205.5 1212.97,1205.55 1213.55,1206.8 1214.14,1205.58 1214.73,1207.38 1215.31,1210.09 1215.9,1210.1 1216.49,1209.92 1217.07,1208.64 1217.66,1208.62 1218.24,1208.78 1218.83,1211.76 1219.42,1206.31 1220,1206.21 1220.59,1207.81 1221.18,1207.76 1221.76,1209.1 1222.35,1211.89 1222.94,1211.76 1223.52,1214.15 1224.11,1211.32 1224.7,1212.92 1225.28,1212.57 1225.87,1213.97 1226.45,1212.56 1227.04,1212.2 1227.63,1212.36 1228.21,1209.74 1228.8,1206.88 1229.39,1208.39 1229.97,1208.49 1230.56,1206.98 1231.15,1208.4 1231.73,1204.45 1232.32,1203.32 1232.91,1206.5 1233.49,1206.54 1234.08,1207.95 1234.66,1208.07 1235.25,1209.49 1235.84,1210.92 1236.42,1209.35 1237.01,1209.12 1237.6,1206.35 1238.18,1206.69 1238.77,1207.01 1239.36,1208.42 1239.94,1206.96 1240.53,1207.15 1241.11,1209.88 1241.7,1209.64 1242.29,1212.18 1242.87,1210.94 1243.46,1209.14 1244.05,1209.01 1244.63,1209.18 1245.22,1207.89 1245.81,1206.72 1246.39,1205.38 1246.98,1207.06 1247.57,1208.78 1248.15,1208.96 1248.74,1210.49 1249.32,1207.66 1249.91,1208.91 1250.5,1207.99 1251.08,1209.55 1251.67,1210.72 1252.26,1210.61 1252.84,1211.87 1253.43,1208.83 1254.02,1208.89 1254.6,1207.44 1255.19,1207.45 1255.78,1206.29 1256.36,1204.77 1256.95,1203.59 1257.53,1205.27 1258.12,1212.5 1258.71,1212.38 1259.29,1210.96 1259.88,1209.54 1260.47,1208.33 1261.05,1211.07 1261.64,1213.76 1262.23,1213.89 1262.81,1213.92 1263.4,1213.73 1263.98,1212.16 1264.57,1213.3 1265.16,1211.68 1265.74,1209.36 1266.33,1209.46 1266.92,1210.79 1267.5,1210.82 1268.09,1214.61 1268.68,1213.1 1269.26,1212.77 1269.85,1209.72 1270.44,1206.91 1271.02,1206.93 1271.61,1205.35 1272.19,1208.14 1272.78,1210.92 1273.37,1209.51 1273.95,1209.72 1274.54,1206.78 1275.13,1207.11 1275.71,1206.12 1276.3,1205.87 1276.89,1204.56 1277.47,1206.37 1278.06,1207.83 1278.65,1210.47 1279.23,1215.83 1279.82,1215.86 1280.4,1215.92 1280.99,1214.04 1281.58,1213.62 1282.16,1214.66 1282.75,1210.59 1283.34,1210.43 1283.92,1211.6 1284.51,1210.25 1285.1,1211.44 1285.68,1216.56 1286.27,1214.98 1286.86,1213.43 1287.44,1213.51 1288.03,1210.34 1288.61,1206.01 1289.2,1203.66 1289.79,1207.97 1290.37,1202.54 1290.96,1198.94 1291.55,1198.01 1292.13,1198.4 1292.72,1200.17 1293.31,1202.13 1293.89,1202.44 1294.48,1202.91 1295.06,1208.77 1295.65,1208.57 1296.24,1208.63 1296.82,1207.53 1297.41,1207.72 1298,1206.53 1298.58,1210.85 1299.17,1209.63 1299.76,1206.89 1300.34,1205.74 1300.93,1201.62 1301.52,1200.53 1302.1,1199.16 1302.69,1202.32 1303.27,1205.55 1303.86,1205.73 1304.45,1209.98 1305.03,1212.84 1305.62,1208.81 1306.21,1208.83 1306.79,1208.7 1307.38,1207.21 1307.97,1208.55 1308.55,1205.76 1309.14,1207.25 1309.73,1207.33 1310.31,1208.69 1310.9,1211.63 1311.48,1211.49 1312.07,1211.12 1312.66,1211.12 1313.24,1211.06 1313.83,1212.24 1314.42,1213.55 1315,1215.9 1315.59,1214.27 1316.18,1214.07 1316.76,1213.85 1317.35,1213.67 1317.93,1213.29 1318.52,1211.73 1319.11,1213.13 1319.69,1214.28 1320.28,1215.18 1320.87,1215 1321.45,1214.51 1322.04,1211.45 1322.63,1211.33 1323.21,1209.71 1323.8,1208.24 1324.39,1211.14 1324.97,1213.61 1325.56,1211.78 1326.14,1209.21 1326.73,1210.6 1327.32,1210.71 1327.9,1209.17 1328.49,1209.19 1329.08,1209.22 1329.66,1209.2 1330.25,1212.19 1330.84,1213.21 1331.42,1211.78 1332.01,1210.24 1332.6,1208.72 1333.18,1210.16 1333.77,1207.6 1334.35,1204.95 1334.94,1203.78 1335.53,1204 1336.11,1205.53 1336.7,1204.5 1337.29,1207.42 1337.87,1207.68 1338.46,1207.67 1339.05,1206.22 1339.63,1206.59 1340.22,1209.26 1340.8,1209.06 1341.39,1210.36 1341.98,1210.74 1342.56,1212.05 1343.15,1212.3 1343.74,1212.36 1344.32,1211.05 1344.91,1210.97 1345.5,1208.4 1346.08,1208.61 1346.67,1210 1347.26,1207.33 1347.84,1207.6 1348.43,1206.44 1349.01,1208.14 1349.6,1208.4 1350.19,1209.75 1350.77,1207.14 1351.36,1205.76 1351.95,1206.21 1352.53,1206.57 1353.12,1209.59 1353.71,1209.7 1354.29,1208.32 1354.88,1209.62 1355.47,1209.76 1356.05,1212.53 1356.64,1212.17 1357.22,1213.2 1357.81,1213.05 1358.4,1214 1358.98,1213.71 1359.57,1214.54 1360.16,1212.82 1360.74,1211.35 1361.33,1212.51 1361.92,1210.84 1362.5,1209.24 1363.09,1207.81 1363.68,1208.01 1364.26,1209.51 1364.85,1209.34 1365.43,1209.48 1366.02,1211.92 1366.61,1210.21 1367.19,1209.74 1367.78,1211.13 1368.37,1210.83 1368.95,1209.4 1369.54,1209.33 1370.13,1210.87 1370.71,1211.29 1371.3,1211.34 1371.88,1209.99 1372.47,1211.39 1373.06,1212.64 1373.64,1214.96 1374.23,1217.51 1374.82,1217.01 1375.4,1216.44 1375.99,1216.3 1376.58,1217.06 1377.16,1216.67 1377.75,1216.67 1378.34,1217.68 1378.92,1214.71 1379.51,1215.79 1380.09,1215.38 1380.68,1212.37 1381.27,1213.22 1381.85,1211.75 1382.44,1208.79 1383.03,1207.45 1383.61,1206.11 1384.2,1207.57 1384.79,1208.69 1385.37,1205.92 1385.96,1204.88 1386.55,1203.3 1387.13,1203.45 1387.72,1202.3 1388.3,1200.96 1388.89,1201.77 1389.48,1202.21 1390.06,1202.64 1390.65,1201.8 1391.24,1198.2 1391.82,1200 1392.41,1203.16 1393,1201.68 1393.58,1203.35 1394.17,1202.08 1394.75,1201.06 1395.34,1199.88 1395.93,1200.27 1396.51,1198.4 1397.1,1199.1 1397.69,1202.23 1398.27,1203.86 1398.86,1206.83 1399.45,1211.15 1400.03,1210.6 1400.62,1211.92 1401.21,1213.17 1401.79,1212.83 1402.38,1212.79 1402.96,1209.95 1403.55,1211.33 1404.14,1212.54 1404.72,1212.17 1405.31,1211.91 1405.9,1209.1 1406.48,1209.13 1407.07,1210.74 1407.66,1214.73 1408.24,1210.61 1408.83,1209.49 1409.42,1209.27 1410,1208.09 1410.59,1208.33 1411.17,1211.36 1411.76,1208.76 1412.35,1208.03 1412.93,1209.38 1413.52,1209.3 1414.11,1213.38 1414.69,1218.35 1415.28,1217.87 1415.87,1218.48 1416.45,1216.69 1417.04,1214.9 1417.63,1212 1418.21,1210.96 1418.8,1206.86 1419.38,1208.5 1419.97,1207.29 1420.56,1208.66 1421.14,1207.39 1421.73,1204.87 1422.32,1199.85 1422.9,1199.08 1423.49,1200.84 1424.08,1199.99 1424.66,1201.77 1425.25,1202.29 1425.83,1202.51 1426.42,1205.68 1427.01,1205.83 1427.59,1205.94 1428.18,1204.59 1428.77,1206.38 1429.35,1206.72 1429.94,1208.39 1430.53,1207.19 1431.11,1205.96 1431.7,1207.43 1432.29,1208.9 1432.87,1210.32 1433.46,1212.73 1434.04,1213.99 1434.63,1217.71 1435.22,1217.26 1435.8,1215.46 1436.39,1214.9 1436.98,1211.91 1437.56,1210.35 1438.15,1211.48 1438.74,1213.95 1439.32,1213.84 1439.91,1213.73 1440.5,1214.82 1441.08,1214.34 1441.67,1212.6 1442.25,1215.03 1442.84,1213.85 1443.43,1214.78 1444.01,1214.47 1444.6,1215.47 1445.19,1216.67 1445.77,1214.93 1446.36,1216.06 1446.95,1210.32 1447.53,1210.33 1448.12,1214.21 1448.7,1212.51 1449.29,1213.75 1449.88,1209.36 1450.46,1207.91 1451.05,1206.68 1451.64,1205.11 1452.22,1206.67 1452.81,1204.28 1453.4,1204.47 1453.98,1202.1 1454.57,1203.93 1455.16,1202.74 1455.74,1202 1456.33,1203.85 1456.91,1202.7 1457.5,1204.31 1458.09,1199.13 1458.67,1198.49 1459.26,1200.5 1459.85,1199.81 1460.43,1200.07 1461.02,1203.21 1461.61,1207.68 1462.19,1206.14 1462.78,1204.9 1463.37,1207.41 1463.95,1210.19 1464.54,1211.54 1465.12,1214.02 1465.71,1213.71 1466.3,1212.16 1466.88,1212.16 1467.47,1210.7 1468.06,1211.99 1468.64,1209.05 1469.23,1210.37 1469.82,1207.55 1470.4,1207.45 1470.99,1207.28 1471.57,1206 1472.16,1207.59 1472.75,1207.81 1473.33,1208.38 1473.92,1204.32 1474.51,1206.19 1475.09,1207.78 1475.68,1209.18 1476.27,1209 1476.85,1207.81 1477.44,1209.52 1478.03,1208.36 1478.61,1209.8 1479.2,1210 1479.78,1209.85 1480.37,1208.18 1480.96,1207.15 1481.54,1212.43 1482.13,1213.62 1482.72,1212.23 1483.3,1213.29 1483.89,1210.54 1484.48,1211.63 1485.06,1211.33 1485.65,1214.01 1486.24,1212.3 1486.82,1210.96 1487.41,1213.63 1487.99,1213.12 1488.58,1212.9 1489.17,1216.73 1489.75,1213.74 1490.34,1213.45 1490.93,1214.69 1491.51,1215.59 1492.1,1215.15 1492.69,1214.6 1493.27,1215.63 1493.86,1218.03 1494.45,1217.75 1495.03,1217.54 1495.62,1216.96 1496.2,1214.18 1496.79,1214.01 1497.38,1213.67 1497.96,1212.35 1498.55,1212.99 1499.14,1212.77 1499.72,1211.36 1500.31,1212.54 1500.9,1211.01 1501.48,1212.17 1502.07,1213.11 1502.65,1211.61 1503.24,1206.39 1503.83,1205.11 1504.41,1202.64 1505,1203.05 1505.59,1200.73 1506.17,1201.2 1506.76,1202.97 1507.35,1204.94 1507.93,1203.74 1508.52,1205.22 1509.11,1206.82 1509.69,1205.26 1510.28,1205.28 1510.86,1207.04 1511.45,1204.39 1512.04,1204.87 1512.62,1205.21 1513.21,1203.69 1513.8,1201.17 1514.38,1202.97 1514.97,1203.56 1515.56,1205.15 1516.14,1205.22 1516.73,1205.49 1517.32,1202.96 1517.9,1203.42 1518.49,1203.71 1519.07,1203.88 1519.66,1205.37 1520.25,1204.05 1520.83,1204.52 1521.42,1204.95 1522.01,1206.35 1522.59,1206.64 1523.18,1209.36 1523.77,1212.03 1524.35,1211.88 1524.94,1212.15 1525.52,1210.74 1526.11,1212.2 1526.7,1213.51 1527.28,1213.44 1527.87,1210.71 1528.46,1212.14 1529.04,1210.75 1529.63,1210.68 1530.22,1212.1 1530.8,1211.93 1531.39,1211.83 1531.98,1211.68 1532.56,1211.52 1533.15,1208.93 1533.73,1210.46 1534.32,1212.63 1534.91,1209.86 1535.49,1212.04 1536.08,1213.21 1536.67,1211.68 1537.25,1212.67 1537.84,1211.25 1538.43,1210.03 1539.01,1211.48 1539.6,1212.66 1540.19,1211.37 1540.77,1210.11 1541.36,1209.84 1541.94,1211.16 1542.53,1209.68 1543.12,1206.76 1543.7,1205.82 1544.29,1207.34 1544.88,1207.4 1545.46,1207.36 1546.05,1210.03 1546.64,1208.79 1547.22,1207.33 1547.81,1210.02 1548.4,1210.38 1548.98,1213.02 1549.57,1212.92 1550.15,1214.19 1550.74,1210.01 1551.33,1212.66 1551.91,1212.09 1552.5,1210.77 1553.09,1210.46 1553.67,1210.23 1554.26,1207.39 1554.85,1208.87 1555.43,1210.06 1556.02,1212.63 1556.6,1211.17 1557.19,1211.22 1557.78,1210.91 1558.36,1216.12 1558.95,1217.07 1559.54,1216.57 1560.12,1216.27 1560.71,1213.39 1561.3,1209.13 1561.88,1209.07 1562.47,1210.64 1563.06,1211.68 1563.64,1211.62 1564.23,1211.65 1564.81,1214.48 1565.4,1211.58 1565.99,1215.43 1566.57,1212.01 1567.16,1211.72 1567.75,1208.86 1568.33,1207.6 1568.92,1204.86 1569.51,1204.12 1570.09,1204.37 1570.68,1204.66 1571.27,1206.44 1571.85,1205.43 1572.44,1205.64 1573.02,1207.17 1573.61,1207.33 1574.2,1207.57 1574.78,1207.78 1575.37,1207.91 1575.96,1207.96 1576.54,1200.18 1577.13,1199.2 1577.72,1204.01 1578.3,1206.88 1578.89,1205.59 1579.47,1205.68 1580.06,1206.05 1580.65,1205.91 1581.23,1206.16 1581.82,1206.53 1582.41,1202.61 1582.99,1202.66 1583.58,1205.9 1584.17,1206.24 1584.75,1207.75 1585.34,1203.66 1585.93,1207.84 1586.51,1208.24 1587.1,1205.52 1587.68,1209.94 1588.27,1210.08 1588.86,1209.91 1589.44,1209.77 1590.03,1211.06 1590.62,1211.06 1591.2,1212.47 1591.79,1210.91 1592.38,1209.76 1592.96,1209.88 1593.55,1209.95 1594.14,1207.48 1594.72,1207.86 1595.31,1207.91 1595.89,1207.94 1596.48,1205.66 1597.07,1206.06 1597.65,1207.73 1598.24,1209.03 1598.83,1213.48 1599.41,1211.99 1600,1214.76 1600.59,1214.52 1601.17,1215.77 1601.76,1216.87 1602.34,1215.11 1602.93,1214.46 1603.52,1215.7 1604.1,1215.6 1604.69,1217.94 1605.28,1217.73 1605.86,1215.78 1606.45,1217.92 1607.04,1217.48 1607.62,1215.64 1608.21,1214.21 1608.8,1215.29 1609.38,1214.96 1609.97,1214.48 1610.55,1215.58 1611.14,1212.48 1611.73,1212.15 1612.31,1209.62 1612.9,1208.39 1613.49,1208.48 1614.07,1208.36 1614.66,1205.58 1615.25,1205.63 1615.83,1205.75 1616.42,1205.91 1617.01,1206.22 1617.59,1208.84 1618.18,1209.09 1618.76,1211.69 1619.35,1210.41 1619.94,1208.8 1620.52,1210.09 1621.11,1210.25 1621.7,1211.69 1622.28,1208.91 1622.87,1208.81 1623.46,1204.62 1624.04,1207.56 1624.63,1208.82 1625.22,1208.95 1625.8,1211.74 1626.39,1211.44 1626.97,1215.11 1627.56,1212.2 1628.15,1213.3 1628.73,1210.37 1629.32,1215.73 1629.91,1215.41 1630.49,1209.76 1631.08,1209.61 1631.67,1206.57 1632.25,1209.22 1632.84,1210.28 1633.42,1211.39 1634.01,1208.72 1634.6,1207.27 1635.18,1204.59 1635.77,1202.01 1636.36,1203.73 1636.94,1207.82 1637.53,1209.17 1638.12,1209.27 1638.7,1209.24 1639.29,1211.96 1639.88,1210.27 1640.46,1210.1 1641.05,1208.68 1641.63,1207.67 1642.22,1206.21 1642.81,1206.48 1643.39,1206.44 1643.98,1203.74 1644.57,1202.66 1645.15,1204.2 1645.74,1203.19 1646.33,1204.74 1646.91,1207.67 1647.5,1206.43 1648.09,1205.34 1648.67,1207.11 1649.26,1206.92 1649.84,1205.49 1650.43,1205.56 1651.02,1208.85 1651.6,1211.76 1652.19,1212.71 1652.78,1211.37 1653.36,1209.76 1653.95,1206.97 1654.54,1209.92 1655.12,1208.74 1655.71,1207.7 1656.29,1212.31 1656.88,1212.31 1657.47,1210.84 1658.05,1214.79 1658.64,1217.12 1659.23,1217.81 1659.81,1216.14 1660.4,1215.83 1660.99,1219.32 1661.57,1216.28 1662.16,1217.29 1662.75,1216.88 1663.33,1215.33 1663.92,1217.61 1664.5,1215.75 1665.09,1212.67 1665.68,1212.37 1666.26,1210.75 1666.85,1212.27 1667.44,1210.86 1668.02,1212.1 1668.61,1210.5 1669.2,1214.45 1669.78,1208.85 1670.37,1205.87 1670.96,1204.66 1671.54,1203.59 1672.13,1201.17 1672.71,1202.98 1673.3,1201.86 1673.89,1200.78 1674.47,1201.02 1675.06,1200.37 1675.65,1202.07 1676.23,1201.14 1676.82,1201.41 1677.41,1201.89 1677.99,1202.15 1678.58,1205.15 1679.17,1205.57 1679.75,1207.19 1680.34,1208.77 1680.92,1207.13 1681.51,1205.98 1682.1,1206.55 1682.68,1206.67 1683.27,1205.49 1683.86,1205.5 1684.44,1203.3 1685.03,1204.94 1685.62,1210.64 1686.2,1210.73 1686.79,1210.5 1687.37,1211.76 1687.96,1211.63 1688.55,1210.46 1689.13,1211.67 1689.72,1211.77 1690.31,1211.74 1690.89,1214.44 1691.48,1214.41 1692.07,1214.14 1692.65,1215.22 1693.24,1214.88 1693.83,1214.61 1694.41,1214.66 1695,1214.33 1695.58,1215.5 1696.17,1216.36 1696.76,1220.27 1697.34,1221.12 1697.93,1220.34 1698.52,1218.44 1699.1,1217.91 1699.69,1217.67 1700.28,1217.05 1700.86,1217.77 1701.45,1217.17 1702.04,1216.94 1702.62,1215.31 1703.21,1217.9 1703.79,1217.48 1704.38,1218.32 1704.97,1216.36 1705.55,1214.46 1706.14,1212.82 1706.73,1212.58 1707.31,1214.93 1707.9,1210.45 1708.49,1209.35 1709.07,1207.9 1709.66,1206.54 1710.24,1205.39 1710.83,1205.75 1711.42,1205.81 1712,1205.95 1712.59,1206.11 1713.18,1208.7 1713.76,1207.08 1714.35,1207.51 1714.94,1213.05 1715.52,1214.47 1716.11,1212.65 1716.7,1208.64 1717.28,1206.26 1717.87,1202.33 1718.45,1201.62 1719.04,1200.68 1719.63,1199.61 1720.21,1201.43 1720.8,1201.71 1721.39,1203.66 1721.97,1205.41 1722.56,1204.26 1723.15,1207.32 1723.73,1206.14 1724.32,1204.69 1724.91,1203.4 1725.49,1205.01 1726.08,1205.06 1726.66,1205.32 1727.25,1205.34 1727.84,1205.37 1728.42,1205.48 1729.01,1208.37 1729.6,1209.66 1730.18,1210.9 1730.77,1206.81 1731.36,1207.17 1731.94,1207.39 1732.53,1208.9 1733.11,1209.22 1733.7,1210.69 1734.29,1207.84 1734.87,1205.64 1735.46,1204.41 1736.05,1204.69 1736.63,1202.26 1737.22,1202.4 1737.81,1202.97 1738.39,1202.26 1738.98,1202.82 1739.57,1203.26 1740.15,1206.16 1740.74,1206.45 1741.32,1206.87 1741.91,1206.93 1742.5,1208.36 1743.08,1206.99 1743.67,1207.01 1744.26,1207.03 1744.84,1205.91 1745.43,1207.43 1746.02,1206.26 1746.6,1205.07 1747.19,1206.81 1747.78,1205.63 1748.36,1207.29 1748.95,1204.81 1749.53,1205.23 1750.12,1204.13 1750.71,1205.7 1751.29,1208.71 1751.88,1208.46 1752.47,1209.66 1753.05,1208.22 1753.64,1208.34 1754.23,1211.11 1754.81,1206.94 1755.4,1207.08 1755.99,1205.8 1756.57,1204.46 1757.16,1200.69 1757.74,1203.84 1758.33,1202.95 1758.92,1204.63 1759.5,1207.63 1760.09,1206.19 1760.68,1203.59 1761.26,1202.53 1761.85,1201.6 1762.44,1202.01 1763.02,1202.3 1763.61,1201.39 1764.19,1201.9 1764.78,1203.42 1765.37,1200.98 1765.95,1205.46 1766.54,1206.83 1767.13,1207.27 1767.71,1210.38 1768.3,1211.72 1768.89,1211.62 1769.47,1210.2 1770.06,1210.23 1770.65,1208.69 1771.23,1210.21 1771.82,1208.77 1772.4,1208.62 1772.99,1207.05 1773.58,1207.25 1774.16,1208.64 1774.75,1206.01 1775.34,1203.41 1775.92,1202.3 1776.51,1207.17 1777.1,1207.33 1777.68,1206.08 1778.27,1206.39 1778.86,1206.66 1779.44,1203.05 1780.03,1204.6 1780.61,1204.53 1781.2,1205.98 1781.79,1206.03 1782.37,1206.48 1782.96,1205.21 1783.55,1205.27 1784.13,1208.07 1784.72,1208.25 1785.31,1209.28 1785.89,1207.85 1786.48,1203.84 1787.06,1204.12 1787.65,1203.1 1788.24,1202.15 1788.82,1201.2 1789.41,1202.91 1790,1203.2 1790.58,1204.57 1791.17,1203.59 1791.76,1204.97 1792.34,1205.29 1792.93,1210.95 1793.52,1209.52 1794.1,1209.31 1794.69,1209.26 1795.27,1214.39 1795.86,1212.79 1796.45,1210.11 1797.03,1212.55 1797.62,1213.81 1798.21,1213.52 1798.79,1213.26 1799.38,1214.25 1799.97,1213.86 1800.55,1212.28 1801.14,1212.13 1801.73,1213.65 1802.31,1212.26 1802.9,1215.81 1803.48,1214.4 1804.07,1207.38 1804.66,1207.49 1805.24,1206.26 1805.83,1207.84 1806.42,1206.83 1807,1206.98 1807.59,1207.32 1808.18,1206.11 1808.76,1206.25 1809.35,1209.13 1809.94,1209.23 1810.52,1209.21 1811.11,1210.44 1811.69,1207.57 1812.28,1209.03 1812.87,1208.87 1813.45,1208.81 1814.04,1212.66 1814.63,1216.3 1815.21,1215.86 1815.8,1215.49 1816.39,1213.69 1816.97,1213.43 1817.56,1211.63 1818.14,1210.17 1818.73,1211.4 1819.32,1209.95 1819.9,1211.02 1820.49,1210.94 1821.08,1210.79 1821.66,1212.02 1822.25,1212.05 1822.84,1213.27 1823.42,1211.68 1824.01,1213.07 1824.6,1211.55 1825.18,1210.06 1825.77,1211.43 1826.35,1212.57 1826.94,1212.44 1827.53,1210.67 1828.11,1206.88 1828.7,1207.17 1829.29,1210.02 1829.87,1206.99 1830.46,1206.96 1831.05,1208.48 1831.63,1207.52 1832.22,1209.04 1832.81,1209.06 1833.39,1206.44 1833.98,1209.12 1834.56,1209.2 1835.15,1207.99 1835.74,1209.53 1836.32,1211.16 1836.91,1213.95 1837.5,1213.71 1838.08,1210.47 1838.67,1209.15 1839.26,1209.38 1839.84,1210.62 1840.43,1210.59 1841.01,1210.59 1841.6,1211.82 1842.19,1208.95 1842.77,1211.67 1843.36,1212.94 1843.95,1211.44 1844.53,1209.76 1845.12,1207.27 1845.71,1206.93 1846.29,1207.13 1846.88,1207.46 1847.47,1208.62 1848.05,1208.77 1848.64,1206.42 1849.22,1206.88 1849.81,1205.41 1850.4,1206.92 1850.98,1208.79 1851.57,1207.6 1852.16,1209.22 1852.74,1207.72 1853.33,1210.07 1853.92,1211.41 1854.5,1207.26 1855.09,1212.91 1855.68,1215.22 1856.26,1217.44 1856.85,1218.28 1857.43,1213.64 1858.02,1213.24 1858.61,1214.49 1859.19,1214.24 1859.78,1211.2 1860.37,1211.06 1860.95,1206.84 1861.54,1209.93 1862.13,1209.97 1862.71,1212.58 1863.3,1215.05 1863.88,1216.14 1864.47,1214.39 1865.06,1212.8 1865.64,1211.17 1866.23,1211.23 1866.82,1209.9 1867.4,1208.48 1867.99,1207.51 1868.58,1208.13 1869.16,1208.47 1869.75,1209.86 1870.34,1211.24 1870.92,1213.81 1871.51,1213.85 1872.09,1215.07 1872.68,1212.16 1873.27,1213.06 1873.85,1213.01 1874.44,1212.69 1875.03,1212.25 1875.61,1209.14 1876.2,1209.12 1876.79,1207.76 1877.37,1209.18 1877.96,1210.45 1878.55,1212.03 1879.13,1211.91 1879.72,1207.67 1880.3,1207.72 1880.89,1207.9 1881.48,1206.39 1882.06,1205.26 1882.65,1205.47 1883.24,1207.05 1883.82,1205.74 1884.41,1207.5 1885,1206.27 1885.58,1207.97 1886.17,1210.85 1886.76,1209.09 1887.34,1211.81 1887.93,1210.5 1888.51,1211.88 1889.1,1211.82 1889.69,1211.63 1890.27,1210.01 1890.86,1208.7 1891.45,1208.89 1892.03,1210.37 1892.62,1214.18 1893.21,1213.89 1893.79,1213.88 1894.38,1212.35 1894.96,1212.13 1895.55,1211.94 1896.14,1211.82 1896.72,1212.91 1897.31,1215 1897.9,1214.66 1898.48,1214.27 1899.07,1212.66 1899.66,1213.92 1900.24,1210.85 1900.83,1207.86 1901.42,1207.52 1902,1207.55 1902.59,1207.56 1903.17,1207.59 1903.76,1210.25 1904.35,1210.03 1904.93,1208.52 1905.52,1208.76 1906.11,1208.99 1906.69,1207.71 1907.28,1206.38 1907.87,1206.66 1908.45,1205.55 1909.04,1205.92 1909.63,1206.11 1910.21,1207.57 1910.8,1209.14 1911.38,1209.38 1911.97,1206.69 1912.56,1208.15 1913.14,1209.54 1913.73,1209.55 1914.32,1207.93 1914.9,1208.16 1915.49,1208.46 1916.08,1209.92 1916.66,1206.91 1917.25,1203.21 1917.83,1203.28 1918.42,1205.03 1919.01,1205.3 1919.59,1205.64 1920.18,1207.3 1920.77,1207.32 1921.35,1209.99 1921.94,1207.19 1922.53,1208.88 1923.11,1209.98 1923.7,1211.56 1924.29,1212.59 1924.87,1213.88 1925.46,1213.7 1926.04,1216.33 1926.63,1218.73 1927.22,1219.55 1927.8,1220.4 1928.39,1221.23 1928.98,1221.91 1929.56,1222.53 1930.15,1220.72 1930.74,1221.67 1931.32,1221.1 1931.91,1220.11 1932.5,1218.32 1933.08,1216.32 1933.67,1213.11 1934.25,1211.56 1934.84,1212.8 1935.43,1213.94 1936.01,1213.54 1936.6,1214.72 1937.19,1209.06 1937.77,1210.38 1938.36,1211.46 1938.95,1214 1939.53,1212.54 1940.12,1212.08 1940.71,1211.88 1941.29,1208.73 1941.88,1207.67 1942.46,1207.55 1943.05,1208.88 1943.64,1206.15 1944.22,1203.39 1944.81,1201.33 1945.4,1201.84 1945.98,1198.36 1946.57,1200.36 1947.16,1196.83 1947.74,1202.93 1948.33,1199.07 1948.91,1199.77 1949.5,1200.23 1950.09,1203.35 1950.67,1204.97 1951.26,1203.83 1951.85,1202.69 1952.43,1199.02 1953.02,1196.97 1953.61,1198.99 1954.19,1199.27 1954.78,1197.27 1955.37,1200.49 1955.95,1200.93 1956.54,1196.23 1957.12,1199.77 1957.71,1201.58 1958.3,1202.06 1958.88,1205.24 1959.47,1202.86 1960.06,1204.53 1960.64,1204.55 1961.23,1204.82 1961.82,1205.08 1962.4,1205.38 1962.99,1204.03 1963.58,1206.65 1964.16,1210.68 1964.75,1209.25 1965.33,1210.7 1965.92,1209.15 1966.51,1209.33 1967.09,1212.04 1967.68,1211.93 1968.27,1211.79 1968.85,1211.65 1969.44,1211.51 1970.03,1215.29 1970.61,1215.17 1971.2,1215.81 1971.78,1215.67 1972.37,1215.41 1972.96,1213.5 1973.54,1213.31 1974.13,1213.13 1974.72,1209.15 1975.3,1209.07 1975.89,1209.09 1976.48,1211.72 1977.06,1211.74 1977.65,1210.43 1978.24,1213.02 1978.82,1210.36 1979.41,1210.36 1979.99,1210.41 1980.58,1208.91 1981.17,1210.44 1981.75,1211.48 1982.34,1211.25 1982.93,1209.79 1983.51,1210.08 1984.1,1212.55 1984.69,1209.94 1985.27,1205.82 1985.86,1207.35 1986.45,1207.36 1987.03,1211.59 1987.62,1214.18 1988.2,1213.94 1988.79,1216.47 1989.38,1216.1 1989.96,1214.61 1990.55,1215.92 1991.14,1214.17 1991.72,1215.1 1992.31,1214.64 1992.9,1215.59 1993.48,1220.52 1994.07,1221.01 1994.65,1218.97 1995.24,1218.46 1995.83,1213.91 1996.41,1211.22 1997,1213.87 1997.59,1209.71 1998.17,1210.99 1998.76,1206.71 1999.35,1206.83 1999.93,1207.06 2000.52,1205.82 2001.11,1206.03 2001.69,1207.75 2002.28,1209.33 2002.86,1210.58 2003.45,1207.79 2004.04,1207.96 2004.62,1207 2005.21,1209.85 2005.8,1209.52 2006.38,1209.29 2006.97,1207.87 2007.56,1209.45 2008.14,1209.94 2008.73,1208.67 2009.32,1208.65 2009.9,1211.65 2010.49,1214.58 2011.07,1215.48 2011.66,1216.51 2012.25,1218.97 2012.83,1215.71 2013.42,1215.39 2014.01,1213.83 2014.59,1211.01 2015.18,1211.02 2015.77,1210.96 2016.35,1212.01 2016.94,1211.89 2017.53,1211.52 2018.11,1208.83 2018.7,1208.94 2019.28,1208.9 2019.87,1210.25 2020.46,1206.45 2021.04,1208.18 2021.63,1207.23 2022.22,1208.75 2022.8,1210.42 2023.39,1210.68 2023.98,1213.27 2024.56,1215.4 2025.15,1213.92 2025.73,1213.69 2026.32,1214.78 2026.91,1215.82 2027.49,1215.49 2028.08,1213.84 2028.67,1214.97 2029.25,1214.56 2029.84,1214.2 2030.43,1213.86 2031.01,1213.08 2031.6,1212.82 2032.19,1211.31 2032.77,1208.5 2033.36,1208.76 2033.94,1210.14 2034.53,1212.69 2035.12,1212.62 2035.7,1213.83 2036.29,1210.9 2036.88,1209.55 2037.46,1209.58 2038.05,1209.8 2038.64,1208.35 2039.22,1209.34 2039.81,1205.31 2040.4,1204.02 2040.98,1204.21 2041.57,1204.46 2042.15,1203.61 2042.74,1202.44 2043.33,1201.44 2043.91,1204.53 2044.5,1204.71 2045.09,1206.05 2045.67,1207.78 2046.26,1207.84 2046.85,1209.26 2047.43,1210.67 2048.02,1212.04 2048.6,1210.41 2049.19,1210.37 2049.78,1212.01 2050.36,1212.03 2050.95,1214.58 2051.54,1211.47 2052.12,1211.37 2052.71,1209.84 2053.3,1208.62 2053.88,1208.62 2054.47,1208.51 2055.06,1205.99 2055.64,1205.99 2056.23,1204.88 2056.81,1202.43 2057.4,1201.43 2057.99,1203.32 2058.57,1204.85 2059.16,1207.83 2059.75,1206.21 2060.33,1206.59 2060.92,1205.21 2061.51,1206.59 2062.09,1205.42 2062.68,1201.6 2063.27,1199.58 2063.85,1201.43 2064.44,1204.7 2065.02,1205.08 2065.61,1205.39 2066.2,1204.42 2066.78,1204.51 2067.37,1206.25 2067.96,1205.3 2068.54,1205.63 2069.13,1207.28 2069.72,1209.01 2070.3,1211.85 2070.89,1212.02 2071.48,1210.27 2072.06,1207.27 2072.65,1208.81 2073.23,1212.66 2073.82,1211.19 2074.41,1209.46 2074.99,1209.13 2075.58,1208.87 2076.17,1210.17 2076.75,1211.64 2077.34,1210.45 2077.93,1210.35 2078.51,1211.77 2079.1,1211.87 2079.68,1210.67 2080.27,1209.03 2080.86,1206.34 2081.44,1210.53 2082.03,1209.21 2082.62,1207.77 2083.2,1210.76 2083.79,1209.12 2084.38,1212.19 2084.96,1212.22 2085.55,1210.81 2086.14,1213.08 2086.72,1215.68 2087.31,1218.2 2087.89,1216.32 2088.48,1214.52 2089.07,1215.71 2089.65,1212.7 2090.24,1213.8 2090.83,1214.64 2091.41,1212.93 2092,1214.17 2092.59,1212.59 2093.17,1211.01 2093.76,1208.13 2094.35,1206.83 2094.93,1208.41 2095.52,1205.9 2096.1,1207.51 2096.69,1209.01 2097.28,1209.18 2097.86,1207.88 2098.45,1208.12 2099.04,1206.74 2099.62,1206.98 2100.21,1208.38 2100.8,1209.65 2101.38,1209.47 2101.97,1209.54 2102.55,1212.35 2103.14,1210.98 2103.73,1212.33 2104.31,1209.32 2104.9,1211.89 2105.49,1214.16 2106.07,1217.66 2106.66,1218.37 2107.25,1215.45 2107.83,1213.91 2108.42,1214.86 2109.01,1214.67 2109.59,1214.48 2110.18,1215.61 2110.76,1215.21 2111.35,1217.52 2111.94,1214.37 2112.52,1212.78 2113.11,1212.88 2113.7,1211.32 2114.28,1215.3 2114.87,1215.04 2115.46,1213.23 2116.04,1213.09 2116.63,1212.86 2117.22,1212.27 2117.8,1214.6 2118.39,1214.34 2118.97,1211.56 2119.56,1211.51 2120.15,1212.8 2120.73,1214.14 2121.32,1209.94 2121.91,1205.61 2122.49,1207.05 2123.08,1208.5 2123.67,1208.46 2124.25,1208.47 2124.84,1205.82 2125.42,1204.53 2126.01,1209.09 2126.6,1210.36 2127.18,1208.71 2127.77,1212.74 2128.36,1212.28 2128.94,1210.8 2129.53,1213.26 2130.12,1211.34 2130.7,1209.64 2131.29,1209.72 2131.88,1210.02 2132.46,1210.24 2133.05,1207.48 2133.63,1208.85 2134.22,1207.72 2134.81,1206.52 2135.39,1206.89 2135.98,1209.6 2136.57,1205.61 2137.15,1206.11 2137.74,1203.75 2138.33,1203.83 2138.91,1201.64 2139.5,1200.7 2140.09,1201.01 2140.67,1200.06 2141.26,1199 2141.84,1199.44 2142.43,1200.89 2143.02,1199.9 2143.6,1200.39 2144.19,1201.2 2144.78,1202.91 2145.36,1200.5 2145.95,1199.76 2146.54,1202.83 2147.12,1205.58 2147.71,1207.31 2148.3,1208.76 2148.88,1210.17 2149.47,1211.72 2150.05,1211.8 2150.64,1211.43 2151.23,1217.9 2151.81,1217.5 2152.4,1215.78 2152.99,1214.25 2153.57,1214.22 2154.16,1218.14 2154.75,1217.63 2155.33,1215.87 2155.92,1213.93 2156.5,1213.81 2157.09,1212.47 2157.68,1211.06 2158.26,1208.15 \"/>\n<path clip-path=\"url(#clip932)\" d=\"M986.025 1209.99 L986.612 1209.99 L987.198 1209.99 L987.785 1209.99 L988.371 1209.99 L988.957 1209.99 L989.544 1209.99 L990.13 1209.99 L990.717 1209.99 L991.303 1209.99 L991.889 1209.99 L992.476 1209.99 L993.062 1209.99 L993.649 1209.99 L994.235 1209.99 L994.822 1209.99 L995.408 1209.99 L995.994 1209.99 L996.581 1209.99 L997.167 1209.99 L997.754 1209.99 L998.34 1209.99 L998.926 1209.99 L999.513 1209.99 L1000.1 1209.99 L1000.69 1209.99 L1001.27 1209.99 L1001.86 1209.99 L1002.44 1209.99 L1003.03 1209.99 L1003.62 1209.99 L1004.2 1209.99 L1004.79 1209.99 L1005.38 1209.99 L1005.96 1209.99 L1006.55 1209.99 L1007.14 1209.99 L1007.72 1209.99 L1008.31 1209.99 L1008.9 1209.99 L1009.48 1209.99 L1010.07 1209.99 L1010.65 1209.99 L1011.24 1209.99 L1011.83 1209.99 L1012.41 1209.99 L1013 1209.99 L1013.59 1209.99 L1014.17 1209.99 L1014.76 1209.99 L1015.35 1209.99 L1015.93 1209.99 L1016.52 1209.99 L1017.11 1209.99 L1017.69 1209.99 L1018.28 1209.99 L1018.86 1209.99 L1019.45 1209.99 L1020.04 1209.99 L1020.62 1209.99 L1021.21 1209.99 L1021.8 1209.99 L1022.38 1209.99 L1022.97 1209.99 L1023.56 1209.99 L1024.14 1209.99 L1024.73 1209.99 L1025.32 1209.99 L1025.9 1209.99 L1026.49 1209.99 L1027.07 1209.99 L1027.66 1209.99 L1028.25 1209.99 L1028.83 1209.99 L1029.42 1209.99 L1030.01 1209.99 L1030.59 1209.99 L1031.18 1209.99 L1031.77 1209.99 L1032.35 1209.99 L1032.94 1209.99 L1033.52 1209.99 L1034.11 1209.99 L1034.7 1209.99 L1035.28 1209.99 L1035.87 1209.99 L1036.46 1209.99 L1037.04 1209.99 L1037.63 1209.99 L1038.22 1209.99 L1038.8 1209.99 L1039.39 1209.99 L1039.98 1209.99 L1040.56 1209.99 L1041.15 1209.99 L1041.73 1209.99 L1042.32 1209.99 L1042.91 1209.99 L1043.49 1209.99 L1044.08 1209.99 L1044.67 1209.99 L1045.25 1209.99 L1045.84 1209.99 L1046.43 1209.99 L1047.01 1209.99 L1047.6 1209.99 L1048.19 1209.99 L1048.77 1209.99 L1049.36 1209.99 L1049.94 1209.99 L1050.53 1209.99 L1051.12 1209.99 L1051.7 1209.99 L1052.29 1209.99 L1052.88 1209.99 L1053.46 1209.99 L1054.05 1209.99 L1054.64 1209.99 L1055.22 1209.99 L1055.81 1209.99 L1056.39 1209.99 L1056.98 1209.99 L1057.57 1209.99 L1058.15 1209.99 L1058.74 1209.99 L1059.33 1209.99 L1059.91 1209.99 L1060.5 1209.99 L1061.09 1209.99 L1061.67 1209.99 L1062.26 1209.99 L1062.85 1209.99 L1063.43 1209.99 L1064.02 1209.99 L1064.6 1209.99 L1065.19 1209.99 L1065.78 1209.99 L1066.36 1209.99 L1066.95 1209.99 L1067.54 1209.99 L1068.12 1209.99 L1068.71 1209.99 L1069.3 1209.99 L1069.88 1209.99 L1070.47 1209.99 L1071.06 1209.99 L1071.64 1209.99 L1072.23 1209.99 L1072.81 1209.99 L1073.4 1209.99 L1073.99 1209.99 L1074.57 1209.99 L1075.16 1209.99 L1075.75 1209.99 L1076.33 1209.99 L1076.92 1209.99 L1077.51 1209.99 L1078.09 1209.99 L1078.68 1209.99 L1079.26 1209.99 L1079.85 1209.99 L1080.44 1209.99 L1081.02 1209.99 L1081.61 1209.99 L1082.2 1209.99 L1082.78 1209.99 L1083.37 1209.99 L1083.96 1209.99 L1084.54 1209.99 L1085.13 1209.99 L1085.72 1209.99 L1086.3 1209.99 L1086.89 1209.99 L1087.47 1209.99 L1088.06 1209.99 L1088.65 1209.99 L1089.23 1209.99 L1089.82 1209.99 L1090.41 1209.99 L1090.99 1209.99 L1091.58 1209.99 L1092.17 1209.99 L1092.75 1209.99 L1093.34 1209.99 L1093.93 1209.99 L1094.51 1209.99 L1095.1 1209.99 L1095.68 1209.99 L1096.27 1209.99 L1096.86 1209.99 L1097.44 1209.99 L1098.03 1209.99 L1098.62 1209.99 L1099.2 1209.99 L1099.79 1209.99 L1100.38 1209.99 L1100.96 1209.99 L1101.55 1209.99 L1102.14 1209.99 L1102.72 1209.99 L1103.31 1209.99 L1103.89 1209.99 L1104.48 1209.99 L1105.07 1209.99 L1105.65 1209.99 L1106.24 1209.99 L1106.83 1209.99 L1107.41 1209.99 L1108 1209.99 L1108.59 1209.99 L1109.17 1209.99 L1109.76 1209.99 L1110.34 1209.99 L1110.93 1209.99 L1111.52 1209.99 L1112.1 1209.99 L1112.69 1209.99 L1113.28 1209.99 L1113.86 1209.99 L1114.45 1209.99 L1115.04 1209.99 L1115.62 1209.99 L1116.21 1209.99 L1116.8 1209.99 L1117.38 1209.99 L1117.97 1209.99 L1118.55 1209.99 L1119.14 1209.99 L1119.73 1209.99 L1120.31 1209.99 L1120.9 1209.99 L1121.49 1209.99 L1122.07 1209.99 L1122.66 1209.99 L1123.25 1209.99 L1123.83 1209.99 L1124.42 1209.99 L1125.01 1209.99 L1125.59 1209.99 L1126.18 1209.99 L1126.76 1209.99 L1127.35 1209.99 L1127.94 1209.99 L1128.52 1209.99 L1129.11 1209.99 L1129.7 1209.99 L1130.28 1209.99 L1130.87 1209.99 L1131.46 1209.99 L1132.04 1209.99 L1132.63 1209.99 L1133.21 1209.99 L1133.8 1209.99 L1134.39 1209.99 L1134.97 1209.99 L1135.56 1209.99 L1136.15 1209.99 L1136.73 1209.99 L1137.32 1209.99 L1137.91 1209.99 L1138.49 1209.99 L1139.08 1209.99 L1139.67 1209.99 L1140.25 1209.99 L1140.84 1209.99 L1141.42 1209.99 L1142.01 1209.99 L1142.6 1209.99 L1143.18 1209.99 L1143.77 1209.99 L1144.36 1209.99 L1144.94 1209.99 L1145.53 1209.99 L1146.12 1209.99 L1146.7 1209.99 L1147.29 1209.99 L1147.88 1209.99 L1148.46 1209.99 L1149.05 1209.99 L1149.63 1209.99 L1150.22 1209.99 L1150.81 1209.99 L1151.39 1209.99 L1151.98 1209.99 L1152.57 1209.99 L1153.15 1209.99 L1153.74 1209.99 L1154.33 1209.99 L1154.91 1209.99 L1155.5 1209.99 L1156.09 1209.99 L1156.67 1209.99 L1157.26 1209.99 L1157.84 1209.99 L1158.43 1209.99 L1159.02 1209.99 L1159.6 1209.99 L1160.19 1209.99 L1160.78 1209.99 L1161.36 1209.99 L1161.95 1209.99 L1162.54 1209.99 L1163.12 1209.99 L1163.71 1209.99 L1164.29 1209.99 L1164.88 1209.99 L1165.47 1209.99 L1166.05 1209.99 L1166.64 1209.99 L1167.23 1209.99 L1167.81 1209.99 L1168.4 1209.99 L1168.99 1209.99 L1169.57 1209.99 L1170.16 1209.99 L1170.75 1209.99 L1171.33 1209.99 L1171.92 1209.99 L1172.5 1209.99 L1173.09 1209.99 L1173.68 1209.99 L1174.26 1209.99 L1174.85 1209.99 L1175.44 1209.99 L1176.02 1209.99 L1176.61 1209.99 L1177.2 1209.99 L1177.78 1209.99 L1178.37 1209.99 L1178.96 1209.99 L1179.54 1209.99 L1180.13 1209.99 L1180.71 1209.99 L1181.3 1209.99 L1181.89 1209.99 L1182.47 1209.99 L1183.06 1209.99 L1183.65 1209.99 L1184.23 1209.99 L1184.82 1209.99 L1185.41 1209.99 L1185.99 1209.99 L1186.58 1209.99 L1187.16 1209.99 L1187.75 1209.99 L1188.34 1209.99 L1188.92 1209.99 L1189.51 1209.99 L1190.1 1209.99 L1190.68 1209.99 L1191.27 1209.99 L1191.86 1209.99 L1192.44 1209.99 L1193.03 1209.99 L1193.62 1209.99 L1194.2 1209.99 L1194.79 1209.99 L1195.37 1209.99 L1195.96 1209.99 L1196.55 1209.99 L1197.13 1209.99 L1197.72 1209.99 L1198.31 1209.99 L1198.89 1209.99 L1199.48 1209.99 L1200.07 1209.99 L1200.65 1209.99 L1201.24 1209.99 L1201.83 1209.99 L1202.41 1209.99 L1203 1209.99 L1203.58 1209.99 L1204.17 1209.99 L1204.76 1209.99 L1205.34 1209.99 L1205.93 1209.99 L1206.52 1209.99 L1207.1 1209.99 L1207.69 1209.99 L1208.28 1209.99 L1208.86 1209.99 L1209.45 1209.99 L1210.03 1209.99 L1210.62 1209.99 L1211.21 1209.99 L1211.79 1209.99 L1212.38 1209.99 L1212.97 1209.99 L1213.55 1209.99 L1214.14 1209.99 L1214.73 1209.99 L1215.31 1209.99 L1215.9 1209.99 L1216.49 1209.99 L1217.07 1209.99 L1217.66 1209.99 L1218.24 1209.99 L1218.83 1209.99 L1219.42 1209.99 L1220 1209.99 L1220.59 1209.99 L1221.18 1209.99 L1221.76 1209.99 L1222.35 1209.99 L1222.94 1209.99 L1223.52 1209.99 L1224.11 1209.99 L1224.7 1209.99 L1225.28 1209.99 L1225.87 1209.99 L1226.45 1209.99 L1227.04 1209.99 L1227.63 1209.99 L1228.21 1209.99 L1228.8 1209.99 L1229.39 1209.99 L1229.97 1209.99 L1230.56 1209.99 L1231.15 1209.99 L1231.73 1209.99 L1232.32 1209.99 L1232.91 1209.99 L1233.49 1209.99 L1234.08 1209.99 L1234.66 1209.99 L1235.25 1209.99 L1235.84 1209.99 L1236.42 1209.99 L1237.01 1209.99 L1237.6 1209.99 L1238.18 1209.99 L1238.77 1209.99 L1239.36 1209.99 L1239.94 1209.99 L1240.53 1209.99 L1241.11 1209.99 L1241.7 1209.99 L1242.29 1209.99 L1242.87 1209.99 L1243.46 1209.99 L1244.05 1209.99 L1244.63 1209.99 L1245.22 1209.99 L1245.81 1209.99 L1246.39 1209.99 L1246.98 1209.99 L1247.57 1209.99 L1248.15 1209.99 L1248.74 1209.99 L1249.32 1209.99 L1249.91 1209.99 L1250.5 1209.99 L1251.08 1209.99 L1251.67 1209.99 L1252.26 1209.99 L1252.84 1209.99 L1253.43 1209.99 L1254.02 1209.99 L1254.6 1209.99 L1255.19 1209.99 L1255.78 1209.99 L1256.36 1209.99 L1256.95 1209.99 L1257.53 1209.99 L1258.12 1209.99 L1258.71 1209.99 L1259.29 1209.99 L1259.88 1209.99 L1260.47 1209.99 L1261.05 1209.99 L1261.64 1209.99 L1262.23 1209.99 L1262.81 1209.99 L1263.4 1209.99 L1263.98 1209.99 L1264.57 1209.99 L1265.16 1209.99 L1265.74 1209.99 L1266.33 1209.99 L1266.92 1209.99 L1267.5 1209.99 L1268.09 1209.99 L1268.68 1209.99 L1269.26 1209.99 L1269.85 1209.99 L1270.44 1209.99 L1271.02 1209.99 L1271.61 1209.99 L1272.19 1209.99 L1272.78 1209.99 L1273.37 1209.99 L1273.95 1209.99 L1274.54 1209.99 L1275.13 1209.99 L1275.71 1209.99 L1276.3 1209.99 L1276.89 1209.99 L1277.47 1209.99 L1278.06 1209.99 L1278.65 1209.99 L1279.23 1209.99 L1279.82 1209.99 L1280.4 1209.99 L1280.99 1209.99 L1281.58 1209.99 L1282.16 1209.99 L1282.75 1209.99 L1283.34 1209.99 L1283.92 1209.99 L1284.51 1209.99 L1285.1 1209.99 L1285.68 1209.99 L1286.27 1209.99 L1286.86 1209.99 L1287.44 1209.99 L1288.03 1209.99 L1288.61 1209.99 L1289.2 1209.99 L1289.79 1209.99 L1290.37 1209.99 L1290.96 1209.99 L1291.55 1209.99 L1292.13 1209.99 L1292.72 1209.99 L1293.31 1209.99 L1293.89 1209.99 L1294.48 1209.99 L1295.06 1209.99 L1295.65 1209.99 L1296.24 1209.99 L1296.82 1209.99 L1297.41 1209.99 L1298 1209.99 L1298.58 1209.99 L1299.17 1209.99 L1299.76 1209.99 L1300.34 1209.99 L1300.93 1209.99 L1301.52 1209.99 L1302.1 1209.99 L1302.69 1209.99 L1303.27 1209.99 L1303.86 1209.99 L1304.45 1209.99 L1305.03 1209.99 L1305.62 1209.99 L1306.21 1209.99 L1306.79 1209.99 L1307.38 1209.99 L1307.97 1209.99 L1308.55 1209.99 L1309.14 1209.99 L1309.73 1209.99 L1310.31 1209.99 L1310.9 1209.99 L1311.48 1209.99 L1312.07 1209.99 L1312.66 1209.99 L1313.24 1209.99 L1313.83 1209.99 L1314.42 1209.99 L1315 1209.99 L1315.59 1209.99 L1316.18 1209.99 L1316.76 1209.99 L1317.35 1209.99 L1317.93 1209.99 L1318.52 1209.99 L1319.11 1209.99 L1319.69 1209.99 L1320.28 1209.99 L1320.87 1209.99 L1321.45 1209.99 L1322.04 1209.99 L1322.63 1209.99 L1323.21 1209.99 L1323.8 1209.99 L1324.39 1209.99 L1324.97 1209.99 L1325.56 1209.99 L1326.14 1209.99 L1326.73 1209.99 L1327.32 1209.99 L1327.9 1209.99 L1328.49 1209.99 L1329.08 1209.99 L1329.66 1209.99 L1330.25 1209.99 L1330.84 1209.99 L1331.42 1209.99 L1332.01 1209.99 L1332.6 1209.99 L1333.18 1209.99 L1333.77 1209.99 L1334.35 1209.99 L1334.94 1209.99 L1335.53 1209.99 L1336.11 1209.99 L1336.7 1209.99 L1337.29 1209.99 L1337.87 1209.99 L1338.46 1209.99 L1339.05 1209.99 L1339.63 1209.99 L1340.22 1209.99 L1340.8 1209.99 L1341.39 1209.99 L1341.98 1209.99 L1342.56 1209.99 L1343.15 1209.99 L1343.74 1209.99 L1344.32 1209.99 L1344.91 1209.99 L1345.5 1209.99 L1346.08 1209.99 L1346.67 1209.99 L1347.26 1209.99 L1347.84 1209.99 L1348.43 1209.99 L1349.01 1209.99 L1349.6 1209.99 L1350.19 1209.99 L1350.77 1209.99 L1351.36 1209.99 L1351.95 1209.99 L1352.53 1209.99 L1353.12 1209.99 L1353.71 1209.99 L1354.29 1209.99 L1354.88 1209.99 L1355.47 1209.99 L1356.05 1209.99 L1356.64 1209.99 L1357.22 1209.99 L1357.81 1209.99 L1358.4 1209.99 L1358.98 1209.99 L1359.57 1209.99 L1360.16 1209.99 L1360.74 1209.99 L1361.33 1209.99 L1361.92 1209.99 L1362.5 1209.99 L1363.09 1209.99 L1363.68 1209.99 L1364.26 1209.99 L1364.85 1209.99 L1365.43 1209.99 L1366.02 1209.99 L1366.61 1209.99 L1367.19 1209.99 L1367.78 1209.99 L1368.37 1209.99 L1368.95 1209.99 L1369.54 1209.99 L1370.13 1209.99 L1370.71 1209.99 L1371.3 1209.99 L1371.88 1209.99 L1372.47 1209.99 L1373.06 1209.99 L1373.64 1209.99 L1374.23 1209.99 L1374.82 1209.99 L1375.4 1209.99 L1375.99 1209.99 L1376.58 1209.99 L1377.16 1209.99 L1377.75 1209.99 L1378.34 1209.99 L1378.92 1209.99 L1379.51 1209.99 L1380.09 1209.99 L1380.68 1209.99 L1381.27 1209.99 L1381.85 1209.99 L1382.44 1209.99 L1383.03 1209.99 L1383.61 1209.99 L1384.2 1209.99 L1384.79 1209.99 L1385.37 1209.99 L1385.96 1209.99 L1386.55 1209.99 L1387.13 1209.99 L1387.72 1209.99 L1388.3 1209.99 L1388.89 1209.99 L1389.48 1209.99 L1390.06 1209.99 L1390.65 1209.99 L1391.24 1209.99 L1391.82 1209.99 L1392.41 1209.99 L1393 1209.99 L1393.58 1209.99 L1394.17 1209.99 L1394.75 1209.99 L1395.34 1209.99 L1395.93 1209.99 L1396.51 1209.99 L1397.1 1209.99 L1397.69 1209.99 L1398.27 1209.99 L1398.86 1209.99 L1399.45 1209.99 L1400.03 1209.99 L1400.62 1209.99 L1401.21 1209.99 L1401.79 1209.99 L1402.38 1209.99 L1402.96 1209.99 L1403.55 1209.99 L1404.14 1209.99 L1404.72 1209.99 L1405.31 1209.99 L1405.9 1209.99 L1406.48 1209.99 L1407.07 1209.99 L1407.66 1209.99 L1408.24 1209.99 L1408.83 1209.99 L1409.42 1209.99 L1410 1209.99 L1410.59 1209.99 L1411.17 1209.99 L1411.76 1209.99 L1412.35 1209.99 L1412.93 1209.99 L1413.52 1209.99 L1414.11 1209.99 L1414.69 1209.99 L1415.28 1209.99 L1415.87 1209.99 L1416.45 1209.99 L1417.04 1209.99 L1417.63 1209.99 L1418.21 1209.99 L1418.8 1209.99 L1419.38 1209.99 L1419.97 1209.99 L1420.56 1209.99 L1421.14 1209.99 L1421.73 1209.99 L1422.32 1209.99 L1422.9 1209.99 L1423.49 1209.99 L1424.08 1209.99 L1424.66 1209.99 L1425.25 1209.99 L1425.83 1209.99 L1426.42 1209.99 L1427.01 1209.99 L1427.59 1209.99 L1428.18 1209.99 L1428.77 1209.99 L1429.35 1209.99 L1429.94 1209.99 L1430.53 1209.99 L1431.11 1209.99 L1431.7 1209.99 L1432.29 1209.99 L1432.87 1209.99 L1433.46 1209.99 L1434.04 1209.99 L1434.63 1209.99 L1435.22 1209.99 L1435.8 1209.99 L1436.39 1209.99 L1436.98 1209.99 L1437.56 1209.99 L1438.15 1209.99 L1438.74 1209.99 L1439.32 1209.99 L1439.91 1209.99 L1440.5 1209.99 L1441.08 1209.99 L1441.67 1209.99 L1442.25 1209.99 L1442.84 1209.99 L1443.43 1209.99 L1444.01 1209.99 L1444.6 1209.99 L1445.19 1209.99 L1445.77 1209.99 L1446.36 1209.99 L1446.95 1209.99 L1447.53 1209.99 L1448.12 1209.99 L1448.7 1209.99 L1449.29 1209.99 L1449.88 1209.99 L1450.46 1209.99 L1451.05 1209.99 L1451.64 1209.99 L1452.22 1209.99 L1452.81 1209.99 L1453.4 1209.99 L1453.98 1209.99 L1454.57 1209.99 L1455.16 1209.99 L1455.74 1209.99 L1456.33 1209.99 L1456.91 1209.99 L1457.5 1209.99 L1458.09 1209.99 L1458.67 1209.99 L1459.26 1209.99 L1459.85 1209.99 L1460.43 1209.99 L1461.02 1209.99 L1461.61 1209.99 L1462.19 1209.99 L1462.78 1209.99 L1463.37 1209.99 L1463.95 1209.99 L1464.54 1209.99 L1465.12 1209.99 L1465.71 1209.99 L1466.3 1209.99 L1466.88 1209.99 L1467.47 1209.99 L1468.06 1209.99 L1468.64 1209.99 L1469.23 1209.99 L1469.82 1209.99 L1470.4 1209.99 L1470.99 1209.99 L1471.57 1209.99 L1472.16 1209.99 L1472.75 1209.99 L1473.33 1209.99 L1473.92 1209.99 L1474.51 1209.99 L1475.09 1209.99 L1475.68 1209.99 L1476.27 1209.99 L1476.85 1209.99 L1477.44 1209.99 L1478.03 1209.99 L1478.61 1209.99 L1479.2 1209.99 L1479.78 1209.99 L1480.37 1209.99 L1480.96 1209.99 L1481.54 1209.99 L1482.13 1209.99 L1482.72 1209.99 L1483.3 1209.99 L1483.89 1209.99 L1484.48 1209.99 L1485.06 1209.99 L1485.65 1209.99 L1486.24 1209.99 L1486.82 1209.99 L1487.41 1209.99 L1487.99 1209.99 L1488.58 1209.99 L1489.17 1209.99 L1489.75 1209.99 L1490.34 1209.99 L1490.93 1209.99 L1491.51 1209.99 L1492.1 1209.99 L1492.69 1209.99 L1493.27 1209.99 L1493.86 1209.99 L1494.45 1209.99 L1495.03 1209.99 L1495.62 1209.99 L1496.2 1209.99 L1496.79 1209.99 L1497.38 1209.99 L1497.96 1209.99 L1498.55 1209.99 L1499.14 1209.99 L1499.72 1209.99 L1500.31 1209.99 L1500.9 1209.99 L1501.48 1209.99 L1502.07 1209.99 L1502.65 1209.99 L1503.24 1209.99 L1503.83 1209.99 L1504.41 1209.99 L1505 1209.99 L1505.59 1209.99 L1506.17 1209.99 L1506.76 1209.99 L1507.35 1209.99 L1507.93 1209.99 L1508.52 1209.99 L1509.11 1209.99 L1509.69 1209.99 L1510.28 1209.99 L1510.86 1209.99 L1511.45 1209.99 L1512.04 1209.99 L1512.62 1209.99 L1513.21 1209.99 L1513.8 1209.99 L1514.38 1209.99 L1514.97 1209.99 L1515.56 1209.99 L1516.14 1209.99 L1516.73 1209.99 L1517.32 1209.99 L1517.9 1209.99 L1518.49 1209.99 L1519.07 1209.99 L1519.66 1209.99 L1520.25 1209.99 L1520.83 1209.99 L1521.42 1209.99 L1522.01 1209.99 L1522.59 1209.99 L1523.18 1209.99 L1523.77 1209.99 L1524.35 1209.99 L1524.94 1209.99 L1525.52 1209.99 L1526.11 1209.99 L1526.7 1209.99 L1527.28 1209.99 L1527.87 1209.99 L1528.46 1209.99 L1529.04 1209.99 L1529.63 1209.99 L1530.22 1209.99 L1530.8 1209.99 L1531.39 1209.99 L1531.98 1209.99 L1532.56 1209.99 L1533.15 1209.99 L1533.73 1209.99 L1534.32 1209.99 L1534.91 1209.99 L1535.49 1209.99 L1536.08 1209.99 L1536.67 1209.99 L1537.25 1209.99 L1537.84 1209.99 L1538.43 1209.99 L1539.01 1209.99 L1539.6 1209.99 L1540.19 1209.99 L1540.77 1209.99 L1541.36 1209.99 L1541.94 1209.99 L1542.53 1209.99 L1543.12 1209.99 L1543.7 1209.99 L1544.29 1209.99 L1544.88 1209.99 L1545.46 1209.99 L1546.05 1209.99 L1546.64 1209.99 L1547.22 1209.99 L1547.81 1209.99 L1548.4 1209.99 L1548.98 1209.99 L1549.57 1209.99 L1550.15 1209.99 L1550.74 1209.99 L1551.33 1209.99 L1551.91 1209.99 L1552.5 1209.99 L1553.09 1209.99 L1553.67 1209.99 L1554.26 1209.99 L1554.85 1209.99 L1555.43 1209.99 L1556.02 1209.99 L1556.6 1209.99 L1557.19 1209.99 L1557.78 1209.99 L1558.36 1209.99 L1558.95 1209.99 L1559.54 1209.99 L1560.12 1209.99 L1560.71 1209.99 L1561.3 1209.99 L1561.88 1209.99 L1562.47 1209.99 L1563.06 1209.99 L1563.64 1209.99 L1564.23 1209.99 L1564.81 1209.99 L1565.4 1209.99 L1565.99 1209.99 L1566.57 1209.99 L1567.16 1209.99 L1567.75 1209.99 L1568.33 1209.99 L1568.92 1209.99 L1569.51 1209.99 L1570.09 1209.99 L1570.68 1209.99 L1571.27 1209.99 L1571.85 1209.99 L1572.44 1209.99 L1573.02 1209.99 L1573.61 1209.99 L1574.2 1209.99 L1574.78 1209.99 L1575.37 1209.99 L1575.96 1209.99 L1576.54 1209.99 L1577.13 1209.99 L1577.72 1209.99 L1578.3 1209.99 L1578.89 1209.99 L1579.47 1209.99 L1580.06 1209.99 L1580.65 1209.99 L1581.23 1209.99 L1581.82 1209.99 L1582.41 1209.99 L1582.99 1209.99 L1583.58 1209.99 L1584.17 1209.99 L1584.75 1209.99 L1585.34 1209.99 L1585.93 1209.99 L1586.51 1209.99 L1587.1 1209.99 L1587.68 1209.99 L1588.27 1209.99 L1588.86 1209.99 L1589.44 1209.99 L1590.03 1209.99 L1590.62 1209.99 L1591.2 1209.99 L1591.79 1209.99 L1592.38 1209.99 L1592.96 1209.99 L1593.55 1209.99 L1594.14 1209.99 L1594.72 1209.99 L1595.31 1209.99 L1595.89 1209.99 L1596.48 1209.99 L1597.07 1209.99 L1597.65 1209.99 L1598.24 1209.99 L1598.83 1209.99 L1599.41 1209.99 L1600 1209.99 L1600.59 1209.99 L1601.17 1209.99 L1601.76 1209.99 L1602.34 1209.99 L1602.93 1209.99 L1603.52 1209.99 L1604.1 1209.99 L1604.69 1209.99 L1605.28 1209.99 L1605.86 1209.99 L1606.45 1209.99 L1607.04 1209.99 L1607.62 1209.99 L1608.21 1209.99 L1608.8 1209.99 L1609.38 1209.99 L1609.97 1209.99 L1610.55 1209.99 L1611.14 1209.99 L1611.73 1209.99 L1612.31 1209.99 L1612.9 1209.99 L1613.49 1209.99 L1614.07 1209.99 L1614.66 1209.99 L1615.25 1209.99 L1615.83 1209.99 L1616.42 1209.99 L1617.01 1209.99 L1617.59 1209.99 L1618.18 1209.99 L1618.76 1209.99 L1619.35 1209.99 L1619.94 1209.99 L1620.52 1209.99 L1621.11 1209.99 L1621.7 1209.99 L1622.28 1209.99 L1622.87 1209.99 L1623.46 1209.99 L1624.04 1209.99 L1624.63 1209.99 L1625.22 1209.99 L1625.8 1209.99 L1626.39 1209.99 L1626.97 1209.99 L1627.56 1209.99 L1628.15 1209.99 L1628.73 1209.99 L1629.32 1209.99 L1629.91 1209.99 L1630.49 1209.99 L1631.08 1209.99 L1631.67 1209.99 L1632.25 1209.99 L1632.84 1209.99 L1633.42 1209.99 L1634.01 1209.99 L1634.6 1209.99 L1635.18 1209.99 L1635.77 1209.99 L1636.36 1209.99 L1636.94 1209.99 L1637.53 1209.99 L1638.12 1209.99 L1638.7 1209.99 L1639.29 1209.99 L1639.88 1209.99 L1640.46 1209.99 L1641.05 1209.99 L1641.63 1209.99 L1642.22 1209.99 L1642.81 1209.99 L1643.39 1209.99 L1643.98 1209.99 L1644.57 1209.99 L1645.15 1209.99 L1645.74 1209.99 L1646.33 1209.99 L1646.91 1209.99 L1647.5 1209.99 L1648.09 1209.99 L1648.67 1209.99 L1649.26 1209.99 L1649.84 1209.99 L1650.43 1209.99 L1651.02 1209.99 L1651.6 1209.99 L1652.19 1209.99 L1652.78 1209.99 L1653.36 1209.99 L1653.95 1209.99 L1654.54 1209.99 L1655.12 1209.99 L1655.71 1209.99 L1656.29 1209.99 L1656.88 1209.99 L1657.47 1209.99 L1658.05 1209.99 L1658.64 1209.99 L1659.23 1209.99 L1659.81 1209.99 L1660.4 1209.99 L1660.99 1209.99 L1661.57 1209.99 L1662.16 1209.99 L1662.75 1209.99 L1663.33 1209.99 L1663.92 1209.99 L1664.5 1209.99 L1665.09 1209.99 L1665.68 1209.99 L1666.26 1209.99 L1666.85 1209.99 L1667.44 1209.99 L1668.02 1209.99 L1668.61 1209.99 L1669.2 1209.99 L1669.78 1209.99 L1670.37 1209.99 L1670.96 1209.99 L1671.54 1209.99 L1672.13 1209.99 L1672.71 1209.99 L1673.3 1209.99 L1673.89 1209.99 L1674.47 1209.99 L1675.06 1209.99 L1675.65 1209.99 L1676.23 1209.99 L1676.82 1209.99 L1677.41 1209.99 L1677.99 1209.99 L1678.58 1209.99 L1679.17 1209.99 L1679.75 1209.99 L1680.34 1209.99 L1680.92 1209.99 L1681.51 1209.99 L1682.1 1209.99 L1682.68 1209.99 L1683.27 1209.99 L1683.86 1209.99 L1684.44 1209.99 L1685.03 1209.99 L1685.62 1209.99 L1686.2 1209.99 L1686.79 1209.99 L1687.37 1209.99 L1687.96 1209.99 L1688.55 1209.99 L1689.13 1209.99 L1689.72 1209.99 L1690.31 1209.99 L1690.89 1209.99 L1691.48 1209.99 L1692.07 1209.99 L1692.65 1209.99 L1693.24 1209.99 L1693.83 1209.99 L1694.41 1209.99 L1695 1209.99 L1695.58 1209.99 L1696.17 1209.99 L1696.76 1209.99 L1697.34 1209.99 L1697.93 1209.99 L1698.52 1209.99 L1699.1 1209.99 L1699.69 1209.99 L1700.28 1209.99 L1700.86 1209.99 L1701.45 1209.99 L1702.04 1209.99 L1702.62 1209.99 L1703.21 1209.99 L1703.79 1209.99 L1704.38 1209.99 L1704.97 1209.99 L1705.55 1209.99 L1706.14 1209.99 L1706.73 1209.99 L1707.31 1209.99 L1707.9 1209.99 L1708.49 1209.99 L1709.07 1209.99 L1709.66 1209.99 L1710.24 1209.99 L1710.83 1209.99 L1711.42 1209.99 L1712 1209.99 L1712.59 1209.99 L1713.18 1209.99 L1713.76 1209.99 L1714.35 1209.99 L1714.94 1209.99 L1715.52 1209.99 L1716.11 1209.99 L1716.7 1209.99 L1717.28 1209.99 L1717.87 1209.99 L1718.45 1209.99 L1719.04 1209.99 L1719.63 1209.99 L1720.21 1209.99 L1720.8 1209.99 L1721.39 1209.99 L1721.97 1209.99 L1722.56 1209.99 L1723.15 1209.99 L1723.73 1209.99 L1724.32 1209.99 L1724.91 1209.99 L1725.49 1209.99 L1726.08 1209.99 L1726.66 1209.99 L1727.25 1209.99 L1727.84 1209.99 L1728.42 1209.99 L1729.01 1209.99 L1729.6 1209.99 L1730.18 1209.99 L1730.77 1209.99 L1731.36 1209.99 L1731.94 1209.99 L1732.53 1209.99 L1733.11 1209.99 L1733.7 1209.99 L1734.29 1209.99 L1734.87 1209.99 L1735.46 1209.99 L1736.05 1209.99 L1736.63 1209.99 L1737.22 1209.99 L1737.81 1209.99 L1738.39 1209.99 L1738.98 1209.99 L1739.57 1209.99 L1740.15 1209.99 L1740.74 1209.99 L1741.32 1209.99 L1741.91 1209.99 L1742.5 1209.99 L1743.08 1209.99 L1743.67 1209.99 L1744.26 1209.99 L1744.84 1209.99 L1745.43 1209.99 L1746.02 1209.99 L1746.6 1209.99 L1747.19 1209.99 L1747.78 1209.99 L1748.36 1209.99 L1748.95 1209.99 L1749.53 1209.99 L1750.12 1209.99 L1750.71 1209.99 L1751.29 1209.99 L1751.88 1209.99 L1752.47 1209.99 L1753.05 1209.99 L1753.64 1209.99 L1754.23 1209.99 L1754.81 1209.99 L1755.4 1209.99 L1755.99 1209.99 L1756.57 1209.99 L1757.16 1209.99 L1757.74 1209.99 L1758.33 1209.99 L1758.92 1209.99 L1759.5 1209.99 L1760.09 1209.99 L1760.68 1209.99 L1761.26 1209.99 L1761.85 1209.99 L1762.44 1209.99 L1763.02 1209.99 L1763.61 1209.99 L1764.19 1209.99 L1764.78 1209.99 L1765.37 1209.99 L1765.95 1209.99 L1766.54 1209.99 L1767.13 1209.99 L1767.71 1209.99 L1768.3 1209.99 L1768.89 1209.99 L1769.47 1209.99 L1770.06 1209.99 L1770.65 1209.99 L1771.23 1209.99 L1771.82 1209.99 L1772.4 1209.99 L1772.99 1209.99 L1773.58 1209.99 L1774.16 1209.99 L1774.75 1209.99 L1775.34 1209.99 L1775.92 1209.99 L1776.51 1209.99 L1777.1 1209.99 L1777.68 1209.99 L1778.27 1209.99 L1778.86 1209.99 L1779.44 1209.99 L1780.03 1209.99 L1780.61 1209.99 L1781.2 1209.99 L1781.79 1209.99 L1782.37 1209.99 L1782.96 1209.99 L1783.55 1209.99 L1784.13 1209.99 L1784.72 1209.99 L1785.31 1209.99 L1785.89 1209.99 L1786.48 1209.99 L1787.06 1209.99 L1787.65 1209.99 L1788.24 1209.99 L1788.82 1209.99 L1789.41 1209.99 L1790 1209.99 L1790.58 1209.99 L1791.17 1209.99 L1791.76 1209.99 L1792.34 1209.99 L1792.93 1209.99 L1793.52 1209.99 L1794.1 1209.99 L1794.69 1209.99 L1795.27 1209.99 L1795.86 1209.99 L1796.45 1209.99 L1797.03 1209.99 L1797.62 1209.99 L1798.21 1209.99 L1798.79 1209.99 L1799.38 1209.99 L1799.97 1209.99 L1800.55 1209.99 L1801.14 1209.99 L1801.73 1209.99 L1802.31 1209.99 L1802.9 1209.99 L1803.48 1209.99 L1804.07 1209.99 L1804.66 1209.99 L1805.24 1209.99 L1805.83 1209.99 L1806.42 1209.99 L1807 1209.99 L1807.59 1209.99 L1808.18 1209.99 L1808.76 1209.99 L1809.35 1209.99 L1809.94 1209.99 L1810.52 1209.99 L1811.11 1209.99 L1811.69 1209.99 L1812.28 1209.99 L1812.87 1209.99 L1813.45 1209.99 L1814.04 1209.99 L1814.63 1209.99 L1815.21 1209.99 L1815.8 1209.99 L1816.39 1209.99 L1816.97 1209.99 L1817.56 1209.99 L1818.14 1209.99 L1818.73 1209.99 L1819.32 1209.99 L1819.9 1209.99 L1820.49 1209.99 L1821.08 1209.99 L1821.66 1209.99 L1822.25 1209.99 L1822.84 1209.99 L1823.42 1209.99 L1824.01 1209.99 L1824.6 1209.99 L1825.18 1209.99 L1825.77 1209.99 L1826.35 1209.99 L1826.94 1209.99 L1827.53 1209.99 L1828.11 1209.99 L1828.7 1209.99 L1829.29 1209.99 L1829.87 1209.99 L1830.46 1209.99 L1831.05 1209.99 L1831.63 1209.99 L1832.22 1209.99 L1832.81 1209.99 L1833.39 1209.99 L1833.98 1209.99 L1834.56 1209.99 L1835.15 1209.99 L1835.74 1209.99 L1836.32 1209.99 L1836.91 1209.99 L1837.5 1209.99 L1838.08 1209.99 L1838.67 1209.99 L1839.26 1209.99 L1839.84 1209.99 L1840.43 1209.99 L1841.01 1209.99 L1841.6 1209.99 L1842.19 1209.99 L1842.77 1209.99 L1843.36 1209.99 L1843.95 1209.99 L1844.53 1209.99 L1845.12 1209.99 L1845.71 1209.99 L1846.29 1209.99 L1846.88 1209.99 L1847.47 1209.99 L1848.05 1209.99 L1848.64 1209.99 L1849.22 1209.99 L1849.81 1209.99 L1850.4 1209.99 L1850.98 1209.99 L1851.57 1209.99 L1852.16 1209.99 L1852.74 1209.99 L1853.33 1209.99 L1853.92 1209.99 L1854.5 1209.99 L1855.09 1209.99 L1855.68 1209.99 L1856.26 1209.99 L1856.85 1209.99 L1857.43 1209.99 L1858.02 1209.99 L1858.61 1209.99 L1859.19 1209.99 L1859.78 1209.99 L1860.37 1209.99 L1860.95 1209.99 L1861.54 1209.99 L1862.13 1209.99 L1862.71 1209.99 L1863.3 1209.99 L1863.88 1209.99 L1864.47 1209.99 L1865.06 1209.99 L1865.64 1209.99 L1866.23 1209.99 L1866.82 1209.99 L1867.4 1209.99 L1867.99 1209.99 L1868.58 1209.99 L1869.16 1209.99 L1869.75 1209.99 L1870.34 1209.99 L1870.92 1209.99 L1871.51 1209.99 L1872.09 1209.99 L1872.68 1209.99 L1873.27 1209.99 L1873.85 1209.99 L1874.44 1209.99 L1875.03 1209.99 L1875.61 1209.99 L1876.2 1209.99 L1876.79 1209.99 L1877.37 1209.99 L1877.96 1209.99 L1878.55 1209.99 L1879.13 1209.99 L1879.72 1209.99 L1880.3 1209.99 L1880.89 1209.99 L1881.48 1209.99 L1882.06 1209.99 L1882.65 1209.99 L1883.24 1209.99 L1883.82 1209.99 L1884.41 1209.99 L1885 1209.99 L1885.58 1209.99 L1886.17 1209.99 L1886.76 1209.99 L1887.34 1209.99 L1887.93 1209.99 L1888.51 1209.99 L1889.1 1209.99 L1889.69 1209.99 L1890.27 1209.99 L1890.86 1209.99 L1891.45 1209.99 L1892.03 1209.99 L1892.62 1209.99 L1893.21 1209.99 L1893.79 1209.99 L1894.38 1209.99 L1894.96 1209.99 L1895.55 1209.99 L1896.14 1209.99 L1896.72 1209.99 L1897.31 1209.99 L1897.9 1209.99 L1898.48 1209.99 L1899.07 1209.99 L1899.66 1209.99 L1900.24 1209.99 L1900.83 1209.99 L1901.42 1209.99 L1902 1209.99 L1902.59 1209.99 L1903.17 1209.99 L1903.76 1209.99 L1904.35 1209.99 L1904.93 1209.99 L1905.52 1209.99 L1906.11 1209.99 L1906.69 1209.99 L1907.28 1209.99 L1907.87 1209.99 L1908.45 1209.99 L1909.04 1209.99 L1909.63 1209.99 L1910.21 1209.99 L1910.8 1209.99 L1911.38 1209.99 L1911.97 1209.99 L1912.56 1209.99 L1913.14 1209.99 L1913.73 1209.99 L1914.32 1209.99 L1914.9 1209.99 L1915.49 1209.99 L1916.08 1209.99 L1916.66 1209.99 L1917.25 1209.99 L1917.83 1209.99 L1918.42 1209.99 L1919.01 1209.99 L1919.59 1209.99 L1920.18 1209.99 L1920.77 1209.99 L1921.35 1209.99 L1921.94 1209.99 L1922.53 1209.99 L1923.11 1209.99 L1923.7 1209.99 L1924.29 1209.99 L1924.87 1209.99 L1925.46 1209.99 L1926.04 1209.99 L1926.63 1209.99 L1927.22 1209.99 L1927.8 1209.99 L1928.39 1209.99 L1928.98 1209.99 L1929.56 1209.99 L1930.15 1209.99 L1930.74 1209.99 L1931.32 1209.99 L1931.91 1209.99 L1932.5 1209.99 L1933.08 1209.99 L1933.67 1209.99 L1934.25 1209.99 L1934.84 1209.99 L1935.43 1209.99 L1936.01 1209.99 L1936.6 1209.99 L1937.19 1209.99 L1937.77 1209.99 L1938.36 1209.99 L1938.95 1209.99 L1939.53 1209.99 L1940.12 1209.99 L1940.71 1209.99 L1941.29 1209.99 L1941.88 1209.99 L1942.46 1209.99 L1943.05 1209.99 L1943.64 1209.99 L1944.22 1209.99 L1944.81 1209.99 L1945.4 1209.99 L1945.98 1209.99 L1946.57 1209.99 L1947.16 1209.99 L1947.74 1209.99 L1948.33 1209.99 L1948.91 1209.99 L1949.5 1209.99 L1950.09 1209.99 L1950.67 1209.99 L1951.26 1209.99 L1951.85 1209.99 L1952.43 1209.99 L1953.02 1209.99 L1953.61 1209.99 L1954.19 1209.99 L1954.78 1209.99 L1955.37 1209.99 L1955.95 1209.99 L1956.54 1209.99 L1957.12 1209.99 L1957.71 1209.99 L1958.3 1209.99 L1958.88 1209.99 L1959.47 1209.99 L1960.06 1209.99 L1960.64 1209.99 L1961.23 1209.99 L1961.82 1209.99 L1962.4 1209.99 L1962.99 1209.99 L1963.58 1209.99 L1964.16 1209.99 L1964.75 1209.99 L1965.33 1209.99 L1965.92 1209.99 L1966.51 1209.99 L1967.09 1209.99 L1967.68 1209.99 L1968.27 1209.99 L1968.85 1209.99 L1969.44 1209.99 L1970.03 1209.99 L1970.61 1209.99 L1971.2 1209.99 L1971.78 1209.99 L1972.37 1209.99 L1972.96 1209.99 L1973.54 1209.99 L1974.13 1209.99 L1974.72 1209.99 L1975.3 1209.99 L1975.89 1209.99 L1976.48 1209.99 L1977.06 1209.99 L1977.65 1209.99 L1978.24 1209.99 L1978.82 1209.99 L1979.41 1209.99 L1979.99 1209.99 L1980.58 1209.99 L1981.17 1209.99 L1981.75 1209.99 L1982.34 1209.99 L1982.93 1209.99 L1983.51 1209.99 L1984.1 1209.99 L1984.69 1209.99 L1985.27 1209.99 L1985.86 1209.99 L1986.45 1209.99 L1987.03 1209.99 L1987.62 1209.99 L1988.2 1209.99 L1988.79 1209.99 L1989.38 1209.99 L1989.96 1209.99 L1990.55 1209.99 L1991.14 1209.99 L1991.72 1209.99 L1992.31 1209.99 L1992.9 1209.99 L1993.48 1209.99 L1994.07 1209.99 L1994.65 1209.99 L1995.24 1209.99 L1995.83 1209.99 L1996.41 1209.99 L1997 1209.99 L1997.59 1209.99 L1998.17 1209.99 L1998.76 1209.99 L1999.35 1209.99 L1999.93 1209.99 L2000.52 1209.99 L2001.11 1209.99 L2001.69 1209.99 L2002.28 1209.99 L2002.86 1209.99 L2003.45 1209.99 L2004.04 1209.99 L2004.62 1209.99 L2005.21 1209.99 L2005.8 1209.99 L2006.38 1209.99 L2006.97 1209.99 L2007.56 1209.99 L2008.14 1209.99 L2008.73 1209.99 L2009.32 1209.99 L2009.9 1209.99 L2010.49 1209.99 L2011.07 1209.99 L2011.66 1209.99 L2012.25 1209.99 L2012.83 1209.99 L2013.42 1209.99 L2014.01 1209.99 L2014.59 1209.99 L2015.18 1209.99 L2015.77 1209.99 L2016.35 1209.99 L2016.94 1209.99 L2017.53 1209.99 L2018.11 1209.99 L2018.7 1209.99 L2019.28 1209.99 L2019.87 1209.99 L2020.46 1209.99 L2021.04 1209.99 L2021.63 1209.99 L2022.22 1209.99 L2022.8 1209.99 L2023.39 1209.99 L2023.98 1209.99 L2024.56 1209.99 L2025.15 1209.99 L2025.73 1209.99 L2026.32 1209.99 L2026.91 1209.99 L2027.49 1209.99 L2028.08 1209.99 L2028.67 1209.99 L2029.25 1209.99 L2029.84 1209.99 L2030.43 1209.99 L2031.01 1209.99 L2031.6 1209.99 L2032.19 1209.99 L2032.77 1209.99 L2033.36 1209.99 L2033.94 1209.99 L2034.53 1209.99 L2035.12 1209.99 L2035.7 1209.99 L2036.29 1209.99 L2036.88 1209.99 L2037.46 1209.99 L2038.05 1209.99 L2038.64 1209.99 L2039.22 1209.99 L2039.81 1209.99 L2040.4 1209.99 L2040.98 1209.99 L2041.57 1209.99 L2042.15 1209.99 L2042.74 1209.99 L2043.33 1209.99 L2043.91 1209.99 L2044.5 1209.99 L2045.09 1209.99 L2045.67 1209.99 L2046.26 1209.99 L2046.85 1209.99 L2047.43 1209.99 L2048.02 1209.99 L2048.6 1209.99 L2049.19 1209.99 L2049.78 1209.99 L2050.36 1209.99 L2050.95 1209.99 L2051.54 1209.99 L2052.12 1209.99 L2052.71 1209.99 L2053.3 1209.99 L2053.88 1209.99 L2054.47 1209.99 L2055.06 1209.99 L2055.64 1209.99 L2056.23 1209.99 L2056.81 1209.99 L2057.4 1209.99 L2057.99 1209.99 L2058.57 1209.99 L2059.16 1209.99 L2059.75 1209.99 L2060.33 1209.99 L2060.92 1209.99 L2061.51 1209.99 L2062.09 1209.99 L2062.68 1209.99 L2063.27 1209.99 L2063.85 1209.99 L2064.44 1209.99 L2065.02 1209.99 L2065.61 1209.99 L2066.2 1209.99 L2066.78 1209.99 L2067.37 1209.99 L2067.96 1209.99 L2068.54 1209.99 L2069.13 1209.99 L2069.72 1209.99 L2070.3 1209.99 L2070.89 1209.99 L2071.48 1209.99 L2072.06 1209.99 L2072.65 1209.99 L2073.23 1209.99 L2073.82 1209.99 L2074.41 1209.99 L2074.99 1209.99 L2075.58 1209.99 L2076.17 1209.99 L2076.75 1209.99 L2077.34 1209.99 L2077.93 1209.99 L2078.51 1209.99 L2079.1 1209.99 L2079.68 1209.99 L2080.27 1209.99 L2080.86 1209.99 L2081.44 1209.99 L2082.03 1209.99 L2082.62 1209.99 L2083.2 1209.99 L2083.79 1209.99 L2084.38 1209.99 L2084.96 1209.99 L2085.55 1209.99 L2086.14 1209.99 L2086.72 1209.99 L2087.31 1209.99 L2087.89 1209.99 L2088.48 1209.99 L2089.07 1209.99 L2089.65 1209.99 L2090.24 1209.99 L2090.83 1209.99 L2091.41 1209.99 L2092 1209.99 L2092.59 1209.99 L2093.17 1209.99 L2093.76 1209.99 L2094.35 1209.99 L2094.93 1209.99 L2095.52 1209.99 L2096.1 1209.99 L2096.69 1209.99 L2097.28 1209.99 L2097.86 1209.99 L2098.45 1209.99 L2099.04 1209.99 L2099.62 1209.99 L2100.21 1209.99 L2100.8 1209.99 L2101.38 1209.99 L2101.97 1209.99 L2102.55 1209.99 L2103.14 1209.99 L2103.73 1209.99 L2104.31 1209.99 L2104.9 1209.99 L2105.49 1209.99 L2106.07 1209.99 L2106.66 1209.99 L2107.25 1209.99 L2107.83 1209.99 L2108.42 1209.99 L2109.01 1209.99 L2109.59 1209.99 L2110.18 1209.99 L2110.76 1209.99 L2111.35 1209.99 L2111.94 1209.99 L2112.52 1209.99 L2113.11 1209.99 L2113.7 1209.99 L2114.28 1209.99 L2114.87 1209.99 L2115.46 1209.99 L2116.04 1209.99 L2116.63 1209.99 L2117.22 1209.99 L2117.8 1209.99 L2118.39 1209.99 L2118.97 1209.99 L2119.56 1209.99 L2120.15 1209.99 L2120.73 1209.99 L2121.32 1209.99 L2121.91 1209.99 L2122.49 1209.99 L2123.08 1209.99 L2123.67 1209.99 L2124.25 1209.99 L2124.84 1209.99 L2125.42 1209.99 L2126.01 1209.99 L2126.6 1209.99 L2127.18 1209.99 L2127.77 1209.99 L2128.36 1209.99 L2128.94 1209.99 L2129.53 1209.99 L2130.12 1209.99 L2130.7 1209.99 L2131.29 1209.99 L2131.88 1209.99 L2132.46 1209.99 L2133.05 1209.99 L2133.63 1209.99 L2134.22 1209.99 L2134.81 1209.99 L2135.39 1209.99 L2135.98 1209.99 L2136.57 1209.99 L2137.15 1209.99 L2137.74 1209.99 L2138.33 1209.99 L2138.91 1209.99 L2139.5 1209.99 L2140.09 1209.99 L2140.67 1209.99 L2141.26 1209.99 L2141.84 1209.99 L2142.43 1209.99 L2143.02 1209.99 L2143.6 1209.99 L2144.19 1209.99 L2144.78 1209.99 L2145.36 1209.99 L2145.95 1209.99 L2146.54 1209.99 L2147.12 1209.99 L2147.71 1209.99 L2148.3 1209.99 L2148.88 1209.99 L2149.47 1209.99 L2150.05 1209.99 L2150.64 1209.99 L2151.23 1209.99 L2151.81 1209.99 L2152.4 1209.99 L2152.99 1209.99 L2153.57 1209.99 L2154.16 1209.99 L2154.75 1209.99 L2155.33 1209.99 L2155.92 1209.99 L2156.5 1209.99 L2157.09 1209.99 L2157.68 1209.99 L2158.26 1209.99 L2158.26 1209.29 L2157.68 1209.29 L2157.09 1209.29 L2156.5 1209.29 L2155.92 1209.29 L2155.33 1209.29 L2154.75 1209.29 L2154.16 1209.29 L2153.57 1209.29 L2152.99 1209.29 L2152.4 1209.29 L2151.81 1209.29 L2151.23 1209.29 L2150.64 1209.29 L2150.05 1209.29 L2149.47 1209.29 L2148.88 1209.29 L2148.3 1209.29 L2147.71 1209.29 L2147.12 1209.29 L2146.54 1209.29 L2145.95 1209.29 L2145.36 1209.29 L2144.78 1209.29 L2144.19 1209.29 L2143.6 1209.29 L2143.02 1209.29 L2142.43 1209.29 L2141.84 1209.29 L2141.26 1209.29 L2140.67 1209.29 L2140.09 1209.29 L2139.5 1209.29 L2138.91 1209.29 L2138.33 1209.29 L2137.74 1209.29 L2137.15 1209.29 L2136.57 1209.29 L2135.98 1209.29 L2135.39 1209.29 L2134.81 1209.29 L2134.22 1209.29 L2133.63 1209.29 L2133.05 1209.29 L2132.46 1209.29 L2131.88 1209.29 L2131.29 1209.29 L2130.7 1209.29 L2130.12 1209.29 L2129.53 1209.29 L2128.94 1209.29 L2128.36 1209.29 L2127.77 1209.29 L2127.18 1209.29 L2126.6 1209.29 L2126.01 1209.29 L2125.42 1209.29 L2124.84 1209.29 L2124.25 1209.29 L2123.67 1209.29 L2123.08 1209.29 L2122.49 1209.29 L2121.91 1209.29 L2121.32 1209.29 L2120.73 1209.29 L2120.15 1209.29 L2119.56 1209.29 L2118.97 1209.29 L2118.39 1209.29 L2117.8 1209.29 L2117.22 1209.29 L2116.63 1209.29 L2116.04 1209.29 L2115.46 1209.29 L2114.87 1209.29 L2114.28 1209.29 L2113.7 1209.29 L2113.11 1209.29 L2112.52 1209.29 L2111.94 1209.29 L2111.35 1209.29 L2110.76 1209.29 L2110.18 1209.29 L2109.59 1209.29 L2109.01 1209.29 L2108.42 1209.29 L2107.83 1209.29 L2107.25 1209.29 L2106.66 1209.29 L2106.07 1209.29 L2105.49 1209.29 L2104.9 1209.29 L2104.31 1209.29 L2103.73 1209.29 L2103.14 1209.29 L2102.55 1209.29 L2101.97 1209.29 L2101.38 1209.29 L2100.8 1209.29 L2100.21 1209.29 L2099.62 1209.29 L2099.04 1209.29 L2098.45 1209.29 L2097.86 1209.29 L2097.28 1209.29 L2096.69 1209.29 L2096.1 1209.29 L2095.52 1209.29 L2094.93 1209.29 L2094.35 1209.29 L2093.76 1209.29 L2093.17 1209.29 L2092.59 1209.29 L2092 1209.29 L2091.41 1209.29 L2090.83 1209.29 L2090.24 1209.29 L2089.65 1209.29 L2089.07 1209.29 L2088.48 1209.29 L2087.89 1209.29 L2087.31 1209.29 L2086.72 1209.29 L2086.14 1209.29 L2085.55 1209.29 L2084.96 1209.29 L2084.38 1209.29 L2083.79 1209.29 L2083.2 1209.29 L2082.62 1209.29 L2082.03 1209.29 L2081.44 1209.29 L2080.86 1209.29 L2080.27 1209.29 L2079.68 1209.29 L2079.1 1209.29 L2078.51 1209.29 L2077.93 1209.29 L2077.34 1209.29 L2076.75 1209.29 L2076.17 1209.29 L2075.58 1209.29 L2074.99 1209.29 L2074.41 1209.29 L2073.82 1209.29 L2073.23 1209.29 L2072.65 1209.29 L2072.06 1209.29 L2071.48 1209.29 L2070.89 1209.29 L2070.3 1209.29 L2069.72 1209.29 L2069.13 1209.29 L2068.54 1209.29 L2067.96 1209.29 L2067.37 1209.29 L2066.78 1209.29 L2066.2 1209.29 L2065.61 1209.29 L2065.02 1209.29 L2064.44 1209.29 L2063.85 1209.29 L2063.27 1209.29 L2062.68 1209.29 L2062.09 1209.29 L2061.51 1209.29 L2060.92 1209.29 L2060.33 1209.29 L2059.75 1209.29 L2059.16 1209.29 L2058.57 1209.29 L2057.99 1209.29 L2057.4 1209.29 L2056.81 1209.29 L2056.23 1209.29 L2055.64 1209.29 L2055.06 1209.29 L2054.47 1209.29 L2053.88 1209.29 L2053.3 1209.29 L2052.71 1209.29 L2052.12 1209.29 L2051.54 1209.29 L2050.95 1209.29 L2050.36 1209.29 L2049.78 1209.29 L2049.19 1209.29 L2048.6 1209.29 L2048.02 1209.29 L2047.43 1209.29 L2046.85 1209.29 L2046.26 1209.29 L2045.67 1209.29 L2045.09 1209.29 L2044.5 1209.29 L2043.91 1209.29 L2043.33 1209.29 L2042.74 1209.29 L2042.15 1209.29 L2041.57 1209.29 L2040.98 1209.29 L2040.4 1209.29 L2039.81 1209.29 L2039.22 1209.29 L2038.64 1209.29 L2038.05 1209.29 L2037.46 1209.29 L2036.88 1209.29 L2036.29 1209.29 L2035.7 1209.29 L2035.12 1209.29 L2034.53 1209.29 L2033.94 1209.29 L2033.36 1209.29 L2032.77 1209.29 L2032.19 1209.29 L2031.6 1209.29 L2031.01 1209.29 L2030.43 1209.29 L2029.84 1209.29 L2029.25 1209.29 L2028.67 1209.29 L2028.08 1209.29 L2027.49 1209.29 L2026.91 1209.29 L2026.32 1209.29 L2025.73 1209.29 L2025.15 1209.29 L2024.56 1209.29 L2023.98 1209.29 L2023.39 1209.29 L2022.8 1209.29 L2022.22 1209.29 L2021.63 1209.29 L2021.04 1209.29 L2020.46 1209.29 L2019.87 1209.29 L2019.28 1209.29 L2018.7 1209.29 L2018.11 1209.29 L2017.53 1209.29 L2016.94 1209.29 L2016.35 1209.29 L2015.77 1209.29 L2015.18 1209.29 L2014.59 1209.29 L2014.01 1209.29 L2013.42 1209.29 L2012.83 1209.29 L2012.25 1209.29 L2011.66 1209.29 L2011.07 1209.29 L2010.49 1209.29 L2009.9 1209.29 L2009.32 1209.29 L2008.73 1209.29 L2008.14 1209.29 L2007.56 1209.29 L2006.97 1209.29 L2006.38 1209.29 L2005.8 1209.29 L2005.21 1209.29 L2004.62 1209.29 L2004.04 1209.29 L2003.45 1209.29 L2002.86 1209.29 L2002.28 1209.29 L2001.69 1209.29 L2001.11 1209.29 L2000.52 1209.29 L1999.93 1209.29 L1999.35 1209.29 L1998.76 1209.29 L1998.17 1209.29 L1997.59 1209.29 L1997 1209.29 L1996.41 1209.29 L1995.83 1209.29 L1995.24 1209.29 L1994.65 1209.29 L1994.07 1209.29 L1993.48 1209.29 L1992.9 1209.29 L1992.31 1209.29 L1991.72 1209.29 L1991.14 1209.29 L1990.55 1209.29 L1989.96 1209.29 L1989.38 1209.29 L1988.79 1209.29 L1988.2 1209.29 L1987.62 1209.29 L1987.03 1209.29 L1986.45 1209.29 L1985.86 1209.29 L1985.27 1209.29 L1984.69 1209.29 L1984.1 1209.29 L1983.51 1209.29 L1982.93 1209.29 L1982.34 1209.29 L1981.75 1209.29 L1981.17 1209.29 L1980.58 1209.29 L1979.99 1209.29 L1979.41 1209.29 L1978.82 1209.29 L1978.24 1209.29 L1977.65 1209.29 L1977.06 1209.29 L1976.48 1209.29 L1975.89 1209.29 L1975.3 1209.29 L1974.72 1209.29 L1974.13 1209.29 L1973.54 1209.29 L1972.96 1209.29 L1972.37 1209.29 L1971.78 1209.29 L1971.2 1209.29 L1970.61 1209.29 L1970.03 1209.29 L1969.44 1209.29 L1968.85 1209.29 L1968.27 1209.29 L1967.68 1209.29 L1967.09 1209.29 L1966.51 1209.29 L1965.92 1209.29 L1965.33 1209.29 L1964.75 1209.29 L1964.16 1209.29 L1963.58 1209.29 L1962.99 1209.29 L1962.4 1209.29 L1961.82 1209.29 L1961.23 1209.29 L1960.64 1209.29 L1960.06 1209.29 L1959.47 1209.29 L1958.88 1209.29 L1958.3 1209.29 L1957.71 1209.29 L1957.12 1209.29 L1956.54 1209.29 L1955.95 1209.29 L1955.37 1209.29 L1954.78 1209.29 L1954.19 1209.29 L1953.61 1209.29 L1953.02 1209.29 L1952.43 1209.29 L1951.85 1209.29 L1951.26 1209.29 L1950.67 1209.29 L1950.09 1209.29 L1949.5 1209.29 L1948.91 1209.29 L1948.33 1209.29 L1947.74 1209.29 L1947.16 1209.29 L1946.57 1209.29 L1945.98 1209.29 L1945.4 1209.29 L1944.81 1209.29 L1944.22 1209.29 L1943.64 1209.29 L1943.05 1209.29 L1942.46 1209.29 L1941.88 1209.29 L1941.29 1209.29 L1940.71 1209.29 L1940.12 1209.29 L1939.53 1209.29 L1938.95 1209.29 L1938.36 1209.29 L1937.77 1209.29 L1937.19 1209.29 L1936.6 1209.29 L1936.01 1209.29 L1935.43 1209.29 L1934.84 1209.29 L1934.25 1209.29 L1933.67 1209.29 L1933.08 1209.29 L1932.5 1209.29 L1931.91 1209.29 L1931.32 1209.29 L1930.74 1209.29 L1930.15 1209.29 L1929.56 1209.29 L1928.98 1209.29 L1928.39 1209.29 L1927.8 1209.29 L1927.22 1209.29 L1926.63 1209.29 L1926.04 1209.29 L1925.46 1209.29 L1924.87 1209.29 L1924.29 1209.29 L1923.7 1209.29 L1923.11 1209.29 L1922.53 1209.29 L1921.94 1209.29 L1921.35 1209.29 L1920.77 1209.29 L1920.18 1209.29 L1919.59 1209.29 L1919.01 1209.29 L1918.42 1209.29 L1917.83 1209.29 L1917.25 1209.29 L1916.66 1209.29 L1916.08 1209.29 L1915.49 1209.29 L1914.9 1209.29 L1914.32 1209.29 L1913.73 1209.29 L1913.14 1209.29 L1912.56 1209.29 L1911.97 1209.29 L1911.38 1209.29 L1910.8 1209.29 L1910.21 1209.29 L1909.63 1209.29 L1909.04 1209.29 L1908.45 1209.29 L1907.87 1209.29 L1907.28 1209.29 L1906.69 1209.29 L1906.11 1209.29 L1905.52 1209.29 L1904.93 1209.29 L1904.35 1209.29 L1903.76 1209.29 L1903.17 1209.29 L1902.59 1209.29 L1902 1209.29 L1901.42 1209.29 L1900.83 1209.29 L1900.24 1209.29 L1899.66 1209.29 L1899.07 1209.29 L1898.48 1209.29 L1897.9 1209.29 L1897.31 1209.29 L1896.72 1209.29 L1896.14 1209.29 L1895.55 1209.29 L1894.96 1209.29 L1894.38 1209.29 L1893.79 1209.29 L1893.21 1209.29 L1892.62 1209.29 L1892.03 1209.29 L1891.45 1209.29 L1890.86 1209.29 L1890.27 1209.29 L1889.69 1209.29 L1889.1 1209.29 L1888.51 1209.29 L1887.93 1209.29 L1887.34 1209.29 L1886.76 1209.29 L1886.17 1209.29 L1885.58 1209.29 L1885 1209.29 L1884.41 1209.29 L1883.82 1209.29 L1883.24 1209.29 L1882.65 1209.29 L1882.06 1209.29 L1881.48 1209.29 L1880.89 1209.29 L1880.3 1209.29 L1879.72 1209.29 L1879.13 1209.29 L1878.55 1209.29 L1877.96 1209.29 L1877.37 1209.29 L1876.79 1209.29 L1876.2 1209.29 L1875.61 1209.29 L1875.03 1209.29 L1874.44 1209.29 L1873.85 1209.29 L1873.27 1209.29 L1872.68 1209.29 L1872.09 1209.29 L1871.51 1209.29 L1870.92 1209.29 L1870.34 1209.29 L1869.75 1209.29 L1869.16 1209.29 L1868.58 1209.29 L1867.99 1209.29 L1867.4 1209.29 L1866.82 1209.29 L1866.23 1209.29 L1865.64 1209.29 L1865.06 1209.29 L1864.47 1209.29 L1863.88 1209.29 L1863.3 1209.29 L1862.71 1209.29 L1862.13 1209.29 L1861.54 1209.29 L1860.95 1209.29 L1860.37 1209.29 L1859.78 1209.29 L1859.19 1209.29 L1858.61 1209.29 L1858.02 1209.29 L1857.43 1209.29 L1856.85 1209.29 L1856.26 1209.29 L1855.68 1209.29 L1855.09 1209.29 L1854.5 1209.29 L1853.92 1209.29 L1853.33 1209.29 L1852.74 1209.29 L1852.16 1209.29 L1851.57 1209.29 L1850.98 1209.29 L1850.4 1209.29 L1849.81 1209.29 L1849.22 1209.29 L1848.64 1209.29 L1848.05 1209.29 L1847.47 1209.29 L1846.88 1209.29 L1846.29 1209.29 L1845.71 1209.29 L1845.12 1209.29 L1844.53 1209.29 L1843.95 1209.29 L1843.36 1209.29 L1842.77 1209.29 L1842.19 1209.29 L1841.6 1209.29 L1841.01 1209.29 L1840.43 1209.29 L1839.84 1209.29 L1839.26 1209.29 L1838.67 1209.29 L1838.08 1209.29 L1837.5 1209.29 L1836.91 1209.29 L1836.32 1209.29 L1835.74 1209.29 L1835.15 1209.29 L1834.56 1209.29 L1833.98 1209.29 L1833.39 1209.29 L1832.81 1209.29 L1832.22 1209.29 L1831.63 1209.29 L1831.05 1209.29 L1830.46 1209.29 L1829.87 1209.29 L1829.29 1209.29 L1828.7 1209.29 L1828.11 1209.29 L1827.53 1209.29 L1826.94 1209.29 L1826.35 1209.29 L1825.77 1209.29 L1825.18 1209.29 L1824.6 1209.29 L1824.01 1209.29 L1823.42 1209.29 L1822.84 1209.29 L1822.25 1209.29 L1821.66 1209.29 L1821.08 1209.29 L1820.49 1209.29 L1819.9 1209.29 L1819.32 1209.29 L1818.73 1209.29 L1818.14 1209.29 L1817.56 1209.29 L1816.97 1209.29 L1816.39 1209.29 L1815.8 1209.29 L1815.21 1209.29 L1814.63 1209.29 L1814.04 1209.29 L1813.45 1209.29 L1812.87 1209.29 L1812.28 1209.29 L1811.69 1209.29 L1811.11 1209.29 L1810.52 1209.29 L1809.94 1209.29 L1809.35 1209.29 L1808.76 1209.29 L1808.18 1209.29 L1807.59 1209.29 L1807 1209.29 L1806.42 1209.29 L1805.83 1209.29 L1805.24 1209.29 L1804.66 1209.29 L1804.07 1209.29 L1803.48 1209.29 L1802.9 1209.29 L1802.31 1209.29 L1801.73 1209.29 L1801.14 1209.29 L1800.55 1209.29 L1799.97 1209.29 L1799.38 1209.29 L1798.79 1209.29 L1798.21 1209.29 L1797.62 1209.29 L1797.03 1209.29 L1796.45 1209.29 L1795.86 1209.29 L1795.27 1209.29 L1794.69 1209.29 L1794.1 1209.29 L1793.52 1209.29 L1792.93 1209.29 L1792.34 1209.29 L1791.76 1209.29 L1791.17 1209.29 L1790.58 1209.29 L1790 1209.29 L1789.41 1209.29 L1788.82 1209.29 L1788.24 1209.29 L1787.65 1209.29 L1787.06 1209.29 L1786.48 1209.29 L1785.89 1209.29 L1785.31 1209.29 L1784.72 1209.29 L1784.13 1209.29 L1783.55 1209.29 L1782.96 1209.29 L1782.37 1209.29 L1781.79 1209.29 L1781.2 1209.29 L1780.61 1209.29 L1780.03 1209.29 L1779.44 1209.29 L1778.86 1209.29 L1778.27 1209.29 L1777.68 1209.29 L1777.1 1209.29 L1776.51 1209.29 L1775.92 1209.29 L1775.34 1209.29 L1774.75 1209.29 L1774.16 1209.29 L1773.58 1209.29 L1772.99 1209.29 L1772.4 1209.29 L1771.82 1209.29 L1771.23 1209.29 L1770.65 1209.29 L1770.06 1209.29 L1769.47 1209.29 L1768.89 1209.29 L1768.3 1209.29 L1767.71 1209.29 L1767.13 1209.29 L1766.54 1209.29 L1765.95 1209.29 L1765.37 1209.29 L1764.78 1209.29 L1764.19 1209.29 L1763.61 1209.29 L1763.02 1209.29 L1762.44 1209.29 L1761.85 1209.29 L1761.26 1209.29 L1760.68 1209.29 L1760.09 1209.29 L1759.5 1209.29 L1758.92 1209.29 L1758.33 1209.29 L1757.74 1209.29 L1757.16 1209.29 L1756.57 1209.29 L1755.99 1209.29 L1755.4 1209.29 L1754.81 1209.29 L1754.23 1209.29 L1753.64 1209.29 L1753.05 1209.29 L1752.47 1209.29 L1751.88 1209.29 L1751.29 1209.29 L1750.71 1209.29 L1750.12 1209.29 L1749.53 1209.29 L1748.95 1209.29 L1748.36 1209.29 L1747.78 1209.29 L1747.19 1209.29 L1746.6 1209.29 L1746.02 1209.29 L1745.43 1209.29 L1744.84 1209.29 L1744.26 1209.29 L1743.67 1209.29 L1743.08 1209.29 L1742.5 1209.29 L1741.91 1209.29 L1741.32 1209.29 L1740.74 1209.29 L1740.15 1209.29 L1739.57 1209.29 L1738.98 1209.29 L1738.39 1209.29 L1737.81 1209.29 L1737.22 1209.29 L1736.63 1209.29 L1736.05 1209.29 L1735.46 1209.29 L1734.87 1209.29 L1734.29 1209.29 L1733.7 1209.29 L1733.11 1209.29 L1732.53 1209.29 L1731.94 1209.29 L1731.36 1209.29 L1730.77 1209.29 L1730.18 1209.29 L1729.6 1209.29 L1729.01 1209.29 L1728.42 1209.29 L1727.84 1209.29 L1727.25 1209.29 L1726.66 1209.29 L1726.08 1209.29 L1725.49 1209.29 L1724.91 1209.29 L1724.32 1209.29 L1723.73 1209.29 L1723.15 1209.29 L1722.56 1209.29 L1721.97 1209.29 L1721.39 1209.29 L1720.8 1209.29 L1720.21 1209.29 L1719.63 1209.29 L1719.04 1209.29 L1718.45 1209.29 L1717.87 1209.29 L1717.28 1209.29 L1716.7 1209.29 L1716.11 1209.29 L1715.52 1209.29 L1714.94 1209.29 L1714.35 1209.29 L1713.76 1209.29 L1713.18 1209.29 L1712.59 1209.29 L1712 1209.29 L1711.42 1209.29 L1710.83 1209.29 L1710.24 1209.29 L1709.66 1209.29 L1709.07 1209.29 L1708.49 1209.29 L1707.9 1209.29 L1707.31 1209.29 L1706.73 1209.29 L1706.14 1209.29 L1705.55 1209.29 L1704.97 1209.29 L1704.38 1209.29 L1703.79 1209.29 L1703.21 1209.29 L1702.62 1209.29 L1702.04 1209.29 L1701.45 1209.29 L1700.86 1209.29 L1700.28 1209.29 L1699.69 1209.29 L1699.1 1209.29 L1698.52 1209.29 L1697.93 1209.29 L1697.34 1209.29 L1696.76 1209.29 L1696.17 1209.29 L1695.58 1209.29 L1695 1209.29 L1694.41 1209.29 L1693.83 1209.29 L1693.24 1209.29 L1692.65 1209.29 L1692.07 1209.29 L1691.48 1209.29 L1690.89 1209.29 L1690.31 1209.29 L1689.72 1209.29 L1689.13 1209.29 L1688.55 1209.29 L1687.96 1209.29 L1687.37 1209.29 L1686.79 1209.29 L1686.2 1209.29 L1685.62 1209.29 L1685.03 1209.29 L1684.44 1209.29 L1683.86 1209.29 L1683.27 1209.29 L1682.68 1209.29 L1682.1 1209.29 L1681.51 1209.29 L1680.92 1209.29 L1680.34 1209.29 L1679.75 1209.29 L1679.17 1209.29 L1678.58 1209.29 L1677.99 1209.29 L1677.41 1209.29 L1676.82 1209.29 L1676.23 1209.29 L1675.65 1209.29 L1675.06 1209.29 L1674.47 1209.29 L1673.89 1209.29 L1673.3 1209.29 L1672.71 1209.29 L1672.13 1209.29 L1671.54 1209.29 L1670.96 1209.29 L1670.37 1209.29 L1669.78 1209.29 L1669.2 1209.29 L1668.61 1209.29 L1668.02 1209.29 L1667.44 1209.29 L1666.85 1209.29 L1666.26 1209.29 L1665.68 1209.29 L1665.09 1209.29 L1664.5 1209.29 L1663.92 1209.29 L1663.33 1209.29 L1662.75 1209.29 L1662.16 1209.29 L1661.57 1209.29 L1660.99 1209.29 L1660.4 1209.29 L1659.81 1209.29 L1659.23 1209.29 L1658.64 1209.29 L1658.05 1209.29 L1657.47 1209.29 L1656.88 1209.29 L1656.29 1209.29 L1655.71 1209.29 L1655.12 1209.29 L1654.54 1209.29 L1653.95 1209.29 L1653.36 1209.29 L1652.78 1209.29 L1652.19 1209.29 L1651.6 1209.29 L1651.02 1209.29 L1650.43 1209.29 L1649.84 1209.29 L1649.26 1209.29 L1648.67 1209.29 L1648.09 1209.29 L1647.5 1209.29 L1646.91 1209.29 L1646.33 1209.29 L1645.74 1209.29 L1645.15 1209.29 L1644.57 1209.29 L1643.98 1209.29 L1643.39 1209.29 L1642.81 1209.29 L1642.22 1209.29 L1641.63 1209.29 L1641.05 1209.29 L1640.46 1209.29 L1639.88 1209.29 L1639.29 1209.29 L1638.7 1209.29 L1638.12 1209.29 L1637.53 1209.29 L1636.94 1209.29 L1636.36 1209.29 L1635.77 1209.29 L1635.18 1209.29 L1634.6 1209.29 L1634.01 1209.29 L1633.42 1209.29 L1632.84 1209.29 L1632.25 1209.29 L1631.67 1209.29 L1631.08 1209.29 L1630.49 1209.29 L1629.91 1209.29 L1629.32 1209.29 L1628.73 1209.29 L1628.15 1209.29 L1627.56 1209.29 L1626.97 1209.29 L1626.39 1209.29 L1625.8 1209.29 L1625.22 1209.29 L1624.63 1209.29 L1624.04 1209.29 L1623.46 1209.29 L1622.87 1209.29 L1622.28 1209.29 L1621.7 1209.29 L1621.11 1209.29 L1620.52 1209.29 L1619.94 1209.29 L1619.35 1209.29 L1618.76 1209.29 L1618.18 1209.29 L1617.59 1209.29 L1617.01 1209.29 L1616.42 1209.29 L1615.83 1209.29 L1615.25 1209.29 L1614.66 1209.29 L1614.07 1209.29 L1613.49 1209.29 L1612.9 1209.29 L1612.31 1209.29 L1611.73 1209.29 L1611.14 1209.29 L1610.55 1209.29 L1609.97 1209.29 L1609.38 1209.29 L1608.8 1209.29 L1608.21 1209.29 L1607.62 1209.29 L1607.04 1209.29 L1606.45 1209.29 L1605.86 1209.29 L1605.28 1209.29 L1604.69 1209.29 L1604.1 1209.29 L1603.52 1209.29 L1602.93 1209.29 L1602.34 1209.29 L1601.76 1209.29 L1601.17 1209.29 L1600.59 1209.29 L1600 1209.29 L1599.41 1209.29 L1598.83 1209.29 L1598.24 1209.29 L1597.65 1209.29 L1597.07 1209.29 L1596.48 1209.29 L1595.89 1209.29 L1595.31 1209.29 L1594.72 1209.29 L1594.14 1209.29 L1593.55 1209.29 L1592.96 1209.29 L1592.38 1209.29 L1591.79 1209.29 L1591.2 1209.29 L1590.62 1209.29 L1590.03 1209.29 L1589.44 1209.29 L1588.86 1209.29 L1588.27 1209.29 L1587.68 1209.29 L1587.1 1209.29 L1586.51 1209.29 L1585.93 1209.29 L1585.34 1209.29 L1584.75 1209.29 L1584.17 1209.29 L1583.58 1209.29 L1582.99 1209.29 L1582.41 1209.29 L1581.82 1209.29 L1581.23 1209.29 L1580.65 1209.29 L1580.06 1209.29 L1579.47 1209.29 L1578.89 1209.29 L1578.3 1209.29 L1577.72 1209.29 L1577.13 1209.29 L1576.54 1209.29 L1575.96 1209.29 L1575.37 1209.29 L1574.78 1209.29 L1574.2 1209.29 L1573.61 1209.29 L1573.02 1209.29 L1572.44 1209.29 L1571.85 1209.29 L1571.27 1209.29 L1570.68 1209.29 L1570.09 1209.29 L1569.51 1209.29 L1568.92 1209.29 L1568.33 1209.29 L1567.75 1209.29 L1567.16 1209.29 L1566.57 1209.29 L1565.99 1209.29 L1565.4 1209.29 L1564.81 1209.29 L1564.23 1209.29 L1563.64 1209.29 L1563.06 1209.29 L1562.47 1209.29 L1561.88 1209.29 L1561.3 1209.29 L1560.71 1209.29 L1560.12 1209.29 L1559.54 1209.29 L1558.95 1209.29 L1558.36 1209.29 L1557.78 1209.29 L1557.19 1209.29 L1556.6 1209.29 L1556.02 1209.29 L1555.43 1209.29 L1554.85 1209.29 L1554.26 1209.29 L1553.67 1209.29 L1553.09 1209.29 L1552.5 1209.29 L1551.91 1209.29 L1551.33 1209.29 L1550.74 1209.29 L1550.15 1209.29 L1549.57 1209.29 L1548.98 1209.29 L1548.4 1209.29 L1547.81 1209.29 L1547.22 1209.29 L1546.64 1209.29 L1546.05 1209.29 L1545.46 1209.29 L1544.88 1209.29 L1544.29 1209.29 L1543.7 1209.29 L1543.12 1209.29 L1542.53 1209.29 L1541.94 1209.29 L1541.36 1209.29 L1540.77 1209.29 L1540.19 1209.29 L1539.6 1209.29 L1539.01 1209.29 L1538.43 1209.29 L1537.84 1209.29 L1537.25 1209.29 L1536.67 1209.29 L1536.08 1209.29 L1535.49 1209.29 L1534.91 1209.29 L1534.32 1209.29 L1533.73 1209.29 L1533.15 1209.29 L1532.56 1209.29 L1531.98 1209.29 L1531.39 1209.29 L1530.8 1209.29 L1530.22 1209.29 L1529.63 1209.29 L1529.04 1209.29 L1528.46 1209.29 L1527.87 1209.29 L1527.28 1209.29 L1526.7 1209.29 L1526.11 1209.29 L1525.52 1209.29 L1524.94 1209.29 L1524.35 1209.29 L1523.77 1209.29 L1523.18 1209.29 L1522.59 1209.29 L1522.01 1209.29 L1521.42 1209.29 L1520.83 1209.29 L1520.25 1209.29 L1519.66 1209.29 L1519.07 1209.29 L1518.49 1209.29 L1517.9 1209.29 L1517.32 1209.29 L1516.73 1209.29 L1516.14 1209.29 L1515.56 1209.29 L1514.97 1209.29 L1514.38 1209.29 L1513.8 1209.29 L1513.21 1209.29 L1512.62 1209.29 L1512.04 1209.29 L1511.45 1209.29 L1510.86 1209.29 L1510.28 1209.29 L1509.69 1209.29 L1509.11 1209.29 L1508.52 1209.29 L1507.93 1209.29 L1507.35 1209.29 L1506.76 1209.29 L1506.17 1209.29 L1505.59 1209.29 L1505 1209.29 L1504.41 1209.29 L1503.83 1209.29 L1503.24 1209.29 L1502.65 1209.29 L1502.07 1209.29 L1501.48 1209.29 L1500.9 1209.29 L1500.31 1209.29 L1499.72 1209.29 L1499.14 1209.29 L1498.55 1209.29 L1497.96 1209.29 L1497.38 1209.29 L1496.79 1209.29 L1496.2 1209.29 L1495.62 1209.29 L1495.03 1209.29 L1494.45 1209.29 L1493.86 1209.29 L1493.27 1209.29 L1492.69 1209.29 L1492.1 1209.29 L1491.51 1209.29 L1490.93 1209.29 L1490.34 1209.29 L1489.75 1209.29 L1489.17 1209.29 L1488.58 1209.29 L1487.99 1209.29 L1487.41 1209.29 L1486.82 1209.29 L1486.24 1209.29 L1485.65 1209.29 L1485.06 1209.29 L1484.48 1209.29 L1483.89 1209.29 L1483.3 1209.29 L1482.72 1209.29 L1482.13 1209.29 L1481.54 1209.29 L1480.96 1209.29 L1480.37 1209.29 L1479.78 1209.29 L1479.2 1209.29 L1478.61 1209.29 L1478.03 1209.29 L1477.44 1209.29 L1476.85 1209.29 L1476.27 1209.29 L1475.68 1209.29 L1475.09 1209.29 L1474.51 1209.29 L1473.92 1209.29 L1473.33 1209.29 L1472.75 1209.29 L1472.16 1209.29 L1471.57 1209.29 L1470.99 1209.29 L1470.4 1209.29 L1469.82 1209.29 L1469.23 1209.29 L1468.64 1209.29 L1468.06 1209.29 L1467.47 1209.29 L1466.88 1209.29 L1466.3 1209.29 L1465.71 1209.29 L1465.12 1209.29 L1464.54 1209.29 L1463.95 1209.29 L1463.37 1209.29 L1462.78 1209.29 L1462.19 1209.29 L1461.61 1209.29 L1461.02 1209.29 L1460.43 1209.29 L1459.85 1209.29 L1459.26 1209.29 L1458.67 1209.29 L1458.09 1209.29 L1457.5 1209.29 L1456.91 1209.29 L1456.33 1209.29 L1455.74 1209.29 L1455.16 1209.29 L1454.57 1209.29 L1453.98 1209.29 L1453.4 1209.29 L1452.81 1209.29 L1452.22 1209.29 L1451.64 1209.29 L1451.05 1209.29 L1450.46 1209.29 L1449.88 1209.29 L1449.29 1209.29 L1448.7 1209.29 L1448.12 1209.29 L1447.53 1209.29 L1446.95 1209.29 L1446.36 1209.29 L1445.77 1209.29 L1445.19 1209.29 L1444.6 1209.29 L1444.01 1209.29 L1443.43 1209.29 L1442.84 1209.29 L1442.25 1209.29 L1441.67 1209.29 L1441.08 1209.29 L1440.5 1209.29 L1439.91 1209.29 L1439.32 1209.29 L1438.74 1209.29 L1438.15 1209.29 L1437.56 1209.29 L1436.98 1209.29 L1436.39 1209.29 L1435.8 1209.29 L1435.22 1209.29 L1434.63 1209.29 L1434.04 1209.29 L1433.46 1209.29 L1432.87 1209.29 L1432.29 1209.29 L1431.7 1209.29 L1431.11 1209.29 L1430.53 1209.29 L1429.94 1209.29 L1429.35 1209.29 L1428.77 1209.29 L1428.18 1209.29 L1427.59 1209.29 L1427.01 1209.29 L1426.42 1209.29 L1425.83 1209.29 L1425.25 1209.29 L1424.66 1209.29 L1424.08 1209.29 L1423.49 1209.29 L1422.9 1209.29 L1422.32 1209.29 L1421.73 1209.29 L1421.14 1209.29 L1420.56 1209.29 L1419.97 1209.29 L1419.38 1209.29 L1418.8 1209.29 L1418.21 1209.29 L1417.63 1209.29 L1417.04 1209.29 L1416.45 1209.29 L1415.87 1209.29 L1415.28 1209.29 L1414.69 1209.29 L1414.11 1209.29 L1413.52 1209.29 L1412.93 1209.29 L1412.35 1209.29 L1411.76 1209.29 L1411.17 1209.29 L1410.59 1209.29 L1410 1209.29 L1409.42 1209.29 L1408.83 1209.29 L1408.24 1209.29 L1407.66 1209.29 L1407.07 1209.29 L1406.48 1209.29 L1405.9 1209.29 L1405.31 1209.29 L1404.72 1209.29 L1404.14 1209.29 L1403.55 1209.29 L1402.96 1209.29 L1402.38 1209.29 L1401.79 1209.29 L1401.21 1209.29 L1400.62 1209.29 L1400.03 1209.29 L1399.45 1209.29 L1398.86 1209.29 L1398.27 1209.29 L1397.69 1209.29 L1397.1 1209.29 L1396.51 1209.29 L1395.93 1209.29 L1395.34 1209.29 L1394.75 1209.29 L1394.17 1209.29 L1393.58 1209.29 L1393 1209.29 L1392.41 1209.29 L1391.82 1209.29 L1391.24 1209.29 L1390.65 1209.29 L1390.06 1209.29 L1389.48 1209.29 L1388.89 1209.29 L1388.3 1209.29 L1387.72 1209.29 L1387.13 1209.29 L1386.55 1209.29 L1385.96 1209.29 L1385.37 1209.29 L1384.79 1209.29 L1384.2 1209.29 L1383.61 1209.29 L1383.03 1209.29 L1382.44 1209.29 L1381.85 1209.29 L1381.27 1209.29 L1380.68 1209.29 L1380.09 1209.29 L1379.51 1209.29 L1378.92 1209.29 L1378.34 1209.29 L1377.75 1209.29 L1377.16 1209.29 L1376.58 1209.29 L1375.99 1209.29 L1375.4 1209.29 L1374.82 1209.29 L1374.23 1209.29 L1373.64 1209.29 L1373.06 1209.29 L1372.47 1209.29 L1371.88 1209.29 L1371.3 1209.29 L1370.71 1209.29 L1370.13 1209.29 L1369.54 1209.29 L1368.95 1209.29 L1368.37 1209.29 L1367.78 1209.29 L1367.19 1209.29 L1366.61 1209.29 L1366.02 1209.29 L1365.43 1209.29 L1364.85 1209.29 L1364.26 1209.29 L1363.68 1209.29 L1363.09 1209.29 L1362.5 1209.29 L1361.92 1209.29 L1361.33 1209.29 L1360.74 1209.29 L1360.16 1209.29 L1359.57 1209.29 L1358.98 1209.29 L1358.4 1209.29 L1357.81 1209.29 L1357.22 1209.29 L1356.64 1209.29 L1356.05 1209.29 L1355.47 1209.29 L1354.88 1209.29 L1354.29 1209.29 L1353.71 1209.29 L1353.12 1209.29 L1352.53 1209.29 L1351.95 1209.29 L1351.36 1209.29 L1350.77 1209.29 L1350.19 1209.29 L1349.6 1209.29 L1349.01 1209.29 L1348.43 1209.29 L1347.84 1209.29 L1347.26 1209.29 L1346.67 1209.29 L1346.08 1209.29 L1345.5 1209.29 L1344.91 1209.29 L1344.32 1209.29 L1343.74 1209.29 L1343.15 1209.29 L1342.56 1209.29 L1341.98 1209.29 L1341.39 1209.29 L1340.8 1209.29 L1340.22 1209.29 L1339.63 1209.29 L1339.05 1209.29 L1338.46 1209.29 L1337.87 1209.29 L1337.29 1209.29 L1336.7 1209.29 L1336.11 1209.29 L1335.53 1209.29 L1334.94 1209.29 L1334.35 1209.29 L1333.77 1209.29 L1333.18 1209.29 L1332.6 1209.29 L1332.01 1209.29 L1331.42 1209.29 L1330.84 1209.29 L1330.25 1209.29 L1329.66 1209.29 L1329.08 1209.29 L1328.49 1209.29 L1327.9 1209.29 L1327.32 1209.29 L1326.73 1209.29 L1326.14 1209.29 L1325.56 1209.29 L1324.97 1209.29 L1324.39 1209.29 L1323.8 1209.29 L1323.21 1209.29 L1322.63 1209.29 L1322.04 1209.29 L1321.45 1209.29 L1320.87 1209.29 L1320.28 1209.29 L1319.69 1209.29 L1319.11 1209.29 L1318.52 1209.29 L1317.93 1209.29 L1317.35 1209.29 L1316.76 1209.29 L1316.18 1209.29 L1315.59 1209.29 L1315 1209.29 L1314.42 1209.29 L1313.83 1209.29 L1313.24 1209.29 L1312.66 1209.29 L1312.07 1209.29 L1311.48 1209.29 L1310.9 1209.29 L1310.31 1209.29 L1309.73 1209.29 L1309.14 1209.29 L1308.55 1209.29 L1307.97 1209.29 L1307.38 1209.29 L1306.79 1209.29 L1306.21 1209.29 L1305.62 1209.29 L1305.03 1209.29 L1304.45 1209.29 L1303.86 1209.29 L1303.27 1209.29 L1302.69 1209.29 L1302.1 1209.29 L1301.52 1209.29 L1300.93 1209.29 L1300.34 1209.29 L1299.76 1209.29 L1299.17 1209.29 L1298.58 1209.29 L1298 1209.29 L1297.41 1209.29 L1296.82 1209.29 L1296.24 1209.29 L1295.65 1209.29 L1295.06 1209.29 L1294.48 1209.29 L1293.89 1209.29 L1293.31 1209.29 L1292.72 1209.29 L1292.13 1209.29 L1291.55 1209.29 L1290.96 1209.29 L1290.37 1209.29 L1289.79 1209.29 L1289.2 1209.29 L1288.61 1209.29 L1288.03 1209.29 L1287.44 1209.29 L1286.86 1209.29 L1286.27 1209.29 L1285.68 1209.29 L1285.1 1209.29 L1284.51 1209.29 L1283.92 1209.29 L1283.34 1209.29 L1282.75 1209.29 L1282.16 1209.29 L1281.58 1209.29 L1280.99 1209.29 L1280.4 1209.29 L1279.82 1209.29 L1279.23 1209.29 L1278.65 1209.29 L1278.06 1209.29 L1277.47 1209.29 L1276.89 1209.29 L1276.3 1209.29 L1275.71 1209.29 L1275.13 1209.29 L1274.54 1209.29 L1273.95 1209.29 L1273.37 1209.29 L1272.78 1209.29 L1272.19 1209.29 L1271.61 1209.29 L1271.02 1209.29 L1270.44 1209.29 L1269.85 1209.29 L1269.26 1209.29 L1268.68 1209.29 L1268.09 1209.29 L1267.5 1209.29 L1266.92 1209.29 L1266.33 1209.29 L1265.74 1209.29 L1265.16 1209.29 L1264.57 1209.29 L1263.98 1209.29 L1263.4 1209.29 L1262.81 1209.29 L1262.23 1209.29 L1261.64 1209.29 L1261.05 1209.29 L1260.47 1209.29 L1259.88 1209.29 L1259.29 1209.29 L1258.71 1209.29 L1258.12 1209.29 L1257.53 1209.29 L1256.95 1209.29 L1256.36 1209.29 L1255.78 1209.29 L1255.19 1209.29 L1254.6 1209.29 L1254.02 1209.29 L1253.43 1209.29 L1252.84 1209.29 L1252.26 1209.29 L1251.67 1209.29 L1251.08 1209.29 L1250.5 1209.29 L1249.91 1209.29 L1249.32 1209.29 L1248.74 1209.29 L1248.15 1209.29 L1247.57 1209.29 L1246.98 1209.29 L1246.39 1209.29 L1245.81 1209.29 L1245.22 1209.29 L1244.63 1209.29 L1244.05 1209.29 L1243.46 1209.29 L1242.87 1209.29 L1242.29 1209.29 L1241.7 1209.29 L1241.11 1209.29 L1240.53 1209.29 L1239.94 1209.29 L1239.36 1209.29 L1238.77 1209.29 L1238.18 1209.29 L1237.6 1209.29 L1237.01 1209.29 L1236.42 1209.29 L1235.84 1209.29 L1235.25 1209.29 L1234.66 1209.29 L1234.08 1209.29 L1233.49 1209.29 L1232.91 1209.29 L1232.32 1209.29 L1231.73 1209.29 L1231.15 1209.29 L1230.56 1209.29 L1229.97 1209.29 L1229.39 1209.29 L1228.8 1209.29 L1228.21 1209.29 L1227.63 1209.29 L1227.04 1209.29 L1226.45 1209.29 L1225.87 1209.29 L1225.28 1209.29 L1224.7 1209.29 L1224.11 1209.29 L1223.52 1209.29 L1222.94 1209.29 L1222.35 1209.29 L1221.76 1209.29 L1221.18 1209.29 L1220.59 1209.29 L1220 1209.29 L1219.42 1209.29 L1218.83 1209.29 L1218.24 1209.29 L1217.66 1209.29 L1217.07 1209.29 L1216.49 1209.29 L1215.9 1209.29 L1215.31 1209.29 L1214.73 1209.29 L1214.14 1209.29 L1213.55 1209.29 L1212.97 1209.29 L1212.38 1209.29 L1211.79 1209.29 L1211.21 1209.29 L1210.62 1209.29 L1210.03 1209.29 L1209.45 1209.29 L1208.86 1209.29 L1208.28 1209.29 L1207.69 1209.29 L1207.1 1209.29 L1206.52 1209.29 L1205.93 1209.29 L1205.34 1209.29 L1204.76 1209.29 L1204.17 1209.29 L1203.58 1209.29 L1203 1209.29 L1202.41 1209.29 L1201.83 1209.29 L1201.24 1209.29 L1200.65 1209.29 L1200.07 1209.29 L1199.48 1209.29 L1198.89 1209.29 L1198.31 1209.29 L1197.72 1209.29 L1197.13 1209.29 L1196.55 1209.29 L1195.96 1209.29 L1195.37 1209.29 L1194.79 1209.29 L1194.2 1209.29 L1193.62 1209.29 L1193.03 1209.29 L1192.44 1209.29 L1191.86 1209.29 L1191.27 1209.29 L1190.68 1209.29 L1190.1 1209.29 L1189.51 1209.29 L1188.92 1209.29 L1188.34 1209.29 L1187.75 1209.29 L1187.16 1209.29 L1186.58 1209.29 L1185.99 1209.29 L1185.41 1209.29 L1184.82 1209.29 L1184.23 1209.29 L1183.65 1209.29 L1183.06 1209.29 L1182.47 1209.29 L1181.89 1209.29 L1181.3 1209.29 L1180.71 1209.29 L1180.13 1209.29 L1179.54 1209.29 L1178.96 1209.29 L1178.37 1209.29 L1177.78 1209.29 L1177.2 1209.29 L1176.61 1209.29 L1176.02 1209.29 L1175.44 1209.29 L1174.85 1209.29 L1174.26 1209.29 L1173.68 1209.29 L1173.09 1209.29 L1172.5 1209.29 L1171.92 1209.29 L1171.33 1209.29 L1170.75 1209.29 L1170.16 1209.29 L1169.57 1209.29 L1168.99 1209.29 L1168.4 1209.29 L1167.81 1209.29 L1167.23 1209.29 L1166.64 1209.29 L1166.05 1209.29 L1165.47 1209.29 L1164.88 1209.29 L1164.29 1209.29 L1163.71 1209.29 L1163.12 1209.29 L1162.54 1209.29 L1161.95 1209.29 L1161.36 1209.29 L1160.78 1209.29 L1160.19 1209.29 L1159.6 1209.29 L1159.02 1209.29 L1158.43 1209.29 L1157.84 1209.29 L1157.26 1209.29 L1156.67 1209.29 L1156.09 1209.29 L1155.5 1209.29 L1154.91 1209.29 L1154.33 1209.29 L1153.74 1209.29 L1153.15 1209.29 L1152.57 1209.29 L1151.98 1209.29 L1151.39 1209.29 L1150.81 1209.29 L1150.22 1209.29 L1149.63 1209.29 L1149.05 1209.29 L1148.46 1209.29 L1147.88 1209.29 L1147.29 1209.29 L1146.7 1209.29 L1146.12 1209.29 L1145.53 1209.29 L1144.94 1209.29 L1144.36 1209.29 L1143.77 1209.29 L1143.18 1209.29 L1142.6 1209.29 L1142.01 1209.29 L1141.42 1209.29 L1140.84 1209.29 L1140.25 1209.29 L1139.67 1209.29 L1139.08 1209.29 L1138.49 1209.29 L1137.91 1209.29 L1137.32 1209.29 L1136.73 1209.29 L1136.15 1209.29 L1135.56 1209.29 L1134.97 1209.29 L1134.39 1209.29 L1133.8 1209.29 L1133.21 1209.29 L1132.63 1209.29 L1132.04 1209.29 L1131.46 1209.29 L1130.87 1209.29 L1130.28 1209.29 L1129.7 1209.29 L1129.11 1209.29 L1128.52 1209.29 L1127.94 1209.29 L1127.35 1209.29 L1126.76 1209.29 L1126.18 1209.29 L1125.59 1209.29 L1125.01 1209.29 L1124.42 1209.29 L1123.83 1209.29 L1123.25 1209.29 L1122.66 1209.29 L1122.07 1209.29 L1121.49 1209.29 L1120.9 1209.29 L1120.31 1209.29 L1119.73 1209.29 L1119.14 1209.29 L1118.55 1209.29 L1117.97 1209.29 L1117.38 1209.29 L1116.8 1209.29 L1116.21 1209.29 L1115.62 1209.29 L1115.04 1209.29 L1114.45 1209.29 L1113.86 1209.29 L1113.28 1209.29 L1112.69 1209.29 L1112.1 1209.29 L1111.52 1209.29 L1110.93 1209.29 L1110.34 1209.29 L1109.76 1209.29 L1109.17 1209.29 L1108.59 1209.29 L1108 1209.29 L1107.41 1209.29 L1106.83 1209.29 L1106.24 1209.29 L1105.65 1209.29 L1105.07 1209.29 L1104.48 1209.29 L1103.89 1209.29 L1103.31 1209.29 L1102.72 1209.29 L1102.14 1209.29 L1101.55 1209.29 L1100.96 1209.29 L1100.38 1209.29 L1099.79 1209.29 L1099.2 1209.29 L1098.62 1209.29 L1098.03 1209.29 L1097.44 1209.29 L1096.86 1209.29 L1096.27 1209.29 L1095.68 1209.29 L1095.1 1209.29 L1094.51 1209.29 L1093.93 1209.29 L1093.34 1209.29 L1092.75 1209.29 L1092.17 1209.29 L1091.58 1209.29 L1090.99 1209.29 L1090.41 1209.29 L1089.82 1209.29 L1089.23 1209.29 L1088.65 1209.29 L1088.06 1209.29 L1087.47 1209.29 L1086.89 1209.29 L1086.3 1209.29 L1085.72 1209.29 L1085.13 1209.29 L1084.54 1209.29 L1083.96 1209.29 L1083.37 1209.29 L1082.78 1209.29 L1082.2 1209.29 L1081.61 1209.29 L1081.02 1209.29 L1080.44 1209.29 L1079.85 1209.29 L1079.26 1209.29 L1078.68 1209.29 L1078.09 1209.29 L1077.51 1209.29 L1076.92 1209.29 L1076.33 1209.29 L1075.75 1209.29 L1075.16 1209.29 L1074.57 1209.29 L1073.99 1209.29 L1073.4 1209.29 L1072.81 1209.29 L1072.23 1209.29 L1071.64 1209.29 L1071.06 1209.29 L1070.47 1209.29 L1069.88 1209.29 L1069.3 1209.29 L1068.71 1209.29 L1068.12 1209.29 L1067.54 1209.29 L1066.95 1209.29 L1066.36 1209.29 L1065.78 1209.29 L1065.19 1209.29 L1064.6 1209.29 L1064.02 1209.29 L1063.43 1209.29 L1062.85 1209.29 L1062.26 1209.29 L1061.67 1209.29 L1061.09 1209.29 L1060.5 1209.29 L1059.91 1209.29 L1059.33 1209.29 L1058.74 1209.29 L1058.15 1209.29 L1057.57 1209.29 L1056.98 1209.29 L1056.39 1209.29 L1055.81 1209.29 L1055.22 1209.29 L1054.64 1209.29 L1054.05 1209.29 L1053.46 1209.29 L1052.88 1209.29 L1052.29 1209.29 L1051.7 1209.29 L1051.12 1209.29 L1050.53 1209.29 L1049.94 1209.29 L1049.36 1209.29 L1048.77 1209.29 L1048.19 1209.29 L1047.6 1209.29 L1047.01 1209.29 L1046.43 1209.29 L1045.84 1209.29 L1045.25 1209.29 L1044.67 1209.29 L1044.08 1209.29 L1043.49 1209.29 L1042.91 1209.29 L1042.32 1209.29 L1041.73 1209.29 L1041.15 1209.29 L1040.56 1209.29 L1039.98 1209.29 L1039.39 1209.29 L1038.8 1209.29 L1038.22 1209.29 L1037.63 1209.29 L1037.04 1209.29 L1036.46 1209.29 L1035.87 1209.29 L1035.28 1209.29 L1034.7 1209.29 L1034.11 1209.29 L1033.52 1209.29 L1032.94 1209.29 L1032.35 1209.29 L1031.77 1209.29 L1031.18 1209.29 L1030.59 1209.29 L1030.01 1209.29 L1029.42 1209.29 L1028.83 1209.29 L1028.25 1209.29 L1027.66 1209.29 L1027.07 1209.29 L1026.49 1209.29 L1025.9 1209.29 L1025.32 1209.29 L1024.73 1209.29 L1024.14 1209.29 L1023.56 1209.29 L1022.97 1209.29 L1022.38 1209.29 L1021.8 1209.29 L1021.21 1209.29 L1020.62 1209.29 L1020.04 1209.29 L1019.45 1209.29 L1018.86 1209.29 L1018.28 1209.29 L1017.69 1209.29 L1017.11 1209.29 L1016.52 1209.29 L1015.93 1209.29 L1015.35 1209.29 L1014.76 1209.29 L1014.17 1209.29 L1013.59 1209.29 L1013 1209.29 L1012.41 1209.29 L1011.83 1209.29 L1011.24 1209.29 L1010.65 1209.29 L1010.07 1209.29 L1009.48 1209.29 L1008.9 1209.29 L1008.31 1209.29 L1007.72 1209.29 L1007.14 1209.29 L1006.55 1209.29 L1005.96 1209.29 L1005.38 1209.29 L1004.79 1209.29 L1004.2 1209.29 L1003.62 1209.29 L1003.03 1209.29 L1002.44 1209.29 L1001.86 1209.29 L1001.27 1209.29 L1000.69 1209.29 L1000.1 1209.29 L999.513 1209.29 L998.926 1209.29 L998.34 1209.29 L997.754 1209.29 L997.167 1209.29 L996.581 1209.29 L995.994 1209.29 L995.408 1209.29 L994.822 1209.29 L994.235 1209.29 L993.649 1209.29 L993.062 1209.29 L992.476 1209.29 L991.889 1209.29 L991.303 1209.29 L990.717 1209.29 L990.13 1209.29 L989.544 1209.29 L988.957 1209.29 L988.371 1209.29 L987.785 1209.29 L987.198 1209.29 L986.612 1209.29 L986.025 1209.29  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.64 986.612,1209.64 987.198,1209.64 987.785,1209.64 988.371,1209.64 988.957,1209.64 989.544,1209.64 990.13,1209.64 990.717,1209.64 991.303,1209.64 991.889,1209.64 992.476,1209.64 993.062,1209.64 993.649,1209.64 994.235,1209.64 994.822,1209.64 995.408,1209.64 995.994,1209.64 996.581,1209.64 997.167,1209.64 997.754,1209.64 998.34,1209.64 998.926,1209.64 999.513,1209.64 1000.1,1209.64 1000.69,1209.64 1001.27,1209.64 1001.86,1209.64 1002.44,1209.64 1003.03,1209.64 1003.62,1209.64 1004.2,1209.64 1004.79,1209.64 1005.38,1209.64 1005.96,1209.64 1006.55,1209.64 1007.14,1209.64 1007.72,1209.64 1008.31,1209.64 1008.9,1209.64 1009.48,1209.64 1010.07,1209.64 1010.65,1209.64 1011.24,1209.64 1011.83,1209.64 1012.41,1209.64 1013,1209.64 1013.59,1209.64 1014.17,1209.64 1014.76,1209.64 1015.35,1209.64 1015.93,1209.64 1016.52,1209.64 1017.11,1209.64 1017.69,1209.64 1018.28,1209.64 1018.86,1209.64 1019.45,1209.64 1020.04,1209.64 1020.62,1209.64 1021.21,1209.64 1021.8,1209.64 1022.38,1209.64 1022.97,1209.64 1023.56,1209.64 1024.14,1209.64 1024.73,1209.64 1025.32,1209.64 1025.9,1209.64 1026.49,1209.64 1027.07,1209.64 1027.66,1209.64 1028.25,1209.64 1028.83,1209.64 1029.42,1209.64 1030.01,1209.64 1030.59,1209.64 1031.18,1209.64 1031.77,1209.64 1032.35,1209.64 1032.94,1209.64 1033.52,1209.64 1034.11,1209.64 1034.7,1209.64 1035.28,1209.64 1035.87,1209.64 1036.46,1209.64 1037.04,1209.64 1037.63,1209.64 1038.22,1209.64 1038.8,1209.64 1039.39,1209.64 1039.98,1209.64 1040.56,1209.64 1041.15,1209.64 1041.73,1209.64 1042.32,1209.64 1042.91,1209.64 1043.49,1209.64 1044.08,1209.64 1044.67,1209.64 1045.25,1209.64 1045.84,1209.64 1046.43,1209.64 1047.01,1209.64 1047.6,1209.64 1048.19,1209.64 1048.77,1209.64 1049.36,1209.64 1049.94,1209.64 1050.53,1209.64 1051.12,1209.64 1051.7,1209.64 1052.29,1209.64 1052.88,1209.64 1053.46,1209.64 1054.05,1209.64 1054.64,1209.64 1055.22,1209.64 1055.81,1209.64 1056.39,1209.64 1056.98,1209.64 1057.57,1209.64 1058.15,1209.64 1058.74,1209.64 1059.33,1209.64 1059.91,1209.64 1060.5,1209.64 1061.09,1209.64 1061.67,1209.64 1062.26,1209.64 1062.85,1209.64 1063.43,1209.64 1064.02,1209.64 1064.6,1209.64 1065.19,1209.64 1065.78,1209.64 1066.36,1209.64 1066.95,1209.64 1067.54,1209.64 1068.12,1209.64 1068.71,1209.64 1069.3,1209.64 1069.88,1209.64 1070.47,1209.64 1071.06,1209.64 1071.64,1209.64 1072.23,1209.64 1072.81,1209.64 1073.4,1209.64 1073.99,1209.64 1074.57,1209.64 1075.16,1209.64 1075.75,1209.64 1076.33,1209.64 1076.92,1209.64 1077.51,1209.64 1078.09,1209.64 1078.68,1209.64 1079.26,1209.64 1079.85,1209.64 1080.44,1209.64 1081.02,1209.64 1081.61,1209.64 1082.2,1209.64 1082.78,1209.64 1083.37,1209.64 1083.96,1209.64 1084.54,1209.64 1085.13,1209.64 1085.72,1209.64 1086.3,1209.64 1086.89,1209.64 1087.47,1209.64 1088.06,1209.64 1088.65,1209.64 1089.23,1209.64 1089.82,1209.64 1090.41,1209.64 1090.99,1209.64 1091.58,1209.64 1092.17,1209.64 1092.75,1209.64 1093.34,1209.64 1093.93,1209.64 1094.51,1209.64 1095.1,1209.64 1095.68,1209.64 1096.27,1209.64 1096.86,1209.64 1097.44,1209.64 1098.03,1209.64 1098.62,1209.64 1099.2,1209.64 1099.79,1209.64 1100.38,1209.64 1100.96,1209.64 1101.55,1209.64 1102.14,1209.64 1102.72,1209.64 1103.31,1209.64 1103.89,1209.64 1104.48,1209.64 1105.07,1209.64 1105.65,1209.64 1106.24,1209.64 1106.83,1209.64 1107.41,1209.64 1108,1209.64 1108.59,1209.64 1109.17,1209.64 1109.76,1209.64 1110.34,1209.64 1110.93,1209.64 1111.52,1209.64 1112.1,1209.64 1112.69,1209.64 1113.28,1209.64 1113.86,1209.64 1114.45,1209.64 1115.04,1209.64 1115.62,1209.64 1116.21,1209.64 1116.8,1209.64 1117.38,1209.64 1117.97,1209.64 1118.55,1209.64 1119.14,1209.64 1119.73,1209.64 1120.31,1209.64 1120.9,1209.64 1121.49,1209.64 1122.07,1209.64 1122.66,1209.64 1123.25,1209.64 1123.83,1209.64 1124.42,1209.64 1125.01,1209.64 1125.59,1209.64 1126.18,1209.64 1126.76,1209.64 1127.35,1209.64 1127.94,1209.64 1128.52,1209.64 1129.11,1209.64 1129.7,1209.64 1130.28,1209.64 1130.87,1209.64 1131.46,1209.64 1132.04,1209.64 1132.63,1209.64 1133.21,1209.64 1133.8,1209.64 1134.39,1209.64 1134.97,1209.64 1135.56,1209.64 1136.15,1209.64 1136.73,1209.64 1137.32,1209.64 1137.91,1209.64 1138.49,1209.64 1139.08,1209.64 1139.67,1209.64 1140.25,1209.64 1140.84,1209.64 1141.42,1209.64 1142.01,1209.64 1142.6,1209.64 1143.18,1209.64 1143.77,1209.64 1144.36,1209.64 1144.94,1209.64 1145.53,1209.64 1146.12,1209.64 1146.7,1209.64 1147.29,1209.64 1147.88,1209.64 1148.46,1209.64 1149.05,1209.64 1149.63,1209.64 1150.22,1209.64 1150.81,1209.64 1151.39,1209.64 1151.98,1209.64 1152.57,1209.64 1153.15,1209.64 1153.74,1209.64 1154.33,1209.64 1154.91,1209.64 1155.5,1209.64 1156.09,1209.64 1156.67,1209.64 1157.26,1209.64 1157.84,1209.64 1158.43,1209.64 1159.02,1209.64 1159.6,1209.64 1160.19,1209.64 1160.78,1209.64 1161.36,1209.64 1161.95,1209.64 1162.54,1209.64 1163.12,1209.64 1163.71,1209.64 1164.29,1209.64 1164.88,1209.64 1165.47,1209.64 1166.05,1209.64 1166.64,1209.64 1167.23,1209.64 1167.81,1209.64 1168.4,1209.64 1168.99,1209.64 1169.57,1209.64 1170.16,1209.64 1170.75,1209.64 1171.33,1209.64 1171.92,1209.64 1172.5,1209.64 1173.09,1209.64 1173.68,1209.64 1174.26,1209.64 1174.85,1209.64 1175.44,1209.64 1176.02,1209.64 1176.61,1209.64 1177.2,1209.64 1177.78,1209.64 1178.37,1209.64 1178.96,1209.64 1179.54,1209.64 1180.13,1209.64 1180.71,1209.64 1181.3,1209.64 1181.89,1209.64 1182.47,1209.64 1183.06,1209.64 1183.65,1209.64 1184.23,1209.64 1184.82,1209.64 1185.41,1209.64 1185.99,1209.64 1186.58,1209.64 1187.16,1209.64 1187.75,1209.64 1188.34,1209.64 1188.92,1209.64 1189.51,1209.64 1190.1,1209.64 1190.68,1209.64 1191.27,1209.64 1191.86,1209.64 1192.44,1209.64 1193.03,1209.64 1193.62,1209.64 1194.2,1209.64 1194.79,1209.64 1195.37,1209.64 1195.96,1209.64 1196.55,1209.64 1197.13,1209.64 1197.72,1209.64 1198.31,1209.64 1198.89,1209.64 1199.48,1209.64 1200.07,1209.64 1200.65,1209.64 1201.24,1209.64 1201.83,1209.64 1202.41,1209.64 1203,1209.64 1203.58,1209.64 1204.17,1209.64 1204.76,1209.64 1205.34,1209.64 1205.93,1209.64 1206.52,1209.64 1207.1,1209.64 1207.69,1209.64 1208.28,1209.64 1208.86,1209.64 1209.45,1209.64 1210.03,1209.64 1210.62,1209.64 1211.21,1209.64 1211.79,1209.64 1212.38,1209.64 1212.97,1209.64 1213.55,1209.64 1214.14,1209.64 1214.73,1209.64 1215.31,1209.64 1215.9,1209.64 1216.49,1209.64 1217.07,1209.64 1217.66,1209.64 1218.24,1209.64 1218.83,1209.64 1219.42,1209.64 1220,1209.64 1220.59,1209.64 1221.18,1209.64 1221.76,1209.64 1222.35,1209.64 1222.94,1209.64 1223.52,1209.64 1224.11,1209.64 1224.7,1209.64 1225.28,1209.64 1225.87,1209.64 1226.45,1209.64 1227.04,1209.64 1227.63,1209.64 1228.21,1209.64 1228.8,1209.64 1229.39,1209.64 1229.97,1209.64 1230.56,1209.64 1231.15,1209.64 1231.73,1209.64 1232.32,1209.64 1232.91,1209.64 1233.49,1209.64 1234.08,1209.64 1234.66,1209.64 1235.25,1209.64 1235.84,1209.64 1236.42,1209.64 1237.01,1209.64 1237.6,1209.64 1238.18,1209.64 1238.77,1209.64 1239.36,1209.64 1239.94,1209.64 1240.53,1209.64 1241.11,1209.64 1241.7,1209.64 1242.29,1209.64 1242.87,1209.64 1243.46,1209.64 1244.05,1209.64 1244.63,1209.64 1245.22,1209.64 1245.81,1209.64 1246.39,1209.64 1246.98,1209.64 1247.57,1209.64 1248.15,1209.64 1248.74,1209.64 1249.32,1209.64 1249.91,1209.64 1250.5,1209.64 1251.08,1209.64 1251.67,1209.64 1252.26,1209.64 1252.84,1209.64 1253.43,1209.64 1254.02,1209.64 1254.6,1209.64 1255.19,1209.64 1255.78,1209.64 1256.36,1209.64 1256.95,1209.64 1257.53,1209.64 1258.12,1209.64 1258.71,1209.64 1259.29,1209.64 1259.88,1209.64 1260.47,1209.64 1261.05,1209.64 1261.64,1209.64 1262.23,1209.64 1262.81,1209.64 1263.4,1209.64 1263.98,1209.64 1264.57,1209.64 1265.16,1209.64 1265.74,1209.64 1266.33,1209.64 1266.92,1209.64 1267.5,1209.64 1268.09,1209.64 1268.68,1209.64 1269.26,1209.64 1269.85,1209.64 1270.44,1209.64 1271.02,1209.64 1271.61,1209.64 1272.19,1209.64 1272.78,1209.64 1273.37,1209.64 1273.95,1209.64 1274.54,1209.64 1275.13,1209.64 1275.71,1209.64 1276.3,1209.64 1276.89,1209.64 1277.47,1209.64 1278.06,1209.64 1278.65,1209.64 1279.23,1209.64 1279.82,1209.64 1280.4,1209.64 1280.99,1209.64 1281.58,1209.64 1282.16,1209.64 1282.75,1209.64 1283.34,1209.64 1283.92,1209.64 1284.51,1209.64 1285.1,1209.64 1285.68,1209.64 1286.27,1209.64 1286.86,1209.64 1287.44,1209.64 1288.03,1209.64 1288.61,1209.64 1289.2,1209.64 1289.79,1209.64 1290.37,1209.64 1290.96,1209.64 1291.55,1209.64 1292.13,1209.64 1292.72,1209.64 1293.31,1209.64 1293.89,1209.64 1294.48,1209.64 1295.06,1209.64 1295.65,1209.64 1296.24,1209.64 1296.82,1209.64 1297.41,1209.64 1298,1209.64 1298.58,1209.64 1299.17,1209.64 1299.76,1209.64 1300.34,1209.64 1300.93,1209.64 1301.52,1209.64 1302.1,1209.64 1302.69,1209.64 1303.27,1209.64 1303.86,1209.64 1304.45,1209.64 1305.03,1209.64 1305.62,1209.64 1306.21,1209.64 1306.79,1209.64 1307.38,1209.64 1307.97,1209.64 1308.55,1209.64 1309.14,1209.64 1309.73,1209.64 1310.31,1209.64 1310.9,1209.64 1311.48,1209.64 1312.07,1209.64 1312.66,1209.64 1313.24,1209.64 1313.83,1209.64 1314.42,1209.64 1315,1209.64 1315.59,1209.64 1316.18,1209.64 1316.76,1209.64 1317.35,1209.64 1317.93,1209.64 1318.52,1209.64 1319.11,1209.64 1319.69,1209.64 1320.28,1209.64 1320.87,1209.64 1321.45,1209.64 1322.04,1209.64 1322.63,1209.64 1323.21,1209.64 1323.8,1209.64 1324.39,1209.64 1324.97,1209.64 1325.56,1209.64 1326.14,1209.64 1326.73,1209.64 1327.32,1209.64 1327.9,1209.64 1328.49,1209.64 1329.08,1209.64 1329.66,1209.64 1330.25,1209.64 1330.84,1209.64 1331.42,1209.64 1332.01,1209.64 1332.6,1209.64 1333.18,1209.64 1333.77,1209.64 1334.35,1209.64 1334.94,1209.64 1335.53,1209.64 1336.11,1209.64 1336.7,1209.64 1337.29,1209.64 1337.87,1209.64 1338.46,1209.64 1339.05,1209.64 1339.63,1209.64 1340.22,1209.64 1340.8,1209.64 1341.39,1209.64 1341.98,1209.64 1342.56,1209.64 1343.15,1209.64 1343.74,1209.64 1344.32,1209.64 1344.91,1209.64 1345.5,1209.64 1346.08,1209.64 1346.67,1209.64 1347.26,1209.64 1347.84,1209.64 1348.43,1209.64 1349.01,1209.64 1349.6,1209.64 1350.19,1209.64 1350.77,1209.64 1351.36,1209.64 1351.95,1209.64 1352.53,1209.64 1353.12,1209.64 1353.71,1209.64 1354.29,1209.64 1354.88,1209.64 1355.47,1209.64 1356.05,1209.64 1356.64,1209.64 1357.22,1209.64 1357.81,1209.64 1358.4,1209.64 1358.98,1209.64 1359.57,1209.64 1360.16,1209.64 1360.74,1209.64 1361.33,1209.64 1361.92,1209.64 1362.5,1209.64 1363.09,1209.64 1363.68,1209.64 1364.26,1209.64 1364.85,1209.64 1365.43,1209.64 1366.02,1209.64 1366.61,1209.64 1367.19,1209.64 1367.78,1209.64 1368.37,1209.64 1368.95,1209.64 1369.54,1209.64 1370.13,1209.64 1370.71,1209.64 1371.3,1209.64 1371.88,1209.64 1372.47,1209.64 1373.06,1209.64 1373.64,1209.64 1374.23,1209.64 1374.82,1209.64 1375.4,1209.64 1375.99,1209.64 1376.58,1209.64 1377.16,1209.64 1377.75,1209.64 1378.34,1209.64 1378.92,1209.64 1379.51,1209.64 1380.09,1209.64 1380.68,1209.64 1381.27,1209.64 1381.85,1209.64 1382.44,1209.64 1383.03,1209.64 1383.61,1209.64 1384.2,1209.64 1384.79,1209.64 1385.37,1209.64 1385.96,1209.64 1386.55,1209.64 1387.13,1209.64 1387.72,1209.64 1388.3,1209.64 1388.89,1209.64 1389.48,1209.64 1390.06,1209.64 1390.65,1209.64 1391.24,1209.64 1391.82,1209.64 1392.41,1209.64 1393,1209.64 1393.58,1209.64 1394.17,1209.64 1394.75,1209.64 1395.34,1209.64 1395.93,1209.64 1396.51,1209.64 1397.1,1209.64 1397.69,1209.64 1398.27,1209.64 1398.86,1209.64 1399.45,1209.64 1400.03,1209.64 1400.62,1209.64 1401.21,1209.64 1401.79,1209.64 1402.38,1209.64 1402.96,1209.64 1403.55,1209.64 1404.14,1209.64 1404.72,1209.64 1405.31,1209.64 1405.9,1209.64 1406.48,1209.64 1407.07,1209.64 1407.66,1209.64 1408.24,1209.64 1408.83,1209.64 1409.42,1209.64 1410,1209.64 1410.59,1209.64 1411.17,1209.64 1411.76,1209.64 1412.35,1209.64 1412.93,1209.64 1413.52,1209.64 1414.11,1209.64 1414.69,1209.64 1415.28,1209.64 1415.87,1209.64 1416.45,1209.64 1417.04,1209.64 1417.63,1209.64 1418.21,1209.64 1418.8,1209.64 1419.38,1209.64 1419.97,1209.64 1420.56,1209.64 1421.14,1209.64 1421.73,1209.64 1422.32,1209.64 1422.9,1209.64 1423.49,1209.64 1424.08,1209.64 1424.66,1209.64 1425.25,1209.64 1425.83,1209.64 1426.42,1209.64 1427.01,1209.64 1427.59,1209.64 1428.18,1209.64 1428.77,1209.64 1429.35,1209.64 1429.94,1209.64 1430.53,1209.64 1431.11,1209.64 1431.7,1209.64 1432.29,1209.64 1432.87,1209.64 1433.46,1209.64 1434.04,1209.64 1434.63,1209.64 1435.22,1209.64 1435.8,1209.64 1436.39,1209.64 1436.98,1209.64 1437.56,1209.64 1438.15,1209.64 1438.74,1209.64 1439.32,1209.64 1439.91,1209.64 1440.5,1209.64 1441.08,1209.64 1441.67,1209.64 1442.25,1209.64 1442.84,1209.64 1443.43,1209.64 1444.01,1209.64 1444.6,1209.64 1445.19,1209.64 1445.77,1209.64 1446.36,1209.64 1446.95,1209.64 1447.53,1209.64 1448.12,1209.64 1448.7,1209.64 1449.29,1209.64 1449.88,1209.64 1450.46,1209.64 1451.05,1209.64 1451.64,1209.64 1452.22,1209.64 1452.81,1209.64 1453.4,1209.64 1453.98,1209.64 1454.57,1209.64 1455.16,1209.64 1455.74,1209.64 1456.33,1209.64 1456.91,1209.64 1457.5,1209.64 1458.09,1209.64 1458.67,1209.64 1459.26,1209.64 1459.85,1209.64 1460.43,1209.64 1461.02,1209.64 1461.61,1209.64 1462.19,1209.64 1462.78,1209.64 1463.37,1209.64 1463.95,1209.64 1464.54,1209.64 1465.12,1209.64 1465.71,1209.64 1466.3,1209.64 1466.88,1209.64 1467.47,1209.64 1468.06,1209.64 1468.64,1209.64 1469.23,1209.64 1469.82,1209.64 1470.4,1209.64 1470.99,1209.64 1471.57,1209.64 1472.16,1209.64 1472.75,1209.64 1473.33,1209.64 1473.92,1209.64 1474.51,1209.64 1475.09,1209.64 1475.68,1209.64 1476.27,1209.64 1476.85,1209.64 1477.44,1209.64 1478.03,1209.64 1478.61,1209.64 1479.2,1209.64 1479.78,1209.64 1480.37,1209.64 1480.96,1209.64 1481.54,1209.64 1482.13,1209.64 1482.72,1209.64 1483.3,1209.64 1483.89,1209.64 1484.48,1209.64 1485.06,1209.64 1485.65,1209.64 1486.24,1209.64 1486.82,1209.64 1487.41,1209.64 1487.99,1209.64 1488.58,1209.64 1489.17,1209.64 1489.75,1209.64 1490.34,1209.64 1490.93,1209.64 1491.51,1209.64 1492.1,1209.64 1492.69,1209.64 1493.27,1209.64 1493.86,1209.64 1494.45,1209.64 1495.03,1209.64 1495.62,1209.64 1496.2,1209.64 1496.79,1209.64 1497.38,1209.64 1497.96,1209.64 1498.55,1209.64 1499.14,1209.64 1499.72,1209.64 1500.31,1209.64 1500.9,1209.64 1501.48,1209.64 1502.07,1209.64 1502.65,1209.64 1503.24,1209.64 1503.83,1209.64 1504.41,1209.64 1505,1209.64 1505.59,1209.64 1506.17,1209.64 1506.76,1209.64 1507.35,1209.64 1507.93,1209.64 1508.52,1209.64 1509.11,1209.64 1509.69,1209.64 1510.28,1209.64 1510.86,1209.64 1511.45,1209.64 1512.04,1209.64 1512.62,1209.64 1513.21,1209.64 1513.8,1209.64 1514.38,1209.64 1514.97,1209.64 1515.56,1209.64 1516.14,1209.64 1516.73,1209.64 1517.32,1209.64 1517.9,1209.64 1518.49,1209.64 1519.07,1209.64 1519.66,1209.64 1520.25,1209.64 1520.83,1209.64 1521.42,1209.64 1522.01,1209.64 1522.59,1209.64 1523.18,1209.64 1523.77,1209.64 1524.35,1209.64 1524.94,1209.64 1525.52,1209.64 1526.11,1209.64 1526.7,1209.64 1527.28,1209.64 1527.87,1209.64 1528.46,1209.64 1529.04,1209.64 1529.63,1209.64 1530.22,1209.64 1530.8,1209.64 1531.39,1209.64 1531.98,1209.64 1532.56,1209.64 1533.15,1209.64 1533.73,1209.64 1534.32,1209.64 1534.91,1209.64 1535.49,1209.64 1536.08,1209.64 1536.67,1209.64 1537.25,1209.64 1537.84,1209.64 1538.43,1209.64 1539.01,1209.64 1539.6,1209.64 1540.19,1209.64 1540.77,1209.64 1541.36,1209.64 1541.94,1209.64 1542.53,1209.64 1543.12,1209.64 1543.7,1209.64 1544.29,1209.64 1544.88,1209.64 1545.46,1209.64 1546.05,1209.64 1546.64,1209.64 1547.22,1209.64 1547.81,1209.64 1548.4,1209.64 1548.98,1209.64 1549.57,1209.64 1550.15,1209.64 1550.74,1209.64 1551.33,1209.64 1551.91,1209.64 1552.5,1209.64 1553.09,1209.64 1553.67,1209.64 1554.26,1209.64 1554.85,1209.64 1555.43,1209.64 1556.02,1209.64 1556.6,1209.64 1557.19,1209.64 1557.78,1209.64 1558.36,1209.64 1558.95,1209.64 1559.54,1209.64 1560.12,1209.64 1560.71,1209.64 1561.3,1209.64 1561.88,1209.64 1562.47,1209.64 1563.06,1209.64 1563.64,1209.64 1564.23,1209.64 1564.81,1209.64 1565.4,1209.64 1565.99,1209.64 1566.57,1209.64 1567.16,1209.64 1567.75,1209.64 1568.33,1209.64 1568.92,1209.64 1569.51,1209.64 1570.09,1209.64 1570.68,1209.64 1571.27,1209.64 1571.85,1209.64 1572.44,1209.64 1573.02,1209.64 1573.61,1209.64 1574.2,1209.64 1574.78,1209.64 1575.37,1209.64 1575.96,1209.64 1576.54,1209.64 1577.13,1209.64 1577.72,1209.64 1578.3,1209.64 1578.89,1209.64 1579.47,1209.64 1580.06,1209.64 1580.65,1209.64 1581.23,1209.64 1581.82,1209.64 1582.41,1209.64 1582.99,1209.64 1583.58,1209.64 1584.17,1209.64 1584.75,1209.64 1585.34,1209.64 1585.93,1209.64 1586.51,1209.64 1587.1,1209.64 1587.68,1209.64 1588.27,1209.64 1588.86,1209.64 1589.44,1209.64 1590.03,1209.64 1590.62,1209.64 1591.2,1209.64 1591.79,1209.64 1592.38,1209.64 1592.96,1209.64 1593.55,1209.64 1594.14,1209.64 1594.72,1209.64 1595.31,1209.64 1595.89,1209.64 1596.48,1209.64 1597.07,1209.64 1597.65,1209.64 1598.24,1209.64 1598.83,1209.64 1599.41,1209.64 1600,1209.64 1600.59,1209.64 1601.17,1209.64 1601.76,1209.64 1602.34,1209.64 1602.93,1209.64 1603.52,1209.64 1604.1,1209.64 1604.69,1209.64 1605.28,1209.64 1605.86,1209.64 1606.45,1209.64 1607.04,1209.64 1607.62,1209.64 1608.21,1209.64 1608.8,1209.64 1609.38,1209.64 1609.97,1209.64 1610.55,1209.64 1611.14,1209.64 1611.73,1209.64 1612.31,1209.64 1612.9,1209.64 1613.49,1209.64 1614.07,1209.64 1614.66,1209.64 1615.25,1209.64 1615.83,1209.64 1616.42,1209.64 1617.01,1209.64 1617.59,1209.64 1618.18,1209.64 1618.76,1209.64 1619.35,1209.64 1619.94,1209.64 1620.52,1209.64 1621.11,1209.64 1621.7,1209.64 1622.28,1209.64 1622.87,1209.64 1623.46,1209.64 1624.04,1209.64 1624.63,1209.64 1625.22,1209.64 1625.8,1209.64 1626.39,1209.64 1626.97,1209.64 1627.56,1209.64 1628.15,1209.64 1628.73,1209.64 1629.32,1209.64 1629.91,1209.64 1630.49,1209.64 1631.08,1209.64 1631.67,1209.64 1632.25,1209.64 1632.84,1209.64 1633.42,1209.64 1634.01,1209.64 1634.6,1209.64 1635.18,1209.64 1635.77,1209.64 1636.36,1209.64 1636.94,1209.64 1637.53,1209.64 1638.12,1209.64 1638.7,1209.64 1639.29,1209.64 1639.88,1209.64 1640.46,1209.64 1641.05,1209.64 1641.63,1209.64 1642.22,1209.64 1642.81,1209.64 1643.39,1209.64 1643.98,1209.64 1644.57,1209.64 1645.15,1209.64 1645.74,1209.64 1646.33,1209.64 1646.91,1209.64 1647.5,1209.64 1648.09,1209.64 1648.67,1209.64 1649.26,1209.64 1649.84,1209.64 1650.43,1209.64 1651.02,1209.64 1651.6,1209.64 1652.19,1209.64 1652.78,1209.64 1653.36,1209.64 1653.95,1209.64 1654.54,1209.64 1655.12,1209.64 1655.71,1209.64 1656.29,1209.64 1656.88,1209.64 1657.47,1209.64 1658.05,1209.64 1658.64,1209.64 1659.23,1209.64 1659.81,1209.64 1660.4,1209.64 1660.99,1209.64 1661.57,1209.64 1662.16,1209.64 1662.75,1209.64 1663.33,1209.64 1663.92,1209.64 1664.5,1209.64 1665.09,1209.64 1665.68,1209.64 1666.26,1209.64 1666.85,1209.64 1667.44,1209.64 1668.02,1209.64 1668.61,1209.64 1669.2,1209.64 1669.78,1209.64 1670.37,1209.64 1670.96,1209.64 1671.54,1209.64 1672.13,1209.64 1672.71,1209.64 1673.3,1209.64 1673.89,1209.64 1674.47,1209.64 1675.06,1209.64 1675.65,1209.64 1676.23,1209.64 1676.82,1209.64 1677.41,1209.64 1677.99,1209.64 1678.58,1209.64 1679.17,1209.64 1679.75,1209.64 1680.34,1209.64 1680.92,1209.64 1681.51,1209.64 1682.1,1209.64 1682.68,1209.64 1683.27,1209.64 1683.86,1209.64 1684.44,1209.64 1685.03,1209.64 1685.62,1209.64 1686.2,1209.64 1686.79,1209.64 1687.37,1209.64 1687.96,1209.64 1688.55,1209.64 1689.13,1209.64 1689.72,1209.64 1690.31,1209.64 1690.89,1209.64 1691.48,1209.64 1692.07,1209.64 1692.65,1209.64 1693.24,1209.64 1693.83,1209.64 1694.41,1209.64 1695,1209.64 1695.58,1209.64 1696.17,1209.64 1696.76,1209.64 1697.34,1209.64 1697.93,1209.64 1698.52,1209.64 1699.1,1209.64 1699.69,1209.64 1700.28,1209.64 1700.86,1209.64 1701.45,1209.64 1702.04,1209.64 1702.62,1209.64 1703.21,1209.64 1703.79,1209.64 1704.38,1209.64 1704.97,1209.64 1705.55,1209.64 1706.14,1209.64 1706.73,1209.64 1707.31,1209.64 1707.9,1209.64 1708.49,1209.64 1709.07,1209.64 1709.66,1209.64 1710.24,1209.64 1710.83,1209.64 1711.42,1209.64 1712,1209.64 1712.59,1209.64 1713.18,1209.64 1713.76,1209.64 1714.35,1209.64 1714.94,1209.64 1715.52,1209.64 1716.11,1209.64 1716.7,1209.64 1717.28,1209.64 1717.87,1209.64 1718.45,1209.64 1719.04,1209.64 1719.63,1209.64 1720.21,1209.64 1720.8,1209.64 1721.39,1209.64 1721.97,1209.64 1722.56,1209.64 1723.15,1209.64 1723.73,1209.64 1724.32,1209.64 1724.91,1209.64 1725.49,1209.64 1726.08,1209.64 1726.66,1209.64 1727.25,1209.64 1727.84,1209.64 1728.42,1209.64 1729.01,1209.64 1729.6,1209.64 1730.18,1209.64 1730.77,1209.64 1731.36,1209.64 1731.94,1209.64 1732.53,1209.64 1733.11,1209.64 1733.7,1209.64 1734.29,1209.64 1734.87,1209.64 1735.46,1209.64 1736.05,1209.64 1736.63,1209.64 1737.22,1209.64 1737.81,1209.64 1738.39,1209.64 1738.98,1209.64 1739.57,1209.64 1740.15,1209.64 1740.74,1209.64 1741.32,1209.64 1741.91,1209.64 1742.5,1209.64 1743.08,1209.64 1743.67,1209.64 1744.26,1209.64 1744.84,1209.64 1745.43,1209.64 1746.02,1209.64 1746.6,1209.64 1747.19,1209.64 1747.78,1209.64 1748.36,1209.64 1748.95,1209.64 1749.53,1209.64 1750.12,1209.64 1750.71,1209.64 1751.29,1209.64 1751.88,1209.64 1752.47,1209.64 1753.05,1209.64 1753.64,1209.64 1754.23,1209.64 1754.81,1209.64 1755.4,1209.64 1755.99,1209.64 1756.57,1209.64 1757.16,1209.64 1757.74,1209.64 1758.33,1209.64 1758.92,1209.64 1759.5,1209.64 1760.09,1209.64 1760.68,1209.64 1761.26,1209.64 1761.85,1209.64 1762.44,1209.64 1763.02,1209.64 1763.61,1209.64 1764.19,1209.64 1764.78,1209.64 1765.37,1209.64 1765.95,1209.64 1766.54,1209.64 1767.13,1209.64 1767.71,1209.64 1768.3,1209.64 1768.89,1209.64 1769.47,1209.64 1770.06,1209.64 1770.65,1209.64 1771.23,1209.64 1771.82,1209.64 1772.4,1209.64 1772.99,1209.64 1773.58,1209.64 1774.16,1209.64 1774.75,1209.64 1775.34,1209.64 1775.92,1209.64 1776.51,1209.64 1777.1,1209.64 1777.68,1209.64 1778.27,1209.64 1778.86,1209.64 1779.44,1209.64 1780.03,1209.64 1780.61,1209.64 1781.2,1209.64 1781.79,1209.64 1782.37,1209.64 1782.96,1209.64 1783.55,1209.64 1784.13,1209.64 1784.72,1209.64 1785.31,1209.64 1785.89,1209.64 1786.48,1209.64 1787.06,1209.64 1787.65,1209.64 1788.24,1209.64 1788.82,1209.64 1789.41,1209.64 1790,1209.64 1790.58,1209.64 1791.17,1209.64 1791.76,1209.64 1792.34,1209.64 1792.93,1209.64 1793.52,1209.64 1794.1,1209.64 1794.69,1209.64 1795.27,1209.64 1795.86,1209.64 1796.45,1209.64 1797.03,1209.64 1797.62,1209.64 1798.21,1209.64 1798.79,1209.64 1799.38,1209.64 1799.97,1209.64 1800.55,1209.64 1801.14,1209.64 1801.73,1209.64 1802.31,1209.64 1802.9,1209.64 1803.48,1209.64 1804.07,1209.64 1804.66,1209.64 1805.24,1209.64 1805.83,1209.64 1806.42,1209.64 1807,1209.64 1807.59,1209.64 1808.18,1209.64 1808.76,1209.64 1809.35,1209.64 1809.94,1209.64 1810.52,1209.64 1811.11,1209.64 1811.69,1209.64 1812.28,1209.64 1812.87,1209.64 1813.45,1209.64 1814.04,1209.64 1814.63,1209.64 1815.21,1209.64 1815.8,1209.64 1816.39,1209.64 1816.97,1209.64 1817.56,1209.64 1818.14,1209.64 1818.73,1209.64 1819.32,1209.64 1819.9,1209.64 1820.49,1209.64 1821.08,1209.64 1821.66,1209.64 1822.25,1209.64 1822.84,1209.64 1823.42,1209.64 1824.01,1209.64 1824.6,1209.64 1825.18,1209.64 1825.77,1209.64 1826.35,1209.64 1826.94,1209.64 1827.53,1209.64 1828.11,1209.64 1828.7,1209.64 1829.29,1209.64 1829.87,1209.64 1830.46,1209.64 1831.05,1209.64 1831.63,1209.64 1832.22,1209.64 1832.81,1209.64 1833.39,1209.64 1833.98,1209.64 1834.56,1209.64 1835.15,1209.64 1835.74,1209.64 1836.32,1209.64 1836.91,1209.64 1837.5,1209.64 1838.08,1209.64 1838.67,1209.64 1839.26,1209.64 1839.84,1209.64 1840.43,1209.64 1841.01,1209.64 1841.6,1209.64 1842.19,1209.64 1842.77,1209.64 1843.36,1209.64 1843.95,1209.64 1844.53,1209.64 1845.12,1209.64 1845.71,1209.64 1846.29,1209.64 1846.88,1209.64 1847.47,1209.64 1848.05,1209.64 1848.64,1209.64 1849.22,1209.64 1849.81,1209.64 1850.4,1209.64 1850.98,1209.64 1851.57,1209.64 1852.16,1209.64 1852.74,1209.64 1853.33,1209.64 1853.92,1209.64 1854.5,1209.64 1855.09,1209.64 1855.68,1209.64 1856.26,1209.64 1856.85,1209.64 1857.43,1209.64 1858.02,1209.64 1858.61,1209.64 1859.19,1209.64 1859.78,1209.64 1860.37,1209.64 1860.95,1209.64 1861.54,1209.64 1862.13,1209.64 1862.71,1209.64 1863.3,1209.64 1863.88,1209.64 1864.47,1209.64 1865.06,1209.64 1865.64,1209.64 1866.23,1209.64 1866.82,1209.64 1867.4,1209.64 1867.99,1209.64 1868.58,1209.64 1869.16,1209.64 1869.75,1209.64 1870.34,1209.64 1870.92,1209.64 1871.51,1209.64 1872.09,1209.64 1872.68,1209.64 1873.27,1209.64 1873.85,1209.64 1874.44,1209.64 1875.03,1209.64 1875.61,1209.64 1876.2,1209.64 1876.79,1209.64 1877.37,1209.64 1877.96,1209.64 1878.55,1209.64 1879.13,1209.64 1879.72,1209.64 1880.3,1209.64 1880.89,1209.64 1881.48,1209.64 1882.06,1209.64 1882.65,1209.64 1883.24,1209.64 1883.82,1209.64 1884.41,1209.64 1885,1209.64 1885.58,1209.64 1886.17,1209.64 1886.76,1209.64 1887.34,1209.64 1887.93,1209.64 1888.51,1209.64 1889.1,1209.64 1889.69,1209.64 1890.27,1209.64 1890.86,1209.64 1891.45,1209.64 1892.03,1209.64 1892.62,1209.64 1893.21,1209.64 1893.79,1209.64 1894.38,1209.64 1894.96,1209.64 1895.55,1209.64 1896.14,1209.64 1896.72,1209.64 1897.31,1209.64 1897.9,1209.64 1898.48,1209.64 1899.07,1209.64 1899.66,1209.64 1900.24,1209.64 1900.83,1209.64 1901.42,1209.64 1902,1209.64 1902.59,1209.64 1903.17,1209.64 1903.76,1209.64 1904.35,1209.64 1904.93,1209.64 1905.52,1209.64 1906.11,1209.64 1906.69,1209.64 1907.28,1209.64 1907.87,1209.64 1908.45,1209.64 1909.04,1209.64 1909.63,1209.64 1910.21,1209.64 1910.8,1209.64 1911.38,1209.64 1911.97,1209.64 1912.56,1209.64 1913.14,1209.64 1913.73,1209.64 1914.32,1209.64 1914.9,1209.64 1915.49,1209.64 1916.08,1209.64 1916.66,1209.64 1917.25,1209.64 1917.83,1209.64 1918.42,1209.64 1919.01,1209.64 1919.59,1209.64 1920.18,1209.64 1920.77,1209.64 1921.35,1209.64 1921.94,1209.64 1922.53,1209.64 1923.11,1209.64 1923.7,1209.64 1924.29,1209.64 1924.87,1209.64 1925.46,1209.64 1926.04,1209.64 1926.63,1209.64 1927.22,1209.64 1927.8,1209.64 1928.39,1209.64 1928.98,1209.64 1929.56,1209.64 1930.15,1209.64 1930.74,1209.64 1931.32,1209.64 1931.91,1209.64 1932.5,1209.64 1933.08,1209.64 1933.67,1209.64 1934.25,1209.64 1934.84,1209.64 1935.43,1209.64 1936.01,1209.64 1936.6,1209.64 1937.19,1209.64 1937.77,1209.64 1938.36,1209.64 1938.95,1209.64 1939.53,1209.64 1940.12,1209.64 1940.71,1209.64 1941.29,1209.64 1941.88,1209.64 1942.46,1209.64 1943.05,1209.64 1943.64,1209.64 1944.22,1209.64 1944.81,1209.64 1945.4,1209.64 1945.98,1209.64 1946.57,1209.64 1947.16,1209.64 1947.74,1209.64 1948.33,1209.64 1948.91,1209.64 1949.5,1209.64 1950.09,1209.64 1950.67,1209.64 1951.26,1209.64 1951.85,1209.64 1952.43,1209.64 1953.02,1209.64 1953.61,1209.64 1954.19,1209.64 1954.78,1209.64 1955.37,1209.64 1955.95,1209.64 1956.54,1209.64 1957.12,1209.64 1957.71,1209.64 1958.3,1209.64 1958.88,1209.64 1959.47,1209.64 1960.06,1209.64 1960.64,1209.64 1961.23,1209.64 1961.82,1209.64 1962.4,1209.64 1962.99,1209.64 1963.58,1209.64 1964.16,1209.64 1964.75,1209.64 1965.33,1209.64 1965.92,1209.64 1966.51,1209.64 1967.09,1209.64 1967.68,1209.64 1968.27,1209.64 1968.85,1209.64 1969.44,1209.64 1970.03,1209.64 1970.61,1209.64 1971.2,1209.64 1971.78,1209.64 1972.37,1209.64 1972.96,1209.64 1973.54,1209.64 1974.13,1209.64 1974.72,1209.64 1975.3,1209.64 1975.89,1209.64 1976.48,1209.64 1977.06,1209.64 1977.65,1209.64 1978.24,1209.64 1978.82,1209.64 1979.41,1209.64 1979.99,1209.64 1980.58,1209.64 1981.17,1209.64 1981.75,1209.64 1982.34,1209.64 1982.93,1209.64 1983.51,1209.64 1984.1,1209.64 1984.69,1209.64 1985.27,1209.64 1985.86,1209.64 1986.45,1209.64 1987.03,1209.64 1987.62,1209.64 1988.2,1209.64 1988.79,1209.64 1989.38,1209.64 1989.96,1209.64 1990.55,1209.64 1991.14,1209.64 1991.72,1209.64 1992.31,1209.64 1992.9,1209.64 1993.48,1209.64 1994.07,1209.64 1994.65,1209.64 1995.24,1209.64 1995.83,1209.64 1996.41,1209.64 1997,1209.64 1997.59,1209.64 1998.17,1209.64 1998.76,1209.64 1999.35,1209.64 1999.93,1209.64 2000.52,1209.64 2001.11,1209.64 2001.69,1209.64 2002.28,1209.64 2002.86,1209.64 2003.45,1209.64 2004.04,1209.64 2004.62,1209.64 2005.21,1209.64 2005.8,1209.64 2006.38,1209.64 2006.97,1209.64 2007.56,1209.64 2008.14,1209.64 2008.73,1209.64 2009.32,1209.64 2009.9,1209.64 2010.49,1209.64 2011.07,1209.64 2011.66,1209.64 2012.25,1209.64 2012.83,1209.64 2013.42,1209.64 2014.01,1209.64 2014.59,1209.64 2015.18,1209.64 2015.77,1209.64 2016.35,1209.64 2016.94,1209.64 2017.53,1209.64 2018.11,1209.64 2018.7,1209.64 2019.28,1209.64 2019.87,1209.64 2020.46,1209.64 2021.04,1209.64 2021.63,1209.64 2022.22,1209.64 2022.8,1209.64 2023.39,1209.64 2023.98,1209.64 2024.56,1209.64 2025.15,1209.64 2025.73,1209.64 2026.32,1209.64 2026.91,1209.64 2027.49,1209.64 2028.08,1209.64 2028.67,1209.64 2029.25,1209.64 2029.84,1209.64 2030.43,1209.64 2031.01,1209.64 2031.6,1209.64 2032.19,1209.64 2032.77,1209.64 2033.36,1209.64 2033.94,1209.64 2034.53,1209.64 2035.12,1209.64 2035.7,1209.64 2036.29,1209.64 2036.88,1209.64 2037.46,1209.64 2038.05,1209.64 2038.64,1209.64 2039.22,1209.64 2039.81,1209.64 2040.4,1209.64 2040.98,1209.64 2041.57,1209.64 2042.15,1209.64 2042.74,1209.64 2043.33,1209.64 2043.91,1209.64 2044.5,1209.64 2045.09,1209.64 2045.67,1209.64 2046.26,1209.64 2046.85,1209.64 2047.43,1209.64 2048.02,1209.64 2048.6,1209.64 2049.19,1209.64 2049.78,1209.64 2050.36,1209.64 2050.95,1209.64 2051.54,1209.64 2052.12,1209.64 2052.71,1209.64 2053.3,1209.64 2053.88,1209.64 2054.47,1209.64 2055.06,1209.64 2055.64,1209.64 2056.23,1209.64 2056.81,1209.64 2057.4,1209.64 2057.99,1209.64 2058.57,1209.64 2059.16,1209.64 2059.75,1209.64 2060.33,1209.64 2060.92,1209.64 2061.51,1209.64 2062.09,1209.64 2062.68,1209.64 2063.27,1209.64 2063.85,1209.64 2064.44,1209.64 2065.02,1209.64 2065.61,1209.64 2066.2,1209.64 2066.78,1209.64 2067.37,1209.64 2067.96,1209.64 2068.54,1209.64 2069.13,1209.64 2069.72,1209.64 2070.3,1209.64 2070.89,1209.64 2071.48,1209.64 2072.06,1209.64 2072.65,1209.64 2073.23,1209.64 2073.82,1209.64 2074.41,1209.64 2074.99,1209.64 2075.58,1209.64 2076.17,1209.64 2076.75,1209.64 2077.34,1209.64 2077.93,1209.64 2078.51,1209.64 2079.1,1209.64 2079.68,1209.64 2080.27,1209.64 2080.86,1209.64 2081.44,1209.64 2082.03,1209.64 2082.62,1209.64 2083.2,1209.64 2083.79,1209.64 2084.38,1209.64 2084.96,1209.64 2085.55,1209.64 2086.14,1209.64 2086.72,1209.64 2087.31,1209.64 2087.89,1209.64 2088.48,1209.64 2089.07,1209.64 2089.65,1209.64 2090.24,1209.64 2090.83,1209.64 2091.41,1209.64 2092,1209.64 2092.59,1209.64 2093.17,1209.64 2093.76,1209.64 2094.35,1209.64 2094.93,1209.64 2095.52,1209.64 2096.1,1209.64 2096.69,1209.64 2097.28,1209.64 2097.86,1209.64 2098.45,1209.64 2099.04,1209.64 2099.62,1209.64 2100.21,1209.64 2100.8,1209.64 2101.38,1209.64 2101.97,1209.64 2102.55,1209.64 2103.14,1209.64 2103.73,1209.64 2104.31,1209.64 2104.9,1209.64 2105.49,1209.64 2106.07,1209.64 2106.66,1209.64 2107.25,1209.64 2107.83,1209.64 2108.42,1209.64 2109.01,1209.64 2109.59,1209.64 2110.18,1209.64 2110.76,1209.64 2111.35,1209.64 2111.94,1209.64 2112.52,1209.64 2113.11,1209.64 2113.7,1209.64 2114.28,1209.64 2114.87,1209.64 2115.46,1209.64 2116.04,1209.64 2116.63,1209.64 2117.22,1209.64 2117.8,1209.64 2118.39,1209.64 2118.97,1209.64 2119.56,1209.64 2120.15,1209.64 2120.73,1209.64 2121.32,1209.64 2121.91,1209.64 2122.49,1209.64 2123.08,1209.64 2123.67,1209.64 2124.25,1209.64 2124.84,1209.64 2125.42,1209.64 2126.01,1209.64 2126.6,1209.64 2127.18,1209.64 2127.77,1209.64 2128.36,1209.64 2128.94,1209.64 2129.53,1209.64 2130.12,1209.64 2130.7,1209.64 2131.29,1209.64 2131.88,1209.64 2132.46,1209.64 2133.05,1209.64 2133.63,1209.64 2134.22,1209.64 2134.81,1209.64 2135.39,1209.64 2135.98,1209.64 2136.57,1209.64 2137.15,1209.64 2137.74,1209.64 2138.33,1209.64 2138.91,1209.64 2139.5,1209.64 2140.09,1209.64 2140.67,1209.64 2141.26,1209.64 2141.84,1209.64 2142.43,1209.64 2143.02,1209.64 2143.6,1209.64 2144.19,1209.64 2144.78,1209.64 2145.36,1209.64 2145.95,1209.64 2146.54,1209.64 2147.12,1209.64 2147.71,1209.64 2148.3,1209.64 2148.88,1209.64 2149.47,1209.64 2150.05,1209.64 2150.64,1209.64 2151.23,1209.64 2151.81,1209.64 2152.4,1209.64 2152.99,1209.64 2153.57,1209.64 2154.16,1209.64 2154.75,1209.64 2155.33,1209.64 2155.92,1209.64 2156.5,1209.64 2157.09,1209.64 2157.68,1209.64 2158.26,1209.64 \"/>\n<path clip-path=\"url(#clip932)\" d=\"M986.025 1209.37 L986.612 1209.37 L987.198 1209.37 L987.785 1209.37 L988.371 1209.37 L988.957 1209.37 L989.544 1209.37 L990.13 1209.37 L990.717 1209.37 L991.303 1209.37 L991.889 1209.37 L992.476 1209.37 L993.062 1209.37 L993.649 1209.37 L994.235 1209.37 L994.822 1209.37 L995.408 1209.37 L995.994 1209.37 L996.581 1209.37 L997.167 1209.37 L997.754 1209.37 L998.34 1209.37 L998.926 1209.37 L999.513 1209.37 L1000.1 1209.37 L1000.69 1209.37 L1001.27 1209.37 L1001.86 1209.37 L1002.44 1209.37 L1003.03 1209.37 L1003.62 1209.37 L1004.2 1209.37 L1004.79 1209.37 L1005.38 1209.37 L1005.96 1209.37 L1006.55 1209.37 L1007.14 1209.37 L1007.72 1209.37 L1008.31 1209.37 L1008.9 1209.37 L1009.48 1209.37 L1010.07 1209.37 L1010.65 1209.37 L1011.24 1209.37 L1011.83 1209.37 L1012.41 1209.37 L1013 1209.37 L1013.59 1209.37 L1014.17 1209.37 L1014.76 1209.37 L1015.35 1209.37 L1015.93 1209.37 L1016.52 1209.37 L1017.11 1209.37 L1017.69 1209.37 L1018.28 1209.37 L1018.86 1209.37 L1019.45 1209.37 L1020.04 1209.37 L1020.62 1209.37 L1021.21 1209.37 L1021.8 1209.37 L1022.38 1209.37 L1022.97 1209.37 L1023.56 1209.37 L1024.14 1209.37 L1024.73 1209.37 L1025.32 1209.37 L1025.9 1209.37 L1026.49 1209.37 L1027.07 1209.37 L1027.66 1209.37 L1028.25 1209.37 L1028.83 1209.37 L1029.42 1209.37 L1030.01 1209.37 L1030.59 1209.37 L1031.18 1209.37 L1031.77 1209.37 L1032.35 1209.37 L1032.94 1209.37 L1033.52 1209.37 L1034.11 1209.37 L1034.7 1209.37 L1035.28 1209.37 L1035.87 1209.37 L1036.46 1209.37 L1037.04 1209.37 L1037.63 1209.37 L1038.22 1209.37 L1038.8 1209.37 L1039.39 1209.37 L1039.98 1209.37 L1040.56 1209.37 L1041.15 1209.37 L1041.73 1209.37 L1042.32 1209.37 L1042.91 1209.37 L1043.49 1209.37 L1044.08 1209.37 L1044.67 1209.37 L1045.25 1209.37 L1045.84 1209.37 L1046.43 1209.37 L1047.01 1209.37 L1047.6 1209.37 L1048.19 1209.37 L1048.77 1209.37 L1049.36 1209.37 L1049.94 1209.37 L1050.53 1209.37 L1051.12 1209.37 L1051.7 1209.37 L1052.29 1209.37 L1052.88 1209.37 L1053.46 1209.37 L1054.05 1209.37 L1054.64 1209.37 L1055.22 1209.37 L1055.81 1209.37 L1056.39 1209.37 L1056.98 1209.37 L1057.57 1209.37 L1058.15 1209.37 L1058.74 1209.37 L1059.33 1209.37 L1059.91 1209.37 L1060.5 1209.37 L1061.09 1209.37 L1061.67 1209.37 L1062.26 1209.37 L1062.85 1209.37 L1063.43 1209.37 L1064.02 1209.37 L1064.6 1209.37 L1065.19 1209.37 L1065.78 1209.37 L1066.36 1209.37 L1066.95 1209.37 L1067.54 1209.37 L1068.12 1209.37 L1068.71 1209.37 L1069.3 1209.37 L1069.88 1209.37 L1070.47 1209.37 L1071.06 1209.37 L1071.64 1209.37 L1072.23 1209.37 L1072.81 1209.37 L1073.4 1209.37 L1073.99 1209.37 L1074.57 1209.37 L1075.16 1209.37 L1075.75 1209.37 L1076.33 1209.37 L1076.92 1209.37 L1077.51 1209.37 L1078.09 1209.37 L1078.68 1209.37 L1079.26 1209.37 L1079.85 1209.37 L1080.44 1209.37 L1081.02 1209.37 L1081.61 1209.37 L1082.2 1209.37 L1082.78 1209.37 L1083.37 1209.37 L1083.96 1209.37 L1084.54 1209.37 L1085.13 1209.37 L1085.72 1209.37 L1086.3 1209.37 L1086.89 1209.37 L1087.47 1209.37 L1088.06 1209.37 L1088.65 1209.37 L1089.23 1209.37 L1089.82 1209.37 L1090.41 1209.37 L1090.99 1209.37 L1091.58 1209.37 L1092.17 1209.37 L1092.75 1209.37 L1093.34 1209.37 L1093.93 1209.37 L1094.51 1209.37 L1095.1 1209.37 L1095.68 1209.37 L1096.27 1209.37 L1096.86 1209.37 L1097.44 1209.37 L1098.03 1209.37 L1098.62 1209.37 L1099.2 1209.37 L1099.79 1209.37 L1100.38 1209.37 L1100.96 1209.37 L1101.55 1209.37 L1102.14 1209.37 L1102.72 1209.37 L1103.31 1209.37 L1103.89 1209.37 L1104.48 1209.37 L1105.07 1209.37 L1105.65 1209.37 L1106.24 1209.37 L1106.83 1209.37 L1107.41 1209.37 L1108 1209.37 L1108.59 1209.37 L1109.17 1209.37 L1109.76 1209.37 L1110.34 1209.37 L1110.93 1209.37 L1111.52 1209.37 L1112.1 1209.37 L1112.69 1209.37 L1113.28 1209.37 L1113.86 1209.37 L1114.45 1209.37 L1115.04 1209.37 L1115.62 1209.37 L1116.21 1209.37 L1116.8 1209.37 L1117.38 1209.37 L1117.97 1209.37 L1118.55 1209.37 L1119.14 1209.37 L1119.73 1209.37 L1120.31 1209.37 L1120.9 1209.37 L1121.49 1209.37 L1122.07 1209.37 L1122.66 1209.37 L1123.25 1209.37 L1123.83 1209.37 L1124.42 1209.37 L1125.01 1209.37 L1125.59 1209.37 L1126.18 1209.37 L1126.76 1209.37 L1127.35 1209.37 L1127.94 1209.37 L1128.52 1209.37 L1129.11 1209.37 L1129.7 1209.37 L1130.28 1209.37 L1130.87 1209.37 L1131.46 1209.37 L1132.04 1209.37 L1132.63 1209.37 L1133.21 1209.37 L1133.8 1209.37 L1134.39 1209.37 L1134.97 1209.37 L1135.56 1209.37 L1136.15 1209.37 L1136.73 1209.37 L1137.32 1209.37 L1137.91 1209.37 L1138.49 1209.37 L1139.08 1209.37 L1139.67 1209.37 L1140.25 1209.37 L1140.84 1209.37 L1141.42 1209.37 L1142.01 1209.37 L1142.6 1209.37 L1143.18 1209.37 L1143.77 1209.37 L1144.36 1209.37 L1144.94 1209.37 L1145.53 1209.37 L1146.12 1209.37 L1146.7 1209.37 L1147.29 1209.37 L1147.88 1209.37 L1148.46 1209.37 L1149.05 1209.37 L1149.63 1209.37 L1150.22 1209.37 L1150.81 1209.37 L1151.39 1209.37 L1151.98 1209.37 L1152.57 1209.37 L1153.15 1209.37 L1153.74 1209.37 L1154.33 1209.37 L1154.91 1209.37 L1155.5 1209.37 L1156.09 1209.37 L1156.67 1209.37 L1157.26 1209.37 L1157.84 1209.37 L1158.43 1209.37 L1159.02 1209.37 L1159.6 1209.37 L1160.19 1209.37 L1160.78 1209.37 L1161.36 1209.37 L1161.95 1209.37 L1162.54 1209.37 L1163.12 1209.37 L1163.71 1209.37 L1164.29 1209.37 L1164.88 1209.37 L1165.47 1209.37 L1166.05 1209.37 L1166.64 1209.37 L1167.23 1209.37 L1167.81 1209.37 L1168.4 1209.37 L1168.99 1209.37 L1169.57 1209.37 L1170.16 1209.37 L1170.75 1209.37 L1171.33 1209.37 L1171.92 1209.37 L1172.5 1209.37 L1173.09 1209.37 L1173.68 1209.37 L1174.26 1209.37 L1174.85 1209.37 L1175.44 1209.37 L1176.02 1209.37 L1176.61 1209.37 L1177.2 1209.37 L1177.78 1209.37 L1178.37 1209.37 L1178.96 1209.37 L1179.54 1209.37 L1180.13 1209.37 L1180.71 1209.37 L1181.3 1209.37 L1181.89 1209.37 L1182.47 1209.37 L1183.06 1209.37 L1183.65 1209.37 L1184.23 1209.37 L1184.82 1209.37 L1185.41 1209.37 L1185.99 1209.37 L1186.58 1209.37 L1187.16 1209.37 L1187.75 1209.37 L1188.34 1209.37 L1188.92 1209.37 L1189.51 1209.37 L1190.1 1209.37 L1190.68 1209.37 L1191.27 1209.37 L1191.86 1209.37 L1192.44 1209.37 L1193.03 1209.37 L1193.62 1209.37 L1194.2 1209.37 L1194.79 1209.37 L1195.37 1209.37 L1195.96 1209.37 L1196.55 1209.37 L1197.13 1209.37 L1197.72 1209.37 L1198.31 1209.37 L1198.89 1209.37 L1199.48 1209.37 L1200.07 1209.37 L1200.65 1209.37 L1201.24 1209.37 L1201.83 1209.37 L1202.41 1209.37 L1203 1209.37 L1203.58 1209.37 L1204.17 1209.37 L1204.76 1209.37 L1205.34 1209.37 L1205.93 1209.37 L1206.52 1209.37 L1207.1 1209.37 L1207.69 1209.37 L1208.28 1209.37 L1208.86 1209.37 L1209.45 1209.37 L1210.03 1209.37 L1210.62 1209.37 L1211.21 1209.37 L1211.79 1209.37 L1212.38 1209.37 L1212.97 1209.37 L1213.55 1209.37 L1214.14 1209.37 L1214.73 1209.37 L1215.31 1209.37 L1215.9 1209.37 L1216.49 1209.37 L1217.07 1209.37 L1217.66 1209.37 L1218.24 1209.37 L1218.83 1209.37 L1219.42 1209.37 L1220 1209.37 L1220.59 1209.37 L1221.18 1209.37 L1221.76 1209.37 L1222.35 1209.37 L1222.94 1209.37 L1223.52 1209.37 L1224.11 1209.37 L1224.7 1209.37 L1225.28 1209.37 L1225.87 1209.37 L1226.45 1209.37 L1227.04 1209.37 L1227.63 1209.37 L1228.21 1209.37 L1228.8 1209.37 L1229.39 1209.37 L1229.97 1209.37 L1230.56 1209.37 L1231.15 1209.37 L1231.73 1209.37 L1232.32 1209.37 L1232.91 1209.37 L1233.49 1209.37 L1234.08 1209.37 L1234.66 1209.37 L1235.25 1209.37 L1235.84 1209.37 L1236.42 1209.37 L1237.01 1209.37 L1237.6 1209.37 L1238.18 1209.37 L1238.77 1209.37 L1239.36 1209.37 L1239.94 1209.37 L1240.53 1209.37 L1241.11 1209.37 L1241.7 1209.37 L1242.29 1209.37 L1242.87 1209.37 L1243.46 1209.37 L1244.05 1209.37 L1244.63 1209.37 L1245.22 1209.37 L1245.81 1209.37 L1246.39 1209.37 L1246.98 1209.37 L1247.57 1209.37 L1248.15 1209.37 L1248.74 1209.37 L1249.32 1209.37 L1249.91 1209.37 L1250.5 1209.37 L1251.08 1209.37 L1251.67 1209.37 L1252.26 1209.37 L1252.84 1209.37 L1253.43 1209.37 L1254.02 1209.37 L1254.6 1209.37 L1255.19 1209.37 L1255.78 1209.37 L1256.36 1209.37 L1256.95 1209.37 L1257.53 1209.37 L1258.12 1209.37 L1258.71 1209.37 L1259.29 1209.37 L1259.88 1209.37 L1260.47 1209.37 L1261.05 1209.37 L1261.64 1209.37 L1262.23 1209.37 L1262.81 1209.37 L1263.4 1209.37 L1263.98 1209.37 L1264.57 1209.37 L1265.16 1209.37 L1265.74 1209.37 L1266.33 1209.37 L1266.92 1209.37 L1267.5 1209.37 L1268.09 1209.37 L1268.68 1209.37 L1269.26 1209.37 L1269.85 1209.37 L1270.44 1209.37 L1271.02 1209.37 L1271.61 1209.37 L1272.19 1209.37 L1272.78 1209.37 L1273.37 1209.37 L1273.95 1209.37 L1274.54 1209.37 L1275.13 1209.37 L1275.71 1209.37 L1276.3 1209.37 L1276.89 1209.37 L1277.47 1209.37 L1278.06 1209.37 L1278.65 1209.37 L1279.23 1209.37 L1279.82 1209.37 L1280.4 1209.37 L1280.99 1209.37 L1281.58 1209.37 L1282.16 1209.37 L1282.75 1209.37 L1283.34 1209.37 L1283.92 1209.37 L1284.51 1209.37 L1285.1 1209.37 L1285.68 1209.37 L1286.27 1209.37 L1286.86 1209.37 L1287.44 1209.37 L1288.03 1209.37 L1288.61 1209.37 L1289.2 1209.37 L1289.79 1209.37 L1290.37 1209.37 L1290.96 1209.37 L1291.55 1209.37 L1292.13 1209.37 L1292.72 1209.37 L1293.31 1209.37 L1293.89 1209.37 L1294.48 1209.37 L1295.06 1209.37 L1295.65 1209.37 L1296.24 1209.37 L1296.82 1209.37 L1297.41 1209.37 L1298 1209.37 L1298.58 1209.37 L1299.17 1209.37 L1299.76 1209.37 L1300.34 1209.37 L1300.93 1209.37 L1301.52 1209.37 L1302.1 1209.37 L1302.69 1209.37 L1303.27 1209.37 L1303.86 1209.37 L1304.45 1209.37 L1305.03 1209.37 L1305.62 1209.37 L1306.21 1209.37 L1306.79 1209.37 L1307.38 1209.37 L1307.97 1209.37 L1308.55 1209.37 L1309.14 1209.37 L1309.73 1209.37 L1310.31 1209.37 L1310.9 1209.37 L1311.48 1209.37 L1312.07 1209.37 L1312.66 1209.37 L1313.24 1209.37 L1313.83 1209.37 L1314.42 1209.37 L1315 1209.37 L1315.59 1209.37 L1316.18 1209.37 L1316.76 1209.37 L1317.35 1209.37 L1317.93 1209.37 L1318.52 1209.37 L1319.11 1209.37 L1319.69 1209.37 L1320.28 1209.37 L1320.87 1209.37 L1321.45 1209.37 L1322.04 1209.37 L1322.63 1209.37 L1323.21 1209.37 L1323.8 1209.37 L1324.39 1209.37 L1324.97 1209.37 L1325.56 1209.37 L1326.14 1209.37 L1326.73 1209.37 L1327.32 1209.37 L1327.9 1209.37 L1328.49 1209.37 L1329.08 1209.37 L1329.66 1209.37 L1330.25 1209.37 L1330.84 1209.37 L1331.42 1209.37 L1332.01 1209.37 L1332.6 1209.37 L1333.18 1209.37 L1333.77 1209.37 L1334.35 1209.37 L1334.94 1209.37 L1335.53 1209.37 L1336.11 1209.37 L1336.7 1209.37 L1337.29 1209.37 L1337.87 1209.37 L1338.46 1209.37 L1339.05 1209.37 L1339.63 1209.37 L1340.22 1209.37 L1340.8 1209.37 L1341.39 1209.37 L1341.98 1209.37 L1342.56 1209.37 L1343.15 1209.37 L1343.74 1209.37 L1344.32 1209.37 L1344.91 1209.37 L1345.5 1209.37 L1346.08 1209.37 L1346.67 1209.37 L1347.26 1209.37 L1347.84 1209.37 L1348.43 1209.37 L1349.01 1209.37 L1349.6 1209.37 L1350.19 1209.37 L1350.77 1209.37 L1351.36 1209.37 L1351.95 1209.37 L1352.53 1209.37 L1353.12 1209.37 L1353.71 1209.37 L1354.29 1209.37 L1354.88 1209.37 L1355.47 1209.37 L1356.05 1209.37 L1356.64 1209.37 L1357.22 1209.37 L1357.81 1209.37 L1358.4 1209.37 L1358.98 1209.37 L1359.57 1209.37 L1360.16 1209.37 L1360.74 1209.37 L1361.33 1209.37 L1361.92 1209.37 L1362.5 1209.37 L1363.09 1209.37 L1363.68 1209.37 L1364.26 1209.37 L1364.85 1209.37 L1365.43 1209.37 L1366.02 1209.37 L1366.61 1209.37 L1367.19 1209.37 L1367.78 1209.37 L1368.37 1209.37 L1368.95 1209.37 L1369.54 1209.37 L1370.13 1209.37 L1370.71 1209.37 L1371.3 1209.37 L1371.88 1209.37 L1372.47 1209.37 L1373.06 1209.37 L1373.64 1209.37 L1374.23 1209.37 L1374.82 1209.37 L1375.4 1209.37 L1375.99 1209.37 L1376.58 1209.37 L1377.16 1209.37 L1377.75 1209.37 L1378.34 1209.37 L1378.92 1209.37 L1379.51 1209.37 L1380.09 1209.37 L1380.68 1209.37 L1381.27 1209.37 L1381.85 1209.37 L1382.44 1209.37 L1383.03 1209.37 L1383.61 1209.37 L1384.2 1209.37 L1384.79 1209.37 L1385.37 1209.37 L1385.96 1209.37 L1386.55 1209.37 L1387.13 1209.37 L1387.72 1209.37 L1388.3 1209.37 L1388.89 1209.37 L1389.48 1209.37 L1390.06 1209.37 L1390.65 1209.37 L1391.24 1209.37 L1391.82 1209.37 L1392.41 1209.37 L1393 1209.37 L1393.58 1209.37 L1394.17 1209.37 L1394.75 1209.37 L1395.34 1209.37 L1395.93 1209.37 L1396.51 1209.37 L1397.1 1209.37 L1397.69 1209.37 L1398.27 1209.37 L1398.86 1209.37 L1399.45 1209.37 L1400.03 1209.37 L1400.62 1209.37 L1401.21 1209.37 L1401.79 1209.37 L1402.38 1209.37 L1402.96 1209.37 L1403.55 1209.37 L1404.14 1209.37 L1404.72 1209.37 L1405.31 1209.37 L1405.9 1209.37 L1406.48 1209.37 L1407.07 1209.37 L1407.66 1209.37 L1408.24 1209.37 L1408.83 1209.37 L1409.42 1209.37 L1410 1209.37 L1410.59 1209.37 L1411.17 1209.37 L1411.76 1209.37 L1412.35 1209.37 L1412.93 1209.37 L1413.52 1209.37 L1414.11 1209.37 L1414.69 1209.37 L1415.28 1209.37 L1415.87 1209.37 L1416.45 1209.37 L1417.04 1209.37 L1417.63 1209.37 L1418.21 1209.37 L1418.8 1209.37 L1419.38 1209.37 L1419.97 1209.37 L1420.56 1209.37 L1421.14 1209.37 L1421.73 1209.37 L1422.32 1209.37 L1422.9 1209.37 L1423.49 1209.37 L1424.08 1209.37 L1424.66 1209.37 L1425.25 1209.37 L1425.83 1209.37 L1426.42 1209.37 L1427.01 1209.37 L1427.59 1209.37 L1428.18 1209.37 L1428.77 1209.37 L1429.35 1209.37 L1429.94 1209.37 L1430.53 1209.37 L1431.11 1209.37 L1431.7 1209.37 L1432.29 1209.37 L1432.87 1209.37 L1433.46 1209.37 L1434.04 1209.37 L1434.63 1209.37 L1435.22 1209.37 L1435.8 1209.37 L1436.39 1209.37 L1436.98 1209.37 L1437.56 1209.37 L1438.15 1209.37 L1438.74 1209.37 L1439.32 1209.37 L1439.91 1209.37 L1440.5 1209.37 L1441.08 1209.37 L1441.67 1209.37 L1442.25 1209.37 L1442.84 1209.37 L1443.43 1209.37 L1444.01 1209.37 L1444.6 1209.37 L1445.19 1209.37 L1445.77 1209.37 L1446.36 1209.37 L1446.95 1209.37 L1447.53 1209.37 L1448.12 1209.37 L1448.7 1209.37 L1449.29 1209.37 L1449.88 1209.37 L1450.46 1209.37 L1451.05 1209.37 L1451.64 1209.37 L1452.22 1209.37 L1452.81 1209.37 L1453.4 1209.37 L1453.98 1209.37 L1454.57 1209.37 L1455.16 1209.37 L1455.74 1209.37 L1456.33 1209.37 L1456.91 1209.37 L1457.5 1209.37 L1458.09 1209.37 L1458.67 1209.37 L1459.26 1209.37 L1459.85 1209.37 L1460.43 1209.37 L1461.02 1209.37 L1461.61 1209.37 L1462.19 1209.37 L1462.78 1209.37 L1463.37 1209.37 L1463.95 1209.37 L1464.54 1209.37 L1465.12 1209.37 L1465.71 1209.37 L1466.3 1209.37 L1466.88 1209.37 L1467.47 1209.37 L1468.06 1209.37 L1468.64 1209.37 L1469.23 1209.37 L1469.82 1209.37 L1470.4 1209.37 L1470.99 1209.37 L1471.57 1209.37 L1472.16 1209.37 L1472.75 1209.37 L1473.33 1209.37 L1473.92 1209.37 L1474.51 1209.37 L1475.09 1209.37 L1475.68 1209.37 L1476.27 1209.37 L1476.85 1209.37 L1477.44 1209.37 L1478.03 1209.37 L1478.61 1209.37 L1479.2 1209.37 L1479.78 1209.37 L1480.37 1209.37 L1480.96 1209.37 L1481.54 1209.37 L1482.13 1209.37 L1482.72 1209.37 L1483.3 1209.37 L1483.89 1209.37 L1484.48 1209.37 L1485.06 1209.37 L1485.65 1209.37 L1486.24 1209.37 L1486.82 1209.37 L1487.41 1209.37 L1487.99 1209.37 L1488.58 1209.37 L1489.17 1209.37 L1489.75 1209.37 L1490.34 1209.37 L1490.93 1209.37 L1491.51 1209.37 L1492.1 1209.37 L1492.69 1209.37 L1493.27 1209.37 L1493.86 1209.37 L1494.45 1209.37 L1495.03 1209.37 L1495.62 1209.37 L1496.2 1209.37 L1496.79 1209.37 L1497.38 1209.37 L1497.96 1209.37 L1498.55 1209.37 L1499.14 1209.37 L1499.72 1209.37 L1500.31 1209.37 L1500.9 1209.37 L1501.48 1209.37 L1502.07 1209.37 L1502.65 1209.37 L1503.24 1209.37 L1503.83 1209.37 L1504.41 1209.37 L1505 1209.37 L1505.59 1209.37 L1506.17 1209.37 L1506.76 1209.37 L1507.35 1209.37 L1507.93 1209.37 L1508.52 1209.37 L1509.11 1209.37 L1509.69 1209.37 L1510.28 1209.37 L1510.86 1209.37 L1511.45 1209.37 L1512.04 1209.37 L1512.62 1209.37 L1513.21 1209.37 L1513.8 1209.37 L1514.38 1209.37 L1514.97 1209.37 L1515.56 1209.37 L1516.14 1209.37 L1516.73 1209.37 L1517.32 1209.37 L1517.9 1209.37 L1518.49 1209.37 L1519.07 1209.37 L1519.66 1209.37 L1520.25 1209.37 L1520.83 1209.37 L1521.42 1209.37 L1522.01 1209.37 L1522.59 1209.37 L1523.18 1209.37 L1523.77 1209.37 L1524.35 1209.37 L1524.94 1209.37 L1525.52 1209.37 L1526.11 1209.37 L1526.7 1209.37 L1527.28 1209.37 L1527.87 1209.37 L1528.46 1209.37 L1529.04 1209.37 L1529.63 1209.37 L1530.22 1209.37 L1530.8 1209.37 L1531.39 1209.37 L1531.98 1209.37 L1532.56 1209.37 L1533.15 1209.37 L1533.73 1209.37 L1534.32 1209.37 L1534.91 1209.37 L1535.49 1209.37 L1536.08 1209.37 L1536.67 1209.37 L1537.25 1209.37 L1537.84 1209.37 L1538.43 1209.37 L1539.01 1209.37 L1539.6 1209.37 L1540.19 1209.37 L1540.77 1209.37 L1541.36 1209.37 L1541.94 1209.37 L1542.53 1209.37 L1543.12 1209.37 L1543.7 1209.37 L1544.29 1209.37 L1544.88 1209.37 L1545.46 1209.37 L1546.05 1209.37 L1546.64 1209.37 L1547.22 1209.37 L1547.81 1209.37 L1548.4 1209.37 L1548.98 1209.37 L1549.57 1209.37 L1550.15 1209.37 L1550.74 1209.37 L1551.33 1209.37 L1551.91 1209.37 L1552.5 1209.37 L1553.09 1209.37 L1553.67 1209.37 L1554.26 1209.37 L1554.85 1209.37 L1555.43 1209.37 L1556.02 1209.37 L1556.6 1209.37 L1557.19 1209.37 L1557.78 1209.37 L1558.36 1209.37 L1558.95 1209.37 L1559.54 1209.37 L1560.12 1209.37 L1560.71 1209.37 L1561.3 1209.37 L1561.88 1209.37 L1562.47 1209.37 L1563.06 1209.37 L1563.64 1209.37 L1564.23 1209.37 L1564.81 1209.37 L1565.4 1209.37 L1565.99 1209.37 L1566.57 1209.37 L1567.16 1209.37 L1567.75 1209.37 L1568.33 1209.37 L1568.92 1209.37 L1569.51 1209.37 L1570.09 1209.37 L1570.68 1209.37 L1571.27 1209.37 L1571.85 1209.37 L1572.44 1209.37 L1573.02 1209.37 L1573.61 1209.37 L1574.2 1209.37 L1574.78 1209.37 L1575.37 1209.37 L1575.96 1209.37 L1576.54 1209.37 L1577.13 1209.37 L1577.72 1209.37 L1578.3 1209.37 L1578.89 1209.37 L1579.47 1209.37 L1580.06 1209.37 L1580.65 1209.37 L1581.23 1209.37 L1581.82 1209.37 L1582.41 1209.37 L1582.99 1209.37 L1583.58 1209.37 L1584.17 1209.37 L1584.75 1209.37 L1585.34 1209.37 L1585.93 1209.37 L1586.51 1209.37 L1587.1 1209.37 L1587.68 1209.37 L1588.27 1209.37 L1588.86 1209.37 L1589.44 1209.37 L1590.03 1209.37 L1590.62 1209.37 L1591.2 1209.37 L1591.79 1209.37 L1592.38 1209.37 L1592.96 1209.37 L1593.55 1209.37 L1594.14 1209.37 L1594.72 1209.37 L1595.31 1209.37 L1595.89 1209.37 L1596.48 1209.37 L1597.07 1209.37 L1597.65 1209.37 L1598.24 1209.37 L1598.83 1209.37 L1599.41 1209.37 L1600 1209.37 L1600.59 1209.37 L1601.17 1209.37 L1601.76 1209.37 L1602.34 1209.37 L1602.93 1209.37 L1603.52 1209.37 L1604.1 1209.37 L1604.69 1209.37 L1605.28 1209.37 L1605.86 1209.37 L1606.45 1209.37 L1607.04 1209.37 L1607.62 1209.37 L1608.21 1209.37 L1608.8 1209.37 L1609.38 1209.37 L1609.97 1209.37 L1610.55 1209.37 L1611.14 1209.37 L1611.73 1209.37 L1612.31 1209.37 L1612.9 1209.37 L1613.49 1209.37 L1614.07 1209.37 L1614.66 1209.37 L1615.25 1209.37 L1615.83 1209.37 L1616.42 1209.37 L1617.01 1209.37 L1617.59 1209.37 L1618.18 1209.37 L1618.76 1209.37 L1619.35 1209.37 L1619.94 1209.37 L1620.52 1209.37 L1621.11 1209.37 L1621.7 1209.37 L1622.28 1209.37 L1622.87 1209.37 L1623.46 1209.37 L1624.04 1209.37 L1624.63 1209.37 L1625.22 1209.37 L1625.8 1209.37 L1626.39 1209.37 L1626.97 1209.37 L1627.56 1209.37 L1628.15 1209.37 L1628.73 1209.37 L1629.32 1209.37 L1629.91 1209.37 L1630.49 1209.37 L1631.08 1209.37 L1631.67 1209.37 L1632.25 1209.37 L1632.84 1209.37 L1633.42 1209.37 L1634.01 1209.37 L1634.6 1209.37 L1635.18 1209.37 L1635.77 1209.37 L1636.36 1209.37 L1636.94 1209.37 L1637.53 1209.37 L1638.12 1209.37 L1638.7 1209.37 L1639.29 1209.37 L1639.88 1209.37 L1640.46 1209.37 L1641.05 1209.37 L1641.63 1209.37 L1642.22 1209.37 L1642.81 1209.37 L1643.39 1209.37 L1643.98 1209.37 L1644.57 1209.37 L1645.15 1209.37 L1645.74 1209.37 L1646.33 1209.37 L1646.91 1209.37 L1647.5 1209.37 L1648.09 1209.37 L1648.67 1209.37 L1649.26 1209.37 L1649.84 1209.37 L1650.43 1209.37 L1651.02 1209.37 L1651.6 1209.37 L1652.19 1209.37 L1652.78 1209.37 L1653.36 1209.37 L1653.95 1209.37 L1654.54 1209.37 L1655.12 1209.37 L1655.71 1209.37 L1656.29 1209.37 L1656.88 1209.37 L1657.47 1209.37 L1658.05 1209.37 L1658.64 1209.37 L1659.23 1209.37 L1659.81 1209.37 L1660.4 1209.37 L1660.99 1209.37 L1661.57 1209.37 L1662.16 1209.37 L1662.75 1209.37 L1663.33 1209.37 L1663.92 1209.37 L1664.5 1209.37 L1665.09 1209.37 L1665.68 1209.37 L1666.26 1209.37 L1666.85 1209.37 L1667.44 1209.37 L1668.02 1209.37 L1668.61 1209.37 L1669.2 1209.37 L1669.78 1209.37 L1670.37 1209.37 L1670.96 1209.37 L1671.54 1209.37 L1672.13 1209.37 L1672.71 1209.37 L1673.3 1209.37 L1673.89 1209.37 L1674.47 1209.37 L1675.06 1209.37 L1675.65 1209.37 L1676.23 1209.37 L1676.82 1209.37 L1677.41 1209.37 L1677.99 1209.37 L1678.58 1209.37 L1679.17 1209.37 L1679.75 1209.37 L1680.34 1209.37 L1680.92 1209.37 L1681.51 1209.37 L1682.1 1209.37 L1682.68 1209.37 L1683.27 1209.37 L1683.86 1209.37 L1684.44 1209.37 L1685.03 1209.37 L1685.62 1209.37 L1686.2 1209.37 L1686.79 1209.37 L1687.37 1209.37 L1687.96 1209.37 L1688.55 1209.37 L1689.13 1209.37 L1689.72 1209.37 L1690.31 1209.37 L1690.89 1209.37 L1691.48 1209.37 L1692.07 1209.37 L1692.65 1209.37 L1693.24 1209.37 L1693.83 1209.37 L1694.41 1209.37 L1695 1209.37 L1695.58 1209.37 L1696.17 1209.37 L1696.76 1209.37 L1697.34 1209.37 L1697.93 1209.37 L1698.52 1209.37 L1699.1 1209.37 L1699.69 1209.37 L1700.28 1209.37 L1700.86 1209.37 L1701.45 1209.37 L1702.04 1209.37 L1702.62 1209.37 L1703.21 1209.37 L1703.79 1209.37 L1704.38 1209.37 L1704.97 1209.37 L1705.55 1209.37 L1706.14 1209.37 L1706.73 1209.37 L1707.31 1209.37 L1707.9 1209.37 L1708.49 1209.37 L1709.07 1209.37 L1709.66 1209.37 L1710.24 1209.37 L1710.83 1209.37 L1711.42 1209.37 L1712 1209.37 L1712.59 1209.37 L1713.18 1209.37 L1713.76 1209.37 L1714.35 1209.37 L1714.94 1209.37 L1715.52 1209.37 L1716.11 1209.37 L1716.7 1209.37 L1717.28 1209.37 L1717.87 1209.37 L1718.45 1209.37 L1719.04 1209.37 L1719.63 1209.37 L1720.21 1209.37 L1720.8 1209.37 L1721.39 1209.37 L1721.97 1209.37 L1722.56 1209.37 L1723.15 1209.37 L1723.73 1209.37 L1724.32 1209.37 L1724.91 1209.37 L1725.49 1209.37 L1726.08 1209.37 L1726.66 1209.37 L1727.25 1209.37 L1727.84 1209.37 L1728.42 1209.37 L1729.01 1209.37 L1729.6 1209.37 L1730.18 1209.37 L1730.77 1209.37 L1731.36 1209.37 L1731.94 1209.37 L1732.53 1209.37 L1733.11 1209.37 L1733.7 1209.37 L1734.29 1209.37 L1734.87 1209.37 L1735.46 1209.37 L1736.05 1209.37 L1736.63 1209.37 L1737.22 1209.37 L1737.81 1209.37 L1738.39 1209.37 L1738.98 1209.37 L1739.57 1209.37 L1740.15 1209.37 L1740.74 1209.37 L1741.32 1209.37 L1741.91 1209.37 L1742.5 1209.37 L1743.08 1209.37 L1743.67 1209.37 L1744.26 1209.37 L1744.84 1209.37 L1745.43 1209.37 L1746.02 1209.37 L1746.6 1209.37 L1747.19 1209.37 L1747.78 1209.37 L1748.36 1209.37 L1748.95 1209.37 L1749.53 1209.37 L1750.12 1209.37 L1750.71 1209.37 L1751.29 1209.37 L1751.88 1209.37 L1752.47 1209.37 L1753.05 1209.37 L1753.64 1209.37 L1754.23 1209.37 L1754.81 1209.37 L1755.4 1209.37 L1755.99 1209.37 L1756.57 1209.37 L1757.16 1209.37 L1757.74 1209.37 L1758.33 1209.37 L1758.92 1209.37 L1759.5 1209.37 L1760.09 1209.37 L1760.68 1209.37 L1761.26 1209.37 L1761.85 1209.37 L1762.44 1209.37 L1763.02 1209.37 L1763.61 1209.37 L1764.19 1209.37 L1764.78 1209.37 L1765.37 1209.37 L1765.95 1209.37 L1766.54 1209.37 L1767.13 1209.37 L1767.71 1209.37 L1768.3 1209.37 L1768.89 1209.37 L1769.47 1209.37 L1770.06 1209.37 L1770.65 1209.37 L1771.23 1209.37 L1771.82 1209.37 L1772.4 1209.37 L1772.99 1209.37 L1773.58 1209.37 L1774.16 1209.37 L1774.75 1209.37 L1775.34 1209.37 L1775.92 1209.37 L1776.51 1209.37 L1777.1 1209.37 L1777.68 1209.37 L1778.27 1209.37 L1778.86 1209.37 L1779.44 1209.37 L1780.03 1209.37 L1780.61 1209.37 L1781.2 1209.37 L1781.79 1209.37 L1782.37 1209.37 L1782.96 1209.37 L1783.55 1209.37 L1784.13 1209.37 L1784.72 1209.37 L1785.31 1209.37 L1785.89 1209.37 L1786.48 1209.37 L1787.06 1209.37 L1787.65 1209.37 L1788.24 1209.37 L1788.82 1209.37 L1789.41 1209.37 L1790 1209.37 L1790.58 1209.37 L1791.17 1209.37 L1791.76 1209.37 L1792.34 1209.37 L1792.93 1209.37 L1793.52 1209.37 L1794.1 1209.37 L1794.69 1209.37 L1795.27 1209.37 L1795.86 1209.37 L1796.45 1209.37 L1797.03 1209.37 L1797.62 1209.37 L1798.21 1209.37 L1798.79 1209.37 L1799.38 1209.37 L1799.97 1209.37 L1800.55 1209.37 L1801.14 1209.37 L1801.73 1209.37 L1802.31 1209.37 L1802.9 1209.37 L1803.48 1209.37 L1804.07 1209.37 L1804.66 1209.37 L1805.24 1209.37 L1805.83 1209.37 L1806.42 1209.37 L1807 1209.37 L1807.59 1209.37 L1808.18 1209.37 L1808.76 1209.37 L1809.35 1209.37 L1809.94 1209.37 L1810.52 1209.37 L1811.11 1209.37 L1811.69 1209.37 L1812.28 1209.37 L1812.87 1209.37 L1813.45 1209.37 L1814.04 1209.37 L1814.63 1209.37 L1815.21 1209.37 L1815.8 1209.37 L1816.39 1209.37 L1816.97 1209.37 L1817.56 1209.37 L1818.14 1209.37 L1818.73 1209.37 L1819.32 1209.37 L1819.9 1209.37 L1820.49 1209.37 L1821.08 1209.37 L1821.66 1209.37 L1822.25 1209.37 L1822.84 1209.37 L1823.42 1209.37 L1824.01 1209.37 L1824.6 1209.37 L1825.18 1209.37 L1825.77 1209.37 L1826.35 1209.37 L1826.94 1209.37 L1827.53 1209.37 L1828.11 1209.37 L1828.7 1209.37 L1829.29 1209.37 L1829.87 1209.37 L1830.46 1209.37 L1831.05 1209.37 L1831.63 1209.37 L1832.22 1209.37 L1832.81 1209.37 L1833.39 1209.37 L1833.98 1209.37 L1834.56 1209.37 L1835.15 1209.37 L1835.74 1209.37 L1836.32 1209.37 L1836.91 1209.37 L1837.5 1209.37 L1838.08 1209.37 L1838.67 1209.37 L1839.26 1209.37 L1839.84 1209.37 L1840.43 1209.37 L1841.01 1209.37 L1841.6 1209.37 L1842.19 1209.37 L1842.77 1209.37 L1843.36 1209.37 L1843.95 1209.37 L1844.53 1209.37 L1845.12 1209.37 L1845.71 1209.37 L1846.29 1209.37 L1846.88 1209.37 L1847.47 1209.37 L1848.05 1209.37 L1848.64 1209.37 L1849.22 1209.37 L1849.81 1209.37 L1850.4 1209.37 L1850.98 1209.37 L1851.57 1209.37 L1852.16 1209.37 L1852.74 1209.37 L1853.33 1209.37 L1853.92 1209.37 L1854.5 1209.37 L1855.09 1209.37 L1855.68 1209.37 L1856.26 1209.37 L1856.85 1209.37 L1857.43 1209.37 L1858.02 1209.37 L1858.61 1209.37 L1859.19 1209.37 L1859.78 1209.37 L1860.37 1209.37 L1860.95 1209.37 L1861.54 1209.37 L1862.13 1209.37 L1862.71 1209.37 L1863.3 1209.37 L1863.88 1209.37 L1864.47 1209.37 L1865.06 1209.37 L1865.64 1209.37 L1866.23 1209.37 L1866.82 1209.37 L1867.4 1209.37 L1867.99 1209.37 L1868.58 1209.37 L1869.16 1209.37 L1869.75 1209.37 L1870.34 1209.37 L1870.92 1209.37 L1871.51 1209.37 L1872.09 1209.37 L1872.68 1209.37 L1873.27 1209.37 L1873.85 1209.37 L1874.44 1209.37 L1875.03 1209.37 L1875.61 1209.37 L1876.2 1209.37 L1876.79 1209.37 L1877.37 1209.37 L1877.96 1209.37 L1878.55 1209.37 L1879.13 1209.37 L1879.72 1209.37 L1880.3 1209.37 L1880.89 1209.37 L1881.48 1209.37 L1882.06 1209.37 L1882.65 1209.37 L1883.24 1209.37 L1883.82 1209.37 L1884.41 1209.37 L1885 1209.37 L1885.58 1209.37 L1886.17 1209.37 L1886.76 1209.37 L1887.34 1209.37 L1887.93 1209.37 L1888.51 1209.37 L1889.1 1209.37 L1889.69 1209.37 L1890.27 1209.37 L1890.86 1209.37 L1891.45 1209.37 L1892.03 1209.37 L1892.62 1209.37 L1893.21 1209.37 L1893.79 1209.37 L1894.38 1209.37 L1894.96 1209.37 L1895.55 1209.37 L1896.14 1209.37 L1896.72 1209.37 L1897.31 1209.37 L1897.9 1209.37 L1898.48 1209.37 L1899.07 1209.37 L1899.66 1209.37 L1900.24 1209.37 L1900.83 1209.37 L1901.42 1209.37 L1902 1209.37 L1902.59 1209.37 L1903.17 1209.37 L1903.76 1209.37 L1904.35 1209.37 L1904.93 1209.37 L1905.52 1209.37 L1906.11 1209.37 L1906.69 1209.37 L1907.28 1209.37 L1907.87 1209.37 L1908.45 1209.37 L1909.04 1209.37 L1909.63 1209.37 L1910.21 1209.37 L1910.8 1209.37 L1911.38 1209.37 L1911.97 1209.37 L1912.56 1209.37 L1913.14 1209.37 L1913.73 1209.37 L1914.32 1209.37 L1914.9 1209.37 L1915.49 1209.37 L1916.08 1209.37 L1916.66 1209.37 L1917.25 1209.37 L1917.83 1209.37 L1918.42 1209.37 L1919.01 1209.37 L1919.59 1209.37 L1920.18 1209.37 L1920.77 1209.37 L1921.35 1209.37 L1921.94 1209.37 L1922.53 1209.37 L1923.11 1209.37 L1923.7 1209.37 L1924.29 1209.37 L1924.87 1209.37 L1925.46 1209.37 L1926.04 1209.37 L1926.63 1209.37 L1927.22 1209.37 L1927.8 1209.37 L1928.39 1209.37 L1928.98 1209.37 L1929.56 1209.37 L1930.15 1209.37 L1930.74 1209.37 L1931.32 1209.37 L1931.91 1209.37 L1932.5 1209.37 L1933.08 1209.37 L1933.67 1209.37 L1934.25 1209.37 L1934.84 1209.37 L1935.43 1209.37 L1936.01 1209.37 L1936.6 1209.37 L1937.19 1209.37 L1937.77 1209.37 L1938.36 1209.37 L1938.95 1209.37 L1939.53 1209.37 L1940.12 1209.37 L1940.71 1209.37 L1941.29 1209.37 L1941.88 1209.37 L1942.46 1209.37 L1943.05 1209.37 L1943.64 1209.37 L1944.22 1209.37 L1944.81 1209.37 L1945.4 1209.37 L1945.98 1209.37 L1946.57 1209.37 L1947.16 1209.37 L1947.74 1209.37 L1948.33 1209.37 L1948.91 1209.37 L1949.5 1209.37 L1950.09 1209.37 L1950.67 1209.37 L1951.26 1209.37 L1951.85 1209.37 L1952.43 1209.37 L1953.02 1209.37 L1953.61 1209.37 L1954.19 1209.37 L1954.78 1209.37 L1955.37 1209.37 L1955.95 1209.37 L1956.54 1209.37 L1957.12 1209.37 L1957.71 1209.37 L1958.3 1209.37 L1958.88 1209.37 L1959.47 1209.37 L1960.06 1209.37 L1960.64 1209.37 L1961.23 1209.37 L1961.82 1209.37 L1962.4 1209.37 L1962.99 1209.37 L1963.58 1209.37 L1964.16 1209.37 L1964.75 1209.37 L1965.33 1209.37 L1965.92 1209.37 L1966.51 1209.37 L1967.09 1209.37 L1967.68 1209.37 L1968.27 1209.37 L1968.85 1209.37 L1969.44 1209.37 L1970.03 1209.37 L1970.61 1209.37 L1971.2 1209.37 L1971.78 1209.37 L1972.37 1209.37 L1972.96 1209.37 L1973.54 1209.37 L1974.13 1209.37 L1974.72 1209.37 L1975.3 1209.37 L1975.89 1209.37 L1976.48 1209.37 L1977.06 1209.37 L1977.65 1209.37 L1978.24 1209.37 L1978.82 1209.37 L1979.41 1209.37 L1979.99 1209.37 L1980.58 1209.37 L1981.17 1209.37 L1981.75 1209.37 L1982.34 1209.37 L1982.93 1209.37 L1983.51 1209.37 L1984.1 1209.37 L1984.69 1209.37 L1985.27 1209.37 L1985.86 1209.37 L1986.45 1209.37 L1987.03 1209.37 L1987.62 1209.37 L1988.2 1209.37 L1988.79 1209.37 L1989.38 1209.37 L1989.96 1209.37 L1990.55 1209.37 L1991.14 1209.37 L1991.72 1209.37 L1992.31 1209.37 L1992.9 1209.37 L1993.48 1209.37 L1994.07 1209.37 L1994.65 1209.37 L1995.24 1209.37 L1995.83 1209.37 L1996.41 1209.37 L1997 1209.37 L1997.59 1209.37 L1998.17 1209.37 L1998.76 1209.37 L1999.35 1209.37 L1999.93 1209.37 L2000.52 1209.37 L2001.11 1209.37 L2001.69 1209.37 L2002.28 1209.37 L2002.86 1209.37 L2003.45 1209.37 L2004.04 1209.37 L2004.62 1209.37 L2005.21 1209.37 L2005.8 1209.37 L2006.38 1209.37 L2006.97 1209.37 L2007.56 1209.37 L2008.14 1209.37 L2008.73 1209.37 L2009.32 1209.37 L2009.9 1209.37 L2010.49 1209.37 L2011.07 1209.37 L2011.66 1209.37 L2012.25 1209.37 L2012.83 1209.37 L2013.42 1209.37 L2014.01 1209.37 L2014.59 1209.37 L2015.18 1209.37 L2015.77 1209.37 L2016.35 1209.37 L2016.94 1209.37 L2017.53 1209.37 L2018.11 1209.37 L2018.7 1209.37 L2019.28 1209.37 L2019.87 1209.37 L2020.46 1209.37 L2021.04 1209.37 L2021.63 1209.37 L2022.22 1209.37 L2022.8 1209.37 L2023.39 1209.37 L2023.98 1209.37 L2024.56 1209.37 L2025.15 1209.37 L2025.73 1209.37 L2026.32 1209.37 L2026.91 1209.37 L2027.49 1209.37 L2028.08 1209.37 L2028.67 1209.37 L2029.25 1209.37 L2029.84 1209.37 L2030.43 1209.37 L2031.01 1209.37 L2031.6 1209.37 L2032.19 1209.37 L2032.77 1209.37 L2033.36 1209.37 L2033.94 1209.37 L2034.53 1209.37 L2035.12 1209.37 L2035.7 1209.37 L2036.29 1209.37 L2036.88 1209.37 L2037.46 1209.37 L2038.05 1209.37 L2038.64 1209.37 L2039.22 1209.37 L2039.81 1209.37 L2040.4 1209.37 L2040.98 1209.37 L2041.57 1209.37 L2042.15 1209.37 L2042.74 1209.37 L2043.33 1209.37 L2043.91 1209.37 L2044.5 1209.37 L2045.09 1209.37 L2045.67 1209.37 L2046.26 1209.37 L2046.85 1209.37 L2047.43 1209.37 L2048.02 1209.37 L2048.6 1209.37 L2049.19 1209.37 L2049.78 1209.37 L2050.36 1209.37 L2050.95 1209.37 L2051.54 1209.37 L2052.12 1209.37 L2052.71 1209.37 L2053.3 1209.37 L2053.88 1209.37 L2054.47 1209.37 L2055.06 1209.37 L2055.64 1209.37 L2056.23 1209.37 L2056.81 1209.37 L2057.4 1209.37 L2057.99 1209.37 L2058.57 1209.37 L2059.16 1209.37 L2059.75 1209.37 L2060.33 1209.37 L2060.92 1209.37 L2061.51 1209.37 L2062.09 1209.37 L2062.68 1209.37 L2063.27 1209.37 L2063.85 1209.37 L2064.44 1209.37 L2065.02 1209.37 L2065.61 1209.37 L2066.2 1209.37 L2066.78 1209.37 L2067.37 1209.37 L2067.96 1209.37 L2068.54 1209.37 L2069.13 1209.37 L2069.72 1209.37 L2070.3 1209.37 L2070.89 1209.37 L2071.48 1209.37 L2072.06 1209.37 L2072.65 1209.37 L2073.23 1209.37 L2073.82 1209.37 L2074.41 1209.37 L2074.99 1209.37 L2075.58 1209.37 L2076.17 1209.37 L2076.75 1209.37 L2077.34 1209.37 L2077.93 1209.37 L2078.51 1209.37 L2079.1 1209.37 L2079.68 1209.37 L2080.27 1209.37 L2080.86 1209.37 L2081.44 1209.37 L2082.03 1209.37 L2082.62 1209.37 L2083.2 1209.37 L2083.79 1209.37 L2084.38 1209.37 L2084.96 1209.37 L2085.55 1209.37 L2086.14 1209.37 L2086.72 1209.37 L2087.31 1209.37 L2087.89 1209.37 L2088.48 1209.37 L2089.07 1209.37 L2089.65 1209.37 L2090.24 1209.37 L2090.83 1209.37 L2091.41 1209.37 L2092 1209.37 L2092.59 1209.37 L2093.17 1209.37 L2093.76 1209.37 L2094.35 1209.37 L2094.93 1209.37 L2095.52 1209.37 L2096.1 1209.37 L2096.69 1209.37 L2097.28 1209.37 L2097.86 1209.37 L2098.45 1209.37 L2099.04 1209.37 L2099.62 1209.37 L2100.21 1209.37 L2100.8 1209.37 L2101.38 1209.37 L2101.97 1209.37 L2102.55 1209.37 L2103.14 1209.37 L2103.73 1209.37 L2104.31 1209.37 L2104.9 1209.37 L2105.49 1209.37 L2106.07 1209.37 L2106.66 1209.37 L2107.25 1209.37 L2107.83 1209.37 L2108.42 1209.37 L2109.01 1209.37 L2109.59 1209.37 L2110.18 1209.37 L2110.76 1209.37 L2111.35 1209.37 L2111.94 1209.37 L2112.52 1209.37 L2113.11 1209.37 L2113.7 1209.37 L2114.28 1209.37 L2114.87 1209.37 L2115.46 1209.37 L2116.04 1209.37 L2116.63 1209.37 L2117.22 1209.37 L2117.8 1209.37 L2118.39 1209.37 L2118.97 1209.37 L2119.56 1209.37 L2120.15 1209.37 L2120.73 1209.37 L2121.32 1209.37 L2121.91 1209.37 L2122.49 1209.37 L2123.08 1209.37 L2123.67 1209.37 L2124.25 1209.37 L2124.84 1209.37 L2125.42 1209.37 L2126.01 1209.37 L2126.6 1209.37 L2127.18 1209.37 L2127.77 1209.37 L2128.36 1209.37 L2128.94 1209.37 L2129.53 1209.37 L2130.12 1209.37 L2130.7 1209.37 L2131.29 1209.37 L2131.88 1209.37 L2132.46 1209.37 L2133.05 1209.37 L2133.63 1209.37 L2134.22 1209.37 L2134.81 1209.37 L2135.39 1209.37 L2135.98 1209.37 L2136.57 1209.37 L2137.15 1209.37 L2137.74 1209.37 L2138.33 1209.37 L2138.91 1209.37 L2139.5 1209.37 L2140.09 1209.37 L2140.67 1209.37 L2141.26 1209.37 L2141.84 1209.37 L2142.43 1209.37 L2143.02 1209.37 L2143.6 1209.37 L2144.19 1209.37 L2144.78 1209.37 L2145.36 1209.37 L2145.95 1209.37 L2146.54 1209.37 L2147.12 1209.37 L2147.71 1209.37 L2148.3 1209.37 L2148.88 1209.37 L2149.47 1209.37 L2150.05 1209.37 L2150.64 1209.37 L2151.23 1209.37 L2151.81 1209.37 L2152.4 1209.37 L2152.99 1209.37 L2153.57 1209.37 L2154.16 1209.37 L2154.75 1209.37 L2155.33 1209.37 L2155.92 1209.37 L2156.5 1209.37 L2157.09 1209.37 L2157.68 1209.37 L2158.26 1209.37 L2158.26 1209.12 L2157.68 1209.12 L2157.09 1209.12 L2156.5 1209.12 L2155.92 1209.12 L2155.33 1209.12 L2154.75 1209.12 L2154.16 1209.12 L2153.57 1209.12 L2152.99 1209.12 L2152.4 1209.12 L2151.81 1209.12 L2151.23 1209.12 L2150.64 1209.12 L2150.05 1209.12 L2149.47 1209.12 L2148.88 1209.12 L2148.3 1209.12 L2147.71 1209.12 L2147.12 1209.12 L2146.54 1209.12 L2145.95 1209.12 L2145.36 1209.12 L2144.78 1209.12 L2144.19 1209.12 L2143.6 1209.12 L2143.02 1209.12 L2142.43 1209.12 L2141.84 1209.12 L2141.26 1209.12 L2140.67 1209.12 L2140.09 1209.12 L2139.5 1209.12 L2138.91 1209.12 L2138.33 1209.12 L2137.74 1209.12 L2137.15 1209.12 L2136.57 1209.12 L2135.98 1209.12 L2135.39 1209.12 L2134.81 1209.12 L2134.22 1209.12 L2133.63 1209.12 L2133.05 1209.12 L2132.46 1209.12 L2131.88 1209.12 L2131.29 1209.12 L2130.7 1209.12 L2130.12 1209.12 L2129.53 1209.12 L2128.94 1209.12 L2128.36 1209.12 L2127.77 1209.12 L2127.18 1209.12 L2126.6 1209.12 L2126.01 1209.12 L2125.42 1209.12 L2124.84 1209.12 L2124.25 1209.12 L2123.67 1209.12 L2123.08 1209.12 L2122.49 1209.12 L2121.91 1209.12 L2121.32 1209.12 L2120.73 1209.12 L2120.15 1209.12 L2119.56 1209.12 L2118.97 1209.12 L2118.39 1209.12 L2117.8 1209.12 L2117.22 1209.12 L2116.63 1209.12 L2116.04 1209.12 L2115.46 1209.12 L2114.87 1209.12 L2114.28 1209.12 L2113.7 1209.12 L2113.11 1209.12 L2112.52 1209.12 L2111.94 1209.12 L2111.35 1209.12 L2110.76 1209.12 L2110.18 1209.12 L2109.59 1209.12 L2109.01 1209.12 L2108.42 1209.12 L2107.83 1209.12 L2107.25 1209.12 L2106.66 1209.12 L2106.07 1209.12 L2105.49 1209.12 L2104.9 1209.12 L2104.31 1209.12 L2103.73 1209.12 L2103.14 1209.12 L2102.55 1209.12 L2101.97 1209.12 L2101.38 1209.12 L2100.8 1209.12 L2100.21 1209.12 L2099.62 1209.12 L2099.04 1209.12 L2098.45 1209.12 L2097.86 1209.12 L2097.28 1209.12 L2096.69 1209.12 L2096.1 1209.12 L2095.52 1209.12 L2094.93 1209.12 L2094.35 1209.12 L2093.76 1209.12 L2093.17 1209.12 L2092.59 1209.12 L2092 1209.12 L2091.41 1209.12 L2090.83 1209.12 L2090.24 1209.12 L2089.65 1209.12 L2089.07 1209.12 L2088.48 1209.12 L2087.89 1209.12 L2087.31 1209.12 L2086.72 1209.12 L2086.14 1209.12 L2085.55 1209.12 L2084.96 1209.12 L2084.38 1209.12 L2083.79 1209.12 L2083.2 1209.12 L2082.62 1209.12 L2082.03 1209.12 L2081.44 1209.12 L2080.86 1209.12 L2080.27 1209.12 L2079.68 1209.12 L2079.1 1209.12 L2078.51 1209.12 L2077.93 1209.12 L2077.34 1209.12 L2076.75 1209.12 L2076.17 1209.12 L2075.58 1209.12 L2074.99 1209.12 L2074.41 1209.12 L2073.82 1209.12 L2073.23 1209.12 L2072.65 1209.12 L2072.06 1209.12 L2071.48 1209.12 L2070.89 1209.12 L2070.3 1209.12 L2069.72 1209.12 L2069.13 1209.12 L2068.54 1209.12 L2067.96 1209.12 L2067.37 1209.12 L2066.78 1209.12 L2066.2 1209.12 L2065.61 1209.12 L2065.02 1209.12 L2064.44 1209.12 L2063.85 1209.12 L2063.27 1209.12 L2062.68 1209.12 L2062.09 1209.12 L2061.51 1209.12 L2060.92 1209.12 L2060.33 1209.12 L2059.75 1209.12 L2059.16 1209.12 L2058.57 1209.12 L2057.99 1209.12 L2057.4 1209.12 L2056.81 1209.12 L2056.23 1209.12 L2055.64 1209.12 L2055.06 1209.12 L2054.47 1209.12 L2053.88 1209.12 L2053.3 1209.12 L2052.71 1209.12 L2052.12 1209.12 L2051.54 1209.12 L2050.95 1209.12 L2050.36 1209.12 L2049.78 1209.12 L2049.19 1209.12 L2048.6 1209.12 L2048.02 1209.12 L2047.43 1209.12 L2046.85 1209.12 L2046.26 1209.12 L2045.67 1209.12 L2045.09 1209.12 L2044.5 1209.12 L2043.91 1209.12 L2043.33 1209.12 L2042.74 1209.12 L2042.15 1209.12 L2041.57 1209.12 L2040.98 1209.12 L2040.4 1209.12 L2039.81 1209.12 L2039.22 1209.12 L2038.64 1209.12 L2038.05 1209.12 L2037.46 1209.12 L2036.88 1209.12 L2036.29 1209.12 L2035.7 1209.12 L2035.12 1209.12 L2034.53 1209.12 L2033.94 1209.12 L2033.36 1209.12 L2032.77 1209.12 L2032.19 1209.12 L2031.6 1209.12 L2031.01 1209.12 L2030.43 1209.12 L2029.84 1209.12 L2029.25 1209.12 L2028.67 1209.12 L2028.08 1209.12 L2027.49 1209.12 L2026.91 1209.12 L2026.32 1209.12 L2025.73 1209.12 L2025.15 1209.12 L2024.56 1209.12 L2023.98 1209.12 L2023.39 1209.12 L2022.8 1209.12 L2022.22 1209.12 L2021.63 1209.12 L2021.04 1209.12 L2020.46 1209.12 L2019.87 1209.12 L2019.28 1209.12 L2018.7 1209.12 L2018.11 1209.12 L2017.53 1209.12 L2016.94 1209.12 L2016.35 1209.12 L2015.77 1209.12 L2015.18 1209.12 L2014.59 1209.12 L2014.01 1209.12 L2013.42 1209.12 L2012.83 1209.12 L2012.25 1209.12 L2011.66 1209.12 L2011.07 1209.12 L2010.49 1209.12 L2009.9 1209.12 L2009.32 1209.12 L2008.73 1209.12 L2008.14 1209.12 L2007.56 1209.12 L2006.97 1209.12 L2006.38 1209.12 L2005.8 1209.12 L2005.21 1209.12 L2004.62 1209.12 L2004.04 1209.12 L2003.45 1209.12 L2002.86 1209.12 L2002.28 1209.12 L2001.69 1209.12 L2001.11 1209.12 L2000.52 1209.12 L1999.93 1209.12 L1999.35 1209.12 L1998.76 1209.12 L1998.17 1209.12 L1997.59 1209.12 L1997 1209.12 L1996.41 1209.12 L1995.83 1209.12 L1995.24 1209.12 L1994.65 1209.12 L1994.07 1209.12 L1993.48 1209.12 L1992.9 1209.12 L1992.31 1209.12 L1991.72 1209.12 L1991.14 1209.12 L1990.55 1209.12 L1989.96 1209.12 L1989.38 1209.12 L1988.79 1209.12 L1988.2 1209.12 L1987.62 1209.12 L1987.03 1209.12 L1986.45 1209.12 L1985.86 1209.12 L1985.27 1209.12 L1984.69 1209.12 L1984.1 1209.12 L1983.51 1209.12 L1982.93 1209.12 L1982.34 1209.12 L1981.75 1209.12 L1981.17 1209.12 L1980.58 1209.12 L1979.99 1209.12 L1979.41 1209.12 L1978.82 1209.12 L1978.24 1209.12 L1977.65 1209.12 L1977.06 1209.12 L1976.48 1209.12 L1975.89 1209.12 L1975.3 1209.12 L1974.72 1209.12 L1974.13 1209.12 L1973.54 1209.12 L1972.96 1209.12 L1972.37 1209.12 L1971.78 1209.12 L1971.2 1209.12 L1970.61 1209.12 L1970.03 1209.12 L1969.44 1209.12 L1968.85 1209.12 L1968.27 1209.12 L1967.68 1209.12 L1967.09 1209.12 L1966.51 1209.12 L1965.92 1209.12 L1965.33 1209.12 L1964.75 1209.12 L1964.16 1209.12 L1963.58 1209.12 L1962.99 1209.12 L1962.4 1209.12 L1961.82 1209.12 L1961.23 1209.12 L1960.64 1209.12 L1960.06 1209.12 L1959.47 1209.12 L1958.88 1209.12 L1958.3 1209.12 L1957.71 1209.12 L1957.12 1209.12 L1956.54 1209.12 L1955.95 1209.12 L1955.37 1209.12 L1954.78 1209.12 L1954.19 1209.12 L1953.61 1209.12 L1953.02 1209.12 L1952.43 1209.12 L1951.85 1209.12 L1951.26 1209.12 L1950.67 1209.12 L1950.09 1209.12 L1949.5 1209.12 L1948.91 1209.12 L1948.33 1209.12 L1947.74 1209.12 L1947.16 1209.12 L1946.57 1209.12 L1945.98 1209.12 L1945.4 1209.12 L1944.81 1209.12 L1944.22 1209.12 L1943.64 1209.12 L1943.05 1209.12 L1942.46 1209.12 L1941.88 1209.12 L1941.29 1209.12 L1940.71 1209.12 L1940.12 1209.12 L1939.53 1209.12 L1938.95 1209.12 L1938.36 1209.12 L1937.77 1209.12 L1937.19 1209.12 L1936.6 1209.12 L1936.01 1209.12 L1935.43 1209.12 L1934.84 1209.12 L1934.25 1209.12 L1933.67 1209.12 L1933.08 1209.12 L1932.5 1209.12 L1931.91 1209.12 L1931.32 1209.12 L1930.74 1209.12 L1930.15 1209.12 L1929.56 1209.12 L1928.98 1209.12 L1928.39 1209.12 L1927.8 1209.12 L1927.22 1209.12 L1926.63 1209.12 L1926.04 1209.12 L1925.46 1209.12 L1924.87 1209.12 L1924.29 1209.12 L1923.7 1209.12 L1923.11 1209.12 L1922.53 1209.12 L1921.94 1209.12 L1921.35 1209.12 L1920.77 1209.12 L1920.18 1209.12 L1919.59 1209.12 L1919.01 1209.12 L1918.42 1209.12 L1917.83 1209.12 L1917.25 1209.12 L1916.66 1209.12 L1916.08 1209.12 L1915.49 1209.12 L1914.9 1209.12 L1914.32 1209.12 L1913.73 1209.12 L1913.14 1209.12 L1912.56 1209.12 L1911.97 1209.12 L1911.38 1209.12 L1910.8 1209.12 L1910.21 1209.12 L1909.63 1209.12 L1909.04 1209.12 L1908.45 1209.12 L1907.87 1209.12 L1907.28 1209.12 L1906.69 1209.12 L1906.11 1209.12 L1905.52 1209.12 L1904.93 1209.12 L1904.35 1209.12 L1903.76 1209.12 L1903.17 1209.12 L1902.59 1209.12 L1902 1209.12 L1901.42 1209.12 L1900.83 1209.12 L1900.24 1209.12 L1899.66 1209.12 L1899.07 1209.12 L1898.48 1209.12 L1897.9 1209.12 L1897.31 1209.12 L1896.72 1209.12 L1896.14 1209.12 L1895.55 1209.12 L1894.96 1209.12 L1894.38 1209.12 L1893.79 1209.12 L1893.21 1209.12 L1892.62 1209.12 L1892.03 1209.12 L1891.45 1209.12 L1890.86 1209.12 L1890.27 1209.12 L1889.69 1209.12 L1889.1 1209.12 L1888.51 1209.12 L1887.93 1209.12 L1887.34 1209.12 L1886.76 1209.12 L1886.17 1209.12 L1885.58 1209.12 L1885 1209.12 L1884.41 1209.12 L1883.82 1209.12 L1883.24 1209.12 L1882.65 1209.12 L1882.06 1209.12 L1881.48 1209.12 L1880.89 1209.12 L1880.3 1209.12 L1879.72 1209.12 L1879.13 1209.12 L1878.55 1209.12 L1877.96 1209.12 L1877.37 1209.12 L1876.79 1209.12 L1876.2 1209.12 L1875.61 1209.12 L1875.03 1209.12 L1874.44 1209.12 L1873.85 1209.12 L1873.27 1209.12 L1872.68 1209.12 L1872.09 1209.12 L1871.51 1209.12 L1870.92 1209.12 L1870.34 1209.12 L1869.75 1209.12 L1869.16 1209.12 L1868.58 1209.12 L1867.99 1209.12 L1867.4 1209.12 L1866.82 1209.12 L1866.23 1209.12 L1865.64 1209.12 L1865.06 1209.12 L1864.47 1209.12 L1863.88 1209.12 L1863.3 1209.12 L1862.71 1209.12 L1862.13 1209.12 L1861.54 1209.12 L1860.95 1209.12 L1860.37 1209.12 L1859.78 1209.12 L1859.19 1209.12 L1858.61 1209.12 L1858.02 1209.12 L1857.43 1209.12 L1856.85 1209.12 L1856.26 1209.12 L1855.68 1209.12 L1855.09 1209.12 L1854.5 1209.12 L1853.92 1209.12 L1853.33 1209.12 L1852.74 1209.12 L1852.16 1209.12 L1851.57 1209.12 L1850.98 1209.12 L1850.4 1209.12 L1849.81 1209.12 L1849.22 1209.12 L1848.64 1209.12 L1848.05 1209.12 L1847.47 1209.12 L1846.88 1209.12 L1846.29 1209.12 L1845.71 1209.12 L1845.12 1209.12 L1844.53 1209.12 L1843.95 1209.12 L1843.36 1209.12 L1842.77 1209.12 L1842.19 1209.12 L1841.6 1209.12 L1841.01 1209.12 L1840.43 1209.12 L1839.84 1209.12 L1839.26 1209.12 L1838.67 1209.12 L1838.08 1209.12 L1837.5 1209.12 L1836.91 1209.12 L1836.32 1209.12 L1835.74 1209.12 L1835.15 1209.12 L1834.56 1209.12 L1833.98 1209.12 L1833.39 1209.12 L1832.81 1209.12 L1832.22 1209.12 L1831.63 1209.12 L1831.05 1209.12 L1830.46 1209.12 L1829.87 1209.12 L1829.29 1209.12 L1828.7 1209.12 L1828.11 1209.12 L1827.53 1209.12 L1826.94 1209.12 L1826.35 1209.12 L1825.77 1209.12 L1825.18 1209.12 L1824.6 1209.12 L1824.01 1209.12 L1823.42 1209.12 L1822.84 1209.12 L1822.25 1209.12 L1821.66 1209.12 L1821.08 1209.12 L1820.49 1209.12 L1819.9 1209.12 L1819.32 1209.12 L1818.73 1209.12 L1818.14 1209.12 L1817.56 1209.12 L1816.97 1209.12 L1816.39 1209.12 L1815.8 1209.12 L1815.21 1209.12 L1814.63 1209.12 L1814.04 1209.12 L1813.45 1209.12 L1812.87 1209.12 L1812.28 1209.12 L1811.69 1209.12 L1811.11 1209.12 L1810.52 1209.12 L1809.94 1209.12 L1809.35 1209.12 L1808.76 1209.12 L1808.18 1209.12 L1807.59 1209.12 L1807 1209.12 L1806.42 1209.12 L1805.83 1209.12 L1805.24 1209.12 L1804.66 1209.12 L1804.07 1209.12 L1803.48 1209.12 L1802.9 1209.12 L1802.31 1209.12 L1801.73 1209.12 L1801.14 1209.12 L1800.55 1209.12 L1799.97 1209.12 L1799.38 1209.12 L1798.79 1209.12 L1798.21 1209.12 L1797.62 1209.12 L1797.03 1209.12 L1796.45 1209.12 L1795.86 1209.12 L1795.27 1209.12 L1794.69 1209.12 L1794.1 1209.12 L1793.52 1209.12 L1792.93 1209.12 L1792.34 1209.12 L1791.76 1209.12 L1791.17 1209.12 L1790.58 1209.12 L1790 1209.12 L1789.41 1209.12 L1788.82 1209.12 L1788.24 1209.12 L1787.65 1209.12 L1787.06 1209.12 L1786.48 1209.12 L1785.89 1209.12 L1785.31 1209.12 L1784.72 1209.12 L1784.13 1209.12 L1783.55 1209.12 L1782.96 1209.12 L1782.37 1209.12 L1781.79 1209.12 L1781.2 1209.12 L1780.61 1209.12 L1780.03 1209.12 L1779.44 1209.12 L1778.86 1209.12 L1778.27 1209.12 L1777.68 1209.12 L1777.1 1209.12 L1776.51 1209.12 L1775.92 1209.12 L1775.34 1209.12 L1774.75 1209.12 L1774.16 1209.12 L1773.58 1209.12 L1772.99 1209.12 L1772.4 1209.12 L1771.82 1209.12 L1771.23 1209.12 L1770.65 1209.12 L1770.06 1209.12 L1769.47 1209.12 L1768.89 1209.12 L1768.3 1209.12 L1767.71 1209.12 L1767.13 1209.12 L1766.54 1209.12 L1765.95 1209.12 L1765.37 1209.12 L1764.78 1209.12 L1764.19 1209.12 L1763.61 1209.12 L1763.02 1209.12 L1762.44 1209.12 L1761.85 1209.12 L1761.26 1209.12 L1760.68 1209.12 L1760.09 1209.12 L1759.5 1209.12 L1758.92 1209.12 L1758.33 1209.12 L1757.74 1209.12 L1757.16 1209.12 L1756.57 1209.12 L1755.99 1209.12 L1755.4 1209.12 L1754.81 1209.12 L1754.23 1209.12 L1753.64 1209.12 L1753.05 1209.12 L1752.47 1209.12 L1751.88 1209.12 L1751.29 1209.12 L1750.71 1209.12 L1750.12 1209.12 L1749.53 1209.12 L1748.95 1209.12 L1748.36 1209.12 L1747.78 1209.12 L1747.19 1209.12 L1746.6 1209.12 L1746.02 1209.12 L1745.43 1209.12 L1744.84 1209.12 L1744.26 1209.12 L1743.67 1209.12 L1743.08 1209.12 L1742.5 1209.12 L1741.91 1209.12 L1741.32 1209.12 L1740.74 1209.12 L1740.15 1209.12 L1739.57 1209.12 L1738.98 1209.12 L1738.39 1209.12 L1737.81 1209.12 L1737.22 1209.12 L1736.63 1209.12 L1736.05 1209.12 L1735.46 1209.12 L1734.87 1209.12 L1734.29 1209.12 L1733.7 1209.12 L1733.11 1209.12 L1732.53 1209.12 L1731.94 1209.12 L1731.36 1209.12 L1730.77 1209.12 L1730.18 1209.12 L1729.6 1209.12 L1729.01 1209.12 L1728.42 1209.12 L1727.84 1209.12 L1727.25 1209.12 L1726.66 1209.12 L1726.08 1209.12 L1725.49 1209.12 L1724.91 1209.12 L1724.32 1209.12 L1723.73 1209.12 L1723.15 1209.12 L1722.56 1209.12 L1721.97 1209.12 L1721.39 1209.12 L1720.8 1209.12 L1720.21 1209.12 L1719.63 1209.12 L1719.04 1209.12 L1718.45 1209.12 L1717.87 1209.12 L1717.28 1209.12 L1716.7 1209.12 L1716.11 1209.12 L1715.52 1209.12 L1714.94 1209.12 L1714.35 1209.12 L1713.76 1209.12 L1713.18 1209.12 L1712.59 1209.12 L1712 1209.12 L1711.42 1209.12 L1710.83 1209.12 L1710.24 1209.12 L1709.66 1209.12 L1709.07 1209.12 L1708.49 1209.12 L1707.9 1209.12 L1707.31 1209.12 L1706.73 1209.12 L1706.14 1209.12 L1705.55 1209.12 L1704.97 1209.12 L1704.38 1209.12 L1703.79 1209.12 L1703.21 1209.12 L1702.62 1209.12 L1702.04 1209.12 L1701.45 1209.12 L1700.86 1209.12 L1700.28 1209.12 L1699.69 1209.12 L1699.1 1209.12 L1698.52 1209.12 L1697.93 1209.12 L1697.34 1209.12 L1696.76 1209.12 L1696.17 1209.12 L1695.58 1209.12 L1695 1209.12 L1694.41 1209.12 L1693.83 1209.12 L1693.24 1209.12 L1692.65 1209.12 L1692.07 1209.12 L1691.48 1209.12 L1690.89 1209.12 L1690.31 1209.12 L1689.72 1209.12 L1689.13 1209.12 L1688.55 1209.12 L1687.96 1209.12 L1687.37 1209.12 L1686.79 1209.12 L1686.2 1209.12 L1685.62 1209.12 L1685.03 1209.12 L1684.44 1209.12 L1683.86 1209.12 L1683.27 1209.12 L1682.68 1209.12 L1682.1 1209.12 L1681.51 1209.12 L1680.92 1209.12 L1680.34 1209.12 L1679.75 1209.12 L1679.17 1209.12 L1678.58 1209.12 L1677.99 1209.12 L1677.41 1209.12 L1676.82 1209.12 L1676.23 1209.12 L1675.65 1209.12 L1675.06 1209.12 L1674.47 1209.12 L1673.89 1209.12 L1673.3 1209.12 L1672.71 1209.12 L1672.13 1209.12 L1671.54 1209.12 L1670.96 1209.12 L1670.37 1209.12 L1669.78 1209.12 L1669.2 1209.12 L1668.61 1209.12 L1668.02 1209.12 L1667.44 1209.12 L1666.85 1209.12 L1666.26 1209.12 L1665.68 1209.12 L1665.09 1209.12 L1664.5 1209.12 L1663.92 1209.12 L1663.33 1209.12 L1662.75 1209.12 L1662.16 1209.12 L1661.57 1209.12 L1660.99 1209.12 L1660.4 1209.12 L1659.81 1209.12 L1659.23 1209.12 L1658.64 1209.12 L1658.05 1209.12 L1657.47 1209.12 L1656.88 1209.12 L1656.29 1209.12 L1655.71 1209.12 L1655.12 1209.12 L1654.54 1209.12 L1653.95 1209.12 L1653.36 1209.12 L1652.78 1209.12 L1652.19 1209.12 L1651.6 1209.12 L1651.02 1209.12 L1650.43 1209.12 L1649.84 1209.12 L1649.26 1209.12 L1648.67 1209.12 L1648.09 1209.12 L1647.5 1209.12 L1646.91 1209.12 L1646.33 1209.12 L1645.74 1209.12 L1645.15 1209.12 L1644.57 1209.12 L1643.98 1209.12 L1643.39 1209.12 L1642.81 1209.12 L1642.22 1209.12 L1641.63 1209.12 L1641.05 1209.12 L1640.46 1209.12 L1639.88 1209.12 L1639.29 1209.12 L1638.7 1209.12 L1638.12 1209.12 L1637.53 1209.12 L1636.94 1209.12 L1636.36 1209.12 L1635.77 1209.12 L1635.18 1209.12 L1634.6 1209.12 L1634.01 1209.12 L1633.42 1209.12 L1632.84 1209.12 L1632.25 1209.12 L1631.67 1209.12 L1631.08 1209.12 L1630.49 1209.12 L1629.91 1209.12 L1629.32 1209.12 L1628.73 1209.12 L1628.15 1209.12 L1627.56 1209.12 L1626.97 1209.12 L1626.39 1209.12 L1625.8 1209.12 L1625.22 1209.12 L1624.63 1209.12 L1624.04 1209.12 L1623.46 1209.12 L1622.87 1209.12 L1622.28 1209.12 L1621.7 1209.12 L1621.11 1209.12 L1620.52 1209.12 L1619.94 1209.12 L1619.35 1209.12 L1618.76 1209.12 L1618.18 1209.12 L1617.59 1209.12 L1617.01 1209.12 L1616.42 1209.12 L1615.83 1209.12 L1615.25 1209.12 L1614.66 1209.12 L1614.07 1209.12 L1613.49 1209.12 L1612.9 1209.12 L1612.31 1209.12 L1611.73 1209.12 L1611.14 1209.12 L1610.55 1209.12 L1609.97 1209.12 L1609.38 1209.12 L1608.8 1209.12 L1608.21 1209.12 L1607.62 1209.12 L1607.04 1209.12 L1606.45 1209.12 L1605.86 1209.12 L1605.28 1209.12 L1604.69 1209.12 L1604.1 1209.12 L1603.52 1209.12 L1602.93 1209.12 L1602.34 1209.12 L1601.76 1209.12 L1601.17 1209.12 L1600.59 1209.12 L1600 1209.12 L1599.41 1209.12 L1598.83 1209.12 L1598.24 1209.12 L1597.65 1209.12 L1597.07 1209.12 L1596.48 1209.12 L1595.89 1209.12 L1595.31 1209.12 L1594.72 1209.12 L1594.14 1209.12 L1593.55 1209.12 L1592.96 1209.12 L1592.38 1209.12 L1591.79 1209.12 L1591.2 1209.12 L1590.62 1209.12 L1590.03 1209.12 L1589.44 1209.12 L1588.86 1209.12 L1588.27 1209.12 L1587.68 1209.12 L1587.1 1209.12 L1586.51 1209.12 L1585.93 1209.12 L1585.34 1209.12 L1584.75 1209.12 L1584.17 1209.12 L1583.58 1209.12 L1582.99 1209.12 L1582.41 1209.12 L1581.82 1209.12 L1581.23 1209.12 L1580.65 1209.12 L1580.06 1209.12 L1579.47 1209.12 L1578.89 1209.12 L1578.3 1209.12 L1577.72 1209.12 L1577.13 1209.12 L1576.54 1209.12 L1575.96 1209.12 L1575.37 1209.12 L1574.78 1209.12 L1574.2 1209.12 L1573.61 1209.12 L1573.02 1209.12 L1572.44 1209.12 L1571.85 1209.12 L1571.27 1209.12 L1570.68 1209.12 L1570.09 1209.12 L1569.51 1209.12 L1568.92 1209.12 L1568.33 1209.12 L1567.75 1209.12 L1567.16 1209.12 L1566.57 1209.12 L1565.99 1209.12 L1565.4 1209.12 L1564.81 1209.12 L1564.23 1209.12 L1563.64 1209.12 L1563.06 1209.12 L1562.47 1209.12 L1561.88 1209.12 L1561.3 1209.12 L1560.71 1209.12 L1560.12 1209.12 L1559.54 1209.12 L1558.95 1209.12 L1558.36 1209.12 L1557.78 1209.12 L1557.19 1209.12 L1556.6 1209.12 L1556.02 1209.12 L1555.43 1209.12 L1554.85 1209.12 L1554.26 1209.12 L1553.67 1209.12 L1553.09 1209.12 L1552.5 1209.12 L1551.91 1209.12 L1551.33 1209.12 L1550.74 1209.12 L1550.15 1209.12 L1549.57 1209.12 L1548.98 1209.12 L1548.4 1209.12 L1547.81 1209.12 L1547.22 1209.12 L1546.64 1209.12 L1546.05 1209.12 L1545.46 1209.12 L1544.88 1209.12 L1544.29 1209.12 L1543.7 1209.12 L1543.12 1209.12 L1542.53 1209.12 L1541.94 1209.12 L1541.36 1209.12 L1540.77 1209.12 L1540.19 1209.12 L1539.6 1209.12 L1539.01 1209.12 L1538.43 1209.12 L1537.84 1209.12 L1537.25 1209.12 L1536.67 1209.12 L1536.08 1209.12 L1535.49 1209.12 L1534.91 1209.12 L1534.32 1209.12 L1533.73 1209.12 L1533.15 1209.12 L1532.56 1209.12 L1531.98 1209.12 L1531.39 1209.12 L1530.8 1209.12 L1530.22 1209.12 L1529.63 1209.12 L1529.04 1209.12 L1528.46 1209.12 L1527.87 1209.12 L1527.28 1209.12 L1526.7 1209.12 L1526.11 1209.12 L1525.52 1209.12 L1524.94 1209.12 L1524.35 1209.12 L1523.77 1209.12 L1523.18 1209.12 L1522.59 1209.12 L1522.01 1209.12 L1521.42 1209.12 L1520.83 1209.12 L1520.25 1209.12 L1519.66 1209.12 L1519.07 1209.12 L1518.49 1209.12 L1517.9 1209.12 L1517.32 1209.12 L1516.73 1209.12 L1516.14 1209.12 L1515.56 1209.12 L1514.97 1209.12 L1514.38 1209.12 L1513.8 1209.12 L1513.21 1209.12 L1512.62 1209.12 L1512.04 1209.12 L1511.45 1209.12 L1510.86 1209.12 L1510.28 1209.12 L1509.69 1209.12 L1509.11 1209.12 L1508.52 1209.12 L1507.93 1209.12 L1507.35 1209.12 L1506.76 1209.12 L1506.17 1209.12 L1505.59 1209.12 L1505 1209.12 L1504.41 1209.12 L1503.83 1209.12 L1503.24 1209.12 L1502.65 1209.12 L1502.07 1209.12 L1501.48 1209.12 L1500.9 1209.12 L1500.31 1209.12 L1499.72 1209.12 L1499.14 1209.12 L1498.55 1209.12 L1497.96 1209.12 L1497.38 1209.12 L1496.79 1209.12 L1496.2 1209.12 L1495.62 1209.12 L1495.03 1209.12 L1494.45 1209.12 L1493.86 1209.12 L1493.27 1209.12 L1492.69 1209.12 L1492.1 1209.12 L1491.51 1209.12 L1490.93 1209.12 L1490.34 1209.12 L1489.75 1209.12 L1489.17 1209.12 L1488.58 1209.12 L1487.99 1209.12 L1487.41 1209.12 L1486.82 1209.12 L1486.24 1209.12 L1485.65 1209.12 L1485.06 1209.12 L1484.48 1209.12 L1483.89 1209.12 L1483.3 1209.12 L1482.72 1209.12 L1482.13 1209.12 L1481.54 1209.12 L1480.96 1209.12 L1480.37 1209.12 L1479.78 1209.12 L1479.2 1209.12 L1478.61 1209.12 L1478.03 1209.12 L1477.44 1209.12 L1476.85 1209.12 L1476.27 1209.12 L1475.68 1209.12 L1475.09 1209.12 L1474.51 1209.12 L1473.92 1209.12 L1473.33 1209.12 L1472.75 1209.12 L1472.16 1209.12 L1471.57 1209.12 L1470.99 1209.12 L1470.4 1209.12 L1469.82 1209.12 L1469.23 1209.12 L1468.64 1209.12 L1468.06 1209.12 L1467.47 1209.12 L1466.88 1209.12 L1466.3 1209.12 L1465.71 1209.12 L1465.12 1209.12 L1464.54 1209.12 L1463.95 1209.12 L1463.37 1209.12 L1462.78 1209.12 L1462.19 1209.12 L1461.61 1209.12 L1461.02 1209.12 L1460.43 1209.12 L1459.85 1209.12 L1459.26 1209.12 L1458.67 1209.12 L1458.09 1209.12 L1457.5 1209.12 L1456.91 1209.12 L1456.33 1209.12 L1455.74 1209.12 L1455.16 1209.12 L1454.57 1209.12 L1453.98 1209.12 L1453.4 1209.12 L1452.81 1209.12 L1452.22 1209.12 L1451.64 1209.12 L1451.05 1209.12 L1450.46 1209.12 L1449.88 1209.12 L1449.29 1209.12 L1448.7 1209.12 L1448.12 1209.12 L1447.53 1209.12 L1446.95 1209.12 L1446.36 1209.12 L1445.77 1209.12 L1445.19 1209.12 L1444.6 1209.12 L1444.01 1209.12 L1443.43 1209.12 L1442.84 1209.12 L1442.25 1209.12 L1441.67 1209.12 L1441.08 1209.12 L1440.5 1209.12 L1439.91 1209.12 L1439.32 1209.12 L1438.74 1209.12 L1438.15 1209.12 L1437.56 1209.12 L1436.98 1209.12 L1436.39 1209.12 L1435.8 1209.12 L1435.22 1209.12 L1434.63 1209.12 L1434.04 1209.12 L1433.46 1209.12 L1432.87 1209.12 L1432.29 1209.12 L1431.7 1209.12 L1431.11 1209.12 L1430.53 1209.12 L1429.94 1209.12 L1429.35 1209.12 L1428.77 1209.12 L1428.18 1209.12 L1427.59 1209.12 L1427.01 1209.12 L1426.42 1209.12 L1425.83 1209.12 L1425.25 1209.12 L1424.66 1209.12 L1424.08 1209.12 L1423.49 1209.12 L1422.9 1209.12 L1422.32 1209.12 L1421.73 1209.12 L1421.14 1209.12 L1420.56 1209.12 L1419.97 1209.12 L1419.38 1209.12 L1418.8 1209.12 L1418.21 1209.12 L1417.63 1209.12 L1417.04 1209.12 L1416.45 1209.12 L1415.87 1209.12 L1415.28 1209.12 L1414.69 1209.12 L1414.11 1209.12 L1413.52 1209.12 L1412.93 1209.12 L1412.35 1209.12 L1411.76 1209.12 L1411.17 1209.12 L1410.59 1209.12 L1410 1209.12 L1409.42 1209.12 L1408.83 1209.12 L1408.24 1209.12 L1407.66 1209.12 L1407.07 1209.12 L1406.48 1209.12 L1405.9 1209.12 L1405.31 1209.12 L1404.72 1209.12 L1404.14 1209.12 L1403.55 1209.12 L1402.96 1209.12 L1402.38 1209.12 L1401.79 1209.12 L1401.21 1209.12 L1400.62 1209.12 L1400.03 1209.12 L1399.45 1209.12 L1398.86 1209.12 L1398.27 1209.12 L1397.69 1209.12 L1397.1 1209.12 L1396.51 1209.12 L1395.93 1209.12 L1395.34 1209.12 L1394.75 1209.12 L1394.17 1209.12 L1393.58 1209.12 L1393 1209.12 L1392.41 1209.12 L1391.82 1209.12 L1391.24 1209.12 L1390.65 1209.12 L1390.06 1209.12 L1389.48 1209.12 L1388.89 1209.12 L1388.3 1209.12 L1387.72 1209.12 L1387.13 1209.12 L1386.55 1209.12 L1385.96 1209.12 L1385.37 1209.12 L1384.79 1209.12 L1384.2 1209.12 L1383.61 1209.12 L1383.03 1209.12 L1382.44 1209.12 L1381.85 1209.12 L1381.27 1209.12 L1380.68 1209.12 L1380.09 1209.12 L1379.51 1209.12 L1378.92 1209.12 L1378.34 1209.12 L1377.75 1209.12 L1377.16 1209.12 L1376.58 1209.12 L1375.99 1209.12 L1375.4 1209.12 L1374.82 1209.12 L1374.23 1209.12 L1373.64 1209.12 L1373.06 1209.12 L1372.47 1209.12 L1371.88 1209.12 L1371.3 1209.12 L1370.71 1209.12 L1370.13 1209.12 L1369.54 1209.12 L1368.95 1209.12 L1368.37 1209.12 L1367.78 1209.12 L1367.19 1209.12 L1366.61 1209.12 L1366.02 1209.12 L1365.43 1209.12 L1364.85 1209.12 L1364.26 1209.12 L1363.68 1209.12 L1363.09 1209.12 L1362.5 1209.12 L1361.92 1209.12 L1361.33 1209.12 L1360.74 1209.12 L1360.16 1209.12 L1359.57 1209.12 L1358.98 1209.12 L1358.4 1209.12 L1357.81 1209.12 L1357.22 1209.12 L1356.64 1209.12 L1356.05 1209.12 L1355.47 1209.12 L1354.88 1209.12 L1354.29 1209.12 L1353.71 1209.12 L1353.12 1209.12 L1352.53 1209.12 L1351.95 1209.12 L1351.36 1209.12 L1350.77 1209.12 L1350.19 1209.12 L1349.6 1209.12 L1349.01 1209.12 L1348.43 1209.12 L1347.84 1209.12 L1347.26 1209.12 L1346.67 1209.12 L1346.08 1209.12 L1345.5 1209.12 L1344.91 1209.12 L1344.32 1209.12 L1343.74 1209.12 L1343.15 1209.12 L1342.56 1209.12 L1341.98 1209.12 L1341.39 1209.12 L1340.8 1209.12 L1340.22 1209.12 L1339.63 1209.12 L1339.05 1209.12 L1338.46 1209.12 L1337.87 1209.12 L1337.29 1209.12 L1336.7 1209.12 L1336.11 1209.12 L1335.53 1209.12 L1334.94 1209.12 L1334.35 1209.12 L1333.77 1209.12 L1333.18 1209.12 L1332.6 1209.12 L1332.01 1209.12 L1331.42 1209.12 L1330.84 1209.12 L1330.25 1209.12 L1329.66 1209.12 L1329.08 1209.12 L1328.49 1209.12 L1327.9 1209.12 L1327.32 1209.12 L1326.73 1209.12 L1326.14 1209.12 L1325.56 1209.12 L1324.97 1209.12 L1324.39 1209.12 L1323.8 1209.12 L1323.21 1209.12 L1322.63 1209.12 L1322.04 1209.12 L1321.45 1209.12 L1320.87 1209.12 L1320.28 1209.12 L1319.69 1209.12 L1319.11 1209.12 L1318.52 1209.12 L1317.93 1209.12 L1317.35 1209.12 L1316.76 1209.12 L1316.18 1209.12 L1315.59 1209.12 L1315 1209.12 L1314.42 1209.12 L1313.83 1209.12 L1313.24 1209.12 L1312.66 1209.12 L1312.07 1209.12 L1311.48 1209.12 L1310.9 1209.12 L1310.31 1209.12 L1309.73 1209.12 L1309.14 1209.12 L1308.55 1209.12 L1307.97 1209.12 L1307.38 1209.12 L1306.79 1209.12 L1306.21 1209.12 L1305.62 1209.12 L1305.03 1209.12 L1304.45 1209.12 L1303.86 1209.12 L1303.27 1209.12 L1302.69 1209.12 L1302.1 1209.12 L1301.52 1209.12 L1300.93 1209.12 L1300.34 1209.12 L1299.76 1209.12 L1299.17 1209.12 L1298.58 1209.12 L1298 1209.12 L1297.41 1209.12 L1296.82 1209.12 L1296.24 1209.12 L1295.65 1209.12 L1295.06 1209.12 L1294.48 1209.12 L1293.89 1209.12 L1293.31 1209.12 L1292.72 1209.12 L1292.13 1209.12 L1291.55 1209.12 L1290.96 1209.12 L1290.37 1209.12 L1289.79 1209.12 L1289.2 1209.12 L1288.61 1209.12 L1288.03 1209.12 L1287.44 1209.12 L1286.86 1209.12 L1286.27 1209.12 L1285.68 1209.12 L1285.1 1209.12 L1284.51 1209.12 L1283.92 1209.12 L1283.34 1209.12 L1282.75 1209.12 L1282.16 1209.12 L1281.58 1209.12 L1280.99 1209.12 L1280.4 1209.12 L1279.82 1209.12 L1279.23 1209.12 L1278.65 1209.12 L1278.06 1209.12 L1277.47 1209.12 L1276.89 1209.12 L1276.3 1209.12 L1275.71 1209.12 L1275.13 1209.12 L1274.54 1209.12 L1273.95 1209.12 L1273.37 1209.12 L1272.78 1209.12 L1272.19 1209.12 L1271.61 1209.12 L1271.02 1209.12 L1270.44 1209.12 L1269.85 1209.12 L1269.26 1209.12 L1268.68 1209.12 L1268.09 1209.12 L1267.5 1209.12 L1266.92 1209.12 L1266.33 1209.12 L1265.74 1209.12 L1265.16 1209.12 L1264.57 1209.12 L1263.98 1209.12 L1263.4 1209.12 L1262.81 1209.12 L1262.23 1209.12 L1261.64 1209.12 L1261.05 1209.12 L1260.47 1209.12 L1259.88 1209.12 L1259.29 1209.12 L1258.71 1209.12 L1258.12 1209.12 L1257.53 1209.12 L1256.95 1209.12 L1256.36 1209.12 L1255.78 1209.12 L1255.19 1209.12 L1254.6 1209.12 L1254.02 1209.12 L1253.43 1209.12 L1252.84 1209.12 L1252.26 1209.12 L1251.67 1209.12 L1251.08 1209.12 L1250.5 1209.12 L1249.91 1209.12 L1249.32 1209.12 L1248.74 1209.12 L1248.15 1209.12 L1247.57 1209.12 L1246.98 1209.12 L1246.39 1209.12 L1245.81 1209.12 L1245.22 1209.12 L1244.63 1209.12 L1244.05 1209.12 L1243.46 1209.12 L1242.87 1209.12 L1242.29 1209.12 L1241.7 1209.12 L1241.11 1209.12 L1240.53 1209.12 L1239.94 1209.12 L1239.36 1209.12 L1238.77 1209.12 L1238.18 1209.12 L1237.6 1209.12 L1237.01 1209.12 L1236.42 1209.12 L1235.84 1209.12 L1235.25 1209.12 L1234.66 1209.12 L1234.08 1209.12 L1233.49 1209.12 L1232.91 1209.12 L1232.32 1209.12 L1231.73 1209.12 L1231.15 1209.12 L1230.56 1209.12 L1229.97 1209.12 L1229.39 1209.12 L1228.8 1209.12 L1228.21 1209.12 L1227.63 1209.12 L1227.04 1209.12 L1226.45 1209.12 L1225.87 1209.12 L1225.28 1209.12 L1224.7 1209.12 L1224.11 1209.12 L1223.52 1209.12 L1222.94 1209.12 L1222.35 1209.12 L1221.76 1209.12 L1221.18 1209.12 L1220.59 1209.12 L1220 1209.12 L1219.42 1209.12 L1218.83 1209.12 L1218.24 1209.12 L1217.66 1209.12 L1217.07 1209.12 L1216.49 1209.12 L1215.9 1209.12 L1215.31 1209.12 L1214.73 1209.12 L1214.14 1209.12 L1213.55 1209.12 L1212.97 1209.12 L1212.38 1209.12 L1211.79 1209.12 L1211.21 1209.12 L1210.62 1209.12 L1210.03 1209.12 L1209.45 1209.12 L1208.86 1209.12 L1208.28 1209.12 L1207.69 1209.12 L1207.1 1209.12 L1206.52 1209.12 L1205.93 1209.12 L1205.34 1209.12 L1204.76 1209.12 L1204.17 1209.12 L1203.58 1209.12 L1203 1209.12 L1202.41 1209.12 L1201.83 1209.12 L1201.24 1209.12 L1200.65 1209.12 L1200.07 1209.12 L1199.48 1209.12 L1198.89 1209.12 L1198.31 1209.12 L1197.72 1209.12 L1197.13 1209.12 L1196.55 1209.12 L1195.96 1209.12 L1195.37 1209.12 L1194.79 1209.12 L1194.2 1209.12 L1193.62 1209.12 L1193.03 1209.12 L1192.44 1209.12 L1191.86 1209.12 L1191.27 1209.12 L1190.68 1209.12 L1190.1 1209.12 L1189.51 1209.12 L1188.92 1209.12 L1188.34 1209.12 L1187.75 1209.12 L1187.16 1209.12 L1186.58 1209.12 L1185.99 1209.12 L1185.41 1209.12 L1184.82 1209.12 L1184.23 1209.12 L1183.65 1209.12 L1183.06 1209.12 L1182.47 1209.12 L1181.89 1209.12 L1181.3 1209.12 L1180.71 1209.12 L1180.13 1209.12 L1179.54 1209.12 L1178.96 1209.12 L1178.37 1209.12 L1177.78 1209.12 L1177.2 1209.12 L1176.61 1209.12 L1176.02 1209.12 L1175.44 1209.12 L1174.85 1209.12 L1174.26 1209.12 L1173.68 1209.12 L1173.09 1209.12 L1172.5 1209.12 L1171.92 1209.12 L1171.33 1209.12 L1170.75 1209.12 L1170.16 1209.12 L1169.57 1209.12 L1168.99 1209.12 L1168.4 1209.12 L1167.81 1209.12 L1167.23 1209.12 L1166.64 1209.12 L1166.05 1209.12 L1165.47 1209.12 L1164.88 1209.12 L1164.29 1209.12 L1163.71 1209.12 L1163.12 1209.12 L1162.54 1209.12 L1161.95 1209.12 L1161.36 1209.12 L1160.78 1209.12 L1160.19 1209.12 L1159.6 1209.12 L1159.02 1209.12 L1158.43 1209.12 L1157.84 1209.12 L1157.26 1209.12 L1156.67 1209.12 L1156.09 1209.12 L1155.5 1209.12 L1154.91 1209.12 L1154.33 1209.12 L1153.74 1209.12 L1153.15 1209.12 L1152.57 1209.12 L1151.98 1209.12 L1151.39 1209.12 L1150.81 1209.12 L1150.22 1209.12 L1149.63 1209.12 L1149.05 1209.12 L1148.46 1209.12 L1147.88 1209.12 L1147.29 1209.12 L1146.7 1209.12 L1146.12 1209.12 L1145.53 1209.12 L1144.94 1209.12 L1144.36 1209.12 L1143.77 1209.12 L1143.18 1209.12 L1142.6 1209.12 L1142.01 1209.12 L1141.42 1209.12 L1140.84 1209.12 L1140.25 1209.12 L1139.67 1209.12 L1139.08 1209.12 L1138.49 1209.12 L1137.91 1209.12 L1137.32 1209.12 L1136.73 1209.12 L1136.15 1209.12 L1135.56 1209.12 L1134.97 1209.12 L1134.39 1209.12 L1133.8 1209.12 L1133.21 1209.12 L1132.63 1209.12 L1132.04 1209.12 L1131.46 1209.12 L1130.87 1209.12 L1130.28 1209.12 L1129.7 1209.12 L1129.11 1209.12 L1128.52 1209.12 L1127.94 1209.12 L1127.35 1209.12 L1126.76 1209.12 L1126.18 1209.12 L1125.59 1209.12 L1125.01 1209.12 L1124.42 1209.12 L1123.83 1209.12 L1123.25 1209.12 L1122.66 1209.12 L1122.07 1209.12 L1121.49 1209.12 L1120.9 1209.12 L1120.31 1209.12 L1119.73 1209.12 L1119.14 1209.12 L1118.55 1209.12 L1117.97 1209.12 L1117.38 1209.12 L1116.8 1209.12 L1116.21 1209.12 L1115.62 1209.12 L1115.04 1209.12 L1114.45 1209.12 L1113.86 1209.12 L1113.28 1209.12 L1112.69 1209.12 L1112.1 1209.12 L1111.52 1209.12 L1110.93 1209.12 L1110.34 1209.12 L1109.76 1209.12 L1109.17 1209.12 L1108.59 1209.12 L1108 1209.12 L1107.41 1209.12 L1106.83 1209.12 L1106.24 1209.12 L1105.65 1209.12 L1105.07 1209.12 L1104.48 1209.12 L1103.89 1209.12 L1103.31 1209.12 L1102.72 1209.12 L1102.14 1209.12 L1101.55 1209.12 L1100.96 1209.12 L1100.38 1209.12 L1099.79 1209.12 L1099.2 1209.12 L1098.62 1209.12 L1098.03 1209.12 L1097.44 1209.12 L1096.86 1209.12 L1096.27 1209.12 L1095.68 1209.12 L1095.1 1209.12 L1094.51 1209.12 L1093.93 1209.12 L1093.34 1209.12 L1092.75 1209.12 L1092.17 1209.12 L1091.58 1209.12 L1090.99 1209.12 L1090.41 1209.12 L1089.82 1209.12 L1089.23 1209.12 L1088.65 1209.12 L1088.06 1209.12 L1087.47 1209.12 L1086.89 1209.12 L1086.3 1209.12 L1085.72 1209.12 L1085.13 1209.12 L1084.54 1209.12 L1083.96 1209.12 L1083.37 1209.12 L1082.78 1209.12 L1082.2 1209.12 L1081.61 1209.12 L1081.02 1209.12 L1080.44 1209.12 L1079.85 1209.12 L1079.26 1209.12 L1078.68 1209.12 L1078.09 1209.12 L1077.51 1209.12 L1076.92 1209.12 L1076.33 1209.12 L1075.75 1209.12 L1075.16 1209.12 L1074.57 1209.12 L1073.99 1209.12 L1073.4 1209.12 L1072.81 1209.12 L1072.23 1209.12 L1071.64 1209.12 L1071.06 1209.12 L1070.47 1209.12 L1069.88 1209.12 L1069.3 1209.12 L1068.71 1209.12 L1068.12 1209.12 L1067.54 1209.12 L1066.95 1209.12 L1066.36 1209.12 L1065.78 1209.12 L1065.19 1209.12 L1064.6 1209.12 L1064.02 1209.12 L1063.43 1209.12 L1062.85 1209.12 L1062.26 1209.12 L1061.67 1209.12 L1061.09 1209.12 L1060.5 1209.12 L1059.91 1209.12 L1059.33 1209.12 L1058.74 1209.12 L1058.15 1209.12 L1057.57 1209.12 L1056.98 1209.12 L1056.39 1209.12 L1055.81 1209.12 L1055.22 1209.12 L1054.64 1209.12 L1054.05 1209.12 L1053.46 1209.12 L1052.88 1209.12 L1052.29 1209.12 L1051.7 1209.12 L1051.12 1209.12 L1050.53 1209.12 L1049.94 1209.12 L1049.36 1209.12 L1048.77 1209.12 L1048.19 1209.12 L1047.6 1209.12 L1047.01 1209.12 L1046.43 1209.12 L1045.84 1209.12 L1045.25 1209.12 L1044.67 1209.12 L1044.08 1209.12 L1043.49 1209.12 L1042.91 1209.12 L1042.32 1209.12 L1041.73 1209.12 L1041.15 1209.12 L1040.56 1209.12 L1039.98 1209.12 L1039.39 1209.12 L1038.8 1209.12 L1038.22 1209.12 L1037.63 1209.12 L1037.04 1209.12 L1036.46 1209.12 L1035.87 1209.12 L1035.28 1209.12 L1034.7 1209.12 L1034.11 1209.12 L1033.52 1209.12 L1032.94 1209.12 L1032.35 1209.12 L1031.77 1209.12 L1031.18 1209.12 L1030.59 1209.12 L1030.01 1209.12 L1029.42 1209.12 L1028.83 1209.12 L1028.25 1209.12 L1027.66 1209.12 L1027.07 1209.12 L1026.49 1209.12 L1025.9 1209.12 L1025.32 1209.12 L1024.73 1209.12 L1024.14 1209.12 L1023.56 1209.12 L1022.97 1209.12 L1022.38 1209.12 L1021.8 1209.12 L1021.21 1209.12 L1020.62 1209.12 L1020.04 1209.12 L1019.45 1209.12 L1018.86 1209.12 L1018.28 1209.12 L1017.69 1209.12 L1017.11 1209.12 L1016.52 1209.12 L1015.93 1209.12 L1015.35 1209.12 L1014.76 1209.12 L1014.17 1209.12 L1013.59 1209.12 L1013 1209.12 L1012.41 1209.12 L1011.83 1209.12 L1011.24 1209.12 L1010.65 1209.12 L1010.07 1209.12 L1009.48 1209.12 L1008.9 1209.12 L1008.31 1209.12 L1007.72 1209.12 L1007.14 1209.12 L1006.55 1209.12 L1005.96 1209.12 L1005.38 1209.12 L1004.79 1209.12 L1004.2 1209.12 L1003.62 1209.12 L1003.03 1209.12 L1002.44 1209.12 L1001.86 1209.12 L1001.27 1209.12 L1000.69 1209.12 L1000.1 1209.12 L999.513 1209.12 L998.926 1209.12 L998.34 1209.12 L997.754 1209.12 L997.167 1209.12 L996.581 1209.12 L995.994 1209.12 L995.408 1209.12 L994.822 1209.12 L994.235 1209.12 L993.649 1209.12 L993.062 1209.12 L992.476 1209.12 L991.889 1209.12 L991.303 1209.12 L990.717 1209.12 L990.13 1209.12 L989.544 1209.12 L988.957 1209.12 L988.371 1209.12 L987.785 1209.12 L987.198 1209.12 L986.612 1209.12 L986.025 1209.12  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.25 986.612,1209.25 987.198,1209.25 987.785,1209.25 988.371,1209.25 988.957,1209.25 989.544,1209.25 990.13,1209.25 990.717,1209.25 991.303,1209.25 991.889,1209.25 992.476,1209.25 993.062,1209.25 993.649,1209.25 994.235,1209.25 994.822,1209.25 995.408,1209.25 995.994,1209.25 996.581,1209.25 997.167,1209.25 997.754,1209.25 998.34,1209.25 998.926,1209.25 999.513,1209.25 1000.1,1209.25 1000.69,1209.25 1001.27,1209.25 1001.86,1209.25 1002.44,1209.25 1003.03,1209.25 1003.62,1209.25 1004.2,1209.25 1004.79,1209.25 1005.38,1209.25 1005.96,1209.25 1006.55,1209.25 1007.14,1209.25 1007.72,1209.25 1008.31,1209.25 1008.9,1209.25 1009.48,1209.25 1010.07,1209.25 1010.65,1209.25 1011.24,1209.25 1011.83,1209.25 1012.41,1209.25 1013,1209.25 1013.59,1209.25 1014.17,1209.25 1014.76,1209.25 1015.35,1209.25 1015.93,1209.25 1016.52,1209.25 1017.11,1209.25 1017.69,1209.25 1018.28,1209.25 1018.86,1209.25 1019.45,1209.25 1020.04,1209.25 1020.62,1209.25 1021.21,1209.25 1021.8,1209.25 1022.38,1209.25 1022.97,1209.25 1023.56,1209.25 1024.14,1209.25 1024.73,1209.25 1025.32,1209.25 1025.9,1209.25 1026.49,1209.25 1027.07,1209.25 1027.66,1209.25 1028.25,1209.25 1028.83,1209.25 1029.42,1209.25 1030.01,1209.25 1030.59,1209.25 1031.18,1209.25 1031.77,1209.25 1032.35,1209.25 1032.94,1209.25 1033.52,1209.25 1034.11,1209.25 1034.7,1209.25 1035.28,1209.25 1035.87,1209.25 1036.46,1209.25 1037.04,1209.25 1037.63,1209.25 1038.22,1209.25 1038.8,1209.25 1039.39,1209.25 1039.98,1209.25 1040.56,1209.25 1041.15,1209.25 1041.73,1209.25 1042.32,1209.25 1042.91,1209.25 1043.49,1209.25 1044.08,1209.25 1044.67,1209.25 1045.25,1209.25 1045.84,1209.25 1046.43,1209.25 1047.01,1209.25 1047.6,1209.25 1048.19,1209.25 1048.77,1209.25 1049.36,1209.25 1049.94,1209.25 1050.53,1209.25 1051.12,1209.25 1051.7,1209.25 1052.29,1209.25 1052.88,1209.25 1053.46,1209.25 1054.05,1209.25 1054.64,1209.25 1055.22,1209.25 1055.81,1209.25 1056.39,1209.25 1056.98,1209.25 1057.57,1209.25 1058.15,1209.25 1058.74,1209.25 1059.33,1209.25 1059.91,1209.25 1060.5,1209.25 1061.09,1209.25 1061.67,1209.25 1062.26,1209.25 1062.85,1209.25 1063.43,1209.25 1064.02,1209.25 1064.6,1209.25 1065.19,1209.25 1065.78,1209.25 1066.36,1209.25 1066.95,1209.25 1067.54,1209.25 1068.12,1209.25 1068.71,1209.25 1069.3,1209.25 1069.88,1209.25 1070.47,1209.25 1071.06,1209.25 1071.64,1209.25 1072.23,1209.25 1072.81,1209.25 1073.4,1209.25 1073.99,1209.25 1074.57,1209.25 1075.16,1209.25 1075.75,1209.25 1076.33,1209.25 1076.92,1209.25 1077.51,1209.25 1078.09,1209.25 1078.68,1209.25 1079.26,1209.25 1079.85,1209.25 1080.44,1209.25 1081.02,1209.25 1081.61,1209.25 1082.2,1209.25 1082.78,1209.25 1083.37,1209.25 1083.96,1209.25 1084.54,1209.25 1085.13,1209.25 1085.72,1209.25 1086.3,1209.25 1086.89,1209.25 1087.47,1209.25 1088.06,1209.25 1088.65,1209.25 1089.23,1209.25 1089.82,1209.25 1090.41,1209.25 1090.99,1209.25 1091.58,1209.25 1092.17,1209.25 1092.75,1209.25 1093.34,1209.25 1093.93,1209.25 1094.51,1209.25 1095.1,1209.25 1095.68,1209.25 1096.27,1209.25 1096.86,1209.25 1097.44,1209.25 1098.03,1209.25 1098.62,1209.25 1099.2,1209.25 1099.79,1209.25 1100.38,1209.25 1100.96,1209.25 1101.55,1209.25 1102.14,1209.25 1102.72,1209.25 1103.31,1209.25 1103.89,1209.25 1104.48,1209.25 1105.07,1209.25 1105.65,1209.25 1106.24,1209.25 1106.83,1209.25 1107.41,1209.25 1108,1209.25 1108.59,1209.25 1109.17,1209.25 1109.76,1209.25 1110.34,1209.25 1110.93,1209.25 1111.52,1209.25 1112.1,1209.25 1112.69,1209.25 1113.28,1209.25 1113.86,1209.25 1114.45,1209.25 1115.04,1209.25 1115.62,1209.25 1116.21,1209.25 1116.8,1209.25 1117.38,1209.25 1117.97,1209.25 1118.55,1209.25 1119.14,1209.25 1119.73,1209.25 1120.31,1209.25 1120.9,1209.25 1121.49,1209.25 1122.07,1209.25 1122.66,1209.25 1123.25,1209.25 1123.83,1209.25 1124.42,1209.25 1125.01,1209.25 1125.59,1209.25 1126.18,1209.25 1126.76,1209.25 1127.35,1209.25 1127.94,1209.25 1128.52,1209.25 1129.11,1209.25 1129.7,1209.25 1130.28,1209.25 1130.87,1209.25 1131.46,1209.25 1132.04,1209.25 1132.63,1209.25 1133.21,1209.25 1133.8,1209.25 1134.39,1209.25 1134.97,1209.25 1135.56,1209.25 1136.15,1209.25 1136.73,1209.25 1137.32,1209.25 1137.91,1209.25 1138.49,1209.25 1139.08,1209.25 1139.67,1209.25 1140.25,1209.25 1140.84,1209.25 1141.42,1209.25 1142.01,1209.25 1142.6,1209.25 1143.18,1209.25 1143.77,1209.25 1144.36,1209.25 1144.94,1209.25 1145.53,1209.25 1146.12,1209.25 1146.7,1209.25 1147.29,1209.25 1147.88,1209.25 1148.46,1209.25 1149.05,1209.25 1149.63,1209.25 1150.22,1209.25 1150.81,1209.25 1151.39,1209.25 1151.98,1209.25 1152.57,1209.25 1153.15,1209.25 1153.74,1209.25 1154.33,1209.25 1154.91,1209.25 1155.5,1209.25 1156.09,1209.25 1156.67,1209.25 1157.26,1209.25 1157.84,1209.25 1158.43,1209.25 1159.02,1209.25 1159.6,1209.25 1160.19,1209.25 1160.78,1209.25 1161.36,1209.25 1161.95,1209.25 1162.54,1209.25 1163.12,1209.25 1163.71,1209.25 1164.29,1209.25 1164.88,1209.25 1165.47,1209.25 1166.05,1209.25 1166.64,1209.25 1167.23,1209.25 1167.81,1209.25 1168.4,1209.25 1168.99,1209.25 1169.57,1209.25 1170.16,1209.25 1170.75,1209.25 1171.33,1209.25 1171.92,1209.25 1172.5,1209.25 1173.09,1209.25 1173.68,1209.25 1174.26,1209.25 1174.85,1209.25 1175.44,1209.25 1176.02,1209.25 1176.61,1209.25 1177.2,1209.25 1177.78,1209.25 1178.37,1209.25 1178.96,1209.25 1179.54,1209.25 1180.13,1209.25 1180.71,1209.25 1181.3,1209.25 1181.89,1209.25 1182.47,1209.25 1183.06,1209.25 1183.65,1209.25 1184.23,1209.25 1184.82,1209.25 1185.41,1209.25 1185.99,1209.25 1186.58,1209.25 1187.16,1209.25 1187.75,1209.25 1188.34,1209.25 1188.92,1209.25 1189.51,1209.25 1190.1,1209.25 1190.68,1209.25 1191.27,1209.25 1191.86,1209.25 1192.44,1209.25 1193.03,1209.25 1193.62,1209.25 1194.2,1209.25 1194.79,1209.25 1195.37,1209.25 1195.96,1209.25 1196.55,1209.25 1197.13,1209.25 1197.72,1209.25 1198.31,1209.25 1198.89,1209.25 1199.48,1209.25 1200.07,1209.25 1200.65,1209.25 1201.24,1209.25 1201.83,1209.25 1202.41,1209.25 1203,1209.25 1203.58,1209.25 1204.17,1209.25 1204.76,1209.25 1205.34,1209.25 1205.93,1209.25 1206.52,1209.25 1207.1,1209.25 1207.69,1209.25 1208.28,1209.25 1208.86,1209.25 1209.45,1209.25 1210.03,1209.25 1210.62,1209.25 1211.21,1209.25 1211.79,1209.25 1212.38,1209.25 1212.97,1209.25 1213.55,1209.25 1214.14,1209.25 1214.73,1209.25 1215.31,1209.25 1215.9,1209.25 1216.49,1209.25 1217.07,1209.25 1217.66,1209.25 1218.24,1209.25 1218.83,1209.25 1219.42,1209.25 1220,1209.25 1220.59,1209.25 1221.18,1209.25 1221.76,1209.25 1222.35,1209.25 1222.94,1209.25 1223.52,1209.25 1224.11,1209.25 1224.7,1209.25 1225.28,1209.25 1225.87,1209.25 1226.45,1209.25 1227.04,1209.25 1227.63,1209.25 1228.21,1209.25 1228.8,1209.25 1229.39,1209.25 1229.97,1209.25 1230.56,1209.25 1231.15,1209.25 1231.73,1209.25 1232.32,1209.25 1232.91,1209.25 1233.49,1209.25 1234.08,1209.25 1234.66,1209.25 1235.25,1209.25 1235.84,1209.25 1236.42,1209.25 1237.01,1209.25 1237.6,1209.25 1238.18,1209.25 1238.77,1209.25 1239.36,1209.25 1239.94,1209.25 1240.53,1209.25 1241.11,1209.25 1241.7,1209.25 1242.29,1209.25 1242.87,1209.25 1243.46,1209.25 1244.05,1209.25 1244.63,1209.25 1245.22,1209.25 1245.81,1209.25 1246.39,1209.25 1246.98,1209.25 1247.57,1209.25 1248.15,1209.25 1248.74,1209.25 1249.32,1209.25 1249.91,1209.25 1250.5,1209.25 1251.08,1209.25 1251.67,1209.25 1252.26,1209.25 1252.84,1209.25 1253.43,1209.25 1254.02,1209.25 1254.6,1209.25 1255.19,1209.25 1255.78,1209.25 1256.36,1209.25 1256.95,1209.25 1257.53,1209.25 1258.12,1209.25 1258.71,1209.25 1259.29,1209.25 1259.88,1209.25 1260.47,1209.25 1261.05,1209.25 1261.64,1209.25 1262.23,1209.25 1262.81,1209.25 1263.4,1209.25 1263.98,1209.25 1264.57,1209.25 1265.16,1209.25 1265.74,1209.25 1266.33,1209.25 1266.92,1209.25 1267.5,1209.25 1268.09,1209.25 1268.68,1209.25 1269.26,1209.25 1269.85,1209.25 1270.44,1209.25 1271.02,1209.25 1271.61,1209.25 1272.19,1209.25 1272.78,1209.25 1273.37,1209.25 1273.95,1209.25 1274.54,1209.25 1275.13,1209.25 1275.71,1209.25 1276.3,1209.25 1276.89,1209.25 1277.47,1209.25 1278.06,1209.25 1278.65,1209.25 1279.23,1209.25 1279.82,1209.25 1280.4,1209.25 1280.99,1209.25 1281.58,1209.25 1282.16,1209.25 1282.75,1209.25 1283.34,1209.25 1283.92,1209.25 1284.51,1209.25 1285.1,1209.25 1285.68,1209.25 1286.27,1209.25 1286.86,1209.25 1287.44,1209.25 1288.03,1209.25 1288.61,1209.25 1289.2,1209.25 1289.79,1209.25 1290.37,1209.25 1290.96,1209.25 1291.55,1209.25 1292.13,1209.25 1292.72,1209.25 1293.31,1209.25 1293.89,1209.25 1294.48,1209.25 1295.06,1209.25 1295.65,1209.25 1296.24,1209.25 1296.82,1209.25 1297.41,1209.25 1298,1209.25 1298.58,1209.25 1299.17,1209.25 1299.76,1209.25 1300.34,1209.25 1300.93,1209.25 1301.52,1209.25 1302.1,1209.25 1302.69,1209.25 1303.27,1209.25 1303.86,1209.25 1304.45,1209.25 1305.03,1209.25 1305.62,1209.25 1306.21,1209.25 1306.79,1209.25 1307.38,1209.25 1307.97,1209.25 1308.55,1209.25 1309.14,1209.25 1309.73,1209.25 1310.31,1209.25 1310.9,1209.25 1311.48,1209.25 1312.07,1209.25 1312.66,1209.25 1313.24,1209.25 1313.83,1209.25 1314.42,1209.25 1315,1209.25 1315.59,1209.25 1316.18,1209.25 1316.76,1209.25 1317.35,1209.25 1317.93,1209.25 1318.52,1209.25 1319.11,1209.25 1319.69,1209.25 1320.28,1209.25 1320.87,1209.25 1321.45,1209.25 1322.04,1209.25 1322.63,1209.25 1323.21,1209.25 1323.8,1209.25 1324.39,1209.25 1324.97,1209.25 1325.56,1209.25 1326.14,1209.25 1326.73,1209.25 1327.32,1209.25 1327.9,1209.25 1328.49,1209.25 1329.08,1209.25 1329.66,1209.25 1330.25,1209.25 1330.84,1209.25 1331.42,1209.25 1332.01,1209.25 1332.6,1209.25 1333.18,1209.25 1333.77,1209.25 1334.35,1209.25 1334.94,1209.25 1335.53,1209.25 1336.11,1209.25 1336.7,1209.25 1337.29,1209.25 1337.87,1209.25 1338.46,1209.25 1339.05,1209.25 1339.63,1209.25 1340.22,1209.25 1340.8,1209.25 1341.39,1209.25 1341.98,1209.25 1342.56,1209.25 1343.15,1209.25 1343.74,1209.25 1344.32,1209.25 1344.91,1209.25 1345.5,1209.25 1346.08,1209.25 1346.67,1209.25 1347.26,1209.25 1347.84,1209.25 1348.43,1209.25 1349.01,1209.25 1349.6,1209.25 1350.19,1209.25 1350.77,1209.25 1351.36,1209.25 1351.95,1209.25 1352.53,1209.25 1353.12,1209.25 1353.71,1209.25 1354.29,1209.25 1354.88,1209.25 1355.47,1209.25 1356.05,1209.25 1356.64,1209.25 1357.22,1209.25 1357.81,1209.25 1358.4,1209.25 1358.98,1209.25 1359.57,1209.25 1360.16,1209.25 1360.74,1209.25 1361.33,1209.25 1361.92,1209.25 1362.5,1209.25 1363.09,1209.25 1363.68,1209.25 1364.26,1209.25 1364.85,1209.25 1365.43,1209.25 1366.02,1209.25 1366.61,1209.25 1367.19,1209.25 1367.78,1209.25 1368.37,1209.25 1368.95,1209.25 1369.54,1209.25 1370.13,1209.25 1370.71,1209.25 1371.3,1209.25 1371.88,1209.25 1372.47,1209.25 1373.06,1209.25 1373.64,1209.25 1374.23,1209.25 1374.82,1209.25 1375.4,1209.25 1375.99,1209.25 1376.58,1209.25 1377.16,1209.25 1377.75,1209.25 1378.34,1209.25 1378.92,1209.25 1379.51,1209.25 1380.09,1209.25 1380.68,1209.25 1381.27,1209.25 1381.85,1209.25 1382.44,1209.25 1383.03,1209.25 1383.61,1209.25 1384.2,1209.25 1384.79,1209.25 1385.37,1209.25 1385.96,1209.25 1386.55,1209.25 1387.13,1209.25 1387.72,1209.25 1388.3,1209.25 1388.89,1209.25 1389.48,1209.25 1390.06,1209.25 1390.65,1209.25 1391.24,1209.25 1391.82,1209.25 1392.41,1209.25 1393,1209.25 1393.58,1209.25 1394.17,1209.25 1394.75,1209.25 1395.34,1209.25 1395.93,1209.25 1396.51,1209.25 1397.1,1209.25 1397.69,1209.25 1398.27,1209.25 1398.86,1209.25 1399.45,1209.25 1400.03,1209.25 1400.62,1209.25 1401.21,1209.25 1401.79,1209.25 1402.38,1209.25 1402.96,1209.25 1403.55,1209.25 1404.14,1209.25 1404.72,1209.25 1405.31,1209.25 1405.9,1209.25 1406.48,1209.25 1407.07,1209.25 1407.66,1209.25 1408.24,1209.25 1408.83,1209.25 1409.42,1209.25 1410,1209.25 1410.59,1209.25 1411.17,1209.25 1411.76,1209.25 1412.35,1209.25 1412.93,1209.25 1413.52,1209.25 1414.11,1209.25 1414.69,1209.25 1415.28,1209.25 1415.87,1209.25 1416.45,1209.25 1417.04,1209.25 1417.63,1209.25 1418.21,1209.25 1418.8,1209.25 1419.38,1209.25 1419.97,1209.25 1420.56,1209.25 1421.14,1209.25 1421.73,1209.25 1422.32,1209.25 1422.9,1209.25 1423.49,1209.25 1424.08,1209.25 1424.66,1209.25 1425.25,1209.25 1425.83,1209.25 1426.42,1209.25 1427.01,1209.25 1427.59,1209.25 1428.18,1209.25 1428.77,1209.25 1429.35,1209.25 1429.94,1209.25 1430.53,1209.25 1431.11,1209.25 1431.7,1209.25 1432.29,1209.25 1432.87,1209.25 1433.46,1209.25 1434.04,1209.25 1434.63,1209.25 1435.22,1209.25 1435.8,1209.25 1436.39,1209.25 1436.98,1209.25 1437.56,1209.25 1438.15,1209.25 1438.74,1209.25 1439.32,1209.25 1439.91,1209.25 1440.5,1209.25 1441.08,1209.25 1441.67,1209.25 1442.25,1209.25 1442.84,1209.25 1443.43,1209.25 1444.01,1209.25 1444.6,1209.25 1445.19,1209.25 1445.77,1209.25 1446.36,1209.25 1446.95,1209.25 1447.53,1209.25 1448.12,1209.25 1448.7,1209.25 1449.29,1209.25 1449.88,1209.25 1450.46,1209.25 1451.05,1209.25 1451.64,1209.25 1452.22,1209.25 1452.81,1209.25 1453.4,1209.25 1453.98,1209.25 1454.57,1209.25 1455.16,1209.25 1455.74,1209.25 1456.33,1209.25 1456.91,1209.25 1457.5,1209.25 1458.09,1209.25 1458.67,1209.25 1459.26,1209.25 1459.85,1209.25 1460.43,1209.25 1461.02,1209.25 1461.61,1209.25 1462.19,1209.25 1462.78,1209.25 1463.37,1209.25 1463.95,1209.25 1464.54,1209.25 1465.12,1209.25 1465.71,1209.25 1466.3,1209.25 1466.88,1209.25 1467.47,1209.25 1468.06,1209.25 1468.64,1209.25 1469.23,1209.25 1469.82,1209.25 1470.4,1209.25 1470.99,1209.25 1471.57,1209.25 1472.16,1209.25 1472.75,1209.25 1473.33,1209.25 1473.92,1209.25 1474.51,1209.25 1475.09,1209.25 1475.68,1209.25 1476.27,1209.25 1476.85,1209.25 1477.44,1209.25 1478.03,1209.25 1478.61,1209.25 1479.2,1209.25 1479.78,1209.25 1480.37,1209.25 1480.96,1209.25 1481.54,1209.25 1482.13,1209.25 1482.72,1209.25 1483.3,1209.25 1483.89,1209.25 1484.48,1209.25 1485.06,1209.25 1485.65,1209.25 1486.24,1209.25 1486.82,1209.25 1487.41,1209.25 1487.99,1209.25 1488.58,1209.25 1489.17,1209.25 1489.75,1209.25 1490.34,1209.25 1490.93,1209.25 1491.51,1209.25 1492.1,1209.25 1492.69,1209.25 1493.27,1209.25 1493.86,1209.25 1494.45,1209.25 1495.03,1209.25 1495.62,1209.25 1496.2,1209.25 1496.79,1209.25 1497.38,1209.25 1497.96,1209.25 1498.55,1209.25 1499.14,1209.25 1499.72,1209.25 1500.31,1209.25 1500.9,1209.25 1501.48,1209.25 1502.07,1209.25 1502.65,1209.25 1503.24,1209.25 1503.83,1209.25 1504.41,1209.25 1505,1209.25 1505.59,1209.25 1506.17,1209.25 1506.76,1209.25 1507.35,1209.25 1507.93,1209.25 1508.52,1209.25 1509.11,1209.25 1509.69,1209.25 1510.28,1209.25 1510.86,1209.25 1511.45,1209.25 1512.04,1209.25 1512.62,1209.25 1513.21,1209.25 1513.8,1209.25 1514.38,1209.25 1514.97,1209.25 1515.56,1209.25 1516.14,1209.25 1516.73,1209.25 1517.32,1209.25 1517.9,1209.25 1518.49,1209.25 1519.07,1209.25 1519.66,1209.25 1520.25,1209.25 1520.83,1209.25 1521.42,1209.25 1522.01,1209.25 1522.59,1209.25 1523.18,1209.25 1523.77,1209.25 1524.35,1209.25 1524.94,1209.25 1525.52,1209.25 1526.11,1209.25 1526.7,1209.25 1527.28,1209.25 1527.87,1209.25 1528.46,1209.25 1529.04,1209.25 1529.63,1209.25 1530.22,1209.25 1530.8,1209.25 1531.39,1209.25 1531.98,1209.25 1532.56,1209.25 1533.15,1209.25 1533.73,1209.25 1534.32,1209.25 1534.91,1209.25 1535.49,1209.25 1536.08,1209.25 1536.67,1209.25 1537.25,1209.25 1537.84,1209.25 1538.43,1209.25 1539.01,1209.25 1539.6,1209.25 1540.19,1209.25 1540.77,1209.25 1541.36,1209.25 1541.94,1209.25 1542.53,1209.25 1543.12,1209.25 1543.7,1209.25 1544.29,1209.25 1544.88,1209.25 1545.46,1209.25 1546.05,1209.25 1546.64,1209.25 1547.22,1209.25 1547.81,1209.25 1548.4,1209.25 1548.98,1209.25 1549.57,1209.25 1550.15,1209.25 1550.74,1209.25 1551.33,1209.25 1551.91,1209.25 1552.5,1209.25 1553.09,1209.25 1553.67,1209.25 1554.26,1209.25 1554.85,1209.25 1555.43,1209.25 1556.02,1209.25 1556.6,1209.25 1557.19,1209.25 1557.78,1209.25 1558.36,1209.25 1558.95,1209.25 1559.54,1209.25 1560.12,1209.25 1560.71,1209.25 1561.3,1209.25 1561.88,1209.25 1562.47,1209.25 1563.06,1209.25 1563.64,1209.25 1564.23,1209.25 1564.81,1209.25 1565.4,1209.25 1565.99,1209.25 1566.57,1209.25 1567.16,1209.25 1567.75,1209.25 1568.33,1209.25 1568.92,1209.25 1569.51,1209.25 1570.09,1209.25 1570.68,1209.25 1571.27,1209.25 1571.85,1209.25 1572.44,1209.25 1573.02,1209.25 1573.61,1209.25 1574.2,1209.25 1574.78,1209.25 1575.37,1209.25 1575.96,1209.25 1576.54,1209.25 1577.13,1209.25 1577.72,1209.25 1578.3,1209.25 1578.89,1209.25 1579.47,1209.25 1580.06,1209.25 1580.65,1209.25 1581.23,1209.25 1581.82,1209.25 1582.41,1209.25 1582.99,1209.25 1583.58,1209.25 1584.17,1209.25 1584.75,1209.25 1585.34,1209.25 1585.93,1209.25 1586.51,1209.25 1587.1,1209.25 1587.68,1209.25 1588.27,1209.25 1588.86,1209.25 1589.44,1209.25 1590.03,1209.25 1590.62,1209.25 1591.2,1209.25 1591.79,1209.25 1592.38,1209.25 1592.96,1209.25 1593.55,1209.25 1594.14,1209.25 1594.72,1209.25 1595.31,1209.25 1595.89,1209.25 1596.48,1209.25 1597.07,1209.25 1597.65,1209.25 1598.24,1209.25 1598.83,1209.25 1599.41,1209.25 1600,1209.25 1600.59,1209.25 1601.17,1209.25 1601.76,1209.25 1602.34,1209.25 1602.93,1209.25 1603.52,1209.25 1604.1,1209.25 1604.69,1209.25 1605.28,1209.25 1605.86,1209.25 1606.45,1209.25 1607.04,1209.25 1607.62,1209.25 1608.21,1209.25 1608.8,1209.25 1609.38,1209.25 1609.97,1209.25 1610.55,1209.25 1611.14,1209.25 1611.73,1209.25 1612.31,1209.25 1612.9,1209.25 1613.49,1209.25 1614.07,1209.25 1614.66,1209.25 1615.25,1209.25 1615.83,1209.25 1616.42,1209.25 1617.01,1209.25 1617.59,1209.25 1618.18,1209.25 1618.76,1209.25 1619.35,1209.25 1619.94,1209.25 1620.52,1209.25 1621.11,1209.25 1621.7,1209.25 1622.28,1209.25 1622.87,1209.25 1623.46,1209.25 1624.04,1209.25 1624.63,1209.25 1625.22,1209.25 1625.8,1209.25 1626.39,1209.25 1626.97,1209.25 1627.56,1209.25 1628.15,1209.25 1628.73,1209.25 1629.32,1209.25 1629.91,1209.25 1630.49,1209.25 1631.08,1209.25 1631.67,1209.25 1632.25,1209.25 1632.84,1209.25 1633.42,1209.25 1634.01,1209.25 1634.6,1209.25 1635.18,1209.25 1635.77,1209.25 1636.36,1209.25 1636.94,1209.25 1637.53,1209.25 1638.12,1209.25 1638.7,1209.25 1639.29,1209.25 1639.88,1209.25 1640.46,1209.25 1641.05,1209.25 1641.63,1209.25 1642.22,1209.25 1642.81,1209.25 1643.39,1209.25 1643.98,1209.25 1644.57,1209.25 1645.15,1209.25 1645.74,1209.25 1646.33,1209.25 1646.91,1209.25 1647.5,1209.25 1648.09,1209.25 1648.67,1209.25 1649.26,1209.25 1649.84,1209.25 1650.43,1209.25 1651.02,1209.25 1651.6,1209.25 1652.19,1209.25 1652.78,1209.25 1653.36,1209.25 1653.95,1209.25 1654.54,1209.25 1655.12,1209.25 1655.71,1209.25 1656.29,1209.25 1656.88,1209.25 1657.47,1209.25 1658.05,1209.25 1658.64,1209.25 1659.23,1209.25 1659.81,1209.25 1660.4,1209.25 1660.99,1209.25 1661.57,1209.25 1662.16,1209.25 1662.75,1209.25 1663.33,1209.25 1663.92,1209.25 1664.5,1209.25 1665.09,1209.25 1665.68,1209.25 1666.26,1209.25 1666.85,1209.25 1667.44,1209.25 1668.02,1209.25 1668.61,1209.25 1669.2,1209.25 1669.78,1209.25 1670.37,1209.25 1670.96,1209.25 1671.54,1209.25 1672.13,1209.25 1672.71,1209.25 1673.3,1209.25 1673.89,1209.25 1674.47,1209.25 1675.06,1209.25 1675.65,1209.25 1676.23,1209.25 1676.82,1209.25 1677.41,1209.25 1677.99,1209.25 1678.58,1209.25 1679.17,1209.25 1679.75,1209.25 1680.34,1209.25 1680.92,1209.25 1681.51,1209.25 1682.1,1209.25 1682.68,1209.25 1683.27,1209.25 1683.86,1209.25 1684.44,1209.25 1685.03,1209.25 1685.62,1209.25 1686.2,1209.25 1686.79,1209.25 1687.37,1209.25 1687.96,1209.25 1688.55,1209.25 1689.13,1209.25 1689.72,1209.25 1690.31,1209.25 1690.89,1209.25 1691.48,1209.25 1692.07,1209.25 1692.65,1209.25 1693.24,1209.25 1693.83,1209.25 1694.41,1209.25 1695,1209.25 1695.58,1209.25 1696.17,1209.25 1696.76,1209.25 1697.34,1209.25 1697.93,1209.25 1698.52,1209.25 1699.1,1209.25 1699.69,1209.25 1700.28,1209.25 1700.86,1209.25 1701.45,1209.25 1702.04,1209.25 1702.62,1209.25 1703.21,1209.25 1703.79,1209.25 1704.38,1209.25 1704.97,1209.25 1705.55,1209.25 1706.14,1209.25 1706.73,1209.25 1707.31,1209.25 1707.9,1209.25 1708.49,1209.25 1709.07,1209.25 1709.66,1209.25 1710.24,1209.25 1710.83,1209.25 1711.42,1209.25 1712,1209.25 1712.59,1209.25 1713.18,1209.25 1713.76,1209.25 1714.35,1209.25 1714.94,1209.25 1715.52,1209.25 1716.11,1209.25 1716.7,1209.25 1717.28,1209.25 1717.87,1209.25 1718.45,1209.25 1719.04,1209.25 1719.63,1209.25 1720.21,1209.25 1720.8,1209.25 1721.39,1209.25 1721.97,1209.25 1722.56,1209.25 1723.15,1209.25 1723.73,1209.25 1724.32,1209.25 1724.91,1209.25 1725.49,1209.25 1726.08,1209.25 1726.66,1209.25 1727.25,1209.25 1727.84,1209.25 1728.42,1209.25 1729.01,1209.25 1729.6,1209.25 1730.18,1209.25 1730.77,1209.25 1731.36,1209.25 1731.94,1209.25 1732.53,1209.25 1733.11,1209.25 1733.7,1209.25 1734.29,1209.25 1734.87,1209.25 1735.46,1209.25 1736.05,1209.25 1736.63,1209.25 1737.22,1209.25 1737.81,1209.25 1738.39,1209.25 1738.98,1209.25 1739.57,1209.25 1740.15,1209.25 1740.74,1209.25 1741.32,1209.25 1741.91,1209.25 1742.5,1209.25 1743.08,1209.25 1743.67,1209.25 1744.26,1209.25 1744.84,1209.25 1745.43,1209.25 1746.02,1209.25 1746.6,1209.25 1747.19,1209.25 1747.78,1209.25 1748.36,1209.25 1748.95,1209.25 1749.53,1209.25 1750.12,1209.25 1750.71,1209.25 1751.29,1209.25 1751.88,1209.25 1752.47,1209.25 1753.05,1209.25 1753.64,1209.25 1754.23,1209.25 1754.81,1209.25 1755.4,1209.25 1755.99,1209.25 1756.57,1209.25 1757.16,1209.25 1757.74,1209.25 1758.33,1209.25 1758.92,1209.25 1759.5,1209.25 1760.09,1209.25 1760.68,1209.25 1761.26,1209.25 1761.85,1209.25 1762.44,1209.25 1763.02,1209.25 1763.61,1209.25 1764.19,1209.25 1764.78,1209.25 1765.37,1209.25 1765.95,1209.25 1766.54,1209.25 1767.13,1209.25 1767.71,1209.25 1768.3,1209.25 1768.89,1209.25 1769.47,1209.25 1770.06,1209.25 1770.65,1209.25 1771.23,1209.25 1771.82,1209.25 1772.4,1209.25 1772.99,1209.25 1773.58,1209.25 1774.16,1209.25 1774.75,1209.25 1775.34,1209.25 1775.92,1209.25 1776.51,1209.25 1777.1,1209.25 1777.68,1209.25 1778.27,1209.25 1778.86,1209.25 1779.44,1209.25 1780.03,1209.25 1780.61,1209.25 1781.2,1209.25 1781.79,1209.25 1782.37,1209.25 1782.96,1209.25 1783.55,1209.25 1784.13,1209.25 1784.72,1209.25 1785.31,1209.25 1785.89,1209.25 1786.48,1209.25 1787.06,1209.25 1787.65,1209.25 1788.24,1209.25 1788.82,1209.25 1789.41,1209.25 1790,1209.25 1790.58,1209.25 1791.17,1209.25 1791.76,1209.25 1792.34,1209.25 1792.93,1209.25 1793.52,1209.25 1794.1,1209.25 1794.69,1209.25 1795.27,1209.25 1795.86,1209.25 1796.45,1209.25 1797.03,1209.25 1797.62,1209.25 1798.21,1209.25 1798.79,1209.25 1799.38,1209.25 1799.97,1209.25 1800.55,1209.25 1801.14,1209.25 1801.73,1209.25 1802.31,1209.25 1802.9,1209.25 1803.48,1209.25 1804.07,1209.25 1804.66,1209.25 1805.24,1209.25 1805.83,1209.25 1806.42,1209.25 1807,1209.25 1807.59,1209.25 1808.18,1209.25 1808.76,1209.25 1809.35,1209.25 1809.94,1209.25 1810.52,1209.25 1811.11,1209.25 1811.69,1209.25 1812.28,1209.25 1812.87,1209.25 1813.45,1209.25 1814.04,1209.25 1814.63,1209.25 1815.21,1209.25 1815.8,1209.25 1816.39,1209.25 1816.97,1209.25 1817.56,1209.25 1818.14,1209.25 1818.73,1209.25 1819.32,1209.25 1819.9,1209.25 1820.49,1209.25 1821.08,1209.25 1821.66,1209.25 1822.25,1209.25 1822.84,1209.25 1823.42,1209.25 1824.01,1209.25 1824.6,1209.25 1825.18,1209.25 1825.77,1209.25 1826.35,1209.25 1826.94,1209.25 1827.53,1209.25 1828.11,1209.25 1828.7,1209.25 1829.29,1209.25 1829.87,1209.25 1830.46,1209.25 1831.05,1209.25 1831.63,1209.25 1832.22,1209.25 1832.81,1209.25 1833.39,1209.25 1833.98,1209.25 1834.56,1209.25 1835.15,1209.25 1835.74,1209.25 1836.32,1209.25 1836.91,1209.25 1837.5,1209.25 1838.08,1209.25 1838.67,1209.25 1839.26,1209.25 1839.84,1209.25 1840.43,1209.25 1841.01,1209.25 1841.6,1209.25 1842.19,1209.25 1842.77,1209.25 1843.36,1209.25 1843.95,1209.25 1844.53,1209.25 1845.12,1209.25 1845.71,1209.25 1846.29,1209.25 1846.88,1209.25 1847.47,1209.25 1848.05,1209.25 1848.64,1209.25 1849.22,1209.25 1849.81,1209.25 1850.4,1209.25 1850.98,1209.25 1851.57,1209.25 1852.16,1209.25 1852.74,1209.25 1853.33,1209.25 1853.92,1209.25 1854.5,1209.25 1855.09,1209.25 1855.68,1209.25 1856.26,1209.25 1856.85,1209.25 1857.43,1209.25 1858.02,1209.25 1858.61,1209.25 1859.19,1209.25 1859.78,1209.25 1860.37,1209.25 1860.95,1209.25 1861.54,1209.25 1862.13,1209.25 1862.71,1209.25 1863.3,1209.25 1863.88,1209.25 1864.47,1209.25 1865.06,1209.25 1865.64,1209.25 1866.23,1209.25 1866.82,1209.25 1867.4,1209.25 1867.99,1209.25 1868.58,1209.25 1869.16,1209.25 1869.75,1209.25 1870.34,1209.25 1870.92,1209.25 1871.51,1209.25 1872.09,1209.25 1872.68,1209.25 1873.27,1209.25 1873.85,1209.25 1874.44,1209.25 1875.03,1209.25 1875.61,1209.25 1876.2,1209.25 1876.79,1209.25 1877.37,1209.25 1877.96,1209.25 1878.55,1209.25 1879.13,1209.25 1879.72,1209.25 1880.3,1209.25 1880.89,1209.25 1881.48,1209.25 1882.06,1209.25 1882.65,1209.25 1883.24,1209.25 1883.82,1209.25 1884.41,1209.25 1885,1209.25 1885.58,1209.25 1886.17,1209.25 1886.76,1209.25 1887.34,1209.25 1887.93,1209.25 1888.51,1209.25 1889.1,1209.25 1889.69,1209.25 1890.27,1209.25 1890.86,1209.25 1891.45,1209.25 1892.03,1209.25 1892.62,1209.25 1893.21,1209.25 1893.79,1209.25 1894.38,1209.25 1894.96,1209.25 1895.55,1209.25 1896.14,1209.25 1896.72,1209.25 1897.31,1209.25 1897.9,1209.25 1898.48,1209.25 1899.07,1209.25 1899.66,1209.25 1900.24,1209.25 1900.83,1209.25 1901.42,1209.25 1902,1209.25 1902.59,1209.25 1903.17,1209.25 1903.76,1209.25 1904.35,1209.25 1904.93,1209.25 1905.52,1209.25 1906.11,1209.25 1906.69,1209.25 1907.28,1209.25 1907.87,1209.25 1908.45,1209.25 1909.04,1209.25 1909.63,1209.25 1910.21,1209.25 1910.8,1209.25 1911.38,1209.25 1911.97,1209.25 1912.56,1209.25 1913.14,1209.25 1913.73,1209.25 1914.32,1209.25 1914.9,1209.25 1915.49,1209.25 1916.08,1209.25 1916.66,1209.25 1917.25,1209.25 1917.83,1209.25 1918.42,1209.25 1919.01,1209.25 1919.59,1209.25 1920.18,1209.25 1920.77,1209.25 1921.35,1209.25 1921.94,1209.25 1922.53,1209.25 1923.11,1209.25 1923.7,1209.25 1924.29,1209.25 1924.87,1209.25 1925.46,1209.25 1926.04,1209.25 1926.63,1209.25 1927.22,1209.25 1927.8,1209.25 1928.39,1209.25 1928.98,1209.25 1929.56,1209.25 1930.15,1209.25 1930.74,1209.25 1931.32,1209.25 1931.91,1209.25 1932.5,1209.25 1933.08,1209.25 1933.67,1209.25 1934.25,1209.25 1934.84,1209.25 1935.43,1209.25 1936.01,1209.25 1936.6,1209.25 1937.19,1209.25 1937.77,1209.25 1938.36,1209.25 1938.95,1209.25 1939.53,1209.25 1940.12,1209.25 1940.71,1209.25 1941.29,1209.25 1941.88,1209.25 1942.46,1209.25 1943.05,1209.25 1943.64,1209.25 1944.22,1209.25 1944.81,1209.25 1945.4,1209.25 1945.98,1209.25 1946.57,1209.25 1947.16,1209.25 1947.74,1209.25 1948.33,1209.25 1948.91,1209.25 1949.5,1209.25 1950.09,1209.25 1950.67,1209.25 1951.26,1209.25 1951.85,1209.25 1952.43,1209.25 1953.02,1209.25 1953.61,1209.25 1954.19,1209.25 1954.78,1209.25 1955.37,1209.25 1955.95,1209.25 1956.54,1209.25 1957.12,1209.25 1957.71,1209.25 1958.3,1209.25 1958.88,1209.25 1959.47,1209.25 1960.06,1209.25 1960.64,1209.25 1961.23,1209.25 1961.82,1209.25 1962.4,1209.25 1962.99,1209.25 1963.58,1209.25 1964.16,1209.25 1964.75,1209.25 1965.33,1209.25 1965.92,1209.25 1966.51,1209.25 1967.09,1209.25 1967.68,1209.25 1968.27,1209.25 1968.85,1209.25 1969.44,1209.25 1970.03,1209.25 1970.61,1209.25 1971.2,1209.25 1971.78,1209.25 1972.37,1209.25 1972.96,1209.25 1973.54,1209.25 1974.13,1209.25 1974.72,1209.25 1975.3,1209.25 1975.89,1209.25 1976.48,1209.25 1977.06,1209.25 1977.65,1209.25 1978.24,1209.25 1978.82,1209.25 1979.41,1209.25 1979.99,1209.25 1980.58,1209.25 1981.17,1209.25 1981.75,1209.25 1982.34,1209.25 1982.93,1209.25 1983.51,1209.25 1984.1,1209.25 1984.69,1209.25 1985.27,1209.25 1985.86,1209.25 1986.45,1209.25 1987.03,1209.25 1987.62,1209.25 1988.2,1209.25 1988.79,1209.25 1989.38,1209.25 1989.96,1209.25 1990.55,1209.25 1991.14,1209.25 1991.72,1209.25 1992.31,1209.25 1992.9,1209.25 1993.48,1209.25 1994.07,1209.25 1994.65,1209.25 1995.24,1209.25 1995.83,1209.25 1996.41,1209.25 1997,1209.25 1997.59,1209.25 1998.17,1209.25 1998.76,1209.25 1999.35,1209.25 1999.93,1209.25 2000.52,1209.25 2001.11,1209.25 2001.69,1209.25 2002.28,1209.25 2002.86,1209.25 2003.45,1209.25 2004.04,1209.25 2004.62,1209.25 2005.21,1209.25 2005.8,1209.25 2006.38,1209.25 2006.97,1209.25 2007.56,1209.25 2008.14,1209.25 2008.73,1209.25 2009.32,1209.25 2009.9,1209.25 2010.49,1209.25 2011.07,1209.25 2011.66,1209.25 2012.25,1209.25 2012.83,1209.25 2013.42,1209.25 2014.01,1209.25 2014.59,1209.25 2015.18,1209.25 2015.77,1209.25 2016.35,1209.25 2016.94,1209.25 2017.53,1209.25 2018.11,1209.25 2018.7,1209.25 2019.28,1209.25 2019.87,1209.25 2020.46,1209.25 2021.04,1209.25 2021.63,1209.25 2022.22,1209.25 2022.8,1209.25 2023.39,1209.25 2023.98,1209.25 2024.56,1209.25 2025.15,1209.25 2025.73,1209.25 2026.32,1209.25 2026.91,1209.25 2027.49,1209.25 2028.08,1209.25 2028.67,1209.25 2029.25,1209.25 2029.84,1209.25 2030.43,1209.25 2031.01,1209.25 2031.6,1209.25 2032.19,1209.25 2032.77,1209.25 2033.36,1209.25 2033.94,1209.25 2034.53,1209.25 2035.12,1209.25 2035.7,1209.25 2036.29,1209.25 2036.88,1209.25 2037.46,1209.25 2038.05,1209.25 2038.64,1209.25 2039.22,1209.25 2039.81,1209.25 2040.4,1209.25 2040.98,1209.25 2041.57,1209.25 2042.15,1209.25 2042.74,1209.25 2043.33,1209.25 2043.91,1209.25 2044.5,1209.25 2045.09,1209.25 2045.67,1209.25 2046.26,1209.25 2046.85,1209.25 2047.43,1209.25 2048.02,1209.25 2048.6,1209.25 2049.19,1209.25 2049.78,1209.25 2050.36,1209.25 2050.95,1209.25 2051.54,1209.25 2052.12,1209.25 2052.71,1209.25 2053.3,1209.25 2053.88,1209.25 2054.47,1209.25 2055.06,1209.25 2055.64,1209.25 2056.23,1209.25 2056.81,1209.25 2057.4,1209.25 2057.99,1209.25 2058.57,1209.25 2059.16,1209.25 2059.75,1209.25 2060.33,1209.25 2060.92,1209.25 2061.51,1209.25 2062.09,1209.25 2062.68,1209.25 2063.27,1209.25 2063.85,1209.25 2064.44,1209.25 2065.02,1209.25 2065.61,1209.25 2066.2,1209.25 2066.78,1209.25 2067.37,1209.25 2067.96,1209.25 2068.54,1209.25 2069.13,1209.25 2069.72,1209.25 2070.3,1209.25 2070.89,1209.25 2071.48,1209.25 2072.06,1209.25 2072.65,1209.25 2073.23,1209.25 2073.82,1209.25 2074.41,1209.25 2074.99,1209.25 2075.58,1209.25 2076.17,1209.25 2076.75,1209.25 2077.34,1209.25 2077.93,1209.25 2078.51,1209.25 2079.1,1209.25 2079.68,1209.25 2080.27,1209.25 2080.86,1209.25 2081.44,1209.25 2082.03,1209.25 2082.62,1209.25 2083.2,1209.25 2083.79,1209.25 2084.38,1209.25 2084.96,1209.25 2085.55,1209.25 2086.14,1209.25 2086.72,1209.25 2087.31,1209.25 2087.89,1209.25 2088.48,1209.25 2089.07,1209.25 2089.65,1209.25 2090.24,1209.25 2090.83,1209.25 2091.41,1209.25 2092,1209.25 2092.59,1209.25 2093.17,1209.25 2093.76,1209.25 2094.35,1209.25 2094.93,1209.25 2095.52,1209.25 2096.1,1209.25 2096.69,1209.25 2097.28,1209.25 2097.86,1209.25 2098.45,1209.25 2099.04,1209.25 2099.62,1209.25 2100.21,1209.25 2100.8,1209.25 2101.38,1209.25 2101.97,1209.25 2102.55,1209.25 2103.14,1209.25 2103.73,1209.25 2104.31,1209.25 2104.9,1209.25 2105.49,1209.25 2106.07,1209.25 2106.66,1209.25 2107.25,1209.25 2107.83,1209.25 2108.42,1209.25 2109.01,1209.25 2109.59,1209.25 2110.18,1209.25 2110.76,1209.25 2111.35,1209.25 2111.94,1209.25 2112.52,1209.25 2113.11,1209.25 2113.7,1209.25 2114.28,1209.25 2114.87,1209.25 2115.46,1209.25 2116.04,1209.25 2116.63,1209.25 2117.22,1209.25 2117.8,1209.25 2118.39,1209.25 2118.97,1209.25 2119.56,1209.25 2120.15,1209.25 2120.73,1209.25 2121.32,1209.25 2121.91,1209.25 2122.49,1209.25 2123.08,1209.25 2123.67,1209.25 2124.25,1209.25 2124.84,1209.25 2125.42,1209.25 2126.01,1209.25 2126.6,1209.25 2127.18,1209.25 2127.77,1209.25 2128.36,1209.25 2128.94,1209.25 2129.53,1209.25 2130.12,1209.25 2130.7,1209.25 2131.29,1209.25 2131.88,1209.25 2132.46,1209.25 2133.05,1209.25 2133.63,1209.25 2134.22,1209.25 2134.81,1209.25 2135.39,1209.25 2135.98,1209.25 2136.57,1209.25 2137.15,1209.25 2137.74,1209.25 2138.33,1209.25 2138.91,1209.25 2139.5,1209.25 2140.09,1209.25 2140.67,1209.25 2141.26,1209.25 2141.84,1209.25 2142.43,1209.25 2143.02,1209.25 2143.6,1209.25 2144.19,1209.25 2144.78,1209.25 2145.36,1209.25 2145.95,1209.25 2146.54,1209.25 2147.12,1209.25 2147.71,1209.25 2148.3,1209.25 2148.88,1209.25 2149.47,1209.25 2150.05,1209.25 2150.64,1209.25 2151.23,1209.25 2151.81,1209.25 2152.4,1209.25 2152.99,1209.25 2153.57,1209.25 2154.16,1209.25 2154.75,1209.25 2155.33,1209.25 2155.92,1209.25 2156.5,1209.25 2157.09,1209.25 2157.68,1209.25 2158.26,1209.25 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.81,1190.86 1400.06,899.083 \"/>\n<polyline clip-path=\"url(#clip932)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.08 985.439,1190.86 2158.26,1190.86 2158.26,1227.08 985.439,1227.08 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip930)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip933\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip930)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip930)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip930)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip933)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-5508.31 164.91,-6375.3 165.469,-7226.17 166.029,-6924.87 166.588,-7662.98 167.147,-8331.96 167.706,-8936.31 168.266,-9480.19 168.825,-8361.25 169.384,-8869.57 169.943,-9324.75 170.503,-9730.25 171.062,-10073.8 171.621,-10376.9 172.18,-10104.3 172.74,-10364.7 173.299,-10578.3 173.858,-10761.5 174.417,-10906.2 174.977,-11037 175.536,-11133.1 176.095,-11211.1 176.655,-11253.1 177.214,-10964 177.773,-10979.4 178.332,-10980.5 178.892,-10963.9 179.451,-10674.9 180.01,-10400.2 180.569,-10118.2 181.129,-10060.5 181.688,-10000.2 182.247,-9741.22 182.806,-9658.49 183.366,-9575.71 183.925,-9319.95 184.484,-9216.73 185.043,-9109.45 185.603,-8859.67 186.162,-8606.76 186.721,-8479.27 187.28,-8226.07 187.84,-7780.38 188.399,-7654.39 188.958,-7519.19 189.517,-7197.76 190.077,-7077.32 190.636,-6781.08 191.195,-6503.39 191.754,-6381.22 192.314,-6193.39 192.873,-6012.96 193.432,-5835.84 193.991,-5593.57 194.551,-5486.7 195.11,-5322.47 195.669,-5159.95 196.228,-5002.65 196.788,-4839.79 197.347,-4627.98 197.906,-4323.89 198.465,-4230.75 199.025,-4136.01 199.584,-4030.85 200.143,-3935.07 200.702,-3576.1 201.262,-3408.01 201.821,-3285.21 202.38,-3169.35 202.939,-3048.8 203.499,-2967.13 204.058,-2814.81 204.617,-2739.7 205.176,-2560.56 205.736,-2321.57 206.295,-2160.46 206.854,-2073.52 207.413,-1923.69 207.973,-1812.89 208.532,-1763.06 209.091,-1687.04 209.65,-1643.35 210.21,-1541.51 210.769,-1434.67 211.328,-1388.64 211.887,-1341.54 212.447,-1240.29 213.006,-1163.09 213.565,-1089.15 214.124,-1049.09 214.684,-958.596 215.243,-918.242 215.802,-847.871 216.361,-783.557 216.921,-671.613 217.48,-614.573 218.039,-462.782 218.598,-416.69 219.158,-372.032 219.717,-344.139 220.276,-228.657 220.835,-187.207 221.395,-170.338 221.954,-104.332 222.513,-85.9988 223.072,-45.9569 223.632,18.6547 224.191,56.6977 224.75,70.2202 225.309,113.154 225.869,128.775 226.428,167.054 226.987,202.841 227.546,217.85 228.106,231.032 228.665,268.259 229.224,278.826 229.783,314.702 230.343,310.382 230.902,324.916 231.461,377.777 232.02,412.094 232.58,445.606 233.139,472.276 233.698,480.88 234.257,509.163 234.817,520.284 235.376,508.501 235.935,591.138 236.494,616.869 237.054,658.846 237.613,681.554 238.172,701.185 238.731,727.515 239.291,767.896 239.85,787.815 240.409,804.687 240.968,805.114 241.528,839.902 242.087,836.251 242.646,854.602 243.205,889.701 243.765,904.45 244.324,900.542 244.883,897.581 245.442,928.345 246.002,907.453 246.561,921.595 247.12,938.495 247.679,957.2 248.239,984.545 248.798,977.435 249.357,990.589 249.916,961.453 250.476,939.066 251.035,947.149 251.594,977.468 252.153,988.277 252.713,979.561 253.272,978.254 253.831,1023.61 254.39,1031.07 254.95,1025.43 255.509,1017.4 256.068,1012.56 256.627,1008.75 257.187,1020.57 257.746,997.892 258.305,1076.59 258.864,1053 259.424,1078.5 259.983,1090.68 260.542,1085.68 261.101,1076.75 261.661,1086.5 262.22,1112.44 262.779,1100.3 263.338,1108.39 263.898,1131.18 264.457,1138.64 265.016,1131.11 265.575,1118.04 266.135,1142.93 266.694,1131.41 267.253,1152.9 267.812,1119.74 268.372,1124.02 268.931,1133.65 269.49,1120.16 270.049,1090.5 270.609,1095.29 271.168,1110.31 271.727,1115.34 272.286,1105.59 272.846,1162.08 273.405,1115.87 273.964,1136.1 274.523,1157.62 275.083,1180.03 275.642,1182.03 276.201,1169 276.76,1156.43 277.32,1142.89 277.879,1145.9 278.438,1120.45 278.997,1128.75 279.557,1100.92 280.116,1106.83 280.675,1097.99 281.234,1104.32 281.794,1114.26 282.353,1121.09 282.912,1140.49 283.471,1145.91 284.031,1150.97 284.59,1152.15 285.149,1139.08 285.708,1125.62 286.268,1129.46 286.827,1131.66 287.386,1116.7 287.945,1106.82 288.505,1111.44 289.064,1168.98 289.623,1170.4 290.182,1155.48 290.742,1157.73 291.301,1145.3 291.86,1165.98 292.419,1119.18 292.979,1125.76 293.538,1066.22 294.097,1058.6 294.656,1035.16 295.216,1013.79 295.775,993.373 296.334,1003.66 296.893,1016.47 297.453,1046.5 298.012,1038.13 298.571,1048.76 299.13,1075.37 299.69,1062.82 300.249,1102.45 300.808,1058.18 301.368,1048.34 301.927,1038.74 302.486,1046.41 303.045,1034.35 303.605,1013.33 304.164,1037.2 304.723,979.674 305.282,1010.08 305.842,1053.41 306.401,1028.94 306.96,1025.78 307.519,1021.16 308.079,965.569 308.638,893.655 309.197,930.254 309.756,928.068 310.316,964.295 310.875,943.198 311.434,954.345 311.993,949.058 312.553,933.352 313.112,912.388 313.671,906.328 314.23,906.439 314.79,907.182 315.349,925.032 315.908,889.656 316.467,837.819 317.027,838.22 317.586,821.552 318.145,823.834 318.704,829.226 319.264,844.143 319.823,844.243 320.382,875.04 320.941,890.655 321.501,902.991 322.06,934.634 322.619,932.608 323.178,925.752 323.738,924.976 324.297,922.092 324.856,922.766 325.415,867.455 325.975,886.259 326.534,918.073 327.093,898.612 327.652,879.876 328.212,877.446 328.771,864.123 329.33,863.638 329.889,893.683 330.449,895.29 331.008,907.964 331.567,918.581 332.126,948.514 332.686,907.938 333.245,925.389 333.804,922.111 334.363,951.36 334.923,946.825 335.482,941.379 336.041,901.574 336.6,944.203 337.16,953.473 337.719,979.133 338.278,956.869 338.837,967.582 339.397,944.092 339.956,957.454 340.515,946.727 341.074,951.129 341.634,926.853 342.193,935.57 342.752,947.941 343.311,924.009 343.871,922.623 344.43,867.657 344.989,884.223 345.548,863.523 346.108,845.775 346.667,829.529 347.226,798.305 347.785,799.862 348.345,832.736 348.904,849.568 349.463,831.378 350.022,832.565 350.582,820.08 351.141,818.88 351.7,845.475 352.259,821.851 352.819,851.981 353.378,865.093 353.937,859.651 354.496,872.51 355.056,871.981 355.615,870.717 356.174,882.69 356.733,897.201 357.293,911.233 357.852,937.457 358.411,964.782 358.97,942.644 359.53,932.914 360.089,924.466 360.648,938.359 361.207,946.654 361.767,976.467 362.326,985.912 362.885,944.909 363.444,954.499 364.004,947.451 364.563,939.95 365.122,951.924 365.681,930.787 366.241,921.593 366.8,916.49 367.359,895.051 367.918,876.698 368.478,920.971 369.037,933.992 369.596,894.251 370.155,890.475 370.715,884.239 371.274,894.321 371.833,904.811 372.392,880.513 372.952,859.23 373.511,838.915 374.07,855.081 374.629,852.359 375.189,815.897 375.748,812.345 376.307,809.412 376.866,839.676 377.426,851.812 377.985,830.009 378.544,830.865 379.103,845.223 379.663,839.061 380.222,851.782 380.781,834.122 381.34,816.201 381.9,830.477 382.459,796.133 383.018,829.607 383.577,908.967 384.137,918.764 384.696,931.494 385.255,938.441 385.814,929.976 386.374,954.563 386.933,959.341 387.492,953.109 388.051,958.905 388.611,967.292 389.17,952.137 389.729,924.93 390.288,901.767 390.848,896.107 391.407,887.746 391.966,885.69 392.525,881.407 393.085,862.454 393.644,842.93 394.203,806.417 394.762,849.237 395.322,875.391 395.881,871.234 396.44,853.506 396.999,851.41 397.559,817.775 398.118,830.566 398.677,827.963 399.236,810.692 399.796,807.624 400.355,824.44 400.914,820.555 401.473,819.095 402.033,815.449 402.592,816.664 403.151,810.617 403.71,814.935 404.27,812.945 404.829,844.545 405.388,838.303 405.947,835.678 406.507,832.22 407.066,845.612 407.625,859.419 408.184,856.079 408.744,817.311 409.303,814.24 409.862,795.793 410.421,807.92 410.981,823.515 411.54,818.941 412.099,845.454 412.658,827.442 413.218,807.537 413.777,807.122 414.336,803.823 414.895,785.615 415.455,719.29 416.014,707.126 416.573,708.486 417.132,709.814 417.692,714.694 418.251,683.635 418.81,687.597 419.369,729.572 419.929,735.831 420.488,751.927 421.047,783.659 421.606,780.57 422.166,780.99 422.725,748.259 423.284,750.004 423.843,755.422 424.403,756.306 424.962,754.613 425.521,757.091 426.08,790.214 426.64,821.116 427.199,801.563 427.758,784.459 428.318,787.662 428.877,755.994 429.436,774.077 429.995,806.704 430.555,769.88 431.114,799.726 431.673,796.868 432.232,810.467 432.792,793.864 433.351,792.814 433.91,774.529 434.469,742.381 435.029,742.879 435.588,758.527 436.147,762.98 436.706,749.224 437.266,752.059 437.825,768.489 438.384,752.192 438.943,735.25 439.503,739.889 440.062,722.687 440.621,740.779 441.18,775.121 441.74,793.561 442.299,776.448 442.858,758.642 443.417,755.79 443.977,723.526 444.536,725.819 445.095,742.848 445.654,742.577 446.214,724.813 446.773,725.1 447.332,696.371 447.891,702.206 448.451,734.98 449.01,736.568 449.569,739.697 450.128,741.092 450.688,741.266 451.247,758.99 451.806,759.251 452.365,758.127 452.925,772.814 453.484,755.366 454.043,753.994 454.602,766.116 455.162,782.165 455.721,763.993 456.28,766.102 456.839,730.224 457.399,746.357 457.958,749.02 458.517,734.736 459.076,751.932 459.636,739.572 460.195,774.77 460.754,805.577 461.313,814.871 461.873,795.31 462.432,844.227 462.991,853.892 463.55,832.234 464.11,844.209 464.669,843.584 465.228,844.787 465.787,857.6 466.347,835.746 466.906,846.979 467.465,807.738 468.024,821.67 468.584,803.926 469.143,798.383 469.702,778.662 470.261,777.061 470.821,775.827 471.38,808.235 471.939,803.243 472.498,813.778 473.058,814.271 473.617,810.087 474.176,773.84 474.735,754.302 475.295,767.347 475.854,768.228 476.413,767.924 476.972,748.282 477.532,744.078 478.091,742.923 478.65,756.353 479.209,723.558 479.769,692.849 480.328,697.967 480.887,698.635 481.446,702.967 482.006,670.037 482.565,692.584 483.124,712.276 483.683,744.47 484.243,777.183 484.802,776.592 485.361,790.697 485.92,784.419 486.48,812.495 487.039,825.767 487.598,785.321 488.157,797.056 488.717,827.811 489.276,826.21 489.835,806.7 490.394,805.24 490.954,816.13 491.513,825.128 492.072,804.54 492.631,785.212 493.191,767.275 493.75,735.016 494.309,768.511 494.868,785.941 495.428,813.867 495.987,794.773 496.546,792.753 497.105,788.462 497.665,785.528 498.224,749.834 498.783,745.462 499.342,728.223 499.902,745.884 500.461,760.283 501.02,745.722 501.579,729.113 502.139,729.313 502.698,747.98 503.257,764.606 503.816,745.676 504.376,729.067 504.935,746.589 505.494,744.395 506.053,756.975 506.613,738.326 507.172,723.628 507.731,705.571 508.29,709.182 508.85,742.405 509.409,722.791 509.968,724.285 510.527,743.306 511.087,728.38 511.646,728.949 512.205,729.996 512.764,779.145 513.324,758.941 513.883,742.047 514.442,744.875 515.001,743.411 515.561,738.889 516.12,719.935 516.679,720.589 517.238,735.748 517.798,782.582 518.357,714.562 518.916,698.4 519.475,698.105 520.035,700.863 520.594,698.376 521.153,699.138 521.712,685.337 522.272,668.147 522.831,686.697 523.39,668.236 523.949,670.246 524.509,690.924 525.068,707.925 525.627,677.437 526.186,681.583 526.746,684.162 527.305,670.866 527.864,707.065 528.423,726.423 528.983,710.308 529.542,761.606 530.101,742.987 530.66,709.874 531.22,712.265 531.779,728.674 532.338,744.423 532.897,773.863 533.457,753.747 534.016,733.598 534.575,711.572 535.134,695.009 535.694,699.903 536.253,684.954 536.812,700.082 537.371,715.742 537.931,714.197 538.49,712.437 539.049,712.97 539.608,714.929 540.168,684.057 540.727,653.629 541.286,655.951 541.845,643.034 542.405,663.578 542.964,668.967 543.523,654.747 544.082,626.234 544.642,611.842 545.201,652.406 545.76,654.379 546.319,657.676 546.879,661.661 547.438,694.794 547.997,695.074 548.556,696.836 549.116,701.495 549.675,685.677 550.234,668.165 550.793,671.036 551.353,689.858 551.912,706.531 552.471,706.402 553.031,708.461 553.59,708.345 554.149,724.476 554.708,709.539 555.268,691.419 555.827,707.488 556.386,707.48 556.945,722.87 557.505,723.404 558.064,695.091 558.623,712.544 559.182,746.732 559.742,760.718 560.301,793.3 560.86,775.715 561.419,773.034 561.979,736.035 562.538,802.8 563.097,812.392 563.656,826.573 564.216,824.322 564.775,800.062 565.334,779.332 565.893,810 566.453,773.246 567.012,756.717 567.571,754.331 568.13,771.764 568.69,765.712 569.249,795.42 569.808,774.94 570.367,788.506 570.927,847.741 571.486,842.592 572.045,837.255 572.604,829.548 573.164,789.76 573.723,770.428 574.282,814.268 574.841,806.391 575.401,817.331 575.96,794.619 576.519,804.077 577.078,794.897 577.638,788.872 578.197,737.651 578.756,736.214 579.315,752.147 579.875,751.124 580.434,735.076 580.993,702.159 581.552,704.871 582.112,706.061 582.671,722.655 583.23,688.284 583.789,688.608 584.349,723.08 584.908,722.279 585.467,718.233 586.026,723.352 586.586,758.819 587.145,771.412 587.704,785.892 588.263,784.6 588.823,778.58 589.382,808.688 589.941,788.888 590.5,798.55 591.06,777.856 591.619,773.33 592.178,771.867 592.737,765.998 593.297,746.779 593.856,755.618 594.415,768.694 594.974,780.571 595.534,777.332 596.093,774.43 596.652,771.077 597.211,751.062 597.771,730.482 598.33,729.079 598.889,776.275 599.448,789.339 600.008,787.021 600.567,767.469 601.126,763.611 601.685,725.591 602.245,724.174 602.804,690.584 603.363,688.218 603.922,691.457 604.482,695.349 605.041,708.171 605.6,707.334 606.159,721.751 606.719,720.597 607.278,750.845 607.837,782.706 608.396,780.093 608.956,758.582 609.515,739.799 610.074,750.77 610.633,731.223 611.193,725.513 611.752,739.678 612.311,737.095 612.87,734.285 613.43,720.908 613.989,704.623 614.548,718.985 615.107,702.613 615.667,702.266 616.226,682.359 616.785,666.592 617.344,684.179 617.904,666.199 618.463,621.309 619.022,674.926 619.581,675.286 620.141,680.535 620.7,665.682 621.259,667.012 621.818,636.182 622.378,622.95 622.937,657.212 623.496,677.735 624.055,681.121 624.615,680.449 625.174,696.915 625.733,697.367 626.292,696.217 626.852,715.245 627.411,731.12 627.97,728.68 628.529,681.274 629.089,668.92 629.648,669.847 630.207,640.124 630.766,660.125 631.326,646.979 631.885,666.902 632.444,688.485 633.003,668.766 633.563,683.91 634.122,717.047 634.681,717.724 635.24,733.623 635.8,727.483 636.359,743.135 636.918,757.732 637.477,753.24 638.037,765.492 638.596,765.927 639.155,733.815 639.714,762.691 640.274,759.395 640.833,788.647 641.392,814.59 641.951,793.224 642.511,773.317 643.07,770.722 643.629,771.12 644.188,751.53 644.748,747.08 645.307,741.761 645.866,742.013 646.425,772.712 646.985,787.982 647.544,783.56 648.103,796.849 648.662,792.188 649.222,772.936 649.781,768.922 650.34,764.049 650.899,759.223 651.459,757.569 652.018,756.999 652.577,721.32 653.136,735.504 653.696,781.189 654.255,808.235 654.814,867.128 655.373,842.28 655.933,848.658 656.492,859.4 657.051,866.85 657.61,823.309 658.17,784.793 658.729,780.989 659.288,791.67 659.847,769.552 660.407,782.834 660.966,760.041 661.525,755.744 662.084,737.984 662.644,719.261 663.203,700.292 663.762,667.825 664.321,636.892 664.881,621.769 665.44,608.662 665.999,612.794 666.558,614.63 667.118,602.521 667.677,623.451 668.236,624.267 668.795,645.637 669.355,633.583 669.914,639.602 670.473,642.983 671.032,644.648 671.592,600.3 672.151,607.638 672.71,627.096 673.269,617.414 673.829,669.161 674.388,640.421 674.947,644.643 675.506,662.815 676.066,647.388 676.625,669.909 677.184,672.978 677.743,631.328 678.303,636.358 678.862,610.191 679.421,615.046 679.981,621.628 680.54,626.721 681.099,629.906 681.658,618.176 682.218,608.599 682.777,610.136 683.336,633.871 683.895,649.855 684.455,670.479 685.014,655.087 685.573,642.769 686.132,628.38 686.692,565.409 687.251,572.993 687.81,580.065 688.369,583.961 688.929,591.839 689.488,598.2 690.047,590.232 690.606,612.361 691.166,635.903 691.725,640.54 692.284,658.399 692.843,643.652 693.403,614.233 693.962,603.966 694.521,623.471 695.08,627.89 695.64,614.899 696.199,599.267 696.758,572.396 697.317,578.458 697.877,585.66 698.436,622.652 698.995,643.352 699.554,661.247 700.114,631.047 700.673,637.041 701.232,640.395 701.791,641.341 702.351,675.888 702.91,677.347 703.469,664.589 704.028,650.247 704.588,670 705.147,642.32 705.706,644.412 706.265,651.609 706.825,669.944 707.384,656.325 707.943,673.889 708.502,693.534 709.062,710.762 709.621,695.435 710.18,694.649 710.739,692.083 711.299,693.139 711.858,727.11 712.417,690.227 712.976,725.191 713.536,705.464 714.095,701.755 714.654,701.348 715.213,700.234 715.773,701.582 716.332,670.904 716.891,656.094 717.45,641.491 718.01,659.932 718.569,694.331 719.128,679.542 719.687,662.948 720.247,632.453 720.806,634.259 721.365,637.826 721.924,638.802 722.484,639.789 723.043,657.59 723.602,659.605 724.161,676.394 724.721,710.942 725.28,693.968 725.839,693.04 726.398,691.283 726.958,706.922 727.517,706.176 728.076,708.376 728.635,720.881 729.195,686.048 729.754,701.25 730.313,671.645 730.872,657.394 731.432,658.071 731.991,658.302 732.55,659.137 733.109,658.849 733.669,658.541 734.228,675.615 734.787,692.298 735.346,693.716 735.906,658.79 736.465,662.986 737.024,666.711 737.583,636.092 738.143,622.825 738.702,608.606 739.261,630.063 739.82,651.61 740.38,650.822 740.939,652.096 741.498,619.638 742.057,594.536 742.617,600.35 743.176,603.392 743.735,607.416 744.294,609.796 744.854,582.51 745.413,590.222 745.972,611.19 746.531,617.966 747.091,573.875 747.65,585.006 748.209,607.811 748.768,629.502 749.328,650.295 749.887,639.822 750.446,660.023 751.005,661.395 751.565,665.113 752.124,683.474 752.683,697.025 753.242,665.808 753.802,667.833 754.361,686.111 754.92,687.299 755.479,737.997 756.039,715.287 756.598,714.132 757.157,730.911 757.716,758.939 758.276,725.075 758.835,721.121 759.394,734.957 759.953,735.81 760.513,798.766 761.072,795.955 761.631,773.07 762.19,783.73 762.75,779.03 763.309,773.974 763.868,769.682 764.427,745.64 764.987,744.456 765.546,706.875 766.105,722.857 766.664,735.948 767.224,731.44 767.783,728.313 768.342,726.065 768.901,725.537 769.461,706.284 770.02,739.876 770.579,737.067 771.138,751.347 771.698,762.931 772.257,775.822 772.816,806.222 773.375,800.741 773.935,825.627 774.494,866.479 775.053,827.801 775.612,788.988 776.172,765.262 776.731,746.331 777.29,726.55 777.849,712.006 778.409,695.572 778.968,695.652 779.527,708.822 780.086,722.083 780.646,722.316 781.205,674.828 781.764,626.366 782.323,629.484 782.883,616.135 783.442,647.009 784.001,699.458 784.56,729.734 785.12,728.744 785.679,707.115 786.238,720.689 786.797,721.439 787.357,689.247 787.916,672.309 788.475,707.889 789.034,690.76 789.594,678.408 790.153,725.941 790.712,723.734 791.271,754.828 791.831,718.334 792.39,684.379 792.949,702.133 793.508,669.592 794.068,668.488 794.627,666.755 795.186,683.48 795.745,687.753 796.305,706.098 796.864,711.515 797.423,725.55 797.982,702.854 798.542,732.948 799.101,730.03 799.66,740.383 800.219,736.358 800.779,737.144 801.338,747.473 801.897,761.109 802.456,809.634 803.016,800.623 803.575,826.174 804.134,851.317 804.693,826.386 805.253,835.509 805.812,840.96 806.371,832.163 806.931,839.915 807.49,798.392 808.049,777.206 808.608,721.547 809.168,670.152 809.727,673.251 810.286,673.348 810.845,657.804 811.405,578.952 811.964,568.223 812.523,561.024 813.082,587.064 813.642,577.27 814.201,598.039 814.76,617.07 815.319,589.173 815.879,559.636 816.438,595.159 816.997,600.128 817.556,587.106 818.116,589.578 818.675,594.912 819.234,632.562 819.793,647.998 820.353,668.419 820.912,686.142 821.471,668.126 822.03,665.12 822.59,668.824 823.149,652.092 823.708,669.026 824.267,671.513 824.827,690.162 825.386,706.747 825.945,688.711 826.504,736.554 827.064,750.487 827.623,747.205 828.182,760.906 828.741,771.139 829.301,752.237 829.86,768.174 830.419,747.851 830.978,713.707 831.538,713.413 832.097,744.087 832.656,724.41 833.215,705.429 833.775,720.711 834.334,738.048 834.893,734.638 835.452,747.363 836.012,761.32 836.571,777.358 837.13,771.935 837.689,765.943 838.249,776.624 838.808,803.518 839.367,814.931 839.926,793.454 840.486,806.495 841.045,833.431 841.604,827.229 842.163,804.853 842.723,765.062 843.282,758.716 843.841,773.636 844.4,782.803 844.96,775.095 845.519,753.355 846.078,719.102 846.637,733.986 847.197,715.962 847.756,663.907 848.315,618.171 848.874,605.625 849.434,594.438 849.993,612.776 850.552,568.495 851.111,574.843 851.671,623.675 852.23,646.396 852.789,664.172 853.348,649.39 853.908,651.905 854.467,654.91 855.026,655.207 855.585,626.278 856.145,668.962 856.704,672.07 857.263,676.181 857.822,641.753 858.382,676.174 858.941,645.036 859.5,642.617 860.059,644.673 860.619,665.366 861.178,649.337 861.737,634.83 862.296,651.193 862.856,684.051 863.415,700.46 863.974,683.895 864.533,684.543 865.093,684.345 865.652,699.199 866.211,695.237 866.77,697.281 867.33,683.248 867.889,682.548 868.448,696.659 869.007,679.658 869.567,678.034 870.126,678.047 870.685,706.871 871.244,692.489 871.804,707.423 872.363,672.406 872.922,705.996 873.481,707.031 874.041,738.629 874.6,719.581 875.159,732.965 875.718,745.34 876.278,724.707 876.837,786.983 877.396,764.917 877.955,725.256 878.515,708.837 879.074,707.009 879.633,717.97 880.192,717.506 880.752,719.553 881.311,719.941 881.87,749.367 882.429,729.057 882.989,724.792 883.548,705.834 884.107,705.149 884.666,672.229 885.226,686.764 885.785,701.979 886.344,684.382 886.903,685.606 887.463,681.41 888.022,667.45 888.581,650.716 889.14,607.633 889.7,512.422 890.259,505.549 890.818,548.433 891.377,556.384 891.937,563.865 892.496,556.316 893.055,547.068 893.614,508.427 894.174,500.571 894.733,511.487 895.292,538.316 895.851,566.973 896.411,555.35 896.97,598.57 897.529,620.389 898.088,624.566 898.648,628.896 899.207,652.389 899.766,671.794 900.325,689.289 900.885,718.346 901.444,749.643 902.003,760.22 902.562,756.465 903.122,752.355 903.681,784.763 904.24,750.591 904.799,748.885 905.359,792.827 905.918,822.516 906.477,801.795 907.036,781.169 907.596,760.9 908.155,786.346 908.714,779.734 909.273,774.813 909.833,770.729 910.392,781.879 910.951,791.574 911.51,784.807 912.07,809.941 912.629,805.075 913.188,814.404 913.747,809.818 914.307,802.155 914.866,799.3 915.425,794.196 915.984,773.167 916.544,771.076 917.103,783.464 917.662,795.702 918.221,774.316 918.781,767.447 919.34,794.887 919.899,820.545 920.458,827.143 921.018,820.925 921.577,816.759 922.136,812.253 922.695,787.127 923.255,812.495 923.814,824.514 924.373,799.969 924.932,792.833 925.492,818.936 926.051,793.012 926.61,769.728 927.169,781.327 927.729,726.582 928.288,723.221 928.847,719.56 929.406,703.025 929.966,686.444 930.525,671.559 931.084,684.991 931.644,699.343 932.203,697.515 932.762,645.699 933.321,649.832 933.881,635.746 934.44,671.934 934.999,671.56 935.558,671.821 936.118,638.703 936.677,639.383 937.236,654.477 937.795,639.643 938.355,661.442 938.914,694.063 939.473,694.2 940.032,692.029 940.592,676.674 941.151,676.32 941.71,678.359 942.269,714.298 942.829,648.451 943.388,647.361 943.947,666.647 944.506,666.042 945.066,682.227 945.625,715.839 946.184,714.32 946.743,743.077 947.303,709.011 947.862,728.216 948.421,724.014 948.98,740.902 949.54,723.89 950.099,719.586 950.658,721.552 951.217,689.927 951.777,655.444 952.336,673.608 952.895,674.798 953.454,656.584 954.014,673.783 954.573,626.115 955.132,612.44 955.691,650.747 956.251,651.258 956.81,668.313 957.369,669.715 957.928,686.898 958.488,704.151 959.047,685.203 959.606,682.384 960.165,648.965 960.725,653.042 961.284,656.964 961.843,673.958 962.402,656.3 962.962,658.618 963.521,691.541 964.08,688.696 964.639,719.277 965.199,704.321 965.758,682.672 966.317,681.033 966.876,683.101 967.436,667.626 967.995,653.454 968.554,637.228 969.113,657.507 969.673,678.277 970.232,680.497 970.791,698.949 971.35,664.828 971.91,679.922 972.469,668.733 973.028,687.638 973.587,701.724 974.147,700.387 974.706,715.637 975.265,678.964 975.824,679.583 976.384,662.107 976.943,662.286 977.502,648.273 978.061,629.936 978.621,615.708 979.18,636.004 979.739,723.171 980.298,721.747 980.858,704.618 981.417,687.467 981.976,672.844 982.535,705.895 983.095,738.448 983.654,739.922 984.213,740.322 984.772,738.091 985.332,719.084 985.891,732.871 986.45,713.33 987.009,685.333 987.569,686.527 988.128,702.515 988.687,702.934 989.246,748.609 989.806,730.43 990.365,726.48 990.924,689.641 991.483,655.712 992.043,655.985 992.602,636.934 993.161,670.55 993.72,704.14 994.28,687.063 994.839,689.665 995.398,654.154 995.957,658.17 996.517,646.227 997.076,643.191 997.635,627.427 998.194,649.203 998.754,666.84 999.313,698.694 999.872,763.415 1000.43,763.674 1000.99,764.436 1001.55,741.816 1002.11,736.661 1002.67,749.25 1003.23,700.181 1003.79,698.223 1004.35,712.352 1004.91,696.049 1005.46,710.384 1006.02,772.211 1006.58,753.105 1007.14,734.412 1007.7,735.376 1008.26,697.176 1008.82,644.904 1009.38,616.502 1009.94,668.563 1010.5,602.971 1011.06,559.532 1011.62,548.375 1012.18,553.055 1012.73,574.482 1013.29,598.122 1013.85,601.778 1014.41,607.509 1014.97,678.228 1015.53,675.777 1016.09,676.505 1016.65,663.246 1017.21,665.573 1017.77,651.213 1018.33,703.296 1018.89,688.56 1019.45,655.536 1020.01,641.614 1020.56,591.966 1021.12,578.713 1021.68,562.198 1022.24,600.422 1022.8,639.293 1023.36,641.542 1023.92,692.813 1024.48,727.329 1025.04,678.704 1025.6,678.922 1026.16,677.337 1026.72,659.362 1027.28,675.53 1027.83,641.916 1028.39,659.802 1028.95,660.872 1029.51,677.202 1030.07,712.746 1030.63,711.036 1031.19,706.576 1031.75,706.593 1032.31,705.864 1032.87,720.051 1033.43,735.855 1033.99,764.207 1034.55,744.509 1035.1,742.102 1035.66,739.428 1036.22,737.328 1036.78,732.725 1037.34,713.858 1037.9,730.822 1038.46,744.644 1039.02,755.509 1039.58,753.331 1040.14,747.499 1040.7,710.495 1041.26,709.118 1041.82,689.519 1042.38,671.755 1042.93,706.745 1043.49,736.587 1044.05,714.559 1044.61,683.453 1045.17,700.323 1045.73,701.561 1046.29,683.017 1046.85,683.248 1047.41,683.656 1047.97,683.381 1048.53,719.418 1049.09,731.781 1049.65,714.501 1050.2,695.883 1050.76,677.575 1051.32,694.935 1051.88,664.128 1052.44,632.103 1053,618.037 1053.56,620.632 1054.12,639.132 1054.68,626.72 1055.24,661.846 1055.8,665.049 1056.36,664.9 1056.92,647.478 1057.48,651.864 1058.03,684.054 1058.59,681.719 1059.15,697.331 1059.71,701.982 1060.27,717.799 1060.83,720.766 1061.39,721.464 1061.95,705.664 1062.51,704.704 1063.07,673.75 1063.63,676.24 1064.19,692.995 1064.75,660.785 1065.3,664.049 1065.86,650.021 1066.42,670.648 1066.98,673.688 1067.54,689.971 1068.1,658.548 1068.66,641.919 1069.22,647.354 1069.78,651.668 1070.34,688.11 1070.9,689.378 1071.46,672.748 1072.02,688.493 1072.57,690.101 1073.13,723.59 1073.69,719.168 1074.25,731.699 1074.81,729.889 1075.37,741.251 1075.93,737.749 1076.49,747.808 1077.05,727.041 1077.61,709.359 1078.17,723.353 1078.73,703.122 1079.29,683.875 1079.85,666.596 1080.4,669.066 1080.96,687.064 1081.52,685.076 1082.08,686.802 1082.64,716.198 1083.2,695.6 1083.76,689.906 1084.32,706.648 1084.88,702.991 1085.44,685.805 1086,684.962 1086.56,703.554 1087.12,708.608 1087.67,709.18 1088.23,692.925 1088.79,709.849 1089.35,724.923 1089.91,752.835 1090.47,783.64 1091.03,777.66 1091.59,770.717 1092.15,769.02 1092.71,778.187 1093.27,773.521 1093.83,773.472 1094.39,785.744 1094.94,749.855 1095.5,762.895 1096.06,757.921 1096.62,721.683 1097.18,731.859 1097.74,714.162 1098.3,678.391 1098.86,662.25 1099.42,646.085 1099.98,663.747 1100.54,677.196 1101.1,643.825 1101.66,631.209 1102.22,612.16 1102.77,614.058 1103.33,600.136 1103.89,584.003 1104.45,593.706 1105.01,599.021 1105.57,604.287 1106.13,594.058 1106.69,550.67 1107.25,572.334 1107.81,610.556 1108.37,592.631 1108.93,612.736 1109.49,597.447 1110.04,585.188 1110.6,570.965 1111.16,575.627 1111.72,553.051 1112.28,561.504 1112.84,599.278 1113.4,618.908 1113.96,654.764 1114.52,706.962 1115.08,700.322 1115.64,716.17 1116.2,731.25 1116.76,727.231 1117.31,726.653 1117.87,692.423 1118.43,709.066 1118.99,723.641 1119.55,719.161 1120.11,716.125 1120.67,682.11 1121.23,682.527 1121.79,701.916 1122.35,750.07 1122.91,700.403 1123.47,686.928 1124.03,684.182 1124.59,670.02 1125.14,672.936 1125.7,709.485 1126.26,678.119 1126.82,669.256 1127.38,685.601 1127.94,684.601 1128.5,733.836 1129.06,793.771 1129.62,787.977 1130.18,795.381 1130.74,773.775 1131.3,752.207 1131.86,717.208 1132.41,704.663 1132.97,655.113 1133.53,674.932 1134.09,660.392 1134.65,676.872 1135.21,661.534 1135.77,631.139 1136.33,570.6 1136.89,561.221 1137.45,582.481 1138.01,572.242 1138.57,593.761 1139.13,599.957 1139.68,602.663 1140.24,640.918 1140.8,642.693 1141.36,644.093 1141.92,627.716 1142.48,649.347 1143.04,653.481 1143.6,673.629 1144.16,659.091 1144.72,644.226 1145.28,662.063 1145.84,679.76 1146.4,696.838 1146.96,725.997 1147.51,741.224 1148.07,786.047 1148.63,780.644 1149.19,758.897 1149.75,752.206 1150.31,716.093 1150.87,697.239 1151.43,710.896 1151.99,740.661 1152.55,739.413 1153.11,738.057 1153.67,751.218 1154.23,745.36 1154.78,724.344 1155.34,753.667 1155.9,739.432 1156.46,750.643 1157.02,746.943 1157.58,759.081 1158.14,773.494 1158.7,752.572 1159.26,766.177 1159.82,696.882 1160.38,696.955 1160.94,743.824 1161.5,723.26 1162.05,738.242 1162.61,685.342 1163.17,667.76 1163.73,653.003 1164.29,634.073 1164.85,652.803 1165.41,623.966 1165.97,626.28 1166.53,597.758 1167.09,619.795 1167.65,605.454 1168.21,596.537 1168.77,618.847 1169.33,604.998 1169.88,624.416 1170.44,561.925 1171,554.1 1171.56,578.439 1172.12,570.054 1172.68,573.163 1173.24,611.075 1173.8,664.987 1174.36,646.47 1174.92,631.443 1175.48,661.837 1176.04,695.275 1176.6,711.55 1177.15,741.557 1177.71,737.836 1178.27,719.092 1178.83,719.144 1179.39,701.44 1179.95,717.065 1180.51,681.597 1181.07,697.499 1181.63,663.415 1182.19,662.319 1182.75,660.158 1183.31,644.813 1183.87,663.933 1184.43,666.565 1184.98,673.525 1185.54,624.544 1186.1,647.023 1186.66,666.293 1187.22,683.195 1187.78,680.937 1188.34,666.646 1188.9,687.199 1189.46,673.226 1190.02,690.57 1190.58,693.027 1191.14,691.239 1191.7,671.064 1192.25,658.617 1192.81,722.342 1193.37,736.682 1193.93,719.962 1194.49,732.778 1195.05,699.502 1195.61,712.698 1196.17,709.086 1196.73,741.442 1197.29,720.725 1197.85,704.669 1198.41,736.777 1198.97,730.63 1199.52,728.067 1200.08,774.202 1200.64,738.211 1201.2,734.662 1201.76,749.571 1202.32,760.524 1202.88,755.14 1203.44,748.552 1204,760.934 1204.56,789.898 1205.12,786.513 1205.68,783.979 1206.24,777.022 1206.8,743.407 1207.35,741.454 1207.91,737.256 1208.47,721.367 1209.03,729.109 1209.59,726.424 1210.15,709.498 1210.71,723.684 1211.27,705.23 1211.83,719.233 1212.39,730.588 1212.95,712.443 1213.51,649.511 1214.07,634 1214.62,604.253 1215.18,609.115 1215.74,581.162 1216.3,586.795 1216.86,608.256 1217.42,631.925 1217.98,617.536 1218.54,635.327 1219.1,654.676 1219.66,635.839 1220.22,636.071 1220.78,657.326 1221.34,625.294 1221.89,631.085 1222.45,635.255 1223.01,616.928 1223.57,586.52 1224.13,608.226 1224.69,615.369 1225.25,634.461 1225.81,635.334 1226.37,638.562 1226.93,608.046 1227.49,613.597 1228.05,617.117 1228.61,619.13 1229.17,637.147 1229.72,621.224 1230.28,626.909 1230.84,632.047 1231.4,648.937 1231.96,652.54 1232.52,685.255 1233.08,717.493 1233.64,715.731 1234.2,718.928 1234.76,701.985 1235.32,719.546 1235.88,735.332 1236.44,734.583 1236.99,701.615 1237.55,718.813 1238.11,702.122 1238.67,701.218 1239.23,718.368 1239.79,716.34 1240.35,715.05 1240.91,713.282 1241.47,711.333 1242.03,680.159 1242.59,698.57 1243.15,724.804 1243.71,691.388 1244.26,717.614 1244.82,731.737 1245.38,713.317 1245.94,725.277 1246.5,708.129 1247.06,693.381 1247.62,710.878 1248.18,725.154 1248.74,709.514 1249.3,694.338 1249.86,691.092 1250.42,707.079 1250.98,689.138 1251.54,653.976 1252.09,642.563 1252.65,660.909 1253.21,661.702 1253.77,661.184 1254.33,693.334 1254.89,678.471 1255.45,660.852 1256.01,693.292 1256.57,697.576 1257.13,729.437 1257.69,728.242 1258.25,743.613 1258.81,693.133 1259.36,725.118 1259.92,718.214 1260.48,702.332 1261.04,698.535 1261.6,695.76 1262.16,661.524 1262.72,679.346 1263.28,693.794 1263.84,724.807 1264.4,707.136 1264.96,707.69 1265.52,704.043 1266.08,766.898 1266.63,778.36 1267.19,772.242 1267.75,768.677 1268.31,733.922 1268.87,682.559 1269.43,681.808 1269.99,700.767 1270.55,713.243 1271.11,712.594 1271.67,712.947 1272.23,747.121 1272.79,712.111 1273.35,758.513 1273.91,717.242 1274.46,713.75 1275.02,679.318 1275.58,664.089 1276.14,631.022 1276.7,622.096 1277.26,625.102 1277.82,628.594 1278.38,650.025 1278.94,637.931 1279.5,640.389 1280.06,658.916 1280.62,660.863 1281.18,663.658 1281.73,666.201 1282.29,667.824 1282.85,668.433 1283.41,574.502 1283.97,562.68 1284.53,620.729 1285.09,655.375 1285.65,639.852 1286.21,640.87 1286.77,645.377 1287.33,643.71 1287.89,646.671 1288.45,651.153 1289,603.903 1289.56,604.491 1290.12,643.568 1290.68,647.671 1291.24,665.901 1291.8,616.49 1292.36,666.983 1292.92,671.825 1293.48,638.927 1294.04,692.305 1294.6,693.984 1295.16,691.998 1295.72,690.205 1296.28,705.868 1296.83,705.784 1297.39,722.823 1297.95,703.956 1298.51,690.121 1299.07,691.615 1299.63,692.429 1300.19,662.647 1300.75,667.217 1301.31,667.866 1301.87,668.204 1302.43,640.624 1302.99,645.502 1303.55,665.658 1304.1,681.284 1304.66,735.003 1305.22,716.985 1305.78,750.415 1306.34,747.565 1306.9,762.636 1307.46,775.916 1308.02,754.676 1308.58,746.817 1309.14,761.799 1309.7,760.614 1310.26,788.86 1310.82,786.342 1311.38,762.772 1311.93,788.639 1312.49,783.291 1313.05,761.059 1313.61,743.791 1314.17,756.915 1314.73,752.872 1315.29,747.126 1315.85,760.381 1316.41,722.989 1316.97,718.93 1317.53,688.498 1318.09,673.661 1318.65,674.645 1319.2,673.299 1319.76,639.717 1320.32,640.325 1320.88,641.749 1321.44,643.729 1322,647.428 1322.56,679.084 1323.12,682.088 1323.68,713.37 1324.24,697.921 1324.8,678.607 1325.36,694.149 1325.92,696.088 1326.47,713.446 1327.03,679.919 1327.59,678.709 1328.15,628.145 1328.71,663.567 1329.27,678.756 1329.83,680.323 1330.39,714.045 1330.95,710.369 1331.51,754.667 1332.07,719.621 1332.63,732.891 1333.19,697.446 1333.75,762.118 1334.3,758.307 1334.86,690.143 1335.42,688.372 1335.98,651.605 1336.54,683.603 1337.1,696.386 1337.66,709.75 1338.22,677.645 1338.78,660.046 1339.34,627.756 1339.9,596.647 1340.46,617.32 1341.02,666.774 1341.57,682.971 1342.13,684.172 1342.69,683.914 1343.25,716.721 1343.81,696.251 1344.37,694.245 1344.93,677.127 1345.49,664.862 1346.05,647.287 1346.61,650.511 1347.17,650.079 1347.73,617.531 1348.29,604.423 1348.84,623.102 1349.4,610.82 1349.96,629.563 1350.52,664.926 1351.08,649.907 1351.64,636.841 1352.2,658.124 1352.76,655.847 1353.32,638.564 1353.88,639.442 1354.44,679.167 1355,714.286 1355.56,725.763 1356.12,709.547 1356.67,690.081 1357.23,656.51 1357.79,692.107 1358.35,677.86 1358.91,665.226 1359.47,720.947 1360.03,720.942 1360.59,703.167 1361.15,750.77 1361.71,778.968 1362.27,787.314 1362.83,767.126 1363.39,763.366 1363.94,805.454 1364.5,768.846 1365.06,780.936 1365.62,776.042 1366.18,757.37 1366.74,784.849 1367.3,762.409 1367.86,725.208 1368.42,721.607 1368.98,702.089 1369.54,720.377 1370.1,703.363 1370.66,718.376 1371.21,699.1 1371.77,746.758 1372.33,679.211 1372.89,643.236 1373.45,628.623 1374.01,615.719 1374.57,586.506 1375.13,608.385 1375.69,594.813 1376.25,581.763 1376.81,584.654 1377.37,576.812 1377.93,597.305 1378.49,586.092 1379.04,589.446 1379.6,595.196 1380.16,598.265 1380.72,634.513 1381.28,639.634 1381.84,659.102 1382.4,678.219 1382.96,658.373 1383.52,644.494 1384.08,651.419 1384.64,652.897 1385.2,638.603 1385.76,638.695 1386.31,612.225 1386.87,631.946 1387.43,700.704 1387.99,701.827 1388.55,699.101 1389.11,714.325 1389.67,712.75 1390.23,698.59 1390.79,713.149 1391.35,714.435 1391.91,714.048 1392.47,746.603 1393.03,746.257 1393.58,743.015 1394.14,755.972 1394.7,751.905 1395.26,748.698 1395.82,749.266 1396.38,745.322 1396.94,759.335 1397.5,769.754 1398.06,816.904 1398.62,827.181 1399.18,817.808 1399.74,794.876 1400.3,788.431 1400.86,785.555 1401.41,778.103 1401.97,786.738 1402.53,779.546 1403.09,776.807 1403.65,757.128 1404.21,788.293 1404.77,783.291 1405.33,793.365 1405.89,769.745 1406.45,746.841 1407.01,727.037 1407.57,724.136 1408.13,752.532 1408.68,698.498 1409.24,685.135 1409.8,667.665 1410.36,651.232 1410.92,637.384 1411.48,641.798 1412.04,642.512 1412.6,644.218 1413.16,646.11 1413.72,677.402 1414.28,657.741 1414.84,663.016 1415.4,729.883 1415.95,746.974 1416.51,724.948 1417.07,676.609 1417.63,647.871 1418.19,600.524 1418.75,591.89 1419.31,580.612 1419.87,567.617 1420.43,589.658 1420.99,592.994 1421.55,616.566 1422.11,637.66 1422.67,623.815 1423.23,660.738 1423.78,646.403 1424.34,628.906 1424.9,613.355 1425.46,632.826 1426.02,633.381 1426.58,636.575 1427.14,636.75 1427.7,637.166 1428.26,638.522 1428.82,673.399 1429.38,688.966 1429.94,703.841 1430.5,654.555 1431.05,658.859 1431.61,661.503 1432.17,679.733 1432.73,683.622 1433.29,701.359 1433.85,666.965 1434.41,640.428 1434.97,625.553 1435.53,628.918 1436.09,599.701 1436.65,601.32 1437.21,608.184 1437.77,599.621 1438.33,606.457 1438.88,611.742 1439.44,646.639 1440,650.185 1440.56,655.205 1441.12,656.033 1441.68,673.269 1442.24,656.747 1442.8,656.922 1443.36,657.184 1443.92,643.688 1444.48,662.025 1445.04,647.911 1445.6,633.526 1446.15,654.507 1446.71,640.318 1447.27,660.278 1447.83,630.464 1448.39,635.422 1448.95,622.24 1449.51,641.16 1450.07,677.492 1450.63,674.501 1451.19,688.933 1451.75,671.507 1452.31,673.037 1452.87,706.389 1453.42,656.12 1453.98,657.785 1454.54,642.337 1455.1,626.171 1455.66,580.755 1456.22,618.68 1456.78,607.994 1457.34,628.185 1457.9,664.433 1458.46,647.087 1459.02,615.734 1459.58,602.856 1460.14,591.635 1460.7,596.622 1461.25,600.14 1461.81,589.182 1462.37,595.293 1462.93,613.598 1463.49,584.247 1464.05,638.218 1464.61,654.753 1465.17,660.053 1465.73,697.645 1466.29,713.797 1466.85,712.57 1467.41,695.472 1467.97,695.756 1468.52,677.282 1469.08,695.603 1469.64,678.132 1470.2,676.416 1470.76,657.399 1471.32,659.823 1471.88,676.635 1472.44,644.859 1473,613.493 1473.56,600.133 1474.12,658.919 1474.68,660.87 1475.24,645.711 1475.79,649.437 1476.35,652.75 1476.91,609.114 1477.47,627.907 1478.03,626.983 1478.59,644.504 1479.15,645.106 1479.71,650.508 1480.27,635.212 1480.83,635.957 1481.39,669.765 1481.95,671.919 1482.51,684.389 1483.07,667.031 1483.62,618.699 1484.18,622.031 1484.74,609.762 1485.3,598.288 1485.86,586.846 1486.42,607.476 1486.98,611.02 1487.54,627.528 1488.1,615.723 1488.66,632.307 1489.22,636.171 1489.78,704.479 1490.34,687.277 1490.89,684.716 1491.45,684.061 1492.01,746.025 1492.57,726.673 1493.13,694.408 1493.69,723.806 1494.25,738.947 1494.81,735.517 1495.37,732.399 1495.93,744.279 1496.49,739.655 1497.05,720.588 1497.61,718.775 1498.16,737.072 1498.72,720.317 1499.28,763.101 1499.84,746.141 1500.4,661.462 1500.96,662.801 1501.52,647.865 1502.08,667.006 1502.64,654.739 1503.2,656.569 1503.76,660.718 1504.32,646.071 1504.88,647.783 1505.44,682.537 1505.99,683.711 1506.55,683.527 1507.11,698.301 1507.67,663.735 1508.23,681.267 1508.79,679.363 1509.35,678.681 1509.91,725.141 1510.47,769.099 1511.03,763.751 1511.59,759.304 1512.15,737.505 1512.71,734.39 1513.26,712.64 1513.82,695.09 1514.38,709.981 1514.94,692.404 1515.5,705.293 1516.06,704.323 1516.62,702.615 1517.18,717.426 1517.74,717.782 1518.3,732.484 1518.86,713.309 1519.42,730.061 1519.98,711.698 1520.53,693.737 1521.09,710.226 1521.65,724.014 1522.21,722.519 1522.77,701.115 1523.33,655.425 1523.89,658.915 1524.45,693.33 1525.01,656.742 1525.57,656.392 1526.13,674.74 1526.69,663.161 1527.25,681.429 1527.81,681.654 1528.36,650.092 1528.92,682.47 1529.48,683.317 1530.04,668.813 1530.6,687.358 1531.16,707.016 1531.72,740.658 1532.28,737.751 1532.84,698.642 1533.4,682.826 1533.96,685.595 1534.52,700.555 1535.08,700.102 1535.63,700.136 1536.19,714.954 1536.75,680.355 1537.31,713.172 1537.87,728.546 1538.43,710.366 1538.99,690.162 1539.55,660.114 1540.11,655.938 1540.67,658.374 1541.23,662.402 1541.79,676.414 1542.35,678.242 1542.9,649.796 1543.46,655.423 1544.02,637.641 1544.58,655.903 1545.14,678.484 1545.7,664.13 1546.26,683.572 1546.82,665.467 1547.38,693.856 1547.94,710.038 1548.5,660.026 1549.06,728.086 1549.62,756.048 1550.18,782.738 1550.73,792.981 1551.29,736.96 1551.85,732.083 1552.41,747.251 1552.97,744.219 1553.53,707.493 1554.09,705.805 1554.65,654.936 1555.21,692.181 1555.77,692.668 1556.33,724.15 1556.89,753.914 1557.45,767.062 1558,745.969 1558.56,726.806 1559.12,707.122 1559.68,707.842 1560.24,691.801 1560.8,674.649 1561.36,663.043 1561.92,670.475 1562.48,674.56 1563.04,691.392 1563.6,707.947 1564.16,739.012 1564.72,739.465 1565.28,754.213 1565.83,719.046 1566.39,729.934 1566.95,729.378 1567.51,725.457 1568.07,720.19 1568.63,682.669 1569.19,682.462 1569.75,665.982 1570.31,683.113 1570.87,698.424 1571.43,717.543 1571.99,716.061 1572.55,664.906 1573.1,665.501 1573.66,667.636 1574.22,649.489 1574.78,635.882 1575.34,638.347 1575.9,657.434 1576.46,641.612 1577.02,662.894 1577.58,648.069 1578.14,668.561 1578.7,703.295 1579.26,682.027 1579.82,714.873 1580.37,699.07 1580.93,715.712 1581.49,715.029 1582.05,712.679 1582.61,693.19 1583.17,677.374 1583.73,679.679 1584.29,697.508 1584.85,743.473 1585.41,739.93 1585.97,739.79 1586.53,721.4 1587.09,718.762 1587.65,716.407 1588.2,715.018 1588.76,728.158 1589.32,753.304 1589.88,749.284 1590.44,744.532 1591,725.139 1591.56,740.369 1592.12,703.28 1592.68,667.227 1593.24,663.074 1593.8,663.49 1594.36,663.541 1594.92,663.949 1595.47,695.999 1596.03,693.403 1596.59,675.147 1597.15,678.064 1597.71,680.887 1598.27,665.372 1598.83,649.339 1599.39,652.776 1599.95,639.376 1600.51,643.785 1601.07,646.143 1601.63,663.733 1602.19,682.626 1602.74,685.581 1603.3,653.038 1603.86,670.719 1604.42,687.454 1604.98,687.627 1605.54,668.047 1606.1,670.853 1606.66,674.414 1607.22,692.081 1607.78,655.695 1608.34,611.164 1608.9,611.918 1609.46,633.042 1610.02,636.38 1610.57,640.427 1611.13,660.45 1611.69,660.721 1612.25,692.911 1612.81,659.175 1613.37,679.572 1613.93,692.766 1614.49,711.878 1615.05,724.25 1615.61,739.86 1616.17,737.716 1616.73,769.46 1617.29,798.346 1617.84,808.301 1618.4,818.566 1618.96,828.504 1619.52,836.67 1620.08,844.22 1620.64,822.401 1621.2,833.809 1621.76,826.985 1622.32,815.053 1622.88,793.406 1623.44,769.275 1624,730.571 1624.56,711.863 1625.11,726.791 1625.67,740.608 1626.23,735.795 1626.79,749.922 1627.35,681.715 1627.91,697.664 1628.47,710.672 1629.03,741.282 1629.59,723.617 1630.15,718.147 1630.71,715.654 1631.27,677.678 1631.83,664.903 1632.39,663.527 1632.94,679.538 1633.5,646.532 1634.06,613.292 1634.62,588.394 1635.18,594.57 1635.74,552.569 1636.3,576.694 1636.86,534.143 1637.42,607.781 1637.98,561.16 1638.54,569.598 1639.1,575.141 1639.66,612.829 1640.21,632.36 1640.77,618.607 1641.33,604.782 1641.89,560.579 1642.45,535.772 1643.01,560.199 1643.57,563.582 1644.13,539.479 1644.69,578.246 1645.25,583.626 1645.81,526.846 1646.37,569.651 1646.93,591.445 1647.48,597.198 1648.04,635.655 1648.6,606.896 1649.16,627.089 1649.72,627.271 1650.28,630.535 1650.84,633.607 1651.4,637.29 1651.96,621.058 1652.52,652.594 1653.08,701.235 1653.64,683.999 1654.2,701.528 1654.76,682.783 1655.31,684.989 1655.87,717.584 1656.43,716.258 1656.99,714.672 1657.55,712.984 1658.11,711.299 1658.67,756.804 1659.23,755.457 1659.79,763.153 1660.35,761.452 1660.91,758.252 1661.47,735.22 1662.03,732.956 1662.58,730.853 1663.14,682.762 1663.7,681.794 1664.26,682.092 1664.82,713.729 1665.38,714.002 1665.94,698.157 1666.5,729.487 1667.06,697.366 1667.62,697.332 1668.18,697.969 1668.74,679.884 1669.3,698.372 1669.85,710.852 1670.41,708.065 1670.97,690.507 1671.53,694.047 1672.09,723.76 1672.65,692.319 1673.21,642.588 1673.77,661.008 1674.33,661.151 1674.89,712.261 1675.45,743.438 1676.01,740.554 1676.57,771.091 1677.13,766.619 1677.68,748.694 1678.24,764.478 1678.8,743.341 1679.36,754.564 1679.92,749.007 1680.48,760.534 1681.04,820.014 1681.6,825.88 1682.16,801.247 1682.72,795.085 1683.28,740.158 1683.84,707.78 1684.4,739.758 1684.95,689.531 1685.51,704.998 1686.07,653.33 1686.63,654.753 1687.19,657.583 1687.75,642.544 1688.31,645.167 1688.87,665.938 1689.43,684.926 1689.99,700.004 1690.55,666.368 1691.11,668.386 1691.67,656.818 1692.23,691.163 1692.78,687.23 1693.34,684.475 1693.9,667.326 1694.46,686.437 1695.02,692.31 1695.58,676.944 1696.14,676.777 1696.7,712.996 1697.26,748.327 1697.82,759.139 1698.38,771.548 1698.94,801.22 1699.5,761.962 1700.05,758.032 1700.61,739.225 1701.17,705.236 1701.73,705.297 1702.29,704.611 1702.85,717.331 1703.41,715.874 1703.97,711.417 1704.53,678.882 1705.09,680.23 1705.65,679.708 1706.21,696.052 1706.77,650.244 1707.32,671.072 1707.88,659.572 1708.44,677.959 1709,698.039 1709.56,701.236 1710.12,732.428 1710.68,758.179 1711.24,740.329 1711.8,737.516 1712.36,750.743 1712.92,763.285 1713.48,759.244 1714.04,739.382 1714.6,753.016 1715.15,747.988 1715.71,743.648 1716.27,739.62 1716.83,730.135 1717.39,727.093 1717.95,708.839 1718.51,674.951 1719.07,678.034 1719.63,694.69 1720.19,725.502 1720.75,724.635 1721.31,739.25 1721.87,703.944 1722.42,687.621 1722.98,687.956 1723.54,690.614 1724.1,673.099 1724.66,685.062 1725.22,636.495 1725.78,620.922 1726.34,623.133 1726.9,626.19 1727.46,615.917 1728.02,601.761 1728.58,589.746 1729.14,626.992 1729.69,629.236 1730.25,645.429 1730.81,666.247 1731.37,666.965 1731.93,684.053 1732.49,701.163 1733.05,717.63 1733.61,697.954 1734.17,697.462 1734.73,717.245 1735.29,717.579 1735.85,748.3 1736.41,710.759 1736.97,709.614 1737.52,691.082 1738.08,676.346 1738.64,676.374 1739.2,675.091 1739.76,644.599 1740.32,644.596 1740.88,631.264 1741.44,601.679 1742,589.634 1742.56,612.396 1743.12,630.952 1743.68,666.832 1744.24,647.286 1744.79,651.872 1745.35,635.289 1745.91,651.848 1746.47,637.717 1747.03,591.715 1747.59,567.346 1748.15,589.663 1748.71,629.067 1749.27,633.708 1749.83,637.413 1750.39,625.688 1750.95,626.733 1751.51,647.757 1752.06,636.36 1752.62,640.357 1753.18,660.246 1753.74,681.061 1754.3,715.319 1754.86,717.349 1755.42,696.27 1755.98,660.071 1756.54,678.669 1757.1,725.12 1757.66,707.386 1758.22,686.492 1758.78,682.583 1759.34,679.446 1759.89,695.133 1760.45,712.873 1761.01,698.461 1761.57,697.238 1762.13,714.361 1762.69,715.626 1763.25,701.105 1763.81,681.345 1764.37,648.881 1764.93,699.404 1765.49,683.503 1766.05,666.102 1766.61,702.179 1767.16,682.376 1767.72,719.395 1768.28,719.791 1768.84,702.801 1769.4,730.235 1769.96,761.563 1770.52,791.934 1771.08,769.267 1771.64,747.575 1772.2,761.936 1772.76,725.624 1773.32,738.883 1773.88,748.984 1774.43,728.38 1774.99,743.331 1775.55,724.277 1776.11,705.223 1776.67,670.498 1777.23,654.792 1777.79,673.797 1778.35,643.519 1778.91,662.959 1779.47,681.142 1780.03,683.098 1780.59,667.471 1781.15,670.369 1781.71,653.709 1782.26,656.605 1782.82,673.518 1783.38,688.843 1783.94,686.579 1784.5,687.489 1785.06,721.328 1785.62,704.89 1786.18,721.141 1786.74,684.778 1787.3,715.806 1787.86,743.211 1788.42,785.472 1788.98,793.968 1789.53,758.84 1790.09,740.256 1790.65,751.612 1791.21,749.419 1791.77,747.068 1792.33,760.722 1792.89,755.931 1793.45,783.791 1794.01,745.717 1794.57,726.631 1795.13,727.789 1795.69,708.935 1796.25,756.943 1796.8,753.788 1797.36,731.945 1797.92,730.262 1798.48,727.557 1799.04,720.469 1799.6,748.507 1800.16,745.386 1800.72,711.838 1801.28,711.227 1801.84,726.786 1802.4,742.953 1802.96,692.346 1803.52,640.05 1804.08,657.49 1804.63,674.923 1805.19,674.431 1805.75,674.602 1806.31,642.587 1806.87,627.008 1807.43,682.038 1807.99,697.427 1808.55,677.442 1809.11,726.043 1809.67,720.493 1810.23,702.642 1810.79,732.352 1811.35,709.202 1811.9,688.724 1812.46,689.675 1813.02,693.242 1813.58,695.965 1814.14,662.653 1814.7,679.102 1815.26,665.486 1815.82,651.084 1816.38,655.511 1816.94,688.166 1817.5,640.072 1818.06,646.135 1818.62,617.663 1819.18,618.628 1819.73,592.17 1820.29,580.841 1820.85,584.613 1821.41,573.119 1821.97,560.249 1822.53,565.656 1823.09,583.061 1823.65,571.132 1824.21,577.113 1824.77,586.868 1825.33,607.49 1825.89,578.431 1826.45,569.463 1827,606.486 1827.56,639.749 1828.12,660.571 1828.68,678.117 1829.24,695.087 1829.8,713.729 1830.36,714.695 1830.92,710.253 1831.48,788.347 1832.04,783.533 1832.6,762.772 1833.16,744.255 1833.72,743.892 1834.27,791.216 1834.83,785.056 1835.39,763.855 1835.95,740.402 1836.51,738.997 1837.07,722.806 1837.63,705.781 1838.19,670.693 \"/>\n<path clip-path=\"url(#clip933)\" d=\"M720.247 692.897 L720.806 692.897 L721.365 692.897 L721.924 692.897 L722.484 692.897 L723.043 692.897 L723.602 692.897 L724.161 692.897 L724.721 692.897 L725.28 692.897 L725.839 692.897 L726.398 692.897 L726.958 692.897 L727.517 692.897 L728.076 692.897 L728.635 692.897 L729.195 692.897 L729.754 692.897 L730.313 692.897 L730.872 692.897 L731.432 692.897 L731.991 692.897 L732.55 692.897 L733.109 692.897 L733.669 692.897 L734.228 692.897 L734.787 692.897 L735.346 692.897 L735.906 692.897 L736.465 692.897 L737.024 692.897 L737.583 692.897 L738.143 692.897 L738.702 692.897 L739.261 692.897 L739.82 692.897 L740.38 692.897 L740.939 692.897 L741.498 692.897 L742.057 692.897 L742.617 692.897 L743.176 692.897 L743.735 692.897 L744.294 692.897 L744.854 692.897 L745.413 692.897 L745.972 692.897 L746.531 692.897 L747.091 692.897 L747.65 692.897 L748.209 692.897 L748.768 692.897 L749.328 692.897 L749.887 692.897 L750.446 692.897 L751.005 692.897 L751.565 692.897 L752.124 692.897 L752.683 692.897 L753.242 692.897 L753.802 692.897 L754.361 692.897 L754.92 692.897 L755.479 692.897 L756.039 692.897 L756.598 692.897 L757.157 692.897 L757.716 692.897 L758.276 692.897 L758.835 692.897 L759.394 692.897 L759.953 692.897 L760.513 692.897 L761.072 692.897 L761.631 692.897 L762.19 692.897 L762.75 692.897 L763.309 692.897 L763.868 692.897 L764.427 692.897 L764.987 692.897 L765.546 692.897 L766.105 692.897 L766.664 692.897 L767.224 692.897 L767.783 692.897 L768.342 692.897 L768.901 692.897 L769.461 692.897 L770.02 692.897 L770.579 692.897 L771.138 692.897 L771.698 692.897 L772.257 692.897 L772.816 692.897 L773.375 692.897 L773.935 692.897 L774.494 692.897 L775.053 692.897 L775.612 692.897 L776.172 692.897 L776.731 692.897 L777.29 692.897 L777.849 692.897 L778.409 692.897 L778.968 692.897 L779.527 692.897 L780.086 692.897 L780.646 692.897 L781.205 692.897 L781.764 692.897 L782.323 692.897 L782.883 692.897 L783.442 692.897 L784.001 692.897 L784.56 692.897 L785.12 692.897 L785.679 692.897 L786.238 692.897 L786.797 692.897 L787.357 692.897 L787.916 692.897 L788.475 692.897 L789.034 692.897 L789.594 692.897 L790.153 692.897 L790.712 692.897 L791.271 692.897 L791.831 692.897 L792.39 692.897 L792.949 692.897 L793.508 692.897 L794.068 692.897 L794.627 692.897 L795.186 692.897 L795.745 692.897 L796.305 692.897 L796.864 692.897 L797.423 692.897 L797.982 692.897 L798.542 692.897 L799.101 692.897 L799.66 692.897 L800.219 692.897 L800.779 692.897 L801.338 692.897 L801.897 692.897 L802.456 692.897 L803.016 692.897 L803.575 692.897 L804.134 692.897 L804.693 692.897 L805.253 692.897 L805.812 692.897 L806.371 692.897 L806.931 692.897 L807.49 692.897 L808.049 692.897 L808.608 692.897 L809.168 692.897 L809.727 692.897 L810.286 692.897 L810.845 692.897 L811.405 692.897 L811.964 692.897 L812.523 692.897 L813.082 692.897 L813.642 692.897 L814.201 692.897 L814.76 692.897 L815.319 692.897 L815.879 692.897 L816.438 692.897 L816.997 692.897 L817.556 692.897 L818.116 692.897 L818.675 692.897 L819.234 692.897 L819.793 692.897 L820.353 692.897 L820.912 692.897 L821.471 692.897 L822.03 692.897 L822.59 692.897 L823.149 692.897 L823.708 692.897 L824.267 692.897 L824.827 692.897 L825.386 692.897 L825.945 692.897 L826.504 692.897 L827.064 692.897 L827.623 692.897 L828.182 692.897 L828.741 692.897 L829.301 692.897 L829.86 692.897 L830.419 692.897 L830.978 692.897 L831.538 692.897 L832.097 692.897 L832.656 692.897 L833.215 692.897 L833.775 692.897 L834.334 692.897 L834.893 692.897 L835.452 692.897 L836.012 692.897 L836.571 692.897 L837.13 692.897 L837.689 692.897 L838.249 692.897 L838.808 692.897 L839.367 692.897 L839.926 692.897 L840.486 692.897 L841.045 692.897 L841.604 692.897 L842.163 692.897 L842.723 692.897 L843.282 692.897 L843.841 692.897 L844.4 692.897 L844.96 692.897 L845.519 692.897 L846.078 692.897 L846.637 692.897 L847.197 692.897 L847.756 692.897 L848.315 692.897 L848.874 692.897 L849.434 692.897 L849.993 692.897 L850.552 692.897 L851.111 692.897 L851.671 692.897 L852.23 692.897 L852.789 692.897 L853.348 692.897 L853.908 692.897 L854.467 692.897 L855.026 692.897 L855.585 692.897 L856.145 692.897 L856.704 692.897 L857.263 692.897 L857.822 692.897 L858.382 692.897 L858.941 692.897 L859.5 692.897 L860.059 692.897 L860.619 692.897 L861.178 692.897 L861.737 692.897 L862.296 692.897 L862.856 692.897 L863.415 692.897 L863.974 692.897 L864.533 692.897 L865.093 692.897 L865.652 692.897 L866.211 692.897 L866.77 692.897 L867.33 692.897 L867.889 692.897 L868.448 692.897 L869.007 692.897 L869.567 692.897 L870.126 692.897 L870.685 692.897 L871.244 692.897 L871.804 692.897 L872.363 692.897 L872.922 692.897 L873.481 692.897 L874.041 692.897 L874.6 692.897 L875.159 692.897 L875.718 692.897 L876.278 692.897 L876.837 692.897 L877.396 692.897 L877.955 692.897 L878.515 692.897 L879.074 692.897 L879.633 692.897 L880.192 692.897 L880.752 692.897 L881.311 692.897 L881.87 692.897 L882.429 692.897 L882.989 692.897 L883.548 692.897 L884.107 692.897 L884.666 692.897 L885.226 692.897 L885.785 692.897 L886.344 692.897 L886.903 692.897 L887.463 692.897 L888.022 692.897 L888.581 692.897 L889.14 692.897 L889.7 692.897 L890.259 692.897 L890.818 692.897 L891.377 692.897 L891.937 692.897 L892.496 692.897 L893.055 692.897 L893.614 692.897 L894.174 692.897 L894.733 692.897 L895.292 692.897 L895.851 692.897 L896.411 692.897 L896.97 692.897 L897.529 692.897 L898.088 692.897 L898.648 692.897 L899.207 692.897 L899.766 692.897 L900.325 692.897 L900.885 692.897 L901.444 692.897 L902.003 692.897 L902.562 692.897 L903.122 692.897 L903.681 692.897 L904.24 692.897 L904.799 692.897 L905.359 692.897 L905.918 692.897 L906.477 692.897 L907.036 692.897 L907.596 692.897 L908.155 692.897 L908.714 692.897 L909.273 692.897 L909.833 692.897 L910.392 692.897 L910.951 692.897 L911.51 692.897 L912.07 692.897 L912.629 692.897 L913.188 692.897 L913.747 692.897 L914.307 692.897 L914.866 692.897 L915.425 692.897 L915.984 692.897 L916.544 692.897 L917.103 692.897 L917.662 692.897 L918.221 692.897 L918.781 692.897 L919.34 692.897 L919.899 692.897 L920.458 692.897 L921.018 692.897 L921.577 692.897 L922.136 692.897 L922.695 692.897 L923.255 692.897 L923.814 692.897 L924.373 692.897 L924.932 692.897 L925.492 692.897 L926.051 692.897 L926.61 692.897 L927.169 692.897 L927.729 692.897 L928.288 692.897 L928.847 692.897 L929.406 692.897 L929.966 692.897 L930.525 692.897 L931.084 692.897 L931.644 692.897 L932.203 692.897 L932.762 692.897 L933.321 692.897 L933.881 692.897 L934.44 692.897 L934.999 692.897 L935.558 692.897 L936.118 692.897 L936.677 692.897 L937.236 692.897 L937.795 692.897 L938.355 692.897 L938.914 692.897 L939.473 692.897 L940.032 692.897 L940.592 692.897 L941.151 692.897 L941.71 692.897 L942.269 692.897 L942.829 692.897 L943.388 692.897 L943.947 692.897 L944.506 692.897 L945.066 692.897 L945.625 692.897 L946.184 692.897 L946.743 692.897 L947.303 692.897 L947.862 692.897 L948.421 692.897 L948.98 692.897 L949.54 692.897 L950.099 692.897 L950.658 692.897 L951.217 692.897 L951.777 692.897 L952.336 692.897 L952.895 692.897 L953.454 692.897 L954.014 692.897 L954.573 692.897 L955.132 692.897 L955.691 692.897 L956.251 692.897 L956.81 692.897 L957.369 692.897 L957.928 692.897 L958.488 692.897 L959.047 692.897 L959.606 692.897 L960.165 692.897 L960.725 692.897 L961.284 692.897 L961.843 692.897 L962.402 692.897 L962.962 692.897 L963.521 692.897 L964.08 692.897 L964.639 692.897 L965.199 692.897 L965.758 692.897 L966.317 692.897 L966.876 692.897 L967.436 692.897 L967.995 692.897 L968.554 692.897 L969.113 692.897 L969.673 692.897 L970.232 692.897 L970.791 692.897 L971.35 692.897 L971.91 692.897 L972.469 692.897 L973.028 692.897 L973.587 692.897 L974.147 692.897 L974.706 692.897 L975.265 692.897 L975.824 692.897 L976.384 692.897 L976.943 692.897 L977.502 692.897 L978.061 692.897 L978.621 692.897 L979.18 692.897 L979.739 692.897 L980.298 692.897 L980.858 692.897 L981.417 692.897 L981.976 692.897 L982.535 692.897 L983.095 692.897 L983.654 692.897 L984.213 692.897 L984.772 692.897 L985.332 692.897 L985.891 692.897 L986.45 692.897 L987.009 692.897 L987.569 692.897 L988.128 692.897 L988.687 692.897 L989.246 692.897 L989.806 692.897 L990.365 692.897 L990.924 692.897 L991.483 692.897 L992.043 692.897 L992.602 692.897 L993.161 692.897 L993.72 692.897 L994.28 692.897 L994.839 692.897 L995.398 692.897 L995.957 692.897 L996.517 692.897 L997.076 692.897 L997.635 692.897 L998.194 692.897 L998.754 692.897 L999.313 692.897 L999.872 692.897 L1000.43 692.897 L1000.99 692.897 L1001.55 692.897 L1002.11 692.897 L1002.67 692.897 L1003.23 692.897 L1003.79 692.897 L1004.35 692.897 L1004.91 692.897 L1005.46 692.897 L1006.02 692.897 L1006.58 692.897 L1007.14 692.897 L1007.7 692.897 L1008.26 692.897 L1008.82 692.897 L1009.38 692.897 L1009.94 692.897 L1010.5 692.897 L1011.06 692.897 L1011.62 692.897 L1012.18 692.897 L1012.73 692.897 L1013.29 692.897 L1013.85 692.897 L1014.41 692.897 L1014.97 692.897 L1015.53 692.897 L1016.09 692.897 L1016.65 692.897 L1017.21 692.897 L1017.77 692.897 L1018.33 692.897 L1018.89 692.897 L1019.45 692.897 L1020.01 692.897 L1020.56 692.897 L1021.12 692.897 L1021.68 692.897 L1022.24 692.897 L1022.8 692.897 L1023.36 692.897 L1023.92 692.897 L1024.48 692.897 L1025.04 692.897 L1025.6 692.897 L1026.16 692.897 L1026.72 692.897 L1027.28 692.897 L1027.83 692.897 L1028.39 692.897 L1028.95 692.897 L1029.51 692.897 L1030.07 692.897 L1030.63 692.897 L1031.19 692.897 L1031.75 692.897 L1032.31 692.897 L1032.87 692.897 L1033.43 692.897 L1033.99 692.897 L1034.55 692.897 L1035.1 692.897 L1035.66 692.897 L1036.22 692.897 L1036.78 692.897 L1037.34 692.897 L1037.9 692.897 L1038.46 692.897 L1039.02 692.897 L1039.58 692.897 L1040.14 692.897 L1040.7 692.897 L1041.26 692.897 L1041.82 692.897 L1042.38 692.897 L1042.93 692.897 L1043.49 692.897 L1044.05 692.897 L1044.61 692.897 L1045.17 692.897 L1045.73 692.897 L1046.29 692.897 L1046.85 692.897 L1047.41 692.897 L1047.97 692.897 L1048.53 692.897 L1049.09 692.897 L1049.65 692.897 L1050.2 692.897 L1050.76 692.897 L1051.32 692.897 L1051.88 692.897 L1052.44 692.897 L1053 692.897 L1053.56 692.897 L1054.12 692.897 L1054.68 692.897 L1055.24 692.897 L1055.8 692.897 L1056.36 692.897 L1056.92 692.897 L1057.48 692.897 L1058.03 692.897 L1058.59 692.897 L1059.15 692.897 L1059.71 692.897 L1060.27 692.897 L1060.83 692.897 L1061.39 692.897 L1061.95 692.897 L1062.51 692.897 L1063.07 692.897 L1063.63 692.897 L1064.19 692.897 L1064.75 692.897 L1065.3 692.897 L1065.86 692.897 L1066.42 692.897 L1066.98 692.897 L1067.54 692.897 L1068.1 692.897 L1068.66 692.897 L1069.22 692.897 L1069.78 692.897 L1070.34 692.897 L1070.9 692.897 L1071.46 692.897 L1072.02 692.897 L1072.57 692.897 L1073.13 692.897 L1073.69 692.897 L1074.25 692.897 L1074.81 692.897 L1075.37 692.897 L1075.93 692.897 L1076.49 692.897 L1077.05 692.897 L1077.61 692.897 L1078.17 692.897 L1078.73 692.897 L1079.29 692.897 L1079.85 692.897 L1080.4 692.897 L1080.96 692.897 L1081.52 692.897 L1082.08 692.897 L1082.64 692.897 L1083.2 692.897 L1083.76 692.897 L1084.32 692.897 L1084.88 692.897 L1085.44 692.897 L1086 692.897 L1086.56 692.897 L1087.12 692.897 L1087.67 692.897 L1088.23 692.897 L1088.79 692.897 L1089.35 692.897 L1089.91 692.897 L1090.47 692.897 L1091.03 692.897 L1091.59 692.897 L1092.15 692.897 L1092.71 692.897 L1093.27 692.897 L1093.83 692.897 L1094.39 692.897 L1094.94 692.897 L1095.5 692.897 L1096.06 692.897 L1096.62 692.897 L1097.18 692.897 L1097.74 692.897 L1098.3 692.897 L1098.86 692.897 L1099.42 692.897 L1099.98 692.897 L1100.54 692.897 L1101.1 692.897 L1101.66 692.897 L1102.22 692.897 L1102.77 692.897 L1103.33 692.897 L1103.89 692.897 L1104.45 692.897 L1105.01 692.897 L1105.57 692.897 L1106.13 692.897 L1106.69 692.897 L1107.25 692.897 L1107.81 692.897 L1108.37 692.897 L1108.93 692.897 L1109.49 692.897 L1110.04 692.897 L1110.6 692.897 L1111.16 692.897 L1111.72 692.897 L1112.28 692.897 L1112.84 692.897 L1113.4 692.897 L1113.96 692.897 L1114.52 692.897 L1115.08 692.897 L1115.64 692.897 L1116.2 692.897 L1116.76 692.897 L1117.31 692.897 L1117.87 692.897 L1118.43 692.897 L1118.99 692.897 L1119.55 692.897 L1120.11 692.897 L1120.67 692.897 L1121.23 692.897 L1121.79 692.897 L1122.35 692.897 L1122.91 692.897 L1123.47 692.897 L1124.03 692.897 L1124.59 692.897 L1125.14 692.897 L1125.7 692.897 L1126.26 692.897 L1126.82 692.897 L1127.38 692.897 L1127.94 692.897 L1128.5 692.897 L1129.06 692.897 L1129.62 692.897 L1130.18 692.897 L1130.74 692.897 L1131.3 692.897 L1131.86 692.897 L1132.41 692.897 L1132.97 692.897 L1133.53 692.897 L1134.09 692.897 L1134.65 692.897 L1135.21 692.897 L1135.77 692.897 L1136.33 692.897 L1136.89 692.897 L1137.45 692.897 L1138.01 692.897 L1138.57 692.897 L1139.13 692.897 L1139.68 692.897 L1140.24 692.897 L1140.8 692.897 L1141.36 692.897 L1141.92 692.897 L1142.48 692.897 L1143.04 692.897 L1143.6 692.897 L1144.16 692.897 L1144.72 692.897 L1145.28 692.897 L1145.84 692.897 L1146.4 692.897 L1146.96 692.897 L1147.51 692.897 L1148.07 692.897 L1148.63 692.897 L1149.19 692.897 L1149.75 692.897 L1150.31 692.897 L1150.87 692.897 L1151.43 692.897 L1151.99 692.897 L1152.55 692.897 L1153.11 692.897 L1153.67 692.897 L1154.23 692.897 L1154.78 692.897 L1155.34 692.897 L1155.9 692.897 L1156.46 692.897 L1157.02 692.897 L1157.58 692.897 L1158.14 692.897 L1158.7 692.897 L1159.26 692.897 L1159.82 692.897 L1160.38 692.897 L1160.94 692.897 L1161.5 692.897 L1162.05 692.897 L1162.61 692.897 L1163.17 692.897 L1163.73 692.897 L1164.29 692.897 L1164.85 692.897 L1165.41 692.897 L1165.97 692.897 L1166.53 692.897 L1167.09 692.897 L1167.65 692.897 L1168.21 692.897 L1168.77 692.897 L1169.33 692.897 L1169.88 692.897 L1170.44 692.897 L1171 692.897 L1171.56 692.897 L1172.12 692.897 L1172.68 692.897 L1173.24 692.897 L1173.8 692.897 L1174.36 692.897 L1174.92 692.897 L1175.48 692.897 L1176.04 692.897 L1176.6 692.897 L1177.15 692.897 L1177.71 692.897 L1178.27 692.897 L1178.83 692.897 L1179.39 692.897 L1179.95 692.897 L1180.51 692.897 L1181.07 692.897 L1181.63 692.897 L1182.19 692.897 L1182.75 692.897 L1183.31 692.897 L1183.87 692.897 L1184.43 692.897 L1184.98 692.897 L1185.54 692.897 L1186.1 692.897 L1186.66 692.897 L1187.22 692.897 L1187.78 692.897 L1188.34 692.897 L1188.9 692.897 L1189.46 692.897 L1190.02 692.897 L1190.58 692.897 L1191.14 692.897 L1191.7 692.897 L1192.25 692.897 L1192.81 692.897 L1193.37 692.897 L1193.93 692.897 L1194.49 692.897 L1195.05 692.897 L1195.61 692.897 L1196.17 692.897 L1196.73 692.897 L1197.29 692.897 L1197.85 692.897 L1198.41 692.897 L1198.97 692.897 L1199.52 692.897 L1200.08 692.897 L1200.64 692.897 L1201.2 692.897 L1201.76 692.897 L1202.32 692.897 L1202.88 692.897 L1203.44 692.897 L1204 692.897 L1204.56 692.897 L1205.12 692.897 L1205.68 692.897 L1206.24 692.897 L1206.8 692.897 L1207.35 692.897 L1207.91 692.897 L1208.47 692.897 L1209.03 692.897 L1209.59 692.897 L1210.15 692.897 L1210.71 692.897 L1211.27 692.897 L1211.83 692.897 L1212.39 692.897 L1212.95 692.897 L1213.51 692.897 L1214.07 692.897 L1214.62 692.897 L1215.18 692.897 L1215.74 692.897 L1216.3 692.897 L1216.86 692.897 L1217.42 692.897 L1217.98 692.897 L1218.54 692.897 L1219.1 692.897 L1219.66 692.897 L1220.22 692.897 L1220.78 692.897 L1221.34 692.897 L1221.89 692.897 L1222.45 692.897 L1223.01 692.897 L1223.57 692.897 L1224.13 692.897 L1224.69 692.897 L1225.25 692.897 L1225.81 692.897 L1226.37 692.897 L1226.93 692.897 L1227.49 692.897 L1228.05 692.897 L1228.61 692.897 L1229.17 692.897 L1229.72 692.897 L1230.28 692.897 L1230.84 692.897 L1231.4 692.897 L1231.96 692.897 L1232.52 692.897 L1233.08 692.897 L1233.64 692.897 L1234.2 692.897 L1234.76 692.897 L1235.32 692.897 L1235.88 692.897 L1236.44 692.897 L1236.99 692.897 L1237.55 692.897 L1238.11 692.897 L1238.67 692.897 L1239.23 692.897 L1239.79 692.897 L1240.35 692.897 L1240.91 692.897 L1241.47 692.897 L1242.03 692.897 L1242.59 692.897 L1243.15 692.897 L1243.71 692.897 L1244.26 692.897 L1244.82 692.897 L1245.38 692.897 L1245.94 692.897 L1246.5 692.897 L1247.06 692.897 L1247.62 692.897 L1248.18 692.897 L1248.74 692.897 L1249.3 692.897 L1249.86 692.897 L1250.42 692.897 L1250.98 692.897 L1251.54 692.897 L1252.09 692.897 L1252.65 692.897 L1253.21 692.897 L1253.77 692.897 L1254.33 692.897 L1254.89 692.897 L1255.45 692.897 L1256.01 692.897 L1256.57 692.897 L1257.13 692.897 L1257.69 692.897 L1258.25 692.897 L1258.81 692.897 L1259.36 692.897 L1259.92 692.897 L1260.48 692.897 L1261.04 692.897 L1261.6 692.897 L1262.16 692.897 L1262.72 692.897 L1263.28 692.897 L1263.84 692.897 L1264.4 692.897 L1264.96 692.897 L1265.52 692.897 L1266.08 692.897 L1266.63 692.897 L1267.19 692.897 L1267.75 692.897 L1268.31 692.897 L1268.87 692.897 L1269.43 692.897 L1269.99 692.897 L1270.55 692.897 L1271.11 692.897 L1271.67 692.897 L1272.23 692.897 L1272.79 692.897 L1273.35 692.897 L1273.91 692.897 L1274.46 692.897 L1275.02 692.897 L1275.58 692.897 L1276.14 692.897 L1276.7 692.897 L1277.26 692.897 L1277.82 692.897 L1278.38 692.897 L1278.94 692.897 L1279.5 692.897 L1280.06 692.897 L1280.62 692.897 L1281.18 692.897 L1281.73 692.897 L1282.29 692.897 L1282.85 692.897 L1283.41 692.897 L1283.97 692.897 L1284.53 692.897 L1285.09 692.897 L1285.65 692.897 L1286.21 692.897 L1286.77 692.897 L1287.33 692.897 L1287.89 692.897 L1288.45 692.897 L1289 692.897 L1289.56 692.897 L1290.12 692.897 L1290.68 692.897 L1291.24 692.897 L1291.8 692.897 L1292.36 692.897 L1292.92 692.897 L1293.48 692.897 L1294.04 692.897 L1294.6 692.897 L1295.16 692.897 L1295.72 692.897 L1296.28 692.897 L1296.83 692.897 L1297.39 692.897 L1297.95 692.897 L1298.51 692.897 L1299.07 692.897 L1299.63 692.897 L1300.19 692.897 L1300.75 692.897 L1301.31 692.897 L1301.87 692.897 L1302.43 692.897 L1302.99 692.897 L1303.55 692.897 L1304.1 692.897 L1304.66 692.897 L1305.22 692.897 L1305.78 692.897 L1306.34 692.897 L1306.9 692.897 L1307.46 692.897 L1308.02 692.897 L1308.58 692.897 L1309.14 692.897 L1309.7 692.897 L1310.26 692.897 L1310.82 692.897 L1311.38 692.897 L1311.93 692.897 L1312.49 692.897 L1313.05 692.897 L1313.61 692.897 L1314.17 692.897 L1314.73 692.897 L1315.29 692.897 L1315.85 692.897 L1316.41 692.897 L1316.97 692.897 L1317.53 692.897 L1318.09 692.897 L1318.65 692.897 L1319.2 692.897 L1319.76 692.897 L1320.32 692.897 L1320.88 692.897 L1321.44 692.897 L1322 692.897 L1322.56 692.897 L1323.12 692.897 L1323.68 692.897 L1324.24 692.897 L1324.8 692.897 L1325.36 692.897 L1325.92 692.897 L1326.47 692.897 L1327.03 692.897 L1327.59 692.897 L1328.15 692.897 L1328.71 692.897 L1329.27 692.897 L1329.83 692.897 L1330.39 692.897 L1330.95 692.897 L1331.51 692.897 L1332.07 692.897 L1332.63 692.897 L1333.19 692.897 L1333.75 692.897 L1334.3 692.897 L1334.86 692.897 L1335.42 692.897 L1335.98 692.897 L1336.54 692.897 L1337.1 692.897 L1337.66 692.897 L1338.22 692.897 L1338.78 692.897 L1339.34 692.897 L1339.9 692.897 L1340.46 692.897 L1341.02 692.897 L1341.57 692.897 L1342.13 692.897 L1342.69 692.897 L1343.25 692.897 L1343.81 692.897 L1344.37 692.897 L1344.93 692.897 L1345.49 692.897 L1346.05 692.897 L1346.61 692.897 L1347.17 692.897 L1347.73 692.897 L1348.29 692.897 L1348.84 692.897 L1349.4 692.897 L1349.96 692.897 L1350.52 692.897 L1351.08 692.897 L1351.64 692.897 L1352.2 692.897 L1352.76 692.897 L1353.32 692.897 L1353.88 692.897 L1354.44 692.897 L1355 692.897 L1355.56 692.897 L1356.12 692.897 L1356.67 692.897 L1357.23 692.897 L1357.79 692.897 L1358.35 692.897 L1358.91 692.897 L1359.47 692.897 L1360.03 692.897 L1360.59 692.897 L1361.15 692.897 L1361.71 692.897 L1362.27 692.897 L1362.83 692.897 L1363.39 692.897 L1363.94 692.897 L1364.5 692.897 L1365.06 692.897 L1365.62 692.897 L1366.18 692.897 L1366.74 692.897 L1367.3 692.897 L1367.86 692.897 L1368.42 692.897 L1368.98 692.897 L1369.54 692.897 L1370.1 692.897 L1370.66 692.897 L1371.21 692.897 L1371.77 692.897 L1372.33 692.897 L1372.89 692.897 L1373.45 692.897 L1374.01 692.897 L1374.57 692.897 L1375.13 692.897 L1375.69 692.897 L1376.25 692.897 L1376.81 692.897 L1377.37 692.897 L1377.93 692.897 L1378.49 692.897 L1379.04 692.897 L1379.6 692.897 L1380.16 692.897 L1380.72 692.897 L1381.28 692.897 L1381.84 692.897 L1382.4 692.897 L1382.96 692.897 L1383.52 692.897 L1384.08 692.897 L1384.64 692.897 L1385.2 692.897 L1385.76 692.897 L1386.31 692.897 L1386.87 692.897 L1387.43 692.897 L1387.99 692.897 L1388.55 692.897 L1389.11 692.897 L1389.67 692.897 L1390.23 692.897 L1390.79 692.897 L1391.35 692.897 L1391.91 692.897 L1392.47 692.897 L1393.03 692.897 L1393.58 692.897 L1394.14 692.897 L1394.7 692.897 L1395.26 692.897 L1395.82 692.897 L1396.38 692.897 L1396.94 692.897 L1397.5 692.897 L1398.06 692.897 L1398.62 692.897 L1399.18 692.897 L1399.74 692.897 L1400.3 692.897 L1400.86 692.897 L1401.41 692.897 L1401.97 692.897 L1402.53 692.897 L1403.09 692.897 L1403.65 692.897 L1404.21 692.897 L1404.77 692.897 L1405.33 692.897 L1405.89 692.897 L1406.45 692.897 L1407.01 692.897 L1407.57 692.897 L1408.13 692.897 L1408.68 692.897 L1409.24 692.897 L1409.8 692.897 L1410.36 692.897 L1410.92 692.897 L1411.48 692.897 L1412.04 692.897 L1412.6 692.897 L1413.16 692.897 L1413.72 692.897 L1414.28 692.897 L1414.84 692.897 L1415.4 692.897 L1415.95 692.897 L1416.51 692.897 L1417.07 692.897 L1417.63 692.897 L1418.19 692.897 L1418.75 692.897 L1419.31 692.897 L1419.87 692.897 L1420.43 692.897 L1420.99 692.897 L1421.55 692.897 L1422.11 692.897 L1422.67 692.897 L1423.23 692.897 L1423.78 692.897 L1424.34 692.897 L1424.9 692.897 L1425.46 692.897 L1426.02 692.897 L1426.58 692.897 L1427.14 692.897 L1427.7 692.897 L1428.26 692.897 L1428.82 692.897 L1429.38 692.897 L1429.94 692.897 L1430.5 692.897 L1431.05 692.897 L1431.61 692.897 L1432.17 692.897 L1432.73 692.897 L1433.29 692.897 L1433.85 692.897 L1434.41 692.897 L1434.97 692.897 L1435.53 692.897 L1436.09 692.897 L1436.65 692.897 L1437.21 692.897 L1437.77 692.897 L1438.33 692.897 L1438.88 692.897 L1439.44 692.897 L1440 692.897 L1440.56 692.897 L1441.12 692.897 L1441.68 692.897 L1442.24 692.897 L1442.8 692.897 L1443.36 692.897 L1443.92 692.897 L1444.48 692.897 L1445.04 692.897 L1445.6 692.897 L1446.15 692.897 L1446.71 692.897 L1447.27 692.897 L1447.83 692.897 L1448.39 692.897 L1448.95 692.897 L1449.51 692.897 L1450.07 692.897 L1450.63 692.897 L1451.19 692.897 L1451.75 692.897 L1452.31 692.897 L1452.87 692.897 L1453.42 692.897 L1453.98 692.897 L1454.54 692.897 L1455.1 692.897 L1455.66 692.897 L1456.22 692.897 L1456.78 692.897 L1457.34 692.897 L1457.9 692.897 L1458.46 692.897 L1459.02 692.897 L1459.58 692.897 L1460.14 692.897 L1460.7 692.897 L1461.25 692.897 L1461.81 692.897 L1462.37 692.897 L1462.93 692.897 L1463.49 692.897 L1464.05 692.897 L1464.61 692.897 L1465.17 692.897 L1465.73 692.897 L1466.29 692.897 L1466.85 692.897 L1467.41 692.897 L1467.97 692.897 L1468.52 692.897 L1469.08 692.897 L1469.64 692.897 L1470.2 692.897 L1470.76 692.897 L1471.32 692.897 L1471.88 692.897 L1472.44 692.897 L1473 692.897 L1473.56 692.897 L1474.12 692.897 L1474.68 692.897 L1475.24 692.897 L1475.79 692.897 L1476.35 692.897 L1476.91 692.897 L1477.47 692.897 L1478.03 692.897 L1478.59 692.897 L1479.15 692.897 L1479.71 692.897 L1480.27 692.897 L1480.83 692.897 L1481.39 692.897 L1481.95 692.897 L1482.51 692.897 L1483.07 692.897 L1483.62 692.897 L1484.18 692.897 L1484.74 692.897 L1485.3 692.897 L1485.86 692.897 L1486.42 692.897 L1486.98 692.897 L1487.54 692.897 L1488.1 692.897 L1488.66 692.897 L1489.22 692.897 L1489.78 692.897 L1490.34 692.897 L1490.89 692.897 L1491.45 692.897 L1492.01 692.897 L1492.57 692.897 L1493.13 692.897 L1493.69 692.897 L1494.25 692.897 L1494.81 692.897 L1495.37 692.897 L1495.93 692.897 L1496.49 692.897 L1497.05 692.897 L1497.61 692.897 L1498.16 692.897 L1498.72 692.897 L1499.28 692.897 L1499.84 692.897 L1500.4 692.897 L1500.96 692.897 L1501.52 692.897 L1502.08 692.897 L1502.64 692.897 L1503.2 692.897 L1503.76 692.897 L1504.32 692.897 L1504.88 692.897 L1505.44 692.897 L1505.99 692.897 L1506.55 692.897 L1507.11 692.897 L1507.67 692.897 L1508.23 692.897 L1508.79 692.897 L1509.35 692.897 L1509.91 692.897 L1510.47 692.897 L1511.03 692.897 L1511.59 692.897 L1512.15 692.897 L1512.71 692.897 L1513.26 692.897 L1513.82 692.897 L1514.38 692.897 L1514.94 692.897 L1515.5 692.897 L1516.06 692.897 L1516.62 692.897 L1517.18 692.897 L1517.74 692.897 L1518.3 692.897 L1518.86 692.897 L1519.42 692.897 L1519.98 692.897 L1520.53 692.897 L1521.09 692.897 L1521.65 692.897 L1522.21 692.897 L1522.77 692.897 L1523.33 692.897 L1523.89 692.897 L1524.45 692.897 L1525.01 692.897 L1525.57 692.897 L1526.13 692.897 L1526.69 692.897 L1527.25 692.897 L1527.81 692.897 L1528.36 692.897 L1528.92 692.897 L1529.48 692.897 L1530.04 692.897 L1530.6 692.897 L1531.16 692.897 L1531.72 692.897 L1532.28 692.897 L1532.84 692.897 L1533.4 692.897 L1533.96 692.897 L1534.52 692.897 L1535.08 692.897 L1535.63 692.897 L1536.19 692.897 L1536.75 692.897 L1537.31 692.897 L1537.87 692.897 L1538.43 692.897 L1538.99 692.897 L1539.55 692.897 L1540.11 692.897 L1540.67 692.897 L1541.23 692.897 L1541.79 692.897 L1542.35 692.897 L1542.9 692.897 L1543.46 692.897 L1544.02 692.897 L1544.58 692.897 L1545.14 692.897 L1545.7 692.897 L1546.26 692.897 L1546.82 692.897 L1547.38 692.897 L1547.94 692.897 L1548.5 692.897 L1549.06 692.897 L1549.62 692.897 L1550.18 692.897 L1550.73 692.897 L1551.29 692.897 L1551.85 692.897 L1552.41 692.897 L1552.97 692.897 L1553.53 692.897 L1554.09 692.897 L1554.65 692.897 L1555.21 692.897 L1555.77 692.897 L1556.33 692.897 L1556.89 692.897 L1557.45 692.897 L1558 692.897 L1558.56 692.897 L1559.12 692.897 L1559.68 692.897 L1560.24 692.897 L1560.8 692.897 L1561.36 692.897 L1561.92 692.897 L1562.48 692.897 L1563.04 692.897 L1563.6 692.897 L1564.16 692.897 L1564.72 692.897 L1565.28 692.897 L1565.83 692.897 L1566.39 692.897 L1566.95 692.897 L1567.51 692.897 L1568.07 692.897 L1568.63 692.897 L1569.19 692.897 L1569.75 692.897 L1570.31 692.897 L1570.87 692.897 L1571.43 692.897 L1571.99 692.897 L1572.55 692.897 L1573.1 692.897 L1573.66 692.897 L1574.22 692.897 L1574.78 692.897 L1575.34 692.897 L1575.9 692.897 L1576.46 692.897 L1577.02 692.897 L1577.58 692.897 L1578.14 692.897 L1578.7 692.897 L1579.26 692.897 L1579.82 692.897 L1580.37 692.897 L1580.93 692.897 L1581.49 692.897 L1582.05 692.897 L1582.61 692.897 L1583.17 692.897 L1583.73 692.897 L1584.29 692.897 L1584.85 692.897 L1585.41 692.897 L1585.97 692.897 L1586.53 692.897 L1587.09 692.897 L1587.65 692.897 L1588.2 692.897 L1588.76 692.897 L1589.32 692.897 L1589.88 692.897 L1590.44 692.897 L1591 692.897 L1591.56 692.897 L1592.12 692.897 L1592.68 692.897 L1593.24 692.897 L1593.8 692.897 L1594.36 692.897 L1594.92 692.897 L1595.47 692.897 L1596.03 692.897 L1596.59 692.897 L1597.15 692.897 L1597.71 692.897 L1598.27 692.897 L1598.83 692.897 L1599.39 692.897 L1599.95 692.897 L1600.51 692.897 L1601.07 692.897 L1601.63 692.897 L1602.19 692.897 L1602.74 692.897 L1603.3 692.897 L1603.86 692.897 L1604.42 692.897 L1604.98 692.897 L1605.54 692.897 L1606.1 692.897 L1606.66 692.897 L1607.22 692.897 L1607.78 692.897 L1608.34 692.897 L1608.9 692.897 L1609.46 692.897 L1610.02 692.897 L1610.57 692.897 L1611.13 692.897 L1611.69 692.897 L1612.25 692.897 L1612.81 692.897 L1613.37 692.897 L1613.93 692.897 L1614.49 692.897 L1615.05 692.897 L1615.61 692.897 L1616.17 692.897 L1616.73 692.897 L1617.29 692.897 L1617.84 692.897 L1618.4 692.897 L1618.96 692.897 L1619.52 692.897 L1620.08 692.897 L1620.64 692.897 L1621.2 692.897 L1621.76 692.897 L1622.32 692.897 L1622.88 692.897 L1623.44 692.897 L1624 692.897 L1624.56 692.897 L1625.11 692.897 L1625.67 692.897 L1626.23 692.897 L1626.79 692.897 L1627.35 692.897 L1627.91 692.897 L1628.47 692.897 L1629.03 692.897 L1629.59 692.897 L1630.15 692.897 L1630.71 692.897 L1631.27 692.897 L1631.83 692.897 L1632.39 692.897 L1632.94 692.897 L1633.5 692.897 L1634.06 692.897 L1634.62 692.897 L1635.18 692.897 L1635.74 692.897 L1636.3 692.897 L1636.86 692.897 L1637.42 692.897 L1637.98 692.897 L1638.54 692.897 L1639.1 692.897 L1639.66 692.897 L1640.21 692.897 L1640.77 692.897 L1641.33 692.897 L1641.89 692.897 L1642.45 692.897 L1643.01 692.897 L1643.57 692.897 L1644.13 692.897 L1644.69 692.897 L1645.25 692.897 L1645.81 692.897 L1646.37 692.897 L1646.93 692.897 L1647.48 692.897 L1648.04 692.897 L1648.6 692.897 L1649.16 692.897 L1649.72 692.897 L1650.28 692.897 L1650.84 692.897 L1651.4 692.897 L1651.96 692.897 L1652.52 692.897 L1653.08 692.897 L1653.64 692.897 L1654.2 692.897 L1654.76 692.897 L1655.31 692.897 L1655.87 692.897 L1656.43 692.897 L1656.99 692.897 L1657.55 692.897 L1658.11 692.897 L1658.67 692.897 L1659.23 692.897 L1659.79 692.897 L1660.35 692.897 L1660.91 692.897 L1661.47 692.897 L1662.03 692.897 L1662.58 692.897 L1663.14 692.897 L1663.7 692.897 L1664.26 692.897 L1664.82 692.897 L1665.38 692.897 L1665.94 692.897 L1666.5 692.897 L1667.06 692.897 L1667.62 692.897 L1668.18 692.897 L1668.74 692.897 L1669.3 692.897 L1669.85 692.897 L1670.41 692.897 L1670.97 692.897 L1671.53 692.897 L1672.09 692.897 L1672.65 692.897 L1673.21 692.897 L1673.77 692.897 L1674.33 692.897 L1674.89 692.897 L1675.45 692.897 L1676.01 692.897 L1676.57 692.897 L1677.13 692.897 L1677.68 692.897 L1678.24 692.897 L1678.8 692.897 L1679.36 692.897 L1679.92 692.897 L1680.48 692.897 L1681.04 692.897 L1681.6 692.897 L1682.16 692.897 L1682.72 692.897 L1683.28 692.897 L1683.84 692.897 L1684.4 692.897 L1684.95 692.897 L1685.51 692.897 L1686.07 692.897 L1686.63 692.897 L1687.19 692.897 L1687.75 692.897 L1688.31 692.897 L1688.87 692.897 L1689.43 692.897 L1689.99 692.897 L1690.55 692.897 L1691.11 692.897 L1691.67 692.897 L1692.23 692.897 L1692.78 692.897 L1693.34 692.897 L1693.9 692.897 L1694.46 692.897 L1695.02 692.897 L1695.58 692.897 L1696.14 692.897 L1696.7 692.897 L1697.26 692.897 L1697.82 692.897 L1698.38 692.897 L1698.94 692.897 L1699.5 692.897 L1700.05 692.897 L1700.61 692.897 L1701.17 692.897 L1701.73 692.897 L1702.29 692.897 L1702.85 692.897 L1703.41 692.897 L1703.97 692.897 L1704.53 692.897 L1705.09 692.897 L1705.65 692.897 L1706.21 692.897 L1706.77 692.897 L1707.32 692.897 L1707.88 692.897 L1708.44 692.897 L1709 692.897 L1709.56 692.897 L1710.12 692.897 L1710.68 692.897 L1711.24 692.897 L1711.8 692.897 L1712.36 692.897 L1712.92 692.897 L1713.48 692.897 L1714.04 692.897 L1714.6 692.897 L1715.15 692.897 L1715.71 692.897 L1716.27 692.897 L1716.83 692.897 L1717.39 692.897 L1717.95 692.897 L1718.51 692.897 L1719.07 692.897 L1719.63 692.897 L1720.19 692.897 L1720.75 692.897 L1721.31 692.897 L1721.87 692.897 L1722.42 692.897 L1722.98 692.897 L1723.54 692.897 L1724.1 692.897 L1724.66 692.897 L1725.22 692.897 L1725.78 692.897 L1726.34 692.897 L1726.9 692.897 L1727.46 692.897 L1728.02 692.897 L1728.58 692.897 L1729.14 692.897 L1729.69 692.897 L1730.25 692.897 L1730.81 692.897 L1731.37 692.897 L1731.93 692.897 L1732.49 692.897 L1733.05 692.897 L1733.61 692.897 L1734.17 692.897 L1734.73 692.897 L1735.29 692.897 L1735.85 692.897 L1736.41 692.897 L1736.97 692.897 L1737.52 692.897 L1738.08 692.897 L1738.64 692.897 L1739.2 692.897 L1739.76 692.897 L1740.32 692.897 L1740.88 692.897 L1741.44 692.897 L1742 692.897 L1742.56 692.897 L1743.12 692.897 L1743.68 692.897 L1744.24 692.897 L1744.79 692.897 L1745.35 692.897 L1745.91 692.897 L1746.47 692.897 L1747.03 692.897 L1747.59 692.897 L1748.15 692.897 L1748.71 692.897 L1749.27 692.897 L1749.83 692.897 L1750.39 692.897 L1750.95 692.897 L1751.51 692.897 L1752.06 692.897 L1752.62 692.897 L1753.18 692.897 L1753.74 692.897 L1754.3 692.897 L1754.86 692.897 L1755.42 692.897 L1755.98 692.897 L1756.54 692.897 L1757.1 692.897 L1757.66 692.897 L1758.22 692.897 L1758.78 692.897 L1759.34 692.897 L1759.89 692.897 L1760.45 692.897 L1761.01 692.897 L1761.57 692.897 L1762.13 692.897 L1762.69 692.897 L1763.25 692.897 L1763.81 692.897 L1764.37 692.897 L1764.93 692.897 L1765.49 692.897 L1766.05 692.897 L1766.61 692.897 L1767.16 692.897 L1767.72 692.897 L1768.28 692.897 L1768.84 692.897 L1769.4 692.897 L1769.96 692.897 L1770.52 692.897 L1771.08 692.897 L1771.64 692.897 L1772.2 692.897 L1772.76 692.897 L1773.32 692.897 L1773.88 692.897 L1774.43 692.897 L1774.99 692.897 L1775.55 692.897 L1776.11 692.897 L1776.67 692.897 L1777.23 692.897 L1777.79 692.897 L1778.35 692.897 L1778.91 692.897 L1779.47 692.897 L1780.03 692.897 L1780.59 692.897 L1781.15 692.897 L1781.71 692.897 L1782.26 692.897 L1782.82 692.897 L1783.38 692.897 L1783.94 692.897 L1784.5 692.897 L1785.06 692.897 L1785.62 692.897 L1786.18 692.897 L1786.74 692.897 L1787.3 692.897 L1787.86 692.897 L1788.42 692.897 L1788.98 692.897 L1789.53 692.897 L1790.09 692.897 L1790.65 692.897 L1791.21 692.897 L1791.77 692.897 L1792.33 692.897 L1792.89 692.897 L1793.45 692.897 L1794.01 692.897 L1794.57 692.897 L1795.13 692.897 L1795.69 692.897 L1796.25 692.897 L1796.8 692.897 L1797.36 692.897 L1797.92 692.897 L1798.48 692.897 L1799.04 692.897 L1799.6 692.897 L1800.16 692.897 L1800.72 692.897 L1801.28 692.897 L1801.84 692.897 L1802.4 692.897 L1802.96 692.897 L1803.52 692.897 L1804.08 692.897 L1804.63 692.897 L1805.19 692.897 L1805.75 692.897 L1806.31 692.897 L1806.87 692.897 L1807.43 692.897 L1807.99 692.897 L1808.55 692.897 L1809.11 692.897 L1809.67 692.897 L1810.23 692.897 L1810.79 692.897 L1811.35 692.897 L1811.9 692.897 L1812.46 692.897 L1813.02 692.897 L1813.58 692.897 L1814.14 692.897 L1814.7 692.897 L1815.26 692.897 L1815.82 692.897 L1816.38 692.897 L1816.94 692.897 L1817.5 692.897 L1818.06 692.897 L1818.62 692.897 L1819.18 692.897 L1819.73 692.897 L1820.29 692.897 L1820.85 692.897 L1821.41 692.897 L1821.97 692.897 L1822.53 692.897 L1823.09 692.897 L1823.65 692.897 L1824.21 692.897 L1824.77 692.897 L1825.33 692.897 L1825.89 692.897 L1826.45 692.897 L1827 692.897 L1827.56 692.897 L1828.12 692.897 L1828.68 692.897 L1829.24 692.897 L1829.8 692.897 L1830.36 692.897 L1830.92 692.897 L1831.48 692.897 L1832.04 692.897 L1832.6 692.897 L1833.16 692.897 L1833.72 692.897 L1834.27 692.897 L1834.83 692.897 L1835.39 692.897 L1835.95 692.897 L1836.51 692.897 L1837.07 692.897 L1837.63 692.897 L1838.19 692.897 L1838.19 684.451 L1837.63 684.451 L1837.07 684.451 L1836.51 684.451 L1835.95 684.451 L1835.39 684.451 L1834.83 684.451 L1834.27 684.451 L1833.72 684.451 L1833.16 684.451 L1832.6 684.451 L1832.04 684.451 L1831.48 684.451 L1830.92 684.451 L1830.36 684.451 L1829.8 684.451 L1829.24 684.451 L1828.68 684.451 L1828.12 684.451 L1827.56 684.451 L1827 684.451 L1826.45 684.451 L1825.89 684.451 L1825.33 684.451 L1824.77 684.451 L1824.21 684.451 L1823.65 684.451 L1823.09 684.451 L1822.53 684.451 L1821.97 684.451 L1821.41 684.451 L1820.85 684.451 L1820.29 684.451 L1819.73 684.451 L1819.18 684.451 L1818.62 684.451 L1818.06 684.451 L1817.5 684.451 L1816.94 684.451 L1816.38 684.451 L1815.82 684.451 L1815.26 684.451 L1814.7 684.451 L1814.14 684.451 L1813.58 684.451 L1813.02 684.451 L1812.46 684.451 L1811.9 684.451 L1811.35 684.451 L1810.79 684.451 L1810.23 684.451 L1809.67 684.451 L1809.11 684.451 L1808.55 684.451 L1807.99 684.451 L1807.43 684.451 L1806.87 684.451 L1806.31 684.451 L1805.75 684.451 L1805.19 684.451 L1804.63 684.451 L1804.08 684.451 L1803.52 684.451 L1802.96 684.451 L1802.4 684.451 L1801.84 684.451 L1801.28 684.451 L1800.72 684.451 L1800.16 684.451 L1799.6 684.451 L1799.04 684.451 L1798.48 684.451 L1797.92 684.451 L1797.36 684.451 L1796.8 684.451 L1796.25 684.451 L1795.69 684.451 L1795.13 684.451 L1794.57 684.451 L1794.01 684.451 L1793.45 684.451 L1792.89 684.451 L1792.33 684.451 L1791.77 684.451 L1791.21 684.451 L1790.65 684.451 L1790.09 684.451 L1789.53 684.451 L1788.98 684.451 L1788.42 684.451 L1787.86 684.451 L1787.3 684.451 L1786.74 684.451 L1786.18 684.451 L1785.62 684.451 L1785.06 684.451 L1784.5 684.451 L1783.94 684.451 L1783.38 684.451 L1782.82 684.451 L1782.26 684.451 L1781.71 684.451 L1781.15 684.451 L1780.59 684.451 L1780.03 684.451 L1779.47 684.451 L1778.91 684.451 L1778.35 684.451 L1777.79 684.451 L1777.23 684.451 L1776.67 684.451 L1776.11 684.451 L1775.55 684.451 L1774.99 684.451 L1774.43 684.451 L1773.88 684.451 L1773.32 684.451 L1772.76 684.451 L1772.2 684.451 L1771.64 684.451 L1771.08 684.451 L1770.52 684.451 L1769.96 684.451 L1769.4 684.451 L1768.84 684.451 L1768.28 684.451 L1767.72 684.451 L1767.16 684.451 L1766.61 684.451 L1766.05 684.451 L1765.49 684.451 L1764.93 684.451 L1764.37 684.451 L1763.81 684.451 L1763.25 684.451 L1762.69 684.451 L1762.13 684.451 L1761.57 684.451 L1761.01 684.451 L1760.45 684.451 L1759.89 684.451 L1759.34 684.451 L1758.78 684.451 L1758.22 684.451 L1757.66 684.451 L1757.1 684.451 L1756.54 684.451 L1755.98 684.451 L1755.42 684.451 L1754.86 684.451 L1754.3 684.451 L1753.74 684.451 L1753.18 684.451 L1752.62 684.451 L1752.06 684.451 L1751.51 684.451 L1750.95 684.451 L1750.39 684.451 L1749.83 684.451 L1749.27 684.451 L1748.71 684.451 L1748.15 684.451 L1747.59 684.451 L1747.03 684.451 L1746.47 684.451 L1745.91 684.451 L1745.35 684.451 L1744.79 684.451 L1744.24 684.451 L1743.68 684.451 L1743.12 684.451 L1742.56 684.451 L1742 684.451 L1741.44 684.451 L1740.88 684.451 L1740.32 684.451 L1739.76 684.451 L1739.2 684.451 L1738.64 684.451 L1738.08 684.451 L1737.52 684.451 L1736.97 684.451 L1736.41 684.451 L1735.85 684.451 L1735.29 684.451 L1734.73 684.451 L1734.17 684.451 L1733.61 684.451 L1733.05 684.451 L1732.49 684.451 L1731.93 684.451 L1731.37 684.451 L1730.81 684.451 L1730.25 684.451 L1729.69 684.451 L1729.14 684.451 L1728.58 684.451 L1728.02 684.451 L1727.46 684.451 L1726.9 684.451 L1726.34 684.451 L1725.78 684.451 L1725.22 684.451 L1724.66 684.451 L1724.1 684.451 L1723.54 684.451 L1722.98 684.451 L1722.42 684.451 L1721.87 684.451 L1721.31 684.451 L1720.75 684.451 L1720.19 684.451 L1719.63 684.451 L1719.07 684.451 L1718.51 684.451 L1717.95 684.451 L1717.39 684.451 L1716.83 684.451 L1716.27 684.451 L1715.71 684.451 L1715.15 684.451 L1714.6 684.451 L1714.04 684.451 L1713.48 684.451 L1712.92 684.451 L1712.36 684.451 L1711.8 684.451 L1711.24 684.451 L1710.68 684.451 L1710.12 684.451 L1709.56 684.451 L1709 684.451 L1708.44 684.451 L1707.88 684.451 L1707.32 684.451 L1706.77 684.451 L1706.21 684.451 L1705.65 684.451 L1705.09 684.451 L1704.53 684.451 L1703.97 684.451 L1703.41 684.451 L1702.85 684.451 L1702.29 684.451 L1701.73 684.451 L1701.17 684.451 L1700.61 684.451 L1700.05 684.451 L1699.5 684.451 L1698.94 684.451 L1698.38 684.451 L1697.82 684.451 L1697.26 684.451 L1696.7 684.451 L1696.14 684.451 L1695.58 684.451 L1695.02 684.451 L1694.46 684.451 L1693.9 684.451 L1693.34 684.451 L1692.78 684.451 L1692.23 684.451 L1691.67 684.451 L1691.11 684.451 L1690.55 684.451 L1689.99 684.451 L1689.43 684.451 L1688.87 684.451 L1688.31 684.451 L1687.75 684.451 L1687.19 684.451 L1686.63 684.451 L1686.07 684.451 L1685.51 684.451 L1684.95 684.451 L1684.4 684.451 L1683.84 684.451 L1683.28 684.451 L1682.72 684.451 L1682.16 684.451 L1681.6 684.451 L1681.04 684.451 L1680.48 684.451 L1679.92 684.451 L1679.36 684.451 L1678.8 684.451 L1678.24 684.451 L1677.68 684.451 L1677.13 684.451 L1676.57 684.451 L1676.01 684.451 L1675.45 684.451 L1674.89 684.451 L1674.33 684.451 L1673.77 684.451 L1673.21 684.451 L1672.65 684.451 L1672.09 684.451 L1671.53 684.451 L1670.97 684.451 L1670.41 684.451 L1669.85 684.451 L1669.3 684.451 L1668.74 684.451 L1668.18 684.451 L1667.62 684.451 L1667.06 684.451 L1666.5 684.451 L1665.94 684.451 L1665.38 684.451 L1664.82 684.451 L1664.26 684.451 L1663.7 684.451 L1663.14 684.451 L1662.58 684.451 L1662.03 684.451 L1661.47 684.451 L1660.91 684.451 L1660.35 684.451 L1659.79 684.451 L1659.23 684.451 L1658.67 684.451 L1658.11 684.451 L1657.55 684.451 L1656.99 684.451 L1656.43 684.451 L1655.87 684.451 L1655.31 684.451 L1654.76 684.451 L1654.2 684.451 L1653.64 684.451 L1653.08 684.451 L1652.52 684.451 L1651.96 684.451 L1651.4 684.451 L1650.84 684.451 L1650.28 684.451 L1649.72 684.451 L1649.16 684.451 L1648.6 684.451 L1648.04 684.451 L1647.48 684.451 L1646.93 684.451 L1646.37 684.451 L1645.81 684.451 L1645.25 684.451 L1644.69 684.451 L1644.13 684.451 L1643.57 684.451 L1643.01 684.451 L1642.45 684.451 L1641.89 684.451 L1641.33 684.451 L1640.77 684.451 L1640.21 684.451 L1639.66 684.451 L1639.1 684.451 L1638.54 684.451 L1637.98 684.451 L1637.42 684.451 L1636.86 684.451 L1636.3 684.451 L1635.74 684.451 L1635.18 684.451 L1634.62 684.451 L1634.06 684.451 L1633.5 684.451 L1632.94 684.451 L1632.39 684.451 L1631.83 684.451 L1631.27 684.451 L1630.71 684.451 L1630.15 684.451 L1629.59 684.451 L1629.03 684.451 L1628.47 684.451 L1627.91 684.451 L1627.35 684.451 L1626.79 684.451 L1626.23 684.451 L1625.67 684.451 L1625.11 684.451 L1624.56 684.451 L1624 684.451 L1623.44 684.451 L1622.88 684.451 L1622.32 684.451 L1621.76 684.451 L1621.2 684.451 L1620.64 684.451 L1620.08 684.451 L1619.52 684.451 L1618.96 684.451 L1618.4 684.451 L1617.84 684.451 L1617.29 684.451 L1616.73 684.451 L1616.17 684.451 L1615.61 684.451 L1615.05 684.451 L1614.49 684.451 L1613.93 684.451 L1613.37 684.451 L1612.81 684.451 L1612.25 684.451 L1611.69 684.451 L1611.13 684.451 L1610.57 684.451 L1610.02 684.451 L1609.46 684.451 L1608.9 684.451 L1608.34 684.451 L1607.78 684.451 L1607.22 684.451 L1606.66 684.451 L1606.1 684.451 L1605.54 684.451 L1604.98 684.451 L1604.42 684.451 L1603.86 684.451 L1603.3 684.451 L1602.74 684.451 L1602.19 684.451 L1601.63 684.451 L1601.07 684.451 L1600.51 684.451 L1599.95 684.451 L1599.39 684.451 L1598.83 684.451 L1598.27 684.451 L1597.71 684.451 L1597.15 684.451 L1596.59 684.451 L1596.03 684.451 L1595.47 684.451 L1594.92 684.451 L1594.36 684.451 L1593.8 684.451 L1593.24 684.451 L1592.68 684.451 L1592.12 684.451 L1591.56 684.451 L1591 684.451 L1590.44 684.451 L1589.88 684.451 L1589.32 684.451 L1588.76 684.451 L1588.2 684.451 L1587.65 684.451 L1587.09 684.451 L1586.53 684.451 L1585.97 684.451 L1585.41 684.451 L1584.85 684.451 L1584.29 684.451 L1583.73 684.451 L1583.17 684.451 L1582.61 684.451 L1582.05 684.451 L1581.49 684.451 L1580.93 684.451 L1580.37 684.451 L1579.82 684.451 L1579.26 684.451 L1578.7 684.451 L1578.14 684.451 L1577.58 684.451 L1577.02 684.451 L1576.46 684.451 L1575.9 684.451 L1575.34 684.451 L1574.78 684.451 L1574.22 684.451 L1573.66 684.451 L1573.1 684.451 L1572.55 684.451 L1571.99 684.451 L1571.43 684.451 L1570.87 684.451 L1570.31 684.451 L1569.75 684.451 L1569.19 684.451 L1568.63 684.451 L1568.07 684.451 L1567.51 684.451 L1566.95 684.451 L1566.39 684.451 L1565.83 684.451 L1565.28 684.451 L1564.72 684.451 L1564.16 684.451 L1563.6 684.451 L1563.04 684.451 L1562.48 684.451 L1561.92 684.451 L1561.36 684.451 L1560.8 684.451 L1560.24 684.451 L1559.68 684.451 L1559.12 684.451 L1558.56 684.451 L1558 684.451 L1557.45 684.451 L1556.89 684.451 L1556.33 684.451 L1555.77 684.451 L1555.21 684.451 L1554.65 684.451 L1554.09 684.451 L1553.53 684.451 L1552.97 684.451 L1552.41 684.451 L1551.85 684.451 L1551.29 684.451 L1550.73 684.451 L1550.18 684.451 L1549.62 684.451 L1549.06 684.451 L1548.5 684.451 L1547.94 684.451 L1547.38 684.451 L1546.82 684.451 L1546.26 684.451 L1545.7 684.451 L1545.14 684.451 L1544.58 684.451 L1544.02 684.451 L1543.46 684.451 L1542.9 684.451 L1542.35 684.451 L1541.79 684.451 L1541.23 684.451 L1540.67 684.451 L1540.11 684.451 L1539.55 684.451 L1538.99 684.451 L1538.43 684.451 L1537.87 684.451 L1537.31 684.451 L1536.75 684.451 L1536.19 684.451 L1535.63 684.451 L1535.08 684.451 L1534.52 684.451 L1533.96 684.451 L1533.4 684.451 L1532.84 684.451 L1532.28 684.451 L1531.72 684.451 L1531.16 684.451 L1530.6 684.451 L1530.04 684.451 L1529.48 684.451 L1528.92 684.451 L1528.36 684.451 L1527.81 684.451 L1527.25 684.451 L1526.69 684.451 L1526.13 684.451 L1525.57 684.451 L1525.01 684.451 L1524.45 684.451 L1523.89 684.451 L1523.33 684.451 L1522.77 684.451 L1522.21 684.451 L1521.65 684.451 L1521.09 684.451 L1520.53 684.451 L1519.98 684.451 L1519.42 684.451 L1518.86 684.451 L1518.3 684.451 L1517.74 684.451 L1517.18 684.451 L1516.62 684.451 L1516.06 684.451 L1515.5 684.451 L1514.94 684.451 L1514.38 684.451 L1513.82 684.451 L1513.26 684.451 L1512.71 684.451 L1512.15 684.451 L1511.59 684.451 L1511.03 684.451 L1510.47 684.451 L1509.91 684.451 L1509.35 684.451 L1508.79 684.451 L1508.23 684.451 L1507.67 684.451 L1507.11 684.451 L1506.55 684.451 L1505.99 684.451 L1505.44 684.451 L1504.88 684.451 L1504.32 684.451 L1503.76 684.451 L1503.2 684.451 L1502.64 684.451 L1502.08 684.451 L1501.52 684.451 L1500.96 684.451 L1500.4 684.451 L1499.84 684.451 L1499.28 684.451 L1498.72 684.451 L1498.16 684.451 L1497.61 684.451 L1497.05 684.451 L1496.49 684.451 L1495.93 684.451 L1495.37 684.451 L1494.81 684.451 L1494.25 684.451 L1493.69 684.451 L1493.13 684.451 L1492.57 684.451 L1492.01 684.451 L1491.45 684.451 L1490.89 684.451 L1490.34 684.451 L1489.78 684.451 L1489.22 684.451 L1488.66 684.451 L1488.1 684.451 L1487.54 684.451 L1486.98 684.451 L1486.42 684.451 L1485.86 684.451 L1485.3 684.451 L1484.74 684.451 L1484.18 684.451 L1483.62 684.451 L1483.07 684.451 L1482.51 684.451 L1481.95 684.451 L1481.39 684.451 L1480.83 684.451 L1480.27 684.451 L1479.71 684.451 L1479.15 684.451 L1478.59 684.451 L1478.03 684.451 L1477.47 684.451 L1476.91 684.451 L1476.35 684.451 L1475.79 684.451 L1475.24 684.451 L1474.68 684.451 L1474.12 684.451 L1473.56 684.451 L1473 684.451 L1472.44 684.451 L1471.88 684.451 L1471.32 684.451 L1470.76 684.451 L1470.2 684.451 L1469.64 684.451 L1469.08 684.451 L1468.52 684.451 L1467.97 684.451 L1467.41 684.451 L1466.85 684.451 L1466.29 684.451 L1465.73 684.451 L1465.17 684.451 L1464.61 684.451 L1464.05 684.451 L1463.49 684.451 L1462.93 684.451 L1462.37 684.451 L1461.81 684.451 L1461.25 684.451 L1460.7 684.451 L1460.14 684.451 L1459.58 684.451 L1459.02 684.451 L1458.46 684.451 L1457.9 684.451 L1457.34 684.451 L1456.78 684.451 L1456.22 684.451 L1455.66 684.451 L1455.1 684.451 L1454.54 684.451 L1453.98 684.451 L1453.42 684.451 L1452.87 684.451 L1452.31 684.451 L1451.75 684.451 L1451.19 684.451 L1450.63 684.451 L1450.07 684.451 L1449.51 684.451 L1448.95 684.451 L1448.39 684.451 L1447.83 684.451 L1447.27 684.451 L1446.71 684.451 L1446.15 684.451 L1445.6 684.451 L1445.04 684.451 L1444.48 684.451 L1443.92 684.451 L1443.36 684.451 L1442.8 684.451 L1442.24 684.451 L1441.68 684.451 L1441.12 684.451 L1440.56 684.451 L1440 684.451 L1439.44 684.451 L1438.88 684.451 L1438.33 684.451 L1437.77 684.451 L1437.21 684.451 L1436.65 684.451 L1436.09 684.451 L1435.53 684.451 L1434.97 684.451 L1434.41 684.451 L1433.85 684.451 L1433.29 684.451 L1432.73 684.451 L1432.17 684.451 L1431.61 684.451 L1431.05 684.451 L1430.5 684.451 L1429.94 684.451 L1429.38 684.451 L1428.82 684.451 L1428.26 684.451 L1427.7 684.451 L1427.14 684.451 L1426.58 684.451 L1426.02 684.451 L1425.46 684.451 L1424.9 684.451 L1424.34 684.451 L1423.78 684.451 L1423.23 684.451 L1422.67 684.451 L1422.11 684.451 L1421.55 684.451 L1420.99 684.451 L1420.43 684.451 L1419.87 684.451 L1419.31 684.451 L1418.75 684.451 L1418.19 684.451 L1417.63 684.451 L1417.07 684.451 L1416.51 684.451 L1415.95 684.451 L1415.4 684.451 L1414.84 684.451 L1414.28 684.451 L1413.72 684.451 L1413.16 684.451 L1412.6 684.451 L1412.04 684.451 L1411.48 684.451 L1410.92 684.451 L1410.36 684.451 L1409.8 684.451 L1409.24 684.451 L1408.68 684.451 L1408.13 684.451 L1407.57 684.451 L1407.01 684.451 L1406.45 684.451 L1405.89 684.451 L1405.33 684.451 L1404.77 684.451 L1404.21 684.451 L1403.65 684.451 L1403.09 684.451 L1402.53 684.451 L1401.97 684.451 L1401.41 684.451 L1400.86 684.451 L1400.3 684.451 L1399.74 684.451 L1399.18 684.451 L1398.62 684.451 L1398.06 684.451 L1397.5 684.451 L1396.94 684.451 L1396.38 684.451 L1395.82 684.451 L1395.26 684.451 L1394.7 684.451 L1394.14 684.451 L1393.58 684.451 L1393.03 684.451 L1392.47 684.451 L1391.91 684.451 L1391.35 684.451 L1390.79 684.451 L1390.23 684.451 L1389.67 684.451 L1389.11 684.451 L1388.55 684.451 L1387.99 684.451 L1387.43 684.451 L1386.87 684.451 L1386.31 684.451 L1385.76 684.451 L1385.2 684.451 L1384.64 684.451 L1384.08 684.451 L1383.52 684.451 L1382.96 684.451 L1382.4 684.451 L1381.84 684.451 L1381.28 684.451 L1380.72 684.451 L1380.16 684.451 L1379.6 684.451 L1379.04 684.451 L1378.49 684.451 L1377.93 684.451 L1377.37 684.451 L1376.81 684.451 L1376.25 684.451 L1375.69 684.451 L1375.13 684.451 L1374.57 684.451 L1374.01 684.451 L1373.45 684.451 L1372.89 684.451 L1372.33 684.451 L1371.77 684.451 L1371.21 684.451 L1370.66 684.451 L1370.1 684.451 L1369.54 684.451 L1368.98 684.451 L1368.42 684.451 L1367.86 684.451 L1367.3 684.451 L1366.74 684.451 L1366.18 684.451 L1365.62 684.451 L1365.06 684.451 L1364.5 684.451 L1363.94 684.451 L1363.39 684.451 L1362.83 684.451 L1362.27 684.451 L1361.71 684.451 L1361.15 684.451 L1360.59 684.451 L1360.03 684.451 L1359.47 684.451 L1358.91 684.451 L1358.35 684.451 L1357.79 684.451 L1357.23 684.451 L1356.67 684.451 L1356.12 684.451 L1355.56 684.451 L1355 684.451 L1354.44 684.451 L1353.88 684.451 L1353.32 684.451 L1352.76 684.451 L1352.2 684.451 L1351.64 684.451 L1351.08 684.451 L1350.52 684.451 L1349.96 684.451 L1349.4 684.451 L1348.84 684.451 L1348.29 684.451 L1347.73 684.451 L1347.17 684.451 L1346.61 684.451 L1346.05 684.451 L1345.49 684.451 L1344.93 684.451 L1344.37 684.451 L1343.81 684.451 L1343.25 684.451 L1342.69 684.451 L1342.13 684.451 L1341.57 684.451 L1341.02 684.451 L1340.46 684.451 L1339.9 684.451 L1339.34 684.451 L1338.78 684.451 L1338.22 684.451 L1337.66 684.451 L1337.1 684.451 L1336.54 684.451 L1335.98 684.451 L1335.42 684.451 L1334.86 684.451 L1334.3 684.451 L1333.75 684.451 L1333.19 684.451 L1332.63 684.451 L1332.07 684.451 L1331.51 684.451 L1330.95 684.451 L1330.39 684.451 L1329.83 684.451 L1329.27 684.451 L1328.71 684.451 L1328.15 684.451 L1327.59 684.451 L1327.03 684.451 L1326.47 684.451 L1325.92 684.451 L1325.36 684.451 L1324.8 684.451 L1324.24 684.451 L1323.68 684.451 L1323.12 684.451 L1322.56 684.451 L1322 684.451 L1321.44 684.451 L1320.88 684.451 L1320.32 684.451 L1319.76 684.451 L1319.2 684.451 L1318.65 684.451 L1318.09 684.451 L1317.53 684.451 L1316.97 684.451 L1316.41 684.451 L1315.85 684.451 L1315.29 684.451 L1314.73 684.451 L1314.17 684.451 L1313.61 684.451 L1313.05 684.451 L1312.49 684.451 L1311.93 684.451 L1311.38 684.451 L1310.82 684.451 L1310.26 684.451 L1309.7 684.451 L1309.14 684.451 L1308.58 684.451 L1308.02 684.451 L1307.46 684.451 L1306.9 684.451 L1306.34 684.451 L1305.78 684.451 L1305.22 684.451 L1304.66 684.451 L1304.1 684.451 L1303.55 684.451 L1302.99 684.451 L1302.43 684.451 L1301.87 684.451 L1301.31 684.451 L1300.75 684.451 L1300.19 684.451 L1299.63 684.451 L1299.07 684.451 L1298.51 684.451 L1297.95 684.451 L1297.39 684.451 L1296.83 684.451 L1296.28 684.451 L1295.72 684.451 L1295.16 684.451 L1294.6 684.451 L1294.04 684.451 L1293.48 684.451 L1292.92 684.451 L1292.36 684.451 L1291.8 684.451 L1291.24 684.451 L1290.68 684.451 L1290.12 684.451 L1289.56 684.451 L1289 684.451 L1288.45 684.451 L1287.89 684.451 L1287.33 684.451 L1286.77 684.451 L1286.21 684.451 L1285.65 684.451 L1285.09 684.451 L1284.53 684.451 L1283.97 684.451 L1283.41 684.451 L1282.85 684.451 L1282.29 684.451 L1281.73 684.451 L1281.18 684.451 L1280.62 684.451 L1280.06 684.451 L1279.5 684.451 L1278.94 684.451 L1278.38 684.451 L1277.82 684.451 L1277.26 684.451 L1276.7 684.451 L1276.14 684.451 L1275.58 684.451 L1275.02 684.451 L1274.46 684.451 L1273.91 684.451 L1273.35 684.451 L1272.79 684.451 L1272.23 684.451 L1271.67 684.451 L1271.11 684.451 L1270.55 684.451 L1269.99 684.451 L1269.43 684.451 L1268.87 684.451 L1268.31 684.451 L1267.75 684.451 L1267.19 684.451 L1266.63 684.451 L1266.08 684.451 L1265.52 684.451 L1264.96 684.451 L1264.4 684.451 L1263.84 684.451 L1263.28 684.451 L1262.72 684.451 L1262.16 684.451 L1261.6 684.451 L1261.04 684.451 L1260.48 684.451 L1259.92 684.451 L1259.36 684.451 L1258.81 684.451 L1258.25 684.451 L1257.69 684.451 L1257.13 684.451 L1256.57 684.451 L1256.01 684.451 L1255.45 684.451 L1254.89 684.451 L1254.33 684.451 L1253.77 684.451 L1253.21 684.451 L1252.65 684.451 L1252.09 684.451 L1251.54 684.451 L1250.98 684.451 L1250.42 684.451 L1249.86 684.451 L1249.3 684.451 L1248.74 684.451 L1248.18 684.451 L1247.62 684.451 L1247.06 684.451 L1246.5 684.451 L1245.94 684.451 L1245.38 684.451 L1244.82 684.451 L1244.26 684.451 L1243.71 684.451 L1243.15 684.451 L1242.59 684.451 L1242.03 684.451 L1241.47 684.451 L1240.91 684.451 L1240.35 684.451 L1239.79 684.451 L1239.23 684.451 L1238.67 684.451 L1238.11 684.451 L1237.55 684.451 L1236.99 684.451 L1236.44 684.451 L1235.88 684.451 L1235.32 684.451 L1234.76 684.451 L1234.2 684.451 L1233.64 684.451 L1233.08 684.451 L1232.52 684.451 L1231.96 684.451 L1231.4 684.451 L1230.84 684.451 L1230.28 684.451 L1229.72 684.451 L1229.17 684.451 L1228.61 684.451 L1228.05 684.451 L1227.49 684.451 L1226.93 684.451 L1226.37 684.451 L1225.81 684.451 L1225.25 684.451 L1224.69 684.451 L1224.13 684.451 L1223.57 684.451 L1223.01 684.451 L1222.45 684.451 L1221.89 684.451 L1221.34 684.451 L1220.78 684.451 L1220.22 684.451 L1219.66 684.451 L1219.1 684.451 L1218.54 684.451 L1217.98 684.451 L1217.42 684.451 L1216.86 684.451 L1216.3 684.451 L1215.74 684.451 L1215.18 684.451 L1214.62 684.451 L1214.07 684.451 L1213.51 684.451 L1212.95 684.451 L1212.39 684.451 L1211.83 684.451 L1211.27 684.451 L1210.71 684.451 L1210.15 684.451 L1209.59 684.451 L1209.03 684.451 L1208.47 684.451 L1207.91 684.451 L1207.35 684.451 L1206.8 684.451 L1206.24 684.451 L1205.68 684.451 L1205.12 684.451 L1204.56 684.451 L1204 684.451 L1203.44 684.451 L1202.88 684.451 L1202.32 684.451 L1201.76 684.451 L1201.2 684.451 L1200.64 684.451 L1200.08 684.451 L1199.52 684.451 L1198.97 684.451 L1198.41 684.451 L1197.85 684.451 L1197.29 684.451 L1196.73 684.451 L1196.17 684.451 L1195.61 684.451 L1195.05 684.451 L1194.49 684.451 L1193.93 684.451 L1193.37 684.451 L1192.81 684.451 L1192.25 684.451 L1191.7 684.451 L1191.14 684.451 L1190.58 684.451 L1190.02 684.451 L1189.46 684.451 L1188.9 684.451 L1188.34 684.451 L1187.78 684.451 L1187.22 684.451 L1186.66 684.451 L1186.1 684.451 L1185.54 684.451 L1184.98 684.451 L1184.43 684.451 L1183.87 684.451 L1183.31 684.451 L1182.75 684.451 L1182.19 684.451 L1181.63 684.451 L1181.07 684.451 L1180.51 684.451 L1179.95 684.451 L1179.39 684.451 L1178.83 684.451 L1178.27 684.451 L1177.71 684.451 L1177.15 684.451 L1176.6 684.451 L1176.04 684.451 L1175.48 684.451 L1174.92 684.451 L1174.36 684.451 L1173.8 684.451 L1173.24 684.451 L1172.68 684.451 L1172.12 684.451 L1171.56 684.451 L1171 684.451 L1170.44 684.451 L1169.88 684.451 L1169.33 684.451 L1168.77 684.451 L1168.21 684.451 L1167.65 684.451 L1167.09 684.451 L1166.53 684.451 L1165.97 684.451 L1165.41 684.451 L1164.85 684.451 L1164.29 684.451 L1163.73 684.451 L1163.17 684.451 L1162.61 684.451 L1162.05 684.451 L1161.5 684.451 L1160.94 684.451 L1160.38 684.451 L1159.82 684.451 L1159.26 684.451 L1158.7 684.451 L1158.14 684.451 L1157.58 684.451 L1157.02 684.451 L1156.46 684.451 L1155.9 684.451 L1155.34 684.451 L1154.78 684.451 L1154.23 684.451 L1153.67 684.451 L1153.11 684.451 L1152.55 684.451 L1151.99 684.451 L1151.43 684.451 L1150.87 684.451 L1150.31 684.451 L1149.75 684.451 L1149.19 684.451 L1148.63 684.451 L1148.07 684.451 L1147.51 684.451 L1146.96 684.451 L1146.4 684.451 L1145.84 684.451 L1145.28 684.451 L1144.72 684.451 L1144.16 684.451 L1143.6 684.451 L1143.04 684.451 L1142.48 684.451 L1141.92 684.451 L1141.36 684.451 L1140.8 684.451 L1140.24 684.451 L1139.68 684.451 L1139.13 684.451 L1138.57 684.451 L1138.01 684.451 L1137.45 684.451 L1136.89 684.451 L1136.33 684.451 L1135.77 684.451 L1135.21 684.451 L1134.65 684.451 L1134.09 684.451 L1133.53 684.451 L1132.97 684.451 L1132.41 684.451 L1131.86 684.451 L1131.3 684.451 L1130.74 684.451 L1130.18 684.451 L1129.62 684.451 L1129.06 684.451 L1128.5 684.451 L1127.94 684.451 L1127.38 684.451 L1126.82 684.451 L1126.26 684.451 L1125.7 684.451 L1125.14 684.451 L1124.59 684.451 L1124.03 684.451 L1123.47 684.451 L1122.91 684.451 L1122.35 684.451 L1121.79 684.451 L1121.23 684.451 L1120.67 684.451 L1120.11 684.451 L1119.55 684.451 L1118.99 684.451 L1118.43 684.451 L1117.87 684.451 L1117.31 684.451 L1116.76 684.451 L1116.2 684.451 L1115.64 684.451 L1115.08 684.451 L1114.52 684.451 L1113.96 684.451 L1113.4 684.451 L1112.84 684.451 L1112.28 684.451 L1111.72 684.451 L1111.16 684.451 L1110.6 684.451 L1110.04 684.451 L1109.49 684.451 L1108.93 684.451 L1108.37 684.451 L1107.81 684.451 L1107.25 684.451 L1106.69 684.451 L1106.13 684.451 L1105.57 684.451 L1105.01 684.451 L1104.45 684.451 L1103.89 684.451 L1103.33 684.451 L1102.77 684.451 L1102.22 684.451 L1101.66 684.451 L1101.1 684.451 L1100.54 684.451 L1099.98 684.451 L1099.42 684.451 L1098.86 684.451 L1098.3 684.451 L1097.74 684.451 L1097.18 684.451 L1096.62 684.451 L1096.06 684.451 L1095.5 684.451 L1094.94 684.451 L1094.39 684.451 L1093.83 684.451 L1093.27 684.451 L1092.71 684.451 L1092.15 684.451 L1091.59 684.451 L1091.03 684.451 L1090.47 684.451 L1089.91 684.451 L1089.35 684.451 L1088.79 684.451 L1088.23 684.451 L1087.67 684.451 L1087.12 684.451 L1086.56 684.451 L1086 684.451 L1085.44 684.451 L1084.88 684.451 L1084.32 684.451 L1083.76 684.451 L1083.2 684.451 L1082.64 684.451 L1082.08 684.451 L1081.52 684.451 L1080.96 684.451 L1080.4 684.451 L1079.85 684.451 L1079.29 684.451 L1078.73 684.451 L1078.17 684.451 L1077.61 684.451 L1077.05 684.451 L1076.49 684.451 L1075.93 684.451 L1075.37 684.451 L1074.81 684.451 L1074.25 684.451 L1073.69 684.451 L1073.13 684.451 L1072.57 684.451 L1072.02 684.451 L1071.46 684.451 L1070.9 684.451 L1070.34 684.451 L1069.78 684.451 L1069.22 684.451 L1068.66 684.451 L1068.1 684.451 L1067.54 684.451 L1066.98 684.451 L1066.42 684.451 L1065.86 684.451 L1065.3 684.451 L1064.75 684.451 L1064.19 684.451 L1063.63 684.451 L1063.07 684.451 L1062.51 684.451 L1061.95 684.451 L1061.39 684.451 L1060.83 684.451 L1060.27 684.451 L1059.71 684.451 L1059.15 684.451 L1058.59 684.451 L1058.03 684.451 L1057.48 684.451 L1056.92 684.451 L1056.36 684.451 L1055.8 684.451 L1055.24 684.451 L1054.68 684.451 L1054.12 684.451 L1053.56 684.451 L1053 684.451 L1052.44 684.451 L1051.88 684.451 L1051.32 684.451 L1050.76 684.451 L1050.2 684.451 L1049.65 684.451 L1049.09 684.451 L1048.53 684.451 L1047.97 684.451 L1047.41 684.451 L1046.85 684.451 L1046.29 684.451 L1045.73 684.451 L1045.17 684.451 L1044.61 684.451 L1044.05 684.451 L1043.49 684.451 L1042.93 684.451 L1042.38 684.451 L1041.82 684.451 L1041.26 684.451 L1040.7 684.451 L1040.14 684.451 L1039.58 684.451 L1039.02 684.451 L1038.46 684.451 L1037.9 684.451 L1037.34 684.451 L1036.78 684.451 L1036.22 684.451 L1035.66 684.451 L1035.1 684.451 L1034.55 684.451 L1033.99 684.451 L1033.43 684.451 L1032.87 684.451 L1032.31 684.451 L1031.75 684.451 L1031.19 684.451 L1030.63 684.451 L1030.07 684.451 L1029.51 684.451 L1028.95 684.451 L1028.39 684.451 L1027.83 684.451 L1027.28 684.451 L1026.72 684.451 L1026.16 684.451 L1025.6 684.451 L1025.04 684.451 L1024.48 684.451 L1023.92 684.451 L1023.36 684.451 L1022.8 684.451 L1022.24 684.451 L1021.68 684.451 L1021.12 684.451 L1020.56 684.451 L1020.01 684.451 L1019.45 684.451 L1018.89 684.451 L1018.33 684.451 L1017.77 684.451 L1017.21 684.451 L1016.65 684.451 L1016.09 684.451 L1015.53 684.451 L1014.97 684.451 L1014.41 684.451 L1013.85 684.451 L1013.29 684.451 L1012.73 684.451 L1012.18 684.451 L1011.62 684.451 L1011.06 684.451 L1010.5 684.451 L1009.94 684.451 L1009.38 684.451 L1008.82 684.451 L1008.26 684.451 L1007.7 684.451 L1007.14 684.451 L1006.58 684.451 L1006.02 684.451 L1005.46 684.451 L1004.91 684.451 L1004.35 684.451 L1003.79 684.451 L1003.23 684.451 L1002.67 684.451 L1002.11 684.451 L1001.55 684.451 L1000.99 684.451 L1000.43 684.451 L999.872 684.451 L999.313 684.451 L998.754 684.451 L998.194 684.451 L997.635 684.451 L997.076 684.451 L996.517 684.451 L995.957 684.451 L995.398 684.451 L994.839 684.451 L994.28 684.451 L993.72 684.451 L993.161 684.451 L992.602 684.451 L992.043 684.451 L991.483 684.451 L990.924 684.451 L990.365 684.451 L989.806 684.451 L989.246 684.451 L988.687 684.451 L988.128 684.451 L987.569 684.451 L987.009 684.451 L986.45 684.451 L985.891 684.451 L985.332 684.451 L984.772 684.451 L984.213 684.451 L983.654 684.451 L983.095 684.451 L982.535 684.451 L981.976 684.451 L981.417 684.451 L980.858 684.451 L980.298 684.451 L979.739 684.451 L979.18 684.451 L978.621 684.451 L978.061 684.451 L977.502 684.451 L976.943 684.451 L976.384 684.451 L975.824 684.451 L975.265 684.451 L974.706 684.451 L974.147 684.451 L973.587 684.451 L973.028 684.451 L972.469 684.451 L971.91 684.451 L971.35 684.451 L970.791 684.451 L970.232 684.451 L969.673 684.451 L969.113 684.451 L968.554 684.451 L967.995 684.451 L967.436 684.451 L966.876 684.451 L966.317 684.451 L965.758 684.451 L965.199 684.451 L964.639 684.451 L964.08 684.451 L963.521 684.451 L962.962 684.451 L962.402 684.451 L961.843 684.451 L961.284 684.451 L960.725 684.451 L960.165 684.451 L959.606 684.451 L959.047 684.451 L958.488 684.451 L957.928 684.451 L957.369 684.451 L956.81 684.451 L956.251 684.451 L955.691 684.451 L955.132 684.451 L954.573 684.451 L954.014 684.451 L953.454 684.451 L952.895 684.451 L952.336 684.451 L951.777 684.451 L951.217 684.451 L950.658 684.451 L950.099 684.451 L949.54 684.451 L948.98 684.451 L948.421 684.451 L947.862 684.451 L947.303 684.451 L946.743 684.451 L946.184 684.451 L945.625 684.451 L945.066 684.451 L944.506 684.451 L943.947 684.451 L943.388 684.451 L942.829 684.451 L942.269 684.451 L941.71 684.451 L941.151 684.451 L940.592 684.451 L940.032 684.451 L939.473 684.451 L938.914 684.451 L938.355 684.451 L937.795 684.451 L937.236 684.451 L936.677 684.451 L936.118 684.451 L935.558 684.451 L934.999 684.451 L934.44 684.451 L933.881 684.451 L933.321 684.451 L932.762 684.451 L932.203 684.451 L931.644 684.451 L931.084 684.451 L930.525 684.451 L929.966 684.451 L929.406 684.451 L928.847 684.451 L928.288 684.451 L927.729 684.451 L927.169 684.451 L926.61 684.451 L926.051 684.451 L925.492 684.451 L924.932 684.451 L924.373 684.451 L923.814 684.451 L923.255 684.451 L922.695 684.451 L922.136 684.451 L921.577 684.451 L921.018 684.451 L920.458 684.451 L919.899 684.451 L919.34 684.451 L918.781 684.451 L918.221 684.451 L917.662 684.451 L917.103 684.451 L916.544 684.451 L915.984 684.451 L915.425 684.451 L914.866 684.451 L914.307 684.451 L913.747 684.451 L913.188 684.451 L912.629 684.451 L912.07 684.451 L911.51 684.451 L910.951 684.451 L910.392 684.451 L909.833 684.451 L909.273 684.451 L908.714 684.451 L908.155 684.451 L907.596 684.451 L907.036 684.451 L906.477 684.451 L905.918 684.451 L905.359 684.451 L904.799 684.451 L904.24 684.451 L903.681 684.451 L903.122 684.451 L902.562 684.451 L902.003 684.451 L901.444 684.451 L900.885 684.451 L900.325 684.451 L899.766 684.451 L899.207 684.451 L898.648 684.451 L898.088 684.451 L897.529 684.451 L896.97 684.451 L896.411 684.451 L895.851 684.451 L895.292 684.451 L894.733 684.451 L894.174 684.451 L893.614 684.451 L893.055 684.451 L892.496 684.451 L891.937 684.451 L891.377 684.451 L890.818 684.451 L890.259 684.451 L889.7 684.451 L889.14 684.451 L888.581 684.451 L888.022 684.451 L887.463 684.451 L886.903 684.451 L886.344 684.451 L885.785 684.451 L885.226 684.451 L884.666 684.451 L884.107 684.451 L883.548 684.451 L882.989 684.451 L882.429 684.451 L881.87 684.451 L881.311 684.451 L880.752 684.451 L880.192 684.451 L879.633 684.451 L879.074 684.451 L878.515 684.451 L877.955 684.451 L877.396 684.451 L876.837 684.451 L876.278 684.451 L875.718 684.451 L875.159 684.451 L874.6 684.451 L874.041 684.451 L873.481 684.451 L872.922 684.451 L872.363 684.451 L871.804 684.451 L871.244 684.451 L870.685 684.451 L870.126 684.451 L869.567 684.451 L869.007 684.451 L868.448 684.451 L867.889 684.451 L867.33 684.451 L866.77 684.451 L866.211 684.451 L865.652 684.451 L865.093 684.451 L864.533 684.451 L863.974 684.451 L863.415 684.451 L862.856 684.451 L862.296 684.451 L861.737 684.451 L861.178 684.451 L860.619 684.451 L860.059 684.451 L859.5 684.451 L858.941 684.451 L858.382 684.451 L857.822 684.451 L857.263 684.451 L856.704 684.451 L856.145 684.451 L855.585 684.451 L855.026 684.451 L854.467 684.451 L853.908 684.451 L853.348 684.451 L852.789 684.451 L852.23 684.451 L851.671 684.451 L851.111 684.451 L850.552 684.451 L849.993 684.451 L849.434 684.451 L848.874 684.451 L848.315 684.451 L847.756 684.451 L847.197 684.451 L846.637 684.451 L846.078 684.451 L845.519 684.451 L844.96 684.451 L844.4 684.451 L843.841 684.451 L843.282 684.451 L842.723 684.451 L842.163 684.451 L841.604 684.451 L841.045 684.451 L840.486 684.451 L839.926 684.451 L839.367 684.451 L838.808 684.451 L838.249 684.451 L837.689 684.451 L837.13 684.451 L836.571 684.451 L836.012 684.451 L835.452 684.451 L834.893 684.451 L834.334 684.451 L833.775 684.451 L833.215 684.451 L832.656 684.451 L832.097 684.451 L831.538 684.451 L830.978 684.451 L830.419 684.451 L829.86 684.451 L829.301 684.451 L828.741 684.451 L828.182 684.451 L827.623 684.451 L827.064 684.451 L826.504 684.451 L825.945 684.451 L825.386 684.451 L824.827 684.451 L824.267 684.451 L823.708 684.451 L823.149 684.451 L822.59 684.451 L822.03 684.451 L821.471 684.451 L820.912 684.451 L820.353 684.451 L819.793 684.451 L819.234 684.451 L818.675 684.451 L818.116 684.451 L817.556 684.451 L816.997 684.451 L816.438 684.451 L815.879 684.451 L815.319 684.451 L814.76 684.451 L814.201 684.451 L813.642 684.451 L813.082 684.451 L812.523 684.451 L811.964 684.451 L811.405 684.451 L810.845 684.451 L810.286 684.451 L809.727 684.451 L809.168 684.451 L808.608 684.451 L808.049 684.451 L807.49 684.451 L806.931 684.451 L806.371 684.451 L805.812 684.451 L805.253 684.451 L804.693 684.451 L804.134 684.451 L803.575 684.451 L803.016 684.451 L802.456 684.451 L801.897 684.451 L801.338 684.451 L800.779 684.451 L800.219 684.451 L799.66 684.451 L799.101 684.451 L798.542 684.451 L797.982 684.451 L797.423 684.451 L796.864 684.451 L796.305 684.451 L795.745 684.451 L795.186 684.451 L794.627 684.451 L794.068 684.451 L793.508 684.451 L792.949 684.451 L792.39 684.451 L791.831 684.451 L791.271 684.451 L790.712 684.451 L790.153 684.451 L789.594 684.451 L789.034 684.451 L788.475 684.451 L787.916 684.451 L787.357 684.451 L786.797 684.451 L786.238 684.451 L785.679 684.451 L785.12 684.451 L784.56 684.451 L784.001 684.451 L783.442 684.451 L782.883 684.451 L782.323 684.451 L781.764 684.451 L781.205 684.451 L780.646 684.451 L780.086 684.451 L779.527 684.451 L778.968 684.451 L778.409 684.451 L777.849 684.451 L777.29 684.451 L776.731 684.451 L776.172 684.451 L775.612 684.451 L775.053 684.451 L774.494 684.451 L773.935 684.451 L773.375 684.451 L772.816 684.451 L772.257 684.451 L771.698 684.451 L771.138 684.451 L770.579 684.451 L770.02 684.451 L769.461 684.451 L768.901 684.451 L768.342 684.451 L767.783 684.451 L767.224 684.451 L766.664 684.451 L766.105 684.451 L765.546 684.451 L764.987 684.451 L764.427 684.451 L763.868 684.451 L763.309 684.451 L762.75 684.451 L762.19 684.451 L761.631 684.451 L761.072 684.451 L760.513 684.451 L759.953 684.451 L759.394 684.451 L758.835 684.451 L758.276 684.451 L757.716 684.451 L757.157 684.451 L756.598 684.451 L756.039 684.451 L755.479 684.451 L754.92 684.451 L754.361 684.451 L753.802 684.451 L753.242 684.451 L752.683 684.451 L752.124 684.451 L751.565 684.451 L751.005 684.451 L750.446 684.451 L749.887 684.451 L749.328 684.451 L748.768 684.451 L748.209 684.451 L747.65 684.451 L747.091 684.451 L746.531 684.451 L745.972 684.451 L745.413 684.451 L744.854 684.451 L744.294 684.451 L743.735 684.451 L743.176 684.451 L742.617 684.451 L742.057 684.451 L741.498 684.451 L740.939 684.451 L740.38 684.451 L739.82 684.451 L739.261 684.451 L738.702 684.451 L738.143 684.451 L737.583 684.451 L737.024 684.451 L736.465 684.451 L735.906 684.451 L735.346 684.451 L734.787 684.451 L734.228 684.451 L733.669 684.451 L733.109 684.451 L732.55 684.451 L731.991 684.451 L731.432 684.451 L730.872 684.451 L730.313 684.451 L729.754 684.451 L729.195 684.451 L728.635 684.451 L728.076 684.451 L727.517 684.451 L726.958 684.451 L726.398 684.451 L725.839 684.451 L725.28 684.451 L724.721 684.451 L724.161 684.451 L723.602 684.451 L723.043 684.451 L722.484 684.451 L721.924 684.451 L721.365 684.451 L720.806 684.451 L720.247 684.451  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,688.674 720.806,688.674 721.365,688.674 721.924,688.674 722.484,688.674 723.043,688.674 723.602,688.674 724.161,688.674 724.721,688.674 725.28,688.674 725.839,688.674 726.398,688.674 726.958,688.674 727.517,688.674 728.076,688.674 728.635,688.674 729.195,688.674 729.754,688.674 730.313,688.674 730.872,688.674 731.432,688.674 731.991,688.674 732.55,688.674 733.109,688.674 733.669,688.674 734.228,688.674 734.787,688.674 735.346,688.674 735.906,688.674 736.465,688.674 737.024,688.674 737.583,688.674 738.143,688.674 738.702,688.674 739.261,688.674 739.82,688.674 740.38,688.674 740.939,688.674 741.498,688.674 742.057,688.674 742.617,688.674 743.176,688.674 743.735,688.674 744.294,688.674 744.854,688.674 745.413,688.674 745.972,688.674 746.531,688.674 747.091,688.674 747.65,688.674 748.209,688.674 748.768,688.674 749.328,688.674 749.887,688.674 750.446,688.674 751.005,688.674 751.565,688.674 752.124,688.674 752.683,688.674 753.242,688.674 753.802,688.674 754.361,688.674 754.92,688.674 755.479,688.674 756.039,688.674 756.598,688.674 757.157,688.674 757.716,688.674 758.276,688.674 758.835,688.674 759.394,688.674 759.953,688.674 760.513,688.674 761.072,688.674 761.631,688.674 762.19,688.674 762.75,688.674 763.309,688.674 763.868,688.674 764.427,688.674 764.987,688.674 765.546,688.674 766.105,688.674 766.664,688.674 767.224,688.674 767.783,688.674 768.342,688.674 768.901,688.674 769.461,688.674 770.02,688.674 770.579,688.674 771.138,688.674 771.698,688.674 772.257,688.674 772.816,688.674 773.375,688.674 773.935,688.674 774.494,688.674 775.053,688.674 775.612,688.674 776.172,688.674 776.731,688.674 777.29,688.674 777.849,688.674 778.409,688.674 778.968,688.674 779.527,688.674 780.086,688.674 780.646,688.674 781.205,688.674 781.764,688.674 782.323,688.674 782.883,688.674 783.442,688.674 784.001,688.674 784.56,688.674 785.12,688.674 785.679,688.674 786.238,688.674 786.797,688.674 787.357,688.674 787.916,688.674 788.475,688.674 789.034,688.674 789.594,688.674 790.153,688.674 790.712,688.674 791.271,688.674 791.831,688.674 792.39,688.674 792.949,688.674 793.508,688.674 794.068,688.674 794.627,688.674 795.186,688.674 795.745,688.674 796.305,688.674 796.864,688.674 797.423,688.674 797.982,688.674 798.542,688.674 799.101,688.674 799.66,688.674 800.219,688.674 800.779,688.674 801.338,688.674 801.897,688.674 802.456,688.674 803.016,688.674 803.575,688.674 804.134,688.674 804.693,688.674 805.253,688.674 805.812,688.674 806.371,688.674 806.931,688.674 807.49,688.674 808.049,688.674 808.608,688.674 809.168,688.674 809.727,688.674 810.286,688.674 810.845,688.674 811.405,688.674 811.964,688.674 812.523,688.674 813.082,688.674 813.642,688.674 814.201,688.674 814.76,688.674 815.319,688.674 815.879,688.674 816.438,688.674 816.997,688.674 817.556,688.674 818.116,688.674 818.675,688.674 819.234,688.674 819.793,688.674 820.353,688.674 820.912,688.674 821.471,688.674 822.03,688.674 822.59,688.674 823.149,688.674 823.708,688.674 824.267,688.674 824.827,688.674 825.386,688.674 825.945,688.674 826.504,688.674 827.064,688.674 827.623,688.674 828.182,688.674 828.741,688.674 829.301,688.674 829.86,688.674 830.419,688.674 830.978,688.674 831.538,688.674 832.097,688.674 832.656,688.674 833.215,688.674 833.775,688.674 834.334,688.674 834.893,688.674 835.452,688.674 836.012,688.674 836.571,688.674 837.13,688.674 837.689,688.674 838.249,688.674 838.808,688.674 839.367,688.674 839.926,688.674 840.486,688.674 841.045,688.674 841.604,688.674 842.163,688.674 842.723,688.674 843.282,688.674 843.841,688.674 844.4,688.674 844.96,688.674 845.519,688.674 846.078,688.674 846.637,688.674 847.197,688.674 847.756,688.674 848.315,688.674 848.874,688.674 849.434,688.674 849.993,688.674 850.552,688.674 851.111,688.674 851.671,688.674 852.23,688.674 852.789,688.674 853.348,688.674 853.908,688.674 854.467,688.674 855.026,688.674 855.585,688.674 856.145,688.674 856.704,688.674 857.263,688.674 857.822,688.674 858.382,688.674 858.941,688.674 859.5,688.674 860.059,688.674 860.619,688.674 861.178,688.674 861.737,688.674 862.296,688.674 862.856,688.674 863.415,688.674 863.974,688.674 864.533,688.674 865.093,688.674 865.652,688.674 866.211,688.674 866.77,688.674 867.33,688.674 867.889,688.674 868.448,688.674 869.007,688.674 869.567,688.674 870.126,688.674 870.685,688.674 871.244,688.674 871.804,688.674 872.363,688.674 872.922,688.674 873.481,688.674 874.041,688.674 874.6,688.674 875.159,688.674 875.718,688.674 876.278,688.674 876.837,688.674 877.396,688.674 877.955,688.674 878.515,688.674 879.074,688.674 879.633,688.674 880.192,688.674 880.752,688.674 881.311,688.674 881.87,688.674 882.429,688.674 882.989,688.674 883.548,688.674 884.107,688.674 884.666,688.674 885.226,688.674 885.785,688.674 886.344,688.674 886.903,688.674 887.463,688.674 888.022,688.674 888.581,688.674 889.14,688.674 889.7,688.674 890.259,688.674 890.818,688.674 891.377,688.674 891.937,688.674 892.496,688.674 893.055,688.674 893.614,688.674 894.174,688.674 894.733,688.674 895.292,688.674 895.851,688.674 896.411,688.674 896.97,688.674 897.529,688.674 898.088,688.674 898.648,688.674 899.207,688.674 899.766,688.674 900.325,688.674 900.885,688.674 901.444,688.674 902.003,688.674 902.562,688.674 903.122,688.674 903.681,688.674 904.24,688.674 904.799,688.674 905.359,688.674 905.918,688.674 906.477,688.674 907.036,688.674 907.596,688.674 908.155,688.674 908.714,688.674 909.273,688.674 909.833,688.674 910.392,688.674 910.951,688.674 911.51,688.674 912.07,688.674 912.629,688.674 913.188,688.674 913.747,688.674 914.307,688.674 914.866,688.674 915.425,688.674 915.984,688.674 916.544,688.674 917.103,688.674 917.662,688.674 918.221,688.674 918.781,688.674 919.34,688.674 919.899,688.674 920.458,688.674 921.018,688.674 921.577,688.674 922.136,688.674 922.695,688.674 923.255,688.674 923.814,688.674 924.373,688.674 924.932,688.674 925.492,688.674 926.051,688.674 926.61,688.674 927.169,688.674 927.729,688.674 928.288,688.674 928.847,688.674 929.406,688.674 929.966,688.674 930.525,688.674 931.084,688.674 931.644,688.674 932.203,688.674 932.762,688.674 933.321,688.674 933.881,688.674 934.44,688.674 934.999,688.674 935.558,688.674 936.118,688.674 936.677,688.674 937.236,688.674 937.795,688.674 938.355,688.674 938.914,688.674 939.473,688.674 940.032,688.674 940.592,688.674 941.151,688.674 941.71,688.674 942.269,688.674 942.829,688.674 943.388,688.674 943.947,688.674 944.506,688.674 945.066,688.674 945.625,688.674 946.184,688.674 946.743,688.674 947.303,688.674 947.862,688.674 948.421,688.674 948.98,688.674 949.54,688.674 950.099,688.674 950.658,688.674 951.217,688.674 951.777,688.674 952.336,688.674 952.895,688.674 953.454,688.674 954.014,688.674 954.573,688.674 955.132,688.674 955.691,688.674 956.251,688.674 956.81,688.674 957.369,688.674 957.928,688.674 958.488,688.674 959.047,688.674 959.606,688.674 960.165,688.674 960.725,688.674 961.284,688.674 961.843,688.674 962.402,688.674 962.962,688.674 963.521,688.674 964.08,688.674 964.639,688.674 965.199,688.674 965.758,688.674 966.317,688.674 966.876,688.674 967.436,688.674 967.995,688.674 968.554,688.674 969.113,688.674 969.673,688.674 970.232,688.674 970.791,688.674 971.35,688.674 971.91,688.674 972.469,688.674 973.028,688.674 973.587,688.674 974.147,688.674 974.706,688.674 975.265,688.674 975.824,688.674 976.384,688.674 976.943,688.674 977.502,688.674 978.061,688.674 978.621,688.674 979.18,688.674 979.739,688.674 980.298,688.674 980.858,688.674 981.417,688.674 981.976,688.674 982.535,688.674 983.095,688.674 983.654,688.674 984.213,688.674 984.772,688.674 985.332,688.674 985.891,688.674 986.45,688.674 987.009,688.674 987.569,688.674 988.128,688.674 988.687,688.674 989.246,688.674 989.806,688.674 990.365,688.674 990.924,688.674 991.483,688.674 992.043,688.674 992.602,688.674 993.161,688.674 993.72,688.674 994.28,688.674 994.839,688.674 995.398,688.674 995.957,688.674 996.517,688.674 997.076,688.674 997.635,688.674 998.194,688.674 998.754,688.674 999.313,688.674 999.872,688.674 1000.43,688.674 1000.99,688.674 1001.55,688.674 1002.11,688.674 1002.67,688.674 1003.23,688.674 1003.79,688.674 1004.35,688.674 1004.91,688.674 1005.46,688.674 1006.02,688.674 1006.58,688.674 1007.14,688.674 1007.7,688.674 1008.26,688.674 1008.82,688.674 1009.38,688.674 1009.94,688.674 1010.5,688.674 1011.06,688.674 1011.62,688.674 1012.18,688.674 1012.73,688.674 1013.29,688.674 1013.85,688.674 1014.41,688.674 1014.97,688.674 1015.53,688.674 1016.09,688.674 1016.65,688.674 1017.21,688.674 1017.77,688.674 1018.33,688.674 1018.89,688.674 1019.45,688.674 1020.01,688.674 1020.56,688.674 1021.12,688.674 1021.68,688.674 1022.24,688.674 1022.8,688.674 1023.36,688.674 1023.92,688.674 1024.48,688.674 1025.04,688.674 1025.6,688.674 1026.16,688.674 1026.72,688.674 1027.28,688.674 1027.83,688.674 1028.39,688.674 1028.95,688.674 1029.51,688.674 1030.07,688.674 1030.63,688.674 1031.19,688.674 1031.75,688.674 1032.31,688.674 1032.87,688.674 1033.43,688.674 1033.99,688.674 1034.55,688.674 1035.1,688.674 1035.66,688.674 1036.22,688.674 1036.78,688.674 1037.34,688.674 1037.9,688.674 1038.46,688.674 1039.02,688.674 1039.58,688.674 1040.14,688.674 1040.7,688.674 1041.26,688.674 1041.82,688.674 1042.38,688.674 1042.93,688.674 1043.49,688.674 1044.05,688.674 1044.61,688.674 1045.17,688.674 1045.73,688.674 1046.29,688.674 1046.85,688.674 1047.41,688.674 1047.97,688.674 1048.53,688.674 1049.09,688.674 1049.65,688.674 1050.2,688.674 1050.76,688.674 1051.32,688.674 1051.88,688.674 1052.44,688.674 1053,688.674 1053.56,688.674 1054.12,688.674 1054.68,688.674 1055.24,688.674 1055.8,688.674 1056.36,688.674 1056.92,688.674 1057.48,688.674 1058.03,688.674 1058.59,688.674 1059.15,688.674 1059.71,688.674 1060.27,688.674 1060.83,688.674 1061.39,688.674 1061.95,688.674 1062.51,688.674 1063.07,688.674 1063.63,688.674 1064.19,688.674 1064.75,688.674 1065.3,688.674 1065.86,688.674 1066.42,688.674 1066.98,688.674 1067.54,688.674 1068.1,688.674 1068.66,688.674 1069.22,688.674 1069.78,688.674 1070.34,688.674 1070.9,688.674 1071.46,688.674 1072.02,688.674 1072.57,688.674 1073.13,688.674 1073.69,688.674 1074.25,688.674 1074.81,688.674 1075.37,688.674 1075.93,688.674 1076.49,688.674 1077.05,688.674 1077.61,688.674 1078.17,688.674 1078.73,688.674 1079.29,688.674 1079.85,688.674 1080.4,688.674 1080.96,688.674 1081.52,688.674 1082.08,688.674 1082.64,688.674 1083.2,688.674 1083.76,688.674 1084.32,688.674 1084.88,688.674 1085.44,688.674 1086,688.674 1086.56,688.674 1087.12,688.674 1087.67,688.674 1088.23,688.674 1088.79,688.674 1089.35,688.674 1089.91,688.674 1090.47,688.674 1091.03,688.674 1091.59,688.674 1092.15,688.674 1092.71,688.674 1093.27,688.674 1093.83,688.674 1094.39,688.674 1094.94,688.674 1095.5,688.674 1096.06,688.674 1096.62,688.674 1097.18,688.674 1097.74,688.674 1098.3,688.674 1098.86,688.674 1099.42,688.674 1099.98,688.674 1100.54,688.674 1101.1,688.674 1101.66,688.674 1102.22,688.674 1102.77,688.674 1103.33,688.674 1103.89,688.674 1104.45,688.674 1105.01,688.674 1105.57,688.674 1106.13,688.674 1106.69,688.674 1107.25,688.674 1107.81,688.674 1108.37,688.674 1108.93,688.674 1109.49,688.674 1110.04,688.674 1110.6,688.674 1111.16,688.674 1111.72,688.674 1112.28,688.674 1112.84,688.674 1113.4,688.674 1113.96,688.674 1114.52,688.674 1115.08,688.674 1115.64,688.674 1116.2,688.674 1116.76,688.674 1117.31,688.674 1117.87,688.674 1118.43,688.674 1118.99,688.674 1119.55,688.674 1120.11,688.674 1120.67,688.674 1121.23,688.674 1121.79,688.674 1122.35,688.674 1122.91,688.674 1123.47,688.674 1124.03,688.674 1124.59,688.674 1125.14,688.674 1125.7,688.674 1126.26,688.674 1126.82,688.674 1127.38,688.674 1127.94,688.674 1128.5,688.674 1129.06,688.674 1129.62,688.674 1130.18,688.674 1130.74,688.674 1131.3,688.674 1131.86,688.674 1132.41,688.674 1132.97,688.674 1133.53,688.674 1134.09,688.674 1134.65,688.674 1135.21,688.674 1135.77,688.674 1136.33,688.674 1136.89,688.674 1137.45,688.674 1138.01,688.674 1138.57,688.674 1139.13,688.674 1139.68,688.674 1140.24,688.674 1140.8,688.674 1141.36,688.674 1141.92,688.674 1142.48,688.674 1143.04,688.674 1143.6,688.674 1144.16,688.674 1144.72,688.674 1145.28,688.674 1145.84,688.674 1146.4,688.674 1146.96,688.674 1147.51,688.674 1148.07,688.674 1148.63,688.674 1149.19,688.674 1149.75,688.674 1150.31,688.674 1150.87,688.674 1151.43,688.674 1151.99,688.674 1152.55,688.674 1153.11,688.674 1153.67,688.674 1154.23,688.674 1154.78,688.674 1155.34,688.674 1155.9,688.674 1156.46,688.674 1157.02,688.674 1157.58,688.674 1158.14,688.674 1158.7,688.674 1159.26,688.674 1159.82,688.674 1160.38,688.674 1160.94,688.674 1161.5,688.674 1162.05,688.674 1162.61,688.674 1163.17,688.674 1163.73,688.674 1164.29,688.674 1164.85,688.674 1165.41,688.674 1165.97,688.674 1166.53,688.674 1167.09,688.674 1167.65,688.674 1168.21,688.674 1168.77,688.674 1169.33,688.674 1169.88,688.674 1170.44,688.674 1171,688.674 1171.56,688.674 1172.12,688.674 1172.68,688.674 1173.24,688.674 1173.8,688.674 1174.36,688.674 1174.92,688.674 1175.48,688.674 1176.04,688.674 1176.6,688.674 1177.15,688.674 1177.71,688.674 1178.27,688.674 1178.83,688.674 1179.39,688.674 1179.95,688.674 1180.51,688.674 1181.07,688.674 1181.63,688.674 1182.19,688.674 1182.75,688.674 1183.31,688.674 1183.87,688.674 1184.43,688.674 1184.98,688.674 1185.54,688.674 1186.1,688.674 1186.66,688.674 1187.22,688.674 1187.78,688.674 1188.34,688.674 1188.9,688.674 1189.46,688.674 1190.02,688.674 1190.58,688.674 1191.14,688.674 1191.7,688.674 1192.25,688.674 1192.81,688.674 1193.37,688.674 1193.93,688.674 1194.49,688.674 1195.05,688.674 1195.61,688.674 1196.17,688.674 1196.73,688.674 1197.29,688.674 1197.85,688.674 1198.41,688.674 1198.97,688.674 1199.52,688.674 1200.08,688.674 1200.64,688.674 1201.2,688.674 1201.76,688.674 1202.32,688.674 1202.88,688.674 1203.44,688.674 1204,688.674 1204.56,688.674 1205.12,688.674 1205.68,688.674 1206.24,688.674 1206.8,688.674 1207.35,688.674 1207.91,688.674 1208.47,688.674 1209.03,688.674 1209.59,688.674 1210.15,688.674 1210.71,688.674 1211.27,688.674 1211.83,688.674 1212.39,688.674 1212.95,688.674 1213.51,688.674 1214.07,688.674 1214.62,688.674 1215.18,688.674 1215.74,688.674 1216.3,688.674 1216.86,688.674 1217.42,688.674 1217.98,688.674 1218.54,688.674 1219.1,688.674 1219.66,688.674 1220.22,688.674 1220.78,688.674 1221.34,688.674 1221.89,688.674 1222.45,688.674 1223.01,688.674 1223.57,688.674 1224.13,688.674 1224.69,688.674 1225.25,688.674 1225.81,688.674 1226.37,688.674 1226.93,688.674 1227.49,688.674 1228.05,688.674 1228.61,688.674 1229.17,688.674 1229.72,688.674 1230.28,688.674 1230.84,688.674 1231.4,688.674 1231.96,688.674 1232.52,688.674 1233.08,688.674 1233.64,688.674 1234.2,688.674 1234.76,688.674 1235.32,688.674 1235.88,688.674 1236.44,688.674 1236.99,688.674 1237.55,688.674 1238.11,688.674 1238.67,688.674 1239.23,688.674 1239.79,688.674 1240.35,688.674 1240.91,688.674 1241.47,688.674 1242.03,688.674 1242.59,688.674 1243.15,688.674 1243.71,688.674 1244.26,688.674 1244.82,688.674 1245.38,688.674 1245.94,688.674 1246.5,688.674 1247.06,688.674 1247.62,688.674 1248.18,688.674 1248.74,688.674 1249.3,688.674 1249.86,688.674 1250.42,688.674 1250.98,688.674 1251.54,688.674 1252.09,688.674 1252.65,688.674 1253.21,688.674 1253.77,688.674 1254.33,688.674 1254.89,688.674 1255.45,688.674 1256.01,688.674 1256.57,688.674 1257.13,688.674 1257.69,688.674 1258.25,688.674 1258.81,688.674 1259.36,688.674 1259.92,688.674 1260.48,688.674 1261.04,688.674 1261.6,688.674 1262.16,688.674 1262.72,688.674 1263.28,688.674 1263.84,688.674 1264.4,688.674 1264.96,688.674 1265.52,688.674 1266.08,688.674 1266.63,688.674 1267.19,688.674 1267.75,688.674 1268.31,688.674 1268.87,688.674 1269.43,688.674 1269.99,688.674 1270.55,688.674 1271.11,688.674 1271.67,688.674 1272.23,688.674 1272.79,688.674 1273.35,688.674 1273.91,688.674 1274.46,688.674 1275.02,688.674 1275.58,688.674 1276.14,688.674 1276.7,688.674 1277.26,688.674 1277.82,688.674 1278.38,688.674 1278.94,688.674 1279.5,688.674 1280.06,688.674 1280.62,688.674 1281.18,688.674 1281.73,688.674 1282.29,688.674 1282.85,688.674 1283.41,688.674 1283.97,688.674 1284.53,688.674 1285.09,688.674 1285.65,688.674 1286.21,688.674 1286.77,688.674 1287.33,688.674 1287.89,688.674 1288.45,688.674 1289,688.674 1289.56,688.674 1290.12,688.674 1290.68,688.674 1291.24,688.674 1291.8,688.674 1292.36,688.674 1292.92,688.674 1293.48,688.674 1294.04,688.674 1294.6,688.674 1295.16,688.674 1295.72,688.674 1296.28,688.674 1296.83,688.674 1297.39,688.674 1297.95,688.674 1298.51,688.674 1299.07,688.674 1299.63,688.674 1300.19,688.674 1300.75,688.674 1301.31,688.674 1301.87,688.674 1302.43,688.674 1302.99,688.674 1303.55,688.674 1304.1,688.674 1304.66,688.674 1305.22,688.674 1305.78,688.674 1306.34,688.674 1306.9,688.674 1307.46,688.674 1308.02,688.674 1308.58,688.674 1309.14,688.674 1309.7,688.674 1310.26,688.674 1310.82,688.674 1311.38,688.674 1311.93,688.674 1312.49,688.674 1313.05,688.674 1313.61,688.674 1314.17,688.674 1314.73,688.674 1315.29,688.674 1315.85,688.674 1316.41,688.674 1316.97,688.674 1317.53,688.674 1318.09,688.674 1318.65,688.674 1319.2,688.674 1319.76,688.674 1320.32,688.674 1320.88,688.674 1321.44,688.674 1322,688.674 1322.56,688.674 1323.12,688.674 1323.68,688.674 1324.24,688.674 1324.8,688.674 1325.36,688.674 1325.92,688.674 1326.47,688.674 1327.03,688.674 1327.59,688.674 1328.15,688.674 1328.71,688.674 1329.27,688.674 1329.83,688.674 1330.39,688.674 1330.95,688.674 1331.51,688.674 1332.07,688.674 1332.63,688.674 1333.19,688.674 1333.75,688.674 1334.3,688.674 1334.86,688.674 1335.42,688.674 1335.98,688.674 1336.54,688.674 1337.1,688.674 1337.66,688.674 1338.22,688.674 1338.78,688.674 1339.34,688.674 1339.9,688.674 1340.46,688.674 1341.02,688.674 1341.57,688.674 1342.13,688.674 1342.69,688.674 1343.25,688.674 1343.81,688.674 1344.37,688.674 1344.93,688.674 1345.49,688.674 1346.05,688.674 1346.61,688.674 1347.17,688.674 1347.73,688.674 1348.29,688.674 1348.84,688.674 1349.4,688.674 1349.96,688.674 1350.52,688.674 1351.08,688.674 1351.64,688.674 1352.2,688.674 1352.76,688.674 1353.32,688.674 1353.88,688.674 1354.44,688.674 1355,688.674 1355.56,688.674 1356.12,688.674 1356.67,688.674 1357.23,688.674 1357.79,688.674 1358.35,688.674 1358.91,688.674 1359.47,688.674 1360.03,688.674 1360.59,688.674 1361.15,688.674 1361.71,688.674 1362.27,688.674 1362.83,688.674 1363.39,688.674 1363.94,688.674 1364.5,688.674 1365.06,688.674 1365.62,688.674 1366.18,688.674 1366.74,688.674 1367.3,688.674 1367.86,688.674 1368.42,688.674 1368.98,688.674 1369.54,688.674 1370.1,688.674 1370.66,688.674 1371.21,688.674 1371.77,688.674 1372.33,688.674 1372.89,688.674 1373.45,688.674 1374.01,688.674 1374.57,688.674 1375.13,688.674 1375.69,688.674 1376.25,688.674 1376.81,688.674 1377.37,688.674 1377.93,688.674 1378.49,688.674 1379.04,688.674 1379.6,688.674 1380.16,688.674 1380.72,688.674 1381.28,688.674 1381.84,688.674 1382.4,688.674 1382.96,688.674 1383.52,688.674 1384.08,688.674 1384.64,688.674 1385.2,688.674 1385.76,688.674 1386.31,688.674 1386.87,688.674 1387.43,688.674 1387.99,688.674 1388.55,688.674 1389.11,688.674 1389.67,688.674 1390.23,688.674 1390.79,688.674 1391.35,688.674 1391.91,688.674 1392.47,688.674 1393.03,688.674 1393.58,688.674 1394.14,688.674 1394.7,688.674 1395.26,688.674 1395.82,688.674 1396.38,688.674 1396.94,688.674 1397.5,688.674 1398.06,688.674 1398.62,688.674 1399.18,688.674 1399.74,688.674 1400.3,688.674 1400.86,688.674 1401.41,688.674 1401.97,688.674 1402.53,688.674 1403.09,688.674 1403.65,688.674 1404.21,688.674 1404.77,688.674 1405.33,688.674 1405.89,688.674 1406.45,688.674 1407.01,688.674 1407.57,688.674 1408.13,688.674 1408.68,688.674 1409.24,688.674 1409.8,688.674 1410.36,688.674 1410.92,688.674 1411.48,688.674 1412.04,688.674 1412.6,688.674 1413.16,688.674 1413.72,688.674 1414.28,688.674 1414.84,688.674 1415.4,688.674 1415.95,688.674 1416.51,688.674 1417.07,688.674 1417.63,688.674 1418.19,688.674 1418.75,688.674 1419.31,688.674 1419.87,688.674 1420.43,688.674 1420.99,688.674 1421.55,688.674 1422.11,688.674 1422.67,688.674 1423.23,688.674 1423.78,688.674 1424.34,688.674 1424.9,688.674 1425.46,688.674 1426.02,688.674 1426.58,688.674 1427.14,688.674 1427.7,688.674 1428.26,688.674 1428.82,688.674 1429.38,688.674 1429.94,688.674 1430.5,688.674 1431.05,688.674 1431.61,688.674 1432.17,688.674 1432.73,688.674 1433.29,688.674 1433.85,688.674 1434.41,688.674 1434.97,688.674 1435.53,688.674 1436.09,688.674 1436.65,688.674 1437.21,688.674 1437.77,688.674 1438.33,688.674 1438.88,688.674 1439.44,688.674 1440,688.674 1440.56,688.674 1441.12,688.674 1441.68,688.674 1442.24,688.674 1442.8,688.674 1443.36,688.674 1443.92,688.674 1444.48,688.674 1445.04,688.674 1445.6,688.674 1446.15,688.674 1446.71,688.674 1447.27,688.674 1447.83,688.674 1448.39,688.674 1448.95,688.674 1449.51,688.674 1450.07,688.674 1450.63,688.674 1451.19,688.674 1451.75,688.674 1452.31,688.674 1452.87,688.674 1453.42,688.674 1453.98,688.674 1454.54,688.674 1455.1,688.674 1455.66,688.674 1456.22,688.674 1456.78,688.674 1457.34,688.674 1457.9,688.674 1458.46,688.674 1459.02,688.674 1459.58,688.674 1460.14,688.674 1460.7,688.674 1461.25,688.674 1461.81,688.674 1462.37,688.674 1462.93,688.674 1463.49,688.674 1464.05,688.674 1464.61,688.674 1465.17,688.674 1465.73,688.674 1466.29,688.674 1466.85,688.674 1467.41,688.674 1467.97,688.674 1468.52,688.674 1469.08,688.674 1469.64,688.674 1470.2,688.674 1470.76,688.674 1471.32,688.674 1471.88,688.674 1472.44,688.674 1473,688.674 1473.56,688.674 1474.12,688.674 1474.68,688.674 1475.24,688.674 1475.79,688.674 1476.35,688.674 1476.91,688.674 1477.47,688.674 1478.03,688.674 1478.59,688.674 1479.15,688.674 1479.71,688.674 1480.27,688.674 1480.83,688.674 1481.39,688.674 1481.95,688.674 1482.51,688.674 1483.07,688.674 1483.62,688.674 1484.18,688.674 1484.74,688.674 1485.3,688.674 1485.86,688.674 1486.42,688.674 1486.98,688.674 1487.54,688.674 1488.1,688.674 1488.66,688.674 1489.22,688.674 1489.78,688.674 1490.34,688.674 1490.89,688.674 1491.45,688.674 1492.01,688.674 1492.57,688.674 1493.13,688.674 1493.69,688.674 1494.25,688.674 1494.81,688.674 1495.37,688.674 1495.93,688.674 1496.49,688.674 1497.05,688.674 1497.61,688.674 1498.16,688.674 1498.72,688.674 1499.28,688.674 1499.84,688.674 1500.4,688.674 1500.96,688.674 1501.52,688.674 1502.08,688.674 1502.64,688.674 1503.2,688.674 1503.76,688.674 1504.32,688.674 1504.88,688.674 1505.44,688.674 1505.99,688.674 1506.55,688.674 1507.11,688.674 1507.67,688.674 1508.23,688.674 1508.79,688.674 1509.35,688.674 1509.91,688.674 1510.47,688.674 1511.03,688.674 1511.59,688.674 1512.15,688.674 1512.71,688.674 1513.26,688.674 1513.82,688.674 1514.38,688.674 1514.94,688.674 1515.5,688.674 1516.06,688.674 1516.62,688.674 1517.18,688.674 1517.74,688.674 1518.3,688.674 1518.86,688.674 1519.42,688.674 1519.98,688.674 1520.53,688.674 1521.09,688.674 1521.65,688.674 1522.21,688.674 1522.77,688.674 1523.33,688.674 1523.89,688.674 1524.45,688.674 1525.01,688.674 1525.57,688.674 1526.13,688.674 1526.69,688.674 1527.25,688.674 1527.81,688.674 1528.36,688.674 1528.92,688.674 1529.48,688.674 1530.04,688.674 1530.6,688.674 1531.16,688.674 1531.72,688.674 1532.28,688.674 1532.84,688.674 1533.4,688.674 1533.96,688.674 1534.52,688.674 1535.08,688.674 1535.63,688.674 1536.19,688.674 1536.75,688.674 1537.31,688.674 1537.87,688.674 1538.43,688.674 1538.99,688.674 1539.55,688.674 1540.11,688.674 1540.67,688.674 1541.23,688.674 1541.79,688.674 1542.35,688.674 1542.9,688.674 1543.46,688.674 1544.02,688.674 1544.58,688.674 1545.14,688.674 1545.7,688.674 1546.26,688.674 1546.82,688.674 1547.38,688.674 1547.94,688.674 1548.5,688.674 1549.06,688.674 1549.62,688.674 1550.18,688.674 1550.73,688.674 1551.29,688.674 1551.85,688.674 1552.41,688.674 1552.97,688.674 1553.53,688.674 1554.09,688.674 1554.65,688.674 1555.21,688.674 1555.77,688.674 1556.33,688.674 1556.89,688.674 1557.45,688.674 1558,688.674 1558.56,688.674 1559.12,688.674 1559.68,688.674 1560.24,688.674 1560.8,688.674 1561.36,688.674 1561.92,688.674 1562.48,688.674 1563.04,688.674 1563.6,688.674 1564.16,688.674 1564.72,688.674 1565.28,688.674 1565.83,688.674 1566.39,688.674 1566.95,688.674 1567.51,688.674 1568.07,688.674 1568.63,688.674 1569.19,688.674 1569.75,688.674 1570.31,688.674 1570.87,688.674 1571.43,688.674 1571.99,688.674 1572.55,688.674 1573.1,688.674 1573.66,688.674 1574.22,688.674 1574.78,688.674 1575.34,688.674 1575.9,688.674 1576.46,688.674 1577.02,688.674 1577.58,688.674 1578.14,688.674 1578.7,688.674 1579.26,688.674 1579.82,688.674 1580.37,688.674 1580.93,688.674 1581.49,688.674 1582.05,688.674 1582.61,688.674 1583.17,688.674 1583.73,688.674 1584.29,688.674 1584.85,688.674 1585.41,688.674 1585.97,688.674 1586.53,688.674 1587.09,688.674 1587.65,688.674 1588.2,688.674 1588.76,688.674 1589.32,688.674 1589.88,688.674 1590.44,688.674 1591,688.674 1591.56,688.674 1592.12,688.674 1592.68,688.674 1593.24,688.674 1593.8,688.674 1594.36,688.674 1594.92,688.674 1595.47,688.674 1596.03,688.674 1596.59,688.674 1597.15,688.674 1597.71,688.674 1598.27,688.674 1598.83,688.674 1599.39,688.674 1599.95,688.674 1600.51,688.674 1601.07,688.674 1601.63,688.674 1602.19,688.674 1602.74,688.674 1603.3,688.674 1603.86,688.674 1604.42,688.674 1604.98,688.674 1605.54,688.674 1606.1,688.674 1606.66,688.674 1607.22,688.674 1607.78,688.674 1608.34,688.674 1608.9,688.674 1609.46,688.674 1610.02,688.674 1610.57,688.674 1611.13,688.674 1611.69,688.674 1612.25,688.674 1612.81,688.674 1613.37,688.674 1613.93,688.674 1614.49,688.674 1615.05,688.674 1615.61,688.674 1616.17,688.674 1616.73,688.674 1617.29,688.674 1617.84,688.674 1618.4,688.674 1618.96,688.674 1619.52,688.674 1620.08,688.674 1620.64,688.674 1621.2,688.674 1621.76,688.674 1622.32,688.674 1622.88,688.674 1623.44,688.674 1624,688.674 1624.56,688.674 1625.11,688.674 1625.67,688.674 1626.23,688.674 1626.79,688.674 1627.35,688.674 1627.91,688.674 1628.47,688.674 1629.03,688.674 1629.59,688.674 1630.15,688.674 1630.71,688.674 1631.27,688.674 1631.83,688.674 1632.39,688.674 1632.94,688.674 1633.5,688.674 1634.06,688.674 1634.62,688.674 1635.18,688.674 1635.74,688.674 1636.3,688.674 1636.86,688.674 1637.42,688.674 1637.98,688.674 1638.54,688.674 1639.1,688.674 1639.66,688.674 1640.21,688.674 1640.77,688.674 1641.33,688.674 1641.89,688.674 1642.45,688.674 1643.01,688.674 1643.57,688.674 1644.13,688.674 1644.69,688.674 1645.25,688.674 1645.81,688.674 1646.37,688.674 1646.93,688.674 1647.48,688.674 1648.04,688.674 1648.6,688.674 1649.16,688.674 1649.72,688.674 1650.28,688.674 1650.84,688.674 1651.4,688.674 1651.96,688.674 1652.52,688.674 1653.08,688.674 1653.64,688.674 1654.2,688.674 1654.76,688.674 1655.31,688.674 1655.87,688.674 1656.43,688.674 1656.99,688.674 1657.55,688.674 1658.11,688.674 1658.67,688.674 1659.23,688.674 1659.79,688.674 1660.35,688.674 1660.91,688.674 1661.47,688.674 1662.03,688.674 1662.58,688.674 1663.14,688.674 1663.7,688.674 1664.26,688.674 1664.82,688.674 1665.38,688.674 1665.94,688.674 1666.5,688.674 1667.06,688.674 1667.62,688.674 1668.18,688.674 1668.74,688.674 1669.3,688.674 1669.85,688.674 1670.41,688.674 1670.97,688.674 1671.53,688.674 1672.09,688.674 1672.65,688.674 1673.21,688.674 1673.77,688.674 1674.33,688.674 1674.89,688.674 1675.45,688.674 1676.01,688.674 1676.57,688.674 1677.13,688.674 1677.68,688.674 1678.24,688.674 1678.8,688.674 1679.36,688.674 1679.92,688.674 1680.48,688.674 1681.04,688.674 1681.6,688.674 1682.16,688.674 1682.72,688.674 1683.28,688.674 1683.84,688.674 1684.4,688.674 1684.95,688.674 1685.51,688.674 1686.07,688.674 1686.63,688.674 1687.19,688.674 1687.75,688.674 1688.31,688.674 1688.87,688.674 1689.43,688.674 1689.99,688.674 1690.55,688.674 1691.11,688.674 1691.67,688.674 1692.23,688.674 1692.78,688.674 1693.34,688.674 1693.9,688.674 1694.46,688.674 1695.02,688.674 1695.58,688.674 1696.14,688.674 1696.7,688.674 1697.26,688.674 1697.82,688.674 1698.38,688.674 1698.94,688.674 1699.5,688.674 1700.05,688.674 1700.61,688.674 1701.17,688.674 1701.73,688.674 1702.29,688.674 1702.85,688.674 1703.41,688.674 1703.97,688.674 1704.53,688.674 1705.09,688.674 1705.65,688.674 1706.21,688.674 1706.77,688.674 1707.32,688.674 1707.88,688.674 1708.44,688.674 1709,688.674 1709.56,688.674 1710.12,688.674 1710.68,688.674 1711.24,688.674 1711.8,688.674 1712.36,688.674 1712.92,688.674 1713.48,688.674 1714.04,688.674 1714.6,688.674 1715.15,688.674 1715.71,688.674 1716.27,688.674 1716.83,688.674 1717.39,688.674 1717.95,688.674 1718.51,688.674 1719.07,688.674 1719.63,688.674 1720.19,688.674 1720.75,688.674 1721.31,688.674 1721.87,688.674 1722.42,688.674 1722.98,688.674 1723.54,688.674 1724.1,688.674 1724.66,688.674 1725.22,688.674 1725.78,688.674 1726.34,688.674 1726.9,688.674 1727.46,688.674 1728.02,688.674 1728.58,688.674 1729.14,688.674 1729.69,688.674 1730.25,688.674 1730.81,688.674 1731.37,688.674 1731.93,688.674 1732.49,688.674 1733.05,688.674 1733.61,688.674 1734.17,688.674 1734.73,688.674 1735.29,688.674 1735.85,688.674 1736.41,688.674 1736.97,688.674 1737.52,688.674 1738.08,688.674 1738.64,688.674 1739.2,688.674 1739.76,688.674 1740.32,688.674 1740.88,688.674 1741.44,688.674 1742,688.674 1742.56,688.674 1743.12,688.674 1743.68,688.674 1744.24,688.674 1744.79,688.674 1745.35,688.674 1745.91,688.674 1746.47,688.674 1747.03,688.674 1747.59,688.674 1748.15,688.674 1748.71,688.674 1749.27,688.674 1749.83,688.674 1750.39,688.674 1750.95,688.674 1751.51,688.674 1752.06,688.674 1752.62,688.674 1753.18,688.674 1753.74,688.674 1754.3,688.674 1754.86,688.674 1755.42,688.674 1755.98,688.674 1756.54,688.674 1757.1,688.674 1757.66,688.674 1758.22,688.674 1758.78,688.674 1759.34,688.674 1759.89,688.674 1760.45,688.674 1761.01,688.674 1761.57,688.674 1762.13,688.674 1762.69,688.674 1763.25,688.674 1763.81,688.674 1764.37,688.674 1764.93,688.674 1765.49,688.674 1766.05,688.674 1766.61,688.674 1767.16,688.674 1767.72,688.674 1768.28,688.674 1768.84,688.674 1769.4,688.674 1769.96,688.674 1770.52,688.674 1771.08,688.674 1771.64,688.674 1772.2,688.674 1772.76,688.674 1773.32,688.674 1773.88,688.674 1774.43,688.674 1774.99,688.674 1775.55,688.674 1776.11,688.674 1776.67,688.674 1777.23,688.674 1777.79,688.674 1778.35,688.674 1778.91,688.674 1779.47,688.674 1780.03,688.674 1780.59,688.674 1781.15,688.674 1781.71,688.674 1782.26,688.674 1782.82,688.674 1783.38,688.674 1783.94,688.674 1784.5,688.674 1785.06,688.674 1785.62,688.674 1786.18,688.674 1786.74,688.674 1787.3,688.674 1787.86,688.674 1788.42,688.674 1788.98,688.674 1789.53,688.674 1790.09,688.674 1790.65,688.674 1791.21,688.674 1791.77,688.674 1792.33,688.674 1792.89,688.674 1793.45,688.674 1794.01,688.674 1794.57,688.674 1795.13,688.674 1795.69,688.674 1796.25,688.674 1796.8,688.674 1797.36,688.674 1797.92,688.674 1798.48,688.674 1799.04,688.674 1799.6,688.674 1800.16,688.674 1800.72,688.674 1801.28,688.674 1801.84,688.674 1802.4,688.674 1802.96,688.674 1803.52,688.674 1804.08,688.674 1804.63,688.674 1805.19,688.674 1805.75,688.674 1806.31,688.674 1806.87,688.674 1807.43,688.674 1807.99,688.674 1808.55,688.674 1809.11,688.674 1809.67,688.674 1810.23,688.674 1810.79,688.674 1811.35,688.674 1811.9,688.674 1812.46,688.674 1813.02,688.674 1813.58,688.674 1814.14,688.674 1814.7,688.674 1815.26,688.674 1815.82,688.674 1816.38,688.674 1816.94,688.674 1817.5,688.674 1818.06,688.674 1818.62,688.674 1819.18,688.674 1819.73,688.674 1820.29,688.674 1820.85,688.674 1821.41,688.674 1821.97,688.674 1822.53,688.674 1823.09,688.674 1823.65,688.674 1824.21,688.674 1824.77,688.674 1825.33,688.674 1825.89,688.674 1826.45,688.674 1827,688.674 1827.56,688.674 1828.12,688.674 1828.68,688.674 1829.24,688.674 1829.8,688.674 1830.36,688.674 1830.92,688.674 1831.48,688.674 1832.04,688.674 1832.6,688.674 1833.16,688.674 1833.72,688.674 1834.27,688.674 1834.83,688.674 1835.39,688.674 1835.95,688.674 1836.51,688.674 1837.07,688.674 1837.63,688.674 1838.19,688.674 \"/>\n<path clip-path=\"url(#clip933)\" d=\"M720.247 685.381 L720.806 685.381 L721.365 685.381 L721.924 685.381 L722.484 685.381 L723.043 685.381 L723.602 685.381 L724.161 685.381 L724.721 685.381 L725.28 685.381 L725.839 685.381 L726.398 685.381 L726.958 685.381 L727.517 685.381 L728.076 685.381 L728.635 685.381 L729.195 685.381 L729.754 685.381 L730.313 685.381 L730.872 685.381 L731.432 685.381 L731.991 685.381 L732.55 685.381 L733.109 685.381 L733.669 685.381 L734.228 685.381 L734.787 685.381 L735.346 685.381 L735.906 685.381 L736.465 685.381 L737.024 685.381 L737.583 685.381 L738.143 685.381 L738.702 685.381 L739.261 685.381 L739.82 685.381 L740.38 685.381 L740.939 685.381 L741.498 685.381 L742.057 685.381 L742.617 685.381 L743.176 685.381 L743.735 685.381 L744.294 685.381 L744.854 685.381 L745.413 685.381 L745.972 685.381 L746.531 685.381 L747.091 685.381 L747.65 685.381 L748.209 685.381 L748.768 685.381 L749.328 685.381 L749.887 685.381 L750.446 685.381 L751.005 685.381 L751.565 685.381 L752.124 685.381 L752.683 685.381 L753.242 685.381 L753.802 685.381 L754.361 685.381 L754.92 685.381 L755.479 685.381 L756.039 685.381 L756.598 685.381 L757.157 685.381 L757.716 685.381 L758.276 685.381 L758.835 685.381 L759.394 685.381 L759.953 685.381 L760.513 685.381 L761.072 685.381 L761.631 685.381 L762.19 685.381 L762.75 685.381 L763.309 685.381 L763.868 685.381 L764.427 685.381 L764.987 685.381 L765.546 685.381 L766.105 685.381 L766.664 685.381 L767.224 685.381 L767.783 685.381 L768.342 685.381 L768.901 685.381 L769.461 685.381 L770.02 685.381 L770.579 685.381 L771.138 685.381 L771.698 685.381 L772.257 685.381 L772.816 685.381 L773.375 685.381 L773.935 685.381 L774.494 685.381 L775.053 685.381 L775.612 685.381 L776.172 685.381 L776.731 685.381 L777.29 685.381 L777.849 685.381 L778.409 685.381 L778.968 685.381 L779.527 685.381 L780.086 685.381 L780.646 685.381 L781.205 685.381 L781.764 685.381 L782.323 685.381 L782.883 685.381 L783.442 685.381 L784.001 685.381 L784.56 685.381 L785.12 685.381 L785.679 685.381 L786.238 685.381 L786.797 685.381 L787.357 685.381 L787.916 685.381 L788.475 685.381 L789.034 685.381 L789.594 685.381 L790.153 685.381 L790.712 685.381 L791.271 685.381 L791.831 685.381 L792.39 685.381 L792.949 685.381 L793.508 685.381 L794.068 685.381 L794.627 685.381 L795.186 685.381 L795.745 685.381 L796.305 685.381 L796.864 685.381 L797.423 685.381 L797.982 685.381 L798.542 685.381 L799.101 685.381 L799.66 685.381 L800.219 685.381 L800.779 685.381 L801.338 685.381 L801.897 685.381 L802.456 685.381 L803.016 685.381 L803.575 685.381 L804.134 685.381 L804.693 685.381 L805.253 685.381 L805.812 685.381 L806.371 685.381 L806.931 685.381 L807.49 685.381 L808.049 685.381 L808.608 685.381 L809.168 685.381 L809.727 685.381 L810.286 685.381 L810.845 685.381 L811.405 685.381 L811.964 685.381 L812.523 685.381 L813.082 685.381 L813.642 685.381 L814.201 685.381 L814.76 685.381 L815.319 685.381 L815.879 685.381 L816.438 685.381 L816.997 685.381 L817.556 685.381 L818.116 685.381 L818.675 685.381 L819.234 685.381 L819.793 685.381 L820.353 685.381 L820.912 685.381 L821.471 685.381 L822.03 685.381 L822.59 685.381 L823.149 685.381 L823.708 685.381 L824.267 685.381 L824.827 685.381 L825.386 685.381 L825.945 685.381 L826.504 685.381 L827.064 685.381 L827.623 685.381 L828.182 685.381 L828.741 685.381 L829.301 685.381 L829.86 685.381 L830.419 685.381 L830.978 685.381 L831.538 685.381 L832.097 685.381 L832.656 685.381 L833.215 685.381 L833.775 685.381 L834.334 685.381 L834.893 685.381 L835.452 685.381 L836.012 685.381 L836.571 685.381 L837.13 685.381 L837.689 685.381 L838.249 685.381 L838.808 685.381 L839.367 685.381 L839.926 685.381 L840.486 685.381 L841.045 685.381 L841.604 685.381 L842.163 685.381 L842.723 685.381 L843.282 685.381 L843.841 685.381 L844.4 685.381 L844.96 685.381 L845.519 685.381 L846.078 685.381 L846.637 685.381 L847.197 685.381 L847.756 685.381 L848.315 685.381 L848.874 685.381 L849.434 685.381 L849.993 685.381 L850.552 685.381 L851.111 685.381 L851.671 685.381 L852.23 685.381 L852.789 685.381 L853.348 685.381 L853.908 685.381 L854.467 685.381 L855.026 685.381 L855.585 685.381 L856.145 685.381 L856.704 685.381 L857.263 685.381 L857.822 685.381 L858.382 685.381 L858.941 685.381 L859.5 685.381 L860.059 685.381 L860.619 685.381 L861.178 685.381 L861.737 685.381 L862.296 685.381 L862.856 685.381 L863.415 685.381 L863.974 685.381 L864.533 685.381 L865.093 685.381 L865.652 685.381 L866.211 685.381 L866.77 685.381 L867.33 685.381 L867.889 685.381 L868.448 685.381 L869.007 685.381 L869.567 685.381 L870.126 685.381 L870.685 685.381 L871.244 685.381 L871.804 685.381 L872.363 685.381 L872.922 685.381 L873.481 685.381 L874.041 685.381 L874.6 685.381 L875.159 685.381 L875.718 685.381 L876.278 685.381 L876.837 685.381 L877.396 685.381 L877.955 685.381 L878.515 685.381 L879.074 685.381 L879.633 685.381 L880.192 685.381 L880.752 685.381 L881.311 685.381 L881.87 685.381 L882.429 685.381 L882.989 685.381 L883.548 685.381 L884.107 685.381 L884.666 685.381 L885.226 685.381 L885.785 685.381 L886.344 685.381 L886.903 685.381 L887.463 685.381 L888.022 685.381 L888.581 685.381 L889.14 685.381 L889.7 685.381 L890.259 685.381 L890.818 685.381 L891.377 685.381 L891.937 685.381 L892.496 685.381 L893.055 685.381 L893.614 685.381 L894.174 685.381 L894.733 685.381 L895.292 685.381 L895.851 685.381 L896.411 685.381 L896.97 685.381 L897.529 685.381 L898.088 685.381 L898.648 685.381 L899.207 685.381 L899.766 685.381 L900.325 685.381 L900.885 685.381 L901.444 685.381 L902.003 685.381 L902.562 685.381 L903.122 685.381 L903.681 685.381 L904.24 685.381 L904.799 685.381 L905.359 685.381 L905.918 685.381 L906.477 685.381 L907.036 685.381 L907.596 685.381 L908.155 685.381 L908.714 685.381 L909.273 685.381 L909.833 685.381 L910.392 685.381 L910.951 685.381 L911.51 685.381 L912.07 685.381 L912.629 685.381 L913.188 685.381 L913.747 685.381 L914.307 685.381 L914.866 685.381 L915.425 685.381 L915.984 685.381 L916.544 685.381 L917.103 685.381 L917.662 685.381 L918.221 685.381 L918.781 685.381 L919.34 685.381 L919.899 685.381 L920.458 685.381 L921.018 685.381 L921.577 685.381 L922.136 685.381 L922.695 685.381 L923.255 685.381 L923.814 685.381 L924.373 685.381 L924.932 685.381 L925.492 685.381 L926.051 685.381 L926.61 685.381 L927.169 685.381 L927.729 685.381 L928.288 685.381 L928.847 685.381 L929.406 685.381 L929.966 685.381 L930.525 685.381 L931.084 685.381 L931.644 685.381 L932.203 685.381 L932.762 685.381 L933.321 685.381 L933.881 685.381 L934.44 685.381 L934.999 685.381 L935.558 685.381 L936.118 685.381 L936.677 685.381 L937.236 685.381 L937.795 685.381 L938.355 685.381 L938.914 685.381 L939.473 685.381 L940.032 685.381 L940.592 685.381 L941.151 685.381 L941.71 685.381 L942.269 685.381 L942.829 685.381 L943.388 685.381 L943.947 685.381 L944.506 685.381 L945.066 685.381 L945.625 685.381 L946.184 685.381 L946.743 685.381 L947.303 685.381 L947.862 685.381 L948.421 685.381 L948.98 685.381 L949.54 685.381 L950.099 685.381 L950.658 685.381 L951.217 685.381 L951.777 685.381 L952.336 685.381 L952.895 685.381 L953.454 685.381 L954.014 685.381 L954.573 685.381 L955.132 685.381 L955.691 685.381 L956.251 685.381 L956.81 685.381 L957.369 685.381 L957.928 685.381 L958.488 685.381 L959.047 685.381 L959.606 685.381 L960.165 685.381 L960.725 685.381 L961.284 685.381 L961.843 685.381 L962.402 685.381 L962.962 685.381 L963.521 685.381 L964.08 685.381 L964.639 685.381 L965.199 685.381 L965.758 685.381 L966.317 685.381 L966.876 685.381 L967.436 685.381 L967.995 685.381 L968.554 685.381 L969.113 685.381 L969.673 685.381 L970.232 685.381 L970.791 685.381 L971.35 685.381 L971.91 685.381 L972.469 685.381 L973.028 685.381 L973.587 685.381 L974.147 685.381 L974.706 685.381 L975.265 685.381 L975.824 685.381 L976.384 685.381 L976.943 685.381 L977.502 685.381 L978.061 685.381 L978.621 685.381 L979.18 685.381 L979.739 685.381 L980.298 685.381 L980.858 685.381 L981.417 685.381 L981.976 685.381 L982.535 685.381 L983.095 685.381 L983.654 685.381 L984.213 685.381 L984.772 685.381 L985.332 685.381 L985.891 685.381 L986.45 685.381 L987.009 685.381 L987.569 685.381 L988.128 685.381 L988.687 685.381 L989.246 685.381 L989.806 685.381 L990.365 685.381 L990.924 685.381 L991.483 685.381 L992.043 685.381 L992.602 685.381 L993.161 685.381 L993.72 685.381 L994.28 685.381 L994.839 685.381 L995.398 685.381 L995.957 685.381 L996.517 685.381 L997.076 685.381 L997.635 685.381 L998.194 685.381 L998.754 685.381 L999.313 685.381 L999.872 685.381 L1000.43 685.381 L1000.99 685.381 L1001.55 685.381 L1002.11 685.381 L1002.67 685.381 L1003.23 685.381 L1003.79 685.381 L1004.35 685.381 L1004.91 685.381 L1005.46 685.381 L1006.02 685.381 L1006.58 685.381 L1007.14 685.381 L1007.7 685.381 L1008.26 685.381 L1008.82 685.381 L1009.38 685.381 L1009.94 685.381 L1010.5 685.381 L1011.06 685.381 L1011.62 685.381 L1012.18 685.381 L1012.73 685.381 L1013.29 685.381 L1013.85 685.381 L1014.41 685.381 L1014.97 685.381 L1015.53 685.381 L1016.09 685.381 L1016.65 685.381 L1017.21 685.381 L1017.77 685.381 L1018.33 685.381 L1018.89 685.381 L1019.45 685.381 L1020.01 685.381 L1020.56 685.381 L1021.12 685.381 L1021.68 685.381 L1022.24 685.381 L1022.8 685.381 L1023.36 685.381 L1023.92 685.381 L1024.48 685.381 L1025.04 685.381 L1025.6 685.381 L1026.16 685.381 L1026.72 685.381 L1027.28 685.381 L1027.83 685.381 L1028.39 685.381 L1028.95 685.381 L1029.51 685.381 L1030.07 685.381 L1030.63 685.381 L1031.19 685.381 L1031.75 685.381 L1032.31 685.381 L1032.87 685.381 L1033.43 685.381 L1033.99 685.381 L1034.55 685.381 L1035.1 685.381 L1035.66 685.381 L1036.22 685.381 L1036.78 685.381 L1037.34 685.381 L1037.9 685.381 L1038.46 685.381 L1039.02 685.381 L1039.58 685.381 L1040.14 685.381 L1040.7 685.381 L1041.26 685.381 L1041.82 685.381 L1042.38 685.381 L1042.93 685.381 L1043.49 685.381 L1044.05 685.381 L1044.61 685.381 L1045.17 685.381 L1045.73 685.381 L1046.29 685.381 L1046.85 685.381 L1047.41 685.381 L1047.97 685.381 L1048.53 685.381 L1049.09 685.381 L1049.65 685.381 L1050.2 685.381 L1050.76 685.381 L1051.32 685.381 L1051.88 685.381 L1052.44 685.381 L1053 685.381 L1053.56 685.381 L1054.12 685.381 L1054.68 685.381 L1055.24 685.381 L1055.8 685.381 L1056.36 685.381 L1056.92 685.381 L1057.48 685.381 L1058.03 685.381 L1058.59 685.381 L1059.15 685.381 L1059.71 685.381 L1060.27 685.381 L1060.83 685.381 L1061.39 685.381 L1061.95 685.381 L1062.51 685.381 L1063.07 685.381 L1063.63 685.381 L1064.19 685.381 L1064.75 685.381 L1065.3 685.381 L1065.86 685.381 L1066.42 685.381 L1066.98 685.381 L1067.54 685.381 L1068.1 685.381 L1068.66 685.381 L1069.22 685.381 L1069.78 685.381 L1070.34 685.381 L1070.9 685.381 L1071.46 685.381 L1072.02 685.381 L1072.57 685.381 L1073.13 685.381 L1073.69 685.381 L1074.25 685.381 L1074.81 685.381 L1075.37 685.381 L1075.93 685.381 L1076.49 685.381 L1077.05 685.381 L1077.61 685.381 L1078.17 685.381 L1078.73 685.381 L1079.29 685.381 L1079.85 685.381 L1080.4 685.381 L1080.96 685.381 L1081.52 685.381 L1082.08 685.381 L1082.64 685.381 L1083.2 685.381 L1083.76 685.381 L1084.32 685.381 L1084.88 685.381 L1085.44 685.381 L1086 685.381 L1086.56 685.381 L1087.12 685.381 L1087.67 685.381 L1088.23 685.381 L1088.79 685.381 L1089.35 685.381 L1089.91 685.381 L1090.47 685.381 L1091.03 685.381 L1091.59 685.381 L1092.15 685.381 L1092.71 685.381 L1093.27 685.381 L1093.83 685.381 L1094.39 685.381 L1094.94 685.381 L1095.5 685.381 L1096.06 685.381 L1096.62 685.381 L1097.18 685.381 L1097.74 685.381 L1098.3 685.381 L1098.86 685.381 L1099.42 685.381 L1099.98 685.381 L1100.54 685.381 L1101.1 685.381 L1101.66 685.381 L1102.22 685.381 L1102.77 685.381 L1103.33 685.381 L1103.89 685.381 L1104.45 685.381 L1105.01 685.381 L1105.57 685.381 L1106.13 685.381 L1106.69 685.381 L1107.25 685.381 L1107.81 685.381 L1108.37 685.381 L1108.93 685.381 L1109.49 685.381 L1110.04 685.381 L1110.6 685.381 L1111.16 685.381 L1111.72 685.381 L1112.28 685.381 L1112.84 685.381 L1113.4 685.381 L1113.96 685.381 L1114.52 685.381 L1115.08 685.381 L1115.64 685.381 L1116.2 685.381 L1116.76 685.381 L1117.31 685.381 L1117.87 685.381 L1118.43 685.381 L1118.99 685.381 L1119.55 685.381 L1120.11 685.381 L1120.67 685.381 L1121.23 685.381 L1121.79 685.381 L1122.35 685.381 L1122.91 685.381 L1123.47 685.381 L1124.03 685.381 L1124.59 685.381 L1125.14 685.381 L1125.7 685.381 L1126.26 685.381 L1126.82 685.381 L1127.38 685.381 L1127.94 685.381 L1128.5 685.381 L1129.06 685.381 L1129.62 685.381 L1130.18 685.381 L1130.74 685.381 L1131.3 685.381 L1131.86 685.381 L1132.41 685.381 L1132.97 685.381 L1133.53 685.381 L1134.09 685.381 L1134.65 685.381 L1135.21 685.381 L1135.77 685.381 L1136.33 685.381 L1136.89 685.381 L1137.45 685.381 L1138.01 685.381 L1138.57 685.381 L1139.13 685.381 L1139.68 685.381 L1140.24 685.381 L1140.8 685.381 L1141.36 685.381 L1141.92 685.381 L1142.48 685.381 L1143.04 685.381 L1143.6 685.381 L1144.16 685.381 L1144.72 685.381 L1145.28 685.381 L1145.84 685.381 L1146.4 685.381 L1146.96 685.381 L1147.51 685.381 L1148.07 685.381 L1148.63 685.381 L1149.19 685.381 L1149.75 685.381 L1150.31 685.381 L1150.87 685.381 L1151.43 685.381 L1151.99 685.381 L1152.55 685.381 L1153.11 685.381 L1153.67 685.381 L1154.23 685.381 L1154.78 685.381 L1155.34 685.381 L1155.9 685.381 L1156.46 685.381 L1157.02 685.381 L1157.58 685.381 L1158.14 685.381 L1158.7 685.381 L1159.26 685.381 L1159.82 685.381 L1160.38 685.381 L1160.94 685.381 L1161.5 685.381 L1162.05 685.381 L1162.61 685.381 L1163.17 685.381 L1163.73 685.381 L1164.29 685.381 L1164.85 685.381 L1165.41 685.381 L1165.97 685.381 L1166.53 685.381 L1167.09 685.381 L1167.65 685.381 L1168.21 685.381 L1168.77 685.381 L1169.33 685.381 L1169.88 685.381 L1170.44 685.381 L1171 685.381 L1171.56 685.381 L1172.12 685.381 L1172.68 685.381 L1173.24 685.381 L1173.8 685.381 L1174.36 685.381 L1174.92 685.381 L1175.48 685.381 L1176.04 685.381 L1176.6 685.381 L1177.15 685.381 L1177.71 685.381 L1178.27 685.381 L1178.83 685.381 L1179.39 685.381 L1179.95 685.381 L1180.51 685.381 L1181.07 685.381 L1181.63 685.381 L1182.19 685.381 L1182.75 685.381 L1183.31 685.381 L1183.87 685.381 L1184.43 685.381 L1184.98 685.381 L1185.54 685.381 L1186.1 685.381 L1186.66 685.381 L1187.22 685.381 L1187.78 685.381 L1188.34 685.381 L1188.9 685.381 L1189.46 685.381 L1190.02 685.381 L1190.58 685.381 L1191.14 685.381 L1191.7 685.381 L1192.25 685.381 L1192.81 685.381 L1193.37 685.381 L1193.93 685.381 L1194.49 685.381 L1195.05 685.381 L1195.61 685.381 L1196.17 685.381 L1196.73 685.381 L1197.29 685.381 L1197.85 685.381 L1198.41 685.381 L1198.97 685.381 L1199.52 685.381 L1200.08 685.381 L1200.64 685.381 L1201.2 685.381 L1201.76 685.381 L1202.32 685.381 L1202.88 685.381 L1203.44 685.381 L1204 685.381 L1204.56 685.381 L1205.12 685.381 L1205.68 685.381 L1206.24 685.381 L1206.8 685.381 L1207.35 685.381 L1207.91 685.381 L1208.47 685.381 L1209.03 685.381 L1209.59 685.381 L1210.15 685.381 L1210.71 685.381 L1211.27 685.381 L1211.83 685.381 L1212.39 685.381 L1212.95 685.381 L1213.51 685.381 L1214.07 685.381 L1214.62 685.381 L1215.18 685.381 L1215.74 685.381 L1216.3 685.381 L1216.86 685.381 L1217.42 685.381 L1217.98 685.381 L1218.54 685.381 L1219.1 685.381 L1219.66 685.381 L1220.22 685.381 L1220.78 685.381 L1221.34 685.381 L1221.89 685.381 L1222.45 685.381 L1223.01 685.381 L1223.57 685.381 L1224.13 685.381 L1224.69 685.381 L1225.25 685.381 L1225.81 685.381 L1226.37 685.381 L1226.93 685.381 L1227.49 685.381 L1228.05 685.381 L1228.61 685.381 L1229.17 685.381 L1229.72 685.381 L1230.28 685.381 L1230.84 685.381 L1231.4 685.381 L1231.96 685.381 L1232.52 685.381 L1233.08 685.381 L1233.64 685.381 L1234.2 685.381 L1234.76 685.381 L1235.32 685.381 L1235.88 685.381 L1236.44 685.381 L1236.99 685.381 L1237.55 685.381 L1238.11 685.381 L1238.67 685.381 L1239.23 685.381 L1239.79 685.381 L1240.35 685.381 L1240.91 685.381 L1241.47 685.381 L1242.03 685.381 L1242.59 685.381 L1243.15 685.381 L1243.71 685.381 L1244.26 685.381 L1244.82 685.381 L1245.38 685.381 L1245.94 685.381 L1246.5 685.381 L1247.06 685.381 L1247.62 685.381 L1248.18 685.381 L1248.74 685.381 L1249.3 685.381 L1249.86 685.381 L1250.42 685.381 L1250.98 685.381 L1251.54 685.381 L1252.09 685.381 L1252.65 685.381 L1253.21 685.381 L1253.77 685.381 L1254.33 685.381 L1254.89 685.381 L1255.45 685.381 L1256.01 685.381 L1256.57 685.381 L1257.13 685.381 L1257.69 685.381 L1258.25 685.381 L1258.81 685.381 L1259.36 685.381 L1259.92 685.381 L1260.48 685.381 L1261.04 685.381 L1261.6 685.381 L1262.16 685.381 L1262.72 685.381 L1263.28 685.381 L1263.84 685.381 L1264.4 685.381 L1264.96 685.381 L1265.52 685.381 L1266.08 685.381 L1266.63 685.381 L1267.19 685.381 L1267.75 685.381 L1268.31 685.381 L1268.87 685.381 L1269.43 685.381 L1269.99 685.381 L1270.55 685.381 L1271.11 685.381 L1271.67 685.381 L1272.23 685.381 L1272.79 685.381 L1273.35 685.381 L1273.91 685.381 L1274.46 685.381 L1275.02 685.381 L1275.58 685.381 L1276.14 685.381 L1276.7 685.381 L1277.26 685.381 L1277.82 685.381 L1278.38 685.381 L1278.94 685.381 L1279.5 685.381 L1280.06 685.381 L1280.62 685.381 L1281.18 685.381 L1281.73 685.381 L1282.29 685.381 L1282.85 685.381 L1283.41 685.381 L1283.97 685.381 L1284.53 685.381 L1285.09 685.381 L1285.65 685.381 L1286.21 685.381 L1286.77 685.381 L1287.33 685.381 L1287.89 685.381 L1288.45 685.381 L1289 685.381 L1289.56 685.381 L1290.12 685.381 L1290.68 685.381 L1291.24 685.381 L1291.8 685.381 L1292.36 685.381 L1292.92 685.381 L1293.48 685.381 L1294.04 685.381 L1294.6 685.381 L1295.16 685.381 L1295.72 685.381 L1296.28 685.381 L1296.83 685.381 L1297.39 685.381 L1297.95 685.381 L1298.51 685.381 L1299.07 685.381 L1299.63 685.381 L1300.19 685.381 L1300.75 685.381 L1301.31 685.381 L1301.87 685.381 L1302.43 685.381 L1302.99 685.381 L1303.55 685.381 L1304.1 685.381 L1304.66 685.381 L1305.22 685.381 L1305.78 685.381 L1306.34 685.381 L1306.9 685.381 L1307.46 685.381 L1308.02 685.381 L1308.58 685.381 L1309.14 685.381 L1309.7 685.381 L1310.26 685.381 L1310.82 685.381 L1311.38 685.381 L1311.93 685.381 L1312.49 685.381 L1313.05 685.381 L1313.61 685.381 L1314.17 685.381 L1314.73 685.381 L1315.29 685.381 L1315.85 685.381 L1316.41 685.381 L1316.97 685.381 L1317.53 685.381 L1318.09 685.381 L1318.65 685.381 L1319.2 685.381 L1319.76 685.381 L1320.32 685.381 L1320.88 685.381 L1321.44 685.381 L1322 685.381 L1322.56 685.381 L1323.12 685.381 L1323.68 685.381 L1324.24 685.381 L1324.8 685.381 L1325.36 685.381 L1325.92 685.381 L1326.47 685.381 L1327.03 685.381 L1327.59 685.381 L1328.15 685.381 L1328.71 685.381 L1329.27 685.381 L1329.83 685.381 L1330.39 685.381 L1330.95 685.381 L1331.51 685.381 L1332.07 685.381 L1332.63 685.381 L1333.19 685.381 L1333.75 685.381 L1334.3 685.381 L1334.86 685.381 L1335.42 685.381 L1335.98 685.381 L1336.54 685.381 L1337.1 685.381 L1337.66 685.381 L1338.22 685.381 L1338.78 685.381 L1339.34 685.381 L1339.9 685.381 L1340.46 685.381 L1341.02 685.381 L1341.57 685.381 L1342.13 685.381 L1342.69 685.381 L1343.25 685.381 L1343.81 685.381 L1344.37 685.381 L1344.93 685.381 L1345.49 685.381 L1346.05 685.381 L1346.61 685.381 L1347.17 685.381 L1347.73 685.381 L1348.29 685.381 L1348.84 685.381 L1349.4 685.381 L1349.96 685.381 L1350.52 685.381 L1351.08 685.381 L1351.64 685.381 L1352.2 685.381 L1352.76 685.381 L1353.32 685.381 L1353.88 685.381 L1354.44 685.381 L1355 685.381 L1355.56 685.381 L1356.12 685.381 L1356.67 685.381 L1357.23 685.381 L1357.79 685.381 L1358.35 685.381 L1358.91 685.381 L1359.47 685.381 L1360.03 685.381 L1360.59 685.381 L1361.15 685.381 L1361.71 685.381 L1362.27 685.381 L1362.83 685.381 L1363.39 685.381 L1363.94 685.381 L1364.5 685.381 L1365.06 685.381 L1365.62 685.381 L1366.18 685.381 L1366.74 685.381 L1367.3 685.381 L1367.86 685.381 L1368.42 685.381 L1368.98 685.381 L1369.54 685.381 L1370.1 685.381 L1370.66 685.381 L1371.21 685.381 L1371.77 685.381 L1372.33 685.381 L1372.89 685.381 L1373.45 685.381 L1374.01 685.381 L1374.57 685.381 L1375.13 685.381 L1375.69 685.381 L1376.25 685.381 L1376.81 685.381 L1377.37 685.381 L1377.93 685.381 L1378.49 685.381 L1379.04 685.381 L1379.6 685.381 L1380.16 685.381 L1380.72 685.381 L1381.28 685.381 L1381.84 685.381 L1382.4 685.381 L1382.96 685.381 L1383.52 685.381 L1384.08 685.381 L1384.64 685.381 L1385.2 685.381 L1385.76 685.381 L1386.31 685.381 L1386.87 685.381 L1387.43 685.381 L1387.99 685.381 L1388.55 685.381 L1389.11 685.381 L1389.67 685.381 L1390.23 685.381 L1390.79 685.381 L1391.35 685.381 L1391.91 685.381 L1392.47 685.381 L1393.03 685.381 L1393.58 685.381 L1394.14 685.381 L1394.7 685.381 L1395.26 685.381 L1395.82 685.381 L1396.38 685.381 L1396.94 685.381 L1397.5 685.381 L1398.06 685.381 L1398.62 685.381 L1399.18 685.381 L1399.74 685.381 L1400.3 685.381 L1400.86 685.381 L1401.41 685.381 L1401.97 685.381 L1402.53 685.381 L1403.09 685.381 L1403.65 685.381 L1404.21 685.381 L1404.77 685.381 L1405.33 685.381 L1405.89 685.381 L1406.45 685.381 L1407.01 685.381 L1407.57 685.381 L1408.13 685.381 L1408.68 685.381 L1409.24 685.381 L1409.8 685.381 L1410.36 685.381 L1410.92 685.381 L1411.48 685.381 L1412.04 685.381 L1412.6 685.381 L1413.16 685.381 L1413.72 685.381 L1414.28 685.381 L1414.84 685.381 L1415.4 685.381 L1415.95 685.381 L1416.51 685.381 L1417.07 685.381 L1417.63 685.381 L1418.19 685.381 L1418.75 685.381 L1419.31 685.381 L1419.87 685.381 L1420.43 685.381 L1420.99 685.381 L1421.55 685.381 L1422.11 685.381 L1422.67 685.381 L1423.23 685.381 L1423.78 685.381 L1424.34 685.381 L1424.9 685.381 L1425.46 685.381 L1426.02 685.381 L1426.58 685.381 L1427.14 685.381 L1427.7 685.381 L1428.26 685.381 L1428.82 685.381 L1429.38 685.381 L1429.94 685.381 L1430.5 685.381 L1431.05 685.381 L1431.61 685.381 L1432.17 685.381 L1432.73 685.381 L1433.29 685.381 L1433.85 685.381 L1434.41 685.381 L1434.97 685.381 L1435.53 685.381 L1436.09 685.381 L1436.65 685.381 L1437.21 685.381 L1437.77 685.381 L1438.33 685.381 L1438.88 685.381 L1439.44 685.381 L1440 685.381 L1440.56 685.381 L1441.12 685.381 L1441.68 685.381 L1442.24 685.381 L1442.8 685.381 L1443.36 685.381 L1443.92 685.381 L1444.48 685.381 L1445.04 685.381 L1445.6 685.381 L1446.15 685.381 L1446.71 685.381 L1447.27 685.381 L1447.83 685.381 L1448.39 685.381 L1448.95 685.381 L1449.51 685.381 L1450.07 685.381 L1450.63 685.381 L1451.19 685.381 L1451.75 685.381 L1452.31 685.381 L1452.87 685.381 L1453.42 685.381 L1453.98 685.381 L1454.54 685.381 L1455.1 685.381 L1455.66 685.381 L1456.22 685.381 L1456.78 685.381 L1457.34 685.381 L1457.9 685.381 L1458.46 685.381 L1459.02 685.381 L1459.58 685.381 L1460.14 685.381 L1460.7 685.381 L1461.25 685.381 L1461.81 685.381 L1462.37 685.381 L1462.93 685.381 L1463.49 685.381 L1464.05 685.381 L1464.61 685.381 L1465.17 685.381 L1465.73 685.381 L1466.29 685.381 L1466.85 685.381 L1467.41 685.381 L1467.97 685.381 L1468.52 685.381 L1469.08 685.381 L1469.64 685.381 L1470.2 685.381 L1470.76 685.381 L1471.32 685.381 L1471.88 685.381 L1472.44 685.381 L1473 685.381 L1473.56 685.381 L1474.12 685.381 L1474.68 685.381 L1475.24 685.381 L1475.79 685.381 L1476.35 685.381 L1476.91 685.381 L1477.47 685.381 L1478.03 685.381 L1478.59 685.381 L1479.15 685.381 L1479.71 685.381 L1480.27 685.381 L1480.83 685.381 L1481.39 685.381 L1481.95 685.381 L1482.51 685.381 L1483.07 685.381 L1483.62 685.381 L1484.18 685.381 L1484.74 685.381 L1485.3 685.381 L1485.86 685.381 L1486.42 685.381 L1486.98 685.381 L1487.54 685.381 L1488.1 685.381 L1488.66 685.381 L1489.22 685.381 L1489.78 685.381 L1490.34 685.381 L1490.89 685.381 L1491.45 685.381 L1492.01 685.381 L1492.57 685.381 L1493.13 685.381 L1493.69 685.381 L1494.25 685.381 L1494.81 685.381 L1495.37 685.381 L1495.93 685.381 L1496.49 685.381 L1497.05 685.381 L1497.61 685.381 L1498.16 685.381 L1498.72 685.381 L1499.28 685.381 L1499.84 685.381 L1500.4 685.381 L1500.96 685.381 L1501.52 685.381 L1502.08 685.381 L1502.64 685.381 L1503.2 685.381 L1503.76 685.381 L1504.32 685.381 L1504.88 685.381 L1505.44 685.381 L1505.99 685.381 L1506.55 685.381 L1507.11 685.381 L1507.67 685.381 L1508.23 685.381 L1508.79 685.381 L1509.35 685.381 L1509.91 685.381 L1510.47 685.381 L1511.03 685.381 L1511.59 685.381 L1512.15 685.381 L1512.71 685.381 L1513.26 685.381 L1513.82 685.381 L1514.38 685.381 L1514.94 685.381 L1515.5 685.381 L1516.06 685.381 L1516.62 685.381 L1517.18 685.381 L1517.74 685.381 L1518.3 685.381 L1518.86 685.381 L1519.42 685.381 L1519.98 685.381 L1520.53 685.381 L1521.09 685.381 L1521.65 685.381 L1522.21 685.381 L1522.77 685.381 L1523.33 685.381 L1523.89 685.381 L1524.45 685.381 L1525.01 685.381 L1525.57 685.381 L1526.13 685.381 L1526.69 685.381 L1527.25 685.381 L1527.81 685.381 L1528.36 685.381 L1528.92 685.381 L1529.48 685.381 L1530.04 685.381 L1530.6 685.381 L1531.16 685.381 L1531.72 685.381 L1532.28 685.381 L1532.84 685.381 L1533.4 685.381 L1533.96 685.381 L1534.52 685.381 L1535.08 685.381 L1535.63 685.381 L1536.19 685.381 L1536.75 685.381 L1537.31 685.381 L1537.87 685.381 L1538.43 685.381 L1538.99 685.381 L1539.55 685.381 L1540.11 685.381 L1540.67 685.381 L1541.23 685.381 L1541.79 685.381 L1542.35 685.381 L1542.9 685.381 L1543.46 685.381 L1544.02 685.381 L1544.58 685.381 L1545.14 685.381 L1545.7 685.381 L1546.26 685.381 L1546.82 685.381 L1547.38 685.381 L1547.94 685.381 L1548.5 685.381 L1549.06 685.381 L1549.62 685.381 L1550.18 685.381 L1550.73 685.381 L1551.29 685.381 L1551.85 685.381 L1552.41 685.381 L1552.97 685.381 L1553.53 685.381 L1554.09 685.381 L1554.65 685.381 L1555.21 685.381 L1555.77 685.381 L1556.33 685.381 L1556.89 685.381 L1557.45 685.381 L1558 685.381 L1558.56 685.381 L1559.12 685.381 L1559.68 685.381 L1560.24 685.381 L1560.8 685.381 L1561.36 685.381 L1561.92 685.381 L1562.48 685.381 L1563.04 685.381 L1563.6 685.381 L1564.16 685.381 L1564.72 685.381 L1565.28 685.381 L1565.83 685.381 L1566.39 685.381 L1566.95 685.381 L1567.51 685.381 L1568.07 685.381 L1568.63 685.381 L1569.19 685.381 L1569.75 685.381 L1570.31 685.381 L1570.87 685.381 L1571.43 685.381 L1571.99 685.381 L1572.55 685.381 L1573.1 685.381 L1573.66 685.381 L1574.22 685.381 L1574.78 685.381 L1575.34 685.381 L1575.9 685.381 L1576.46 685.381 L1577.02 685.381 L1577.58 685.381 L1578.14 685.381 L1578.7 685.381 L1579.26 685.381 L1579.82 685.381 L1580.37 685.381 L1580.93 685.381 L1581.49 685.381 L1582.05 685.381 L1582.61 685.381 L1583.17 685.381 L1583.73 685.381 L1584.29 685.381 L1584.85 685.381 L1585.41 685.381 L1585.97 685.381 L1586.53 685.381 L1587.09 685.381 L1587.65 685.381 L1588.2 685.381 L1588.76 685.381 L1589.32 685.381 L1589.88 685.381 L1590.44 685.381 L1591 685.381 L1591.56 685.381 L1592.12 685.381 L1592.68 685.381 L1593.24 685.381 L1593.8 685.381 L1594.36 685.381 L1594.92 685.381 L1595.47 685.381 L1596.03 685.381 L1596.59 685.381 L1597.15 685.381 L1597.71 685.381 L1598.27 685.381 L1598.83 685.381 L1599.39 685.381 L1599.95 685.381 L1600.51 685.381 L1601.07 685.381 L1601.63 685.381 L1602.19 685.381 L1602.74 685.381 L1603.3 685.381 L1603.86 685.381 L1604.42 685.381 L1604.98 685.381 L1605.54 685.381 L1606.1 685.381 L1606.66 685.381 L1607.22 685.381 L1607.78 685.381 L1608.34 685.381 L1608.9 685.381 L1609.46 685.381 L1610.02 685.381 L1610.57 685.381 L1611.13 685.381 L1611.69 685.381 L1612.25 685.381 L1612.81 685.381 L1613.37 685.381 L1613.93 685.381 L1614.49 685.381 L1615.05 685.381 L1615.61 685.381 L1616.17 685.381 L1616.73 685.381 L1617.29 685.381 L1617.84 685.381 L1618.4 685.381 L1618.96 685.381 L1619.52 685.381 L1620.08 685.381 L1620.64 685.381 L1621.2 685.381 L1621.76 685.381 L1622.32 685.381 L1622.88 685.381 L1623.44 685.381 L1624 685.381 L1624.56 685.381 L1625.11 685.381 L1625.67 685.381 L1626.23 685.381 L1626.79 685.381 L1627.35 685.381 L1627.91 685.381 L1628.47 685.381 L1629.03 685.381 L1629.59 685.381 L1630.15 685.381 L1630.71 685.381 L1631.27 685.381 L1631.83 685.381 L1632.39 685.381 L1632.94 685.381 L1633.5 685.381 L1634.06 685.381 L1634.62 685.381 L1635.18 685.381 L1635.74 685.381 L1636.3 685.381 L1636.86 685.381 L1637.42 685.381 L1637.98 685.381 L1638.54 685.381 L1639.1 685.381 L1639.66 685.381 L1640.21 685.381 L1640.77 685.381 L1641.33 685.381 L1641.89 685.381 L1642.45 685.381 L1643.01 685.381 L1643.57 685.381 L1644.13 685.381 L1644.69 685.381 L1645.25 685.381 L1645.81 685.381 L1646.37 685.381 L1646.93 685.381 L1647.48 685.381 L1648.04 685.381 L1648.6 685.381 L1649.16 685.381 L1649.72 685.381 L1650.28 685.381 L1650.84 685.381 L1651.4 685.381 L1651.96 685.381 L1652.52 685.381 L1653.08 685.381 L1653.64 685.381 L1654.2 685.381 L1654.76 685.381 L1655.31 685.381 L1655.87 685.381 L1656.43 685.381 L1656.99 685.381 L1657.55 685.381 L1658.11 685.381 L1658.67 685.381 L1659.23 685.381 L1659.79 685.381 L1660.35 685.381 L1660.91 685.381 L1661.47 685.381 L1662.03 685.381 L1662.58 685.381 L1663.14 685.381 L1663.7 685.381 L1664.26 685.381 L1664.82 685.381 L1665.38 685.381 L1665.94 685.381 L1666.5 685.381 L1667.06 685.381 L1667.62 685.381 L1668.18 685.381 L1668.74 685.381 L1669.3 685.381 L1669.85 685.381 L1670.41 685.381 L1670.97 685.381 L1671.53 685.381 L1672.09 685.381 L1672.65 685.381 L1673.21 685.381 L1673.77 685.381 L1674.33 685.381 L1674.89 685.381 L1675.45 685.381 L1676.01 685.381 L1676.57 685.381 L1677.13 685.381 L1677.68 685.381 L1678.24 685.381 L1678.8 685.381 L1679.36 685.381 L1679.92 685.381 L1680.48 685.381 L1681.04 685.381 L1681.6 685.381 L1682.16 685.381 L1682.72 685.381 L1683.28 685.381 L1683.84 685.381 L1684.4 685.381 L1684.95 685.381 L1685.51 685.381 L1686.07 685.381 L1686.63 685.381 L1687.19 685.381 L1687.75 685.381 L1688.31 685.381 L1688.87 685.381 L1689.43 685.381 L1689.99 685.381 L1690.55 685.381 L1691.11 685.381 L1691.67 685.381 L1692.23 685.381 L1692.78 685.381 L1693.34 685.381 L1693.9 685.381 L1694.46 685.381 L1695.02 685.381 L1695.58 685.381 L1696.14 685.381 L1696.7 685.381 L1697.26 685.381 L1697.82 685.381 L1698.38 685.381 L1698.94 685.381 L1699.5 685.381 L1700.05 685.381 L1700.61 685.381 L1701.17 685.381 L1701.73 685.381 L1702.29 685.381 L1702.85 685.381 L1703.41 685.381 L1703.97 685.381 L1704.53 685.381 L1705.09 685.381 L1705.65 685.381 L1706.21 685.381 L1706.77 685.381 L1707.32 685.381 L1707.88 685.381 L1708.44 685.381 L1709 685.381 L1709.56 685.381 L1710.12 685.381 L1710.68 685.381 L1711.24 685.381 L1711.8 685.381 L1712.36 685.381 L1712.92 685.381 L1713.48 685.381 L1714.04 685.381 L1714.6 685.381 L1715.15 685.381 L1715.71 685.381 L1716.27 685.381 L1716.83 685.381 L1717.39 685.381 L1717.95 685.381 L1718.51 685.381 L1719.07 685.381 L1719.63 685.381 L1720.19 685.381 L1720.75 685.381 L1721.31 685.381 L1721.87 685.381 L1722.42 685.381 L1722.98 685.381 L1723.54 685.381 L1724.1 685.381 L1724.66 685.381 L1725.22 685.381 L1725.78 685.381 L1726.34 685.381 L1726.9 685.381 L1727.46 685.381 L1728.02 685.381 L1728.58 685.381 L1729.14 685.381 L1729.69 685.381 L1730.25 685.381 L1730.81 685.381 L1731.37 685.381 L1731.93 685.381 L1732.49 685.381 L1733.05 685.381 L1733.61 685.381 L1734.17 685.381 L1734.73 685.381 L1735.29 685.381 L1735.85 685.381 L1736.41 685.381 L1736.97 685.381 L1737.52 685.381 L1738.08 685.381 L1738.64 685.381 L1739.2 685.381 L1739.76 685.381 L1740.32 685.381 L1740.88 685.381 L1741.44 685.381 L1742 685.381 L1742.56 685.381 L1743.12 685.381 L1743.68 685.381 L1744.24 685.381 L1744.79 685.381 L1745.35 685.381 L1745.91 685.381 L1746.47 685.381 L1747.03 685.381 L1747.59 685.381 L1748.15 685.381 L1748.71 685.381 L1749.27 685.381 L1749.83 685.381 L1750.39 685.381 L1750.95 685.381 L1751.51 685.381 L1752.06 685.381 L1752.62 685.381 L1753.18 685.381 L1753.74 685.381 L1754.3 685.381 L1754.86 685.381 L1755.42 685.381 L1755.98 685.381 L1756.54 685.381 L1757.1 685.381 L1757.66 685.381 L1758.22 685.381 L1758.78 685.381 L1759.34 685.381 L1759.89 685.381 L1760.45 685.381 L1761.01 685.381 L1761.57 685.381 L1762.13 685.381 L1762.69 685.381 L1763.25 685.381 L1763.81 685.381 L1764.37 685.381 L1764.93 685.381 L1765.49 685.381 L1766.05 685.381 L1766.61 685.381 L1767.16 685.381 L1767.72 685.381 L1768.28 685.381 L1768.84 685.381 L1769.4 685.381 L1769.96 685.381 L1770.52 685.381 L1771.08 685.381 L1771.64 685.381 L1772.2 685.381 L1772.76 685.381 L1773.32 685.381 L1773.88 685.381 L1774.43 685.381 L1774.99 685.381 L1775.55 685.381 L1776.11 685.381 L1776.67 685.381 L1777.23 685.381 L1777.79 685.381 L1778.35 685.381 L1778.91 685.381 L1779.47 685.381 L1780.03 685.381 L1780.59 685.381 L1781.15 685.381 L1781.71 685.381 L1782.26 685.381 L1782.82 685.381 L1783.38 685.381 L1783.94 685.381 L1784.5 685.381 L1785.06 685.381 L1785.62 685.381 L1786.18 685.381 L1786.74 685.381 L1787.3 685.381 L1787.86 685.381 L1788.42 685.381 L1788.98 685.381 L1789.53 685.381 L1790.09 685.381 L1790.65 685.381 L1791.21 685.381 L1791.77 685.381 L1792.33 685.381 L1792.89 685.381 L1793.45 685.381 L1794.01 685.381 L1794.57 685.381 L1795.13 685.381 L1795.69 685.381 L1796.25 685.381 L1796.8 685.381 L1797.36 685.381 L1797.92 685.381 L1798.48 685.381 L1799.04 685.381 L1799.6 685.381 L1800.16 685.381 L1800.72 685.381 L1801.28 685.381 L1801.84 685.381 L1802.4 685.381 L1802.96 685.381 L1803.52 685.381 L1804.08 685.381 L1804.63 685.381 L1805.19 685.381 L1805.75 685.381 L1806.31 685.381 L1806.87 685.381 L1807.43 685.381 L1807.99 685.381 L1808.55 685.381 L1809.11 685.381 L1809.67 685.381 L1810.23 685.381 L1810.79 685.381 L1811.35 685.381 L1811.9 685.381 L1812.46 685.381 L1813.02 685.381 L1813.58 685.381 L1814.14 685.381 L1814.7 685.381 L1815.26 685.381 L1815.82 685.381 L1816.38 685.381 L1816.94 685.381 L1817.5 685.381 L1818.06 685.381 L1818.62 685.381 L1819.18 685.381 L1819.73 685.381 L1820.29 685.381 L1820.85 685.381 L1821.41 685.381 L1821.97 685.381 L1822.53 685.381 L1823.09 685.381 L1823.65 685.381 L1824.21 685.381 L1824.77 685.381 L1825.33 685.381 L1825.89 685.381 L1826.45 685.381 L1827 685.381 L1827.56 685.381 L1828.12 685.381 L1828.68 685.381 L1829.24 685.381 L1829.8 685.381 L1830.36 685.381 L1830.92 685.381 L1831.48 685.381 L1832.04 685.381 L1832.6 685.381 L1833.16 685.381 L1833.72 685.381 L1834.27 685.381 L1834.83 685.381 L1835.39 685.381 L1835.95 685.381 L1836.51 685.381 L1837.07 685.381 L1837.63 685.381 L1838.19 685.381 L1838.19 682.455 L1837.63 682.455 L1837.07 682.455 L1836.51 682.455 L1835.95 682.455 L1835.39 682.455 L1834.83 682.455 L1834.27 682.455 L1833.72 682.455 L1833.16 682.455 L1832.6 682.455 L1832.04 682.455 L1831.48 682.455 L1830.92 682.455 L1830.36 682.455 L1829.8 682.455 L1829.24 682.455 L1828.68 682.455 L1828.12 682.455 L1827.56 682.455 L1827 682.455 L1826.45 682.455 L1825.89 682.455 L1825.33 682.455 L1824.77 682.455 L1824.21 682.455 L1823.65 682.455 L1823.09 682.455 L1822.53 682.455 L1821.97 682.455 L1821.41 682.455 L1820.85 682.455 L1820.29 682.455 L1819.73 682.455 L1819.18 682.455 L1818.62 682.455 L1818.06 682.455 L1817.5 682.455 L1816.94 682.455 L1816.38 682.455 L1815.82 682.455 L1815.26 682.455 L1814.7 682.455 L1814.14 682.455 L1813.58 682.455 L1813.02 682.455 L1812.46 682.455 L1811.9 682.455 L1811.35 682.455 L1810.79 682.455 L1810.23 682.455 L1809.67 682.455 L1809.11 682.455 L1808.55 682.455 L1807.99 682.455 L1807.43 682.455 L1806.87 682.455 L1806.31 682.455 L1805.75 682.455 L1805.19 682.455 L1804.63 682.455 L1804.08 682.455 L1803.52 682.455 L1802.96 682.455 L1802.4 682.455 L1801.84 682.455 L1801.28 682.455 L1800.72 682.455 L1800.16 682.455 L1799.6 682.455 L1799.04 682.455 L1798.48 682.455 L1797.92 682.455 L1797.36 682.455 L1796.8 682.455 L1796.25 682.455 L1795.69 682.455 L1795.13 682.455 L1794.57 682.455 L1794.01 682.455 L1793.45 682.455 L1792.89 682.455 L1792.33 682.455 L1791.77 682.455 L1791.21 682.455 L1790.65 682.455 L1790.09 682.455 L1789.53 682.455 L1788.98 682.455 L1788.42 682.455 L1787.86 682.455 L1787.3 682.455 L1786.74 682.455 L1786.18 682.455 L1785.62 682.455 L1785.06 682.455 L1784.5 682.455 L1783.94 682.455 L1783.38 682.455 L1782.82 682.455 L1782.26 682.455 L1781.71 682.455 L1781.15 682.455 L1780.59 682.455 L1780.03 682.455 L1779.47 682.455 L1778.91 682.455 L1778.35 682.455 L1777.79 682.455 L1777.23 682.455 L1776.67 682.455 L1776.11 682.455 L1775.55 682.455 L1774.99 682.455 L1774.43 682.455 L1773.88 682.455 L1773.32 682.455 L1772.76 682.455 L1772.2 682.455 L1771.64 682.455 L1771.08 682.455 L1770.52 682.455 L1769.96 682.455 L1769.4 682.455 L1768.84 682.455 L1768.28 682.455 L1767.72 682.455 L1767.16 682.455 L1766.61 682.455 L1766.05 682.455 L1765.49 682.455 L1764.93 682.455 L1764.37 682.455 L1763.81 682.455 L1763.25 682.455 L1762.69 682.455 L1762.13 682.455 L1761.57 682.455 L1761.01 682.455 L1760.45 682.455 L1759.89 682.455 L1759.34 682.455 L1758.78 682.455 L1758.22 682.455 L1757.66 682.455 L1757.1 682.455 L1756.54 682.455 L1755.98 682.455 L1755.42 682.455 L1754.86 682.455 L1754.3 682.455 L1753.74 682.455 L1753.18 682.455 L1752.62 682.455 L1752.06 682.455 L1751.51 682.455 L1750.95 682.455 L1750.39 682.455 L1749.83 682.455 L1749.27 682.455 L1748.71 682.455 L1748.15 682.455 L1747.59 682.455 L1747.03 682.455 L1746.47 682.455 L1745.91 682.455 L1745.35 682.455 L1744.79 682.455 L1744.24 682.455 L1743.68 682.455 L1743.12 682.455 L1742.56 682.455 L1742 682.455 L1741.44 682.455 L1740.88 682.455 L1740.32 682.455 L1739.76 682.455 L1739.2 682.455 L1738.64 682.455 L1738.08 682.455 L1737.52 682.455 L1736.97 682.455 L1736.41 682.455 L1735.85 682.455 L1735.29 682.455 L1734.73 682.455 L1734.17 682.455 L1733.61 682.455 L1733.05 682.455 L1732.49 682.455 L1731.93 682.455 L1731.37 682.455 L1730.81 682.455 L1730.25 682.455 L1729.69 682.455 L1729.14 682.455 L1728.58 682.455 L1728.02 682.455 L1727.46 682.455 L1726.9 682.455 L1726.34 682.455 L1725.78 682.455 L1725.22 682.455 L1724.66 682.455 L1724.1 682.455 L1723.54 682.455 L1722.98 682.455 L1722.42 682.455 L1721.87 682.455 L1721.31 682.455 L1720.75 682.455 L1720.19 682.455 L1719.63 682.455 L1719.07 682.455 L1718.51 682.455 L1717.95 682.455 L1717.39 682.455 L1716.83 682.455 L1716.27 682.455 L1715.71 682.455 L1715.15 682.455 L1714.6 682.455 L1714.04 682.455 L1713.48 682.455 L1712.92 682.455 L1712.36 682.455 L1711.8 682.455 L1711.24 682.455 L1710.68 682.455 L1710.12 682.455 L1709.56 682.455 L1709 682.455 L1708.44 682.455 L1707.88 682.455 L1707.32 682.455 L1706.77 682.455 L1706.21 682.455 L1705.65 682.455 L1705.09 682.455 L1704.53 682.455 L1703.97 682.455 L1703.41 682.455 L1702.85 682.455 L1702.29 682.455 L1701.73 682.455 L1701.17 682.455 L1700.61 682.455 L1700.05 682.455 L1699.5 682.455 L1698.94 682.455 L1698.38 682.455 L1697.82 682.455 L1697.26 682.455 L1696.7 682.455 L1696.14 682.455 L1695.58 682.455 L1695.02 682.455 L1694.46 682.455 L1693.9 682.455 L1693.34 682.455 L1692.78 682.455 L1692.23 682.455 L1691.67 682.455 L1691.11 682.455 L1690.55 682.455 L1689.99 682.455 L1689.43 682.455 L1688.87 682.455 L1688.31 682.455 L1687.75 682.455 L1687.19 682.455 L1686.63 682.455 L1686.07 682.455 L1685.51 682.455 L1684.95 682.455 L1684.4 682.455 L1683.84 682.455 L1683.28 682.455 L1682.72 682.455 L1682.16 682.455 L1681.6 682.455 L1681.04 682.455 L1680.48 682.455 L1679.92 682.455 L1679.36 682.455 L1678.8 682.455 L1678.24 682.455 L1677.68 682.455 L1677.13 682.455 L1676.57 682.455 L1676.01 682.455 L1675.45 682.455 L1674.89 682.455 L1674.33 682.455 L1673.77 682.455 L1673.21 682.455 L1672.65 682.455 L1672.09 682.455 L1671.53 682.455 L1670.97 682.455 L1670.41 682.455 L1669.85 682.455 L1669.3 682.455 L1668.74 682.455 L1668.18 682.455 L1667.62 682.455 L1667.06 682.455 L1666.5 682.455 L1665.94 682.455 L1665.38 682.455 L1664.82 682.455 L1664.26 682.455 L1663.7 682.455 L1663.14 682.455 L1662.58 682.455 L1662.03 682.455 L1661.47 682.455 L1660.91 682.455 L1660.35 682.455 L1659.79 682.455 L1659.23 682.455 L1658.67 682.455 L1658.11 682.455 L1657.55 682.455 L1656.99 682.455 L1656.43 682.455 L1655.87 682.455 L1655.31 682.455 L1654.76 682.455 L1654.2 682.455 L1653.64 682.455 L1653.08 682.455 L1652.52 682.455 L1651.96 682.455 L1651.4 682.455 L1650.84 682.455 L1650.28 682.455 L1649.72 682.455 L1649.16 682.455 L1648.6 682.455 L1648.04 682.455 L1647.48 682.455 L1646.93 682.455 L1646.37 682.455 L1645.81 682.455 L1645.25 682.455 L1644.69 682.455 L1644.13 682.455 L1643.57 682.455 L1643.01 682.455 L1642.45 682.455 L1641.89 682.455 L1641.33 682.455 L1640.77 682.455 L1640.21 682.455 L1639.66 682.455 L1639.1 682.455 L1638.54 682.455 L1637.98 682.455 L1637.42 682.455 L1636.86 682.455 L1636.3 682.455 L1635.74 682.455 L1635.18 682.455 L1634.62 682.455 L1634.06 682.455 L1633.5 682.455 L1632.94 682.455 L1632.39 682.455 L1631.83 682.455 L1631.27 682.455 L1630.71 682.455 L1630.15 682.455 L1629.59 682.455 L1629.03 682.455 L1628.47 682.455 L1627.91 682.455 L1627.35 682.455 L1626.79 682.455 L1626.23 682.455 L1625.67 682.455 L1625.11 682.455 L1624.56 682.455 L1624 682.455 L1623.44 682.455 L1622.88 682.455 L1622.32 682.455 L1621.76 682.455 L1621.2 682.455 L1620.64 682.455 L1620.08 682.455 L1619.52 682.455 L1618.96 682.455 L1618.4 682.455 L1617.84 682.455 L1617.29 682.455 L1616.73 682.455 L1616.17 682.455 L1615.61 682.455 L1615.05 682.455 L1614.49 682.455 L1613.93 682.455 L1613.37 682.455 L1612.81 682.455 L1612.25 682.455 L1611.69 682.455 L1611.13 682.455 L1610.57 682.455 L1610.02 682.455 L1609.46 682.455 L1608.9 682.455 L1608.34 682.455 L1607.78 682.455 L1607.22 682.455 L1606.66 682.455 L1606.1 682.455 L1605.54 682.455 L1604.98 682.455 L1604.42 682.455 L1603.86 682.455 L1603.3 682.455 L1602.74 682.455 L1602.19 682.455 L1601.63 682.455 L1601.07 682.455 L1600.51 682.455 L1599.95 682.455 L1599.39 682.455 L1598.83 682.455 L1598.27 682.455 L1597.71 682.455 L1597.15 682.455 L1596.59 682.455 L1596.03 682.455 L1595.47 682.455 L1594.92 682.455 L1594.36 682.455 L1593.8 682.455 L1593.24 682.455 L1592.68 682.455 L1592.12 682.455 L1591.56 682.455 L1591 682.455 L1590.44 682.455 L1589.88 682.455 L1589.32 682.455 L1588.76 682.455 L1588.2 682.455 L1587.65 682.455 L1587.09 682.455 L1586.53 682.455 L1585.97 682.455 L1585.41 682.455 L1584.85 682.455 L1584.29 682.455 L1583.73 682.455 L1583.17 682.455 L1582.61 682.455 L1582.05 682.455 L1581.49 682.455 L1580.93 682.455 L1580.37 682.455 L1579.82 682.455 L1579.26 682.455 L1578.7 682.455 L1578.14 682.455 L1577.58 682.455 L1577.02 682.455 L1576.46 682.455 L1575.9 682.455 L1575.34 682.455 L1574.78 682.455 L1574.22 682.455 L1573.66 682.455 L1573.1 682.455 L1572.55 682.455 L1571.99 682.455 L1571.43 682.455 L1570.87 682.455 L1570.31 682.455 L1569.75 682.455 L1569.19 682.455 L1568.63 682.455 L1568.07 682.455 L1567.51 682.455 L1566.95 682.455 L1566.39 682.455 L1565.83 682.455 L1565.28 682.455 L1564.72 682.455 L1564.16 682.455 L1563.6 682.455 L1563.04 682.455 L1562.48 682.455 L1561.92 682.455 L1561.36 682.455 L1560.8 682.455 L1560.24 682.455 L1559.68 682.455 L1559.12 682.455 L1558.56 682.455 L1558 682.455 L1557.45 682.455 L1556.89 682.455 L1556.33 682.455 L1555.77 682.455 L1555.21 682.455 L1554.65 682.455 L1554.09 682.455 L1553.53 682.455 L1552.97 682.455 L1552.41 682.455 L1551.85 682.455 L1551.29 682.455 L1550.73 682.455 L1550.18 682.455 L1549.62 682.455 L1549.06 682.455 L1548.5 682.455 L1547.94 682.455 L1547.38 682.455 L1546.82 682.455 L1546.26 682.455 L1545.7 682.455 L1545.14 682.455 L1544.58 682.455 L1544.02 682.455 L1543.46 682.455 L1542.9 682.455 L1542.35 682.455 L1541.79 682.455 L1541.23 682.455 L1540.67 682.455 L1540.11 682.455 L1539.55 682.455 L1538.99 682.455 L1538.43 682.455 L1537.87 682.455 L1537.31 682.455 L1536.75 682.455 L1536.19 682.455 L1535.63 682.455 L1535.08 682.455 L1534.52 682.455 L1533.96 682.455 L1533.4 682.455 L1532.84 682.455 L1532.28 682.455 L1531.72 682.455 L1531.16 682.455 L1530.6 682.455 L1530.04 682.455 L1529.48 682.455 L1528.92 682.455 L1528.36 682.455 L1527.81 682.455 L1527.25 682.455 L1526.69 682.455 L1526.13 682.455 L1525.57 682.455 L1525.01 682.455 L1524.45 682.455 L1523.89 682.455 L1523.33 682.455 L1522.77 682.455 L1522.21 682.455 L1521.65 682.455 L1521.09 682.455 L1520.53 682.455 L1519.98 682.455 L1519.42 682.455 L1518.86 682.455 L1518.3 682.455 L1517.74 682.455 L1517.18 682.455 L1516.62 682.455 L1516.06 682.455 L1515.5 682.455 L1514.94 682.455 L1514.38 682.455 L1513.82 682.455 L1513.26 682.455 L1512.71 682.455 L1512.15 682.455 L1511.59 682.455 L1511.03 682.455 L1510.47 682.455 L1509.91 682.455 L1509.35 682.455 L1508.79 682.455 L1508.23 682.455 L1507.67 682.455 L1507.11 682.455 L1506.55 682.455 L1505.99 682.455 L1505.44 682.455 L1504.88 682.455 L1504.32 682.455 L1503.76 682.455 L1503.2 682.455 L1502.64 682.455 L1502.08 682.455 L1501.52 682.455 L1500.96 682.455 L1500.4 682.455 L1499.84 682.455 L1499.28 682.455 L1498.72 682.455 L1498.16 682.455 L1497.61 682.455 L1497.05 682.455 L1496.49 682.455 L1495.93 682.455 L1495.37 682.455 L1494.81 682.455 L1494.25 682.455 L1493.69 682.455 L1493.13 682.455 L1492.57 682.455 L1492.01 682.455 L1491.45 682.455 L1490.89 682.455 L1490.34 682.455 L1489.78 682.455 L1489.22 682.455 L1488.66 682.455 L1488.1 682.455 L1487.54 682.455 L1486.98 682.455 L1486.42 682.455 L1485.86 682.455 L1485.3 682.455 L1484.74 682.455 L1484.18 682.455 L1483.62 682.455 L1483.07 682.455 L1482.51 682.455 L1481.95 682.455 L1481.39 682.455 L1480.83 682.455 L1480.27 682.455 L1479.71 682.455 L1479.15 682.455 L1478.59 682.455 L1478.03 682.455 L1477.47 682.455 L1476.91 682.455 L1476.35 682.455 L1475.79 682.455 L1475.24 682.455 L1474.68 682.455 L1474.12 682.455 L1473.56 682.455 L1473 682.455 L1472.44 682.455 L1471.88 682.455 L1471.32 682.455 L1470.76 682.455 L1470.2 682.455 L1469.64 682.455 L1469.08 682.455 L1468.52 682.455 L1467.97 682.455 L1467.41 682.455 L1466.85 682.455 L1466.29 682.455 L1465.73 682.455 L1465.17 682.455 L1464.61 682.455 L1464.05 682.455 L1463.49 682.455 L1462.93 682.455 L1462.37 682.455 L1461.81 682.455 L1461.25 682.455 L1460.7 682.455 L1460.14 682.455 L1459.58 682.455 L1459.02 682.455 L1458.46 682.455 L1457.9 682.455 L1457.34 682.455 L1456.78 682.455 L1456.22 682.455 L1455.66 682.455 L1455.1 682.455 L1454.54 682.455 L1453.98 682.455 L1453.42 682.455 L1452.87 682.455 L1452.31 682.455 L1451.75 682.455 L1451.19 682.455 L1450.63 682.455 L1450.07 682.455 L1449.51 682.455 L1448.95 682.455 L1448.39 682.455 L1447.83 682.455 L1447.27 682.455 L1446.71 682.455 L1446.15 682.455 L1445.6 682.455 L1445.04 682.455 L1444.48 682.455 L1443.92 682.455 L1443.36 682.455 L1442.8 682.455 L1442.24 682.455 L1441.68 682.455 L1441.12 682.455 L1440.56 682.455 L1440 682.455 L1439.44 682.455 L1438.88 682.455 L1438.33 682.455 L1437.77 682.455 L1437.21 682.455 L1436.65 682.455 L1436.09 682.455 L1435.53 682.455 L1434.97 682.455 L1434.41 682.455 L1433.85 682.455 L1433.29 682.455 L1432.73 682.455 L1432.17 682.455 L1431.61 682.455 L1431.05 682.455 L1430.5 682.455 L1429.94 682.455 L1429.38 682.455 L1428.82 682.455 L1428.26 682.455 L1427.7 682.455 L1427.14 682.455 L1426.58 682.455 L1426.02 682.455 L1425.46 682.455 L1424.9 682.455 L1424.34 682.455 L1423.78 682.455 L1423.23 682.455 L1422.67 682.455 L1422.11 682.455 L1421.55 682.455 L1420.99 682.455 L1420.43 682.455 L1419.87 682.455 L1419.31 682.455 L1418.75 682.455 L1418.19 682.455 L1417.63 682.455 L1417.07 682.455 L1416.51 682.455 L1415.95 682.455 L1415.4 682.455 L1414.84 682.455 L1414.28 682.455 L1413.72 682.455 L1413.16 682.455 L1412.6 682.455 L1412.04 682.455 L1411.48 682.455 L1410.92 682.455 L1410.36 682.455 L1409.8 682.455 L1409.24 682.455 L1408.68 682.455 L1408.13 682.455 L1407.57 682.455 L1407.01 682.455 L1406.45 682.455 L1405.89 682.455 L1405.33 682.455 L1404.77 682.455 L1404.21 682.455 L1403.65 682.455 L1403.09 682.455 L1402.53 682.455 L1401.97 682.455 L1401.41 682.455 L1400.86 682.455 L1400.3 682.455 L1399.74 682.455 L1399.18 682.455 L1398.62 682.455 L1398.06 682.455 L1397.5 682.455 L1396.94 682.455 L1396.38 682.455 L1395.82 682.455 L1395.26 682.455 L1394.7 682.455 L1394.14 682.455 L1393.58 682.455 L1393.03 682.455 L1392.47 682.455 L1391.91 682.455 L1391.35 682.455 L1390.79 682.455 L1390.23 682.455 L1389.67 682.455 L1389.11 682.455 L1388.55 682.455 L1387.99 682.455 L1387.43 682.455 L1386.87 682.455 L1386.31 682.455 L1385.76 682.455 L1385.2 682.455 L1384.64 682.455 L1384.08 682.455 L1383.52 682.455 L1382.96 682.455 L1382.4 682.455 L1381.84 682.455 L1381.28 682.455 L1380.72 682.455 L1380.16 682.455 L1379.6 682.455 L1379.04 682.455 L1378.49 682.455 L1377.93 682.455 L1377.37 682.455 L1376.81 682.455 L1376.25 682.455 L1375.69 682.455 L1375.13 682.455 L1374.57 682.455 L1374.01 682.455 L1373.45 682.455 L1372.89 682.455 L1372.33 682.455 L1371.77 682.455 L1371.21 682.455 L1370.66 682.455 L1370.1 682.455 L1369.54 682.455 L1368.98 682.455 L1368.42 682.455 L1367.86 682.455 L1367.3 682.455 L1366.74 682.455 L1366.18 682.455 L1365.62 682.455 L1365.06 682.455 L1364.5 682.455 L1363.94 682.455 L1363.39 682.455 L1362.83 682.455 L1362.27 682.455 L1361.71 682.455 L1361.15 682.455 L1360.59 682.455 L1360.03 682.455 L1359.47 682.455 L1358.91 682.455 L1358.35 682.455 L1357.79 682.455 L1357.23 682.455 L1356.67 682.455 L1356.12 682.455 L1355.56 682.455 L1355 682.455 L1354.44 682.455 L1353.88 682.455 L1353.32 682.455 L1352.76 682.455 L1352.2 682.455 L1351.64 682.455 L1351.08 682.455 L1350.52 682.455 L1349.96 682.455 L1349.4 682.455 L1348.84 682.455 L1348.29 682.455 L1347.73 682.455 L1347.17 682.455 L1346.61 682.455 L1346.05 682.455 L1345.49 682.455 L1344.93 682.455 L1344.37 682.455 L1343.81 682.455 L1343.25 682.455 L1342.69 682.455 L1342.13 682.455 L1341.57 682.455 L1341.02 682.455 L1340.46 682.455 L1339.9 682.455 L1339.34 682.455 L1338.78 682.455 L1338.22 682.455 L1337.66 682.455 L1337.1 682.455 L1336.54 682.455 L1335.98 682.455 L1335.42 682.455 L1334.86 682.455 L1334.3 682.455 L1333.75 682.455 L1333.19 682.455 L1332.63 682.455 L1332.07 682.455 L1331.51 682.455 L1330.95 682.455 L1330.39 682.455 L1329.83 682.455 L1329.27 682.455 L1328.71 682.455 L1328.15 682.455 L1327.59 682.455 L1327.03 682.455 L1326.47 682.455 L1325.92 682.455 L1325.36 682.455 L1324.8 682.455 L1324.24 682.455 L1323.68 682.455 L1323.12 682.455 L1322.56 682.455 L1322 682.455 L1321.44 682.455 L1320.88 682.455 L1320.32 682.455 L1319.76 682.455 L1319.2 682.455 L1318.65 682.455 L1318.09 682.455 L1317.53 682.455 L1316.97 682.455 L1316.41 682.455 L1315.85 682.455 L1315.29 682.455 L1314.73 682.455 L1314.17 682.455 L1313.61 682.455 L1313.05 682.455 L1312.49 682.455 L1311.93 682.455 L1311.38 682.455 L1310.82 682.455 L1310.26 682.455 L1309.7 682.455 L1309.14 682.455 L1308.58 682.455 L1308.02 682.455 L1307.46 682.455 L1306.9 682.455 L1306.34 682.455 L1305.78 682.455 L1305.22 682.455 L1304.66 682.455 L1304.1 682.455 L1303.55 682.455 L1302.99 682.455 L1302.43 682.455 L1301.87 682.455 L1301.31 682.455 L1300.75 682.455 L1300.19 682.455 L1299.63 682.455 L1299.07 682.455 L1298.51 682.455 L1297.95 682.455 L1297.39 682.455 L1296.83 682.455 L1296.28 682.455 L1295.72 682.455 L1295.16 682.455 L1294.6 682.455 L1294.04 682.455 L1293.48 682.455 L1292.92 682.455 L1292.36 682.455 L1291.8 682.455 L1291.24 682.455 L1290.68 682.455 L1290.12 682.455 L1289.56 682.455 L1289 682.455 L1288.45 682.455 L1287.89 682.455 L1287.33 682.455 L1286.77 682.455 L1286.21 682.455 L1285.65 682.455 L1285.09 682.455 L1284.53 682.455 L1283.97 682.455 L1283.41 682.455 L1282.85 682.455 L1282.29 682.455 L1281.73 682.455 L1281.18 682.455 L1280.62 682.455 L1280.06 682.455 L1279.5 682.455 L1278.94 682.455 L1278.38 682.455 L1277.82 682.455 L1277.26 682.455 L1276.7 682.455 L1276.14 682.455 L1275.58 682.455 L1275.02 682.455 L1274.46 682.455 L1273.91 682.455 L1273.35 682.455 L1272.79 682.455 L1272.23 682.455 L1271.67 682.455 L1271.11 682.455 L1270.55 682.455 L1269.99 682.455 L1269.43 682.455 L1268.87 682.455 L1268.31 682.455 L1267.75 682.455 L1267.19 682.455 L1266.63 682.455 L1266.08 682.455 L1265.52 682.455 L1264.96 682.455 L1264.4 682.455 L1263.84 682.455 L1263.28 682.455 L1262.72 682.455 L1262.16 682.455 L1261.6 682.455 L1261.04 682.455 L1260.48 682.455 L1259.92 682.455 L1259.36 682.455 L1258.81 682.455 L1258.25 682.455 L1257.69 682.455 L1257.13 682.455 L1256.57 682.455 L1256.01 682.455 L1255.45 682.455 L1254.89 682.455 L1254.33 682.455 L1253.77 682.455 L1253.21 682.455 L1252.65 682.455 L1252.09 682.455 L1251.54 682.455 L1250.98 682.455 L1250.42 682.455 L1249.86 682.455 L1249.3 682.455 L1248.74 682.455 L1248.18 682.455 L1247.62 682.455 L1247.06 682.455 L1246.5 682.455 L1245.94 682.455 L1245.38 682.455 L1244.82 682.455 L1244.26 682.455 L1243.71 682.455 L1243.15 682.455 L1242.59 682.455 L1242.03 682.455 L1241.47 682.455 L1240.91 682.455 L1240.35 682.455 L1239.79 682.455 L1239.23 682.455 L1238.67 682.455 L1238.11 682.455 L1237.55 682.455 L1236.99 682.455 L1236.44 682.455 L1235.88 682.455 L1235.32 682.455 L1234.76 682.455 L1234.2 682.455 L1233.64 682.455 L1233.08 682.455 L1232.52 682.455 L1231.96 682.455 L1231.4 682.455 L1230.84 682.455 L1230.28 682.455 L1229.72 682.455 L1229.17 682.455 L1228.61 682.455 L1228.05 682.455 L1227.49 682.455 L1226.93 682.455 L1226.37 682.455 L1225.81 682.455 L1225.25 682.455 L1224.69 682.455 L1224.13 682.455 L1223.57 682.455 L1223.01 682.455 L1222.45 682.455 L1221.89 682.455 L1221.34 682.455 L1220.78 682.455 L1220.22 682.455 L1219.66 682.455 L1219.1 682.455 L1218.54 682.455 L1217.98 682.455 L1217.42 682.455 L1216.86 682.455 L1216.3 682.455 L1215.74 682.455 L1215.18 682.455 L1214.62 682.455 L1214.07 682.455 L1213.51 682.455 L1212.95 682.455 L1212.39 682.455 L1211.83 682.455 L1211.27 682.455 L1210.71 682.455 L1210.15 682.455 L1209.59 682.455 L1209.03 682.455 L1208.47 682.455 L1207.91 682.455 L1207.35 682.455 L1206.8 682.455 L1206.24 682.455 L1205.68 682.455 L1205.12 682.455 L1204.56 682.455 L1204 682.455 L1203.44 682.455 L1202.88 682.455 L1202.32 682.455 L1201.76 682.455 L1201.2 682.455 L1200.64 682.455 L1200.08 682.455 L1199.52 682.455 L1198.97 682.455 L1198.41 682.455 L1197.85 682.455 L1197.29 682.455 L1196.73 682.455 L1196.17 682.455 L1195.61 682.455 L1195.05 682.455 L1194.49 682.455 L1193.93 682.455 L1193.37 682.455 L1192.81 682.455 L1192.25 682.455 L1191.7 682.455 L1191.14 682.455 L1190.58 682.455 L1190.02 682.455 L1189.46 682.455 L1188.9 682.455 L1188.34 682.455 L1187.78 682.455 L1187.22 682.455 L1186.66 682.455 L1186.1 682.455 L1185.54 682.455 L1184.98 682.455 L1184.43 682.455 L1183.87 682.455 L1183.31 682.455 L1182.75 682.455 L1182.19 682.455 L1181.63 682.455 L1181.07 682.455 L1180.51 682.455 L1179.95 682.455 L1179.39 682.455 L1178.83 682.455 L1178.27 682.455 L1177.71 682.455 L1177.15 682.455 L1176.6 682.455 L1176.04 682.455 L1175.48 682.455 L1174.92 682.455 L1174.36 682.455 L1173.8 682.455 L1173.24 682.455 L1172.68 682.455 L1172.12 682.455 L1171.56 682.455 L1171 682.455 L1170.44 682.455 L1169.88 682.455 L1169.33 682.455 L1168.77 682.455 L1168.21 682.455 L1167.65 682.455 L1167.09 682.455 L1166.53 682.455 L1165.97 682.455 L1165.41 682.455 L1164.85 682.455 L1164.29 682.455 L1163.73 682.455 L1163.17 682.455 L1162.61 682.455 L1162.05 682.455 L1161.5 682.455 L1160.94 682.455 L1160.38 682.455 L1159.82 682.455 L1159.26 682.455 L1158.7 682.455 L1158.14 682.455 L1157.58 682.455 L1157.02 682.455 L1156.46 682.455 L1155.9 682.455 L1155.34 682.455 L1154.78 682.455 L1154.23 682.455 L1153.67 682.455 L1153.11 682.455 L1152.55 682.455 L1151.99 682.455 L1151.43 682.455 L1150.87 682.455 L1150.31 682.455 L1149.75 682.455 L1149.19 682.455 L1148.63 682.455 L1148.07 682.455 L1147.51 682.455 L1146.96 682.455 L1146.4 682.455 L1145.84 682.455 L1145.28 682.455 L1144.72 682.455 L1144.16 682.455 L1143.6 682.455 L1143.04 682.455 L1142.48 682.455 L1141.92 682.455 L1141.36 682.455 L1140.8 682.455 L1140.24 682.455 L1139.68 682.455 L1139.13 682.455 L1138.57 682.455 L1138.01 682.455 L1137.45 682.455 L1136.89 682.455 L1136.33 682.455 L1135.77 682.455 L1135.21 682.455 L1134.65 682.455 L1134.09 682.455 L1133.53 682.455 L1132.97 682.455 L1132.41 682.455 L1131.86 682.455 L1131.3 682.455 L1130.74 682.455 L1130.18 682.455 L1129.62 682.455 L1129.06 682.455 L1128.5 682.455 L1127.94 682.455 L1127.38 682.455 L1126.82 682.455 L1126.26 682.455 L1125.7 682.455 L1125.14 682.455 L1124.59 682.455 L1124.03 682.455 L1123.47 682.455 L1122.91 682.455 L1122.35 682.455 L1121.79 682.455 L1121.23 682.455 L1120.67 682.455 L1120.11 682.455 L1119.55 682.455 L1118.99 682.455 L1118.43 682.455 L1117.87 682.455 L1117.31 682.455 L1116.76 682.455 L1116.2 682.455 L1115.64 682.455 L1115.08 682.455 L1114.52 682.455 L1113.96 682.455 L1113.4 682.455 L1112.84 682.455 L1112.28 682.455 L1111.72 682.455 L1111.16 682.455 L1110.6 682.455 L1110.04 682.455 L1109.49 682.455 L1108.93 682.455 L1108.37 682.455 L1107.81 682.455 L1107.25 682.455 L1106.69 682.455 L1106.13 682.455 L1105.57 682.455 L1105.01 682.455 L1104.45 682.455 L1103.89 682.455 L1103.33 682.455 L1102.77 682.455 L1102.22 682.455 L1101.66 682.455 L1101.1 682.455 L1100.54 682.455 L1099.98 682.455 L1099.42 682.455 L1098.86 682.455 L1098.3 682.455 L1097.74 682.455 L1097.18 682.455 L1096.62 682.455 L1096.06 682.455 L1095.5 682.455 L1094.94 682.455 L1094.39 682.455 L1093.83 682.455 L1093.27 682.455 L1092.71 682.455 L1092.15 682.455 L1091.59 682.455 L1091.03 682.455 L1090.47 682.455 L1089.91 682.455 L1089.35 682.455 L1088.79 682.455 L1088.23 682.455 L1087.67 682.455 L1087.12 682.455 L1086.56 682.455 L1086 682.455 L1085.44 682.455 L1084.88 682.455 L1084.32 682.455 L1083.76 682.455 L1083.2 682.455 L1082.64 682.455 L1082.08 682.455 L1081.52 682.455 L1080.96 682.455 L1080.4 682.455 L1079.85 682.455 L1079.29 682.455 L1078.73 682.455 L1078.17 682.455 L1077.61 682.455 L1077.05 682.455 L1076.49 682.455 L1075.93 682.455 L1075.37 682.455 L1074.81 682.455 L1074.25 682.455 L1073.69 682.455 L1073.13 682.455 L1072.57 682.455 L1072.02 682.455 L1071.46 682.455 L1070.9 682.455 L1070.34 682.455 L1069.78 682.455 L1069.22 682.455 L1068.66 682.455 L1068.1 682.455 L1067.54 682.455 L1066.98 682.455 L1066.42 682.455 L1065.86 682.455 L1065.3 682.455 L1064.75 682.455 L1064.19 682.455 L1063.63 682.455 L1063.07 682.455 L1062.51 682.455 L1061.95 682.455 L1061.39 682.455 L1060.83 682.455 L1060.27 682.455 L1059.71 682.455 L1059.15 682.455 L1058.59 682.455 L1058.03 682.455 L1057.48 682.455 L1056.92 682.455 L1056.36 682.455 L1055.8 682.455 L1055.24 682.455 L1054.68 682.455 L1054.12 682.455 L1053.56 682.455 L1053 682.455 L1052.44 682.455 L1051.88 682.455 L1051.32 682.455 L1050.76 682.455 L1050.2 682.455 L1049.65 682.455 L1049.09 682.455 L1048.53 682.455 L1047.97 682.455 L1047.41 682.455 L1046.85 682.455 L1046.29 682.455 L1045.73 682.455 L1045.17 682.455 L1044.61 682.455 L1044.05 682.455 L1043.49 682.455 L1042.93 682.455 L1042.38 682.455 L1041.82 682.455 L1041.26 682.455 L1040.7 682.455 L1040.14 682.455 L1039.58 682.455 L1039.02 682.455 L1038.46 682.455 L1037.9 682.455 L1037.34 682.455 L1036.78 682.455 L1036.22 682.455 L1035.66 682.455 L1035.1 682.455 L1034.55 682.455 L1033.99 682.455 L1033.43 682.455 L1032.87 682.455 L1032.31 682.455 L1031.75 682.455 L1031.19 682.455 L1030.63 682.455 L1030.07 682.455 L1029.51 682.455 L1028.95 682.455 L1028.39 682.455 L1027.83 682.455 L1027.28 682.455 L1026.72 682.455 L1026.16 682.455 L1025.6 682.455 L1025.04 682.455 L1024.48 682.455 L1023.92 682.455 L1023.36 682.455 L1022.8 682.455 L1022.24 682.455 L1021.68 682.455 L1021.12 682.455 L1020.56 682.455 L1020.01 682.455 L1019.45 682.455 L1018.89 682.455 L1018.33 682.455 L1017.77 682.455 L1017.21 682.455 L1016.65 682.455 L1016.09 682.455 L1015.53 682.455 L1014.97 682.455 L1014.41 682.455 L1013.85 682.455 L1013.29 682.455 L1012.73 682.455 L1012.18 682.455 L1011.62 682.455 L1011.06 682.455 L1010.5 682.455 L1009.94 682.455 L1009.38 682.455 L1008.82 682.455 L1008.26 682.455 L1007.7 682.455 L1007.14 682.455 L1006.58 682.455 L1006.02 682.455 L1005.46 682.455 L1004.91 682.455 L1004.35 682.455 L1003.79 682.455 L1003.23 682.455 L1002.67 682.455 L1002.11 682.455 L1001.55 682.455 L1000.99 682.455 L1000.43 682.455 L999.872 682.455 L999.313 682.455 L998.754 682.455 L998.194 682.455 L997.635 682.455 L997.076 682.455 L996.517 682.455 L995.957 682.455 L995.398 682.455 L994.839 682.455 L994.28 682.455 L993.72 682.455 L993.161 682.455 L992.602 682.455 L992.043 682.455 L991.483 682.455 L990.924 682.455 L990.365 682.455 L989.806 682.455 L989.246 682.455 L988.687 682.455 L988.128 682.455 L987.569 682.455 L987.009 682.455 L986.45 682.455 L985.891 682.455 L985.332 682.455 L984.772 682.455 L984.213 682.455 L983.654 682.455 L983.095 682.455 L982.535 682.455 L981.976 682.455 L981.417 682.455 L980.858 682.455 L980.298 682.455 L979.739 682.455 L979.18 682.455 L978.621 682.455 L978.061 682.455 L977.502 682.455 L976.943 682.455 L976.384 682.455 L975.824 682.455 L975.265 682.455 L974.706 682.455 L974.147 682.455 L973.587 682.455 L973.028 682.455 L972.469 682.455 L971.91 682.455 L971.35 682.455 L970.791 682.455 L970.232 682.455 L969.673 682.455 L969.113 682.455 L968.554 682.455 L967.995 682.455 L967.436 682.455 L966.876 682.455 L966.317 682.455 L965.758 682.455 L965.199 682.455 L964.639 682.455 L964.08 682.455 L963.521 682.455 L962.962 682.455 L962.402 682.455 L961.843 682.455 L961.284 682.455 L960.725 682.455 L960.165 682.455 L959.606 682.455 L959.047 682.455 L958.488 682.455 L957.928 682.455 L957.369 682.455 L956.81 682.455 L956.251 682.455 L955.691 682.455 L955.132 682.455 L954.573 682.455 L954.014 682.455 L953.454 682.455 L952.895 682.455 L952.336 682.455 L951.777 682.455 L951.217 682.455 L950.658 682.455 L950.099 682.455 L949.54 682.455 L948.98 682.455 L948.421 682.455 L947.862 682.455 L947.303 682.455 L946.743 682.455 L946.184 682.455 L945.625 682.455 L945.066 682.455 L944.506 682.455 L943.947 682.455 L943.388 682.455 L942.829 682.455 L942.269 682.455 L941.71 682.455 L941.151 682.455 L940.592 682.455 L940.032 682.455 L939.473 682.455 L938.914 682.455 L938.355 682.455 L937.795 682.455 L937.236 682.455 L936.677 682.455 L936.118 682.455 L935.558 682.455 L934.999 682.455 L934.44 682.455 L933.881 682.455 L933.321 682.455 L932.762 682.455 L932.203 682.455 L931.644 682.455 L931.084 682.455 L930.525 682.455 L929.966 682.455 L929.406 682.455 L928.847 682.455 L928.288 682.455 L927.729 682.455 L927.169 682.455 L926.61 682.455 L926.051 682.455 L925.492 682.455 L924.932 682.455 L924.373 682.455 L923.814 682.455 L923.255 682.455 L922.695 682.455 L922.136 682.455 L921.577 682.455 L921.018 682.455 L920.458 682.455 L919.899 682.455 L919.34 682.455 L918.781 682.455 L918.221 682.455 L917.662 682.455 L917.103 682.455 L916.544 682.455 L915.984 682.455 L915.425 682.455 L914.866 682.455 L914.307 682.455 L913.747 682.455 L913.188 682.455 L912.629 682.455 L912.07 682.455 L911.51 682.455 L910.951 682.455 L910.392 682.455 L909.833 682.455 L909.273 682.455 L908.714 682.455 L908.155 682.455 L907.596 682.455 L907.036 682.455 L906.477 682.455 L905.918 682.455 L905.359 682.455 L904.799 682.455 L904.24 682.455 L903.681 682.455 L903.122 682.455 L902.562 682.455 L902.003 682.455 L901.444 682.455 L900.885 682.455 L900.325 682.455 L899.766 682.455 L899.207 682.455 L898.648 682.455 L898.088 682.455 L897.529 682.455 L896.97 682.455 L896.411 682.455 L895.851 682.455 L895.292 682.455 L894.733 682.455 L894.174 682.455 L893.614 682.455 L893.055 682.455 L892.496 682.455 L891.937 682.455 L891.377 682.455 L890.818 682.455 L890.259 682.455 L889.7 682.455 L889.14 682.455 L888.581 682.455 L888.022 682.455 L887.463 682.455 L886.903 682.455 L886.344 682.455 L885.785 682.455 L885.226 682.455 L884.666 682.455 L884.107 682.455 L883.548 682.455 L882.989 682.455 L882.429 682.455 L881.87 682.455 L881.311 682.455 L880.752 682.455 L880.192 682.455 L879.633 682.455 L879.074 682.455 L878.515 682.455 L877.955 682.455 L877.396 682.455 L876.837 682.455 L876.278 682.455 L875.718 682.455 L875.159 682.455 L874.6 682.455 L874.041 682.455 L873.481 682.455 L872.922 682.455 L872.363 682.455 L871.804 682.455 L871.244 682.455 L870.685 682.455 L870.126 682.455 L869.567 682.455 L869.007 682.455 L868.448 682.455 L867.889 682.455 L867.33 682.455 L866.77 682.455 L866.211 682.455 L865.652 682.455 L865.093 682.455 L864.533 682.455 L863.974 682.455 L863.415 682.455 L862.856 682.455 L862.296 682.455 L861.737 682.455 L861.178 682.455 L860.619 682.455 L860.059 682.455 L859.5 682.455 L858.941 682.455 L858.382 682.455 L857.822 682.455 L857.263 682.455 L856.704 682.455 L856.145 682.455 L855.585 682.455 L855.026 682.455 L854.467 682.455 L853.908 682.455 L853.348 682.455 L852.789 682.455 L852.23 682.455 L851.671 682.455 L851.111 682.455 L850.552 682.455 L849.993 682.455 L849.434 682.455 L848.874 682.455 L848.315 682.455 L847.756 682.455 L847.197 682.455 L846.637 682.455 L846.078 682.455 L845.519 682.455 L844.96 682.455 L844.4 682.455 L843.841 682.455 L843.282 682.455 L842.723 682.455 L842.163 682.455 L841.604 682.455 L841.045 682.455 L840.486 682.455 L839.926 682.455 L839.367 682.455 L838.808 682.455 L838.249 682.455 L837.689 682.455 L837.13 682.455 L836.571 682.455 L836.012 682.455 L835.452 682.455 L834.893 682.455 L834.334 682.455 L833.775 682.455 L833.215 682.455 L832.656 682.455 L832.097 682.455 L831.538 682.455 L830.978 682.455 L830.419 682.455 L829.86 682.455 L829.301 682.455 L828.741 682.455 L828.182 682.455 L827.623 682.455 L827.064 682.455 L826.504 682.455 L825.945 682.455 L825.386 682.455 L824.827 682.455 L824.267 682.455 L823.708 682.455 L823.149 682.455 L822.59 682.455 L822.03 682.455 L821.471 682.455 L820.912 682.455 L820.353 682.455 L819.793 682.455 L819.234 682.455 L818.675 682.455 L818.116 682.455 L817.556 682.455 L816.997 682.455 L816.438 682.455 L815.879 682.455 L815.319 682.455 L814.76 682.455 L814.201 682.455 L813.642 682.455 L813.082 682.455 L812.523 682.455 L811.964 682.455 L811.405 682.455 L810.845 682.455 L810.286 682.455 L809.727 682.455 L809.168 682.455 L808.608 682.455 L808.049 682.455 L807.49 682.455 L806.931 682.455 L806.371 682.455 L805.812 682.455 L805.253 682.455 L804.693 682.455 L804.134 682.455 L803.575 682.455 L803.016 682.455 L802.456 682.455 L801.897 682.455 L801.338 682.455 L800.779 682.455 L800.219 682.455 L799.66 682.455 L799.101 682.455 L798.542 682.455 L797.982 682.455 L797.423 682.455 L796.864 682.455 L796.305 682.455 L795.745 682.455 L795.186 682.455 L794.627 682.455 L794.068 682.455 L793.508 682.455 L792.949 682.455 L792.39 682.455 L791.831 682.455 L791.271 682.455 L790.712 682.455 L790.153 682.455 L789.594 682.455 L789.034 682.455 L788.475 682.455 L787.916 682.455 L787.357 682.455 L786.797 682.455 L786.238 682.455 L785.679 682.455 L785.12 682.455 L784.56 682.455 L784.001 682.455 L783.442 682.455 L782.883 682.455 L782.323 682.455 L781.764 682.455 L781.205 682.455 L780.646 682.455 L780.086 682.455 L779.527 682.455 L778.968 682.455 L778.409 682.455 L777.849 682.455 L777.29 682.455 L776.731 682.455 L776.172 682.455 L775.612 682.455 L775.053 682.455 L774.494 682.455 L773.935 682.455 L773.375 682.455 L772.816 682.455 L772.257 682.455 L771.698 682.455 L771.138 682.455 L770.579 682.455 L770.02 682.455 L769.461 682.455 L768.901 682.455 L768.342 682.455 L767.783 682.455 L767.224 682.455 L766.664 682.455 L766.105 682.455 L765.546 682.455 L764.987 682.455 L764.427 682.455 L763.868 682.455 L763.309 682.455 L762.75 682.455 L762.19 682.455 L761.631 682.455 L761.072 682.455 L760.513 682.455 L759.953 682.455 L759.394 682.455 L758.835 682.455 L758.276 682.455 L757.716 682.455 L757.157 682.455 L756.598 682.455 L756.039 682.455 L755.479 682.455 L754.92 682.455 L754.361 682.455 L753.802 682.455 L753.242 682.455 L752.683 682.455 L752.124 682.455 L751.565 682.455 L751.005 682.455 L750.446 682.455 L749.887 682.455 L749.328 682.455 L748.768 682.455 L748.209 682.455 L747.65 682.455 L747.091 682.455 L746.531 682.455 L745.972 682.455 L745.413 682.455 L744.854 682.455 L744.294 682.455 L743.735 682.455 L743.176 682.455 L742.617 682.455 L742.057 682.455 L741.498 682.455 L740.939 682.455 L740.38 682.455 L739.82 682.455 L739.261 682.455 L738.702 682.455 L738.143 682.455 L737.583 682.455 L737.024 682.455 L736.465 682.455 L735.906 682.455 L735.346 682.455 L734.787 682.455 L734.228 682.455 L733.669 682.455 L733.109 682.455 L732.55 682.455 L731.991 682.455 L731.432 682.455 L730.872 682.455 L730.313 682.455 L729.754 682.455 L729.195 682.455 L728.635 682.455 L728.076 682.455 L727.517 682.455 L726.958 682.455 L726.398 682.455 L725.839 682.455 L725.28 682.455 L724.721 682.455 L724.161 682.455 L723.602 682.455 L723.043 682.455 L722.484 682.455 L721.924 682.455 L721.365 682.455 L720.806 682.455 L720.247 682.455  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip933)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.947 720.806,683.947 721.365,683.947 721.924,683.947 722.484,683.947 723.043,683.947 723.602,683.947 724.161,683.947 724.721,683.947 725.28,683.947 725.839,683.947 726.398,683.947 726.958,683.947 727.517,683.947 728.076,683.947 728.635,683.947 729.195,683.947 729.754,683.947 730.313,683.947 730.872,683.947 731.432,683.947 731.991,683.947 732.55,683.947 733.109,683.947 733.669,683.947 734.228,683.947 734.787,683.947 735.346,683.947 735.906,683.947 736.465,683.947 737.024,683.947 737.583,683.947 738.143,683.947 738.702,683.947 739.261,683.947 739.82,683.947 740.38,683.947 740.939,683.947 741.498,683.947 742.057,683.947 742.617,683.947 743.176,683.947 743.735,683.947 744.294,683.947 744.854,683.947 745.413,683.947 745.972,683.947 746.531,683.947 747.091,683.947 747.65,683.947 748.209,683.947 748.768,683.947 749.328,683.947 749.887,683.947 750.446,683.947 751.005,683.947 751.565,683.947 752.124,683.947 752.683,683.947 753.242,683.947 753.802,683.947 754.361,683.947 754.92,683.947 755.479,683.947 756.039,683.947 756.598,683.947 757.157,683.947 757.716,683.947 758.276,683.947 758.835,683.947 759.394,683.947 759.953,683.947 760.513,683.947 761.072,683.947 761.631,683.947 762.19,683.947 762.75,683.947 763.309,683.947 763.868,683.947 764.427,683.947 764.987,683.947 765.546,683.947 766.105,683.947 766.664,683.947 767.224,683.947 767.783,683.947 768.342,683.947 768.901,683.947 769.461,683.947 770.02,683.947 770.579,683.947 771.138,683.947 771.698,683.947 772.257,683.947 772.816,683.947 773.375,683.947 773.935,683.947 774.494,683.947 775.053,683.947 775.612,683.947 776.172,683.947 776.731,683.947 777.29,683.947 777.849,683.947 778.409,683.947 778.968,683.947 779.527,683.947 780.086,683.947 780.646,683.947 781.205,683.947 781.764,683.947 782.323,683.947 782.883,683.947 783.442,683.947 784.001,683.947 784.56,683.947 785.12,683.947 785.679,683.947 786.238,683.947 786.797,683.947 787.357,683.947 787.916,683.947 788.475,683.947 789.034,683.947 789.594,683.947 790.153,683.947 790.712,683.947 791.271,683.947 791.831,683.947 792.39,683.947 792.949,683.947 793.508,683.947 794.068,683.947 794.627,683.947 795.186,683.947 795.745,683.947 796.305,683.947 796.864,683.947 797.423,683.947 797.982,683.947 798.542,683.947 799.101,683.947 799.66,683.947 800.219,683.947 800.779,683.947 801.338,683.947 801.897,683.947 802.456,683.947 803.016,683.947 803.575,683.947 804.134,683.947 804.693,683.947 805.253,683.947 805.812,683.947 806.371,683.947 806.931,683.947 807.49,683.947 808.049,683.947 808.608,683.947 809.168,683.947 809.727,683.947 810.286,683.947 810.845,683.947 811.405,683.947 811.964,683.947 812.523,683.947 813.082,683.947 813.642,683.947 814.201,683.947 814.76,683.947 815.319,683.947 815.879,683.947 816.438,683.947 816.997,683.947 817.556,683.947 818.116,683.947 818.675,683.947 819.234,683.947 819.793,683.947 820.353,683.947 820.912,683.947 821.471,683.947 822.03,683.947 822.59,683.947 823.149,683.947 823.708,683.947 824.267,683.947 824.827,683.947 825.386,683.947 825.945,683.947 826.504,683.947 827.064,683.947 827.623,683.947 828.182,683.947 828.741,683.947 829.301,683.947 829.86,683.947 830.419,683.947 830.978,683.947 831.538,683.947 832.097,683.947 832.656,683.947 833.215,683.947 833.775,683.947 834.334,683.947 834.893,683.947 835.452,683.947 836.012,683.947 836.571,683.947 837.13,683.947 837.689,683.947 838.249,683.947 838.808,683.947 839.367,683.947 839.926,683.947 840.486,683.947 841.045,683.947 841.604,683.947 842.163,683.947 842.723,683.947 843.282,683.947 843.841,683.947 844.4,683.947 844.96,683.947 845.519,683.947 846.078,683.947 846.637,683.947 847.197,683.947 847.756,683.947 848.315,683.947 848.874,683.947 849.434,683.947 849.993,683.947 850.552,683.947 851.111,683.947 851.671,683.947 852.23,683.947 852.789,683.947 853.348,683.947 853.908,683.947 854.467,683.947 855.026,683.947 855.585,683.947 856.145,683.947 856.704,683.947 857.263,683.947 857.822,683.947 858.382,683.947 858.941,683.947 859.5,683.947 860.059,683.947 860.619,683.947 861.178,683.947 861.737,683.947 862.296,683.947 862.856,683.947 863.415,683.947 863.974,683.947 864.533,683.947 865.093,683.947 865.652,683.947 866.211,683.947 866.77,683.947 867.33,683.947 867.889,683.947 868.448,683.947 869.007,683.947 869.567,683.947 870.126,683.947 870.685,683.947 871.244,683.947 871.804,683.947 872.363,683.947 872.922,683.947 873.481,683.947 874.041,683.947 874.6,683.947 875.159,683.947 875.718,683.947 876.278,683.947 876.837,683.947 877.396,683.947 877.955,683.947 878.515,683.947 879.074,683.947 879.633,683.947 880.192,683.947 880.752,683.947 881.311,683.947 881.87,683.947 882.429,683.947 882.989,683.947 883.548,683.947 884.107,683.947 884.666,683.947 885.226,683.947 885.785,683.947 886.344,683.947 886.903,683.947 887.463,683.947 888.022,683.947 888.581,683.947 889.14,683.947 889.7,683.947 890.259,683.947 890.818,683.947 891.377,683.947 891.937,683.947 892.496,683.947 893.055,683.947 893.614,683.947 894.174,683.947 894.733,683.947 895.292,683.947 895.851,683.947 896.411,683.947 896.97,683.947 897.529,683.947 898.088,683.947 898.648,683.947 899.207,683.947 899.766,683.947 900.325,683.947 900.885,683.947 901.444,683.947 902.003,683.947 902.562,683.947 903.122,683.947 903.681,683.947 904.24,683.947 904.799,683.947 905.359,683.947 905.918,683.947 906.477,683.947 907.036,683.947 907.596,683.947 908.155,683.947 908.714,683.947 909.273,683.947 909.833,683.947 910.392,683.947 910.951,683.947 911.51,683.947 912.07,683.947 912.629,683.947 913.188,683.947 913.747,683.947 914.307,683.947 914.866,683.947 915.425,683.947 915.984,683.947 916.544,683.947 917.103,683.947 917.662,683.947 918.221,683.947 918.781,683.947 919.34,683.947 919.899,683.947 920.458,683.947 921.018,683.947 921.577,683.947 922.136,683.947 922.695,683.947 923.255,683.947 923.814,683.947 924.373,683.947 924.932,683.947 925.492,683.947 926.051,683.947 926.61,683.947 927.169,683.947 927.729,683.947 928.288,683.947 928.847,683.947 929.406,683.947 929.966,683.947 930.525,683.947 931.084,683.947 931.644,683.947 932.203,683.947 932.762,683.947 933.321,683.947 933.881,683.947 934.44,683.947 934.999,683.947 935.558,683.947 936.118,683.947 936.677,683.947 937.236,683.947 937.795,683.947 938.355,683.947 938.914,683.947 939.473,683.947 940.032,683.947 940.592,683.947 941.151,683.947 941.71,683.947 942.269,683.947 942.829,683.947 943.388,683.947 943.947,683.947 944.506,683.947 945.066,683.947 945.625,683.947 946.184,683.947 946.743,683.947 947.303,683.947 947.862,683.947 948.421,683.947 948.98,683.947 949.54,683.947 950.099,683.947 950.658,683.947 951.217,683.947 951.777,683.947 952.336,683.947 952.895,683.947 953.454,683.947 954.014,683.947 954.573,683.947 955.132,683.947 955.691,683.947 956.251,683.947 956.81,683.947 957.369,683.947 957.928,683.947 958.488,683.947 959.047,683.947 959.606,683.947 960.165,683.947 960.725,683.947 961.284,683.947 961.843,683.947 962.402,683.947 962.962,683.947 963.521,683.947 964.08,683.947 964.639,683.947 965.199,683.947 965.758,683.947 966.317,683.947 966.876,683.947 967.436,683.947 967.995,683.947 968.554,683.947 969.113,683.947 969.673,683.947 970.232,683.947 970.791,683.947 971.35,683.947 971.91,683.947 972.469,683.947 973.028,683.947 973.587,683.947 974.147,683.947 974.706,683.947 975.265,683.947 975.824,683.947 976.384,683.947 976.943,683.947 977.502,683.947 978.061,683.947 978.621,683.947 979.18,683.947 979.739,683.947 980.298,683.947 980.858,683.947 981.417,683.947 981.976,683.947 982.535,683.947 983.095,683.947 983.654,683.947 984.213,683.947 984.772,683.947 985.332,683.947 985.891,683.947 986.45,683.947 987.009,683.947 987.569,683.947 988.128,683.947 988.687,683.947 989.246,683.947 989.806,683.947 990.365,683.947 990.924,683.947 991.483,683.947 992.043,683.947 992.602,683.947 993.161,683.947 993.72,683.947 994.28,683.947 994.839,683.947 995.398,683.947 995.957,683.947 996.517,683.947 997.076,683.947 997.635,683.947 998.194,683.947 998.754,683.947 999.313,683.947 999.872,683.947 1000.43,683.947 1000.99,683.947 1001.55,683.947 1002.11,683.947 1002.67,683.947 1003.23,683.947 1003.79,683.947 1004.35,683.947 1004.91,683.947 1005.46,683.947 1006.02,683.947 1006.58,683.947 1007.14,683.947 1007.7,683.947 1008.26,683.947 1008.82,683.947 1009.38,683.947 1009.94,683.947 1010.5,683.947 1011.06,683.947 1011.62,683.947 1012.18,683.947 1012.73,683.947 1013.29,683.947 1013.85,683.947 1014.41,683.947 1014.97,683.947 1015.53,683.947 1016.09,683.947 1016.65,683.947 1017.21,683.947 1017.77,683.947 1018.33,683.947 1018.89,683.947 1019.45,683.947 1020.01,683.947 1020.56,683.947 1021.12,683.947 1021.68,683.947 1022.24,683.947 1022.8,683.947 1023.36,683.947 1023.92,683.947 1024.48,683.947 1025.04,683.947 1025.6,683.947 1026.16,683.947 1026.72,683.947 1027.28,683.947 1027.83,683.947 1028.39,683.947 1028.95,683.947 1029.51,683.947 1030.07,683.947 1030.63,683.947 1031.19,683.947 1031.75,683.947 1032.31,683.947 1032.87,683.947 1033.43,683.947 1033.99,683.947 1034.55,683.947 1035.1,683.947 1035.66,683.947 1036.22,683.947 1036.78,683.947 1037.34,683.947 1037.9,683.947 1038.46,683.947 1039.02,683.947 1039.58,683.947 1040.14,683.947 1040.7,683.947 1041.26,683.947 1041.82,683.947 1042.38,683.947 1042.93,683.947 1043.49,683.947 1044.05,683.947 1044.61,683.947 1045.17,683.947 1045.73,683.947 1046.29,683.947 1046.85,683.947 1047.41,683.947 1047.97,683.947 1048.53,683.947 1049.09,683.947 1049.65,683.947 1050.2,683.947 1050.76,683.947 1051.32,683.947 1051.88,683.947 1052.44,683.947 1053,683.947 1053.56,683.947 1054.12,683.947 1054.68,683.947 1055.24,683.947 1055.8,683.947 1056.36,683.947 1056.92,683.947 1057.48,683.947 1058.03,683.947 1058.59,683.947 1059.15,683.947 1059.71,683.947 1060.27,683.947 1060.83,683.947 1061.39,683.947 1061.95,683.947 1062.51,683.947 1063.07,683.947 1063.63,683.947 1064.19,683.947 1064.75,683.947 1065.3,683.947 1065.86,683.947 1066.42,683.947 1066.98,683.947 1067.54,683.947 1068.1,683.947 1068.66,683.947 1069.22,683.947 1069.78,683.947 1070.34,683.947 1070.9,683.947 1071.46,683.947 1072.02,683.947 1072.57,683.947 1073.13,683.947 1073.69,683.947 1074.25,683.947 1074.81,683.947 1075.37,683.947 1075.93,683.947 1076.49,683.947 1077.05,683.947 1077.61,683.947 1078.17,683.947 1078.73,683.947 1079.29,683.947 1079.85,683.947 1080.4,683.947 1080.96,683.947 1081.52,683.947 1082.08,683.947 1082.64,683.947 1083.2,683.947 1083.76,683.947 1084.32,683.947 1084.88,683.947 1085.44,683.947 1086,683.947 1086.56,683.947 1087.12,683.947 1087.67,683.947 1088.23,683.947 1088.79,683.947 1089.35,683.947 1089.91,683.947 1090.47,683.947 1091.03,683.947 1091.59,683.947 1092.15,683.947 1092.71,683.947 1093.27,683.947 1093.83,683.947 1094.39,683.947 1094.94,683.947 1095.5,683.947 1096.06,683.947 1096.62,683.947 1097.18,683.947 1097.74,683.947 1098.3,683.947 1098.86,683.947 1099.42,683.947 1099.98,683.947 1100.54,683.947 1101.1,683.947 1101.66,683.947 1102.22,683.947 1102.77,683.947 1103.33,683.947 1103.89,683.947 1104.45,683.947 1105.01,683.947 1105.57,683.947 1106.13,683.947 1106.69,683.947 1107.25,683.947 1107.81,683.947 1108.37,683.947 1108.93,683.947 1109.49,683.947 1110.04,683.947 1110.6,683.947 1111.16,683.947 1111.72,683.947 1112.28,683.947 1112.84,683.947 1113.4,683.947 1113.96,683.947 1114.52,683.947 1115.08,683.947 1115.64,683.947 1116.2,683.947 1116.76,683.947 1117.31,683.947 1117.87,683.947 1118.43,683.947 1118.99,683.947 1119.55,683.947 1120.11,683.947 1120.67,683.947 1121.23,683.947 1121.79,683.947 1122.35,683.947 1122.91,683.947 1123.47,683.947 1124.03,683.947 1124.59,683.947 1125.14,683.947 1125.7,683.947 1126.26,683.947 1126.82,683.947 1127.38,683.947 1127.94,683.947 1128.5,683.947 1129.06,683.947 1129.62,683.947 1130.18,683.947 1130.74,683.947 1131.3,683.947 1131.86,683.947 1132.41,683.947 1132.97,683.947 1133.53,683.947 1134.09,683.947 1134.65,683.947 1135.21,683.947 1135.77,683.947 1136.33,683.947 1136.89,683.947 1137.45,683.947 1138.01,683.947 1138.57,683.947 1139.13,683.947 1139.68,683.947 1140.24,683.947 1140.8,683.947 1141.36,683.947 1141.92,683.947 1142.48,683.947 1143.04,683.947 1143.6,683.947 1144.16,683.947 1144.72,683.947 1145.28,683.947 1145.84,683.947 1146.4,683.947 1146.96,683.947 1147.51,683.947 1148.07,683.947 1148.63,683.947 1149.19,683.947 1149.75,683.947 1150.31,683.947 1150.87,683.947 1151.43,683.947 1151.99,683.947 1152.55,683.947 1153.11,683.947 1153.67,683.947 1154.23,683.947 1154.78,683.947 1155.34,683.947 1155.9,683.947 1156.46,683.947 1157.02,683.947 1157.58,683.947 1158.14,683.947 1158.7,683.947 1159.26,683.947 1159.82,683.947 1160.38,683.947 1160.94,683.947 1161.5,683.947 1162.05,683.947 1162.61,683.947 1163.17,683.947 1163.73,683.947 1164.29,683.947 1164.85,683.947 1165.41,683.947 1165.97,683.947 1166.53,683.947 1167.09,683.947 1167.65,683.947 1168.21,683.947 1168.77,683.947 1169.33,683.947 1169.88,683.947 1170.44,683.947 1171,683.947 1171.56,683.947 1172.12,683.947 1172.68,683.947 1173.24,683.947 1173.8,683.947 1174.36,683.947 1174.92,683.947 1175.48,683.947 1176.04,683.947 1176.6,683.947 1177.15,683.947 1177.71,683.947 1178.27,683.947 1178.83,683.947 1179.39,683.947 1179.95,683.947 1180.51,683.947 1181.07,683.947 1181.63,683.947 1182.19,683.947 1182.75,683.947 1183.31,683.947 1183.87,683.947 1184.43,683.947 1184.98,683.947 1185.54,683.947 1186.1,683.947 1186.66,683.947 1187.22,683.947 1187.78,683.947 1188.34,683.947 1188.9,683.947 1189.46,683.947 1190.02,683.947 1190.58,683.947 1191.14,683.947 1191.7,683.947 1192.25,683.947 1192.81,683.947 1193.37,683.947 1193.93,683.947 1194.49,683.947 1195.05,683.947 1195.61,683.947 1196.17,683.947 1196.73,683.947 1197.29,683.947 1197.85,683.947 1198.41,683.947 1198.97,683.947 1199.52,683.947 1200.08,683.947 1200.64,683.947 1201.2,683.947 1201.76,683.947 1202.32,683.947 1202.88,683.947 1203.44,683.947 1204,683.947 1204.56,683.947 1205.12,683.947 1205.68,683.947 1206.24,683.947 1206.8,683.947 1207.35,683.947 1207.91,683.947 1208.47,683.947 1209.03,683.947 1209.59,683.947 1210.15,683.947 1210.71,683.947 1211.27,683.947 1211.83,683.947 1212.39,683.947 1212.95,683.947 1213.51,683.947 1214.07,683.947 1214.62,683.947 1215.18,683.947 1215.74,683.947 1216.3,683.947 1216.86,683.947 1217.42,683.947 1217.98,683.947 1218.54,683.947 1219.1,683.947 1219.66,683.947 1220.22,683.947 1220.78,683.947 1221.34,683.947 1221.89,683.947 1222.45,683.947 1223.01,683.947 1223.57,683.947 1224.13,683.947 1224.69,683.947 1225.25,683.947 1225.81,683.947 1226.37,683.947 1226.93,683.947 1227.49,683.947 1228.05,683.947 1228.61,683.947 1229.17,683.947 1229.72,683.947 1230.28,683.947 1230.84,683.947 1231.4,683.947 1231.96,683.947 1232.52,683.947 1233.08,683.947 1233.64,683.947 1234.2,683.947 1234.76,683.947 1235.32,683.947 1235.88,683.947 1236.44,683.947 1236.99,683.947 1237.55,683.947 1238.11,683.947 1238.67,683.947 1239.23,683.947 1239.79,683.947 1240.35,683.947 1240.91,683.947 1241.47,683.947 1242.03,683.947 1242.59,683.947 1243.15,683.947 1243.71,683.947 1244.26,683.947 1244.82,683.947 1245.38,683.947 1245.94,683.947 1246.5,683.947 1247.06,683.947 1247.62,683.947 1248.18,683.947 1248.74,683.947 1249.3,683.947 1249.86,683.947 1250.42,683.947 1250.98,683.947 1251.54,683.947 1252.09,683.947 1252.65,683.947 1253.21,683.947 1253.77,683.947 1254.33,683.947 1254.89,683.947 1255.45,683.947 1256.01,683.947 1256.57,683.947 1257.13,683.947 1257.69,683.947 1258.25,683.947 1258.81,683.947 1259.36,683.947 1259.92,683.947 1260.48,683.947 1261.04,683.947 1261.6,683.947 1262.16,683.947 1262.72,683.947 1263.28,683.947 1263.84,683.947 1264.4,683.947 1264.96,683.947 1265.52,683.947 1266.08,683.947 1266.63,683.947 1267.19,683.947 1267.75,683.947 1268.31,683.947 1268.87,683.947 1269.43,683.947 1269.99,683.947 1270.55,683.947 1271.11,683.947 1271.67,683.947 1272.23,683.947 1272.79,683.947 1273.35,683.947 1273.91,683.947 1274.46,683.947 1275.02,683.947 1275.58,683.947 1276.14,683.947 1276.7,683.947 1277.26,683.947 1277.82,683.947 1278.38,683.947 1278.94,683.947 1279.5,683.947 1280.06,683.947 1280.62,683.947 1281.18,683.947 1281.73,683.947 1282.29,683.947 1282.85,683.947 1283.41,683.947 1283.97,683.947 1284.53,683.947 1285.09,683.947 1285.65,683.947 1286.21,683.947 1286.77,683.947 1287.33,683.947 1287.89,683.947 1288.45,683.947 1289,683.947 1289.56,683.947 1290.12,683.947 1290.68,683.947 1291.24,683.947 1291.8,683.947 1292.36,683.947 1292.92,683.947 1293.48,683.947 1294.04,683.947 1294.6,683.947 1295.16,683.947 1295.72,683.947 1296.28,683.947 1296.83,683.947 1297.39,683.947 1297.95,683.947 1298.51,683.947 1299.07,683.947 1299.63,683.947 1300.19,683.947 1300.75,683.947 1301.31,683.947 1301.87,683.947 1302.43,683.947 1302.99,683.947 1303.55,683.947 1304.1,683.947 1304.66,683.947 1305.22,683.947 1305.78,683.947 1306.34,683.947 1306.9,683.947 1307.46,683.947 1308.02,683.947 1308.58,683.947 1309.14,683.947 1309.7,683.947 1310.26,683.947 1310.82,683.947 1311.38,683.947 1311.93,683.947 1312.49,683.947 1313.05,683.947 1313.61,683.947 1314.17,683.947 1314.73,683.947 1315.29,683.947 1315.85,683.947 1316.41,683.947 1316.97,683.947 1317.53,683.947 1318.09,683.947 1318.65,683.947 1319.2,683.947 1319.76,683.947 1320.32,683.947 1320.88,683.947 1321.44,683.947 1322,683.947 1322.56,683.947 1323.12,683.947 1323.68,683.947 1324.24,683.947 1324.8,683.947 1325.36,683.947 1325.92,683.947 1326.47,683.947 1327.03,683.947 1327.59,683.947 1328.15,683.947 1328.71,683.947 1329.27,683.947 1329.83,683.947 1330.39,683.947 1330.95,683.947 1331.51,683.947 1332.07,683.947 1332.63,683.947 1333.19,683.947 1333.75,683.947 1334.3,683.947 1334.86,683.947 1335.42,683.947 1335.98,683.947 1336.54,683.947 1337.1,683.947 1337.66,683.947 1338.22,683.947 1338.78,683.947 1339.34,683.947 1339.9,683.947 1340.46,683.947 1341.02,683.947 1341.57,683.947 1342.13,683.947 1342.69,683.947 1343.25,683.947 1343.81,683.947 1344.37,683.947 1344.93,683.947 1345.49,683.947 1346.05,683.947 1346.61,683.947 1347.17,683.947 1347.73,683.947 1348.29,683.947 1348.84,683.947 1349.4,683.947 1349.96,683.947 1350.52,683.947 1351.08,683.947 1351.64,683.947 1352.2,683.947 1352.76,683.947 1353.32,683.947 1353.88,683.947 1354.44,683.947 1355,683.947 1355.56,683.947 1356.12,683.947 1356.67,683.947 1357.23,683.947 1357.79,683.947 1358.35,683.947 1358.91,683.947 1359.47,683.947 1360.03,683.947 1360.59,683.947 1361.15,683.947 1361.71,683.947 1362.27,683.947 1362.83,683.947 1363.39,683.947 1363.94,683.947 1364.5,683.947 1365.06,683.947 1365.62,683.947 1366.18,683.947 1366.74,683.947 1367.3,683.947 1367.86,683.947 1368.42,683.947 1368.98,683.947 1369.54,683.947 1370.1,683.947 1370.66,683.947 1371.21,683.947 1371.77,683.947 1372.33,683.947 1372.89,683.947 1373.45,683.947 1374.01,683.947 1374.57,683.947 1375.13,683.947 1375.69,683.947 1376.25,683.947 1376.81,683.947 1377.37,683.947 1377.93,683.947 1378.49,683.947 1379.04,683.947 1379.6,683.947 1380.16,683.947 1380.72,683.947 1381.28,683.947 1381.84,683.947 1382.4,683.947 1382.96,683.947 1383.52,683.947 1384.08,683.947 1384.64,683.947 1385.2,683.947 1385.76,683.947 1386.31,683.947 1386.87,683.947 1387.43,683.947 1387.99,683.947 1388.55,683.947 1389.11,683.947 1389.67,683.947 1390.23,683.947 1390.79,683.947 1391.35,683.947 1391.91,683.947 1392.47,683.947 1393.03,683.947 1393.58,683.947 1394.14,683.947 1394.7,683.947 1395.26,683.947 1395.82,683.947 1396.38,683.947 1396.94,683.947 1397.5,683.947 1398.06,683.947 1398.62,683.947 1399.18,683.947 1399.74,683.947 1400.3,683.947 1400.86,683.947 1401.41,683.947 1401.97,683.947 1402.53,683.947 1403.09,683.947 1403.65,683.947 1404.21,683.947 1404.77,683.947 1405.33,683.947 1405.89,683.947 1406.45,683.947 1407.01,683.947 1407.57,683.947 1408.13,683.947 1408.68,683.947 1409.24,683.947 1409.8,683.947 1410.36,683.947 1410.92,683.947 1411.48,683.947 1412.04,683.947 1412.6,683.947 1413.16,683.947 1413.72,683.947 1414.28,683.947 1414.84,683.947 1415.4,683.947 1415.95,683.947 1416.51,683.947 1417.07,683.947 1417.63,683.947 1418.19,683.947 1418.75,683.947 1419.31,683.947 1419.87,683.947 1420.43,683.947 1420.99,683.947 1421.55,683.947 1422.11,683.947 1422.67,683.947 1423.23,683.947 1423.78,683.947 1424.34,683.947 1424.9,683.947 1425.46,683.947 1426.02,683.947 1426.58,683.947 1427.14,683.947 1427.7,683.947 1428.26,683.947 1428.82,683.947 1429.38,683.947 1429.94,683.947 1430.5,683.947 1431.05,683.947 1431.61,683.947 1432.17,683.947 1432.73,683.947 1433.29,683.947 1433.85,683.947 1434.41,683.947 1434.97,683.947 1435.53,683.947 1436.09,683.947 1436.65,683.947 1437.21,683.947 1437.77,683.947 1438.33,683.947 1438.88,683.947 1439.44,683.947 1440,683.947 1440.56,683.947 1441.12,683.947 1441.68,683.947 1442.24,683.947 1442.8,683.947 1443.36,683.947 1443.92,683.947 1444.48,683.947 1445.04,683.947 1445.6,683.947 1446.15,683.947 1446.71,683.947 1447.27,683.947 1447.83,683.947 1448.39,683.947 1448.95,683.947 1449.51,683.947 1450.07,683.947 1450.63,683.947 1451.19,683.947 1451.75,683.947 1452.31,683.947 1452.87,683.947 1453.42,683.947 1453.98,683.947 1454.54,683.947 1455.1,683.947 1455.66,683.947 1456.22,683.947 1456.78,683.947 1457.34,683.947 1457.9,683.947 1458.46,683.947 1459.02,683.947 1459.58,683.947 1460.14,683.947 1460.7,683.947 1461.25,683.947 1461.81,683.947 1462.37,683.947 1462.93,683.947 1463.49,683.947 1464.05,683.947 1464.61,683.947 1465.17,683.947 1465.73,683.947 1466.29,683.947 1466.85,683.947 1467.41,683.947 1467.97,683.947 1468.52,683.947 1469.08,683.947 1469.64,683.947 1470.2,683.947 1470.76,683.947 1471.32,683.947 1471.88,683.947 1472.44,683.947 1473,683.947 1473.56,683.947 1474.12,683.947 1474.68,683.947 1475.24,683.947 1475.79,683.947 1476.35,683.947 1476.91,683.947 1477.47,683.947 1478.03,683.947 1478.59,683.947 1479.15,683.947 1479.71,683.947 1480.27,683.947 1480.83,683.947 1481.39,683.947 1481.95,683.947 1482.51,683.947 1483.07,683.947 1483.62,683.947 1484.18,683.947 1484.74,683.947 1485.3,683.947 1485.86,683.947 1486.42,683.947 1486.98,683.947 1487.54,683.947 1488.1,683.947 1488.66,683.947 1489.22,683.947 1489.78,683.947 1490.34,683.947 1490.89,683.947 1491.45,683.947 1492.01,683.947 1492.57,683.947 1493.13,683.947 1493.69,683.947 1494.25,683.947 1494.81,683.947 1495.37,683.947 1495.93,683.947 1496.49,683.947 1497.05,683.947 1497.61,683.947 1498.16,683.947 1498.72,683.947 1499.28,683.947 1499.84,683.947 1500.4,683.947 1500.96,683.947 1501.52,683.947 1502.08,683.947 1502.64,683.947 1503.2,683.947 1503.76,683.947 1504.32,683.947 1504.88,683.947 1505.44,683.947 1505.99,683.947 1506.55,683.947 1507.11,683.947 1507.67,683.947 1508.23,683.947 1508.79,683.947 1509.35,683.947 1509.91,683.947 1510.47,683.947 1511.03,683.947 1511.59,683.947 1512.15,683.947 1512.71,683.947 1513.26,683.947 1513.82,683.947 1514.38,683.947 1514.94,683.947 1515.5,683.947 1516.06,683.947 1516.62,683.947 1517.18,683.947 1517.74,683.947 1518.3,683.947 1518.86,683.947 1519.42,683.947 1519.98,683.947 1520.53,683.947 1521.09,683.947 1521.65,683.947 1522.21,683.947 1522.77,683.947 1523.33,683.947 1523.89,683.947 1524.45,683.947 1525.01,683.947 1525.57,683.947 1526.13,683.947 1526.69,683.947 1527.25,683.947 1527.81,683.947 1528.36,683.947 1528.92,683.947 1529.48,683.947 1530.04,683.947 1530.6,683.947 1531.16,683.947 1531.72,683.947 1532.28,683.947 1532.84,683.947 1533.4,683.947 1533.96,683.947 1534.52,683.947 1535.08,683.947 1535.63,683.947 1536.19,683.947 1536.75,683.947 1537.31,683.947 1537.87,683.947 1538.43,683.947 1538.99,683.947 1539.55,683.947 1540.11,683.947 1540.67,683.947 1541.23,683.947 1541.79,683.947 1542.35,683.947 1542.9,683.947 1543.46,683.947 1544.02,683.947 1544.58,683.947 1545.14,683.947 1545.7,683.947 1546.26,683.947 1546.82,683.947 1547.38,683.947 1547.94,683.947 1548.5,683.947 1549.06,683.947 1549.62,683.947 1550.18,683.947 1550.73,683.947 1551.29,683.947 1551.85,683.947 1552.41,683.947 1552.97,683.947 1553.53,683.947 1554.09,683.947 1554.65,683.947 1555.21,683.947 1555.77,683.947 1556.33,683.947 1556.89,683.947 1557.45,683.947 1558,683.947 1558.56,683.947 1559.12,683.947 1559.68,683.947 1560.24,683.947 1560.8,683.947 1561.36,683.947 1561.92,683.947 1562.48,683.947 1563.04,683.947 1563.6,683.947 1564.16,683.947 1564.72,683.947 1565.28,683.947 1565.83,683.947 1566.39,683.947 1566.95,683.947 1567.51,683.947 1568.07,683.947 1568.63,683.947 1569.19,683.947 1569.75,683.947 1570.31,683.947 1570.87,683.947 1571.43,683.947 1571.99,683.947 1572.55,683.947 1573.1,683.947 1573.66,683.947 1574.22,683.947 1574.78,683.947 1575.34,683.947 1575.9,683.947 1576.46,683.947 1577.02,683.947 1577.58,683.947 1578.14,683.947 1578.7,683.947 1579.26,683.947 1579.82,683.947 1580.37,683.947 1580.93,683.947 1581.49,683.947 1582.05,683.947 1582.61,683.947 1583.17,683.947 1583.73,683.947 1584.29,683.947 1584.85,683.947 1585.41,683.947 1585.97,683.947 1586.53,683.947 1587.09,683.947 1587.65,683.947 1588.2,683.947 1588.76,683.947 1589.32,683.947 1589.88,683.947 1590.44,683.947 1591,683.947 1591.56,683.947 1592.12,683.947 1592.68,683.947 1593.24,683.947 1593.8,683.947 1594.36,683.947 1594.92,683.947 1595.47,683.947 1596.03,683.947 1596.59,683.947 1597.15,683.947 1597.71,683.947 1598.27,683.947 1598.83,683.947 1599.39,683.947 1599.95,683.947 1600.51,683.947 1601.07,683.947 1601.63,683.947 1602.19,683.947 1602.74,683.947 1603.3,683.947 1603.86,683.947 1604.42,683.947 1604.98,683.947 1605.54,683.947 1606.1,683.947 1606.66,683.947 1607.22,683.947 1607.78,683.947 1608.34,683.947 1608.9,683.947 1609.46,683.947 1610.02,683.947 1610.57,683.947 1611.13,683.947 1611.69,683.947 1612.25,683.947 1612.81,683.947 1613.37,683.947 1613.93,683.947 1614.49,683.947 1615.05,683.947 1615.61,683.947 1616.17,683.947 1616.73,683.947 1617.29,683.947 1617.84,683.947 1618.4,683.947 1618.96,683.947 1619.52,683.947 1620.08,683.947 1620.64,683.947 1621.2,683.947 1621.76,683.947 1622.32,683.947 1622.88,683.947 1623.44,683.947 1624,683.947 1624.56,683.947 1625.11,683.947 1625.67,683.947 1626.23,683.947 1626.79,683.947 1627.35,683.947 1627.91,683.947 1628.47,683.947 1629.03,683.947 1629.59,683.947 1630.15,683.947 1630.71,683.947 1631.27,683.947 1631.83,683.947 1632.39,683.947 1632.94,683.947 1633.5,683.947 1634.06,683.947 1634.62,683.947 1635.18,683.947 1635.74,683.947 1636.3,683.947 1636.86,683.947 1637.42,683.947 1637.98,683.947 1638.54,683.947 1639.1,683.947 1639.66,683.947 1640.21,683.947 1640.77,683.947 1641.33,683.947 1641.89,683.947 1642.45,683.947 1643.01,683.947 1643.57,683.947 1644.13,683.947 1644.69,683.947 1645.25,683.947 1645.81,683.947 1646.37,683.947 1646.93,683.947 1647.48,683.947 1648.04,683.947 1648.6,683.947 1649.16,683.947 1649.72,683.947 1650.28,683.947 1650.84,683.947 1651.4,683.947 1651.96,683.947 1652.52,683.947 1653.08,683.947 1653.64,683.947 1654.2,683.947 1654.76,683.947 1655.31,683.947 1655.87,683.947 1656.43,683.947 1656.99,683.947 1657.55,683.947 1658.11,683.947 1658.67,683.947 1659.23,683.947 1659.79,683.947 1660.35,683.947 1660.91,683.947 1661.47,683.947 1662.03,683.947 1662.58,683.947 1663.14,683.947 1663.7,683.947 1664.26,683.947 1664.82,683.947 1665.38,683.947 1665.94,683.947 1666.5,683.947 1667.06,683.947 1667.62,683.947 1668.18,683.947 1668.74,683.947 1669.3,683.947 1669.85,683.947 1670.41,683.947 1670.97,683.947 1671.53,683.947 1672.09,683.947 1672.65,683.947 1673.21,683.947 1673.77,683.947 1674.33,683.947 1674.89,683.947 1675.45,683.947 1676.01,683.947 1676.57,683.947 1677.13,683.947 1677.68,683.947 1678.24,683.947 1678.8,683.947 1679.36,683.947 1679.92,683.947 1680.48,683.947 1681.04,683.947 1681.6,683.947 1682.16,683.947 1682.72,683.947 1683.28,683.947 1683.84,683.947 1684.4,683.947 1684.95,683.947 1685.51,683.947 1686.07,683.947 1686.63,683.947 1687.19,683.947 1687.75,683.947 1688.31,683.947 1688.87,683.947 1689.43,683.947 1689.99,683.947 1690.55,683.947 1691.11,683.947 1691.67,683.947 1692.23,683.947 1692.78,683.947 1693.34,683.947 1693.9,683.947 1694.46,683.947 1695.02,683.947 1695.58,683.947 1696.14,683.947 1696.7,683.947 1697.26,683.947 1697.82,683.947 1698.38,683.947 1698.94,683.947 1699.5,683.947 1700.05,683.947 1700.61,683.947 1701.17,683.947 1701.73,683.947 1702.29,683.947 1702.85,683.947 1703.41,683.947 1703.97,683.947 1704.53,683.947 1705.09,683.947 1705.65,683.947 1706.21,683.947 1706.77,683.947 1707.32,683.947 1707.88,683.947 1708.44,683.947 1709,683.947 1709.56,683.947 1710.12,683.947 1710.68,683.947 1711.24,683.947 1711.8,683.947 1712.36,683.947 1712.92,683.947 1713.48,683.947 1714.04,683.947 1714.6,683.947 1715.15,683.947 1715.71,683.947 1716.27,683.947 1716.83,683.947 1717.39,683.947 1717.95,683.947 1718.51,683.947 1719.07,683.947 1719.63,683.947 1720.19,683.947 1720.75,683.947 1721.31,683.947 1721.87,683.947 1722.42,683.947 1722.98,683.947 1723.54,683.947 1724.1,683.947 1724.66,683.947 1725.22,683.947 1725.78,683.947 1726.34,683.947 1726.9,683.947 1727.46,683.947 1728.02,683.947 1728.58,683.947 1729.14,683.947 1729.69,683.947 1730.25,683.947 1730.81,683.947 1731.37,683.947 1731.93,683.947 1732.49,683.947 1733.05,683.947 1733.61,683.947 1734.17,683.947 1734.73,683.947 1735.29,683.947 1735.85,683.947 1736.41,683.947 1736.97,683.947 1737.52,683.947 1738.08,683.947 1738.64,683.947 1739.2,683.947 1739.76,683.947 1740.32,683.947 1740.88,683.947 1741.44,683.947 1742,683.947 1742.56,683.947 1743.12,683.947 1743.68,683.947 1744.24,683.947 1744.79,683.947 1745.35,683.947 1745.91,683.947 1746.47,683.947 1747.03,683.947 1747.59,683.947 1748.15,683.947 1748.71,683.947 1749.27,683.947 1749.83,683.947 1750.39,683.947 1750.95,683.947 1751.51,683.947 1752.06,683.947 1752.62,683.947 1753.18,683.947 1753.74,683.947 1754.3,683.947 1754.86,683.947 1755.42,683.947 1755.98,683.947 1756.54,683.947 1757.1,683.947 1757.66,683.947 1758.22,683.947 1758.78,683.947 1759.34,683.947 1759.89,683.947 1760.45,683.947 1761.01,683.947 1761.57,683.947 1762.13,683.947 1762.69,683.947 1763.25,683.947 1763.81,683.947 1764.37,683.947 1764.93,683.947 1765.49,683.947 1766.05,683.947 1766.61,683.947 1767.16,683.947 1767.72,683.947 1768.28,683.947 1768.84,683.947 1769.4,683.947 1769.96,683.947 1770.52,683.947 1771.08,683.947 1771.64,683.947 1772.2,683.947 1772.76,683.947 1773.32,683.947 1773.88,683.947 1774.43,683.947 1774.99,683.947 1775.55,683.947 1776.11,683.947 1776.67,683.947 1777.23,683.947 1777.79,683.947 1778.35,683.947 1778.91,683.947 1779.47,683.947 1780.03,683.947 1780.59,683.947 1781.15,683.947 1781.71,683.947 1782.26,683.947 1782.82,683.947 1783.38,683.947 1783.94,683.947 1784.5,683.947 1785.06,683.947 1785.62,683.947 1786.18,683.947 1786.74,683.947 1787.3,683.947 1787.86,683.947 1788.42,683.947 1788.98,683.947 1789.53,683.947 1790.09,683.947 1790.65,683.947 1791.21,683.947 1791.77,683.947 1792.33,683.947 1792.89,683.947 1793.45,683.947 1794.01,683.947 1794.57,683.947 1795.13,683.947 1795.69,683.947 1796.25,683.947 1796.8,683.947 1797.36,683.947 1797.92,683.947 1798.48,683.947 1799.04,683.947 1799.6,683.947 1800.16,683.947 1800.72,683.947 1801.28,683.947 1801.84,683.947 1802.4,683.947 1802.96,683.947 1803.52,683.947 1804.08,683.947 1804.63,683.947 1805.19,683.947 1805.75,683.947 1806.31,683.947 1806.87,683.947 1807.43,683.947 1807.99,683.947 1808.55,683.947 1809.11,683.947 1809.67,683.947 1810.23,683.947 1810.79,683.947 1811.35,683.947 1811.9,683.947 1812.46,683.947 1813.02,683.947 1813.58,683.947 1814.14,683.947 1814.7,683.947 1815.26,683.947 1815.82,683.947 1816.38,683.947 1816.94,683.947 1817.5,683.947 1818.06,683.947 1818.62,683.947 1819.18,683.947 1819.73,683.947 1820.29,683.947 1820.85,683.947 1821.41,683.947 1821.97,683.947 1822.53,683.947 1823.09,683.947 1823.65,683.947 1824.21,683.947 1824.77,683.947 1825.33,683.947 1825.89,683.947 1826.45,683.947 1827,683.947 1827.56,683.947 1828.12,683.947 1828.68,683.947 1829.24,683.947 1829.8,683.947 1830.36,683.947 1830.92,683.947 1831.48,683.947 1832.04,683.947 1832.6,683.947 1833.16,683.947 1833.72,683.947 1834.27,683.947 1834.83,683.947 1835.39,683.947 1835.95,683.947 1836.51,683.947 1837.07,683.947 1837.63,683.947 1838.19,683.947 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.040706143771773 ± 0.021261496945758386\nProjected Energy: -4.0169096573818805 ± (0.007217427032498058, 0.007513197963629814)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.470452</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3705e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.064e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.706e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.683e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.735e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.396e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.3631242916133672\n -0.7590191922770906\n  0.13584182219620722\n  0.1578999869460862\n  0.8767114411781325\n  1.5305929970973304\n  1.5835732611867375\n  3.072870330325853\n  3.125672653951847\n  4.862107221562173\n  6.260694850380595\n  6.402671211183109\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products are defined with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of FCIQMC as observable operators, e.g. for defining correlation functions. For concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
