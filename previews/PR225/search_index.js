var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Firstly, we load all needed modules. Rimu for FCIQMC calculation, and DataFrames for output","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\naIni = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(aIni; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we define the operators for the observables we wish to calculate","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ([G2RealCorrelator(d) for d in dvals]...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, which are subtyped to AbstractHamiltonian, but with less functionality than a full Hamiltonian. It calculates the two-body correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables are calculated using the \"replica trick\" whereby several copies or \"replicas\" of the model are run simultaneously. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one. For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the necessary FCIQMC variables are calculated for each replica, (e.g. shift, norm etc.), this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_reps = 3\nreplica = AllOverlaps(num_reps; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We need a reasonable number of timesteps to get good statistics, and we are running multiple replicas, so we will only use a small number of walkers:","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies are the same as before","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dτ = 0.001\nsvec = DVec(aIni => 1)\nRandom.seed!(17);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we run the main FCIQMC loop:","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(H, svec;\n            dτ,\n            laststep = steps_equilibrate + steps_measure,\n            targetwalkers,\n            replica,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult using MonteCarloMeasurements. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now we can calculate the correlation function for each value of d","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_reps replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21613155078119725 ± 0.01085821157566204\n   G2(1) = 0.9169697523770443 ± 0.0038806082210552633\n   G2(2) = 0.9824296470223551 ± 0.0017958379949926653\n   G2(3) = 0.9850696504200039 ± 0.0021126795728271214\n   G2(4) = 0.9824296470223551 ± 0.0017958379949926653\n   G2(5) = 0.9169697523770443 ± 0.0038806082210552633\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is highest at d=3 which is the longest possible separation with periodic boundary conditions.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_reps replicas:\")\nfor i in 1:num_reps\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.822539185245795 ± 0.22458214092101125\n   Replica 2: -4.0952774782992565 ± 0.20113200040556367\n   Replica 3: -4.003586035974758 ± 0.20727140414134074\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Finished!","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Firstly, we load all needed modules. Rimu for FCIQMC calculation;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots # for plotting","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now we define the physical problem: Generating a configuration where 6 particles are evenly distributed in 6 lattice sites:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"aIni = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}((1, 1, 1, 1, 1, 1))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"where BoseFS is used to create a bosonic Fock state. The Hamiltonian is defined by specifying the model and the parameters. Here we use the Bose Hubbard model in one dimension and real space:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Ĥ = HubbardReal1D(aIni; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"It is good practice to equilibrate the time series before taking statistics.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The appropriate size of the time step is problem dependent.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dτ = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here we use the function default_starting_vector to generate a vector with only a single occupied configuration, the same vector that we will use as starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"svec = default_starting_vector(aIni; style=IsStochasticInteger())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|1 1 1 1 1 1⟩\" => 10","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use (while it is irrelevant for the projected energy).","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables are passed into the lomc! function with the post_step keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step = ProjectedEnergy(Ĥ, svec)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}((1, 1, 1, 1, 1, 1)); u=6.0, t=1.0), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Int64}[fs\"|1 1 1 1 1 1⟩\" => 10]), Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}(Pair{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}[fs\"|1 1 1 1 2 0⟩\" => -14.142135623730951, fs\"|0 2 1 1 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 1 0 2⟩\" => -14.142135623730951, fs\"|1 2 0 1 1 1⟩\" => -14.142135623730951, fs\"|2 0 1 1 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 2 0 1⟩\" => -14.142135623730951, fs\"|1 1 2 0 1 1⟩\" => -14.142135623730951, fs\"|1 1 0 2 1 1⟩\" => -14.142135623730951, fs\"|1 1 1 0 2 1⟩\" => -14.142135623730951, fs\"|1 0 2 1 1 1⟩\" => -14.142135623730951, fs\"|2 1 1 1 1 0⟩\" => -14.142135623730951, fs\"|0 1 1 1 1 2⟩\" => -14.142135623730951]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Seeding the random number generator is sometimes useful in order to get reproducible results","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Random\nRandom.seed!(17);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Finally, we can start the main FCIQMC loop:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df, state = lomc!(Ĥ, svec;\n            laststep = steps_equilibrate + steps_measure, # total number of steps\n            dτ,\n            targetwalkers,\n            post_step,\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df is a DataFrame containing the time series data.","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline([targetwalkers], label=\"targetwalkers\", color=:red, linestyle=:dash)\nplot!(df.steps, df.norm, label=\"norm\", ylabel=\"norm\", xlabel=\"steps\")","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip990\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip991\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip990)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip992\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"165.712,1505.26 165.712,47.2441 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"873.5,1505.26 873.5,47.2441 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1581.29,1505.26 1581.29,47.2441 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2289.08,1505.26 2289.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"165.712,1505.26 165.712,1486.36 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"873.5,1505.26 873.5,1486.36 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1581.29,1505.26 1581.29,1486.36 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1505.26 2289.08,1486.36 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M165.712 1536.18 Q162.101 1536.18 160.272 1539.74 Q158.467 1543.28 158.467 1550.41 Q158.467 1557.52 160.272 1561.09 Q162.101 1564.63 165.712 1564.63 Q169.346 1564.63 171.152 1561.09 Q172.981 1557.52 172.981 1550.41 Q172.981 1543.28 171.152 1539.74 Q169.346 1536.18 165.712 1536.18 M165.712 1532.47 Q171.522 1532.47 174.578 1537.08 Q177.656 1541.66 177.656 1550.41 Q177.656 1559.14 174.578 1563.75 Q171.522 1568.33 165.712 1568.33 Q159.902 1568.33 156.823 1563.75 Q153.768 1559.14 153.768 1550.41 Q153.768 1541.66 156.823 1537.08 Q159.902 1532.47 165.712 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M818.026 1563.72 L825.665 1563.72 L825.665 1537.36 L817.355 1539.03 L817.355 1534.77 L825.618 1533.1 L830.294 1533.1 L830.294 1563.72 L837.933 1563.72 L837.933 1567.66 L818.026 1567.66 L818.026 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M857.378 1536.18 Q853.766 1536.18 851.938 1539.74 Q850.132 1543.28 850.132 1550.41 Q850.132 1557.52 851.938 1561.09 Q853.766 1564.63 857.378 1564.63 Q861.012 1564.63 862.817 1561.09 Q864.646 1557.52 864.646 1550.41 Q864.646 1543.28 862.817 1539.74 Q861.012 1536.18 857.378 1536.18 M857.378 1532.47 Q863.188 1532.47 866.243 1537.08 Q869.322 1541.66 869.322 1550.41 Q869.322 1559.14 866.243 1563.75 Q863.188 1568.33 857.378 1568.33 Q851.567 1568.33 848.489 1563.75 Q845.433 1559.14 845.433 1550.41 Q845.433 1541.66 848.489 1537.08 Q851.567 1532.47 857.378 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M887.539 1536.18 Q883.928 1536.18 882.1 1539.74 Q880.294 1543.28 880.294 1550.41 Q880.294 1557.52 882.1 1561.09 Q883.928 1564.63 887.539 1564.63 Q891.174 1564.63 892.979 1561.09 Q894.808 1557.52 894.808 1550.41 Q894.808 1543.28 892.979 1539.74 Q891.174 1536.18 887.539 1536.18 M887.539 1532.47 Q893.35 1532.47 896.405 1537.08 Q899.484 1541.66 899.484 1550.41 Q899.484 1559.14 896.405 1563.75 Q893.35 1568.33 887.539 1568.33 Q881.729 1568.33 878.651 1563.75 Q875.595 1559.14 875.595 1550.41 Q875.595 1541.66 878.651 1537.08 Q881.729 1532.47 887.539 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M917.701 1536.18 Q914.09 1536.18 912.261 1539.74 Q910.456 1543.28 910.456 1550.41 Q910.456 1557.52 912.261 1561.09 Q914.09 1564.63 917.701 1564.63 Q921.336 1564.63 923.141 1561.09 Q924.97 1557.52 924.97 1550.41 Q924.97 1543.28 923.141 1539.74 Q921.336 1536.18 917.701 1536.18 M917.701 1532.47 Q923.511 1532.47 926.567 1537.08 Q929.646 1541.66 929.646 1550.41 Q929.646 1559.14 926.567 1563.75 Q923.511 1568.33 917.701 1568.33 Q911.891 1568.33 908.812 1563.75 Q905.757 1559.14 905.757 1550.41 Q905.757 1541.66 908.812 1537.08 Q911.891 1532.47 917.701 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1529.9 1563.72 L1546.22 1563.72 L1546.22 1567.66 L1524.27 1567.66 L1524.27 1563.72 Q1526.94 1560.97 1531.52 1556.34 Q1536.13 1551.69 1537.31 1550.35 Q1539.55 1547.82 1540.43 1546.09 Q1541.33 1544.33 1541.33 1542.64 Q1541.33 1539.88 1539.39 1538.15 Q1537.47 1536.41 1534.37 1536.41 Q1532.17 1536.41 1529.71 1537.17 Q1527.28 1537.94 1524.51 1539.49 L1524.51 1534.77 Q1527.33 1533.63 1529.78 1533.05 Q1532.24 1532.47 1534.27 1532.47 Q1539.64 1532.47 1542.84 1535.16 Q1546.03 1537.85 1546.03 1542.34 Q1546.03 1544.47 1545.22 1546.39 Q1544.44 1548.28 1542.33 1550.88 Q1541.75 1551.55 1538.65 1554.77 Q1535.55 1557.96 1529.9 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1566.03 1536.18 Q1562.42 1536.18 1560.59 1539.74 Q1558.79 1543.28 1558.79 1550.41 Q1558.79 1557.52 1560.59 1561.09 Q1562.42 1564.63 1566.03 1564.63 Q1569.67 1564.63 1571.47 1561.09 Q1573.3 1557.52 1573.3 1550.41 Q1573.3 1543.28 1571.47 1539.74 Q1569.67 1536.18 1566.03 1536.18 M1566.03 1532.47 Q1571.84 1532.47 1574.9 1537.08 Q1577.98 1541.66 1577.98 1550.41 Q1577.98 1559.14 1574.9 1563.75 Q1571.84 1568.33 1566.03 1568.33 Q1560.22 1568.33 1557.14 1563.75 Q1554.09 1559.14 1554.09 1550.41 Q1554.09 1541.66 1557.14 1537.08 Q1560.22 1532.47 1566.03 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1596.2 1536.18 Q1592.58 1536.18 1590.76 1539.74 Q1588.95 1543.28 1588.95 1550.41 Q1588.95 1557.52 1590.76 1561.09 Q1592.58 1564.63 1596.2 1564.63 Q1599.83 1564.63 1601.64 1561.09 Q1603.46 1557.52 1603.46 1550.41 Q1603.46 1543.28 1601.64 1539.74 Q1599.83 1536.18 1596.2 1536.18 M1596.2 1532.47 Q1602.01 1532.47 1605.06 1537.08 Q1608.14 1541.66 1608.14 1550.41 Q1608.14 1559.14 1605.06 1563.75 Q1602.01 1568.33 1596.2 1568.33 Q1590.39 1568.33 1587.31 1563.75 Q1584.25 1559.14 1584.25 1550.41 Q1584.25 1541.66 1587.31 1537.08 Q1590.39 1532.47 1596.2 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1626.36 1536.18 Q1622.75 1536.18 1620.92 1539.74 Q1619.11 1543.28 1619.11 1550.41 Q1619.11 1557.52 1620.92 1561.09 Q1622.75 1564.63 1626.36 1564.63 Q1629.99 1564.63 1631.8 1561.09 Q1633.63 1557.52 1633.63 1550.41 Q1633.63 1543.28 1631.8 1539.74 Q1629.99 1536.18 1626.36 1536.18 M1626.36 1532.47 Q1632.17 1532.47 1635.22 1537.08 Q1638.3 1541.66 1638.3 1550.41 Q1638.3 1559.14 1635.22 1563.75 Q1632.17 1568.33 1626.36 1568.33 Q1620.55 1568.33 1617.47 1563.75 Q1614.41 1559.14 1614.41 1550.41 Q1614.41 1541.66 1617.47 1537.08 Q1620.55 1532.47 1626.36 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2247.76 1549.03 Q2251.11 1549.74 2252.99 1552.01 Q2254.89 1554.28 2254.89 1557.61 Q2254.89 1562.73 2251.37 1565.53 Q2247.85 1568.33 2241.37 1568.33 Q2239.19 1568.33 2236.88 1567.89 Q2234.59 1567.47 2232.13 1566.62 L2232.13 1562.1 Q2234.08 1563.24 2236.39 1563.82 Q2238.71 1564.4 2241.23 1564.4 Q2245.63 1564.4 2247.92 1562.66 Q2250.23 1560.92 2250.23 1557.61 Q2250.23 1554.56 2248.08 1552.85 Q2245.95 1551.11 2242.13 1551.11 L2238.1 1551.11 L2238.1 1547.27 L2242.32 1547.27 Q2245.77 1547.27 2247.59 1545.9 Q2249.42 1544.51 2249.42 1541.92 Q2249.42 1539.26 2247.53 1537.85 Q2245.65 1536.41 2242.13 1536.41 Q2240.21 1536.41 2238.01 1536.83 Q2235.81 1537.24 2233.17 1538.12 L2233.17 1533.96 Q2235.84 1533.22 2238.15 1532.85 Q2240.49 1532.47 2242.55 1532.47 Q2247.87 1532.47 2250.97 1534.91 Q2254.08 1537.31 2254.08 1541.43 Q2254.08 1544.3 2252.43 1546.29 Q2250.79 1548.26 2247.76 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2273.75 1536.18 Q2270.14 1536.18 2268.31 1539.74 Q2266.51 1543.28 2266.51 1550.41 Q2266.51 1557.52 2268.31 1561.09 Q2270.14 1564.63 2273.75 1564.63 Q2277.39 1564.63 2279.19 1561.09 Q2281.02 1557.52 2281.02 1550.41 Q2281.02 1543.28 2279.19 1539.74 Q2277.39 1536.18 2273.75 1536.18 M2273.75 1532.47 Q2279.56 1532.47 2282.62 1537.08 Q2285.7 1541.66 2285.7 1550.41 Q2285.7 1559.14 2282.62 1563.75 Q2279.56 1568.33 2273.75 1568.33 Q2267.94 1568.33 2264.86 1563.75 Q2261.81 1559.14 2261.81 1550.41 Q2261.81 1541.66 2264.86 1537.08 Q2267.94 1532.47 2273.75 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2303.91 1536.18 Q2300.3 1536.18 2298.47 1539.74 Q2296.67 1543.28 2296.67 1550.41 Q2296.67 1557.52 2298.47 1561.09 Q2300.3 1564.63 2303.91 1564.63 Q2307.55 1564.63 2309.35 1561.09 Q2311.18 1557.52 2311.18 1550.41 Q2311.18 1543.28 2309.35 1539.74 Q2307.55 1536.18 2303.91 1536.18 M2303.91 1532.47 Q2309.72 1532.47 2312.78 1537.08 Q2315.86 1541.66 2315.86 1550.41 Q2315.86 1559.14 2312.78 1563.75 Q2309.72 1568.33 2303.91 1568.33 Q2298.1 1568.33 2295.03 1563.75 Q2291.97 1559.14 2291.97 1550.41 Q2291.97 1541.66 2295.03 1537.08 Q2298.1 1532.47 2303.91 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2334.08 1536.18 Q2330.46 1536.18 2328.64 1539.74 Q2326.83 1543.28 2326.83 1550.41 Q2326.83 1557.52 2328.64 1561.09 Q2330.46 1564.63 2334.08 1564.63 Q2337.71 1564.63 2339.52 1561.09 Q2341.34 1557.52 2341.34 1550.41 Q2341.34 1543.28 2339.52 1539.74 Q2337.71 1536.18 2334.08 1536.18 M2334.08 1532.47 Q2339.89 1532.47 2342.94 1537.08 Q2346.02 1541.66 2346.02 1550.41 Q2346.02 1559.14 2342.94 1563.75 Q2339.89 1568.33 2334.08 1568.33 Q2328.27 1568.33 2325.19 1563.75 Q2322.13 1559.14 2322.13 1550.41 Q2322.13 1541.66 2325.19 1537.08 Q2328.27 1532.47 2334.08 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1168.96 1615.53 L1168.96 1621.06 Q1166.48 1619.79 1163.8 1619.15 Q1161.13 1618.52 1158.27 1618.52 Q1153.91 1618.52 1151.71 1619.85 Q1149.55 1621.19 1149.55 1623.87 Q1149.55 1625.9 1151.1 1627.08 Q1152.66 1628.23 1157.38 1629.28 L1159.38 1629.72 Q1165.62 1631.06 1168.23 1633.51 Q1170.87 1635.93 1170.87 1640.29 Q1170.87 1645.25 1166.92 1648.15 Q1163.01 1651.05 1156.13 1651.05 Q1153.27 1651.05 1150.15 1650.47 Q1147.06 1649.93 1143.63 1648.82 L1143.63 1642.77 Q1146.87 1644.46 1150.02 1645.32 Q1153.17 1646.15 1156.26 1646.15 Q1160.4 1646.15 1162.63 1644.74 Q1164.85 1643.31 1164.85 1640.73 Q1164.85 1638.35 1163.23 1637.07 Q1161.64 1635.8 1156.2 1634.62 L1154.16 1634.15 Q1148.72 1633 1146.3 1630.64 Q1143.88 1628.26 1143.88 1624.12 Q1143.88 1619.09 1147.44 1616.35 Q1151.01 1613.62 1157.57 1613.62 Q1160.81 1613.62 1163.68 1614.09 Q1166.54 1614.57 1168.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1185.99 1604.35 L1185.99 1614.48 L1198.05 1614.48 L1198.05 1619.03 L1185.99 1619.03 L1185.99 1638.38 Q1185.99 1642.74 1187.17 1643.98 Q1188.38 1645.22 1192.04 1645.22 L1198.05 1645.22 L1198.05 1650.12 L1192.04 1650.12 Q1185.26 1650.12 1182.68 1647.61 Q1180.1 1645.06 1180.1 1638.38 L1180.1 1619.03 L1175.8 1619.03 L1175.8 1614.48 L1180.1 1614.48 L1180.1 1604.35 L1185.99 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1236.25 1630.84 L1236.25 1633.7 L1209.32 1633.7 Q1209.7 1639.75 1212.95 1642.93 Q1216.23 1646.08 1222.05 1646.08 Q1225.42 1646.08 1228.58 1645.25 Q1231.76 1644.43 1234.88 1642.77 L1234.88 1648.31 Q1231.73 1649.65 1228.42 1650.35 Q1225.11 1651.05 1221.7 1651.05 Q1213.17 1651.05 1208.17 1646.08 Q1203.21 1641.12 1203.21 1632.65 Q1203.21 1623.9 1207.92 1618.77 Q1212.66 1613.62 1220.68 1613.62 Q1227.88 1613.62 1232.04 1618.26 Q1236.25 1622.88 1236.25 1630.84 M1230.39 1629.12 Q1230.33 1624.31 1227.68 1621.45 Q1225.07 1618.58 1220.75 1618.58 Q1215.84 1618.58 1212.88 1621.35 Q1209.96 1624.12 1209.51 1629.15 L1230.39 1629.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1251.52 1644.78 L1251.52 1663.68 L1245.64 1663.68 L1245.64 1614.48 L1251.52 1614.48 L1251.52 1619.89 Q1253.37 1616.7 1256.17 1615.18 Q1259 1613.62 1262.92 1613.62 Q1269.41 1613.62 1273.45 1618.77 Q1277.53 1623.93 1277.53 1632.33 Q1277.53 1640.73 1273.45 1645.89 Q1269.41 1651.05 1262.92 1651.05 Q1259 1651.05 1256.17 1649.52 Q1253.37 1647.96 1251.52 1644.78 M1271.45 1632.33 Q1271.45 1625.87 1268.78 1622.21 Q1266.13 1618.52 1261.49 1618.52 Q1256.84 1618.52 1254.17 1622.21 Q1251.52 1625.87 1251.52 1632.33 Q1251.52 1638.79 1254.17 1642.48 Q1256.84 1646.15 1261.49 1646.15 Q1266.13 1646.15 1268.78 1642.48 Q1271.45 1638.79 1271.45 1632.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1309.96 1615.53 L1309.96 1621.06 Q1307.48 1619.79 1304.8 1619.15 Q1302.13 1618.52 1299.27 1618.52 Q1294.91 1618.52 1292.71 1619.85 Q1290.55 1621.19 1290.55 1623.87 Q1290.55 1625.9 1292.11 1627.08 Q1293.66 1628.23 1298.38 1629.28 L1300.38 1629.72 Q1306.62 1631.06 1309.23 1633.51 Q1311.87 1635.93 1311.87 1640.29 Q1311.87 1645.25 1307.92 1648.15 Q1304.01 1651.05 1297.13 1651.05 Q1294.27 1651.05 1291.15 1650.47 Q1288.06 1649.93 1284.63 1648.82 L1284.63 1642.77 Q1287.87 1644.46 1291.02 1645.32 Q1294.17 1646.15 1297.26 1646.15 Q1301.4 1646.15 1303.63 1644.74 Q1305.86 1643.31 1305.86 1640.73 Q1305.86 1638.35 1304.23 1637.07 Q1302.64 1635.8 1297.2 1634.62 L1295.16 1634.15 Q1289.72 1633 1287.3 1630.64 Q1284.88 1628.26 1284.88 1624.12 Q1284.88 1619.09 1288.45 1616.35 Q1292.01 1613.62 1298.57 1613.62 Q1301.81 1613.62 1304.68 1614.09 Q1307.54 1614.57 1309.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1477.4 2352.76,1477.4 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1142.24 2352.76,1142.24 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,807.086 2352.76,807.086 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,471.929 2352.76,471.929 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,136.771 2352.76,136.771 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1477.4 121.638,1477.4 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1142.24 121.638,1142.24 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,807.086 121.638,807.086 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,471.929 121.638,471.929 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,136.771 121.638,136.771 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M54.7958 1463.2 Q51.1847 1463.2 49.356 1466.77 Q47.5504 1470.31 47.5504 1477.44 Q47.5504 1484.54 49.356 1488.11 Q51.1847 1491.65 54.7958 1491.65 Q58.43 1491.65 60.2356 1488.11 Q62.0643 1484.54 62.0643 1477.44 Q62.0643 1470.31 60.2356 1466.77 Q58.43 1463.2 54.7958 1463.2 M54.7958 1459.5 Q60.6059 1459.5 63.6615 1464.1 Q66.7402 1468.69 66.7402 1477.44 Q66.7402 1486.16 63.6615 1490.77 Q60.6059 1495.35 54.7958 1495.35 Q48.9856 1495.35 45.9069 1490.77 Q42.8514 1486.16 42.8514 1477.44 Q42.8514 1468.69 45.9069 1464.1 Q48.9856 1459.5 54.7958 1459.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-11.5002 1155.59 L4.81919 1155.59 L4.81919 1159.52 L-17.1251 1159.52 L-17.1251 1155.59 Q-14.4631 1152.83 -9.8798 1148.2 Q-5.27335 1143.55 -4.0928 1142.21 Q-1.84744 1139.69 -0.967813 1137.95 Q-0.0650401 1136.19 -0.0650401 1134.5 Q-0.0650401 1131.75 -2.00947 1130.01 Q-3.93076 1128.27 -7.0326 1128.27 Q-9.23166 1128.27 -11.6853 1129.04 Q-14.1159 1129.8 -16.8937 1131.35 L-16.8937 1126.63 Q-14.0696 1125.5 -11.6159 1124.92 Q-9.16221 1124.34 -7.12519 1124.34 Q-1.75485 1124.34 1.43958 1127.02 Q4.63401 1129.71 4.63401 1134.2 Q4.63401 1136.33 3.82383 1138.25 Q3.0368 1140.15 0.930325 1142.74 Q0.351624 1143.41 -2.75021 1146.63 Q-5.85205 1149.82 -11.5002 1155.59 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M14.6803 1124.96 L33.0366 1124.96 L33.0366 1128.9 L18.9626 1128.9 L18.9626 1137.37 Q19.9811 1137.02 20.9997 1136.86 Q22.0182 1136.68 23.0367 1136.68 Q28.8237 1136.68 32.2033 1139.85 Q35.5829 1143.02 35.5829 1148.44 Q35.5829 1154.01 32.1107 1157.12 Q28.6385 1160.2 22.3191 1160.2 Q20.1432 1160.2 17.8747 1159.82 Q15.6293 1159.45 13.2219 1158.71 L13.2219 1154.01 Q15.3052 1155.15 17.5275 1155.7 Q19.7497 1156.26 22.2265 1156.26 Q26.2311 1156.26 28.5691 1154.15 Q30.907 1152.05 30.907 1148.44 Q30.907 1144.83 28.5691 1142.72 Q26.2311 1140.61 22.2265 1140.61 Q20.3515 1140.61 18.4765 1141.03 Q16.6247 1141.45 14.6803 1142.33 L14.6803 1124.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M54.7958 1128.04 Q51.1847 1128.04 49.356 1131.61 Q47.5504 1135.15 47.5504 1142.28 Q47.5504 1149.39 49.356 1152.95 Q51.1847 1156.49 54.7958 1156.49 Q58.43 1156.49 60.2356 1152.95 Q62.0643 1149.39 62.0643 1142.28 Q62.0643 1135.15 60.2356 1131.61 Q58.43 1128.04 54.7958 1128.04 M54.7958 1124.34 Q60.6059 1124.34 63.6615 1128.95 Q66.7402 1133.53 66.7402 1142.28 Q66.7402 1151.01 63.6615 1155.61 Q60.6059 1160.2 54.7958 1160.2 Q48.9856 1160.2 45.9069 1155.61 Q42.8514 1151.01 42.8514 1142.28 Q42.8514 1133.53 45.9069 1128.95 Q48.9856 1124.34 54.7958 1124.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-15.4816 789.806 L2.87476 789.806 L2.87476 793.742 L-11.1992 793.742 L-11.1992 802.214 Q-10.1807 801.867 -9.16221 801.705 Q-8.1437 801.519 -7.12519 801.519 Q-1.33818 801.519 2.04143 804.691 Q5.42104 807.862 5.42104 813.279 Q5.42104 818.857 1.94884 821.959 Q-1.52337 825.038 -7.84278 825.038 Q-10.0187 825.038 -12.2872 824.667 Q-14.5326 824.297 -16.9399 823.556 L-16.9399 818.857 Q-14.8566 819.991 -12.6344 820.547 Q-10.4122 821.103 -7.93537 821.103 Q-3.93076 821.103 -1.59281 818.996 Q0.745141 816.89 0.745141 813.279 Q0.745141 809.667 -1.59281 807.561 Q-3.93076 805.455 -7.93537 805.455 Q-9.81036 805.455 -11.6853 805.871 Q-13.5372 806.288 -15.4816 807.167 L-15.4816 789.806 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M24.6339 792.885 Q21.0228 792.885 19.1941 796.45 Q17.3886 799.992 17.3886 807.121 Q17.3886 814.228 19.1941 817.792 Q21.0228 821.334 24.6339 821.334 Q28.2681 821.334 30.0737 817.792 Q31.9024 814.228 31.9024 807.121 Q31.9024 799.992 30.0737 796.45 Q28.2681 792.885 24.6339 792.885 M24.6339 789.181 Q30.4441 789.181 33.4996 793.788 Q36.5783 798.371 36.5783 807.121 Q36.5783 815.848 33.4996 820.454 Q30.4441 825.038 24.6339 825.038 Q18.8237 825.038 15.7451 820.454 Q12.6895 815.848 12.6895 807.121 Q12.6895 798.371 15.7451 793.788 Q18.8237 789.181 24.6339 789.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M54.7958 792.885 Q51.1847 792.885 49.356 796.45 Q47.5504 799.992 47.5504 807.121 Q47.5504 814.228 49.356 817.792 Q51.1847 821.334 54.7958 821.334 Q58.43 821.334 60.2356 817.792 Q62.0643 814.228 62.0643 807.121 Q62.0643 799.992 60.2356 796.45 Q58.43 792.885 54.7958 792.885 M54.7958 789.181 Q60.6059 789.181 63.6615 793.788 Q66.7402 798.371 66.7402 807.121 Q66.7402 815.848 63.6615 820.454 Q60.6059 825.038 54.7958 825.038 Q48.9856 825.038 45.9069 820.454 Q42.8514 815.848 42.8514 807.121 Q42.8514 798.371 45.9069 793.788 Q48.9856 789.181 54.7958 789.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-16.7085 454.649 L5.51363 454.649 L5.51363 456.64 L-7.0326 489.209 L-11.9168 489.209 L-0.111336 458.584 L-16.7085 458.584 L-16.7085 454.649 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M14.6803 454.649 L33.0366 454.649 L33.0366 458.584 L18.9626 458.584 L18.9626 467.056 Q19.9811 466.709 20.9997 466.547 Q22.0182 466.362 23.0367 466.362 Q28.8237 466.362 32.2033 469.533 Q35.5829 472.704 35.5829 478.121 Q35.5829 483.7 32.1107 486.802 Q28.6385 489.88 22.3191 489.88 Q20.1432 489.88 17.8747 489.51 Q15.6293 489.139 13.2219 488.399 L13.2219 483.7 Q15.3052 484.834 17.5275 485.389 Q19.7497 485.945 22.2265 485.945 Q26.2311 485.945 28.5691 483.839 Q30.907 481.732 30.907 478.121 Q30.907 474.51 28.5691 472.403 Q26.2311 470.297 22.2265 470.297 Q20.3515 470.297 18.4765 470.714 Q16.6247 471.13 14.6803 472.01 L14.6803 454.649 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M54.7958 457.728 Q51.1847 457.728 49.356 461.292 Q47.5504 464.834 47.5504 471.964 Q47.5504 479.07 49.356 482.635 Q51.1847 486.177 54.7958 486.177 Q58.43 486.177 60.2356 482.635 Q62.0643 479.07 62.0643 471.964 Q62.0643 464.834 60.2356 461.292 Q58.43 457.728 54.7958 457.728 M54.7958 454.024 Q60.6059 454.024 63.6615 458.63 Q66.7402 463.214 66.7402 471.964 Q66.7402 480.69 63.6615 485.297 Q60.6059 489.88 54.7958 489.88 Q48.9856 489.88 45.9069 485.297 Q42.8514 480.69 42.8514 471.964 Q42.8514 463.214 45.9069 458.63 Q48.9856 454.024 54.7958 454.024 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-44.8796 150.116 L-37.2408 150.116 L-37.2408 123.751 L-45.5509 125.417 L-45.5509 121.158 L-37.2871 119.491 L-32.6112 119.491 L-32.6112 150.116 L-24.9723 150.116 L-24.9723 154.051 L-44.8796 154.051 L-44.8796 150.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-5.52797 122.57 Q-9.13907 122.57 -10.9678 126.135 Q-12.7733 129.677 -12.7733 136.806 Q-12.7733 143.913 -10.9678 147.477 Q-9.13907 151.019 -5.52797 151.019 Q-1.89373 151.019 -0.0881881 147.477 Q1.74051 143.913 1.74051 136.806 Q1.74051 129.677 -0.0881881 126.135 Q-1.89373 122.57 -5.52797 122.57 M-5.52797 118.866 Q0.28218 118.866 3.33772 123.473 Q6.41641 128.056 6.41641 136.806 Q6.41641 145.533 3.33772 150.139 Q0.28218 154.723 -5.52797 154.723 Q-11.3381 154.723 -14.4168 150.139 Q-17.4724 145.533 -17.4724 136.806 Q-17.4724 128.056 -14.4168 123.473 Q-11.3381 118.866 -5.52797 118.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M24.6339 122.57 Q21.0228 122.57 19.1941 126.135 Q17.3886 129.677 17.3886 136.806 Q17.3886 143.913 19.1941 147.477 Q21.0228 151.019 24.6339 151.019 Q28.2681 151.019 30.0737 147.477 Q31.9024 143.913 31.9024 136.806 Q31.9024 129.677 30.0737 126.135 Q28.2681 122.57 24.6339 122.57 M24.6339 118.866 Q30.4441 118.866 33.4996 123.473 Q36.5783 128.056 36.5783 136.806 Q36.5783 145.533 33.4996 150.139 Q30.4441 154.723 24.6339 154.723 Q18.8237 154.723 15.7451 150.139 Q12.6895 145.533 12.6895 136.806 Q12.6895 128.056 15.7451 123.473 Q18.8237 118.866 24.6339 118.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M54.7958 122.57 Q51.1847 122.57 49.356 126.135 Q47.5504 129.677 47.5504 136.806 Q47.5504 143.913 49.356 147.477 Q51.1847 151.019 54.7958 151.019 Q58.43 151.019 60.2356 147.477 Q62.0643 143.913 62.0643 136.806 Q62.0643 129.677 60.2356 126.135 Q58.43 122.57 54.7958 122.57 M54.7958 118.866 Q60.6059 118.866 63.6615 123.473 Q66.7402 128.056 66.7402 136.806 Q66.7402 145.533 63.6615 150.139 Q60.6059 154.723 54.7958 154.723 Q48.9856 154.723 45.9069 150.139 Q42.8514 145.533 42.8514 136.806 Q42.8514 128.056 45.9069 123.473 Q48.9856 118.866 54.7958 118.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-117.323 825.841 L-95.8069 825.841 L-95.8069 831.697 L-117.132 831.697 Q-122.193 831.697 -124.707 833.671 Q-127.222 835.644 -127.222 839.591 Q-127.222 844.333 -124.198 847.07 Q-121.174 849.808 -115.954 849.808 L-95.8069 849.808 L-95.8069 855.696 L-131.455 855.696 L-131.455 849.808 L-125.917 849.808 Q-129.131 847.707 -130.723 844.874 Q-132.314 842.01 -132.314 838.286 Q-132.314 832.143 -128.495 828.992 Q-124.707 825.841 -117.323 825.841 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-127.349 800.346 Q-127.349 805.057 -123.657 807.794 Q-119.997 810.531 -113.599 810.531 Q-107.202 810.531 -103.509 807.826 Q-99.8491 805.089 -99.8491 800.346 Q-99.8491 795.667 -103.541 792.93 Q-107.233 790.193 -113.599 790.193 Q-119.933 790.193 -123.625 792.93 Q-127.349 795.667 -127.349 800.346 M-132.314 800.346 Q-132.314 792.707 -127.349 788.347 Q-122.384 783.986 -113.599 783.986 Q-104.846 783.986 -99.8491 788.347 Q-94.8839 792.707 -94.8839 800.346 Q-94.8839 808.017 -99.8491 812.377 Q-104.846 816.706 -113.599 816.706 Q-122.384 816.706 -127.349 812.377 Q-132.314 808.017 -132.314 800.346 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-125.98 753.622 Q-126.553 754.609 -126.808 755.786 Q-127.094 756.932 -127.094 758.333 Q-127.094 763.298 -123.848 765.971 Q-120.633 768.613 -114.586 768.613 L-95.8069 768.613 L-95.8069 774.501 L-131.455 774.501 L-131.455 768.613 L-125.917 768.613 Q-129.163 766.767 -130.723 763.807 Q-132.314 760.847 -132.314 756.614 Q-132.314 756.009 -132.219 755.277 Q-132.155 754.545 -131.996 753.654 L-125.98 753.622 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M-124.612 720.87 Q-128.558 718.674 -130.436 715.619 Q-132.314 712.563 -132.314 708.425 Q-132.314 702.855 -128.399 699.832 Q-124.516 696.808 -117.323 696.808 L-95.8069 696.808 L-95.8069 702.696 L-117.132 702.696 Q-122.256 702.696 -124.739 704.51 Q-127.222 706.325 -127.222 710.049 Q-127.222 714.6 -124.198 717.242 Q-121.174 719.884 -115.954 719.884 L-95.8069 719.884 L-95.8069 725.772 L-117.132 725.772 Q-122.288 725.772 -124.739 727.586 Q-127.222 729.4 -127.222 733.188 Q-127.222 737.676 -124.166 740.318 Q-121.142 742.959 -115.954 742.959 L-95.8069 742.959 L-95.8069 748.848 L-131.455 748.848 L-131.455 742.959 L-125.917 742.959 Q-129.195 740.954 -130.755 738.153 Q-132.314 735.352 -132.314 731.501 Q-132.314 727.618 -130.341 724.913 Q-128.367 722.175 -124.612 720.87 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip992)\" style=\"stroke:#ff0000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-2147.28,136.771 4602.77,136.771 \"/>\n<polyline clip-path=\"url(#clip992)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1464 167.128,1464 167.835,1464 168.543,1461.31 169.251,1461.31 169.959,1461.31 170.667,1459.97 171.374,1458.63 172.082,1458.63 172.79,1457.29 173.498,1457.29 174.206,1457.29 174.913,1457.29 175.621,1454.61 176.329,1453.27 177.037,1451.93 177.744,1450.59 178.452,1449.25 179.16,1447.91 179.868,1443.89 180.576,1442.55 181.283,1441.2 181.991,1439.86 182.699,1437.18 183.407,1434.5 184.115,1430.48 184.822,1427.8 185.53,1425.12 186.238,1422.44 186.946,1418.41 187.653,1413.05 188.361,1407.69 189.069,1405.01 189.777,1398.3 190.485,1392.94 191.192,1388.92 191.9,1383.56 192.608,1374.17 193.316,1364.79 194.024,1358.09 194.731,1351.38 195.439,1337.98 196.147,1329.93 196.855,1321.89 197.563,1308.48 198.27,1296.42 198.978,1285.69 199.686,1277.65 200.394,1268.26 201.101,1256.2 201.809,1244.13 202.517,1228.04 203.225,1213.3 203.933,1198.55 204.64,1177.1 205.348,1165.03 206.056,1154.31 206.764,1134.2 207.472,1118.11 208.179,1100.68 208.887,1088.62 209.595,1072.53 210.303,1053.76 211.01,1043.04 211.718,1033.65 212.426,1022.93 213.134,1014.88 213.842,1006.84 214.549,992.093 215.257,977.346 215.965,962.6 216.673,945.171 217.381,929.084 218.088,915.678 218.796,903.612 219.504,891.546 220.212,879.48 220.92,870.096 221.627,852.668 222.335,839.262 223.043,829.877 223.751,804.405 224.458,790.999 225.166,782.955 225.874,778.933 226.582,760.164 227.29,749.439 227.997,737.374 228.705,721.286 229.413,705.199 230.121,685.089 230.829,673.023 231.536,667.661 232.244,652.914 232.952,642.189 233.66,627.442 234.368,614.036 235.075,601.97 235.783,585.882 236.491,577.839 237.199,564.432 237.906,557.729 238.614,552.367 239.322,542.982 240.03,537.62 240.738,530.917 241.445,524.213 242.153,509.467 242.861,498.742 243.569,501.423 244.277,497.401 244.984,482.654 245.692,478.632 246.4,465.226 247.108,451.819 247.815,438.413 248.523,433.051 249.231,423.666 249.939,419.644 250.647,400.876 251.354,394.172 252.062,388.81 252.77,372.722 253.478,371.382 254.186,371.382 254.893,363.338 255.601,353.953 256.309,353.953 257.017,343.228 257.725,339.207 258.432,339.207 259.14,337.866 259.848,332.503 260.556,329.822 261.263,324.46 261.971,329.822 262.679,328.481 263.387,320.438 264.095,317.756 264.802,308.372 265.51,297.647 266.218,293.625 266.926,286.922 267.634,280.219 268.341,280.219 269.049,286.922 269.757,281.559 270.465,285.581 271.172,282.9 271.88,282.9 272.588,273.516 273.296,265.472 274.004,266.813 274.711,260.109 275.419,258.769 276.127,260.109 276.835,257.428 277.543,240 278.25,233.297 278.958,240 279.666,244.022 280.374,240 281.082,234.637 281.789,227.934 282.497,227.934 283.205,233.297 283.913,222.572 284.62,218.55 285.328,214.528 286.036,207.825 286.744,209.165 287.452,206.484 288.159,201.122 288.867,189.056 289.575,190.397 290.283,190.397 290.991,191.737 291.698,195.759 292.406,197.1 293.114,189.056 293.822,178.331 294.529,178.331 295.237,178.331 295.945,171.628 296.653,187.715 297.361,182.353 298.068,182.353 298.776,178.331 299.484,171.628 300.192,172.968 300.9,175.65 301.607,181.012 302.315,179.672 303.023,179.672 303.731,175.65 304.439,175.65 305.146,182.353 305.854,174.309 306.562,181.012 307.27,174.309 307.977,174.309 308.685,162.243 309.393,159.562 310.101,150.178 310.809,150.178 311.516,164.925 312.224,178.331 312.932,175.65 313.64,167.606 314.348,160.903 315.055,162.243 315.763,152.859 316.471,150.178 317.179,148.837 317.886,152.859 318.594,150.178 319.302,146.156 320.01,136.771 320.718,130.068 321.425,131.409 322.133,122.024 322.841,128.728 323.549,124.706 324.257,123.365 324.964,139.453 325.672,147.496 326.38,150.178 327.088,142.134 327.796,146.156 328.503,131.409 329.211,119.343 329.919,131.409 330.627,128.728 331.334,124.706 332.042,123.365 332.75,126.046 333.458,128.728 334.166,123.365 334.873,140.793 335.581,142.134 336.289,136.771 336.997,140.793 337.705,138.112 338.412,159.562 339.12,158.221 339.828,166.265 340.536,162.243 341.243,163.584 341.951,163.584 342.659,172.968 343.367,179.672 344.075,175.65 344.782,158.221 345.49,176.99 346.198,174.309 346.906,176.99 347.614,167.606 348.321,166.265 349.029,168.947 349.737,162.243 350.445,163.584 351.153,167.606 351.86,163.584 352.568,160.903 353.276,163.584 353.984,166.265 354.691,166.265 355.399,175.65 356.107,176.99 356.815,168.947 357.523,160.903 358.23,158.221 358.938,160.903 359.646,151.518 360.354,156.881 361.062,162.243 361.769,148.837 362.477,158.221 363.185,155.54 363.893,163.584 364.601,170.287 365.308,160.903 366.016,160.903 366.724,164.925 367.432,162.243 368.139,167.606 368.847,162.243 369.555,151.518 370.263,152.859 370.971,162.243 371.678,156.881 372.386,152.859 373.094,167.606 373.802,156.881 374.51,154.2 375.217,159.562 375.925,154.2 376.633,156.881 377.341,158.221 378.048,151.518 378.756,154.2 379.464,147.496 380.172,138.112 380.88,132.749 381.587,131.409 382.295,123.365 383.003,115.321 383.711,113.981 384.419,116.662 385.126,126.046 385.834,128.728 386.542,135.431 387.25,147.496 387.958,166.265 388.665,174.309 389.373,174.309 390.081,168.947 390.789,166.265 391.496,156.881 392.204,171.628 392.912,178.331 393.62,168.947 394.328,167.606 395.035,171.628 395.743,170.287 396.451,176.99 397.159,171.628 397.867,163.584 398.574,166.265 399.282,174.309 399.99,167.606 400.698,163.584 401.405,162.243 402.113,154.2 402.821,156.881 403.529,147.496 404.237,142.134 404.944,155.54 405.652,146.156 406.36,143.475 407.068,140.793 407.776,140.793 408.483,127.387 409.191,131.409 409.899,138.112 410.607,128.728 411.315,134.09 412.022,127.387 412.73,134.09 413.438,144.815 414.146,143.475 414.853,146.156 415.561,155.54 416.269,158.221 416.977,158.221 417.685,158.221 418.392,152.859 419.1,146.156 419.808,142.134 420.516,140.793 421.224,154.2 421.931,155.54 422.639,152.859 423.347,142.134 424.055,152.859 424.762,154.2 425.47,156.881 426.178,152.859 426.886,151.518 427.594,146.156 428.301,134.09 429.009,135.431 429.717,135.431 430.425,135.431 431.133,143.475 431.84,150.178 432.548,146.156 433.256,140.793 433.964,134.09 434.672,139.453 435.379,152.859 436.087,154.2 436.795,152.859 437.503,156.881 438.21,158.221 438.918,158.221 439.626,162.243 440.334,170.287 441.042,167.606 441.749,170.287 442.457,167.606 443.165,179.672 443.873,178.331 444.581,167.606 445.288,171.628 445.996,178.331 446.704,178.331 447.412,178.331 448.119,171.628 448.827,167.606 449.535,170.287 450.243,160.903 450.951,160.903 451.658,160.903 452.366,152.859 453.074,152.859 453.782,140.793 454.49,146.156 455.197,142.134 455.905,143.475 456.613,148.837 457.321,138.112 458.029,134.09 458.736,123.365 459.444,126.046 460.152,134.09 460.86,142.134 461.567,127.387 462.275,126.046 462.983,124.706 463.691,128.728 464.399,124.706 465.106,116.662 465.814,119.343 466.522,124.706 467.23,118.003 467.938,112.64 468.645,109.959 469.353,113.981 470.061,109.959 470.769,119.343 471.476,119.343 472.184,128.728 472.892,147.496 473.6,156.881 474.308,154.2 475.015,156.881 475.723,158.221 476.431,155.54 477.139,162.243 477.847,155.54 478.554,150.178 479.262,158.221 479.97,170.287 480.678,166.265 481.386,156.881 482.093,151.518 482.801,156.881 483.509,139.453 484.217,142.134 484.924,124.706 485.632,120.684 486.34,116.662 487.048,113.981 487.756,115.321 488.463,116.662 489.171,109.959 489.879,111.299 490.587,109.959 491.295,107.278 492.002,116.662 492.71,134.09 493.418,130.068 494.126,123.365 494.834,120.684 495.541,132.749 496.249,138.112 496.957,132.749 497.665,132.749 498.372,131.409 499.08,134.09 499.788,136.771 500.496,132.749 501.204,136.771 501.911,142.134 502.619,142.134 503.327,142.134 504.035,135.431 504.743,123.365 505.45,124.706 506.158,124.706 506.866,118.003 507.574,118.003 508.281,115.321 508.989,109.959 509.697,105.937 510.405,112.64 511.113,126.046 511.82,118.003 512.528,113.981 513.236,113.981 513.944,116.662 514.652,119.343 515.359,108.618 516.067,97.8931 516.775,100.574 517.483,113.981 518.191,131.409 518.898,142.134 519.606,142.134 520.314,140.793 521.022,135.431 521.729,142.134 522.437,151.518 523.145,151.518 523.853,143.475 524.561,139.453 525.268,131.409 525.976,136.771 526.684,134.09 527.392,134.09 528.1,131.409 528.807,135.431 529.515,128.728 530.223,126.046 530.931,127.387 531.638,135.431 532.346,139.453 533.054,130.068 533.762,136.771 534.47,140.793 535.177,144.815 535.885,156.881 536.593,166.265 537.301,166.265 538.009,158.221 538.716,147.496 539.424,150.178 540.132,151.518 540.84,155.54 541.548,147.496 542.255,154.2 542.963,142.134 543.671,134.09 544.379,136.771 545.086,135.431 545.794,134.09 546.502,118.003 547.21,120.684 547.918,111.299 548.625,105.937 549.333,93.8712 550.041,96.5525 550.749,107.278 551.457,118.003 552.164,116.662 552.872,100.574 553.58,119.343 554.288,120.684 554.995,124.706 555.703,116.662 556.411,123.365 557.119,126.046 557.827,132.749 558.534,136.771 559.242,146.156 559.95,140.793 560.658,139.453 561.366,138.112 562.073,143.475 562.781,151.518 563.489,147.496 564.197,156.881 564.905,160.903 565.612,160.903 566.32,143.475 567.028,146.156 567.736,147.496 568.443,151.518 569.151,146.156 569.859,144.815 570.567,142.134 571.275,148.837 571.982,150.178 572.69,144.815 573.398,152.859 574.106,154.2 574.814,152.859 575.521,156.881 576.229,148.837 576.937,147.496 577.645,139.453 578.352,135.431 579.06,142.134 579.768,135.431 580.476,151.518 581.184,140.793 581.891,132.749 582.599,134.09 583.307,132.749 584.015,134.09 584.723,143.475 585.43,150.178 586.138,147.496 586.846,142.134 587.554,151.518 588.262,142.134 588.969,118.003 589.677,116.662 590.385,128.728 591.093,131.409 591.8,128.728 592.508,128.728 593.216,135.431 593.924,128.728 594.632,128.728 595.339,127.387 596.047,131.409 596.755,140.793 597.463,152.859 598.171,140.793 598.878,136.771 599.586,143.475 600.294,140.793 601.002,155.54 601.71,150.178 602.417,147.496 603.125,152.859 603.833,156.881 604.541,155.54 605.248,148.837 605.956,151.518 606.664,143.475 607.372,135.431 608.08,127.387 608.787,124.706 609.495,128.728 610.203,139.453 610.911,142.134 611.619,144.815 612.326,134.09 613.034,148.837 613.742,150.178 614.45,155.54 615.157,148.837 615.865,159.562 616.573,158.221 617.281,152.859 617.989,142.134 618.696,148.837 619.404,144.815 620.112,152.859 620.82,151.518 621.528,142.134 622.235,147.496 622.943,134.09 623.651,135.431 624.359,140.793 625.067,134.09 625.774,139.453 626.482,134.09 627.19,131.409 627.898,130.068 628.605,118.003 629.313,115.321 630.021,122.024 630.729,126.046 631.437,128.728 632.144,139.453 632.852,139.453 633.56,143.475 634.268,154.2 634.976,155.54 635.683,162.243 636.391,162.243 637.099,158.221 637.807,151.518 638.514,154.2 639.222,144.815 639.93,154.2 640.638,158.221 641.346,146.156 642.053,134.09 642.761,138.112 643.469,128.728 644.177,134.09 644.885,140.793 645.592,143.475 646.3,158.221 647.008,152.859 647.716,147.496 648.424,135.431 649.131,128.728 649.839,134.09 650.547,135.431 651.255,135.431 651.962,131.409 652.67,138.112 653.378,140.793 654.086,136.771 654.794,143.475 655.501,147.496 656.209,139.453 656.917,132.749 657.625,132.749 658.333,128.728 659.04,127.387 659.748,122.024 660.456,115.321 661.164,122.024 661.871,127.387 662.579,123.365 663.287,122.024 663.995,122.024 664.703,118.003 665.41,118.003 666.118,126.046 666.826,122.024 667.534,127.387 668.242,120.684 668.949,115.321 669.657,128.728 670.365,130.068 671.073,123.365 671.781,123.365 672.488,123.365 673.196,118.003 673.904,124.706 674.612,128.728 675.319,138.112 676.027,136.771 676.735,134.09 677.443,132.749 678.151,127.387 678.858,134.09 679.566,123.365 680.274,130.068 680.982,147.496 681.69,138.112 682.397,136.771 683.105,143.475 683.813,147.496 684.521,155.54 685.228,150.178 685.936,142.134 686.644,147.496 687.352,144.815 688.06,152.859 688.767,140.793 689.475,140.793 690.183,138.112 690.891,134.09 691.599,132.749 692.306,135.431 693.014,134.09 693.722,132.749 694.43,143.475 695.138,135.431 695.845,134.09 696.553,139.453 697.261,136.771 697.969,135.431 698.676,134.09 699.384,127.387 700.092,131.409 700.8,135.431 701.508,130.068 702.215,128.728 702.923,123.365 703.631,122.024 704.339,128.728 705.047,132.749 705.754,138.112 706.462,128.728 707.17,135.431 707.878,127.387 708.585,132.749 709.293,124.706 710.001,124.706 710.709,118.003 711.417,115.321 712.124,124.706 712.832,124.706 713.54,123.365 714.248,139.453 714.956,140.793 715.663,138.112 716.371,151.518 717.079,158.221 717.787,167.606 718.495,164.925 719.202,159.562 719.91,154.2 720.618,154.2 721.326,148.837 722.033,148.837 722.741,138.112 723.449,124.706 724.157,136.771 724.865,131.409 725.572,134.09 726.28,130.068 726.988,127.387 727.696,130.068 728.404,128.728 729.111,127.387 729.819,136.771 730.527,140.793 731.235,132.749 731.943,140.793 732.65,139.453 733.358,139.453 734.066,146.156 734.774,144.815 735.481,150.178 736.189,155.54 736.897,155.54 737.605,160.903 738.313,159.562 739.02,155.54 739.728,155.54 740.436,162.243 741.144,150.178 741.852,139.453 742.559,127.387 743.267,123.365 743.975,134.09 744.683,132.749 745.39,131.409 746.098,120.684 746.806,127.387 747.514,135.431 748.222,124.706 748.929,132.749 749.637,136.771 750.345,126.046 751.053,123.365 751.761,128.728 752.468,140.793 753.176,139.453 753.884,135.431 754.592,128.728 755.3,124.706 756.007,124.706 756.715,116.662 757.423,113.981 758.131,116.662 758.838,128.728 759.546,130.068 760.254,134.09 760.962,130.068 761.67,135.431 762.377,139.453 763.085,131.409 763.793,132.749 764.501,131.409 765.209,134.09 765.916,136.771 766.624,134.09 767.332,136.771 768.04,139.453 768.747,144.815 769.455,146.156 770.163,142.134 770.871,136.771 771.579,131.409 772.286,136.771 772.994,134.09 773.702,140.793 774.41,138.112 775.118,139.453 775.825,136.771 776.533,135.431 777.241,139.453 777.949,140.793 778.657,144.815 779.364,138.112 780.072,143.475 780.78,144.815 781.488,138.112 782.195,143.475 782.903,144.815 783.611,142.134 784.319,146.156 785.027,147.496 785.734,143.475 786.442,152.859 787.15,158.221 787.858,159.562 788.566,168.947 789.273,160.903 789.981,163.584 790.689,168.947 791.397,168.947 792.104,151.518 792.812,160.903 793.52,171.628 794.228,171.628 794.936,162.243 795.643,146.156 796.351,152.859 797.059,166.265 797.767,170.287 798.475,164.925 799.182,160.903 799.89,166.265 800.598,163.584 801.306,154.2 802.014,154.2 802.721,147.496 803.429,158.221 804.137,148.837 804.845,154.2 805.552,152.859 806.26,155.54 806.968,150.178 807.676,152.859 808.384,151.518 809.091,148.837 809.799,151.518 810.507,159.562 811.215,168.947 811.923,171.628 812.63,159.562 813.338,151.518 814.046,144.815 814.754,130.068 815.461,128.728 816.169,126.046 816.877,126.046 817.585,131.409 818.293,135.431 819,144.815 819.708,132.749 820.416,147.496 821.124,140.793 821.832,139.453 822.539,135.431 823.247,140.793 823.955,139.453 824.663,142.134 825.371,138.112 826.078,139.453 826.786,136.771 827.494,140.793 828.202,143.475 828.909,135.431 829.617,140.793 830.325,138.112 831.033,150.178 831.741,138.112 832.448,150.178 833.156,142.134 833.864,143.475 834.572,154.2 835.28,156.881 835.987,147.496 836.695,139.453 837.403,126.046 838.111,135.431 838.818,126.046 839.526,140.793 840.234,148.837 840.942,131.409 841.65,132.749 842.357,142.134 843.065,156.881 843.773,148.837 844.481,152.859 845.189,156.881 845.896,166.265 846.604,156.881 847.312,164.925 848.02,167.606 848.728,163.584 849.435,159.562 850.143,154.2 850.851,156.881 851.559,154.2 852.266,151.518 852.974,155.54 853.682,152.859 854.39,148.837 855.098,146.156 855.805,139.453 856.513,148.837 857.221,144.815 857.929,146.156 858.637,146.156 859.344,152.859 860.052,156.881 860.76,163.584 861.468,159.562 862.176,139.453 862.883,138.112 863.591,143.475 864.299,143.475 865.007,142.134 865.714,139.453 866.422,126.046 867.13,134.09 867.838,120.684 868.546,122.024 869.253,126.046 869.961,119.343 870.669,123.365 871.377,115.321 872.085,124.706 872.792,122.024 873.5,135.431 874.208,150.178 874.916,155.54 875.623,152.859 876.331,144.815 877.039,139.453 877.747,127.387 878.455,120.684 879.162,111.299 879.87,115.321 880.578,113.981 881.286,126.046 881.994,124.706 882.701,123.365 883.409,122.024 884.117,122.024 884.825,118.003 885.533,130.068 886.24,123.365 886.948,107.278 887.656,111.299 888.364,118.003 889.071,101.915 889.779,105.937 890.487,109.959 891.195,112.64 891.903,101.915 892.61,104.596 893.318,100.574 894.026,108.618 894.734,101.915 895.442,95.2118 896.149,104.596 896.857,100.574 897.565,108.618 898.273,115.321 898.98,131.409 899.688,130.068 900.396,138.112 901.104,131.409 901.812,127.387 902.519,127.387 903.227,128.728 903.935,128.728 904.643,126.046 905.351,119.343 906.058,115.321 906.766,130.068 907.474,128.728 908.182,123.365 908.89,130.068 909.597,127.387 910.305,131.409 911.013,135.431 911.721,139.453 912.428,143.475 913.136,148.837 913.844,151.518 914.552,151.518 915.26,150.178 915.967,147.496 916.675,139.453 917.383,140.793 918.091,138.112 918.799,131.409 919.506,136.771 920.214,130.068 920.922,119.343 921.63,120.684 922.337,124.706 923.045,128.728 923.753,124.706 924.461,138.112 925.169,146.156 925.876,147.496 926.584,147.496 927.292,150.178 928,148.837 928.708,139.453 929.415,130.068 930.123,122.024 930.831,116.662 931.539,123.365 932.247,123.365 932.954,119.343 933.662,131.409 934.37,131.409 935.078,139.453 935.785,140.793 936.493,138.112 937.201,142.134 937.909,131.409 938.617,130.068 939.324,136.771 940.032,132.749 940.74,136.771 941.448,147.496 942.156,146.156 942.863,146.156 943.571,146.156 944.279,148.837 944.987,155.54 945.694,150.178 946.402,144.815 947.11,155.54 947.818,148.837 948.526,146.156 949.233,150.178 949.941,151.518 950.649,151.518 951.357,140.793 952.065,150.178 952.772,148.837 953.48,164.925 954.188,160.903 954.896,159.562 955.604,159.562 956.311,156.881 957.019,160.903 957.727,159.562 958.435,162.243 959.142,154.2 959.85,146.156 960.558,144.815 961.266,150.178 961.974,154.2 962.681,147.496 963.389,143.475 964.097,144.815 964.805,131.409 965.513,118.003 966.22,120.684 966.928,116.662 967.636,108.618 968.344,111.299 969.051,122.024 969.759,131.409 970.467,132.749 971.175,126.046 971.883,136.771 972.59,123.365 973.298,116.662 974.006,126.046 974.714,139.453 975.422,143.475 976.129,135.431 976.837,143.475 977.545,143.475 978.253,136.771 978.961,142.134 979.668,147.496 980.376,150.178 981.084,148.837 981.792,144.815 982.499,146.156 983.207,158.221 983.915,156.881 984.623,159.562 985.331,163.584 986.038,156.881 986.746,162.243 987.454,163.584 988.162,159.562 988.87,150.178 989.577,151.518 990.285,150.178 990.993,140.793 991.701,142.134 992.409,148.837 993.116,148.837 993.824,147.496 994.532,140.793 995.24,139.453 995.947,144.815 996.655,139.453 997.363,140.793 998.071,136.771 998.779,130.068 999.486,130.068 1000.19,138.112 1000.9,134.09 1001.61,130.068 1002.32,119.343 1003.03,122.024 1003.73,127.387 1004.44,135.431 1005.15,143.475 1005.86,147.496 1006.56,152.859 1007.27,155.54 1007.98,147.496 1008.69,139.453 1009.4,138.112 1010.1,127.387 1010.81,131.409 1011.52,131.409 1012.23,131.409 1012.93,136.771 1013.64,139.453 1014.35,142.134 1015.06,134.09 1015.77,138.112 1016.47,127.387 1017.18,131.409 1017.89,130.068 1018.6,126.046 1019.3,127.387 1020.01,126.046 1020.72,126.046 1021.43,116.662 1022.14,107.278 1022.84,115.321 1023.55,119.343 1024.26,115.321 1024.97,124.706 1025.67,143.475 1026.38,140.793 1027.09,144.815 1027.8,148.837 1028.51,142.134 1029.21,134.09 1029.92,124.706 1030.63,119.343 1031.34,116.662 1032.04,112.64 1032.75,119.343 1033.46,130.068 1034.17,134.09 1034.88,135.431 1035.58,134.09 1036.29,123.365 1037,122.024 1037.71,126.046 1038.41,135.431 1039.12,138.112 1039.83,138.112 1040.54,134.09 1041.25,119.343 1041.95,120.684 1042.66,108.618 1043.37,109.959 1044.08,113.981 1044.78,107.278 1045.49,107.278 1046.2,91.19 1046.91,101.915 1047.62,105.937 1048.32,99.2337 1049.03,108.618 1049.74,120.684 1050.45,109.959 1051.15,111.299 1051.86,119.343 1052.57,122.024 1053.28,120.684 1053.99,118.003 1054.69,132.749 1055.4,146.156 1056.11,138.112 1056.82,143.475 1057.53,147.496 1058.23,148.837 1058.94,132.749 1059.65,128.728 1060.36,138.112 1061.06,147.496 1061.77,152.859 1062.48,139.453 1063.19,120.684 1063.9,123.365 1064.6,130.068 1065.31,124.706 1066.02,130.068 1066.73,123.365 1067.43,116.662 1068.14,132.749 1068.85,135.431 1069.56,146.156 1070.27,146.156 1070.97,148.837 1071.68,144.815 1072.39,147.496 1073.1,139.453 1073.8,138.112 1074.51,138.112 1075.22,138.112 1075.93,126.046 1076.64,131.409 1077.34,140.793 1078.05,144.815 1078.76,160.903 1079.47,163.584 1080.17,156.881 1080.88,154.2 1081.59,158.221 1082.3,159.562 1083.01,151.518 1083.71,143.475 1084.42,151.518 1085.13,151.518 1085.84,152.859 1086.54,147.496 1087.25,138.112 1087.96,136.771 1088.67,131.409 1089.38,136.771 1090.08,139.453 1090.79,135.431 1091.5,132.749 1092.21,131.409 1092.91,128.728 1093.62,130.068 1094.33,128.728 1095.04,140.793 1095.75,140.793 1096.45,139.453 1097.16,144.815 1097.87,146.156 1098.58,135.431 1099.28,138.112 1099.99,131.409 1100.7,148.837 1101.41,146.156 1102.12,135.431 1102.82,134.09 1103.53,128.728 1104.24,135.431 1104.95,138.112 1105.65,134.09 1106.36,140.793 1107.07,143.475 1107.78,144.815 1108.49,136.771 1109.19,142.134 1109.9,134.09 1110.61,135.431 1111.32,118.003 1112.02,126.046 1112.73,128.728 1113.44,130.068 1114.15,128.728 1114.86,128.728 1115.56,128.728 1116.27,135.431 1116.98,130.068 1117.69,132.749 1118.39,130.068 1119.1,134.09 1119.81,139.453 1120.52,146.156 1121.23,135.431 1121.93,136.771 1122.64,142.134 1123.35,147.496 1124.06,142.134 1124.76,143.475 1125.47,144.815 1126.18,134.09 1126.89,128.728 1127.6,118.003 1128.3,127.387 1129.01,135.431 1129.72,155.54 1130.43,155.54 1131.13,144.815 1131.84,146.156 1132.55,139.453 1133.26,131.409 1133.97,138.112 1134.67,126.046 1135.38,124.706 1136.09,111.299 1136.8,108.618 1137.51,108.618 1138.21,109.959 1138.92,120.684 1139.63,127.387 1140.34,126.046 1141.04,128.728 1141.75,139.453 1142.46,135.431 1143.17,144.815 1143.88,139.453 1144.58,143.475 1145.29,140.793 1146,134.09 1146.71,136.771 1147.41,136.771 1148.12,132.749 1148.83,138.112 1149.54,151.518 1150.25,160.903 1150.95,152.859 1151.66,148.837 1152.37,159.562 1153.08,163.584 1153.78,156.881 1154.49,168.947 1155.2,164.925 1155.91,167.606 1156.62,166.265 1157.32,171.628 1158.03,158.221 1158.74,159.562 1159.45,158.221 1160.15,154.2 1160.86,158.221 1161.57,163.584 1162.28,168.947 1162.99,159.562 1163.69,147.496 1164.4,152.859 1165.11,144.815 1165.82,150.178 1166.52,154.2 1167.23,148.837 1167.94,148.837 1168.65,143.475 1169.36,147.496 1170.06,142.134 1170.77,126.046 1171.48,122.024 1172.19,115.321 1172.89,120.684 1173.6,128.728 1174.31,128.728 1175.02,138.112 1175.73,143.475 1176.43,146.156 1177.14,143.475 1177.85,142.134 1178.56,142.134 1179.26,131.409 1179.97,131.409 1180.68,131.409 1181.39,119.343 1182.1,115.321 1182.8,116.662 1183.51,103.256 1184.22,96.5525 1184.93,97.8931 1185.63,101.915 1186.34,88.5087 1187.05,104.596 1187.76,112.64 1188.47,111.299 1189.17,113.981 1189.88,123.365 1190.59,131.409 1191.3,126.046 1192,130.068 1192.71,124.706 1193.42,122.024 1194.13,118.003 1194.84,126.046 1195.54,135.431 1196.25,131.409 1196.96,126.046 1197.67,128.728 1198.37,136.771 1199.08,139.453 1199.79,146.156 1200.5,142.134 1201.21,150.178 1201.91,156.881 1202.62,147.496 1203.33,138.112 1204.04,136.771 1204.74,136.771 1205.45,147.496 1206.16,148.837 1206.87,142.134 1207.58,138.112 1208.28,134.09 1208.99,126.046 1209.7,113.981 1210.41,115.321 1211.12,126.046 1211.82,148.837 1212.53,150.178 1213.24,146.156 1213.95,158.221 1214.65,166.265 1215.36,158.221 1216.07,158.221 1216.78,139.453 1217.49,138.112 1218.19,147.496 1218.9,152.859 1219.61,151.518 1220.32,140.793 1221.02,150.178 1221.73,148.837 1222.44,152.859 1223.15,143.475 1223.86,143.475 1224.56,126.046 1225.27,107.278 1225.98,118.003 1226.69,126.046 1227.39,134.09 1228.1,132.749 1228.81,130.068 1229.52,136.771 1230.23,140.793 1230.93,132.749 1231.64,130.068 1232.35,119.343 1233.06,109.959 1233.76,118.003 1234.47,113.981 1235.18,115.321 1235.89,116.662 1236.6,111.299 1237.3,112.64 1238.01,104.596 1238.72,115.321 1239.43,119.343 1240.13,131.409 1240.84,136.771 1241.55,146.156 1242.26,147.496 1242.97,140.793 1243.67,150.178 1244.38,155.54 1245.09,162.243 1245.8,160.903 1246.5,170.287 1247.21,170.287 1247.92,160.903 1248.63,154.2 1249.34,160.903 1250.04,147.496 1250.75,143.475 1251.46,124.706 1252.17,127.387 1252.87,128.728 1253.58,134.09 1254.29,134.09 1255,128.728 1255.71,120.684 1256.41,128.728 1257.12,134.09 1257.83,132.749 1258.54,128.728 1259.24,124.706 1259.95,127.387 1260.66,138.112 1261.37,131.409 1262.08,139.453 1262.78,131.409 1263.49,140.793 1264.2,150.178 1264.91,147.496 1265.61,147.496 1266.32,148.837 1267.03,148.837 1267.74,151.518 1268.45,148.837 1269.15,150.178 1269.86,151.518 1270.57,154.2 1271.28,146.156 1271.98,138.112 1272.69,142.134 1273.4,140.793 1274.11,139.453 1274.82,134.09 1275.52,128.728 1276.23,123.365 1276.94,115.321 1277.65,126.046 1278.35,136.771 1279.06,135.431 1279.77,138.112 1280.48,142.134 1281.19,144.815 1281.89,135.431 1282.6,134.09 1283.31,143.475 1284.02,136.771 1284.72,132.749 1285.43,134.09 1286.14,146.156 1286.85,146.156 1287.56,146.156 1288.26,135.431 1288.97,134.09 1289.68,127.387 1290.39,130.068 1291.1,130.068 1291.8,135.431 1292.51,142.134 1293.22,138.112 1293.93,147.496 1294.63,124.706 1295.34,120.684 1296.05,127.387 1296.76,139.453 1297.47,142.134 1298.17,142.134 1298.88,146.156 1299.59,148.837 1300.3,152.859 1301,148.837 1301.71,142.134 1302.42,134.09 1303.13,131.409 1303.84,128.728 1304.54,130.068 1305.25,124.706 1305.96,124.706 1306.67,132.749 1307.37,127.387 1308.08,124.706 1308.79,130.068 1309.5,132.749 1310.21,138.112 1310.91,146.156 1311.62,144.815 1312.33,142.134 1313.04,140.793 1313.74,132.749 1314.45,135.431 1315.16,143.475 1315.87,134.09 1316.58,143.475 1317.28,140.793 1317.99,132.749 1318.7,136.771 1319.41,140.793 1320.11,142.134 1320.82,148.837 1321.53,148.837 1322.24,150.178 1322.95,151.518 1323.65,143.475 1324.36,138.112 1325.07,128.728 1325.78,135.431 1326.48,128.728 1327.19,122.024 1327.9,124.706 1328.61,134.09 1329.32,124.706 1330.02,115.321 1330.73,115.321 1331.44,113.981 1332.15,118.003 1332.85,108.618 1333.56,111.299 1334.27,120.684 1334.98,127.387 1335.69,122.024 1336.39,113.981 1337.1,113.981 1337.81,111.299 1338.52,97.8931 1339.22,112.64 1339.93,104.596 1340.64,101.915 1341.35,108.618 1342.06,119.343 1342.76,130.068 1343.47,132.749 1344.18,123.365 1344.89,128.728 1345.59,134.09 1346.3,135.431 1347.01,144.815 1347.72,143.475 1348.43,138.112 1349.13,139.453 1349.84,139.453 1350.55,134.09 1351.26,128.728 1351.96,127.387 1352.67,123.365 1353.38,116.662 1354.09,127.387 1354.8,126.046 1355.5,122.024 1356.21,123.365 1356.92,119.343 1357.63,130.068 1358.33,134.09 1359.04,136.771 1359.75,135.431 1360.46,128.728 1361.17,130.068 1361.87,134.09 1362.58,127.387 1363.29,131.409 1364,132.749 1364.71,116.662 1365.41,115.321 1366.12,130.068 1366.83,123.365 1367.54,128.728 1368.24,132.749 1368.95,135.431 1369.66,132.749 1370.37,132.749 1371.08,132.749 1371.78,139.453 1372.49,130.068 1373.2,128.728 1373.91,126.046 1374.61,109.959 1375.32,105.937 1376.03,101.915 1376.74,105.937 1377.45,116.662 1378.15,120.684 1378.86,119.343 1379.57,118.003 1380.28,119.343 1380.98,123.365 1381.69,136.771 1382.4,134.09 1383.11,138.112 1383.82,132.749 1384.52,130.068 1385.23,122.024 1385.94,132.749 1386.65,139.453 1387.35,135.431 1388.06,132.749 1388.77,132.749 1389.48,127.387 1390.19,120.684 1390.89,128.728 1391.6,126.046 1392.31,128.728 1393.02,126.046 1393.72,124.706 1394.43,143.475 1395.14,140.793 1395.85,140.793 1396.56,135.431 1397.26,136.771 1397.97,130.068 1398.68,135.431 1399.39,150.178 1400.09,143.475 1400.8,138.112 1401.51,138.112 1402.22,148.837 1402.93,152.859 1403.63,148.837 1404.34,150.178 1405.05,147.496 1405.76,148.837 1406.46,156.881 1407.17,168.947 1407.88,171.628 1408.59,170.287 1409.3,174.309 1410,175.65 1410.71,179.672 1411.42,174.309 1412.13,176.99 1412.83,183.693 1413.54,179.672 1414.25,182.353 1414.96,175.65 1415.67,171.628 1416.37,168.947 1417.08,172.968 1417.79,174.309 1418.5,163.584 1419.2,168.947 1419.91,170.287 1420.62,179.672 1421.33,178.331 1422.04,176.99 1422.74,167.606 1423.45,160.903 1424.16,156.881 1424.87,152.859 1425.57,150.178 1426.28,142.134 1426.99,144.815 1427.7,150.178 1428.41,148.837 1429.11,144.815 1429.82,140.793 1430.53,134.09 1431.24,132.749 1431.94,126.046 1432.65,135.431 1433.36,139.453 1434.07,135.431 1434.78,138.112 1435.48,138.112 1436.19,132.749 1436.9,131.409 1437.61,128.728 1438.31,128.728 1439.02,132.749 1439.73,131.409 1440.44,140.793 1441.15,130.068 1441.85,140.793 1442.56,138.112 1443.27,143.475 1443.98,135.431 1444.69,135.431 1445.39,119.343 1446.1,118.003 1446.81,120.684 1447.52,126.046 1448.22,126.046 1448.93,132.749 1449.64,130.068 1450.35,127.387 1451.06,130.068 1451.76,136.771 1452.47,143.475 1453.18,135.431 1453.89,132.749 1454.59,130.068 1455.3,136.771 1456.01,135.431 1456.72,140.793 1457.43,138.112 1458.13,143.475 1458.84,146.156 1459.55,142.134 1460.26,140.793 1460.96,134.09 1461.67,135.431 1462.38,138.112 1463.09,140.793 1463.8,143.475 1464.5,140.793 1465.21,146.156 1465.92,148.837 1466.63,138.112 1467.33,139.453 1468.04,146.156 1468.75,135.431 1469.46,140.793 1470.17,138.112 1470.87,142.134 1471.58,136.771 1472.29,139.453 1473,143.475 1473.7,138.112 1474.41,140.793 1475.12,147.496 1475.83,154.2 1476.54,150.178 1477.24,152.859 1477.95,166.265 1478.66,162.243 1479.37,162.243 1480.07,164.925 1480.78,156.881 1481.49,160.903 1482.2,160.903 1482.91,160.903 1483.61,163.584 1484.32,163.584 1485.03,166.265 1485.74,162.243 1486.44,162.243 1487.15,158.221 1487.86,151.518 1488.57,159.562 1489.28,163.584 1489.98,160.903 1490.69,158.221 1491.4,164.925 1492.11,160.903 1492.81,152.859 1493.52,159.562 1494.23,155.54 1494.94,158.221 1495.65,150.178 1496.35,150.178 1497.06,143.475 1497.77,139.453 1498.48,147.496 1499.18,138.112 1499.89,128.728 1500.6,115.321 1501.31,113.981 1502.02,113.981 1502.72,118.003 1503.43,130.068 1504.14,132.749 1504.85,135.431 1505.55,139.453 1506.26,132.749 1506.97,123.365 1507.68,126.046 1508.39,144.815 1509.09,147.496 1509.8,154.2 1510.51,147.496 1511.22,143.475 1511.92,143.475 1512.63,144.815 1513.34,148.837 1514.05,148.837 1514.76,151.518 1515.46,150.178 1516.17,151.518 1516.88,151.518 1517.59,155.54 1518.3,143.475 1519,136.771 1519.71,143.475 1520.42,150.178 1521.13,151.518 1521.83,158.221 1522.54,160.903 1523.25,150.178 1523.96,144.815 1524.67,139.453 1525.37,143.475 1526.08,148.837 1526.79,148.837 1527.5,140.793 1528.2,152.859 1528.91,154.2 1529.62,159.562 1530.33,148.837 1531.04,139.453 1531.74,132.749 1532.45,123.365 1533.16,130.068 1533.87,138.112 1534.57,132.749 1535.28,122.024 1535.99,120.684 1536.7,118.003 1537.41,118.003 1538.11,120.684 1538.82,120.684 1539.53,115.321 1540.24,118.003 1540.94,107.278 1541.65,116.662 1542.36,123.365 1543.07,131.409 1543.78,131.409 1544.48,127.387 1545.19,128.728 1545.9,124.706 1546.61,128.728 1547.31,128.728 1548.02,130.068 1548.73,128.728 1549.44,113.981 1550.15,116.662 1550.85,122.024 1551.56,119.343 1552.27,126.046 1552.98,126.046 1553.68,127.387 1554.39,136.771 1555.1,140.793 1555.81,128.728 1556.52,123.365 1557.22,128.728 1557.93,131.409 1558.64,131.409 1559.35,135.431 1560.05,126.046 1560.76,134.09 1561.47,128.728 1562.18,126.046 1562.89,126.046 1563.59,123.365 1564.3,113.981 1565.01,123.365 1565.72,126.046 1566.42,127.387 1567.13,134.09 1567.84,139.453 1568.55,131.409 1569.26,132.749 1569.96,138.112 1570.67,118.003 1571.38,113.981 1572.09,113.981 1572.79,107.278 1573.5,107.278 1574.21,115.321 1574.92,107.278 1575.63,111.299 1576.33,109.959 1577.04,116.662 1577.75,135.431 1578.46,131.409 1579.16,127.387 1579.87,128.728 1580.58,135.431 1581.29,144.815 1582,147.496 1582.7,146.156 1583.41,138.112 1584.12,127.387 1584.83,130.068 1585.53,119.343 1586.24,128.728 1586.95,113.981 1587.66,111.299 1588.37,119.343 1589.07,128.728 1589.78,126.046 1590.49,124.706 1591.2,122.024 1591.9,116.662 1592.61,123.365 1593.32,123.365 1594.03,131.409 1594.74,126.046 1595.44,115.321 1596.15,118.003 1596.86,107.278 1597.57,124.706 1598.28,120.684 1598.98,103.256 1599.69,112.64 1600.4,105.937 1601.11,118.003 1601.81,123.365 1602.52,131.409 1603.23,131.409 1603.94,132.749 1604.65,136.771 1605.35,140.793 1606.06,136.771 1606.77,127.387 1607.48,132.749 1608.18,136.771 1608.89,130.068 1609.6,130.068 1610.31,127.387 1611.02,144.815 1611.72,143.475 1612.43,143.475 1613.14,139.453 1613.85,146.156 1614.55,151.518 1615.26,162.243 1615.97,172.968 1616.68,170.287 1617.39,163.584 1618.09,170.287 1618.8,170.287 1619.51,171.628 1620.22,168.947 1620.92,166.265 1621.63,162.243 1622.34,155.54 1623.05,163.584 1623.76,162.243 1624.46,166.265 1625.17,164.925 1625.88,168.947 1626.59,171.628 1627.29,167.606 1628,160.903 1628.71,163.584 1629.42,159.562 1630.13,152.859 1630.83,158.221 1631.54,160.903 1632.25,154.2 1632.96,142.134 1633.66,134.09 1634.37,138.112 1635.08,138.112 1635.79,135.431 1636.5,132.749 1637.2,135.431 1637.91,134.09 1638.62,139.453 1639.33,148.837 1640.03,142.134 1640.74,154.2 1641.45,158.221 1642.16,154.2 1642.87,143.475 1643.57,146.156 1644.28,150.178 1644.99,140.793 1645.7,130.068 1646.4,135.431 1647.11,134.09 1647.82,136.771 1648.53,128.728 1649.24,131.409 1649.94,127.387 1650.65,132.749 1651.36,119.343 1652.07,115.321 1652.77,126.046 1653.48,119.343 1654.19,126.046 1654.9,131.409 1655.61,130.068 1656.31,132.749 1657.02,144.815 1657.73,131.409 1658.44,135.431 1659.14,131.409 1659.85,135.431 1660.56,139.453 1661.27,139.453 1661.98,134.09 1662.68,135.431 1663.39,140.793 1664.1,144.815 1664.81,142.134 1665.51,135.431 1666.22,130.068 1666.93,136.771 1667.64,142.134 1668.35,146.156 1669.05,134.09 1669.76,148.837 1670.47,147.496 1671.18,138.112 1671.89,143.475 1672.59,150.178 1673.3,148.837 1674.01,143.475 1674.72,139.453 1675.42,146.156 1676.13,134.09 1676.84,136.771 1677.55,136.771 1678.26,135.431 1678.96,132.749 1679.67,136.771 1680.38,128.728 1681.09,120.684 1681.79,119.343 1682.5,118.003 1683.21,127.387 1683.92,127.387 1684.63,132.749 1685.33,126.046 1686.04,127.387 1686.75,123.365 1687.46,118.003 1688.16,127.387 1688.87,130.068 1689.58,127.387 1690.29,131.409 1691,116.662 1691.7,115.321 1692.41,107.278 1693.12,109.959 1693.83,105.937 1694.53,104.596 1695.24,107.278 1695.95,109.959 1696.66,122.024 1697.37,131.409 1698.07,142.134 1698.78,138.112 1699.49,147.496 1700.2,152.859 1700.9,151.518 1701.61,158.221 1702.32,155.54 1703.03,147.496 1703.74,155.54 1704.44,147.496 1705.15,142.134 1705.86,143.475 1706.57,143.475 1707.27,147.496 1707.98,139.453 1708.69,138.112 1709.4,134.09 1710.11,131.409 1710.81,136.771 1711.52,134.09 1712.23,132.749 1712.94,115.321 1713.64,113.981 1714.35,124.706 1715.06,118.003 1715.77,113.981 1716.48,111.299 1717.18,115.321 1717.89,124.706 1718.6,126.046 1719.31,119.343 1720.01,120.684 1720.72,109.959 1721.43,111.299 1722.14,105.937 1722.85,105.937 1723.55,100.574 1724.26,99.2337 1724.97,93.8712 1725.68,100.574 1726.38,109.959 1727.09,127.387 1727.8,126.046 1728.51,123.365 1729.22,124.706 1729.92,135.431 1730.63,142.134 1731.34,140.793 1732.05,134.09 1732.75,136.771 1733.46,131.409 1734.17,127.387 1734.88,120.684 1735.59,130.068 1736.29,126.046 1737,116.662 1737.71,120.684 1738.42,130.068 1739.12,134.09 1739.83,139.453 1740.54,138.112 1741.25,151.518 1741.96,158.221 1742.66,168.947 1743.37,164.925 1744.08,155.54 1744.79,158.221 1745.49,159.562 1746.2,151.518 1746.91,148.837 1747.62,150.178 1748.33,152.859 1749.03,158.221 1749.74,155.54 1750.45,159.562 1751.16,154.2 1751.87,146.156 1752.57,142.134 1753.28,147.496 1753.99,163.584 1754.7,168.947 1755.4,164.925 1756.11,175.65 1756.82,181.012 1757.53,178.331 1758.24,176.99 1758.94,174.309 1759.65,167.606 1760.36,164.925 1761.07,172.968 1761.77,166.265 1762.48,163.584 1763.19,164.925 1763.9,146.156 1764.61,143.475 1765.31,147.496 1766.02,151.518 1766.73,142.134 1767.44,116.662 1768.14,120.684 1768.85,128.728 1769.56,138.112 1770.27,152.859 1770.98,150.178 1771.68,139.453 1772.39,131.409 1773.1,130.068 1773.81,140.793 1774.51,155.54 1775.22,155.54 1775.93,150.178 1776.64,140.793 1777.35,128.728 1778.05,118.003 1778.76,127.387 1779.47,113.981 1780.18,119.343 1780.88,116.662 1781.59,113.981 1782.3,105.937 1783.01,109.959 1783.72,108.618 1784.42,103.256 1785.13,118.003 1785.84,116.662 1786.55,113.981 1787.25,113.981 1787.96,122.024 1788.67,112.64 1789.38,122.024 1790.09,112.64 1790.79,112.64 1791.5,112.64 1792.21,118.003 1792.92,123.365 1793.62,115.321 1794.33,130.068 1795.04,134.09 1795.75,124.706 1796.46,123.365 1797.16,132.749 1797.87,140.793 1798.58,130.068 1799.29,135.431 1799.99,134.09 1800.7,136.771 1801.41,132.749 1802.12,126.046 1802.83,118.003 1803.53,122.024 1804.24,128.728 1804.95,122.024 1805.66,116.662 1806.36,127.387 1807.07,136.771 1807.78,124.706 1808.49,124.706 1809.2,127.387 1809.9,131.409 1810.61,144.815 1811.32,139.453 1812.03,146.156 1812.73,144.815 1813.44,143.475 1814.15,147.496 1814.86,144.815 1815.57,152.859 1816.27,140.793 1816.98,151.518 1817.69,154.2 1818.4,155.54 1819.1,154.2 1819.81,148.837 1820.52,146.156 1821.23,143.475 1821.94,143.475 1822.64,148.837 1823.35,144.815 1824.06,155.54 1824.77,146.156 1825.48,136.771 1826.18,147.496 1826.89,147.496 1827.6,155.54 1828.31,155.54 1829.01,152.859 1829.72,148.837 1830.43,144.815 1831.14,156.881 1831.85,160.903 1832.55,154.2 1833.26,152.859 1833.97,143.475 1834.68,136.771 1835.38,140.793 1836.09,127.387 1836.8,130.068 1837.51,130.068 1838.22,136.771 1838.92,128.728 1839.63,139.453 1840.34,127.387 1841.05,113.981 1841.75,124.706 1842.46,126.046 1843.17,130.068 1843.88,132.749 1844.59,128.728 1845.29,135.431 1846,136.771 1846.71,135.431 1847.42,158.221 1848.12,143.475 1848.83,131.409 1849.54,132.749 1850.25,140.793 1850.96,151.518 1851.66,170.287 1852.37,182.353 1853.08,178.331 1853.79,168.947 1854.49,172.968 1855.2,170.287 1855.91,168.947 1856.62,156.881 1857.33,158.221 1858.03,152.859 1858.74,140.793 1859.45,132.749 1860.16,134.09 1860.86,139.453 1861.57,138.112 1862.28,146.156 1862.99,139.453 1863.7,132.749 1864.4,126.046 1865.11,128.728 1865.82,123.365 1866.53,126.046 1867.23,134.09 1867.94,130.068 1868.65,128.728 1869.36,127.387 1870.07,135.431 1870.77,124.706 1871.48,123.365 1872.19,127.387 1872.9,135.431 1873.6,134.09 1874.31,127.387 1875.02,123.365 1875.73,118.003 1876.44,132.749 1877.14,134.09 1877.85,144.815 1878.56,139.453 1879.27,130.068 1879.97,135.431 1880.68,130.068 1881.39,128.728 1882.1,131.409 1882.81,123.365 1883.51,132.749 1884.22,135.431 1884.93,131.409 1885.64,136.771 1886.34,131.409 1887.05,135.431 1887.76,136.771 1888.47,139.453 1889.18,131.409 1889.88,122.024 1890.59,134.09 1891.3,138.112 1892.01,148.837 1892.71,155.54 1893.42,163.584 1894.13,160.903 1894.84,156.881 1895.55,154.2 1896.25,152.859 1896.96,147.496 1897.67,144.815 1898.38,150.178 1899.08,144.815 1899.79,155.54 1900.5,146.156 1901.21,148.837 1901.92,155.54 1902.62,148.837 1903.33,136.771 1904.04,136.771 1904.75,135.431 1905.46,142.134 1906.16,151.518 1906.87,143.475 1907.58,135.431 1908.29,132.749 1908.99,132.749 1909.7,131.409 1910.41,143.475 1911.12,140.793 1911.83,155.54 1912.53,171.628 1913.24,172.968 1913.95,168.947 1914.66,168.947 1915.36,159.562 1916.07,150.178 1916.78,144.815 1917.49,135.431 1918.2,135.431 1918.9,135.431 1919.61,131.409 1920.32,131.409 1921.03,130.068 1921.73,134.09 1922.44,134.09 1923.15,142.134 1923.86,150.178 1924.57,152.859 1925.27,150.178 1925.98,140.793 1926.69,139.453 1927.4,132.749 1928.1,124.706 1928.81,126.046 1929.52,126.046 1930.23,122.024 1930.94,107.278 1931.64,100.574 1932.35,93.8712 1933.06,95.2118 1933.77,93.8712 1934.47,105.937 1935.18,111.299 1935.89,111.299 1936.6,108.618 1937.31,116.662 1938.01,104.596 1938.72,104.596 1939.43,99.2337 1940.14,93.8712 1940.84,101.915 1941.55,100.574 1942.26,93.8712 1942.97,97.8931 1943.68,101.915 1944.38,116.662 1945.09,109.959 1945.8,115.321 1946.51,122.024 1947.21,124.706 1947.92,132.749 1948.63,150.178 1949.34,143.475 1950.05,144.815 1950.75,139.453 1951.46,139.453 1952.17,138.112 1952.88,138.112 1953.58,136.771 1954.29,135.431 1955,126.046 1955.71,127.387 1956.42,113.981 1957.12,124.706 1957.83,131.409 1958.54,126.046 1959.25,136.771 1959.95,140.793 1960.66,146.156 1961.37,152.859 1962.08,148.837 1962.79,151.518 1963.49,147.496 1964.2,144.815 1964.91,142.134 1965.62,147.496 1966.32,155.54 1967.03,146.156 1967.74,159.562 1968.45,155.54 1969.16,158.221 1969.86,150.178 1970.57,147.496 1971.28,134.09 1971.99,134.09 1972.69,124.706 1973.4,118.003 1974.11,134.09 1974.82,131.409 1975.53,130.068 1976.23,127.387 1976.94,134.09 1977.65,132.749 1978.36,131.409 1979.07,128.728 1979.77,142.134 1980.48,139.453 1981.19,146.156 1981.9,138.112 1982.6,138.112 1983.31,135.431 1984.02,126.046 1984.73,127.387 1985.44,135.431 1986.14,127.387 1986.85,131.409 1987.56,135.431 1988.27,151.518 1988.97,139.453 1989.68,139.453 1990.39,138.112 1991.1,128.728 1991.81,135.431 1992.51,140.793 1993.22,138.112 1993.93,136.771 1994.64,139.453 1995.34,139.453 1996.05,127.387 1996.76,130.068 1997.47,127.387 1998.18,126.046 1998.88,124.706 1999.59,127.387 2000.3,123.365 2001.01,128.728 2001.71,135.431 2002.42,139.453 2003.13,135.431 2003.84,139.453 2004.55,143.475 2005.25,143.475 2005.96,134.09 2006.67,128.728 2007.38,120.684 2008.08,122.024 2008.79,130.068 2009.5,134.09 2010.21,127.387 2010.92,126.046 2011.62,126.046 2012.33,138.112 2013.04,140.793 2013.75,140.793 2014.45,139.453 2015.16,136.771 2015.87,138.112 2016.58,143.475 2017.29,140.793 2017.99,140.793 2018.7,142.134 2019.41,138.112 2020.12,136.771 2020.82,143.475 2021.53,142.134 2022.24,135.431 2022.95,132.749 2023.66,128.728 2024.36,132.749 2025.07,138.112 2025.78,139.453 2026.49,146.156 2027.19,148.837 2027.9,146.156 2028.61,138.112 2029.32,147.496 2030.03,154.2 2030.73,146.156 2031.44,143.475 2032.15,134.09 2032.86,132.749 2033.56,134.09 2034.27,130.068 2034.98,127.387 2035.69,136.771 2036.4,132.749 2037.1,139.453 2037.81,143.475 2038.52,158.221 2039.23,150.178 2039.93,156.881 2040.64,158.221 2041.35,155.54 2042.06,154.2 2042.77,147.496 2043.47,151.518 2044.18,152.859 2044.89,142.134 2045.6,142.134 2046.3,146.156 2047.01,154.2 2047.72,154.2 2048.43,172.968 2049.14,174.309 2049.84,178.331 2050.55,170.287 2051.26,164.925 2051.97,159.562 2052.68,166.265 2053.38,172.968 2054.09,172.968 2054.8,156.881 2055.51,159.562 2056.21,154.2 2056.92,154.2 2057.63,147.496 2058.34,151.518 2059.05,158.221 2059.75,172.968 2060.46,183.693 2061.17,176.99 2061.88,176.99 2062.58,168.947 2063.29,166.265 2064,178.331 2064.71,175.65 2065.42,174.309 2066.12,171.628 2066.83,171.628 2067.54,166.265 2068.25,160.903 2068.95,152.859 2069.66,144.815 2070.37,135.431 2071.08,142.134 2071.79,138.112 2072.49,144.815 2073.2,139.453 2073.91,131.409 2074.62,139.453 2075.32,150.178 2076.03,140.793 2076.74,134.09 2077.45,136.771 2078.16,128.728 2078.86,135.431 2079.57,124.706 2080.28,134.09 2080.99,138.112 2081.69,120.684 2082.4,127.387 2083.11,126.046 2083.82,116.662 2084.53,120.684 2085.23,116.662 2085.94,130.068 2086.65,122.024 2087.36,138.112 2088.06,134.09 2088.77,139.453 2089.48,144.815 2090.19,150.178 2090.9,151.518 2091.6,151.518 2092.31,148.837 2093.02,152.859 2093.73,147.496 2094.43,148.837 2095.14,150.178 2095.85,147.496 2096.56,148.837 2097.27,148.837 2097.97,147.496 2098.68,148.837 2099.39,148.837 2100.1,152.859 2100.8,147.496 2101.51,159.562 2102.22,155.54 2102.93,148.837 2103.64,146.156 2104.34,126.046 2105.05,120.684 2105.76,119.343 2106.47,123.365 2107.17,127.387 2107.88,126.046 2108.59,124.706 2109.3,134.09 2110.01,142.134 2110.71,143.475 2111.42,140.793 2112.13,136.771 2112.84,135.431 2113.54,116.662 2114.25,111.299 2114.96,119.343 2115.67,119.343 2116.38,109.959 2117.08,103.256 2117.79,92.5306 2118.5,100.574 2119.21,97.8931 2119.91,101.915 2120.62,107.278 2121.33,99.2337 2122.04,103.256 2122.75,115.321 2123.45,118.003 2124.16,122.024 2124.87,111.299 2125.58,115.321 2126.28,112.64 2126.99,120.684 2127.7,119.343 2128.41,122.024 2129.12,127.387 2129.82,124.706 2130.53,131.409 2131.24,127.387 2131.95,127.387 2132.66,124.706 2133.36,122.024 2134.07,130.068 2134.78,138.112 2135.49,132.749 2136.19,140.793 2136.9,146.156 2137.61,142.134 2138.32,136.771 2139.03,119.343 2139.73,123.365 2140.44,122.024 2141.15,123.365 2141.86,118.003 2142.56,112.64 2143.27,109.959 2143.98,122.024 2144.69,131.409 2145.4,138.112 2146.1,138.112 2146.81,142.134 2147.52,144.815 2148.23,147.496 2148.93,146.156 2149.64,152.859 2150.35,155.54 2151.06,155.54 2151.77,154.2 2152.47,148.837 2153.18,143.475 2153.89,135.431 2154.6,134.09 2155.3,131.409 2156.01,136.771 2156.72,144.815 2157.43,144.815 2158.14,146.156 2158.84,143.475 2159.55,135.431 2160.26,134.09 2160.97,135.431 2161.67,140.793 2162.38,136.771 2163.09,139.453 2163.8,134.09 2164.51,127.387 2165.21,134.09 2165.92,116.662 2166.63,120.684 2167.34,128.728 2168.04,127.387 2168.75,131.409 2169.46,136.771 2170.17,132.749 2170.88,135.431 2171.58,128.728 2172.29,119.343 2173,127.387 2173.71,123.365 2174.41,124.706 2175.12,130.068 2175.83,124.706 2176.54,127.387 2177.25,119.343 2177.95,122.024 2178.66,131.409 2179.37,124.706 2180.08,124.706 2180.78,126.046 2181.49,138.112 2182.2,139.453 2182.91,146.156 2183.62,151.518 2184.32,151.518 2185.03,148.837 2185.74,139.453 2186.45,143.475 2187.15,147.496 2187.86,146.156 2188.57,143.475 2189.28,138.112 2189.99,123.365 2190.69,123.365 2191.4,126.046 2192.11,122.024 2192.82,122.024 2193.52,109.959 2194.23,103.256 2194.94,95.2118 2195.65,99.2337 2196.36,104.596 2197.06,91.19 2197.77,107.278 2198.48,113.981 2199.19,135.431 2199.89,142.134 2200.6,128.728 2201.31,128.728 2202.02,128.728 2202.73,120.684 2203.43,123.365 2204.14,130.068 2204.85,128.728 2205.56,128.728 2206.27,124.706 2206.97,127.387 2207.68,136.771 2208.39,135.431 2209.1,134.09 2209.8,143.475 2210.51,138.112 2211.22,142.134 2211.93,140.793 2212.64,136.771 2213.34,128.728 2214.05,128.728 2214.76,140.793 2215.47,134.09 2216.17,139.453 2216.88,150.178 2217.59,143.475 2218.3,136.771 2219.01,136.771 2219.71,144.815 2220.42,127.387 2221.13,128.728 2221.84,126.046 2222.54,130.068 2223.25,128.728 2223.96,131.409 2224.67,132.749 2225.38,124.706 2226.08,127.387 2226.79,127.387 2227.5,127.387 2228.21,126.046 2228.91,126.046 2229.62,136.771 2230.33,134.09 2231.04,134.09 2231.75,124.706 2232.45,127.387 2233.16,139.453 2233.87,138.112 2234.58,144.815 2235.28,142.134 2235.99,138.112 2236.7,136.771 2237.41,144.815 2238.12,138.112 2238.82,138.112 2239.53,142.134 2240.24,140.793 2240.95,132.749 2241.65,140.793 2242.36,154.2 2243.07,158.221 2243.78,158.221 2244.49,158.221 2245.19,162.243 2245.9,170.287 2246.61,163.584 2247.32,151.518 2248.02,150.178 2248.73,140.793 2249.44,143.475 2250.15,135.431 2250.86,131.409 2251.56,127.387 2252.27,122.024 2252.98,131.409 2253.69,126.046 2254.39,138.112 2255.1,139.453 2255.81,130.068 2256.52,128.728 2257.23,128.728 2257.93,119.343 2258.64,123.365 2259.35,122.024 2260.06,113.981 2260.76,127.387 2261.47,127.387 2262.18,135.431 2262.89,131.409 2263.6,130.068 2264.3,134.09 2265.01,128.728 2265.72,134.09 2266.43,132.749 2267.13,126.046 2267.84,132.749 2268.55,130.068 2269.26,131.409 2269.97,123.365 2270.67,119.343 2271.38,123.365 2272.09,108.618 2272.8,92.5306 2273.5,108.618 2274.21,104.596 2274.92,97.8931 2275.63,104.596 2276.34,101.915 2277.04,104.596 2277.75,111.299 2278.46,116.662 2279.17,118.003 2279.87,115.321 2280.58,118.003 2281.29,122.024 2282,120.684 2282.71,119.343 2283.41,130.068 2284.12,130.068 2284.83,126.046 2285.54,127.387 2286.25,128.728 2286.95,130.068 2287.66,130.068 2288.37,132.749 2289.08,146.156 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1732.08 1456.66 L2277.76 1456.66 L2277.76 1301.14 L1732.08 1301.14  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1732.08,1456.66 2277.76,1456.66 2277.76,1301.14 1732.08,1301.14 1732.08,1456.66 \"/>\n<polyline clip-path=\"url(#clip990)\" style=\"stroke:#ff0000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1757.08,1352.98 1907.09,1352.98 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1939.49 1336.97 L1939.49 1344.33 L1948.27 1344.33 L1948.27 1347.64 L1939.49 1347.64 L1939.49 1361.72 Q1939.49 1364.89 1940.35 1365.79 Q1941.23 1366.69 1943.89 1366.69 L1948.27 1366.69 L1948.27 1370.26 L1943.89 1370.26 Q1938.96 1370.26 1937.09 1368.43 Q1935.21 1366.58 1935.21 1361.72 L1935.21 1347.64 L1932.09 1347.64 L1932.09 1344.33 L1935.21 1344.33 L1935.21 1336.97 L1939.49 1336.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1965.65 1357.23 Q1960.49 1357.23 1958.5 1358.41 Q1956.51 1359.59 1956.51 1362.44 Q1956.51 1364.7 1957.99 1366.05 Q1959.49 1367.37 1962.06 1367.37 Q1965.6 1367.37 1967.73 1364.87 Q1969.89 1362.34 1969.89 1358.18 L1969.89 1357.23 L1965.65 1357.23 M1974.15 1355.47 L1974.15 1370.26 L1969.89 1370.26 L1969.89 1366.32 Q1968.43 1368.69 1966.25 1369.82 Q1964.08 1370.93 1960.93 1370.93 Q1956.95 1370.93 1954.59 1368.71 Q1952.25 1366.46 1952.25 1362.71 Q1952.25 1358.34 1955.16 1356.12 Q1958.1 1353.89 1963.91 1353.89 L1969.89 1353.89 L1969.89 1353.48 Q1969.89 1350.54 1967.94 1348.94 Q1966.02 1347.32 1962.53 1347.32 Q1960.3 1347.32 1958.2 1347.85 Q1956.09 1348.38 1954.15 1349.45 L1954.15 1345.51 Q1956.48 1344.61 1958.68 1344.17 Q1960.88 1343.71 1962.97 1343.71 Q1968.59 1343.71 1971.37 1346.63 Q1974.15 1349.54 1974.15 1355.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1997.94 1348.31 Q1997.22 1347.9 1996.37 1347.71 Q1995.53 1347.5 1994.52 1347.5 Q1990.9 1347.5 1988.96 1349.87 Q1987.04 1352.2 1987.04 1356.6 L1987.04 1370.26 L1982.76 1370.26 L1982.76 1344.33 L1987.04 1344.33 L1987.04 1348.36 Q1988.38 1346 1990.53 1344.87 Q1992.69 1343.71 1995.77 1343.71 Q1996.21 1343.71 1996.74 1343.78 Q1997.27 1343.82 1997.92 1343.94 L1997.94 1348.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2018.64 1357 Q2018.64 1352.37 2016.71 1349.82 Q2014.82 1347.27 2011.37 1347.27 Q2007.94 1347.27 2006.02 1349.82 Q2004.12 1352.37 2004.12 1357 Q2004.12 1361.6 2006.02 1364.15 Q2007.94 1366.69 2011.37 1366.69 Q2014.82 1366.69 2016.71 1364.15 Q2018.64 1361.6 2018.64 1357 M2022.9 1367.04 Q2022.9 1373.66 2019.96 1376.88 Q2017.02 1380.12 2010.95 1380.12 Q2008.71 1380.12 2006.71 1379.77 Q2004.72 1379.45 2002.85 1378.75 L2002.85 1374.61 Q2004.72 1375.63 2006.55 1376.12 Q2008.38 1376.6 2010.28 1376.6 Q2014.47 1376.6 2016.55 1374.4 Q2018.64 1372.23 2018.64 1367.81 L2018.64 1365.7 Q2017.32 1367.99 2015.26 1369.13 Q2013.2 1370.26 2010.33 1370.26 Q2005.56 1370.26 2002.64 1366.63 Q1999.72 1362.99 1999.72 1357 Q1999.72 1350.98 2002.64 1347.34 Q2005.56 1343.71 2010.33 1343.71 Q2013.2 1343.71 2015.26 1344.84 Q2017.32 1345.98 2018.64 1348.27 L2018.64 1344.33 L2022.9 1344.33 L2022.9 1367.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2053.84 1356.23 L2053.84 1358.31 L2034.26 1358.31 Q2034.54 1362.71 2036.9 1365.03 Q2039.28 1367.32 2043.52 1367.32 Q2045.97 1367.32 2048.27 1366.72 Q2050.58 1366.12 2052.85 1364.91 L2052.85 1368.94 Q2050.56 1369.91 2048.15 1370.42 Q2045.74 1370.93 2043.27 1370.93 Q2037.06 1370.93 2033.43 1367.32 Q2029.82 1363.71 2029.82 1357.55 Q2029.82 1351.19 2033.24 1347.46 Q2036.69 1343.71 2042.52 1343.71 Q2047.76 1343.71 2050.79 1347.09 Q2053.84 1350.44 2053.84 1356.23 M2049.58 1354.98 Q2049.54 1351.49 2047.62 1349.4 Q2045.72 1347.32 2042.57 1347.32 Q2039.01 1347.32 2036.85 1349.33 Q2034.72 1351.35 2034.4 1355 L2049.58 1354.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2065.05 1336.97 L2065.05 1344.33 L2073.82 1344.33 L2073.82 1347.64 L2065.05 1347.64 L2065.05 1361.72 Q2065.05 1364.89 2065.9 1365.79 Q2066.78 1366.69 2069.45 1366.69 L2073.82 1366.69 L2073.82 1370.26 L2069.45 1370.26 Q2064.52 1370.26 2062.64 1368.43 Q2060.77 1366.58 2060.77 1361.72 L2060.77 1347.64 L2057.64 1347.64 L2057.64 1344.33 L2060.77 1344.33 L2060.77 1336.97 L2065.05 1336.97 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2076.95 1344.33 L2081.21 1344.33 L2086.53 1364.56 L2091.83 1344.33 L2096.85 1344.33 L2102.18 1364.56 L2107.48 1344.33 L2111.74 1344.33 L2104.96 1370.26 L2099.93 1370.26 L2094.35 1349.01 L2088.75 1370.26 L2083.73 1370.26 L2076.95 1344.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2129.98 1357.23 Q2124.82 1357.23 2122.83 1358.41 Q2120.83 1359.59 2120.83 1362.44 Q2120.83 1364.7 2122.32 1366.05 Q2123.82 1367.37 2126.39 1367.37 Q2129.93 1367.37 2132.06 1364.87 Q2134.21 1362.34 2134.21 1358.18 L2134.21 1357.23 L2129.98 1357.23 M2138.47 1355.47 L2138.47 1370.26 L2134.21 1370.26 L2134.21 1366.32 Q2132.76 1368.69 2130.58 1369.82 Q2128.4 1370.93 2125.26 1370.93 Q2121.27 1370.93 2118.91 1368.71 Q2116.58 1366.46 2116.58 1362.71 Q2116.58 1358.34 2119.49 1356.12 Q2122.43 1353.89 2128.24 1353.89 L2134.21 1353.89 L2134.21 1353.48 Q2134.21 1350.54 2132.27 1348.94 Q2130.35 1347.32 2126.85 1347.32 Q2124.63 1347.32 2122.52 1347.85 Q2120.42 1348.38 2118.47 1349.45 L2118.47 1345.51 Q2120.81 1344.61 2123.01 1344.17 Q2125.21 1343.71 2127.29 1343.71 Q2132.92 1343.71 2135.7 1346.63 Q2138.47 1349.54 2138.47 1355.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2147.25 1334.24 L2151.51 1334.24 L2151.51 1370.26 L2147.25 1370.26 L2147.25 1334.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2160.26 1334.24 L2164.54 1334.24 L2164.54 1355.51 L2177.25 1344.33 L2182.69 1344.33 L2168.94 1356.46 L2183.26 1370.26 L2177.71 1370.26 L2164.54 1357.6 L2164.54 1370.26 L2160.26 1370.26 L2160.26 1334.24 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2208.36 1356.23 L2208.36 1358.31 L2188.77 1358.31 Q2189.05 1362.71 2191.41 1365.03 Q2193.8 1367.32 2198.03 1367.32 Q2200.49 1367.32 2202.78 1366.72 Q2205.09 1366.12 2207.36 1364.91 L2207.36 1368.94 Q2205.07 1369.91 2202.66 1370.42 Q2200.26 1370.93 2197.78 1370.93 Q2191.57 1370.93 2187.94 1367.32 Q2184.33 1363.71 2184.33 1357.55 Q2184.33 1351.19 2187.76 1347.46 Q2191.2 1343.71 2197.04 1343.71 Q2202.27 1343.71 2205.3 1347.09 Q2208.36 1350.44 2208.36 1356.23 M2204.1 1354.98 Q2204.05 1351.49 2202.13 1349.4 Q2200.23 1347.32 2197.08 1347.32 Q2193.52 1347.32 2191.37 1349.33 Q2189.24 1351.35 2188.91 1355 L2204.1 1354.98 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2230.37 1348.31 Q2229.65 1347.9 2228.8 1347.71 Q2227.96 1347.5 2226.95 1347.5 Q2223.33 1347.5 2221.39 1349.87 Q2219.47 1352.2 2219.47 1356.6 L2219.47 1370.26 L2215.19 1370.26 L2215.19 1344.33 L2219.47 1344.33 L2219.47 1348.36 Q2220.81 1346 2222.96 1344.87 Q2225.12 1343.71 2228.2 1343.71 Q2228.63 1343.71 2229.17 1343.78 Q2229.7 1343.82 2230.35 1343.94 L2230.37 1348.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2251.37 1345.1 L2251.37 1349.13 Q2249.56 1348.2 2247.62 1347.74 Q2245.67 1347.27 2243.59 1347.27 Q2240.42 1347.27 2238.82 1348.25 Q2237.25 1349.22 2237.25 1351.16 Q2237.25 1352.64 2238.38 1353.5 Q2239.51 1354.33 2242.94 1355.1 L2244.4 1355.42 Q2248.94 1356.39 2250.83 1358.18 Q2252.76 1359.94 2252.76 1363.11 Q2252.76 1366.72 2249.88 1368.82 Q2247.04 1370.93 2242.04 1370.93 Q2239.95 1370.93 2237.69 1370.51 Q2235.44 1370.12 2232.94 1369.31 L2232.94 1364.91 Q2235.3 1366.14 2237.59 1366.76 Q2239.88 1367.37 2242.13 1367.37 Q2245.14 1367.37 2246.76 1366.35 Q2248.38 1365.31 2248.38 1363.43 Q2248.38 1361.69 2247.2 1360.77 Q2246.04 1359.84 2242.08 1358.99 L2240.6 1358.64 Q2236.64 1357.81 2234.88 1356.09 Q2233.13 1354.36 2233.13 1351.35 Q2233.13 1347.69 2235.72 1345.7 Q2238.31 1343.71 2243.08 1343.71 Q2245.44 1343.71 2247.52 1344.06 Q2249.61 1344.4 2251.37 1345.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip990)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1757.08,1404.82 1907.09,1404.82 \"/>\n<path clip-path=\"url(#clip990)\" d=\"M1953.8 1406.45 L1953.8 1422.1 L1949.54 1422.1 L1949.54 1406.59 Q1949.54 1402.91 1948.1 1401.08 Q1946.67 1399.25 1943.8 1399.25 Q1940.35 1399.25 1938.36 1401.45 Q1936.37 1403.65 1936.37 1407.45 L1936.37 1422.1 L1932.09 1422.1 L1932.09 1396.17 L1936.37 1396.17 L1936.37 1400.2 Q1937.9 1397.86 1939.96 1396.71 Q1942.04 1395.55 1944.75 1395.55 Q1949.22 1395.55 1951.51 1398.33 Q1953.8 1401.08 1953.8 1406.45 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M1972.34 1399.16 Q1968.91 1399.16 1966.92 1401.84 Q1964.93 1404.51 1964.93 1409.16 Q1964.93 1413.81 1966.9 1416.5 Q1968.89 1419.16 1972.34 1419.16 Q1975.74 1419.16 1977.73 1416.47 Q1979.72 1413.79 1979.72 1409.16 Q1979.72 1404.55 1977.73 1401.87 Q1975.74 1399.16 1972.34 1399.16 M1972.34 1395.55 Q1977.9 1395.55 1981.07 1399.16 Q1984.24 1402.77 1984.24 1409.16 Q1984.24 1415.53 1981.07 1419.16 Q1977.9 1422.77 1972.34 1422.77 Q1966.76 1422.77 1963.59 1419.16 Q1960.44 1415.53 1960.44 1409.16 Q1960.44 1402.77 1963.59 1399.16 Q1966.76 1395.55 1972.34 1395.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2006.32 1400.15 Q2005.6 1399.74 2004.75 1399.55 Q2003.91 1399.34 2002.9 1399.34 Q1999.28 1399.34 1997.34 1401.71 Q1995.42 1404.04 1995.42 1408.44 L1995.42 1422.1 L1991.14 1422.1 L1991.14 1396.17 L1995.42 1396.17 L1995.42 1400.2 Q1996.76 1397.84 1998.91 1396.71 Q2001.07 1395.55 2004.15 1395.55 Q2004.59 1395.55 2005.12 1395.62 Q2005.65 1395.66 2006.3 1395.78 L2006.32 1400.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip990)\" d=\"M2030.14 1401.15 Q2031.74 1398.28 2033.96 1396.91 Q2036.18 1395.55 2039.19 1395.55 Q2043.24 1395.55 2045.44 1398.4 Q2047.64 1401.22 2047.64 1406.45 L2047.64 1422.1 L2043.36 1422.1 L2043.36 1406.59 Q2043.36 1402.86 2042.04 1401.06 Q2040.72 1399.25 2038.01 1399.25 Q2034.7 1399.25 2032.78 1401.45 Q2030.86 1403.65 2030.86 1407.45 L2030.86 1422.1 L2026.58 1422.1 L2026.58 1406.59 Q2026.58 1402.84 2025.26 1401.06 Q2023.94 1399.25 2021.18 1399.25 Q2017.92 1399.25 2016 1401.47 Q2014.08 1403.67 2014.08 1407.45 L2014.08 1422.1 L2009.79 1422.1 L2009.79 1396.17 L2014.08 1396.17 L2014.08 1400.2 Q2015.53 1397.82 2017.57 1396.68 Q2019.61 1395.55 2022.41 1395.55 Q2025.23 1395.55 2027.2 1396.98 Q2029.19 1398.42 2030.14 1401.15 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After some equilibriation steps, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now let's look at estimating the energy from the shift. The mean of the shift is a useful estimator of the shift. Calculating the error bars is a bit more involved as correlations have to be removed from the time series. The following code does that with blocking transformations:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -3.815 ± 0.099\n  with uncertainty of ± 0.008970614342568576\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"For the projected energy, it a bit more complicated as it's a ratio of fluctuationg quantities:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.1774 ± (0.0474639, 0.051944) (MC)\n  95% confidence interval: [-4.28066, -4.07921]) (MC)\n  linear error propagation: -4.1726 ± 0.049528\n  |δ_y| = |0.00975764| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. Let's get its median and lower and upper error bars for a 95% confidence interval","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.177400207765482, val_l = 0.1032568959464415, val_u = 0.09819112324625667)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\")\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected_energy\",\n)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip020\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip021\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip020)\" d=\"M102.74 1505.26 L2352.76 1505.26 L2352.76 47.2441 L102.74 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip022\">\n    <rect x=\"102\" y=\"47\" width=\"2251\" height=\"1459\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"165.712,1505.26 165.712,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"873.5,1505.26 873.5,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1581.29,1505.26 1581.29,47.2441 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2289.08,1505.26 2289.08,47.2441 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 2352.76,1505.26 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"165.712,1505.26 165.712,1486.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"873.5,1505.26 873.5,1486.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1581.29,1505.26 1581.29,1486.36 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2289.08,1505.26 2289.08,1486.36 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M165.712 1536.18 Q162.101 1536.18 160.272 1539.74 Q158.467 1543.28 158.467 1550.41 Q158.467 1557.52 160.272 1561.09 Q162.101 1564.63 165.712 1564.63 Q169.346 1564.63 171.152 1561.09 Q172.981 1557.52 172.981 1550.41 Q172.981 1543.28 171.152 1539.74 Q169.346 1536.18 165.712 1536.18 M165.712 1532.47 Q171.522 1532.47 174.578 1537.08 Q177.656 1541.66 177.656 1550.41 Q177.656 1559.14 174.578 1563.75 Q171.522 1568.33 165.712 1568.33 Q159.902 1568.33 156.823 1563.75 Q153.768 1559.14 153.768 1550.41 Q153.768 1541.66 156.823 1537.08 Q159.902 1532.47 165.712 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M818.026 1563.72 L825.665 1563.72 L825.665 1537.36 L817.355 1539.03 L817.355 1534.77 L825.618 1533.1 L830.294 1533.1 L830.294 1563.72 L837.933 1563.72 L837.933 1567.66 L818.026 1567.66 L818.026 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M857.378 1536.18 Q853.766 1536.18 851.938 1539.74 Q850.132 1543.28 850.132 1550.41 Q850.132 1557.52 851.938 1561.09 Q853.766 1564.63 857.378 1564.63 Q861.012 1564.63 862.817 1561.09 Q864.646 1557.52 864.646 1550.41 Q864.646 1543.28 862.817 1539.74 Q861.012 1536.18 857.378 1536.18 M857.378 1532.47 Q863.188 1532.47 866.243 1537.08 Q869.322 1541.66 869.322 1550.41 Q869.322 1559.14 866.243 1563.75 Q863.188 1568.33 857.378 1568.33 Q851.567 1568.33 848.489 1563.75 Q845.433 1559.14 845.433 1550.41 Q845.433 1541.66 848.489 1537.08 Q851.567 1532.47 857.378 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M887.539 1536.18 Q883.928 1536.18 882.1 1539.74 Q880.294 1543.28 880.294 1550.41 Q880.294 1557.52 882.1 1561.09 Q883.928 1564.63 887.539 1564.63 Q891.174 1564.63 892.979 1561.09 Q894.808 1557.52 894.808 1550.41 Q894.808 1543.28 892.979 1539.74 Q891.174 1536.18 887.539 1536.18 M887.539 1532.47 Q893.35 1532.47 896.405 1537.08 Q899.484 1541.66 899.484 1550.41 Q899.484 1559.14 896.405 1563.75 Q893.35 1568.33 887.539 1568.33 Q881.729 1568.33 878.651 1563.75 Q875.595 1559.14 875.595 1550.41 Q875.595 1541.66 878.651 1537.08 Q881.729 1532.47 887.539 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M917.701 1536.18 Q914.09 1536.18 912.261 1539.74 Q910.456 1543.28 910.456 1550.41 Q910.456 1557.52 912.261 1561.09 Q914.09 1564.63 917.701 1564.63 Q921.336 1564.63 923.141 1561.09 Q924.97 1557.52 924.97 1550.41 Q924.97 1543.28 923.141 1539.74 Q921.336 1536.18 917.701 1536.18 M917.701 1532.47 Q923.511 1532.47 926.567 1537.08 Q929.646 1541.66 929.646 1550.41 Q929.646 1559.14 926.567 1563.75 Q923.511 1568.33 917.701 1568.33 Q911.891 1568.33 908.812 1563.75 Q905.757 1559.14 905.757 1550.41 Q905.757 1541.66 908.812 1537.08 Q911.891 1532.47 917.701 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1529.9 1563.72 L1546.22 1563.72 L1546.22 1567.66 L1524.27 1567.66 L1524.27 1563.72 Q1526.94 1560.97 1531.52 1556.34 Q1536.13 1551.69 1537.31 1550.35 Q1539.55 1547.82 1540.43 1546.09 Q1541.33 1544.33 1541.33 1542.64 Q1541.33 1539.88 1539.39 1538.15 Q1537.47 1536.41 1534.37 1536.41 Q1532.17 1536.41 1529.71 1537.17 Q1527.28 1537.94 1524.51 1539.49 L1524.51 1534.77 Q1527.33 1533.63 1529.78 1533.05 Q1532.24 1532.47 1534.27 1532.47 Q1539.64 1532.47 1542.84 1535.16 Q1546.03 1537.85 1546.03 1542.34 Q1546.03 1544.47 1545.22 1546.39 Q1544.44 1548.28 1542.33 1550.88 Q1541.75 1551.55 1538.65 1554.77 Q1535.55 1557.96 1529.9 1563.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1566.03 1536.18 Q1562.42 1536.18 1560.59 1539.74 Q1558.79 1543.28 1558.79 1550.41 Q1558.79 1557.52 1560.59 1561.09 Q1562.42 1564.63 1566.03 1564.63 Q1569.67 1564.63 1571.47 1561.09 Q1573.3 1557.52 1573.3 1550.41 Q1573.3 1543.28 1571.47 1539.74 Q1569.67 1536.18 1566.03 1536.18 M1566.03 1532.47 Q1571.84 1532.47 1574.9 1537.08 Q1577.98 1541.66 1577.98 1550.41 Q1577.98 1559.14 1574.9 1563.75 Q1571.84 1568.33 1566.03 1568.33 Q1560.22 1568.33 1557.14 1563.75 Q1554.09 1559.14 1554.09 1550.41 Q1554.09 1541.66 1557.14 1537.08 Q1560.22 1532.47 1566.03 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1596.2 1536.18 Q1592.58 1536.18 1590.76 1539.74 Q1588.95 1543.28 1588.95 1550.41 Q1588.95 1557.52 1590.76 1561.09 Q1592.58 1564.63 1596.2 1564.63 Q1599.83 1564.63 1601.64 1561.09 Q1603.46 1557.52 1603.46 1550.41 Q1603.46 1543.28 1601.64 1539.74 Q1599.83 1536.18 1596.2 1536.18 M1596.2 1532.47 Q1602.01 1532.47 1605.06 1537.08 Q1608.14 1541.66 1608.14 1550.41 Q1608.14 1559.14 1605.06 1563.75 Q1602.01 1568.33 1596.2 1568.33 Q1590.39 1568.33 1587.31 1563.75 Q1584.25 1559.14 1584.25 1550.41 Q1584.25 1541.66 1587.31 1537.08 Q1590.39 1532.47 1596.2 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1626.36 1536.18 Q1622.75 1536.18 1620.92 1539.74 Q1619.11 1543.28 1619.11 1550.41 Q1619.11 1557.52 1620.92 1561.09 Q1622.75 1564.63 1626.36 1564.63 Q1629.99 1564.63 1631.8 1561.09 Q1633.63 1557.52 1633.63 1550.41 Q1633.63 1543.28 1631.8 1539.74 Q1629.99 1536.18 1626.36 1536.18 M1626.36 1532.47 Q1632.17 1532.47 1635.22 1537.08 Q1638.3 1541.66 1638.3 1550.41 Q1638.3 1559.14 1635.22 1563.75 Q1632.17 1568.33 1626.36 1568.33 Q1620.55 1568.33 1617.47 1563.75 Q1614.41 1559.14 1614.41 1550.41 Q1614.41 1541.66 1617.47 1537.08 Q1620.55 1532.47 1626.36 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2247.76 1549.03 Q2251.11 1549.74 2252.99 1552.01 Q2254.89 1554.28 2254.89 1557.61 Q2254.89 1562.73 2251.37 1565.53 Q2247.85 1568.33 2241.37 1568.33 Q2239.19 1568.33 2236.88 1567.89 Q2234.59 1567.47 2232.13 1566.62 L2232.13 1562.1 Q2234.08 1563.24 2236.39 1563.82 Q2238.71 1564.4 2241.23 1564.4 Q2245.63 1564.4 2247.92 1562.66 Q2250.23 1560.92 2250.23 1557.61 Q2250.23 1554.56 2248.08 1552.85 Q2245.95 1551.11 2242.13 1551.11 L2238.1 1551.11 L2238.1 1547.27 L2242.32 1547.27 Q2245.77 1547.27 2247.59 1545.9 Q2249.42 1544.51 2249.42 1541.92 Q2249.42 1539.26 2247.53 1537.85 Q2245.65 1536.41 2242.13 1536.41 Q2240.21 1536.41 2238.01 1536.83 Q2235.81 1537.24 2233.17 1538.12 L2233.17 1533.96 Q2235.84 1533.22 2238.15 1532.85 Q2240.49 1532.47 2242.55 1532.47 Q2247.87 1532.47 2250.97 1534.91 Q2254.08 1537.31 2254.08 1541.43 Q2254.08 1544.3 2252.43 1546.29 Q2250.79 1548.26 2247.76 1549.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2273.75 1536.18 Q2270.14 1536.18 2268.31 1539.74 Q2266.51 1543.28 2266.51 1550.41 Q2266.51 1557.52 2268.31 1561.09 Q2270.14 1564.63 2273.75 1564.63 Q2277.39 1564.63 2279.19 1561.09 Q2281.02 1557.52 2281.02 1550.41 Q2281.02 1543.28 2279.19 1539.74 Q2277.39 1536.18 2273.75 1536.18 M2273.75 1532.47 Q2279.56 1532.47 2282.62 1537.08 Q2285.7 1541.66 2285.7 1550.41 Q2285.7 1559.14 2282.62 1563.75 Q2279.56 1568.33 2273.75 1568.33 Q2267.94 1568.33 2264.86 1563.75 Q2261.81 1559.14 2261.81 1550.41 Q2261.81 1541.66 2264.86 1537.08 Q2267.94 1532.47 2273.75 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2303.91 1536.18 Q2300.3 1536.18 2298.47 1539.74 Q2296.67 1543.28 2296.67 1550.41 Q2296.67 1557.52 2298.47 1561.09 Q2300.3 1564.63 2303.91 1564.63 Q2307.55 1564.63 2309.35 1561.09 Q2311.18 1557.52 2311.18 1550.41 Q2311.18 1543.28 2309.35 1539.74 Q2307.55 1536.18 2303.91 1536.18 M2303.91 1532.47 Q2309.72 1532.47 2312.78 1537.08 Q2315.86 1541.66 2315.86 1550.41 Q2315.86 1559.14 2312.78 1563.75 Q2309.72 1568.33 2303.91 1568.33 Q2298.1 1568.33 2295.03 1563.75 Q2291.97 1559.14 2291.97 1550.41 Q2291.97 1541.66 2295.03 1537.08 Q2298.1 1532.47 2303.91 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2334.08 1536.18 Q2330.46 1536.18 2328.64 1539.74 Q2326.83 1543.28 2326.83 1550.41 Q2326.83 1557.52 2328.64 1561.09 Q2330.46 1564.63 2334.08 1564.63 Q2337.71 1564.63 2339.52 1561.09 Q2341.34 1557.52 2341.34 1550.41 Q2341.34 1543.28 2339.52 1539.74 Q2337.71 1536.18 2334.08 1536.18 M2334.08 1532.47 Q2339.89 1532.47 2342.94 1537.08 Q2346.02 1541.66 2346.02 1550.41 Q2346.02 1559.14 2342.94 1563.75 Q2339.89 1568.33 2334.08 1568.33 Q2328.27 1568.33 2325.19 1563.75 Q2322.13 1559.14 2322.13 1550.41 Q2322.13 1541.66 2325.19 1537.08 Q2328.27 1532.47 2334.08 1532.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1168.96 1615.53 L1168.96 1621.06 Q1166.48 1619.79 1163.8 1619.15 Q1161.13 1618.52 1158.27 1618.52 Q1153.91 1618.52 1151.71 1619.85 Q1149.55 1621.19 1149.55 1623.87 Q1149.55 1625.9 1151.1 1627.08 Q1152.66 1628.23 1157.38 1629.28 L1159.38 1629.72 Q1165.62 1631.06 1168.23 1633.51 Q1170.87 1635.93 1170.87 1640.29 Q1170.87 1645.25 1166.92 1648.15 Q1163.01 1651.05 1156.13 1651.05 Q1153.27 1651.05 1150.15 1650.47 Q1147.06 1649.93 1143.63 1648.82 L1143.63 1642.77 Q1146.87 1644.46 1150.02 1645.32 Q1153.17 1646.15 1156.26 1646.15 Q1160.4 1646.15 1162.63 1644.74 Q1164.85 1643.31 1164.85 1640.73 Q1164.85 1638.35 1163.23 1637.07 Q1161.64 1635.8 1156.2 1634.62 L1154.16 1634.15 Q1148.72 1633 1146.3 1630.64 Q1143.88 1628.26 1143.88 1624.12 Q1143.88 1619.09 1147.44 1616.35 Q1151.01 1613.62 1157.57 1613.62 Q1160.81 1613.62 1163.68 1614.09 Q1166.54 1614.57 1168.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1185.99 1604.35 L1185.99 1614.48 L1198.05 1614.48 L1198.05 1619.03 L1185.99 1619.03 L1185.99 1638.38 Q1185.99 1642.74 1187.17 1643.98 Q1188.38 1645.22 1192.04 1645.22 L1198.05 1645.22 L1198.05 1650.12 L1192.04 1650.12 Q1185.26 1650.12 1182.68 1647.61 Q1180.1 1645.06 1180.1 1638.38 L1180.1 1619.03 L1175.8 1619.03 L1175.8 1614.48 L1180.1 1614.48 L1180.1 1604.35 L1185.99 1604.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1236.25 1630.84 L1236.25 1633.7 L1209.32 1633.7 Q1209.7 1639.75 1212.95 1642.93 Q1216.23 1646.08 1222.05 1646.08 Q1225.42 1646.08 1228.58 1645.25 Q1231.76 1644.43 1234.88 1642.77 L1234.88 1648.31 Q1231.73 1649.65 1228.42 1650.35 Q1225.11 1651.05 1221.7 1651.05 Q1213.17 1651.05 1208.17 1646.08 Q1203.21 1641.12 1203.21 1632.65 Q1203.21 1623.9 1207.92 1618.77 Q1212.66 1613.62 1220.68 1613.62 Q1227.88 1613.62 1232.04 1618.26 Q1236.25 1622.88 1236.25 1630.84 M1230.39 1629.12 Q1230.33 1624.31 1227.68 1621.45 Q1225.07 1618.58 1220.75 1618.58 Q1215.84 1618.58 1212.88 1621.35 Q1209.96 1624.12 1209.51 1629.15 L1230.39 1629.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1251.52 1644.78 L1251.52 1663.68 L1245.64 1663.68 L1245.64 1614.48 L1251.52 1614.48 L1251.52 1619.89 Q1253.37 1616.7 1256.17 1615.18 Q1259 1613.62 1262.92 1613.62 Q1269.41 1613.62 1273.45 1618.77 Q1277.53 1623.93 1277.53 1632.33 Q1277.53 1640.73 1273.45 1645.89 Q1269.41 1651.05 1262.92 1651.05 Q1259 1651.05 1256.17 1649.52 Q1253.37 1647.96 1251.52 1644.78 M1271.45 1632.33 Q1271.45 1625.87 1268.78 1622.21 Q1266.13 1618.52 1261.49 1618.52 Q1256.84 1618.52 1254.17 1622.21 Q1251.52 1625.87 1251.52 1632.33 Q1251.52 1638.79 1254.17 1642.48 Q1256.84 1646.15 1261.49 1646.15 Q1266.13 1646.15 1268.78 1642.48 Q1271.45 1638.79 1271.45 1632.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1309.96 1615.53 L1309.96 1621.06 Q1307.48 1619.79 1304.8 1619.15 Q1302.13 1618.52 1299.27 1618.52 Q1294.91 1618.52 1292.71 1619.85 Q1290.55 1621.19 1290.55 1623.87 Q1290.55 1625.9 1292.11 1627.08 Q1293.66 1628.23 1298.38 1629.28 L1300.38 1629.72 Q1306.62 1631.06 1309.23 1633.51 Q1311.87 1635.93 1311.87 1640.29 Q1311.87 1645.25 1307.92 1648.15 Q1304.01 1651.05 1297.13 1651.05 Q1294.27 1651.05 1291.15 1650.47 Q1288.06 1649.93 1284.63 1648.82 L1284.63 1642.77 Q1287.87 1644.46 1291.02 1645.32 Q1294.17 1646.15 1297.26 1646.15 Q1301.4 1646.15 1303.63 1644.74 Q1305.86 1643.31 1305.86 1640.73 Q1305.86 1638.35 1304.23 1637.07 Q1302.64 1635.8 1297.2 1634.62 L1295.16 1634.15 Q1289.72 1633 1287.3 1630.64 Q1284.88 1628.26 1284.88 1624.12 Q1284.88 1619.09 1288.45 1616.35 Q1292.01 1613.62 1298.57 1613.62 Q1301.81 1613.62 1304.68 1614.09 Q1307.54 1614.57 1309.96 1615.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,1304.44 2352.76,1304.44 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,962.296 2352.76,962.296 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,620.151 2352.76,620.151 \"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"102.74,278.006 2352.76,278.006 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1505.26 102.74,47.2441 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,1304.44 121.638,1304.44 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,962.296 121.638,962.296 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,620.151 121.638,620.151 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"102.74,278.006 121.638,278.006 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M54.7958 1290.24 Q51.1847 1290.24 49.356 1293.8 Q47.5504 1297.35 47.5504 1304.48 Q47.5504 1311.58 49.356 1315.15 Q51.1847 1318.69 54.7958 1318.69 Q58.43 1318.69 60.2356 1315.15 Q62.0643 1311.58 62.0643 1304.48 Q62.0643 1297.35 60.2356 1293.8 Q58.43 1290.24 54.7958 1290.24 M54.7958 1286.54 Q60.6059 1286.54 63.6615 1291.14 Q66.7402 1295.73 66.7402 1304.48 Q66.7402 1313.2 63.6615 1317.81 Q60.6059 1322.39 54.7958 1322.39 Q48.9856 1322.39 45.9069 1317.81 Q42.8514 1313.2 42.8514 1304.48 Q42.8514 1295.73 45.9069 1291.14 Q48.9856 1286.54 54.7958 1286.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M18.6617 975.641 L34.9811 975.641 L34.9811 979.576 L13.0367 979.576 L13.0367 975.641 Q15.6988 972.886 20.2821 968.257 Q24.8885 963.604 26.0691 962.261 Q28.3144 959.738 29.1941 958.002 Q30.0968 956.243 30.0968 954.553 Q30.0968 951.798 28.1524 950.062 Q26.2311 948.326 23.1293 948.326 Q20.9302 948.326 18.4765 949.09 Q16.046 949.854 13.2682 951.405 L13.2682 946.683 Q16.0923 945.548 18.546 944.97 Q20.9997 944.391 23.0367 944.391 Q28.407 944.391 31.6015 947.076 Q34.7959 949.761 34.7959 954.252 Q34.7959 956.382 33.9857 958.303 Q33.1987 960.201 31.0922 962.794 Q30.5135 963.465 27.4117 966.683 Q24.3098 969.877 18.6617 975.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 948.095 Q51.1847 948.095 49.356 951.659 Q47.5504 955.201 47.5504 962.331 Q47.5504 969.437 49.356 973.002 Q51.1847 976.544 54.7958 976.544 Q58.43 976.544 60.2356 973.002 Q62.0643 969.437 62.0643 962.331 Q62.0643 955.201 60.2356 951.659 Q58.43 948.095 54.7958 948.095 M54.7958 944.391 Q60.6059 944.391 63.6615 948.997 Q66.7402 953.581 66.7402 962.331 Q66.7402 971.057 63.6615 975.664 Q60.6059 980.247 54.7958 980.247 Q48.9856 980.247 45.9069 975.664 Q42.8514 971.057 42.8514 962.331 Q42.8514 953.581 45.9069 948.997 Q48.9856 944.391 54.7958 944.391 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M27.4811 606.945 L15.6756 625.394 L27.4811 625.394 L27.4811 606.945 M26.2543 602.871 L32.1339 602.871 L32.1339 625.394 L37.0644 625.394 L37.0644 629.283 L32.1339 629.283 L32.1339 637.431 L27.4811 637.431 L27.4811 629.283 L11.8793 629.283 L11.8793 624.769 L26.2543 602.871 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 605.95 Q51.1847 605.95 49.356 609.515 Q47.5504 613.056 47.5504 620.186 Q47.5504 627.292 49.356 630.857 Q51.1847 634.399 54.7958 634.399 Q58.43 634.399 60.2356 630.857 Q62.0643 627.292 62.0643 620.186 Q62.0643 613.056 60.2356 609.515 Q58.43 605.95 54.7958 605.95 M54.7958 602.246 Q60.6059 602.246 63.6615 606.853 Q66.7402 611.436 66.7402 620.186 Q66.7402 628.913 63.6615 633.519 Q60.6059 638.102 54.7958 638.102 Q48.9856 638.102 45.9069 633.519 Q42.8514 628.913 42.8514 620.186 Q42.8514 611.436 45.9069 606.853 Q48.9856 602.246 54.7958 602.246 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M25.2126 276.143 Q22.0645 276.143 20.2126 278.296 Q18.3839 280.448 18.3839 284.198 Q18.3839 287.925 20.2126 290.101 Q22.0645 292.254 25.2126 292.254 Q28.3607 292.254 30.1894 290.101 Q32.0413 287.925 32.0413 284.198 Q32.0413 280.448 30.1894 278.296 Q28.3607 276.143 25.2126 276.143 M34.495 261.49 L34.495 265.749 Q32.7357 264.916 30.9302 264.476 Q29.1478 264.036 27.3885 264.036 Q22.7589 264.036 20.3052 267.161 Q17.8747 270.286 17.5275 276.606 Q18.8932 274.592 20.9534 273.527 Q23.0135 272.439 25.4904 272.439 Q30.6987 272.439 33.7079 275.61 Q36.7403 278.759 36.7403 284.198 Q36.7403 289.522 33.5922 292.74 Q30.4441 295.958 25.2126 295.958 Q19.2173 295.958 16.046 291.374 Q12.8747 286.768 12.8747 278.041 Q12.8747 269.847 16.7636 264.985 Q20.6524 260.101 27.2033 260.101 Q28.9626 260.101 30.745 260.448 Q32.5505 260.796 34.495 261.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M54.7958 263.805 Q51.1847 263.805 49.356 267.37 Q47.5504 270.911 47.5504 278.041 Q47.5504 285.147 49.356 288.712 Q51.1847 292.254 54.7958 292.254 Q58.43 292.254 60.2356 288.712 Q62.0643 285.147 62.0643 278.041 Q62.0643 270.911 60.2356 267.37 Q58.43 263.805 54.7958 263.805 M54.7958 260.101 Q60.6059 260.101 63.6615 264.708 Q66.7402 269.291 66.7402 278.041 Q66.7402 286.768 63.6615 291.374 Q60.6059 295.958 54.7958 295.958 Q48.9856 295.958 45.9069 291.374 Q42.8514 286.768 42.8514 278.041 Q42.8514 269.291 45.9069 264.708 Q48.9856 260.101 54.7958 260.101 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-57.6648 854.009 L-54.8002 854.009 L-54.8002 880.936 Q-48.7528 880.554 -45.5699 877.308 Q-42.4189 874.029 -42.4189 868.205 Q-42.4189 864.831 -43.2464 861.68 Q-44.074 858.497 -45.7291 855.378 L-40.1909 855.378 Q-38.8541 858.529 -38.1539 861.839 Q-37.4536 865.149 -37.4536 868.555 Q-37.4536 877.085 -42.4189 882.082 Q-47.3841 887.047 -55.8505 887.047 Q-64.6034 887.047 -69.7278 882.336 Q-74.884 877.594 -74.884 869.573 Q-74.884 862.38 -70.237 858.21 Q-65.6219 854.009 -57.6648 854.009 M-59.3835 859.866 Q-64.1896 859.929 -67.0542 862.571 Q-69.9187 865.181 -69.9187 869.51 Q-69.9187 874.411 -67.1497 877.371 Q-64.3806 880.299 -59.3517 880.745 L-59.3835 859.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-59.8927 814.764 L-38.3767 814.764 L-38.3767 820.621 L-59.7018 820.621 Q-64.7625 820.621 -67.277 822.594 Q-69.7914 824.568 -69.7914 828.514 Q-69.7914 833.257 -66.7677 835.994 Q-63.744 838.731 -58.5241 838.731 L-38.3767 838.731 L-38.3767 844.62 L-74.0246 844.62 L-74.0246 838.731 L-68.4865 838.731 Q-71.7011 836.631 -73.2926 833.798 Q-74.884 830.933 -74.884 827.209 Q-74.884 821.067 -71.0646 817.916 Q-67.277 814.764 -59.8927 814.764 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-57.6648 772.592 L-54.8002 772.592 L-54.8002 799.519 Q-48.7528 799.137 -45.5699 795.89 Q-42.4189 792.612 -42.4189 786.787 Q-42.4189 783.413 -43.2464 780.262 Q-44.074 777.08 -45.7291 773.96 L-40.1909 773.96 Q-38.8541 777.111 -38.1539 780.422 Q-37.4536 783.732 -37.4536 787.137 Q-37.4536 795.667 -42.4189 800.664 Q-47.3841 805.63 -55.8505 805.63 Q-64.6034 805.63 -69.7278 800.919 Q-74.884 796.177 -74.884 788.156 Q-74.884 780.963 -70.237 776.793 Q-65.6219 772.592 -57.6648 772.592 M-59.3835 778.448 Q-64.1896 778.512 -67.0542 781.154 Q-69.9187 783.764 -69.9187 788.092 Q-69.9187 792.994 -67.1497 795.954 Q-64.3806 798.882 -59.3517 799.328 L-59.3835 778.448 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-68.5501 742.323 Q-69.123 743.309 -69.3777 744.487 Q-69.6641 745.633 -69.6641 747.033 Q-69.6641 751.999 -66.4176 754.672 Q-63.2029 757.314 -57.1555 757.314 L-38.3767 757.314 L-38.3767 763.202 L-74.0246 763.202 L-74.0246 757.314 L-68.4865 757.314 Q-71.733 755.468 -73.2926 752.508 Q-74.884 749.548 -74.884 745.315 Q-74.884 744.71 -74.7885 743.978 Q-74.7248 743.246 -74.5657 742.355 L-68.5501 742.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-56.6144 713.868 Q-62.9801 713.868 -66.4813 716.51 Q-69.9824 719.12 -69.9824 723.862 Q-69.9824 728.573 -66.4813 731.215 Q-62.9801 733.825 -56.6144 733.825 Q-50.2805 733.825 -46.7794 731.215 Q-43.2783 728.573 -43.2783 723.862 Q-43.2783 719.12 -46.7794 716.51 Q-50.2805 713.868 -56.6144 713.868 M-42.8008 708.012 Q-33.6979 708.012 -29.2737 712.054 Q-24.8177 716.096 -24.8177 724.435 Q-24.8177 727.522 -25.2951 730.26 Q-25.7407 732.997 -26.6956 735.575 L-32.3929 735.575 Q-30.9924 732.997 -30.324 730.483 Q-29.6556 727.968 -29.6556 725.358 Q-29.6556 719.597 -32.6794 716.733 Q-35.6712 713.868 -41.7505 713.868 L-44.6469 713.868 Q-41.4959 715.682 -39.9363 718.515 Q-38.3767 721.348 -38.3767 725.294 Q-38.3767 731.851 -43.3737 735.862 Q-48.3708 739.872 -56.6144 739.872 Q-64.8898 739.872 -69.8869 735.862 Q-74.884 731.851 -74.884 725.294 Q-74.884 721.348 -73.3244 718.515 Q-71.7648 715.682 -68.6138 713.868 L-74.0246 713.868 L-74.0246 708.012 L-42.8008 708.012 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M-35.0665 681.116 Q-28.7008 683.599 -26.7592 685.954 Q-24.8177 688.31 -24.8177 692.256 L-24.8177 696.935 L-29.7193 696.935 L-29.7193 693.498 Q-29.7193 691.079 -30.8651 689.742 Q-32.011 688.405 -36.276 686.782 L-38.9496 685.732 L-74.0246 700.15 L-74.0246 693.943 L-46.1428 682.803 L-74.0246 671.663 L-74.0246 665.457 L-35.0665 681.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip022)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"166.42,1178.39 167.128,1052.34 167.835,926.288 168.543,1054.75 169.251,933.689 169.959,812.629 170.667,803.304 171.374,787.886 172.082,671.045 172.79,650.514 173.498,535.562 174.206,420.609 174.913,305.656 175.621,365.425 176.329,333.689 177.037,299.202 177.744,262.323 178.452,223.353 179.16,182.55 179.868,256.53 180.576,210.309 181.283,163.096 181.991,114.999 182.699,113.442 183.407,107.554 184.115,138.435 184.822,124.247 185.53,107.495 186.238,88.5087 186.946,99.6575 187.653,135.624 188.361,164.245 189.069,136.004 189.777,179.729 190.485,193.832 191.192,183.099 191.9,190.839 192.608,251.099 193.316,302.383 194.024,315.299 194.731,325.384 195.439,401.79 196.147,418.137 196.855,431.859 197.563,488.329 198.27,527.941 198.978,553.494 199.686,557.635 200.394,569.612 201.101,597.057 201.809,621.877 202.517,667.11 203.225,701.278 203.933,732.66 204.64,793.132 205.348,807.171 206.056,814.423 206.764,859.763 207.472,886.415 208.179,916.496 208.887,925.759 209.595,948.477 210.303,978.962 211.01,982.33 211.718,981.32 212.426,984.395 213.134,979.277 213.842,974.216 214.549,988.635 215.257,1002.61 215.965,1016.19 216.673,1036.47 217.381,1052.75 218.088,1062 218.796,1067.86 219.504,1073.68 220.212,1079.48 220.92,1079.12 221.627,1096.94 222.335,1105.68 223.043,1105.74 223.751,1139.68 224.458,1148.35 225.166,1146.29 225.874,1136.35 226.582,1155.52 227.29,1159.11 227.997,1165.35 228.705,1179.1 229.413,1192.82 230.121,1213.61 230.829,1220.31 231.536,1215.6 232.244,1227 232.952,1231.73 233.66,1243.21 234.368,1252.58 235.075,1259.91 235.783,1273.67 236.491,1275.04 237.199,1284.77 237.906,1284.47 238.614,1282.27 239.322,1286.2 240.03,1284.31 240.738,1284.51 241.445,1284.83 242.153,1296.92 242.861,1303.39 243.569,1290.95 244.277,1288 244.984,1300.27 245.692,1297.74 246.4,1308.29 247.108,1318.97 247.815,1329.76 248.523,1329.97 249.231,1335.63 249.939,1334.35 250.647,1352.42 251.354,1355.08 252.062,1356.14 252.77,1370.91 253.478,1367.31 254.186,1362.04 254.893,1366.89 255.601,1373.54 256.309,1368.7 257.017,1377.12 257.725,1377.49 258.432,1373.01 259.14,1370.17 259.848,1372.28 260.556,1371.22 261.263,1373.47 261.971,1362.84 262.679,1360.21 263.387,1365.73 264.095,1364.92 264.802,1372.21 265.51,1381.21 266.218,1382.46 266.926,1386.93 267.634,1391.52 268.341,1388.42 269.049,1377.49 269.757,1380.51 270.465,1372.68 271.172,1372.6 271.88,1369.44 272.588,1377.2 273.296,1383.55 274.004,1379.25 274.711,1384.16 275.419,1383.06 276.127,1378.91 276.835,1379.34 277.543,1396.56 278.25,1401.91 278.958,1392.32 279.666,1385.58 280.374,1387.84 281.082,1391.69 281.789,1397.12 282.497,1395.19 283.205,1387.26 283.913,1397.2 284.62,1399.86 285.328,1402.59 286.036,1408.34 286.744,1405.37 287.452,1406.8 288.159,1411.22 288.867,1423.01 289.575,1420.47 290.283,1419.35 290.991,1416.78 291.698,1411.26 292.406,1408.56 293.114,1416.05 293.822,1426.53 294.529,1425.67 295.237,1424.81 295.945,1431.13 296.653,1413.1 297.361,1417.83 298.068,1416.89 298.776,1420.27 299.484,1426.59 300.192,1424.44 300.9,1420.82 301.607,1414.25 302.315,1414.77 303.023,1413.88 303.731,1417.31 304.439,1416.51 305.146,1408.49 305.854,1416.19 306.562,1408.21 307.27,1414.49 307.977,1413.72 308.685,1425.81 309.393,1428.12 310.101,1437.56 310.809,1437.28 311.516,1421.41 312.224,1406.5 312.932,1408.52 313.64,1416.31 314.348,1422.8 315.055,1420.88 315.763,1430.28 316.471,1432.77 317.179,1433.91 317.886,1429.43 318.594,1431.92 319.302,1435.87 320.01,1445.48 320.718,1452.44 321.425,1451.19 322.133,1461 322.841,1454.38 323.549,1458.7 324.257,1460.33 324.964,1443.91 325.672,1435.44 326.38,1432.4 327.088,1440.56 327.796,1436.24 328.503,1451.43 329.211,1464 329.919,1451.89 330.627,1454.78 331.334,1459.1 332.042,1460.73 332.75,1458.23 333.458,1455.68 334.166,1461.38 334.873,1443.57 335.581,1442.09 336.289,1447.57 336.997,1443.38 337.705,1446.09 338.412,1423.53 339.12,1424.48 339.828,1415.5 340.536,1419.16 341.243,1417.21 341.951,1416.66 342.659,1406.1 343.367,1398.16 344.075,1401.59 344.782,1419.35 345.49,1398.9 346.198,1400.95 346.906,1397.29 347.614,1406.5 348.321,1407.29 349.029,1403.82 349.737,1410.29 350.445,1408.34 351.153,1403.51 351.86,1407.15 352.568,1409.45 353.276,1406.1 353.984,1402.7 354.691,1402.09 355.399,1391.45 356.107,1389.21 356.815,1396.98 357.523,1404.87 358.23,1407.22 358.938,1403.93 359.646,1413.35 360.354,1407.39 361.062,1401.3 361.769,1414.93 362.477,1404.79 363.185,1407.18 363.893,1398.27 364.601,1390.58 365.308,1399.87 366.016,1399.38 366.724,1394.61 367.432,1396.88 368.139,1390.65 368.847,1395.72 369.555,1406.53 370.263,1404.81 370.971,1394.56 371.678,1399.71 372.386,1403.54 373.094,1387.58 373.802,1398.33 374.51,1400.75 375.217,1394.72 375.925,1399.92 376.633,1396.73 377.341,1394.9 378.048,1401.53 378.756,1398.41 379.464,1405.1 380.172,1414.7 380.88,1420.25 381.587,1421.72 382.295,1430.15 383.003,1438.69 383.711,1440.5 384.419,1438.21 385.126,1428.96 385.834,1426.4 386.542,1419.61 387.25,1407.03 387.958,1386.97 388.665,1377.77 389.373,1376.99 390.081,1381.95 390.789,1384.14 391.496,1393.49 392.204,1377.4 392.912,1369.49 393.62,1378.68 394.328,1379.44 395.035,1374.51 395.743,1375.22 396.451,1367.35 397.159,1372.26 397.867,1380.12 398.574,1376.71 399.282,1367.51 399.99,1373.9 400.698,1377.54 401.405,1378.41 402.113,1386.4 402.821,1383.21 403.529,1392.68 404.237,1398.08 404.944,1383.88 405.652,1393.37 406.36,1395.99 407.068,1398.65 407.776,1398.57 408.483,1412.42 409.191,1408.45 409.899,1401.59 410.607,1411.31 411.315,1405.91 412.022,1412.91 412.73,1406.15 413.438,1395.02 414.146,1396.26 414.853,1393.31 415.561,1383.24 416.269,1380.02 416.977,1379.58 417.685,1379.14 418.392,1384.36 419.1,1391.08 419.808,1395.1 420.516,1396.39 421.224,1382.23 421.931,1380.46 422.639,1382.9 423.347,1393.83 424.055,1382.46 424.762,1380.72 425.47,1377.53 426.178,1381.36 426.886,1382.44 427.594,1387.77 428.301,1400.18 429.009,1398.84 429.717,1398.87 430.425,1398.89 431.133,1390.53 431.84,1383.36 432.548,1387.31 433.256,1392.73 433.964,1399.63 434.672,1394.1 435.379,1379.99 436.087,1378.24 436.795,1379.3 437.503,1374.72 438.21,1372.89 438.918,1372.45 439.626,1367.74 440.334,1358.65 441.042,1360.82 441.749,1357.33 442.457,1359.49 443.165,1345.94 443.873,1346.49 444.581,1357.1 445.288,1352.17 445.996,1344.27 446.704,1343.41 447.412,1342.54 448.119,1348.87 448.827,1352.44 449.535,1348.94 450.243,1358.23 450.951,1357.74 451.658,1357.24 452.366,1365.25 453.074,1364.92 453.782,1377.24 454.49,1371.55 455.197,1375.57 455.905,1374.06 456.613,1368.3 457.321,1379.27 458.029,1383.43 458.736,1394.59 459.444,1392.09 460.152,1383.98 460.86,1375.65 461.567,1390.87 462.275,1392.45 462.983,1394.05 463.691,1390.14 464.399,1394.46 465.106,1402.98 465.814,1400.63 466.522,1395.46 467.23,1402.61 467.938,1408.49 468.645,1411.71 469.353,1408.14 470.061,1412.72 470.769,1403.65 471.476,1404 472.184,1394.67 472.892,1375.27 473.6,1365.17 474.308,1367.59 475.015,1364.4 475.723,1362.57 476.431,1364.96 477.139,1357.48 477.847,1364.05 478.554,1369.31 479.262,1360.55 479.97,1347.28 480.678,1350.88 481.386,1360.23 482.093,1365.47 482.801,1359.51 483.509,1377.4 484.217,1374.54 484.924,1392.54 485.632,1396.93 486.34,1401.39 487.048,1404.54 487.756,1403.63 488.463,1402.69 489.171,1409.96 489.879,1409.13 490.587,1411.01 491.295,1414.29 492.002,1405.29 492.71,1387.7 493.418,1391.93 494.126,1399 494.834,1402.03 495.541,1389.89 496.249,1384.39 496.957,1389.94 497.665,1390.02 498.372,1391.5 499.08,1388.82 499.788,1386.09 500.496,1390.27 501.204,1386.17 501.911,1380.57 502.619,1380.46 503.327,1380.36 504.035,1387.24 504.743,1399.76 505.45,1398.65 506.158,1398.89 506.866,1406.04 507.574,1406.42 508.281,1409.55 508.989,1415.47 509.697,1420.11 510.405,1413.89 511.113,1400.6 511.82,1409.1 512.528,1413.61 513.236,1414.07 513.944,1411.78 514.652,1409.44 515.359,1420.77 516.067,1432.24 516.775,1430.3 517.483,1417.37 518.191,1399.88 518.898,1388.82 519.606,1388.71 520.314,1390 521.022,1395.51 521.729,1388.54 522.437,1378.59 523.145,1378.29 523.853,1386.43 524.561,1390.49 525.268,1398.8 525.976,1393.34 526.684,1396.13 527.392,1396.18 528.1,1399.02 528.807,1394.95 529.515,1401.94 530.223,1404.87 530.931,1403.71 531.638,1395.55 532.346,1391.39 533.054,1401.09 533.762,1394.27 534.47,1390.07 535.177,1385.79 535.885,1372.92 536.593,1362.55 537.301,1361.95 538.009,1369.87 538.716,1380.74 539.424,1377.7 540.132,1376.01 540.84,1371.47 541.548,1379.55 542.255,1372.28 542.963,1384.59 543.671,1392.87 544.379,1390.13 545.086,1391.53 545.794,1392.95 546.502,1409.62 547.21,1407.25 547.918,1417.2 548.625,1423.18 549.333,1436.03 550.041,1434.18 550.749,1424.11 551.457,1413.73 552.164,1415.49 552.872,1432.3 553.58,1413.87 554.288,1412.85 554.995,1409.03 555.703,1417.55 556.411,1411.07 557.119,1408.57 557.827,1401.85 558.534,1397.75 559.242,1387.94 559.95,1393.36 560.658,1394.68 561.366,1396.02 562.073,1390.39 562.781,1381.81 563.489,1385.74 564.197,1375.63 564.905,1370.96 565.612,1370.46 566.32,1388.33 567.028,1385.38 567.736,1383.78 568.443,1379.33 569.151,1384.67 569.859,1385.88 570.567,1388.52 571.275,1381.38 571.982,1379.73 572.69,1385.08 573.398,1376.46 574.106,1374.72 574.814,1375.78 575.521,1371.2 576.229,1379.26 576.937,1380.42 577.645,1388.62 578.352,1392.76 579.06,1385.79 579.768,1392.68 580.476,1375.87 581.184,1386.81 581.891,1395.1 582.599,1393.79 583.307,1395.24 584.015,1393.93 584.723,1384.2 585.43,1377.03 586.138,1379.57 586.846,1384.97 587.554,1375.01 588.262,1384.56 588.969,1409.45 589.677,1411.21 590.385,1399.18 591.093,1396.57 591.8,1399.45 592.508,1399.62 593.216,1392.83 593.924,1399.81 594.632,1399.97 595.339,1401.52 596.047,1397.55 596.755,1387.89 597.463,1375.15 598.171,1387.48 598.878,1391.59 599.586,1384.59 600.294,1387.26 601.002,1371.69 601.71,1376.96 602.417,1379.5 603.125,1373.64 603.833,1369.06 604.541,1370.06 605.248,1376.74 605.956,1373.67 606.664,1381.81 607.372,1390.07 608.08,1398.44 608.787,1401.4 609.495,1397.49 610.203,1386.51 610.911,1383.65 611.619,1380.73 612.326,1391.76 613.034,1376.4 613.742,1374.75 614.45,1368.82 615.157,1375.5 615.865,1363.93 616.573,1364.88 617.281,1370.11 617.989,1381.03 618.696,1373.9 619.404,1377.87 620.112,1369.25 620.82,1370.34 621.528,1379.88 622.235,1374.15 622.943,1387.93 623.651,1386.59 624.359,1381.03 625.067,1387.93 625.774,1382.4 626.482,1387.93 627.19,1390.77 627.898,1392.27 628.605,1404.85 629.313,1407.98 630.021,1401.53 630.729,1397.68 631.437,1395.13 632.144,1384.15 632.852,1384.09 633.56,1379.83 634.268,1368.43 634.976,1366.65 635.683,1359.17 636.391,1358.65 637.099,1362.38 637.807,1369.02 638.514,1365.89 639.222,1375.4 639.93,1365.37 640.638,1360.76 641.346,1373.03 642.053,1385.43 642.761,1381.3 643.469,1391.02 644.177,1385.62 644.885,1378.69 645.592,1375.81 646.3,1360.15 647.008,1365.37 647.716,1370.68 648.424,1383.07 649.131,1390.05 649.839,1384.65 650.547,1383.32 651.255,1383.34 651.962,1387.55 652.67,1380.69 653.378,1377.86 654.086,1381.97 654.794,1374.98 655.501,1370.62 656.209,1378.82 656.917,1385.74 657.625,1385.83 658.333,1390.08 659.04,1391.63 659.748,1397.35 660.456,1404.54 661.164,1398.09 661.871,1392.85 662.579,1397.2 663.287,1398.85 663.995,1399.15 664.703,1403.58 665.41,1403.97 666.118,1396.06 666.826,1400.43 667.534,1395.19 668.242,1402.3 668.949,1408.13 669.657,1394.76 670.365,1393.53 671.073,1400.6 671.781,1400.87 672.488,1401.14 673.196,1406.93 673.904,1400.41 674.612,1396.5 675.319,1386.92 676.027,1388.29 676.735,1391.08 677.443,1392.52 678.151,1398.16 678.858,1391.4 679.566,1402.56 680.274,1395.9 680.982,1377.87 681.69,1387.46 682.397,1388.83 683.105,1381.83 683.813,1377.48 684.521,1368.79 685.228,1374.06 685.936,1382.22 686.644,1376.49 687.352,1379.08 688.06,1370.47 688.767,1382.79 689.475,1382.71 690.183,1385.43 690.891,1389.59 691.599,1391.03 692.306,1388.33 693.014,1389.75 693.722,1391.2 694.43,1380.1 695.138,1388.35 695.845,1389.78 696.553,1384.25 697.261,1386.99 697.969,1388.38 698.676,1389.8 699.384,1396.81 700.092,1392.83 700.8,1388.76 701.508,1394.36 702.215,1395.88 702.923,1401.59 703.631,1403.24 704.339,1396.62 705.047,1392.61 705.754,1387.12 706.462,1396.84 707.17,1390.05 707.878,1398.42 708.585,1393.05 709.293,1401.46 710.001,1401.7 710.709,1408.85 711.417,1411.98 712.124,1402.76 712.832,1403.01 713.54,1404.64 714.248,1388.22 714.956,1386.77 715.663,1389.49 716.371,1375.41 717.079,1368.04 717.787,1357.63 718.495,1359.85 719.202,1364.96 719.91,1370.16 720.618,1369.8 721.326,1375.09 722.033,1374.84 722.741,1385.82 723.449,1399.69 724.157,1387.43 724.865,1393 725.572,1390.33 726.28,1394.56 726.988,1397.47 727.696,1394.88 728.404,1396.41 729.111,1397.96 729.819,1388.41 730.527,1384.22 731.235,1392.51 731.943,1384.22 732.65,1385.54 733.358,1385.48 734.066,1378.41 734.774,1379.63 735.481,1373.83 736.189,1367.91 736.897,1367.52 737.605,1361.46 738.313,1362.38 739.02,1366.17 739.728,1365.78 740.436,1358.3 741.144,1370.52 741.852,1381.48 742.559,1393.96 743.267,1398.3 743.975,1387.48 744.683,1388.92 745.39,1390.4 746.098,1401.58 746.806,1395 747.514,1386.85 748.222,1397.98 748.929,1389.9 749.637,1385.8 750.345,1396.93 751.053,1399.91 751.761,1394.65 752.468,1382.26 753.176,1383.58 753.884,1387.72 754.592,1394.7 755.3,1399.02 756.007,1399.27 756.715,1407.79 757.423,1410.94 758.131,1408.66 758.838,1396.63 759.546,1395.41 760.254,1391.37 760.962,1395.6 761.67,1390.17 762.377,1386 763.085,1394.32 763.793,1393.03 764.501,1394.51 765.209,1391.83 765.916,1389.1 766.624,1391.89 767.332,1389.15 768.04,1386.36 768.747,1380.7 769.455,1379.13 770.163,1383.15 770.871,1388.63 771.579,1394.2 772.286,1388.74 772.994,1391.53 773.702,1384.6 774.41,1387.32 775.118,1385.89 775.825,1388.63 776.533,1390.03 777.241,1385.86 777.949,1384.41 778.657,1380.12 779.364,1386.96 780.072,1381.33 780.78,1379.79 781.488,1386.63 782.195,1381 782.903,1379.46 783.611,1382.1 784.319,1377.78 785.027,1376.18 785.734,1380.18 786.442,1370.19 787.15,1364.19 787.858,1362.33 788.566,1351.89 789.273,1359.78 789.981,1356.43 790.689,1350.17 791.397,1349.51 792.104,1367.31 792.812,1357.09 793.52,1345.18 794.228,1344.46 794.936,1353.73 795.643,1370.18 796.351,1362.94 797.059,1348.41 797.767,1343.51 798.475,1348.53 799.182,1352.22 799.89,1346.03 800.598,1348.27 801.306,1357.66 802.014,1357.3 802.721,1363.99 803.429,1352.47 804.137,1361.92 804.845,1356.03 805.552,1357.09 806.26,1353.93 806.968,1359.19 807.676,1356.09 808.384,1357.18 809.091,1359.69 809.799,1356.63 810.507,1347.83 811.215,1337.38 811.923,1333.85 812.63,1345.97 813.338,1354 814.046,1360.74 814.754,1375.93 815.461,1377.46 816.169,1380.39 816.877,1380.61 817.585,1375.28 818.293,1371.21 819,1361.44 819.708,1373.86 820.416,1358.55 821.124,1365.35 821.832,1366.67 822.539,1370.8 823.247,1365.24 823.955,1366.56 824.663,1363.7 825.371,1367.79 826.078,1366.36 826.786,1369.1 827.494,1364.91 828.202,1362.02 828.909,1370.28 829.617,1364.72 830.325,1367.43 831.033,1354.77 831.741,1367.13 832.448,1354.47 833.156,1362.63 833.864,1361.12 834.572,1349.71 835.28,1346.52 835.987,1355.99 836.695,1364.19 837.403,1378.05 838.111,1368.54 838.818,1378.3 839.526,1363.2 840.234,1354.69 840.942,1372.64 841.65,1371.36 842.357,1361.66 843.065,1346.05 843.773,1354.11 844.481,1349.63 845.189,1345.06 845.896,1334.69 846.604,1344.03 847.312,1335.09 848.02,1331.66 848.728,1335.3 849.435,1339.01 850.143,1344.21 850.851,1341.02 851.559,1343.44 852.266,1345.91 852.974,1341.36 853.682,1343.81 854.39,1347.71 855.098,1350.28 855.805,1357.09 856.513,1347.21 857.221,1351.19 857.929,1349.62 858.637,1349.42 859.344,1342.19 860.052,1337.61 860.76,1330.09 861.468,1333.81 862.176,1354.48 862.883,1355.82 863.591,1350.19 864.299,1350.05 865.007,1351.32 865.714,1354.01 866.422,1367.87 867.13,1359.76 867.838,1373.67 868.546,1372.62 869.253,1368.77 869.961,1375.9 870.669,1372.11 871.377,1380.65 872.085,1371.43 872.792,1374.44 873.5,1360.87 874.208,1345.47 874.916,1339.54 875.623,1341.99 876.331,1350.11 877.039,1355.55 877.747,1368.03 878.455,1375.13 879.162,1385.08 879.87,1381.48 880.578,1383.29 881.286,1371.34 881.994,1372.94 882.701,1374.57 883.409,1376.22 884.117,1376.52 884.825,1380.96 885.533,1368.89 886.24,1375.96 886.948,1392.72 887.656,1389.21 888.364,1382.86 889.071,1399.66 889.779,1396.28 890.487,1392.8 891.195,1390.6 891.903,1402.02 892.61,1400 893.318,1404.73 894.026,1397.28 894.734,1404.67 895.442,1412.16 896.149,1403.48 896.857,1408.22 897.565,1400.77 898.273,1394.48 898.98,1378.33 899.688,1379.83 900.396,1371.61 901.104,1378.55 901.812,1382.82 902.519,1383.01 903.227,1381.82 903.935,1381.98 904.643,1384.92 905.351,1392.04 906.058,1396.52 906.766,1381.76 907.474,1383.29 908.182,1388.99 908.89,1382.34 909.597,1385.25 910.305,1381.27 911.013,1377.21 911.721,1373.04 912.428,1368.79 913.136,1363.02 913.844,1359.96 914.552,1359.65 915.26,1360.76 915.967,1363.3 916.675,1371.5 917.383,1370.05 918.091,1372.76 918.799,1379.71 919.506,1374.24 920.214,1381.2 920.922,1392.41 921.63,1391.38 922.337,1387.57 923.045,1383.65 923.753,1387.98 924.461,1374.32 925.169,1365.88 925.876,1364.28 926.584,1364.06 927.292,1361.02 928,1362.16 928.708,1371.74 929.415,1381.44 930.123,1389.88 930.831,1395.7 931.539,1389.21 932.247,1389.48 932.954,1393.89 933.662,1381.79 934.37,1381.9 935.078,1373.64 935.785,1372.19 936.493,1374.9 937.201,1370.68 937.909,1381.74 938.617,1383.23 939.324,1376.41 940.032,1380.59 940.74,1376.49 941.448,1365.28 942.156,1366.46 942.863,1366.27 943.571,1366.08 944.279,1363.07 944.987,1355.76 945.694,1361.03 946.402,1366.38 947.11,1354.94 947.818,1361.61 948.526,1364.18 949.233,1359.76 949.941,1358.08 950.649,1357.78 951.357,1368.72 952.065,1358.8 952.772,1359.94 953.48,1342.68 954.188,1346.37 954.896,1347.3 955.604,1346.83 956.311,1349.19 957.019,1344.52 957.727,1345.45 958.435,1342.13 959.142,1350.12 959.85,1358.22 960.558,1359.44 961.266,1353.64 961.974,1349.13 962.681,1355.83 963.389,1359.82 964.097,1358.28 964.805,1372.09 965.513,1386.03 966.22,1383.66 966.928,1388.12 967.636,1396.75 968.344,1394.58 969.051,1384.1 969.759,1374.7 970.467,1373.42 971.175,1380.44 971.883,1369.53 972.59,1383.42 973.298,1390.59 974.006,1381.34 974.714,1367.64 975.422,1363.38 976.129,1371.64 976.837,1363.27 977.545,1363.13 978.253,1369.99 978.961,1364.4 979.668,1358.67 980.376,1355.63 981.084,1356.77 981.792,1360.74 982.499,1359.17 983.207,1346.27 983.915,1347.24 984.623,1343.99 985.331,1339.26 986.038,1345.81 986.746,1339.71 987.454,1337.77 988.162,1341.48 988.87,1350.92 989.577,1349.23 990.285,1350.34 990.993,1359.9 991.701,1358.41 992.409,1351.28 993.116,1351.03 993.824,1352.19 994.532,1358.99 995.24,1360.31 995.947,1354.65 996.655,1360.09 997.363,1358.63 998.071,1362.75 998.779,1369.71 999.486,1369.85 1000.19,1361.62 1000.9,1365.78 1001.61,1370.01 1002.32,1381.21 1003.03,1378.81 1003.73,1373.57 1004.44,1365.42 1005.15,1357.06 1005.86,1352.71 1006.56,1346.85 1007.27,1343.69 1007.98,1351.77 1008.69,1359.97 1009.4,1361.31 1010.1,1372.42 1010.81,1368.44 1011.52,1368.55 1012.23,1368.66 1012.93,1363.2 1013.64,1360.4 1014.35,1357.55 1015.06,1365.82 1015.77,1361.69 1016.47,1372.8 1017.18,1368.82 1017.89,1370.32 1018.6,1374.62 1019.3,1373.45 1020.01,1375.03 1020.72,1375.25 1021.43,1385.13 1022.14,1395.13 1022.84,1387.5 1023.55,1383.81 1024.26,1388.29 1024.97,1379.08 1025.67,1359.82 1026.38,1362.48 1027.09,1358.19 1027.8,1353.81 1028.51,1360.59 1029.21,1368.86 1029.92,1378.63 1030.63,1384.4 1031.34,1387.51 1032.04,1392.04 1032.75,1385.65 1033.46,1374.94 1034.17,1370.9 1034.88,1369.56 1035.58,1370.98 1036.29,1382.14 1037,1383.79 1037.71,1379.94 1038.41,1370.43 1039.12,1367.67 1039.83,1367.64 1040.54,1371.8 1041.25,1387.1 1041.95,1386.07 1042.66,1398.76 1043.37,1397.96 1044.08,1394.39 1044.78,1401.7 1045.49,1402.29 1046.2,1419.18 1046.91,1409.26 1047.62,1405.87 1048.32,1413.3 1049.03,1404.52 1049.74,1392.73 1050.45,1404.04 1051.15,1403.22 1051.86,1395.49 1052.57,1393.08 1053.28,1394.76 1053.99,1397.85 1054.69,1383 1055.4,1369.09 1056.11,1377.31 1056.82,1371.68 1057.53,1367.33 1058.23,1365.7 1058.94,1382.26 1059.65,1386.51 1060.36,1376.92 1061.06,1367.08 1061.77,1361.22 1062.48,1374.95 1063.19,1394.34 1063.9,1391.91 1064.6,1385.25 1065.31,1390.93 1066.02,1385.63 1066.73,1392.7 1067.43,1399.86 1068.14,1383.67 1068.85,1380.96 1069.56,1369.79 1070.27,1369.6 1070.97,1366.59 1071.68,1370.56 1072.39,1367.59 1073.1,1375.78 1073.8,1377.13 1074.51,1377.1 1075.22,1377.07 1075.93,1389.56 1076.64,1384.23 1077.34,1374.58 1078.05,1370.29 1078.76,1353.17 1079.47,1349.82 1080.17,1356.37 1080.88,1358.79 1081.59,1354.18 1082.3,1352.32 1083.01,1360.35 1083.71,1368.49 1084.42,1359.91 1085.13,1359.61 1085.84,1357.89 1086.54,1363.2 1087.25,1372.8 1087.96,1374.17 1088.67,1379.74 1089.38,1374.28 1090.08,1371.48 1090.79,1375.62 1091.5,1378.43 1092.21,1379.9 1092.91,1382.79 1093.62,1381.57 1094.33,1383.09 1095.04,1370.71 1095.75,1370.63 1096.45,1371.94 1097.16,1366.28 1097.87,1364.71 1098.58,1375.72 1099.28,1372.96 1099.99,1379.9 1100.7,1361.82 1101.41,1364.38 1102.12,1375.39 1102.82,1376.81 1103.53,1382.43 1104.24,1375.64 1104.95,1372.87 1105.65,1377.03 1106.36,1370.1 1107.07,1367.22 1107.78,1365.68 1108.49,1373.91 1109.19,1368.32 1109.9,1376.59 1110.61,1375.25 1111.32,1393.29 1112.02,1385.39 1112.73,1382.83 1113.44,1381.61 1114.15,1383.13 1114.86,1383.3 1115.56,1383.46 1116.27,1376.67 1116.98,1382.27 1117.69,1379.62 1118.39,1382.48 1119.1,1378.45 1119.81,1372.92 1120.52,1365.85 1121.23,1376.86 1121.93,1375.49 1122.64,1369.9 1123.35,1364.17 1124.06,1369.57 1124.76,1368.06 1125.47,1366.52 1126.18,1377.54 1126.89,1383.16 1127.6,1394.38 1128.3,1385.09 1129.01,1376.94 1129.72,1355.89 1130.43,1355.5 1131.13,1366.4 1131.84,1364.83 1132.55,1371.65 1133.26,1379.96 1133.97,1373.1 1134.67,1385.59 1135.38,1387.19 1136.09,1401.2 1136.8,1404.46 1137.51,1405.03 1138.21,1404.23 1138.92,1393.78 1139.63,1387.19 1140.34,1388.77 1141.04,1386.21 1141.75,1375.23 1142.46,1379.37 1143.17,1369.6 1143.88,1375.04 1144.58,1370.78 1145.29,1373.45 1146,1380.35 1146.71,1377.61 1147.41,1377.61 1148.12,1381.79 1148.83,1376.3 1149.54,1362.23 1150.25,1352.01 1150.95,1360.01 1151.66,1363.92 1152.37,1352.35 1153.08,1347.62 1153.78,1354.17 1154.49,1340.94 1155.2,1344.56 1155.91,1341.13 1156.62,1341.92 1157.32,1335.59 1158.03,1349.13 1158.74,1347.26 1159.45,1348.21 1160.15,1352.02 1160.86,1347.41 1161.57,1341.29 1162.28,1335.02 1162.99,1344.34 1163.69,1356.59 1164.4,1350.73 1165.11,1358.85 1165.82,1353.06 1166.52,1348.55 1167.23,1353.83 1167.94,1353.59 1168.65,1358.96 1169.36,1354.61 1170.06,1360.01 1170.77,1376.61 1171.48,1380.98 1172.19,1388.17 1172.89,1383.1 1173.6,1375.12 1174.31,1375.28 1175.02,1365.7 1175.73,1360.07 1176.43,1357.13 1177.14,1359.74 1177.85,1361.01 1178.56,1360.9 1179.26,1371.96 1179.97,1372.07 1180.68,1372.18 1181.39,1384.74 1182.1,1389.22 1182.8,1388.28 1183.51,1402.38 1184.22,1409.85 1184.93,1409.3 1185.63,1406.01 1186.34,1420.25 1187.05,1404.95 1187.76,1397.4 1188.47,1399.26 1189.17,1397.03 1189.88,1387.85 1190.59,1379.8 1191.3,1385.46 1192,1381.52 1192.71,1387.2 1193.42,1390.21 1194.13,1394.65 1194.84,1386.74 1195.54,1377.23 1196.25,1381.44 1196.96,1387.1 1197.67,1384.54 1198.37,1376.36 1199.08,1373.56 1199.79,1366.5 1200.5,1370.52 1201.21,1361.97 1201.91,1354.63 1202.62,1364.1 1203.33,1373.7 1204.04,1375.06 1204.74,1375.06 1205.45,1363.85 1206.16,1362.22 1206.87,1369 1207.58,1373.09 1208.28,1377.25 1208.99,1385.64 1209.7,1398.27 1210.41,1397.35 1211.12,1386.75 1211.82,1363.23 1212.53,1361.57 1213.24,1365.52 1213.95,1352.62 1214.65,1343.64 1215.36,1351.57 1216.07,1351.12 1216.78,1370.4 1217.49,1371.75 1218.19,1361.9 1218.9,1356.04 1219.61,1357.13 1220.32,1368.07 1221.02,1358.15 1221.73,1359.29 1222.44,1354.81 1223.15,1364.33 1223.86,1364.19 1224.56,1382.18 1225.27,1401.65 1225.98,1391.28 1226.69,1383.37 1227.39,1375.26 1228.1,1376.7 1228.81,1379.57 1229.52,1372.74 1230.23,1368.55 1230.93,1376.84 1231.64,1379.7 1232.35,1390.91 1233.06,1400.87 1233.76,1393.18 1234.47,1397.68 1235.18,1396.77 1235.89,1395.83 1236.6,1401.73 1237.3,1400.87 1238.01,1409.57 1238.72,1399.27 1239.43,1395.57 1240.13,1383.47 1240.84,1378.01 1241.55,1368.2 1242.26,1366.6 1242.97,1373.4 1243.67,1363.48 1244.38,1357.55 1245.09,1350.07 1245.8,1350.97 1246.5,1340.49 1247.21,1339.79 1247.92,1349.09 1248.63,1355.68 1249.34,1348.23 1250.04,1361.88 1250.75,1365.87 1251.46,1385.24 1252.17,1382.72 1252.87,1381.52 1253.58,1376.12 1254.29,1376.18 1255,1381.79 1255.71,1390.26 1256.41,1382.28 1257.12,1376.88 1257.83,1378.33 1258.54,1382.58 1259.24,1386.9 1259.95,1384.38 1260.66,1373.44 1261.37,1380.38 1262.08,1372.12 1262.78,1380.43 1263.49,1370.77 1264.2,1360.86 1264.91,1363.4 1265.61,1363.18 1266.32,1361.55 1267.03,1361.3 1267.74,1358.24 1268.45,1360.75 1269.15,1359.1 1269.86,1357.41 1270.57,1354.28 1271.28,1362.38 1271.98,1370.6 1272.69,1366.38 1273.4,1367.67 1274.11,1368.98 1274.82,1374.51 1275.52,1380.13 1276.23,1385.83 1276.94,1394.37 1277.65,1383.77 1278.35,1372.87 1279.06,1374.26 1279.77,1371.5 1280.48,1367.27 1281.19,1364.36 1281.89,1373.99 1282.6,1375.41 1283.31,1365.68 1284.02,1372.54 1284.72,1376.72 1285.43,1375.41 1286.14,1362.87 1286.85,1362.68 1287.56,1362.48 1288.26,1373.49 1288.97,1374.91 1289.68,1381.92 1290.39,1379.33 1291.1,1379.47 1291.8,1374.04 1292.51,1367.08 1293.22,1371.16 1293.93,1361.32 1294.63,1384.82 1295.34,1389.21 1296.05,1382.62 1296.76,1370.28 1297.47,1367.43 1298.17,1367.32 1298.88,1363 1299.59,1359.99 1300.3,1355.51 1301,1359.41 1301.71,1366.19 1302.42,1374.46 1303.13,1377.3 1303.84,1380.19 1304.54,1378.97 1305.25,1384.65 1305.96,1384.89 1306.67,1376.81 1307.37,1382.45 1308.08,1385.41 1308.79,1380.11 1309.5,1377.47 1310.21,1371.97 1310.91,1363.53 1311.62,1364.75 1312.33,1367.39 1313.04,1368.68 1313.74,1376.97 1314.45,1374.27 1315.16,1365.9 1315.87,1375.55 1316.58,1365.82 1317.28,1368.49 1317.99,1376.78 1318.7,1372.68 1319.41,1368.49 1320.11,1367 1320.82,1359.87 1321.53,1359.62 1322.24,1357.96 1322.95,1356.28 1323.65,1364.42 1324.36,1369.88 1325.07,1379.6 1325.78,1372.81 1326.48,1379.79 1327.19,1386.88 1327.9,1384.41 1328.61,1374.94 1329.32,1384.71 1330.02,1394.61 1330.73,1395.04 1331.44,1396.85 1332.15,1393.19 1332.85,1403.17 1333.56,1401 1334.27,1391.9 1334.98,1385.31 1335.69,1391.03 1336.39,1399.59 1337.1,1400.05 1337.81,1403.26 1338.52,1417.41 1339.22,1403.19 1339.93,1411.88 1340.64,1415.25 1341.35,1409.13 1342.06,1398.72 1342.76,1388.01 1343.47,1385.36 1344.18,1395.15 1344.89,1389.89 1345.59,1384.49 1346.3,1383.15 1347.01,1373.38 1347.72,1374.62 1348.43,1380.08 1349.13,1378.66 1349.84,1378.6 1350.55,1384.13 1351.26,1389.75 1351.96,1391.3 1352.67,1395.64 1353.38,1402.81 1354.09,1392.17 1354.8,1393.75 1355.5,1398.11 1356.21,1397.03 1356.92,1401.44 1357.63,1390.73 1358.33,1386.69 1359.04,1383.96 1359.75,1385.35 1360.46,1392.34 1361.17,1391.11 1361.87,1387.07 1362.58,1394.08 1363.29,1390.1 1364,1388.82 1364.71,1405.51 1365.41,1407.29 1366.12,1392.53 1366.83,1399.59 1367.54,1394.32 1368.24,1390.32 1368.95,1387.61 1369.66,1390.43 1370.37,1390.51 1371.08,1390.59 1371.78,1383.7 1372.49,1393.4 1373.2,1394.92 1373.91,1397.86 1374.61,1414.6 1375.32,1419.24 1376.03,1423.95 1376.74,1420.57 1377.45,1410.23 1378.15,1406.5 1378.86,1408.21 1379.57,1409.94 1380.28,1408.94 1380.98,1405.16 1381.69,1391.54 1382.4,1394.33 1383.11,1390.2 1383.82,1395.75 1384.52,1398.61 1385.23,1407.06 1385.94,1396.27 1386.65,1389.37 1387.35,1393.51 1388.06,1396.32 1388.77,1396.4 1389.48,1402.04 1390.19,1409.14 1390.89,1401.17 1391.6,1404.11 1392.31,1401.55 1393.02,1404.49 1393.72,1406.09 1394.43,1386.83 1395.14,1389.5 1395.85,1389.42 1396.56,1394.92 1397.26,1393.55 1397.97,1400.52 1398.68,1395.09 1399.39,1379.69 1400.09,1386.45 1400.8,1391.91 1401.51,1391.88 1402.22,1380.63 1402.93,1376.15 1403.63,1380.05 1404.34,1378.4 1405.05,1380.94 1405.76,1379.31 1406.46,1370.59 1407.17,1357.36 1407.88,1353.83 1408.59,1354.54 1409.3,1349.55 1410,1347.33 1410.71,1342.21 1411.42,1347.07 1412.13,1343.42 1412.83,1335.37 1413.54,1338.73 1414.25,1334.95 1414.96,1341.21 1415.67,1344.71 1416.37,1346.86 1417.08,1341.89 1417.79,1339.71 1418.5,1350.37 1419.2,1344.11 1419.91,1342.02 1420.62,1331.26 1421.33,1331.82 1422.04,1332.39 1422.74,1341.6 1423.45,1348.09 1424.16,1351.85 1424.87,1355.68 1425.57,1358.17 1426.28,1366.33 1426.99,1363.42 1427.7,1357.62 1428.41,1358.76 1429.11,1362.73 1429.82,1366.77 1430.53,1373.67 1431.24,1375.12 1431.94,1382.14 1432.65,1372.63 1433.36,1368.47 1434.07,1372.6 1434.78,1369.84 1435.48,1369.81 1436.19,1375.36 1436.9,1376.84 1437.61,1379.72 1438.31,1379.89 1439.02,1375.88 1439.73,1377.36 1440.44,1367.7 1441.15,1378.77 1441.85,1367.75 1442.56,1370.47 1443.27,1364.84 1443.98,1373.09 1444.69,1373.12 1445.39,1389.78 1446.1,1391.52 1446.81,1389.14 1447.52,1383.94 1448.22,1384.16 1448.93,1377.43 1449.64,1380.3 1450.35,1383.21 1451.06,1380.62 1451.76,1373.8 1452.47,1366.8 1453.18,1375.06 1453.89,1377.87 1454.59,1380.73 1455.3,1373.91 1456.01,1375.3 1456.72,1369.74 1457.43,1372.45 1458.13,1366.83 1458.84,1363.88 1459.55,1367.9 1460.26,1369.19 1460.96,1376.09 1461.67,1374.75 1462.38,1371.99 1463.09,1369.16 1463.8,1366.28 1464.5,1368.94 1465.21,1363.25 1465.92,1360.24 1466.63,1371.22 1467.33,1369.79 1468.04,1362.73 1468.75,1373.74 1469.46,1368.17 1470.17,1370.89 1470.87,1366.66 1471.58,1372.15 1472.29,1369.35 1473,1365.1 1473.7,1370.56 1474.41,1367.74 1475.12,1360.63 1475.83,1353.36 1476.54,1357.24 1477.24,1354.14 1477.95,1339.61 1478.66,1343.28 1479.37,1342.75 1480.07,1339.38 1480.78,1347.33 1481.49,1342.65 1482.2,1342.16 1482.91,1341.66 1483.61,1338.32 1484.32,1337.76 1485.03,1334.36 1485.74,1338.03 1486.44,1337.5 1487.15,1341.24 1487.86,1347.87 1488.57,1339.07 1489.28,1334.34 1489.98,1336.63 1490.69,1338.97 1491.4,1331.42 1492.11,1335.11 1492.81,1343.12 1493.52,1335.7 1494.23,1339.49 1494.94,1336.27 1495.65,1344.31 1496.35,1344.04 1497.06,1350.8 1497.77,1354.86 1498.48,1346.39 1499.18,1355.98 1499.89,1365.7 1500.6,1379.68 1501.31,1381.48 1502.02,1381.95 1502.72,1378.28 1503.43,1366.22 1504.14,1363.57 1504.85,1360.87 1505.55,1356.71 1506.26,1363.63 1506.97,1373.42 1507.68,1370.92 1508.39,1351.62 1509.09,1348.64 1509.8,1341.37 1510.51,1348.06 1511.22,1352.06 1511.92,1351.92 1512.63,1350.38 1513.34,1346 1514.05,1345.75 1514.76,1342.68 1515.46,1343.79 1516.17,1342.1 1516.88,1341.8 1517.59,1337.26 1518.3,1349.56 1519,1356.42 1519.71,1349.42 1520.42,1342.25 1521.13,1340.56 1521.83,1333.18 1522.54,1329.9 1523.25,1340.73 1523.96,1346.09 1524.67,1351.53 1525.37,1347.27 1526.08,1341.51 1526.79,1341.26 1527.5,1349.44 1528.2,1336.7 1528.91,1334.96 1529.62,1328.93 1530.33,1339.77 1531.04,1349.35 1531.74,1356.27 1532.45,1366.07 1533.16,1359.41 1533.87,1351.19 1534.57,1356.74 1535.28,1367.91 1535.99,1369.59 1536.7,1372.67 1537.41,1373.05 1538.11,1370.68 1538.82,1371 1539.53,1376.84 1540.24,1374.52 1540.94,1385.87 1541.65,1376.87 1542.36,1370.39 1543.07,1362.34 1543.78,1362.45 1544.48,1366.73 1545.19,1365.53 1545.9,1369.85 1546.61,1365.94 1547.31,1366.1 1548.02,1364.88 1548.73,1366.4 1549.44,1381.75 1550.15,1379.46 1550.85,1374.36 1551.56,1377.41 1552.27,1370.86 1552.98,1371.08 1553.68,1369.91 1554.39,1360.36 1555.1,1356.17 1555.81,1368.63 1556.52,1374.34 1557.22,1369.07 1557.93,1366.45 1558.64,1366.56 1559.35,1362.5 1560.05,1372.25 1560.76,1364.13 1561.47,1369.75 1562.18,1372.69 1562.89,1372.91 1563.59,1375.89 1564.3,1385.8 1565.01,1376.62 1565.72,1374.13 1566.42,1372.96 1567.13,1366.2 1567.84,1360.68 1568.55,1368.99 1569.26,1367.71 1569.96,1362.21 1570.67,1382.99 1571.38,1387.49 1572.09,1387.95 1572.79,1395.26 1573.5,1395.86 1574.21,1388.23 1574.92,1396.89 1575.63,1393.38 1576.33,1395.26 1577.04,1388.95 1577.75,1369.96 1578.46,1374.17 1579.16,1378.44 1579.87,1377.25 1580.58,1370.46 1581.29,1360.69 1582,1357.71 1582.7,1358.9 1583.41,1367.11 1584.12,1378.22 1584.83,1375.64 1585.53,1386.84 1586.24,1377.51 1586.95,1392.86 1587.66,1396.06 1588.37,1388.33 1589.07,1379.01 1589.78,1381.95 1590.49,1383.55 1591.2,1386.56 1591.9,1392.37 1592.61,1385.88 1593.32,1386.15 1594.03,1378.11 1594.74,1383.77 1595.44,1395.02 1596.15,1392.71 1596.86,1404.06 1597.57,1386.78 1598.28,1391.17 1598.98,1409.32 1599.69,1400.43 1600.4,1407.75 1601.11,1396.04 1601.81,1390.9 1602.52,1382.86 1603.23,1382.97 1603.94,1381.69 1604.65,1377.59 1605.35,1373.39 1606.06,1377.5 1606.77,1387.24 1607.48,1381.88 1608.18,1377.78 1608.89,1384.74 1609.6,1384.88 1610.31,1387.79 1611.02,1369.84 1611.72,1371.08 1612.43,1370.94 1613.14,1375.01 1613.85,1367.94 1614.55,1362.11 1615.26,1350.47 1615.97,1338.52 1616.68,1340.64 1617.39,1347.08 1618.09,1339.39 1618.8,1338.7 1619.51,1336.57 1620.22,1338.71 1620.92,1340.91 1621.63,1344.57 1622.34,1351.14 1623.05,1342.24 1623.76,1343.11 1624.46,1338.31 1625.17,1339.13 1625.88,1334.26 1626.59,1330.73 1627.29,1334.3 1628,1340.79 1628.71,1337.45 1629.42,1341.16 1630.13,1347.78 1630.83,1341.78 1631.54,1338.5 1632.25,1345.09 1632.96,1357.41 1633.66,1365.68 1634.37,1361.55 1635.08,1361.52 1635.79,1364.29 1636.5,1367.1 1637.2,1364.4 1637.91,1365.82 1638.62,1360.29 1639.33,1350.41 1640.03,1357.19 1640.74,1344.41 1641.45,1339.8 1642.16,1343.61 1642.87,1354.52 1643.57,1351.57 1644.28,1347.16 1644.99,1356.72 1645.7,1367.79 1646.4,1362.36 1647.11,1363.78 1647.82,1361.05 1648.53,1369.4 1649.24,1366.78 1649.94,1371.06 1650.65,1365.69 1651.36,1379.62 1652.07,1384.1 1652.77,1373.5 1653.48,1380.63 1654.19,1374.08 1654.9,1368.74 1655.61,1370.24 1656.31,1367.6 1657.02,1355.1 1657.73,1368.91 1658.44,1364.84 1659.14,1369.04 1659.85,1364.97 1660.56,1360.81 1661.27,1360.76 1661.98,1366.29 1662.68,1364.95 1663.39,1359.38 1664.1,1355.1 1664.81,1357.74 1665.51,1364.62 1666.22,1370.21 1666.93,1363.39 1667.64,1357.79 1668.35,1353.47 1669.05,1365.87 1669.76,1350.52 1670.47,1351.68 1671.18,1361.27 1671.89,1355.65 1672.59,1348.48 1673.3,1349.61 1674.01,1354.99 1674.72,1359.05 1675.42,1351.99 1676.13,1364.39 1676.84,1361.65 1677.55,1361.65 1678.26,1363.05 1678.96,1365.86 1679.67,1361.76 1680.38,1370.11 1681.09,1378.58 1681.79,1380.28 1682.5,1382.02 1683.21,1372.73 1683.92,1372.92 1684.63,1367.55 1685.33,1374.58 1686.04,1373.41 1686.75,1377.75 1687.46,1383.54 1688.16,1374.25 1688.87,1371.67 1689.58,1374.58 1690.29,1370.61 1691,1385.93 1691.7,1387.71 1692.41,1396.36 1693.12,1394.22 1693.83,1398.86 1694.53,1400.85 1695.24,1398.77 1695.95,1396.63 1696.66,1384.8 1697.37,1375.4 1698.07,1364.34 1698.78,1368.43 1699.49,1358.59 1700.2,1352.73 1700.9,1353.81 1701.61,1346.43 1702.32,1348.83 1703.03,1356.91 1703.74,1348.22 1704.44,1356.3 1705.15,1361.7 1705.86,1360.19 1706.57,1360.05 1707.27,1355.7 1707.98,1363.9 1708.69,1365.24 1709.4,1369.4 1710.11,1372.24 1710.81,1366.77 1711.52,1369.56 1712.23,1371.01 1712.94,1389.07 1713.64,1390.88 1714.35,1380.31 1715.06,1387.46 1715.77,1391.96 1716.48,1395.17 1717.18,1391.57 1717.89,1382.35 1718.6,1381.21 1719.31,1388.34 1720.01,1387.31 1720.72,1398.63 1721.43,1397.8 1722.14,1403.79 1722.85,1404.41 1723.55,1410.48 1724.26,1412.57 1724.97,1418.74 1725.68,1412.83 1726.38,1404.01 1727.09,1386.65 1727.8,1388.22 1728.51,1391.21 1729.22,1390.1 1729.92,1379.23 1730.63,1372.27 1731.34,1373.56 1732.05,1380.46 1732.75,1377.72 1733.46,1383.3 1734.17,1387.57 1734.88,1394.68 1735.59,1385.31 1736.29,1389.61 1737,1399.49 1737.71,1395.76 1738.42,1386.4 1739.12,1382.37 1739.83,1376.84 1740.54,1378.18 1741.25,1364.11 1741.96,1356.73 1742.66,1344.89 1743.37,1348.51 1744.08,1357.88 1744.79,1354.66 1745.49,1352.8 1746.2,1360.82 1746.91,1363.34 1747.62,1361.68 1748.33,1358.58 1749.03,1352.59 1749.74,1354.98 1750.45,1350.34 1751.16,1355.54 1751.87,1363.65 1752.57,1367.66 1753.28,1361.94 1753.99,1344.73 1754.7,1338.46 1755.4,1342.08 1756.11,1330.05 1756.82,1323.48 1757.53,1325.45 1758.24,1326.02 1758.94,1328.07 1759.65,1334.45 1760.36,1336.67 1761.07,1327.51 1761.77,1333.91 1762.48,1336.16 1763.19,1334.18 1763.9,1353.42 1764.61,1356.03 1765.31,1351.68 1766.02,1347.23 1766.73,1356.78 1767.44,1383.05 1768.14,1379.32 1768.85,1371.35 1769.56,1361.76 1770.27,1346.28 1770.98,1348.77 1771.68,1359.73 1772.39,1368.04 1773.1,1369.54 1773.81,1358.52 1774.51,1342.95 1775.22,1342.57 1775.93,1347.83 1776.64,1357.39 1777.35,1369.86 1778.05,1381.08 1778.76,1371.79 1779.47,1385.77 1780.18,1380.73 1780.88,1383.84 1781.59,1387 1782.3,1395.67 1783.01,1392.19 1783.72,1394.1 1784.42,1400.13 1785.13,1385.74 1785.84,1387.5 1786.55,1390.65 1787.25,1391.12 1787.96,1383.32 1788.67,1393.25 1789.38,1384.1 1790.09,1394.04 1790.79,1394.52 1791.5,1395.01 1792.21,1390.01 1792.92,1384.87 1793.62,1393.41 1794.33,1378.65 1795.04,1374.61 1795.75,1384.38 1796.46,1386.01 1797.16,1376.58 1797.87,1368.28 1798.58,1379.36 1799.29,1373.93 1799.99,1375.35 1800.7,1372.61 1801.41,1376.79 1802.12,1383.82 1802.83,1392.32 1803.53,1388.56 1804.24,1381.94 1804.95,1389.03 1805.66,1394.84 1806.36,1384.2 1807.07,1374.65 1807.78,1387.16 1808.49,1387.41 1809.2,1384.88 1809.9,1380.91 1810.61,1367.04 1811.32,1372.49 1812.03,1365.42 1812.73,1366.63 1813.44,1367.87 1814.15,1363.52 1814.86,1366.11 1815.57,1357.49 1816.27,1369.82 1816.98,1358.49 1817.69,1355.36 1818.4,1353.59 1819.1,1354.62 1819.81,1359.91 1820.52,1362.47 1821.23,1365.09 1821.94,1364.95 1822.64,1359.19 1823.35,1363.17 1824.06,1351.72 1824.77,1361.21 1825.48,1370.82 1826.18,1359.61 1826.89,1359.39 1827.6,1350.7 1828.31,1350.32 1829.01,1352.76 1829.72,1356.66 1830.43,1360.63 1831.14,1347.77 1831.85,1343.1 1832.55,1349.69 1833.26,1350.75 1833.97,1360.27 1834.68,1367.13 1835.38,1362.94 1836.09,1376.79 1836.8,1374.2 1837.51,1374.34 1838.22,1367.51 1838.92,1375.87 1839.63,1364.88 1840.34,1377.36 1841.05,1391.35 1841.75,1380.78 1842.46,1379.64 1843.17,1375.7 1843.88,1373.06 1844.59,1377.31 1845.29,1370.52 1846,1369.15 1846.71,1370.54 1847.42,1346.66 1848.12,1361.74 1848.83,1374.17 1849.54,1372.89 1850.25,1364.59 1850.96,1353.27 1851.66,1333.06 1852.37,1319.42 1853.08,1322.8 1853.79,1331.99 1854.49,1327.03 1855.2,1329.15 1855.91,1329.88 1856.62,1342.03 1857.33,1340.2 1858.03,1345.42 1858.74,1357.75 1859.45,1366.04 1860.16,1364.73 1860.86,1359.2 1861.57,1360.55 1862.28,1352.11 1862.99,1358.93 1863.7,1365.85 1864.4,1372.87 1865.11,1370.32 1865.82,1376.02 1866.53,1373.53 1867.23,1365.41 1867.94,1369.64 1868.65,1371.17 1869.36,1372.72 1870.07,1364.57 1870.77,1375.7 1871.48,1377.33 1872.19,1373.45 1872.9,1365.3 1873.6,1366.72 1874.31,1373.73 1875.02,1378.07 1875.73,1383.86 1876.44,1369.01 1877.14,1367.7 1877.85,1356.57 1878.56,1362.01 1879.27,1371.71 1879.97,1366.28 1880.68,1371.88 1881.39,1373.4 1882.1,1370.79 1882.81,1379.21 1883.51,1369.78 1884.22,1367.07 1884.93,1371.28 1885.64,1365.81 1886.34,1371.39 1887.05,1367.32 1887.76,1365.95 1888.47,1363.16 1889.18,1371.47 1889.88,1381.28 1890.59,1369.09 1891.3,1364.96 1892.01,1353.71 1892.71,1346.4 1893.42,1337.5 1894.13,1339.79 1894.84,1343.55 1895.55,1345.97 1896.25,1347.02 1896.96,1352.33 1897.67,1354.92 1898.38,1349.13 1899.08,1354.48 1899.79,1343.04 1900.5,1352.53 1901.21,1349.52 1901.92,1342.21 1902.62,1348.89 1903.33,1361.26 1904.04,1361.26 1904.75,1362.66 1905.46,1355.69 1906.16,1345.74 1906.87,1353.88 1907.58,1362.13 1908.29,1364.95 1908.99,1365.03 1909.7,1366.5 1910.41,1354.04 1911.12,1356.71 1911.83,1341.14 1912.53,1323.66 1913.24,1321.5 1913.95,1325.05 1914.66,1324.39 1915.36,1333.7 1916.07,1343.14 1916.78,1348.49 1917.49,1358.12 1918.2,1358.15 1918.9,1358.18 1919.61,1362.38 1920.32,1362.49 1921.03,1363.99 1921.73,1359.95 1922.44,1360.01 1923.15,1351.68 1923.86,1343.13 1924.57,1340.03 1925.27,1342.53 1925.98,1352.09 1926.69,1353.4 1927.4,1360.33 1928.1,1368.73 1928.81,1367.6 1929.52,1367.81 1930.23,1372.18 1930.94,1387.59 1931.64,1394.99 1932.35,1402.5 1933.06,1402.01 1933.77,1404.2 1934.47,1392.84 1935.18,1387.99 1935.89,1388.5 1936.6,1391.76 1937.31,1384.1 1938.01,1396.83 1938.72,1397.48 1939.43,1403.57 1940.14,1409.75 1940.84,1402.47 1941.55,1404.53 1942.26,1412.04 1942.97,1408.84 1943.68,1405.55 1944.38,1391.2 1945.09,1398.47 1945.8,1393.52 1946.51,1387.07 1947.21,1384.61 1947.92,1376.53 1948.63,1358.4 1949.34,1365.16 1950.05,1363.61 1950.75,1369.06 1951.46,1369 1952.17,1370.34 1952.88,1370.32 1953.58,1371.69 1954.29,1373.08 1955,1382.84 1955.71,1381.67 1956.42,1395.65 1957.12,1385.09 1957.83,1378.4 1958.54,1384.06 1959.25,1373.16 1959.95,1368.96 1960.66,1363.27 1961.37,1356.03 1962.08,1359.93 1962.79,1356.86 1963.49,1360.79 1964.2,1363.38 1964.91,1366.02 1965.62,1360.29 1966.32,1351.61 1967.03,1361.1 1967.74,1346.77 1968.45,1350.56 1969.16,1347.34 1969.86,1355.38 1970.57,1357.92 1971.28,1371.71 1971.99,1371.76 1972.69,1381.53 1973.4,1388.68 1974.11,1372.44 1974.82,1375.28 1975.53,1376.78 1976.23,1379.69 1976.94,1372.93 1977.65,1374.38 1978.36,1375.85 1979.07,1378.74 1979.77,1364.96 1980.48,1367.65 1981.19,1360.58 1981.9,1368.8 1982.6,1368.77 1983.31,1371.54 1984.02,1381.29 1984.73,1380.13 1985.44,1371.97 1986.14,1380.34 1986.85,1376.37 1987.56,1372.3 1988.27,1355.49 1988.97,1367.84 1989.68,1367.78 1990.39,1369.12 1991.1,1378.84 1991.81,1372.05 1992.51,1366.49 1993.22,1369.21 1993.93,1370.58 1994.64,1367.78 1995.34,1367.73 1996.05,1380.2 1996.76,1377.62 1997.47,1380.53 1998.18,1382.11 1998.88,1383.71 1999.59,1381.19 2000.3,1385.53 2001.01,1380.26 2001.71,1373.47 2002.42,1369.31 2003.13,1373.44 2003.84,1369.28 2004.55,1365.02 2005.25,1364.89 2005.96,1374.53 2006.67,1380.15 2007.38,1388.62 2008.08,1387.56 2008.79,1379.55 2009.5,1375.52 2010.21,1382.52 2010.92,1384.09 2011.62,1384.31 2012.33,1372.01 2013.04,1369.19 2013.75,1369.1 2014.45,1370.42 2015.16,1373.16 2015.87,1371.76 2016.58,1366.14 2017.29,1368.8 2017.99,1368.72 2018.7,1367.24 2019.41,1371.33 2020.12,1372.7 2020.82,1365.7 2021.53,1366.96 2022.24,1373.84 2022.95,1376.66 2023.66,1380.91 2024.36,1376.9 2025.07,1371.41 2025.78,1369.98 2026.49,1362.92 2027.19,1359.91 2027.9,1362.48 2028.61,1370.69 2029.32,1360.85 2030.03,1353.58 2030.73,1361.68 2031.44,1364.29 2032.15,1373.94 2032.86,1375.39 2033.56,1374.08 2034.27,1378.31 2034.98,1381.22 2035.69,1371.67 2036.4,1375.85 2037.1,1368.96 2037.81,1364.7 2038.52,1349.05 2039.23,1357.09 2039.93,1349.75 2040.64,1347.92 2041.35,1350.31 2042.06,1351.34 2042.77,1358.03 2043.47,1353.59 2044.18,1351.87 2044.89,1362.8 2045.6,1362.69 2046.3,1358.37 2047.01,1349.72 2047.72,1349.36 2048.43,1329.06 2049.14,1326.87 2049.84,1321.78 2050.55,1329.54 2051.26,1334.56 2051.97,1339.67 2052.68,1332.08 2053.38,1324.32 2054.09,1323.57 2054.8,1339.93 2055.51,1336.68 2056.21,1341.88 2056.92,1341.52 2057.63,1348.22 2058.34,1343.77 2059.05,1336.39 2059.75,1320.25 2060.46,1307.98 2061.17,1314.22 2061.88,1313.39 2062.58,1321.16 2063.29,1323.35 2064,1309.84 2064.71,1311.85 2065.42,1312.49 2066.12,1314.58 2066.83,1313.86 2067.54,1318.86 2068.25,1323.95 2068.95,1331.95 2069.66,1340.07 2070.37,1349.71 2071.08,1342.74 2071.79,1346.83 2072.49,1339.8 2073.2,1345.24 2073.91,1353.55 2074.62,1345.3 2075.32,1334.01 2076.03,1343.57 2076.74,1350.47 2077.45,1347.73 2078.16,1356.08 2078.86,1349.29 2079.57,1360.43 2080.28,1350.96 2080.99,1346.83 2081.69,1364.85 2082.4,1358.26 2083.11,1359.84 2083.82,1369.72 2084.53,1365.99 2085.23,1370.45 2085.94,1357.04 2086.65,1365.48 2087.36,1349.11 2088.06,1353.27 2088.77,1347.74 2089.48,1342.08 2090.19,1336.29 2090.9,1334.6 2091.6,1334.3 2092.31,1336.82 2093.02,1332.34 2093.73,1337.65 2094.43,1336.02 2095.14,1334.36 2095.85,1336.9 2096.56,1335.28 2097.27,1335.03 2097.97,1336.19 2098.68,1334.56 2099.39,1334.31 2100.1,1329.83 2100.8,1335.14 2101.51,1322.2 2102.22,1325.99 2102.93,1332.66 2103.64,1335.23 2104.34,1355.96 2105.05,1361.71 2105.76,1363.42 2106.47,1359.63 2107.17,1355.75 2107.88,1357.33 2108.59,1358.93 2109.3,1349.46 2110.01,1341.13 2110.71,1339.61 2111.42,1342.28 2112.13,1346.39 2112.84,1347.79 2113.54,1367.2 2114.25,1373.1 2114.96,1365.37 2115.67,1365.73 2116.38,1375.69 2117.08,1383.06 2117.79,1394.59 2118.5,1387.35 2119.21,1390.79 2119.91,1387.5 2120.62,1382.75 2121.33,1391.51 2122.04,1388.19 2122.75,1376.56 2123.45,1374.24 2124.16,1370.48 2124.87,1381.79 2125.58,1378.18 2126.28,1381.36 2126.99,1373.6 2127.7,1375.31 2128.41,1372.9 2129.12,1367.67 2129.82,1370.63 2130.53,1363.94 2131.24,1368.21 2131.95,1368.4 2132.66,1371.36 2133.36,1374.37 2134.07,1366.36 2134.78,1358.14 2135.49,1363.69 2136.19,1355.4 2136.9,1349.7 2137.61,1353.72 2138.32,1359.21 2139.03,1377.24 2139.73,1373.45 2140.44,1375.11 2141.15,1374.02 2141.86,1379.81 2142.56,1385.69 2143.27,1388.92 2143.98,1377.09 2144.69,1367.69 2145.4,1360.83 2146.1,1360.8 2146.81,1356.58 2147.52,1353.66 2148.23,1350.68 2148.93,1351.87 2149.64,1344.63 2150.35,1341.47 2151.06,1341.09 2151.77,1342.12 2152.47,1347.4 2153.18,1352.78 2153.89,1361.03 2154.6,1362.46 2155.3,1365.29 2156.01,1359.83 2156.72,1351.43 2157.43,1351.26 2158.14,1349.69 2158.84,1352.31 2159.55,1360.57 2160.26,1361.99 2160.97,1360.65 2161.67,1355.09 2162.38,1359.2 2163.09,1356.4 2163.8,1361.93 2164.51,1368.94 2165.21,1362.18 2165.92,1380.23 2166.63,1376.5 2167.34,1368.53 2168.04,1370.08 2168.75,1366.11 2169.46,1360.64 2170.17,1364.82 2170.88,1362.12 2171.58,1369.1 2172.29,1378.95 2173,1371.01 2173.71,1375.35 2174.41,1374.24 2175.12,1368.94 2175.83,1374.62 2176.54,1372.1 2177.25,1380.58 2177.95,1378.17 2178.66,1368.78 2179.37,1375.82 2180.08,1376.06 2180.78,1374.93 2181.49,1362.62 2182.2,1361.2 2182.91,1354.13 2183.62,1348.31 2184.32,1348 2185.03,1350.52 2185.74,1360.1 2186.45,1355.84 2187.15,1351.49 2187.86,1352.68 2188.57,1355.29 2189.28,1360.75 2189.99,1376.01 2190.69,1376.29 2191.4,1373.79 2192.11,1378.16 2192.82,1378.46 2193.52,1391.13 2194.23,1398.5 2194.94,1407.32 2195.65,1404.09 2196.36,1399.4 2197.06,1413.62 2197.77,1398.24 2198.48,1391.99 2199.19,1370.31 2199.89,1363.35 2200.6,1377.18 2201.31,1377.35 2202.02,1377.51 2202.73,1385.98 2203.43,1383.54 2204.14,1376.89 2204.85,1378.41 2205.56,1378.58 2206.27,1382.9 2206.97,1380.37 2207.68,1370.82 2208.39,1372.22 2209.1,1373.64 2209.8,1363.91 2210.51,1369.37 2211.22,1365.15 2211.93,1366.44 2212.64,1370.55 2213.34,1378.9 2214.05,1379.06 2214.76,1366.68 2215.47,1373.58 2216.17,1368.06 2216.88,1356.77 2217.59,1363.52 2218.3,1370.38 2219.01,1370.38 2219.71,1361.98 2220.42,1379.96 2221.13,1378.76 2221.84,1381.7 2222.54,1377.75 2223.25,1379.28 2223.96,1376.66 2224.67,1375.38 2225.38,1383.79 2226.08,1381.27 2226.79,1381.46 2227.5,1381.65 2228.21,1383.22 2228.91,1383.44 2229.62,1372.54 2230.33,1375.33 2231.04,1375.38 2231.75,1385.15 2232.45,1382.63 2233.16,1370.29 2233.87,1371.63 2234.58,1364.6 2235.28,1367.24 2235.99,1371.33 2236.7,1372.7 2237.41,1364.3 2238.12,1371.14 2238.82,1371.11 2239.53,1366.88 2240.24,1368.17 2240.95,1376.47 2241.65,1368.17 2242.36,1354.02 2243.07,1349.41 2243.78,1348.97 2244.49,1348.53 2245.19,1343.83 2245.9,1334.74 2246.61,1341.18 2247.32,1353.39 2248.02,1354.5 2248.73,1364.06 2249.44,1361.18 2250.15,1369.43 2250.86,1373.64 2251.56,1377.91 2252.27,1383.63 2252.98,1374.24 2253.69,1379.9 2254.39,1367.59 2255.1,1366.17 2255.81,1375.87 2256.52,1377.4 2257.23,1377.56 2257.93,1387.4 2258.64,1383.62 2259.35,1385.27 2260.06,1393.83 2260.76,1380.5 2261.47,1380.69 2262.18,1372.54 2262.89,1376.74 2263.6,1378.24 2264.3,1374.2 2265.01,1379.82 2265.72,1374.42 2266.43,1375.87 2267.13,1382.89 2267.84,1376.17 2268.55,1379.03 2269.26,1377.78 2269.97,1386.2 2270.67,1390.62 2271.38,1386.83 2272.09,1402.22 2272.8,1419.1 2273.5,1403.68 2274.21,1408.35 2274.92,1415.8 2275.63,1409.78 2276.34,1413.15 2277.04,1411.13 2277.75,1404.95 2278.46,1399.97 2279.17,1399 2279.87,1402.13 2280.58,1399.82 2281.29,1396.06 2282,1397.74 2282.71,1399.45 2283.41,1388.73 2284.12,1388.87 2284.83,1393.17 2285.54,1392 2286.25,1390.8 2286.95,1389.58 2287.66,1389.71 2288.37,1387.07 2289.08,1373.16 \"/>\n<path clip-path=\"url(#clip022)\" d=\"M874.208 1371.39 L874.916 1371.39 L875.623 1371.39 L876.331 1371.39 L877.039 1371.39 L877.747 1371.39 L878.455 1371.39 L879.162 1371.39 L879.87 1371.39 L880.578 1371.39 L881.286 1371.39 L881.994 1371.39 L882.701 1371.39 L883.409 1371.39 L884.117 1371.39 L884.825 1371.39 L885.533 1371.39 L886.24 1371.39 L886.948 1371.39 L887.656 1371.39 L888.364 1371.39 L889.071 1371.39 L889.779 1371.39 L890.487 1371.39 L891.195 1371.39 L891.903 1371.39 L892.61 1371.39 L893.318 1371.39 L894.026 1371.39 L894.734 1371.39 L895.442 1371.39 L896.149 1371.39 L896.857 1371.39 L897.565 1371.39 L898.273 1371.39 L898.98 1371.39 L899.688 1371.39 L900.396 1371.39 L901.104 1371.39 L901.812 1371.39 L902.519 1371.39 L903.227 1371.39 L903.935 1371.39 L904.643 1371.39 L905.351 1371.39 L906.058 1371.39 L906.766 1371.39 L907.474 1371.39 L908.182 1371.39 L908.89 1371.39 L909.597 1371.39 L910.305 1371.39 L911.013 1371.39 L911.721 1371.39 L912.428 1371.39 L913.136 1371.39 L913.844 1371.39 L914.552 1371.39 L915.26 1371.39 L915.967 1371.39 L916.675 1371.39 L917.383 1371.39 L918.091 1371.39 L918.799 1371.39 L919.506 1371.39 L920.214 1371.39 L920.922 1371.39 L921.63 1371.39 L922.337 1371.39 L923.045 1371.39 L923.753 1371.39 L924.461 1371.39 L925.169 1371.39 L925.876 1371.39 L926.584 1371.39 L927.292 1371.39 L928 1371.39 L928.708 1371.39 L929.415 1371.39 L930.123 1371.39 L930.831 1371.39 L931.539 1371.39 L932.247 1371.39 L932.954 1371.39 L933.662 1371.39 L934.37 1371.39 L935.078 1371.39 L935.785 1371.39 L936.493 1371.39 L937.201 1371.39 L937.909 1371.39 L938.617 1371.39 L939.324 1371.39 L940.032 1371.39 L940.74 1371.39 L941.448 1371.39 L942.156 1371.39 L942.863 1371.39 L943.571 1371.39 L944.279 1371.39 L944.987 1371.39 L945.694 1371.39 L946.402 1371.39 L947.11 1371.39 L947.818 1371.39 L948.526 1371.39 L949.233 1371.39 L949.941 1371.39 L950.649 1371.39 L951.357 1371.39 L952.065 1371.39 L952.772 1371.39 L953.48 1371.39 L954.188 1371.39 L954.896 1371.39 L955.604 1371.39 L956.311 1371.39 L957.019 1371.39 L957.727 1371.39 L958.435 1371.39 L959.142 1371.39 L959.85 1371.39 L960.558 1371.39 L961.266 1371.39 L961.974 1371.39 L962.681 1371.39 L963.389 1371.39 L964.097 1371.39 L964.805 1371.39 L965.513 1371.39 L966.22 1371.39 L966.928 1371.39 L967.636 1371.39 L968.344 1371.39 L969.051 1371.39 L969.759 1371.39 L970.467 1371.39 L971.175 1371.39 L971.883 1371.39 L972.59 1371.39 L973.298 1371.39 L974.006 1371.39 L974.714 1371.39 L975.422 1371.39 L976.129 1371.39 L976.837 1371.39 L977.545 1371.39 L978.253 1371.39 L978.961 1371.39 L979.668 1371.39 L980.376 1371.39 L981.084 1371.39 L981.792 1371.39 L982.499 1371.39 L983.207 1371.39 L983.915 1371.39 L984.623 1371.39 L985.331 1371.39 L986.038 1371.39 L986.746 1371.39 L987.454 1371.39 L988.162 1371.39 L988.87 1371.39 L989.577 1371.39 L990.285 1371.39 L990.993 1371.39 L991.701 1371.39 L992.409 1371.39 L993.116 1371.39 L993.824 1371.39 L994.532 1371.39 L995.24 1371.39 L995.947 1371.39 L996.655 1371.39 L997.363 1371.39 L998.071 1371.39 L998.779 1371.39 L999.486 1371.39 L1000.19 1371.39 L1000.9 1371.39 L1001.61 1371.39 L1002.32 1371.39 L1003.03 1371.39 L1003.73 1371.39 L1004.44 1371.39 L1005.15 1371.39 L1005.86 1371.39 L1006.56 1371.39 L1007.27 1371.39 L1007.98 1371.39 L1008.69 1371.39 L1009.4 1371.39 L1010.1 1371.39 L1010.81 1371.39 L1011.52 1371.39 L1012.23 1371.39 L1012.93 1371.39 L1013.64 1371.39 L1014.35 1371.39 L1015.06 1371.39 L1015.77 1371.39 L1016.47 1371.39 L1017.18 1371.39 L1017.89 1371.39 L1018.6 1371.39 L1019.3 1371.39 L1020.01 1371.39 L1020.72 1371.39 L1021.43 1371.39 L1022.14 1371.39 L1022.84 1371.39 L1023.55 1371.39 L1024.26 1371.39 L1024.97 1371.39 L1025.67 1371.39 L1026.38 1371.39 L1027.09 1371.39 L1027.8 1371.39 L1028.51 1371.39 L1029.21 1371.39 L1029.92 1371.39 L1030.63 1371.39 L1031.34 1371.39 L1032.04 1371.39 L1032.75 1371.39 L1033.46 1371.39 L1034.17 1371.39 L1034.88 1371.39 L1035.58 1371.39 L1036.29 1371.39 L1037 1371.39 L1037.71 1371.39 L1038.41 1371.39 L1039.12 1371.39 L1039.83 1371.39 L1040.54 1371.39 L1041.25 1371.39 L1041.95 1371.39 L1042.66 1371.39 L1043.37 1371.39 L1044.08 1371.39 L1044.78 1371.39 L1045.49 1371.39 L1046.2 1371.39 L1046.91 1371.39 L1047.62 1371.39 L1048.32 1371.39 L1049.03 1371.39 L1049.74 1371.39 L1050.45 1371.39 L1051.15 1371.39 L1051.86 1371.39 L1052.57 1371.39 L1053.28 1371.39 L1053.99 1371.39 L1054.69 1371.39 L1055.4 1371.39 L1056.11 1371.39 L1056.82 1371.39 L1057.53 1371.39 L1058.23 1371.39 L1058.94 1371.39 L1059.65 1371.39 L1060.36 1371.39 L1061.06 1371.39 L1061.77 1371.39 L1062.48 1371.39 L1063.19 1371.39 L1063.9 1371.39 L1064.6 1371.39 L1065.31 1371.39 L1066.02 1371.39 L1066.73 1371.39 L1067.43 1371.39 L1068.14 1371.39 L1068.85 1371.39 L1069.56 1371.39 L1070.27 1371.39 L1070.97 1371.39 L1071.68 1371.39 L1072.39 1371.39 L1073.1 1371.39 L1073.8 1371.39 L1074.51 1371.39 L1075.22 1371.39 L1075.93 1371.39 L1076.64 1371.39 L1077.34 1371.39 L1078.05 1371.39 L1078.76 1371.39 L1079.47 1371.39 L1080.17 1371.39 L1080.88 1371.39 L1081.59 1371.39 L1082.3 1371.39 L1083.01 1371.39 L1083.71 1371.39 L1084.42 1371.39 L1085.13 1371.39 L1085.84 1371.39 L1086.54 1371.39 L1087.25 1371.39 L1087.96 1371.39 L1088.67 1371.39 L1089.38 1371.39 L1090.08 1371.39 L1090.79 1371.39 L1091.5 1371.39 L1092.21 1371.39 L1092.91 1371.39 L1093.62 1371.39 L1094.33 1371.39 L1095.04 1371.39 L1095.75 1371.39 L1096.45 1371.39 L1097.16 1371.39 L1097.87 1371.39 L1098.58 1371.39 L1099.28 1371.39 L1099.99 1371.39 L1100.7 1371.39 L1101.41 1371.39 L1102.12 1371.39 L1102.82 1371.39 L1103.53 1371.39 L1104.24 1371.39 L1104.95 1371.39 L1105.65 1371.39 L1106.36 1371.39 L1107.07 1371.39 L1107.78 1371.39 L1108.49 1371.39 L1109.19 1371.39 L1109.9 1371.39 L1110.61 1371.39 L1111.32 1371.39 L1112.02 1371.39 L1112.73 1371.39 L1113.44 1371.39 L1114.15 1371.39 L1114.86 1371.39 L1115.56 1371.39 L1116.27 1371.39 L1116.98 1371.39 L1117.69 1371.39 L1118.39 1371.39 L1119.1 1371.39 L1119.81 1371.39 L1120.52 1371.39 L1121.23 1371.39 L1121.93 1371.39 L1122.64 1371.39 L1123.35 1371.39 L1124.06 1371.39 L1124.76 1371.39 L1125.47 1371.39 L1126.18 1371.39 L1126.89 1371.39 L1127.6 1371.39 L1128.3 1371.39 L1129.01 1371.39 L1129.72 1371.39 L1130.43 1371.39 L1131.13 1371.39 L1131.84 1371.39 L1132.55 1371.39 L1133.26 1371.39 L1133.97 1371.39 L1134.67 1371.39 L1135.38 1371.39 L1136.09 1371.39 L1136.8 1371.39 L1137.51 1371.39 L1138.21 1371.39 L1138.92 1371.39 L1139.63 1371.39 L1140.34 1371.39 L1141.04 1371.39 L1141.75 1371.39 L1142.46 1371.39 L1143.17 1371.39 L1143.88 1371.39 L1144.58 1371.39 L1145.29 1371.39 L1146 1371.39 L1146.71 1371.39 L1147.41 1371.39 L1148.12 1371.39 L1148.83 1371.39 L1149.54 1371.39 L1150.25 1371.39 L1150.95 1371.39 L1151.66 1371.39 L1152.37 1371.39 L1153.08 1371.39 L1153.78 1371.39 L1154.49 1371.39 L1155.2 1371.39 L1155.91 1371.39 L1156.62 1371.39 L1157.32 1371.39 L1158.03 1371.39 L1158.74 1371.39 L1159.45 1371.39 L1160.15 1371.39 L1160.86 1371.39 L1161.57 1371.39 L1162.28 1371.39 L1162.99 1371.39 L1163.69 1371.39 L1164.4 1371.39 L1165.11 1371.39 L1165.82 1371.39 L1166.52 1371.39 L1167.23 1371.39 L1167.94 1371.39 L1168.65 1371.39 L1169.36 1371.39 L1170.06 1371.39 L1170.77 1371.39 L1171.48 1371.39 L1172.19 1371.39 L1172.89 1371.39 L1173.6 1371.39 L1174.31 1371.39 L1175.02 1371.39 L1175.73 1371.39 L1176.43 1371.39 L1177.14 1371.39 L1177.85 1371.39 L1178.56 1371.39 L1179.26 1371.39 L1179.97 1371.39 L1180.68 1371.39 L1181.39 1371.39 L1182.1 1371.39 L1182.8 1371.39 L1183.51 1371.39 L1184.22 1371.39 L1184.93 1371.39 L1185.63 1371.39 L1186.34 1371.39 L1187.05 1371.39 L1187.76 1371.39 L1188.47 1371.39 L1189.17 1371.39 L1189.88 1371.39 L1190.59 1371.39 L1191.3 1371.39 L1192 1371.39 L1192.71 1371.39 L1193.42 1371.39 L1194.13 1371.39 L1194.84 1371.39 L1195.54 1371.39 L1196.25 1371.39 L1196.96 1371.39 L1197.67 1371.39 L1198.37 1371.39 L1199.08 1371.39 L1199.79 1371.39 L1200.5 1371.39 L1201.21 1371.39 L1201.91 1371.39 L1202.62 1371.39 L1203.33 1371.39 L1204.04 1371.39 L1204.74 1371.39 L1205.45 1371.39 L1206.16 1371.39 L1206.87 1371.39 L1207.58 1371.39 L1208.28 1371.39 L1208.99 1371.39 L1209.7 1371.39 L1210.41 1371.39 L1211.12 1371.39 L1211.82 1371.39 L1212.53 1371.39 L1213.24 1371.39 L1213.95 1371.39 L1214.65 1371.39 L1215.36 1371.39 L1216.07 1371.39 L1216.78 1371.39 L1217.49 1371.39 L1218.19 1371.39 L1218.9 1371.39 L1219.61 1371.39 L1220.32 1371.39 L1221.02 1371.39 L1221.73 1371.39 L1222.44 1371.39 L1223.15 1371.39 L1223.86 1371.39 L1224.56 1371.39 L1225.27 1371.39 L1225.98 1371.39 L1226.69 1371.39 L1227.39 1371.39 L1228.1 1371.39 L1228.81 1371.39 L1229.52 1371.39 L1230.23 1371.39 L1230.93 1371.39 L1231.64 1371.39 L1232.35 1371.39 L1233.06 1371.39 L1233.76 1371.39 L1234.47 1371.39 L1235.18 1371.39 L1235.89 1371.39 L1236.6 1371.39 L1237.3 1371.39 L1238.01 1371.39 L1238.72 1371.39 L1239.43 1371.39 L1240.13 1371.39 L1240.84 1371.39 L1241.55 1371.39 L1242.26 1371.39 L1242.97 1371.39 L1243.67 1371.39 L1244.38 1371.39 L1245.09 1371.39 L1245.8 1371.39 L1246.5 1371.39 L1247.21 1371.39 L1247.92 1371.39 L1248.63 1371.39 L1249.34 1371.39 L1250.04 1371.39 L1250.75 1371.39 L1251.46 1371.39 L1252.17 1371.39 L1252.87 1371.39 L1253.58 1371.39 L1254.29 1371.39 L1255 1371.39 L1255.71 1371.39 L1256.41 1371.39 L1257.12 1371.39 L1257.83 1371.39 L1258.54 1371.39 L1259.24 1371.39 L1259.95 1371.39 L1260.66 1371.39 L1261.37 1371.39 L1262.08 1371.39 L1262.78 1371.39 L1263.49 1371.39 L1264.2 1371.39 L1264.91 1371.39 L1265.61 1371.39 L1266.32 1371.39 L1267.03 1371.39 L1267.74 1371.39 L1268.45 1371.39 L1269.15 1371.39 L1269.86 1371.39 L1270.57 1371.39 L1271.28 1371.39 L1271.98 1371.39 L1272.69 1371.39 L1273.4 1371.39 L1274.11 1371.39 L1274.82 1371.39 L1275.52 1371.39 L1276.23 1371.39 L1276.94 1371.39 L1277.65 1371.39 L1278.35 1371.39 L1279.06 1371.39 L1279.77 1371.39 L1280.48 1371.39 L1281.19 1371.39 L1281.89 1371.39 L1282.6 1371.39 L1283.31 1371.39 L1284.02 1371.39 L1284.72 1371.39 L1285.43 1371.39 L1286.14 1371.39 L1286.85 1371.39 L1287.56 1371.39 L1288.26 1371.39 L1288.97 1371.39 L1289.68 1371.39 L1290.39 1371.39 L1291.1 1371.39 L1291.8 1371.39 L1292.51 1371.39 L1293.22 1371.39 L1293.93 1371.39 L1294.63 1371.39 L1295.34 1371.39 L1296.05 1371.39 L1296.76 1371.39 L1297.47 1371.39 L1298.17 1371.39 L1298.88 1371.39 L1299.59 1371.39 L1300.3 1371.39 L1301 1371.39 L1301.71 1371.39 L1302.42 1371.39 L1303.13 1371.39 L1303.84 1371.39 L1304.54 1371.39 L1305.25 1371.39 L1305.96 1371.39 L1306.67 1371.39 L1307.37 1371.39 L1308.08 1371.39 L1308.79 1371.39 L1309.5 1371.39 L1310.21 1371.39 L1310.91 1371.39 L1311.62 1371.39 L1312.33 1371.39 L1313.04 1371.39 L1313.74 1371.39 L1314.45 1371.39 L1315.16 1371.39 L1315.87 1371.39 L1316.58 1371.39 L1317.28 1371.39 L1317.99 1371.39 L1318.7 1371.39 L1319.41 1371.39 L1320.11 1371.39 L1320.82 1371.39 L1321.53 1371.39 L1322.24 1371.39 L1322.95 1371.39 L1323.65 1371.39 L1324.36 1371.39 L1325.07 1371.39 L1325.78 1371.39 L1326.48 1371.39 L1327.19 1371.39 L1327.9 1371.39 L1328.61 1371.39 L1329.32 1371.39 L1330.02 1371.39 L1330.73 1371.39 L1331.44 1371.39 L1332.15 1371.39 L1332.85 1371.39 L1333.56 1371.39 L1334.27 1371.39 L1334.98 1371.39 L1335.69 1371.39 L1336.39 1371.39 L1337.1 1371.39 L1337.81 1371.39 L1338.52 1371.39 L1339.22 1371.39 L1339.93 1371.39 L1340.64 1371.39 L1341.35 1371.39 L1342.06 1371.39 L1342.76 1371.39 L1343.47 1371.39 L1344.18 1371.39 L1344.89 1371.39 L1345.59 1371.39 L1346.3 1371.39 L1347.01 1371.39 L1347.72 1371.39 L1348.43 1371.39 L1349.13 1371.39 L1349.84 1371.39 L1350.55 1371.39 L1351.26 1371.39 L1351.96 1371.39 L1352.67 1371.39 L1353.38 1371.39 L1354.09 1371.39 L1354.8 1371.39 L1355.5 1371.39 L1356.21 1371.39 L1356.92 1371.39 L1357.63 1371.39 L1358.33 1371.39 L1359.04 1371.39 L1359.75 1371.39 L1360.46 1371.39 L1361.17 1371.39 L1361.87 1371.39 L1362.58 1371.39 L1363.29 1371.39 L1364 1371.39 L1364.71 1371.39 L1365.41 1371.39 L1366.12 1371.39 L1366.83 1371.39 L1367.54 1371.39 L1368.24 1371.39 L1368.95 1371.39 L1369.66 1371.39 L1370.37 1371.39 L1371.08 1371.39 L1371.78 1371.39 L1372.49 1371.39 L1373.2 1371.39 L1373.91 1371.39 L1374.61 1371.39 L1375.32 1371.39 L1376.03 1371.39 L1376.74 1371.39 L1377.45 1371.39 L1378.15 1371.39 L1378.86 1371.39 L1379.57 1371.39 L1380.28 1371.39 L1380.98 1371.39 L1381.69 1371.39 L1382.4 1371.39 L1383.11 1371.39 L1383.82 1371.39 L1384.52 1371.39 L1385.23 1371.39 L1385.94 1371.39 L1386.65 1371.39 L1387.35 1371.39 L1388.06 1371.39 L1388.77 1371.39 L1389.48 1371.39 L1390.19 1371.39 L1390.89 1371.39 L1391.6 1371.39 L1392.31 1371.39 L1393.02 1371.39 L1393.72 1371.39 L1394.43 1371.39 L1395.14 1371.39 L1395.85 1371.39 L1396.56 1371.39 L1397.26 1371.39 L1397.97 1371.39 L1398.68 1371.39 L1399.39 1371.39 L1400.09 1371.39 L1400.8 1371.39 L1401.51 1371.39 L1402.22 1371.39 L1402.93 1371.39 L1403.63 1371.39 L1404.34 1371.39 L1405.05 1371.39 L1405.76 1371.39 L1406.46 1371.39 L1407.17 1371.39 L1407.88 1371.39 L1408.59 1371.39 L1409.3 1371.39 L1410 1371.39 L1410.71 1371.39 L1411.42 1371.39 L1412.13 1371.39 L1412.83 1371.39 L1413.54 1371.39 L1414.25 1371.39 L1414.96 1371.39 L1415.67 1371.39 L1416.37 1371.39 L1417.08 1371.39 L1417.79 1371.39 L1418.5 1371.39 L1419.2 1371.39 L1419.91 1371.39 L1420.62 1371.39 L1421.33 1371.39 L1422.04 1371.39 L1422.74 1371.39 L1423.45 1371.39 L1424.16 1371.39 L1424.87 1371.39 L1425.57 1371.39 L1426.28 1371.39 L1426.99 1371.39 L1427.7 1371.39 L1428.41 1371.39 L1429.11 1371.39 L1429.82 1371.39 L1430.53 1371.39 L1431.24 1371.39 L1431.94 1371.39 L1432.65 1371.39 L1433.36 1371.39 L1434.07 1371.39 L1434.78 1371.39 L1435.48 1371.39 L1436.19 1371.39 L1436.9 1371.39 L1437.61 1371.39 L1438.31 1371.39 L1439.02 1371.39 L1439.73 1371.39 L1440.44 1371.39 L1441.15 1371.39 L1441.85 1371.39 L1442.56 1371.39 L1443.27 1371.39 L1443.98 1371.39 L1444.69 1371.39 L1445.39 1371.39 L1446.1 1371.39 L1446.81 1371.39 L1447.52 1371.39 L1448.22 1371.39 L1448.93 1371.39 L1449.64 1371.39 L1450.35 1371.39 L1451.06 1371.39 L1451.76 1371.39 L1452.47 1371.39 L1453.18 1371.39 L1453.89 1371.39 L1454.59 1371.39 L1455.3 1371.39 L1456.01 1371.39 L1456.72 1371.39 L1457.43 1371.39 L1458.13 1371.39 L1458.84 1371.39 L1459.55 1371.39 L1460.26 1371.39 L1460.96 1371.39 L1461.67 1371.39 L1462.38 1371.39 L1463.09 1371.39 L1463.8 1371.39 L1464.5 1371.39 L1465.21 1371.39 L1465.92 1371.39 L1466.63 1371.39 L1467.33 1371.39 L1468.04 1371.39 L1468.75 1371.39 L1469.46 1371.39 L1470.17 1371.39 L1470.87 1371.39 L1471.58 1371.39 L1472.29 1371.39 L1473 1371.39 L1473.7 1371.39 L1474.41 1371.39 L1475.12 1371.39 L1475.83 1371.39 L1476.54 1371.39 L1477.24 1371.39 L1477.95 1371.39 L1478.66 1371.39 L1479.37 1371.39 L1480.07 1371.39 L1480.78 1371.39 L1481.49 1371.39 L1482.2 1371.39 L1482.91 1371.39 L1483.61 1371.39 L1484.32 1371.39 L1485.03 1371.39 L1485.74 1371.39 L1486.44 1371.39 L1487.15 1371.39 L1487.86 1371.39 L1488.57 1371.39 L1489.28 1371.39 L1489.98 1371.39 L1490.69 1371.39 L1491.4 1371.39 L1492.11 1371.39 L1492.81 1371.39 L1493.52 1371.39 L1494.23 1371.39 L1494.94 1371.39 L1495.65 1371.39 L1496.35 1371.39 L1497.06 1371.39 L1497.77 1371.39 L1498.48 1371.39 L1499.18 1371.39 L1499.89 1371.39 L1500.6 1371.39 L1501.31 1371.39 L1502.02 1371.39 L1502.72 1371.39 L1503.43 1371.39 L1504.14 1371.39 L1504.85 1371.39 L1505.55 1371.39 L1506.26 1371.39 L1506.97 1371.39 L1507.68 1371.39 L1508.39 1371.39 L1509.09 1371.39 L1509.8 1371.39 L1510.51 1371.39 L1511.22 1371.39 L1511.92 1371.39 L1512.63 1371.39 L1513.34 1371.39 L1514.05 1371.39 L1514.76 1371.39 L1515.46 1371.39 L1516.17 1371.39 L1516.88 1371.39 L1517.59 1371.39 L1518.3 1371.39 L1519 1371.39 L1519.71 1371.39 L1520.42 1371.39 L1521.13 1371.39 L1521.83 1371.39 L1522.54 1371.39 L1523.25 1371.39 L1523.96 1371.39 L1524.67 1371.39 L1525.37 1371.39 L1526.08 1371.39 L1526.79 1371.39 L1527.5 1371.39 L1528.2 1371.39 L1528.91 1371.39 L1529.62 1371.39 L1530.33 1371.39 L1531.04 1371.39 L1531.74 1371.39 L1532.45 1371.39 L1533.16 1371.39 L1533.87 1371.39 L1534.57 1371.39 L1535.28 1371.39 L1535.99 1371.39 L1536.7 1371.39 L1537.41 1371.39 L1538.11 1371.39 L1538.82 1371.39 L1539.53 1371.39 L1540.24 1371.39 L1540.94 1371.39 L1541.65 1371.39 L1542.36 1371.39 L1543.07 1371.39 L1543.78 1371.39 L1544.48 1371.39 L1545.19 1371.39 L1545.9 1371.39 L1546.61 1371.39 L1547.31 1371.39 L1548.02 1371.39 L1548.73 1371.39 L1549.44 1371.39 L1550.15 1371.39 L1550.85 1371.39 L1551.56 1371.39 L1552.27 1371.39 L1552.98 1371.39 L1553.68 1371.39 L1554.39 1371.39 L1555.1 1371.39 L1555.81 1371.39 L1556.52 1371.39 L1557.22 1371.39 L1557.93 1371.39 L1558.64 1371.39 L1559.35 1371.39 L1560.05 1371.39 L1560.76 1371.39 L1561.47 1371.39 L1562.18 1371.39 L1562.89 1371.39 L1563.59 1371.39 L1564.3 1371.39 L1565.01 1371.39 L1565.72 1371.39 L1566.42 1371.39 L1567.13 1371.39 L1567.84 1371.39 L1568.55 1371.39 L1569.26 1371.39 L1569.96 1371.39 L1570.67 1371.39 L1571.38 1371.39 L1572.09 1371.39 L1572.79 1371.39 L1573.5 1371.39 L1574.21 1371.39 L1574.92 1371.39 L1575.63 1371.39 L1576.33 1371.39 L1577.04 1371.39 L1577.75 1371.39 L1578.46 1371.39 L1579.16 1371.39 L1579.87 1371.39 L1580.58 1371.39 L1581.29 1371.39 L1582 1371.39 L1582.7 1371.39 L1583.41 1371.39 L1584.12 1371.39 L1584.83 1371.39 L1585.53 1371.39 L1586.24 1371.39 L1586.95 1371.39 L1587.66 1371.39 L1588.37 1371.39 L1589.07 1371.39 L1589.78 1371.39 L1590.49 1371.39 L1591.2 1371.39 L1591.9 1371.39 L1592.61 1371.39 L1593.32 1371.39 L1594.03 1371.39 L1594.74 1371.39 L1595.44 1371.39 L1596.15 1371.39 L1596.86 1371.39 L1597.57 1371.39 L1598.28 1371.39 L1598.98 1371.39 L1599.69 1371.39 L1600.4 1371.39 L1601.11 1371.39 L1601.81 1371.39 L1602.52 1371.39 L1603.23 1371.39 L1603.94 1371.39 L1604.65 1371.39 L1605.35 1371.39 L1606.06 1371.39 L1606.77 1371.39 L1607.48 1371.39 L1608.18 1371.39 L1608.89 1371.39 L1609.6 1371.39 L1610.31 1371.39 L1611.02 1371.39 L1611.72 1371.39 L1612.43 1371.39 L1613.14 1371.39 L1613.85 1371.39 L1614.55 1371.39 L1615.26 1371.39 L1615.97 1371.39 L1616.68 1371.39 L1617.39 1371.39 L1618.09 1371.39 L1618.8 1371.39 L1619.51 1371.39 L1620.22 1371.39 L1620.92 1371.39 L1621.63 1371.39 L1622.34 1371.39 L1623.05 1371.39 L1623.76 1371.39 L1624.46 1371.39 L1625.17 1371.39 L1625.88 1371.39 L1626.59 1371.39 L1627.29 1371.39 L1628 1371.39 L1628.71 1371.39 L1629.42 1371.39 L1630.13 1371.39 L1630.83 1371.39 L1631.54 1371.39 L1632.25 1371.39 L1632.96 1371.39 L1633.66 1371.39 L1634.37 1371.39 L1635.08 1371.39 L1635.79 1371.39 L1636.5 1371.39 L1637.2 1371.39 L1637.91 1371.39 L1638.62 1371.39 L1639.33 1371.39 L1640.03 1371.39 L1640.74 1371.39 L1641.45 1371.39 L1642.16 1371.39 L1642.87 1371.39 L1643.57 1371.39 L1644.28 1371.39 L1644.99 1371.39 L1645.7 1371.39 L1646.4 1371.39 L1647.11 1371.39 L1647.82 1371.39 L1648.53 1371.39 L1649.24 1371.39 L1649.94 1371.39 L1650.65 1371.39 L1651.36 1371.39 L1652.07 1371.39 L1652.77 1371.39 L1653.48 1371.39 L1654.19 1371.39 L1654.9 1371.39 L1655.61 1371.39 L1656.31 1371.39 L1657.02 1371.39 L1657.73 1371.39 L1658.44 1371.39 L1659.14 1371.39 L1659.85 1371.39 L1660.56 1371.39 L1661.27 1371.39 L1661.98 1371.39 L1662.68 1371.39 L1663.39 1371.39 L1664.1 1371.39 L1664.81 1371.39 L1665.51 1371.39 L1666.22 1371.39 L1666.93 1371.39 L1667.64 1371.39 L1668.35 1371.39 L1669.05 1371.39 L1669.76 1371.39 L1670.47 1371.39 L1671.18 1371.39 L1671.89 1371.39 L1672.59 1371.39 L1673.3 1371.39 L1674.01 1371.39 L1674.72 1371.39 L1675.42 1371.39 L1676.13 1371.39 L1676.84 1371.39 L1677.55 1371.39 L1678.26 1371.39 L1678.96 1371.39 L1679.67 1371.39 L1680.38 1371.39 L1681.09 1371.39 L1681.79 1371.39 L1682.5 1371.39 L1683.21 1371.39 L1683.92 1371.39 L1684.63 1371.39 L1685.33 1371.39 L1686.04 1371.39 L1686.75 1371.39 L1687.46 1371.39 L1688.16 1371.39 L1688.87 1371.39 L1689.58 1371.39 L1690.29 1371.39 L1691 1371.39 L1691.7 1371.39 L1692.41 1371.39 L1693.12 1371.39 L1693.83 1371.39 L1694.53 1371.39 L1695.24 1371.39 L1695.95 1371.39 L1696.66 1371.39 L1697.37 1371.39 L1698.07 1371.39 L1698.78 1371.39 L1699.49 1371.39 L1700.2 1371.39 L1700.9 1371.39 L1701.61 1371.39 L1702.32 1371.39 L1703.03 1371.39 L1703.74 1371.39 L1704.44 1371.39 L1705.15 1371.39 L1705.86 1371.39 L1706.57 1371.39 L1707.27 1371.39 L1707.98 1371.39 L1708.69 1371.39 L1709.4 1371.39 L1710.11 1371.39 L1710.81 1371.39 L1711.52 1371.39 L1712.23 1371.39 L1712.94 1371.39 L1713.64 1371.39 L1714.35 1371.39 L1715.06 1371.39 L1715.77 1371.39 L1716.48 1371.39 L1717.18 1371.39 L1717.89 1371.39 L1718.6 1371.39 L1719.31 1371.39 L1720.01 1371.39 L1720.72 1371.39 L1721.43 1371.39 L1722.14 1371.39 L1722.85 1371.39 L1723.55 1371.39 L1724.26 1371.39 L1724.97 1371.39 L1725.68 1371.39 L1726.38 1371.39 L1727.09 1371.39 L1727.8 1371.39 L1728.51 1371.39 L1729.22 1371.39 L1729.92 1371.39 L1730.63 1371.39 L1731.34 1371.39 L1732.05 1371.39 L1732.75 1371.39 L1733.46 1371.39 L1734.17 1371.39 L1734.88 1371.39 L1735.59 1371.39 L1736.29 1371.39 L1737 1371.39 L1737.71 1371.39 L1738.42 1371.39 L1739.12 1371.39 L1739.83 1371.39 L1740.54 1371.39 L1741.25 1371.39 L1741.96 1371.39 L1742.66 1371.39 L1743.37 1371.39 L1744.08 1371.39 L1744.79 1371.39 L1745.49 1371.39 L1746.2 1371.39 L1746.91 1371.39 L1747.62 1371.39 L1748.33 1371.39 L1749.03 1371.39 L1749.74 1371.39 L1750.45 1371.39 L1751.16 1371.39 L1751.87 1371.39 L1752.57 1371.39 L1753.28 1371.39 L1753.99 1371.39 L1754.7 1371.39 L1755.4 1371.39 L1756.11 1371.39 L1756.82 1371.39 L1757.53 1371.39 L1758.24 1371.39 L1758.94 1371.39 L1759.65 1371.39 L1760.36 1371.39 L1761.07 1371.39 L1761.77 1371.39 L1762.48 1371.39 L1763.19 1371.39 L1763.9 1371.39 L1764.61 1371.39 L1765.31 1371.39 L1766.02 1371.39 L1766.73 1371.39 L1767.44 1371.39 L1768.14 1371.39 L1768.85 1371.39 L1769.56 1371.39 L1770.27 1371.39 L1770.98 1371.39 L1771.68 1371.39 L1772.39 1371.39 L1773.1 1371.39 L1773.81 1371.39 L1774.51 1371.39 L1775.22 1371.39 L1775.93 1371.39 L1776.64 1371.39 L1777.35 1371.39 L1778.05 1371.39 L1778.76 1371.39 L1779.47 1371.39 L1780.18 1371.39 L1780.88 1371.39 L1781.59 1371.39 L1782.3 1371.39 L1783.01 1371.39 L1783.72 1371.39 L1784.42 1371.39 L1785.13 1371.39 L1785.84 1371.39 L1786.55 1371.39 L1787.25 1371.39 L1787.96 1371.39 L1788.67 1371.39 L1789.38 1371.39 L1790.09 1371.39 L1790.79 1371.39 L1791.5 1371.39 L1792.21 1371.39 L1792.92 1371.39 L1793.62 1371.39 L1794.33 1371.39 L1795.04 1371.39 L1795.75 1371.39 L1796.46 1371.39 L1797.16 1371.39 L1797.87 1371.39 L1798.58 1371.39 L1799.29 1371.39 L1799.99 1371.39 L1800.7 1371.39 L1801.41 1371.39 L1802.12 1371.39 L1802.83 1371.39 L1803.53 1371.39 L1804.24 1371.39 L1804.95 1371.39 L1805.66 1371.39 L1806.36 1371.39 L1807.07 1371.39 L1807.78 1371.39 L1808.49 1371.39 L1809.2 1371.39 L1809.9 1371.39 L1810.61 1371.39 L1811.32 1371.39 L1812.03 1371.39 L1812.73 1371.39 L1813.44 1371.39 L1814.15 1371.39 L1814.86 1371.39 L1815.57 1371.39 L1816.27 1371.39 L1816.98 1371.39 L1817.69 1371.39 L1818.4 1371.39 L1819.1 1371.39 L1819.81 1371.39 L1820.52 1371.39 L1821.23 1371.39 L1821.94 1371.39 L1822.64 1371.39 L1823.35 1371.39 L1824.06 1371.39 L1824.77 1371.39 L1825.48 1371.39 L1826.18 1371.39 L1826.89 1371.39 L1827.6 1371.39 L1828.31 1371.39 L1829.01 1371.39 L1829.72 1371.39 L1830.43 1371.39 L1831.14 1371.39 L1831.85 1371.39 L1832.55 1371.39 L1833.26 1371.39 L1833.97 1371.39 L1834.68 1371.39 L1835.38 1371.39 L1836.09 1371.39 L1836.8 1371.39 L1837.51 1371.39 L1838.22 1371.39 L1838.92 1371.39 L1839.63 1371.39 L1840.34 1371.39 L1841.05 1371.39 L1841.75 1371.39 L1842.46 1371.39 L1843.17 1371.39 L1843.88 1371.39 L1844.59 1371.39 L1845.29 1371.39 L1846 1371.39 L1846.71 1371.39 L1847.42 1371.39 L1848.12 1371.39 L1848.83 1371.39 L1849.54 1371.39 L1850.25 1371.39 L1850.96 1371.39 L1851.66 1371.39 L1852.37 1371.39 L1853.08 1371.39 L1853.79 1371.39 L1854.49 1371.39 L1855.2 1371.39 L1855.91 1371.39 L1856.62 1371.39 L1857.33 1371.39 L1858.03 1371.39 L1858.74 1371.39 L1859.45 1371.39 L1860.16 1371.39 L1860.86 1371.39 L1861.57 1371.39 L1862.28 1371.39 L1862.99 1371.39 L1863.7 1371.39 L1864.4 1371.39 L1865.11 1371.39 L1865.82 1371.39 L1866.53 1371.39 L1867.23 1371.39 L1867.94 1371.39 L1868.65 1371.39 L1869.36 1371.39 L1870.07 1371.39 L1870.77 1371.39 L1871.48 1371.39 L1872.19 1371.39 L1872.9 1371.39 L1873.6 1371.39 L1874.31 1371.39 L1875.02 1371.39 L1875.73 1371.39 L1876.44 1371.39 L1877.14 1371.39 L1877.85 1371.39 L1878.56 1371.39 L1879.27 1371.39 L1879.97 1371.39 L1880.68 1371.39 L1881.39 1371.39 L1882.1 1371.39 L1882.81 1371.39 L1883.51 1371.39 L1884.22 1371.39 L1884.93 1371.39 L1885.64 1371.39 L1886.34 1371.39 L1887.05 1371.39 L1887.76 1371.39 L1888.47 1371.39 L1889.18 1371.39 L1889.88 1371.39 L1890.59 1371.39 L1891.3 1371.39 L1892.01 1371.39 L1892.71 1371.39 L1893.42 1371.39 L1894.13 1371.39 L1894.84 1371.39 L1895.55 1371.39 L1896.25 1371.39 L1896.96 1371.39 L1897.67 1371.39 L1898.38 1371.39 L1899.08 1371.39 L1899.79 1371.39 L1900.5 1371.39 L1901.21 1371.39 L1901.92 1371.39 L1902.62 1371.39 L1903.33 1371.39 L1904.04 1371.39 L1904.75 1371.39 L1905.46 1371.39 L1906.16 1371.39 L1906.87 1371.39 L1907.58 1371.39 L1908.29 1371.39 L1908.99 1371.39 L1909.7 1371.39 L1910.41 1371.39 L1911.12 1371.39 L1911.83 1371.39 L1912.53 1371.39 L1913.24 1371.39 L1913.95 1371.39 L1914.66 1371.39 L1915.36 1371.39 L1916.07 1371.39 L1916.78 1371.39 L1917.49 1371.39 L1918.2 1371.39 L1918.9 1371.39 L1919.61 1371.39 L1920.32 1371.39 L1921.03 1371.39 L1921.73 1371.39 L1922.44 1371.39 L1923.15 1371.39 L1923.86 1371.39 L1924.57 1371.39 L1925.27 1371.39 L1925.98 1371.39 L1926.69 1371.39 L1927.4 1371.39 L1928.1 1371.39 L1928.81 1371.39 L1929.52 1371.39 L1930.23 1371.39 L1930.94 1371.39 L1931.64 1371.39 L1932.35 1371.39 L1933.06 1371.39 L1933.77 1371.39 L1934.47 1371.39 L1935.18 1371.39 L1935.89 1371.39 L1936.6 1371.39 L1937.31 1371.39 L1938.01 1371.39 L1938.72 1371.39 L1939.43 1371.39 L1940.14 1371.39 L1940.84 1371.39 L1941.55 1371.39 L1942.26 1371.39 L1942.97 1371.39 L1943.68 1371.39 L1944.38 1371.39 L1945.09 1371.39 L1945.8 1371.39 L1946.51 1371.39 L1947.21 1371.39 L1947.92 1371.39 L1948.63 1371.39 L1949.34 1371.39 L1950.05 1371.39 L1950.75 1371.39 L1951.46 1371.39 L1952.17 1371.39 L1952.88 1371.39 L1953.58 1371.39 L1954.29 1371.39 L1955 1371.39 L1955.71 1371.39 L1956.42 1371.39 L1957.12 1371.39 L1957.83 1371.39 L1958.54 1371.39 L1959.25 1371.39 L1959.95 1371.39 L1960.66 1371.39 L1961.37 1371.39 L1962.08 1371.39 L1962.79 1371.39 L1963.49 1371.39 L1964.2 1371.39 L1964.91 1371.39 L1965.62 1371.39 L1966.32 1371.39 L1967.03 1371.39 L1967.74 1371.39 L1968.45 1371.39 L1969.16 1371.39 L1969.86 1371.39 L1970.57 1371.39 L1971.28 1371.39 L1971.99 1371.39 L1972.69 1371.39 L1973.4 1371.39 L1974.11 1371.39 L1974.82 1371.39 L1975.53 1371.39 L1976.23 1371.39 L1976.94 1371.39 L1977.65 1371.39 L1978.36 1371.39 L1979.07 1371.39 L1979.77 1371.39 L1980.48 1371.39 L1981.19 1371.39 L1981.9 1371.39 L1982.6 1371.39 L1983.31 1371.39 L1984.02 1371.39 L1984.73 1371.39 L1985.44 1371.39 L1986.14 1371.39 L1986.85 1371.39 L1987.56 1371.39 L1988.27 1371.39 L1988.97 1371.39 L1989.68 1371.39 L1990.39 1371.39 L1991.1 1371.39 L1991.81 1371.39 L1992.51 1371.39 L1993.22 1371.39 L1993.93 1371.39 L1994.64 1371.39 L1995.34 1371.39 L1996.05 1371.39 L1996.76 1371.39 L1997.47 1371.39 L1998.18 1371.39 L1998.88 1371.39 L1999.59 1371.39 L2000.3 1371.39 L2001.01 1371.39 L2001.71 1371.39 L2002.42 1371.39 L2003.13 1371.39 L2003.84 1371.39 L2004.55 1371.39 L2005.25 1371.39 L2005.96 1371.39 L2006.67 1371.39 L2007.38 1371.39 L2008.08 1371.39 L2008.79 1371.39 L2009.5 1371.39 L2010.21 1371.39 L2010.92 1371.39 L2011.62 1371.39 L2012.33 1371.39 L2013.04 1371.39 L2013.75 1371.39 L2014.45 1371.39 L2015.16 1371.39 L2015.87 1371.39 L2016.58 1371.39 L2017.29 1371.39 L2017.99 1371.39 L2018.7 1371.39 L2019.41 1371.39 L2020.12 1371.39 L2020.82 1371.39 L2021.53 1371.39 L2022.24 1371.39 L2022.95 1371.39 L2023.66 1371.39 L2024.36 1371.39 L2025.07 1371.39 L2025.78 1371.39 L2026.49 1371.39 L2027.19 1371.39 L2027.9 1371.39 L2028.61 1371.39 L2029.32 1371.39 L2030.03 1371.39 L2030.73 1371.39 L2031.44 1371.39 L2032.15 1371.39 L2032.86 1371.39 L2033.56 1371.39 L2034.27 1371.39 L2034.98 1371.39 L2035.69 1371.39 L2036.4 1371.39 L2037.1 1371.39 L2037.81 1371.39 L2038.52 1371.39 L2039.23 1371.39 L2039.93 1371.39 L2040.64 1371.39 L2041.35 1371.39 L2042.06 1371.39 L2042.77 1371.39 L2043.47 1371.39 L2044.18 1371.39 L2044.89 1371.39 L2045.6 1371.39 L2046.3 1371.39 L2047.01 1371.39 L2047.72 1371.39 L2048.43 1371.39 L2049.14 1371.39 L2049.84 1371.39 L2050.55 1371.39 L2051.26 1371.39 L2051.97 1371.39 L2052.68 1371.39 L2053.38 1371.39 L2054.09 1371.39 L2054.8 1371.39 L2055.51 1371.39 L2056.21 1371.39 L2056.92 1371.39 L2057.63 1371.39 L2058.34 1371.39 L2059.05 1371.39 L2059.75 1371.39 L2060.46 1371.39 L2061.17 1371.39 L2061.88 1371.39 L2062.58 1371.39 L2063.29 1371.39 L2064 1371.39 L2064.71 1371.39 L2065.42 1371.39 L2066.12 1371.39 L2066.83 1371.39 L2067.54 1371.39 L2068.25 1371.39 L2068.95 1371.39 L2069.66 1371.39 L2070.37 1371.39 L2071.08 1371.39 L2071.79 1371.39 L2072.49 1371.39 L2073.2 1371.39 L2073.91 1371.39 L2074.62 1371.39 L2075.32 1371.39 L2076.03 1371.39 L2076.74 1371.39 L2077.45 1371.39 L2078.16 1371.39 L2078.86 1371.39 L2079.57 1371.39 L2080.28 1371.39 L2080.99 1371.39 L2081.69 1371.39 L2082.4 1371.39 L2083.11 1371.39 L2083.82 1371.39 L2084.53 1371.39 L2085.23 1371.39 L2085.94 1371.39 L2086.65 1371.39 L2087.36 1371.39 L2088.06 1371.39 L2088.77 1371.39 L2089.48 1371.39 L2090.19 1371.39 L2090.9 1371.39 L2091.6 1371.39 L2092.31 1371.39 L2093.02 1371.39 L2093.73 1371.39 L2094.43 1371.39 L2095.14 1371.39 L2095.85 1371.39 L2096.56 1371.39 L2097.27 1371.39 L2097.97 1371.39 L2098.68 1371.39 L2099.39 1371.39 L2100.1 1371.39 L2100.8 1371.39 L2101.51 1371.39 L2102.22 1371.39 L2102.93 1371.39 L2103.64 1371.39 L2104.34 1371.39 L2105.05 1371.39 L2105.76 1371.39 L2106.47 1371.39 L2107.17 1371.39 L2107.88 1371.39 L2108.59 1371.39 L2109.3 1371.39 L2110.01 1371.39 L2110.71 1371.39 L2111.42 1371.39 L2112.13 1371.39 L2112.84 1371.39 L2113.54 1371.39 L2114.25 1371.39 L2114.96 1371.39 L2115.67 1371.39 L2116.38 1371.39 L2117.08 1371.39 L2117.79 1371.39 L2118.5 1371.39 L2119.21 1371.39 L2119.91 1371.39 L2120.62 1371.39 L2121.33 1371.39 L2122.04 1371.39 L2122.75 1371.39 L2123.45 1371.39 L2124.16 1371.39 L2124.87 1371.39 L2125.58 1371.39 L2126.28 1371.39 L2126.99 1371.39 L2127.7 1371.39 L2128.41 1371.39 L2129.12 1371.39 L2129.82 1371.39 L2130.53 1371.39 L2131.24 1371.39 L2131.95 1371.39 L2132.66 1371.39 L2133.36 1371.39 L2134.07 1371.39 L2134.78 1371.39 L2135.49 1371.39 L2136.19 1371.39 L2136.9 1371.39 L2137.61 1371.39 L2138.32 1371.39 L2139.03 1371.39 L2139.73 1371.39 L2140.44 1371.39 L2141.15 1371.39 L2141.86 1371.39 L2142.56 1371.39 L2143.27 1371.39 L2143.98 1371.39 L2144.69 1371.39 L2145.4 1371.39 L2146.1 1371.39 L2146.81 1371.39 L2147.52 1371.39 L2148.23 1371.39 L2148.93 1371.39 L2149.64 1371.39 L2150.35 1371.39 L2151.06 1371.39 L2151.77 1371.39 L2152.47 1371.39 L2153.18 1371.39 L2153.89 1371.39 L2154.6 1371.39 L2155.3 1371.39 L2156.01 1371.39 L2156.72 1371.39 L2157.43 1371.39 L2158.14 1371.39 L2158.84 1371.39 L2159.55 1371.39 L2160.26 1371.39 L2160.97 1371.39 L2161.67 1371.39 L2162.38 1371.39 L2163.09 1371.39 L2163.8 1371.39 L2164.51 1371.39 L2165.21 1371.39 L2165.92 1371.39 L2166.63 1371.39 L2167.34 1371.39 L2168.04 1371.39 L2168.75 1371.39 L2169.46 1371.39 L2170.17 1371.39 L2170.88 1371.39 L2171.58 1371.39 L2172.29 1371.39 L2173 1371.39 L2173.71 1371.39 L2174.41 1371.39 L2175.12 1371.39 L2175.83 1371.39 L2176.54 1371.39 L2177.25 1371.39 L2177.95 1371.39 L2178.66 1371.39 L2179.37 1371.39 L2180.08 1371.39 L2180.78 1371.39 L2181.49 1371.39 L2182.2 1371.39 L2182.91 1371.39 L2183.62 1371.39 L2184.32 1371.39 L2185.03 1371.39 L2185.74 1371.39 L2186.45 1371.39 L2187.15 1371.39 L2187.86 1371.39 L2188.57 1371.39 L2189.28 1371.39 L2189.99 1371.39 L2190.69 1371.39 L2191.4 1371.39 L2192.11 1371.39 L2192.82 1371.39 L2193.52 1371.39 L2194.23 1371.39 L2194.94 1371.39 L2195.65 1371.39 L2196.36 1371.39 L2197.06 1371.39 L2197.77 1371.39 L2198.48 1371.39 L2199.19 1371.39 L2199.89 1371.39 L2200.6 1371.39 L2201.31 1371.39 L2202.02 1371.39 L2202.73 1371.39 L2203.43 1371.39 L2204.14 1371.39 L2204.85 1371.39 L2205.56 1371.39 L2206.27 1371.39 L2206.97 1371.39 L2207.68 1371.39 L2208.39 1371.39 L2209.1 1371.39 L2209.8 1371.39 L2210.51 1371.39 L2211.22 1371.39 L2211.93 1371.39 L2212.64 1371.39 L2213.34 1371.39 L2214.05 1371.39 L2214.76 1371.39 L2215.47 1371.39 L2216.17 1371.39 L2216.88 1371.39 L2217.59 1371.39 L2218.3 1371.39 L2219.01 1371.39 L2219.71 1371.39 L2220.42 1371.39 L2221.13 1371.39 L2221.84 1371.39 L2222.54 1371.39 L2223.25 1371.39 L2223.96 1371.39 L2224.67 1371.39 L2225.38 1371.39 L2226.08 1371.39 L2226.79 1371.39 L2227.5 1371.39 L2228.21 1371.39 L2228.91 1371.39 L2229.62 1371.39 L2230.33 1371.39 L2231.04 1371.39 L2231.75 1371.39 L2232.45 1371.39 L2233.16 1371.39 L2233.87 1371.39 L2234.58 1371.39 L2235.28 1371.39 L2235.99 1371.39 L2236.7 1371.39 L2237.41 1371.39 L2238.12 1371.39 L2238.82 1371.39 L2239.53 1371.39 L2240.24 1371.39 L2240.95 1371.39 L2241.65 1371.39 L2242.36 1371.39 L2243.07 1371.39 L2243.78 1371.39 L2244.49 1371.39 L2245.19 1371.39 L2245.9 1371.39 L2246.61 1371.39 L2247.32 1371.39 L2248.02 1371.39 L2248.73 1371.39 L2249.44 1371.39 L2250.15 1371.39 L2250.86 1371.39 L2251.56 1371.39 L2252.27 1371.39 L2252.98 1371.39 L2253.69 1371.39 L2254.39 1371.39 L2255.1 1371.39 L2255.81 1371.39 L2256.52 1371.39 L2257.23 1371.39 L2257.93 1371.39 L2258.64 1371.39 L2259.35 1371.39 L2260.06 1371.39 L2260.76 1371.39 L2261.47 1371.39 L2262.18 1371.39 L2262.89 1371.39 L2263.6 1371.39 L2264.3 1371.39 L2265.01 1371.39 L2265.72 1371.39 L2266.43 1371.39 L2267.13 1371.39 L2267.84 1371.39 L2268.55 1371.39 L2269.26 1371.39 L2269.97 1371.39 L2270.67 1371.39 L2271.38 1371.39 L2272.09 1371.39 L2272.8 1371.39 L2273.5 1371.39 L2274.21 1371.39 L2274.92 1371.39 L2275.63 1371.39 L2276.34 1371.39 L2277.04 1371.39 L2277.75 1371.39 L2278.46 1371.39 L2279.17 1371.39 L2279.87 1371.39 L2280.58 1371.39 L2281.29 1371.39 L2282 1371.39 L2282.71 1371.39 L2283.41 1371.39 L2284.12 1371.39 L2284.83 1371.39 L2285.54 1371.39 L2286.25 1371.39 L2286.95 1371.39 L2287.66 1371.39 L2288.37 1371.39 L2289.08 1371.39 L2289.08 1368 L2288.37 1368 L2287.66 1368 L2286.95 1368 L2286.25 1368 L2285.54 1368 L2284.83 1368 L2284.12 1368 L2283.41 1368 L2282.71 1368 L2282 1368 L2281.29 1368 L2280.58 1368 L2279.87 1368 L2279.17 1368 L2278.46 1368 L2277.75 1368 L2277.04 1368 L2276.34 1368 L2275.63 1368 L2274.92 1368 L2274.21 1368 L2273.5 1368 L2272.8 1368 L2272.09 1368 L2271.38 1368 L2270.67 1368 L2269.97 1368 L2269.26 1368 L2268.55 1368 L2267.84 1368 L2267.13 1368 L2266.43 1368 L2265.72 1368 L2265.01 1368 L2264.3 1368 L2263.6 1368 L2262.89 1368 L2262.18 1368 L2261.47 1368 L2260.76 1368 L2260.06 1368 L2259.35 1368 L2258.64 1368 L2257.93 1368 L2257.23 1368 L2256.52 1368 L2255.81 1368 L2255.1 1368 L2254.39 1368 L2253.69 1368 L2252.98 1368 L2252.27 1368 L2251.56 1368 L2250.86 1368 L2250.15 1368 L2249.44 1368 L2248.73 1368 L2248.02 1368 L2247.32 1368 L2246.61 1368 L2245.9 1368 L2245.19 1368 L2244.49 1368 L2243.78 1368 L2243.07 1368 L2242.36 1368 L2241.65 1368 L2240.95 1368 L2240.24 1368 L2239.53 1368 L2238.82 1368 L2238.12 1368 L2237.41 1368 L2236.7 1368 L2235.99 1368 L2235.28 1368 L2234.58 1368 L2233.87 1368 L2233.16 1368 L2232.45 1368 L2231.75 1368 L2231.04 1368 L2230.33 1368 L2229.62 1368 L2228.91 1368 L2228.21 1368 L2227.5 1368 L2226.79 1368 L2226.08 1368 L2225.38 1368 L2224.67 1368 L2223.96 1368 L2223.25 1368 L2222.54 1368 L2221.84 1368 L2221.13 1368 L2220.42 1368 L2219.71 1368 L2219.01 1368 L2218.3 1368 L2217.59 1368 L2216.88 1368 L2216.17 1368 L2215.47 1368 L2214.76 1368 L2214.05 1368 L2213.34 1368 L2212.64 1368 L2211.93 1368 L2211.22 1368 L2210.51 1368 L2209.8 1368 L2209.1 1368 L2208.39 1368 L2207.68 1368 L2206.97 1368 L2206.27 1368 L2205.56 1368 L2204.85 1368 L2204.14 1368 L2203.43 1368 L2202.73 1368 L2202.02 1368 L2201.31 1368 L2200.6 1368 L2199.89 1368 L2199.19 1368 L2198.48 1368 L2197.77 1368 L2197.06 1368 L2196.36 1368 L2195.65 1368 L2194.94 1368 L2194.23 1368 L2193.52 1368 L2192.82 1368 L2192.11 1368 L2191.4 1368 L2190.69 1368 L2189.99 1368 L2189.28 1368 L2188.57 1368 L2187.86 1368 L2187.15 1368 L2186.45 1368 L2185.74 1368 L2185.03 1368 L2184.32 1368 L2183.62 1368 L2182.91 1368 L2182.2 1368 L2181.49 1368 L2180.78 1368 L2180.08 1368 L2179.37 1368 L2178.66 1368 L2177.95 1368 L2177.25 1368 L2176.54 1368 L2175.83 1368 L2175.12 1368 L2174.41 1368 L2173.71 1368 L2173 1368 L2172.29 1368 L2171.58 1368 L2170.88 1368 L2170.17 1368 L2169.46 1368 L2168.75 1368 L2168.04 1368 L2167.34 1368 L2166.63 1368 L2165.92 1368 L2165.21 1368 L2164.51 1368 L2163.8 1368 L2163.09 1368 L2162.38 1368 L2161.67 1368 L2160.97 1368 L2160.26 1368 L2159.55 1368 L2158.84 1368 L2158.14 1368 L2157.43 1368 L2156.72 1368 L2156.01 1368 L2155.3 1368 L2154.6 1368 L2153.89 1368 L2153.18 1368 L2152.47 1368 L2151.77 1368 L2151.06 1368 L2150.35 1368 L2149.64 1368 L2148.93 1368 L2148.23 1368 L2147.52 1368 L2146.81 1368 L2146.1 1368 L2145.4 1368 L2144.69 1368 L2143.98 1368 L2143.27 1368 L2142.56 1368 L2141.86 1368 L2141.15 1368 L2140.44 1368 L2139.73 1368 L2139.03 1368 L2138.32 1368 L2137.61 1368 L2136.9 1368 L2136.19 1368 L2135.49 1368 L2134.78 1368 L2134.07 1368 L2133.36 1368 L2132.66 1368 L2131.95 1368 L2131.24 1368 L2130.53 1368 L2129.82 1368 L2129.12 1368 L2128.41 1368 L2127.7 1368 L2126.99 1368 L2126.28 1368 L2125.58 1368 L2124.87 1368 L2124.16 1368 L2123.45 1368 L2122.75 1368 L2122.04 1368 L2121.33 1368 L2120.62 1368 L2119.91 1368 L2119.21 1368 L2118.5 1368 L2117.79 1368 L2117.08 1368 L2116.38 1368 L2115.67 1368 L2114.96 1368 L2114.25 1368 L2113.54 1368 L2112.84 1368 L2112.13 1368 L2111.42 1368 L2110.71 1368 L2110.01 1368 L2109.3 1368 L2108.59 1368 L2107.88 1368 L2107.17 1368 L2106.47 1368 L2105.76 1368 L2105.05 1368 L2104.34 1368 L2103.64 1368 L2102.93 1368 L2102.22 1368 L2101.51 1368 L2100.8 1368 L2100.1 1368 L2099.39 1368 L2098.68 1368 L2097.97 1368 L2097.27 1368 L2096.56 1368 L2095.85 1368 L2095.14 1368 L2094.43 1368 L2093.73 1368 L2093.02 1368 L2092.31 1368 L2091.6 1368 L2090.9 1368 L2090.19 1368 L2089.48 1368 L2088.77 1368 L2088.06 1368 L2087.36 1368 L2086.65 1368 L2085.94 1368 L2085.23 1368 L2084.53 1368 L2083.82 1368 L2083.11 1368 L2082.4 1368 L2081.69 1368 L2080.99 1368 L2080.28 1368 L2079.57 1368 L2078.86 1368 L2078.16 1368 L2077.45 1368 L2076.74 1368 L2076.03 1368 L2075.32 1368 L2074.62 1368 L2073.91 1368 L2073.2 1368 L2072.49 1368 L2071.79 1368 L2071.08 1368 L2070.37 1368 L2069.66 1368 L2068.95 1368 L2068.25 1368 L2067.54 1368 L2066.83 1368 L2066.12 1368 L2065.42 1368 L2064.71 1368 L2064 1368 L2063.29 1368 L2062.58 1368 L2061.88 1368 L2061.17 1368 L2060.46 1368 L2059.75 1368 L2059.05 1368 L2058.34 1368 L2057.63 1368 L2056.92 1368 L2056.21 1368 L2055.51 1368 L2054.8 1368 L2054.09 1368 L2053.38 1368 L2052.68 1368 L2051.97 1368 L2051.26 1368 L2050.55 1368 L2049.84 1368 L2049.14 1368 L2048.43 1368 L2047.72 1368 L2047.01 1368 L2046.3 1368 L2045.6 1368 L2044.89 1368 L2044.18 1368 L2043.47 1368 L2042.77 1368 L2042.06 1368 L2041.35 1368 L2040.64 1368 L2039.93 1368 L2039.23 1368 L2038.52 1368 L2037.81 1368 L2037.1 1368 L2036.4 1368 L2035.69 1368 L2034.98 1368 L2034.27 1368 L2033.56 1368 L2032.86 1368 L2032.15 1368 L2031.44 1368 L2030.73 1368 L2030.03 1368 L2029.32 1368 L2028.61 1368 L2027.9 1368 L2027.19 1368 L2026.49 1368 L2025.78 1368 L2025.07 1368 L2024.36 1368 L2023.66 1368 L2022.95 1368 L2022.24 1368 L2021.53 1368 L2020.82 1368 L2020.12 1368 L2019.41 1368 L2018.7 1368 L2017.99 1368 L2017.29 1368 L2016.58 1368 L2015.87 1368 L2015.16 1368 L2014.45 1368 L2013.75 1368 L2013.04 1368 L2012.33 1368 L2011.62 1368 L2010.92 1368 L2010.21 1368 L2009.5 1368 L2008.79 1368 L2008.08 1368 L2007.38 1368 L2006.67 1368 L2005.96 1368 L2005.25 1368 L2004.55 1368 L2003.84 1368 L2003.13 1368 L2002.42 1368 L2001.71 1368 L2001.01 1368 L2000.3 1368 L1999.59 1368 L1998.88 1368 L1998.18 1368 L1997.47 1368 L1996.76 1368 L1996.05 1368 L1995.34 1368 L1994.64 1368 L1993.93 1368 L1993.22 1368 L1992.51 1368 L1991.81 1368 L1991.1 1368 L1990.39 1368 L1989.68 1368 L1988.97 1368 L1988.27 1368 L1987.56 1368 L1986.85 1368 L1986.14 1368 L1985.44 1368 L1984.73 1368 L1984.02 1368 L1983.31 1368 L1982.6 1368 L1981.9 1368 L1981.19 1368 L1980.48 1368 L1979.77 1368 L1979.07 1368 L1978.36 1368 L1977.65 1368 L1976.94 1368 L1976.23 1368 L1975.53 1368 L1974.82 1368 L1974.11 1368 L1973.4 1368 L1972.69 1368 L1971.99 1368 L1971.28 1368 L1970.57 1368 L1969.86 1368 L1969.16 1368 L1968.45 1368 L1967.74 1368 L1967.03 1368 L1966.32 1368 L1965.62 1368 L1964.91 1368 L1964.2 1368 L1963.49 1368 L1962.79 1368 L1962.08 1368 L1961.37 1368 L1960.66 1368 L1959.95 1368 L1959.25 1368 L1958.54 1368 L1957.83 1368 L1957.12 1368 L1956.42 1368 L1955.71 1368 L1955 1368 L1954.29 1368 L1953.58 1368 L1952.88 1368 L1952.17 1368 L1951.46 1368 L1950.75 1368 L1950.05 1368 L1949.34 1368 L1948.63 1368 L1947.92 1368 L1947.21 1368 L1946.51 1368 L1945.8 1368 L1945.09 1368 L1944.38 1368 L1943.68 1368 L1942.97 1368 L1942.26 1368 L1941.55 1368 L1940.84 1368 L1940.14 1368 L1939.43 1368 L1938.72 1368 L1938.01 1368 L1937.31 1368 L1936.6 1368 L1935.89 1368 L1935.18 1368 L1934.47 1368 L1933.77 1368 L1933.06 1368 L1932.35 1368 L1931.64 1368 L1930.94 1368 L1930.23 1368 L1929.52 1368 L1928.81 1368 L1928.1 1368 L1927.4 1368 L1926.69 1368 L1925.98 1368 L1925.27 1368 L1924.57 1368 L1923.86 1368 L1923.15 1368 L1922.44 1368 L1921.73 1368 L1921.03 1368 L1920.32 1368 L1919.61 1368 L1918.9 1368 L1918.2 1368 L1917.49 1368 L1916.78 1368 L1916.07 1368 L1915.36 1368 L1914.66 1368 L1913.95 1368 L1913.24 1368 L1912.53 1368 L1911.83 1368 L1911.12 1368 L1910.41 1368 L1909.7 1368 L1908.99 1368 L1908.29 1368 L1907.58 1368 L1906.87 1368 L1906.16 1368 L1905.46 1368 L1904.75 1368 L1904.04 1368 L1903.33 1368 L1902.62 1368 L1901.92 1368 L1901.21 1368 L1900.5 1368 L1899.79 1368 L1899.08 1368 L1898.38 1368 L1897.67 1368 L1896.96 1368 L1896.25 1368 L1895.55 1368 L1894.84 1368 L1894.13 1368 L1893.42 1368 L1892.71 1368 L1892.01 1368 L1891.3 1368 L1890.59 1368 L1889.88 1368 L1889.18 1368 L1888.47 1368 L1887.76 1368 L1887.05 1368 L1886.34 1368 L1885.64 1368 L1884.93 1368 L1884.22 1368 L1883.51 1368 L1882.81 1368 L1882.1 1368 L1881.39 1368 L1880.68 1368 L1879.97 1368 L1879.27 1368 L1878.56 1368 L1877.85 1368 L1877.14 1368 L1876.44 1368 L1875.73 1368 L1875.02 1368 L1874.31 1368 L1873.6 1368 L1872.9 1368 L1872.19 1368 L1871.48 1368 L1870.77 1368 L1870.07 1368 L1869.36 1368 L1868.65 1368 L1867.94 1368 L1867.23 1368 L1866.53 1368 L1865.82 1368 L1865.11 1368 L1864.4 1368 L1863.7 1368 L1862.99 1368 L1862.28 1368 L1861.57 1368 L1860.86 1368 L1860.16 1368 L1859.45 1368 L1858.74 1368 L1858.03 1368 L1857.33 1368 L1856.62 1368 L1855.91 1368 L1855.2 1368 L1854.49 1368 L1853.79 1368 L1853.08 1368 L1852.37 1368 L1851.66 1368 L1850.96 1368 L1850.25 1368 L1849.54 1368 L1848.83 1368 L1848.12 1368 L1847.42 1368 L1846.71 1368 L1846 1368 L1845.29 1368 L1844.59 1368 L1843.88 1368 L1843.17 1368 L1842.46 1368 L1841.75 1368 L1841.05 1368 L1840.34 1368 L1839.63 1368 L1838.92 1368 L1838.22 1368 L1837.51 1368 L1836.8 1368 L1836.09 1368 L1835.38 1368 L1834.68 1368 L1833.97 1368 L1833.26 1368 L1832.55 1368 L1831.85 1368 L1831.14 1368 L1830.43 1368 L1829.72 1368 L1829.01 1368 L1828.31 1368 L1827.6 1368 L1826.89 1368 L1826.18 1368 L1825.48 1368 L1824.77 1368 L1824.06 1368 L1823.35 1368 L1822.64 1368 L1821.94 1368 L1821.23 1368 L1820.52 1368 L1819.81 1368 L1819.1 1368 L1818.4 1368 L1817.69 1368 L1816.98 1368 L1816.27 1368 L1815.57 1368 L1814.86 1368 L1814.15 1368 L1813.44 1368 L1812.73 1368 L1812.03 1368 L1811.32 1368 L1810.61 1368 L1809.9 1368 L1809.2 1368 L1808.49 1368 L1807.78 1368 L1807.07 1368 L1806.36 1368 L1805.66 1368 L1804.95 1368 L1804.24 1368 L1803.53 1368 L1802.83 1368 L1802.12 1368 L1801.41 1368 L1800.7 1368 L1799.99 1368 L1799.29 1368 L1798.58 1368 L1797.87 1368 L1797.16 1368 L1796.46 1368 L1795.75 1368 L1795.04 1368 L1794.33 1368 L1793.62 1368 L1792.92 1368 L1792.21 1368 L1791.5 1368 L1790.79 1368 L1790.09 1368 L1789.38 1368 L1788.67 1368 L1787.96 1368 L1787.25 1368 L1786.55 1368 L1785.84 1368 L1785.13 1368 L1784.42 1368 L1783.72 1368 L1783.01 1368 L1782.3 1368 L1781.59 1368 L1780.88 1368 L1780.18 1368 L1779.47 1368 L1778.76 1368 L1778.05 1368 L1777.35 1368 L1776.64 1368 L1775.93 1368 L1775.22 1368 L1774.51 1368 L1773.81 1368 L1773.1 1368 L1772.39 1368 L1771.68 1368 L1770.98 1368 L1770.27 1368 L1769.56 1368 L1768.85 1368 L1768.14 1368 L1767.44 1368 L1766.73 1368 L1766.02 1368 L1765.31 1368 L1764.61 1368 L1763.9 1368 L1763.19 1368 L1762.48 1368 L1761.77 1368 L1761.07 1368 L1760.36 1368 L1759.65 1368 L1758.94 1368 L1758.24 1368 L1757.53 1368 L1756.82 1368 L1756.11 1368 L1755.4 1368 L1754.7 1368 L1753.99 1368 L1753.28 1368 L1752.57 1368 L1751.87 1368 L1751.16 1368 L1750.45 1368 L1749.74 1368 L1749.03 1368 L1748.33 1368 L1747.62 1368 L1746.91 1368 L1746.2 1368 L1745.49 1368 L1744.79 1368 L1744.08 1368 L1743.37 1368 L1742.66 1368 L1741.96 1368 L1741.25 1368 L1740.54 1368 L1739.83 1368 L1739.12 1368 L1738.42 1368 L1737.71 1368 L1737 1368 L1736.29 1368 L1735.59 1368 L1734.88 1368 L1734.17 1368 L1733.46 1368 L1732.75 1368 L1732.05 1368 L1731.34 1368 L1730.63 1368 L1729.92 1368 L1729.22 1368 L1728.51 1368 L1727.8 1368 L1727.09 1368 L1726.38 1368 L1725.68 1368 L1724.97 1368 L1724.26 1368 L1723.55 1368 L1722.85 1368 L1722.14 1368 L1721.43 1368 L1720.72 1368 L1720.01 1368 L1719.31 1368 L1718.6 1368 L1717.89 1368 L1717.18 1368 L1716.48 1368 L1715.77 1368 L1715.06 1368 L1714.35 1368 L1713.64 1368 L1712.94 1368 L1712.23 1368 L1711.52 1368 L1710.81 1368 L1710.11 1368 L1709.4 1368 L1708.69 1368 L1707.98 1368 L1707.27 1368 L1706.57 1368 L1705.86 1368 L1705.15 1368 L1704.44 1368 L1703.74 1368 L1703.03 1368 L1702.32 1368 L1701.61 1368 L1700.9 1368 L1700.2 1368 L1699.49 1368 L1698.78 1368 L1698.07 1368 L1697.37 1368 L1696.66 1368 L1695.95 1368 L1695.24 1368 L1694.53 1368 L1693.83 1368 L1693.12 1368 L1692.41 1368 L1691.7 1368 L1691 1368 L1690.29 1368 L1689.58 1368 L1688.87 1368 L1688.16 1368 L1687.46 1368 L1686.75 1368 L1686.04 1368 L1685.33 1368 L1684.63 1368 L1683.92 1368 L1683.21 1368 L1682.5 1368 L1681.79 1368 L1681.09 1368 L1680.38 1368 L1679.67 1368 L1678.96 1368 L1678.26 1368 L1677.55 1368 L1676.84 1368 L1676.13 1368 L1675.42 1368 L1674.72 1368 L1674.01 1368 L1673.3 1368 L1672.59 1368 L1671.89 1368 L1671.18 1368 L1670.47 1368 L1669.76 1368 L1669.05 1368 L1668.35 1368 L1667.64 1368 L1666.93 1368 L1666.22 1368 L1665.51 1368 L1664.81 1368 L1664.1 1368 L1663.39 1368 L1662.68 1368 L1661.98 1368 L1661.27 1368 L1660.56 1368 L1659.85 1368 L1659.14 1368 L1658.44 1368 L1657.73 1368 L1657.02 1368 L1656.31 1368 L1655.61 1368 L1654.9 1368 L1654.19 1368 L1653.48 1368 L1652.77 1368 L1652.07 1368 L1651.36 1368 L1650.65 1368 L1649.94 1368 L1649.24 1368 L1648.53 1368 L1647.82 1368 L1647.11 1368 L1646.4 1368 L1645.7 1368 L1644.99 1368 L1644.28 1368 L1643.57 1368 L1642.87 1368 L1642.16 1368 L1641.45 1368 L1640.74 1368 L1640.03 1368 L1639.33 1368 L1638.62 1368 L1637.91 1368 L1637.2 1368 L1636.5 1368 L1635.79 1368 L1635.08 1368 L1634.37 1368 L1633.66 1368 L1632.96 1368 L1632.25 1368 L1631.54 1368 L1630.83 1368 L1630.13 1368 L1629.42 1368 L1628.71 1368 L1628 1368 L1627.29 1368 L1626.59 1368 L1625.88 1368 L1625.17 1368 L1624.46 1368 L1623.76 1368 L1623.05 1368 L1622.34 1368 L1621.63 1368 L1620.92 1368 L1620.22 1368 L1619.51 1368 L1618.8 1368 L1618.09 1368 L1617.39 1368 L1616.68 1368 L1615.97 1368 L1615.26 1368 L1614.55 1368 L1613.85 1368 L1613.14 1368 L1612.43 1368 L1611.72 1368 L1611.02 1368 L1610.31 1368 L1609.6 1368 L1608.89 1368 L1608.18 1368 L1607.48 1368 L1606.77 1368 L1606.06 1368 L1605.35 1368 L1604.65 1368 L1603.94 1368 L1603.23 1368 L1602.52 1368 L1601.81 1368 L1601.11 1368 L1600.4 1368 L1599.69 1368 L1598.98 1368 L1598.28 1368 L1597.57 1368 L1596.86 1368 L1596.15 1368 L1595.44 1368 L1594.74 1368 L1594.03 1368 L1593.32 1368 L1592.61 1368 L1591.9 1368 L1591.2 1368 L1590.49 1368 L1589.78 1368 L1589.07 1368 L1588.37 1368 L1587.66 1368 L1586.95 1368 L1586.24 1368 L1585.53 1368 L1584.83 1368 L1584.12 1368 L1583.41 1368 L1582.7 1368 L1582 1368 L1581.29 1368 L1580.58 1368 L1579.87 1368 L1579.16 1368 L1578.46 1368 L1577.75 1368 L1577.04 1368 L1576.33 1368 L1575.63 1368 L1574.92 1368 L1574.21 1368 L1573.5 1368 L1572.79 1368 L1572.09 1368 L1571.38 1368 L1570.67 1368 L1569.96 1368 L1569.26 1368 L1568.55 1368 L1567.84 1368 L1567.13 1368 L1566.42 1368 L1565.72 1368 L1565.01 1368 L1564.3 1368 L1563.59 1368 L1562.89 1368 L1562.18 1368 L1561.47 1368 L1560.76 1368 L1560.05 1368 L1559.35 1368 L1558.64 1368 L1557.93 1368 L1557.22 1368 L1556.52 1368 L1555.81 1368 L1555.1 1368 L1554.39 1368 L1553.68 1368 L1552.98 1368 L1552.27 1368 L1551.56 1368 L1550.85 1368 L1550.15 1368 L1549.44 1368 L1548.73 1368 L1548.02 1368 L1547.31 1368 L1546.61 1368 L1545.9 1368 L1545.19 1368 L1544.48 1368 L1543.78 1368 L1543.07 1368 L1542.36 1368 L1541.65 1368 L1540.94 1368 L1540.24 1368 L1539.53 1368 L1538.82 1368 L1538.11 1368 L1537.41 1368 L1536.7 1368 L1535.99 1368 L1535.28 1368 L1534.57 1368 L1533.87 1368 L1533.16 1368 L1532.45 1368 L1531.74 1368 L1531.04 1368 L1530.33 1368 L1529.62 1368 L1528.91 1368 L1528.2 1368 L1527.5 1368 L1526.79 1368 L1526.08 1368 L1525.37 1368 L1524.67 1368 L1523.96 1368 L1523.25 1368 L1522.54 1368 L1521.83 1368 L1521.13 1368 L1520.42 1368 L1519.71 1368 L1519 1368 L1518.3 1368 L1517.59 1368 L1516.88 1368 L1516.17 1368 L1515.46 1368 L1514.76 1368 L1514.05 1368 L1513.34 1368 L1512.63 1368 L1511.92 1368 L1511.22 1368 L1510.51 1368 L1509.8 1368 L1509.09 1368 L1508.39 1368 L1507.68 1368 L1506.97 1368 L1506.26 1368 L1505.55 1368 L1504.85 1368 L1504.14 1368 L1503.43 1368 L1502.72 1368 L1502.02 1368 L1501.31 1368 L1500.6 1368 L1499.89 1368 L1499.18 1368 L1498.48 1368 L1497.77 1368 L1497.06 1368 L1496.35 1368 L1495.65 1368 L1494.94 1368 L1494.23 1368 L1493.52 1368 L1492.81 1368 L1492.11 1368 L1491.4 1368 L1490.69 1368 L1489.98 1368 L1489.28 1368 L1488.57 1368 L1487.86 1368 L1487.15 1368 L1486.44 1368 L1485.74 1368 L1485.03 1368 L1484.32 1368 L1483.61 1368 L1482.91 1368 L1482.2 1368 L1481.49 1368 L1480.78 1368 L1480.07 1368 L1479.37 1368 L1478.66 1368 L1477.95 1368 L1477.24 1368 L1476.54 1368 L1475.83 1368 L1475.12 1368 L1474.41 1368 L1473.7 1368 L1473 1368 L1472.29 1368 L1471.58 1368 L1470.87 1368 L1470.17 1368 L1469.46 1368 L1468.75 1368 L1468.04 1368 L1467.33 1368 L1466.63 1368 L1465.92 1368 L1465.21 1368 L1464.5 1368 L1463.8 1368 L1463.09 1368 L1462.38 1368 L1461.67 1368 L1460.96 1368 L1460.26 1368 L1459.55 1368 L1458.84 1368 L1458.13 1368 L1457.43 1368 L1456.72 1368 L1456.01 1368 L1455.3 1368 L1454.59 1368 L1453.89 1368 L1453.18 1368 L1452.47 1368 L1451.76 1368 L1451.06 1368 L1450.35 1368 L1449.64 1368 L1448.93 1368 L1448.22 1368 L1447.52 1368 L1446.81 1368 L1446.1 1368 L1445.39 1368 L1444.69 1368 L1443.98 1368 L1443.27 1368 L1442.56 1368 L1441.85 1368 L1441.15 1368 L1440.44 1368 L1439.73 1368 L1439.02 1368 L1438.31 1368 L1437.61 1368 L1436.9 1368 L1436.19 1368 L1435.48 1368 L1434.78 1368 L1434.07 1368 L1433.36 1368 L1432.65 1368 L1431.94 1368 L1431.24 1368 L1430.53 1368 L1429.82 1368 L1429.11 1368 L1428.41 1368 L1427.7 1368 L1426.99 1368 L1426.28 1368 L1425.57 1368 L1424.87 1368 L1424.16 1368 L1423.45 1368 L1422.74 1368 L1422.04 1368 L1421.33 1368 L1420.62 1368 L1419.91 1368 L1419.2 1368 L1418.5 1368 L1417.79 1368 L1417.08 1368 L1416.37 1368 L1415.67 1368 L1414.96 1368 L1414.25 1368 L1413.54 1368 L1412.83 1368 L1412.13 1368 L1411.42 1368 L1410.71 1368 L1410 1368 L1409.3 1368 L1408.59 1368 L1407.88 1368 L1407.17 1368 L1406.46 1368 L1405.76 1368 L1405.05 1368 L1404.34 1368 L1403.63 1368 L1402.93 1368 L1402.22 1368 L1401.51 1368 L1400.8 1368 L1400.09 1368 L1399.39 1368 L1398.68 1368 L1397.97 1368 L1397.26 1368 L1396.56 1368 L1395.85 1368 L1395.14 1368 L1394.43 1368 L1393.72 1368 L1393.02 1368 L1392.31 1368 L1391.6 1368 L1390.89 1368 L1390.19 1368 L1389.48 1368 L1388.77 1368 L1388.06 1368 L1387.35 1368 L1386.65 1368 L1385.94 1368 L1385.23 1368 L1384.52 1368 L1383.82 1368 L1383.11 1368 L1382.4 1368 L1381.69 1368 L1380.98 1368 L1380.28 1368 L1379.57 1368 L1378.86 1368 L1378.15 1368 L1377.45 1368 L1376.74 1368 L1376.03 1368 L1375.32 1368 L1374.61 1368 L1373.91 1368 L1373.2 1368 L1372.49 1368 L1371.78 1368 L1371.08 1368 L1370.37 1368 L1369.66 1368 L1368.95 1368 L1368.24 1368 L1367.54 1368 L1366.83 1368 L1366.12 1368 L1365.41 1368 L1364.71 1368 L1364 1368 L1363.29 1368 L1362.58 1368 L1361.87 1368 L1361.17 1368 L1360.46 1368 L1359.75 1368 L1359.04 1368 L1358.33 1368 L1357.63 1368 L1356.92 1368 L1356.21 1368 L1355.5 1368 L1354.8 1368 L1354.09 1368 L1353.38 1368 L1352.67 1368 L1351.96 1368 L1351.26 1368 L1350.55 1368 L1349.84 1368 L1349.13 1368 L1348.43 1368 L1347.72 1368 L1347.01 1368 L1346.3 1368 L1345.59 1368 L1344.89 1368 L1344.18 1368 L1343.47 1368 L1342.76 1368 L1342.06 1368 L1341.35 1368 L1340.64 1368 L1339.93 1368 L1339.22 1368 L1338.52 1368 L1337.81 1368 L1337.1 1368 L1336.39 1368 L1335.69 1368 L1334.98 1368 L1334.27 1368 L1333.56 1368 L1332.85 1368 L1332.15 1368 L1331.44 1368 L1330.73 1368 L1330.02 1368 L1329.32 1368 L1328.61 1368 L1327.9 1368 L1327.19 1368 L1326.48 1368 L1325.78 1368 L1325.07 1368 L1324.36 1368 L1323.65 1368 L1322.95 1368 L1322.24 1368 L1321.53 1368 L1320.82 1368 L1320.11 1368 L1319.41 1368 L1318.7 1368 L1317.99 1368 L1317.28 1368 L1316.58 1368 L1315.87 1368 L1315.16 1368 L1314.45 1368 L1313.74 1368 L1313.04 1368 L1312.33 1368 L1311.62 1368 L1310.91 1368 L1310.21 1368 L1309.5 1368 L1308.79 1368 L1308.08 1368 L1307.37 1368 L1306.67 1368 L1305.96 1368 L1305.25 1368 L1304.54 1368 L1303.84 1368 L1303.13 1368 L1302.42 1368 L1301.71 1368 L1301 1368 L1300.3 1368 L1299.59 1368 L1298.88 1368 L1298.17 1368 L1297.47 1368 L1296.76 1368 L1296.05 1368 L1295.34 1368 L1294.63 1368 L1293.93 1368 L1293.22 1368 L1292.51 1368 L1291.8 1368 L1291.1 1368 L1290.39 1368 L1289.68 1368 L1288.97 1368 L1288.26 1368 L1287.56 1368 L1286.85 1368 L1286.14 1368 L1285.43 1368 L1284.72 1368 L1284.02 1368 L1283.31 1368 L1282.6 1368 L1281.89 1368 L1281.19 1368 L1280.48 1368 L1279.77 1368 L1279.06 1368 L1278.35 1368 L1277.65 1368 L1276.94 1368 L1276.23 1368 L1275.52 1368 L1274.82 1368 L1274.11 1368 L1273.4 1368 L1272.69 1368 L1271.98 1368 L1271.28 1368 L1270.57 1368 L1269.86 1368 L1269.15 1368 L1268.45 1368 L1267.74 1368 L1267.03 1368 L1266.32 1368 L1265.61 1368 L1264.91 1368 L1264.2 1368 L1263.49 1368 L1262.78 1368 L1262.08 1368 L1261.37 1368 L1260.66 1368 L1259.95 1368 L1259.24 1368 L1258.54 1368 L1257.83 1368 L1257.12 1368 L1256.41 1368 L1255.71 1368 L1255 1368 L1254.29 1368 L1253.58 1368 L1252.87 1368 L1252.17 1368 L1251.46 1368 L1250.75 1368 L1250.04 1368 L1249.34 1368 L1248.63 1368 L1247.92 1368 L1247.21 1368 L1246.5 1368 L1245.8 1368 L1245.09 1368 L1244.38 1368 L1243.67 1368 L1242.97 1368 L1242.26 1368 L1241.55 1368 L1240.84 1368 L1240.13 1368 L1239.43 1368 L1238.72 1368 L1238.01 1368 L1237.3 1368 L1236.6 1368 L1235.89 1368 L1235.18 1368 L1234.47 1368 L1233.76 1368 L1233.06 1368 L1232.35 1368 L1231.64 1368 L1230.93 1368 L1230.23 1368 L1229.52 1368 L1228.81 1368 L1228.1 1368 L1227.39 1368 L1226.69 1368 L1225.98 1368 L1225.27 1368 L1224.56 1368 L1223.86 1368 L1223.15 1368 L1222.44 1368 L1221.73 1368 L1221.02 1368 L1220.32 1368 L1219.61 1368 L1218.9 1368 L1218.19 1368 L1217.49 1368 L1216.78 1368 L1216.07 1368 L1215.36 1368 L1214.65 1368 L1213.95 1368 L1213.24 1368 L1212.53 1368 L1211.82 1368 L1211.12 1368 L1210.41 1368 L1209.7 1368 L1208.99 1368 L1208.28 1368 L1207.58 1368 L1206.87 1368 L1206.16 1368 L1205.45 1368 L1204.74 1368 L1204.04 1368 L1203.33 1368 L1202.62 1368 L1201.91 1368 L1201.21 1368 L1200.5 1368 L1199.79 1368 L1199.08 1368 L1198.37 1368 L1197.67 1368 L1196.96 1368 L1196.25 1368 L1195.54 1368 L1194.84 1368 L1194.13 1368 L1193.42 1368 L1192.71 1368 L1192 1368 L1191.3 1368 L1190.59 1368 L1189.88 1368 L1189.17 1368 L1188.47 1368 L1187.76 1368 L1187.05 1368 L1186.34 1368 L1185.63 1368 L1184.93 1368 L1184.22 1368 L1183.51 1368 L1182.8 1368 L1182.1 1368 L1181.39 1368 L1180.68 1368 L1179.97 1368 L1179.26 1368 L1178.56 1368 L1177.85 1368 L1177.14 1368 L1176.43 1368 L1175.73 1368 L1175.02 1368 L1174.31 1368 L1173.6 1368 L1172.89 1368 L1172.19 1368 L1171.48 1368 L1170.77 1368 L1170.06 1368 L1169.36 1368 L1168.65 1368 L1167.94 1368 L1167.23 1368 L1166.52 1368 L1165.82 1368 L1165.11 1368 L1164.4 1368 L1163.69 1368 L1162.99 1368 L1162.28 1368 L1161.57 1368 L1160.86 1368 L1160.15 1368 L1159.45 1368 L1158.74 1368 L1158.03 1368 L1157.32 1368 L1156.62 1368 L1155.91 1368 L1155.2 1368 L1154.49 1368 L1153.78 1368 L1153.08 1368 L1152.37 1368 L1151.66 1368 L1150.95 1368 L1150.25 1368 L1149.54 1368 L1148.83 1368 L1148.12 1368 L1147.41 1368 L1146.71 1368 L1146 1368 L1145.29 1368 L1144.58 1368 L1143.88 1368 L1143.17 1368 L1142.46 1368 L1141.75 1368 L1141.04 1368 L1140.34 1368 L1139.63 1368 L1138.92 1368 L1138.21 1368 L1137.51 1368 L1136.8 1368 L1136.09 1368 L1135.38 1368 L1134.67 1368 L1133.97 1368 L1133.26 1368 L1132.55 1368 L1131.84 1368 L1131.13 1368 L1130.43 1368 L1129.72 1368 L1129.01 1368 L1128.3 1368 L1127.6 1368 L1126.89 1368 L1126.18 1368 L1125.47 1368 L1124.76 1368 L1124.06 1368 L1123.35 1368 L1122.64 1368 L1121.93 1368 L1121.23 1368 L1120.52 1368 L1119.81 1368 L1119.1 1368 L1118.39 1368 L1117.69 1368 L1116.98 1368 L1116.27 1368 L1115.56 1368 L1114.86 1368 L1114.15 1368 L1113.44 1368 L1112.73 1368 L1112.02 1368 L1111.32 1368 L1110.61 1368 L1109.9 1368 L1109.19 1368 L1108.49 1368 L1107.78 1368 L1107.07 1368 L1106.36 1368 L1105.65 1368 L1104.95 1368 L1104.24 1368 L1103.53 1368 L1102.82 1368 L1102.12 1368 L1101.41 1368 L1100.7 1368 L1099.99 1368 L1099.28 1368 L1098.58 1368 L1097.87 1368 L1097.16 1368 L1096.45 1368 L1095.75 1368 L1095.04 1368 L1094.33 1368 L1093.62 1368 L1092.91 1368 L1092.21 1368 L1091.5 1368 L1090.79 1368 L1090.08 1368 L1089.38 1368 L1088.67 1368 L1087.96 1368 L1087.25 1368 L1086.54 1368 L1085.84 1368 L1085.13 1368 L1084.42 1368 L1083.71 1368 L1083.01 1368 L1082.3 1368 L1081.59 1368 L1080.88 1368 L1080.17 1368 L1079.47 1368 L1078.76 1368 L1078.05 1368 L1077.34 1368 L1076.64 1368 L1075.93 1368 L1075.22 1368 L1074.51 1368 L1073.8 1368 L1073.1 1368 L1072.39 1368 L1071.68 1368 L1070.97 1368 L1070.27 1368 L1069.56 1368 L1068.85 1368 L1068.14 1368 L1067.43 1368 L1066.73 1368 L1066.02 1368 L1065.31 1368 L1064.6 1368 L1063.9 1368 L1063.19 1368 L1062.48 1368 L1061.77 1368 L1061.06 1368 L1060.36 1368 L1059.65 1368 L1058.94 1368 L1058.23 1368 L1057.53 1368 L1056.82 1368 L1056.11 1368 L1055.4 1368 L1054.69 1368 L1053.99 1368 L1053.28 1368 L1052.57 1368 L1051.86 1368 L1051.15 1368 L1050.45 1368 L1049.74 1368 L1049.03 1368 L1048.32 1368 L1047.62 1368 L1046.91 1368 L1046.2 1368 L1045.49 1368 L1044.78 1368 L1044.08 1368 L1043.37 1368 L1042.66 1368 L1041.95 1368 L1041.25 1368 L1040.54 1368 L1039.83 1368 L1039.12 1368 L1038.41 1368 L1037.71 1368 L1037 1368 L1036.29 1368 L1035.58 1368 L1034.88 1368 L1034.17 1368 L1033.46 1368 L1032.75 1368 L1032.04 1368 L1031.34 1368 L1030.63 1368 L1029.92 1368 L1029.21 1368 L1028.51 1368 L1027.8 1368 L1027.09 1368 L1026.38 1368 L1025.67 1368 L1024.97 1368 L1024.26 1368 L1023.55 1368 L1022.84 1368 L1022.14 1368 L1021.43 1368 L1020.72 1368 L1020.01 1368 L1019.3 1368 L1018.6 1368 L1017.89 1368 L1017.18 1368 L1016.47 1368 L1015.77 1368 L1015.06 1368 L1014.35 1368 L1013.64 1368 L1012.93 1368 L1012.23 1368 L1011.52 1368 L1010.81 1368 L1010.1 1368 L1009.4 1368 L1008.69 1368 L1007.98 1368 L1007.27 1368 L1006.56 1368 L1005.86 1368 L1005.15 1368 L1004.44 1368 L1003.73 1368 L1003.03 1368 L1002.32 1368 L1001.61 1368 L1000.9 1368 L1000.19 1368 L999.486 1368 L998.779 1368 L998.071 1368 L997.363 1368 L996.655 1368 L995.947 1368 L995.24 1368 L994.532 1368 L993.824 1368 L993.116 1368 L992.409 1368 L991.701 1368 L990.993 1368 L990.285 1368 L989.577 1368 L988.87 1368 L988.162 1368 L987.454 1368 L986.746 1368 L986.038 1368 L985.331 1368 L984.623 1368 L983.915 1368 L983.207 1368 L982.499 1368 L981.792 1368 L981.084 1368 L980.376 1368 L979.668 1368 L978.961 1368 L978.253 1368 L977.545 1368 L976.837 1368 L976.129 1368 L975.422 1368 L974.714 1368 L974.006 1368 L973.298 1368 L972.59 1368 L971.883 1368 L971.175 1368 L970.467 1368 L969.759 1368 L969.051 1368 L968.344 1368 L967.636 1368 L966.928 1368 L966.22 1368 L965.513 1368 L964.805 1368 L964.097 1368 L963.389 1368 L962.681 1368 L961.974 1368 L961.266 1368 L960.558 1368 L959.85 1368 L959.142 1368 L958.435 1368 L957.727 1368 L957.019 1368 L956.311 1368 L955.604 1368 L954.896 1368 L954.188 1368 L953.48 1368 L952.772 1368 L952.065 1368 L951.357 1368 L950.649 1368 L949.941 1368 L949.233 1368 L948.526 1368 L947.818 1368 L947.11 1368 L946.402 1368 L945.694 1368 L944.987 1368 L944.279 1368 L943.571 1368 L942.863 1368 L942.156 1368 L941.448 1368 L940.74 1368 L940.032 1368 L939.324 1368 L938.617 1368 L937.909 1368 L937.201 1368 L936.493 1368 L935.785 1368 L935.078 1368 L934.37 1368 L933.662 1368 L932.954 1368 L932.247 1368 L931.539 1368 L930.831 1368 L930.123 1368 L929.415 1368 L928.708 1368 L928 1368 L927.292 1368 L926.584 1368 L925.876 1368 L925.169 1368 L924.461 1368 L923.753 1368 L923.045 1368 L922.337 1368 L921.63 1368 L920.922 1368 L920.214 1368 L919.506 1368 L918.799 1368 L918.091 1368 L917.383 1368 L916.675 1368 L915.967 1368 L915.26 1368 L914.552 1368 L913.844 1368 L913.136 1368 L912.428 1368 L911.721 1368 L911.013 1368 L910.305 1368 L909.597 1368 L908.89 1368 L908.182 1368 L907.474 1368 L906.766 1368 L906.058 1368 L905.351 1368 L904.643 1368 L903.935 1368 L903.227 1368 L902.519 1368 L901.812 1368 L901.104 1368 L900.396 1368 L899.688 1368 L898.98 1368 L898.273 1368 L897.565 1368 L896.857 1368 L896.149 1368 L895.442 1368 L894.734 1368 L894.026 1368 L893.318 1368 L892.61 1368 L891.903 1368 L891.195 1368 L890.487 1368 L889.779 1368 L889.071 1368 L888.364 1368 L887.656 1368 L886.948 1368 L886.24 1368 L885.533 1368 L884.825 1368 L884.117 1368 L883.409 1368 L882.701 1368 L881.994 1368 L881.286 1368 L880.578 1368 L879.87 1368 L879.162 1368 L878.455 1368 L877.747 1368 L877.039 1368 L876.331 1368 L875.623 1368 L874.916 1368 L874.208 1368  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"874.208,1369.7 874.916,1369.7 875.623,1369.7 876.331,1369.7 877.039,1369.7 877.747,1369.7 878.455,1369.7 879.162,1369.7 879.87,1369.7 880.578,1369.7 881.286,1369.7 881.994,1369.7 882.701,1369.7 883.409,1369.7 884.117,1369.7 884.825,1369.7 885.533,1369.7 886.24,1369.7 886.948,1369.7 887.656,1369.7 888.364,1369.7 889.071,1369.7 889.779,1369.7 890.487,1369.7 891.195,1369.7 891.903,1369.7 892.61,1369.7 893.318,1369.7 894.026,1369.7 894.734,1369.7 895.442,1369.7 896.149,1369.7 896.857,1369.7 897.565,1369.7 898.273,1369.7 898.98,1369.7 899.688,1369.7 900.396,1369.7 901.104,1369.7 901.812,1369.7 902.519,1369.7 903.227,1369.7 903.935,1369.7 904.643,1369.7 905.351,1369.7 906.058,1369.7 906.766,1369.7 907.474,1369.7 908.182,1369.7 908.89,1369.7 909.597,1369.7 910.305,1369.7 911.013,1369.7 911.721,1369.7 912.428,1369.7 913.136,1369.7 913.844,1369.7 914.552,1369.7 915.26,1369.7 915.967,1369.7 916.675,1369.7 917.383,1369.7 918.091,1369.7 918.799,1369.7 919.506,1369.7 920.214,1369.7 920.922,1369.7 921.63,1369.7 922.337,1369.7 923.045,1369.7 923.753,1369.7 924.461,1369.7 925.169,1369.7 925.876,1369.7 926.584,1369.7 927.292,1369.7 928,1369.7 928.708,1369.7 929.415,1369.7 930.123,1369.7 930.831,1369.7 931.539,1369.7 932.247,1369.7 932.954,1369.7 933.662,1369.7 934.37,1369.7 935.078,1369.7 935.785,1369.7 936.493,1369.7 937.201,1369.7 937.909,1369.7 938.617,1369.7 939.324,1369.7 940.032,1369.7 940.74,1369.7 941.448,1369.7 942.156,1369.7 942.863,1369.7 943.571,1369.7 944.279,1369.7 944.987,1369.7 945.694,1369.7 946.402,1369.7 947.11,1369.7 947.818,1369.7 948.526,1369.7 949.233,1369.7 949.941,1369.7 950.649,1369.7 951.357,1369.7 952.065,1369.7 952.772,1369.7 953.48,1369.7 954.188,1369.7 954.896,1369.7 955.604,1369.7 956.311,1369.7 957.019,1369.7 957.727,1369.7 958.435,1369.7 959.142,1369.7 959.85,1369.7 960.558,1369.7 961.266,1369.7 961.974,1369.7 962.681,1369.7 963.389,1369.7 964.097,1369.7 964.805,1369.7 965.513,1369.7 966.22,1369.7 966.928,1369.7 967.636,1369.7 968.344,1369.7 969.051,1369.7 969.759,1369.7 970.467,1369.7 971.175,1369.7 971.883,1369.7 972.59,1369.7 973.298,1369.7 974.006,1369.7 974.714,1369.7 975.422,1369.7 976.129,1369.7 976.837,1369.7 977.545,1369.7 978.253,1369.7 978.961,1369.7 979.668,1369.7 980.376,1369.7 981.084,1369.7 981.792,1369.7 982.499,1369.7 983.207,1369.7 983.915,1369.7 984.623,1369.7 985.331,1369.7 986.038,1369.7 986.746,1369.7 987.454,1369.7 988.162,1369.7 988.87,1369.7 989.577,1369.7 990.285,1369.7 990.993,1369.7 991.701,1369.7 992.409,1369.7 993.116,1369.7 993.824,1369.7 994.532,1369.7 995.24,1369.7 995.947,1369.7 996.655,1369.7 997.363,1369.7 998.071,1369.7 998.779,1369.7 999.486,1369.7 1000.19,1369.7 1000.9,1369.7 1001.61,1369.7 1002.32,1369.7 1003.03,1369.7 1003.73,1369.7 1004.44,1369.7 1005.15,1369.7 1005.86,1369.7 1006.56,1369.7 1007.27,1369.7 1007.98,1369.7 1008.69,1369.7 1009.4,1369.7 1010.1,1369.7 1010.81,1369.7 1011.52,1369.7 1012.23,1369.7 1012.93,1369.7 1013.64,1369.7 1014.35,1369.7 1015.06,1369.7 1015.77,1369.7 1016.47,1369.7 1017.18,1369.7 1017.89,1369.7 1018.6,1369.7 1019.3,1369.7 1020.01,1369.7 1020.72,1369.7 1021.43,1369.7 1022.14,1369.7 1022.84,1369.7 1023.55,1369.7 1024.26,1369.7 1024.97,1369.7 1025.67,1369.7 1026.38,1369.7 1027.09,1369.7 1027.8,1369.7 1028.51,1369.7 1029.21,1369.7 1029.92,1369.7 1030.63,1369.7 1031.34,1369.7 1032.04,1369.7 1032.75,1369.7 1033.46,1369.7 1034.17,1369.7 1034.88,1369.7 1035.58,1369.7 1036.29,1369.7 1037,1369.7 1037.71,1369.7 1038.41,1369.7 1039.12,1369.7 1039.83,1369.7 1040.54,1369.7 1041.25,1369.7 1041.95,1369.7 1042.66,1369.7 1043.37,1369.7 1044.08,1369.7 1044.78,1369.7 1045.49,1369.7 1046.2,1369.7 1046.91,1369.7 1047.62,1369.7 1048.32,1369.7 1049.03,1369.7 1049.74,1369.7 1050.45,1369.7 1051.15,1369.7 1051.86,1369.7 1052.57,1369.7 1053.28,1369.7 1053.99,1369.7 1054.69,1369.7 1055.4,1369.7 1056.11,1369.7 1056.82,1369.7 1057.53,1369.7 1058.23,1369.7 1058.94,1369.7 1059.65,1369.7 1060.36,1369.7 1061.06,1369.7 1061.77,1369.7 1062.48,1369.7 1063.19,1369.7 1063.9,1369.7 1064.6,1369.7 1065.31,1369.7 1066.02,1369.7 1066.73,1369.7 1067.43,1369.7 1068.14,1369.7 1068.85,1369.7 1069.56,1369.7 1070.27,1369.7 1070.97,1369.7 1071.68,1369.7 1072.39,1369.7 1073.1,1369.7 1073.8,1369.7 1074.51,1369.7 1075.22,1369.7 1075.93,1369.7 1076.64,1369.7 1077.34,1369.7 1078.05,1369.7 1078.76,1369.7 1079.47,1369.7 1080.17,1369.7 1080.88,1369.7 1081.59,1369.7 1082.3,1369.7 1083.01,1369.7 1083.71,1369.7 1084.42,1369.7 1085.13,1369.7 1085.84,1369.7 1086.54,1369.7 1087.25,1369.7 1087.96,1369.7 1088.67,1369.7 1089.38,1369.7 1090.08,1369.7 1090.79,1369.7 1091.5,1369.7 1092.21,1369.7 1092.91,1369.7 1093.62,1369.7 1094.33,1369.7 1095.04,1369.7 1095.75,1369.7 1096.45,1369.7 1097.16,1369.7 1097.87,1369.7 1098.58,1369.7 1099.28,1369.7 1099.99,1369.7 1100.7,1369.7 1101.41,1369.7 1102.12,1369.7 1102.82,1369.7 1103.53,1369.7 1104.24,1369.7 1104.95,1369.7 1105.65,1369.7 1106.36,1369.7 1107.07,1369.7 1107.78,1369.7 1108.49,1369.7 1109.19,1369.7 1109.9,1369.7 1110.61,1369.7 1111.32,1369.7 1112.02,1369.7 1112.73,1369.7 1113.44,1369.7 1114.15,1369.7 1114.86,1369.7 1115.56,1369.7 1116.27,1369.7 1116.98,1369.7 1117.69,1369.7 1118.39,1369.7 1119.1,1369.7 1119.81,1369.7 1120.52,1369.7 1121.23,1369.7 1121.93,1369.7 1122.64,1369.7 1123.35,1369.7 1124.06,1369.7 1124.76,1369.7 1125.47,1369.7 1126.18,1369.7 1126.89,1369.7 1127.6,1369.7 1128.3,1369.7 1129.01,1369.7 1129.72,1369.7 1130.43,1369.7 1131.13,1369.7 1131.84,1369.7 1132.55,1369.7 1133.26,1369.7 1133.97,1369.7 1134.67,1369.7 1135.38,1369.7 1136.09,1369.7 1136.8,1369.7 1137.51,1369.7 1138.21,1369.7 1138.92,1369.7 1139.63,1369.7 1140.34,1369.7 1141.04,1369.7 1141.75,1369.7 1142.46,1369.7 1143.17,1369.7 1143.88,1369.7 1144.58,1369.7 1145.29,1369.7 1146,1369.7 1146.71,1369.7 1147.41,1369.7 1148.12,1369.7 1148.83,1369.7 1149.54,1369.7 1150.25,1369.7 1150.95,1369.7 1151.66,1369.7 1152.37,1369.7 1153.08,1369.7 1153.78,1369.7 1154.49,1369.7 1155.2,1369.7 1155.91,1369.7 1156.62,1369.7 1157.32,1369.7 1158.03,1369.7 1158.74,1369.7 1159.45,1369.7 1160.15,1369.7 1160.86,1369.7 1161.57,1369.7 1162.28,1369.7 1162.99,1369.7 1163.69,1369.7 1164.4,1369.7 1165.11,1369.7 1165.82,1369.7 1166.52,1369.7 1167.23,1369.7 1167.94,1369.7 1168.65,1369.7 1169.36,1369.7 1170.06,1369.7 1170.77,1369.7 1171.48,1369.7 1172.19,1369.7 1172.89,1369.7 1173.6,1369.7 1174.31,1369.7 1175.02,1369.7 1175.73,1369.7 1176.43,1369.7 1177.14,1369.7 1177.85,1369.7 1178.56,1369.7 1179.26,1369.7 1179.97,1369.7 1180.68,1369.7 1181.39,1369.7 1182.1,1369.7 1182.8,1369.7 1183.51,1369.7 1184.22,1369.7 1184.93,1369.7 1185.63,1369.7 1186.34,1369.7 1187.05,1369.7 1187.76,1369.7 1188.47,1369.7 1189.17,1369.7 1189.88,1369.7 1190.59,1369.7 1191.3,1369.7 1192,1369.7 1192.71,1369.7 1193.42,1369.7 1194.13,1369.7 1194.84,1369.7 1195.54,1369.7 1196.25,1369.7 1196.96,1369.7 1197.67,1369.7 1198.37,1369.7 1199.08,1369.7 1199.79,1369.7 1200.5,1369.7 1201.21,1369.7 1201.91,1369.7 1202.62,1369.7 1203.33,1369.7 1204.04,1369.7 1204.74,1369.7 1205.45,1369.7 1206.16,1369.7 1206.87,1369.7 1207.58,1369.7 1208.28,1369.7 1208.99,1369.7 1209.7,1369.7 1210.41,1369.7 1211.12,1369.7 1211.82,1369.7 1212.53,1369.7 1213.24,1369.7 1213.95,1369.7 1214.65,1369.7 1215.36,1369.7 1216.07,1369.7 1216.78,1369.7 1217.49,1369.7 1218.19,1369.7 1218.9,1369.7 1219.61,1369.7 1220.32,1369.7 1221.02,1369.7 1221.73,1369.7 1222.44,1369.7 1223.15,1369.7 1223.86,1369.7 1224.56,1369.7 1225.27,1369.7 1225.98,1369.7 1226.69,1369.7 1227.39,1369.7 1228.1,1369.7 1228.81,1369.7 1229.52,1369.7 1230.23,1369.7 1230.93,1369.7 1231.64,1369.7 1232.35,1369.7 1233.06,1369.7 1233.76,1369.7 1234.47,1369.7 1235.18,1369.7 1235.89,1369.7 1236.6,1369.7 1237.3,1369.7 1238.01,1369.7 1238.72,1369.7 1239.43,1369.7 1240.13,1369.7 1240.84,1369.7 1241.55,1369.7 1242.26,1369.7 1242.97,1369.7 1243.67,1369.7 1244.38,1369.7 1245.09,1369.7 1245.8,1369.7 1246.5,1369.7 1247.21,1369.7 1247.92,1369.7 1248.63,1369.7 1249.34,1369.7 1250.04,1369.7 1250.75,1369.7 1251.46,1369.7 1252.17,1369.7 1252.87,1369.7 1253.58,1369.7 1254.29,1369.7 1255,1369.7 1255.71,1369.7 1256.41,1369.7 1257.12,1369.7 1257.83,1369.7 1258.54,1369.7 1259.24,1369.7 1259.95,1369.7 1260.66,1369.7 1261.37,1369.7 1262.08,1369.7 1262.78,1369.7 1263.49,1369.7 1264.2,1369.7 1264.91,1369.7 1265.61,1369.7 1266.32,1369.7 1267.03,1369.7 1267.74,1369.7 1268.45,1369.7 1269.15,1369.7 1269.86,1369.7 1270.57,1369.7 1271.28,1369.7 1271.98,1369.7 1272.69,1369.7 1273.4,1369.7 1274.11,1369.7 1274.82,1369.7 1275.52,1369.7 1276.23,1369.7 1276.94,1369.7 1277.65,1369.7 1278.35,1369.7 1279.06,1369.7 1279.77,1369.7 1280.48,1369.7 1281.19,1369.7 1281.89,1369.7 1282.6,1369.7 1283.31,1369.7 1284.02,1369.7 1284.72,1369.7 1285.43,1369.7 1286.14,1369.7 1286.85,1369.7 1287.56,1369.7 1288.26,1369.7 1288.97,1369.7 1289.68,1369.7 1290.39,1369.7 1291.1,1369.7 1291.8,1369.7 1292.51,1369.7 1293.22,1369.7 1293.93,1369.7 1294.63,1369.7 1295.34,1369.7 1296.05,1369.7 1296.76,1369.7 1297.47,1369.7 1298.17,1369.7 1298.88,1369.7 1299.59,1369.7 1300.3,1369.7 1301,1369.7 1301.71,1369.7 1302.42,1369.7 1303.13,1369.7 1303.84,1369.7 1304.54,1369.7 1305.25,1369.7 1305.96,1369.7 1306.67,1369.7 1307.37,1369.7 1308.08,1369.7 1308.79,1369.7 1309.5,1369.7 1310.21,1369.7 1310.91,1369.7 1311.62,1369.7 1312.33,1369.7 1313.04,1369.7 1313.74,1369.7 1314.45,1369.7 1315.16,1369.7 1315.87,1369.7 1316.58,1369.7 1317.28,1369.7 1317.99,1369.7 1318.7,1369.7 1319.41,1369.7 1320.11,1369.7 1320.82,1369.7 1321.53,1369.7 1322.24,1369.7 1322.95,1369.7 1323.65,1369.7 1324.36,1369.7 1325.07,1369.7 1325.78,1369.7 1326.48,1369.7 1327.19,1369.7 1327.9,1369.7 1328.61,1369.7 1329.32,1369.7 1330.02,1369.7 1330.73,1369.7 1331.44,1369.7 1332.15,1369.7 1332.85,1369.7 1333.56,1369.7 1334.27,1369.7 1334.98,1369.7 1335.69,1369.7 1336.39,1369.7 1337.1,1369.7 1337.81,1369.7 1338.52,1369.7 1339.22,1369.7 1339.93,1369.7 1340.64,1369.7 1341.35,1369.7 1342.06,1369.7 1342.76,1369.7 1343.47,1369.7 1344.18,1369.7 1344.89,1369.7 1345.59,1369.7 1346.3,1369.7 1347.01,1369.7 1347.72,1369.7 1348.43,1369.7 1349.13,1369.7 1349.84,1369.7 1350.55,1369.7 1351.26,1369.7 1351.96,1369.7 1352.67,1369.7 1353.38,1369.7 1354.09,1369.7 1354.8,1369.7 1355.5,1369.7 1356.21,1369.7 1356.92,1369.7 1357.63,1369.7 1358.33,1369.7 1359.04,1369.7 1359.75,1369.7 1360.46,1369.7 1361.17,1369.7 1361.87,1369.7 1362.58,1369.7 1363.29,1369.7 1364,1369.7 1364.71,1369.7 1365.41,1369.7 1366.12,1369.7 1366.83,1369.7 1367.54,1369.7 1368.24,1369.7 1368.95,1369.7 1369.66,1369.7 1370.37,1369.7 1371.08,1369.7 1371.78,1369.7 1372.49,1369.7 1373.2,1369.7 1373.91,1369.7 1374.61,1369.7 1375.32,1369.7 1376.03,1369.7 1376.74,1369.7 1377.45,1369.7 1378.15,1369.7 1378.86,1369.7 1379.57,1369.7 1380.28,1369.7 1380.98,1369.7 1381.69,1369.7 1382.4,1369.7 1383.11,1369.7 1383.82,1369.7 1384.52,1369.7 1385.23,1369.7 1385.94,1369.7 1386.65,1369.7 1387.35,1369.7 1388.06,1369.7 1388.77,1369.7 1389.48,1369.7 1390.19,1369.7 1390.89,1369.7 1391.6,1369.7 1392.31,1369.7 1393.02,1369.7 1393.72,1369.7 1394.43,1369.7 1395.14,1369.7 1395.85,1369.7 1396.56,1369.7 1397.26,1369.7 1397.97,1369.7 1398.68,1369.7 1399.39,1369.7 1400.09,1369.7 1400.8,1369.7 1401.51,1369.7 1402.22,1369.7 1402.93,1369.7 1403.63,1369.7 1404.34,1369.7 1405.05,1369.7 1405.76,1369.7 1406.46,1369.7 1407.17,1369.7 1407.88,1369.7 1408.59,1369.7 1409.3,1369.7 1410,1369.7 1410.71,1369.7 1411.42,1369.7 1412.13,1369.7 1412.83,1369.7 1413.54,1369.7 1414.25,1369.7 1414.96,1369.7 1415.67,1369.7 1416.37,1369.7 1417.08,1369.7 1417.79,1369.7 1418.5,1369.7 1419.2,1369.7 1419.91,1369.7 1420.62,1369.7 1421.33,1369.7 1422.04,1369.7 1422.74,1369.7 1423.45,1369.7 1424.16,1369.7 1424.87,1369.7 1425.57,1369.7 1426.28,1369.7 1426.99,1369.7 1427.7,1369.7 1428.41,1369.7 1429.11,1369.7 1429.82,1369.7 1430.53,1369.7 1431.24,1369.7 1431.94,1369.7 1432.65,1369.7 1433.36,1369.7 1434.07,1369.7 1434.78,1369.7 1435.48,1369.7 1436.19,1369.7 1436.9,1369.7 1437.61,1369.7 1438.31,1369.7 1439.02,1369.7 1439.73,1369.7 1440.44,1369.7 1441.15,1369.7 1441.85,1369.7 1442.56,1369.7 1443.27,1369.7 1443.98,1369.7 1444.69,1369.7 1445.39,1369.7 1446.1,1369.7 1446.81,1369.7 1447.52,1369.7 1448.22,1369.7 1448.93,1369.7 1449.64,1369.7 1450.35,1369.7 1451.06,1369.7 1451.76,1369.7 1452.47,1369.7 1453.18,1369.7 1453.89,1369.7 1454.59,1369.7 1455.3,1369.7 1456.01,1369.7 1456.72,1369.7 1457.43,1369.7 1458.13,1369.7 1458.84,1369.7 1459.55,1369.7 1460.26,1369.7 1460.96,1369.7 1461.67,1369.7 1462.38,1369.7 1463.09,1369.7 1463.8,1369.7 1464.5,1369.7 1465.21,1369.7 1465.92,1369.7 1466.63,1369.7 1467.33,1369.7 1468.04,1369.7 1468.75,1369.7 1469.46,1369.7 1470.17,1369.7 1470.87,1369.7 1471.58,1369.7 1472.29,1369.7 1473,1369.7 1473.7,1369.7 1474.41,1369.7 1475.12,1369.7 1475.83,1369.7 1476.54,1369.7 1477.24,1369.7 1477.95,1369.7 1478.66,1369.7 1479.37,1369.7 1480.07,1369.7 1480.78,1369.7 1481.49,1369.7 1482.2,1369.7 1482.91,1369.7 1483.61,1369.7 1484.32,1369.7 1485.03,1369.7 1485.74,1369.7 1486.44,1369.7 1487.15,1369.7 1487.86,1369.7 1488.57,1369.7 1489.28,1369.7 1489.98,1369.7 1490.69,1369.7 1491.4,1369.7 1492.11,1369.7 1492.81,1369.7 1493.52,1369.7 1494.23,1369.7 1494.94,1369.7 1495.65,1369.7 1496.35,1369.7 1497.06,1369.7 1497.77,1369.7 1498.48,1369.7 1499.18,1369.7 1499.89,1369.7 1500.6,1369.7 1501.31,1369.7 1502.02,1369.7 1502.72,1369.7 1503.43,1369.7 1504.14,1369.7 1504.85,1369.7 1505.55,1369.7 1506.26,1369.7 1506.97,1369.7 1507.68,1369.7 1508.39,1369.7 1509.09,1369.7 1509.8,1369.7 1510.51,1369.7 1511.22,1369.7 1511.92,1369.7 1512.63,1369.7 1513.34,1369.7 1514.05,1369.7 1514.76,1369.7 1515.46,1369.7 1516.17,1369.7 1516.88,1369.7 1517.59,1369.7 1518.3,1369.7 1519,1369.7 1519.71,1369.7 1520.42,1369.7 1521.13,1369.7 1521.83,1369.7 1522.54,1369.7 1523.25,1369.7 1523.96,1369.7 1524.67,1369.7 1525.37,1369.7 1526.08,1369.7 1526.79,1369.7 1527.5,1369.7 1528.2,1369.7 1528.91,1369.7 1529.62,1369.7 1530.33,1369.7 1531.04,1369.7 1531.74,1369.7 1532.45,1369.7 1533.16,1369.7 1533.87,1369.7 1534.57,1369.7 1535.28,1369.7 1535.99,1369.7 1536.7,1369.7 1537.41,1369.7 1538.11,1369.7 1538.82,1369.7 1539.53,1369.7 1540.24,1369.7 1540.94,1369.7 1541.65,1369.7 1542.36,1369.7 1543.07,1369.7 1543.78,1369.7 1544.48,1369.7 1545.19,1369.7 1545.9,1369.7 1546.61,1369.7 1547.31,1369.7 1548.02,1369.7 1548.73,1369.7 1549.44,1369.7 1550.15,1369.7 1550.85,1369.7 1551.56,1369.7 1552.27,1369.7 1552.98,1369.7 1553.68,1369.7 1554.39,1369.7 1555.1,1369.7 1555.81,1369.7 1556.52,1369.7 1557.22,1369.7 1557.93,1369.7 1558.64,1369.7 1559.35,1369.7 1560.05,1369.7 1560.76,1369.7 1561.47,1369.7 1562.18,1369.7 1562.89,1369.7 1563.59,1369.7 1564.3,1369.7 1565.01,1369.7 1565.72,1369.7 1566.42,1369.7 1567.13,1369.7 1567.84,1369.7 1568.55,1369.7 1569.26,1369.7 1569.96,1369.7 1570.67,1369.7 1571.38,1369.7 1572.09,1369.7 1572.79,1369.7 1573.5,1369.7 1574.21,1369.7 1574.92,1369.7 1575.63,1369.7 1576.33,1369.7 1577.04,1369.7 1577.75,1369.7 1578.46,1369.7 1579.16,1369.7 1579.87,1369.7 1580.58,1369.7 1581.29,1369.7 1582,1369.7 1582.7,1369.7 1583.41,1369.7 1584.12,1369.7 1584.83,1369.7 1585.53,1369.7 1586.24,1369.7 1586.95,1369.7 1587.66,1369.7 1588.37,1369.7 1589.07,1369.7 1589.78,1369.7 1590.49,1369.7 1591.2,1369.7 1591.9,1369.7 1592.61,1369.7 1593.32,1369.7 1594.03,1369.7 1594.74,1369.7 1595.44,1369.7 1596.15,1369.7 1596.86,1369.7 1597.57,1369.7 1598.28,1369.7 1598.98,1369.7 1599.69,1369.7 1600.4,1369.7 1601.11,1369.7 1601.81,1369.7 1602.52,1369.7 1603.23,1369.7 1603.94,1369.7 1604.65,1369.7 1605.35,1369.7 1606.06,1369.7 1606.77,1369.7 1607.48,1369.7 1608.18,1369.7 1608.89,1369.7 1609.6,1369.7 1610.31,1369.7 1611.02,1369.7 1611.72,1369.7 1612.43,1369.7 1613.14,1369.7 1613.85,1369.7 1614.55,1369.7 1615.26,1369.7 1615.97,1369.7 1616.68,1369.7 1617.39,1369.7 1618.09,1369.7 1618.8,1369.7 1619.51,1369.7 1620.22,1369.7 1620.92,1369.7 1621.63,1369.7 1622.34,1369.7 1623.05,1369.7 1623.76,1369.7 1624.46,1369.7 1625.17,1369.7 1625.88,1369.7 1626.59,1369.7 1627.29,1369.7 1628,1369.7 1628.71,1369.7 1629.42,1369.7 1630.13,1369.7 1630.83,1369.7 1631.54,1369.7 1632.25,1369.7 1632.96,1369.7 1633.66,1369.7 1634.37,1369.7 1635.08,1369.7 1635.79,1369.7 1636.5,1369.7 1637.2,1369.7 1637.91,1369.7 1638.62,1369.7 1639.33,1369.7 1640.03,1369.7 1640.74,1369.7 1641.45,1369.7 1642.16,1369.7 1642.87,1369.7 1643.57,1369.7 1644.28,1369.7 1644.99,1369.7 1645.7,1369.7 1646.4,1369.7 1647.11,1369.7 1647.82,1369.7 1648.53,1369.7 1649.24,1369.7 1649.94,1369.7 1650.65,1369.7 1651.36,1369.7 1652.07,1369.7 1652.77,1369.7 1653.48,1369.7 1654.19,1369.7 1654.9,1369.7 1655.61,1369.7 1656.31,1369.7 1657.02,1369.7 1657.73,1369.7 1658.44,1369.7 1659.14,1369.7 1659.85,1369.7 1660.56,1369.7 1661.27,1369.7 1661.98,1369.7 1662.68,1369.7 1663.39,1369.7 1664.1,1369.7 1664.81,1369.7 1665.51,1369.7 1666.22,1369.7 1666.93,1369.7 1667.64,1369.7 1668.35,1369.7 1669.05,1369.7 1669.76,1369.7 1670.47,1369.7 1671.18,1369.7 1671.89,1369.7 1672.59,1369.7 1673.3,1369.7 1674.01,1369.7 1674.72,1369.7 1675.42,1369.7 1676.13,1369.7 1676.84,1369.7 1677.55,1369.7 1678.26,1369.7 1678.96,1369.7 1679.67,1369.7 1680.38,1369.7 1681.09,1369.7 1681.79,1369.7 1682.5,1369.7 1683.21,1369.7 1683.92,1369.7 1684.63,1369.7 1685.33,1369.7 1686.04,1369.7 1686.75,1369.7 1687.46,1369.7 1688.16,1369.7 1688.87,1369.7 1689.58,1369.7 1690.29,1369.7 1691,1369.7 1691.7,1369.7 1692.41,1369.7 1693.12,1369.7 1693.83,1369.7 1694.53,1369.7 1695.24,1369.7 1695.95,1369.7 1696.66,1369.7 1697.37,1369.7 1698.07,1369.7 1698.78,1369.7 1699.49,1369.7 1700.2,1369.7 1700.9,1369.7 1701.61,1369.7 1702.32,1369.7 1703.03,1369.7 1703.74,1369.7 1704.44,1369.7 1705.15,1369.7 1705.86,1369.7 1706.57,1369.7 1707.27,1369.7 1707.98,1369.7 1708.69,1369.7 1709.4,1369.7 1710.11,1369.7 1710.81,1369.7 1711.52,1369.7 1712.23,1369.7 1712.94,1369.7 1713.64,1369.7 1714.35,1369.7 1715.06,1369.7 1715.77,1369.7 1716.48,1369.7 1717.18,1369.7 1717.89,1369.7 1718.6,1369.7 1719.31,1369.7 1720.01,1369.7 1720.72,1369.7 1721.43,1369.7 1722.14,1369.7 1722.85,1369.7 1723.55,1369.7 1724.26,1369.7 1724.97,1369.7 1725.68,1369.7 1726.38,1369.7 1727.09,1369.7 1727.8,1369.7 1728.51,1369.7 1729.22,1369.7 1729.92,1369.7 1730.63,1369.7 1731.34,1369.7 1732.05,1369.7 1732.75,1369.7 1733.46,1369.7 1734.17,1369.7 1734.88,1369.7 1735.59,1369.7 1736.29,1369.7 1737,1369.7 1737.71,1369.7 1738.42,1369.7 1739.12,1369.7 1739.83,1369.7 1740.54,1369.7 1741.25,1369.7 1741.96,1369.7 1742.66,1369.7 1743.37,1369.7 1744.08,1369.7 1744.79,1369.7 1745.49,1369.7 1746.2,1369.7 1746.91,1369.7 1747.62,1369.7 1748.33,1369.7 1749.03,1369.7 1749.74,1369.7 1750.45,1369.7 1751.16,1369.7 1751.87,1369.7 1752.57,1369.7 1753.28,1369.7 1753.99,1369.7 1754.7,1369.7 1755.4,1369.7 1756.11,1369.7 1756.82,1369.7 1757.53,1369.7 1758.24,1369.7 1758.94,1369.7 1759.65,1369.7 1760.36,1369.7 1761.07,1369.7 1761.77,1369.7 1762.48,1369.7 1763.19,1369.7 1763.9,1369.7 1764.61,1369.7 1765.31,1369.7 1766.02,1369.7 1766.73,1369.7 1767.44,1369.7 1768.14,1369.7 1768.85,1369.7 1769.56,1369.7 1770.27,1369.7 1770.98,1369.7 1771.68,1369.7 1772.39,1369.7 1773.1,1369.7 1773.81,1369.7 1774.51,1369.7 1775.22,1369.7 1775.93,1369.7 1776.64,1369.7 1777.35,1369.7 1778.05,1369.7 1778.76,1369.7 1779.47,1369.7 1780.18,1369.7 1780.88,1369.7 1781.59,1369.7 1782.3,1369.7 1783.01,1369.7 1783.72,1369.7 1784.42,1369.7 1785.13,1369.7 1785.84,1369.7 1786.55,1369.7 1787.25,1369.7 1787.96,1369.7 1788.67,1369.7 1789.38,1369.7 1790.09,1369.7 1790.79,1369.7 1791.5,1369.7 1792.21,1369.7 1792.92,1369.7 1793.62,1369.7 1794.33,1369.7 1795.04,1369.7 1795.75,1369.7 1796.46,1369.7 1797.16,1369.7 1797.87,1369.7 1798.58,1369.7 1799.29,1369.7 1799.99,1369.7 1800.7,1369.7 1801.41,1369.7 1802.12,1369.7 1802.83,1369.7 1803.53,1369.7 1804.24,1369.7 1804.95,1369.7 1805.66,1369.7 1806.36,1369.7 1807.07,1369.7 1807.78,1369.7 1808.49,1369.7 1809.2,1369.7 1809.9,1369.7 1810.61,1369.7 1811.32,1369.7 1812.03,1369.7 1812.73,1369.7 1813.44,1369.7 1814.15,1369.7 1814.86,1369.7 1815.57,1369.7 1816.27,1369.7 1816.98,1369.7 1817.69,1369.7 1818.4,1369.7 1819.1,1369.7 1819.81,1369.7 1820.52,1369.7 1821.23,1369.7 1821.94,1369.7 1822.64,1369.7 1823.35,1369.7 1824.06,1369.7 1824.77,1369.7 1825.48,1369.7 1826.18,1369.7 1826.89,1369.7 1827.6,1369.7 1828.31,1369.7 1829.01,1369.7 1829.72,1369.7 1830.43,1369.7 1831.14,1369.7 1831.85,1369.7 1832.55,1369.7 1833.26,1369.7 1833.97,1369.7 1834.68,1369.7 1835.38,1369.7 1836.09,1369.7 1836.8,1369.7 1837.51,1369.7 1838.22,1369.7 1838.92,1369.7 1839.63,1369.7 1840.34,1369.7 1841.05,1369.7 1841.75,1369.7 1842.46,1369.7 1843.17,1369.7 1843.88,1369.7 1844.59,1369.7 1845.29,1369.7 1846,1369.7 1846.71,1369.7 1847.42,1369.7 1848.12,1369.7 1848.83,1369.7 1849.54,1369.7 1850.25,1369.7 1850.96,1369.7 1851.66,1369.7 1852.37,1369.7 1853.08,1369.7 1853.79,1369.7 1854.49,1369.7 1855.2,1369.7 1855.91,1369.7 1856.62,1369.7 1857.33,1369.7 1858.03,1369.7 1858.74,1369.7 1859.45,1369.7 1860.16,1369.7 1860.86,1369.7 1861.57,1369.7 1862.28,1369.7 1862.99,1369.7 1863.7,1369.7 1864.4,1369.7 1865.11,1369.7 1865.82,1369.7 1866.53,1369.7 1867.23,1369.7 1867.94,1369.7 1868.65,1369.7 1869.36,1369.7 1870.07,1369.7 1870.77,1369.7 1871.48,1369.7 1872.19,1369.7 1872.9,1369.7 1873.6,1369.7 1874.31,1369.7 1875.02,1369.7 1875.73,1369.7 1876.44,1369.7 1877.14,1369.7 1877.85,1369.7 1878.56,1369.7 1879.27,1369.7 1879.97,1369.7 1880.68,1369.7 1881.39,1369.7 1882.1,1369.7 1882.81,1369.7 1883.51,1369.7 1884.22,1369.7 1884.93,1369.7 1885.64,1369.7 1886.34,1369.7 1887.05,1369.7 1887.76,1369.7 1888.47,1369.7 1889.18,1369.7 1889.88,1369.7 1890.59,1369.7 1891.3,1369.7 1892.01,1369.7 1892.71,1369.7 1893.42,1369.7 1894.13,1369.7 1894.84,1369.7 1895.55,1369.7 1896.25,1369.7 1896.96,1369.7 1897.67,1369.7 1898.38,1369.7 1899.08,1369.7 1899.79,1369.7 1900.5,1369.7 1901.21,1369.7 1901.92,1369.7 1902.62,1369.7 1903.33,1369.7 1904.04,1369.7 1904.75,1369.7 1905.46,1369.7 1906.16,1369.7 1906.87,1369.7 1907.58,1369.7 1908.29,1369.7 1908.99,1369.7 1909.7,1369.7 1910.41,1369.7 1911.12,1369.7 1911.83,1369.7 1912.53,1369.7 1913.24,1369.7 1913.95,1369.7 1914.66,1369.7 1915.36,1369.7 1916.07,1369.7 1916.78,1369.7 1917.49,1369.7 1918.2,1369.7 1918.9,1369.7 1919.61,1369.7 1920.32,1369.7 1921.03,1369.7 1921.73,1369.7 1922.44,1369.7 1923.15,1369.7 1923.86,1369.7 1924.57,1369.7 1925.27,1369.7 1925.98,1369.7 1926.69,1369.7 1927.4,1369.7 1928.1,1369.7 1928.81,1369.7 1929.52,1369.7 1930.23,1369.7 1930.94,1369.7 1931.64,1369.7 1932.35,1369.7 1933.06,1369.7 1933.77,1369.7 1934.47,1369.7 1935.18,1369.7 1935.89,1369.7 1936.6,1369.7 1937.31,1369.7 1938.01,1369.7 1938.72,1369.7 1939.43,1369.7 1940.14,1369.7 1940.84,1369.7 1941.55,1369.7 1942.26,1369.7 1942.97,1369.7 1943.68,1369.7 1944.38,1369.7 1945.09,1369.7 1945.8,1369.7 1946.51,1369.7 1947.21,1369.7 1947.92,1369.7 1948.63,1369.7 1949.34,1369.7 1950.05,1369.7 1950.75,1369.7 1951.46,1369.7 1952.17,1369.7 1952.88,1369.7 1953.58,1369.7 1954.29,1369.7 1955,1369.7 1955.71,1369.7 1956.42,1369.7 1957.12,1369.7 1957.83,1369.7 1958.54,1369.7 1959.25,1369.7 1959.95,1369.7 1960.66,1369.7 1961.37,1369.7 1962.08,1369.7 1962.79,1369.7 1963.49,1369.7 1964.2,1369.7 1964.91,1369.7 1965.62,1369.7 1966.32,1369.7 1967.03,1369.7 1967.74,1369.7 1968.45,1369.7 1969.16,1369.7 1969.86,1369.7 1970.57,1369.7 1971.28,1369.7 1971.99,1369.7 1972.69,1369.7 1973.4,1369.7 1974.11,1369.7 1974.82,1369.7 1975.53,1369.7 1976.23,1369.7 1976.94,1369.7 1977.65,1369.7 1978.36,1369.7 1979.07,1369.7 1979.77,1369.7 1980.48,1369.7 1981.19,1369.7 1981.9,1369.7 1982.6,1369.7 1983.31,1369.7 1984.02,1369.7 1984.73,1369.7 1985.44,1369.7 1986.14,1369.7 1986.85,1369.7 1987.56,1369.7 1988.27,1369.7 1988.97,1369.7 1989.68,1369.7 1990.39,1369.7 1991.1,1369.7 1991.81,1369.7 1992.51,1369.7 1993.22,1369.7 1993.93,1369.7 1994.64,1369.7 1995.34,1369.7 1996.05,1369.7 1996.76,1369.7 1997.47,1369.7 1998.18,1369.7 1998.88,1369.7 1999.59,1369.7 2000.3,1369.7 2001.01,1369.7 2001.71,1369.7 2002.42,1369.7 2003.13,1369.7 2003.84,1369.7 2004.55,1369.7 2005.25,1369.7 2005.96,1369.7 2006.67,1369.7 2007.38,1369.7 2008.08,1369.7 2008.79,1369.7 2009.5,1369.7 2010.21,1369.7 2010.92,1369.7 2011.62,1369.7 2012.33,1369.7 2013.04,1369.7 2013.75,1369.7 2014.45,1369.7 2015.16,1369.7 2015.87,1369.7 2016.58,1369.7 2017.29,1369.7 2017.99,1369.7 2018.7,1369.7 2019.41,1369.7 2020.12,1369.7 2020.82,1369.7 2021.53,1369.7 2022.24,1369.7 2022.95,1369.7 2023.66,1369.7 2024.36,1369.7 2025.07,1369.7 2025.78,1369.7 2026.49,1369.7 2027.19,1369.7 2027.9,1369.7 2028.61,1369.7 2029.32,1369.7 2030.03,1369.7 2030.73,1369.7 2031.44,1369.7 2032.15,1369.7 2032.86,1369.7 2033.56,1369.7 2034.27,1369.7 2034.98,1369.7 2035.69,1369.7 2036.4,1369.7 2037.1,1369.7 2037.81,1369.7 2038.52,1369.7 2039.23,1369.7 2039.93,1369.7 2040.64,1369.7 2041.35,1369.7 2042.06,1369.7 2042.77,1369.7 2043.47,1369.7 2044.18,1369.7 2044.89,1369.7 2045.6,1369.7 2046.3,1369.7 2047.01,1369.7 2047.72,1369.7 2048.43,1369.7 2049.14,1369.7 2049.84,1369.7 2050.55,1369.7 2051.26,1369.7 2051.97,1369.7 2052.68,1369.7 2053.38,1369.7 2054.09,1369.7 2054.8,1369.7 2055.51,1369.7 2056.21,1369.7 2056.92,1369.7 2057.63,1369.7 2058.34,1369.7 2059.05,1369.7 2059.75,1369.7 2060.46,1369.7 2061.17,1369.7 2061.88,1369.7 2062.58,1369.7 2063.29,1369.7 2064,1369.7 2064.71,1369.7 2065.42,1369.7 2066.12,1369.7 2066.83,1369.7 2067.54,1369.7 2068.25,1369.7 2068.95,1369.7 2069.66,1369.7 2070.37,1369.7 2071.08,1369.7 2071.79,1369.7 2072.49,1369.7 2073.2,1369.7 2073.91,1369.7 2074.62,1369.7 2075.32,1369.7 2076.03,1369.7 2076.74,1369.7 2077.45,1369.7 2078.16,1369.7 2078.86,1369.7 2079.57,1369.7 2080.28,1369.7 2080.99,1369.7 2081.69,1369.7 2082.4,1369.7 2083.11,1369.7 2083.82,1369.7 2084.53,1369.7 2085.23,1369.7 2085.94,1369.7 2086.65,1369.7 2087.36,1369.7 2088.06,1369.7 2088.77,1369.7 2089.48,1369.7 2090.19,1369.7 2090.9,1369.7 2091.6,1369.7 2092.31,1369.7 2093.02,1369.7 2093.73,1369.7 2094.43,1369.7 2095.14,1369.7 2095.85,1369.7 2096.56,1369.7 2097.27,1369.7 2097.97,1369.7 2098.68,1369.7 2099.39,1369.7 2100.1,1369.7 2100.8,1369.7 2101.51,1369.7 2102.22,1369.7 2102.93,1369.7 2103.64,1369.7 2104.34,1369.7 2105.05,1369.7 2105.76,1369.7 2106.47,1369.7 2107.17,1369.7 2107.88,1369.7 2108.59,1369.7 2109.3,1369.7 2110.01,1369.7 2110.71,1369.7 2111.42,1369.7 2112.13,1369.7 2112.84,1369.7 2113.54,1369.7 2114.25,1369.7 2114.96,1369.7 2115.67,1369.7 2116.38,1369.7 2117.08,1369.7 2117.79,1369.7 2118.5,1369.7 2119.21,1369.7 2119.91,1369.7 2120.62,1369.7 2121.33,1369.7 2122.04,1369.7 2122.75,1369.7 2123.45,1369.7 2124.16,1369.7 2124.87,1369.7 2125.58,1369.7 2126.28,1369.7 2126.99,1369.7 2127.7,1369.7 2128.41,1369.7 2129.12,1369.7 2129.82,1369.7 2130.53,1369.7 2131.24,1369.7 2131.95,1369.7 2132.66,1369.7 2133.36,1369.7 2134.07,1369.7 2134.78,1369.7 2135.49,1369.7 2136.19,1369.7 2136.9,1369.7 2137.61,1369.7 2138.32,1369.7 2139.03,1369.7 2139.73,1369.7 2140.44,1369.7 2141.15,1369.7 2141.86,1369.7 2142.56,1369.7 2143.27,1369.7 2143.98,1369.7 2144.69,1369.7 2145.4,1369.7 2146.1,1369.7 2146.81,1369.7 2147.52,1369.7 2148.23,1369.7 2148.93,1369.7 2149.64,1369.7 2150.35,1369.7 2151.06,1369.7 2151.77,1369.7 2152.47,1369.7 2153.18,1369.7 2153.89,1369.7 2154.6,1369.7 2155.3,1369.7 2156.01,1369.7 2156.72,1369.7 2157.43,1369.7 2158.14,1369.7 2158.84,1369.7 2159.55,1369.7 2160.26,1369.7 2160.97,1369.7 2161.67,1369.7 2162.38,1369.7 2163.09,1369.7 2163.8,1369.7 2164.51,1369.7 2165.21,1369.7 2165.92,1369.7 2166.63,1369.7 2167.34,1369.7 2168.04,1369.7 2168.75,1369.7 2169.46,1369.7 2170.17,1369.7 2170.88,1369.7 2171.58,1369.7 2172.29,1369.7 2173,1369.7 2173.71,1369.7 2174.41,1369.7 2175.12,1369.7 2175.83,1369.7 2176.54,1369.7 2177.25,1369.7 2177.95,1369.7 2178.66,1369.7 2179.37,1369.7 2180.08,1369.7 2180.78,1369.7 2181.49,1369.7 2182.2,1369.7 2182.91,1369.7 2183.62,1369.7 2184.32,1369.7 2185.03,1369.7 2185.74,1369.7 2186.45,1369.7 2187.15,1369.7 2187.86,1369.7 2188.57,1369.7 2189.28,1369.7 2189.99,1369.7 2190.69,1369.7 2191.4,1369.7 2192.11,1369.7 2192.82,1369.7 2193.52,1369.7 2194.23,1369.7 2194.94,1369.7 2195.65,1369.7 2196.36,1369.7 2197.06,1369.7 2197.77,1369.7 2198.48,1369.7 2199.19,1369.7 2199.89,1369.7 2200.6,1369.7 2201.31,1369.7 2202.02,1369.7 2202.73,1369.7 2203.43,1369.7 2204.14,1369.7 2204.85,1369.7 2205.56,1369.7 2206.27,1369.7 2206.97,1369.7 2207.68,1369.7 2208.39,1369.7 2209.1,1369.7 2209.8,1369.7 2210.51,1369.7 2211.22,1369.7 2211.93,1369.7 2212.64,1369.7 2213.34,1369.7 2214.05,1369.7 2214.76,1369.7 2215.47,1369.7 2216.17,1369.7 2216.88,1369.7 2217.59,1369.7 2218.3,1369.7 2219.01,1369.7 2219.71,1369.7 2220.42,1369.7 2221.13,1369.7 2221.84,1369.7 2222.54,1369.7 2223.25,1369.7 2223.96,1369.7 2224.67,1369.7 2225.38,1369.7 2226.08,1369.7 2226.79,1369.7 2227.5,1369.7 2228.21,1369.7 2228.91,1369.7 2229.62,1369.7 2230.33,1369.7 2231.04,1369.7 2231.75,1369.7 2232.45,1369.7 2233.16,1369.7 2233.87,1369.7 2234.58,1369.7 2235.28,1369.7 2235.99,1369.7 2236.7,1369.7 2237.41,1369.7 2238.12,1369.7 2238.82,1369.7 2239.53,1369.7 2240.24,1369.7 2240.95,1369.7 2241.65,1369.7 2242.36,1369.7 2243.07,1369.7 2243.78,1369.7 2244.49,1369.7 2245.19,1369.7 2245.9,1369.7 2246.61,1369.7 2247.32,1369.7 2248.02,1369.7 2248.73,1369.7 2249.44,1369.7 2250.15,1369.7 2250.86,1369.7 2251.56,1369.7 2252.27,1369.7 2252.98,1369.7 2253.69,1369.7 2254.39,1369.7 2255.1,1369.7 2255.81,1369.7 2256.52,1369.7 2257.23,1369.7 2257.93,1369.7 2258.64,1369.7 2259.35,1369.7 2260.06,1369.7 2260.76,1369.7 2261.47,1369.7 2262.18,1369.7 2262.89,1369.7 2263.6,1369.7 2264.3,1369.7 2265.01,1369.7 2265.72,1369.7 2266.43,1369.7 2267.13,1369.7 2267.84,1369.7 2268.55,1369.7 2269.26,1369.7 2269.97,1369.7 2270.67,1369.7 2271.38,1369.7 2272.09,1369.7 2272.8,1369.7 2273.5,1369.7 2274.21,1369.7 2274.92,1369.7 2275.63,1369.7 2276.34,1369.7 2277.04,1369.7 2277.75,1369.7 2278.46,1369.7 2279.17,1369.7 2279.87,1369.7 2280.58,1369.7 2281.29,1369.7 2282,1369.7 2282.71,1369.7 2283.41,1369.7 2284.12,1369.7 2284.83,1369.7 2285.54,1369.7 2286.25,1369.7 2286.95,1369.7 2287.66,1369.7 2288.37,1369.7 2289.08,1369.7 \"/>\n<path clip-path=\"url(#clip022)\" d=\"M874.208 1377.67 L874.916 1377.67 L875.623 1377.67 L876.331 1377.67 L877.039 1377.67 L877.747 1377.67 L878.455 1377.67 L879.162 1377.67 L879.87 1377.67 L880.578 1377.67 L881.286 1377.67 L881.994 1377.67 L882.701 1377.67 L883.409 1377.67 L884.117 1377.67 L884.825 1377.67 L885.533 1377.67 L886.24 1377.67 L886.948 1377.67 L887.656 1377.67 L888.364 1377.67 L889.071 1377.67 L889.779 1377.67 L890.487 1377.67 L891.195 1377.67 L891.903 1377.67 L892.61 1377.67 L893.318 1377.67 L894.026 1377.67 L894.734 1377.67 L895.442 1377.67 L896.149 1377.67 L896.857 1377.67 L897.565 1377.67 L898.273 1377.67 L898.98 1377.67 L899.688 1377.67 L900.396 1377.67 L901.104 1377.67 L901.812 1377.67 L902.519 1377.67 L903.227 1377.67 L903.935 1377.67 L904.643 1377.67 L905.351 1377.67 L906.058 1377.67 L906.766 1377.67 L907.474 1377.67 L908.182 1377.67 L908.89 1377.67 L909.597 1377.67 L910.305 1377.67 L911.013 1377.67 L911.721 1377.67 L912.428 1377.67 L913.136 1377.67 L913.844 1377.67 L914.552 1377.67 L915.26 1377.67 L915.967 1377.67 L916.675 1377.67 L917.383 1377.67 L918.091 1377.67 L918.799 1377.67 L919.506 1377.67 L920.214 1377.67 L920.922 1377.67 L921.63 1377.67 L922.337 1377.67 L923.045 1377.67 L923.753 1377.67 L924.461 1377.67 L925.169 1377.67 L925.876 1377.67 L926.584 1377.67 L927.292 1377.67 L928 1377.67 L928.708 1377.67 L929.415 1377.67 L930.123 1377.67 L930.831 1377.67 L931.539 1377.67 L932.247 1377.67 L932.954 1377.67 L933.662 1377.67 L934.37 1377.67 L935.078 1377.67 L935.785 1377.67 L936.493 1377.67 L937.201 1377.67 L937.909 1377.67 L938.617 1377.67 L939.324 1377.67 L940.032 1377.67 L940.74 1377.67 L941.448 1377.67 L942.156 1377.67 L942.863 1377.67 L943.571 1377.67 L944.279 1377.67 L944.987 1377.67 L945.694 1377.67 L946.402 1377.67 L947.11 1377.67 L947.818 1377.67 L948.526 1377.67 L949.233 1377.67 L949.941 1377.67 L950.649 1377.67 L951.357 1377.67 L952.065 1377.67 L952.772 1377.67 L953.48 1377.67 L954.188 1377.67 L954.896 1377.67 L955.604 1377.67 L956.311 1377.67 L957.019 1377.67 L957.727 1377.67 L958.435 1377.67 L959.142 1377.67 L959.85 1377.67 L960.558 1377.67 L961.266 1377.67 L961.974 1377.67 L962.681 1377.67 L963.389 1377.67 L964.097 1377.67 L964.805 1377.67 L965.513 1377.67 L966.22 1377.67 L966.928 1377.67 L967.636 1377.67 L968.344 1377.67 L969.051 1377.67 L969.759 1377.67 L970.467 1377.67 L971.175 1377.67 L971.883 1377.67 L972.59 1377.67 L973.298 1377.67 L974.006 1377.67 L974.714 1377.67 L975.422 1377.67 L976.129 1377.67 L976.837 1377.67 L977.545 1377.67 L978.253 1377.67 L978.961 1377.67 L979.668 1377.67 L980.376 1377.67 L981.084 1377.67 L981.792 1377.67 L982.499 1377.67 L983.207 1377.67 L983.915 1377.67 L984.623 1377.67 L985.331 1377.67 L986.038 1377.67 L986.746 1377.67 L987.454 1377.67 L988.162 1377.67 L988.87 1377.67 L989.577 1377.67 L990.285 1377.67 L990.993 1377.67 L991.701 1377.67 L992.409 1377.67 L993.116 1377.67 L993.824 1377.67 L994.532 1377.67 L995.24 1377.67 L995.947 1377.67 L996.655 1377.67 L997.363 1377.67 L998.071 1377.67 L998.779 1377.67 L999.486 1377.67 L1000.19 1377.67 L1000.9 1377.67 L1001.61 1377.67 L1002.32 1377.67 L1003.03 1377.67 L1003.73 1377.67 L1004.44 1377.67 L1005.15 1377.67 L1005.86 1377.67 L1006.56 1377.67 L1007.27 1377.67 L1007.98 1377.67 L1008.69 1377.67 L1009.4 1377.67 L1010.1 1377.67 L1010.81 1377.67 L1011.52 1377.67 L1012.23 1377.67 L1012.93 1377.67 L1013.64 1377.67 L1014.35 1377.67 L1015.06 1377.67 L1015.77 1377.67 L1016.47 1377.67 L1017.18 1377.67 L1017.89 1377.67 L1018.6 1377.67 L1019.3 1377.67 L1020.01 1377.67 L1020.72 1377.67 L1021.43 1377.67 L1022.14 1377.67 L1022.84 1377.67 L1023.55 1377.67 L1024.26 1377.67 L1024.97 1377.67 L1025.67 1377.67 L1026.38 1377.67 L1027.09 1377.67 L1027.8 1377.67 L1028.51 1377.67 L1029.21 1377.67 L1029.92 1377.67 L1030.63 1377.67 L1031.34 1377.67 L1032.04 1377.67 L1032.75 1377.67 L1033.46 1377.67 L1034.17 1377.67 L1034.88 1377.67 L1035.58 1377.67 L1036.29 1377.67 L1037 1377.67 L1037.71 1377.67 L1038.41 1377.67 L1039.12 1377.67 L1039.83 1377.67 L1040.54 1377.67 L1041.25 1377.67 L1041.95 1377.67 L1042.66 1377.67 L1043.37 1377.67 L1044.08 1377.67 L1044.78 1377.67 L1045.49 1377.67 L1046.2 1377.67 L1046.91 1377.67 L1047.62 1377.67 L1048.32 1377.67 L1049.03 1377.67 L1049.74 1377.67 L1050.45 1377.67 L1051.15 1377.67 L1051.86 1377.67 L1052.57 1377.67 L1053.28 1377.67 L1053.99 1377.67 L1054.69 1377.67 L1055.4 1377.67 L1056.11 1377.67 L1056.82 1377.67 L1057.53 1377.67 L1058.23 1377.67 L1058.94 1377.67 L1059.65 1377.67 L1060.36 1377.67 L1061.06 1377.67 L1061.77 1377.67 L1062.48 1377.67 L1063.19 1377.67 L1063.9 1377.67 L1064.6 1377.67 L1065.31 1377.67 L1066.02 1377.67 L1066.73 1377.67 L1067.43 1377.67 L1068.14 1377.67 L1068.85 1377.67 L1069.56 1377.67 L1070.27 1377.67 L1070.97 1377.67 L1071.68 1377.67 L1072.39 1377.67 L1073.1 1377.67 L1073.8 1377.67 L1074.51 1377.67 L1075.22 1377.67 L1075.93 1377.67 L1076.64 1377.67 L1077.34 1377.67 L1078.05 1377.67 L1078.76 1377.67 L1079.47 1377.67 L1080.17 1377.67 L1080.88 1377.67 L1081.59 1377.67 L1082.3 1377.67 L1083.01 1377.67 L1083.71 1377.67 L1084.42 1377.67 L1085.13 1377.67 L1085.84 1377.67 L1086.54 1377.67 L1087.25 1377.67 L1087.96 1377.67 L1088.67 1377.67 L1089.38 1377.67 L1090.08 1377.67 L1090.79 1377.67 L1091.5 1377.67 L1092.21 1377.67 L1092.91 1377.67 L1093.62 1377.67 L1094.33 1377.67 L1095.04 1377.67 L1095.75 1377.67 L1096.45 1377.67 L1097.16 1377.67 L1097.87 1377.67 L1098.58 1377.67 L1099.28 1377.67 L1099.99 1377.67 L1100.7 1377.67 L1101.41 1377.67 L1102.12 1377.67 L1102.82 1377.67 L1103.53 1377.67 L1104.24 1377.67 L1104.95 1377.67 L1105.65 1377.67 L1106.36 1377.67 L1107.07 1377.67 L1107.78 1377.67 L1108.49 1377.67 L1109.19 1377.67 L1109.9 1377.67 L1110.61 1377.67 L1111.32 1377.67 L1112.02 1377.67 L1112.73 1377.67 L1113.44 1377.67 L1114.15 1377.67 L1114.86 1377.67 L1115.56 1377.67 L1116.27 1377.67 L1116.98 1377.67 L1117.69 1377.67 L1118.39 1377.67 L1119.1 1377.67 L1119.81 1377.67 L1120.52 1377.67 L1121.23 1377.67 L1121.93 1377.67 L1122.64 1377.67 L1123.35 1377.67 L1124.06 1377.67 L1124.76 1377.67 L1125.47 1377.67 L1126.18 1377.67 L1126.89 1377.67 L1127.6 1377.67 L1128.3 1377.67 L1129.01 1377.67 L1129.72 1377.67 L1130.43 1377.67 L1131.13 1377.67 L1131.84 1377.67 L1132.55 1377.67 L1133.26 1377.67 L1133.97 1377.67 L1134.67 1377.67 L1135.38 1377.67 L1136.09 1377.67 L1136.8 1377.67 L1137.51 1377.67 L1138.21 1377.67 L1138.92 1377.67 L1139.63 1377.67 L1140.34 1377.67 L1141.04 1377.67 L1141.75 1377.67 L1142.46 1377.67 L1143.17 1377.67 L1143.88 1377.67 L1144.58 1377.67 L1145.29 1377.67 L1146 1377.67 L1146.71 1377.67 L1147.41 1377.67 L1148.12 1377.67 L1148.83 1377.67 L1149.54 1377.67 L1150.25 1377.67 L1150.95 1377.67 L1151.66 1377.67 L1152.37 1377.67 L1153.08 1377.67 L1153.78 1377.67 L1154.49 1377.67 L1155.2 1377.67 L1155.91 1377.67 L1156.62 1377.67 L1157.32 1377.67 L1158.03 1377.67 L1158.74 1377.67 L1159.45 1377.67 L1160.15 1377.67 L1160.86 1377.67 L1161.57 1377.67 L1162.28 1377.67 L1162.99 1377.67 L1163.69 1377.67 L1164.4 1377.67 L1165.11 1377.67 L1165.82 1377.67 L1166.52 1377.67 L1167.23 1377.67 L1167.94 1377.67 L1168.65 1377.67 L1169.36 1377.67 L1170.06 1377.67 L1170.77 1377.67 L1171.48 1377.67 L1172.19 1377.67 L1172.89 1377.67 L1173.6 1377.67 L1174.31 1377.67 L1175.02 1377.67 L1175.73 1377.67 L1176.43 1377.67 L1177.14 1377.67 L1177.85 1377.67 L1178.56 1377.67 L1179.26 1377.67 L1179.97 1377.67 L1180.68 1377.67 L1181.39 1377.67 L1182.1 1377.67 L1182.8 1377.67 L1183.51 1377.67 L1184.22 1377.67 L1184.93 1377.67 L1185.63 1377.67 L1186.34 1377.67 L1187.05 1377.67 L1187.76 1377.67 L1188.47 1377.67 L1189.17 1377.67 L1189.88 1377.67 L1190.59 1377.67 L1191.3 1377.67 L1192 1377.67 L1192.71 1377.67 L1193.42 1377.67 L1194.13 1377.67 L1194.84 1377.67 L1195.54 1377.67 L1196.25 1377.67 L1196.96 1377.67 L1197.67 1377.67 L1198.37 1377.67 L1199.08 1377.67 L1199.79 1377.67 L1200.5 1377.67 L1201.21 1377.67 L1201.91 1377.67 L1202.62 1377.67 L1203.33 1377.67 L1204.04 1377.67 L1204.74 1377.67 L1205.45 1377.67 L1206.16 1377.67 L1206.87 1377.67 L1207.58 1377.67 L1208.28 1377.67 L1208.99 1377.67 L1209.7 1377.67 L1210.41 1377.67 L1211.12 1377.67 L1211.82 1377.67 L1212.53 1377.67 L1213.24 1377.67 L1213.95 1377.67 L1214.65 1377.67 L1215.36 1377.67 L1216.07 1377.67 L1216.78 1377.67 L1217.49 1377.67 L1218.19 1377.67 L1218.9 1377.67 L1219.61 1377.67 L1220.32 1377.67 L1221.02 1377.67 L1221.73 1377.67 L1222.44 1377.67 L1223.15 1377.67 L1223.86 1377.67 L1224.56 1377.67 L1225.27 1377.67 L1225.98 1377.67 L1226.69 1377.67 L1227.39 1377.67 L1228.1 1377.67 L1228.81 1377.67 L1229.52 1377.67 L1230.23 1377.67 L1230.93 1377.67 L1231.64 1377.67 L1232.35 1377.67 L1233.06 1377.67 L1233.76 1377.67 L1234.47 1377.67 L1235.18 1377.67 L1235.89 1377.67 L1236.6 1377.67 L1237.3 1377.67 L1238.01 1377.67 L1238.72 1377.67 L1239.43 1377.67 L1240.13 1377.67 L1240.84 1377.67 L1241.55 1377.67 L1242.26 1377.67 L1242.97 1377.67 L1243.67 1377.67 L1244.38 1377.67 L1245.09 1377.67 L1245.8 1377.67 L1246.5 1377.67 L1247.21 1377.67 L1247.92 1377.67 L1248.63 1377.67 L1249.34 1377.67 L1250.04 1377.67 L1250.75 1377.67 L1251.46 1377.67 L1252.17 1377.67 L1252.87 1377.67 L1253.58 1377.67 L1254.29 1377.67 L1255 1377.67 L1255.71 1377.67 L1256.41 1377.67 L1257.12 1377.67 L1257.83 1377.67 L1258.54 1377.67 L1259.24 1377.67 L1259.95 1377.67 L1260.66 1377.67 L1261.37 1377.67 L1262.08 1377.67 L1262.78 1377.67 L1263.49 1377.67 L1264.2 1377.67 L1264.91 1377.67 L1265.61 1377.67 L1266.32 1377.67 L1267.03 1377.67 L1267.74 1377.67 L1268.45 1377.67 L1269.15 1377.67 L1269.86 1377.67 L1270.57 1377.67 L1271.28 1377.67 L1271.98 1377.67 L1272.69 1377.67 L1273.4 1377.67 L1274.11 1377.67 L1274.82 1377.67 L1275.52 1377.67 L1276.23 1377.67 L1276.94 1377.67 L1277.65 1377.67 L1278.35 1377.67 L1279.06 1377.67 L1279.77 1377.67 L1280.48 1377.67 L1281.19 1377.67 L1281.89 1377.67 L1282.6 1377.67 L1283.31 1377.67 L1284.02 1377.67 L1284.72 1377.67 L1285.43 1377.67 L1286.14 1377.67 L1286.85 1377.67 L1287.56 1377.67 L1288.26 1377.67 L1288.97 1377.67 L1289.68 1377.67 L1290.39 1377.67 L1291.1 1377.67 L1291.8 1377.67 L1292.51 1377.67 L1293.22 1377.67 L1293.93 1377.67 L1294.63 1377.67 L1295.34 1377.67 L1296.05 1377.67 L1296.76 1377.67 L1297.47 1377.67 L1298.17 1377.67 L1298.88 1377.67 L1299.59 1377.67 L1300.3 1377.67 L1301 1377.67 L1301.71 1377.67 L1302.42 1377.67 L1303.13 1377.67 L1303.84 1377.67 L1304.54 1377.67 L1305.25 1377.67 L1305.96 1377.67 L1306.67 1377.67 L1307.37 1377.67 L1308.08 1377.67 L1308.79 1377.67 L1309.5 1377.67 L1310.21 1377.67 L1310.91 1377.67 L1311.62 1377.67 L1312.33 1377.67 L1313.04 1377.67 L1313.74 1377.67 L1314.45 1377.67 L1315.16 1377.67 L1315.87 1377.67 L1316.58 1377.67 L1317.28 1377.67 L1317.99 1377.67 L1318.7 1377.67 L1319.41 1377.67 L1320.11 1377.67 L1320.82 1377.67 L1321.53 1377.67 L1322.24 1377.67 L1322.95 1377.67 L1323.65 1377.67 L1324.36 1377.67 L1325.07 1377.67 L1325.78 1377.67 L1326.48 1377.67 L1327.19 1377.67 L1327.9 1377.67 L1328.61 1377.67 L1329.32 1377.67 L1330.02 1377.67 L1330.73 1377.67 L1331.44 1377.67 L1332.15 1377.67 L1332.85 1377.67 L1333.56 1377.67 L1334.27 1377.67 L1334.98 1377.67 L1335.69 1377.67 L1336.39 1377.67 L1337.1 1377.67 L1337.81 1377.67 L1338.52 1377.67 L1339.22 1377.67 L1339.93 1377.67 L1340.64 1377.67 L1341.35 1377.67 L1342.06 1377.67 L1342.76 1377.67 L1343.47 1377.67 L1344.18 1377.67 L1344.89 1377.67 L1345.59 1377.67 L1346.3 1377.67 L1347.01 1377.67 L1347.72 1377.67 L1348.43 1377.67 L1349.13 1377.67 L1349.84 1377.67 L1350.55 1377.67 L1351.26 1377.67 L1351.96 1377.67 L1352.67 1377.67 L1353.38 1377.67 L1354.09 1377.67 L1354.8 1377.67 L1355.5 1377.67 L1356.21 1377.67 L1356.92 1377.67 L1357.63 1377.67 L1358.33 1377.67 L1359.04 1377.67 L1359.75 1377.67 L1360.46 1377.67 L1361.17 1377.67 L1361.87 1377.67 L1362.58 1377.67 L1363.29 1377.67 L1364 1377.67 L1364.71 1377.67 L1365.41 1377.67 L1366.12 1377.67 L1366.83 1377.67 L1367.54 1377.67 L1368.24 1377.67 L1368.95 1377.67 L1369.66 1377.67 L1370.37 1377.67 L1371.08 1377.67 L1371.78 1377.67 L1372.49 1377.67 L1373.2 1377.67 L1373.91 1377.67 L1374.61 1377.67 L1375.32 1377.67 L1376.03 1377.67 L1376.74 1377.67 L1377.45 1377.67 L1378.15 1377.67 L1378.86 1377.67 L1379.57 1377.67 L1380.28 1377.67 L1380.98 1377.67 L1381.69 1377.67 L1382.4 1377.67 L1383.11 1377.67 L1383.82 1377.67 L1384.52 1377.67 L1385.23 1377.67 L1385.94 1377.67 L1386.65 1377.67 L1387.35 1377.67 L1388.06 1377.67 L1388.77 1377.67 L1389.48 1377.67 L1390.19 1377.67 L1390.89 1377.67 L1391.6 1377.67 L1392.31 1377.67 L1393.02 1377.67 L1393.72 1377.67 L1394.43 1377.67 L1395.14 1377.67 L1395.85 1377.67 L1396.56 1377.67 L1397.26 1377.67 L1397.97 1377.67 L1398.68 1377.67 L1399.39 1377.67 L1400.09 1377.67 L1400.8 1377.67 L1401.51 1377.67 L1402.22 1377.67 L1402.93 1377.67 L1403.63 1377.67 L1404.34 1377.67 L1405.05 1377.67 L1405.76 1377.67 L1406.46 1377.67 L1407.17 1377.67 L1407.88 1377.67 L1408.59 1377.67 L1409.3 1377.67 L1410 1377.67 L1410.71 1377.67 L1411.42 1377.67 L1412.13 1377.67 L1412.83 1377.67 L1413.54 1377.67 L1414.25 1377.67 L1414.96 1377.67 L1415.67 1377.67 L1416.37 1377.67 L1417.08 1377.67 L1417.79 1377.67 L1418.5 1377.67 L1419.2 1377.67 L1419.91 1377.67 L1420.62 1377.67 L1421.33 1377.67 L1422.04 1377.67 L1422.74 1377.67 L1423.45 1377.67 L1424.16 1377.67 L1424.87 1377.67 L1425.57 1377.67 L1426.28 1377.67 L1426.99 1377.67 L1427.7 1377.67 L1428.41 1377.67 L1429.11 1377.67 L1429.82 1377.67 L1430.53 1377.67 L1431.24 1377.67 L1431.94 1377.67 L1432.65 1377.67 L1433.36 1377.67 L1434.07 1377.67 L1434.78 1377.67 L1435.48 1377.67 L1436.19 1377.67 L1436.9 1377.67 L1437.61 1377.67 L1438.31 1377.67 L1439.02 1377.67 L1439.73 1377.67 L1440.44 1377.67 L1441.15 1377.67 L1441.85 1377.67 L1442.56 1377.67 L1443.27 1377.67 L1443.98 1377.67 L1444.69 1377.67 L1445.39 1377.67 L1446.1 1377.67 L1446.81 1377.67 L1447.52 1377.67 L1448.22 1377.67 L1448.93 1377.67 L1449.64 1377.67 L1450.35 1377.67 L1451.06 1377.67 L1451.76 1377.67 L1452.47 1377.67 L1453.18 1377.67 L1453.89 1377.67 L1454.59 1377.67 L1455.3 1377.67 L1456.01 1377.67 L1456.72 1377.67 L1457.43 1377.67 L1458.13 1377.67 L1458.84 1377.67 L1459.55 1377.67 L1460.26 1377.67 L1460.96 1377.67 L1461.67 1377.67 L1462.38 1377.67 L1463.09 1377.67 L1463.8 1377.67 L1464.5 1377.67 L1465.21 1377.67 L1465.92 1377.67 L1466.63 1377.67 L1467.33 1377.67 L1468.04 1377.67 L1468.75 1377.67 L1469.46 1377.67 L1470.17 1377.67 L1470.87 1377.67 L1471.58 1377.67 L1472.29 1377.67 L1473 1377.67 L1473.7 1377.67 L1474.41 1377.67 L1475.12 1377.67 L1475.83 1377.67 L1476.54 1377.67 L1477.24 1377.67 L1477.95 1377.67 L1478.66 1377.67 L1479.37 1377.67 L1480.07 1377.67 L1480.78 1377.67 L1481.49 1377.67 L1482.2 1377.67 L1482.91 1377.67 L1483.61 1377.67 L1484.32 1377.67 L1485.03 1377.67 L1485.74 1377.67 L1486.44 1377.67 L1487.15 1377.67 L1487.86 1377.67 L1488.57 1377.67 L1489.28 1377.67 L1489.98 1377.67 L1490.69 1377.67 L1491.4 1377.67 L1492.11 1377.67 L1492.81 1377.67 L1493.52 1377.67 L1494.23 1377.67 L1494.94 1377.67 L1495.65 1377.67 L1496.35 1377.67 L1497.06 1377.67 L1497.77 1377.67 L1498.48 1377.67 L1499.18 1377.67 L1499.89 1377.67 L1500.6 1377.67 L1501.31 1377.67 L1502.02 1377.67 L1502.72 1377.67 L1503.43 1377.67 L1504.14 1377.67 L1504.85 1377.67 L1505.55 1377.67 L1506.26 1377.67 L1506.97 1377.67 L1507.68 1377.67 L1508.39 1377.67 L1509.09 1377.67 L1509.8 1377.67 L1510.51 1377.67 L1511.22 1377.67 L1511.92 1377.67 L1512.63 1377.67 L1513.34 1377.67 L1514.05 1377.67 L1514.76 1377.67 L1515.46 1377.67 L1516.17 1377.67 L1516.88 1377.67 L1517.59 1377.67 L1518.3 1377.67 L1519 1377.67 L1519.71 1377.67 L1520.42 1377.67 L1521.13 1377.67 L1521.83 1377.67 L1522.54 1377.67 L1523.25 1377.67 L1523.96 1377.67 L1524.67 1377.67 L1525.37 1377.67 L1526.08 1377.67 L1526.79 1377.67 L1527.5 1377.67 L1528.2 1377.67 L1528.91 1377.67 L1529.62 1377.67 L1530.33 1377.67 L1531.04 1377.67 L1531.74 1377.67 L1532.45 1377.67 L1533.16 1377.67 L1533.87 1377.67 L1534.57 1377.67 L1535.28 1377.67 L1535.99 1377.67 L1536.7 1377.67 L1537.41 1377.67 L1538.11 1377.67 L1538.82 1377.67 L1539.53 1377.67 L1540.24 1377.67 L1540.94 1377.67 L1541.65 1377.67 L1542.36 1377.67 L1543.07 1377.67 L1543.78 1377.67 L1544.48 1377.67 L1545.19 1377.67 L1545.9 1377.67 L1546.61 1377.67 L1547.31 1377.67 L1548.02 1377.67 L1548.73 1377.67 L1549.44 1377.67 L1550.15 1377.67 L1550.85 1377.67 L1551.56 1377.67 L1552.27 1377.67 L1552.98 1377.67 L1553.68 1377.67 L1554.39 1377.67 L1555.1 1377.67 L1555.81 1377.67 L1556.52 1377.67 L1557.22 1377.67 L1557.93 1377.67 L1558.64 1377.67 L1559.35 1377.67 L1560.05 1377.67 L1560.76 1377.67 L1561.47 1377.67 L1562.18 1377.67 L1562.89 1377.67 L1563.59 1377.67 L1564.3 1377.67 L1565.01 1377.67 L1565.72 1377.67 L1566.42 1377.67 L1567.13 1377.67 L1567.84 1377.67 L1568.55 1377.67 L1569.26 1377.67 L1569.96 1377.67 L1570.67 1377.67 L1571.38 1377.67 L1572.09 1377.67 L1572.79 1377.67 L1573.5 1377.67 L1574.21 1377.67 L1574.92 1377.67 L1575.63 1377.67 L1576.33 1377.67 L1577.04 1377.67 L1577.75 1377.67 L1578.46 1377.67 L1579.16 1377.67 L1579.87 1377.67 L1580.58 1377.67 L1581.29 1377.67 L1582 1377.67 L1582.7 1377.67 L1583.41 1377.67 L1584.12 1377.67 L1584.83 1377.67 L1585.53 1377.67 L1586.24 1377.67 L1586.95 1377.67 L1587.66 1377.67 L1588.37 1377.67 L1589.07 1377.67 L1589.78 1377.67 L1590.49 1377.67 L1591.2 1377.67 L1591.9 1377.67 L1592.61 1377.67 L1593.32 1377.67 L1594.03 1377.67 L1594.74 1377.67 L1595.44 1377.67 L1596.15 1377.67 L1596.86 1377.67 L1597.57 1377.67 L1598.28 1377.67 L1598.98 1377.67 L1599.69 1377.67 L1600.4 1377.67 L1601.11 1377.67 L1601.81 1377.67 L1602.52 1377.67 L1603.23 1377.67 L1603.94 1377.67 L1604.65 1377.67 L1605.35 1377.67 L1606.06 1377.67 L1606.77 1377.67 L1607.48 1377.67 L1608.18 1377.67 L1608.89 1377.67 L1609.6 1377.67 L1610.31 1377.67 L1611.02 1377.67 L1611.72 1377.67 L1612.43 1377.67 L1613.14 1377.67 L1613.85 1377.67 L1614.55 1377.67 L1615.26 1377.67 L1615.97 1377.67 L1616.68 1377.67 L1617.39 1377.67 L1618.09 1377.67 L1618.8 1377.67 L1619.51 1377.67 L1620.22 1377.67 L1620.92 1377.67 L1621.63 1377.67 L1622.34 1377.67 L1623.05 1377.67 L1623.76 1377.67 L1624.46 1377.67 L1625.17 1377.67 L1625.88 1377.67 L1626.59 1377.67 L1627.29 1377.67 L1628 1377.67 L1628.71 1377.67 L1629.42 1377.67 L1630.13 1377.67 L1630.83 1377.67 L1631.54 1377.67 L1632.25 1377.67 L1632.96 1377.67 L1633.66 1377.67 L1634.37 1377.67 L1635.08 1377.67 L1635.79 1377.67 L1636.5 1377.67 L1637.2 1377.67 L1637.91 1377.67 L1638.62 1377.67 L1639.33 1377.67 L1640.03 1377.67 L1640.74 1377.67 L1641.45 1377.67 L1642.16 1377.67 L1642.87 1377.67 L1643.57 1377.67 L1644.28 1377.67 L1644.99 1377.67 L1645.7 1377.67 L1646.4 1377.67 L1647.11 1377.67 L1647.82 1377.67 L1648.53 1377.67 L1649.24 1377.67 L1649.94 1377.67 L1650.65 1377.67 L1651.36 1377.67 L1652.07 1377.67 L1652.77 1377.67 L1653.48 1377.67 L1654.19 1377.67 L1654.9 1377.67 L1655.61 1377.67 L1656.31 1377.67 L1657.02 1377.67 L1657.73 1377.67 L1658.44 1377.67 L1659.14 1377.67 L1659.85 1377.67 L1660.56 1377.67 L1661.27 1377.67 L1661.98 1377.67 L1662.68 1377.67 L1663.39 1377.67 L1664.1 1377.67 L1664.81 1377.67 L1665.51 1377.67 L1666.22 1377.67 L1666.93 1377.67 L1667.64 1377.67 L1668.35 1377.67 L1669.05 1377.67 L1669.76 1377.67 L1670.47 1377.67 L1671.18 1377.67 L1671.89 1377.67 L1672.59 1377.67 L1673.3 1377.67 L1674.01 1377.67 L1674.72 1377.67 L1675.42 1377.67 L1676.13 1377.67 L1676.84 1377.67 L1677.55 1377.67 L1678.26 1377.67 L1678.96 1377.67 L1679.67 1377.67 L1680.38 1377.67 L1681.09 1377.67 L1681.79 1377.67 L1682.5 1377.67 L1683.21 1377.67 L1683.92 1377.67 L1684.63 1377.67 L1685.33 1377.67 L1686.04 1377.67 L1686.75 1377.67 L1687.46 1377.67 L1688.16 1377.67 L1688.87 1377.67 L1689.58 1377.67 L1690.29 1377.67 L1691 1377.67 L1691.7 1377.67 L1692.41 1377.67 L1693.12 1377.67 L1693.83 1377.67 L1694.53 1377.67 L1695.24 1377.67 L1695.95 1377.67 L1696.66 1377.67 L1697.37 1377.67 L1698.07 1377.67 L1698.78 1377.67 L1699.49 1377.67 L1700.2 1377.67 L1700.9 1377.67 L1701.61 1377.67 L1702.32 1377.67 L1703.03 1377.67 L1703.74 1377.67 L1704.44 1377.67 L1705.15 1377.67 L1705.86 1377.67 L1706.57 1377.67 L1707.27 1377.67 L1707.98 1377.67 L1708.69 1377.67 L1709.4 1377.67 L1710.11 1377.67 L1710.81 1377.67 L1711.52 1377.67 L1712.23 1377.67 L1712.94 1377.67 L1713.64 1377.67 L1714.35 1377.67 L1715.06 1377.67 L1715.77 1377.67 L1716.48 1377.67 L1717.18 1377.67 L1717.89 1377.67 L1718.6 1377.67 L1719.31 1377.67 L1720.01 1377.67 L1720.72 1377.67 L1721.43 1377.67 L1722.14 1377.67 L1722.85 1377.67 L1723.55 1377.67 L1724.26 1377.67 L1724.97 1377.67 L1725.68 1377.67 L1726.38 1377.67 L1727.09 1377.67 L1727.8 1377.67 L1728.51 1377.67 L1729.22 1377.67 L1729.92 1377.67 L1730.63 1377.67 L1731.34 1377.67 L1732.05 1377.67 L1732.75 1377.67 L1733.46 1377.67 L1734.17 1377.67 L1734.88 1377.67 L1735.59 1377.67 L1736.29 1377.67 L1737 1377.67 L1737.71 1377.67 L1738.42 1377.67 L1739.12 1377.67 L1739.83 1377.67 L1740.54 1377.67 L1741.25 1377.67 L1741.96 1377.67 L1742.66 1377.67 L1743.37 1377.67 L1744.08 1377.67 L1744.79 1377.67 L1745.49 1377.67 L1746.2 1377.67 L1746.91 1377.67 L1747.62 1377.67 L1748.33 1377.67 L1749.03 1377.67 L1749.74 1377.67 L1750.45 1377.67 L1751.16 1377.67 L1751.87 1377.67 L1752.57 1377.67 L1753.28 1377.67 L1753.99 1377.67 L1754.7 1377.67 L1755.4 1377.67 L1756.11 1377.67 L1756.82 1377.67 L1757.53 1377.67 L1758.24 1377.67 L1758.94 1377.67 L1759.65 1377.67 L1760.36 1377.67 L1761.07 1377.67 L1761.77 1377.67 L1762.48 1377.67 L1763.19 1377.67 L1763.9 1377.67 L1764.61 1377.67 L1765.31 1377.67 L1766.02 1377.67 L1766.73 1377.67 L1767.44 1377.67 L1768.14 1377.67 L1768.85 1377.67 L1769.56 1377.67 L1770.27 1377.67 L1770.98 1377.67 L1771.68 1377.67 L1772.39 1377.67 L1773.1 1377.67 L1773.81 1377.67 L1774.51 1377.67 L1775.22 1377.67 L1775.93 1377.67 L1776.64 1377.67 L1777.35 1377.67 L1778.05 1377.67 L1778.76 1377.67 L1779.47 1377.67 L1780.18 1377.67 L1780.88 1377.67 L1781.59 1377.67 L1782.3 1377.67 L1783.01 1377.67 L1783.72 1377.67 L1784.42 1377.67 L1785.13 1377.67 L1785.84 1377.67 L1786.55 1377.67 L1787.25 1377.67 L1787.96 1377.67 L1788.67 1377.67 L1789.38 1377.67 L1790.09 1377.67 L1790.79 1377.67 L1791.5 1377.67 L1792.21 1377.67 L1792.92 1377.67 L1793.62 1377.67 L1794.33 1377.67 L1795.04 1377.67 L1795.75 1377.67 L1796.46 1377.67 L1797.16 1377.67 L1797.87 1377.67 L1798.58 1377.67 L1799.29 1377.67 L1799.99 1377.67 L1800.7 1377.67 L1801.41 1377.67 L1802.12 1377.67 L1802.83 1377.67 L1803.53 1377.67 L1804.24 1377.67 L1804.95 1377.67 L1805.66 1377.67 L1806.36 1377.67 L1807.07 1377.67 L1807.78 1377.67 L1808.49 1377.67 L1809.2 1377.67 L1809.9 1377.67 L1810.61 1377.67 L1811.32 1377.67 L1812.03 1377.67 L1812.73 1377.67 L1813.44 1377.67 L1814.15 1377.67 L1814.86 1377.67 L1815.57 1377.67 L1816.27 1377.67 L1816.98 1377.67 L1817.69 1377.67 L1818.4 1377.67 L1819.1 1377.67 L1819.81 1377.67 L1820.52 1377.67 L1821.23 1377.67 L1821.94 1377.67 L1822.64 1377.67 L1823.35 1377.67 L1824.06 1377.67 L1824.77 1377.67 L1825.48 1377.67 L1826.18 1377.67 L1826.89 1377.67 L1827.6 1377.67 L1828.31 1377.67 L1829.01 1377.67 L1829.72 1377.67 L1830.43 1377.67 L1831.14 1377.67 L1831.85 1377.67 L1832.55 1377.67 L1833.26 1377.67 L1833.97 1377.67 L1834.68 1377.67 L1835.38 1377.67 L1836.09 1377.67 L1836.8 1377.67 L1837.51 1377.67 L1838.22 1377.67 L1838.92 1377.67 L1839.63 1377.67 L1840.34 1377.67 L1841.05 1377.67 L1841.75 1377.67 L1842.46 1377.67 L1843.17 1377.67 L1843.88 1377.67 L1844.59 1377.67 L1845.29 1377.67 L1846 1377.67 L1846.71 1377.67 L1847.42 1377.67 L1848.12 1377.67 L1848.83 1377.67 L1849.54 1377.67 L1850.25 1377.67 L1850.96 1377.67 L1851.66 1377.67 L1852.37 1377.67 L1853.08 1377.67 L1853.79 1377.67 L1854.49 1377.67 L1855.2 1377.67 L1855.91 1377.67 L1856.62 1377.67 L1857.33 1377.67 L1858.03 1377.67 L1858.74 1377.67 L1859.45 1377.67 L1860.16 1377.67 L1860.86 1377.67 L1861.57 1377.67 L1862.28 1377.67 L1862.99 1377.67 L1863.7 1377.67 L1864.4 1377.67 L1865.11 1377.67 L1865.82 1377.67 L1866.53 1377.67 L1867.23 1377.67 L1867.94 1377.67 L1868.65 1377.67 L1869.36 1377.67 L1870.07 1377.67 L1870.77 1377.67 L1871.48 1377.67 L1872.19 1377.67 L1872.9 1377.67 L1873.6 1377.67 L1874.31 1377.67 L1875.02 1377.67 L1875.73 1377.67 L1876.44 1377.67 L1877.14 1377.67 L1877.85 1377.67 L1878.56 1377.67 L1879.27 1377.67 L1879.97 1377.67 L1880.68 1377.67 L1881.39 1377.67 L1882.1 1377.67 L1882.81 1377.67 L1883.51 1377.67 L1884.22 1377.67 L1884.93 1377.67 L1885.64 1377.67 L1886.34 1377.67 L1887.05 1377.67 L1887.76 1377.67 L1888.47 1377.67 L1889.18 1377.67 L1889.88 1377.67 L1890.59 1377.67 L1891.3 1377.67 L1892.01 1377.67 L1892.71 1377.67 L1893.42 1377.67 L1894.13 1377.67 L1894.84 1377.67 L1895.55 1377.67 L1896.25 1377.67 L1896.96 1377.67 L1897.67 1377.67 L1898.38 1377.67 L1899.08 1377.67 L1899.79 1377.67 L1900.5 1377.67 L1901.21 1377.67 L1901.92 1377.67 L1902.62 1377.67 L1903.33 1377.67 L1904.04 1377.67 L1904.75 1377.67 L1905.46 1377.67 L1906.16 1377.67 L1906.87 1377.67 L1907.58 1377.67 L1908.29 1377.67 L1908.99 1377.67 L1909.7 1377.67 L1910.41 1377.67 L1911.12 1377.67 L1911.83 1377.67 L1912.53 1377.67 L1913.24 1377.67 L1913.95 1377.67 L1914.66 1377.67 L1915.36 1377.67 L1916.07 1377.67 L1916.78 1377.67 L1917.49 1377.67 L1918.2 1377.67 L1918.9 1377.67 L1919.61 1377.67 L1920.32 1377.67 L1921.03 1377.67 L1921.73 1377.67 L1922.44 1377.67 L1923.15 1377.67 L1923.86 1377.67 L1924.57 1377.67 L1925.27 1377.67 L1925.98 1377.67 L1926.69 1377.67 L1927.4 1377.67 L1928.1 1377.67 L1928.81 1377.67 L1929.52 1377.67 L1930.23 1377.67 L1930.94 1377.67 L1931.64 1377.67 L1932.35 1377.67 L1933.06 1377.67 L1933.77 1377.67 L1934.47 1377.67 L1935.18 1377.67 L1935.89 1377.67 L1936.6 1377.67 L1937.31 1377.67 L1938.01 1377.67 L1938.72 1377.67 L1939.43 1377.67 L1940.14 1377.67 L1940.84 1377.67 L1941.55 1377.67 L1942.26 1377.67 L1942.97 1377.67 L1943.68 1377.67 L1944.38 1377.67 L1945.09 1377.67 L1945.8 1377.67 L1946.51 1377.67 L1947.21 1377.67 L1947.92 1377.67 L1948.63 1377.67 L1949.34 1377.67 L1950.05 1377.67 L1950.75 1377.67 L1951.46 1377.67 L1952.17 1377.67 L1952.88 1377.67 L1953.58 1377.67 L1954.29 1377.67 L1955 1377.67 L1955.71 1377.67 L1956.42 1377.67 L1957.12 1377.67 L1957.83 1377.67 L1958.54 1377.67 L1959.25 1377.67 L1959.95 1377.67 L1960.66 1377.67 L1961.37 1377.67 L1962.08 1377.67 L1962.79 1377.67 L1963.49 1377.67 L1964.2 1377.67 L1964.91 1377.67 L1965.62 1377.67 L1966.32 1377.67 L1967.03 1377.67 L1967.74 1377.67 L1968.45 1377.67 L1969.16 1377.67 L1969.86 1377.67 L1970.57 1377.67 L1971.28 1377.67 L1971.99 1377.67 L1972.69 1377.67 L1973.4 1377.67 L1974.11 1377.67 L1974.82 1377.67 L1975.53 1377.67 L1976.23 1377.67 L1976.94 1377.67 L1977.65 1377.67 L1978.36 1377.67 L1979.07 1377.67 L1979.77 1377.67 L1980.48 1377.67 L1981.19 1377.67 L1981.9 1377.67 L1982.6 1377.67 L1983.31 1377.67 L1984.02 1377.67 L1984.73 1377.67 L1985.44 1377.67 L1986.14 1377.67 L1986.85 1377.67 L1987.56 1377.67 L1988.27 1377.67 L1988.97 1377.67 L1989.68 1377.67 L1990.39 1377.67 L1991.1 1377.67 L1991.81 1377.67 L1992.51 1377.67 L1993.22 1377.67 L1993.93 1377.67 L1994.64 1377.67 L1995.34 1377.67 L1996.05 1377.67 L1996.76 1377.67 L1997.47 1377.67 L1998.18 1377.67 L1998.88 1377.67 L1999.59 1377.67 L2000.3 1377.67 L2001.01 1377.67 L2001.71 1377.67 L2002.42 1377.67 L2003.13 1377.67 L2003.84 1377.67 L2004.55 1377.67 L2005.25 1377.67 L2005.96 1377.67 L2006.67 1377.67 L2007.38 1377.67 L2008.08 1377.67 L2008.79 1377.67 L2009.5 1377.67 L2010.21 1377.67 L2010.92 1377.67 L2011.62 1377.67 L2012.33 1377.67 L2013.04 1377.67 L2013.75 1377.67 L2014.45 1377.67 L2015.16 1377.67 L2015.87 1377.67 L2016.58 1377.67 L2017.29 1377.67 L2017.99 1377.67 L2018.7 1377.67 L2019.41 1377.67 L2020.12 1377.67 L2020.82 1377.67 L2021.53 1377.67 L2022.24 1377.67 L2022.95 1377.67 L2023.66 1377.67 L2024.36 1377.67 L2025.07 1377.67 L2025.78 1377.67 L2026.49 1377.67 L2027.19 1377.67 L2027.9 1377.67 L2028.61 1377.67 L2029.32 1377.67 L2030.03 1377.67 L2030.73 1377.67 L2031.44 1377.67 L2032.15 1377.67 L2032.86 1377.67 L2033.56 1377.67 L2034.27 1377.67 L2034.98 1377.67 L2035.69 1377.67 L2036.4 1377.67 L2037.1 1377.67 L2037.81 1377.67 L2038.52 1377.67 L2039.23 1377.67 L2039.93 1377.67 L2040.64 1377.67 L2041.35 1377.67 L2042.06 1377.67 L2042.77 1377.67 L2043.47 1377.67 L2044.18 1377.67 L2044.89 1377.67 L2045.6 1377.67 L2046.3 1377.67 L2047.01 1377.67 L2047.72 1377.67 L2048.43 1377.67 L2049.14 1377.67 L2049.84 1377.67 L2050.55 1377.67 L2051.26 1377.67 L2051.97 1377.67 L2052.68 1377.67 L2053.38 1377.67 L2054.09 1377.67 L2054.8 1377.67 L2055.51 1377.67 L2056.21 1377.67 L2056.92 1377.67 L2057.63 1377.67 L2058.34 1377.67 L2059.05 1377.67 L2059.75 1377.67 L2060.46 1377.67 L2061.17 1377.67 L2061.88 1377.67 L2062.58 1377.67 L2063.29 1377.67 L2064 1377.67 L2064.71 1377.67 L2065.42 1377.67 L2066.12 1377.67 L2066.83 1377.67 L2067.54 1377.67 L2068.25 1377.67 L2068.95 1377.67 L2069.66 1377.67 L2070.37 1377.67 L2071.08 1377.67 L2071.79 1377.67 L2072.49 1377.67 L2073.2 1377.67 L2073.91 1377.67 L2074.62 1377.67 L2075.32 1377.67 L2076.03 1377.67 L2076.74 1377.67 L2077.45 1377.67 L2078.16 1377.67 L2078.86 1377.67 L2079.57 1377.67 L2080.28 1377.67 L2080.99 1377.67 L2081.69 1377.67 L2082.4 1377.67 L2083.11 1377.67 L2083.82 1377.67 L2084.53 1377.67 L2085.23 1377.67 L2085.94 1377.67 L2086.65 1377.67 L2087.36 1377.67 L2088.06 1377.67 L2088.77 1377.67 L2089.48 1377.67 L2090.19 1377.67 L2090.9 1377.67 L2091.6 1377.67 L2092.31 1377.67 L2093.02 1377.67 L2093.73 1377.67 L2094.43 1377.67 L2095.14 1377.67 L2095.85 1377.67 L2096.56 1377.67 L2097.27 1377.67 L2097.97 1377.67 L2098.68 1377.67 L2099.39 1377.67 L2100.1 1377.67 L2100.8 1377.67 L2101.51 1377.67 L2102.22 1377.67 L2102.93 1377.67 L2103.64 1377.67 L2104.34 1377.67 L2105.05 1377.67 L2105.76 1377.67 L2106.47 1377.67 L2107.17 1377.67 L2107.88 1377.67 L2108.59 1377.67 L2109.3 1377.67 L2110.01 1377.67 L2110.71 1377.67 L2111.42 1377.67 L2112.13 1377.67 L2112.84 1377.67 L2113.54 1377.67 L2114.25 1377.67 L2114.96 1377.67 L2115.67 1377.67 L2116.38 1377.67 L2117.08 1377.67 L2117.79 1377.67 L2118.5 1377.67 L2119.21 1377.67 L2119.91 1377.67 L2120.62 1377.67 L2121.33 1377.67 L2122.04 1377.67 L2122.75 1377.67 L2123.45 1377.67 L2124.16 1377.67 L2124.87 1377.67 L2125.58 1377.67 L2126.28 1377.67 L2126.99 1377.67 L2127.7 1377.67 L2128.41 1377.67 L2129.12 1377.67 L2129.82 1377.67 L2130.53 1377.67 L2131.24 1377.67 L2131.95 1377.67 L2132.66 1377.67 L2133.36 1377.67 L2134.07 1377.67 L2134.78 1377.67 L2135.49 1377.67 L2136.19 1377.67 L2136.9 1377.67 L2137.61 1377.67 L2138.32 1377.67 L2139.03 1377.67 L2139.73 1377.67 L2140.44 1377.67 L2141.15 1377.67 L2141.86 1377.67 L2142.56 1377.67 L2143.27 1377.67 L2143.98 1377.67 L2144.69 1377.67 L2145.4 1377.67 L2146.1 1377.67 L2146.81 1377.67 L2147.52 1377.67 L2148.23 1377.67 L2148.93 1377.67 L2149.64 1377.67 L2150.35 1377.67 L2151.06 1377.67 L2151.77 1377.67 L2152.47 1377.67 L2153.18 1377.67 L2153.89 1377.67 L2154.6 1377.67 L2155.3 1377.67 L2156.01 1377.67 L2156.72 1377.67 L2157.43 1377.67 L2158.14 1377.67 L2158.84 1377.67 L2159.55 1377.67 L2160.26 1377.67 L2160.97 1377.67 L2161.67 1377.67 L2162.38 1377.67 L2163.09 1377.67 L2163.8 1377.67 L2164.51 1377.67 L2165.21 1377.67 L2165.92 1377.67 L2166.63 1377.67 L2167.34 1377.67 L2168.04 1377.67 L2168.75 1377.67 L2169.46 1377.67 L2170.17 1377.67 L2170.88 1377.67 L2171.58 1377.67 L2172.29 1377.67 L2173 1377.67 L2173.71 1377.67 L2174.41 1377.67 L2175.12 1377.67 L2175.83 1377.67 L2176.54 1377.67 L2177.25 1377.67 L2177.95 1377.67 L2178.66 1377.67 L2179.37 1377.67 L2180.08 1377.67 L2180.78 1377.67 L2181.49 1377.67 L2182.2 1377.67 L2182.91 1377.67 L2183.62 1377.67 L2184.32 1377.67 L2185.03 1377.67 L2185.74 1377.67 L2186.45 1377.67 L2187.15 1377.67 L2187.86 1377.67 L2188.57 1377.67 L2189.28 1377.67 L2189.99 1377.67 L2190.69 1377.67 L2191.4 1377.67 L2192.11 1377.67 L2192.82 1377.67 L2193.52 1377.67 L2194.23 1377.67 L2194.94 1377.67 L2195.65 1377.67 L2196.36 1377.67 L2197.06 1377.67 L2197.77 1377.67 L2198.48 1377.67 L2199.19 1377.67 L2199.89 1377.67 L2200.6 1377.67 L2201.31 1377.67 L2202.02 1377.67 L2202.73 1377.67 L2203.43 1377.67 L2204.14 1377.67 L2204.85 1377.67 L2205.56 1377.67 L2206.27 1377.67 L2206.97 1377.67 L2207.68 1377.67 L2208.39 1377.67 L2209.1 1377.67 L2209.8 1377.67 L2210.51 1377.67 L2211.22 1377.67 L2211.93 1377.67 L2212.64 1377.67 L2213.34 1377.67 L2214.05 1377.67 L2214.76 1377.67 L2215.47 1377.67 L2216.17 1377.67 L2216.88 1377.67 L2217.59 1377.67 L2218.3 1377.67 L2219.01 1377.67 L2219.71 1377.67 L2220.42 1377.67 L2221.13 1377.67 L2221.84 1377.67 L2222.54 1377.67 L2223.25 1377.67 L2223.96 1377.67 L2224.67 1377.67 L2225.38 1377.67 L2226.08 1377.67 L2226.79 1377.67 L2227.5 1377.67 L2228.21 1377.67 L2228.91 1377.67 L2229.62 1377.67 L2230.33 1377.67 L2231.04 1377.67 L2231.75 1377.67 L2232.45 1377.67 L2233.16 1377.67 L2233.87 1377.67 L2234.58 1377.67 L2235.28 1377.67 L2235.99 1377.67 L2236.7 1377.67 L2237.41 1377.67 L2238.12 1377.67 L2238.82 1377.67 L2239.53 1377.67 L2240.24 1377.67 L2240.95 1377.67 L2241.65 1377.67 L2242.36 1377.67 L2243.07 1377.67 L2243.78 1377.67 L2244.49 1377.67 L2245.19 1377.67 L2245.9 1377.67 L2246.61 1377.67 L2247.32 1377.67 L2248.02 1377.67 L2248.73 1377.67 L2249.44 1377.67 L2250.15 1377.67 L2250.86 1377.67 L2251.56 1377.67 L2252.27 1377.67 L2252.98 1377.67 L2253.69 1377.67 L2254.39 1377.67 L2255.1 1377.67 L2255.81 1377.67 L2256.52 1377.67 L2257.23 1377.67 L2257.93 1377.67 L2258.64 1377.67 L2259.35 1377.67 L2260.06 1377.67 L2260.76 1377.67 L2261.47 1377.67 L2262.18 1377.67 L2262.89 1377.67 L2263.6 1377.67 L2264.3 1377.67 L2265.01 1377.67 L2265.72 1377.67 L2266.43 1377.67 L2267.13 1377.67 L2267.84 1377.67 L2268.55 1377.67 L2269.26 1377.67 L2269.97 1377.67 L2270.67 1377.67 L2271.38 1377.67 L2272.09 1377.67 L2272.8 1377.67 L2273.5 1377.67 L2274.21 1377.67 L2274.92 1377.67 L2275.63 1377.67 L2276.34 1377.67 L2277.04 1377.67 L2277.75 1377.67 L2278.46 1377.67 L2279.17 1377.67 L2279.87 1377.67 L2280.58 1377.67 L2281.29 1377.67 L2282 1377.67 L2282.71 1377.67 L2283.41 1377.67 L2284.12 1377.67 L2284.83 1377.67 L2285.54 1377.67 L2286.25 1377.67 L2286.95 1377.67 L2287.66 1377.67 L2288.37 1377.67 L2289.08 1377.67 L2289.08 1374.22 L2288.37 1374.22 L2287.66 1374.22 L2286.95 1374.22 L2286.25 1374.22 L2285.54 1374.22 L2284.83 1374.22 L2284.12 1374.22 L2283.41 1374.22 L2282.71 1374.22 L2282 1374.22 L2281.29 1374.22 L2280.58 1374.22 L2279.87 1374.22 L2279.17 1374.22 L2278.46 1374.22 L2277.75 1374.22 L2277.04 1374.22 L2276.34 1374.22 L2275.63 1374.22 L2274.92 1374.22 L2274.21 1374.22 L2273.5 1374.22 L2272.8 1374.22 L2272.09 1374.22 L2271.38 1374.22 L2270.67 1374.22 L2269.97 1374.22 L2269.26 1374.22 L2268.55 1374.22 L2267.84 1374.22 L2267.13 1374.22 L2266.43 1374.22 L2265.72 1374.22 L2265.01 1374.22 L2264.3 1374.22 L2263.6 1374.22 L2262.89 1374.22 L2262.18 1374.22 L2261.47 1374.22 L2260.76 1374.22 L2260.06 1374.22 L2259.35 1374.22 L2258.64 1374.22 L2257.93 1374.22 L2257.23 1374.22 L2256.52 1374.22 L2255.81 1374.22 L2255.1 1374.22 L2254.39 1374.22 L2253.69 1374.22 L2252.98 1374.22 L2252.27 1374.22 L2251.56 1374.22 L2250.86 1374.22 L2250.15 1374.22 L2249.44 1374.22 L2248.73 1374.22 L2248.02 1374.22 L2247.32 1374.22 L2246.61 1374.22 L2245.9 1374.22 L2245.19 1374.22 L2244.49 1374.22 L2243.78 1374.22 L2243.07 1374.22 L2242.36 1374.22 L2241.65 1374.22 L2240.95 1374.22 L2240.24 1374.22 L2239.53 1374.22 L2238.82 1374.22 L2238.12 1374.22 L2237.41 1374.22 L2236.7 1374.22 L2235.99 1374.22 L2235.28 1374.22 L2234.58 1374.22 L2233.87 1374.22 L2233.16 1374.22 L2232.45 1374.22 L2231.75 1374.22 L2231.04 1374.22 L2230.33 1374.22 L2229.62 1374.22 L2228.91 1374.22 L2228.21 1374.22 L2227.5 1374.22 L2226.79 1374.22 L2226.08 1374.22 L2225.38 1374.22 L2224.67 1374.22 L2223.96 1374.22 L2223.25 1374.22 L2222.54 1374.22 L2221.84 1374.22 L2221.13 1374.22 L2220.42 1374.22 L2219.71 1374.22 L2219.01 1374.22 L2218.3 1374.22 L2217.59 1374.22 L2216.88 1374.22 L2216.17 1374.22 L2215.47 1374.22 L2214.76 1374.22 L2214.05 1374.22 L2213.34 1374.22 L2212.64 1374.22 L2211.93 1374.22 L2211.22 1374.22 L2210.51 1374.22 L2209.8 1374.22 L2209.1 1374.22 L2208.39 1374.22 L2207.68 1374.22 L2206.97 1374.22 L2206.27 1374.22 L2205.56 1374.22 L2204.85 1374.22 L2204.14 1374.22 L2203.43 1374.22 L2202.73 1374.22 L2202.02 1374.22 L2201.31 1374.22 L2200.6 1374.22 L2199.89 1374.22 L2199.19 1374.22 L2198.48 1374.22 L2197.77 1374.22 L2197.06 1374.22 L2196.36 1374.22 L2195.65 1374.22 L2194.94 1374.22 L2194.23 1374.22 L2193.52 1374.22 L2192.82 1374.22 L2192.11 1374.22 L2191.4 1374.22 L2190.69 1374.22 L2189.99 1374.22 L2189.28 1374.22 L2188.57 1374.22 L2187.86 1374.22 L2187.15 1374.22 L2186.45 1374.22 L2185.74 1374.22 L2185.03 1374.22 L2184.32 1374.22 L2183.62 1374.22 L2182.91 1374.22 L2182.2 1374.22 L2181.49 1374.22 L2180.78 1374.22 L2180.08 1374.22 L2179.37 1374.22 L2178.66 1374.22 L2177.95 1374.22 L2177.25 1374.22 L2176.54 1374.22 L2175.83 1374.22 L2175.12 1374.22 L2174.41 1374.22 L2173.71 1374.22 L2173 1374.22 L2172.29 1374.22 L2171.58 1374.22 L2170.88 1374.22 L2170.17 1374.22 L2169.46 1374.22 L2168.75 1374.22 L2168.04 1374.22 L2167.34 1374.22 L2166.63 1374.22 L2165.92 1374.22 L2165.21 1374.22 L2164.51 1374.22 L2163.8 1374.22 L2163.09 1374.22 L2162.38 1374.22 L2161.67 1374.22 L2160.97 1374.22 L2160.26 1374.22 L2159.55 1374.22 L2158.84 1374.22 L2158.14 1374.22 L2157.43 1374.22 L2156.72 1374.22 L2156.01 1374.22 L2155.3 1374.22 L2154.6 1374.22 L2153.89 1374.22 L2153.18 1374.22 L2152.47 1374.22 L2151.77 1374.22 L2151.06 1374.22 L2150.35 1374.22 L2149.64 1374.22 L2148.93 1374.22 L2148.23 1374.22 L2147.52 1374.22 L2146.81 1374.22 L2146.1 1374.22 L2145.4 1374.22 L2144.69 1374.22 L2143.98 1374.22 L2143.27 1374.22 L2142.56 1374.22 L2141.86 1374.22 L2141.15 1374.22 L2140.44 1374.22 L2139.73 1374.22 L2139.03 1374.22 L2138.32 1374.22 L2137.61 1374.22 L2136.9 1374.22 L2136.19 1374.22 L2135.49 1374.22 L2134.78 1374.22 L2134.07 1374.22 L2133.36 1374.22 L2132.66 1374.22 L2131.95 1374.22 L2131.24 1374.22 L2130.53 1374.22 L2129.82 1374.22 L2129.12 1374.22 L2128.41 1374.22 L2127.7 1374.22 L2126.99 1374.22 L2126.28 1374.22 L2125.58 1374.22 L2124.87 1374.22 L2124.16 1374.22 L2123.45 1374.22 L2122.75 1374.22 L2122.04 1374.22 L2121.33 1374.22 L2120.62 1374.22 L2119.91 1374.22 L2119.21 1374.22 L2118.5 1374.22 L2117.79 1374.22 L2117.08 1374.22 L2116.38 1374.22 L2115.67 1374.22 L2114.96 1374.22 L2114.25 1374.22 L2113.54 1374.22 L2112.84 1374.22 L2112.13 1374.22 L2111.42 1374.22 L2110.71 1374.22 L2110.01 1374.22 L2109.3 1374.22 L2108.59 1374.22 L2107.88 1374.22 L2107.17 1374.22 L2106.47 1374.22 L2105.76 1374.22 L2105.05 1374.22 L2104.34 1374.22 L2103.64 1374.22 L2102.93 1374.22 L2102.22 1374.22 L2101.51 1374.22 L2100.8 1374.22 L2100.1 1374.22 L2099.39 1374.22 L2098.68 1374.22 L2097.97 1374.22 L2097.27 1374.22 L2096.56 1374.22 L2095.85 1374.22 L2095.14 1374.22 L2094.43 1374.22 L2093.73 1374.22 L2093.02 1374.22 L2092.31 1374.22 L2091.6 1374.22 L2090.9 1374.22 L2090.19 1374.22 L2089.48 1374.22 L2088.77 1374.22 L2088.06 1374.22 L2087.36 1374.22 L2086.65 1374.22 L2085.94 1374.22 L2085.23 1374.22 L2084.53 1374.22 L2083.82 1374.22 L2083.11 1374.22 L2082.4 1374.22 L2081.69 1374.22 L2080.99 1374.22 L2080.28 1374.22 L2079.57 1374.22 L2078.86 1374.22 L2078.16 1374.22 L2077.45 1374.22 L2076.74 1374.22 L2076.03 1374.22 L2075.32 1374.22 L2074.62 1374.22 L2073.91 1374.22 L2073.2 1374.22 L2072.49 1374.22 L2071.79 1374.22 L2071.08 1374.22 L2070.37 1374.22 L2069.66 1374.22 L2068.95 1374.22 L2068.25 1374.22 L2067.54 1374.22 L2066.83 1374.22 L2066.12 1374.22 L2065.42 1374.22 L2064.71 1374.22 L2064 1374.22 L2063.29 1374.22 L2062.58 1374.22 L2061.88 1374.22 L2061.17 1374.22 L2060.46 1374.22 L2059.75 1374.22 L2059.05 1374.22 L2058.34 1374.22 L2057.63 1374.22 L2056.92 1374.22 L2056.21 1374.22 L2055.51 1374.22 L2054.8 1374.22 L2054.09 1374.22 L2053.38 1374.22 L2052.68 1374.22 L2051.97 1374.22 L2051.26 1374.22 L2050.55 1374.22 L2049.84 1374.22 L2049.14 1374.22 L2048.43 1374.22 L2047.72 1374.22 L2047.01 1374.22 L2046.3 1374.22 L2045.6 1374.22 L2044.89 1374.22 L2044.18 1374.22 L2043.47 1374.22 L2042.77 1374.22 L2042.06 1374.22 L2041.35 1374.22 L2040.64 1374.22 L2039.93 1374.22 L2039.23 1374.22 L2038.52 1374.22 L2037.81 1374.22 L2037.1 1374.22 L2036.4 1374.22 L2035.69 1374.22 L2034.98 1374.22 L2034.27 1374.22 L2033.56 1374.22 L2032.86 1374.22 L2032.15 1374.22 L2031.44 1374.22 L2030.73 1374.22 L2030.03 1374.22 L2029.32 1374.22 L2028.61 1374.22 L2027.9 1374.22 L2027.19 1374.22 L2026.49 1374.22 L2025.78 1374.22 L2025.07 1374.22 L2024.36 1374.22 L2023.66 1374.22 L2022.95 1374.22 L2022.24 1374.22 L2021.53 1374.22 L2020.82 1374.22 L2020.12 1374.22 L2019.41 1374.22 L2018.7 1374.22 L2017.99 1374.22 L2017.29 1374.22 L2016.58 1374.22 L2015.87 1374.22 L2015.16 1374.22 L2014.45 1374.22 L2013.75 1374.22 L2013.04 1374.22 L2012.33 1374.22 L2011.62 1374.22 L2010.92 1374.22 L2010.21 1374.22 L2009.5 1374.22 L2008.79 1374.22 L2008.08 1374.22 L2007.38 1374.22 L2006.67 1374.22 L2005.96 1374.22 L2005.25 1374.22 L2004.55 1374.22 L2003.84 1374.22 L2003.13 1374.22 L2002.42 1374.22 L2001.71 1374.22 L2001.01 1374.22 L2000.3 1374.22 L1999.59 1374.22 L1998.88 1374.22 L1998.18 1374.22 L1997.47 1374.22 L1996.76 1374.22 L1996.05 1374.22 L1995.34 1374.22 L1994.64 1374.22 L1993.93 1374.22 L1993.22 1374.22 L1992.51 1374.22 L1991.81 1374.22 L1991.1 1374.22 L1990.39 1374.22 L1989.68 1374.22 L1988.97 1374.22 L1988.27 1374.22 L1987.56 1374.22 L1986.85 1374.22 L1986.14 1374.22 L1985.44 1374.22 L1984.73 1374.22 L1984.02 1374.22 L1983.31 1374.22 L1982.6 1374.22 L1981.9 1374.22 L1981.19 1374.22 L1980.48 1374.22 L1979.77 1374.22 L1979.07 1374.22 L1978.36 1374.22 L1977.65 1374.22 L1976.94 1374.22 L1976.23 1374.22 L1975.53 1374.22 L1974.82 1374.22 L1974.11 1374.22 L1973.4 1374.22 L1972.69 1374.22 L1971.99 1374.22 L1971.28 1374.22 L1970.57 1374.22 L1969.86 1374.22 L1969.16 1374.22 L1968.45 1374.22 L1967.74 1374.22 L1967.03 1374.22 L1966.32 1374.22 L1965.62 1374.22 L1964.91 1374.22 L1964.2 1374.22 L1963.49 1374.22 L1962.79 1374.22 L1962.08 1374.22 L1961.37 1374.22 L1960.66 1374.22 L1959.95 1374.22 L1959.25 1374.22 L1958.54 1374.22 L1957.83 1374.22 L1957.12 1374.22 L1956.42 1374.22 L1955.71 1374.22 L1955 1374.22 L1954.29 1374.22 L1953.58 1374.22 L1952.88 1374.22 L1952.17 1374.22 L1951.46 1374.22 L1950.75 1374.22 L1950.05 1374.22 L1949.34 1374.22 L1948.63 1374.22 L1947.92 1374.22 L1947.21 1374.22 L1946.51 1374.22 L1945.8 1374.22 L1945.09 1374.22 L1944.38 1374.22 L1943.68 1374.22 L1942.97 1374.22 L1942.26 1374.22 L1941.55 1374.22 L1940.84 1374.22 L1940.14 1374.22 L1939.43 1374.22 L1938.72 1374.22 L1938.01 1374.22 L1937.31 1374.22 L1936.6 1374.22 L1935.89 1374.22 L1935.18 1374.22 L1934.47 1374.22 L1933.77 1374.22 L1933.06 1374.22 L1932.35 1374.22 L1931.64 1374.22 L1930.94 1374.22 L1930.23 1374.22 L1929.52 1374.22 L1928.81 1374.22 L1928.1 1374.22 L1927.4 1374.22 L1926.69 1374.22 L1925.98 1374.22 L1925.27 1374.22 L1924.57 1374.22 L1923.86 1374.22 L1923.15 1374.22 L1922.44 1374.22 L1921.73 1374.22 L1921.03 1374.22 L1920.32 1374.22 L1919.61 1374.22 L1918.9 1374.22 L1918.2 1374.22 L1917.49 1374.22 L1916.78 1374.22 L1916.07 1374.22 L1915.36 1374.22 L1914.66 1374.22 L1913.95 1374.22 L1913.24 1374.22 L1912.53 1374.22 L1911.83 1374.22 L1911.12 1374.22 L1910.41 1374.22 L1909.7 1374.22 L1908.99 1374.22 L1908.29 1374.22 L1907.58 1374.22 L1906.87 1374.22 L1906.16 1374.22 L1905.46 1374.22 L1904.75 1374.22 L1904.04 1374.22 L1903.33 1374.22 L1902.62 1374.22 L1901.92 1374.22 L1901.21 1374.22 L1900.5 1374.22 L1899.79 1374.22 L1899.08 1374.22 L1898.38 1374.22 L1897.67 1374.22 L1896.96 1374.22 L1896.25 1374.22 L1895.55 1374.22 L1894.84 1374.22 L1894.13 1374.22 L1893.42 1374.22 L1892.71 1374.22 L1892.01 1374.22 L1891.3 1374.22 L1890.59 1374.22 L1889.88 1374.22 L1889.18 1374.22 L1888.47 1374.22 L1887.76 1374.22 L1887.05 1374.22 L1886.34 1374.22 L1885.64 1374.22 L1884.93 1374.22 L1884.22 1374.22 L1883.51 1374.22 L1882.81 1374.22 L1882.1 1374.22 L1881.39 1374.22 L1880.68 1374.22 L1879.97 1374.22 L1879.27 1374.22 L1878.56 1374.22 L1877.85 1374.22 L1877.14 1374.22 L1876.44 1374.22 L1875.73 1374.22 L1875.02 1374.22 L1874.31 1374.22 L1873.6 1374.22 L1872.9 1374.22 L1872.19 1374.22 L1871.48 1374.22 L1870.77 1374.22 L1870.07 1374.22 L1869.36 1374.22 L1868.65 1374.22 L1867.94 1374.22 L1867.23 1374.22 L1866.53 1374.22 L1865.82 1374.22 L1865.11 1374.22 L1864.4 1374.22 L1863.7 1374.22 L1862.99 1374.22 L1862.28 1374.22 L1861.57 1374.22 L1860.86 1374.22 L1860.16 1374.22 L1859.45 1374.22 L1858.74 1374.22 L1858.03 1374.22 L1857.33 1374.22 L1856.62 1374.22 L1855.91 1374.22 L1855.2 1374.22 L1854.49 1374.22 L1853.79 1374.22 L1853.08 1374.22 L1852.37 1374.22 L1851.66 1374.22 L1850.96 1374.22 L1850.25 1374.22 L1849.54 1374.22 L1848.83 1374.22 L1848.12 1374.22 L1847.42 1374.22 L1846.71 1374.22 L1846 1374.22 L1845.29 1374.22 L1844.59 1374.22 L1843.88 1374.22 L1843.17 1374.22 L1842.46 1374.22 L1841.75 1374.22 L1841.05 1374.22 L1840.34 1374.22 L1839.63 1374.22 L1838.92 1374.22 L1838.22 1374.22 L1837.51 1374.22 L1836.8 1374.22 L1836.09 1374.22 L1835.38 1374.22 L1834.68 1374.22 L1833.97 1374.22 L1833.26 1374.22 L1832.55 1374.22 L1831.85 1374.22 L1831.14 1374.22 L1830.43 1374.22 L1829.72 1374.22 L1829.01 1374.22 L1828.31 1374.22 L1827.6 1374.22 L1826.89 1374.22 L1826.18 1374.22 L1825.48 1374.22 L1824.77 1374.22 L1824.06 1374.22 L1823.35 1374.22 L1822.64 1374.22 L1821.94 1374.22 L1821.23 1374.22 L1820.52 1374.22 L1819.81 1374.22 L1819.1 1374.22 L1818.4 1374.22 L1817.69 1374.22 L1816.98 1374.22 L1816.27 1374.22 L1815.57 1374.22 L1814.86 1374.22 L1814.15 1374.22 L1813.44 1374.22 L1812.73 1374.22 L1812.03 1374.22 L1811.32 1374.22 L1810.61 1374.22 L1809.9 1374.22 L1809.2 1374.22 L1808.49 1374.22 L1807.78 1374.22 L1807.07 1374.22 L1806.36 1374.22 L1805.66 1374.22 L1804.95 1374.22 L1804.24 1374.22 L1803.53 1374.22 L1802.83 1374.22 L1802.12 1374.22 L1801.41 1374.22 L1800.7 1374.22 L1799.99 1374.22 L1799.29 1374.22 L1798.58 1374.22 L1797.87 1374.22 L1797.16 1374.22 L1796.46 1374.22 L1795.75 1374.22 L1795.04 1374.22 L1794.33 1374.22 L1793.62 1374.22 L1792.92 1374.22 L1792.21 1374.22 L1791.5 1374.22 L1790.79 1374.22 L1790.09 1374.22 L1789.38 1374.22 L1788.67 1374.22 L1787.96 1374.22 L1787.25 1374.22 L1786.55 1374.22 L1785.84 1374.22 L1785.13 1374.22 L1784.42 1374.22 L1783.72 1374.22 L1783.01 1374.22 L1782.3 1374.22 L1781.59 1374.22 L1780.88 1374.22 L1780.18 1374.22 L1779.47 1374.22 L1778.76 1374.22 L1778.05 1374.22 L1777.35 1374.22 L1776.64 1374.22 L1775.93 1374.22 L1775.22 1374.22 L1774.51 1374.22 L1773.81 1374.22 L1773.1 1374.22 L1772.39 1374.22 L1771.68 1374.22 L1770.98 1374.22 L1770.27 1374.22 L1769.56 1374.22 L1768.85 1374.22 L1768.14 1374.22 L1767.44 1374.22 L1766.73 1374.22 L1766.02 1374.22 L1765.31 1374.22 L1764.61 1374.22 L1763.9 1374.22 L1763.19 1374.22 L1762.48 1374.22 L1761.77 1374.22 L1761.07 1374.22 L1760.36 1374.22 L1759.65 1374.22 L1758.94 1374.22 L1758.24 1374.22 L1757.53 1374.22 L1756.82 1374.22 L1756.11 1374.22 L1755.4 1374.22 L1754.7 1374.22 L1753.99 1374.22 L1753.28 1374.22 L1752.57 1374.22 L1751.87 1374.22 L1751.16 1374.22 L1750.45 1374.22 L1749.74 1374.22 L1749.03 1374.22 L1748.33 1374.22 L1747.62 1374.22 L1746.91 1374.22 L1746.2 1374.22 L1745.49 1374.22 L1744.79 1374.22 L1744.08 1374.22 L1743.37 1374.22 L1742.66 1374.22 L1741.96 1374.22 L1741.25 1374.22 L1740.54 1374.22 L1739.83 1374.22 L1739.12 1374.22 L1738.42 1374.22 L1737.71 1374.22 L1737 1374.22 L1736.29 1374.22 L1735.59 1374.22 L1734.88 1374.22 L1734.17 1374.22 L1733.46 1374.22 L1732.75 1374.22 L1732.05 1374.22 L1731.34 1374.22 L1730.63 1374.22 L1729.92 1374.22 L1729.22 1374.22 L1728.51 1374.22 L1727.8 1374.22 L1727.09 1374.22 L1726.38 1374.22 L1725.68 1374.22 L1724.97 1374.22 L1724.26 1374.22 L1723.55 1374.22 L1722.85 1374.22 L1722.14 1374.22 L1721.43 1374.22 L1720.72 1374.22 L1720.01 1374.22 L1719.31 1374.22 L1718.6 1374.22 L1717.89 1374.22 L1717.18 1374.22 L1716.48 1374.22 L1715.77 1374.22 L1715.06 1374.22 L1714.35 1374.22 L1713.64 1374.22 L1712.94 1374.22 L1712.23 1374.22 L1711.52 1374.22 L1710.81 1374.22 L1710.11 1374.22 L1709.4 1374.22 L1708.69 1374.22 L1707.98 1374.22 L1707.27 1374.22 L1706.57 1374.22 L1705.86 1374.22 L1705.15 1374.22 L1704.44 1374.22 L1703.74 1374.22 L1703.03 1374.22 L1702.32 1374.22 L1701.61 1374.22 L1700.9 1374.22 L1700.2 1374.22 L1699.49 1374.22 L1698.78 1374.22 L1698.07 1374.22 L1697.37 1374.22 L1696.66 1374.22 L1695.95 1374.22 L1695.24 1374.22 L1694.53 1374.22 L1693.83 1374.22 L1693.12 1374.22 L1692.41 1374.22 L1691.7 1374.22 L1691 1374.22 L1690.29 1374.22 L1689.58 1374.22 L1688.87 1374.22 L1688.16 1374.22 L1687.46 1374.22 L1686.75 1374.22 L1686.04 1374.22 L1685.33 1374.22 L1684.63 1374.22 L1683.92 1374.22 L1683.21 1374.22 L1682.5 1374.22 L1681.79 1374.22 L1681.09 1374.22 L1680.38 1374.22 L1679.67 1374.22 L1678.96 1374.22 L1678.26 1374.22 L1677.55 1374.22 L1676.84 1374.22 L1676.13 1374.22 L1675.42 1374.22 L1674.72 1374.22 L1674.01 1374.22 L1673.3 1374.22 L1672.59 1374.22 L1671.89 1374.22 L1671.18 1374.22 L1670.47 1374.22 L1669.76 1374.22 L1669.05 1374.22 L1668.35 1374.22 L1667.64 1374.22 L1666.93 1374.22 L1666.22 1374.22 L1665.51 1374.22 L1664.81 1374.22 L1664.1 1374.22 L1663.39 1374.22 L1662.68 1374.22 L1661.98 1374.22 L1661.27 1374.22 L1660.56 1374.22 L1659.85 1374.22 L1659.14 1374.22 L1658.44 1374.22 L1657.73 1374.22 L1657.02 1374.22 L1656.31 1374.22 L1655.61 1374.22 L1654.9 1374.22 L1654.19 1374.22 L1653.48 1374.22 L1652.77 1374.22 L1652.07 1374.22 L1651.36 1374.22 L1650.65 1374.22 L1649.94 1374.22 L1649.24 1374.22 L1648.53 1374.22 L1647.82 1374.22 L1647.11 1374.22 L1646.4 1374.22 L1645.7 1374.22 L1644.99 1374.22 L1644.28 1374.22 L1643.57 1374.22 L1642.87 1374.22 L1642.16 1374.22 L1641.45 1374.22 L1640.74 1374.22 L1640.03 1374.22 L1639.33 1374.22 L1638.62 1374.22 L1637.91 1374.22 L1637.2 1374.22 L1636.5 1374.22 L1635.79 1374.22 L1635.08 1374.22 L1634.37 1374.22 L1633.66 1374.22 L1632.96 1374.22 L1632.25 1374.22 L1631.54 1374.22 L1630.83 1374.22 L1630.13 1374.22 L1629.42 1374.22 L1628.71 1374.22 L1628 1374.22 L1627.29 1374.22 L1626.59 1374.22 L1625.88 1374.22 L1625.17 1374.22 L1624.46 1374.22 L1623.76 1374.22 L1623.05 1374.22 L1622.34 1374.22 L1621.63 1374.22 L1620.92 1374.22 L1620.22 1374.22 L1619.51 1374.22 L1618.8 1374.22 L1618.09 1374.22 L1617.39 1374.22 L1616.68 1374.22 L1615.97 1374.22 L1615.26 1374.22 L1614.55 1374.22 L1613.85 1374.22 L1613.14 1374.22 L1612.43 1374.22 L1611.72 1374.22 L1611.02 1374.22 L1610.31 1374.22 L1609.6 1374.22 L1608.89 1374.22 L1608.18 1374.22 L1607.48 1374.22 L1606.77 1374.22 L1606.06 1374.22 L1605.35 1374.22 L1604.65 1374.22 L1603.94 1374.22 L1603.23 1374.22 L1602.52 1374.22 L1601.81 1374.22 L1601.11 1374.22 L1600.4 1374.22 L1599.69 1374.22 L1598.98 1374.22 L1598.28 1374.22 L1597.57 1374.22 L1596.86 1374.22 L1596.15 1374.22 L1595.44 1374.22 L1594.74 1374.22 L1594.03 1374.22 L1593.32 1374.22 L1592.61 1374.22 L1591.9 1374.22 L1591.2 1374.22 L1590.49 1374.22 L1589.78 1374.22 L1589.07 1374.22 L1588.37 1374.22 L1587.66 1374.22 L1586.95 1374.22 L1586.24 1374.22 L1585.53 1374.22 L1584.83 1374.22 L1584.12 1374.22 L1583.41 1374.22 L1582.7 1374.22 L1582 1374.22 L1581.29 1374.22 L1580.58 1374.22 L1579.87 1374.22 L1579.16 1374.22 L1578.46 1374.22 L1577.75 1374.22 L1577.04 1374.22 L1576.33 1374.22 L1575.63 1374.22 L1574.92 1374.22 L1574.21 1374.22 L1573.5 1374.22 L1572.79 1374.22 L1572.09 1374.22 L1571.38 1374.22 L1570.67 1374.22 L1569.96 1374.22 L1569.26 1374.22 L1568.55 1374.22 L1567.84 1374.22 L1567.13 1374.22 L1566.42 1374.22 L1565.72 1374.22 L1565.01 1374.22 L1564.3 1374.22 L1563.59 1374.22 L1562.89 1374.22 L1562.18 1374.22 L1561.47 1374.22 L1560.76 1374.22 L1560.05 1374.22 L1559.35 1374.22 L1558.64 1374.22 L1557.93 1374.22 L1557.22 1374.22 L1556.52 1374.22 L1555.81 1374.22 L1555.1 1374.22 L1554.39 1374.22 L1553.68 1374.22 L1552.98 1374.22 L1552.27 1374.22 L1551.56 1374.22 L1550.85 1374.22 L1550.15 1374.22 L1549.44 1374.22 L1548.73 1374.22 L1548.02 1374.22 L1547.31 1374.22 L1546.61 1374.22 L1545.9 1374.22 L1545.19 1374.22 L1544.48 1374.22 L1543.78 1374.22 L1543.07 1374.22 L1542.36 1374.22 L1541.65 1374.22 L1540.94 1374.22 L1540.24 1374.22 L1539.53 1374.22 L1538.82 1374.22 L1538.11 1374.22 L1537.41 1374.22 L1536.7 1374.22 L1535.99 1374.22 L1535.28 1374.22 L1534.57 1374.22 L1533.87 1374.22 L1533.16 1374.22 L1532.45 1374.22 L1531.74 1374.22 L1531.04 1374.22 L1530.33 1374.22 L1529.62 1374.22 L1528.91 1374.22 L1528.2 1374.22 L1527.5 1374.22 L1526.79 1374.22 L1526.08 1374.22 L1525.37 1374.22 L1524.67 1374.22 L1523.96 1374.22 L1523.25 1374.22 L1522.54 1374.22 L1521.83 1374.22 L1521.13 1374.22 L1520.42 1374.22 L1519.71 1374.22 L1519 1374.22 L1518.3 1374.22 L1517.59 1374.22 L1516.88 1374.22 L1516.17 1374.22 L1515.46 1374.22 L1514.76 1374.22 L1514.05 1374.22 L1513.34 1374.22 L1512.63 1374.22 L1511.92 1374.22 L1511.22 1374.22 L1510.51 1374.22 L1509.8 1374.22 L1509.09 1374.22 L1508.39 1374.22 L1507.68 1374.22 L1506.97 1374.22 L1506.26 1374.22 L1505.55 1374.22 L1504.85 1374.22 L1504.14 1374.22 L1503.43 1374.22 L1502.72 1374.22 L1502.02 1374.22 L1501.31 1374.22 L1500.6 1374.22 L1499.89 1374.22 L1499.18 1374.22 L1498.48 1374.22 L1497.77 1374.22 L1497.06 1374.22 L1496.35 1374.22 L1495.65 1374.22 L1494.94 1374.22 L1494.23 1374.22 L1493.52 1374.22 L1492.81 1374.22 L1492.11 1374.22 L1491.4 1374.22 L1490.69 1374.22 L1489.98 1374.22 L1489.28 1374.22 L1488.57 1374.22 L1487.86 1374.22 L1487.15 1374.22 L1486.44 1374.22 L1485.74 1374.22 L1485.03 1374.22 L1484.32 1374.22 L1483.61 1374.22 L1482.91 1374.22 L1482.2 1374.22 L1481.49 1374.22 L1480.78 1374.22 L1480.07 1374.22 L1479.37 1374.22 L1478.66 1374.22 L1477.95 1374.22 L1477.24 1374.22 L1476.54 1374.22 L1475.83 1374.22 L1475.12 1374.22 L1474.41 1374.22 L1473.7 1374.22 L1473 1374.22 L1472.29 1374.22 L1471.58 1374.22 L1470.87 1374.22 L1470.17 1374.22 L1469.46 1374.22 L1468.75 1374.22 L1468.04 1374.22 L1467.33 1374.22 L1466.63 1374.22 L1465.92 1374.22 L1465.21 1374.22 L1464.5 1374.22 L1463.8 1374.22 L1463.09 1374.22 L1462.38 1374.22 L1461.67 1374.22 L1460.96 1374.22 L1460.26 1374.22 L1459.55 1374.22 L1458.84 1374.22 L1458.13 1374.22 L1457.43 1374.22 L1456.72 1374.22 L1456.01 1374.22 L1455.3 1374.22 L1454.59 1374.22 L1453.89 1374.22 L1453.18 1374.22 L1452.47 1374.22 L1451.76 1374.22 L1451.06 1374.22 L1450.35 1374.22 L1449.64 1374.22 L1448.93 1374.22 L1448.22 1374.22 L1447.52 1374.22 L1446.81 1374.22 L1446.1 1374.22 L1445.39 1374.22 L1444.69 1374.22 L1443.98 1374.22 L1443.27 1374.22 L1442.56 1374.22 L1441.85 1374.22 L1441.15 1374.22 L1440.44 1374.22 L1439.73 1374.22 L1439.02 1374.22 L1438.31 1374.22 L1437.61 1374.22 L1436.9 1374.22 L1436.19 1374.22 L1435.48 1374.22 L1434.78 1374.22 L1434.07 1374.22 L1433.36 1374.22 L1432.65 1374.22 L1431.94 1374.22 L1431.24 1374.22 L1430.53 1374.22 L1429.82 1374.22 L1429.11 1374.22 L1428.41 1374.22 L1427.7 1374.22 L1426.99 1374.22 L1426.28 1374.22 L1425.57 1374.22 L1424.87 1374.22 L1424.16 1374.22 L1423.45 1374.22 L1422.74 1374.22 L1422.04 1374.22 L1421.33 1374.22 L1420.62 1374.22 L1419.91 1374.22 L1419.2 1374.22 L1418.5 1374.22 L1417.79 1374.22 L1417.08 1374.22 L1416.37 1374.22 L1415.67 1374.22 L1414.96 1374.22 L1414.25 1374.22 L1413.54 1374.22 L1412.83 1374.22 L1412.13 1374.22 L1411.42 1374.22 L1410.71 1374.22 L1410 1374.22 L1409.3 1374.22 L1408.59 1374.22 L1407.88 1374.22 L1407.17 1374.22 L1406.46 1374.22 L1405.76 1374.22 L1405.05 1374.22 L1404.34 1374.22 L1403.63 1374.22 L1402.93 1374.22 L1402.22 1374.22 L1401.51 1374.22 L1400.8 1374.22 L1400.09 1374.22 L1399.39 1374.22 L1398.68 1374.22 L1397.97 1374.22 L1397.26 1374.22 L1396.56 1374.22 L1395.85 1374.22 L1395.14 1374.22 L1394.43 1374.22 L1393.72 1374.22 L1393.02 1374.22 L1392.31 1374.22 L1391.6 1374.22 L1390.89 1374.22 L1390.19 1374.22 L1389.48 1374.22 L1388.77 1374.22 L1388.06 1374.22 L1387.35 1374.22 L1386.65 1374.22 L1385.94 1374.22 L1385.23 1374.22 L1384.52 1374.22 L1383.82 1374.22 L1383.11 1374.22 L1382.4 1374.22 L1381.69 1374.22 L1380.98 1374.22 L1380.28 1374.22 L1379.57 1374.22 L1378.86 1374.22 L1378.15 1374.22 L1377.45 1374.22 L1376.74 1374.22 L1376.03 1374.22 L1375.32 1374.22 L1374.61 1374.22 L1373.91 1374.22 L1373.2 1374.22 L1372.49 1374.22 L1371.78 1374.22 L1371.08 1374.22 L1370.37 1374.22 L1369.66 1374.22 L1368.95 1374.22 L1368.24 1374.22 L1367.54 1374.22 L1366.83 1374.22 L1366.12 1374.22 L1365.41 1374.22 L1364.71 1374.22 L1364 1374.22 L1363.29 1374.22 L1362.58 1374.22 L1361.87 1374.22 L1361.17 1374.22 L1360.46 1374.22 L1359.75 1374.22 L1359.04 1374.22 L1358.33 1374.22 L1357.63 1374.22 L1356.92 1374.22 L1356.21 1374.22 L1355.5 1374.22 L1354.8 1374.22 L1354.09 1374.22 L1353.38 1374.22 L1352.67 1374.22 L1351.96 1374.22 L1351.26 1374.22 L1350.55 1374.22 L1349.84 1374.22 L1349.13 1374.22 L1348.43 1374.22 L1347.72 1374.22 L1347.01 1374.22 L1346.3 1374.22 L1345.59 1374.22 L1344.89 1374.22 L1344.18 1374.22 L1343.47 1374.22 L1342.76 1374.22 L1342.06 1374.22 L1341.35 1374.22 L1340.64 1374.22 L1339.93 1374.22 L1339.22 1374.22 L1338.52 1374.22 L1337.81 1374.22 L1337.1 1374.22 L1336.39 1374.22 L1335.69 1374.22 L1334.98 1374.22 L1334.27 1374.22 L1333.56 1374.22 L1332.85 1374.22 L1332.15 1374.22 L1331.44 1374.22 L1330.73 1374.22 L1330.02 1374.22 L1329.32 1374.22 L1328.61 1374.22 L1327.9 1374.22 L1327.19 1374.22 L1326.48 1374.22 L1325.78 1374.22 L1325.07 1374.22 L1324.36 1374.22 L1323.65 1374.22 L1322.95 1374.22 L1322.24 1374.22 L1321.53 1374.22 L1320.82 1374.22 L1320.11 1374.22 L1319.41 1374.22 L1318.7 1374.22 L1317.99 1374.22 L1317.28 1374.22 L1316.58 1374.22 L1315.87 1374.22 L1315.16 1374.22 L1314.45 1374.22 L1313.74 1374.22 L1313.04 1374.22 L1312.33 1374.22 L1311.62 1374.22 L1310.91 1374.22 L1310.21 1374.22 L1309.5 1374.22 L1308.79 1374.22 L1308.08 1374.22 L1307.37 1374.22 L1306.67 1374.22 L1305.96 1374.22 L1305.25 1374.22 L1304.54 1374.22 L1303.84 1374.22 L1303.13 1374.22 L1302.42 1374.22 L1301.71 1374.22 L1301 1374.22 L1300.3 1374.22 L1299.59 1374.22 L1298.88 1374.22 L1298.17 1374.22 L1297.47 1374.22 L1296.76 1374.22 L1296.05 1374.22 L1295.34 1374.22 L1294.63 1374.22 L1293.93 1374.22 L1293.22 1374.22 L1292.51 1374.22 L1291.8 1374.22 L1291.1 1374.22 L1290.39 1374.22 L1289.68 1374.22 L1288.97 1374.22 L1288.26 1374.22 L1287.56 1374.22 L1286.85 1374.22 L1286.14 1374.22 L1285.43 1374.22 L1284.72 1374.22 L1284.02 1374.22 L1283.31 1374.22 L1282.6 1374.22 L1281.89 1374.22 L1281.19 1374.22 L1280.48 1374.22 L1279.77 1374.22 L1279.06 1374.22 L1278.35 1374.22 L1277.65 1374.22 L1276.94 1374.22 L1276.23 1374.22 L1275.52 1374.22 L1274.82 1374.22 L1274.11 1374.22 L1273.4 1374.22 L1272.69 1374.22 L1271.98 1374.22 L1271.28 1374.22 L1270.57 1374.22 L1269.86 1374.22 L1269.15 1374.22 L1268.45 1374.22 L1267.74 1374.22 L1267.03 1374.22 L1266.32 1374.22 L1265.61 1374.22 L1264.91 1374.22 L1264.2 1374.22 L1263.49 1374.22 L1262.78 1374.22 L1262.08 1374.22 L1261.37 1374.22 L1260.66 1374.22 L1259.95 1374.22 L1259.24 1374.22 L1258.54 1374.22 L1257.83 1374.22 L1257.12 1374.22 L1256.41 1374.22 L1255.71 1374.22 L1255 1374.22 L1254.29 1374.22 L1253.58 1374.22 L1252.87 1374.22 L1252.17 1374.22 L1251.46 1374.22 L1250.75 1374.22 L1250.04 1374.22 L1249.34 1374.22 L1248.63 1374.22 L1247.92 1374.22 L1247.21 1374.22 L1246.5 1374.22 L1245.8 1374.22 L1245.09 1374.22 L1244.38 1374.22 L1243.67 1374.22 L1242.97 1374.22 L1242.26 1374.22 L1241.55 1374.22 L1240.84 1374.22 L1240.13 1374.22 L1239.43 1374.22 L1238.72 1374.22 L1238.01 1374.22 L1237.3 1374.22 L1236.6 1374.22 L1235.89 1374.22 L1235.18 1374.22 L1234.47 1374.22 L1233.76 1374.22 L1233.06 1374.22 L1232.35 1374.22 L1231.64 1374.22 L1230.93 1374.22 L1230.23 1374.22 L1229.52 1374.22 L1228.81 1374.22 L1228.1 1374.22 L1227.39 1374.22 L1226.69 1374.22 L1225.98 1374.22 L1225.27 1374.22 L1224.56 1374.22 L1223.86 1374.22 L1223.15 1374.22 L1222.44 1374.22 L1221.73 1374.22 L1221.02 1374.22 L1220.32 1374.22 L1219.61 1374.22 L1218.9 1374.22 L1218.19 1374.22 L1217.49 1374.22 L1216.78 1374.22 L1216.07 1374.22 L1215.36 1374.22 L1214.65 1374.22 L1213.95 1374.22 L1213.24 1374.22 L1212.53 1374.22 L1211.82 1374.22 L1211.12 1374.22 L1210.41 1374.22 L1209.7 1374.22 L1208.99 1374.22 L1208.28 1374.22 L1207.58 1374.22 L1206.87 1374.22 L1206.16 1374.22 L1205.45 1374.22 L1204.74 1374.22 L1204.04 1374.22 L1203.33 1374.22 L1202.62 1374.22 L1201.91 1374.22 L1201.21 1374.22 L1200.5 1374.22 L1199.79 1374.22 L1199.08 1374.22 L1198.37 1374.22 L1197.67 1374.22 L1196.96 1374.22 L1196.25 1374.22 L1195.54 1374.22 L1194.84 1374.22 L1194.13 1374.22 L1193.42 1374.22 L1192.71 1374.22 L1192 1374.22 L1191.3 1374.22 L1190.59 1374.22 L1189.88 1374.22 L1189.17 1374.22 L1188.47 1374.22 L1187.76 1374.22 L1187.05 1374.22 L1186.34 1374.22 L1185.63 1374.22 L1184.93 1374.22 L1184.22 1374.22 L1183.51 1374.22 L1182.8 1374.22 L1182.1 1374.22 L1181.39 1374.22 L1180.68 1374.22 L1179.97 1374.22 L1179.26 1374.22 L1178.56 1374.22 L1177.85 1374.22 L1177.14 1374.22 L1176.43 1374.22 L1175.73 1374.22 L1175.02 1374.22 L1174.31 1374.22 L1173.6 1374.22 L1172.89 1374.22 L1172.19 1374.22 L1171.48 1374.22 L1170.77 1374.22 L1170.06 1374.22 L1169.36 1374.22 L1168.65 1374.22 L1167.94 1374.22 L1167.23 1374.22 L1166.52 1374.22 L1165.82 1374.22 L1165.11 1374.22 L1164.4 1374.22 L1163.69 1374.22 L1162.99 1374.22 L1162.28 1374.22 L1161.57 1374.22 L1160.86 1374.22 L1160.15 1374.22 L1159.45 1374.22 L1158.74 1374.22 L1158.03 1374.22 L1157.32 1374.22 L1156.62 1374.22 L1155.91 1374.22 L1155.2 1374.22 L1154.49 1374.22 L1153.78 1374.22 L1153.08 1374.22 L1152.37 1374.22 L1151.66 1374.22 L1150.95 1374.22 L1150.25 1374.22 L1149.54 1374.22 L1148.83 1374.22 L1148.12 1374.22 L1147.41 1374.22 L1146.71 1374.22 L1146 1374.22 L1145.29 1374.22 L1144.58 1374.22 L1143.88 1374.22 L1143.17 1374.22 L1142.46 1374.22 L1141.75 1374.22 L1141.04 1374.22 L1140.34 1374.22 L1139.63 1374.22 L1138.92 1374.22 L1138.21 1374.22 L1137.51 1374.22 L1136.8 1374.22 L1136.09 1374.22 L1135.38 1374.22 L1134.67 1374.22 L1133.97 1374.22 L1133.26 1374.22 L1132.55 1374.22 L1131.84 1374.22 L1131.13 1374.22 L1130.43 1374.22 L1129.72 1374.22 L1129.01 1374.22 L1128.3 1374.22 L1127.6 1374.22 L1126.89 1374.22 L1126.18 1374.22 L1125.47 1374.22 L1124.76 1374.22 L1124.06 1374.22 L1123.35 1374.22 L1122.64 1374.22 L1121.93 1374.22 L1121.23 1374.22 L1120.52 1374.22 L1119.81 1374.22 L1119.1 1374.22 L1118.39 1374.22 L1117.69 1374.22 L1116.98 1374.22 L1116.27 1374.22 L1115.56 1374.22 L1114.86 1374.22 L1114.15 1374.22 L1113.44 1374.22 L1112.73 1374.22 L1112.02 1374.22 L1111.32 1374.22 L1110.61 1374.22 L1109.9 1374.22 L1109.19 1374.22 L1108.49 1374.22 L1107.78 1374.22 L1107.07 1374.22 L1106.36 1374.22 L1105.65 1374.22 L1104.95 1374.22 L1104.24 1374.22 L1103.53 1374.22 L1102.82 1374.22 L1102.12 1374.22 L1101.41 1374.22 L1100.7 1374.22 L1099.99 1374.22 L1099.28 1374.22 L1098.58 1374.22 L1097.87 1374.22 L1097.16 1374.22 L1096.45 1374.22 L1095.75 1374.22 L1095.04 1374.22 L1094.33 1374.22 L1093.62 1374.22 L1092.91 1374.22 L1092.21 1374.22 L1091.5 1374.22 L1090.79 1374.22 L1090.08 1374.22 L1089.38 1374.22 L1088.67 1374.22 L1087.96 1374.22 L1087.25 1374.22 L1086.54 1374.22 L1085.84 1374.22 L1085.13 1374.22 L1084.42 1374.22 L1083.71 1374.22 L1083.01 1374.22 L1082.3 1374.22 L1081.59 1374.22 L1080.88 1374.22 L1080.17 1374.22 L1079.47 1374.22 L1078.76 1374.22 L1078.05 1374.22 L1077.34 1374.22 L1076.64 1374.22 L1075.93 1374.22 L1075.22 1374.22 L1074.51 1374.22 L1073.8 1374.22 L1073.1 1374.22 L1072.39 1374.22 L1071.68 1374.22 L1070.97 1374.22 L1070.27 1374.22 L1069.56 1374.22 L1068.85 1374.22 L1068.14 1374.22 L1067.43 1374.22 L1066.73 1374.22 L1066.02 1374.22 L1065.31 1374.22 L1064.6 1374.22 L1063.9 1374.22 L1063.19 1374.22 L1062.48 1374.22 L1061.77 1374.22 L1061.06 1374.22 L1060.36 1374.22 L1059.65 1374.22 L1058.94 1374.22 L1058.23 1374.22 L1057.53 1374.22 L1056.82 1374.22 L1056.11 1374.22 L1055.4 1374.22 L1054.69 1374.22 L1053.99 1374.22 L1053.28 1374.22 L1052.57 1374.22 L1051.86 1374.22 L1051.15 1374.22 L1050.45 1374.22 L1049.74 1374.22 L1049.03 1374.22 L1048.32 1374.22 L1047.62 1374.22 L1046.91 1374.22 L1046.2 1374.22 L1045.49 1374.22 L1044.78 1374.22 L1044.08 1374.22 L1043.37 1374.22 L1042.66 1374.22 L1041.95 1374.22 L1041.25 1374.22 L1040.54 1374.22 L1039.83 1374.22 L1039.12 1374.22 L1038.41 1374.22 L1037.71 1374.22 L1037 1374.22 L1036.29 1374.22 L1035.58 1374.22 L1034.88 1374.22 L1034.17 1374.22 L1033.46 1374.22 L1032.75 1374.22 L1032.04 1374.22 L1031.34 1374.22 L1030.63 1374.22 L1029.92 1374.22 L1029.21 1374.22 L1028.51 1374.22 L1027.8 1374.22 L1027.09 1374.22 L1026.38 1374.22 L1025.67 1374.22 L1024.97 1374.22 L1024.26 1374.22 L1023.55 1374.22 L1022.84 1374.22 L1022.14 1374.22 L1021.43 1374.22 L1020.72 1374.22 L1020.01 1374.22 L1019.3 1374.22 L1018.6 1374.22 L1017.89 1374.22 L1017.18 1374.22 L1016.47 1374.22 L1015.77 1374.22 L1015.06 1374.22 L1014.35 1374.22 L1013.64 1374.22 L1012.93 1374.22 L1012.23 1374.22 L1011.52 1374.22 L1010.81 1374.22 L1010.1 1374.22 L1009.4 1374.22 L1008.69 1374.22 L1007.98 1374.22 L1007.27 1374.22 L1006.56 1374.22 L1005.86 1374.22 L1005.15 1374.22 L1004.44 1374.22 L1003.73 1374.22 L1003.03 1374.22 L1002.32 1374.22 L1001.61 1374.22 L1000.9 1374.22 L1000.19 1374.22 L999.486 1374.22 L998.779 1374.22 L998.071 1374.22 L997.363 1374.22 L996.655 1374.22 L995.947 1374.22 L995.24 1374.22 L994.532 1374.22 L993.824 1374.22 L993.116 1374.22 L992.409 1374.22 L991.701 1374.22 L990.993 1374.22 L990.285 1374.22 L989.577 1374.22 L988.87 1374.22 L988.162 1374.22 L987.454 1374.22 L986.746 1374.22 L986.038 1374.22 L985.331 1374.22 L984.623 1374.22 L983.915 1374.22 L983.207 1374.22 L982.499 1374.22 L981.792 1374.22 L981.084 1374.22 L980.376 1374.22 L979.668 1374.22 L978.961 1374.22 L978.253 1374.22 L977.545 1374.22 L976.837 1374.22 L976.129 1374.22 L975.422 1374.22 L974.714 1374.22 L974.006 1374.22 L973.298 1374.22 L972.59 1374.22 L971.883 1374.22 L971.175 1374.22 L970.467 1374.22 L969.759 1374.22 L969.051 1374.22 L968.344 1374.22 L967.636 1374.22 L966.928 1374.22 L966.22 1374.22 L965.513 1374.22 L964.805 1374.22 L964.097 1374.22 L963.389 1374.22 L962.681 1374.22 L961.974 1374.22 L961.266 1374.22 L960.558 1374.22 L959.85 1374.22 L959.142 1374.22 L958.435 1374.22 L957.727 1374.22 L957.019 1374.22 L956.311 1374.22 L955.604 1374.22 L954.896 1374.22 L954.188 1374.22 L953.48 1374.22 L952.772 1374.22 L952.065 1374.22 L951.357 1374.22 L950.649 1374.22 L949.941 1374.22 L949.233 1374.22 L948.526 1374.22 L947.818 1374.22 L947.11 1374.22 L946.402 1374.22 L945.694 1374.22 L944.987 1374.22 L944.279 1374.22 L943.571 1374.22 L942.863 1374.22 L942.156 1374.22 L941.448 1374.22 L940.74 1374.22 L940.032 1374.22 L939.324 1374.22 L938.617 1374.22 L937.909 1374.22 L937.201 1374.22 L936.493 1374.22 L935.785 1374.22 L935.078 1374.22 L934.37 1374.22 L933.662 1374.22 L932.954 1374.22 L932.247 1374.22 L931.539 1374.22 L930.831 1374.22 L930.123 1374.22 L929.415 1374.22 L928.708 1374.22 L928 1374.22 L927.292 1374.22 L926.584 1374.22 L925.876 1374.22 L925.169 1374.22 L924.461 1374.22 L923.753 1374.22 L923.045 1374.22 L922.337 1374.22 L921.63 1374.22 L920.922 1374.22 L920.214 1374.22 L919.506 1374.22 L918.799 1374.22 L918.091 1374.22 L917.383 1374.22 L916.675 1374.22 L915.967 1374.22 L915.26 1374.22 L914.552 1374.22 L913.844 1374.22 L913.136 1374.22 L912.428 1374.22 L911.721 1374.22 L911.013 1374.22 L910.305 1374.22 L909.597 1374.22 L908.89 1374.22 L908.182 1374.22 L907.474 1374.22 L906.766 1374.22 L906.058 1374.22 L905.351 1374.22 L904.643 1374.22 L903.935 1374.22 L903.227 1374.22 L902.519 1374.22 L901.812 1374.22 L901.104 1374.22 L900.396 1374.22 L899.688 1374.22 L898.98 1374.22 L898.273 1374.22 L897.565 1374.22 L896.857 1374.22 L896.149 1374.22 L895.442 1374.22 L894.734 1374.22 L894.026 1374.22 L893.318 1374.22 L892.61 1374.22 L891.903 1374.22 L891.195 1374.22 L890.487 1374.22 L889.779 1374.22 L889.071 1374.22 L888.364 1374.22 L887.656 1374.22 L886.948 1374.22 L886.24 1374.22 L885.533 1374.22 L884.825 1374.22 L884.117 1374.22 L883.409 1374.22 L882.701 1374.22 L881.994 1374.22 L881.286 1374.22 L880.578 1374.22 L879.87 1374.22 L879.162 1374.22 L878.455 1374.22 L877.747 1374.22 L877.039 1374.22 L876.331 1374.22 L875.623 1374.22 L874.916 1374.22 L874.208 1374.22  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip022)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"874.208,1375.9 874.916,1375.9 875.623,1375.9 876.331,1375.9 877.039,1375.9 877.747,1375.9 878.455,1375.9 879.162,1375.9 879.87,1375.9 880.578,1375.9 881.286,1375.9 881.994,1375.9 882.701,1375.9 883.409,1375.9 884.117,1375.9 884.825,1375.9 885.533,1375.9 886.24,1375.9 886.948,1375.9 887.656,1375.9 888.364,1375.9 889.071,1375.9 889.779,1375.9 890.487,1375.9 891.195,1375.9 891.903,1375.9 892.61,1375.9 893.318,1375.9 894.026,1375.9 894.734,1375.9 895.442,1375.9 896.149,1375.9 896.857,1375.9 897.565,1375.9 898.273,1375.9 898.98,1375.9 899.688,1375.9 900.396,1375.9 901.104,1375.9 901.812,1375.9 902.519,1375.9 903.227,1375.9 903.935,1375.9 904.643,1375.9 905.351,1375.9 906.058,1375.9 906.766,1375.9 907.474,1375.9 908.182,1375.9 908.89,1375.9 909.597,1375.9 910.305,1375.9 911.013,1375.9 911.721,1375.9 912.428,1375.9 913.136,1375.9 913.844,1375.9 914.552,1375.9 915.26,1375.9 915.967,1375.9 916.675,1375.9 917.383,1375.9 918.091,1375.9 918.799,1375.9 919.506,1375.9 920.214,1375.9 920.922,1375.9 921.63,1375.9 922.337,1375.9 923.045,1375.9 923.753,1375.9 924.461,1375.9 925.169,1375.9 925.876,1375.9 926.584,1375.9 927.292,1375.9 928,1375.9 928.708,1375.9 929.415,1375.9 930.123,1375.9 930.831,1375.9 931.539,1375.9 932.247,1375.9 932.954,1375.9 933.662,1375.9 934.37,1375.9 935.078,1375.9 935.785,1375.9 936.493,1375.9 937.201,1375.9 937.909,1375.9 938.617,1375.9 939.324,1375.9 940.032,1375.9 940.74,1375.9 941.448,1375.9 942.156,1375.9 942.863,1375.9 943.571,1375.9 944.279,1375.9 944.987,1375.9 945.694,1375.9 946.402,1375.9 947.11,1375.9 947.818,1375.9 948.526,1375.9 949.233,1375.9 949.941,1375.9 950.649,1375.9 951.357,1375.9 952.065,1375.9 952.772,1375.9 953.48,1375.9 954.188,1375.9 954.896,1375.9 955.604,1375.9 956.311,1375.9 957.019,1375.9 957.727,1375.9 958.435,1375.9 959.142,1375.9 959.85,1375.9 960.558,1375.9 961.266,1375.9 961.974,1375.9 962.681,1375.9 963.389,1375.9 964.097,1375.9 964.805,1375.9 965.513,1375.9 966.22,1375.9 966.928,1375.9 967.636,1375.9 968.344,1375.9 969.051,1375.9 969.759,1375.9 970.467,1375.9 971.175,1375.9 971.883,1375.9 972.59,1375.9 973.298,1375.9 974.006,1375.9 974.714,1375.9 975.422,1375.9 976.129,1375.9 976.837,1375.9 977.545,1375.9 978.253,1375.9 978.961,1375.9 979.668,1375.9 980.376,1375.9 981.084,1375.9 981.792,1375.9 982.499,1375.9 983.207,1375.9 983.915,1375.9 984.623,1375.9 985.331,1375.9 986.038,1375.9 986.746,1375.9 987.454,1375.9 988.162,1375.9 988.87,1375.9 989.577,1375.9 990.285,1375.9 990.993,1375.9 991.701,1375.9 992.409,1375.9 993.116,1375.9 993.824,1375.9 994.532,1375.9 995.24,1375.9 995.947,1375.9 996.655,1375.9 997.363,1375.9 998.071,1375.9 998.779,1375.9 999.486,1375.9 1000.19,1375.9 1000.9,1375.9 1001.61,1375.9 1002.32,1375.9 1003.03,1375.9 1003.73,1375.9 1004.44,1375.9 1005.15,1375.9 1005.86,1375.9 1006.56,1375.9 1007.27,1375.9 1007.98,1375.9 1008.69,1375.9 1009.4,1375.9 1010.1,1375.9 1010.81,1375.9 1011.52,1375.9 1012.23,1375.9 1012.93,1375.9 1013.64,1375.9 1014.35,1375.9 1015.06,1375.9 1015.77,1375.9 1016.47,1375.9 1017.18,1375.9 1017.89,1375.9 1018.6,1375.9 1019.3,1375.9 1020.01,1375.9 1020.72,1375.9 1021.43,1375.9 1022.14,1375.9 1022.84,1375.9 1023.55,1375.9 1024.26,1375.9 1024.97,1375.9 1025.67,1375.9 1026.38,1375.9 1027.09,1375.9 1027.8,1375.9 1028.51,1375.9 1029.21,1375.9 1029.92,1375.9 1030.63,1375.9 1031.34,1375.9 1032.04,1375.9 1032.75,1375.9 1033.46,1375.9 1034.17,1375.9 1034.88,1375.9 1035.58,1375.9 1036.29,1375.9 1037,1375.9 1037.71,1375.9 1038.41,1375.9 1039.12,1375.9 1039.83,1375.9 1040.54,1375.9 1041.25,1375.9 1041.95,1375.9 1042.66,1375.9 1043.37,1375.9 1044.08,1375.9 1044.78,1375.9 1045.49,1375.9 1046.2,1375.9 1046.91,1375.9 1047.62,1375.9 1048.32,1375.9 1049.03,1375.9 1049.74,1375.9 1050.45,1375.9 1051.15,1375.9 1051.86,1375.9 1052.57,1375.9 1053.28,1375.9 1053.99,1375.9 1054.69,1375.9 1055.4,1375.9 1056.11,1375.9 1056.82,1375.9 1057.53,1375.9 1058.23,1375.9 1058.94,1375.9 1059.65,1375.9 1060.36,1375.9 1061.06,1375.9 1061.77,1375.9 1062.48,1375.9 1063.19,1375.9 1063.9,1375.9 1064.6,1375.9 1065.31,1375.9 1066.02,1375.9 1066.73,1375.9 1067.43,1375.9 1068.14,1375.9 1068.85,1375.9 1069.56,1375.9 1070.27,1375.9 1070.97,1375.9 1071.68,1375.9 1072.39,1375.9 1073.1,1375.9 1073.8,1375.9 1074.51,1375.9 1075.22,1375.9 1075.93,1375.9 1076.64,1375.9 1077.34,1375.9 1078.05,1375.9 1078.76,1375.9 1079.47,1375.9 1080.17,1375.9 1080.88,1375.9 1081.59,1375.9 1082.3,1375.9 1083.01,1375.9 1083.71,1375.9 1084.42,1375.9 1085.13,1375.9 1085.84,1375.9 1086.54,1375.9 1087.25,1375.9 1087.96,1375.9 1088.67,1375.9 1089.38,1375.9 1090.08,1375.9 1090.79,1375.9 1091.5,1375.9 1092.21,1375.9 1092.91,1375.9 1093.62,1375.9 1094.33,1375.9 1095.04,1375.9 1095.75,1375.9 1096.45,1375.9 1097.16,1375.9 1097.87,1375.9 1098.58,1375.9 1099.28,1375.9 1099.99,1375.9 1100.7,1375.9 1101.41,1375.9 1102.12,1375.9 1102.82,1375.9 1103.53,1375.9 1104.24,1375.9 1104.95,1375.9 1105.65,1375.9 1106.36,1375.9 1107.07,1375.9 1107.78,1375.9 1108.49,1375.9 1109.19,1375.9 1109.9,1375.9 1110.61,1375.9 1111.32,1375.9 1112.02,1375.9 1112.73,1375.9 1113.44,1375.9 1114.15,1375.9 1114.86,1375.9 1115.56,1375.9 1116.27,1375.9 1116.98,1375.9 1117.69,1375.9 1118.39,1375.9 1119.1,1375.9 1119.81,1375.9 1120.52,1375.9 1121.23,1375.9 1121.93,1375.9 1122.64,1375.9 1123.35,1375.9 1124.06,1375.9 1124.76,1375.9 1125.47,1375.9 1126.18,1375.9 1126.89,1375.9 1127.6,1375.9 1128.3,1375.9 1129.01,1375.9 1129.72,1375.9 1130.43,1375.9 1131.13,1375.9 1131.84,1375.9 1132.55,1375.9 1133.26,1375.9 1133.97,1375.9 1134.67,1375.9 1135.38,1375.9 1136.09,1375.9 1136.8,1375.9 1137.51,1375.9 1138.21,1375.9 1138.92,1375.9 1139.63,1375.9 1140.34,1375.9 1141.04,1375.9 1141.75,1375.9 1142.46,1375.9 1143.17,1375.9 1143.88,1375.9 1144.58,1375.9 1145.29,1375.9 1146,1375.9 1146.71,1375.9 1147.41,1375.9 1148.12,1375.9 1148.83,1375.9 1149.54,1375.9 1150.25,1375.9 1150.95,1375.9 1151.66,1375.9 1152.37,1375.9 1153.08,1375.9 1153.78,1375.9 1154.49,1375.9 1155.2,1375.9 1155.91,1375.9 1156.62,1375.9 1157.32,1375.9 1158.03,1375.9 1158.74,1375.9 1159.45,1375.9 1160.15,1375.9 1160.86,1375.9 1161.57,1375.9 1162.28,1375.9 1162.99,1375.9 1163.69,1375.9 1164.4,1375.9 1165.11,1375.9 1165.82,1375.9 1166.52,1375.9 1167.23,1375.9 1167.94,1375.9 1168.65,1375.9 1169.36,1375.9 1170.06,1375.9 1170.77,1375.9 1171.48,1375.9 1172.19,1375.9 1172.89,1375.9 1173.6,1375.9 1174.31,1375.9 1175.02,1375.9 1175.73,1375.9 1176.43,1375.9 1177.14,1375.9 1177.85,1375.9 1178.56,1375.9 1179.26,1375.9 1179.97,1375.9 1180.68,1375.9 1181.39,1375.9 1182.1,1375.9 1182.8,1375.9 1183.51,1375.9 1184.22,1375.9 1184.93,1375.9 1185.63,1375.9 1186.34,1375.9 1187.05,1375.9 1187.76,1375.9 1188.47,1375.9 1189.17,1375.9 1189.88,1375.9 1190.59,1375.9 1191.3,1375.9 1192,1375.9 1192.71,1375.9 1193.42,1375.9 1194.13,1375.9 1194.84,1375.9 1195.54,1375.9 1196.25,1375.9 1196.96,1375.9 1197.67,1375.9 1198.37,1375.9 1199.08,1375.9 1199.79,1375.9 1200.5,1375.9 1201.21,1375.9 1201.91,1375.9 1202.62,1375.9 1203.33,1375.9 1204.04,1375.9 1204.74,1375.9 1205.45,1375.9 1206.16,1375.9 1206.87,1375.9 1207.58,1375.9 1208.28,1375.9 1208.99,1375.9 1209.7,1375.9 1210.41,1375.9 1211.12,1375.9 1211.82,1375.9 1212.53,1375.9 1213.24,1375.9 1213.95,1375.9 1214.65,1375.9 1215.36,1375.9 1216.07,1375.9 1216.78,1375.9 1217.49,1375.9 1218.19,1375.9 1218.9,1375.9 1219.61,1375.9 1220.32,1375.9 1221.02,1375.9 1221.73,1375.9 1222.44,1375.9 1223.15,1375.9 1223.86,1375.9 1224.56,1375.9 1225.27,1375.9 1225.98,1375.9 1226.69,1375.9 1227.39,1375.9 1228.1,1375.9 1228.81,1375.9 1229.52,1375.9 1230.23,1375.9 1230.93,1375.9 1231.64,1375.9 1232.35,1375.9 1233.06,1375.9 1233.76,1375.9 1234.47,1375.9 1235.18,1375.9 1235.89,1375.9 1236.6,1375.9 1237.3,1375.9 1238.01,1375.9 1238.72,1375.9 1239.43,1375.9 1240.13,1375.9 1240.84,1375.9 1241.55,1375.9 1242.26,1375.9 1242.97,1375.9 1243.67,1375.9 1244.38,1375.9 1245.09,1375.9 1245.8,1375.9 1246.5,1375.9 1247.21,1375.9 1247.92,1375.9 1248.63,1375.9 1249.34,1375.9 1250.04,1375.9 1250.75,1375.9 1251.46,1375.9 1252.17,1375.9 1252.87,1375.9 1253.58,1375.9 1254.29,1375.9 1255,1375.9 1255.71,1375.9 1256.41,1375.9 1257.12,1375.9 1257.83,1375.9 1258.54,1375.9 1259.24,1375.9 1259.95,1375.9 1260.66,1375.9 1261.37,1375.9 1262.08,1375.9 1262.78,1375.9 1263.49,1375.9 1264.2,1375.9 1264.91,1375.9 1265.61,1375.9 1266.32,1375.9 1267.03,1375.9 1267.74,1375.9 1268.45,1375.9 1269.15,1375.9 1269.86,1375.9 1270.57,1375.9 1271.28,1375.9 1271.98,1375.9 1272.69,1375.9 1273.4,1375.9 1274.11,1375.9 1274.82,1375.9 1275.52,1375.9 1276.23,1375.9 1276.94,1375.9 1277.65,1375.9 1278.35,1375.9 1279.06,1375.9 1279.77,1375.9 1280.48,1375.9 1281.19,1375.9 1281.89,1375.9 1282.6,1375.9 1283.31,1375.9 1284.02,1375.9 1284.72,1375.9 1285.43,1375.9 1286.14,1375.9 1286.85,1375.9 1287.56,1375.9 1288.26,1375.9 1288.97,1375.9 1289.68,1375.9 1290.39,1375.9 1291.1,1375.9 1291.8,1375.9 1292.51,1375.9 1293.22,1375.9 1293.93,1375.9 1294.63,1375.9 1295.34,1375.9 1296.05,1375.9 1296.76,1375.9 1297.47,1375.9 1298.17,1375.9 1298.88,1375.9 1299.59,1375.9 1300.3,1375.9 1301,1375.9 1301.71,1375.9 1302.42,1375.9 1303.13,1375.9 1303.84,1375.9 1304.54,1375.9 1305.25,1375.9 1305.96,1375.9 1306.67,1375.9 1307.37,1375.9 1308.08,1375.9 1308.79,1375.9 1309.5,1375.9 1310.21,1375.9 1310.91,1375.9 1311.62,1375.9 1312.33,1375.9 1313.04,1375.9 1313.74,1375.9 1314.45,1375.9 1315.16,1375.9 1315.87,1375.9 1316.58,1375.9 1317.28,1375.9 1317.99,1375.9 1318.7,1375.9 1319.41,1375.9 1320.11,1375.9 1320.82,1375.9 1321.53,1375.9 1322.24,1375.9 1322.95,1375.9 1323.65,1375.9 1324.36,1375.9 1325.07,1375.9 1325.78,1375.9 1326.48,1375.9 1327.19,1375.9 1327.9,1375.9 1328.61,1375.9 1329.32,1375.9 1330.02,1375.9 1330.73,1375.9 1331.44,1375.9 1332.15,1375.9 1332.85,1375.9 1333.56,1375.9 1334.27,1375.9 1334.98,1375.9 1335.69,1375.9 1336.39,1375.9 1337.1,1375.9 1337.81,1375.9 1338.52,1375.9 1339.22,1375.9 1339.93,1375.9 1340.64,1375.9 1341.35,1375.9 1342.06,1375.9 1342.76,1375.9 1343.47,1375.9 1344.18,1375.9 1344.89,1375.9 1345.59,1375.9 1346.3,1375.9 1347.01,1375.9 1347.72,1375.9 1348.43,1375.9 1349.13,1375.9 1349.84,1375.9 1350.55,1375.9 1351.26,1375.9 1351.96,1375.9 1352.67,1375.9 1353.38,1375.9 1354.09,1375.9 1354.8,1375.9 1355.5,1375.9 1356.21,1375.9 1356.92,1375.9 1357.63,1375.9 1358.33,1375.9 1359.04,1375.9 1359.75,1375.9 1360.46,1375.9 1361.17,1375.9 1361.87,1375.9 1362.58,1375.9 1363.29,1375.9 1364,1375.9 1364.71,1375.9 1365.41,1375.9 1366.12,1375.9 1366.83,1375.9 1367.54,1375.9 1368.24,1375.9 1368.95,1375.9 1369.66,1375.9 1370.37,1375.9 1371.08,1375.9 1371.78,1375.9 1372.49,1375.9 1373.2,1375.9 1373.91,1375.9 1374.61,1375.9 1375.32,1375.9 1376.03,1375.9 1376.74,1375.9 1377.45,1375.9 1378.15,1375.9 1378.86,1375.9 1379.57,1375.9 1380.28,1375.9 1380.98,1375.9 1381.69,1375.9 1382.4,1375.9 1383.11,1375.9 1383.82,1375.9 1384.52,1375.9 1385.23,1375.9 1385.94,1375.9 1386.65,1375.9 1387.35,1375.9 1388.06,1375.9 1388.77,1375.9 1389.48,1375.9 1390.19,1375.9 1390.89,1375.9 1391.6,1375.9 1392.31,1375.9 1393.02,1375.9 1393.72,1375.9 1394.43,1375.9 1395.14,1375.9 1395.85,1375.9 1396.56,1375.9 1397.26,1375.9 1397.97,1375.9 1398.68,1375.9 1399.39,1375.9 1400.09,1375.9 1400.8,1375.9 1401.51,1375.9 1402.22,1375.9 1402.93,1375.9 1403.63,1375.9 1404.34,1375.9 1405.05,1375.9 1405.76,1375.9 1406.46,1375.9 1407.17,1375.9 1407.88,1375.9 1408.59,1375.9 1409.3,1375.9 1410,1375.9 1410.71,1375.9 1411.42,1375.9 1412.13,1375.9 1412.83,1375.9 1413.54,1375.9 1414.25,1375.9 1414.96,1375.9 1415.67,1375.9 1416.37,1375.9 1417.08,1375.9 1417.79,1375.9 1418.5,1375.9 1419.2,1375.9 1419.91,1375.9 1420.62,1375.9 1421.33,1375.9 1422.04,1375.9 1422.74,1375.9 1423.45,1375.9 1424.16,1375.9 1424.87,1375.9 1425.57,1375.9 1426.28,1375.9 1426.99,1375.9 1427.7,1375.9 1428.41,1375.9 1429.11,1375.9 1429.82,1375.9 1430.53,1375.9 1431.24,1375.9 1431.94,1375.9 1432.65,1375.9 1433.36,1375.9 1434.07,1375.9 1434.78,1375.9 1435.48,1375.9 1436.19,1375.9 1436.9,1375.9 1437.61,1375.9 1438.31,1375.9 1439.02,1375.9 1439.73,1375.9 1440.44,1375.9 1441.15,1375.9 1441.85,1375.9 1442.56,1375.9 1443.27,1375.9 1443.98,1375.9 1444.69,1375.9 1445.39,1375.9 1446.1,1375.9 1446.81,1375.9 1447.52,1375.9 1448.22,1375.9 1448.93,1375.9 1449.64,1375.9 1450.35,1375.9 1451.06,1375.9 1451.76,1375.9 1452.47,1375.9 1453.18,1375.9 1453.89,1375.9 1454.59,1375.9 1455.3,1375.9 1456.01,1375.9 1456.72,1375.9 1457.43,1375.9 1458.13,1375.9 1458.84,1375.9 1459.55,1375.9 1460.26,1375.9 1460.96,1375.9 1461.67,1375.9 1462.38,1375.9 1463.09,1375.9 1463.8,1375.9 1464.5,1375.9 1465.21,1375.9 1465.92,1375.9 1466.63,1375.9 1467.33,1375.9 1468.04,1375.9 1468.75,1375.9 1469.46,1375.9 1470.17,1375.9 1470.87,1375.9 1471.58,1375.9 1472.29,1375.9 1473,1375.9 1473.7,1375.9 1474.41,1375.9 1475.12,1375.9 1475.83,1375.9 1476.54,1375.9 1477.24,1375.9 1477.95,1375.9 1478.66,1375.9 1479.37,1375.9 1480.07,1375.9 1480.78,1375.9 1481.49,1375.9 1482.2,1375.9 1482.91,1375.9 1483.61,1375.9 1484.32,1375.9 1485.03,1375.9 1485.74,1375.9 1486.44,1375.9 1487.15,1375.9 1487.86,1375.9 1488.57,1375.9 1489.28,1375.9 1489.98,1375.9 1490.69,1375.9 1491.4,1375.9 1492.11,1375.9 1492.81,1375.9 1493.52,1375.9 1494.23,1375.9 1494.94,1375.9 1495.65,1375.9 1496.35,1375.9 1497.06,1375.9 1497.77,1375.9 1498.48,1375.9 1499.18,1375.9 1499.89,1375.9 1500.6,1375.9 1501.31,1375.9 1502.02,1375.9 1502.72,1375.9 1503.43,1375.9 1504.14,1375.9 1504.85,1375.9 1505.55,1375.9 1506.26,1375.9 1506.97,1375.9 1507.68,1375.9 1508.39,1375.9 1509.09,1375.9 1509.8,1375.9 1510.51,1375.9 1511.22,1375.9 1511.92,1375.9 1512.63,1375.9 1513.34,1375.9 1514.05,1375.9 1514.76,1375.9 1515.46,1375.9 1516.17,1375.9 1516.88,1375.9 1517.59,1375.9 1518.3,1375.9 1519,1375.9 1519.71,1375.9 1520.42,1375.9 1521.13,1375.9 1521.83,1375.9 1522.54,1375.9 1523.25,1375.9 1523.96,1375.9 1524.67,1375.9 1525.37,1375.9 1526.08,1375.9 1526.79,1375.9 1527.5,1375.9 1528.2,1375.9 1528.91,1375.9 1529.62,1375.9 1530.33,1375.9 1531.04,1375.9 1531.74,1375.9 1532.45,1375.9 1533.16,1375.9 1533.87,1375.9 1534.57,1375.9 1535.28,1375.9 1535.99,1375.9 1536.7,1375.9 1537.41,1375.9 1538.11,1375.9 1538.82,1375.9 1539.53,1375.9 1540.24,1375.9 1540.94,1375.9 1541.65,1375.9 1542.36,1375.9 1543.07,1375.9 1543.78,1375.9 1544.48,1375.9 1545.19,1375.9 1545.9,1375.9 1546.61,1375.9 1547.31,1375.9 1548.02,1375.9 1548.73,1375.9 1549.44,1375.9 1550.15,1375.9 1550.85,1375.9 1551.56,1375.9 1552.27,1375.9 1552.98,1375.9 1553.68,1375.9 1554.39,1375.9 1555.1,1375.9 1555.81,1375.9 1556.52,1375.9 1557.22,1375.9 1557.93,1375.9 1558.64,1375.9 1559.35,1375.9 1560.05,1375.9 1560.76,1375.9 1561.47,1375.9 1562.18,1375.9 1562.89,1375.9 1563.59,1375.9 1564.3,1375.9 1565.01,1375.9 1565.72,1375.9 1566.42,1375.9 1567.13,1375.9 1567.84,1375.9 1568.55,1375.9 1569.26,1375.9 1569.96,1375.9 1570.67,1375.9 1571.38,1375.9 1572.09,1375.9 1572.79,1375.9 1573.5,1375.9 1574.21,1375.9 1574.92,1375.9 1575.63,1375.9 1576.33,1375.9 1577.04,1375.9 1577.75,1375.9 1578.46,1375.9 1579.16,1375.9 1579.87,1375.9 1580.58,1375.9 1581.29,1375.9 1582,1375.9 1582.7,1375.9 1583.41,1375.9 1584.12,1375.9 1584.83,1375.9 1585.53,1375.9 1586.24,1375.9 1586.95,1375.9 1587.66,1375.9 1588.37,1375.9 1589.07,1375.9 1589.78,1375.9 1590.49,1375.9 1591.2,1375.9 1591.9,1375.9 1592.61,1375.9 1593.32,1375.9 1594.03,1375.9 1594.74,1375.9 1595.44,1375.9 1596.15,1375.9 1596.86,1375.9 1597.57,1375.9 1598.28,1375.9 1598.98,1375.9 1599.69,1375.9 1600.4,1375.9 1601.11,1375.9 1601.81,1375.9 1602.52,1375.9 1603.23,1375.9 1603.94,1375.9 1604.65,1375.9 1605.35,1375.9 1606.06,1375.9 1606.77,1375.9 1607.48,1375.9 1608.18,1375.9 1608.89,1375.9 1609.6,1375.9 1610.31,1375.9 1611.02,1375.9 1611.72,1375.9 1612.43,1375.9 1613.14,1375.9 1613.85,1375.9 1614.55,1375.9 1615.26,1375.9 1615.97,1375.9 1616.68,1375.9 1617.39,1375.9 1618.09,1375.9 1618.8,1375.9 1619.51,1375.9 1620.22,1375.9 1620.92,1375.9 1621.63,1375.9 1622.34,1375.9 1623.05,1375.9 1623.76,1375.9 1624.46,1375.9 1625.17,1375.9 1625.88,1375.9 1626.59,1375.9 1627.29,1375.9 1628,1375.9 1628.71,1375.9 1629.42,1375.9 1630.13,1375.9 1630.83,1375.9 1631.54,1375.9 1632.25,1375.9 1632.96,1375.9 1633.66,1375.9 1634.37,1375.9 1635.08,1375.9 1635.79,1375.9 1636.5,1375.9 1637.2,1375.9 1637.91,1375.9 1638.62,1375.9 1639.33,1375.9 1640.03,1375.9 1640.74,1375.9 1641.45,1375.9 1642.16,1375.9 1642.87,1375.9 1643.57,1375.9 1644.28,1375.9 1644.99,1375.9 1645.7,1375.9 1646.4,1375.9 1647.11,1375.9 1647.82,1375.9 1648.53,1375.9 1649.24,1375.9 1649.94,1375.9 1650.65,1375.9 1651.36,1375.9 1652.07,1375.9 1652.77,1375.9 1653.48,1375.9 1654.19,1375.9 1654.9,1375.9 1655.61,1375.9 1656.31,1375.9 1657.02,1375.9 1657.73,1375.9 1658.44,1375.9 1659.14,1375.9 1659.85,1375.9 1660.56,1375.9 1661.27,1375.9 1661.98,1375.9 1662.68,1375.9 1663.39,1375.9 1664.1,1375.9 1664.81,1375.9 1665.51,1375.9 1666.22,1375.9 1666.93,1375.9 1667.64,1375.9 1668.35,1375.9 1669.05,1375.9 1669.76,1375.9 1670.47,1375.9 1671.18,1375.9 1671.89,1375.9 1672.59,1375.9 1673.3,1375.9 1674.01,1375.9 1674.72,1375.9 1675.42,1375.9 1676.13,1375.9 1676.84,1375.9 1677.55,1375.9 1678.26,1375.9 1678.96,1375.9 1679.67,1375.9 1680.38,1375.9 1681.09,1375.9 1681.79,1375.9 1682.5,1375.9 1683.21,1375.9 1683.92,1375.9 1684.63,1375.9 1685.33,1375.9 1686.04,1375.9 1686.75,1375.9 1687.46,1375.9 1688.16,1375.9 1688.87,1375.9 1689.58,1375.9 1690.29,1375.9 1691,1375.9 1691.7,1375.9 1692.41,1375.9 1693.12,1375.9 1693.83,1375.9 1694.53,1375.9 1695.24,1375.9 1695.95,1375.9 1696.66,1375.9 1697.37,1375.9 1698.07,1375.9 1698.78,1375.9 1699.49,1375.9 1700.2,1375.9 1700.9,1375.9 1701.61,1375.9 1702.32,1375.9 1703.03,1375.9 1703.74,1375.9 1704.44,1375.9 1705.15,1375.9 1705.86,1375.9 1706.57,1375.9 1707.27,1375.9 1707.98,1375.9 1708.69,1375.9 1709.4,1375.9 1710.11,1375.9 1710.81,1375.9 1711.52,1375.9 1712.23,1375.9 1712.94,1375.9 1713.64,1375.9 1714.35,1375.9 1715.06,1375.9 1715.77,1375.9 1716.48,1375.9 1717.18,1375.9 1717.89,1375.9 1718.6,1375.9 1719.31,1375.9 1720.01,1375.9 1720.72,1375.9 1721.43,1375.9 1722.14,1375.9 1722.85,1375.9 1723.55,1375.9 1724.26,1375.9 1724.97,1375.9 1725.68,1375.9 1726.38,1375.9 1727.09,1375.9 1727.8,1375.9 1728.51,1375.9 1729.22,1375.9 1729.92,1375.9 1730.63,1375.9 1731.34,1375.9 1732.05,1375.9 1732.75,1375.9 1733.46,1375.9 1734.17,1375.9 1734.88,1375.9 1735.59,1375.9 1736.29,1375.9 1737,1375.9 1737.71,1375.9 1738.42,1375.9 1739.12,1375.9 1739.83,1375.9 1740.54,1375.9 1741.25,1375.9 1741.96,1375.9 1742.66,1375.9 1743.37,1375.9 1744.08,1375.9 1744.79,1375.9 1745.49,1375.9 1746.2,1375.9 1746.91,1375.9 1747.62,1375.9 1748.33,1375.9 1749.03,1375.9 1749.74,1375.9 1750.45,1375.9 1751.16,1375.9 1751.87,1375.9 1752.57,1375.9 1753.28,1375.9 1753.99,1375.9 1754.7,1375.9 1755.4,1375.9 1756.11,1375.9 1756.82,1375.9 1757.53,1375.9 1758.24,1375.9 1758.94,1375.9 1759.65,1375.9 1760.36,1375.9 1761.07,1375.9 1761.77,1375.9 1762.48,1375.9 1763.19,1375.9 1763.9,1375.9 1764.61,1375.9 1765.31,1375.9 1766.02,1375.9 1766.73,1375.9 1767.44,1375.9 1768.14,1375.9 1768.85,1375.9 1769.56,1375.9 1770.27,1375.9 1770.98,1375.9 1771.68,1375.9 1772.39,1375.9 1773.1,1375.9 1773.81,1375.9 1774.51,1375.9 1775.22,1375.9 1775.93,1375.9 1776.64,1375.9 1777.35,1375.9 1778.05,1375.9 1778.76,1375.9 1779.47,1375.9 1780.18,1375.9 1780.88,1375.9 1781.59,1375.9 1782.3,1375.9 1783.01,1375.9 1783.72,1375.9 1784.42,1375.9 1785.13,1375.9 1785.84,1375.9 1786.55,1375.9 1787.25,1375.9 1787.96,1375.9 1788.67,1375.9 1789.38,1375.9 1790.09,1375.9 1790.79,1375.9 1791.5,1375.9 1792.21,1375.9 1792.92,1375.9 1793.62,1375.9 1794.33,1375.9 1795.04,1375.9 1795.75,1375.9 1796.46,1375.9 1797.16,1375.9 1797.87,1375.9 1798.58,1375.9 1799.29,1375.9 1799.99,1375.9 1800.7,1375.9 1801.41,1375.9 1802.12,1375.9 1802.83,1375.9 1803.53,1375.9 1804.24,1375.9 1804.95,1375.9 1805.66,1375.9 1806.36,1375.9 1807.07,1375.9 1807.78,1375.9 1808.49,1375.9 1809.2,1375.9 1809.9,1375.9 1810.61,1375.9 1811.32,1375.9 1812.03,1375.9 1812.73,1375.9 1813.44,1375.9 1814.15,1375.9 1814.86,1375.9 1815.57,1375.9 1816.27,1375.9 1816.98,1375.9 1817.69,1375.9 1818.4,1375.9 1819.1,1375.9 1819.81,1375.9 1820.52,1375.9 1821.23,1375.9 1821.94,1375.9 1822.64,1375.9 1823.35,1375.9 1824.06,1375.9 1824.77,1375.9 1825.48,1375.9 1826.18,1375.9 1826.89,1375.9 1827.6,1375.9 1828.31,1375.9 1829.01,1375.9 1829.72,1375.9 1830.43,1375.9 1831.14,1375.9 1831.85,1375.9 1832.55,1375.9 1833.26,1375.9 1833.97,1375.9 1834.68,1375.9 1835.38,1375.9 1836.09,1375.9 1836.8,1375.9 1837.51,1375.9 1838.22,1375.9 1838.92,1375.9 1839.63,1375.9 1840.34,1375.9 1841.05,1375.9 1841.75,1375.9 1842.46,1375.9 1843.17,1375.9 1843.88,1375.9 1844.59,1375.9 1845.29,1375.9 1846,1375.9 1846.71,1375.9 1847.42,1375.9 1848.12,1375.9 1848.83,1375.9 1849.54,1375.9 1850.25,1375.9 1850.96,1375.9 1851.66,1375.9 1852.37,1375.9 1853.08,1375.9 1853.79,1375.9 1854.49,1375.9 1855.2,1375.9 1855.91,1375.9 1856.62,1375.9 1857.33,1375.9 1858.03,1375.9 1858.74,1375.9 1859.45,1375.9 1860.16,1375.9 1860.86,1375.9 1861.57,1375.9 1862.28,1375.9 1862.99,1375.9 1863.7,1375.9 1864.4,1375.9 1865.11,1375.9 1865.82,1375.9 1866.53,1375.9 1867.23,1375.9 1867.94,1375.9 1868.65,1375.9 1869.36,1375.9 1870.07,1375.9 1870.77,1375.9 1871.48,1375.9 1872.19,1375.9 1872.9,1375.9 1873.6,1375.9 1874.31,1375.9 1875.02,1375.9 1875.73,1375.9 1876.44,1375.9 1877.14,1375.9 1877.85,1375.9 1878.56,1375.9 1879.27,1375.9 1879.97,1375.9 1880.68,1375.9 1881.39,1375.9 1882.1,1375.9 1882.81,1375.9 1883.51,1375.9 1884.22,1375.9 1884.93,1375.9 1885.64,1375.9 1886.34,1375.9 1887.05,1375.9 1887.76,1375.9 1888.47,1375.9 1889.18,1375.9 1889.88,1375.9 1890.59,1375.9 1891.3,1375.9 1892.01,1375.9 1892.71,1375.9 1893.42,1375.9 1894.13,1375.9 1894.84,1375.9 1895.55,1375.9 1896.25,1375.9 1896.96,1375.9 1897.67,1375.9 1898.38,1375.9 1899.08,1375.9 1899.79,1375.9 1900.5,1375.9 1901.21,1375.9 1901.92,1375.9 1902.62,1375.9 1903.33,1375.9 1904.04,1375.9 1904.75,1375.9 1905.46,1375.9 1906.16,1375.9 1906.87,1375.9 1907.58,1375.9 1908.29,1375.9 1908.99,1375.9 1909.7,1375.9 1910.41,1375.9 1911.12,1375.9 1911.83,1375.9 1912.53,1375.9 1913.24,1375.9 1913.95,1375.9 1914.66,1375.9 1915.36,1375.9 1916.07,1375.9 1916.78,1375.9 1917.49,1375.9 1918.2,1375.9 1918.9,1375.9 1919.61,1375.9 1920.32,1375.9 1921.03,1375.9 1921.73,1375.9 1922.44,1375.9 1923.15,1375.9 1923.86,1375.9 1924.57,1375.9 1925.27,1375.9 1925.98,1375.9 1926.69,1375.9 1927.4,1375.9 1928.1,1375.9 1928.81,1375.9 1929.52,1375.9 1930.23,1375.9 1930.94,1375.9 1931.64,1375.9 1932.35,1375.9 1933.06,1375.9 1933.77,1375.9 1934.47,1375.9 1935.18,1375.9 1935.89,1375.9 1936.6,1375.9 1937.31,1375.9 1938.01,1375.9 1938.72,1375.9 1939.43,1375.9 1940.14,1375.9 1940.84,1375.9 1941.55,1375.9 1942.26,1375.9 1942.97,1375.9 1943.68,1375.9 1944.38,1375.9 1945.09,1375.9 1945.8,1375.9 1946.51,1375.9 1947.21,1375.9 1947.92,1375.9 1948.63,1375.9 1949.34,1375.9 1950.05,1375.9 1950.75,1375.9 1951.46,1375.9 1952.17,1375.9 1952.88,1375.9 1953.58,1375.9 1954.29,1375.9 1955,1375.9 1955.71,1375.9 1956.42,1375.9 1957.12,1375.9 1957.83,1375.9 1958.54,1375.9 1959.25,1375.9 1959.95,1375.9 1960.66,1375.9 1961.37,1375.9 1962.08,1375.9 1962.79,1375.9 1963.49,1375.9 1964.2,1375.9 1964.91,1375.9 1965.62,1375.9 1966.32,1375.9 1967.03,1375.9 1967.74,1375.9 1968.45,1375.9 1969.16,1375.9 1969.86,1375.9 1970.57,1375.9 1971.28,1375.9 1971.99,1375.9 1972.69,1375.9 1973.4,1375.9 1974.11,1375.9 1974.82,1375.9 1975.53,1375.9 1976.23,1375.9 1976.94,1375.9 1977.65,1375.9 1978.36,1375.9 1979.07,1375.9 1979.77,1375.9 1980.48,1375.9 1981.19,1375.9 1981.9,1375.9 1982.6,1375.9 1983.31,1375.9 1984.02,1375.9 1984.73,1375.9 1985.44,1375.9 1986.14,1375.9 1986.85,1375.9 1987.56,1375.9 1988.27,1375.9 1988.97,1375.9 1989.68,1375.9 1990.39,1375.9 1991.1,1375.9 1991.81,1375.9 1992.51,1375.9 1993.22,1375.9 1993.93,1375.9 1994.64,1375.9 1995.34,1375.9 1996.05,1375.9 1996.76,1375.9 1997.47,1375.9 1998.18,1375.9 1998.88,1375.9 1999.59,1375.9 2000.3,1375.9 2001.01,1375.9 2001.71,1375.9 2002.42,1375.9 2003.13,1375.9 2003.84,1375.9 2004.55,1375.9 2005.25,1375.9 2005.96,1375.9 2006.67,1375.9 2007.38,1375.9 2008.08,1375.9 2008.79,1375.9 2009.5,1375.9 2010.21,1375.9 2010.92,1375.9 2011.62,1375.9 2012.33,1375.9 2013.04,1375.9 2013.75,1375.9 2014.45,1375.9 2015.16,1375.9 2015.87,1375.9 2016.58,1375.9 2017.29,1375.9 2017.99,1375.9 2018.7,1375.9 2019.41,1375.9 2020.12,1375.9 2020.82,1375.9 2021.53,1375.9 2022.24,1375.9 2022.95,1375.9 2023.66,1375.9 2024.36,1375.9 2025.07,1375.9 2025.78,1375.9 2026.49,1375.9 2027.19,1375.9 2027.9,1375.9 2028.61,1375.9 2029.32,1375.9 2030.03,1375.9 2030.73,1375.9 2031.44,1375.9 2032.15,1375.9 2032.86,1375.9 2033.56,1375.9 2034.27,1375.9 2034.98,1375.9 2035.69,1375.9 2036.4,1375.9 2037.1,1375.9 2037.81,1375.9 2038.52,1375.9 2039.23,1375.9 2039.93,1375.9 2040.64,1375.9 2041.35,1375.9 2042.06,1375.9 2042.77,1375.9 2043.47,1375.9 2044.18,1375.9 2044.89,1375.9 2045.6,1375.9 2046.3,1375.9 2047.01,1375.9 2047.72,1375.9 2048.43,1375.9 2049.14,1375.9 2049.84,1375.9 2050.55,1375.9 2051.26,1375.9 2051.97,1375.9 2052.68,1375.9 2053.38,1375.9 2054.09,1375.9 2054.8,1375.9 2055.51,1375.9 2056.21,1375.9 2056.92,1375.9 2057.63,1375.9 2058.34,1375.9 2059.05,1375.9 2059.75,1375.9 2060.46,1375.9 2061.17,1375.9 2061.88,1375.9 2062.58,1375.9 2063.29,1375.9 2064,1375.9 2064.71,1375.9 2065.42,1375.9 2066.12,1375.9 2066.83,1375.9 2067.54,1375.9 2068.25,1375.9 2068.95,1375.9 2069.66,1375.9 2070.37,1375.9 2071.08,1375.9 2071.79,1375.9 2072.49,1375.9 2073.2,1375.9 2073.91,1375.9 2074.62,1375.9 2075.32,1375.9 2076.03,1375.9 2076.74,1375.9 2077.45,1375.9 2078.16,1375.9 2078.86,1375.9 2079.57,1375.9 2080.28,1375.9 2080.99,1375.9 2081.69,1375.9 2082.4,1375.9 2083.11,1375.9 2083.82,1375.9 2084.53,1375.9 2085.23,1375.9 2085.94,1375.9 2086.65,1375.9 2087.36,1375.9 2088.06,1375.9 2088.77,1375.9 2089.48,1375.9 2090.19,1375.9 2090.9,1375.9 2091.6,1375.9 2092.31,1375.9 2093.02,1375.9 2093.73,1375.9 2094.43,1375.9 2095.14,1375.9 2095.85,1375.9 2096.56,1375.9 2097.27,1375.9 2097.97,1375.9 2098.68,1375.9 2099.39,1375.9 2100.1,1375.9 2100.8,1375.9 2101.51,1375.9 2102.22,1375.9 2102.93,1375.9 2103.64,1375.9 2104.34,1375.9 2105.05,1375.9 2105.76,1375.9 2106.47,1375.9 2107.17,1375.9 2107.88,1375.9 2108.59,1375.9 2109.3,1375.9 2110.01,1375.9 2110.71,1375.9 2111.42,1375.9 2112.13,1375.9 2112.84,1375.9 2113.54,1375.9 2114.25,1375.9 2114.96,1375.9 2115.67,1375.9 2116.38,1375.9 2117.08,1375.9 2117.79,1375.9 2118.5,1375.9 2119.21,1375.9 2119.91,1375.9 2120.62,1375.9 2121.33,1375.9 2122.04,1375.9 2122.75,1375.9 2123.45,1375.9 2124.16,1375.9 2124.87,1375.9 2125.58,1375.9 2126.28,1375.9 2126.99,1375.9 2127.7,1375.9 2128.41,1375.9 2129.12,1375.9 2129.82,1375.9 2130.53,1375.9 2131.24,1375.9 2131.95,1375.9 2132.66,1375.9 2133.36,1375.9 2134.07,1375.9 2134.78,1375.9 2135.49,1375.9 2136.19,1375.9 2136.9,1375.9 2137.61,1375.9 2138.32,1375.9 2139.03,1375.9 2139.73,1375.9 2140.44,1375.9 2141.15,1375.9 2141.86,1375.9 2142.56,1375.9 2143.27,1375.9 2143.98,1375.9 2144.69,1375.9 2145.4,1375.9 2146.1,1375.9 2146.81,1375.9 2147.52,1375.9 2148.23,1375.9 2148.93,1375.9 2149.64,1375.9 2150.35,1375.9 2151.06,1375.9 2151.77,1375.9 2152.47,1375.9 2153.18,1375.9 2153.89,1375.9 2154.6,1375.9 2155.3,1375.9 2156.01,1375.9 2156.72,1375.9 2157.43,1375.9 2158.14,1375.9 2158.84,1375.9 2159.55,1375.9 2160.26,1375.9 2160.97,1375.9 2161.67,1375.9 2162.38,1375.9 2163.09,1375.9 2163.8,1375.9 2164.51,1375.9 2165.21,1375.9 2165.92,1375.9 2166.63,1375.9 2167.34,1375.9 2168.04,1375.9 2168.75,1375.9 2169.46,1375.9 2170.17,1375.9 2170.88,1375.9 2171.58,1375.9 2172.29,1375.9 2173,1375.9 2173.71,1375.9 2174.41,1375.9 2175.12,1375.9 2175.83,1375.9 2176.54,1375.9 2177.25,1375.9 2177.95,1375.9 2178.66,1375.9 2179.37,1375.9 2180.08,1375.9 2180.78,1375.9 2181.49,1375.9 2182.2,1375.9 2182.91,1375.9 2183.62,1375.9 2184.32,1375.9 2185.03,1375.9 2185.74,1375.9 2186.45,1375.9 2187.15,1375.9 2187.86,1375.9 2188.57,1375.9 2189.28,1375.9 2189.99,1375.9 2190.69,1375.9 2191.4,1375.9 2192.11,1375.9 2192.82,1375.9 2193.52,1375.9 2194.23,1375.9 2194.94,1375.9 2195.65,1375.9 2196.36,1375.9 2197.06,1375.9 2197.77,1375.9 2198.48,1375.9 2199.19,1375.9 2199.89,1375.9 2200.6,1375.9 2201.31,1375.9 2202.02,1375.9 2202.73,1375.9 2203.43,1375.9 2204.14,1375.9 2204.85,1375.9 2205.56,1375.9 2206.27,1375.9 2206.97,1375.9 2207.68,1375.9 2208.39,1375.9 2209.1,1375.9 2209.8,1375.9 2210.51,1375.9 2211.22,1375.9 2211.93,1375.9 2212.64,1375.9 2213.34,1375.9 2214.05,1375.9 2214.76,1375.9 2215.47,1375.9 2216.17,1375.9 2216.88,1375.9 2217.59,1375.9 2218.3,1375.9 2219.01,1375.9 2219.71,1375.9 2220.42,1375.9 2221.13,1375.9 2221.84,1375.9 2222.54,1375.9 2223.25,1375.9 2223.96,1375.9 2224.67,1375.9 2225.38,1375.9 2226.08,1375.9 2226.79,1375.9 2227.5,1375.9 2228.21,1375.9 2228.91,1375.9 2229.62,1375.9 2230.33,1375.9 2231.04,1375.9 2231.75,1375.9 2232.45,1375.9 2233.16,1375.9 2233.87,1375.9 2234.58,1375.9 2235.28,1375.9 2235.99,1375.9 2236.7,1375.9 2237.41,1375.9 2238.12,1375.9 2238.82,1375.9 2239.53,1375.9 2240.24,1375.9 2240.95,1375.9 2241.65,1375.9 2242.36,1375.9 2243.07,1375.9 2243.78,1375.9 2244.49,1375.9 2245.19,1375.9 2245.9,1375.9 2246.61,1375.9 2247.32,1375.9 2248.02,1375.9 2248.73,1375.9 2249.44,1375.9 2250.15,1375.9 2250.86,1375.9 2251.56,1375.9 2252.27,1375.9 2252.98,1375.9 2253.69,1375.9 2254.39,1375.9 2255.1,1375.9 2255.81,1375.9 2256.52,1375.9 2257.23,1375.9 2257.93,1375.9 2258.64,1375.9 2259.35,1375.9 2260.06,1375.9 2260.76,1375.9 2261.47,1375.9 2262.18,1375.9 2262.89,1375.9 2263.6,1375.9 2264.3,1375.9 2265.01,1375.9 2265.72,1375.9 2266.43,1375.9 2267.13,1375.9 2267.84,1375.9 2268.55,1375.9 2269.26,1375.9 2269.97,1375.9 2270.67,1375.9 2271.38,1375.9 2272.09,1375.9 2272.8,1375.9 2273.5,1375.9 2274.21,1375.9 2274.92,1375.9 2275.63,1375.9 2276.34,1375.9 2277.04,1375.9 2277.75,1375.9 2278.46,1375.9 2279.17,1375.9 2279.87,1375.9 2280.58,1375.9 2281.29,1375.9 2282,1375.9 2282.71,1375.9 2283.41,1375.9 2284.12,1375.9 2284.83,1375.9 2285.54,1375.9 2286.25,1375.9 2286.95,1375.9 2287.66,1375.9 2288.37,1375.9 2289.08,1375.9 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1645.79 303.205 L2277.76 303.205 L2277.76 95.8446 L1645.79 95.8446  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.79,303.205 2277.76,303.205 2277.76,95.8446 1645.79,95.8446 1645.79,303.205 \"/>\n<polyline clip-path=\"url(#clip020)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1670.79,147.685 1820.79,147.685 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1864.22 139.803 L1864.22 143.83 Q1862.41 142.905 1860.47 142.442 Q1858.52 141.979 1856.44 141.979 Q1853.27 141.979 1851.67 142.951 Q1850.1 143.923 1850.1 145.867 Q1850.1 147.349 1851.23 148.205 Q1852.36 149.039 1855.79 149.803 L1857.25 150.127 Q1861.79 151.099 1863.68 152.881 Q1865.6 154.641 1865.6 157.812 Q1865.6 161.423 1862.73 163.529 Q1859.89 165.636 1854.89 165.636 Q1852.8 165.636 1850.54 165.219 Q1848.29 164.826 1845.79 164.016 L1845.79 159.617 Q1848.15 160.844 1850.44 161.469 Q1852.73 162.071 1854.98 162.071 Q1857.99 162.071 1859.61 161.053 Q1861.23 160.011 1861.23 158.136 Q1861.23 156.4 1860.05 155.474 Q1858.89 154.548 1854.93 153.692 L1853.45 153.344 Q1849.49 152.511 1847.73 150.798 Q1845.97 149.062 1845.97 146.053 Q1845.97 142.395 1848.57 140.405 Q1851.16 138.414 1855.93 138.414 Q1858.29 138.414 1860.37 138.761 Q1862.46 139.108 1864.22 139.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1893.94 149.317 L1893.94 164.965 L1889.68 164.965 L1889.68 149.455 Q1889.68 145.775 1888.24 143.946 Q1886.81 142.118 1883.94 142.118 Q1880.49 142.118 1878.5 144.317 Q1876.51 146.516 1876.51 150.312 L1876.51 164.965 L1872.22 164.965 L1872.22 128.946 L1876.51 128.946 L1876.51 143.067 Q1878.03 140.729 1880.1 139.571 Q1882.18 138.414 1884.89 138.414 Q1889.35 138.414 1891.65 141.192 Q1893.94 143.946 1893.94 149.317 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1902.43 139.039 L1906.69 139.039 L1906.69 164.965 L1902.43 164.965 L1902.43 139.039 M1902.43 128.946 L1906.69 128.946 L1906.69 134.34 L1902.43 134.34 L1902.43 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1928.73 128.946 L1928.73 132.488 L1924.66 132.488 Q1922.36 132.488 1921.46 133.414 Q1920.58 134.34 1920.58 136.747 L1920.58 139.039 L1927.59 139.039 L1927.59 142.349 L1920.58 142.349 L1920.58 164.965 L1916.3 164.965 L1916.3 142.349 L1912.22 142.349 L1912.22 139.039 L1916.3 139.039 L1916.3 137.233 Q1916.3 132.905 1918.31 130.937 Q1920.33 128.946 1924.7 128.946 L1928.73 128.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1935.67 131.678 L1935.67 139.039 L1944.45 139.039 L1944.45 142.349 L1935.67 142.349 L1935.67 156.423 Q1935.67 159.594 1936.53 160.497 Q1937.41 161.4 1940.07 161.4 L1944.45 161.4 L1944.45 164.965 L1940.07 164.965 Q1935.14 164.965 1933.27 163.136 Q1931.39 161.284 1931.39 156.423 L1931.39 142.349 L1928.27 142.349 L1928.27 139.039 L1931.39 139.039 L1931.39 131.678 L1935.67 131.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1670.79,199.525 1820.79,199.525 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1864.22 191.643 L1864.22 195.67 Q1862.41 194.745 1860.47 194.282 Q1858.52 193.819 1856.44 193.819 Q1853.27 193.819 1851.67 194.791 Q1850.1 195.763 1850.1 197.707 Q1850.1 199.189 1851.23 200.045 Q1852.36 200.879 1855.79 201.643 L1857.25 201.967 Q1861.79 202.939 1863.68 204.721 Q1865.6 206.481 1865.6 209.652 Q1865.6 213.263 1862.73 215.369 Q1859.89 217.476 1854.89 217.476 Q1852.8 217.476 1850.54 217.059 Q1848.29 216.666 1845.79 215.856 L1845.79 211.457 Q1848.15 212.684 1850.44 213.309 Q1852.73 213.911 1854.98 213.911 Q1857.99 213.911 1859.61 212.893 Q1861.23 211.851 1861.23 209.976 Q1861.23 208.24 1860.05 207.314 Q1858.89 206.388 1854.93 205.532 L1853.45 205.184 Q1849.49 204.351 1847.73 202.638 Q1845.97 200.902 1845.97 197.893 Q1845.97 194.235 1848.57 192.245 Q1851.16 190.254 1855.93 190.254 Q1858.29 190.254 1860.37 190.601 Q1862.46 190.948 1864.22 191.643 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1893.94 201.157 L1893.94 216.805 L1889.68 216.805 L1889.68 201.295 Q1889.68 197.615 1888.24 195.786 Q1886.81 193.958 1883.94 193.958 Q1880.49 193.958 1878.5 196.157 Q1876.51 198.356 1876.51 202.152 L1876.51 216.805 L1872.22 216.805 L1872.22 180.786 L1876.51 180.786 L1876.51 194.907 Q1878.03 192.569 1880.1 191.411 Q1882.18 190.254 1884.89 190.254 Q1889.35 190.254 1891.65 193.032 Q1893.94 195.786 1893.94 201.157 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1902.43 190.879 L1906.69 190.879 L1906.69 216.805 L1902.43 216.805 L1902.43 190.879 M1902.43 180.786 L1906.69 180.786 L1906.69 186.18 L1902.43 186.18 L1902.43 180.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1928.73 180.786 L1928.73 184.328 L1924.66 184.328 Q1922.36 184.328 1921.46 185.254 Q1920.58 186.18 1920.58 188.587 L1920.58 190.879 L1927.59 190.879 L1927.59 194.189 L1920.58 194.189 L1920.58 216.805 L1916.3 216.805 L1916.3 194.189 L1912.22 194.189 L1912.22 190.879 L1916.3 190.879 L1916.3 189.073 Q1916.3 184.745 1918.31 182.777 Q1920.33 180.786 1924.7 180.786 L1928.73 180.786 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1935.67 183.518 L1935.67 190.879 L1944.45 190.879 L1944.45 194.189 L1935.67 194.189 L1935.67 208.263 Q1935.67 211.434 1936.53 212.337 Q1937.41 213.24 1940.07 213.24 L1944.45 213.24 L1944.45 216.805 L1940.07 216.805 Q1935.14 216.805 1933.27 214.976 Q1931.39 213.124 1931.39 208.263 L1931.39 194.189 L1928.27 194.189 L1928.27 190.879 L1931.39 190.879 L1931.39 183.518 L1935.67 183.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1985.3 195.856 Q1986.9 192.985 1989.12 191.62 Q1991.34 190.254 1994.35 190.254 Q1998.4 190.254 2000.6 193.101 Q2002.8 195.925 2002.8 201.157 L2002.8 216.805 L1998.52 216.805 L1998.52 201.295 Q1998.52 197.569 1997.2 195.763 Q1995.88 193.958 1993.17 193.958 Q1989.86 193.958 1987.94 196.157 Q1986.02 198.356 1986.02 202.152 L1986.02 216.805 L1981.74 216.805 L1981.74 201.295 Q1981.74 197.545 1980.42 195.763 Q1979.1 193.958 1976.34 193.958 Q1973.08 193.958 1971.16 196.18 Q1969.24 198.379 1969.24 202.152 L1969.24 216.805 L1964.96 216.805 L1964.96 190.879 L1969.24 190.879 L1969.24 194.907 Q1970.7 192.522 1972.73 191.388 Q1974.77 190.254 1977.57 190.254 Q1980.4 190.254 1982.36 191.689 Q1984.35 193.124 1985.3 195.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2033.47 202.777 L2033.47 204.86 L2013.89 204.86 Q2014.17 209.258 2016.53 211.573 Q2018.91 213.865 2023.15 213.865 Q2025.6 213.865 2027.9 213.263 Q2030.21 212.661 2032.48 211.457 L2032.48 215.485 Q2030.19 216.457 2027.78 216.967 Q2025.37 217.476 2022.9 217.476 Q2016.69 217.476 2013.06 213.865 Q2009.45 210.254 2009.45 204.096 Q2009.45 197.731 2012.87 194.004 Q2016.32 190.254 2022.15 190.254 Q2027.39 190.254 2030.42 193.633 Q2033.47 196.99 2033.47 202.777 M2029.21 201.527 Q2029.17 198.032 2027.25 195.948 Q2025.35 193.865 2022.2 193.865 Q2018.64 193.865 2016.48 195.879 Q2014.35 197.893 2014.03 201.55 L2029.21 201.527 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2052.25 203.772 Q2047.09 203.772 2045.09 204.953 Q2043.1 206.133 2043.1 208.981 Q2043.1 211.249 2044.59 212.592 Q2046.09 213.911 2048.66 213.911 Q2052.2 213.911 2054.33 211.411 Q2056.48 208.888 2056.48 204.721 L2056.48 203.772 L2052.25 203.772 M2060.74 202.013 L2060.74 216.805 L2056.48 216.805 L2056.48 212.869 Q2055.02 215.231 2052.85 216.365 Q2050.67 217.476 2047.52 217.476 Q2043.54 217.476 2041.18 215.254 Q2038.84 213.008 2038.84 209.258 Q2038.84 204.883 2041.76 202.661 Q2044.7 200.439 2050.51 200.439 L2056.48 200.439 L2056.48 200.022 Q2056.48 197.083 2054.54 195.485 Q2052.62 193.865 2049.12 193.865 Q2046.9 193.865 2044.79 194.397 Q2042.69 194.93 2040.74 195.995 L2040.74 192.059 Q2043.08 191.157 2045.28 190.717 Q2047.48 190.254 2049.56 190.254 Q2055.19 190.254 2057.96 193.17 Q2060.74 196.087 2060.74 202.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2091.07 201.157 L2091.07 216.805 L2086.81 216.805 L2086.81 201.295 Q2086.81 197.615 2085.37 195.786 Q2083.94 193.958 2081.07 193.958 Q2077.62 193.958 2075.63 196.157 Q2073.64 198.356 2073.64 202.152 L2073.64 216.805 L2069.35 216.805 L2069.35 190.879 L2073.64 190.879 L2073.64 194.907 Q2075.16 192.569 2077.22 191.411 Q2079.31 190.254 2082.02 190.254 Q2086.48 190.254 2088.77 193.032 Q2091.07 195.786 2091.07 201.157 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip020)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1670.79,251.365 1820.79,251.365 \"/>\n<path clip-path=\"url(#clip020)\" d=\"M1850.07 264.756 L1850.07 278.506 L1845.79 278.506 L1845.79 242.719 L1850.07 242.719 L1850.07 246.654 Q1851.41 244.339 1853.45 243.228 Q1855.51 242.094 1858.36 242.094 Q1863.08 242.094 1866.02 245.844 Q1868.98 249.594 1868.98 255.705 Q1868.98 261.816 1866.02 265.566 Q1863.08 269.316 1858.36 269.316 Q1855.51 269.316 1853.45 268.205 Q1851.41 267.071 1850.07 264.756 M1864.56 255.705 Q1864.56 251.006 1862.62 248.344 Q1860.7 245.659 1857.32 245.659 Q1853.94 245.659 1851.99 248.344 Q1850.07 251.006 1850.07 255.705 Q1850.07 260.404 1851.99 263.089 Q1853.94 265.751 1857.32 265.751 Q1860.7 265.751 1862.62 263.089 Q1864.56 260.404 1864.56 255.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1891.07 246.7 Q1890.35 246.284 1889.49 246.098 Q1888.66 245.89 1887.64 245.89 Q1884.03 245.89 1882.09 248.251 Q1880.16 250.589 1880.16 254.987 L1880.16 268.645 L1875.88 268.645 L1875.88 242.719 L1880.16 242.719 L1880.16 246.747 Q1881.51 244.385 1883.66 243.251 Q1885.81 242.094 1888.89 242.094 Q1889.33 242.094 1889.86 242.163 Q1890.4 242.21 1891.04 242.325 L1891.07 246.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1904.54 245.705 Q1901.11 245.705 1899.12 248.39 Q1897.13 251.052 1897.13 255.705 Q1897.13 260.358 1899.1 263.043 Q1901.09 265.705 1904.54 265.705 Q1907.94 265.705 1909.93 263.02 Q1911.92 260.334 1911.92 255.705 Q1911.92 251.098 1909.93 248.413 Q1907.94 245.705 1904.54 245.705 M1904.54 242.094 Q1910.1 242.094 1913.27 245.705 Q1916.44 249.316 1916.44 255.705 Q1916.44 262.071 1913.27 265.705 Q1910.1 269.316 1904.54 269.316 Q1898.96 269.316 1895.79 265.705 Q1892.64 262.071 1892.64 255.705 Q1892.64 249.316 1895.79 245.705 Q1898.96 242.094 1904.54 242.094 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1923.5 242.719 L1927.76 242.719 L1927.76 269.108 Q1927.76 274.061 1925.86 276.283 Q1923.98 278.506 1919.79 278.506 L1918.17 278.506 L1918.17 274.895 L1919.31 274.895 Q1921.74 274.895 1922.62 273.76 Q1923.5 272.649 1923.5 269.108 L1923.5 242.719 M1923.5 232.626 L1927.76 232.626 L1927.76 238.02 L1923.5 238.02 L1923.5 232.626 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1958.84 254.617 L1958.84 256.7 L1939.26 256.7 Q1939.54 261.098 1941.9 263.413 Q1944.28 265.705 1948.52 265.705 Q1950.97 265.705 1953.27 265.103 Q1955.58 264.501 1957.85 263.297 L1957.85 267.325 Q1955.56 268.297 1953.15 268.807 Q1950.74 269.316 1948.27 269.316 Q1942.06 269.316 1938.43 265.705 Q1934.82 262.094 1934.82 255.936 Q1934.82 249.571 1938.24 245.844 Q1941.69 242.094 1947.53 242.094 Q1952.76 242.094 1955.79 245.473 Q1958.84 248.83 1958.84 254.617 M1954.59 253.367 Q1954.54 249.872 1952.62 247.788 Q1950.72 245.705 1947.57 245.705 Q1944.01 245.705 1941.85 247.719 Q1939.72 249.733 1939.4 253.39 L1954.59 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1984.49 243.714 L1984.49 247.696 Q1982.69 246.7 1980.86 246.214 Q1979.05 245.705 1977.2 245.705 Q1973.06 245.705 1970.77 248.344 Q1968.47 250.96 1968.47 255.705 Q1968.47 260.45 1970.77 263.089 Q1973.06 265.705 1977.2 265.705 Q1979.05 265.705 1980.86 265.219 Q1982.69 264.709 1984.49 263.714 L1984.49 267.649 Q1982.71 268.483 1980.79 268.899 Q1978.89 269.316 1976.74 269.316 Q1970.88 269.316 1967.43 265.635 Q1963.98 261.955 1963.98 255.705 Q1963.98 249.362 1967.46 245.728 Q1970.95 242.094 1977.02 242.094 Q1978.98 242.094 1980.86 242.511 Q1982.73 242.904 1984.49 243.714 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M1996.11 235.358 L1996.11 242.719 L2004.89 242.719 L2004.89 246.029 L1996.11 246.029 L1996.11 260.103 Q1996.11 263.274 1996.97 264.177 Q1997.85 265.08 2000.51 265.08 L2004.89 265.08 L2004.89 268.645 L2000.51 268.645 Q1995.58 268.645 1993.71 266.816 Q1991.83 264.964 1991.83 260.103 L1991.83 246.029 L1988.71 246.029 L1988.71 242.719 L1991.83 242.719 L1991.83 235.358 L1996.11 235.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2032.66 254.617 L2032.66 256.7 L2013.08 256.7 Q2013.36 261.098 2015.72 263.413 Q2018.1 265.705 2022.34 265.705 Q2024.79 265.705 2027.09 265.103 Q2029.4 264.501 2031.67 263.297 L2031.67 267.325 Q2029.38 268.297 2026.97 268.807 Q2024.56 269.316 2022.09 269.316 Q2015.88 269.316 2012.25 265.705 Q2008.64 262.094 2008.64 255.936 Q2008.64 249.571 2012.06 245.844 Q2015.51 242.094 2021.34 242.094 Q2026.58 242.094 2029.61 245.473 Q2032.66 248.83 2032.66 254.617 M2028.4 253.367 Q2028.36 249.872 2026.44 247.788 Q2024.54 245.705 2021.39 245.705 Q2017.83 245.705 2015.67 247.719 Q2013.54 249.733 2013.22 253.39 L2028.4 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2056.71 246.654 L2056.71 232.626 L2060.97 232.626 L2060.97 268.645 L2056.71 268.645 L2056.71 264.756 Q2055.37 267.071 2053.31 268.205 Q2051.27 269.316 2048.4 269.316 Q2043.71 269.316 2040.74 265.566 Q2037.8 261.816 2037.8 255.705 Q2037.8 249.594 2040.74 245.844 Q2043.71 242.094 2048.4 242.094 Q2051.27 242.094 2053.31 243.228 Q2055.37 244.339 2056.71 246.654 M2042.2 255.705 Q2042.2 260.404 2044.12 263.089 Q2046.07 265.751 2049.45 265.751 Q2052.83 265.751 2054.77 263.089 Q2056.71 260.404 2056.71 255.705 Q2056.71 251.006 2054.77 248.344 Q2052.83 245.659 2049.45 245.659 Q2046.07 245.659 2044.12 248.344 Q2042.2 251.006 2042.2 255.705 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2089.45 276.515 L2089.45 279.825 L2064.82 279.825 L2064.82 276.515 L2089.45 276.515 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2115.63 254.617 L2115.63 256.7 L2096.04 256.7 Q2096.32 261.098 2098.68 263.413 Q2101.07 265.705 2105.3 265.705 Q2107.76 265.705 2110.05 265.103 Q2112.36 264.501 2114.63 263.297 L2114.63 267.325 Q2112.34 268.297 2109.93 268.807 Q2107.52 269.316 2105.05 269.316 Q2098.84 269.316 2095.21 265.705 Q2091.6 262.094 2091.6 255.936 Q2091.6 249.571 2095.02 245.844 Q2098.47 242.094 2104.31 242.094 Q2109.54 242.094 2112.57 245.473 Q2115.63 248.83 2115.63 254.617 M2111.37 253.367 Q2111.32 249.872 2109.4 247.788 Q2107.5 245.705 2104.35 245.705 Q2100.79 245.705 2098.64 247.719 Q2096.51 249.733 2096.18 253.39 L2111.37 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2144.17 252.997 L2144.17 268.645 L2139.91 268.645 L2139.91 253.135 Q2139.91 249.455 2138.47 247.626 Q2137.04 245.798 2134.17 245.798 Q2130.72 245.798 2128.73 247.997 Q2126.74 250.196 2126.74 253.992 L2126.74 268.645 L2122.45 268.645 L2122.45 242.719 L2126.74 242.719 L2126.74 246.747 Q2128.27 244.409 2130.33 243.251 Q2132.41 242.094 2135.12 242.094 Q2139.58 242.094 2141.88 244.872 Q2144.17 247.626 2144.17 252.997 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2174.84 254.617 L2174.84 256.7 L2155.26 256.7 Q2155.53 261.098 2157.89 263.413 Q2160.28 265.705 2164.51 265.705 Q2166.97 265.705 2169.26 265.103 Q2171.58 264.501 2173.84 263.297 L2173.84 267.325 Q2171.55 268.297 2169.14 268.807 Q2166.74 269.316 2164.26 269.316 Q2158.06 269.316 2154.42 265.705 Q2150.81 262.094 2150.81 255.936 Q2150.81 249.571 2154.24 245.844 Q2157.69 242.094 2163.52 242.094 Q2168.75 242.094 2171.78 245.473 Q2174.84 248.83 2174.84 254.617 M2170.58 253.367 Q2170.53 249.872 2168.61 247.788 Q2166.71 245.705 2163.57 245.705 Q2160 245.705 2157.85 247.719 Q2155.72 249.733 2155.39 253.39 L2170.58 253.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2196.85 246.7 Q2196.14 246.284 2195.28 246.098 Q2194.45 245.89 2193.43 245.89 Q2189.82 245.89 2187.87 248.251 Q2185.95 250.589 2185.95 254.987 L2185.95 268.645 L2181.67 268.645 L2181.67 242.719 L2185.95 242.719 L2185.95 246.747 Q2187.29 244.385 2189.45 243.251 Q2191.6 242.094 2194.68 242.094 Q2195.12 242.094 2195.65 242.163 Q2196.18 242.21 2196.83 242.325 L2196.85 246.7 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2217.55 255.381 Q2217.55 250.751 2215.63 248.205 Q2213.73 245.659 2210.28 245.659 Q2206.85 245.659 2204.93 248.205 Q2203.03 250.751 2203.03 255.381 Q2203.03 259.987 2204.93 262.534 Q2206.85 265.08 2210.28 265.08 Q2213.73 265.08 2215.63 262.534 Q2217.55 259.987 2217.55 255.381 M2221.81 265.427 Q2221.81 272.047 2218.87 275.265 Q2215.93 278.506 2209.86 278.506 Q2207.62 278.506 2205.63 278.158 Q2203.64 277.834 2201.76 277.14 L2201.76 272.996 Q2203.64 274.015 2205.46 274.501 Q2207.29 274.987 2209.19 274.987 Q2213.38 274.987 2215.46 272.788 Q2217.55 270.612 2217.55 266.191 L2217.55 264.084 Q2216.23 266.376 2214.17 267.51 Q2212.11 268.645 2209.24 268.645 Q2204.47 268.645 2201.55 265.01 Q2198.64 261.376 2198.64 255.381 Q2198.64 249.362 2201.55 245.728 Q2204.47 242.094 2209.24 242.094 Q2212.11 242.094 2214.17 243.228 Q2216.23 244.362 2217.55 246.654 L2217.55 242.719 L2221.81 242.719 L2221.81 265.427 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip020)\" d=\"M2241.37 271.052 Q2239.56 275.682 2237.85 277.094 Q2236.13 278.506 2233.26 278.506 L2229.86 278.506 L2229.86 274.941 L2232.36 274.941 Q2234.12 274.941 2235.09 274.108 Q2236.07 273.274 2237.25 270.172 L2238.01 268.228 L2227.52 242.719 L2232.04 242.719 L2240.14 262.997 L2248.24 242.719 L2252.76 242.719 L2241.37 271.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other an the error bars are hard to see on this scale.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(Ĥ)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case is easy (and more efficient) to calculate the exact ground state energy using standard linear algebra:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using LinearAlgebra\nexact_energy = eigvals(Matrix(Ĥ))[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906392","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Read more about Rimu.jls capabilities for exact diagonalisation in the example \"Exact diagonalisation\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Comparing our results for the energy:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\"Energy from $steps_measure steps with $targetwalkers walkers:\n         Shift: $(se.mean) ± $(se.err)\n         Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n         Exact Energy: $exact_energy\")\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\n         Shift: -3.814556830153461 ± 0.09908367395962789\n         Projected Energy: -4.177400207765482 ± (0.1032568959464415, 0.09819112324625667)\n         Exact Energy: -4.021502406906392\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-Rimu/StatsTools","page":"StatsTools","title":"Module Rimu/StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module Rimu/StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h; \n    shift_name=:shift, \n    norm_name=:norm, \n    dτ=df.dτ[end], \n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names  of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj, \n    vproj_name=:vproj, \n    shift_name=:shift, \n    dτ=df.dτ[end], \n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame  returned by lomc!. The keyword arguments hproj_name, vproj_name, and  shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\", \n    vec_name=\"dot\", \n    h=0,\n    skip=0, \n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)  \n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas. \n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n)  and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector  holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector  holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by  lomc!. The keyword arguments shift_name, op_name and vec_name can be used to  change the names of the relevant columns, see AllOverlaps for default  formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific  reweighting depth can be set with keyword argument h. The default is h = 0 which  calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique  described in Umrigar et al. (1993).  Reweighting is done over h time steps and length(shift) - skip time steps are used  for the blocking analysis done with ratio_of_means().  dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ... \nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{DataFrames.DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed modules.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"4","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"(4, 4)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}((0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"where the numbering of the modes folds in the two spatial dimensions. Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use a dummy groundstate address to build the Hamiltonian","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"HOCartesianContactInteractions(BoseFS{2,16}((2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)); S=(4, 4), η=(1.0, 1.0), g=1.0, interaction_only=false)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then a utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.374078</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4777e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.689e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.477e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">2.425e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.296e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.486e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity so both blocks are required. First combine the bases of each block and convert to DVecs","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999989\n -0.9999999999999982\n -0.9999999999999973\n  1.0\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.526707-0.23646im       2.77556e-17-0.204124im             0.0+0.0im          0.526707+0.23646im       2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.372438+0.167202im              0.0-0.288675im             0.0+0.0im         -0.372438-0.167202im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+2.77556e-17im   -1.2326e-32+2.77556e-17im          0.0+0.353553im          0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      1.11022e-16+1.66533e-16im           0.0-0.612372im             0.0+0.0im       5.55112e-17+2.77556e-17im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   1.11022e-16-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im          0.0-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im               0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im               0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.167202-0.372438im         0.288675-1.95105e-16im          0.0+0.0im         -0.167202+0.372438im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im       0.23646+0.526707im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.23646-0.526707im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im               0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 7.155734338400866e-18\n 2.7755575615628883e-17\n 0.15915494309189537\n 0.15915494309189543\n 0.15915494309189548","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finished!","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalisation","page":"Exact diagonalisation","title":"Example 4: Exact diagonalisation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"When working with smaller systems, or when multiple eigenvalues of a system are required, one can use an exact diagonalisation method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalisation","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"HubbardMom1D(BoseFS{4,5}((0, 0, 4, 0, 0)); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Before performing exact diagonalisation, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalisation and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRep","page":"Exact diagonalisation","title":"The BasisSetRep","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRep under the hood. The BasisSetRep, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system and its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRep only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr = BasisSetRep(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To access the matrix or basis, access the sm and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr.sm","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalisation","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalisation","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770728\n  0.1358418221962303\n  0.15789998694609153\n  0.8767114411781431\n  1.5305929970973349\n  1.583573261186749\n  3.072870330325868\n  3.1256726539518525\n  4.862107221562181\n  6.260694850380592\n  6.402671211183115\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -5.46153e-15  -0.0221221  -0.0697193   3.30753e-15  -0.0314466   -3.25591e-16  -0.0360987   -0.0161557  -1.08119e-16  -0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     5.97476e-14   0.225254   -0.132826   -3.44233e-17   0.00292026  -2.22083e-15  -0.0861158   -0.0907789  -2.63831e-16  -0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -1.1734e-13   -0.447424   -0.63969     4.40954e-14  -0.383444    -7.21042e-15  -0.431051    -0.181167   -5.40614e-16  -0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234       0.122119    -0.123629     -0.106455    -0.126661    0.0829132    -0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773      -0.0584554   -0.601232     -0.467179    -0.215841   -0.140166     -0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234       0.122119     0.123629     -0.106455    -0.126661   -0.0829132    -0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773      -0.0584554    0.601232     -0.467179    -0.215841    0.140166     -0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     2.5354e-14    0.1111     -0.172508   -2.60229e-14   0.207974     2.57978e-15   0.0848902   -0.149153   -5.57509e-16  -0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -2.14419e-14  -0.0847116   0.082999    3.13063e-14  -0.274424     5.10554e-15   0.575786    -0.61385    -1.11262e-15  -0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   1.10167e-14   0.0427486   0.0110863  -7.64953e-15   0.0663108    1.04296e-15   0.00167015   0.0832916   1.47632e-15   0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627      0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536   -0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631     0.012992    -0.111668      0.0393523    0.423534    0.688046     -0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631     0.012992     0.111668      0.0393523    0.423534   -0.688046     -0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627      0.588225     0.332816     -0.0472302   -0.18528     0.00844536   -0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalisation","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using Arpack\n\nnum_eigvals = 3\n\nsm = sparse(ham)\nvals_ar, vecs_ar = eigs(sm; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.363124291613358\n -0.759019192277075","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sm, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133637\n -0.7590191922770888\n  0.1358418221962161\n  0.1578999869460862\n  0.8767114411781414\n  1.530592997097334\n  1.583573261186733\n  3.0728703303258573\n  3.1256726539518374\n  4.862107221562171\n  6.260694850380592\n  6.402671211183108\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"If diagonalisation takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalisation","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To use this method, you first need a starting DVec:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dvec = DVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"DVec{BoseFS{4, 5, BitString{8, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Then, pass that vector and the Hamiltonian to eigsolve. Since the function has no way of knowing the Hamiltonian is Hermitian, we have to provide that information through the issymmetric or ishermitian keyword arguments. Make sure to only pass this argument when the Hamiltonian is actually symmetric. To check that, look at the LOStructure trait:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"LOStructure(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"IsHermitian()","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"10-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133406\n -0.7590191922770728\n  0.15789998694608443\n  0.8767114411781503\n  1.5835732611867428\n  3.125672653951841\n  4.862107221562172\n  6.402671211183111\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"1-element Vector{Float64}:\n -3.363124291613361","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalisation","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The Hamiltonian presented in this example is compatible with the ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"10-element Vector{Float64}:\n -6.97986399832162\n -3.363124291613361\n -0.7590191922770769\n  0.15789998694608018\n  0.8767114411781443\n  1.5835732611867421\n  3.125672653951844\n  4.862107221562177\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to it. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"BoseFS{4,5}((0, 2, 1, 0, 1))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"4-element Vector{Float64}:\n 0.13584182219621782\n 1.5305929970973278\n 3.0728703303258604\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalisation","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The idea here is to construct a DVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"dvec = DVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"DVec{BoseFS{4, 5, BitString{8, 1, UInt8}},Float64} with 14 entries, style = IsDeterministic{Float64}()\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"5-element Vector{Float64}:\n 0.006686138945087796\n 0.03307039977204168\n 3.920486922565741\n 0.03307039977204166\n 0.006686138945087849","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalisation","title":"Exact diagonalisation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\nRimuIO.save_dvec(filename, dv) Save dict vector in BSON format.\nRimuIO.load_dvec(filename) Load BSON file into dict vector.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata toDataFrame` and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.load_dvec-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_dvec","text":"RimuIO.load_dvec(filename) -> AbstractDVec\n\nLoad AbstractDVec stored in BSON.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrames.DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_dvec-Tuple{Any, Any}","page":"I/O","title":"Rimu.RimuIO.save_dvec","text":"RimuIO.save_dvec(filename, dvec)\n\nSave dvec in BSON format.\n\nNotes\n\nOnly the localpart is saved. You may need to re-wrap the result in MPIData if using MPI.\nWhen using this function with MPI, make sure to save the vectors from different ranks to different files, e.g. by saving as RimuIO.save_dvec(\"filename-$(mpi_rank()).bson\", dvec).\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"module Hamiltonians\n\nThis module defines Hamiltonian types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nG2MomCorrelator\nG2RealCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Usage-with-FCIQMC-and-exact-diagonalisation","page":"Hamiltonians","title":"Usage with FCIQMC and exact diagonalisation","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"In order to define a specific model Hamiltonian with relevant parameters for the model, instantiate the model like this in the input file:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"hubb = HubbardReal1D(BoseFS((1,2,0,3)); u=1.0, t=1.0)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonian hubb is now ready to be used for FCIQMC in lomc! and for exact diagonalisation with KrylovKit.jl directly, or after transforming into a sparse matrix first with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using SparseArrays\nsh = sparse(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"or into a full matrix with","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"using LinearAlgebra\nfh = Matrix(hubb)","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This functionality relies on","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.BasisSetRep\nsparse\nMatrix","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BasisSetRep","page":"Hamiltonians","title":"Rimu.Hamiltonians.BasisSetRep","text":"BasisSetRep(\n    h::AbstractHamiltonian, addr=starting_address(h);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRep(h::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator h with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(h) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsm: sparse matrix representing h in the basis basis\nbasis: vector of addresses\nh: the Hamiltonian\n\nExample\n\njulia> h = HubbardReal1D(BoseFS((1,0,0)));\n\njulia> bsr = BasisSetRep(h)\nBasisSetRep(HubbardReal1D(BoseFS{1,3}((1, 0, 0)); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRep(h, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRep(HubbardReal1D(BoseFS{1,3}((1, 0, 0)); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\n julia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n  -2.0\n   1.0\n   1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896\n -0.5773502691896\n -0.5773502691896\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  BoseFS{1,3}((0, 0, 1)) => -0.5773502691896\n  BoseFS{1,3}((0, 1, 0)) => -0.5773502691896\n  BoseFS{1,3}((1, 0, 0)) => -0.5773502691896\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#SparseArrays.sparse","page":"Hamiltonians","title":"SparseArrays.sparse","text":"sparse(h::AbstractHamiltonian, addr=starting_address(h); kwargs...)\nsparse(bsr::BasisSetRep)\n\nReturn a sparse matrix representation of h or bsr. kwargs are passed to BasisSetRep.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.Matrix","page":"Hamiltonians","title":"Base.Matrix","text":"Matrix(h::AbstractHamiltonian, addr=starting_address(h); sizelim=10^4, kwargs...)\nMatrix(bsr::BasisSetRep)\n\nReturn a dense matrix representation of h or bsr. kwargs are passed to BasisSetRep.\n\nSee BasisSetRep.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"If only the basis is required and not the matrix representation it is more efficient to use","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.build_basis","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.build_basis","page":"Hamiltonians","title":"Rimu.Hamiltonians.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRep.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  frac12sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented LatticeGeometrys for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS((1,1,1)); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}((1, 1, 1)); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}((1, 1, 1)); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS((2, 1, 0)), 1)\n(BoseFS{3,3}((1, 0, 2)), 2.0)\n\njulia> get_offdiagonal(G, BoseFS((2, 1, 0)), 1)\n(BoseFS{3,3}((1, 0, 2)), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS((1,1,1)); u=6.0, t=1.0);\n\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}((2, 0, 1)), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}((2, 0, 1)), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS((0,2,1)))\nHubbardReal1D(BoseFS{3,3}((0, 2, 1)); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"G2MomCorrelator\nG2RealCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally,  equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}((1, 0, 2, 1, 2, 1, 1, 3))\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators  for  a harmonic oscillator in the x dimension, and simlarly for y. \n\nThis is implemented for an N particle Fock space with creation and annihilation  operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y \n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates  a 3D system the z dimension can be changed by setting z_dim;  S should be be isotropic in the remaining x-y plane, i.e. must have  S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}((0, 0, 0, 0)))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nMethods that need to be implemented:\n\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer)\ndiagonal_element(::AbstractHamiltonian, address)\nstarting_address(::AbstractHamiltonian)\n\nOptional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRep: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over reachable off-diagonal matrix elements of type <:AbstractOffdiagonals. Defaults to returning Offdiagonals(h, a)\n\nSee also\n\nOffdiagonals\nAbstractOffdiagonals\n\njulia> addr = BoseFS((3,2,1));\n\n\njulia> H = HubbardReal1D(addr);\n\n\njulia> h = offdiagonals(H, addr)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, add)\n\nCompute the diagonal matrix element of the linear operator ham at address add.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> diagonal_element(H, addr)\n8.666666666666664\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. Part of the AbstractHamiltonian interface. When called on an AbstractMatrix return the index of the lowest diagonal element.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> addr == starting_address(H)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, add)\n\nCompute the number of number of reachable configurations from address add.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> num_offdiagonals(H, addr)\n10\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(addr);\n\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}((2, 1, 3)), 1.0)\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nLOStructure speficies properties of the linear operator op. If a special structure is known this can speed up calculations. Implemented structures are:\n\nIsDiagonal: The operator is diagonal.\nIsHermitian: The operator is complex and Hermitian or real and symmetric.\nAdjointKnown: The operator is not Hermitian, but its adjoint is implemented.\nAdjointUnknown: adjoint for this operator is not implemented.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(BoseFS((1,2,3)))\n28\n\njulia> dimension(HubbardReal1D(BoseFS((1,2,3))))\n28\n\njulia> dimension(HubbardReal1D(near_uniform(BoseFS{200,100})))\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> dimension(HubbardReal1D(near_uniform(BoseFS{200,100})))|>Float64\n1.3860838210861882e81\n\nInterface\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr).\n\nSee also BasisSetRep.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h. Part of the AbstractHamiltonian interface. Defaults to typeof(starting_address(h)).\n\nOverload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS((10, 0, 0, 0, 2, 0, 1))\nBoseFS{13,7}((10, 0, 0, 0, 2, 0, 1))\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address)\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the possibly non-zero off-diagonal matrix elements of the column of ham indexed by add.\n\nThis is the default implementation defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also\n\noffdiagonals\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"LatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nnum_dimensions\nneighbour_site","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LatticeGeometry","page":"Hamiltonians","title":"Rimu.Hamiltonians.LatticeGeometry","text":"abstract type LatticeGeometry{D}\n\nA LatticeGeometry controls which sites in an AbstractFockAddress are considered to be neighbours.\n\nCurrently only supported by HubbardRealSpace.\n\nAvailable implementations\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nInterface to implement\n\nBase.size: return the lattice size.\nneighbour_site(::LatticeGeometry, ::Int, ::Int)\nnum_dimensions(::LatticeGeometry)\nnum_neighbours(::LatticeGeometry)\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(size...) <: LatticeGeometry\n\nRectangular lattice with periodic boundary conditions of size size.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nThis is the default geometry used by HubbardRealSpace.\n\nExample\n\njulia> lattice = PeriodicBoundaries(5, 4) # 2D lattice of size 5 × 4\nPeriodicBoundaries(5, 4)\n\njulia> num_neighbours(lattice)\n4\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n5\n\njulia> neighbour_site(lattice, 1, 3)\n6\n\njulia> neighbour_site(lattice, 1, 4)\n16\n\nSee also\n\nLatticeGeometry\nHardwallBoundaries\nLadderBoundaries\nnum_neighbours\nneighbour_site\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries\n\nRectangular lattice with hard wall boundary conditions of size size. neighbour_site() will return 0 for some neighbours of boundary sites.\n\nThe dimension of the lattice is controlled by the number of arguments given to its constructor.\n\nExample\n\njulia> lattice = HardwallBoundaries(5) # 1D lattice of size 5\nHardwallBoundaries(5)\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n0\n\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nLadderBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(size...; subgeometry=PeriodicBoundaries) <: LatticeGeometry\n\nLattice geometry where the first dimension is of size 2 and has hardwall boundary conditions. Using this geometry is more efficient than using HardwallBoundaries with a size of 2, as it does not generate rejected neighbours.\n\nIn other dimensions, it behaves like its subgeometry, which can be any LatticeGeometry.\n\nExample\n\njulia> lattice = LadderBoundaries(2, 3, 4) # 3D lattice of size 2 × 3 × 4\nLadderBoundaries(2, 3, 4)\n\njulia> num_neighbours(lattice)\n5\n\njulia> neighbour_site(lattice, 1, 1)\n2\n\njulia> neighbour_site(lattice, 1, 2)\n3\n\njulia> neighbour_site(lattice, 1, 3)\n5\n\njulia> neighbour_site(lattice, 1, 4)\n7\n\njulia> neighbour_site(lattice, 1, 5)\n19\n\nSee also\n\nLatticeGeometry\nPeriodicBoundaries\nHardwallBoundaries\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_neighbours","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_neighbours","text":"num_neighbours(geom::LatticeGeometry)\n\nReturn the number of neighbours each lattice site has in this geometry.\n\nNote that for efficiency reasons, all sites are expected to have the same number of neighbours. If some of the neighbours are invalid, this is handled by having neighbour_site return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.num_dimensions","page":"Hamiltonians","title":"Rimu.Hamiltonians.num_dimensions","text":"num_dimensions(geom::LatticeGeometry)\n\nReturn the number of dimensions of the lattice in this geometry.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbour_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbour_site","text":"neighbour_site(geom::LatticeGeometry, site, i)\n\nFind the i-th neighbour of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions  and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"testing.html#Modifying-the-Project.toml-file","page":"Code testing","title":"Modifying the Project.toml file","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"In order for the testing code to be able to run on the cloud server, external packages that are accessed in the code with using or import need to be installed first. This is done in the script actions.yml via the package manager, based on the information contained in the file test/Project.toml. More packages can be added to this file using the package manager in the following way: Say we want to install the package DelimitedFiles. At the Julia REPL, type the following:","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"julia> cd(\"test\")\njulia> ]\n(v1.0) pkg> activate .\n(test) pkg> add DelimitedFiles","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"This will a new line to the file Project.toml with the name of the package and the corresponding uuid. When Pipelines now runs the commands in yml script, it will install the package DelimitedFiles before running the runtest.jl script.","category":"page"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations (see below) that should make it straightforward to implement efficient Hamiltonians.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(add) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(add)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(add) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS((10, 0, 0, 0, 2, 0, 1))\nBoseFS{13,7}((10, 0, 0, 0, 2, 0, 1))\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS((1,1,1,1,0,0,1,0,0))\nFermiFS{5,9}((1, 1, 1, 1, 0, 0, 1, 0, 0))\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving  multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg.  interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that  can be given to excitation\n\nExample\n\njulia> addr = BoseFS((10, 0, 0, 0, 2, 0, 1))\nBoseFS{13,7}((10, 0, 0, 0, 2, 0, 1))\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}((9, 0, 0, 0, 4, 0, 0)), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(a::SingleComponentFockAddress, creations::NTuple{N}, destructions::NTuple{N})\n\nGenerate an excitation on address a by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmarangle to\nαmathrmnaddrangle\n\nReturns the new address nadd and the value α. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS((1,1,0,0,1,1,1,1))\nFermiFS{6,8}((1, 1, 0, 0, 1, 1, 1, 1))\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}((1, 0, 1, 1, 0, 1, 1, 1)), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS((1, 0, 2)), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS((1, 1, 1, 0)), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS((1, 1, 1, 0)), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS((1, 0, 2)), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS((1, 0, 2)), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}((0, 1, 2, 0)) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 enrty, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}((0, 1, 2, 0)) => 1\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from onr representation. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}((0, 1, 2, 3, 0))\nBoseFS{6,5}((0, 1, 2, 3, 0))\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}((0, 1, 2, 3, 0))\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}((0, 1, 2, 3, 0))\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}((0, 1, 2, 3, 0))\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}((0, 1, 2, 3, 0))\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}((0, 1, 2, 3, 0))\n\nSee also: SingleComponentFockAddress, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σi *ni* (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS((1, 0, 1)), 3)\n(BoseFS{2,3}((2, 0, 0)), 1.4142135623730951)\njulia> hopnextneighbour(BoseFS((1, 0, 1)), 4)\n(BoseFS{2,3}((1, 1, 0)), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}((2, 2, 1, 1, 1))\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}((1, 1, 1, 0, 0))\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.onr-Union{Tuple{BoseFS{<:Any, M}}, Tuple{M}} where M","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"onr(bs)\n\nCompute and return the occupation number representation of the bit string address bs as an SVector{M,Int32}, where M is the number of modes.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(onr): Create FermiFS{N,M} from onr representation. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nSee also: SingleComponentFockAddress, BoseFS, BitString.\n\nExamples\n\njulia> FermiFS{3,5}((0, 1, 1, 1, 0))\nFermiFS{3,5}((0, 1, 1, 1, 0))\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}((0, 1, 1, 1, 0))\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}((0, 1, 1, 1, 0))\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}((0, 1, 1, 1, 0))\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}((0, 1, 1, 1, 0))\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}((0, 1, 1, 1, 0))\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first  component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS((1,0,0)), FermiFS((0,1,1)))\nCompositeFS(\n  FermiFS{1,3}((1, 0, 0)),\n  FermiFS{2,3}((0, 1, 1)),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}((1, 0, 0)),\n  FermiFS{2,3}((0, 1, 1)),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}((1, 0, 0)),\n  FermiFS{2,3}((0, 1, 1)),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}((1, 0, 0)),\n  FermiFS{2,3}((0, 1, 1)),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.10.3. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (\\hat{A}_1, ..., \\hat{A}_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a replica after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step(::PostStepStrategy, ::ReplicaState).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.QMCState","page":"API","title":"Rimu.QMCState","text":"QMCState\n\nHolds all information needed to run lomc!, except the dataframe. Holds an NTuple of ReplicaStates, the Hamiltonian, and various strategies that control the algorithm. Constructed and returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState(v, wm, pnorm, params, id)\n\nStruct that holds all information needed for an independent run of the algorithm.\n\nCan be advanced a step forward with advance!.\n\nFields\n\nhamiltonian: the model Hamiltonian.\nv: vector.\npv: vector from the previous step.\nwm: working memory.\npnorm: previous walker number (see walkernumber).\nparams: the FciqmcRunStrategy.\nid: string ID appended to reported column names.\n\nSee also QMCState, ReplicaStrategy, replica_stats, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\n\nInternal structure that holds the temporary reported values as well as metadata.\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_r_strat\nreport!\nreport_after_step\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"Abstract type for defining the strategy for updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TripleLogUpdate","page":"API","title":"Rimu.TripleLogUpdate","text":"TripleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, η = 0.01) <: ShiftStrategy\n\nStrategy for updating the shift according to the extended log formula with damping parameters ζ, ξ, and η.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n- fracηdτlnleft(fracℜ(Ψ^n+1)_1^2 + ℑ(Ψ^n+1)_1^2\nℜ(Ψ^n)_1^2 + ℑ(Ψ^n)_1^2right)\n\nwhere N_mathrmw is the walkernumber(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, s_strat)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{Any, Rimu.QMCState, Rimu.ReplicaState}","page":"API","title":"Rimu.advance!","text":"advance!(report::Report, state::QMCState, replica::ReplicaState)\n\nAdvance the replica by one step. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsStochasticInteger(),\n    threading=nothing\n)\n\nReturn a default starting vector for lomc!. The default choice for the starting vector is\n\nv = PDVec(address => 10; style)\n\nif threading is available or\n\nv = DVec(address => 10; style)\n\notherwise. See PDVec, DVec and StochasticStyle.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::QMCState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a QMCState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, starting_address) - initial value of shift.\npost_step::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nreplica::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy.\nr_strat::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a QMCState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS((1,2,3));\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 11)\n\njulia> size(df2)\n(200, 11)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}((1, 2, 3)); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nparams::FciqmcRunStrategy = RunTillLastStep(laststep = 100, dτ = 0.01, shift = diagonal_element(ham, starting_address(ham)) - basic parameters of simulation state, see FciqmcRunStrategy. Parameter values are overridden by explicit keyword arguments laststep, dτ, shift; is mutated.\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading). See default_starting_vector, PDVec, DVec, and StochasticStyle.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step","page":"API","title":"Rimu.post_step","text":"post_step(::PostStepStrategy, ::ReplicaState) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_r_strat-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_r_strat","text":"refine_r_strat(r_strat::ReportingStrategy) -> r_strat\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, replicas::NTuple{N,ReplicaState}) -> (names, values)\n\nReturn the names and values of statistics related to N replicas consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also ReplicaState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step-Tuple{ReportingStrategy, Vararg{Any}}","page":"API","title":"Rimu.report_after_step","text":"report_after_step(::ReportingStrategy, step, report, state)\n\nThis function is called at the very end of a step, after reporting_interval steps. For example, it can be used to print some information to stdout.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nThrows an error if key already exists.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift","page":"API","title":"Rimu.update_shift","text":"update_shift(s <: ShiftStrategy, shift, shiftMode, tnorm, pnorm, dτ, step, df, v_new, v_old)\n\nUpdate the shift according to strategy s. See ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Rimu/StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc! and DVec.\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground-state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}((0, 0, 0, 0, 10, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"hamiltonian = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}((0, 0, 0, 0, 10, 0, 0, 0, 0, 0)); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"dvec = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"r_strat = ReportToFile(filename=\"result.arrow\", save_if=is_mpi_root(), reporting_interval = 1, chunk_size=1000, io=devnull)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step = ProjectedEnergy(hamiltonian, dvec)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}((0, 0, 0, 0, 10, 0, 0, 0, 0, 0)); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}((Pair{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64}[fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}((Pair{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64}[fs\"|1 0 0 0 8 0 0 0 1 0⟩\" => 5.692099788303083, fs\"|0 0 0 0 8 0 0 0 0 2⟩\" => 4.024922359499621, fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 7.0, fs\"|0 0 1 0 8 0 1 0 0 0⟩\" => 5.692099788303083, fs\"|0 0 0 1 8 1 0 0 0 0⟩\" => 5.692099788303083, fs\"|0 1 0 0 8 0 0 1 0 0⟩\" => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(hamiltonian, dvec; r_strat, s_strat, post_step, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\ndeposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator{V} <: InitiatorRule{V}\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
