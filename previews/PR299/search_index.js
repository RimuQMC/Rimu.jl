var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21817230552421862 ± 0.0013794198716517352\n   G2(1) = 0.9154886230146524 ± 0.0008269646722795533\n   G2(2) = 0.9818845907933723 ± 0.0008803642136837796\n   G2(3) = 0.9870812668597317 ± 0.0010557148723944188\n   G2(4) = 0.9818845907933723 ± 0.0008803642136837796\n   G2(5) = 0.9154886230146524 ± 0.0008269646722795533\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.070240653782038 ± 0.14611642157738167\n   Replica 2: -4.085087114120022 ± 0.14138877403138728\n   Replica 3: -4.015943466914597 ± 0.13377103241631666\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip140\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip141\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip140)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip142\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.14 2211.02,1003.14 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.448 2211.02,745.448 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.754 2211.02,487.754 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.06 2211.02,230.06 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.14 423.181,1003.14 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.448 423.181,745.448 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.754 423.181,487.754 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.06 423.181,230.06 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M290.043 1016.49 L306.363 1016.49 L306.363 1020.42 L284.418 1020.42 L284.418 1016.49 Q287.08 1013.73 291.664 1009.1 Q296.27 1004.45 297.451 1003.11 Q299.696 1000.58 300.576 998.848 Q301.478 997.089 301.478 995.399 Q301.478 992.645 299.534 990.908 Q297.613 989.172 294.511 989.172 Q292.312 989.172 289.858 989.936 Q287.427 990.7 284.65 992.251 L284.65 987.529 Q287.474 986.395 289.927 985.816 Q292.381 985.237 294.418 985.237 Q299.789 985.237 302.983 987.922 Q306.177 990.607 306.177 995.098 Q306.177 997.228 305.367 999.149 Q304.58 1001.05 302.474 1003.64 Q301.895 1004.31 298.793 1007.53 Q295.691 1010.72 290.043 1016.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M316.224 985.862 L334.58 985.862 L334.58 989.797 L320.506 989.797 L320.506 998.269 Q321.524 997.922 322.543 997.76 Q323.562 997.575 324.58 997.575 Q330.367 997.575 333.747 1000.75 Q337.126 1003.92 337.126 1009.33 Q337.126 1014.91 333.654 1018.01 Q330.182 1021.09 323.862 1021.09 Q321.687 1021.09 319.418 1020.72 Q317.173 1020.35 314.765 1019.61 L314.765 1014.91 Q316.849 1016.05 319.071 1016.6 Q321.293 1017.16 323.77 1017.16 Q327.774 1017.16 330.112 1015.05 Q332.45 1012.95 332.45 1009.33 Q332.45 1005.72 330.112 1003.62 Q327.774 1001.51 323.77 1001.51 Q321.895 1001.51 320.02 1001.93 Q318.168 1002.34 316.224 1003.22 L316.224 985.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 988.941 Q352.728 988.941 350.899 992.506 Q349.094 996.047 349.094 1003.18 Q349.094 1010.28 350.899 1013.85 Q352.728 1017.39 356.339 1017.39 Q359.973 1017.39 361.779 1013.85 Q363.608 1010.28 363.608 1003.18 Q363.608 996.047 361.779 992.506 Q359.973 988.941 356.339 988.941 M356.339 985.237 Q362.149 985.237 365.205 989.844 Q368.284 994.427 368.284 1003.18 Q368.284 1011.9 365.205 1016.51 Q362.149 1021.09 356.339 1021.09 Q350.529 1021.09 347.45 1016.51 Q344.395 1011.9 344.395 1003.18 Q344.395 994.427 347.45 989.844 Q350.529 985.237 356.339 985.237 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M286.062 728.168 L304.418 728.168 L304.418 732.103 L290.344 732.103 L290.344 740.575 Q291.363 740.228 292.381 740.066 Q293.4 739.881 294.418 739.881 Q300.205 739.881 303.585 743.052 Q306.964 746.223 306.964 751.64 Q306.964 757.219 303.492 760.321 Q300.02 763.399 293.701 763.399 Q291.525 763.399 289.256 763.029 Q287.011 762.659 284.603 761.918 L284.603 757.219 Q286.687 758.353 288.909 758.909 Q291.131 759.464 293.608 759.464 Q297.613 759.464 299.951 757.358 Q302.288 755.251 302.288 751.64 Q302.288 748.029 299.951 745.923 Q297.613 743.816 293.608 743.816 Q291.733 743.816 289.858 744.233 Q288.006 744.649 286.062 745.529 L286.062 728.168 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M326.177 731.247 Q322.566 731.247 320.737 734.811 Q318.932 738.353 318.932 745.483 Q318.932 752.589 320.737 756.154 Q322.566 759.696 326.177 759.696 Q329.811 759.696 331.617 756.154 Q333.446 752.589 333.446 745.483 Q333.446 738.353 331.617 734.811 Q329.811 731.247 326.177 731.247 M326.177 727.543 Q331.987 727.543 335.043 732.149 Q338.122 736.733 338.122 745.483 Q338.122 754.21 335.043 758.816 Q331.987 763.399 326.177 763.399 Q320.367 763.399 317.288 758.816 Q314.233 754.21 314.233 745.483 Q314.233 736.733 317.288 732.149 Q320.367 727.543 326.177 727.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 731.247 Q352.728 731.247 350.899 734.811 Q349.094 738.353 349.094 745.483 Q349.094 752.589 350.899 756.154 Q352.728 759.696 356.339 759.696 Q359.973 759.696 361.779 756.154 Q363.608 752.589 363.608 745.483 Q363.608 738.353 361.779 734.811 Q359.973 731.247 356.339 731.247 M356.339 727.543 Q362.149 727.543 365.205 732.149 Q368.284 736.733 368.284 745.483 Q368.284 754.21 365.205 758.816 Q362.149 763.399 356.339 763.399 Q350.529 763.399 347.45 758.816 Q344.395 754.21 344.395 745.483 Q344.395 736.733 347.45 732.149 Q350.529 727.543 356.339 727.543 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M284.835 470.474 L307.057 470.474 L307.057 472.465 L294.511 505.034 L289.627 505.034 L301.432 474.409 L284.835 474.409 L284.835 470.474 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M316.224 470.474 L334.58 470.474 L334.58 474.409 L320.506 474.409 L320.506 482.881 Q321.524 482.534 322.543 482.372 Q323.562 482.187 324.58 482.187 Q330.367 482.187 333.747 485.358 Q337.126 488.529 337.126 493.946 Q337.126 499.525 333.654 502.626 Q330.182 505.705 323.862 505.705 Q321.687 505.705 319.418 505.335 Q317.173 504.964 314.765 504.224 L314.765 499.525 Q316.849 500.659 319.071 501.214 Q321.293 501.77 323.77 501.77 Q327.774 501.77 330.112 499.663 Q332.45 497.557 332.45 493.946 Q332.45 490.335 330.112 488.228 Q327.774 486.122 323.77 486.122 Q321.895 486.122 320.02 486.539 Q318.168 486.955 316.224 487.835 L316.224 470.474 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 473.552 Q352.728 473.552 350.899 477.117 Q349.094 480.659 349.094 487.789 Q349.094 494.895 350.899 498.46 Q352.728 502.001 356.339 502.001 Q359.973 502.001 361.779 498.46 Q363.608 494.895 363.608 487.789 Q363.608 480.659 361.779 477.117 Q359.973 473.552 356.339 473.552 M356.339 469.849 Q362.149 469.849 365.205 474.455 Q368.284 479.039 368.284 487.789 Q368.284 496.515 365.205 501.122 Q362.149 505.705 356.339 505.705 Q350.529 505.705 347.45 501.122 Q344.395 496.515 344.395 487.789 Q344.395 479.039 347.45 474.455 Q350.529 469.849 356.339 469.849 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M256.664 243.404 L264.303 243.404 L264.303 217.039 L255.992 218.706 L255.992 214.446 L264.256 212.78 L268.932 212.78 L268.932 243.404 L276.571 243.404 L276.571 247.34 L256.664 247.34 L256.664 243.404 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M296.015 215.858 Q292.404 215.858 290.576 219.423 Q288.77 222.965 288.77 230.094 Q288.77 237.201 290.576 240.766 Q292.404 244.307 296.015 244.307 Q299.65 244.307 301.455 240.766 Q303.284 237.201 303.284 230.094 Q303.284 222.965 301.455 219.423 Q299.65 215.858 296.015 215.858 M296.015 212.155 Q301.826 212.155 304.881 216.761 Q307.96 221.344 307.96 230.094 Q307.96 238.821 304.881 243.428 Q301.826 248.011 296.015 248.011 Q290.205 248.011 287.127 243.428 Q284.071 238.821 284.071 230.094 Q284.071 221.344 287.127 216.761 Q290.205 212.155 296.015 212.155 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M326.177 215.858 Q322.566 215.858 320.737 219.423 Q318.932 222.965 318.932 230.094 Q318.932 237.201 320.737 240.766 Q322.566 244.307 326.177 244.307 Q329.811 244.307 331.617 240.766 Q333.446 237.201 333.446 230.094 Q333.446 222.965 331.617 219.423 Q329.811 215.858 326.177 215.858 M326.177 212.155 Q331.987 212.155 335.043 216.761 Q338.122 221.344 338.122 230.094 Q338.122 238.821 335.043 243.428 Q331.987 248.011 326.177 248.011 Q320.367 248.011 317.288 243.428 Q314.233 238.821 314.233 230.094 Q314.233 221.344 317.288 216.761 Q320.367 212.155 326.177 212.155 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M356.339 215.858 Q352.728 215.858 350.899 219.423 Q349.094 222.965 349.094 230.094 Q349.094 237.201 350.899 240.766 Q352.728 244.307 356.339 244.307 Q359.973 244.307 361.779 240.766 Q363.608 237.201 363.608 230.094 Q363.608 222.965 361.779 219.423 Q359.973 215.858 356.339 215.858 M356.339 212.155 Q362.149 212.155 365.205 216.761 Q368.284 221.344 368.284 230.094 Q368.284 238.821 365.205 243.428 Q362.149 248.011 356.339 248.011 Q350.529 248.011 347.45 243.428 Q344.395 238.821 344.395 230.094 Q344.395 221.344 347.45 216.761 Q350.529 212.155 356.339 212.155 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip142)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.06 4017.76,230.06 \"/>\n<polyline clip-path=\"url(#clip142)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1245.71 461.669,1244.97 462.238,1244.15 462.806,1243.22 463.375,1241.2 463.943,1239.08 464.511,1237.9 465.08,1236.6 465.648,1234.18 466.216,1232.68 466.785,1231.05 467.353,1229.3 467.921,1226.38 468.49,1224.35 469.058,1222.15 469.626,1218.78 470.195,1216.24 470.763,1212.52 471.331,1209.66 471.9,1206.67 472.468,1203.45 473.036,1198.05 473.605,1193.4 474.173,1189.63 474.741,1183.61 475.31,1179.44 475.878,1175.01 476.446,1170.42 477.015,1164.53 477.583,1159.47 478.152,1154.27 478.72,1148.87 479.288,1142.23 479.857,1134.24 480.425,1125.99 480.993,1119.73 481.562,1112.14 482.13,1104.3 482.698,1097.3 483.267,1089 483.835,1079.5 484.403,1069.91 484.972,1062.18 485.54,1054.35 486.108,1046.23 486.677,1036.01 487.245,1025.74 487.813,1016.42 488.382,1007.91 488.95,999.286 489.518,990.454 490.087,981.475 490.655,972.4 491.224,961.185 491.792,948.855 492.36,938.499 492.929,929.13 493.497,918.649 494.065,909.22 494.634,898.681 495.202,888.072 495.77,876.493 496.339,866.983 496.907,854.217 497.475,842.661 498.044,832.206 498.612,820.72 499.18,808.223 499.749,797.854 500.317,787.467 500.885,776.172 501.454,767.016 502.022,756.929 502.59,746.793 503.159,734.74 503.727,724.991 504.295,716.313 504.864,704.655 505.432,696.192 506.001,685.509 506.569,672.932 507.137,662.493 507.706,652.246 508.274,644.439 508.842,635.448 509.411,626.539 509.979,616.9 510.547,609.475 511.116,601.127 511.684,588.715 512.252,581.664 512.821,573.832 513.389,566.955 513.957,558.023 514.526,551.334 515.094,543.685 515.662,535.385 516.231,526.108 516.799,517.227 517.367,511.447 517.936,503.717 518.504,499.361 519.072,490.852 519.641,484.483 520.209,478.563 520.778,473.539 521.346,467.813 521.914,461.995 522.483,454.308 523.051,448.936 523.619,444.702 524.188,441.567 524.756,436 525.324,431.93 525.893,423.724 526.461,419.976 527.029,416.333 527.598,412.715 528.166,408.073 528.734,402.521 529.303,399.293 529.871,394.822 530.439,388.646 531.008,384.343 531.576,380.584 532.144,372.768 532.713,367.199 533.281,365.769 533.85,360.374 534.418,356.335 534.986,356.441 535.555,354.445 536.123,350.275 536.691,347.344 537.26,344.265 537.828,339.326 538.396,338.743 538.965,337.235 539.533,335.301 540.101,333.6 540.67,331.018 541.238,328.282 541.806,325.605 542.375,322.027 542.943,319.603 543.511,318.384 544.08,315.851 544.648,315.585 545.216,312.039 545.785,309.846 546.353,307.599 546.921,305.582 547.49,307.656 548.058,306.407 548.627,305.227 549.195,304.083 549.763,301.727 550.332,300.533 550.9,298.488 551.468,297.348 552.037,297.514 552.605,296.477 553.173,294.454 553.742,292.37 554.31,291.248 554.878,290.08 555.447,287 556.015,286.232 556.583,284.477 557.152,279.667 557.72,279.227 558.288,277.946 558.857,275.546 559.425,276.18 559.993,274.811 560.562,275.538 561.13,275.996 561.698,274.427 562.267,271.719 562.835,269.276 563.404,265.896 563.972,264.779 564.54,264.701 565.109,266.823 565.677,264.625 566.245,262.471 566.814,259.497 567.382,257.61 567.95,258.049 568.519,258.384 569.087,258.597 569.655,259.78 570.224,261 570.792,261.074 571.36,261.888 571.929,261.788 572.497,260.825 573.065,259.816 573.634,260.591 574.202,261.405 574.77,261.051 575.339,258.757 575.907,257.443 576.476,256.263 577.044,259.092 577.612,260.744 578.181,261.426 578.749,261.954 579.317,260.459 579.886,260.134 580.454,258.578 581.022,256.112 581.591,257.88 582.159,258.318 582.727,255.676 583.296,255.337 583.864,253.195 584.432,255.133 585.001,254.859 585.569,254.64 586.137,254.298 586.706,259.086 587.274,257.342 587.842,255.874 588.411,254.393 588.979,251.941 589.547,252.736 590.116,251.366 590.684,250.066 591.253,248.934 591.821,246.577 592.389,244.538 592.958,243.531 593.526,243.774 594.094,242.928 594.663,242.119 595.231,242.314 595.799,240.647 596.368,239.938 596.936,240.319 597.504,242.924 598.073,242.993 598.641,243.219 599.209,242.296 599.778,242.264 600.346,240.094 600.914,240.616 601.483,241.05 602.051,241.198 602.619,241.422 603.188,242.661 603.756,242.003 604.325,243.107 604.893,241.997 605.461,240.974 606.03,242.102 606.598,240.162 607.166,237.271 607.735,236.686 608.303,235.154 608.871,234.704 609.44,234.402 610.008,236.011 610.576,235.787 611.145,237.361 611.713,236.604 612.281,236.173 612.85,236.587 613.418,237.064 613.986,234.325 614.555,234.957 615.123,235.555 615.691,237.165 616.26,237.57 616.828,239.058 617.396,237.394 617.965,238.726 618.533,238.801 619.102,240.11 619.67,238.271 620.238,238.666 620.807,239.954 621.375,240.123 621.943,240.405 622.512,241.416 623.08,240.16 623.648,238.207 624.217,239.544 624.785,237.767 625.353,239.849 625.922,238.921 626.49,237.176 627.058,238.426 627.627,240.834 628.195,240.968 628.763,239.923 629.332,238.896 629.9,242.033 630.468,243.173 631.037,242.97 631.605,241.719 632.173,241.996 632.742,241.007 633.31,239.943 633.879,238.836 634.447,237.953 635.015,236.055 635.584,236.215 636.152,235.473 636.72,235.941 637.289,235.333 637.857,236.665 638.425,237.204 638.994,239.465 639.562,240.46 640.13,240.293 640.699,240.169 641.267,239.024 641.835,239.136 642.404,237.905 642.972,235.92 643.54,235.055 644.109,233.974 644.677,233.251 645.245,234.696 645.814,234.855 646.382,235.091 646.951,234.53 647.519,236.086 648.087,235.209 648.656,236.435 649.224,235.537 649.792,236.555 650.361,234.56 650.929,229.758 651.497,231.225 652.066,231.548 652.634,231.937 653.202,232.563 653.771,230.782 654.339,232.469 654.907,233.934 655.476,234.237 656.044,233.519 656.612,233.833 657.181,233.151 657.749,233.561 658.317,231.827 658.886,233.239 659.454,234.562 660.022,232.654 660.591,233.139 661.159,233.425 661.728,234.697 662.296,234.946 662.864,235.136 663.433,238.467 664.001,237.502 664.569,240.53 665.138,242.396 665.706,241.116 666.274,239.647 666.843,236.271 667.411,236.216 667.979,236.538 668.548,236.804 669.116,238.787 669.684,239.822 670.253,239.61 670.821,238.537 671.389,240.419 671.958,240.092 672.526,240.016 673.094,240.718 673.663,240.349 674.231,242.381 674.799,240.746 675.368,241.169 675.936,238.735 676.505,237.301 677.073,237.147 677.641,236.115 678.21,236.062 678.778,235.99 679.346,235.128 679.915,235.194 680.483,234.089 681.051,234.114 681.62,233.193 682.188,234.333 682.756,235.557 683.325,234.664 683.893,235.757 684.461,232.815 685.03,231.905 685.598,230.996 686.166,231.452 686.735,230.774 687.303,230.982 687.871,231.238 688.44,230.505 689.008,228.794 689.577,231.362 690.145,233.617 690.713,234.54 691.282,234.528 691.85,234.409 692.418,235.441 692.987,235.338 693.555,236.345 694.123,238.451 694.692,236.983 695.26,236.884 695.828,235.625 696.397,235.634 696.965,235.265 697.533,236.145 698.102,232.462 698.67,229.649 699.238,230.933 699.807,231.219 700.375,231.521 700.943,231.687 701.512,230.597 702.08,231.118 702.648,229.195 703.217,229.565 703.785,230.867 704.354,231.066 704.922,232.328 705.49,233.351 706.059,233.23 706.627,230.32 707.195,230.366 707.764,229.73 708.332,230.848 708.9,229.909 709.469,226.983 710.037,228.56 710.605,230.028 711.174,229.012 711.742,231.503 712.31,233.701 712.879,233.633 713.447,232.697 714.015,234.686 714.584,235.557 715.152,235.359 715.72,235.304 716.289,234.004 716.857,231.905 717.425,232.092 717.994,231.328 718.562,229.372 719.131,229.612 719.699,231.011 720.267,231.077 720.836,231.29 721.404,231.462 721.972,230.841 722.541,230.829 723.109,231.273 723.677,232.549 724.246,230.51 724.814,231.86 725.382,233.005 725.951,233.093 726.519,232.023 727.087,232.295 727.656,234.389 728.224,234.425 728.792,234.403 729.361,234.615 729.929,237.536 730.497,238.176 731.066,236.951 731.634,236.586 732.203,236.201 732.771,233.966 733.339,232.751 733.908,232.723 734.476,231.484 735.044,230.417 735.613,229.699 736.181,230.964 736.749,229.174 737.318,230.57 737.886,228.711 738.454,230.195 739.023,231.575 739.591,232.61 740.159,232.369 740.728,232.47 741.296,232.429 741.864,230.494 742.433,230.64 743.001,228.849 743.569,229.117 744.138,229.511 744.706,229.803 745.274,230.124 745.843,228.248 746.411,228.706 746.98,228.028 747.548,228.562 748.116,229.057 748.685,230.43 749.253,232.85 749.821,231.982 750.39,228.907 750.958,229.274 751.526,229.577 752.095,229.813 752.663,231.122 753.231,230.325 753.8,228.638 754.368,229.856 754.936,228.909 755.505,228.18 756.073,228.547 756.641,228.788 757.21,226.173 757.778,227.85 758.346,228.407 758.915,230.629 759.483,232.047 760.052,231.793 760.62,232.047 761.188,232.977 761.757,234.269 762.325,234.27 762.893,234.274 763.462,234.207 764.03,233.039 764.598,231.148 765.167,232.128 765.735,233.314 766.303,234.476 766.872,236.366 767.44,236.358 768.008,235.948 768.577,234.639 769.145,234.425 769.713,233.264 770.282,230.222 770.85,232.565 771.418,233.591 771.987,233.617 772.555,231.624 773.123,233.661 773.692,233.488 774.26,231.437 774.829,231.525 775.397,231.596 775.965,231.684 776.534,233.849 777.102,233.713 777.67,234.546 778.239,233.274 778.807,233.279 779.375,232.301 779.944,232.301 780.512,233.366 781.08,232.233 781.649,231.275 782.217,231.52 782.785,232.442 783.354,233.733 783.922,233.698 784.49,234.519 785.059,236.304 785.627,233.811 786.195,233.67 786.764,232.645 787.332,232.693 787.9,233.551 788.469,233.331 789.037,235.231 789.606,235.091 790.174,238.004 790.742,238.49 791.311,237.802 791.879,235.328 792.447,234.958 793.016,233.755 793.584,232.837 794.152,230.608 794.721,230.659 795.289,229.68 795.857,230.686 796.426,230.728 796.994,229.789 797.562,229.065 798.131,228.234 798.699,228.513 799.267,228.578 799.836,227.721 800.404,229.078 800.972,229.18 801.541,230.453 802.109,229.422 802.678,229.39 803.246,229.262 803.814,227.316 804.383,227.757 804.951,228.017 805.519,228.013 806.088,227.294 806.656,228.602 807.224,226.708 807.793,224.906 808.361,224.533 808.929,226.14 809.498,226.492 810.066,224.94 810.634,225.355 811.203,225.729 811.771,226.23 812.339,226.675 812.908,228.343 813.476,227.771 814.044,228.27 814.613,228.568 815.181,229.767 815.749,232.129 816.318,230.985 816.886,230.118 817.455,231.581 818.023,231.643 818.591,233.44 819.16,234.414 819.728,233.246 820.296,232.082 820.865,231.195 821.433,230.269 822.001,232.255 822.57,232.13 823.138,232.128 823.706,231.198 824.275,232.284 824.843,233.442 825.411,232.487 825.98,231.533 826.548,230.56 827.116,229.643 827.685,229.826 828.253,230.892 828.821,230.967 829.39,230.115 829.958,231.106 830.526,230.972 831.095,230.13 831.663,230.347 832.232,228.448 832.8,228.649 833.368,228.704 833.937,226.818 834.505,227.28 835.073,228.627 835.642,228.879 836.21,230.11 836.778,230.19 837.347,229.501 837.915,230.758 838.483,230.988 839.052,231.113 839.62,233.355 840.188,235.41 840.757,237.316 841.325,237.863 841.893,238.558 842.462,237.236 843.03,236.036 843.598,240.723 844.167,240.108 844.735,240.535 845.304,240.039 845.872,240.449 846.44,239.622 847.009,240.073 847.577,238.431 848.145,237.838 848.714,237.147 849.282,235.393 849.85,235.087 850.419,235.587 850.987,231.125 851.555,231.051 852.124,231.92 852.692,231.736 853.26,232.421 853.829,231.289 854.397,232.095 854.965,231.965 855.534,232.981 856.102,234.798 856.67,234.471 857.239,233.989 857.807,231.589 858.375,230.408 858.944,229.703 859.512,227.685 860.081,228.746 860.649,229.843 861.217,228.763 861.786,228.649 862.354,227.753 862.922,228.814 863.491,227.905 864.059,228.114 864.627,228.352 865.196,229.508 865.764,229.415 866.332,227.188 866.901,227.269 867.469,224.245 868.037,224.988 868.606,227.417 869.174,228.721 869.742,226.785 870.311,227.257 870.879,228.429 871.447,226.448 872.016,225.628 872.584,226.214 873.152,226.487 873.721,226.761 874.289,227.084 874.858,226.062 875.426,227.496 875.994,226.667 876.563,227.888 877.131,228.09 877.699,227.402 878.268,229.664 878.836,230.695 879.404,228.575 879.973,229.758 880.541,229.834 881.109,230.078 881.678,230.207 882.246,232.472 882.814,232.344 883.383,231.29 883.951,230.402 884.519,232.499 885.088,233.38 885.656,235.123 886.224,233.707 886.793,234.536 887.361,234.228 887.93,232.943 888.498,233.042 889.066,235.067 889.635,234.747 890.203,234.582 890.771,234.287 891.34,231.843 891.908,232.692 892.476,233.26 893.045,233.05 893.613,233.819 894.181,232.565 894.75,231.4 895.318,230.472 895.886,231.477 896.455,232.183 897.023,230.038 897.591,231.939 898.16,230.82 898.728,229.688 899.296,230.575 899.865,229.823 900.433,229.961 901.001,229.868 901.57,229.891 902.138,229.802 902.707,230.961 903.275,229.725 903.843,228.834 904.412,228.881 904.98,227.778 905.548,229.052 906.117,229.174 906.685,228.185 907.253,227.505 907.822,227.736 908.39,229.081 908.958,229.172 909.527,229.357 910.095,229.481 910.663,229.465 911.232,229.399 911.8,228.329 912.368,228.449 912.937,229.744 913.505,230.862 914.073,230.877 914.642,231.646 915.21,233.643 915.779,235.454 916.347,234.113 916.915,234.992 917.484,234.627 918.052,234.327 918.62,233.047 919.189,231.727 919.757,231.568 920.325,230.649 920.894,231.776 921.462,229.636 922.03,229.514 922.599,230.833 923.167,230.711 923.735,230.522 924.304,233.242 924.872,233 925.44,231.936 926.009,233.92 926.577,231.581 927.145,230.256 927.714,231.138 928.282,230.926 928.85,230.922 929.419,229.871 929.987,233.08 930.556,231.841 931.124,233.658 931.692,233.323 932.261,231.822 932.829,231.474 933.397,230.334 933.966,230.162 934.534,231.2 935.102,229.872 935.671,227.851 936.239,227.985 936.807,229.181 937.376,230.132 937.944,228.831 938.512,229.855 939.081,230.743 939.649,230.692 940.217,229.639 940.786,228.646 941.354,225.676 941.922,227.152 942.491,227.3 943.059,227.429 943.627,228.607 944.196,226.686 944.764,227.986 945.333,228.334 945.901,227.517 946.469,227.779 947.038,225.078 947.606,225.416 948.174,225.87 948.743,229.294 949.311,229.435 949.879,230.734 950.448,230.78 951.016,229.372 951.584,233.564 952.153,234.141 952.721,232.895 953.289,231.694 953.858,229.397 954.426,229.457 954.994,230.646 955.563,231.611 956.131,231.475 956.699,228.57 957.268,228.998 957.836,229.057 958.405,229.147 958.973,228.36 959.541,228.575 960.11,228.663 960.678,227.694 961.246,227.846 961.815,229.291 962.383,228.186 962.951,227.489 963.52,225.579 964.088,228.011 964.656,227.483 965.225,227.674 965.793,230.099 966.361,231.032 966.93,232.007 967.498,231.811 968.066,231.814 968.635,231.833 969.203,230.734 969.771,227.658 970.34,227.032 970.908,229.15 971.476,230.314 972.045,230.263 972.613,230.523 973.182,232.347 973.75,231.379 974.318,230.193 974.887,232.189 975.455,231.015 976.023,230.1 976.592,230.149 977.16,231.354 977.728,231.349 978.297,230.236 978.865,228.12 979.433,230.451 980.002,229.08 980.57,228.272 981.138,226.277 981.707,226.508 982.275,227.868 982.843,227.124 983.412,226.491 983.98,227.068 984.548,224.424 985.117,225.834 985.685,225.485 986.253,224.787 986.822,225.369 987.39,225.964 987.959,227.362 988.527,225.616 989.095,229.02 989.664,228.214 990.232,229.343 990.8,230.598 991.369,230.683 991.937,229.409 992.505,227.557 993.074,227.827 993.642,228.311 994.21,228.758 994.779,227.963 995.347,228.325 995.915,228.904 996.484,230.93 997.052,231.131 997.62,230.243 998.189,230.319 998.757,232.678 999.325,231.431 999.894,230.471 1000.46,230.817 1001.03,231.04 1001.6,231.227 1002.17,232.315 1002.74,232.232 1003.3,233.242 1003.87,234.358 1004.44,236.759 1005.01,238.549 1005.58,240.172 1006.15,241.594 1006.71,241.802 1007.28,240.904 1007.85,239.141 1008.42,236.588 1008.99,232.91 1009.56,232.765 1010.12,232.799 1010.69,234.52 1011.26,235.017 1011.83,234.71 1012.4,233.588 1012.97,233.349 1013.53,233.166 1014.1,232.906 1014.67,232.546 1015.24,232.411 1015.81,235.495 1016.38,235.209 1016.94,234.885 1017.51,233.466 1018.08,232.274 1018.65,232.102 1019.22,233.032 1019.79,230.585 1020.35,233.811 1020.92,231.669 1021.49,231.274 1022.06,231.97 1022.63,232.879 1023.2,236.612 1023.76,235.988 1024.33,235.593 1024.9,236.204 1025.47,234.774 1026.04,234.303 1026.61,232.924 1027.17,231.487 1027.74,231.265 1028.31,229.902 1028.88,229.714 1029.45,228.216 1030.02,226.942 1030.58,227.047 1031.15,223.059 1031.72,223.666 1032.29,223.874 1032.86,223.816 1033.43,225.068 1033.99,225.527 1034.56,225.808 1035.13,225.209 1035.7,225.355 1036.27,225.893 1036.84,226.291 1037.4,226.305 1037.97,226.77 1038.54,228.155 1039.11,228.253 1039.68,230.656 1040.25,229.259 1040.81,230.428 1041.38,231.459 1041.95,231.5 1042.52,231.513 1043.09,231.45 1043.66,232.528 1044.22,231.497 1044.79,232.323 1045.36,231.956 1045.93,229.777 1046.5,230.965 1047.07,230.793 1047.63,231.512 1048.2,232.195 1048.77,233.141 1049.34,232.858 1049.91,233.822 1050.48,231.472 1051.05,231.238 1051.61,232.245 1052.18,235.185 1052.75,237.001 1053.32,236.553 1053.89,236.181 1054.46,234.671 1055.02,233.454 1055.59,233.069 1056.16,232.897 1056.73,233.739 1057.3,233.235 1057.87,232.805 1058.43,232.582 1059,232.39 1059.57,234.283 1060.14,232.94 1060.71,233.627 1061.28,234.095 1061.84,231.339 1062.41,232.291 1062.98,231.092 1063.55,231.579 1064.12,230.362 1064.69,230.125 1065.25,232.128 1065.82,231.785 1066.39,231.325 1066.96,230.949 1067.53,229.85 1068.1,228.942 1068.66,227.847 1069.23,226.901 1069.8,227.048 1070.37,227.049 1070.94,229.226 1071.51,227.067 1072.07,228.175 1072.64,227.105 1073.21,226.998 1073.78,227.111 1074.35,226.177 1074.92,222.104 1075.48,223.453 1076.05,226.035 1076.62,225.393 1077.19,226.825 1077.76,226.937 1078.33,226.211 1078.89,226.325 1079.46,224.543 1080.03,223.965 1080.6,225.321 1081.17,226.7 1081.74,226.896 1082.3,229.207 1082.87,230.403 1083.44,228.326 1084.01,227.581 1084.58,228.827 1085.15,229.953 1085.71,229.987 1086.28,231.805 1086.85,232.459 1087.42,234.441 1087.99,235.129 1088.56,234.029 1089.12,234.649 1089.69,233.175 1090.26,231.884 1090.83,231.917 1091.4,233.884 1091.97,233.406 1092.53,232.11 1093.1,233.669 1093.67,232.301 1094.24,232.242 1094.81,229.974 1095.38,229.986 1095.94,226.791 1096.51,226.092 1097.08,227.41 1097.65,224.621 1098.22,224.996 1098.79,226.343 1099.35,225.584 1099.92,225.561 1100.49,226.789 1101.06,226.11 1101.63,226.443 1102.2,226.587 1102.76,228.01 1103.33,226.954 1103.9,227.124 1104.47,229.456 1105.04,229.938 1105.61,229.04 1106.17,229.078 1106.74,230.104 1107.31,230.167 1107.88,228.87 1108.45,227.901 1109.02,228.272 1109.58,227.373 1110.15,225.677 1110.72,226.007 1111.29,228.437 1111.86,227.636 1112.43,229.123 1112.99,230.103 1113.56,230.187 1114.13,230.171 1114.7,230.074 1115.27,231.256 1115.84,231.276 1116.4,231.16 1116.97,230.286 1117.54,231.285 1118.11,231.29 1118.68,231.389 1119.25,234.659 1119.81,236.369 1120.38,234.949 1120.95,231.576 1121.52,230.265 1122.09,230.044 1122.66,229.916 1123.23,227.87 1123.79,227.911 1124.36,226.163 1124.93,225.152 1125.5,226.221 1126.07,226.424 1126.64,228.853 1127.2,226.069 1127.77,225.095 1128.34,224.333 1128.91,224.6 1129.48,225.251 1130.05,228.784 1130.61,229.131 1131.18,227.233 1131.75,227.501 1132.32,228.867 1132.89,228.173 1133.46,228.539 1134.02,229.789 1134.59,229.883 1135.16,228.079 1135.73,228.431 1136.3,228.63 1136.87,228.611 1137.43,228.86 1138,228.056 1138.57,229.26 1139.14,227.272 1139.71,225.662 1140.28,224.978 1140.84,227.572 1141.41,227.878 1141.98,231.17 1142.55,230.973 1143.12,233.011 1143.69,231.968 1144.25,233.121 1144.82,233.049 1145.39,235.022 1145.96,232.545 1146.53,233.292 1147.1,235.449 1147.66,232.949 1148.23,229.794 1148.8,230.703 1149.37,229.824 1149.94,227.704 1150.51,228.056 1151.07,230.339 1151.64,230.485 1152.21,231.511 1152.78,230.535 1153.35,229.392 1153.92,230.374 1154.48,229.37 1155.05,226.379 1155.62,228.832 1156.19,229.092 1156.76,230.346 1157.33,232.317 1157.89,234.121 1158.46,233.828 1159.03,233.718 1159.6,233.678 1160.17,233.64 1160.74,235.599 1161.3,235.285 1161.87,235.081 1162.44,235.891 1163.01,234.381 1163.58,233.107 1164.15,232.959 1164.71,232.521 1165.28,229.175 1165.85,229.392 1166.42,229.291 1166.99,229.376 1167.56,228.32 1168.12,226.232 1168.69,226.537 1169.26,225.574 1169.83,225.898 1170.4,229.518 1170.97,231.732 1171.53,233.523 1172.1,233.375 1172.67,231.13 1173.24,227.76 1173.81,228.008 1174.38,229.229 1174.94,230.152 1175.51,231.001 1176.08,230.992 1176.65,230.035 1177.22,231.007 1177.79,229.957 1178.35,230.926 1178.92,230.898 1179.49,233.922 1180.06,232.605 1180.63,232.376 1181.2,232.226 1181.76,230.881 1182.33,229.836 1182.9,231.008 1183.47,231.884 1184.04,231.741 1184.61,231.731 1185.17,231.744 1185.74,229.517 1186.31,227.72 1186.88,228.945 1187.45,229.807 1188.02,228.631 1188.58,227.739 1189.15,229.07 1189.72,229.065 1190.29,230.379 1190.86,229.127 1191.43,232.122 1192,233.005 1192.56,231.709 1193.13,229.467 1193.7,229.695 1194.27,229.85 1194.84,230.073 1195.41,228.954 1195.97,229.828 1196.54,230.949 1197.11,231.784 1197.68,229.456 1198.25,229.481 1198.82,229.5 1199.38,231.802 1199.95,229.529 1200.52,229.665 1201.09,228.636 1201.66,228.721 1202.23,227.904 1202.79,228.125 1203.36,229.252 1203.93,229.408 1204.5,230.307 1205.07,228.315 1205.64,228.434 1206.2,228.673 1206.77,229.701 1207.34,229.827 1207.91,230.061 1208.48,230.058 1209.05,230.164 1209.61,228.329 1210.18,229.736 1210.75,229.658 1211.32,228.688 1211.89,230.09 1212.46,229.961 1213.02,228.07 1213.59,228.149 1214.16,228.233 1214.73,229.266 1215.3,229.553 1215.87,230.703 1216.43,230.791 1217,229.574 1217.57,229.574 1218.14,229.551 1218.71,229.733 1219.28,232.859 1219.84,229.559 1220.41,231.978 1220.98,233.847 1221.55,233.622 1222.12,233.387 1222.69,233.039 1223.25,231.853 1223.82,229.774 1224.39,226.799 1224.96,227.339 1225.53,228.547 1226.1,229.784 1226.66,229.968 1227.23,230.026 1227.8,229.169 1228.37,229.364 1228.94,229.494 1229.51,231.692 1230.07,228.664 1230.64,228.894 1231.21,231.085 1231.78,232.382 1232.35,231.289 1232.92,231.388 1233.48,231.191 1234.05,230.175 1234.62,230.086 1235.19,229.181 1235.76,229.278 1236.33,228.473 1236.89,228.662 1237.46,229.747 1238.03,231.684 1238.6,231.525 1239.17,231.541 1239.74,230.463 1240.3,230.428 1240.87,232.702 1241.44,231.635 1242.01,231.724 1242.58,229.453 1243.15,229.547 1243.71,228.524 1244.28,228.699 1244.85,225.723 1245.42,225.981 1245.99,226.251 1246.56,226.512 1247.12,224.798 1247.69,226.215 1248.26,227.727 1248.83,226.933 1249.4,227.182 1249.97,226.559 1250.53,226.82 1251.1,224.998 1251.67,225.339 1252.24,223.568 1252.81,224.979 1253.38,225.383 1253.94,227.838 1254.51,230.163 1255.08,231.515 1255.65,233.736 1256.22,232.556 1256.79,233.218 1257.35,234.2 1257.92,234.005 1258.49,232.84 1259.06,231.92 1259.63,229.081 1260.2,228.279 1260.76,230.292 1261.33,229.568 1261.9,230.787 1262.47,228.568 1263.04,229.966 1263.61,229.973 1264.18,232.103 1264.74,232.961 1265.31,232.74 1265.88,232.608 1266.45,232.307 1267.02,231.145 1267.59,235.428 1268.15,234.248 1268.72,234.794 1269.29,235.659 1269.86,238.497 1270.43,238.89 1271,240.382 1271.56,238.668 1272.13,239.251 1272.7,238.524 1273.27,238.8 1273.84,238.227 1274.41,237.616 1274.97,238.131 1275.54,237.621 1276.11,240.965 1276.68,239.006 1277.25,238.443 1277.82,237.597 1278.38,236.982 1278.95,236.376 1279.52,234.969 1280.09,235.555 1280.66,231.989 1281.23,232.672 1281.79,231.184 1282.36,230.169 1282.93,231.941 1283.5,230.732 1284.07,231.705 1284.64,232.829 1285.2,235.595 1285.77,235.119 1286.34,233.76 1286.91,233.474 1287.48,231.003 1288.05,231.854 1288.61,230.305 1289.18,230.355 1289.75,230.301 1290.32,229.303 1290.89,230.017 1291.46,228.655 1292.02,226.456 1292.59,227.732 1293.16,228.899 1293.73,227.667 1294.3,227.647 1294.87,226.581 1295.43,224.631 1296,224.774 1296.57,223.235 1297.14,226.627 1297.71,224.577 1298.28,225.606 1298.84,225.019 1299.41,225.339 1299.98,222.496 1300.55,224.199 1301.12,224.558 1301.69,224.786 1302.25,225.095 1302.82,226.498 1303.39,226.625 1303.96,226.69 1304.53,228.187 1305.1,228.077 1305.66,224.948 1306.23,225.073 1306.8,226.647 1307.37,226.992 1307.94,230.253 1308.51,233.354 1309.07,233.989 1309.64,235.554 1310.21,234.001 1310.78,233.981 1311.35,232.672 1311.92,232.639 1312.48,231.357 1313.05,230.266 1313.62,231.219 1314.19,230.211 1314.76,227.859 1315.33,229.024 1315.89,228.212 1316.46,228.524 1317.03,226.557 1317.6,226.806 1318.17,227.961 1318.74,227.299 1319.3,230.508 1319.87,230.567 1320.44,230.478 1321.01,231.375 1321.58,232.228 1322.15,232.053 1322.71,231.994 1323.28,232.767 1323.85,232.448 1324.42,230.233 1324.99,230.045 1325.56,228.936 1326.12,229.169 1326.69,227.178 1327.26,226.293 1327.83,226.351 1328.4,226.671 1328.97,226.649 1329.53,226.939 1330.1,225.19 1330.67,222.695 1331.24,223.158 1331.81,221.621 1332.38,219.975 1332.94,222.657 1333.51,219.895 1334.08,221.775 1334.65,224.511 1335.22,225.068 1335.79,223.443 1336.36,224.968 1336.92,224.466 1337.49,224.128 1338.06,223.789 1338.63,225.308 1339.2,224.75 1339.77,224.177 1340.33,222.988 1340.9,224.585 1341.47,226.019 1342.04,226.237 1342.61,228.635 1343.18,230.903 1343.74,231.8 1344.31,230.961 1344.88,230.92 1345.45,231.114 1346.02,232.123 1346.59,232.109 1347.15,230.819 1347.72,230.777 1348.29,230.939 1348.86,227.924 1349.43,228.402 1350,225.558 1350.56,227.281 1351.13,229.511 1351.7,231.66 1352.27,231.513 1352.84,232.65 1353.41,233.527 1353.97,233.431 1354.54,233.251 1355.11,231.272 1355.68,230.314 1356.25,229.37 1356.82,230.609 1357.38,231.767 1357.95,231.818 1358.52,232.843 1359.09,232.625 1359.66,234.621 1360.23,232.636 1360.79,230.502 1361.36,232.6 1361.93,232.491 1362.5,232.409 1363.07,233.315 1363.64,231.247 1364.2,231.371 1364.77,231.426 1365.34,231.222 1365.91,231.24 1366.48,233.372 1367.05,234.364 1367.61,232.208 1368.18,233.463 1368.75,233.089 1369.32,232.789 1369.89,232.532 1370.46,231.457 1371.02,233.457 1371.59,231.129 1372.16,232.188 1372.73,233.09 1373.3,233.75 1373.87,232.546 1374.43,231.263 1375,231.307 1375.57,229.252 1376.14,230.171 1376.71,231.085 1377.28,230.909 1377.84,231.943 1378.41,231.733 1378.98,232.634 1379.55,232.26 1380.12,230.85 1380.69,233.898 1381.25,232.55 1381.82,233.303 1382.39,233.262 1382.96,233.193 1383.53,232.893 1384.1,233.595 1384.66,233.204 1385.23,233.998 1385.8,234.627 1386.37,233.17 1386.94,233.91 1387.51,233.385 1388.07,233.021 1388.64,229.538 1389.21,227.449 1389.78,227.503 1390.35,226.607 1390.92,226.814 1391.48,226.959 1392.05,227.039 1392.62,227.185 1393.19,227.546 1393.76,226.545 1394.33,227.939 1394.89,226.08 1395.46,226.405 1396.03,228.647 1396.6,228.927 1397.17,231.049 1397.74,231.824 1398.3,230.678 1398.87,231.66 1399.44,233.504 1400.01,235.341 1400.58,232.888 1401.15,233.479 1401.71,233.257 1402.28,231.977 1402.85,230.991 1403.42,229.933 1403.99,228.848 1404.56,228.805 1405.13,228.057 1405.69,231.243 1406.26,232.017 1406.83,230.766 1407.4,229.794 1407.97,229.961 1408.54,228.879 1409.1,228.043 1409.67,227.837 1410.24,227.159 1410.81,227.406 1411.38,227.669 1411.95,227.605 1412.51,229.815 1413.08,230.044 1413.65,231.782 1414.22,229.453 1414.79,230.453 1415.36,228.388 1415.92,227.515 1416.49,227.731 1417.06,228.014 1417.63,229.162 1418.2,230.315 1418.77,229.112 1419.33,228.133 1419.9,229.049 1420.47,231.067 1421.04,230.998 1421.61,229.71 1422.18,229.843 1422.74,229.874 1423.31,229.925 1423.88,229.965 1424.45,227.9 1425.02,228.987 1425.59,229.229 1426.15,228.201 1426.72,228.471 1427.29,229.428 1427.86,230.41 1428.43,230.442 1429,231.495 1429.56,229.227 1430.13,230.367 1430.7,228.22 1431.27,228.238 1431.84,227.513 1432.41,227.782 1432.97,228.979 1433.54,228.019 1434.11,227.274 1434.68,227.526 1435.25,229.731 1435.82,228.85 1436.38,229.946 1436.95,228.103 1437.52,229.31 1438.09,230.46 1438.66,232.34 1439.23,232.252 1439.79,229.087 1440.36,229.021 1440.93,230.023 1441.5,231.104 1442.07,232.325 1442.64,231.079 1443.2,230.958 1443.77,232.966 1444.34,232.674 1444.91,232.562 1445.48,232.482 1446.05,232.535 1446.61,232.243 1447.18,232.087 1447.75,227.865 1448.32,230.912 1448.89,231.83 1449.46,230.733 1450.02,230.686 1450.59,227.569 1451.16,229.99 1451.73,228.894 1452.3,227.695 1452.87,227.822 1453.43,229.096 1454,229.526 1454.57,229.505 1455.14,229.512 1455.71,227.688 1456.28,226.944 1456.84,225.985 1457.41,226.222 1457.98,224.249 1458.55,224.485 1459.12,223.72 1459.69,223.214 1460.25,222.743 1460.82,222.377 1461.39,223.982 1461.96,224.368 1462.53,226.847 1463.1,225.353 1463.66,224.724 1464.23,222.115 1464.8,225.748 1465.37,227.439 1465.94,226.79 1466.51,229.093 1467.07,230.272 1467.64,230.408 1468.21,229.441 1468.78,230.812 1469.35,234.083 1469.92,233.884 1470.48,231.755 1471.05,230.779 1471.62,233.045 1472.19,233.057 1472.76,232.935 1473.33,236.847 1473.89,238.714 1474.46,238.262 1475.03,236.697 1475.6,233.314 1476.17,233.027 1476.74,233.943 1477.31,234.695 1477.87,233.198 1478.44,230.935 1479.01,230.072 1479.58,232.171 1480.15,232.092 1480.72,234.181 1481.28,233.867 1481.85,234.604 1482.42,235.468 1482.99,233.103 1483.56,232.762 1484.13,234.523 1484.69,235.371 1485.26,235.899 1485.83,235.281 1486.4,233.982 1486.97,233.782 1487.54,233.734 1488.1,233.437 1488.67,232.122 1489.24,231.895 1489.81,232.7 1490.38,234.597 1490.95,233.218 1491.51,233.076 1492.08,233.925 1492.65,233.704 1493.22,233.327 1493.79,233.1 1494.36,232.988 1494.92,232.108 1495.49,232.893 1496.06,233.702 1496.63,232.156 1497.2,230.867 1497.77,231.8 1498.33,229.578 1498.9,230.674 1499.47,230.33 1500.04,230.4 1500.61,230.072 1501.18,229.93 1501.74,230.025 1502.31,229.882 1502.88,229.752 1503.45,228.725 1504.02,228.711 1504.59,229.87 1505.15,229.827 1505.72,228.93 1506.29,230.417 1506.86,233.479 1507.43,233.037 1508,234.845 1508.56,233.523 1509.13,232.312 1509.7,233.983 1510.27,235.655 1510.84,234.251 1511.41,233.966 1511.97,233.605 1512.54,231.251 1513.11,230.976 1513.68,231.672 1514.25,232.554 1514.82,230.234 1515.38,229.006 1515.95,227.137 1516.52,224.382 1517.09,225.744 1517.66,225.74 1518.23,226.978 1518.79,224.886 1519.36,225.101 1519.93,223.215 1520.5,223.628 1521.07,225.235 1521.64,226.685 1522.2,225.833 1522.77,225.031 1523.34,226.149 1523.91,227.529 1524.48,226.554 1525.05,226.604 1525.61,226.799 1526.18,228.887 1526.75,231.111 1527.32,232.435 1527.89,231.951 1528.46,230.507 1529.02,232.491 1529.59,230.074 1530.16,228.905 1530.73,231.107 1531.3,231.949 1531.87,232.632 1532.43,234.517 1533,232.927 1533.57,232.691 1534.14,231.598 1534.71,231.445 1535.28,231.243 1535.84,227.932 1536.41,228.052 1536.98,223.964 1537.55,225.41 1538.12,224.573 1538.69,222.834 1539.25,224.263 1539.82,225.655 1540.39,226.892 1540.96,230.199 1541.53,231.038 1542.1,229.819 1542.66,232.132 1543.23,232.964 1543.8,232.565 1544.37,230.984 1544.94,233.033 1545.51,233.787 1546.08,234.489 1546.64,233.236 1547.21,233.017 1547.78,230.589 1548.35,229.559 1548.92,230.656 1549.49,232.49 1550.05,232.244 1550.62,232.108 1551.19,230.974 1551.76,232.046 1552.33,229.705 1552.9,228.775 1553.46,229.944 1554.03,229.826 1554.6,231.935 1555.17,229.621 1555.74,229.339 1556.31,229.22 1556.87,230.087 1557.44,231.153 1558.01,229.217 1558.58,227.007 1559.15,225.224 1559.72,226.485 1560.28,228.811 1560.85,229.05 1561.42,230.3 1561.99,230.336 1562.56,228.282 1563.13,229.428 1563.69,229.329 1564.26,230.245 1564.83,228.09 1565.4,229.063 1565.97,228.161 1566.54,224.309 1567.1,226.579 1567.67,226.993 1568.24,227.456 1568.81,226.692 1569.38,225.966 1569.95,226.172 1570.51,226.468 1571.08,223.665 1571.65,222.087 1572.22,222.717 1572.79,223.192 1573.36,224.683 1573.92,224.909 1574.49,226.546 1575.06,226.934 1575.63,227.316 1576.2,226.468 1576.77,225.626 1577.33,223.762 1577.9,225.379 1578.47,225.665 1579.04,226.933 1579.61,227.231 1580.18,228.724 1580.74,228.832 1581.31,229.079 1581.88,230.339 1582.45,230.059 1583.02,229.006 1583.59,228.238 1584.15,228.406 1584.72,226.622 1585.29,227.835 1585.86,227.107 1586.43,227.49 1587,227.8 1587.56,230.344 1588.13,232.616 1588.7,232.654 1589.27,231.432 1589.84,231.541 1590.41,233.604 1590.97,234.446 1591.54,232.356 1592.11,234.429 1592.68,234.291 1593.25,234.968 1593.82,234.516 1594.38,234.236 1594.95,235.88 1595.52,235.643 1596.09,233.274 1596.66,235.296 1597.23,236.063 1597.79,238.885 1598.36,238.416 1598.93,235.892 1599.5,233.321 1600.07,232.063 1600.64,231.311 1601.2,230.871 1601.77,232.915 1602.34,232.734 1602.91,231.37 1603.48,230.349 1604.05,228.21 1604.61,227.481 1605.18,226.927 1605.75,227.17 1606.32,228.62 1606.89,230.014 1607.46,230.157 1608.02,232.42 1608.59,234.342 1609.16,234.026 1609.73,234.718 1610.3,233.508 1610.87,232.367 1611.43,230.299 1612,229.168 1612.57,226.241 1613.14,227.457 1613.71,228.661 1614.28,226.861 1614.84,228.987 1615.41,228.121 1615.98,227.361 1616.55,227.502 1617.12,228.862 1617.69,231.98 1618.26,230.793 1618.82,228.797 1619.39,229.089 1619.96,228.121 1620.53,228.046 1621.1,228.233 1621.67,230.549 1622.23,230.594 1622.8,232.533 1623.37,234.477 1623.94,233.998 1624.51,234.777 1625.08,233.358 1625.64,234.082 1626.21,232.793 1626.78,231.393 1627.35,231.898 1627.92,230.587 1628.49,230.413 1629.05,230.135 1629.62,230.953 1630.19,231.74 1630.76,232.71 1631.33,231.451 1631.9,233.495 1632.46,233.269 1633.03,231.009 1633.6,231.974 1634.17,231.799 1634.74,232.705 1635.31,233.414 1635.87,231.026 1636.44,230.923 1637.01,231.889 1637.58,229.703 1638.15,230.836 1638.72,229.685 1639.28,228.594 1639.85,228.485 1640.42,229.776 1640.99,234.006 1641.56,234.676 1642.13,232.526 1642.69,230.36 1643.26,230.28 1643.83,230.354 1644.4,230.253 1644.97,228.024 1645.54,226.989 1646.1,228.521 1646.67,228.881 1647.24,228.898 1647.81,232.056 1648.38,231.949 1648.95,231.685 1649.51,230.565 1650.08,229.535 1650.65,228.561 1651.22,232.024 1651.79,231.93 1652.36,234.861 1652.92,237.466 1653.49,237.783 1654.06,237.155 1654.63,235.558 1655.2,234.807 1655.77,234.315 1656.33,235.097 1656.9,231.527 1657.47,230.382 1658.04,229.108 1658.61,230.015 1659.18,229.914 1659.74,229.845 1660.31,229.615 1660.88,230.402 1661.45,231.181 1662.02,233.135 1662.59,233.816 1663.15,232.334 1663.72,230.19 1664.29,230.138 1664.86,230.057 1665.43,230.901 1666,230.856 1666.56,231.611 1667.13,228.325 1667.7,229.25 1668.27,226.844 1668.84,225.926 1669.41,225.161 1669.97,224.391 1670.54,223.861 1671.11,223.968 1671.68,224.396 1672.25,227.853 1672.82,228.154 1673.38,227.255 1673.95,228.387 1674.52,231.627 1675.09,229.466 1675.66,230.494 1676.23,231.495 1676.79,231.495 1677.36,231.349 1677.93,231.109 1678.5,229.826 1679.07,227.93 1679.64,226.107 1680.2,227.4 1680.77,226.503 1681.34,224.649 1681.91,226.043 1682.48,225.265 1683.05,225.505 1683.61,225.762 1684.18,225.682 1684.75,226.007 1685.32,226.096 1685.89,226.219 1686.46,225.422 1687.02,225.818 1687.59,225.093 1688.16,224.38 1688.73,224.861 1689.3,225.055 1689.87,225.308 1690.44,224.57 1691,226.061 1691.57,228.41 1692.14,229.399 1692.71,228.313 1693.28,225.535 1693.85,224.97 1694.41,226.379 1694.98,226.924 1695.55,227.365 1696.12,227.649 1696.69,226.92 1697.26,226.274 1697.82,231.608 1698.39,231.57 1698.96,232.548 1699.53,230.445 1700.1,231.431 1700.67,232.631 1701.23,233.521 1701.8,234.357 1702.37,236.346 1702.94,233.969 1703.51,232.711 1704.08,231.443 1704.64,230.453 1705.21,229.468 1705.78,230.702 1706.35,228.725 1706.92,229.727 1707.49,229.747 1708.05,231.72 1708.62,233.651 1709.19,230.38 1709.76,230.307 1710.33,232.363 1710.9,232.134 1711.46,230.987 1712.03,231.037 1712.6,230.996 1713.17,231.989 1713.74,232.89 1714.31,232.734 1714.87,229.39 1715.44,230.322 1716.01,230.45 1716.58,231.448 1717.15,231.359 1717.72,233.364 1718.28,232.148 1718.85,232.006 1719.42,231.89 1719.99,231.983 1720.56,231.689 1721.13,231.586 1721.69,232.545 1722.26,232.368 1722.83,232.317 1723.4,233.258 1723.97,233.166 1724.54,233.976 1725.1,234.581 1725.67,236.506 1726.24,236.078 1726.81,235.646 1727.38,235.943 1727.95,233.414 1728.51,235.229 1729.08,233.559 1729.65,234.257 1730.22,232.992 1730.79,229.813 1731.36,230.975 1731.92,230.796 1732.49,229.535 1733.06,228.519 1733.63,228.697 1734.2,228.793 1734.77,228.798 1735.33,226.868 1735.9,230.043 1736.47,228.903 1737.04,225.988 1737.61,226.282 1738.18,225.487 1738.74,225.871 1739.31,228.28 1739.88,229.335 1740.45,228.192 1741.02,226.395 1741.59,228.733 1742.15,230.872 1742.72,232.729 1743.29,232.537 1743.86,232.314 1744.43,233.246 1745,234.026 1745.56,234.864 1746.13,235.589 1746.7,235.048 1747.27,234.555 1747.84,234.362 1748.41,234.098 1748.97,235.917 1749.54,235.548 1750.11,233.88 1750.68,234.255 1751.25,233.738 1751.82,232.559 1752.38,232.165 1752.95,230.689 1753.52,229.406 1754.09,230.217 1754.66,228.979 1755.23,228.915 1755.79,228.839 1756.36,227.776 1756.93,230.021 1757.5,229.807 1758.07,232.049 1758.64,232.589 1759.21,232.328 1759.77,231.055 1760.34,227.544 1760.91,229.592 1761.48,229.545 1762.05,231.582 1762.62,232.219 1763.18,229.782 1763.75,231.941 1764.32,230.524 1764.89,229.502 1765.46,228.346 1766.03,228.593 1766.59,228.456 1767.16,228.395 1767.73,229.248 1768.3,228.888 1768.87,229.703 1769.44,230.611 1770,228.282 1770.57,224.892 1771.14,224.849 1771.71,225.048 1772.28,226.035 1772.85,226.117 1773.41,226.07 1773.98,223.441 1774.55,223.689 1775.12,224.11 1775.69,226.602 1776.26,226.768 1776.82,226.975 1777.39,226.102 1777.96,226.22 1778.53,225.39 1779.1,223.465 1779.67,225.139 1780.23,225.561 1780.8,225.915 1781.37,224.219 1781.94,225.636 1782.51,225.963 1783.08,227.053 1783.64,226.368 1784.21,226.698 1784.78,227.078 1785.35,229.474 1785.92,230.559 1786.49,232.607 1787.05,230.392 1787.62,230.412 1788.19,229.437 1788.76,228.455 1789.33,228.611 1789.9,227.641 1790.46,228.919 1791.03,228.345 1791.6,229.342 1792.17,227.271 1792.74,226.51 1793.31,225.849 1793.87,226.125 1794.44,228.334 1795.01,227.51 1795.58,226.884 1796.15,227.219 1796.72,226.434 1797.28,228.746 1797.85,227.887 1798.42,228.318 1798.99,227.611 1799.56,226.778 1800.13,226.958 1800.69,228.298 1801.26,227.489 1801.83,226.727 1802.4,225.892 1802.97,228.324 1803.54,228.58 1804.1,226.824 1804.67,227.219 1805.24,227.529 1805.81,228.907 1806.38,227.117 1806.95,227.297 1807.51,229.694 1808.08,228.674 1808.65,228.984 1809.22,228.142 1809.79,227.435 1810.36,228.624 1810.92,228.945 1811.49,229.211 1812.06,228.413 1812.63,228.879 1813.2,231.212 1813.77,231.277 1814.33,233.259 1814.9,233.078 1815.47,231.043 1816.04,233.13 1816.61,231.78 1817.18,230.801 1817.74,230.799 1818.31,229.798 1818.88,231.136 1819.45,231.407 1820.02,232.4 1820.59,233.418 1821.15,232.45 1821.72,233.427 1822.29,233.231 1822.86,233.095 1823.43,236.946 1824,237.653 1824.56,235.049 1825.13,233.762 1825.7,234.702 1826.27,235.547 1826.84,235.287 1827.41,235.022 1827.97,234.752 1828.54,234.516 1829.11,235.237 1829.68,236.87 1830.25,235.232 1830.82,234.745 1831.39,231.272 1831.95,233.251 1832.52,230.885 1833.09,231.959 1833.66,233.827 1834.23,233.694 1834.8,233.554 1835.36,232.34 1835.93,232.138 1836.5,231.993 1837.07,232.799 1837.64,231.485 1838.21,230.488 1838.77,229.696 1839.34,230.912 1839.91,229.815 1840.48,227.619 1841.05,228.985 1841.62,228.079 1842.18,229.136 1842.75,229.28 1843.32,226.001 1843.89,224.333 1844.46,225.664 1845.03,223.846 1845.59,222.198 1846.16,222.637 1846.73,223.125 1847.3,223.868 1847.87,222.443 1848.44,221.97 1849,222.838 1849.57,222.27 1850.14,222.687 1850.71,223.118 1851.28,223.548 1851.85,224.234 1852.41,226.866 1852.98,226.163 1853.55,225.553 1854.12,227.041 1854.69,228.53 1855.26,227.808 1855.82,227.272 1856.39,227.604 1856.96,230.076 1857.53,229.24 1858.1,230.559 1858.67,229.598 1859.23,229.72 1859.8,226.663 1860.37,226.243 1860.94,226.428 1861.51,229.814 1862.08,230.055 1862.64,229.985 1863.21,230.92 1863.78,230.939 1864.35,231.267 1864.92,230.093 1865.49,231.109 1866.05,232.247 1866.62,232.055 1867.19,235.189 1867.76,237.144 1868.33,235.918 1868.9,234.563 1869.46,234.522 1870.03,235.64 1870.6,235.23 1871.17,234.835 1871.74,235.427 1872.31,232.995 1872.87,230.805 1873.44,231.698 1874.01,229.605 1874.58,229.405 1875.15,229.639 1875.72,229.903 1876.28,228.899 1876.85,230.149 1877.42,230.356 1877.99,230.637 1878.56,229.609 1879.13,229.737 1879.69,228.896 1880.26,230.223 1880.83,231.226 1881.4,231.224 1881.97,230.246 1882.54,229.254 1883.1,226.187 1883.67,228.637 1884.24,228.755 1884.81,227.881 1885.38,227.96 1885.95,229.258 1886.51,228.339 1887.08,224.571 1887.65,224.999 1888.22,224.43 1888.79,223.971 1889.36,224.473 1889.92,223.051 1890.49,227.864 1891.06,227.994 1891.63,227.103 1892.2,230.455 1892.77,230.64 1893.33,228.673 1893.9,227.651 1894.47,227.784 1895.04,227.937 1895.61,231.345 1896.18,229.212 1896.74,230.488 1897.31,229.799 1897.88,231.867 1898.45,232.884 1899.02,232.671 1899.59,232.494 1900.16,233.573 1900.72,236.438 1901.29,233.953 1901.86,232.806 1902.43,233.673 1903,234.498 1903.57,232.232 1904.13,233.113 1904.7,233.26 1905.27,232.113 1905.84,231.008 1906.41,232.31 1906.98,235.166 1907.54,234.654 1908.11,235.517 1908.68,236.198 1909.25,235.899 1909.82,236.585 1910.39,236.1 1910.95,235.728 1911.52,236.545 1912.09,233.912 1912.66,233.309 1913.23,231.964 1913.8,230.821 1914.36,230.832 1914.93,230.643 1915.5,230.581 1916.07,233.721 1916.64,233.541 1917.21,234.27 1917.77,233.895 1918.34,233.489 1918.91,230.167 1919.48,230.274 1920.05,229.076 1920.62,230.079 1921.18,230.111 1921.75,232.067 1922.32,230.839 1922.89,231.7 1923.46,232.789 1924.03,232.528 1924.59,232.492 1925.16,231.135 1925.73,232.076 1926.3,231.927 1926.87,232.904 1927.44,233.633 1928,232.288 1928.57,231.202 1929.14,231.012 1929.71,230.852 1930.28,231.951 1930.85,230.885 1931.41,229.697 1931.98,229.57 1932.55,230.434 1933.12,231.661 1933.69,231.444 1934.26,232.425 1934.82,231.061 1935.39,229.76 1935.96,229.514 1936.53,229.636 1937.1,229.636 1937.67,228.559 1938.23,227.422 1938.8,227.613 1939.37,228.716 1939.94,227.757 1940.51,228.144 1941.08,227.141 1941.64,226.075 1942.21,224.243 1942.78,223.514 1943.35,227.088 1943.92,228.36 1944.49,224.478 1945.05,223.999 1945.62,224.549 1946.19,227.131 1946.76,228.234 1947.33,228.338 1947.9,229.543 1948.46,230.369 1949.03,231.292 1949.6,230.215 1950.17,232.193 1950.74,234.08 1951.31,234.787 1951.87,235.621 1952.44,236.121 1953.01,237.611 1953.58,237.142 1954.15,237.711 1954.72,237.245 1955.28,238.693 1955.85,240.993 1956.42,239.147 1956.99,237.353 1957.56,235.545 1958.13,235.02 1958.69,234.493 1959.26,233.325 1959.83,232.847 1960.4,234.472 1960.97,234.897 1961.54,235.621 1962.1,236.222 1962.67,234.677 1963.24,235.131 1963.81,235.705 1964.38,236.264 1964.95,234.532 1965.51,233.993 1966.08,235.508 1966.65,234.748 1967.22,232.185 1967.79,230.969 1968.36,228.884 1968.92,228.072 1969.49,228.077 1970.06,227.08 1970.63,225.122 1971.2,226.382 1971.77,227.479 1972.34,226.452 1972.9,227.541 1973.47,228.345 1974.04,227.316 1974.61,226.338 1975.18,226.405 1975.75,225.39 1976.31,226.613 1976.88,224.671 1977.45,224.84 1978.02,225.213 1978.59,225.303 1979.16,225.41 1979.72,224.581 1980.29,223.774 1980.86,222.995 1981.43,224.208 1982,224.653 1982.57,222.966 1983.13,226.401 1983.7,227.51 1984.27,227.692 1984.84,228.921 1985.41,231.033 1985.98,230.823 1986.54,229.873 1987.11,229.702 1987.68,233.736 1988.25,231.393 1988.82,231.248 1989.39,230.044 1989.95,229.987 1990.52,230.813 1991.09,230.699 1991.66,230.589 1992.23,231.314 1992.8,228.943 1993.36,229.753 1993.93,229.747 1994.5,230.844 1995.07,230.873 1995.64,229.876 1996.21,228.752 1996.77,230.721 1997.34,228.698 1997.91,228.568 1998.48,228.33 1999.05,227.173 1999.62,228.522 2000.18,228.692 2000.75,228.878 2001.32,229.069 2001.89,228.154 2002.46,228.266 2003.03,227.222 2003.59,226.337 2004.16,228.553 2004.73,229.669 2005.3,230.94 2005.87,229.825 2006.44,231.042 2007,229.1 2007.57,230.206 2008.14,230.171 2008.71,230.299 2009.28,229.261 2009.85,230.245 2010.41,231.201 2010.98,230.054 2011.55,229.121 2012.12,230.035 2012.69,227.771 2013.26,225.912 2013.82,225.111 2014.39,224.574 2014.96,223.982 2015.53,223.415 2016.1,223.934 2016.67,223.541 2017.23,222.766 2017.8,221.157 2018.37,220.591 2018.94,222.287 2019.51,223.846 2020.08,223.491 2020.64,222.082 2021.21,222.535 2021.78,221.028 2022.35,220.686 2022.92,220.452 2023.49,222.334 2024.05,224.352 2024.62,224.939 2025.19,224.584 2025.76,226.241 2026.33,226.539 2026.9,228.901 2027.46,228.407 2028.03,226.652 2028.6,230.202 2029.17,233.305 2029.74,234.23 2030.31,232.293 2030.87,233.225 2031.44,233.163 2032.01,232.974 2032.58,232.857 2033.15,233.695 2033.72,234.484 2034.28,233.358 2034.85,234.517 2035.42,232.176 2035.99,233.162 2036.56,233.952 2037.13,231.729 2037.69,232.812 2038.26,232.559 2038.83,233.477 2039.4,231.369 2039.97,231.342 2040.54,230.345 2041.11,232.315 2041.67,232.295 2042.24,232.164 2042.81,234.148 2043.38,235.02 2043.95,235.79 2044.52,233.518 2045.08,232.29 2045.65,232.317 2046.22,233.345 2046.79,234.37 2047.36,236.192 2047.93,234.813 2048.49,235.823 2049.06,235.338 2049.63,237.162 2050.2,236.834 2050.77,237.392 2051.34,237.675 2051.9,237.412 2052.47,237.038 2053.04,236.55 2053.61,235.212 2054.18,235.671 2054.75,234.33 2055.31,232.984 2055.88,232.759 2056.45,231.295 2057.02,230.188 2057.59,231.264 2058.16,231.092 2058.72,229.852 2059.29,229.993 2059.86,228.964 2060.43,229.09 2061,227.9 2061.57,227.879 2062.13,228.193 2062.7,227.31 2063.27,227.479 2063.84,226.557 2064.41,228.744 2064.98,228.766 2065.54,226.554 2066.11,227.664 2066.68,227.861 2067.25,228.899 2067.82,227.865 2068.39,226.912 2068.95,225.359 2069.52,222.748 2070.09,224.063 2070.66,225.477 2071.23,225.835 2071.8,226.237 2072.36,226.524 2072.93,226.955 2073.5,225.063 2074.07,225.504 2074.64,226.891 2075.21,227.177 2075.77,227.567 2076.34,226.588 2076.91,228.108 2077.48,228.157 2078.05,229.301 2078.62,230.351 2079.18,230.701 2079.75,234.735 2080.32,235.306 2080.89,235.015 2081.46,232.638 2082.03,234.699 2082.59,233.36 2083.16,238.265 2083.73,238.778 2084.3,238.283 2084.87,236.915 2085.44,235.197 2086,236.6 2086.57,235.025 2087.14,234.73 2087.71,235.229 2088.28,235.735 2088.85,235.096 2089.41,234.592 2089.98,234.067 2090.55,232.607 2091.12,234.462 2091.69,231.986 2092.26,230.977 2092.82,231.818 2093.39,231.779 2093.96,231.509 2094.53,229.324 2095.1,229.35 2095.67,229.322 2096.23,231.402 2096.8,232.352 2097.37,231.335 2097.94,230.998 2098.51,231.769 2099.08,231.542 2099.64,231.403 2100.21,232.366 2100.78,231.979 2101.35,232.911 2101.92,234.962 2102.49,234.387 2103.05,235.237 2103.62,234.765 2104.19,233.166 2104.76,233.705 2105.33,233.507 2105.9,232.327 2106.46,231.899 2107.03,230.488 2107.6,228.264 2108.17,228.428 2108.74,229.464 2109.31,230.632 2109.87,229.608 2110.44,227.619 2111.01,227.593 2111.58,228.726 2112.15,227.715 2112.72,227.618 2113.29,227.715 2113.85,227.775 2114.42,231.044 2114.99,230.733 2115.56,231.761 2116.13,231.345 2116.7,231.131 2117.26,233.197 2117.83,231.883 2118.4,232.584 2118.97,232.243 2119.54,232.91 2120.11,231.574 2120.67,231.343 2121.24,230.013 2121.81,229.745 2122.38,230.634 2122.95,230.696 2123.52,229.371 2124.08,229.296 2124.65,230.299 2125.22,229.95 2125.79,227.973 2126.36,231.091 2126.93,231.919 2127.49,230.559 2128.06,227.006 2128.63,228.131 2129.2,229.156 2129.77,227.787 2130.34,226.827 2130.9,224.768 2131.47,223.909 2132.04,226.337 2132.61,227.71 2133.18,226.679 2133.75,225.745 2134.31,226.77 2134.88,225.71 2135.45,224.678 2136.02,226.836 2136.59,228.143 2137.16,231.4 2137.72,231.526 2138.29,231.313 2138.86,232.16 2139.43,231.997 2140,230.587 2140.57,228.186 2141.13,228.178 2141.7,233.298 2142.27,230.808 2142.84,229.826 2143.41,229.948 2143.98,229.77 2144.54,229.66 2145.11,228.577 2145.68,226.409 2146.25,225.327 2146.82,224.444 2147.39,224.76 2147.95,227.147 2148.52,228.306 2149.09,228.326 2149.66,227.447 2150.23,228.612 2150.8,228.559 2151.36,229.43 2151.93,231.325 2152.5,230.238 2153.07,228.073 2153.64,227.38 2154.21,227.518 2154.77,227.809 2155.34,228.894 2155.91,228.95 2156.48,230.21 2157.05,230.299 2157.62,229.203 2158.18,228.223 2158.75,226.237 2159.32,225.46 2159.89,224.53 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip140)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip140)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip140)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip140)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.027 ± 0.026\n  with uncertainty of ± 0.0023156697747006225\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.014 ± (0.00326896, 0.00318408) (MC)\n  95% confidence interval: [-4.02057, -4.00751] (MC)\n  linear error propagation: -4.0149 ± 0.00323442\n  |δ_y| = |0.00315005| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014003854038504, val_l = 0.006563818880585437, val_u = 0.006491341642989035)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip170\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip171\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip172\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1141.52 2211.02,1141.52 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,978.667 2211.02,978.667 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,815.814 2211.02,815.814 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,652.96 2211.02,652.96 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,490.107 2211.02,490.107 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,327.253 2211.02,327.253 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1141.52 365.751,1141.52 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,978.667 365.751,978.667 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,815.814 365.751,815.814 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,652.96 365.751,652.96 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,490.107 365.751,490.107 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,327.253 365.751,327.253 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M298.909 1127.32 Q295.298 1127.32 293.469 1130.88 Q291.664 1134.43 291.664 1141.56 Q291.664 1148.66 293.469 1152.23 Q295.298 1155.77 298.909 1155.77 Q302.543 1155.77 304.349 1152.23 Q306.177 1148.66 306.177 1141.56 Q306.177 1134.43 304.349 1130.88 Q302.543 1127.32 298.909 1127.32 M298.909 1123.62 Q304.719 1123.62 307.775 1128.22 Q310.853 1132.81 310.853 1141.56 Q310.853 1150.28 307.775 1154.89 Q304.719 1159.47 298.909 1159.47 Q293.099 1159.47 290.02 1154.89 Q286.964 1150.28 286.964 1141.56 Q286.964 1132.81 290.02 1128.22 Q293.099 1123.62 298.909 1123.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M259.557 992.012 L267.196 992.012 L267.196 965.646 L258.886 967.313 L258.886 963.054 L267.15 961.387 L271.826 961.387 L271.826 992.012 L279.465 992.012 L279.465 995.947 L259.557 995.947 L259.557 992.012 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 964.466 Q295.298 964.466 293.469 968.031 Q291.664 971.572 291.664 978.702 Q291.664 985.808 293.469 989.373 Q295.298 992.915 298.909 992.915 Q302.543 992.915 304.349 989.373 Q306.177 985.808 306.177 978.702 Q306.177 971.572 304.349 968.031 Q302.543 964.466 298.909 964.466 M298.909 960.762 Q304.719 960.762 307.775 965.369 Q310.853 969.952 310.853 978.702 Q310.853 987.429 307.775 992.035 Q304.719 996.619 298.909 996.619 Q293.099 996.619 290.02 992.035 Q286.964 987.429 286.964 978.702 Q286.964 969.952 290.02 965.369 Q293.099 960.762 298.909 960.762 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M262.775 829.159 L279.094 829.159 L279.094 833.094 L257.15 833.094 L257.15 829.159 Q259.812 826.404 264.395 821.774 Q269.002 817.122 270.182 815.779 Q272.428 813.256 273.307 811.52 Q274.21 809.761 274.21 808.071 Q274.21 805.316 272.266 803.58 Q270.344 801.844 267.242 801.844 Q265.043 801.844 262.59 802.608 Q260.159 803.372 257.381 804.923 L257.381 800.2 Q260.205 799.066 262.659 798.487 Q265.113 797.909 267.15 797.909 Q272.52 797.909 275.715 800.594 Q278.909 803.279 278.909 807.77 Q278.909 809.899 278.099 811.821 Q277.312 813.719 275.205 816.311 Q274.627 816.983 271.525 820.2 Q268.423 823.395 262.775 829.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 801.612 Q295.298 801.612 293.469 805.177 Q291.664 808.719 291.664 815.848 Q291.664 822.955 293.469 826.52 Q295.298 830.061 298.909 830.061 Q302.543 830.061 304.349 826.52 Q306.177 822.955 306.177 815.848 Q306.177 808.719 304.349 805.177 Q302.543 801.612 298.909 801.612 M298.909 797.909 Q304.719 797.909 307.775 802.515 Q310.853 807.098 310.853 815.848 Q310.853 824.575 307.775 829.182 Q304.719 833.765 298.909 833.765 Q293.099 833.765 290.02 829.182 Q286.964 824.575 286.964 815.848 Q286.964 807.098 290.02 802.515 Q293.099 797.909 298.909 797.909 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M272.914 651.606 Q276.27 652.324 278.145 654.592 Q280.043 656.861 280.043 660.194 Q280.043 665.31 276.525 668.111 Q273.006 670.912 266.525 670.912 Q264.349 670.912 262.034 670.472 Q259.742 670.055 257.289 669.199 L257.289 664.685 Q259.233 665.819 261.548 666.398 Q263.863 666.976 266.386 666.976 Q270.784 666.976 273.076 665.24 Q275.39 663.504 275.39 660.194 Q275.39 657.138 273.238 655.425 Q271.108 653.689 267.289 653.689 L263.261 653.689 L263.261 649.847 L267.474 649.847 Q270.923 649.847 272.752 648.481 Q274.58 647.092 274.58 644.5 Q274.58 641.838 272.682 640.426 Q270.807 638.99 267.289 638.99 Q265.367 638.99 263.168 639.407 Q260.969 639.824 258.33 640.703 L258.33 636.537 Q260.992 635.796 263.307 635.426 Q265.645 635.055 267.705 635.055 Q273.029 635.055 276.131 637.486 Q279.233 639.893 279.233 644.014 Q279.233 646.884 277.59 648.875 Q275.946 650.842 272.914 651.606 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 638.759 Q295.298 638.759 293.469 642.324 Q291.664 645.865 291.664 652.995 Q291.664 660.101 293.469 663.666 Q295.298 667.208 298.909 667.208 Q302.543 667.208 304.349 663.666 Q306.177 660.101 306.177 652.995 Q306.177 645.865 304.349 642.324 Q302.543 638.759 298.909 638.759 M298.909 635.055 Q304.719 635.055 307.775 639.662 Q310.853 644.245 310.853 652.995 Q310.853 661.722 307.775 666.328 Q304.719 670.912 298.909 670.912 Q293.099 670.912 290.02 666.328 Q286.964 661.722 286.964 652.995 Q286.964 644.245 290.02 639.662 Q293.099 635.055 298.909 635.055 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M271.594 476.901 L259.789 495.35 L271.594 495.35 L271.594 476.901 M270.367 472.827 L276.247 472.827 L276.247 495.35 L281.177 495.35 L281.177 499.239 L276.247 499.239 L276.247 507.387 L271.594 507.387 L271.594 499.239 L255.992 499.239 L255.992 494.725 L270.367 472.827 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 475.905 Q295.298 475.905 293.469 479.47 Q291.664 483.012 291.664 490.141 Q291.664 497.248 293.469 500.813 Q295.298 504.354 298.909 504.354 Q302.543 504.354 304.349 500.813 Q306.177 497.248 306.177 490.141 Q306.177 483.012 304.349 479.47 Q302.543 475.905 298.909 475.905 M298.909 472.202 Q304.719 472.202 307.775 476.808 Q310.853 481.391 310.853 490.141 Q310.853 498.868 307.775 503.475 Q304.719 508.058 298.909 508.058 Q293.099 508.058 290.02 503.475 Q286.964 498.868 286.964 490.141 Q286.964 481.391 290.02 476.808 Q293.099 472.202 298.909 472.202 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M258.793 309.973 L277.15 309.973 L277.15 313.908 L263.076 313.908 L263.076 322.381 Q264.094 322.033 265.113 321.871 Q266.131 321.686 267.15 321.686 Q272.937 321.686 276.316 324.857 Q279.696 328.029 279.696 333.445 Q279.696 339.024 276.224 342.126 Q272.752 345.204 266.432 345.204 Q264.256 345.204 261.988 344.834 Q259.742 344.464 257.335 343.723 L257.335 339.024 Q259.418 340.158 261.641 340.714 Q263.863 341.269 266.34 341.269 Q270.344 341.269 272.682 339.163 Q275.02 337.056 275.02 333.445 Q275.02 329.834 272.682 327.728 Q270.344 325.621 266.34 325.621 Q264.465 325.621 262.59 326.038 Q260.738 326.455 258.793 327.334 L258.793 309.973 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M298.909 313.052 Q295.298 313.052 293.469 316.617 Q291.664 320.158 291.664 327.288 Q291.664 334.394 293.469 337.959 Q295.298 341.501 298.909 341.501 Q302.543 341.501 304.349 337.959 Q306.177 334.394 306.177 327.288 Q306.177 320.158 304.349 316.617 Q302.543 313.052 298.909 313.052 M298.909 309.348 Q304.719 309.348 307.775 313.955 Q310.853 318.538 310.853 327.288 Q310.853 336.015 307.775 340.621 Q304.719 345.204 298.909 345.204 Q293.099 345.204 290.02 340.621 Q286.964 336.015 286.964 327.288 Q286.964 318.538 290.02 313.955 Q293.099 309.348 298.909 309.348 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1021.53 400.199,911.287 400.786,810.139 401.372,717.47 401.958,632.717 402.545,555.357 403.131,484.906 403.718,420.913 404.304,362.961 404.891,310.657 405.477,357.456 406.063,311.086 406.65,269.559 407.236,233.802 407.823,272.608 408.409,305.227 408.995,275.331 409.582,249.179 410.168,277.944 410.755,255.544 411.341,236.264 411.927,219.895 412.514,246.608 413.1,234.18 413.687,224.88 414.273,250.599 414.86,244.931 415.446,269.726 416.032,266.354 416.619,263.507 417.205,263.46 417.792,307.716 418.378,329.755 418.964,331.149 419.551,369.236 420.137,371.707 420.724,375.888 421.31,380.382 421.896,400.775 422.483,407.061 423.069,413.224 423.656,419.748 424.242,438.478 424.829,468.751 425.415,497.955 426.001,505.322 426.588,523.083 427.174,540.916 427.761,549.981 428.347,567.764 428.933,592.587 429.52,615.843 430.106,624.593 430.693,633.071 431.279,642.437 431.865,663.393 432.452,683.063 433.038,696.222 433.625,704.193 434.211,712.141 434.798,720.538 435.384,729.078 435.97,737.542 436.557,755.051 437.143,776.444 437.73,788.697 438.316,796.483 438.902,808.279 439.489,815.666 440.075,826.887 440.662,838.002 441.248,852.15 441.835,858.927 442.421,876.247 443.007,889.247 443.594,898.556 444.18,910.834 444.767,925.867 445.353,934.521 445.939,943.15 446.526,954.209 447.112,959.417 447.699,967.113 448.285,974.931 448.871,987.6 449.458,994.474 450.044,998.777 450.631,1010.3 451.217,1014.29 451.804,1023.52 452.39,1037.06 452.976,1045.82 453.563,1054.21 454.149,1057.42 454.736,1063.27 455.322,1069.04 455.908,1076.43 456.495,1079.41 457.081,1084.37 457.668,1097.51 458.254,1100.24 458.84,1104.6 459.427,1107.27 460.013,1113.95 460.6,1116.56 461.186,1121.08 461.773,1126.92 462.359,1134.65 462.945,1141.8 463.532,1143.58 464.118,1148.91 464.705,1148.49 465.291,1155.37 465.877,1158.71 466.464,1161.42 467.05,1162.74 467.637,1165.35 468.223,1168.23 468.809,1174.32 469.396,1176.75 469.982,1177.44 470.569,1176.45 471.155,1179.47 471.742,1180.2 472.328,1187.61 472.914,1188.12 473.501,1188.56 474.087,1189.05 474.674,1191.22 475.26,1194.9 475.846,1195.12 476.433,1197.33 477.019,1202.23 477.606,1204.42 478.192,1205.88 478.778,1213.52 479.365,1217.94 479.951,1216.35 480.538,1220.65 481.124,1223.08 481.711,1219.52 482.297,1219.04 482.883,1221.79 483.47,1222.83 484.056,1224.15 484.643,1228.23 485.229,1226.15 485.815,1225.42 486.402,1225.34 486.988,1224.98 487.575,1225.91 488.161,1227.13 488.748,1228.33 489.334,1230.87 489.92,1231.86 490.507,1231.21 491.093,1232.45 491.68,1230.56 492.266,1233.28 492.852,1234.18 493.439,1235.22 494.025,1235.99 494.612,1231.12 495.198,1230.82 495.784,1230.46 496.371,1230.08 496.957,1231.4 497.544,1231.18 498.13,1232.16 498.717,1231.94 499.303,1229.96 499.889,1229.62 500.476,1230.67 501.062,1231.85 501.649,1231.77 502.235,1231.77 502.821,1234.42 503.408,1233.98 503.994,1234.92 504.581,1240.03 505.167,1239.34 505.753,1239.8 506.34,1241.8 506.926,1239.77 507.513,1240.43 508.099,1238.29 508.686,1236.5 509.272,1237.42 509.858,1239.92 510.445,1242.12 511.031,1245.64 511.618,1246.2 512.204,1245.42 512.79,1241.69 513.377,1243.68 513.963,1245.66 514.55,1248.78 515.136,1250.53 515.722,1249.24 516.309,1248.08 516.895,1247.07 517.482,1244.77 518.068,1242.39 518.655,1241.5 519.241,1239.62 519.827,1238.93 520.414,1239.4 521,1239.95 521.587,1238.16 522.173,1236.29 522.759,1235.96 523.346,1238.21 523.932,1239.21 524.519,1240.07 525.105,1235.65 525.691,1232.72 526.278,1231.02 526.864,1229.52 527.451,1230.68 528.037,1230.34 528.624,1231.63 529.21,1234.16 529.796,1231.16 530.383,1229.86 530.969,1232.64 531.556,1232.43 532.142,1234.61 532.728,1231.46 533.315,1231.18 533.901,1230.83 534.488,1230.66 535.074,1223.7 535.661,1225.27 536.247,1226.51 536.833,1227.81 537.42,1230.42 538.006,1228.81 538.593,1230.04 539.179,1231.2 539.765,1232.18 540.352,1234.79 540.938,1237.04 541.525,1237.99 542.111,1237.32 542.697,1238.08 543.284,1238.81 543.87,1238.25 544.457,1240.11 545.043,1240.76 545.63,1240.02 546.216,1236.36 546.802,1235.94 547.389,1235.32 547.975,1236.19 548.562,1235.92 549.148,1238.44 549.734,1237.5 550.321,1236.67 550.907,1236.2 551.494,1235.62 552.08,1233.72 552.666,1234.25 553.253,1232.51 553.839,1233.63 554.426,1234.66 555.012,1232.91 555.599,1235.13 556.185,1238.63 556.771,1239.21 557.358,1241.03 557.944,1241.48 558.531,1241.75 559.117,1239.56 559.703,1239.7 560.29,1237.51 560.876,1238.31 561.463,1238.7 562.049,1238.01 562.635,1237.23 563.222,1240.6 563.808,1239.67 564.395,1238.77 564.981,1236.55 565.568,1235.84 566.154,1233.71 566.74,1235.65 567.327,1233.73 567.913,1233.41 568.5,1231.49 569.086,1233.63 569.672,1232.9 570.259,1231.01 570.845,1230.54 571.432,1229.92 572.018,1228.34 572.605,1229.68 573.191,1231.97 573.777,1230.02 574.364,1232.09 574.95,1229.19 575.537,1230.15 576.123,1232.19 576.709,1230.39 577.296,1227.04 577.882,1226.59 578.469,1227.67 579.055,1228.76 579.641,1224.45 580.228,1222.66 580.814,1222.59 581.401,1223.89 581.987,1223.24 582.574,1224.22 583.16,1225.33 583.746,1226.52 584.333,1227.44 584.919,1229.71 585.506,1229.35 586.092,1230.15 586.678,1229.41 587.265,1230.05 587.851,1228.19 588.438,1227.32 589.024,1224.2 589.61,1222.67 590.197,1222.62 590.783,1222.52 591.37,1223.75 591.956,1223.38 592.543,1224.75 593.129,1227.13 593.715,1228.1 594.302,1229.37 594.888,1230.21 595.475,1228.26 596.061,1227.94 596.647,1227.51 597.234,1228.11 597.82,1225.98 598.407,1226.96 598.993,1225.24 599.579,1226.24 600.166,1224.79 600.752,1227.21 601.339,1233.3 601.925,1231.41 602.512,1230.97 603.098,1230.43 603.684,1229.57 604.271,1231.81 604.857,1229.61 605.444,1227.65 606.03,1227.16 606.616,1227.99 607.203,1227.49 607.789,1228.28 608.376,1227.67 608.962,1229.82 609.548,1227.95 610.135,1226.16 610.721,1228.52 611.308,1227.82 611.894,1227.38 612.481,1225.64 613.067,1225.2 613.653,1224.83 614.24,1220.38 614.826,1221.42 615.413,1217.3 615.999,1214.6 616.585,1215.95 617.172,1217.59 617.758,1221.73 618.345,1221.64 618.931,1221.07 619.518,1220.56 620.104,1217.81 620.69,1216.24 621.277,1216.27 621.863,1217.42 622.45,1214.76 623.036,1214.92 623.622,1214.77 624.209,1213.6 624.795,1213.81 625.382,1210.9 625.968,1212.72 626.554,1211.9 627.141,1214.78 627.727,1216.42 628.314,1216.44 628.9,1217.6 629.487,1217.52 630.073,1217.46 630.659,1218.42 631.246,1218.21 631.832,1219.51 632.419,1219.38 633.005,1220.46 633.591,1218.91 634.178,1217.22 634.764,1218.23 635.351,1216.7 635.937,1220.36 636.523,1221.47 637.11,1222.6 637.696,1221.99 638.283,1222.83 638.869,1222.54 639.456,1222.19 640.042,1223.1 640.628,1225.3 641.215,1222.02 641.801,1219.07 642.388,1217.79 642.974,1217.69 643.56,1217.73 644.147,1216.28 644.733,1216.28 645.32,1214.84 645.906,1211.94 646.492,1213.64 647.079,1213.59 647.665,1215.05 648.252,1214.9 648.838,1215.23 649.425,1213.96 650.011,1218.58 650.597,1222.15 651.184,1220.5 651.77,1220.11 652.357,1219.69 652.943,1219.44 653.529,1220.8 654.116,1220.12 654.702,1222.57 655.289,1222.12 655.875,1220.45 656.462,1220.17 657.048,1218.52 657.634,1217.14 658.221,1217.21 658.807,1220.89 659.394,1220.82 659.98,1221.63 660.566,1220.2 661.153,1221.39 661.739,1225.16 662.326,1223.21 662.912,1221.36 663.498,1222.67 664.085,1219.48 664.671,1216.61 665.258,1216.6 665.844,1217.72 666.431,1215.08 667.017,1213.83 667.603,1213.95 668.19,1213.89 668.776,1215.44 669.363,1218.05 669.949,1217.76 670.535,1218.7 671.122,1221.19 671.708,1220.9 672.295,1219.11 672.881,1219 673.467,1218.7 674.054,1218.44 674.64,1219.21 675.227,1219.21 675.813,1218.61 676.4,1216.93 676.986,1219.5 677.572,1217.75 678.159,1216.22 678.745,1216.04 679.332,1217.34 679.918,1216.94 680.504,1214.18 681.091,1214.02 681.677,1213.94 682.264,1213.55 682.85,1209.65 683.436,1208.63 684.023,1210.01 684.609,1210.31 685.196,1210.65 685.782,1213.39 686.369,1214.86 686.955,1214.83 687.541,1216.36 688.128,1217.7 688.714,1218.62 689.301,1217 689.887,1219.28 690.473,1217.5 691.06,1219.89 691.646,1218.01 692.233,1216.22 692.819,1214.85 693.405,1215.1 693.992,1214.91 694.578,1214.9 695.165,1217.34 695.751,1217.14 696.338,1219.43 696.924,1219.12 697.51,1218.63 698.097,1218.27 698.683,1217.86 699.27,1220.28 699.856,1219.73 700.442,1220.64 701.029,1220 701.615,1219.41 702.202,1217.66 702.788,1214.53 703.375,1215.58 703.961,1219.49 704.547,1219.05 705.134,1218.68 705.72,1218.39 706.307,1216.71 706.893,1217.71 707.479,1219.87 708.066,1218.34 708.652,1219.57 709.239,1220.53 709.825,1220.11 710.411,1219.84 710.998,1223.23 711.584,1221.18 712.171,1220.51 712.757,1217.69 713.344,1215.85 713.93,1216.13 714.516,1215.75 715.103,1214.5 715.689,1212.76 716.276,1212.65 716.862,1212.54 717.448,1212.52 718.035,1213.92 718.621,1216.29 719.208,1215 719.794,1213.41 720.38,1211.83 720.967,1209.26 721.553,1209.11 722.14,1209.49 722.726,1211.03 723.313,1211.19 723.899,1212.59 724.485,1216.43 725.072,1213.41 725.658,1212.02 726.245,1211.89 726.831,1214.38 727.417,1211.71 728.004,1211.84 728.59,1214.4 729.177,1214.25 729.763,1214.12 730.349,1213.97 730.936,1211.13 731.522,1211.21 732.109,1210.04 732.695,1211.57 733.282,1211.49 733.868,1212.67 734.454,1212.61 735.041,1211.18 735.627,1212.56 736.214,1213.74 736.8,1213.39 737.386,1212.17 737.973,1210.44 738.559,1210.39 739.146,1209.24 739.732,1206.81 740.318,1209.88 740.905,1209.97 741.491,1211.2 742.078,1211.07 742.664,1209.9 743.251,1210.09 743.837,1207.55 744.423,1207.6 745.01,1203.7 745.596,1202.86 746.183,1203.54 746.769,1206.56 747.355,1206.9 747.942,1208.34 748.528,1209.43 749.115,1212.24 749.701,1212.16 750.288,1213.4 750.874,1212.12 751.46,1212.05 752.047,1213.24 752.633,1214.18 753.22,1215.27 753.806,1214.96 754.392,1214.92 754.979,1216.06 755.565,1214.37 756.152,1214.26 756.738,1212.64 757.324,1213.96 757.911,1214.02 758.497,1214.2 759.084,1216.73 759.67,1216.23 760.257,1215.95 760.843,1216.01 761.429,1216.99 762.016,1215.37 762.602,1217.85 763.189,1220.25 763.775,1220.85 764.361,1218.93 764.948,1218.58 765.534,1220.66 766.121,1220.26 766.707,1219.89 767.293,1219.36 767.88,1218.89 768.466,1216.83 769.053,1217.6 769.639,1217.02 770.226,1216.68 770.812,1215.18 771.398,1212.14 771.985,1213.56 772.571,1214.65 773.158,1212.77 773.744,1212.65 774.33,1210.28 774.917,1208.94 775.503,1210.34 776.09,1211.76 776.676,1212.86 777.262,1214.02 777.849,1211.45 778.435,1211.56 779.022,1211.51 779.608,1212.66 780.195,1211.23 780.781,1209.67 781.367,1210.82 781.954,1212 782.54,1213.21 783.127,1214.38 783.713,1214.16 784.299,1212.79 784.886,1212.67 785.472,1213.75 786.059,1212.47 786.645,1212.61 787.232,1213.68 787.818,1213.39 788.404,1215.83 788.991,1215.62 789.577,1215.58 790.164,1218.04 790.75,1217.53 791.336,1215.87 791.923,1215.58 792.509,1214.02 793.096,1213.92 793.682,1214.8 794.268,1213.2 794.855,1212.88 795.441,1212.7 796.028,1209.77 796.614,1207.03 797.201,1204.42 797.787,1203.53 798.373,1202.43 798.96,1203.93 799.546,1205.3 800.133,1199.06 800.719,1199.59 801.305,1198.78 801.892,1199.16 802.478,1198.37 803.065,1199.18 803.651,1198.35 804.237,1200.23 804.824,1200.79 805.41,1201.49 805.997,1203.59 806.583,1203.85 807.17,1203.07 807.756,1208.7 808.342,1208.77 808.929,1207.63 809.515,1207.82 810.102,1206.89 810.688,1208.29 811.274,1207.22 811.861,1207.34 812.447,1205.97 813.034,1203.55 813.62,1203.85 814.206,1204.37 814.793,1207.37 815.379,1208.85 815.966,1209.75 816.552,1212.36 817.139,1211.06 817.725,1209.68 818.311,1211.07 818.898,1211.25 819.484,1212.44 820.071,1211.13 820.657,1212.33 821.243,1212.12 821.83,1211.86 822.416,1210.42 823.003,1210.55 823.589,1213.43 824.175,1213.4 824.762,1217.35 825.348,1216.55 825.935,1213.56 826.521,1211.95 827.108,1214.47 827.694,1213.95 828.28,1212.51 828.867,1215.1 829.453,1216.24 830.04,1215.6 830.626,1215.35 831.212,1215.09 831.799,1214.75 832.385,1216.14 832.972,1214.4 833.558,1215.53 834.145,1214.05 834.731,1213.84 835.317,1214.78 835.904,1211.93 836.49,1210.61 837.077,1213.33 837.663,1211.84 838.249,1211.75 838.836,1211.44 839.422,1211.27 840.009,1208.35 840.595,1208.45 841.181,1209.76 841.768,1210.87 842.354,1208.15 842.941,1206.95 843.527,1204.61 844.114,1206.32 844.7,1205.15 845.286,1205.44 845.873,1206.99 846.459,1206.79 847.046,1204.1 847.632,1204.39 848.218,1204.48 848.805,1204.75 849.391,1207.8 849.978,1206.66 850.564,1205.86 851.15,1206.05 851.737,1204.98 852.323,1206.5 852.91,1207.94 853.496,1209.11 854.083,1207.8 854.669,1206.85 855.255,1209.57 855.842,1207.12 856.428,1208.51 857.015,1209.95 857.601,1208.82 858.187,1209.78 858.774,1209.6 859.36,1209.73 859.947,1209.7 860.533,1209.82 861.119,1208.33 861.706,1209.9 862.292,1211.06 862.879,1211.03 863.465,1212.48 864.052,1210.9 864.638,1210.77 865.224,1212.06 865.811,1212.98 866.397,1212.75 866.984,1211.08 867.57,1210.98 868.156,1210.77 868.743,1210.63 869.329,1210.66 869.916,1210.76 870.502,1212.16 871.089,1212.05 871.675,1210.42 872.261,1208.99 872.848,1208.95 873.434,1207.93 874.021,1205.31 874.607,1202.88 875.193,1204.48 875.78,1203.23 876.366,1203.58 876.953,1203.86 877.539,1205.4 878.125,1207.03 878.712,1207.2 879.298,1208.34 879.885,1206.87 880.471,1209.59 881.058,1209.76 881.644,1208.07 882.23,1208.21 882.817,1208.44 883.403,1204.91 883.99,1205.15 884.576,1206.45 885.162,1203.83 885.749,1206.76 886.335,1208.43 886.922,1207.29 887.508,1207.53 888.094,1207.52 888.681,1208.85 889.267,1204.71 889.854,1206.24 890.44,1203.84 891.027,1204.19 891.613,1206.04 892.199,1206.45 892.786,1207.88 893.372,1208.1 893.959,1206.76 894.545,1208.44 895.131,1211.05 895.718,1210.93 896.304,1209.44 896.891,1208.24 897.477,1209.91 898.063,1208.63 898.65,1207.49 899.236,1207.54 899.823,1208.88 900.409,1210.17 900.996,1214.02 901.582,1212.24 902.168,1212.12 902.755,1212.02 903.341,1210.57 903.928,1213.08 904.514,1211.49 905.1,1211.1 905.687,1212.19 906.273,1211.92 906.86,1215.45 907.446,1215.14 908.032,1214.67 908.619,1210.38 909.205,1210.21 909.792,1208.56 910.378,1208.48 910.965,1210.28 911.551,1204.88 912.137,1204.05 912.724,1205.55 913.31,1207.03 913.897,1209.96 914.483,1209.89 915.069,1208.38 915.656,1207.12 916.242,1207.25 916.829,1210.96 917.415,1210.45 918.002,1210.4 918.588,1210.31 919.174,1211.35 919.761,1211.11 920.347,1211.04 920.934,1212.32 921.52,1212.18 922.106,1210.38 922.693,1211.82 923.279,1212.77 923.866,1215.28 924.452,1212.27 925.038,1213 925.625,1212.82 926.211,1209.76 926.798,1208.55 927.384,1207.27 927.971,1207.47 928.557,1207.43 929.143,1207.36 929.73,1208.73 930.316,1212.68 930.903,1213.54 931.489,1210.89 932.075,1209.42 932.662,1209.48 933.248,1209.14 933.835,1206.77 934.421,1207.96 935.007,1209.46 935.594,1206.88 936.18,1208.34 936.767,1209.5 937.353,1209.43 937.94,1207.88 938.526,1207.85 939.112,1209.25 939.699,1211.97 940.285,1209.02 940.872,1210.78 941.458,1211.84 942.044,1214.45 942.631,1214.25 943.217,1212.59 943.804,1213.6 944.39,1214.49 944.976,1213.84 945.563,1217.31 946.149,1215.64 946.736,1216.2 947.322,1217.21 947.909,1216.59 948.495,1215.95 949.081,1214.26 949.668,1216.57 950.254,1212.3 950.841,1213.37 951.427,1211.96 952.013,1210.36 952.6,1210.24 953.186,1211.86 953.773,1214.26 954.359,1213.98 954.945,1213.41 955.532,1212.88 956.118,1213.94 956.705,1213.52 957.291,1212.82 957.878,1210.24 958.464,1209.96 959.05,1211.08 959.637,1210.98 960.223,1207.92 960.81,1209.47 961.396,1210.67 961.982,1210.21 962.569,1209.91 963.155,1209.64 963.742,1208.21 964.328,1208.26 964.915,1206.9 965.501,1205.37 966.087,1202.15 966.674,1199.66 967.26,1197.33 967.847,1195.22 968.433,1194.66 969.019,1195.53 969.606,1197.55 970.192,1200.63 970.779,1205.23 971.365,1205.35 971.951,1205.23 972.538,1202.94 973.124,1202.18 973.711,1202.45 974.297,1203.79 974.884,1204.01 975.47,1204.16 976.056,1204.42 976.643,1204.81 977.229,1204.92 977.816,1200.87 978.402,1201.11 978.988,1201.39 979.575,1203.11 980.161,1204.56 980.748,1204.73 981.334,1203.48 981.92,1206.56 982.507,1202.38 983.093,1205.05 983.68,1205.52 984.266,1204.59 984.853,1203.37 985.439,1198.47 986.025,1199.11 986.612,1199.47 987.198,1198.54 987.785,1200.24 988.371,1200.73 988.957,1202.4 989.544,1204.19 990.13,1204.44 990.717,1206.16 991.303,1206.41 991.889,1208.35 992.476,1210.03 993.062,1209.98 993.649,1215.17 994.235,1214.57 994.822,1214.46 995.408,1214.69 995.994,1213.25 996.581,1212.78 997.167,1212.54 997.754,1213.41 998.34,1213.35 998.926,1212.77 999.513,1212.37 1000.1,1212.45 1000.69,1211.94 1001.27,1210.25 1001.86,1210.17 1002.44,1207.12 1003.03,1208.9 1003.62,1207.42 1004.2,1206.08 1004.79,1205.99 1005.38,1205.93 1005.96,1205.98 1006.55,1204.55 1007.14,1205.82 1007.72,1204.72 1008.31,1205.13 1008.9,1207.9 1009.48,1206.37 1010.07,1206.57 1010.65,1205.63 1011.24,1204.71 1011.83,1203.43 1012.41,1203.72 1013,1202.4 1013.59,1205.34 1014.17,1205.61 1014.76,1204.28 1015.35,1200.42 1015.93,1197.94 1016.52,1198.34 1017.11,1198.66 1017.69,1200.46 1018.28,1201.92 1018.86,1202.33 1019.45,1202.48 1020.04,1201.32 1020.62,1201.87 1021.21,1202.35 1021.8,1202.57 1022.38,1202.75 1022.97,1200.25 1023.56,1201.88 1024.14,1200.91 1024.73,1200.22 1025.32,1203.68 1025.9,1202.42 1026.49,1203.91 1027.07,1203.25 1027.66,1204.79 1028.25,1205.08 1028.83,1202.5 1029.42,1202.89 1030.01,1203.44 1030.59,1203.89 1031.18,1205.29 1031.77,1206.46 1032.35,1207.9 1032.94,1209.17 1033.52,1209.06 1034.11,1209.14 1034.7,1206.41 1035.28,1209.21 1035.87,1207.86 1036.46,1209.29 1037.04,1209.5 1037.63,1209.43 1038.22,1210.7 1038.8,1216.02 1039.39,1214.5 1039.98,1211.35 1040.56,1212.28 1041.15,1210.56 1041.73,1210.49 1042.32,1211.5 1042.91,1211.46 1043.49,1213.84 1044.08,1214.72 1044.67,1213.13 1045.25,1211.48 1045.84,1211.31 1046.43,1208.42 1047.01,1206.9 1047.6,1209.57 1048.19,1210.57 1048.77,1209.03 1049.36,1207.61 1049.94,1207.57 1050.53,1205.22 1051.12,1204.33 1051.7,1201.71 1052.29,1200.71 1052.88,1202 1053.46,1201.1 1054.05,1202.89 1054.64,1204.48 1055.22,1204.39 1055.81,1201.8 1056.39,1202.32 1056.98,1203.91 1057.57,1201.85 1058.15,1203.52 1058.74,1203.54 1059.33,1206.42 1059.91,1206.4 1060.5,1210.52 1061.09,1211.5 1061.67,1209.9 1062.26,1213.55 1062.85,1213.21 1063.43,1211.61 1064.02,1212.67 1064.6,1212.82 1065.19,1211.35 1065.78,1212.31 1066.36,1211.98 1066.95,1211.89 1067.54,1210.14 1068.12,1211.55 1068.71,1211.41 1069.3,1208.49 1069.88,1207.88 1070.47,1209.04 1071.06,1209.02 1071.64,1207.72 1072.23,1207.64 1072.81,1209.31 1073.4,1210.58 1073.99,1210.16 1074.57,1211.36 1075.16,1213.61 1075.75,1213.3 1076.33,1210.27 1076.92,1211.35 1077.51,1209.49 1078.09,1208.25 1078.68,1208.14 1079.26,1208.16 1079.85,1208.28 1080.44,1206.76 1081.02,1206.7 1081.61,1206.82 1082.2,1207.92 1082.78,1206.63 1083.37,1206.59 1083.96,1206.43 1084.54,1202.17 1085.13,1199.84 1085.72,1201.52 1086.3,1205.75 1086.89,1207.41 1087.47,1207.69 1088.06,1207.85 1088.65,1210.49 1089.23,1210.49 1089.82,1212.8 1090.41,1214.19 1090.99,1212.94 1091.58,1212.78 1092.17,1209.75 1092.75,1213.36 1093.34,1214.71 1093.93,1215.81 1094.51,1215.61 1095.1,1214.92 1095.68,1210.5 1096.27,1210.08 1096.86,1212.55 1097.44,1212.27 1098.03,1210.58 1098.62,1211.5 1099.2,1211.08 1099.79,1209.51 1100.38,1209.39 1100.96,1211.72 1101.55,1211.32 1102.14,1211.1 1102.72,1211.16 1103.31,1210.88 1103.89,1211.95 1104.48,1210.45 1105.07,1213.03 1105.65,1215.16 1106.24,1216.15 1106.83,1212.95 1107.41,1212.62 1108,1208.43 1108.59,1208.66 1109.17,1206 1109.76,1207.28 1110.34,1205.74 1110.93,1205.75 1111.52,1203.12 1112.1,1206.2 1112.69,1205.17 1113.28,1202.3 1113.86,1205.4 1114.45,1209.4 1115.04,1208.23 1115.62,1209.35 1116.21,1212.09 1116.8,1211.69 1117.38,1208.8 1117.97,1208.61 1118.55,1207.27 1119.14,1208.5 1119.73,1209.96 1120.31,1208.71 1120.9,1209.99 1121.49,1213.86 1122.07,1210.8 1122.66,1210.49 1123.25,1208.9 1123.83,1206.35 1124.42,1203.96 1125.01,1204.24 1125.59,1204.28 1126.18,1204.24 1126.76,1204.2 1127.35,1201.57 1127.94,1201.84 1128.52,1201.97 1129.11,1200.79 1129.7,1202.6 1130.28,1204.14 1130.87,1204.26 1131.46,1204.75 1132.04,1209 1132.63,1208.75 1133.21,1208.89 1133.8,1208.8 1134.39,1210.18 1134.97,1212.91 1135.56,1212.61 1136.15,1213.94 1136.73,1213.64 1137.32,1209.08 1137.91,1206.24 1138.49,1203.89 1139.08,1203.99 1139.67,1206.81 1140.25,1211.12 1140.84,1210.86 1141.42,1209.34 1142.01,1208.17 1142.6,1207.07 1143.18,1207.06 1143.77,1208.27 1144.36,1207.02 1144.94,1208.35 1145.53,1207.1 1146.12,1207.12 1146.7,1203.19 1147.29,1204.79 1147.88,1205.02 1148.46,1205.16 1149.05,1206.84 1149.63,1208.17 1150.22,1206.66 1150.81,1205.51 1151.39,1205.65 1151.98,1205.62 1152.57,1205.56 1153.15,1208.39 1153.74,1210.71 1154.33,1209.2 1154.91,1208.11 1155.5,1209.64 1156.09,1210.82 1156.67,1209.17 1157.26,1209.2 1157.84,1207.53 1158.43,1209.13 1159.02,1205.29 1159.6,1204.1 1160.19,1205.7 1160.78,1208.55 1161.36,1208.27 1161.95,1208.08 1162.54,1207.8 1163.12,1209.24 1163.71,1208.14 1164.29,1206.7 1164.88,1205.6 1165.47,1208.56 1166.05,1208.55 1166.64,1208.54 1167.23,1205.58 1167.81,1208.47 1168.4,1208.31 1168.99,1209.64 1169.57,1209.57 1170.16,1210.65 1170.75,1210.42 1171.33,1209.02 1171.92,1208.84 1172.5,1207.7 1173.09,1210.26 1173.68,1210.15 1174.26,1209.88 1174.85,1208.59 1175.44,1208.44 1176.02,1208.14 1176.61,1208.15 1177.2,1208.01 1177.78,1210.37 1178.37,1208.6 1178.96,1208.71 1179.54,1209.97 1180.13,1208.2 1180.71,1208.37 1181.3,1210.81 1181.89,1210.75 1182.47,1210.69 1183.06,1209.41 1183.65,1209.06 1184.23,1207.59 1184.82,1207.46 1185.41,1209.01 1185.99,1209.02 1186.58,1209.07 1187.16,1208.84 1187.75,1204.82 1188.34,1209.01 1188.92,1205.9 1189.51,1203.43 1190.1,1203.63 1190.68,1203.84 1191.27,1204.21 1191.86,1205.66 1192.44,1208.3 1193.03,1212.14 1193.62,1211.52 1194.2,1210.04 1194.79,1208.48 1195.37,1208.25 1195.96,1208.18 1196.55,1209.29 1197.13,1209.06 1197.72,1208.91 1198.31,1206.09 1198.89,1209.95 1199.48,1209.69 1200.07,1206.89 1200.65,1205.19 1201.24,1206.55 1201.83,1206.39 1202.41,1206.61 1203,1207.89 1203.58,1208 1204.17,1209.17 1204.76,1209.06 1205.34,1210.12 1205.93,1209.92 1206.52,1208.56 1207.1,1206.07 1207.69,1206.23 1208.28,1206.17 1208.86,1207.52 1209.45,1207.56 1210.03,1204.61 1210.62,1205.93 1211.21,1205.77 1211.79,1208.66 1212.38,1208.55 1212.97,1209.88 1213.55,1209.7 1214.14,1213.56 1214.73,1213.34 1215.31,1213.09 1215.9,1212.85 1216.49,1215.14 1217.07,1213.46 1217.66,1211.61 1218.24,1212.69 1218.83,1212.45 1219.42,1213.32 1220,1213.07 1220.59,1215.5 1221.18,1215.19 1221.76,1217.58 1222.35,1215.93 1222.94,1215.54 1223.52,1212.5 1224.11,1209.56 1224.7,1207.82 1225.28,1204.91 1225.87,1206.34 1226.45,1205.42 1227.04,1204.07 1227.63,1204.22 1228.21,1205.63 1228.8,1206.75 1229.39,1210.36 1229.97,1211.42 1230.56,1208.87 1231.15,1209.8 1231.73,1208.24 1232.32,1211.08 1232.91,1209.32 1233.49,1209.31 1234.08,1206.56 1234.66,1205.4 1235.25,1205.62 1235.84,1205.72 1236.42,1206.04 1237.01,1207.49 1237.6,1201.92 1238.18,1203.31 1238.77,1202.5 1239.36,1201.26 1239.94,1197.43 1240.53,1196.71 1241.11,1194.54 1241.7,1196.51 1242.29,1195.53 1242.87,1196.24 1243.46,1195.67 1244.05,1196.19 1244.63,1196.78 1245.22,1195.92 1245.81,1196.38 1246.39,1191.84 1246.98,1194.11 1247.57,1194.61 1248.15,1195.5 1248.74,1196.11 1249.32,1196.72 1249.91,1198.38 1250.5,1197.5 1251.08,1201.97 1251.67,1201.04 1252.26,1202.9 1252.84,1204.18 1253.43,1201.89 1254.02,1203.4 1254.6,1202.13 1255.19,1200.64 1255.78,1196.98 1256.36,1197.46 1256.95,1199.09 1257.53,1199.37 1258.12,1202.47 1258.71,1201.35 1259.29,1203.31 1259.88,1203.23 1260.47,1203.3 1261.05,1204.58 1261.64,1203.68 1262.23,1205.43 1262.81,1208.29 1263.4,1206.75 1263.98,1205.3 1264.57,1206.92 1265.16,1207 1265.74,1208.43 1266.33,1211.03 1266.92,1210.98 1267.5,1213.09 1268.09,1208.91 1268.68,1211.62 1269.26,1210.44 1269.85,1211.31 1270.44,1211.02 1271.02,1214.79 1271.61,1212.8 1272.19,1212.48 1272.78,1212.33 1273.37,1212.07 1273.95,1210.39 1274.54,1210.32 1275.13,1210.32 1275.71,1208.48 1276.3,1208.67 1276.89,1212.74 1277.47,1212.71 1278.06,1210.81 1278.65,1210.45 1279.23,1206.33 1279.82,1202.32 1280.4,1201.42 1280.99,1199.29 1281.58,1201.17 1282.16,1201.09 1282.75,1202.69 1283.34,1202.66 1283.92,1204.25 1284.51,1205.63 1285.1,1204.39 1285.68,1205.66 1286.27,1208.69 1286.86,1207.25 1287.44,1208.32 1288.03,1207.96 1288.61,1210.53 1289.2,1210.3 1289.79,1208.9 1290.37,1209.8 1290.96,1205.74 1291.55,1205.65 1292.13,1205.75 1292.72,1204.58 1293.31,1203.45 1293.89,1203.62 1294.48,1203.65 1295.06,1202.6 1295.65,1202.94 1296.24,1205.74 1296.82,1205.98 1297.41,1207.41 1298,1207.14 1298.58,1209.72 1299.17,1210.93 1299.76,1210.95 1300.34,1210.63 1300.93,1210.75 1301.52,1210.46 1302.1,1212.79 1302.69,1216.11 1303.27,1215.7 1303.86,1217.84 1304.45,1220.15 1305.03,1216.98 1305.62,1220.7 1306.21,1218.55 1306.79,1215.26 1307.38,1214.68 1307.97,1216.89 1308.55,1215.1 1309.14,1215.87 1309.73,1216.45 1310.31,1217.03 1310.9,1215.24 1311.48,1216.08 1312.07,1216.95 1312.66,1218.62 1313.24,1216.75 1313.83,1215.05 1314.42,1214.87 1315,1211.88 1315.59,1209 1316.18,1207.82 1316.76,1208.86 1317.35,1208.89 1317.93,1208.61 1318.52,1207.28 1319.11,1207.25 1319.69,1208.86 1320.28,1208.9 1320.87,1208.67 1321.45,1212.53 1322.04,1211.97 1322.63,1215.67 1323.21,1213.57 1323.8,1210.77 1324.39,1208.01 1324.97,1208.16 1325.56,1206.66 1326.14,1205.46 1326.73,1205.49 1327.32,1205.64 1327.9,1208.12 1328.49,1209.32 1329.08,1210.53 1329.66,1208.95 1330.25,1207.44 1330.84,1207.33 1331.42,1205.97 1332.01,1206.18 1332.6,1203.53 1333.18,1205.98 1333.77,1208.67 1334.35,1205.95 1334.94,1206.03 1335.53,1206.07 1336.11,1204.84 1336.7,1207.43 1337.29,1207.24 1337.87,1207.14 1338.46,1207.37 1339.05,1207.31 1339.63,1204.53 1340.22,1203.16 1340.8,1205.84 1341.39,1204.16 1341.98,1204.56 1342.56,1204.87 1343.15,1205.14 1343.74,1206.46 1344.32,1203.84 1344.91,1206.76 1345.5,1205.37 1346.08,1204.15 1346.67,1203.22 1347.26,1204.68 1347.84,1206.28 1348.43,1206.19 1349.01,1208.81 1349.6,1207.64 1350.19,1206.46 1350.77,1206.66 1351.36,1205.31 1351.95,1205.53 1352.53,1204.32 1353.12,1204.74 1353.71,1206.51 1354.29,1202.55 1354.88,1204.2 1355.47,1203.16 1356.05,1203.13 1356.64,1203.14 1357.22,1203.45 1357.81,1202.47 1358.4,1202.88 1358.98,1201.78 1359.57,1200.86 1360.16,1202.63 1360.74,1201.6 1361.33,1202.18 1361.92,1202.56 1362.5,1206.98 1363.09,1209.69 1363.68,1209.68 1364.26,1210.9 1364.85,1210.72 1365.43,1210.62 1366.02,1210.59 1366.61,1210.48 1367.19,1210.09 1367.78,1211.44 1368.37,1209.74 1368.95,1212.18 1369.54,1211.86 1370.13,1209.07 1370.71,1208.75 1371.3,1206.04 1371.88,1205.01 1372.47,1206.45 1373.06,1205.16 1373.64,1202.74 1374.23,1200.28 1374.82,1203.32 1375.4,1202.48 1375.99,1202.68 1376.58,1204.25 1377.16,1205.48 1377.75,1206.82 1378.34,1208.22 1378.92,1208.31 1379.51,1209.3 1380.09,1205.25 1380.68,1204.22 1381.27,1205.78 1381.85,1207.02 1382.44,1206.81 1383.03,1208.21 1383.61,1209.31 1384.2,1209.63 1384.79,1210.56 1385.37,1210.31 1385.96,1210.04 1386.55,1210.18 1387.13,1207.4 1387.72,1207.11 1388.3,1204.87 1388.89,1207.83 1389.48,1206.55 1390.06,1209.21 1390.65,1210.37 1391.24,1210.16 1391.82,1209.85 1392.41,1208.43 1393,1206.96 1393.58,1208.51 1394.17,1209.79 1394.75,1208.66 1395.34,1206.08 1395.93,1206.15 1396.51,1207.79 1397.1,1207.62 1397.69,1207.59 1398.27,1207.53 1398.86,1207.48 1399.45,1210.14 1400.03,1208.8 1400.62,1208.51 1401.21,1209.86 1401.79,1209.56 1402.38,1208.36 1402.96,1207.11 1403.55,1207.06 1404.14,1205.69 1404.72,1208.58 1405.31,1207.13 1405.9,1209.89 1406.48,1209.92 1407.07,1210.89 1407.66,1210.61 1408.24,1209.13 1408.83,1210.39 1409.42,1211.4 1410,1211.15 1410.59,1208.37 1411.17,1209.52 1411.76,1208.14 1412.35,1210.51 1412.93,1209.01 1413.52,1207.55 1414.11,1205.11 1414.69,1205.16 1415.28,1209.19 1415.87,1209.3 1416.45,1208.04 1417.04,1206.64 1417.63,1205.04 1418.21,1206.59 1418.8,1206.72 1419.38,1204.11 1419.97,1204.41 1420.56,1204.49 1421.14,1204.53 1421.73,1204.4 1422.32,1204.71 1422.9,1204.86 1423.49,1210.25 1424.08,1206.38 1424.66,1205.17 1425.25,1206.54 1425.83,1206.59 1426.42,1210.59 1427.01,1207.53 1427.59,1208.95 1428.18,1210.52 1428.77,1210.42 1429.35,1208.83 1429.94,1208.3 1430.53,1208.34 1431.11,1208.35 1431.7,1210.71 1432.29,1211.73 1432.87,1213.04 1433.46,1212.84 1434.04,1215.46 1434.63,1215.31 1435.22,1216.43 1435.8,1217.24 1436.39,1218.01 1436.98,1218.66 1437.56,1216.8 1438.15,1216.46 1438.74,1213.42 1439.32,1215.42 1439.91,1216.35 1440.5,1219.82 1441.08,1215.37 1441.67,1213.31 1442.25,1214.21 1442.84,1211.32 1443.43,1209.83 1444.01,1209.65 1444.6,1210.89 1445.19,1209.14 1445.77,1204.89 1446.36,1205.04 1446.95,1207.7 1447.53,1208.92 1448.12,1205.97 1448.7,1205.88 1449.29,1205.96 1449.88,1200.82 1450.46,1198.23 1451.05,1198.59 1451.64,1200.42 1452.22,1204.63 1452.81,1204.92 1453.4,1203.66 1453.98,1202.59 1454.57,1204.41 1455.16,1207.25 1455.74,1208.34 1456.33,1205.63 1456.91,1205.68 1457.5,1202.93 1458.09,1203.23 1458.67,1202.18 1459.26,1200.95 1459.85,1203.87 1460.43,1204.24 1461.02,1201.89 1461.61,1200.68 1462.19,1199.86 1462.78,1200.51 1463.37,1202.06 1463.95,1202.22 1464.54,1202.19 1465.12,1202.48 1465.71,1204.09 1466.3,1204.33 1466.88,1203.25 1467.47,1200.73 1468.06,1202.4 1468.64,1202.5 1469.23,1201.33 1469.82,1201.51 1470.4,1201.91 1470.99,1202.12 1471.57,1202.19 1472.16,1203.25 1472.75,1202.18 1473.33,1201.07 1473.92,1202.97 1474.51,1204.58 1475.09,1203.36 1475.68,1206.18 1476.27,1204.78 1476.85,1205.21 1477.44,1205.11 1478.03,1205.53 1478.61,1205.71 1479.2,1205.59 1479.78,1205.77 1480.37,1205.95 1480.96,1207.28 1481.54,1207.33 1482.13,1205.87 1482.72,1205.93 1483.3,1207.09 1483.89,1205.2 1484.48,1201.24 1485.06,1201.73 1485.65,1199.31 1486.24,1200.9 1486.82,1202.38 1487.41,1200.16 1487.99,1197.9 1488.58,1199.57 1489.17,1199.84 1489.75,1200.2 1490.34,1203.16 1490.93,1203.48 1491.51,1202.56 1492.1,1201.38 1492.69,1204.31 1493.27,1205.89 1493.86,1208.32 1494.45,1211.93 1495.03,1210.33 1495.62,1210.44 1496.2,1208.96 1496.79,1211.72 1497.38,1211.58 1497.96,1214.12 1498.55,1213.76 1499.14,1211.86 1499.72,1210.13 1500.31,1211.31 1500.9,1212.44 1501.48,1211.13 1502.07,1209.46 1502.65,1210.77 1503.24,1210.8 1503.83,1210.64 1504.41,1208.03 1505,1205.19 1505.59,1203.46 1506.17,1204.02 1506.76,1205.84 1507.35,1203.27 1507.93,1206.32 1508.52,1207.83 1509.11,1205.02 1509.69,1203.91 1510.28,1202.98 1510.86,1200.47 1511.45,1202.42 1512.04,1202.65 1512.62,1204 1513.21,1204.15 1513.8,1204.38 1514.38,1208.62 1514.97,1208.52 1515.56,1213.82 1516.14,1212.12 1516.73,1213.31 1517.32,1215.67 1517.9,1214.02 1518.49,1212.38 1519.07,1210.91 1519.66,1206.73 1520.25,1205.64 1520.83,1207.19 1521.42,1204.21 1522.01,1203.08 1522.59,1203.53 1523.18,1205.5 1523.77,1202.83 1524.35,1201.79 1524.94,1200.78 1525.52,1202.29 1526.11,1202.49 1526.7,1205.55 1527.28,1206.87 1527.87,1205.47 1528.46,1203.08 1529.04,1203.34 1529.63,1203.46 1530.22,1204.87 1530.8,1203.47 1531.39,1206.44 1531.98,1207.64 1532.56,1206.17 1533.15,1206.32 1533.73,1203.61 1534.32,1206.55 1534.91,1206.92 1535.49,1207.09 1536.08,1206 1536.67,1204.62 1537.25,1207.09 1537.84,1209.95 1538.43,1212.32 1539.01,1210.83 1539.6,1207.92 1540.19,1207.65 1540.77,1206.06 1541.36,1206.01 1541.94,1208.65 1542.53,1207.22 1543.12,1207.36 1543.7,1206.2 1544.29,1208.97 1544.88,1207.77 1545.46,1208.95 1546.05,1213.95 1546.64,1211.18 1547.22,1210.74 1547.81,1210.22 1548.4,1211.27 1548.98,1212.28 1549.57,1212.12 1550.15,1211.84 1550.74,1215.53 1551.33,1217.71 1551.91,1217.1 1552.5,1216.68 1553.09,1214.94 1553.67,1214.79 1554.26,1212.82 1554.85,1212.41 1555.43,1211.99 1556.02,1213.15 1556.6,1214.32 1557.19,1216.83 1557.78,1214.91 1558.36,1214.66 1558.95,1213.15 1559.54,1212.84 1560.12,1210.99 1560.71,1210.89 1561.3,1210.6 1561.88,1209 1562.47,1209.35 1563.06,1210.71 1563.64,1211.73 1564.23,1211.56 1564.81,1213.89 1565.4,1212.42 1565.99,1213.41 1566.57,1212.99 1567.16,1212.66 1567.75,1209.44 1568.33,1206.5 1568.92,1206.39 1569.51,1207.9 1570.09,1207.72 1570.68,1205.02 1571.27,1203.84 1571.85,1206.43 1572.44,1203.69 1573.02,1203.76 1573.61,1202.78 1574.2,1203.24 1574.78,1203.49 1575.37,1201.25 1575.96,1201.41 1576.54,1204.34 1577.13,1201.64 1577.72,1200.51 1578.3,1196.7 1578.89,1197.08 1579.47,1200.15 1580.06,1203.33 1580.65,1204.87 1581.23,1205.79 1581.82,1206.33 1582.41,1203.67 1582.99,1203.83 1583.58,1205.52 1584.17,1206.81 1584.75,1209.56 1585.34,1210.54 1585.93,1211.32 1586.51,1211.08 1587.1,1209.29 1587.68,1207.53 1588.27,1207.35 1588.86,1204.43 1589.44,1201.88 1590.03,1202.18 1590.62,1201.18 1591.2,1202.63 1591.79,1204.02 1592.38,1206.63 1592.96,1208.08 1593.55,1211.87 1594.14,1210.4 1594.72,1208.92 1595.31,1211.27 1595.89,1208.62 1596.48,1209.76 1597.07,1210.78 1597.65,1210.67 1598.24,1208.99 1598.83,1205 1599.41,1206.48 1600,1209.03 1600.59,1208.69 1601.17,1209.96 1601.76,1210.1 1602.34,1209.91 1602.93,1206.98 1603.52,1206.91 1604.1,1204.39 1604.69,1201.81 1605.28,1202.32 1605.86,1201.21 1606.45,1202.93 1607.04,1201.91 1607.62,1203.48 1608.21,1205.21 1608.8,1204.53 1609.38,1206.17 1609.97,1206.39 1610.55,1206.73 1611.14,1205.68 1611.73,1204.64 1612.31,1203.34 1612.9,1204.9 1613.49,1202.23 1614.07,1202.43 1614.66,1205.27 1615.25,1204 1615.83,1204.18 1616.42,1202.96 1617.01,1201.98 1617.59,1204.98 1618.18,1205.09 1618.76,1203.82 1619.35,1206.59 1619.94,1205.14 1620.52,1206.6 1621.11,1208.02 1621.7,1208.2 1622.28,1206.57 1622.87,1201.12 1623.46,1200.15 1624.04,1202.82 1624.63,1205.55 1625.22,1205.65 1625.8,1205.54 1626.39,1205.67 1626.97,1208.53 1627.56,1209.91 1628.15,1208.02 1628.73,1207.6 1629.32,1207.61 1629.91,1203.56 1630.49,1203.65 1631.08,1203.94 1631.67,1205.35 1632.25,1206.66 1632.84,1207.93 1633.42,1203.5 1634.01,1203.57 1634.6,1199.74 1635.18,1196.24 1635.77,1195.64 1636.36,1196.26 1636.94,1198.15 1637.53,1198.98 1638.12,1199.5 1638.7,1198.38 1639.29,1202.87 1639.88,1204.31 1640.46,1205.94 1641.05,1204.8 1641.63,1204.93 1642.22,1205.02 1642.81,1205.32 1643.39,1204.32 1643.98,1203.3 1644.57,1200.75 1645.15,1199.79 1645.74,1201.61 1646.33,1204.32 1646.91,1204.39 1647.5,1204.49 1648.09,1203.4 1648.67,1203.44 1649.26,1202.44 1649.84,1206.64 1650.43,1205.49 1651.02,1208.61 1651.6,1209.87 1652.19,1210.96 1652.78,1212.07 1653.36,1212.89 1653.95,1212.91 1654.54,1212.51 1655.12,1208.22 1655.71,1207.88 1656.29,1209.09 1656.88,1207.7 1657.47,1203.57 1658.05,1206.32 1658.64,1205.01 1659.23,1203.7 1659.81,1203.67 1660.4,1203.82 1660.99,1204.1 1661.57,1205.73 1662.16,1208.17 1662.75,1210.57 1663.33,1209.01 1663.92,1210.23 1664.5,1212.7 1665.09,1211.05 1665.68,1212.14 1666.26,1211.96 1666.85,1211.74 1667.44,1211.95 1668.02,1211.65 1668.61,1211.64 1669.2,1211.58 1669.78,1212.7 1670.37,1212.31 1670.96,1213.34 1671.54,1214.38 1672.13,1213.91 1672.71,1213.79 1673.3,1213.59 1673.89,1214.66 1674.47,1212.89 1675.06,1209.97 1675.65,1208.73 1676.23,1210.15 1676.82,1213.76 1677.41,1214.6 1677.99,1212.92 1678.58,1212.32 1679.17,1211.83 1679.75,1211.53 1680.34,1212.53 1680.92,1213.44 1681.51,1206.66 1682.1,1206.67 1682.68,1205.37 1683.27,1208.02 1683.86,1206.74 1684.44,1205.16 1685.03,1203.94 1685.62,1202.77 1686.2,1200.09 1686.79,1203.01 1687.37,1204.53 1687.96,1206.11 1688.55,1207.35 1689.13,1208.61 1689.72,1207.03 1690.31,1209.56 1690.89,1208.31 1691.48,1208.29 1692.07,1205.75 1692.65,1203.21 1693.24,1207.35 1693.83,1207.43 1694.41,1204.77 1695,1205.01 1695.58,1206.44 1696.17,1206.35 1696.76,1206.38 1697.34,1205.07 1697.93,1203.86 1698.52,1203.99 1699.1,1208.24 1699.69,1207.05 1700.28,1206.88 1700.86,1205.58 1701.45,1205.66 1702.04,1203.04 1702.62,1204.53 1703.21,1204.66 1703.79,1204.76 1704.38,1204.59 1704.97,1204.93 1705.55,1205.02 1706.14,1203.74 1706.73,1203.9 1707.31,1203.91 1707.9,1202.64 1708.49,1202.68 1709.07,1201.55 1709.66,1200.67 1710.24,1198.06 1710.83,1198.45 1711.42,1198.86 1712,1198.33 1712.59,1201.46 1713.18,1199.02 1713.76,1201.05 1714.35,1200.06 1714.94,1201.59 1715.52,1205.62 1716.11,1204.13 1716.7,1204.34 1717.28,1205.94 1717.87,1207.27 1718.45,1207.08 1719.04,1206.99 1719.63,1207.01 1720.21,1209.53 1720.8,1205.52 1721.39,1206.99 1721.97,1210.77 1722.56,1210.49 1723.15,1211.61 1723.73,1211.23 1724.32,1208.24 1724.91,1206.93 1725.49,1208.42 1726.08,1210.77 1726.66,1207.86 1727.25,1205.14 1727.84,1202.72 1728.42,1202.9 1729.01,1203.12 1729.6,1201.86 1730.18,1200.77 1730.77,1199.59 1731.36,1198.53 1731.94,1199.09 1732.53,1199.6 1733.11,1199.73 1733.7,1199.97 1734.29,1197.51 1734.87,1197.84 1735.46,1199.86 1736.05,1199.28 1736.63,1199.84 1737.22,1201.27 1737.81,1201.72 1738.39,1203.57 1738.98,1205.21 1739.57,1204.18 1740.15,1205.77 1740.74,1205.88 1741.32,1206.01 1741.91,1207.41 1742.5,1204.57 1743.08,1204.85 1743.67,1201.96 1744.26,1201.21 1744.84,1201.49 1745.43,1203.07 1746.02,1207.57 1746.6,1205 1747.19,1205.07 1747.78,1202.46 1748.36,1201.6 1748.95,1204.69 1749.53,1201.91 1750.12,1203.69 1750.71,1205 1751.29,1206.5 1751.88,1206.22 1752.47,1206.44 1753.05,1206.56 1753.64,1205.5 1754.23,1205.98 1754.81,1204.96 1755.4,1203.8 1755.99,1206.79 1756.57,1211.19 1757.16,1211.37 1757.74,1211.25 1758.33,1210.11 1758.92,1210.11 1759.5,1210.27 1760.09,1213.74 1760.68,1213.59 1761.26,1213.21 1761.85,1210.16 1762.44,1210.03 1763.02,1209.85 1763.61,1211.05 1764.19,1211 1764.78,1212.16 1765.37,1214.75 1765.95,1212.77 1766.54,1212.35 1767.13,1212.01 1767.71,1214.29 1768.3,1212.62 1768.89,1212.31 1769.47,1211.01 1770.06,1211.97 1770.65,1211.64 1771.23,1211.24 1771.82,1208.23 1772.4,1206.84 1772.99,1204.19 1773.58,1206.98 1774.16,1206.95 1774.75,1208.2 1775.34,1209.48 1775.92,1209.31 1776.51,1210.6 1777.1,1209.02 1777.68,1209.78 1778.27,1208.54 1778.86,1211.23 1779.44,1212.28 1780.03,1213.21 1780.61,1212.97 1781.2,1210.23 1781.79,1211.33 1782.37,1212.2 1782.96,1211.85 1783.55,1212.93 1784.13,1210.05 1784.72,1211.18 1785.31,1210.68 1785.89,1211.64 1786.48,1212.77 1787.06,1212.62 1787.65,1210.98 1788.24,1212.06 1788.82,1213.11 1789.41,1214.26 1790,1211.24 1790.58,1210.96 1791.17,1213.25 1791.76,1212.83 1792.34,1212.5 1792.93,1210.79 1793.52,1213.12 1794.1,1212.97 1794.69,1209.95 1795.27,1211.27 1795.86,1210.91 1796.45,1212.02 1797.03,1212.98 1797.62,1211.51 1798.21,1211.14 1798.79,1210.82 1799.38,1211.87 1799.97,1211.31 1800.55,1208.34 1801.14,1208.22 1801.73,1205.63 1802.31,1205.78 1802.9,1208.34 1803.48,1205.62 1804.07,1207.28 1804.66,1208.5 1805.24,1208.49 1805.83,1209.76 1806.42,1208.04 1807,1207.66 1807.59,1206.35 1808.18,1204.97 1808.76,1206.14 1809.35,1204.81 1809.94,1204.98 1810.52,1205.08 1811.11,1200.01 1811.69,1198.92 1812.28,1202.1 1812.87,1203.64 1813.45,1202.33 1814.04,1201.12 1814.63,1201.32 1815.21,1201.53 1815.8,1201.75 1816.39,1201.94 1816.97,1200.89 1817.56,1198.64 1818.14,1200.6 1818.73,1201.1 1819.32,1205.47 1819.9,1202.88 1820.49,1205.86 1821.08,1204.45 1821.66,1201.99 1822.25,1202.06 1822.84,1202.15 1823.42,1203.63 1824.01,1203.83 1824.6,1203.97 1825.18,1202.88 1825.77,1204.51 1826.35,1205.76 1826.94,1206.77 1827.53,1205.21 1828.11,1206.6 1828.7,1209.44 1829.29,1207.74 1829.87,1208.93 1830.46,1207.62 1831.05,1207.46 1831.63,1211.7 1832.22,1213.94 1832.81,1212.38 1833.39,1214.82 1833.98,1217.09 1834.56,1216.72 1835.15,1216.28 1835.74,1215.51 1836.32,1217.49 1836.91,1218.29 1837.5,1217.38 1838.08,1218.29 1838.67,1217.95 1839.26,1217.58 1839.84,1217.21 1840.43,1216.49 1841.01,1213.26 1841.6,1214.24 1842.19,1215.13 1842.77,1213.33 1843.36,1211.49 1843.95,1212.46 1844.53,1213.2 1845.12,1212.85 1845.71,1209.73 1846.29,1210.8 1846.88,1209.12 1847.47,1210.35 1848.05,1210.2 1848.64,1214.15 1849.22,1214.77 1849.81,1214.63 1850.4,1210.37 1850.98,1210.06 1851.57,1210.15 1852.16,1208.95 1852.74,1208.9 1853.33,1208.45 1853.92,1209.94 1854.5,1208.63 1855.09,1207.13 1855.68,1207.32 1856.26,1203.22 1856.85,1200.55 1857.43,1201.96 1858.02,1203.57 1858.61,1203.51 1859.19,1201.95 1859.78,1202.34 1860.37,1202.72 1860.95,1201.83 1861.54,1204.84 1862.13,1207.6 1862.71,1206.43 1863.3,1209.09 1863.88,1209.36 1864.47,1209.07 1865.06,1208.74 1865.64,1210.04 1866.23,1208.46 1866.82,1208.19 1867.4,1207.82 1867.99,1209.13 1868.58,1208.97 1869.16,1210.07 1869.75,1208.39 1870.34,1207.09 1870.92,1207.06 1871.51,1208.29 1872.09,1209.57 1872.68,1213.53 1873.27,1210.48 1873.85,1210.36 1874.44,1211.52 1875.03,1211.47 1875.61,1209.86 1876.2,1211.06 1876.79,1215.94 1877.37,1215.53 1877.96,1216.39 1878.55,1217.12 1879.13,1216.63 1879.72,1218.59 1880.3,1212.59 1880.89,1212.48 1881.48,1213.68 1882.06,1209.44 1882.65,1209.19 1883.24,1211.71 1883.82,1213.06 1884.41,1212.95 1885,1212.81 1885.58,1208.47 1886.17,1211.19 1886.76,1209.57 1887.34,1210.44 1887.93,1207.78 1888.51,1206.42 1889.1,1206.63 1889.69,1206.79 1890.27,1205.33 1890.86,1201.53 1891.45,1204.59 1892.03,1205.98 1892.62,1204.79 1893.21,1203.63 1893.79,1206.44 1894.38,1205.25 1894.96,1204.98 1895.55,1206.38 1896.14,1207.76 1896.72,1206.05 1897.31,1202.3 1897.9,1202.84 1898.48,1201.6 1899.07,1200.58 1899.66,1200.81 1900.24,1199.77 1900.83,1200.24 1901.42,1200.57 1902,1199.36 1902.59,1202.61 1903.17,1203.29 1903.76,1204.95 1904.35,1206.38 1904.93,1206.34 1905.52,1206.57 1906.11,1206.63 1906.69,1202.56 1907.28,1202.7 1907.87,1201.67 1908.45,1202.05 1909.04,1202.48 1909.63,1206.68 1910.21,1206.54 1910.8,1208.08 1911.38,1206.81 1911.97,1206.77 1912.56,1204.25 1913.14,1205.78 1913.73,1204.65 1914.32,1203.2 1914.9,1203.47 1915.49,1203.45 1916.08,1205.14 1916.66,1203.9 1917.25,1204.04 1917.83,1202.73 1918.42,1201.72 1919.01,1203.37 1919.59,1204.71 1920.18,1204.93 1920.77,1205.11 1921.35,1203.67 1921.94,1205 1922.53,1206.51 1923.11,1206.68 1923.7,1205.58 1924.29,1203.99 1924.87,1204.23 1925.46,1202.93 1926.04,1204.63 1926.63,1206.28 1927.22,1206.61 1927.8,1206.46 1928.39,1206.47 1928.98,1207.87 1929.56,1209.37 1930.15,1209.19 1930.74,1207.84 1931.32,1209.1 1931.91,1208.66 1932.5,1210 1933.08,1211.45 1933.67,1213.9 1934.25,1214.98 1934.84,1210.56 1935.43,1209 1936.01,1214.02 1936.6,1214.78 1937.19,1214.23 1937.77,1211.05 1938.36,1209.71 1938.95,1209.62 1939.53,1208.11 1940.12,1207.06 1940.71,1205.86 1941.29,1207.22 1941.88,1204.66 1942.46,1202.17 1943.05,1201.15 1943.64,1199.95 1944.22,1199.16 1944.81,1197.07 1945.4,1197.49 1945.98,1196.57 1946.57,1196.98 1947.16,1194.92 1947.74,1191.71 1948.33,1193.83 1948.91,1195.93 1949.5,1198.09 1950.09,1198.63 1950.67,1199.19 1951.26,1200.59 1951.85,1201.13 1952.43,1198.95 1953.02,1198.29 1953.61,1197.23 1954.19,1196.31 1954.78,1198.16 1955.37,1197.45 1955.95,1196.58 1956.54,1195.71 1957.12,1197.8 1957.71,1198.38 1958.3,1196.32 1958.88,1197.17 1959.47,1200.36 1960.06,1201.88 1960.64,1204.54 1961.23,1205.62 1961.82,1205.66 1962.4,1207 1962.99,1209.58 1963.58,1208.09 1964.16,1206.77 1964.75,1208.16 1965.33,1206.85 1965.92,1205.88 1966.51,1207.25 1967.09,1208.57 1967.68,1208.58 1968.27,1209.98 1968.85,1208.52 1969.44,1211.1 1970.03,1211.02 1970.61,1210.68 1971.2,1210.68 1971.78,1210.67 1972.37,1211.85 1972.96,1213.02 1973.54,1214.18 1974.13,1212.8 1974.72,1212.38 1975.3,1214.67 1975.89,1210.45 1976.48,1209.12 1977.06,1208.94 1977.65,1207.42 1978.24,1204.73 1978.82,1204.98 1979.41,1206.18 1979.99,1206.41 1980.58,1201.21 1981.17,1204.14 1981.75,1204.29 1982.34,1205.82 1982.93,1205.89 1983.51,1204.83 1984.1,1204.96 1984.69,1205.08 1985.27,1204.13 1985.86,1207.16 1986.45,1206.14 1987.03,1206.16 1987.62,1204.75 1988.2,1204.69 1988.79,1205.96 1989.38,1207.41 1989.96,1204.91 1990.55,1207.5 1991.14,1207.7 1991.72,1208.04 1992.31,1209.58 1992.9,1207.91 1993.48,1207.73 1994.07,1207.53 1994.65,1207.31 1995.24,1208.52 1995.83,1208.42 1996.41,1209.81 1997,1211.02 1997.59,1208.26 1998.17,1206.86 1998.76,1205.23 1999.35,1206.65 1999.93,1205.08 2000.52,1207.56 2001.11,1206.16 2001.69,1206.2 2002.28,1206.04 2002.86,1207.37 2003.45,1206.12 2004.04,1204.88 2004.62,1206.33 2005.21,1207.53 2005.8,1206.38 2006.38,1209.3 2006.97,1211.74 2007.56,1212.88 2008.14,1213.69 2008.73,1214.59 2009.32,1215.47 2009.9,1214.97 2010.49,1215.63 2011.07,1216.78 2011.66,1219.03 2012.25,1219.97 2012.83,1218.04 2013.42,1216.24 2014.01,1216.85 2014.59,1218.82 2015.18,1218.44 2015.77,1220.56 2016.35,1221.23 2016.94,1221.76 2017.53,1219.6 2018.11,1217.21 2018.7,1216.6 2019.28,1217.18 2019.87,1215.19 2020.46,1214.91 2021.04,1211.96 2021.63,1212.62 2022.22,1214.92 2022.8,1210.44 2023.39,1206.43 2023.98,1205.15 2024.56,1207.55 2025.15,1206.29 2025.73,1206.29 2026.32,1206.45 2026.91,1206.53 2027.49,1205.38 2028.08,1204.26 2028.67,1205.61 2029.25,1204.02 2029.84,1206.94 2030.43,1205.61 2031.01,1204.51 2031.6,1207.28 2032.19,1205.84 2032.77,1206.1 2033.36,1204.85 2033.94,1207.49 2034.53,1207.49 2035.12,1208.74 2035.7,1206.19 2036.29,1206.16 2036.88,1206.27 2037.46,1203.66 2038.05,1202.42 2038.64,1201.3 2039.22,1204.1 2039.81,1205.6 2040.4,1205.51 2040.98,1204.12 2041.57,1202.71 2042.15,1200.24 2042.74,1201.87 2043.33,1200.44 2043.91,1200.93 2044.5,1198.43 2045.09,1198.67 2045.67,1197.77 2046.26,1197.22 2046.85,1197.37 2047.43,1197.67 2048.02,1198.13 2048.6,1199.69 2049.19,1198.97 2049.78,1200.56 2050.36,1202.2 2050.95,1202.41 2051.54,1204.24 2052.12,1205.63 2052.71,1204.24 2053.3,1204.43 2053.88,1206.01 2054.47,1205.83 2055.06,1207.16 2055.64,1207.02 2056.23,1208.58 2056.81,1208.66 2057.4,1208.31 2057.99,1209.5 2058.57,1209.35 2059.16,1210.6 2059.75,1207.87 2060.33,1207.88 2060.92,1210.76 2061.51,1209.42 2062.09,1209.23 2062.68,1207.94 2063.27,1209.3 2063.85,1210.59 2064.44,1212.66 2065.02,1216.12 2065.61,1214.62 2066.2,1212.96 2066.78,1212.62 2067.37,1212.21 2067.96,1211.94 2068.54,1211.47 2069.13,1213.98 2069.72,1213.54 2070.3,1211.87 2070.89,1211.59 2071.48,1211.16 2072.06,1212.48 2072.65,1210.61 2073.23,1210.6 2073.82,1209.17 2074.41,1207.84 2074.99,1207.38 2075.58,1202.15 2076.17,1201.29 2076.75,1201.54 2077.34,1204.49 2077.93,1201.75 2078.51,1203.37 2079.1,1196.93 2079.68,1196.05 2080.27,1196.47 2080.86,1198.04 2081.44,1200.1 2082.03,1198.15 2082.62,1200.02 2083.2,1200.28 2083.79,1199.51 2084.38,1198.73 2084.96,1199.41 2085.55,1199.94 2086.14,1200.5 2086.72,1202.29 2087.31,1199.82 2087.89,1202.91 2088.48,1204.17 2089.07,1203.06 2089.65,1203.07 2090.24,1203.37 2090.83,1206.15 2091.41,1206.14 2092,1206.19 2092.59,1203.53 2093.17,1202.27 2093.76,1203.52 2094.35,1203.92 2094.93,1202.91 2095.52,1203.16 2096.1,1203.3 2096.69,1202.02 2097.28,1202.46 2097.86,1201.21 2098.45,1198.48 2099.04,1199.1 2099.62,1197.89 2100.21,1198.37 2100.8,1200.32 2101.38,1199.55 2101.97,1199.71 2102.55,1201.15 2103.14,1201.64 2103.73,1203.42 2104.31,1206.27 2104.9,1206.11 2105.49,1204.81 2106.07,1203.32 2106.66,1204.63 2107.25,1207.2 2107.83,1207.3 2108.42,1205.9 2109.01,1207.24 2109.59,1207.42 2110.18,1207.36 2110.76,1207.34 2111.35,1203.18 2111.94,1203.56 2112.52,1202.22 2113.11,1202.71 2113.7,1202.95 2114.28,1200.26 2114.87,1201.88 2115.46,1200.93 2116.04,1201.3 2116.63,1200.38 2117.22,1202.04 2117.8,1202.3 2118.39,1203.98 2118.97,1204.33 2119.56,1203.19 2120.15,1203.09 2120.73,1204.79 2121.32,1204.9 2121.91,1203.63 2122.49,1204.07 2123.08,1206.62 2123.67,1202.66 2124.25,1201.56 2124.84,1203.27 2125.42,1207.83 2126.01,1206.46 2126.6,1205.19 2127.18,1206.98 2127.77,1208.27 2128.36,1210.99 2128.94,1212.23 2129.53,1209.27 2130.12,1207.6 2130.7,1208.98 2131.29,1210.27 2131.88,1209.06 2132.46,1210.5 2133.05,1211.94 2133.63,1209.3 2134.22,1207.7 2134.81,1203.55 2135.39,1203.36 2135.98,1203.59 2136.57,1202.47 2137.15,1202.63 2137.74,1204.4 2138.33,1207.48 2138.91,1207.53 2139.5,1200.98 2140.09,1204.11 2140.67,1205.36 2141.26,1205.21 2141.84,1205.44 2142.43,1205.59 2143.02,1206.99 2143.6,1209.82 2144.19,1211.3 2144.78,1212.55 2145.36,1212.29 2145.95,1209.36 2146.54,1207.94 2147.12,1207.96 2147.71,1209.13 2148.3,1207.7 2148.88,1207.81 2149.47,1206.72 2150.05,1204.29 2150.64,1205.66 2151.23,1208.45 2151.81,1209.39 2152.4,1209.28 2152.99,1208.97 2153.57,1207.63 2154.16,1207.59 2154.75,1205.99 2155.33,1205.87 2155.92,1207.28 2156.5,1208.56 2157.09,1211.16 2157.68,1212.26 2158.26,1213.57 \"/>\n<path clip-path=\"url(#clip172)\" d=\"M986.025 1207.52 L986.612 1207.52 L987.198 1207.52 L987.785 1207.52 L988.371 1207.52 L988.957 1207.52 L989.544 1207.52 L990.13 1207.52 L990.717 1207.52 L991.303 1207.52 L991.889 1207.52 L992.476 1207.52 L993.062 1207.52 L993.649 1207.52 L994.235 1207.52 L994.822 1207.52 L995.408 1207.52 L995.994 1207.52 L996.581 1207.52 L997.167 1207.52 L997.754 1207.52 L998.34 1207.52 L998.926 1207.52 L999.513 1207.52 L1000.1 1207.52 L1000.69 1207.52 L1001.27 1207.52 L1001.86 1207.52 L1002.44 1207.52 L1003.03 1207.52 L1003.62 1207.52 L1004.2 1207.52 L1004.79 1207.52 L1005.38 1207.52 L1005.96 1207.52 L1006.55 1207.52 L1007.14 1207.52 L1007.72 1207.52 L1008.31 1207.52 L1008.9 1207.52 L1009.48 1207.52 L1010.07 1207.52 L1010.65 1207.52 L1011.24 1207.52 L1011.83 1207.52 L1012.41 1207.52 L1013 1207.52 L1013.59 1207.52 L1014.17 1207.52 L1014.76 1207.52 L1015.35 1207.52 L1015.93 1207.52 L1016.52 1207.52 L1017.11 1207.52 L1017.69 1207.52 L1018.28 1207.52 L1018.86 1207.52 L1019.45 1207.52 L1020.04 1207.52 L1020.62 1207.52 L1021.21 1207.52 L1021.8 1207.52 L1022.38 1207.52 L1022.97 1207.52 L1023.56 1207.52 L1024.14 1207.52 L1024.73 1207.52 L1025.32 1207.52 L1025.9 1207.52 L1026.49 1207.52 L1027.07 1207.52 L1027.66 1207.52 L1028.25 1207.52 L1028.83 1207.52 L1029.42 1207.52 L1030.01 1207.52 L1030.59 1207.52 L1031.18 1207.52 L1031.77 1207.52 L1032.35 1207.52 L1032.94 1207.52 L1033.52 1207.52 L1034.11 1207.52 L1034.7 1207.52 L1035.28 1207.52 L1035.87 1207.52 L1036.46 1207.52 L1037.04 1207.52 L1037.63 1207.52 L1038.22 1207.52 L1038.8 1207.52 L1039.39 1207.52 L1039.98 1207.52 L1040.56 1207.52 L1041.15 1207.52 L1041.73 1207.52 L1042.32 1207.52 L1042.91 1207.52 L1043.49 1207.52 L1044.08 1207.52 L1044.67 1207.52 L1045.25 1207.52 L1045.84 1207.52 L1046.43 1207.52 L1047.01 1207.52 L1047.6 1207.52 L1048.19 1207.52 L1048.77 1207.52 L1049.36 1207.52 L1049.94 1207.52 L1050.53 1207.52 L1051.12 1207.52 L1051.7 1207.52 L1052.29 1207.52 L1052.88 1207.52 L1053.46 1207.52 L1054.05 1207.52 L1054.64 1207.52 L1055.22 1207.52 L1055.81 1207.52 L1056.39 1207.52 L1056.98 1207.52 L1057.57 1207.52 L1058.15 1207.52 L1058.74 1207.52 L1059.33 1207.52 L1059.91 1207.52 L1060.5 1207.52 L1061.09 1207.52 L1061.67 1207.52 L1062.26 1207.52 L1062.85 1207.52 L1063.43 1207.52 L1064.02 1207.52 L1064.6 1207.52 L1065.19 1207.52 L1065.78 1207.52 L1066.36 1207.52 L1066.95 1207.52 L1067.54 1207.52 L1068.12 1207.52 L1068.71 1207.52 L1069.3 1207.52 L1069.88 1207.52 L1070.47 1207.52 L1071.06 1207.52 L1071.64 1207.52 L1072.23 1207.52 L1072.81 1207.52 L1073.4 1207.52 L1073.99 1207.52 L1074.57 1207.52 L1075.16 1207.52 L1075.75 1207.52 L1076.33 1207.52 L1076.92 1207.52 L1077.51 1207.52 L1078.09 1207.52 L1078.68 1207.52 L1079.26 1207.52 L1079.85 1207.52 L1080.44 1207.52 L1081.02 1207.52 L1081.61 1207.52 L1082.2 1207.52 L1082.78 1207.52 L1083.37 1207.52 L1083.96 1207.52 L1084.54 1207.52 L1085.13 1207.52 L1085.72 1207.52 L1086.3 1207.52 L1086.89 1207.52 L1087.47 1207.52 L1088.06 1207.52 L1088.65 1207.52 L1089.23 1207.52 L1089.82 1207.52 L1090.41 1207.52 L1090.99 1207.52 L1091.58 1207.52 L1092.17 1207.52 L1092.75 1207.52 L1093.34 1207.52 L1093.93 1207.52 L1094.51 1207.52 L1095.1 1207.52 L1095.68 1207.52 L1096.27 1207.52 L1096.86 1207.52 L1097.44 1207.52 L1098.03 1207.52 L1098.62 1207.52 L1099.2 1207.52 L1099.79 1207.52 L1100.38 1207.52 L1100.96 1207.52 L1101.55 1207.52 L1102.14 1207.52 L1102.72 1207.52 L1103.31 1207.52 L1103.89 1207.52 L1104.48 1207.52 L1105.07 1207.52 L1105.65 1207.52 L1106.24 1207.52 L1106.83 1207.52 L1107.41 1207.52 L1108 1207.52 L1108.59 1207.52 L1109.17 1207.52 L1109.76 1207.52 L1110.34 1207.52 L1110.93 1207.52 L1111.52 1207.52 L1112.1 1207.52 L1112.69 1207.52 L1113.28 1207.52 L1113.86 1207.52 L1114.45 1207.52 L1115.04 1207.52 L1115.62 1207.52 L1116.21 1207.52 L1116.8 1207.52 L1117.38 1207.52 L1117.97 1207.52 L1118.55 1207.52 L1119.14 1207.52 L1119.73 1207.52 L1120.31 1207.52 L1120.9 1207.52 L1121.49 1207.52 L1122.07 1207.52 L1122.66 1207.52 L1123.25 1207.52 L1123.83 1207.52 L1124.42 1207.52 L1125.01 1207.52 L1125.59 1207.52 L1126.18 1207.52 L1126.76 1207.52 L1127.35 1207.52 L1127.94 1207.52 L1128.52 1207.52 L1129.11 1207.52 L1129.7 1207.52 L1130.28 1207.52 L1130.87 1207.52 L1131.46 1207.52 L1132.04 1207.52 L1132.63 1207.52 L1133.21 1207.52 L1133.8 1207.52 L1134.39 1207.52 L1134.97 1207.52 L1135.56 1207.52 L1136.15 1207.52 L1136.73 1207.52 L1137.32 1207.52 L1137.91 1207.52 L1138.49 1207.52 L1139.08 1207.52 L1139.67 1207.52 L1140.25 1207.52 L1140.84 1207.52 L1141.42 1207.52 L1142.01 1207.52 L1142.6 1207.52 L1143.18 1207.52 L1143.77 1207.52 L1144.36 1207.52 L1144.94 1207.52 L1145.53 1207.52 L1146.12 1207.52 L1146.7 1207.52 L1147.29 1207.52 L1147.88 1207.52 L1148.46 1207.52 L1149.05 1207.52 L1149.63 1207.52 L1150.22 1207.52 L1150.81 1207.52 L1151.39 1207.52 L1151.98 1207.52 L1152.57 1207.52 L1153.15 1207.52 L1153.74 1207.52 L1154.33 1207.52 L1154.91 1207.52 L1155.5 1207.52 L1156.09 1207.52 L1156.67 1207.52 L1157.26 1207.52 L1157.84 1207.52 L1158.43 1207.52 L1159.02 1207.52 L1159.6 1207.52 L1160.19 1207.52 L1160.78 1207.52 L1161.36 1207.52 L1161.95 1207.52 L1162.54 1207.52 L1163.12 1207.52 L1163.71 1207.52 L1164.29 1207.52 L1164.88 1207.52 L1165.47 1207.52 L1166.05 1207.52 L1166.64 1207.52 L1167.23 1207.52 L1167.81 1207.52 L1168.4 1207.52 L1168.99 1207.52 L1169.57 1207.52 L1170.16 1207.52 L1170.75 1207.52 L1171.33 1207.52 L1171.92 1207.52 L1172.5 1207.52 L1173.09 1207.52 L1173.68 1207.52 L1174.26 1207.52 L1174.85 1207.52 L1175.44 1207.52 L1176.02 1207.52 L1176.61 1207.52 L1177.2 1207.52 L1177.78 1207.52 L1178.37 1207.52 L1178.96 1207.52 L1179.54 1207.52 L1180.13 1207.52 L1180.71 1207.52 L1181.3 1207.52 L1181.89 1207.52 L1182.47 1207.52 L1183.06 1207.52 L1183.65 1207.52 L1184.23 1207.52 L1184.82 1207.52 L1185.41 1207.52 L1185.99 1207.52 L1186.58 1207.52 L1187.16 1207.52 L1187.75 1207.52 L1188.34 1207.52 L1188.92 1207.52 L1189.51 1207.52 L1190.1 1207.52 L1190.68 1207.52 L1191.27 1207.52 L1191.86 1207.52 L1192.44 1207.52 L1193.03 1207.52 L1193.62 1207.52 L1194.2 1207.52 L1194.79 1207.52 L1195.37 1207.52 L1195.96 1207.52 L1196.55 1207.52 L1197.13 1207.52 L1197.72 1207.52 L1198.31 1207.52 L1198.89 1207.52 L1199.48 1207.52 L1200.07 1207.52 L1200.65 1207.52 L1201.24 1207.52 L1201.83 1207.52 L1202.41 1207.52 L1203 1207.52 L1203.58 1207.52 L1204.17 1207.52 L1204.76 1207.52 L1205.34 1207.52 L1205.93 1207.52 L1206.52 1207.52 L1207.1 1207.52 L1207.69 1207.52 L1208.28 1207.52 L1208.86 1207.52 L1209.45 1207.52 L1210.03 1207.52 L1210.62 1207.52 L1211.21 1207.52 L1211.79 1207.52 L1212.38 1207.52 L1212.97 1207.52 L1213.55 1207.52 L1214.14 1207.52 L1214.73 1207.52 L1215.31 1207.52 L1215.9 1207.52 L1216.49 1207.52 L1217.07 1207.52 L1217.66 1207.52 L1218.24 1207.52 L1218.83 1207.52 L1219.42 1207.52 L1220 1207.52 L1220.59 1207.52 L1221.18 1207.52 L1221.76 1207.52 L1222.35 1207.52 L1222.94 1207.52 L1223.52 1207.52 L1224.11 1207.52 L1224.7 1207.52 L1225.28 1207.52 L1225.87 1207.52 L1226.45 1207.52 L1227.04 1207.52 L1227.63 1207.52 L1228.21 1207.52 L1228.8 1207.52 L1229.39 1207.52 L1229.97 1207.52 L1230.56 1207.52 L1231.15 1207.52 L1231.73 1207.52 L1232.32 1207.52 L1232.91 1207.52 L1233.49 1207.52 L1234.08 1207.52 L1234.66 1207.52 L1235.25 1207.52 L1235.84 1207.52 L1236.42 1207.52 L1237.01 1207.52 L1237.6 1207.52 L1238.18 1207.52 L1238.77 1207.52 L1239.36 1207.52 L1239.94 1207.52 L1240.53 1207.52 L1241.11 1207.52 L1241.7 1207.52 L1242.29 1207.52 L1242.87 1207.52 L1243.46 1207.52 L1244.05 1207.52 L1244.63 1207.52 L1245.22 1207.52 L1245.81 1207.52 L1246.39 1207.52 L1246.98 1207.52 L1247.57 1207.52 L1248.15 1207.52 L1248.74 1207.52 L1249.32 1207.52 L1249.91 1207.52 L1250.5 1207.52 L1251.08 1207.52 L1251.67 1207.52 L1252.26 1207.52 L1252.84 1207.52 L1253.43 1207.52 L1254.02 1207.52 L1254.6 1207.52 L1255.19 1207.52 L1255.78 1207.52 L1256.36 1207.52 L1256.95 1207.52 L1257.53 1207.52 L1258.12 1207.52 L1258.71 1207.52 L1259.29 1207.52 L1259.88 1207.52 L1260.47 1207.52 L1261.05 1207.52 L1261.64 1207.52 L1262.23 1207.52 L1262.81 1207.52 L1263.4 1207.52 L1263.98 1207.52 L1264.57 1207.52 L1265.16 1207.52 L1265.74 1207.52 L1266.33 1207.52 L1266.92 1207.52 L1267.5 1207.52 L1268.09 1207.52 L1268.68 1207.52 L1269.26 1207.52 L1269.85 1207.52 L1270.44 1207.52 L1271.02 1207.52 L1271.61 1207.52 L1272.19 1207.52 L1272.78 1207.52 L1273.37 1207.52 L1273.95 1207.52 L1274.54 1207.52 L1275.13 1207.52 L1275.71 1207.52 L1276.3 1207.52 L1276.89 1207.52 L1277.47 1207.52 L1278.06 1207.52 L1278.65 1207.52 L1279.23 1207.52 L1279.82 1207.52 L1280.4 1207.52 L1280.99 1207.52 L1281.58 1207.52 L1282.16 1207.52 L1282.75 1207.52 L1283.34 1207.52 L1283.92 1207.52 L1284.51 1207.52 L1285.1 1207.52 L1285.68 1207.52 L1286.27 1207.52 L1286.86 1207.52 L1287.44 1207.52 L1288.03 1207.52 L1288.61 1207.52 L1289.2 1207.52 L1289.79 1207.52 L1290.37 1207.52 L1290.96 1207.52 L1291.55 1207.52 L1292.13 1207.52 L1292.72 1207.52 L1293.31 1207.52 L1293.89 1207.52 L1294.48 1207.52 L1295.06 1207.52 L1295.65 1207.52 L1296.24 1207.52 L1296.82 1207.52 L1297.41 1207.52 L1298 1207.52 L1298.58 1207.52 L1299.17 1207.52 L1299.76 1207.52 L1300.34 1207.52 L1300.93 1207.52 L1301.52 1207.52 L1302.1 1207.52 L1302.69 1207.52 L1303.27 1207.52 L1303.86 1207.52 L1304.45 1207.52 L1305.03 1207.52 L1305.62 1207.52 L1306.21 1207.52 L1306.79 1207.52 L1307.38 1207.52 L1307.97 1207.52 L1308.55 1207.52 L1309.14 1207.52 L1309.73 1207.52 L1310.31 1207.52 L1310.9 1207.52 L1311.48 1207.52 L1312.07 1207.52 L1312.66 1207.52 L1313.24 1207.52 L1313.83 1207.52 L1314.42 1207.52 L1315 1207.52 L1315.59 1207.52 L1316.18 1207.52 L1316.76 1207.52 L1317.35 1207.52 L1317.93 1207.52 L1318.52 1207.52 L1319.11 1207.52 L1319.69 1207.52 L1320.28 1207.52 L1320.87 1207.52 L1321.45 1207.52 L1322.04 1207.52 L1322.63 1207.52 L1323.21 1207.52 L1323.8 1207.52 L1324.39 1207.52 L1324.97 1207.52 L1325.56 1207.52 L1326.14 1207.52 L1326.73 1207.52 L1327.32 1207.52 L1327.9 1207.52 L1328.49 1207.52 L1329.08 1207.52 L1329.66 1207.52 L1330.25 1207.52 L1330.84 1207.52 L1331.42 1207.52 L1332.01 1207.52 L1332.6 1207.52 L1333.18 1207.52 L1333.77 1207.52 L1334.35 1207.52 L1334.94 1207.52 L1335.53 1207.52 L1336.11 1207.52 L1336.7 1207.52 L1337.29 1207.52 L1337.87 1207.52 L1338.46 1207.52 L1339.05 1207.52 L1339.63 1207.52 L1340.22 1207.52 L1340.8 1207.52 L1341.39 1207.52 L1341.98 1207.52 L1342.56 1207.52 L1343.15 1207.52 L1343.74 1207.52 L1344.32 1207.52 L1344.91 1207.52 L1345.5 1207.52 L1346.08 1207.52 L1346.67 1207.52 L1347.26 1207.52 L1347.84 1207.52 L1348.43 1207.52 L1349.01 1207.52 L1349.6 1207.52 L1350.19 1207.52 L1350.77 1207.52 L1351.36 1207.52 L1351.95 1207.52 L1352.53 1207.52 L1353.12 1207.52 L1353.71 1207.52 L1354.29 1207.52 L1354.88 1207.52 L1355.47 1207.52 L1356.05 1207.52 L1356.64 1207.52 L1357.22 1207.52 L1357.81 1207.52 L1358.4 1207.52 L1358.98 1207.52 L1359.57 1207.52 L1360.16 1207.52 L1360.74 1207.52 L1361.33 1207.52 L1361.92 1207.52 L1362.5 1207.52 L1363.09 1207.52 L1363.68 1207.52 L1364.26 1207.52 L1364.85 1207.52 L1365.43 1207.52 L1366.02 1207.52 L1366.61 1207.52 L1367.19 1207.52 L1367.78 1207.52 L1368.37 1207.52 L1368.95 1207.52 L1369.54 1207.52 L1370.13 1207.52 L1370.71 1207.52 L1371.3 1207.52 L1371.88 1207.52 L1372.47 1207.52 L1373.06 1207.52 L1373.64 1207.52 L1374.23 1207.52 L1374.82 1207.52 L1375.4 1207.52 L1375.99 1207.52 L1376.58 1207.52 L1377.16 1207.52 L1377.75 1207.52 L1378.34 1207.52 L1378.92 1207.52 L1379.51 1207.52 L1380.09 1207.52 L1380.68 1207.52 L1381.27 1207.52 L1381.85 1207.52 L1382.44 1207.52 L1383.03 1207.52 L1383.61 1207.52 L1384.2 1207.52 L1384.79 1207.52 L1385.37 1207.52 L1385.96 1207.52 L1386.55 1207.52 L1387.13 1207.52 L1387.72 1207.52 L1388.3 1207.52 L1388.89 1207.52 L1389.48 1207.52 L1390.06 1207.52 L1390.65 1207.52 L1391.24 1207.52 L1391.82 1207.52 L1392.41 1207.52 L1393 1207.52 L1393.58 1207.52 L1394.17 1207.52 L1394.75 1207.52 L1395.34 1207.52 L1395.93 1207.52 L1396.51 1207.52 L1397.1 1207.52 L1397.69 1207.52 L1398.27 1207.52 L1398.86 1207.52 L1399.45 1207.52 L1400.03 1207.52 L1400.62 1207.52 L1401.21 1207.52 L1401.79 1207.52 L1402.38 1207.52 L1402.96 1207.52 L1403.55 1207.52 L1404.14 1207.52 L1404.72 1207.52 L1405.31 1207.52 L1405.9 1207.52 L1406.48 1207.52 L1407.07 1207.52 L1407.66 1207.52 L1408.24 1207.52 L1408.83 1207.52 L1409.42 1207.52 L1410 1207.52 L1410.59 1207.52 L1411.17 1207.52 L1411.76 1207.52 L1412.35 1207.52 L1412.93 1207.52 L1413.52 1207.52 L1414.11 1207.52 L1414.69 1207.52 L1415.28 1207.52 L1415.87 1207.52 L1416.45 1207.52 L1417.04 1207.52 L1417.63 1207.52 L1418.21 1207.52 L1418.8 1207.52 L1419.38 1207.52 L1419.97 1207.52 L1420.56 1207.52 L1421.14 1207.52 L1421.73 1207.52 L1422.32 1207.52 L1422.9 1207.52 L1423.49 1207.52 L1424.08 1207.52 L1424.66 1207.52 L1425.25 1207.52 L1425.83 1207.52 L1426.42 1207.52 L1427.01 1207.52 L1427.59 1207.52 L1428.18 1207.52 L1428.77 1207.52 L1429.35 1207.52 L1429.94 1207.52 L1430.53 1207.52 L1431.11 1207.52 L1431.7 1207.52 L1432.29 1207.52 L1432.87 1207.52 L1433.46 1207.52 L1434.04 1207.52 L1434.63 1207.52 L1435.22 1207.52 L1435.8 1207.52 L1436.39 1207.52 L1436.98 1207.52 L1437.56 1207.52 L1438.15 1207.52 L1438.74 1207.52 L1439.32 1207.52 L1439.91 1207.52 L1440.5 1207.52 L1441.08 1207.52 L1441.67 1207.52 L1442.25 1207.52 L1442.84 1207.52 L1443.43 1207.52 L1444.01 1207.52 L1444.6 1207.52 L1445.19 1207.52 L1445.77 1207.52 L1446.36 1207.52 L1446.95 1207.52 L1447.53 1207.52 L1448.12 1207.52 L1448.7 1207.52 L1449.29 1207.52 L1449.88 1207.52 L1450.46 1207.52 L1451.05 1207.52 L1451.64 1207.52 L1452.22 1207.52 L1452.81 1207.52 L1453.4 1207.52 L1453.98 1207.52 L1454.57 1207.52 L1455.16 1207.52 L1455.74 1207.52 L1456.33 1207.52 L1456.91 1207.52 L1457.5 1207.52 L1458.09 1207.52 L1458.67 1207.52 L1459.26 1207.52 L1459.85 1207.52 L1460.43 1207.52 L1461.02 1207.52 L1461.61 1207.52 L1462.19 1207.52 L1462.78 1207.52 L1463.37 1207.52 L1463.95 1207.52 L1464.54 1207.52 L1465.12 1207.52 L1465.71 1207.52 L1466.3 1207.52 L1466.88 1207.52 L1467.47 1207.52 L1468.06 1207.52 L1468.64 1207.52 L1469.23 1207.52 L1469.82 1207.52 L1470.4 1207.52 L1470.99 1207.52 L1471.57 1207.52 L1472.16 1207.52 L1472.75 1207.52 L1473.33 1207.52 L1473.92 1207.52 L1474.51 1207.52 L1475.09 1207.52 L1475.68 1207.52 L1476.27 1207.52 L1476.85 1207.52 L1477.44 1207.52 L1478.03 1207.52 L1478.61 1207.52 L1479.2 1207.52 L1479.78 1207.52 L1480.37 1207.52 L1480.96 1207.52 L1481.54 1207.52 L1482.13 1207.52 L1482.72 1207.52 L1483.3 1207.52 L1483.89 1207.52 L1484.48 1207.52 L1485.06 1207.52 L1485.65 1207.52 L1486.24 1207.52 L1486.82 1207.52 L1487.41 1207.52 L1487.99 1207.52 L1488.58 1207.52 L1489.17 1207.52 L1489.75 1207.52 L1490.34 1207.52 L1490.93 1207.52 L1491.51 1207.52 L1492.1 1207.52 L1492.69 1207.52 L1493.27 1207.52 L1493.86 1207.52 L1494.45 1207.52 L1495.03 1207.52 L1495.62 1207.52 L1496.2 1207.52 L1496.79 1207.52 L1497.38 1207.52 L1497.96 1207.52 L1498.55 1207.52 L1499.14 1207.52 L1499.72 1207.52 L1500.31 1207.52 L1500.9 1207.52 L1501.48 1207.52 L1502.07 1207.52 L1502.65 1207.52 L1503.24 1207.52 L1503.83 1207.52 L1504.41 1207.52 L1505 1207.52 L1505.59 1207.52 L1506.17 1207.52 L1506.76 1207.52 L1507.35 1207.52 L1507.93 1207.52 L1508.52 1207.52 L1509.11 1207.52 L1509.69 1207.52 L1510.28 1207.52 L1510.86 1207.52 L1511.45 1207.52 L1512.04 1207.52 L1512.62 1207.52 L1513.21 1207.52 L1513.8 1207.52 L1514.38 1207.52 L1514.97 1207.52 L1515.56 1207.52 L1516.14 1207.52 L1516.73 1207.52 L1517.32 1207.52 L1517.9 1207.52 L1518.49 1207.52 L1519.07 1207.52 L1519.66 1207.52 L1520.25 1207.52 L1520.83 1207.52 L1521.42 1207.52 L1522.01 1207.52 L1522.59 1207.52 L1523.18 1207.52 L1523.77 1207.52 L1524.35 1207.52 L1524.94 1207.52 L1525.52 1207.52 L1526.11 1207.52 L1526.7 1207.52 L1527.28 1207.52 L1527.87 1207.52 L1528.46 1207.52 L1529.04 1207.52 L1529.63 1207.52 L1530.22 1207.52 L1530.8 1207.52 L1531.39 1207.52 L1531.98 1207.52 L1532.56 1207.52 L1533.15 1207.52 L1533.73 1207.52 L1534.32 1207.52 L1534.91 1207.52 L1535.49 1207.52 L1536.08 1207.52 L1536.67 1207.52 L1537.25 1207.52 L1537.84 1207.52 L1538.43 1207.52 L1539.01 1207.52 L1539.6 1207.52 L1540.19 1207.52 L1540.77 1207.52 L1541.36 1207.52 L1541.94 1207.52 L1542.53 1207.52 L1543.12 1207.52 L1543.7 1207.52 L1544.29 1207.52 L1544.88 1207.52 L1545.46 1207.52 L1546.05 1207.52 L1546.64 1207.52 L1547.22 1207.52 L1547.81 1207.52 L1548.4 1207.52 L1548.98 1207.52 L1549.57 1207.52 L1550.15 1207.52 L1550.74 1207.52 L1551.33 1207.52 L1551.91 1207.52 L1552.5 1207.52 L1553.09 1207.52 L1553.67 1207.52 L1554.26 1207.52 L1554.85 1207.52 L1555.43 1207.52 L1556.02 1207.52 L1556.6 1207.52 L1557.19 1207.52 L1557.78 1207.52 L1558.36 1207.52 L1558.95 1207.52 L1559.54 1207.52 L1560.12 1207.52 L1560.71 1207.52 L1561.3 1207.52 L1561.88 1207.52 L1562.47 1207.52 L1563.06 1207.52 L1563.64 1207.52 L1564.23 1207.52 L1564.81 1207.52 L1565.4 1207.52 L1565.99 1207.52 L1566.57 1207.52 L1567.16 1207.52 L1567.75 1207.52 L1568.33 1207.52 L1568.92 1207.52 L1569.51 1207.52 L1570.09 1207.52 L1570.68 1207.52 L1571.27 1207.52 L1571.85 1207.52 L1572.44 1207.52 L1573.02 1207.52 L1573.61 1207.52 L1574.2 1207.52 L1574.78 1207.52 L1575.37 1207.52 L1575.96 1207.52 L1576.54 1207.52 L1577.13 1207.52 L1577.72 1207.52 L1578.3 1207.52 L1578.89 1207.52 L1579.47 1207.52 L1580.06 1207.52 L1580.65 1207.52 L1581.23 1207.52 L1581.82 1207.52 L1582.41 1207.52 L1582.99 1207.52 L1583.58 1207.52 L1584.17 1207.52 L1584.75 1207.52 L1585.34 1207.52 L1585.93 1207.52 L1586.51 1207.52 L1587.1 1207.52 L1587.68 1207.52 L1588.27 1207.52 L1588.86 1207.52 L1589.44 1207.52 L1590.03 1207.52 L1590.62 1207.52 L1591.2 1207.52 L1591.79 1207.52 L1592.38 1207.52 L1592.96 1207.52 L1593.55 1207.52 L1594.14 1207.52 L1594.72 1207.52 L1595.31 1207.52 L1595.89 1207.52 L1596.48 1207.52 L1597.07 1207.52 L1597.65 1207.52 L1598.24 1207.52 L1598.83 1207.52 L1599.41 1207.52 L1600 1207.52 L1600.59 1207.52 L1601.17 1207.52 L1601.76 1207.52 L1602.34 1207.52 L1602.93 1207.52 L1603.52 1207.52 L1604.1 1207.52 L1604.69 1207.52 L1605.28 1207.52 L1605.86 1207.52 L1606.45 1207.52 L1607.04 1207.52 L1607.62 1207.52 L1608.21 1207.52 L1608.8 1207.52 L1609.38 1207.52 L1609.97 1207.52 L1610.55 1207.52 L1611.14 1207.52 L1611.73 1207.52 L1612.31 1207.52 L1612.9 1207.52 L1613.49 1207.52 L1614.07 1207.52 L1614.66 1207.52 L1615.25 1207.52 L1615.83 1207.52 L1616.42 1207.52 L1617.01 1207.52 L1617.59 1207.52 L1618.18 1207.52 L1618.76 1207.52 L1619.35 1207.52 L1619.94 1207.52 L1620.52 1207.52 L1621.11 1207.52 L1621.7 1207.52 L1622.28 1207.52 L1622.87 1207.52 L1623.46 1207.52 L1624.04 1207.52 L1624.63 1207.52 L1625.22 1207.52 L1625.8 1207.52 L1626.39 1207.52 L1626.97 1207.52 L1627.56 1207.52 L1628.15 1207.52 L1628.73 1207.52 L1629.32 1207.52 L1629.91 1207.52 L1630.49 1207.52 L1631.08 1207.52 L1631.67 1207.52 L1632.25 1207.52 L1632.84 1207.52 L1633.42 1207.52 L1634.01 1207.52 L1634.6 1207.52 L1635.18 1207.52 L1635.77 1207.52 L1636.36 1207.52 L1636.94 1207.52 L1637.53 1207.52 L1638.12 1207.52 L1638.7 1207.52 L1639.29 1207.52 L1639.88 1207.52 L1640.46 1207.52 L1641.05 1207.52 L1641.63 1207.52 L1642.22 1207.52 L1642.81 1207.52 L1643.39 1207.52 L1643.98 1207.52 L1644.57 1207.52 L1645.15 1207.52 L1645.74 1207.52 L1646.33 1207.52 L1646.91 1207.52 L1647.5 1207.52 L1648.09 1207.52 L1648.67 1207.52 L1649.26 1207.52 L1649.84 1207.52 L1650.43 1207.52 L1651.02 1207.52 L1651.6 1207.52 L1652.19 1207.52 L1652.78 1207.52 L1653.36 1207.52 L1653.95 1207.52 L1654.54 1207.52 L1655.12 1207.52 L1655.71 1207.52 L1656.29 1207.52 L1656.88 1207.52 L1657.47 1207.52 L1658.05 1207.52 L1658.64 1207.52 L1659.23 1207.52 L1659.81 1207.52 L1660.4 1207.52 L1660.99 1207.52 L1661.57 1207.52 L1662.16 1207.52 L1662.75 1207.52 L1663.33 1207.52 L1663.92 1207.52 L1664.5 1207.52 L1665.09 1207.52 L1665.68 1207.52 L1666.26 1207.52 L1666.85 1207.52 L1667.44 1207.52 L1668.02 1207.52 L1668.61 1207.52 L1669.2 1207.52 L1669.78 1207.52 L1670.37 1207.52 L1670.96 1207.52 L1671.54 1207.52 L1672.13 1207.52 L1672.71 1207.52 L1673.3 1207.52 L1673.89 1207.52 L1674.47 1207.52 L1675.06 1207.52 L1675.65 1207.52 L1676.23 1207.52 L1676.82 1207.52 L1677.41 1207.52 L1677.99 1207.52 L1678.58 1207.52 L1679.17 1207.52 L1679.75 1207.52 L1680.34 1207.52 L1680.92 1207.52 L1681.51 1207.52 L1682.1 1207.52 L1682.68 1207.52 L1683.27 1207.52 L1683.86 1207.52 L1684.44 1207.52 L1685.03 1207.52 L1685.62 1207.52 L1686.2 1207.52 L1686.79 1207.52 L1687.37 1207.52 L1687.96 1207.52 L1688.55 1207.52 L1689.13 1207.52 L1689.72 1207.52 L1690.31 1207.52 L1690.89 1207.52 L1691.48 1207.52 L1692.07 1207.52 L1692.65 1207.52 L1693.24 1207.52 L1693.83 1207.52 L1694.41 1207.52 L1695 1207.52 L1695.58 1207.52 L1696.17 1207.52 L1696.76 1207.52 L1697.34 1207.52 L1697.93 1207.52 L1698.52 1207.52 L1699.1 1207.52 L1699.69 1207.52 L1700.28 1207.52 L1700.86 1207.52 L1701.45 1207.52 L1702.04 1207.52 L1702.62 1207.52 L1703.21 1207.52 L1703.79 1207.52 L1704.38 1207.52 L1704.97 1207.52 L1705.55 1207.52 L1706.14 1207.52 L1706.73 1207.52 L1707.31 1207.52 L1707.9 1207.52 L1708.49 1207.52 L1709.07 1207.52 L1709.66 1207.52 L1710.24 1207.52 L1710.83 1207.52 L1711.42 1207.52 L1712 1207.52 L1712.59 1207.52 L1713.18 1207.52 L1713.76 1207.52 L1714.35 1207.52 L1714.94 1207.52 L1715.52 1207.52 L1716.11 1207.52 L1716.7 1207.52 L1717.28 1207.52 L1717.87 1207.52 L1718.45 1207.52 L1719.04 1207.52 L1719.63 1207.52 L1720.21 1207.52 L1720.8 1207.52 L1721.39 1207.52 L1721.97 1207.52 L1722.56 1207.52 L1723.15 1207.52 L1723.73 1207.52 L1724.32 1207.52 L1724.91 1207.52 L1725.49 1207.52 L1726.08 1207.52 L1726.66 1207.52 L1727.25 1207.52 L1727.84 1207.52 L1728.42 1207.52 L1729.01 1207.52 L1729.6 1207.52 L1730.18 1207.52 L1730.77 1207.52 L1731.36 1207.52 L1731.94 1207.52 L1732.53 1207.52 L1733.11 1207.52 L1733.7 1207.52 L1734.29 1207.52 L1734.87 1207.52 L1735.46 1207.52 L1736.05 1207.52 L1736.63 1207.52 L1737.22 1207.52 L1737.81 1207.52 L1738.39 1207.52 L1738.98 1207.52 L1739.57 1207.52 L1740.15 1207.52 L1740.74 1207.52 L1741.32 1207.52 L1741.91 1207.52 L1742.5 1207.52 L1743.08 1207.52 L1743.67 1207.52 L1744.26 1207.52 L1744.84 1207.52 L1745.43 1207.52 L1746.02 1207.52 L1746.6 1207.52 L1747.19 1207.52 L1747.78 1207.52 L1748.36 1207.52 L1748.95 1207.52 L1749.53 1207.52 L1750.12 1207.52 L1750.71 1207.52 L1751.29 1207.52 L1751.88 1207.52 L1752.47 1207.52 L1753.05 1207.52 L1753.64 1207.52 L1754.23 1207.52 L1754.81 1207.52 L1755.4 1207.52 L1755.99 1207.52 L1756.57 1207.52 L1757.16 1207.52 L1757.74 1207.52 L1758.33 1207.52 L1758.92 1207.52 L1759.5 1207.52 L1760.09 1207.52 L1760.68 1207.52 L1761.26 1207.52 L1761.85 1207.52 L1762.44 1207.52 L1763.02 1207.52 L1763.61 1207.52 L1764.19 1207.52 L1764.78 1207.52 L1765.37 1207.52 L1765.95 1207.52 L1766.54 1207.52 L1767.13 1207.52 L1767.71 1207.52 L1768.3 1207.52 L1768.89 1207.52 L1769.47 1207.52 L1770.06 1207.52 L1770.65 1207.52 L1771.23 1207.52 L1771.82 1207.52 L1772.4 1207.52 L1772.99 1207.52 L1773.58 1207.52 L1774.16 1207.52 L1774.75 1207.52 L1775.34 1207.52 L1775.92 1207.52 L1776.51 1207.52 L1777.1 1207.52 L1777.68 1207.52 L1778.27 1207.52 L1778.86 1207.52 L1779.44 1207.52 L1780.03 1207.52 L1780.61 1207.52 L1781.2 1207.52 L1781.79 1207.52 L1782.37 1207.52 L1782.96 1207.52 L1783.55 1207.52 L1784.13 1207.52 L1784.72 1207.52 L1785.31 1207.52 L1785.89 1207.52 L1786.48 1207.52 L1787.06 1207.52 L1787.65 1207.52 L1788.24 1207.52 L1788.82 1207.52 L1789.41 1207.52 L1790 1207.52 L1790.58 1207.52 L1791.17 1207.52 L1791.76 1207.52 L1792.34 1207.52 L1792.93 1207.52 L1793.52 1207.52 L1794.1 1207.52 L1794.69 1207.52 L1795.27 1207.52 L1795.86 1207.52 L1796.45 1207.52 L1797.03 1207.52 L1797.62 1207.52 L1798.21 1207.52 L1798.79 1207.52 L1799.38 1207.52 L1799.97 1207.52 L1800.55 1207.52 L1801.14 1207.52 L1801.73 1207.52 L1802.31 1207.52 L1802.9 1207.52 L1803.48 1207.52 L1804.07 1207.52 L1804.66 1207.52 L1805.24 1207.52 L1805.83 1207.52 L1806.42 1207.52 L1807 1207.52 L1807.59 1207.52 L1808.18 1207.52 L1808.76 1207.52 L1809.35 1207.52 L1809.94 1207.52 L1810.52 1207.52 L1811.11 1207.52 L1811.69 1207.52 L1812.28 1207.52 L1812.87 1207.52 L1813.45 1207.52 L1814.04 1207.52 L1814.63 1207.52 L1815.21 1207.52 L1815.8 1207.52 L1816.39 1207.52 L1816.97 1207.52 L1817.56 1207.52 L1818.14 1207.52 L1818.73 1207.52 L1819.32 1207.52 L1819.9 1207.52 L1820.49 1207.52 L1821.08 1207.52 L1821.66 1207.52 L1822.25 1207.52 L1822.84 1207.52 L1823.42 1207.52 L1824.01 1207.52 L1824.6 1207.52 L1825.18 1207.52 L1825.77 1207.52 L1826.35 1207.52 L1826.94 1207.52 L1827.53 1207.52 L1828.11 1207.52 L1828.7 1207.52 L1829.29 1207.52 L1829.87 1207.52 L1830.46 1207.52 L1831.05 1207.52 L1831.63 1207.52 L1832.22 1207.52 L1832.81 1207.52 L1833.39 1207.52 L1833.98 1207.52 L1834.56 1207.52 L1835.15 1207.52 L1835.74 1207.52 L1836.32 1207.52 L1836.91 1207.52 L1837.5 1207.52 L1838.08 1207.52 L1838.67 1207.52 L1839.26 1207.52 L1839.84 1207.52 L1840.43 1207.52 L1841.01 1207.52 L1841.6 1207.52 L1842.19 1207.52 L1842.77 1207.52 L1843.36 1207.52 L1843.95 1207.52 L1844.53 1207.52 L1845.12 1207.52 L1845.71 1207.52 L1846.29 1207.52 L1846.88 1207.52 L1847.47 1207.52 L1848.05 1207.52 L1848.64 1207.52 L1849.22 1207.52 L1849.81 1207.52 L1850.4 1207.52 L1850.98 1207.52 L1851.57 1207.52 L1852.16 1207.52 L1852.74 1207.52 L1853.33 1207.52 L1853.92 1207.52 L1854.5 1207.52 L1855.09 1207.52 L1855.68 1207.52 L1856.26 1207.52 L1856.85 1207.52 L1857.43 1207.52 L1858.02 1207.52 L1858.61 1207.52 L1859.19 1207.52 L1859.78 1207.52 L1860.37 1207.52 L1860.95 1207.52 L1861.54 1207.52 L1862.13 1207.52 L1862.71 1207.52 L1863.3 1207.52 L1863.88 1207.52 L1864.47 1207.52 L1865.06 1207.52 L1865.64 1207.52 L1866.23 1207.52 L1866.82 1207.52 L1867.4 1207.52 L1867.99 1207.52 L1868.58 1207.52 L1869.16 1207.52 L1869.75 1207.52 L1870.34 1207.52 L1870.92 1207.52 L1871.51 1207.52 L1872.09 1207.52 L1872.68 1207.52 L1873.27 1207.52 L1873.85 1207.52 L1874.44 1207.52 L1875.03 1207.52 L1875.61 1207.52 L1876.2 1207.52 L1876.79 1207.52 L1877.37 1207.52 L1877.96 1207.52 L1878.55 1207.52 L1879.13 1207.52 L1879.72 1207.52 L1880.3 1207.52 L1880.89 1207.52 L1881.48 1207.52 L1882.06 1207.52 L1882.65 1207.52 L1883.24 1207.52 L1883.82 1207.52 L1884.41 1207.52 L1885 1207.52 L1885.58 1207.52 L1886.17 1207.52 L1886.76 1207.52 L1887.34 1207.52 L1887.93 1207.52 L1888.51 1207.52 L1889.1 1207.52 L1889.69 1207.52 L1890.27 1207.52 L1890.86 1207.52 L1891.45 1207.52 L1892.03 1207.52 L1892.62 1207.52 L1893.21 1207.52 L1893.79 1207.52 L1894.38 1207.52 L1894.96 1207.52 L1895.55 1207.52 L1896.14 1207.52 L1896.72 1207.52 L1897.31 1207.52 L1897.9 1207.52 L1898.48 1207.52 L1899.07 1207.52 L1899.66 1207.52 L1900.24 1207.52 L1900.83 1207.52 L1901.42 1207.52 L1902 1207.52 L1902.59 1207.52 L1903.17 1207.52 L1903.76 1207.52 L1904.35 1207.52 L1904.93 1207.52 L1905.52 1207.52 L1906.11 1207.52 L1906.69 1207.52 L1907.28 1207.52 L1907.87 1207.52 L1908.45 1207.52 L1909.04 1207.52 L1909.63 1207.52 L1910.21 1207.52 L1910.8 1207.52 L1911.38 1207.52 L1911.97 1207.52 L1912.56 1207.52 L1913.14 1207.52 L1913.73 1207.52 L1914.32 1207.52 L1914.9 1207.52 L1915.49 1207.52 L1916.08 1207.52 L1916.66 1207.52 L1917.25 1207.52 L1917.83 1207.52 L1918.42 1207.52 L1919.01 1207.52 L1919.59 1207.52 L1920.18 1207.52 L1920.77 1207.52 L1921.35 1207.52 L1921.94 1207.52 L1922.53 1207.52 L1923.11 1207.52 L1923.7 1207.52 L1924.29 1207.52 L1924.87 1207.52 L1925.46 1207.52 L1926.04 1207.52 L1926.63 1207.52 L1927.22 1207.52 L1927.8 1207.52 L1928.39 1207.52 L1928.98 1207.52 L1929.56 1207.52 L1930.15 1207.52 L1930.74 1207.52 L1931.32 1207.52 L1931.91 1207.52 L1932.5 1207.52 L1933.08 1207.52 L1933.67 1207.52 L1934.25 1207.52 L1934.84 1207.52 L1935.43 1207.52 L1936.01 1207.52 L1936.6 1207.52 L1937.19 1207.52 L1937.77 1207.52 L1938.36 1207.52 L1938.95 1207.52 L1939.53 1207.52 L1940.12 1207.52 L1940.71 1207.52 L1941.29 1207.52 L1941.88 1207.52 L1942.46 1207.52 L1943.05 1207.52 L1943.64 1207.52 L1944.22 1207.52 L1944.81 1207.52 L1945.4 1207.52 L1945.98 1207.52 L1946.57 1207.52 L1947.16 1207.52 L1947.74 1207.52 L1948.33 1207.52 L1948.91 1207.52 L1949.5 1207.52 L1950.09 1207.52 L1950.67 1207.52 L1951.26 1207.52 L1951.85 1207.52 L1952.43 1207.52 L1953.02 1207.52 L1953.61 1207.52 L1954.19 1207.52 L1954.78 1207.52 L1955.37 1207.52 L1955.95 1207.52 L1956.54 1207.52 L1957.12 1207.52 L1957.71 1207.52 L1958.3 1207.52 L1958.88 1207.52 L1959.47 1207.52 L1960.06 1207.52 L1960.64 1207.52 L1961.23 1207.52 L1961.82 1207.52 L1962.4 1207.52 L1962.99 1207.52 L1963.58 1207.52 L1964.16 1207.52 L1964.75 1207.52 L1965.33 1207.52 L1965.92 1207.52 L1966.51 1207.52 L1967.09 1207.52 L1967.68 1207.52 L1968.27 1207.52 L1968.85 1207.52 L1969.44 1207.52 L1970.03 1207.52 L1970.61 1207.52 L1971.2 1207.52 L1971.78 1207.52 L1972.37 1207.52 L1972.96 1207.52 L1973.54 1207.52 L1974.13 1207.52 L1974.72 1207.52 L1975.3 1207.52 L1975.89 1207.52 L1976.48 1207.52 L1977.06 1207.52 L1977.65 1207.52 L1978.24 1207.52 L1978.82 1207.52 L1979.41 1207.52 L1979.99 1207.52 L1980.58 1207.52 L1981.17 1207.52 L1981.75 1207.52 L1982.34 1207.52 L1982.93 1207.52 L1983.51 1207.52 L1984.1 1207.52 L1984.69 1207.52 L1985.27 1207.52 L1985.86 1207.52 L1986.45 1207.52 L1987.03 1207.52 L1987.62 1207.52 L1988.2 1207.52 L1988.79 1207.52 L1989.38 1207.52 L1989.96 1207.52 L1990.55 1207.52 L1991.14 1207.52 L1991.72 1207.52 L1992.31 1207.52 L1992.9 1207.52 L1993.48 1207.52 L1994.07 1207.52 L1994.65 1207.52 L1995.24 1207.52 L1995.83 1207.52 L1996.41 1207.52 L1997 1207.52 L1997.59 1207.52 L1998.17 1207.52 L1998.76 1207.52 L1999.35 1207.52 L1999.93 1207.52 L2000.52 1207.52 L2001.11 1207.52 L2001.69 1207.52 L2002.28 1207.52 L2002.86 1207.52 L2003.45 1207.52 L2004.04 1207.52 L2004.62 1207.52 L2005.21 1207.52 L2005.8 1207.52 L2006.38 1207.52 L2006.97 1207.52 L2007.56 1207.52 L2008.14 1207.52 L2008.73 1207.52 L2009.32 1207.52 L2009.9 1207.52 L2010.49 1207.52 L2011.07 1207.52 L2011.66 1207.52 L2012.25 1207.52 L2012.83 1207.52 L2013.42 1207.52 L2014.01 1207.52 L2014.59 1207.52 L2015.18 1207.52 L2015.77 1207.52 L2016.35 1207.52 L2016.94 1207.52 L2017.53 1207.52 L2018.11 1207.52 L2018.7 1207.52 L2019.28 1207.52 L2019.87 1207.52 L2020.46 1207.52 L2021.04 1207.52 L2021.63 1207.52 L2022.22 1207.52 L2022.8 1207.52 L2023.39 1207.52 L2023.98 1207.52 L2024.56 1207.52 L2025.15 1207.52 L2025.73 1207.52 L2026.32 1207.52 L2026.91 1207.52 L2027.49 1207.52 L2028.08 1207.52 L2028.67 1207.52 L2029.25 1207.52 L2029.84 1207.52 L2030.43 1207.52 L2031.01 1207.52 L2031.6 1207.52 L2032.19 1207.52 L2032.77 1207.52 L2033.36 1207.52 L2033.94 1207.52 L2034.53 1207.52 L2035.12 1207.52 L2035.7 1207.52 L2036.29 1207.52 L2036.88 1207.52 L2037.46 1207.52 L2038.05 1207.52 L2038.64 1207.52 L2039.22 1207.52 L2039.81 1207.52 L2040.4 1207.52 L2040.98 1207.52 L2041.57 1207.52 L2042.15 1207.52 L2042.74 1207.52 L2043.33 1207.52 L2043.91 1207.52 L2044.5 1207.52 L2045.09 1207.52 L2045.67 1207.52 L2046.26 1207.52 L2046.85 1207.52 L2047.43 1207.52 L2048.02 1207.52 L2048.6 1207.52 L2049.19 1207.52 L2049.78 1207.52 L2050.36 1207.52 L2050.95 1207.52 L2051.54 1207.52 L2052.12 1207.52 L2052.71 1207.52 L2053.3 1207.52 L2053.88 1207.52 L2054.47 1207.52 L2055.06 1207.52 L2055.64 1207.52 L2056.23 1207.52 L2056.81 1207.52 L2057.4 1207.52 L2057.99 1207.52 L2058.57 1207.52 L2059.16 1207.52 L2059.75 1207.52 L2060.33 1207.52 L2060.92 1207.52 L2061.51 1207.52 L2062.09 1207.52 L2062.68 1207.52 L2063.27 1207.52 L2063.85 1207.52 L2064.44 1207.52 L2065.02 1207.52 L2065.61 1207.52 L2066.2 1207.52 L2066.78 1207.52 L2067.37 1207.52 L2067.96 1207.52 L2068.54 1207.52 L2069.13 1207.52 L2069.72 1207.52 L2070.3 1207.52 L2070.89 1207.52 L2071.48 1207.52 L2072.06 1207.52 L2072.65 1207.52 L2073.23 1207.52 L2073.82 1207.52 L2074.41 1207.52 L2074.99 1207.52 L2075.58 1207.52 L2076.17 1207.52 L2076.75 1207.52 L2077.34 1207.52 L2077.93 1207.52 L2078.51 1207.52 L2079.1 1207.52 L2079.68 1207.52 L2080.27 1207.52 L2080.86 1207.52 L2081.44 1207.52 L2082.03 1207.52 L2082.62 1207.52 L2083.2 1207.52 L2083.79 1207.52 L2084.38 1207.52 L2084.96 1207.52 L2085.55 1207.52 L2086.14 1207.52 L2086.72 1207.52 L2087.31 1207.52 L2087.89 1207.52 L2088.48 1207.52 L2089.07 1207.52 L2089.65 1207.52 L2090.24 1207.52 L2090.83 1207.52 L2091.41 1207.52 L2092 1207.52 L2092.59 1207.52 L2093.17 1207.52 L2093.76 1207.52 L2094.35 1207.52 L2094.93 1207.52 L2095.52 1207.52 L2096.1 1207.52 L2096.69 1207.52 L2097.28 1207.52 L2097.86 1207.52 L2098.45 1207.52 L2099.04 1207.52 L2099.62 1207.52 L2100.21 1207.52 L2100.8 1207.52 L2101.38 1207.52 L2101.97 1207.52 L2102.55 1207.52 L2103.14 1207.52 L2103.73 1207.52 L2104.31 1207.52 L2104.9 1207.52 L2105.49 1207.52 L2106.07 1207.52 L2106.66 1207.52 L2107.25 1207.52 L2107.83 1207.52 L2108.42 1207.52 L2109.01 1207.52 L2109.59 1207.52 L2110.18 1207.52 L2110.76 1207.52 L2111.35 1207.52 L2111.94 1207.52 L2112.52 1207.52 L2113.11 1207.52 L2113.7 1207.52 L2114.28 1207.52 L2114.87 1207.52 L2115.46 1207.52 L2116.04 1207.52 L2116.63 1207.52 L2117.22 1207.52 L2117.8 1207.52 L2118.39 1207.52 L2118.97 1207.52 L2119.56 1207.52 L2120.15 1207.52 L2120.73 1207.52 L2121.32 1207.52 L2121.91 1207.52 L2122.49 1207.52 L2123.08 1207.52 L2123.67 1207.52 L2124.25 1207.52 L2124.84 1207.52 L2125.42 1207.52 L2126.01 1207.52 L2126.6 1207.52 L2127.18 1207.52 L2127.77 1207.52 L2128.36 1207.52 L2128.94 1207.52 L2129.53 1207.52 L2130.12 1207.52 L2130.7 1207.52 L2131.29 1207.52 L2131.88 1207.52 L2132.46 1207.52 L2133.05 1207.52 L2133.63 1207.52 L2134.22 1207.52 L2134.81 1207.52 L2135.39 1207.52 L2135.98 1207.52 L2136.57 1207.52 L2137.15 1207.52 L2137.74 1207.52 L2138.33 1207.52 L2138.91 1207.52 L2139.5 1207.52 L2140.09 1207.52 L2140.67 1207.52 L2141.26 1207.52 L2141.84 1207.52 L2142.43 1207.52 L2143.02 1207.52 L2143.6 1207.52 L2144.19 1207.52 L2144.78 1207.52 L2145.36 1207.52 L2145.95 1207.52 L2146.54 1207.52 L2147.12 1207.52 L2147.71 1207.52 L2148.3 1207.52 L2148.88 1207.52 L2149.47 1207.52 L2150.05 1207.52 L2150.64 1207.52 L2151.23 1207.52 L2151.81 1207.52 L2152.4 1207.52 L2152.99 1207.52 L2153.57 1207.52 L2154.16 1207.52 L2154.75 1207.52 L2155.33 1207.52 L2155.92 1207.52 L2156.5 1207.52 L2157.09 1207.52 L2157.68 1207.52 L2158.26 1207.52 L2158.26 1206.68 L2157.68 1206.68 L2157.09 1206.68 L2156.5 1206.68 L2155.92 1206.68 L2155.33 1206.68 L2154.75 1206.68 L2154.16 1206.68 L2153.57 1206.68 L2152.99 1206.68 L2152.4 1206.68 L2151.81 1206.68 L2151.23 1206.68 L2150.64 1206.68 L2150.05 1206.68 L2149.47 1206.68 L2148.88 1206.68 L2148.3 1206.68 L2147.71 1206.68 L2147.12 1206.68 L2146.54 1206.68 L2145.95 1206.68 L2145.36 1206.68 L2144.78 1206.68 L2144.19 1206.68 L2143.6 1206.68 L2143.02 1206.68 L2142.43 1206.68 L2141.84 1206.68 L2141.26 1206.68 L2140.67 1206.68 L2140.09 1206.68 L2139.5 1206.68 L2138.91 1206.68 L2138.33 1206.68 L2137.74 1206.68 L2137.15 1206.68 L2136.57 1206.68 L2135.98 1206.68 L2135.39 1206.68 L2134.81 1206.68 L2134.22 1206.68 L2133.63 1206.68 L2133.05 1206.68 L2132.46 1206.68 L2131.88 1206.68 L2131.29 1206.68 L2130.7 1206.68 L2130.12 1206.68 L2129.53 1206.68 L2128.94 1206.68 L2128.36 1206.68 L2127.77 1206.68 L2127.18 1206.68 L2126.6 1206.68 L2126.01 1206.68 L2125.42 1206.68 L2124.84 1206.68 L2124.25 1206.68 L2123.67 1206.68 L2123.08 1206.68 L2122.49 1206.68 L2121.91 1206.68 L2121.32 1206.68 L2120.73 1206.68 L2120.15 1206.68 L2119.56 1206.68 L2118.97 1206.68 L2118.39 1206.68 L2117.8 1206.68 L2117.22 1206.68 L2116.63 1206.68 L2116.04 1206.68 L2115.46 1206.68 L2114.87 1206.68 L2114.28 1206.68 L2113.7 1206.68 L2113.11 1206.68 L2112.52 1206.68 L2111.94 1206.68 L2111.35 1206.68 L2110.76 1206.68 L2110.18 1206.68 L2109.59 1206.68 L2109.01 1206.68 L2108.42 1206.68 L2107.83 1206.68 L2107.25 1206.68 L2106.66 1206.68 L2106.07 1206.68 L2105.49 1206.68 L2104.9 1206.68 L2104.31 1206.68 L2103.73 1206.68 L2103.14 1206.68 L2102.55 1206.68 L2101.97 1206.68 L2101.38 1206.68 L2100.8 1206.68 L2100.21 1206.68 L2099.62 1206.68 L2099.04 1206.68 L2098.45 1206.68 L2097.86 1206.68 L2097.28 1206.68 L2096.69 1206.68 L2096.1 1206.68 L2095.52 1206.68 L2094.93 1206.68 L2094.35 1206.68 L2093.76 1206.68 L2093.17 1206.68 L2092.59 1206.68 L2092 1206.68 L2091.41 1206.68 L2090.83 1206.68 L2090.24 1206.68 L2089.65 1206.68 L2089.07 1206.68 L2088.48 1206.68 L2087.89 1206.68 L2087.31 1206.68 L2086.72 1206.68 L2086.14 1206.68 L2085.55 1206.68 L2084.96 1206.68 L2084.38 1206.68 L2083.79 1206.68 L2083.2 1206.68 L2082.62 1206.68 L2082.03 1206.68 L2081.44 1206.68 L2080.86 1206.68 L2080.27 1206.68 L2079.68 1206.68 L2079.1 1206.68 L2078.51 1206.68 L2077.93 1206.68 L2077.34 1206.68 L2076.75 1206.68 L2076.17 1206.68 L2075.58 1206.68 L2074.99 1206.68 L2074.41 1206.68 L2073.82 1206.68 L2073.23 1206.68 L2072.65 1206.68 L2072.06 1206.68 L2071.48 1206.68 L2070.89 1206.68 L2070.3 1206.68 L2069.72 1206.68 L2069.13 1206.68 L2068.54 1206.68 L2067.96 1206.68 L2067.37 1206.68 L2066.78 1206.68 L2066.2 1206.68 L2065.61 1206.68 L2065.02 1206.68 L2064.44 1206.68 L2063.85 1206.68 L2063.27 1206.68 L2062.68 1206.68 L2062.09 1206.68 L2061.51 1206.68 L2060.92 1206.68 L2060.33 1206.68 L2059.75 1206.68 L2059.16 1206.68 L2058.57 1206.68 L2057.99 1206.68 L2057.4 1206.68 L2056.81 1206.68 L2056.23 1206.68 L2055.64 1206.68 L2055.06 1206.68 L2054.47 1206.68 L2053.88 1206.68 L2053.3 1206.68 L2052.71 1206.68 L2052.12 1206.68 L2051.54 1206.68 L2050.95 1206.68 L2050.36 1206.68 L2049.78 1206.68 L2049.19 1206.68 L2048.6 1206.68 L2048.02 1206.68 L2047.43 1206.68 L2046.85 1206.68 L2046.26 1206.68 L2045.67 1206.68 L2045.09 1206.68 L2044.5 1206.68 L2043.91 1206.68 L2043.33 1206.68 L2042.74 1206.68 L2042.15 1206.68 L2041.57 1206.68 L2040.98 1206.68 L2040.4 1206.68 L2039.81 1206.68 L2039.22 1206.68 L2038.64 1206.68 L2038.05 1206.68 L2037.46 1206.68 L2036.88 1206.68 L2036.29 1206.68 L2035.7 1206.68 L2035.12 1206.68 L2034.53 1206.68 L2033.94 1206.68 L2033.36 1206.68 L2032.77 1206.68 L2032.19 1206.68 L2031.6 1206.68 L2031.01 1206.68 L2030.43 1206.68 L2029.84 1206.68 L2029.25 1206.68 L2028.67 1206.68 L2028.08 1206.68 L2027.49 1206.68 L2026.91 1206.68 L2026.32 1206.68 L2025.73 1206.68 L2025.15 1206.68 L2024.56 1206.68 L2023.98 1206.68 L2023.39 1206.68 L2022.8 1206.68 L2022.22 1206.68 L2021.63 1206.68 L2021.04 1206.68 L2020.46 1206.68 L2019.87 1206.68 L2019.28 1206.68 L2018.7 1206.68 L2018.11 1206.68 L2017.53 1206.68 L2016.94 1206.68 L2016.35 1206.68 L2015.77 1206.68 L2015.18 1206.68 L2014.59 1206.68 L2014.01 1206.68 L2013.42 1206.68 L2012.83 1206.68 L2012.25 1206.68 L2011.66 1206.68 L2011.07 1206.68 L2010.49 1206.68 L2009.9 1206.68 L2009.32 1206.68 L2008.73 1206.68 L2008.14 1206.68 L2007.56 1206.68 L2006.97 1206.68 L2006.38 1206.68 L2005.8 1206.68 L2005.21 1206.68 L2004.62 1206.68 L2004.04 1206.68 L2003.45 1206.68 L2002.86 1206.68 L2002.28 1206.68 L2001.69 1206.68 L2001.11 1206.68 L2000.52 1206.68 L1999.93 1206.68 L1999.35 1206.68 L1998.76 1206.68 L1998.17 1206.68 L1997.59 1206.68 L1997 1206.68 L1996.41 1206.68 L1995.83 1206.68 L1995.24 1206.68 L1994.65 1206.68 L1994.07 1206.68 L1993.48 1206.68 L1992.9 1206.68 L1992.31 1206.68 L1991.72 1206.68 L1991.14 1206.68 L1990.55 1206.68 L1989.96 1206.68 L1989.38 1206.68 L1988.79 1206.68 L1988.2 1206.68 L1987.62 1206.68 L1987.03 1206.68 L1986.45 1206.68 L1985.86 1206.68 L1985.27 1206.68 L1984.69 1206.68 L1984.1 1206.68 L1983.51 1206.68 L1982.93 1206.68 L1982.34 1206.68 L1981.75 1206.68 L1981.17 1206.68 L1980.58 1206.68 L1979.99 1206.68 L1979.41 1206.68 L1978.82 1206.68 L1978.24 1206.68 L1977.65 1206.68 L1977.06 1206.68 L1976.48 1206.68 L1975.89 1206.68 L1975.3 1206.68 L1974.72 1206.68 L1974.13 1206.68 L1973.54 1206.68 L1972.96 1206.68 L1972.37 1206.68 L1971.78 1206.68 L1971.2 1206.68 L1970.61 1206.68 L1970.03 1206.68 L1969.44 1206.68 L1968.85 1206.68 L1968.27 1206.68 L1967.68 1206.68 L1967.09 1206.68 L1966.51 1206.68 L1965.92 1206.68 L1965.33 1206.68 L1964.75 1206.68 L1964.16 1206.68 L1963.58 1206.68 L1962.99 1206.68 L1962.4 1206.68 L1961.82 1206.68 L1961.23 1206.68 L1960.64 1206.68 L1960.06 1206.68 L1959.47 1206.68 L1958.88 1206.68 L1958.3 1206.68 L1957.71 1206.68 L1957.12 1206.68 L1956.54 1206.68 L1955.95 1206.68 L1955.37 1206.68 L1954.78 1206.68 L1954.19 1206.68 L1953.61 1206.68 L1953.02 1206.68 L1952.43 1206.68 L1951.85 1206.68 L1951.26 1206.68 L1950.67 1206.68 L1950.09 1206.68 L1949.5 1206.68 L1948.91 1206.68 L1948.33 1206.68 L1947.74 1206.68 L1947.16 1206.68 L1946.57 1206.68 L1945.98 1206.68 L1945.4 1206.68 L1944.81 1206.68 L1944.22 1206.68 L1943.64 1206.68 L1943.05 1206.68 L1942.46 1206.68 L1941.88 1206.68 L1941.29 1206.68 L1940.71 1206.68 L1940.12 1206.68 L1939.53 1206.68 L1938.95 1206.68 L1938.36 1206.68 L1937.77 1206.68 L1937.19 1206.68 L1936.6 1206.68 L1936.01 1206.68 L1935.43 1206.68 L1934.84 1206.68 L1934.25 1206.68 L1933.67 1206.68 L1933.08 1206.68 L1932.5 1206.68 L1931.91 1206.68 L1931.32 1206.68 L1930.74 1206.68 L1930.15 1206.68 L1929.56 1206.68 L1928.98 1206.68 L1928.39 1206.68 L1927.8 1206.68 L1927.22 1206.68 L1926.63 1206.68 L1926.04 1206.68 L1925.46 1206.68 L1924.87 1206.68 L1924.29 1206.68 L1923.7 1206.68 L1923.11 1206.68 L1922.53 1206.68 L1921.94 1206.68 L1921.35 1206.68 L1920.77 1206.68 L1920.18 1206.68 L1919.59 1206.68 L1919.01 1206.68 L1918.42 1206.68 L1917.83 1206.68 L1917.25 1206.68 L1916.66 1206.68 L1916.08 1206.68 L1915.49 1206.68 L1914.9 1206.68 L1914.32 1206.68 L1913.73 1206.68 L1913.14 1206.68 L1912.56 1206.68 L1911.97 1206.68 L1911.38 1206.68 L1910.8 1206.68 L1910.21 1206.68 L1909.63 1206.68 L1909.04 1206.68 L1908.45 1206.68 L1907.87 1206.68 L1907.28 1206.68 L1906.69 1206.68 L1906.11 1206.68 L1905.52 1206.68 L1904.93 1206.68 L1904.35 1206.68 L1903.76 1206.68 L1903.17 1206.68 L1902.59 1206.68 L1902 1206.68 L1901.42 1206.68 L1900.83 1206.68 L1900.24 1206.68 L1899.66 1206.68 L1899.07 1206.68 L1898.48 1206.68 L1897.9 1206.68 L1897.31 1206.68 L1896.72 1206.68 L1896.14 1206.68 L1895.55 1206.68 L1894.96 1206.68 L1894.38 1206.68 L1893.79 1206.68 L1893.21 1206.68 L1892.62 1206.68 L1892.03 1206.68 L1891.45 1206.68 L1890.86 1206.68 L1890.27 1206.68 L1889.69 1206.68 L1889.1 1206.68 L1888.51 1206.68 L1887.93 1206.68 L1887.34 1206.68 L1886.76 1206.68 L1886.17 1206.68 L1885.58 1206.68 L1885 1206.68 L1884.41 1206.68 L1883.82 1206.68 L1883.24 1206.68 L1882.65 1206.68 L1882.06 1206.68 L1881.48 1206.68 L1880.89 1206.68 L1880.3 1206.68 L1879.72 1206.68 L1879.13 1206.68 L1878.55 1206.68 L1877.96 1206.68 L1877.37 1206.68 L1876.79 1206.68 L1876.2 1206.68 L1875.61 1206.68 L1875.03 1206.68 L1874.44 1206.68 L1873.85 1206.68 L1873.27 1206.68 L1872.68 1206.68 L1872.09 1206.68 L1871.51 1206.68 L1870.92 1206.68 L1870.34 1206.68 L1869.75 1206.68 L1869.16 1206.68 L1868.58 1206.68 L1867.99 1206.68 L1867.4 1206.68 L1866.82 1206.68 L1866.23 1206.68 L1865.64 1206.68 L1865.06 1206.68 L1864.47 1206.68 L1863.88 1206.68 L1863.3 1206.68 L1862.71 1206.68 L1862.13 1206.68 L1861.54 1206.68 L1860.95 1206.68 L1860.37 1206.68 L1859.78 1206.68 L1859.19 1206.68 L1858.61 1206.68 L1858.02 1206.68 L1857.43 1206.68 L1856.85 1206.68 L1856.26 1206.68 L1855.68 1206.68 L1855.09 1206.68 L1854.5 1206.68 L1853.92 1206.68 L1853.33 1206.68 L1852.74 1206.68 L1852.16 1206.68 L1851.57 1206.68 L1850.98 1206.68 L1850.4 1206.68 L1849.81 1206.68 L1849.22 1206.68 L1848.64 1206.68 L1848.05 1206.68 L1847.47 1206.68 L1846.88 1206.68 L1846.29 1206.68 L1845.71 1206.68 L1845.12 1206.68 L1844.53 1206.68 L1843.95 1206.68 L1843.36 1206.68 L1842.77 1206.68 L1842.19 1206.68 L1841.6 1206.68 L1841.01 1206.68 L1840.43 1206.68 L1839.84 1206.68 L1839.26 1206.68 L1838.67 1206.68 L1838.08 1206.68 L1837.5 1206.68 L1836.91 1206.68 L1836.32 1206.68 L1835.74 1206.68 L1835.15 1206.68 L1834.56 1206.68 L1833.98 1206.68 L1833.39 1206.68 L1832.81 1206.68 L1832.22 1206.68 L1831.63 1206.68 L1831.05 1206.68 L1830.46 1206.68 L1829.87 1206.68 L1829.29 1206.68 L1828.7 1206.68 L1828.11 1206.68 L1827.53 1206.68 L1826.94 1206.68 L1826.35 1206.68 L1825.77 1206.68 L1825.18 1206.68 L1824.6 1206.68 L1824.01 1206.68 L1823.42 1206.68 L1822.84 1206.68 L1822.25 1206.68 L1821.66 1206.68 L1821.08 1206.68 L1820.49 1206.68 L1819.9 1206.68 L1819.32 1206.68 L1818.73 1206.68 L1818.14 1206.68 L1817.56 1206.68 L1816.97 1206.68 L1816.39 1206.68 L1815.8 1206.68 L1815.21 1206.68 L1814.63 1206.68 L1814.04 1206.68 L1813.45 1206.68 L1812.87 1206.68 L1812.28 1206.68 L1811.69 1206.68 L1811.11 1206.68 L1810.52 1206.68 L1809.94 1206.68 L1809.35 1206.68 L1808.76 1206.68 L1808.18 1206.68 L1807.59 1206.68 L1807 1206.68 L1806.42 1206.68 L1805.83 1206.68 L1805.24 1206.68 L1804.66 1206.68 L1804.07 1206.68 L1803.48 1206.68 L1802.9 1206.68 L1802.31 1206.68 L1801.73 1206.68 L1801.14 1206.68 L1800.55 1206.68 L1799.97 1206.68 L1799.38 1206.68 L1798.79 1206.68 L1798.21 1206.68 L1797.62 1206.68 L1797.03 1206.68 L1796.45 1206.68 L1795.86 1206.68 L1795.27 1206.68 L1794.69 1206.68 L1794.1 1206.68 L1793.52 1206.68 L1792.93 1206.68 L1792.34 1206.68 L1791.76 1206.68 L1791.17 1206.68 L1790.58 1206.68 L1790 1206.68 L1789.41 1206.68 L1788.82 1206.68 L1788.24 1206.68 L1787.65 1206.68 L1787.06 1206.68 L1786.48 1206.68 L1785.89 1206.68 L1785.31 1206.68 L1784.72 1206.68 L1784.13 1206.68 L1783.55 1206.68 L1782.96 1206.68 L1782.37 1206.68 L1781.79 1206.68 L1781.2 1206.68 L1780.61 1206.68 L1780.03 1206.68 L1779.44 1206.68 L1778.86 1206.68 L1778.27 1206.68 L1777.68 1206.68 L1777.1 1206.68 L1776.51 1206.68 L1775.92 1206.68 L1775.34 1206.68 L1774.75 1206.68 L1774.16 1206.68 L1773.58 1206.68 L1772.99 1206.68 L1772.4 1206.68 L1771.82 1206.68 L1771.23 1206.68 L1770.65 1206.68 L1770.06 1206.68 L1769.47 1206.68 L1768.89 1206.68 L1768.3 1206.68 L1767.71 1206.68 L1767.13 1206.68 L1766.54 1206.68 L1765.95 1206.68 L1765.37 1206.68 L1764.78 1206.68 L1764.19 1206.68 L1763.61 1206.68 L1763.02 1206.68 L1762.44 1206.68 L1761.85 1206.68 L1761.26 1206.68 L1760.68 1206.68 L1760.09 1206.68 L1759.5 1206.68 L1758.92 1206.68 L1758.33 1206.68 L1757.74 1206.68 L1757.16 1206.68 L1756.57 1206.68 L1755.99 1206.68 L1755.4 1206.68 L1754.81 1206.68 L1754.23 1206.68 L1753.64 1206.68 L1753.05 1206.68 L1752.47 1206.68 L1751.88 1206.68 L1751.29 1206.68 L1750.71 1206.68 L1750.12 1206.68 L1749.53 1206.68 L1748.95 1206.68 L1748.36 1206.68 L1747.78 1206.68 L1747.19 1206.68 L1746.6 1206.68 L1746.02 1206.68 L1745.43 1206.68 L1744.84 1206.68 L1744.26 1206.68 L1743.67 1206.68 L1743.08 1206.68 L1742.5 1206.68 L1741.91 1206.68 L1741.32 1206.68 L1740.74 1206.68 L1740.15 1206.68 L1739.57 1206.68 L1738.98 1206.68 L1738.39 1206.68 L1737.81 1206.68 L1737.22 1206.68 L1736.63 1206.68 L1736.05 1206.68 L1735.46 1206.68 L1734.87 1206.68 L1734.29 1206.68 L1733.7 1206.68 L1733.11 1206.68 L1732.53 1206.68 L1731.94 1206.68 L1731.36 1206.68 L1730.77 1206.68 L1730.18 1206.68 L1729.6 1206.68 L1729.01 1206.68 L1728.42 1206.68 L1727.84 1206.68 L1727.25 1206.68 L1726.66 1206.68 L1726.08 1206.68 L1725.49 1206.68 L1724.91 1206.68 L1724.32 1206.68 L1723.73 1206.68 L1723.15 1206.68 L1722.56 1206.68 L1721.97 1206.68 L1721.39 1206.68 L1720.8 1206.68 L1720.21 1206.68 L1719.63 1206.68 L1719.04 1206.68 L1718.45 1206.68 L1717.87 1206.68 L1717.28 1206.68 L1716.7 1206.68 L1716.11 1206.68 L1715.52 1206.68 L1714.94 1206.68 L1714.35 1206.68 L1713.76 1206.68 L1713.18 1206.68 L1712.59 1206.68 L1712 1206.68 L1711.42 1206.68 L1710.83 1206.68 L1710.24 1206.68 L1709.66 1206.68 L1709.07 1206.68 L1708.49 1206.68 L1707.9 1206.68 L1707.31 1206.68 L1706.73 1206.68 L1706.14 1206.68 L1705.55 1206.68 L1704.97 1206.68 L1704.38 1206.68 L1703.79 1206.68 L1703.21 1206.68 L1702.62 1206.68 L1702.04 1206.68 L1701.45 1206.68 L1700.86 1206.68 L1700.28 1206.68 L1699.69 1206.68 L1699.1 1206.68 L1698.52 1206.68 L1697.93 1206.68 L1697.34 1206.68 L1696.76 1206.68 L1696.17 1206.68 L1695.58 1206.68 L1695 1206.68 L1694.41 1206.68 L1693.83 1206.68 L1693.24 1206.68 L1692.65 1206.68 L1692.07 1206.68 L1691.48 1206.68 L1690.89 1206.68 L1690.31 1206.68 L1689.72 1206.68 L1689.13 1206.68 L1688.55 1206.68 L1687.96 1206.68 L1687.37 1206.68 L1686.79 1206.68 L1686.2 1206.68 L1685.62 1206.68 L1685.03 1206.68 L1684.44 1206.68 L1683.86 1206.68 L1683.27 1206.68 L1682.68 1206.68 L1682.1 1206.68 L1681.51 1206.68 L1680.92 1206.68 L1680.34 1206.68 L1679.75 1206.68 L1679.17 1206.68 L1678.58 1206.68 L1677.99 1206.68 L1677.41 1206.68 L1676.82 1206.68 L1676.23 1206.68 L1675.65 1206.68 L1675.06 1206.68 L1674.47 1206.68 L1673.89 1206.68 L1673.3 1206.68 L1672.71 1206.68 L1672.13 1206.68 L1671.54 1206.68 L1670.96 1206.68 L1670.37 1206.68 L1669.78 1206.68 L1669.2 1206.68 L1668.61 1206.68 L1668.02 1206.68 L1667.44 1206.68 L1666.85 1206.68 L1666.26 1206.68 L1665.68 1206.68 L1665.09 1206.68 L1664.5 1206.68 L1663.92 1206.68 L1663.33 1206.68 L1662.75 1206.68 L1662.16 1206.68 L1661.57 1206.68 L1660.99 1206.68 L1660.4 1206.68 L1659.81 1206.68 L1659.23 1206.68 L1658.64 1206.68 L1658.05 1206.68 L1657.47 1206.68 L1656.88 1206.68 L1656.29 1206.68 L1655.71 1206.68 L1655.12 1206.68 L1654.54 1206.68 L1653.95 1206.68 L1653.36 1206.68 L1652.78 1206.68 L1652.19 1206.68 L1651.6 1206.68 L1651.02 1206.68 L1650.43 1206.68 L1649.84 1206.68 L1649.26 1206.68 L1648.67 1206.68 L1648.09 1206.68 L1647.5 1206.68 L1646.91 1206.68 L1646.33 1206.68 L1645.74 1206.68 L1645.15 1206.68 L1644.57 1206.68 L1643.98 1206.68 L1643.39 1206.68 L1642.81 1206.68 L1642.22 1206.68 L1641.63 1206.68 L1641.05 1206.68 L1640.46 1206.68 L1639.88 1206.68 L1639.29 1206.68 L1638.7 1206.68 L1638.12 1206.68 L1637.53 1206.68 L1636.94 1206.68 L1636.36 1206.68 L1635.77 1206.68 L1635.18 1206.68 L1634.6 1206.68 L1634.01 1206.68 L1633.42 1206.68 L1632.84 1206.68 L1632.25 1206.68 L1631.67 1206.68 L1631.08 1206.68 L1630.49 1206.68 L1629.91 1206.68 L1629.32 1206.68 L1628.73 1206.68 L1628.15 1206.68 L1627.56 1206.68 L1626.97 1206.68 L1626.39 1206.68 L1625.8 1206.68 L1625.22 1206.68 L1624.63 1206.68 L1624.04 1206.68 L1623.46 1206.68 L1622.87 1206.68 L1622.28 1206.68 L1621.7 1206.68 L1621.11 1206.68 L1620.52 1206.68 L1619.94 1206.68 L1619.35 1206.68 L1618.76 1206.68 L1618.18 1206.68 L1617.59 1206.68 L1617.01 1206.68 L1616.42 1206.68 L1615.83 1206.68 L1615.25 1206.68 L1614.66 1206.68 L1614.07 1206.68 L1613.49 1206.68 L1612.9 1206.68 L1612.31 1206.68 L1611.73 1206.68 L1611.14 1206.68 L1610.55 1206.68 L1609.97 1206.68 L1609.38 1206.68 L1608.8 1206.68 L1608.21 1206.68 L1607.62 1206.68 L1607.04 1206.68 L1606.45 1206.68 L1605.86 1206.68 L1605.28 1206.68 L1604.69 1206.68 L1604.1 1206.68 L1603.52 1206.68 L1602.93 1206.68 L1602.34 1206.68 L1601.76 1206.68 L1601.17 1206.68 L1600.59 1206.68 L1600 1206.68 L1599.41 1206.68 L1598.83 1206.68 L1598.24 1206.68 L1597.65 1206.68 L1597.07 1206.68 L1596.48 1206.68 L1595.89 1206.68 L1595.31 1206.68 L1594.72 1206.68 L1594.14 1206.68 L1593.55 1206.68 L1592.96 1206.68 L1592.38 1206.68 L1591.79 1206.68 L1591.2 1206.68 L1590.62 1206.68 L1590.03 1206.68 L1589.44 1206.68 L1588.86 1206.68 L1588.27 1206.68 L1587.68 1206.68 L1587.1 1206.68 L1586.51 1206.68 L1585.93 1206.68 L1585.34 1206.68 L1584.75 1206.68 L1584.17 1206.68 L1583.58 1206.68 L1582.99 1206.68 L1582.41 1206.68 L1581.82 1206.68 L1581.23 1206.68 L1580.65 1206.68 L1580.06 1206.68 L1579.47 1206.68 L1578.89 1206.68 L1578.3 1206.68 L1577.72 1206.68 L1577.13 1206.68 L1576.54 1206.68 L1575.96 1206.68 L1575.37 1206.68 L1574.78 1206.68 L1574.2 1206.68 L1573.61 1206.68 L1573.02 1206.68 L1572.44 1206.68 L1571.85 1206.68 L1571.27 1206.68 L1570.68 1206.68 L1570.09 1206.68 L1569.51 1206.68 L1568.92 1206.68 L1568.33 1206.68 L1567.75 1206.68 L1567.16 1206.68 L1566.57 1206.68 L1565.99 1206.68 L1565.4 1206.68 L1564.81 1206.68 L1564.23 1206.68 L1563.64 1206.68 L1563.06 1206.68 L1562.47 1206.68 L1561.88 1206.68 L1561.3 1206.68 L1560.71 1206.68 L1560.12 1206.68 L1559.54 1206.68 L1558.95 1206.68 L1558.36 1206.68 L1557.78 1206.68 L1557.19 1206.68 L1556.6 1206.68 L1556.02 1206.68 L1555.43 1206.68 L1554.85 1206.68 L1554.26 1206.68 L1553.67 1206.68 L1553.09 1206.68 L1552.5 1206.68 L1551.91 1206.68 L1551.33 1206.68 L1550.74 1206.68 L1550.15 1206.68 L1549.57 1206.68 L1548.98 1206.68 L1548.4 1206.68 L1547.81 1206.68 L1547.22 1206.68 L1546.64 1206.68 L1546.05 1206.68 L1545.46 1206.68 L1544.88 1206.68 L1544.29 1206.68 L1543.7 1206.68 L1543.12 1206.68 L1542.53 1206.68 L1541.94 1206.68 L1541.36 1206.68 L1540.77 1206.68 L1540.19 1206.68 L1539.6 1206.68 L1539.01 1206.68 L1538.43 1206.68 L1537.84 1206.68 L1537.25 1206.68 L1536.67 1206.68 L1536.08 1206.68 L1535.49 1206.68 L1534.91 1206.68 L1534.32 1206.68 L1533.73 1206.68 L1533.15 1206.68 L1532.56 1206.68 L1531.98 1206.68 L1531.39 1206.68 L1530.8 1206.68 L1530.22 1206.68 L1529.63 1206.68 L1529.04 1206.68 L1528.46 1206.68 L1527.87 1206.68 L1527.28 1206.68 L1526.7 1206.68 L1526.11 1206.68 L1525.52 1206.68 L1524.94 1206.68 L1524.35 1206.68 L1523.77 1206.68 L1523.18 1206.68 L1522.59 1206.68 L1522.01 1206.68 L1521.42 1206.68 L1520.83 1206.68 L1520.25 1206.68 L1519.66 1206.68 L1519.07 1206.68 L1518.49 1206.68 L1517.9 1206.68 L1517.32 1206.68 L1516.73 1206.68 L1516.14 1206.68 L1515.56 1206.68 L1514.97 1206.68 L1514.38 1206.68 L1513.8 1206.68 L1513.21 1206.68 L1512.62 1206.68 L1512.04 1206.68 L1511.45 1206.68 L1510.86 1206.68 L1510.28 1206.68 L1509.69 1206.68 L1509.11 1206.68 L1508.52 1206.68 L1507.93 1206.68 L1507.35 1206.68 L1506.76 1206.68 L1506.17 1206.68 L1505.59 1206.68 L1505 1206.68 L1504.41 1206.68 L1503.83 1206.68 L1503.24 1206.68 L1502.65 1206.68 L1502.07 1206.68 L1501.48 1206.68 L1500.9 1206.68 L1500.31 1206.68 L1499.72 1206.68 L1499.14 1206.68 L1498.55 1206.68 L1497.96 1206.68 L1497.38 1206.68 L1496.79 1206.68 L1496.2 1206.68 L1495.62 1206.68 L1495.03 1206.68 L1494.45 1206.68 L1493.86 1206.68 L1493.27 1206.68 L1492.69 1206.68 L1492.1 1206.68 L1491.51 1206.68 L1490.93 1206.68 L1490.34 1206.68 L1489.75 1206.68 L1489.17 1206.68 L1488.58 1206.68 L1487.99 1206.68 L1487.41 1206.68 L1486.82 1206.68 L1486.24 1206.68 L1485.65 1206.68 L1485.06 1206.68 L1484.48 1206.68 L1483.89 1206.68 L1483.3 1206.68 L1482.72 1206.68 L1482.13 1206.68 L1481.54 1206.68 L1480.96 1206.68 L1480.37 1206.68 L1479.78 1206.68 L1479.2 1206.68 L1478.61 1206.68 L1478.03 1206.68 L1477.44 1206.68 L1476.85 1206.68 L1476.27 1206.68 L1475.68 1206.68 L1475.09 1206.68 L1474.51 1206.68 L1473.92 1206.68 L1473.33 1206.68 L1472.75 1206.68 L1472.16 1206.68 L1471.57 1206.68 L1470.99 1206.68 L1470.4 1206.68 L1469.82 1206.68 L1469.23 1206.68 L1468.64 1206.68 L1468.06 1206.68 L1467.47 1206.68 L1466.88 1206.68 L1466.3 1206.68 L1465.71 1206.68 L1465.12 1206.68 L1464.54 1206.68 L1463.95 1206.68 L1463.37 1206.68 L1462.78 1206.68 L1462.19 1206.68 L1461.61 1206.68 L1461.02 1206.68 L1460.43 1206.68 L1459.85 1206.68 L1459.26 1206.68 L1458.67 1206.68 L1458.09 1206.68 L1457.5 1206.68 L1456.91 1206.68 L1456.33 1206.68 L1455.74 1206.68 L1455.16 1206.68 L1454.57 1206.68 L1453.98 1206.68 L1453.4 1206.68 L1452.81 1206.68 L1452.22 1206.68 L1451.64 1206.68 L1451.05 1206.68 L1450.46 1206.68 L1449.88 1206.68 L1449.29 1206.68 L1448.7 1206.68 L1448.12 1206.68 L1447.53 1206.68 L1446.95 1206.68 L1446.36 1206.68 L1445.77 1206.68 L1445.19 1206.68 L1444.6 1206.68 L1444.01 1206.68 L1443.43 1206.68 L1442.84 1206.68 L1442.25 1206.68 L1441.67 1206.68 L1441.08 1206.68 L1440.5 1206.68 L1439.91 1206.68 L1439.32 1206.68 L1438.74 1206.68 L1438.15 1206.68 L1437.56 1206.68 L1436.98 1206.68 L1436.39 1206.68 L1435.8 1206.68 L1435.22 1206.68 L1434.63 1206.68 L1434.04 1206.68 L1433.46 1206.68 L1432.87 1206.68 L1432.29 1206.68 L1431.7 1206.68 L1431.11 1206.68 L1430.53 1206.68 L1429.94 1206.68 L1429.35 1206.68 L1428.77 1206.68 L1428.18 1206.68 L1427.59 1206.68 L1427.01 1206.68 L1426.42 1206.68 L1425.83 1206.68 L1425.25 1206.68 L1424.66 1206.68 L1424.08 1206.68 L1423.49 1206.68 L1422.9 1206.68 L1422.32 1206.68 L1421.73 1206.68 L1421.14 1206.68 L1420.56 1206.68 L1419.97 1206.68 L1419.38 1206.68 L1418.8 1206.68 L1418.21 1206.68 L1417.63 1206.68 L1417.04 1206.68 L1416.45 1206.68 L1415.87 1206.68 L1415.28 1206.68 L1414.69 1206.68 L1414.11 1206.68 L1413.52 1206.68 L1412.93 1206.68 L1412.35 1206.68 L1411.76 1206.68 L1411.17 1206.68 L1410.59 1206.68 L1410 1206.68 L1409.42 1206.68 L1408.83 1206.68 L1408.24 1206.68 L1407.66 1206.68 L1407.07 1206.68 L1406.48 1206.68 L1405.9 1206.68 L1405.31 1206.68 L1404.72 1206.68 L1404.14 1206.68 L1403.55 1206.68 L1402.96 1206.68 L1402.38 1206.68 L1401.79 1206.68 L1401.21 1206.68 L1400.62 1206.68 L1400.03 1206.68 L1399.45 1206.68 L1398.86 1206.68 L1398.27 1206.68 L1397.69 1206.68 L1397.1 1206.68 L1396.51 1206.68 L1395.93 1206.68 L1395.34 1206.68 L1394.75 1206.68 L1394.17 1206.68 L1393.58 1206.68 L1393 1206.68 L1392.41 1206.68 L1391.82 1206.68 L1391.24 1206.68 L1390.65 1206.68 L1390.06 1206.68 L1389.48 1206.68 L1388.89 1206.68 L1388.3 1206.68 L1387.72 1206.68 L1387.13 1206.68 L1386.55 1206.68 L1385.96 1206.68 L1385.37 1206.68 L1384.79 1206.68 L1384.2 1206.68 L1383.61 1206.68 L1383.03 1206.68 L1382.44 1206.68 L1381.85 1206.68 L1381.27 1206.68 L1380.68 1206.68 L1380.09 1206.68 L1379.51 1206.68 L1378.92 1206.68 L1378.34 1206.68 L1377.75 1206.68 L1377.16 1206.68 L1376.58 1206.68 L1375.99 1206.68 L1375.4 1206.68 L1374.82 1206.68 L1374.23 1206.68 L1373.64 1206.68 L1373.06 1206.68 L1372.47 1206.68 L1371.88 1206.68 L1371.3 1206.68 L1370.71 1206.68 L1370.13 1206.68 L1369.54 1206.68 L1368.95 1206.68 L1368.37 1206.68 L1367.78 1206.68 L1367.19 1206.68 L1366.61 1206.68 L1366.02 1206.68 L1365.43 1206.68 L1364.85 1206.68 L1364.26 1206.68 L1363.68 1206.68 L1363.09 1206.68 L1362.5 1206.68 L1361.92 1206.68 L1361.33 1206.68 L1360.74 1206.68 L1360.16 1206.68 L1359.57 1206.68 L1358.98 1206.68 L1358.4 1206.68 L1357.81 1206.68 L1357.22 1206.68 L1356.64 1206.68 L1356.05 1206.68 L1355.47 1206.68 L1354.88 1206.68 L1354.29 1206.68 L1353.71 1206.68 L1353.12 1206.68 L1352.53 1206.68 L1351.95 1206.68 L1351.36 1206.68 L1350.77 1206.68 L1350.19 1206.68 L1349.6 1206.68 L1349.01 1206.68 L1348.43 1206.68 L1347.84 1206.68 L1347.26 1206.68 L1346.67 1206.68 L1346.08 1206.68 L1345.5 1206.68 L1344.91 1206.68 L1344.32 1206.68 L1343.74 1206.68 L1343.15 1206.68 L1342.56 1206.68 L1341.98 1206.68 L1341.39 1206.68 L1340.8 1206.68 L1340.22 1206.68 L1339.63 1206.68 L1339.05 1206.68 L1338.46 1206.68 L1337.87 1206.68 L1337.29 1206.68 L1336.7 1206.68 L1336.11 1206.68 L1335.53 1206.68 L1334.94 1206.68 L1334.35 1206.68 L1333.77 1206.68 L1333.18 1206.68 L1332.6 1206.68 L1332.01 1206.68 L1331.42 1206.68 L1330.84 1206.68 L1330.25 1206.68 L1329.66 1206.68 L1329.08 1206.68 L1328.49 1206.68 L1327.9 1206.68 L1327.32 1206.68 L1326.73 1206.68 L1326.14 1206.68 L1325.56 1206.68 L1324.97 1206.68 L1324.39 1206.68 L1323.8 1206.68 L1323.21 1206.68 L1322.63 1206.68 L1322.04 1206.68 L1321.45 1206.68 L1320.87 1206.68 L1320.28 1206.68 L1319.69 1206.68 L1319.11 1206.68 L1318.52 1206.68 L1317.93 1206.68 L1317.35 1206.68 L1316.76 1206.68 L1316.18 1206.68 L1315.59 1206.68 L1315 1206.68 L1314.42 1206.68 L1313.83 1206.68 L1313.24 1206.68 L1312.66 1206.68 L1312.07 1206.68 L1311.48 1206.68 L1310.9 1206.68 L1310.31 1206.68 L1309.73 1206.68 L1309.14 1206.68 L1308.55 1206.68 L1307.97 1206.68 L1307.38 1206.68 L1306.79 1206.68 L1306.21 1206.68 L1305.62 1206.68 L1305.03 1206.68 L1304.45 1206.68 L1303.86 1206.68 L1303.27 1206.68 L1302.69 1206.68 L1302.1 1206.68 L1301.52 1206.68 L1300.93 1206.68 L1300.34 1206.68 L1299.76 1206.68 L1299.17 1206.68 L1298.58 1206.68 L1298 1206.68 L1297.41 1206.68 L1296.82 1206.68 L1296.24 1206.68 L1295.65 1206.68 L1295.06 1206.68 L1294.48 1206.68 L1293.89 1206.68 L1293.31 1206.68 L1292.72 1206.68 L1292.13 1206.68 L1291.55 1206.68 L1290.96 1206.68 L1290.37 1206.68 L1289.79 1206.68 L1289.2 1206.68 L1288.61 1206.68 L1288.03 1206.68 L1287.44 1206.68 L1286.86 1206.68 L1286.27 1206.68 L1285.68 1206.68 L1285.1 1206.68 L1284.51 1206.68 L1283.92 1206.68 L1283.34 1206.68 L1282.75 1206.68 L1282.16 1206.68 L1281.58 1206.68 L1280.99 1206.68 L1280.4 1206.68 L1279.82 1206.68 L1279.23 1206.68 L1278.65 1206.68 L1278.06 1206.68 L1277.47 1206.68 L1276.89 1206.68 L1276.3 1206.68 L1275.71 1206.68 L1275.13 1206.68 L1274.54 1206.68 L1273.95 1206.68 L1273.37 1206.68 L1272.78 1206.68 L1272.19 1206.68 L1271.61 1206.68 L1271.02 1206.68 L1270.44 1206.68 L1269.85 1206.68 L1269.26 1206.68 L1268.68 1206.68 L1268.09 1206.68 L1267.5 1206.68 L1266.92 1206.68 L1266.33 1206.68 L1265.74 1206.68 L1265.16 1206.68 L1264.57 1206.68 L1263.98 1206.68 L1263.4 1206.68 L1262.81 1206.68 L1262.23 1206.68 L1261.64 1206.68 L1261.05 1206.68 L1260.47 1206.68 L1259.88 1206.68 L1259.29 1206.68 L1258.71 1206.68 L1258.12 1206.68 L1257.53 1206.68 L1256.95 1206.68 L1256.36 1206.68 L1255.78 1206.68 L1255.19 1206.68 L1254.6 1206.68 L1254.02 1206.68 L1253.43 1206.68 L1252.84 1206.68 L1252.26 1206.68 L1251.67 1206.68 L1251.08 1206.68 L1250.5 1206.68 L1249.91 1206.68 L1249.32 1206.68 L1248.74 1206.68 L1248.15 1206.68 L1247.57 1206.68 L1246.98 1206.68 L1246.39 1206.68 L1245.81 1206.68 L1245.22 1206.68 L1244.63 1206.68 L1244.05 1206.68 L1243.46 1206.68 L1242.87 1206.68 L1242.29 1206.68 L1241.7 1206.68 L1241.11 1206.68 L1240.53 1206.68 L1239.94 1206.68 L1239.36 1206.68 L1238.77 1206.68 L1238.18 1206.68 L1237.6 1206.68 L1237.01 1206.68 L1236.42 1206.68 L1235.84 1206.68 L1235.25 1206.68 L1234.66 1206.68 L1234.08 1206.68 L1233.49 1206.68 L1232.91 1206.68 L1232.32 1206.68 L1231.73 1206.68 L1231.15 1206.68 L1230.56 1206.68 L1229.97 1206.68 L1229.39 1206.68 L1228.8 1206.68 L1228.21 1206.68 L1227.63 1206.68 L1227.04 1206.68 L1226.45 1206.68 L1225.87 1206.68 L1225.28 1206.68 L1224.7 1206.68 L1224.11 1206.68 L1223.52 1206.68 L1222.94 1206.68 L1222.35 1206.68 L1221.76 1206.68 L1221.18 1206.68 L1220.59 1206.68 L1220 1206.68 L1219.42 1206.68 L1218.83 1206.68 L1218.24 1206.68 L1217.66 1206.68 L1217.07 1206.68 L1216.49 1206.68 L1215.9 1206.68 L1215.31 1206.68 L1214.73 1206.68 L1214.14 1206.68 L1213.55 1206.68 L1212.97 1206.68 L1212.38 1206.68 L1211.79 1206.68 L1211.21 1206.68 L1210.62 1206.68 L1210.03 1206.68 L1209.45 1206.68 L1208.86 1206.68 L1208.28 1206.68 L1207.69 1206.68 L1207.1 1206.68 L1206.52 1206.68 L1205.93 1206.68 L1205.34 1206.68 L1204.76 1206.68 L1204.17 1206.68 L1203.58 1206.68 L1203 1206.68 L1202.41 1206.68 L1201.83 1206.68 L1201.24 1206.68 L1200.65 1206.68 L1200.07 1206.68 L1199.48 1206.68 L1198.89 1206.68 L1198.31 1206.68 L1197.72 1206.68 L1197.13 1206.68 L1196.55 1206.68 L1195.96 1206.68 L1195.37 1206.68 L1194.79 1206.68 L1194.2 1206.68 L1193.62 1206.68 L1193.03 1206.68 L1192.44 1206.68 L1191.86 1206.68 L1191.27 1206.68 L1190.68 1206.68 L1190.1 1206.68 L1189.51 1206.68 L1188.92 1206.68 L1188.34 1206.68 L1187.75 1206.68 L1187.16 1206.68 L1186.58 1206.68 L1185.99 1206.68 L1185.41 1206.68 L1184.82 1206.68 L1184.23 1206.68 L1183.65 1206.68 L1183.06 1206.68 L1182.47 1206.68 L1181.89 1206.68 L1181.3 1206.68 L1180.71 1206.68 L1180.13 1206.68 L1179.54 1206.68 L1178.96 1206.68 L1178.37 1206.68 L1177.78 1206.68 L1177.2 1206.68 L1176.61 1206.68 L1176.02 1206.68 L1175.44 1206.68 L1174.85 1206.68 L1174.26 1206.68 L1173.68 1206.68 L1173.09 1206.68 L1172.5 1206.68 L1171.92 1206.68 L1171.33 1206.68 L1170.75 1206.68 L1170.16 1206.68 L1169.57 1206.68 L1168.99 1206.68 L1168.4 1206.68 L1167.81 1206.68 L1167.23 1206.68 L1166.64 1206.68 L1166.05 1206.68 L1165.47 1206.68 L1164.88 1206.68 L1164.29 1206.68 L1163.71 1206.68 L1163.12 1206.68 L1162.54 1206.68 L1161.95 1206.68 L1161.36 1206.68 L1160.78 1206.68 L1160.19 1206.68 L1159.6 1206.68 L1159.02 1206.68 L1158.43 1206.68 L1157.84 1206.68 L1157.26 1206.68 L1156.67 1206.68 L1156.09 1206.68 L1155.5 1206.68 L1154.91 1206.68 L1154.33 1206.68 L1153.74 1206.68 L1153.15 1206.68 L1152.57 1206.68 L1151.98 1206.68 L1151.39 1206.68 L1150.81 1206.68 L1150.22 1206.68 L1149.63 1206.68 L1149.05 1206.68 L1148.46 1206.68 L1147.88 1206.68 L1147.29 1206.68 L1146.7 1206.68 L1146.12 1206.68 L1145.53 1206.68 L1144.94 1206.68 L1144.36 1206.68 L1143.77 1206.68 L1143.18 1206.68 L1142.6 1206.68 L1142.01 1206.68 L1141.42 1206.68 L1140.84 1206.68 L1140.25 1206.68 L1139.67 1206.68 L1139.08 1206.68 L1138.49 1206.68 L1137.91 1206.68 L1137.32 1206.68 L1136.73 1206.68 L1136.15 1206.68 L1135.56 1206.68 L1134.97 1206.68 L1134.39 1206.68 L1133.8 1206.68 L1133.21 1206.68 L1132.63 1206.68 L1132.04 1206.68 L1131.46 1206.68 L1130.87 1206.68 L1130.28 1206.68 L1129.7 1206.68 L1129.11 1206.68 L1128.52 1206.68 L1127.94 1206.68 L1127.35 1206.68 L1126.76 1206.68 L1126.18 1206.68 L1125.59 1206.68 L1125.01 1206.68 L1124.42 1206.68 L1123.83 1206.68 L1123.25 1206.68 L1122.66 1206.68 L1122.07 1206.68 L1121.49 1206.68 L1120.9 1206.68 L1120.31 1206.68 L1119.73 1206.68 L1119.14 1206.68 L1118.55 1206.68 L1117.97 1206.68 L1117.38 1206.68 L1116.8 1206.68 L1116.21 1206.68 L1115.62 1206.68 L1115.04 1206.68 L1114.45 1206.68 L1113.86 1206.68 L1113.28 1206.68 L1112.69 1206.68 L1112.1 1206.68 L1111.52 1206.68 L1110.93 1206.68 L1110.34 1206.68 L1109.76 1206.68 L1109.17 1206.68 L1108.59 1206.68 L1108 1206.68 L1107.41 1206.68 L1106.83 1206.68 L1106.24 1206.68 L1105.65 1206.68 L1105.07 1206.68 L1104.48 1206.68 L1103.89 1206.68 L1103.31 1206.68 L1102.72 1206.68 L1102.14 1206.68 L1101.55 1206.68 L1100.96 1206.68 L1100.38 1206.68 L1099.79 1206.68 L1099.2 1206.68 L1098.62 1206.68 L1098.03 1206.68 L1097.44 1206.68 L1096.86 1206.68 L1096.27 1206.68 L1095.68 1206.68 L1095.1 1206.68 L1094.51 1206.68 L1093.93 1206.68 L1093.34 1206.68 L1092.75 1206.68 L1092.17 1206.68 L1091.58 1206.68 L1090.99 1206.68 L1090.41 1206.68 L1089.82 1206.68 L1089.23 1206.68 L1088.65 1206.68 L1088.06 1206.68 L1087.47 1206.68 L1086.89 1206.68 L1086.3 1206.68 L1085.72 1206.68 L1085.13 1206.68 L1084.54 1206.68 L1083.96 1206.68 L1083.37 1206.68 L1082.78 1206.68 L1082.2 1206.68 L1081.61 1206.68 L1081.02 1206.68 L1080.44 1206.68 L1079.85 1206.68 L1079.26 1206.68 L1078.68 1206.68 L1078.09 1206.68 L1077.51 1206.68 L1076.92 1206.68 L1076.33 1206.68 L1075.75 1206.68 L1075.16 1206.68 L1074.57 1206.68 L1073.99 1206.68 L1073.4 1206.68 L1072.81 1206.68 L1072.23 1206.68 L1071.64 1206.68 L1071.06 1206.68 L1070.47 1206.68 L1069.88 1206.68 L1069.3 1206.68 L1068.71 1206.68 L1068.12 1206.68 L1067.54 1206.68 L1066.95 1206.68 L1066.36 1206.68 L1065.78 1206.68 L1065.19 1206.68 L1064.6 1206.68 L1064.02 1206.68 L1063.43 1206.68 L1062.85 1206.68 L1062.26 1206.68 L1061.67 1206.68 L1061.09 1206.68 L1060.5 1206.68 L1059.91 1206.68 L1059.33 1206.68 L1058.74 1206.68 L1058.15 1206.68 L1057.57 1206.68 L1056.98 1206.68 L1056.39 1206.68 L1055.81 1206.68 L1055.22 1206.68 L1054.64 1206.68 L1054.05 1206.68 L1053.46 1206.68 L1052.88 1206.68 L1052.29 1206.68 L1051.7 1206.68 L1051.12 1206.68 L1050.53 1206.68 L1049.94 1206.68 L1049.36 1206.68 L1048.77 1206.68 L1048.19 1206.68 L1047.6 1206.68 L1047.01 1206.68 L1046.43 1206.68 L1045.84 1206.68 L1045.25 1206.68 L1044.67 1206.68 L1044.08 1206.68 L1043.49 1206.68 L1042.91 1206.68 L1042.32 1206.68 L1041.73 1206.68 L1041.15 1206.68 L1040.56 1206.68 L1039.98 1206.68 L1039.39 1206.68 L1038.8 1206.68 L1038.22 1206.68 L1037.63 1206.68 L1037.04 1206.68 L1036.46 1206.68 L1035.87 1206.68 L1035.28 1206.68 L1034.7 1206.68 L1034.11 1206.68 L1033.52 1206.68 L1032.94 1206.68 L1032.35 1206.68 L1031.77 1206.68 L1031.18 1206.68 L1030.59 1206.68 L1030.01 1206.68 L1029.42 1206.68 L1028.83 1206.68 L1028.25 1206.68 L1027.66 1206.68 L1027.07 1206.68 L1026.49 1206.68 L1025.9 1206.68 L1025.32 1206.68 L1024.73 1206.68 L1024.14 1206.68 L1023.56 1206.68 L1022.97 1206.68 L1022.38 1206.68 L1021.8 1206.68 L1021.21 1206.68 L1020.62 1206.68 L1020.04 1206.68 L1019.45 1206.68 L1018.86 1206.68 L1018.28 1206.68 L1017.69 1206.68 L1017.11 1206.68 L1016.52 1206.68 L1015.93 1206.68 L1015.35 1206.68 L1014.76 1206.68 L1014.17 1206.68 L1013.59 1206.68 L1013 1206.68 L1012.41 1206.68 L1011.83 1206.68 L1011.24 1206.68 L1010.65 1206.68 L1010.07 1206.68 L1009.48 1206.68 L1008.9 1206.68 L1008.31 1206.68 L1007.72 1206.68 L1007.14 1206.68 L1006.55 1206.68 L1005.96 1206.68 L1005.38 1206.68 L1004.79 1206.68 L1004.2 1206.68 L1003.62 1206.68 L1003.03 1206.68 L1002.44 1206.68 L1001.86 1206.68 L1001.27 1206.68 L1000.69 1206.68 L1000.1 1206.68 L999.513 1206.68 L998.926 1206.68 L998.34 1206.68 L997.754 1206.68 L997.167 1206.68 L996.581 1206.68 L995.994 1206.68 L995.408 1206.68 L994.822 1206.68 L994.235 1206.68 L993.649 1206.68 L993.062 1206.68 L992.476 1206.68 L991.889 1206.68 L991.303 1206.68 L990.717 1206.68 L990.13 1206.68 L989.544 1206.68 L988.957 1206.68 L988.371 1206.68 L987.785 1206.68 L987.198 1206.68 L986.612 1206.68 L986.025 1206.68  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.1 986.612,1207.1 987.198,1207.1 987.785,1207.1 988.371,1207.1 988.957,1207.1 989.544,1207.1 990.13,1207.1 990.717,1207.1 991.303,1207.1 991.889,1207.1 992.476,1207.1 993.062,1207.1 993.649,1207.1 994.235,1207.1 994.822,1207.1 995.408,1207.1 995.994,1207.1 996.581,1207.1 997.167,1207.1 997.754,1207.1 998.34,1207.1 998.926,1207.1 999.513,1207.1 1000.1,1207.1 1000.69,1207.1 1001.27,1207.1 1001.86,1207.1 1002.44,1207.1 1003.03,1207.1 1003.62,1207.1 1004.2,1207.1 1004.79,1207.1 1005.38,1207.1 1005.96,1207.1 1006.55,1207.1 1007.14,1207.1 1007.72,1207.1 1008.31,1207.1 1008.9,1207.1 1009.48,1207.1 1010.07,1207.1 1010.65,1207.1 1011.24,1207.1 1011.83,1207.1 1012.41,1207.1 1013,1207.1 1013.59,1207.1 1014.17,1207.1 1014.76,1207.1 1015.35,1207.1 1015.93,1207.1 1016.52,1207.1 1017.11,1207.1 1017.69,1207.1 1018.28,1207.1 1018.86,1207.1 1019.45,1207.1 1020.04,1207.1 1020.62,1207.1 1021.21,1207.1 1021.8,1207.1 1022.38,1207.1 1022.97,1207.1 1023.56,1207.1 1024.14,1207.1 1024.73,1207.1 1025.32,1207.1 1025.9,1207.1 1026.49,1207.1 1027.07,1207.1 1027.66,1207.1 1028.25,1207.1 1028.83,1207.1 1029.42,1207.1 1030.01,1207.1 1030.59,1207.1 1031.18,1207.1 1031.77,1207.1 1032.35,1207.1 1032.94,1207.1 1033.52,1207.1 1034.11,1207.1 1034.7,1207.1 1035.28,1207.1 1035.87,1207.1 1036.46,1207.1 1037.04,1207.1 1037.63,1207.1 1038.22,1207.1 1038.8,1207.1 1039.39,1207.1 1039.98,1207.1 1040.56,1207.1 1041.15,1207.1 1041.73,1207.1 1042.32,1207.1 1042.91,1207.1 1043.49,1207.1 1044.08,1207.1 1044.67,1207.1 1045.25,1207.1 1045.84,1207.1 1046.43,1207.1 1047.01,1207.1 1047.6,1207.1 1048.19,1207.1 1048.77,1207.1 1049.36,1207.1 1049.94,1207.1 1050.53,1207.1 1051.12,1207.1 1051.7,1207.1 1052.29,1207.1 1052.88,1207.1 1053.46,1207.1 1054.05,1207.1 1054.64,1207.1 1055.22,1207.1 1055.81,1207.1 1056.39,1207.1 1056.98,1207.1 1057.57,1207.1 1058.15,1207.1 1058.74,1207.1 1059.33,1207.1 1059.91,1207.1 1060.5,1207.1 1061.09,1207.1 1061.67,1207.1 1062.26,1207.1 1062.85,1207.1 1063.43,1207.1 1064.02,1207.1 1064.6,1207.1 1065.19,1207.1 1065.78,1207.1 1066.36,1207.1 1066.95,1207.1 1067.54,1207.1 1068.12,1207.1 1068.71,1207.1 1069.3,1207.1 1069.88,1207.1 1070.47,1207.1 1071.06,1207.1 1071.64,1207.1 1072.23,1207.1 1072.81,1207.1 1073.4,1207.1 1073.99,1207.1 1074.57,1207.1 1075.16,1207.1 1075.75,1207.1 1076.33,1207.1 1076.92,1207.1 1077.51,1207.1 1078.09,1207.1 1078.68,1207.1 1079.26,1207.1 1079.85,1207.1 1080.44,1207.1 1081.02,1207.1 1081.61,1207.1 1082.2,1207.1 1082.78,1207.1 1083.37,1207.1 1083.96,1207.1 1084.54,1207.1 1085.13,1207.1 1085.72,1207.1 1086.3,1207.1 1086.89,1207.1 1087.47,1207.1 1088.06,1207.1 1088.65,1207.1 1089.23,1207.1 1089.82,1207.1 1090.41,1207.1 1090.99,1207.1 1091.58,1207.1 1092.17,1207.1 1092.75,1207.1 1093.34,1207.1 1093.93,1207.1 1094.51,1207.1 1095.1,1207.1 1095.68,1207.1 1096.27,1207.1 1096.86,1207.1 1097.44,1207.1 1098.03,1207.1 1098.62,1207.1 1099.2,1207.1 1099.79,1207.1 1100.38,1207.1 1100.96,1207.1 1101.55,1207.1 1102.14,1207.1 1102.72,1207.1 1103.31,1207.1 1103.89,1207.1 1104.48,1207.1 1105.07,1207.1 1105.65,1207.1 1106.24,1207.1 1106.83,1207.1 1107.41,1207.1 1108,1207.1 1108.59,1207.1 1109.17,1207.1 1109.76,1207.1 1110.34,1207.1 1110.93,1207.1 1111.52,1207.1 1112.1,1207.1 1112.69,1207.1 1113.28,1207.1 1113.86,1207.1 1114.45,1207.1 1115.04,1207.1 1115.62,1207.1 1116.21,1207.1 1116.8,1207.1 1117.38,1207.1 1117.97,1207.1 1118.55,1207.1 1119.14,1207.1 1119.73,1207.1 1120.31,1207.1 1120.9,1207.1 1121.49,1207.1 1122.07,1207.1 1122.66,1207.1 1123.25,1207.1 1123.83,1207.1 1124.42,1207.1 1125.01,1207.1 1125.59,1207.1 1126.18,1207.1 1126.76,1207.1 1127.35,1207.1 1127.94,1207.1 1128.52,1207.1 1129.11,1207.1 1129.7,1207.1 1130.28,1207.1 1130.87,1207.1 1131.46,1207.1 1132.04,1207.1 1132.63,1207.1 1133.21,1207.1 1133.8,1207.1 1134.39,1207.1 1134.97,1207.1 1135.56,1207.1 1136.15,1207.1 1136.73,1207.1 1137.32,1207.1 1137.91,1207.1 1138.49,1207.1 1139.08,1207.1 1139.67,1207.1 1140.25,1207.1 1140.84,1207.1 1141.42,1207.1 1142.01,1207.1 1142.6,1207.1 1143.18,1207.1 1143.77,1207.1 1144.36,1207.1 1144.94,1207.1 1145.53,1207.1 1146.12,1207.1 1146.7,1207.1 1147.29,1207.1 1147.88,1207.1 1148.46,1207.1 1149.05,1207.1 1149.63,1207.1 1150.22,1207.1 1150.81,1207.1 1151.39,1207.1 1151.98,1207.1 1152.57,1207.1 1153.15,1207.1 1153.74,1207.1 1154.33,1207.1 1154.91,1207.1 1155.5,1207.1 1156.09,1207.1 1156.67,1207.1 1157.26,1207.1 1157.84,1207.1 1158.43,1207.1 1159.02,1207.1 1159.6,1207.1 1160.19,1207.1 1160.78,1207.1 1161.36,1207.1 1161.95,1207.1 1162.54,1207.1 1163.12,1207.1 1163.71,1207.1 1164.29,1207.1 1164.88,1207.1 1165.47,1207.1 1166.05,1207.1 1166.64,1207.1 1167.23,1207.1 1167.81,1207.1 1168.4,1207.1 1168.99,1207.1 1169.57,1207.1 1170.16,1207.1 1170.75,1207.1 1171.33,1207.1 1171.92,1207.1 1172.5,1207.1 1173.09,1207.1 1173.68,1207.1 1174.26,1207.1 1174.85,1207.1 1175.44,1207.1 1176.02,1207.1 1176.61,1207.1 1177.2,1207.1 1177.78,1207.1 1178.37,1207.1 1178.96,1207.1 1179.54,1207.1 1180.13,1207.1 1180.71,1207.1 1181.3,1207.1 1181.89,1207.1 1182.47,1207.1 1183.06,1207.1 1183.65,1207.1 1184.23,1207.1 1184.82,1207.1 1185.41,1207.1 1185.99,1207.1 1186.58,1207.1 1187.16,1207.1 1187.75,1207.1 1188.34,1207.1 1188.92,1207.1 1189.51,1207.1 1190.1,1207.1 1190.68,1207.1 1191.27,1207.1 1191.86,1207.1 1192.44,1207.1 1193.03,1207.1 1193.62,1207.1 1194.2,1207.1 1194.79,1207.1 1195.37,1207.1 1195.96,1207.1 1196.55,1207.1 1197.13,1207.1 1197.72,1207.1 1198.31,1207.1 1198.89,1207.1 1199.48,1207.1 1200.07,1207.1 1200.65,1207.1 1201.24,1207.1 1201.83,1207.1 1202.41,1207.1 1203,1207.1 1203.58,1207.1 1204.17,1207.1 1204.76,1207.1 1205.34,1207.1 1205.93,1207.1 1206.52,1207.1 1207.1,1207.1 1207.69,1207.1 1208.28,1207.1 1208.86,1207.1 1209.45,1207.1 1210.03,1207.1 1210.62,1207.1 1211.21,1207.1 1211.79,1207.1 1212.38,1207.1 1212.97,1207.1 1213.55,1207.1 1214.14,1207.1 1214.73,1207.1 1215.31,1207.1 1215.9,1207.1 1216.49,1207.1 1217.07,1207.1 1217.66,1207.1 1218.24,1207.1 1218.83,1207.1 1219.42,1207.1 1220,1207.1 1220.59,1207.1 1221.18,1207.1 1221.76,1207.1 1222.35,1207.1 1222.94,1207.1 1223.52,1207.1 1224.11,1207.1 1224.7,1207.1 1225.28,1207.1 1225.87,1207.1 1226.45,1207.1 1227.04,1207.1 1227.63,1207.1 1228.21,1207.1 1228.8,1207.1 1229.39,1207.1 1229.97,1207.1 1230.56,1207.1 1231.15,1207.1 1231.73,1207.1 1232.32,1207.1 1232.91,1207.1 1233.49,1207.1 1234.08,1207.1 1234.66,1207.1 1235.25,1207.1 1235.84,1207.1 1236.42,1207.1 1237.01,1207.1 1237.6,1207.1 1238.18,1207.1 1238.77,1207.1 1239.36,1207.1 1239.94,1207.1 1240.53,1207.1 1241.11,1207.1 1241.7,1207.1 1242.29,1207.1 1242.87,1207.1 1243.46,1207.1 1244.05,1207.1 1244.63,1207.1 1245.22,1207.1 1245.81,1207.1 1246.39,1207.1 1246.98,1207.1 1247.57,1207.1 1248.15,1207.1 1248.74,1207.1 1249.32,1207.1 1249.91,1207.1 1250.5,1207.1 1251.08,1207.1 1251.67,1207.1 1252.26,1207.1 1252.84,1207.1 1253.43,1207.1 1254.02,1207.1 1254.6,1207.1 1255.19,1207.1 1255.78,1207.1 1256.36,1207.1 1256.95,1207.1 1257.53,1207.1 1258.12,1207.1 1258.71,1207.1 1259.29,1207.1 1259.88,1207.1 1260.47,1207.1 1261.05,1207.1 1261.64,1207.1 1262.23,1207.1 1262.81,1207.1 1263.4,1207.1 1263.98,1207.1 1264.57,1207.1 1265.16,1207.1 1265.74,1207.1 1266.33,1207.1 1266.92,1207.1 1267.5,1207.1 1268.09,1207.1 1268.68,1207.1 1269.26,1207.1 1269.85,1207.1 1270.44,1207.1 1271.02,1207.1 1271.61,1207.1 1272.19,1207.1 1272.78,1207.1 1273.37,1207.1 1273.95,1207.1 1274.54,1207.1 1275.13,1207.1 1275.71,1207.1 1276.3,1207.1 1276.89,1207.1 1277.47,1207.1 1278.06,1207.1 1278.65,1207.1 1279.23,1207.1 1279.82,1207.1 1280.4,1207.1 1280.99,1207.1 1281.58,1207.1 1282.16,1207.1 1282.75,1207.1 1283.34,1207.1 1283.92,1207.1 1284.51,1207.1 1285.1,1207.1 1285.68,1207.1 1286.27,1207.1 1286.86,1207.1 1287.44,1207.1 1288.03,1207.1 1288.61,1207.1 1289.2,1207.1 1289.79,1207.1 1290.37,1207.1 1290.96,1207.1 1291.55,1207.1 1292.13,1207.1 1292.72,1207.1 1293.31,1207.1 1293.89,1207.1 1294.48,1207.1 1295.06,1207.1 1295.65,1207.1 1296.24,1207.1 1296.82,1207.1 1297.41,1207.1 1298,1207.1 1298.58,1207.1 1299.17,1207.1 1299.76,1207.1 1300.34,1207.1 1300.93,1207.1 1301.52,1207.1 1302.1,1207.1 1302.69,1207.1 1303.27,1207.1 1303.86,1207.1 1304.45,1207.1 1305.03,1207.1 1305.62,1207.1 1306.21,1207.1 1306.79,1207.1 1307.38,1207.1 1307.97,1207.1 1308.55,1207.1 1309.14,1207.1 1309.73,1207.1 1310.31,1207.1 1310.9,1207.1 1311.48,1207.1 1312.07,1207.1 1312.66,1207.1 1313.24,1207.1 1313.83,1207.1 1314.42,1207.1 1315,1207.1 1315.59,1207.1 1316.18,1207.1 1316.76,1207.1 1317.35,1207.1 1317.93,1207.1 1318.52,1207.1 1319.11,1207.1 1319.69,1207.1 1320.28,1207.1 1320.87,1207.1 1321.45,1207.1 1322.04,1207.1 1322.63,1207.1 1323.21,1207.1 1323.8,1207.1 1324.39,1207.1 1324.97,1207.1 1325.56,1207.1 1326.14,1207.1 1326.73,1207.1 1327.32,1207.1 1327.9,1207.1 1328.49,1207.1 1329.08,1207.1 1329.66,1207.1 1330.25,1207.1 1330.84,1207.1 1331.42,1207.1 1332.01,1207.1 1332.6,1207.1 1333.18,1207.1 1333.77,1207.1 1334.35,1207.1 1334.94,1207.1 1335.53,1207.1 1336.11,1207.1 1336.7,1207.1 1337.29,1207.1 1337.87,1207.1 1338.46,1207.1 1339.05,1207.1 1339.63,1207.1 1340.22,1207.1 1340.8,1207.1 1341.39,1207.1 1341.98,1207.1 1342.56,1207.1 1343.15,1207.1 1343.74,1207.1 1344.32,1207.1 1344.91,1207.1 1345.5,1207.1 1346.08,1207.1 1346.67,1207.1 1347.26,1207.1 1347.84,1207.1 1348.43,1207.1 1349.01,1207.1 1349.6,1207.1 1350.19,1207.1 1350.77,1207.1 1351.36,1207.1 1351.95,1207.1 1352.53,1207.1 1353.12,1207.1 1353.71,1207.1 1354.29,1207.1 1354.88,1207.1 1355.47,1207.1 1356.05,1207.1 1356.64,1207.1 1357.22,1207.1 1357.81,1207.1 1358.4,1207.1 1358.98,1207.1 1359.57,1207.1 1360.16,1207.1 1360.74,1207.1 1361.33,1207.1 1361.92,1207.1 1362.5,1207.1 1363.09,1207.1 1363.68,1207.1 1364.26,1207.1 1364.85,1207.1 1365.43,1207.1 1366.02,1207.1 1366.61,1207.1 1367.19,1207.1 1367.78,1207.1 1368.37,1207.1 1368.95,1207.1 1369.54,1207.1 1370.13,1207.1 1370.71,1207.1 1371.3,1207.1 1371.88,1207.1 1372.47,1207.1 1373.06,1207.1 1373.64,1207.1 1374.23,1207.1 1374.82,1207.1 1375.4,1207.1 1375.99,1207.1 1376.58,1207.1 1377.16,1207.1 1377.75,1207.1 1378.34,1207.1 1378.92,1207.1 1379.51,1207.1 1380.09,1207.1 1380.68,1207.1 1381.27,1207.1 1381.85,1207.1 1382.44,1207.1 1383.03,1207.1 1383.61,1207.1 1384.2,1207.1 1384.79,1207.1 1385.37,1207.1 1385.96,1207.1 1386.55,1207.1 1387.13,1207.1 1387.72,1207.1 1388.3,1207.1 1388.89,1207.1 1389.48,1207.1 1390.06,1207.1 1390.65,1207.1 1391.24,1207.1 1391.82,1207.1 1392.41,1207.1 1393,1207.1 1393.58,1207.1 1394.17,1207.1 1394.75,1207.1 1395.34,1207.1 1395.93,1207.1 1396.51,1207.1 1397.1,1207.1 1397.69,1207.1 1398.27,1207.1 1398.86,1207.1 1399.45,1207.1 1400.03,1207.1 1400.62,1207.1 1401.21,1207.1 1401.79,1207.1 1402.38,1207.1 1402.96,1207.1 1403.55,1207.1 1404.14,1207.1 1404.72,1207.1 1405.31,1207.1 1405.9,1207.1 1406.48,1207.1 1407.07,1207.1 1407.66,1207.1 1408.24,1207.1 1408.83,1207.1 1409.42,1207.1 1410,1207.1 1410.59,1207.1 1411.17,1207.1 1411.76,1207.1 1412.35,1207.1 1412.93,1207.1 1413.52,1207.1 1414.11,1207.1 1414.69,1207.1 1415.28,1207.1 1415.87,1207.1 1416.45,1207.1 1417.04,1207.1 1417.63,1207.1 1418.21,1207.1 1418.8,1207.1 1419.38,1207.1 1419.97,1207.1 1420.56,1207.1 1421.14,1207.1 1421.73,1207.1 1422.32,1207.1 1422.9,1207.1 1423.49,1207.1 1424.08,1207.1 1424.66,1207.1 1425.25,1207.1 1425.83,1207.1 1426.42,1207.1 1427.01,1207.1 1427.59,1207.1 1428.18,1207.1 1428.77,1207.1 1429.35,1207.1 1429.94,1207.1 1430.53,1207.1 1431.11,1207.1 1431.7,1207.1 1432.29,1207.1 1432.87,1207.1 1433.46,1207.1 1434.04,1207.1 1434.63,1207.1 1435.22,1207.1 1435.8,1207.1 1436.39,1207.1 1436.98,1207.1 1437.56,1207.1 1438.15,1207.1 1438.74,1207.1 1439.32,1207.1 1439.91,1207.1 1440.5,1207.1 1441.08,1207.1 1441.67,1207.1 1442.25,1207.1 1442.84,1207.1 1443.43,1207.1 1444.01,1207.1 1444.6,1207.1 1445.19,1207.1 1445.77,1207.1 1446.36,1207.1 1446.95,1207.1 1447.53,1207.1 1448.12,1207.1 1448.7,1207.1 1449.29,1207.1 1449.88,1207.1 1450.46,1207.1 1451.05,1207.1 1451.64,1207.1 1452.22,1207.1 1452.81,1207.1 1453.4,1207.1 1453.98,1207.1 1454.57,1207.1 1455.16,1207.1 1455.74,1207.1 1456.33,1207.1 1456.91,1207.1 1457.5,1207.1 1458.09,1207.1 1458.67,1207.1 1459.26,1207.1 1459.85,1207.1 1460.43,1207.1 1461.02,1207.1 1461.61,1207.1 1462.19,1207.1 1462.78,1207.1 1463.37,1207.1 1463.95,1207.1 1464.54,1207.1 1465.12,1207.1 1465.71,1207.1 1466.3,1207.1 1466.88,1207.1 1467.47,1207.1 1468.06,1207.1 1468.64,1207.1 1469.23,1207.1 1469.82,1207.1 1470.4,1207.1 1470.99,1207.1 1471.57,1207.1 1472.16,1207.1 1472.75,1207.1 1473.33,1207.1 1473.92,1207.1 1474.51,1207.1 1475.09,1207.1 1475.68,1207.1 1476.27,1207.1 1476.85,1207.1 1477.44,1207.1 1478.03,1207.1 1478.61,1207.1 1479.2,1207.1 1479.78,1207.1 1480.37,1207.1 1480.96,1207.1 1481.54,1207.1 1482.13,1207.1 1482.72,1207.1 1483.3,1207.1 1483.89,1207.1 1484.48,1207.1 1485.06,1207.1 1485.65,1207.1 1486.24,1207.1 1486.82,1207.1 1487.41,1207.1 1487.99,1207.1 1488.58,1207.1 1489.17,1207.1 1489.75,1207.1 1490.34,1207.1 1490.93,1207.1 1491.51,1207.1 1492.1,1207.1 1492.69,1207.1 1493.27,1207.1 1493.86,1207.1 1494.45,1207.1 1495.03,1207.1 1495.62,1207.1 1496.2,1207.1 1496.79,1207.1 1497.38,1207.1 1497.96,1207.1 1498.55,1207.1 1499.14,1207.1 1499.72,1207.1 1500.31,1207.1 1500.9,1207.1 1501.48,1207.1 1502.07,1207.1 1502.65,1207.1 1503.24,1207.1 1503.83,1207.1 1504.41,1207.1 1505,1207.1 1505.59,1207.1 1506.17,1207.1 1506.76,1207.1 1507.35,1207.1 1507.93,1207.1 1508.52,1207.1 1509.11,1207.1 1509.69,1207.1 1510.28,1207.1 1510.86,1207.1 1511.45,1207.1 1512.04,1207.1 1512.62,1207.1 1513.21,1207.1 1513.8,1207.1 1514.38,1207.1 1514.97,1207.1 1515.56,1207.1 1516.14,1207.1 1516.73,1207.1 1517.32,1207.1 1517.9,1207.1 1518.49,1207.1 1519.07,1207.1 1519.66,1207.1 1520.25,1207.1 1520.83,1207.1 1521.42,1207.1 1522.01,1207.1 1522.59,1207.1 1523.18,1207.1 1523.77,1207.1 1524.35,1207.1 1524.94,1207.1 1525.52,1207.1 1526.11,1207.1 1526.7,1207.1 1527.28,1207.1 1527.87,1207.1 1528.46,1207.1 1529.04,1207.1 1529.63,1207.1 1530.22,1207.1 1530.8,1207.1 1531.39,1207.1 1531.98,1207.1 1532.56,1207.1 1533.15,1207.1 1533.73,1207.1 1534.32,1207.1 1534.91,1207.1 1535.49,1207.1 1536.08,1207.1 1536.67,1207.1 1537.25,1207.1 1537.84,1207.1 1538.43,1207.1 1539.01,1207.1 1539.6,1207.1 1540.19,1207.1 1540.77,1207.1 1541.36,1207.1 1541.94,1207.1 1542.53,1207.1 1543.12,1207.1 1543.7,1207.1 1544.29,1207.1 1544.88,1207.1 1545.46,1207.1 1546.05,1207.1 1546.64,1207.1 1547.22,1207.1 1547.81,1207.1 1548.4,1207.1 1548.98,1207.1 1549.57,1207.1 1550.15,1207.1 1550.74,1207.1 1551.33,1207.1 1551.91,1207.1 1552.5,1207.1 1553.09,1207.1 1553.67,1207.1 1554.26,1207.1 1554.85,1207.1 1555.43,1207.1 1556.02,1207.1 1556.6,1207.1 1557.19,1207.1 1557.78,1207.1 1558.36,1207.1 1558.95,1207.1 1559.54,1207.1 1560.12,1207.1 1560.71,1207.1 1561.3,1207.1 1561.88,1207.1 1562.47,1207.1 1563.06,1207.1 1563.64,1207.1 1564.23,1207.1 1564.81,1207.1 1565.4,1207.1 1565.99,1207.1 1566.57,1207.1 1567.16,1207.1 1567.75,1207.1 1568.33,1207.1 1568.92,1207.1 1569.51,1207.1 1570.09,1207.1 1570.68,1207.1 1571.27,1207.1 1571.85,1207.1 1572.44,1207.1 1573.02,1207.1 1573.61,1207.1 1574.2,1207.1 1574.78,1207.1 1575.37,1207.1 1575.96,1207.1 1576.54,1207.1 1577.13,1207.1 1577.72,1207.1 1578.3,1207.1 1578.89,1207.1 1579.47,1207.1 1580.06,1207.1 1580.65,1207.1 1581.23,1207.1 1581.82,1207.1 1582.41,1207.1 1582.99,1207.1 1583.58,1207.1 1584.17,1207.1 1584.75,1207.1 1585.34,1207.1 1585.93,1207.1 1586.51,1207.1 1587.1,1207.1 1587.68,1207.1 1588.27,1207.1 1588.86,1207.1 1589.44,1207.1 1590.03,1207.1 1590.62,1207.1 1591.2,1207.1 1591.79,1207.1 1592.38,1207.1 1592.96,1207.1 1593.55,1207.1 1594.14,1207.1 1594.72,1207.1 1595.31,1207.1 1595.89,1207.1 1596.48,1207.1 1597.07,1207.1 1597.65,1207.1 1598.24,1207.1 1598.83,1207.1 1599.41,1207.1 1600,1207.1 1600.59,1207.1 1601.17,1207.1 1601.76,1207.1 1602.34,1207.1 1602.93,1207.1 1603.52,1207.1 1604.1,1207.1 1604.69,1207.1 1605.28,1207.1 1605.86,1207.1 1606.45,1207.1 1607.04,1207.1 1607.62,1207.1 1608.21,1207.1 1608.8,1207.1 1609.38,1207.1 1609.97,1207.1 1610.55,1207.1 1611.14,1207.1 1611.73,1207.1 1612.31,1207.1 1612.9,1207.1 1613.49,1207.1 1614.07,1207.1 1614.66,1207.1 1615.25,1207.1 1615.83,1207.1 1616.42,1207.1 1617.01,1207.1 1617.59,1207.1 1618.18,1207.1 1618.76,1207.1 1619.35,1207.1 1619.94,1207.1 1620.52,1207.1 1621.11,1207.1 1621.7,1207.1 1622.28,1207.1 1622.87,1207.1 1623.46,1207.1 1624.04,1207.1 1624.63,1207.1 1625.22,1207.1 1625.8,1207.1 1626.39,1207.1 1626.97,1207.1 1627.56,1207.1 1628.15,1207.1 1628.73,1207.1 1629.32,1207.1 1629.91,1207.1 1630.49,1207.1 1631.08,1207.1 1631.67,1207.1 1632.25,1207.1 1632.84,1207.1 1633.42,1207.1 1634.01,1207.1 1634.6,1207.1 1635.18,1207.1 1635.77,1207.1 1636.36,1207.1 1636.94,1207.1 1637.53,1207.1 1638.12,1207.1 1638.7,1207.1 1639.29,1207.1 1639.88,1207.1 1640.46,1207.1 1641.05,1207.1 1641.63,1207.1 1642.22,1207.1 1642.81,1207.1 1643.39,1207.1 1643.98,1207.1 1644.57,1207.1 1645.15,1207.1 1645.74,1207.1 1646.33,1207.1 1646.91,1207.1 1647.5,1207.1 1648.09,1207.1 1648.67,1207.1 1649.26,1207.1 1649.84,1207.1 1650.43,1207.1 1651.02,1207.1 1651.6,1207.1 1652.19,1207.1 1652.78,1207.1 1653.36,1207.1 1653.95,1207.1 1654.54,1207.1 1655.12,1207.1 1655.71,1207.1 1656.29,1207.1 1656.88,1207.1 1657.47,1207.1 1658.05,1207.1 1658.64,1207.1 1659.23,1207.1 1659.81,1207.1 1660.4,1207.1 1660.99,1207.1 1661.57,1207.1 1662.16,1207.1 1662.75,1207.1 1663.33,1207.1 1663.92,1207.1 1664.5,1207.1 1665.09,1207.1 1665.68,1207.1 1666.26,1207.1 1666.85,1207.1 1667.44,1207.1 1668.02,1207.1 1668.61,1207.1 1669.2,1207.1 1669.78,1207.1 1670.37,1207.1 1670.96,1207.1 1671.54,1207.1 1672.13,1207.1 1672.71,1207.1 1673.3,1207.1 1673.89,1207.1 1674.47,1207.1 1675.06,1207.1 1675.65,1207.1 1676.23,1207.1 1676.82,1207.1 1677.41,1207.1 1677.99,1207.1 1678.58,1207.1 1679.17,1207.1 1679.75,1207.1 1680.34,1207.1 1680.92,1207.1 1681.51,1207.1 1682.1,1207.1 1682.68,1207.1 1683.27,1207.1 1683.86,1207.1 1684.44,1207.1 1685.03,1207.1 1685.62,1207.1 1686.2,1207.1 1686.79,1207.1 1687.37,1207.1 1687.96,1207.1 1688.55,1207.1 1689.13,1207.1 1689.72,1207.1 1690.31,1207.1 1690.89,1207.1 1691.48,1207.1 1692.07,1207.1 1692.65,1207.1 1693.24,1207.1 1693.83,1207.1 1694.41,1207.1 1695,1207.1 1695.58,1207.1 1696.17,1207.1 1696.76,1207.1 1697.34,1207.1 1697.93,1207.1 1698.52,1207.1 1699.1,1207.1 1699.69,1207.1 1700.28,1207.1 1700.86,1207.1 1701.45,1207.1 1702.04,1207.1 1702.62,1207.1 1703.21,1207.1 1703.79,1207.1 1704.38,1207.1 1704.97,1207.1 1705.55,1207.1 1706.14,1207.1 1706.73,1207.1 1707.31,1207.1 1707.9,1207.1 1708.49,1207.1 1709.07,1207.1 1709.66,1207.1 1710.24,1207.1 1710.83,1207.1 1711.42,1207.1 1712,1207.1 1712.59,1207.1 1713.18,1207.1 1713.76,1207.1 1714.35,1207.1 1714.94,1207.1 1715.52,1207.1 1716.11,1207.1 1716.7,1207.1 1717.28,1207.1 1717.87,1207.1 1718.45,1207.1 1719.04,1207.1 1719.63,1207.1 1720.21,1207.1 1720.8,1207.1 1721.39,1207.1 1721.97,1207.1 1722.56,1207.1 1723.15,1207.1 1723.73,1207.1 1724.32,1207.1 1724.91,1207.1 1725.49,1207.1 1726.08,1207.1 1726.66,1207.1 1727.25,1207.1 1727.84,1207.1 1728.42,1207.1 1729.01,1207.1 1729.6,1207.1 1730.18,1207.1 1730.77,1207.1 1731.36,1207.1 1731.94,1207.1 1732.53,1207.1 1733.11,1207.1 1733.7,1207.1 1734.29,1207.1 1734.87,1207.1 1735.46,1207.1 1736.05,1207.1 1736.63,1207.1 1737.22,1207.1 1737.81,1207.1 1738.39,1207.1 1738.98,1207.1 1739.57,1207.1 1740.15,1207.1 1740.74,1207.1 1741.32,1207.1 1741.91,1207.1 1742.5,1207.1 1743.08,1207.1 1743.67,1207.1 1744.26,1207.1 1744.84,1207.1 1745.43,1207.1 1746.02,1207.1 1746.6,1207.1 1747.19,1207.1 1747.78,1207.1 1748.36,1207.1 1748.95,1207.1 1749.53,1207.1 1750.12,1207.1 1750.71,1207.1 1751.29,1207.1 1751.88,1207.1 1752.47,1207.1 1753.05,1207.1 1753.64,1207.1 1754.23,1207.1 1754.81,1207.1 1755.4,1207.1 1755.99,1207.1 1756.57,1207.1 1757.16,1207.1 1757.74,1207.1 1758.33,1207.1 1758.92,1207.1 1759.5,1207.1 1760.09,1207.1 1760.68,1207.1 1761.26,1207.1 1761.85,1207.1 1762.44,1207.1 1763.02,1207.1 1763.61,1207.1 1764.19,1207.1 1764.78,1207.1 1765.37,1207.1 1765.95,1207.1 1766.54,1207.1 1767.13,1207.1 1767.71,1207.1 1768.3,1207.1 1768.89,1207.1 1769.47,1207.1 1770.06,1207.1 1770.65,1207.1 1771.23,1207.1 1771.82,1207.1 1772.4,1207.1 1772.99,1207.1 1773.58,1207.1 1774.16,1207.1 1774.75,1207.1 1775.34,1207.1 1775.92,1207.1 1776.51,1207.1 1777.1,1207.1 1777.68,1207.1 1778.27,1207.1 1778.86,1207.1 1779.44,1207.1 1780.03,1207.1 1780.61,1207.1 1781.2,1207.1 1781.79,1207.1 1782.37,1207.1 1782.96,1207.1 1783.55,1207.1 1784.13,1207.1 1784.72,1207.1 1785.31,1207.1 1785.89,1207.1 1786.48,1207.1 1787.06,1207.1 1787.65,1207.1 1788.24,1207.1 1788.82,1207.1 1789.41,1207.1 1790,1207.1 1790.58,1207.1 1791.17,1207.1 1791.76,1207.1 1792.34,1207.1 1792.93,1207.1 1793.52,1207.1 1794.1,1207.1 1794.69,1207.1 1795.27,1207.1 1795.86,1207.1 1796.45,1207.1 1797.03,1207.1 1797.62,1207.1 1798.21,1207.1 1798.79,1207.1 1799.38,1207.1 1799.97,1207.1 1800.55,1207.1 1801.14,1207.1 1801.73,1207.1 1802.31,1207.1 1802.9,1207.1 1803.48,1207.1 1804.07,1207.1 1804.66,1207.1 1805.24,1207.1 1805.83,1207.1 1806.42,1207.1 1807,1207.1 1807.59,1207.1 1808.18,1207.1 1808.76,1207.1 1809.35,1207.1 1809.94,1207.1 1810.52,1207.1 1811.11,1207.1 1811.69,1207.1 1812.28,1207.1 1812.87,1207.1 1813.45,1207.1 1814.04,1207.1 1814.63,1207.1 1815.21,1207.1 1815.8,1207.1 1816.39,1207.1 1816.97,1207.1 1817.56,1207.1 1818.14,1207.1 1818.73,1207.1 1819.32,1207.1 1819.9,1207.1 1820.49,1207.1 1821.08,1207.1 1821.66,1207.1 1822.25,1207.1 1822.84,1207.1 1823.42,1207.1 1824.01,1207.1 1824.6,1207.1 1825.18,1207.1 1825.77,1207.1 1826.35,1207.1 1826.94,1207.1 1827.53,1207.1 1828.11,1207.1 1828.7,1207.1 1829.29,1207.1 1829.87,1207.1 1830.46,1207.1 1831.05,1207.1 1831.63,1207.1 1832.22,1207.1 1832.81,1207.1 1833.39,1207.1 1833.98,1207.1 1834.56,1207.1 1835.15,1207.1 1835.74,1207.1 1836.32,1207.1 1836.91,1207.1 1837.5,1207.1 1838.08,1207.1 1838.67,1207.1 1839.26,1207.1 1839.84,1207.1 1840.43,1207.1 1841.01,1207.1 1841.6,1207.1 1842.19,1207.1 1842.77,1207.1 1843.36,1207.1 1843.95,1207.1 1844.53,1207.1 1845.12,1207.1 1845.71,1207.1 1846.29,1207.1 1846.88,1207.1 1847.47,1207.1 1848.05,1207.1 1848.64,1207.1 1849.22,1207.1 1849.81,1207.1 1850.4,1207.1 1850.98,1207.1 1851.57,1207.1 1852.16,1207.1 1852.74,1207.1 1853.33,1207.1 1853.92,1207.1 1854.5,1207.1 1855.09,1207.1 1855.68,1207.1 1856.26,1207.1 1856.85,1207.1 1857.43,1207.1 1858.02,1207.1 1858.61,1207.1 1859.19,1207.1 1859.78,1207.1 1860.37,1207.1 1860.95,1207.1 1861.54,1207.1 1862.13,1207.1 1862.71,1207.1 1863.3,1207.1 1863.88,1207.1 1864.47,1207.1 1865.06,1207.1 1865.64,1207.1 1866.23,1207.1 1866.82,1207.1 1867.4,1207.1 1867.99,1207.1 1868.58,1207.1 1869.16,1207.1 1869.75,1207.1 1870.34,1207.1 1870.92,1207.1 1871.51,1207.1 1872.09,1207.1 1872.68,1207.1 1873.27,1207.1 1873.85,1207.1 1874.44,1207.1 1875.03,1207.1 1875.61,1207.1 1876.2,1207.1 1876.79,1207.1 1877.37,1207.1 1877.96,1207.1 1878.55,1207.1 1879.13,1207.1 1879.72,1207.1 1880.3,1207.1 1880.89,1207.1 1881.48,1207.1 1882.06,1207.1 1882.65,1207.1 1883.24,1207.1 1883.82,1207.1 1884.41,1207.1 1885,1207.1 1885.58,1207.1 1886.17,1207.1 1886.76,1207.1 1887.34,1207.1 1887.93,1207.1 1888.51,1207.1 1889.1,1207.1 1889.69,1207.1 1890.27,1207.1 1890.86,1207.1 1891.45,1207.1 1892.03,1207.1 1892.62,1207.1 1893.21,1207.1 1893.79,1207.1 1894.38,1207.1 1894.96,1207.1 1895.55,1207.1 1896.14,1207.1 1896.72,1207.1 1897.31,1207.1 1897.9,1207.1 1898.48,1207.1 1899.07,1207.1 1899.66,1207.1 1900.24,1207.1 1900.83,1207.1 1901.42,1207.1 1902,1207.1 1902.59,1207.1 1903.17,1207.1 1903.76,1207.1 1904.35,1207.1 1904.93,1207.1 1905.52,1207.1 1906.11,1207.1 1906.69,1207.1 1907.28,1207.1 1907.87,1207.1 1908.45,1207.1 1909.04,1207.1 1909.63,1207.1 1910.21,1207.1 1910.8,1207.1 1911.38,1207.1 1911.97,1207.1 1912.56,1207.1 1913.14,1207.1 1913.73,1207.1 1914.32,1207.1 1914.9,1207.1 1915.49,1207.1 1916.08,1207.1 1916.66,1207.1 1917.25,1207.1 1917.83,1207.1 1918.42,1207.1 1919.01,1207.1 1919.59,1207.1 1920.18,1207.1 1920.77,1207.1 1921.35,1207.1 1921.94,1207.1 1922.53,1207.1 1923.11,1207.1 1923.7,1207.1 1924.29,1207.1 1924.87,1207.1 1925.46,1207.1 1926.04,1207.1 1926.63,1207.1 1927.22,1207.1 1927.8,1207.1 1928.39,1207.1 1928.98,1207.1 1929.56,1207.1 1930.15,1207.1 1930.74,1207.1 1931.32,1207.1 1931.91,1207.1 1932.5,1207.1 1933.08,1207.1 1933.67,1207.1 1934.25,1207.1 1934.84,1207.1 1935.43,1207.1 1936.01,1207.1 1936.6,1207.1 1937.19,1207.1 1937.77,1207.1 1938.36,1207.1 1938.95,1207.1 1939.53,1207.1 1940.12,1207.1 1940.71,1207.1 1941.29,1207.1 1941.88,1207.1 1942.46,1207.1 1943.05,1207.1 1943.64,1207.1 1944.22,1207.1 1944.81,1207.1 1945.4,1207.1 1945.98,1207.1 1946.57,1207.1 1947.16,1207.1 1947.74,1207.1 1948.33,1207.1 1948.91,1207.1 1949.5,1207.1 1950.09,1207.1 1950.67,1207.1 1951.26,1207.1 1951.85,1207.1 1952.43,1207.1 1953.02,1207.1 1953.61,1207.1 1954.19,1207.1 1954.78,1207.1 1955.37,1207.1 1955.95,1207.1 1956.54,1207.1 1957.12,1207.1 1957.71,1207.1 1958.3,1207.1 1958.88,1207.1 1959.47,1207.1 1960.06,1207.1 1960.64,1207.1 1961.23,1207.1 1961.82,1207.1 1962.4,1207.1 1962.99,1207.1 1963.58,1207.1 1964.16,1207.1 1964.75,1207.1 1965.33,1207.1 1965.92,1207.1 1966.51,1207.1 1967.09,1207.1 1967.68,1207.1 1968.27,1207.1 1968.85,1207.1 1969.44,1207.1 1970.03,1207.1 1970.61,1207.1 1971.2,1207.1 1971.78,1207.1 1972.37,1207.1 1972.96,1207.1 1973.54,1207.1 1974.13,1207.1 1974.72,1207.1 1975.3,1207.1 1975.89,1207.1 1976.48,1207.1 1977.06,1207.1 1977.65,1207.1 1978.24,1207.1 1978.82,1207.1 1979.41,1207.1 1979.99,1207.1 1980.58,1207.1 1981.17,1207.1 1981.75,1207.1 1982.34,1207.1 1982.93,1207.1 1983.51,1207.1 1984.1,1207.1 1984.69,1207.1 1985.27,1207.1 1985.86,1207.1 1986.45,1207.1 1987.03,1207.1 1987.62,1207.1 1988.2,1207.1 1988.79,1207.1 1989.38,1207.1 1989.96,1207.1 1990.55,1207.1 1991.14,1207.1 1991.72,1207.1 1992.31,1207.1 1992.9,1207.1 1993.48,1207.1 1994.07,1207.1 1994.65,1207.1 1995.24,1207.1 1995.83,1207.1 1996.41,1207.1 1997,1207.1 1997.59,1207.1 1998.17,1207.1 1998.76,1207.1 1999.35,1207.1 1999.93,1207.1 2000.52,1207.1 2001.11,1207.1 2001.69,1207.1 2002.28,1207.1 2002.86,1207.1 2003.45,1207.1 2004.04,1207.1 2004.62,1207.1 2005.21,1207.1 2005.8,1207.1 2006.38,1207.1 2006.97,1207.1 2007.56,1207.1 2008.14,1207.1 2008.73,1207.1 2009.32,1207.1 2009.9,1207.1 2010.49,1207.1 2011.07,1207.1 2011.66,1207.1 2012.25,1207.1 2012.83,1207.1 2013.42,1207.1 2014.01,1207.1 2014.59,1207.1 2015.18,1207.1 2015.77,1207.1 2016.35,1207.1 2016.94,1207.1 2017.53,1207.1 2018.11,1207.1 2018.7,1207.1 2019.28,1207.1 2019.87,1207.1 2020.46,1207.1 2021.04,1207.1 2021.63,1207.1 2022.22,1207.1 2022.8,1207.1 2023.39,1207.1 2023.98,1207.1 2024.56,1207.1 2025.15,1207.1 2025.73,1207.1 2026.32,1207.1 2026.91,1207.1 2027.49,1207.1 2028.08,1207.1 2028.67,1207.1 2029.25,1207.1 2029.84,1207.1 2030.43,1207.1 2031.01,1207.1 2031.6,1207.1 2032.19,1207.1 2032.77,1207.1 2033.36,1207.1 2033.94,1207.1 2034.53,1207.1 2035.12,1207.1 2035.7,1207.1 2036.29,1207.1 2036.88,1207.1 2037.46,1207.1 2038.05,1207.1 2038.64,1207.1 2039.22,1207.1 2039.81,1207.1 2040.4,1207.1 2040.98,1207.1 2041.57,1207.1 2042.15,1207.1 2042.74,1207.1 2043.33,1207.1 2043.91,1207.1 2044.5,1207.1 2045.09,1207.1 2045.67,1207.1 2046.26,1207.1 2046.85,1207.1 2047.43,1207.1 2048.02,1207.1 2048.6,1207.1 2049.19,1207.1 2049.78,1207.1 2050.36,1207.1 2050.95,1207.1 2051.54,1207.1 2052.12,1207.1 2052.71,1207.1 2053.3,1207.1 2053.88,1207.1 2054.47,1207.1 2055.06,1207.1 2055.64,1207.1 2056.23,1207.1 2056.81,1207.1 2057.4,1207.1 2057.99,1207.1 2058.57,1207.1 2059.16,1207.1 2059.75,1207.1 2060.33,1207.1 2060.92,1207.1 2061.51,1207.1 2062.09,1207.1 2062.68,1207.1 2063.27,1207.1 2063.85,1207.1 2064.44,1207.1 2065.02,1207.1 2065.61,1207.1 2066.2,1207.1 2066.78,1207.1 2067.37,1207.1 2067.96,1207.1 2068.54,1207.1 2069.13,1207.1 2069.72,1207.1 2070.3,1207.1 2070.89,1207.1 2071.48,1207.1 2072.06,1207.1 2072.65,1207.1 2073.23,1207.1 2073.82,1207.1 2074.41,1207.1 2074.99,1207.1 2075.58,1207.1 2076.17,1207.1 2076.75,1207.1 2077.34,1207.1 2077.93,1207.1 2078.51,1207.1 2079.1,1207.1 2079.68,1207.1 2080.27,1207.1 2080.86,1207.1 2081.44,1207.1 2082.03,1207.1 2082.62,1207.1 2083.2,1207.1 2083.79,1207.1 2084.38,1207.1 2084.96,1207.1 2085.55,1207.1 2086.14,1207.1 2086.72,1207.1 2087.31,1207.1 2087.89,1207.1 2088.48,1207.1 2089.07,1207.1 2089.65,1207.1 2090.24,1207.1 2090.83,1207.1 2091.41,1207.1 2092,1207.1 2092.59,1207.1 2093.17,1207.1 2093.76,1207.1 2094.35,1207.1 2094.93,1207.1 2095.52,1207.1 2096.1,1207.1 2096.69,1207.1 2097.28,1207.1 2097.86,1207.1 2098.45,1207.1 2099.04,1207.1 2099.62,1207.1 2100.21,1207.1 2100.8,1207.1 2101.38,1207.1 2101.97,1207.1 2102.55,1207.1 2103.14,1207.1 2103.73,1207.1 2104.31,1207.1 2104.9,1207.1 2105.49,1207.1 2106.07,1207.1 2106.66,1207.1 2107.25,1207.1 2107.83,1207.1 2108.42,1207.1 2109.01,1207.1 2109.59,1207.1 2110.18,1207.1 2110.76,1207.1 2111.35,1207.1 2111.94,1207.1 2112.52,1207.1 2113.11,1207.1 2113.7,1207.1 2114.28,1207.1 2114.87,1207.1 2115.46,1207.1 2116.04,1207.1 2116.63,1207.1 2117.22,1207.1 2117.8,1207.1 2118.39,1207.1 2118.97,1207.1 2119.56,1207.1 2120.15,1207.1 2120.73,1207.1 2121.32,1207.1 2121.91,1207.1 2122.49,1207.1 2123.08,1207.1 2123.67,1207.1 2124.25,1207.1 2124.84,1207.1 2125.42,1207.1 2126.01,1207.1 2126.6,1207.1 2127.18,1207.1 2127.77,1207.1 2128.36,1207.1 2128.94,1207.1 2129.53,1207.1 2130.12,1207.1 2130.7,1207.1 2131.29,1207.1 2131.88,1207.1 2132.46,1207.1 2133.05,1207.1 2133.63,1207.1 2134.22,1207.1 2134.81,1207.1 2135.39,1207.1 2135.98,1207.1 2136.57,1207.1 2137.15,1207.1 2137.74,1207.1 2138.33,1207.1 2138.91,1207.1 2139.5,1207.1 2140.09,1207.1 2140.67,1207.1 2141.26,1207.1 2141.84,1207.1 2142.43,1207.1 2143.02,1207.1 2143.6,1207.1 2144.19,1207.1 2144.78,1207.1 2145.36,1207.1 2145.95,1207.1 2146.54,1207.1 2147.12,1207.1 2147.71,1207.1 2148.3,1207.1 2148.88,1207.1 2149.47,1207.1 2150.05,1207.1 2150.64,1207.1 2151.23,1207.1 2151.81,1207.1 2152.4,1207.1 2152.99,1207.1 2153.57,1207.1 2154.16,1207.1 2154.75,1207.1 2155.33,1207.1 2155.92,1207.1 2156.5,1207.1 2157.09,1207.1 2157.68,1207.1 2158.26,1207.1 \"/>\n<path clip-path=\"url(#clip172)\" d=\"M986.025 1207 L986.612 1207 L987.198 1207 L987.785 1207 L988.371 1207 L988.957 1207 L989.544 1207 L990.13 1207 L990.717 1207 L991.303 1207 L991.889 1207 L992.476 1207 L993.062 1207 L993.649 1207 L994.235 1207 L994.822 1207 L995.408 1207 L995.994 1207 L996.581 1207 L997.167 1207 L997.754 1207 L998.34 1207 L998.926 1207 L999.513 1207 L1000.1 1207 L1000.69 1207 L1001.27 1207 L1001.86 1207 L1002.44 1207 L1003.03 1207 L1003.62 1207 L1004.2 1207 L1004.79 1207 L1005.38 1207 L1005.96 1207 L1006.55 1207 L1007.14 1207 L1007.72 1207 L1008.31 1207 L1008.9 1207 L1009.48 1207 L1010.07 1207 L1010.65 1207 L1011.24 1207 L1011.83 1207 L1012.41 1207 L1013 1207 L1013.59 1207 L1014.17 1207 L1014.76 1207 L1015.35 1207 L1015.93 1207 L1016.52 1207 L1017.11 1207 L1017.69 1207 L1018.28 1207 L1018.86 1207 L1019.45 1207 L1020.04 1207 L1020.62 1207 L1021.21 1207 L1021.8 1207 L1022.38 1207 L1022.97 1207 L1023.56 1207 L1024.14 1207 L1024.73 1207 L1025.32 1207 L1025.9 1207 L1026.49 1207 L1027.07 1207 L1027.66 1207 L1028.25 1207 L1028.83 1207 L1029.42 1207 L1030.01 1207 L1030.59 1207 L1031.18 1207 L1031.77 1207 L1032.35 1207 L1032.94 1207 L1033.52 1207 L1034.11 1207 L1034.7 1207 L1035.28 1207 L1035.87 1207 L1036.46 1207 L1037.04 1207 L1037.63 1207 L1038.22 1207 L1038.8 1207 L1039.39 1207 L1039.98 1207 L1040.56 1207 L1041.15 1207 L1041.73 1207 L1042.32 1207 L1042.91 1207 L1043.49 1207 L1044.08 1207 L1044.67 1207 L1045.25 1207 L1045.84 1207 L1046.43 1207 L1047.01 1207 L1047.6 1207 L1048.19 1207 L1048.77 1207 L1049.36 1207 L1049.94 1207 L1050.53 1207 L1051.12 1207 L1051.7 1207 L1052.29 1207 L1052.88 1207 L1053.46 1207 L1054.05 1207 L1054.64 1207 L1055.22 1207 L1055.81 1207 L1056.39 1207 L1056.98 1207 L1057.57 1207 L1058.15 1207 L1058.74 1207 L1059.33 1207 L1059.91 1207 L1060.5 1207 L1061.09 1207 L1061.67 1207 L1062.26 1207 L1062.85 1207 L1063.43 1207 L1064.02 1207 L1064.6 1207 L1065.19 1207 L1065.78 1207 L1066.36 1207 L1066.95 1207 L1067.54 1207 L1068.12 1207 L1068.71 1207 L1069.3 1207 L1069.88 1207 L1070.47 1207 L1071.06 1207 L1071.64 1207 L1072.23 1207 L1072.81 1207 L1073.4 1207 L1073.99 1207 L1074.57 1207 L1075.16 1207 L1075.75 1207 L1076.33 1207 L1076.92 1207 L1077.51 1207 L1078.09 1207 L1078.68 1207 L1079.26 1207 L1079.85 1207 L1080.44 1207 L1081.02 1207 L1081.61 1207 L1082.2 1207 L1082.78 1207 L1083.37 1207 L1083.96 1207 L1084.54 1207 L1085.13 1207 L1085.72 1207 L1086.3 1207 L1086.89 1207 L1087.47 1207 L1088.06 1207 L1088.65 1207 L1089.23 1207 L1089.82 1207 L1090.41 1207 L1090.99 1207 L1091.58 1207 L1092.17 1207 L1092.75 1207 L1093.34 1207 L1093.93 1207 L1094.51 1207 L1095.1 1207 L1095.68 1207 L1096.27 1207 L1096.86 1207 L1097.44 1207 L1098.03 1207 L1098.62 1207 L1099.2 1207 L1099.79 1207 L1100.38 1207 L1100.96 1207 L1101.55 1207 L1102.14 1207 L1102.72 1207 L1103.31 1207 L1103.89 1207 L1104.48 1207 L1105.07 1207 L1105.65 1207 L1106.24 1207 L1106.83 1207 L1107.41 1207 L1108 1207 L1108.59 1207 L1109.17 1207 L1109.76 1207 L1110.34 1207 L1110.93 1207 L1111.52 1207 L1112.1 1207 L1112.69 1207 L1113.28 1207 L1113.86 1207 L1114.45 1207 L1115.04 1207 L1115.62 1207 L1116.21 1207 L1116.8 1207 L1117.38 1207 L1117.97 1207 L1118.55 1207 L1119.14 1207 L1119.73 1207 L1120.31 1207 L1120.9 1207 L1121.49 1207 L1122.07 1207 L1122.66 1207 L1123.25 1207 L1123.83 1207 L1124.42 1207 L1125.01 1207 L1125.59 1207 L1126.18 1207 L1126.76 1207 L1127.35 1207 L1127.94 1207 L1128.52 1207 L1129.11 1207 L1129.7 1207 L1130.28 1207 L1130.87 1207 L1131.46 1207 L1132.04 1207 L1132.63 1207 L1133.21 1207 L1133.8 1207 L1134.39 1207 L1134.97 1207 L1135.56 1207 L1136.15 1207 L1136.73 1207 L1137.32 1207 L1137.91 1207 L1138.49 1207 L1139.08 1207 L1139.67 1207 L1140.25 1207 L1140.84 1207 L1141.42 1207 L1142.01 1207 L1142.6 1207 L1143.18 1207 L1143.77 1207 L1144.36 1207 L1144.94 1207 L1145.53 1207 L1146.12 1207 L1146.7 1207 L1147.29 1207 L1147.88 1207 L1148.46 1207 L1149.05 1207 L1149.63 1207 L1150.22 1207 L1150.81 1207 L1151.39 1207 L1151.98 1207 L1152.57 1207 L1153.15 1207 L1153.74 1207 L1154.33 1207 L1154.91 1207 L1155.5 1207 L1156.09 1207 L1156.67 1207 L1157.26 1207 L1157.84 1207 L1158.43 1207 L1159.02 1207 L1159.6 1207 L1160.19 1207 L1160.78 1207 L1161.36 1207 L1161.95 1207 L1162.54 1207 L1163.12 1207 L1163.71 1207 L1164.29 1207 L1164.88 1207 L1165.47 1207 L1166.05 1207 L1166.64 1207 L1167.23 1207 L1167.81 1207 L1168.4 1207 L1168.99 1207 L1169.57 1207 L1170.16 1207 L1170.75 1207 L1171.33 1207 L1171.92 1207 L1172.5 1207 L1173.09 1207 L1173.68 1207 L1174.26 1207 L1174.85 1207 L1175.44 1207 L1176.02 1207 L1176.61 1207 L1177.2 1207 L1177.78 1207 L1178.37 1207 L1178.96 1207 L1179.54 1207 L1180.13 1207 L1180.71 1207 L1181.3 1207 L1181.89 1207 L1182.47 1207 L1183.06 1207 L1183.65 1207 L1184.23 1207 L1184.82 1207 L1185.41 1207 L1185.99 1207 L1186.58 1207 L1187.16 1207 L1187.75 1207 L1188.34 1207 L1188.92 1207 L1189.51 1207 L1190.1 1207 L1190.68 1207 L1191.27 1207 L1191.86 1207 L1192.44 1207 L1193.03 1207 L1193.62 1207 L1194.2 1207 L1194.79 1207 L1195.37 1207 L1195.96 1207 L1196.55 1207 L1197.13 1207 L1197.72 1207 L1198.31 1207 L1198.89 1207 L1199.48 1207 L1200.07 1207 L1200.65 1207 L1201.24 1207 L1201.83 1207 L1202.41 1207 L1203 1207 L1203.58 1207 L1204.17 1207 L1204.76 1207 L1205.34 1207 L1205.93 1207 L1206.52 1207 L1207.1 1207 L1207.69 1207 L1208.28 1207 L1208.86 1207 L1209.45 1207 L1210.03 1207 L1210.62 1207 L1211.21 1207 L1211.79 1207 L1212.38 1207 L1212.97 1207 L1213.55 1207 L1214.14 1207 L1214.73 1207 L1215.31 1207 L1215.9 1207 L1216.49 1207 L1217.07 1207 L1217.66 1207 L1218.24 1207 L1218.83 1207 L1219.42 1207 L1220 1207 L1220.59 1207 L1221.18 1207 L1221.76 1207 L1222.35 1207 L1222.94 1207 L1223.52 1207 L1224.11 1207 L1224.7 1207 L1225.28 1207 L1225.87 1207 L1226.45 1207 L1227.04 1207 L1227.63 1207 L1228.21 1207 L1228.8 1207 L1229.39 1207 L1229.97 1207 L1230.56 1207 L1231.15 1207 L1231.73 1207 L1232.32 1207 L1232.91 1207 L1233.49 1207 L1234.08 1207 L1234.66 1207 L1235.25 1207 L1235.84 1207 L1236.42 1207 L1237.01 1207 L1237.6 1207 L1238.18 1207 L1238.77 1207 L1239.36 1207 L1239.94 1207 L1240.53 1207 L1241.11 1207 L1241.7 1207 L1242.29 1207 L1242.87 1207 L1243.46 1207 L1244.05 1207 L1244.63 1207 L1245.22 1207 L1245.81 1207 L1246.39 1207 L1246.98 1207 L1247.57 1207 L1248.15 1207 L1248.74 1207 L1249.32 1207 L1249.91 1207 L1250.5 1207 L1251.08 1207 L1251.67 1207 L1252.26 1207 L1252.84 1207 L1253.43 1207 L1254.02 1207 L1254.6 1207 L1255.19 1207 L1255.78 1207 L1256.36 1207 L1256.95 1207 L1257.53 1207 L1258.12 1207 L1258.71 1207 L1259.29 1207 L1259.88 1207 L1260.47 1207 L1261.05 1207 L1261.64 1207 L1262.23 1207 L1262.81 1207 L1263.4 1207 L1263.98 1207 L1264.57 1207 L1265.16 1207 L1265.74 1207 L1266.33 1207 L1266.92 1207 L1267.5 1207 L1268.09 1207 L1268.68 1207 L1269.26 1207 L1269.85 1207 L1270.44 1207 L1271.02 1207 L1271.61 1207 L1272.19 1207 L1272.78 1207 L1273.37 1207 L1273.95 1207 L1274.54 1207 L1275.13 1207 L1275.71 1207 L1276.3 1207 L1276.89 1207 L1277.47 1207 L1278.06 1207 L1278.65 1207 L1279.23 1207 L1279.82 1207 L1280.4 1207 L1280.99 1207 L1281.58 1207 L1282.16 1207 L1282.75 1207 L1283.34 1207 L1283.92 1207 L1284.51 1207 L1285.1 1207 L1285.68 1207 L1286.27 1207 L1286.86 1207 L1287.44 1207 L1288.03 1207 L1288.61 1207 L1289.2 1207 L1289.79 1207 L1290.37 1207 L1290.96 1207 L1291.55 1207 L1292.13 1207 L1292.72 1207 L1293.31 1207 L1293.89 1207 L1294.48 1207 L1295.06 1207 L1295.65 1207 L1296.24 1207 L1296.82 1207 L1297.41 1207 L1298 1207 L1298.58 1207 L1299.17 1207 L1299.76 1207 L1300.34 1207 L1300.93 1207 L1301.52 1207 L1302.1 1207 L1302.69 1207 L1303.27 1207 L1303.86 1207 L1304.45 1207 L1305.03 1207 L1305.62 1207 L1306.21 1207 L1306.79 1207 L1307.38 1207 L1307.97 1207 L1308.55 1207 L1309.14 1207 L1309.73 1207 L1310.31 1207 L1310.9 1207 L1311.48 1207 L1312.07 1207 L1312.66 1207 L1313.24 1207 L1313.83 1207 L1314.42 1207 L1315 1207 L1315.59 1207 L1316.18 1207 L1316.76 1207 L1317.35 1207 L1317.93 1207 L1318.52 1207 L1319.11 1207 L1319.69 1207 L1320.28 1207 L1320.87 1207 L1321.45 1207 L1322.04 1207 L1322.63 1207 L1323.21 1207 L1323.8 1207 L1324.39 1207 L1324.97 1207 L1325.56 1207 L1326.14 1207 L1326.73 1207 L1327.32 1207 L1327.9 1207 L1328.49 1207 L1329.08 1207 L1329.66 1207 L1330.25 1207 L1330.84 1207 L1331.42 1207 L1332.01 1207 L1332.6 1207 L1333.18 1207 L1333.77 1207 L1334.35 1207 L1334.94 1207 L1335.53 1207 L1336.11 1207 L1336.7 1207 L1337.29 1207 L1337.87 1207 L1338.46 1207 L1339.05 1207 L1339.63 1207 L1340.22 1207 L1340.8 1207 L1341.39 1207 L1341.98 1207 L1342.56 1207 L1343.15 1207 L1343.74 1207 L1344.32 1207 L1344.91 1207 L1345.5 1207 L1346.08 1207 L1346.67 1207 L1347.26 1207 L1347.84 1207 L1348.43 1207 L1349.01 1207 L1349.6 1207 L1350.19 1207 L1350.77 1207 L1351.36 1207 L1351.95 1207 L1352.53 1207 L1353.12 1207 L1353.71 1207 L1354.29 1207 L1354.88 1207 L1355.47 1207 L1356.05 1207 L1356.64 1207 L1357.22 1207 L1357.81 1207 L1358.4 1207 L1358.98 1207 L1359.57 1207 L1360.16 1207 L1360.74 1207 L1361.33 1207 L1361.92 1207 L1362.5 1207 L1363.09 1207 L1363.68 1207 L1364.26 1207 L1364.85 1207 L1365.43 1207 L1366.02 1207 L1366.61 1207 L1367.19 1207 L1367.78 1207 L1368.37 1207 L1368.95 1207 L1369.54 1207 L1370.13 1207 L1370.71 1207 L1371.3 1207 L1371.88 1207 L1372.47 1207 L1373.06 1207 L1373.64 1207 L1374.23 1207 L1374.82 1207 L1375.4 1207 L1375.99 1207 L1376.58 1207 L1377.16 1207 L1377.75 1207 L1378.34 1207 L1378.92 1207 L1379.51 1207 L1380.09 1207 L1380.68 1207 L1381.27 1207 L1381.85 1207 L1382.44 1207 L1383.03 1207 L1383.61 1207 L1384.2 1207 L1384.79 1207 L1385.37 1207 L1385.96 1207 L1386.55 1207 L1387.13 1207 L1387.72 1207 L1388.3 1207 L1388.89 1207 L1389.48 1207 L1390.06 1207 L1390.65 1207 L1391.24 1207 L1391.82 1207 L1392.41 1207 L1393 1207 L1393.58 1207 L1394.17 1207 L1394.75 1207 L1395.34 1207 L1395.93 1207 L1396.51 1207 L1397.1 1207 L1397.69 1207 L1398.27 1207 L1398.86 1207 L1399.45 1207 L1400.03 1207 L1400.62 1207 L1401.21 1207 L1401.79 1207 L1402.38 1207 L1402.96 1207 L1403.55 1207 L1404.14 1207 L1404.72 1207 L1405.31 1207 L1405.9 1207 L1406.48 1207 L1407.07 1207 L1407.66 1207 L1408.24 1207 L1408.83 1207 L1409.42 1207 L1410 1207 L1410.59 1207 L1411.17 1207 L1411.76 1207 L1412.35 1207 L1412.93 1207 L1413.52 1207 L1414.11 1207 L1414.69 1207 L1415.28 1207 L1415.87 1207 L1416.45 1207 L1417.04 1207 L1417.63 1207 L1418.21 1207 L1418.8 1207 L1419.38 1207 L1419.97 1207 L1420.56 1207 L1421.14 1207 L1421.73 1207 L1422.32 1207 L1422.9 1207 L1423.49 1207 L1424.08 1207 L1424.66 1207 L1425.25 1207 L1425.83 1207 L1426.42 1207 L1427.01 1207 L1427.59 1207 L1428.18 1207 L1428.77 1207 L1429.35 1207 L1429.94 1207 L1430.53 1207 L1431.11 1207 L1431.7 1207 L1432.29 1207 L1432.87 1207 L1433.46 1207 L1434.04 1207 L1434.63 1207 L1435.22 1207 L1435.8 1207 L1436.39 1207 L1436.98 1207 L1437.56 1207 L1438.15 1207 L1438.74 1207 L1439.32 1207 L1439.91 1207 L1440.5 1207 L1441.08 1207 L1441.67 1207 L1442.25 1207 L1442.84 1207 L1443.43 1207 L1444.01 1207 L1444.6 1207 L1445.19 1207 L1445.77 1207 L1446.36 1207 L1446.95 1207 L1447.53 1207 L1448.12 1207 L1448.7 1207 L1449.29 1207 L1449.88 1207 L1450.46 1207 L1451.05 1207 L1451.64 1207 L1452.22 1207 L1452.81 1207 L1453.4 1207 L1453.98 1207 L1454.57 1207 L1455.16 1207 L1455.74 1207 L1456.33 1207 L1456.91 1207 L1457.5 1207 L1458.09 1207 L1458.67 1207 L1459.26 1207 L1459.85 1207 L1460.43 1207 L1461.02 1207 L1461.61 1207 L1462.19 1207 L1462.78 1207 L1463.37 1207 L1463.95 1207 L1464.54 1207 L1465.12 1207 L1465.71 1207 L1466.3 1207 L1466.88 1207 L1467.47 1207 L1468.06 1207 L1468.64 1207 L1469.23 1207 L1469.82 1207 L1470.4 1207 L1470.99 1207 L1471.57 1207 L1472.16 1207 L1472.75 1207 L1473.33 1207 L1473.92 1207 L1474.51 1207 L1475.09 1207 L1475.68 1207 L1476.27 1207 L1476.85 1207 L1477.44 1207 L1478.03 1207 L1478.61 1207 L1479.2 1207 L1479.78 1207 L1480.37 1207 L1480.96 1207 L1481.54 1207 L1482.13 1207 L1482.72 1207 L1483.3 1207 L1483.89 1207 L1484.48 1207 L1485.06 1207 L1485.65 1207 L1486.24 1207 L1486.82 1207 L1487.41 1207 L1487.99 1207 L1488.58 1207 L1489.17 1207 L1489.75 1207 L1490.34 1207 L1490.93 1207 L1491.51 1207 L1492.1 1207 L1492.69 1207 L1493.27 1207 L1493.86 1207 L1494.45 1207 L1495.03 1207 L1495.62 1207 L1496.2 1207 L1496.79 1207 L1497.38 1207 L1497.96 1207 L1498.55 1207 L1499.14 1207 L1499.72 1207 L1500.31 1207 L1500.9 1207 L1501.48 1207 L1502.07 1207 L1502.65 1207 L1503.24 1207 L1503.83 1207 L1504.41 1207 L1505 1207 L1505.59 1207 L1506.17 1207 L1506.76 1207 L1507.35 1207 L1507.93 1207 L1508.52 1207 L1509.11 1207 L1509.69 1207 L1510.28 1207 L1510.86 1207 L1511.45 1207 L1512.04 1207 L1512.62 1207 L1513.21 1207 L1513.8 1207 L1514.38 1207 L1514.97 1207 L1515.56 1207 L1516.14 1207 L1516.73 1207 L1517.32 1207 L1517.9 1207 L1518.49 1207 L1519.07 1207 L1519.66 1207 L1520.25 1207 L1520.83 1207 L1521.42 1207 L1522.01 1207 L1522.59 1207 L1523.18 1207 L1523.77 1207 L1524.35 1207 L1524.94 1207 L1525.52 1207 L1526.11 1207 L1526.7 1207 L1527.28 1207 L1527.87 1207 L1528.46 1207 L1529.04 1207 L1529.63 1207 L1530.22 1207 L1530.8 1207 L1531.39 1207 L1531.98 1207 L1532.56 1207 L1533.15 1207 L1533.73 1207 L1534.32 1207 L1534.91 1207 L1535.49 1207 L1536.08 1207 L1536.67 1207 L1537.25 1207 L1537.84 1207 L1538.43 1207 L1539.01 1207 L1539.6 1207 L1540.19 1207 L1540.77 1207 L1541.36 1207 L1541.94 1207 L1542.53 1207 L1543.12 1207 L1543.7 1207 L1544.29 1207 L1544.88 1207 L1545.46 1207 L1546.05 1207 L1546.64 1207 L1547.22 1207 L1547.81 1207 L1548.4 1207 L1548.98 1207 L1549.57 1207 L1550.15 1207 L1550.74 1207 L1551.33 1207 L1551.91 1207 L1552.5 1207 L1553.09 1207 L1553.67 1207 L1554.26 1207 L1554.85 1207 L1555.43 1207 L1556.02 1207 L1556.6 1207 L1557.19 1207 L1557.78 1207 L1558.36 1207 L1558.95 1207 L1559.54 1207 L1560.12 1207 L1560.71 1207 L1561.3 1207 L1561.88 1207 L1562.47 1207 L1563.06 1207 L1563.64 1207 L1564.23 1207 L1564.81 1207 L1565.4 1207 L1565.99 1207 L1566.57 1207 L1567.16 1207 L1567.75 1207 L1568.33 1207 L1568.92 1207 L1569.51 1207 L1570.09 1207 L1570.68 1207 L1571.27 1207 L1571.85 1207 L1572.44 1207 L1573.02 1207 L1573.61 1207 L1574.2 1207 L1574.78 1207 L1575.37 1207 L1575.96 1207 L1576.54 1207 L1577.13 1207 L1577.72 1207 L1578.3 1207 L1578.89 1207 L1579.47 1207 L1580.06 1207 L1580.65 1207 L1581.23 1207 L1581.82 1207 L1582.41 1207 L1582.99 1207 L1583.58 1207 L1584.17 1207 L1584.75 1207 L1585.34 1207 L1585.93 1207 L1586.51 1207 L1587.1 1207 L1587.68 1207 L1588.27 1207 L1588.86 1207 L1589.44 1207 L1590.03 1207 L1590.62 1207 L1591.2 1207 L1591.79 1207 L1592.38 1207 L1592.96 1207 L1593.55 1207 L1594.14 1207 L1594.72 1207 L1595.31 1207 L1595.89 1207 L1596.48 1207 L1597.07 1207 L1597.65 1207 L1598.24 1207 L1598.83 1207 L1599.41 1207 L1600 1207 L1600.59 1207 L1601.17 1207 L1601.76 1207 L1602.34 1207 L1602.93 1207 L1603.52 1207 L1604.1 1207 L1604.69 1207 L1605.28 1207 L1605.86 1207 L1606.45 1207 L1607.04 1207 L1607.62 1207 L1608.21 1207 L1608.8 1207 L1609.38 1207 L1609.97 1207 L1610.55 1207 L1611.14 1207 L1611.73 1207 L1612.31 1207 L1612.9 1207 L1613.49 1207 L1614.07 1207 L1614.66 1207 L1615.25 1207 L1615.83 1207 L1616.42 1207 L1617.01 1207 L1617.59 1207 L1618.18 1207 L1618.76 1207 L1619.35 1207 L1619.94 1207 L1620.52 1207 L1621.11 1207 L1621.7 1207 L1622.28 1207 L1622.87 1207 L1623.46 1207 L1624.04 1207 L1624.63 1207 L1625.22 1207 L1625.8 1207 L1626.39 1207 L1626.97 1207 L1627.56 1207 L1628.15 1207 L1628.73 1207 L1629.32 1207 L1629.91 1207 L1630.49 1207 L1631.08 1207 L1631.67 1207 L1632.25 1207 L1632.84 1207 L1633.42 1207 L1634.01 1207 L1634.6 1207 L1635.18 1207 L1635.77 1207 L1636.36 1207 L1636.94 1207 L1637.53 1207 L1638.12 1207 L1638.7 1207 L1639.29 1207 L1639.88 1207 L1640.46 1207 L1641.05 1207 L1641.63 1207 L1642.22 1207 L1642.81 1207 L1643.39 1207 L1643.98 1207 L1644.57 1207 L1645.15 1207 L1645.74 1207 L1646.33 1207 L1646.91 1207 L1647.5 1207 L1648.09 1207 L1648.67 1207 L1649.26 1207 L1649.84 1207 L1650.43 1207 L1651.02 1207 L1651.6 1207 L1652.19 1207 L1652.78 1207 L1653.36 1207 L1653.95 1207 L1654.54 1207 L1655.12 1207 L1655.71 1207 L1656.29 1207 L1656.88 1207 L1657.47 1207 L1658.05 1207 L1658.64 1207 L1659.23 1207 L1659.81 1207 L1660.4 1207 L1660.99 1207 L1661.57 1207 L1662.16 1207 L1662.75 1207 L1663.33 1207 L1663.92 1207 L1664.5 1207 L1665.09 1207 L1665.68 1207 L1666.26 1207 L1666.85 1207 L1667.44 1207 L1668.02 1207 L1668.61 1207 L1669.2 1207 L1669.78 1207 L1670.37 1207 L1670.96 1207 L1671.54 1207 L1672.13 1207 L1672.71 1207 L1673.3 1207 L1673.89 1207 L1674.47 1207 L1675.06 1207 L1675.65 1207 L1676.23 1207 L1676.82 1207 L1677.41 1207 L1677.99 1207 L1678.58 1207 L1679.17 1207 L1679.75 1207 L1680.34 1207 L1680.92 1207 L1681.51 1207 L1682.1 1207 L1682.68 1207 L1683.27 1207 L1683.86 1207 L1684.44 1207 L1685.03 1207 L1685.62 1207 L1686.2 1207 L1686.79 1207 L1687.37 1207 L1687.96 1207 L1688.55 1207 L1689.13 1207 L1689.72 1207 L1690.31 1207 L1690.89 1207 L1691.48 1207 L1692.07 1207 L1692.65 1207 L1693.24 1207 L1693.83 1207 L1694.41 1207 L1695 1207 L1695.58 1207 L1696.17 1207 L1696.76 1207 L1697.34 1207 L1697.93 1207 L1698.52 1207 L1699.1 1207 L1699.69 1207 L1700.28 1207 L1700.86 1207 L1701.45 1207 L1702.04 1207 L1702.62 1207 L1703.21 1207 L1703.79 1207 L1704.38 1207 L1704.97 1207 L1705.55 1207 L1706.14 1207 L1706.73 1207 L1707.31 1207 L1707.9 1207 L1708.49 1207 L1709.07 1207 L1709.66 1207 L1710.24 1207 L1710.83 1207 L1711.42 1207 L1712 1207 L1712.59 1207 L1713.18 1207 L1713.76 1207 L1714.35 1207 L1714.94 1207 L1715.52 1207 L1716.11 1207 L1716.7 1207 L1717.28 1207 L1717.87 1207 L1718.45 1207 L1719.04 1207 L1719.63 1207 L1720.21 1207 L1720.8 1207 L1721.39 1207 L1721.97 1207 L1722.56 1207 L1723.15 1207 L1723.73 1207 L1724.32 1207 L1724.91 1207 L1725.49 1207 L1726.08 1207 L1726.66 1207 L1727.25 1207 L1727.84 1207 L1728.42 1207 L1729.01 1207 L1729.6 1207 L1730.18 1207 L1730.77 1207 L1731.36 1207 L1731.94 1207 L1732.53 1207 L1733.11 1207 L1733.7 1207 L1734.29 1207 L1734.87 1207 L1735.46 1207 L1736.05 1207 L1736.63 1207 L1737.22 1207 L1737.81 1207 L1738.39 1207 L1738.98 1207 L1739.57 1207 L1740.15 1207 L1740.74 1207 L1741.32 1207 L1741.91 1207 L1742.5 1207 L1743.08 1207 L1743.67 1207 L1744.26 1207 L1744.84 1207 L1745.43 1207 L1746.02 1207 L1746.6 1207 L1747.19 1207 L1747.78 1207 L1748.36 1207 L1748.95 1207 L1749.53 1207 L1750.12 1207 L1750.71 1207 L1751.29 1207 L1751.88 1207 L1752.47 1207 L1753.05 1207 L1753.64 1207 L1754.23 1207 L1754.81 1207 L1755.4 1207 L1755.99 1207 L1756.57 1207 L1757.16 1207 L1757.74 1207 L1758.33 1207 L1758.92 1207 L1759.5 1207 L1760.09 1207 L1760.68 1207 L1761.26 1207 L1761.85 1207 L1762.44 1207 L1763.02 1207 L1763.61 1207 L1764.19 1207 L1764.78 1207 L1765.37 1207 L1765.95 1207 L1766.54 1207 L1767.13 1207 L1767.71 1207 L1768.3 1207 L1768.89 1207 L1769.47 1207 L1770.06 1207 L1770.65 1207 L1771.23 1207 L1771.82 1207 L1772.4 1207 L1772.99 1207 L1773.58 1207 L1774.16 1207 L1774.75 1207 L1775.34 1207 L1775.92 1207 L1776.51 1207 L1777.1 1207 L1777.68 1207 L1778.27 1207 L1778.86 1207 L1779.44 1207 L1780.03 1207 L1780.61 1207 L1781.2 1207 L1781.79 1207 L1782.37 1207 L1782.96 1207 L1783.55 1207 L1784.13 1207 L1784.72 1207 L1785.31 1207 L1785.89 1207 L1786.48 1207 L1787.06 1207 L1787.65 1207 L1788.24 1207 L1788.82 1207 L1789.41 1207 L1790 1207 L1790.58 1207 L1791.17 1207 L1791.76 1207 L1792.34 1207 L1792.93 1207 L1793.52 1207 L1794.1 1207 L1794.69 1207 L1795.27 1207 L1795.86 1207 L1796.45 1207 L1797.03 1207 L1797.62 1207 L1798.21 1207 L1798.79 1207 L1799.38 1207 L1799.97 1207 L1800.55 1207 L1801.14 1207 L1801.73 1207 L1802.31 1207 L1802.9 1207 L1803.48 1207 L1804.07 1207 L1804.66 1207 L1805.24 1207 L1805.83 1207 L1806.42 1207 L1807 1207 L1807.59 1207 L1808.18 1207 L1808.76 1207 L1809.35 1207 L1809.94 1207 L1810.52 1207 L1811.11 1207 L1811.69 1207 L1812.28 1207 L1812.87 1207 L1813.45 1207 L1814.04 1207 L1814.63 1207 L1815.21 1207 L1815.8 1207 L1816.39 1207 L1816.97 1207 L1817.56 1207 L1818.14 1207 L1818.73 1207 L1819.32 1207 L1819.9 1207 L1820.49 1207 L1821.08 1207 L1821.66 1207 L1822.25 1207 L1822.84 1207 L1823.42 1207 L1824.01 1207 L1824.6 1207 L1825.18 1207 L1825.77 1207 L1826.35 1207 L1826.94 1207 L1827.53 1207 L1828.11 1207 L1828.7 1207 L1829.29 1207 L1829.87 1207 L1830.46 1207 L1831.05 1207 L1831.63 1207 L1832.22 1207 L1832.81 1207 L1833.39 1207 L1833.98 1207 L1834.56 1207 L1835.15 1207 L1835.74 1207 L1836.32 1207 L1836.91 1207 L1837.5 1207 L1838.08 1207 L1838.67 1207 L1839.26 1207 L1839.84 1207 L1840.43 1207 L1841.01 1207 L1841.6 1207 L1842.19 1207 L1842.77 1207 L1843.36 1207 L1843.95 1207 L1844.53 1207 L1845.12 1207 L1845.71 1207 L1846.29 1207 L1846.88 1207 L1847.47 1207 L1848.05 1207 L1848.64 1207 L1849.22 1207 L1849.81 1207 L1850.4 1207 L1850.98 1207 L1851.57 1207 L1852.16 1207 L1852.74 1207 L1853.33 1207 L1853.92 1207 L1854.5 1207 L1855.09 1207 L1855.68 1207 L1856.26 1207 L1856.85 1207 L1857.43 1207 L1858.02 1207 L1858.61 1207 L1859.19 1207 L1859.78 1207 L1860.37 1207 L1860.95 1207 L1861.54 1207 L1862.13 1207 L1862.71 1207 L1863.3 1207 L1863.88 1207 L1864.47 1207 L1865.06 1207 L1865.64 1207 L1866.23 1207 L1866.82 1207 L1867.4 1207 L1867.99 1207 L1868.58 1207 L1869.16 1207 L1869.75 1207 L1870.34 1207 L1870.92 1207 L1871.51 1207 L1872.09 1207 L1872.68 1207 L1873.27 1207 L1873.85 1207 L1874.44 1207 L1875.03 1207 L1875.61 1207 L1876.2 1207 L1876.79 1207 L1877.37 1207 L1877.96 1207 L1878.55 1207 L1879.13 1207 L1879.72 1207 L1880.3 1207 L1880.89 1207 L1881.48 1207 L1882.06 1207 L1882.65 1207 L1883.24 1207 L1883.82 1207 L1884.41 1207 L1885 1207 L1885.58 1207 L1886.17 1207 L1886.76 1207 L1887.34 1207 L1887.93 1207 L1888.51 1207 L1889.1 1207 L1889.69 1207 L1890.27 1207 L1890.86 1207 L1891.45 1207 L1892.03 1207 L1892.62 1207 L1893.21 1207 L1893.79 1207 L1894.38 1207 L1894.96 1207 L1895.55 1207 L1896.14 1207 L1896.72 1207 L1897.31 1207 L1897.9 1207 L1898.48 1207 L1899.07 1207 L1899.66 1207 L1900.24 1207 L1900.83 1207 L1901.42 1207 L1902 1207 L1902.59 1207 L1903.17 1207 L1903.76 1207 L1904.35 1207 L1904.93 1207 L1905.52 1207 L1906.11 1207 L1906.69 1207 L1907.28 1207 L1907.87 1207 L1908.45 1207 L1909.04 1207 L1909.63 1207 L1910.21 1207 L1910.8 1207 L1911.38 1207 L1911.97 1207 L1912.56 1207 L1913.14 1207 L1913.73 1207 L1914.32 1207 L1914.9 1207 L1915.49 1207 L1916.08 1207 L1916.66 1207 L1917.25 1207 L1917.83 1207 L1918.42 1207 L1919.01 1207 L1919.59 1207 L1920.18 1207 L1920.77 1207 L1921.35 1207 L1921.94 1207 L1922.53 1207 L1923.11 1207 L1923.7 1207 L1924.29 1207 L1924.87 1207 L1925.46 1207 L1926.04 1207 L1926.63 1207 L1927.22 1207 L1927.8 1207 L1928.39 1207 L1928.98 1207 L1929.56 1207 L1930.15 1207 L1930.74 1207 L1931.32 1207 L1931.91 1207 L1932.5 1207 L1933.08 1207 L1933.67 1207 L1934.25 1207 L1934.84 1207 L1935.43 1207 L1936.01 1207 L1936.6 1207 L1937.19 1207 L1937.77 1207 L1938.36 1207 L1938.95 1207 L1939.53 1207 L1940.12 1207 L1940.71 1207 L1941.29 1207 L1941.88 1207 L1942.46 1207 L1943.05 1207 L1943.64 1207 L1944.22 1207 L1944.81 1207 L1945.4 1207 L1945.98 1207 L1946.57 1207 L1947.16 1207 L1947.74 1207 L1948.33 1207 L1948.91 1207 L1949.5 1207 L1950.09 1207 L1950.67 1207 L1951.26 1207 L1951.85 1207 L1952.43 1207 L1953.02 1207 L1953.61 1207 L1954.19 1207 L1954.78 1207 L1955.37 1207 L1955.95 1207 L1956.54 1207 L1957.12 1207 L1957.71 1207 L1958.3 1207 L1958.88 1207 L1959.47 1207 L1960.06 1207 L1960.64 1207 L1961.23 1207 L1961.82 1207 L1962.4 1207 L1962.99 1207 L1963.58 1207 L1964.16 1207 L1964.75 1207 L1965.33 1207 L1965.92 1207 L1966.51 1207 L1967.09 1207 L1967.68 1207 L1968.27 1207 L1968.85 1207 L1969.44 1207 L1970.03 1207 L1970.61 1207 L1971.2 1207 L1971.78 1207 L1972.37 1207 L1972.96 1207 L1973.54 1207 L1974.13 1207 L1974.72 1207 L1975.3 1207 L1975.89 1207 L1976.48 1207 L1977.06 1207 L1977.65 1207 L1978.24 1207 L1978.82 1207 L1979.41 1207 L1979.99 1207 L1980.58 1207 L1981.17 1207 L1981.75 1207 L1982.34 1207 L1982.93 1207 L1983.51 1207 L1984.1 1207 L1984.69 1207 L1985.27 1207 L1985.86 1207 L1986.45 1207 L1987.03 1207 L1987.62 1207 L1988.2 1207 L1988.79 1207 L1989.38 1207 L1989.96 1207 L1990.55 1207 L1991.14 1207 L1991.72 1207 L1992.31 1207 L1992.9 1207 L1993.48 1207 L1994.07 1207 L1994.65 1207 L1995.24 1207 L1995.83 1207 L1996.41 1207 L1997 1207 L1997.59 1207 L1998.17 1207 L1998.76 1207 L1999.35 1207 L1999.93 1207 L2000.52 1207 L2001.11 1207 L2001.69 1207 L2002.28 1207 L2002.86 1207 L2003.45 1207 L2004.04 1207 L2004.62 1207 L2005.21 1207 L2005.8 1207 L2006.38 1207 L2006.97 1207 L2007.56 1207 L2008.14 1207 L2008.73 1207 L2009.32 1207 L2009.9 1207 L2010.49 1207 L2011.07 1207 L2011.66 1207 L2012.25 1207 L2012.83 1207 L2013.42 1207 L2014.01 1207 L2014.59 1207 L2015.18 1207 L2015.77 1207 L2016.35 1207 L2016.94 1207 L2017.53 1207 L2018.11 1207 L2018.7 1207 L2019.28 1207 L2019.87 1207 L2020.46 1207 L2021.04 1207 L2021.63 1207 L2022.22 1207 L2022.8 1207 L2023.39 1207 L2023.98 1207 L2024.56 1207 L2025.15 1207 L2025.73 1207 L2026.32 1207 L2026.91 1207 L2027.49 1207 L2028.08 1207 L2028.67 1207 L2029.25 1207 L2029.84 1207 L2030.43 1207 L2031.01 1207 L2031.6 1207 L2032.19 1207 L2032.77 1207 L2033.36 1207 L2033.94 1207 L2034.53 1207 L2035.12 1207 L2035.7 1207 L2036.29 1207 L2036.88 1207 L2037.46 1207 L2038.05 1207 L2038.64 1207 L2039.22 1207 L2039.81 1207 L2040.4 1207 L2040.98 1207 L2041.57 1207 L2042.15 1207 L2042.74 1207 L2043.33 1207 L2043.91 1207 L2044.5 1207 L2045.09 1207 L2045.67 1207 L2046.26 1207 L2046.85 1207 L2047.43 1207 L2048.02 1207 L2048.6 1207 L2049.19 1207 L2049.78 1207 L2050.36 1207 L2050.95 1207 L2051.54 1207 L2052.12 1207 L2052.71 1207 L2053.3 1207 L2053.88 1207 L2054.47 1207 L2055.06 1207 L2055.64 1207 L2056.23 1207 L2056.81 1207 L2057.4 1207 L2057.99 1207 L2058.57 1207 L2059.16 1207 L2059.75 1207 L2060.33 1207 L2060.92 1207 L2061.51 1207 L2062.09 1207 L2062.68 1207 L2063.27 1207 L2063.85 1207 L2064.44 1207 L2065.02 1207 L2065.61 1207 L2066.2 1207 L2066.78 1207 L2067.37 1207 L2067.96 1207 L2068.54 1207 L2069.13 1207 L2069.72 1207 L2070.3 1207 L2070.89 1207 L2071.48 1207 L2072.06 1207 L2072.65 1207 L2073.23 1207 L2073.82 1207 L2074.41 1207 L2074.99 1207 L2075.58 1207 L2076.17 1207 L2076.75 1207 L2077.34 1207 L2077.93 1207 L2078.51 1207 L2079.1 1207 L2079.68 1207 L2080.27 1207 L2080.86 1207 L2081.44 1207 L2082.03 1207 L2082.62 1207 L2083.2 1207 L2083.79 1207 L2084.38 1207 L2084.96 1207 L2085.55 1207 L2086.14 1207 L2086.72 1207 L2087.31 1207 L2087.89 1207 L2088.48 1207 L2089.07 1207 L2089.65 1207 L2090.24 1207 L2090.83 1207 L2091.41 1207 L2092 1207 L2092.59 1207 L2093.17 1207 L2093.76 1207 L2094.35 1207 L2094.93 1207 L2095.52 1207 L2096.1 1207 L2096.69 1207 L2097.28 1207 L2097.86 1207 L2098.45 1207 L2099.04 1207 L2099.62 1207 L2100.21 1207 L2100.8 1207 L2101.38 1207 L2101.97 1207 L2102.55 1207 L2103.14 1207 L2103.73 1207 L2104.31 1207 L2104.9 1207 L2105.49 1207 L2106.07 1207 L2106.66 1207 L2107.25 1207 L2107.83 1207 L2108.42 1207 L2109.01 1207 L2109.59 1207 L2110.18 1207 L2110.76 1207 L2111.35 1207 L2111.94 1207 L2112.52 1207 L2113.11 1207 L2113.7 1207 L2114.28 1207 L2114.87 1207 L2115.46 1207 L2116.04 1207 L2116.63 1207 L2117.22 1207 L2117.8 1207 L2118.39 1207 L2118.97 1207 L2119.56 1207 L2120.15 1207 L2120.73 1207 L2121.32 1207 L2121.91 1207 L2122.49 1207 L2123.08 1207 L2123.67 1207 L2124.25 1207 L2124.84 1207 L2125.42 1207 L2126.01 1207 L2126.6 1207 L2127.18 1207 L2127.77 1207 L2128.36 1207 L2128.94 1207 L2129.53 1207 L2130.12 1207 L2130.7 1207 L2131.29 1207 L2131.88 1207 L2132.46 1207 L2133.05 1207 L2133.63 1207 L2134.22 1207 L2134.81 1207 L2135.39 1207 L2135.98 1207 L2136.57 1207 L2137.15 1207 L2137.74 1207 L2138.33 1207 L2138.91 1207 L2139.5 1207 L2140.09 1207 L2140.67 1207 L2141.26 1207 L2141.84 1207 L2142.43 1207 L2143.02 1207 L2143.6 1207 L2144.19 1207 L2144.78 1207 L2145.36 1207 L2145.95 1207 L2146.54 1207 L2147.12 1207 L2147.71 1207 L2148.3 1207 L2148.88 1207 L2149.47 1207 L2150.05 1207 L2150.64 1207 L2151.23 1207 L2151.81 1207 L2152.4 1207 L2152.99 1207 L2153.57 1207 L2154.16 1207 L2154.75 1207 L2155.33 1207 L2155.92 1207 L2156.5 1207 L2157.09 1207 L2157.68 1207 L2158.26 1207 L2158.26 1206.78 L2157.68 1206.78 L2157.09 1206.78 L2156.5 1206.78 L2155.92 1206.78 L2155.33 1206.78 L2154.75 1206.78 L2154.16 1206.78 L2153.57 1206.78 L2152.99 1206.78 L2152.4 1206.78 L2151.81 1206.78 L2151.23 1206.78 L2150.64 1206.78 L2150.05 1206.78 L2149.47 1206.78 L2148.88 1206.78 L2148.3 1206.78 L2147.71 1206.78 L2147.12 1206.78 L2146.54 1206.78 L2145.95 1206.78 L2145.36 1206.78 L2144.78 1206.78 L2144.19 1206.78 L2143.6 1206.78 L2143.02 1206.78 L2142.43 1206.78 L2141.84 1206.78 L2141.26 1206.78 L2140.67 1206.78 L2140.09 1206.78 L2139.5 1206.78 L2138.91 1206.78 L2138.33 1206.78 L2137.74 1206.78 L2137.15 1206.78 L2136.57 1206.78 L2135.98 1206.78 L2135.39 1206.78 L2134.81 1206.78 L2134.22 1206.78 L2133.63 1206.78 L2133.05 1206.78 L2132.46 1206.78 L2131.88 1206.78 L2131.29 1206.78 L2130.7 1206.78 L2130.12 1206.78 L2129.53 1206.78 L2128.94 1206.78 L2128.36 1206.78 L2127.77 1206.78 L2127.18 1206.78 L2126.6 1206.78 L2126.01 1206.78 L2125.42 1206.78 L2124.84 1206.78 L2124.25 1206.78 L2123.67 1206.78 L2123.08 1206.78 L2122.49 1206.78 L2121.91 1206.78 L2121.32 1206.78 L2120.73 1206.78 L2120.15 1206.78 L2119.56 1206.78 L2118.97 1206.78 L2118.39 1206.78 L2117.8 1206.78 L2117.22 1206.78 L2116.63 1206.78 L2116.04 1206.78 L2115.46 1206.78 L2114.87 1206.78 L2114.28 1206.78 L2113.7 1206.78 L2113.11 1206.78 L2112.52 1206.78 L2111.94 1206.78 L2111.35 1206.78 L2110.76 1206.78 L2110.18 1206.78 L2109.59 1206.78 L2109.01 1206.78 L2108.42 1206.78 L2107.83 1206.78 L2107.25 1206.78 L2106.66 1206.78 L2106.07 1206.78 L2105.49 1206.78 L2104.9 1206.78 L2104.31 1206.78 L2103.73 1206.78 L2103.14 1206.78 L2102.55 1206.78 L2101.97 1206.78 L2101.38 1206.78 L2100.8 1206.78 L2100.21 1206.78 L2099.62 1206.78 L2099.04 1206.78 L2098.45 1206.78 L2097.86 1206.78 L2097.28 1206.78 L2096.69 1206.78 L2096.1 1206.78 L2095.52 1206.78 L2094.93 1206.78 L2094.35 1206.78 L2093.76 1206.78 L2093.17 1206.78 L2092.59 1206.78 L2092 1206.78 L2091.41 1206.78 L2090.83 1206.78 L2090.24 1206.78 L2089.65 1206.78 L2089.07 1206.78 L2088.48 1206.78 L2087.89 1206.78 L2087.31 1206.78 L2086.72 1206.78 L2086.14 1206.78 L2085.55 1206.78 L2084.96 1206.78 L2084.38 1206.78 L2083.79 1206.78 L2083.2 1206.78 L2082.62 1206.78 L2082.03 1206.78 L2081.44 1206.78 L2080.86 1206.78 L2080.27 1206.78 L2079.68 1206.78 L2079.1 1206.78 L2078.51 1206.78 L2077.93 1206.78 L2077.34 1206.78 L2076.75 1206.78 L2076.17 1206.78 L2075.58 1206.78 L2074.99 1206.78 L2074.41 1206.78 L2073.82 1206.78 L2073.23 1206.78 L2072.65 1206.78 L2072.06 1206.78 L2071.48 1206.78 L2070.89 1206.78 L2070.3 1206.78 L2069.72 1206.78 L2069.13 1206.78 L2068.54 1206.78 L2067.96 1206.78 L2067.37 1206.78 L2066.78 1206.78 L2066.2 1206.78 L2065.61 1206.78 L2065.02 1206.78 L2064.44 1206.78 L2063.85 1206.78 L2063.27 1206.78 L2062.68 1206.78 L2062.09 1206.78 L2061.51 1206.78 L2060.92 1206.78 L2060.33 1206.78 L2059.75 1206.78 L2059.16 1206.78 L2058.57 1206.78 L2057.99 1206.78 L2057.4 1206.78 L2056.81 1206.78 L2056.23 1206.78 L2055.64 1206.78 L2055.06 1206.78 L2054.47 1206.78 L2053.88 1206.78 L2053.3 1206.78 L2052.71 1206.78 L2052.12 1206.78 L2051.54 1206.78 L2050.95 1206.78 L2050.36 1206.78 L2049.78 1206.78 L2049.19 1206.78 L2048.6 1206.78 L2048.02 1206.78 L2047.43 1206.78 L2046.85 1206.78 L2046.26 1206.78 L2045.67 1206.78 L2045.09 1206.78 L2044.5 1206.78 L2043.91 1206.78 L2043.33 1206.78 L2042.74 1206.78 L2042.15 1206.78 L2041.57 1206.78 L2040.98 1206.78 L2040.4 1206.78 L2039.81 1206.78 L2039.22 1206.78 L2038.64 1206.78 L2038.05 1206.78 L2037.46 1206.78 L2036.88 1206.78 L2036.29 1206.78 L2035.7 1206.78 L2035.12 1206.78 L2034.53 1206.78 L2033.94 1206.78 L2033.36 1206.78 L2032.77 1206.78 L2032.19 1206.78 L2031.6 1206.78 L2031.01 1206.78 L2030.43 1206.78 L2029.84 1206.78 L2029.25 1206.78 L2028.67 1206.78 L2028.08 1206.78 L2027.49 1206.78 L2026.91 1206.78 L2026.32 1206.78 L2025.73 1206.78 L2025.15 1206.78 L2024.56 1206.78 L2023.98 1206.78 L2023.39 1206.78 L2022.8 1206.78 L2022.22 1206.78 L2021.63 1206.78 L2021.04 1206.78 L2020.46 1206.78 L2019.87 1206.78 L2019.28 1206.78 L2018.7 1206.78 L2018.11 1206.78 L2017.53 1206.78 L2016.94 1206.78 L2016.35 1206.78 L2015.77 1206.78 L2015.18 1206.78 L2014.59 1206.78 L2014.01 1206.78 L2013.42 1206.78 L2012.83 1206.78 L2012.25 1206.78 L2011.66 1206.78 L2011.07 1206.78 L2010.49 1206.78 L2009.9 1206.78 L2009.32 1206.78 L2008.73 1206.78 L2008.14 1206.78 L2007.56 1206.78 L2006.97 1206.78 L2006.38 1206.78 L2005.8 1206.78 L2005.21 1206.78 L2004.62 1206.78 L2004.04 1206.78 L2003.45 1206.78 L2002.86 1206.78 L2002.28 1206.78 L2001.69 1206.78 L2001.11 1206.78 L2000.52 1206.78 L1999.93 1206.78 L1999.35 1206.78 L1998.76 1206.78 L1998.17 1206.78 L1997.59 1206.78 L1997 1206.78 L1996.41 1206.78 L1995.83 1206.78 L1995.24 1206.78 L1994.65 1206.78 L1994.07 1206.78 L1993.48 1206.78 L1992.9 1206.78 L1992.31 1206.78 L1991.72 1206.78 L1991.14 1206.78 L1990.55 1206.78 L1989.96 1206.78 L1989.38 1206.78 L1988.79 1206.78 L1988.2 1206.78 L1987.62 1206.78 L1987.03 1206.78 L1986.45 1206.78 L1985.86 1206.78 L1985.27 1206.78 L1984.69 1206.78 L1984.1 1206.78 L1983.51 1206.78 L1982.93 1206.78 L1982.34 1206.78 L1981.75 1206.78 L1981.17 1206.78 L1980.58 1206.78 L1979.99 1206.78 L1979.41 1206.78 L1978.82 1206.78 L1978.24 1206.78 L1977.65 1206.78 L1977.06 1206.78 L1976.48 1206.78 L1975.89 1206.78 L1975.3 1206.78 L1974.72 1206.78 L1974.13 1206.78 L1973.54 1206.78 L1972.96 1206.78 L1972.37 1206.78 L1971.78 1206.78 L1971.2 1206.78 L1970.61 1206.78 L1970.03 1206.78 L1969.44 1206.78 L1968.85 1206.78 L1968.27 1206.78 L1967.68 1206.78 L1967.09 1206.78 L1966.51 1206.78 L1965.92 1206.78 L1965.33 1206.78 L1964.75 1206.78 L1964.16 1206.78 L1963.58 1206.78 L1962.99 1206.78 L1962.4 1206.78 L1961.82 1206.78 L1961.23 1206.78 L1960.64 1206.78 L1960.06 1206.78 L1959.47 1206.78 L1958.88 1206.78 L1958.3 1206.78 L1957.71 1206.78 L1957.12 1206.78 L1956.54 1206.78 L1955.95 1206.78 L1955.37 1206.78 L1954.78 1206.78 L1954.19 1206.78 L1953.61 1206.78 L1953.02 1206.78 L1952.43 1206.78 L1951.85 1206.78 L1951.26 1206.78 L1950.67 1206.78 L1950.09 1206.78 L1949.5 1206.78 L1948.91 1206.78 L1948.33 1206.78 L1947.74 1206.78 L1947.16 1206.78 L1946.57 1206.78 L1945.98 1206.78 L1945.4 1206.78 L1944.81 1206.78 L1944.22 1206.78 L1943.64 1206.78 L1943.05 1206.78 L1942.46 1206.78 L1941.88 1206.78 L1941.29 1206.78 L1940.71 1206.78 L1940.12 1206.78 L1939.53 1206.78 L1938.95 1206.78 L1938.36 1206.78 L1937.77 1206.78 L1937.19 1206.78 L1936.6 1206.78 L1936.01 1206.78 L1935.43 1206.78 L1934.84 1206.78 L1934.25 1206.78 L1933.67 1206.78 L1933.08 1206.78 L1932.5 1206.78 L1931.91 1206.78 L1931.32 1206.78 L1930.74 1206.78 L1930.15 1206.78 L1929.56 1206.78 L1928.98 1206.78 L1928.39 1206.78 L1927.8 1206.78 L1927.22 1206.78 L1926.63 1206.78 L1926.04 1206.78 L1925.46 1206.78 L1924.87 1206.78 L1924.29 1206.78 L1923.7 1206.78 L1923.11 1206.78 L1922.53 1206.78 L1921.94 1206.78 L1921.35 1206.78 L1920.77 1206.78 L1920.18 1206.78 L1919.59 1206.78 L1919.01 1206.78 L1918.42 1206.78 L1917.83 1206.78 L1917.25 1206.78 L1916.66 1206.78 L1916.08 1206.78 L1915.49 1206.78 L1914.9 1206.78 L1914.32 1206.78 L1913.73 1206.78 L1913.14 1206.78 L1912.56 1206.78 L1911.97 1206.78 L1911.38 1206.78 L1910.8 1206.78 L1910.21 1206.78 L1909.63 1206.78 L1909.04 1206.78 L1908.45 1206.78 L1907.87 1206.78 L1907.28 1206.78 L1906.69 1206.78 L1906.11 1206.78 L1905.52 1206.78 L1904.93 1206.78 L1904.35 1206.78 L1903.76 1206.78 L1903.17 1206.78 L1902.59 1206.78 L1902 1206.78 L1901.42 1206.78 L1900.83 1206.78 L1900.24 1206.78 L1899.66 1206.78 L1899.07 1206.78 L1898.48 1206.78 L1897.9 1206.78 L1897.31 1206.78 L1896.72 1206.78 L1896.14 1206.78 L1895.55 1206.78 L1894.96 1206.78 L1894.38 1206.78 L1893.79 1206.78 L1893.21 1206.78 L1892.62 1206.78 L1892.03 1206.78 L1891.45 1206.78 L1890.86 1206.78 L1890.27 1206.78 L1889.69 1206.78 L1889.1 1206.78 L1888.51 1206.78 L1887.93 1206.78 L1887.34 1206.78 L1886.76 1206.78 L1886.17 1206.78 L1885.58 1206.78 L1885 1206.78 L1884.41 1206.78 L1883.82 1206.78 L1883.24 1206.78 L1882.65 1206.78 L1882.06 1206.78 L1881.48 1206.78 L1880.89 1206.78 L1880.3 1206.78 L1879.72 1206.78 L1879.13 1206.78 L1878.55 1206.78 L1877.96 1206.78 L1877.37 1206.78 L1876.79 1206.78 L1876.2 1206.78 L1875.61 1206.78 L1875.03 1206.78 L1874.44 1206.78 L1873.85 1206.78 L1873.27 1206.78 L1872.68 1206.78 L1872.09 1206.78 L1871.51 1206.78 L1870.92 1206.78 L1870.34 1206.78 L1869.75 1206.78 L1869.16 1206.78 L1868.58 1206.78 L1867.99 1206.78 L1867.4 1206.78 L1866.82 1206.78 L1866.23 1206.78 L1865.64 1206.78 L1865.06 1206.78 L1864.47 1206.78 L1863.88 1206.78 L1863.3 1206.78 L1862.71 1206.78 L1862.13 1206.78 L1861.54 1206.78 L1860.95 1206.78 L1860.37 1206.78 L1859.78 1206.78 L1859.19 1206.78 L1858.61 1206.78 L1858.02 1206.78 L1857.43 1206.78 L1856.85 1206.78 L1856.26 1206.78 L1855.68 1206.78 L1855.09 1206.78 L1854.5 1206.78 L1853.92 1206.78 L1853.33 1206.78 L1852.74 1206.78 L1852.16 1206.78 L1851.57 1206.78 L1850.98 1206.78 L1850.4 1206.78 L1849.81 1206.78 L1849.22 1206.78 L1848.64 1206.78 L1848.05 1206.78 L1847.47 1206.78 L1846.88 1206.78 L1846.29 1206.78 L1845.71 1206.78 L1845.12 1206.78 L1844.53 1206.78 L1843.95 1206.78 L1843.36 1206.78 L1842.77 1206.78 L1842.19 1206.78 L1841.6 1206.78 L1841.01 1206.78 L1840.43 1206.78 L1839.84 1206.78 L1839.26 1206.78 L1838.67 1206.78 L1838.08 1206.78 L1837.5 1206.78 L1836.91 1206.78 L1836.32 1206.78 L1835.74 1206.78 L1835.15 1206.78 L1834.56 1206.78 L1833.98 1206.78 L1833.39 1206.78 L1832.81 1206.78 L1832.22 1206.78 L1831.63 1206.78 L1831.05 1206.78 L1830.46 1206.78 L1829.87 1206.78 L1829.29 1206.78 L1828.7 1206.78 L1828.11 1206.78 L1827.53 1206.78 L1826.94 1206.78 L1826.35 1206.78 L1825.77 1206.78 L1825.18 1206.78 L1824.6 1206.78 L1824.01 1206.78 L1823.42 1206.78 L1822.84 1206.78 L1822.25 1206.78 L1821.66 1206.78 L1821.08 1206.78 L1820.49 1206.78 L1819.9 1206.78 L1819.32 1206.78 L1818.73 1206.78 L1818.14 1206.78 L1817.56 1206.78 L1816.97 1206.78 L1816.39 1206.78 L1815.8 1206.78 L1815.21 1206.78 L1814.63 1206.78 L1814.04 1206.78 L1813.45 1206.78 L1812.87 1206.78 L1812.28 1206.78 L1811.69 1206.78 L1811.11 1206.78 L1810.52 1206.78 L1809.94 1206.78 L1809.35 1206.78 L1808.76 1206.78 L1808.18 1206.78 L1807.59 1206.78 L1807 1206.78 L1806.42 1206.78 L1805.83 1206.78 L1805.24 1206.78 L1804.66 1206.78 L1804.07 1206.78 L1803.48 1206.78 L1802.9 1206.78 L1802.31 1206.78 L1801.73 1206.78 L1801.14 1206.78 L1800.55 1206.78 L1799.97 1206.78 L1799.38 1206.78 L1798.79 1206.78 L1798.21 1206.78 L1797.62 1206.78 L1797.03 1206.78 L1796.45 1206.78 L1795.86 1206.78 L1795.27 1206.78 L1794.69 1206.78 L1794.1 1206.78 L1793.52 1206.78 L1792.93 1206.78 L1792.34 1206.78 L1791.76 1206.78 L1791.17 1206.78 L1790.58 1206.78 L1790 1206.78 L1789.41 1206.78 L1788.82 1206.78 L1788.24 1206.78 L1787.65 1206.78 L1787.06 1206.78 L1786.48 1206.78 L1785.89 1206.78 L1785.31 1206.78 L1784.72 1206.78 L1784.13 1206.78 L1783.55 1206.78 L1782.96 1206.78 L1782.37 1206.78 L1781.79 1206.78 L1781.2 1206.78 L1780.61 1206.78 L1780.03 1206.78 L1779.44 1206.78 L1778.86 1206.78 L1778.27 1206.78 L1777.68 1206.78 L1777.1 1206.78 L1776.51 1206.78 L1775.92 1206.78 L1775.34 1206.78 L1774.75 1206.78 L1774.16 1206.78 L1773.58 1206.78 L1772.99 1206.78 L1772.4 1206.78 L1771.82 1206.78 L1771.23 1206.78 L1770.65 1206.78 L1770.06 1206.78 L1769.47 1206.78 L1768.89 1206.78 L1768.3 1206.78 L1767.71 1206.78 L1767.13 1206.78 L1766.54 1206.78 L1765.95 1206.78 L1765.37 1206.78 L1764.78 1206.78 L1764.19 1206.78 L1763.61 1206.78 L1763.02 1206.78 L1762.44 1206.78 L1761.85 1206.78 L1761.26 1206.78 L1760.68 1206.78 L1760.09 1206.78 L1759.5 1206.78 L1758.92 1206.78 L1758.33 1206.78 L1757.74 1206.78 L1757.16 1206.78 L1756.57 1206.78 L1755.99 1206.78 L1755.4 1206.78 L1754.81 1206.78 L1754.23 1206.78 L1753.64 1206.78 L1753.05 1206.78 L1752.47 1206.78 L1751.88 1206.78 L1751.29 1206.78 L1750.71 1206.78 L1750.12 1206.78 L1749.53 1206.78 L1748.95 1206.78 L1748.36 1206.78 L1747.78 1206.78 L1747.19 1206.78 L1746.6 1206.78 L1746.02 1206.78 L1745.43 1206.78 L1744.84 1206.78 L1744.26 1206.78 L1743.67 1206.78 L1743.08 1206.78 L1742.5 1206.78 L1741.91 1206.78 L1741.32 1206.78 L1740.74 1206.78 L1740.15 1206.78 L1739.57 1206.78 L1738.98 1206.78 L1738.39 1206.78 L1737.81 1206.78 L1737.22 1206.78 L1736.63 1206.78 L1736.05 1206.78 L1735.46 1206.78 L1734.87 1206.78 L1734.29 1206.78 L1733.7 1206.78 L1733.11 1206.78 L1732.53 1206.78 L1731.94 1206.78 L1731.36 1206.78 L1730.77 1206.78 L1730.18 1206.78 L1729.6 1206.78 L1729.01 1206.78 L1728.42 1206.78 L1727.84 1206.78 L1727.25 1206.78 L1726.66 1206.78 L1726.08 1206.78 L1725.49 1206.78 L1724.91 1206.78 L1724.32 1206.78 L1723.73 1206.78 L1723.15 1206.78 L1722.56 1206.78 L1721.97 1206.78 L1721.39 1206.78 L1720.8 1206.78 L1720.21 1206.78 L1719.63 1206.78 L1719.04 1206.78 L1718.45 1206.78 L1717.87 1206.78 L1717.28 1206.78 L1716.7 1206.78 L1716.11 1206.78 L1715.52 1206.78 L1714.94 1206.78 L1714.35 1206.78 L1713.76 1206.78 L1713.18 1206.78 L1712.59 1206.78 L1712 1206.78 L1711.42 1206.78 L1710.83 1206.78 L1710.24 1206.78 L1709.66 1206.78 L1709.07 1206.78 L1708.49 1206.78 L1707.9 1206.78 L1707.31 1206.78 L1706.73 1206.78 L1706.14 1206.78 L1705.55 1206.78 L1704.97 1206.78 L1704.38 1206.78 L1703.79 1206.78 L1703.21 1206.78 L1702.62 1206.78 L1702.04 1206.78 L1701.45 1206.78 L1700.86 1206.78 L1700.28 1206.78 L1699.69 1206.78 L1699.1 1206.78 L1698.52 1206.78 L1697.93 1206.78 L1697.34 1206.78 L1696.76 1206.78 L1696.17 1206.78 L1695.58 1206.78 L1695 1206.78 L1694.41 1206.78 L1693.83 1206.78 L1693.24 1206.78 L1692.65 1206.78 L1692.07 1206.78 L1691.48 1206.78 L1690.89 1206.78 L1690.31 1206.78 L1689.72 1206.78 L1689.13 1206.78 L1688.55 1206.78 L1687.96 1206.78 L1687.37 1206.78 L1686.79 1206.78 L1686.2 1206.78 L1685.62 1206.78 L1685.03 1206.78 L1684.44 1206.78 L1683.86 1206.78 L1683.27 1206.78 L1682.68 1206.78 L1682.1 1206.78 L1681.51 1206.78 L1680.92 1206.78 L1680.34 1206.78 L1679.75 1206.78 L1679.17 1206.78 L1678.58 1206.78 L1677.99 1206.78 L1677.41 1206.78 L1676.82 1206.78 L1676.23 1206.78 L1675.65 1206.78 L1675.06 1206.78 L1674.47 1206.78 L1673.89 1206.78 L1673.3 1206.78 L1672.71 1206.78 L1672.13 1206.78 L1671.54 1206.78 L1670.96 1206.78 L1670.37 1206.78 L1669.78 1206.78 L1669.2 1206.78 L1668.61 1206.78 L1668.02 1206.78 L1667.44 1206.78 L1666.85 1206.78 L1666.26 1206.78 L1665.68 1206.78 L1665.09 1206.78 L1664.5 1206.78 L1663.92 1206.78 L1663.33 1206.78 L1662.75 1206.78 L1662.16 1206.78 L1661.57 1206.78 L1660.99 1206.78 L1660.4 1206.78 L1659.81 1206.78 L1659.23 1206.78 L1658.64 1206.78 L1658.05 1206.78 L1657.47 1206.78 L1656.88 1206.78 L1656.29 1206.78 L1655.71 1206.78 L1655.12 1206.78 L1654.54 1206.78 L1653.95 1206.78 L1653.36 1206.78 L1652.78 1206.78 L1652.19 1206.78 L1651.6 1206.78 L1651.02 1206.78 L1650.43 1206.78 L1649.84 1206.78 L1649.26 1206.78 L1648.67 1206.78 L1648.09 1206.78 L1647.5 1206.78 L1646.91 1206.78 L1646.33 1206.78 L1645.74 1206.78 L1645.15 1206.78 L1644.57 1206.78 L1643.98 1206.78 L1643.39 1206.78 L1642.81 1206.78 L1642.22 1206.78 L1641.63 1206.78 L1641.05 1206.78 L1640.46 1206.78 L1639.88 1206.78 L1639.29 1206.78 L1638.7 1206.78 L1638.12 1206.78 L1637.53 1206.78 L1636.94 1206.78 L1636.36 1206.78 L1635.77 1206.78 L1635.18 1206.78 L1634.6 1206.78 L1634.01 1206.78 L1633.42 1206.78 L1632.84 1206.78 L1632.25 1206.78 L1631.67 1206.78 L1631.08 1206.78 L1630.49 1206.78 L1629.91 1206.78 L1629.32 1206.78 L1628.73 1206.78 L1628.15 1206.78 L1627.56 1206.78 L1626.97 1206.78 L1626.39 1206.78 L1625.8 1206.78 L1625.22 1206.78 L1624.63 1206.78 L1624.04 1206.78 L1623.46 1206.78 L1622.87 1206.78 L1622.28 1206.78 L1621.7 1206.78 L1621.11 1206.78 L1620.52 1206.78 L1619.94 1206.78 L1619.35 1206.78 L1618.76 1206.78 L1618.18 1206.78 L1617.59 1206.78 L1617.01 1206.78 L1616.42 1206.78 L1615.83 1206.78 L1615.25 1206.78 L1614.66 1206.78 L1614.07 1206.78 L1613.49 1206.78 L1612.9 1206.78 L1612.31 1206.78 L1611.73 1206.78 L1611.14 1206.78 L1610.55 1206.78 L1609.97 1206.78 L1609.38 1206.78 L1608.8 1206.78 L1608.21 1206.78 L1607.62 1206.78 L1607.04 1206.78 L1606.45 1206.78 L1605.86 1206.78 L1605.28 1206.78 L1604.69 1206.78 L1604.1 1206.78 L1603.52 1206.78 L1602.93 1206.78 L1602.34 1206.78 L1601.76 1206.78 L1601.17 1206.78 L1600.59 1206.78 L1600 1206.78 L1599.41 1206.78 L1598.83 1206.78 L1598.24 1206.78 L1597.65 1206.78 L1597.07 1206.78 L1596.48 1206.78 L1595.89 1206.78 L1595.31 1206.78 L1594.72 1206.78 L1594.14 1206.78 L1593.55 1206.78 L1592.96 1206.78 L1592.38 1206.78 L1591.79 1206.78 L1591.2 1206.78 L1590.62 1206.78 L1590.03 1206.78 L1589.44 1206.78 L1588.86 1206.78 L1588.27 1206.78 L1587.68 1206.78 L1587.1 1206.78 L1586.51 1206.78 L1585.93 1206.78 L1585.34 1206.78 L1584.75 1206.78 L1584.17 1206.78 L1583.58 1206.78 L1582.99 1206.78 L1582.41 1206.78 L1581.82 1206.78 L1581.23 1206.78 L1580.65 1206.78 L1580.06 1206.78 L1579.47 1206.78 L1578.89 1206.78 L1578.3 1206.78 L1577.72 1206.78 L1577.13 1206.78 L1576.54 1206.78 L1575.96 1206.78 L1575.37 1206.78 L1574.78 1206.78 L1574.2 1206.78 L1573.61 1206.78 L1573.02 1206.78 L1572.44 1206.78 L1571.85 1206.78 L1571.27 1206.78 L1570.68 1206.78 L1570.09 1206.78 L1569.51 1206.78 L1568.92 1206.78 L1568.33 1206.78 L1567.75 1206.78 L1567.16 1206.78 L1566.57 1206.78 L1565.99 1206.78 L1565.4 1206.78 L1564.81 1206.78 L1564.23 1206.78 L1563.64 1206.78 L1563.06 1206.78 L1562.47 1206.78 L1561.88 1206.78 L1561.3 1206.78 L1560.71 1206.78 L1560.12 1206.78 L1559.54 1206.78 L1558.95 1206.78 L1558.36 1206.78 L1557.78 1206.78 L1557.19 1206.78 L1556.6 1206.78 L1556.02 1206.78 L1555.43 1206.78 L1554.85 1206.78 L1554.26 1206.78 L1553.67 1206.78 L1553.09 1206.78 L1552.5 1206.78 L1551.91 1206.78 L1551.33 1206.78 L1550.74 1206.78 L1550.15 1206.78 L1549.57 1206.78 L1548.98 1206.78 L1548.4 1206.78 L1547.81 1206.78 L1547.22 1206.78 L1546.64 1206.78 L1546.05 1206.78 L1545.46 1206.78 L1544.88 1206.78 L1544.29 1206.78 L1543.7 1206.78 L1543.12 1206.78 L1542.53 1206.78 L1541.94 1206.78 L1541.36 1206.78 L1540.77 1206.78 L1540.19 1206.78 L1539.6 1206.78 L1539.01 1206.78 L1538.43 1206.78 L1537.84 1206.78 L1537.25 1206.78 L1536.67 1206.78 L1536.08 1206.78 L1535.49 1206.78 L1534.91 1206.78 L1534.32 1206.78 L1533.73 1206.78 L1533.15 1206.78 L1532.56 1206.78 L1531.98 1206.78 L1531.39 1206.78 L1530.8 1206.78 L1530.22 1206.78 L1529.63 1206.78 L1529.04 1206.78 L1528.46 1206.78 L1527.87 1206.78 L1527.28 1206.78 L1526.7 1206.78 L1526.11 1206.78 L1525.52 1206.78 L1524.94 1206.78 L1524.35 1206.78 L1523.77 1206.78 L1523.18 1206.78 L1522.59 1206.78 L1522.01 1206.78 L1521.42 1206.78 L1520.83 1206.78 L1520.25 1206.78 L1519.66 1206.78 L1519.07 1206.78 L1518.49 1206.78 L1517.9 1206.78 L1517.32 1206.78 L1516.73 1206.78 L1516.14 1206.78 L1515.56 1206.78 L1514.97 1206.78 L1514.38 1206.78 L1513.8 1206.78 L1513.21 1206.78 L1512.62 1206.78 L1512.04 1206.78 L1511.45 1206.78 L1510.86 1206.78 L1510.28 1206.78 L1509.69 1206.78 L1509.11 1206.78 L1508.52 1206.78 L1507.93 1206.78 L1507.35 1206.78 L1506.76 1206.78 L1506.17 1206.78 L1505.59 1206.78 L1505 1206.78 L1504.41 1206.78 L1503.83 1206.78 L1503.24 1206.78 L1502.65 1206.78 L1502.07 1206.78 L1501.48 1206.78 L1500.9 1206.78 L1500.31 1206.78 L1499.72 1206.78 L1499.14 1206.78 L1498.55 1206.78 L1497.96 1206.78 L1497.38 1206.78 L1496.79 1206.78 L1496.2 1206.78 L1495.62 1206.78 L1495.03 1206.78 L1494.45 1206.78 L1493.86 1206.78 L1493.27 1206.78 L1492.69 1206.78 L1492.1 1206.78 L1491.51 1206.78 L1490.93 1206.78 L1490.34 1206.78 L1489.75 1206.78 L1489.17 1206.78 L1488.58 1206.78 L1487.99 1206.78 L1487.41 1206.78 L1486.82 1206.78 L1486.24 1206.78 L1485.65 1206.78 L1485.06 1206.78 L1484.48 1206.78 L1483.89 1206.78 L1483.3 1206.78 L1482.72 1206.78 L1482.13 1206.78 L1481.54 1206.78 L1480.96 1206.78 L1480.37 1206.78 L1479.78 1206.78 L1479.2 1206.78 L1478.61 1206.78 L1478.03 1206.78 L1477.44 1206.78 L1476.85 1206.78 L1476.27 1206.78 L1475.68 1206.78 L1475.09 1206.78 L1474.51 1206.78 L1473.92 1206.78 L1473.33 1206.78 L1472.75 1206.78 L1472.16 1206.78 L1471.57 1206.78 L1470.99 1206.78 L1470.4 1206.78 L1469.82 1206.78 L1469.23 1206.78 L1468.64 1206.78 L1468.06 1206.78 L1467.47 1206.78 L1466.88 1206.78 L1466.3 1206.78 L1465.71 1206.78 L1465.12 1206.78 L1464.54 1206.78 L1463.95 1206.78 L1463.37 1206.78 L1462.78 1206.78 L1462.19 1206.78 L1461.61 1206.78 L1461.02 1206.78 L1460.43 1206.78 L1459.85 1206.78 L1459.26 1206.78 L1458.67 1206.78 L1458.09 1206.78 L1457.5 1206.78 L1456.91 1206.78 L1456.33 1206.78 L1455.74 1206.78 L1455.16 1206.78 L1454.57 1206.78 L1453.98 1206.78 L1453.4 1206.78 L1452.81 1206.78 L1452.22 1206.78 L1451.64 1206.78 L1451.05 1206.78 L1450.46 1206.78 L1449.88 1206.78 L1449.29 1206.78 L1448.7 1206.78 L1448.12 1206.78 L1447.53 1206.78 L1446.95 1206.78 L1446.36 1206.78 L1445.77 1206.78 L1445.19 1206.78 L1444.6 1206.78 L1444.01 1206.78 L1443.43 1206.78 L1442.84 1206.78 L1442.25 1206.78 L1441.67 1206.78 L1441.08 1206.78 L1440.5 1206.78 L1439.91 1206.78 L1439.32 1206.78 L1438.74 1206.78 L1438.15 1206.78 L1437.56 1206.78 L1436.98 1206.78 L1436.39 1206.78 L1435.8 1206.78 L1435.22 1206.78 L1434.63 1206.78 L1434.04 1206.78 L1433.46 1206.78 L1432.87 1206.78 L1432.29 1206.78 L1431.7 1206.78 L1431.11 1206.78 L1430.53 1206.78 L1429.94 1206.78 L1429.35 1206.78 L1428.77 1206.78 L1428.18 1206.78 L1427.59 1206.78 L1427.01 1206.78 L1426.42 1206.78 L1425.83 1206.78 L1425.25 1206.78 L1424.66 1206.78 L1424.08 1206.78 L1423.49 1206.78 L1422.9 1206.78 L1422.32 1206.78 L1421.73 1206.78 L1421.14 1206.78 L1420.56 1206.78 L1419.97 1206.78 L1419.38 1206.78 L1418.8 1206.78 L1418.21 1206.78 L1417.63 1206.78 L1417.04 1206.78 L1416.45 1206.78 L1415.87 1206.78 L1415.28 1206.78 L1414.69 1206.78 L1414.11 1206.78 L1413.52 1206.78 L1412.93 1206.78 L1412.35 1206.78 L1411.76 1206.78 L1411.17 1206.78 L1410.59 1206.78 L1410 1206.78 L1409.42 1206.78 L1408.83 1206.78 L1408.24 1206.78 L1407.66 1206.78 L1407.07 1206.78 L1406.48 1206.78 L1405.9 1206.78 L1405.31 1206.78 L1404.72 1206.78 L1404.14 1206.78 L1403.55 1206.78 L1402.96 1206.78 L1402.38 1206.78 L1401.79 1206.78 L1401.21 1206.78 L1400.62 1206.78 L1400.03 1206.78 L1399.45 1206.78 L1398.86 1206.78 L1398.27 1206.78 L1397.69 1206.78 L1397.1 1206.78 L1396.51 1206.78 L1395.93 1206.78 L1395.34 1206.78 L1394.75 1206.78 L1394.17 1206.78 L1393.58 1206.78 L1393 1206.78 L1392.41 1206.78 L1391.82 1206.78 L1391.24 1206.78 L1390.65 1206.78 L1390.06 1206.78 L1389.48 1206.78 L1388.89 1206.78 L1388.3 1206.78 L1387.72 1206.78 L1387.13 1206.78 L1386.55 1206.78 L1385.96 1206.78 L1385.37 1206.78 L1384.79 1206.78 L1384.2 1206.78 L1383.61 1206.78 L1383.03 1206.78 L1382.44 1206.78 L1381.85 1206.78 L1381.27 1206.78 L1380.68 1206.78 L1380.09 1206.78 L1379.51 1206.78 L1378.92 1206.78 L1378.34 1206.78 L1377.75 1206.78 L1377.16 1206.78 L1376.58 1206.78 L1375.99 1206.78 L1375.4 1206.78 L1374.82 1206.78 L1374.23 1206.78 L1373.64 1206.78 L1373.06 1206.78 L1372.47 1206.78 L1371.88 1206.78 L1371.3 1206.78 L1370.71 1206.78 L1370.13 1206.78 L1369.54 1206.78 L1368.95 1206.78 L1368.37 1206.78 L1367.78 1206.78 L1367.19 1206.78 L1366.61 1206.78 L1366.02 1206.78 L1365.43 1206.78 L1364.85 1206.78 L1364.26 1206.78 L1363.68 1206.78 L1363.09 1206.78 L1362.5 1206.78 L1361.92 1206.78 L1361.33 1206.78 L1360.74 1206.78 L1360.16 1206.78 L1359.57 1206.78 L1358.98 1206.78 L1358.4 1206.78 L1357.81 1206.78 L1357.22 1206.78 L1356.64 1206.78 L1356.05 1206.78 L1355.47 1206.78 L1354.88 1206.78 L1354.29 1206.78 L1353.71 1206.78 L1353.12 1206.78 L1352.53 1206.78 L1351.95 1206.78 L1351.36 1206.78 L1350.77 1206.78 L1350.19 1206.78 L1349.6 1206.78 L1349.01 1206.78 L1348.43 1206.78 L1347.84 1206.78 L1347.26 1206.78 L1346.67 1206.78 L1346.08 1206.78 L1345.5 1206.78 L1344.91 1206.78 L1344.32 1206.78 L1343.74 1206.78 L1343.15 1206.78 L1342.56 1206.78 L1341.98 1206.78 L1341.39 1206.78 L1340.8 1206.78 L1340.22 1206.78 L1339.63 1206.78 L1339.05 1206.78 L1338.46 1206.78 L1337.87 1206.78 L1337.29 1206.78 L1336.7 1206.78 L1336.11 1206.78 L1335.53 1206.78 L1334.94 1206.78 L1334.35 1206.78 L1333.77 1206.78 L1333.18 1206.78 L1332.6 1206.78 L1332.01 1206.78 L1331.42 1206.78 L1330.84 1206.78 L1330.25 1206.78 L1329.66 1206.78 L1329.08 1206.78 L1328.49 1206.78 L1327.9 1206.78 L1327.32 1206.78 L1326.73 1206.78 L1326.14 1206.78 L1325.56 1206.78 L1324.97 1206.78 L1324.39 1206.78 L1323.8 1206.78 L1323.21 1206.78 L1322.63 1206.78 L1322.04 1206.78 L1321.45 1206.78 L1320.87 1206.78 L1320.28 1206.78 L1319.69 1206.78 L1319.11 1206.78 L1318.52 1206.78 L1317.93 1206.78 L1317.35 1206.78 L1316.76 1206.78 L1316.18 1206.78 L1315.59 1206.78 L1315 1206.78 L1314.42 1206.78 L1313.83 1206.78 L1313.24 1206.78 L1312.66 1206.78 L1312.07 1206.78 L1311.48 1206.78 L1310.9 1206.78 L1310.31 1206.78 L1309.73 1206.78 L1309.14 1206.78 L1308.55 1206.78 L1307.97 1206.78 L1307.38 1206.78 L1306.79 1206.78 L1306.21 1206.78 L1305.62 1206.78 L1305.03 1206.78 L1304.45 1206.78 L1303.86 1206.78 L1303.27 1206.78 L1302.69 1206.78 L1302.1 1206.78 L1301.52 1206.78 L1300.93 1206.78 L1300.34 1206.78 L1299.76 1206.78 L1299.17 1206.78 L1298.58 1206.78 L1298 1206.78 L1297.41 1206.78 L1296.82 1206.78 L1296.24 1206.78 L1295.65 1206.78 L1295.06 1206.78 L1294.48 1206.78 L1293.89 1206.78 L1293.31 1206.78 L1292.72 1206.78 L1292.13 1206.78 L1291.55 1206.78 L1290.96 1206.78 L1290.37 1206.78 L1289.79 1206.78 L1289.2 1206.78 L1288.61 1206.78 L1288.03 1206.78 L1287.44 1206.78 L1286.86 1206.78 L1286.27 1206.78 L1285.68 1206.78 L1285.1 1206.78 L1284.51 1206.78 L1283.92 1206.78 L1283.34 1206.78 L1282.75 1206.78 L1282.16 1206.78 L1281.58 1206.78 L1280.99 1206.78 L1280.4 1206.78 L1279.82 1206.78 L1279.23 1206.78 L1278.65 1206.78 L1278.06 1206.78 L1277.47 1206.78 L1276.89 1206.78 L1276.3 1206.78 L1275.71 1206.78 L1275.13 1206.78 L1274.54 1206.78 L1273.95 1206.78 L1273.37 1206.78 L1272.78 1206.78 L1272.19 1206.78 L1271.61 1206.78 L1271.02 1206.78 L1270.44 1206.78 L1269.85 1206.78 L1269.26 1206.78 L1268.68 1206.78 L1268.09 1206.78 L1267.5 1206.78 L1266.92 1206.78 L1266.33 1206.78 L1265.74 1206.78 L1265.16 1206.78 L1264.57 1206.78 L1263.98 1206.78 L1263.4 1206.78 L1262.81 1206.78 L1262.23 1206.78 L1261.64 1206.78 L1261.05 1206.78 L1260.47 1206.78 L1259.88 1206.78 L1259.29 1206.78 L1258.71 1206.78 L1258.12 1206.78 L1257.53 1206.78 L1256.95 1206.78 L1256.36 1206.78 L1255.78 1206.78 L1255.19 1206.78 L1254.6 1206.78 L1254.02 1206.78 L1253.43 1206.78 L1252.84 1206.78 L1252.26 1206.78 L1251.67 1206.78 L1251.08 1206.78 L1250.5 1206.78 L1249.91 1206.78 L1249.32 1206.78 L1248.74 1206.78 L1248.15 1206.78 L1247.57 1206.78 L1246.98 1206.78 L1246.39 1206.78 L1245.81 1206.78 L1245.22 1206.78 L1244.63 1206.78 L1244.05 1206.78 L1243.46 1206.78 L1242.87 1206.78 L1242.29 1206.78 L1241.7 1206.78 L1241.11 1206.78 L1240.53 1206.78 L1239.94 1206.78 L1239.36 1206.78 L1238.77 1206.78 L1238.18 1206.78 L1237.6 1206.78 L1237.01 1206.78 L1236.42 1206.78 L1235.84 1206.78 L1235.25 1206.78 L1234.66 1206.78 L1234.08 1206.78 L1233.49 1206.78 L1232.91 1206.78 L1232.32 1206.78 L1231.73 1206.78 L1231.15 1206.78 L1230.56 1206.78 L1229.97 1206.78 L1229.39 1206.78 L1228.8 1206.78 L1228.21 1206.78 L1227.63 1206.78 L1227.04 1206.78 L1226.45 1206.78 L1225.87 1206.78 L1225.28 1206.78 L1224.7 1206.78 L1224.11 1206.78 L1223.52 1206.78 L1222.94 1206.78 L1222.35 1206.78 L1221.76 1206.78 L1221.18 1206.78 L1220.59 1206.78 L1220 1206.78 L1219.42 1206.78 L1218.83 1206.78 L1218.24 1206.78 L1217.66 1206.78 L1217.07 1206.78 L1216.49 1206.78 L1215.9 1206.78 L1215.31 1206.78 L1214.73 1206.78 L1214.14 1206.78 L1213.55 1206.78 L1212.97 1206.78 L1212.38 1206.78 L1211.79 1206.78 L1211.21 1206.78 L1210.62 1206.78 L1210.03 1206.78 L1209.45 1206.78 L1208.86 1206.78 L1208.28 1206.78 L1207.69 1206.78 L1207.1 1206.78 L1206.52 1206.78 L1205.93 1206.78 L1205.34 1206.78 L1204.76 1206.78 L1204.17 1206.78 L1203.58 1206.78 L1203 1206.78 L1202.41 1206.78 L1201.83 1206.78 L1201.24 1206.78 L1200.65 1206.78 L1200.07 1206.78 L1199.48 1206.78 L1198.89 1206.78 L1198.31 1206.78 L1197.72 1206.78 L1197.13 1206.78 L1196.55 1206.78 L1195.96 1206.78 L1195.37 1206.78 L1194.79 1206.78 L1194.2 1206.78 L1193.62 1206.78 L1193.03 1206.78 L1192.44 1206.78 L1191.86 1206.78 L1191.27 1206.78 L1190.68 1206.78 L1190.1 1206.78 L1189.51 1206.78 L1188.92 1206.78 L1188.34 1206.78 L1187.75 1206.78 L1187.16 1206.78 L1186.58 1206.78 L1185.99 1206.78 L1185.41 1206.78 L1184.82 1206.78 L1184.23 1206.78 L1183.65 1206.78 L1183.06 1206.78 L1182.47 1206.78 L1181.89 1206.78 L1181.3 1206.78 L1180.71 1206.78 L1180.13 1206.78 L1179.54 1206.78 L1178.96 1206.78 L1178.37 1206.78 L1177.78 1206.78 L1177.2 1206.78 L1176.61 1206.78 L1176.02 1206.78 L1175.44 1206.78 L1174.85 1206.78 L1174.26 1206.78 L1173.68 1206.78 L1173.09 1206.78 L1172.5 1206.78 L1171.92 1206.78 L1171.33 1206.78 L1170.75 1206.78 L1170.16 1206.78 L1169.57 1206.78 L1168.99 1206.78 L1168.4 1206.78 L1167.81 1206.78 L1167.23 1206.78 L1166.64 1206.78 L1166.05 1206.78 L1165.47 1206.78 L1164.88 1206.78 L1164.29 1206.78 L1163.71 1206.78 L1163.12 1206.78 L1162.54 1206.78 L1161.95 1206.78 L1161.36 1206.78 L1160.78 1206.78 L1160.19 1206.78 L1159.6 1206.78 L1159.02 1206.78 L1158.43 1206.78 L1157.84 1206.78 L1157.26 1206.78 L1156.67 1206.78 L1156.09 1206.78 L1155.5 1206.78 L1154.91 1206.78 L1154.33 1206.78 L1153.74 1206.78 L1153.15 1206.78 L1152.57 1206.78 L1151.98 1206.78 L1151.39 1206.78 L1150.81 1206.78 L1150.22 1206.78 L1149.63 1206.78 L1149.05 1206.78 L1148.46 1206.78 L1147.88 1206.78 L1147.29 1206.78 L1146.7 1206.78 L1146.12 1206.78 L1145.53 1206.78 L1144.94 1206.78 L1144.36 1206.78 L1143.77 1206.78 L1143.18 1206.78 L1142.6 1206.78 L1142.01 1206.78 L1141.42 1206.78 L1140.84 1206.78 L1140.25 1206.78 L1139.67 1206.78 L1139.08 1206.78 L1138.49 1206.78 L1137.91 1206.78 L1137.32 1206.78 L1136.73 1206.78 L1136.15 1206.78 L1135.56 1206.78 L1134.97 1206.78 L1134.39 1206.78 L1133.8 1206.78 L1133.21 1206.78 L1132.63 1206.78 L1132.04 1206.78 L1131.46 1206.78 L1130.87 1206.78 L1130.28 1206.78 L1129.7 1206.78 L1129.11 1206.78 L1128.52 1206.78 L1127.94 1206.78 L1127.35 1206.78 L1126.76 1206.78 L1126.18 1206.78 L1125.59 1206.78 L1125.01 1206.78 L1124.42 1206.78 L1123.83 1206.78 L1123.25 1206.78 L1122.66 1206.78 L1122.07 1206.78 L1121.49 1206.78 L1120.9 1206.78 L1120.31 1206.78 L1119.73 1206.78 L1119.14 1206.78 L1118.55 1206.78 L1117.97 1206.78 L1117.38 1206.78 L1116.8 1206.78 L1116.21 1206.78 L1115.62 1206.78 L1115.04 1206.78 L1114.45 1206.78 L1113.86 1206.78 L1113.28 1206.78 L1112.69 1206.78 L1112.1 1206.78 L1111.52 1206.78 L1110.93 1206.78 L1110.34 1206.78 L1109.76 1206.78 L1109.17 1206.78 L1108.59 1206.78 L1108 1206.78 L1107.41 1206.78 L1106.83 1206.78 L1106.24 1206.78 L1105.65 1206.78 L1105.07 1206.78 L1104.48 1206.78 L1103.89 1206.78 L1103.31 1206.78 L1102.72 1206.78 L1102.14 1206.78 L1101.55 1206.78 L1100.96 1206.78 L1100.38 1206.78 L1099.79 1206.78 L1099.2 1206.78 L1098.62 1206.78 L1098.03 1206.78 L1097.44 1206.78 L1096.86 1206.78 L1096.27 1206.78 L1095.68 1206.78 L1095.1 1206.78 L1094.51 1206.78 L1093.93 1206.78 L1093.34 1206.78 L1092.75 1206.78 L1092.17 1206.78 L1091.58 1206.78 L1090.99 1206.78 L1090.41 1206.78 L1089.82 1206.78 L1089.23 1206.78 L1088.65 1206.78 L1088.06 1206.78 L1087.47 1206.78 L1086.89 1206.78 L1086.3 1206.78 L1085.72 1206.78 L1085.13 1206.78 L1084.54 1206.78 L1083.96 1206.78 L1083.37 1206.78 L1082.78 1206.78 L1082.2 1206.78 L1081.61 1206.78 L1081.02 1206.78 L1080.44 1206.78 L1079.85 1206.78 L1079.26 1206.78 L1078.68 1206.78 L1078.09 1206.78 L1077.51 1206.78 L1076.92 1206.78 L1076.33 1206.78 L1075.75 1206.78 L1075.16 1206.78 L1074.57 1206.78 L1073.99 1206.78 L1073.4 1206.78 L1072.81 1206.78 L1072.23 1206.78 L1071.64 1206.78 L1071.06 1206.78 L1070.47 1206.78 L1069.88 1206.78 L1069.3 1206.78 L1068.71 1206.78 L1068.12 1206.78 L1067.54 1206.78 L1066.95 1206.78 L1066.36 1206.78 L1065.78 1206.78 L1065.19 1206.78 L1064.6 1206.78 L1064.02 1206.78 L1063.43 1206.78 L1062.85 1206.78 L1062.26 1206.78 L1061.67 1206.78 L1061.09 1206.78 L1060.5 1206.78 L1059.91 1206.78 L1059.33 1206.78 L1058.74 1206.78 L1058.15 1206.78 L1057.57 1206.78 L1056.98 1206.78 L1056.39 1206.78 L1055.81 1206.78 L1055.22 1206.78 L1054.64 1206.78 L1054.05 1206.78 L1053.46 1206.78 L1052.88 1206.78 L1052.29 1206.78 L1051.7 1206.78 L1051.12 1206.78 L1050.53 1206.78 L1049.94 1206.78 L1049.36 1206.78 L1048.77 1206.78 L1048.19 1206.78 L1047.6 1206.78 L1047.01 1206.78 L1046.43 1206.78 L1045.84 1206.78 L1045.25 1206.78 L1044.67 1206.78 L1044.08 1206.78 L1043.49 1206.78 L1042.91 1206.78 L1042.32 1206.78 L1041.73 1206.78 L1041.15 1206.78 L1040.56 1206.78 L1039.98 1206.78 L1039.39 1206.78 L1038.8 1206.78 L1038.22 1206.78 L1037.63 1206.78 L1037.04 1206.78 L1036.46 1206.78 L1035.87 1206.78 L1035.28 1206.78 L1034.7 1206.78 L1034.11 1206.78 L1033.52 1206.78 L1032.94 1206.78 L1032.35 1206.78 L1031.77 1206.78 L1031.18 1206.78 L1030.59 1206.78 L1030.01 1206.78 L1029.42 1206.78 L1028.83 1206.78 L1028.25 1206.78 L1027.66 1206.78 L1027.07 1206.78 L1026.49 1206.78 L1025.9 1206.78 L1025.32 1206.78 L1024.73 1206.78 L1024.14 1206.78 L1023.56 1206.78 L1022.97 1206.78 L1022.38 1206.78 L1021.8 1206.78 L1021.21 1206.78 L1020.62 1206.78 L1020.04 1206.78 L1019.45 1206.78 L1018.86 1206.78 L1018.28 1206.78 L1017.69 1206.78 L1017.11 1206.78 L1016.52 1206.78 L1015.93 1206.78 L1015.35 1206.78 L1014.76 1206.78 L1014.17 1206.78 L1013.59 1206.78 L1013 1206.78 L1012.41 1206.78 L1011.83 1206.78 L1011.24 1206.78 L1010.65 1206.78 L1010.07 1206.78 L1009.48 1206.78 L1008.9 1206.78 L1008.31 1206.78 L1007.72 1206.78 L1007.14 1206.78 L1006.55 1206.78 L1005.96 1206.78 L1005.38 1206.78 L1004.79 1206.78 L1004.2 1206.78 L1003.62 1206.78 L1003.03 1206.78 L1002.44 1206.78 L1001.86 1206.78 L1001.27 1206.78 L1000.69 1206.78 L1000.1 1206.78 L999.513 1206.78 L998.926 1206.78 L998.34 1206.78 L997.754 1206.78 L997.167 1206.78 L996.581 1206.78 L995.994 1206.78 L995.408 1206.78 L994.822 1206.78 L994.235 1206.78 L993.649 1206.78 L993.062 1206.78 L992.476 1206.78 L991.889 1206.78 L991.303 1206.78 L990.717 1206.78 L990.13 1206.78 L989.544 1206.78 L988.957 1206.78 L988.371 1206.78 L987.785 1206.78 L987.198 1206.78 L986.612 1206.78 L986.025 1206.78  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.89 986.612,1206.89 987.198,1206.89 987.785,1206.89 988.371,1206.89 988.957,1206.89 989.544,1206.89 990.13,1206.89 990.717,1206.89 991.303,1206.89 991.889,1206.89 992.476,1206.89 993.062,1206.89 993.649,1206.89 994.235,1206.89 994.822,1206.89 995.408,1206.89 995.994,1206.89 996.581,1206.89 997.167,1206.89 997.754,1206.89 998.34,1206.89 998.926,1206.89 999.513,1206.89 1000.1,1206.89 1000.69,1206.89 1001.27,1206.89 1001.86,1206.89 1002.44,1206.89 1003.03,1206.89 1003.62,1206.89 1004.2,1206.89 1004.79,1206.89 1005.38,1206.89 1005.96,1206.89 1006.55,1206.89 1007.14,1206.89 1007.72,1206.89 1008.31,1206.89 1008.9,1206.89 1009.48,1206.89 1010.07,1206.89 1010.65,1206.89 1011.24,1206.89 1011.83,1206.89 1012.41,1206.89 1013,1206.89 1013.59,1206.89 1014.17,1206.89 1014.76,1206.89 1015.35,1206.89 1015.93,1206.89 1016.52,1206.89 1017.11,1206.89 1017.69,1206.89 1018.28,1206.89 1018.86,1206.89 1019.45,1206.89 1020.04,1206.89 1020.62,1206.89 1021.21,1206.89 1021.8,1206.89 1022.38,1206.89 1022.97,1206.89 1023.56,1206.89 1024.14,1206.89 1024.73,1206.89 1025.32,1206.89 1025.9,1206.89 1026.49,1206.89 1027.07,1206.89 1027.66,1206.89 1028.25,1206.89 1028.83,1206.89 1029.42,1206.89 1030.01,1206.89 1030.59,1206.89 1031.18,1206.89 1031.77,1206.89 1032.35,1206.89 1032.94,1206.89 1033.52,1206.89 1034.11,1206.89 1034.7,1206.89 1035.28,1206.89 1035.87,1206.89 1036.46,1206.89 1037.04,1206.89 1037.63,1206.89 1038.22,1206.89 1038.8,1206.89 1039.39,1206.89 1039.98,1206.89 1040.56,1206.89 1041.15,1206.89 1041.73,1206.89 1042.32,1206.89 1042.91,1206.89 1043.49,1206.89 1044.08,1206.89 1044.67,1206.89 1045.25,1206.89 1045.84,1206.89 1046.43,1206.89 1047.01,1206.89 1047.6,1206.89 1048.19,1206.89 1048.77,1206.89 1049.36,1206.89 1049.94,1206.89 1050.53,1206.89 1051.12,1206.89 1051.7,1206.89 1052.29,1206.89 1052.88,1206.89 1053.46,1206.89 1054.05,1206.89 1054.64,1206.89 1055.22,1206.89 1055.81,1206.89 1056.39,1206.89 1056.98,1206.89 1057.57,1206.89 1058.15,1206.89 1058.74,1206.89 1059.33,1206.89 1059.91,1206.89 1060.5,1206.89 1061.09,1206.89 1061.67,1206.89 1062.26,1206.89 1062.85,1206.89 1063.43,1206.89 1064.02,1206.89 1064.6,1206.89 1065.19,1206.89 1065.78,1206.89 1066.36,1206.89 1066.95,1206.89 1067.54,1206.89 1068.12,1206.89 1068.71,1206.89 1069.3,1206.89 1069.88,1206.89 1070.47,1206.89 1071.06,1206.89 1071.64,1206.89 1072.23,1206.89 1072.81,1206.89 1073.4,1206.89 1073.99,1206.89 1074.57,1206.89 1075.16,1206.89 1075.75,1206.89 1076.33,1206.89 1076.92,1206.89 1077.51,1206.89 1078.09,1206.89 1078.68,1206.89 1079.26,1206.89 1079.85,1206.89 1080.44,1206.89 1081.02,1206.89 1081.61,1206.89 1082.2,1206.89 1082.78,1206.89 1083.37,1206.89 1083.96,1206.89 1084.54,1206.89 1085.13,1206.89 1085.72,1206.89 1086.3,1206.89 1086.89,1206.89 1087.47,1206.89 1088.06,1206.89 1088.65,1206.89 1089.23,1206.89 1089.82,1206.89 1090.41,1206.89 1090.99,1206.89 1091.58,1206.89 1092.17,1206.89 1092.75,1206.89 1093.34,1206.89 1093.93,1206.89 1094.51,1206.89 1095.1,1206.89 1095.68,1206.89 1096.27,1206.89 1096.86,1206.89 1097.44,1206.89 1098.03,1206.89 1098.62,1206.89 1099.2,1206.89 1099.79,1206.89 1100.38,1206.89 1100.96,1206.89 1101.55,1206.89 1102.14,1206.89 1102.72,1206.89 1103.31,1206.89 1103.89,1206.89 1104.48,1206.89 1105.07,1206.89 1105.65,1206.89 1106.24,1206.89 1106.83,1206.89 1107.41,1206.89 1108,1206.89 1108.59,1206.89 1109.17,1206.89 1109.76,1206.89 1110.34,1206.89 1110.93,1206.89 1111.52,1206.89 1112.1,1206.89 1112.69,1206.89 1113.28,1206.89 1113.86,1206.89 1114.45,1206.89 1115.04,1206.89 1115.62,1206.89 1116.21,1206.89 1116.8,1206.89 1117.38,1206.89 1117.97,1206.89 1118.55,1206.89 1119.14,1206.89 1119.73,1206.89 1120.31,1206.89 1120.9,1206.89 1121.49,1206.89 1122.07,1206.89 1122.66,1206.89 1123.25,1206.89 1123.83,1206.89 1124.42,1206.89 1125.01,1206.89 1125.59,1206.89 1126.18,1206.89 1126.76,1206.89 1127.35,1206.89 1127.94,1206.89 1128.52,1206.89 1129.11,1206.89 1129.7,1206.89 1130.28,1206.89 1130.87,1206.89 1131.46,1206.89 1132.04,1206.89 1132.63,1206.89 1133.21,1206.89 1133.8,1206.89 1134.39,1206.89 1134.97,1206.89 1135.56,1206.89 1136.15,1206.89 1136.73,1206.89 1137.32,1206.89 1137.91,1206.89 1138.49,1206.89 1139.08,1206.89 1139.67,1206.89 1140.25,1206.89 1140.84,1206.89 1141.42,1206.89 1142.01,1206.89 1142.6,1206.89 1143.18,1206.89 1143.77,1206.89 1144.36,1206.89 1144.94,1206.89 1145.53,1206.89 1146.12,1206.89 1146.7,1206.89 1147.29,1206.89 1147.88,1206.89 1148.46,1206.89 1149.05,1206.89 1149.63,1206.89 1150.22,1206.89 1150.81,1206.89 1151.39,1206.89 1151.98,1206.89 1152.57,1206.89 1153.15,1206.89 1153.74,1206.89 1154.33,1206.89 1154.91,1206.89 1155.5,1206.89 1156.09,1206.89 1156.67,1206.89 1157.26,1206.89 1157.84,1206.89 1158.43,1206.89 1159.02,1206.89 1159.6,1206.89 1160.19,1206.89 1160.78,1206.89 1161.36,1206.89 1161.95,1206.89 1162.54,1206.89 1163.12,1206.89 1163.71,1206.89 1164.29,1206.89 1164.88,1206.89 1165.47,1206.89 1166.05,1206.89 1166.64,1206.89 1167.23,1206.89 1167.81,1206.89 1168.4,1206.89 1168.99,1206.89 1169.57,1206.89 1170.16,1206.89 1170.75,1206.89 1171.33,1206.89 1171.92,1206.89 1172.5,1206.89 1173.09,1206.89 1173.68,1206.89 1174.26,1206.89 1174.85,1206.89 1175.44,1206.89 1176.02,1206.89 1176.61,1206.89 1177.2,1206.89 1177.78,1206.89 1178.37,1206.89 1178.96,1206.89 1179.54,1206.89 1180.13,1206.89 1180.71,1206.89 1181.3,1206.89 1181.89,1206.89 1182.47,1206.89 1183.06,1206.89 1183.65,1206.89 1184.23,1206.89 1184.82,1206.89 1185.41,1206.89 1185.99,1206.89 1186.58,1206.89 1187.16,1206.89 1187.75,1206.89 1188.34,1206.89 1188.92,1206.89 1189.51,1206.89 1190.1,1206.89 1190.68,1206.89 1191.27,1206.89 1191.86,1206.89 1192.44,1206.89 1193.03,1206.89 1193.62,1206.89 1194.2,1206.89 1194.79,1206.89 1195.37,1206.89 1195.96,1206.89 1196.55,1206.89 1197.13,1206.89 1197.72,1206.89 1198.31,1206.89 1198.89,1206.89 1199.48,1206.89 1200.07,1206.89 1200.65,1206.89 1201.24,1206.89 1201.83,1206.89 1202.41,1206.89 1203,1206.89 1203.58,1206.89 1204.17,1206.89 1204.76,1206.89 1205.34,1206.89 1205.93,1206.89 1206.52,1206.89 1207.1,1206.89 1207.69,1206.89 1208.28,1206.89 1208.86,1206.89 1209.45,1206.89 1210.03,1206.89 1210.62,1206.89 1211.21,1206.89 1211.79,1206.89 1212.38,1206.89 1212.97,1206.89 1213.55,1206.89 1214.14,1206.89 1214.73,1206.89 1215.31,1206.89 1215.9,1206.89 1216.49,1206.89 1217.07,1206.89 1217.66,1206.89 1218.24,1206.89 1218.83,1206.89 1219.42,1206.89 1220,1206.89 1220.59,1206.89 1221.18,1206.89 1221.76,1206.89 1222.35,1206.89 1222.94,1206.89 1223.52,1206.89 1224.11,1206.89 1224.7,1206.89 1225.28,1206.89 1225.87,1206.89 1226.45,1206.89 1227.04,1206.89 1227.63,1206.89 1228.21,1206.89 1228.8,1206.89 1229.39,1206.89 1229.97,1206.89 1230.56,1206.89 1231.15,1206.89 1231.73,1206.89 1232.32,1206.89 1232.91,1206.89 1233.49,1206.89 1234.08,1206.89 1234.66,1206.89 1235.25,1206.89 1235.84,1206.89 1236.42,1206.89 1237.01,1206.89 1237.6,1206.89 1238.18,1206.89 1238.77,1206.89 1239.36,1206.89 1239.94,1206.89 1240.53,1206.89 1241.11,1206.89 1241.7,1206.89 1242.29,1206.89 1242.87,1206.89 1243.46,1206.89 1244.05,1206.89 1244.63,1206.89 1245.22,1206.89 1245.81,1206.89 1246.39,1206.89 1246.98,1206.89 1247.57,1206.89 1248.15,1206.89 1248.74,1206.89 1249.32,1206.89 1249.91,1206.89 1250.5,1206.89 1251.08,1206.89 1251.67,1206.89 1252.26,1206.89 1252.84,1206.89 1253.43,1206.89 1254.02,1206.89 1254.6,1206.89 1255.19,1206.89 1255.78,1206.89 1256.36,1206.89 1256.95,1206.89 1257.53,1206.89 1258.12,1206.89 1258.71,1206.89 1259.29,1206.89 1259.88,1206.89 1260.47,1206.89 1261.05,1206.89 1261.64,1206.89 1262.23,1206.89 1262.81,1206.89 1263.4,1206.89 1263.98,1206.89 1264.57,1206.89 1265.16,1206.89 1265.74,1206.89 1266.33,1206.89 1266.92,1206.89 1267.5,1206.89 1268.09,1206.89 1268.68,1206.89 1269.26,1206.89 1269.85,1206.89 1270.44,1206.89 1271.02,1206.89 1271.61,1206.89 1272.19,1206.89 1272.78,1206.89 1273.37,1206.89 1273.95,1206.89 1274.54,1206.89 1275.13,1206.89 1275.71,1206.89 1276.3,1206.89 1276.89,1206.89 1277.47,1206.89 1278.06,1206.89 1278.65,1206.89 1279.23,1206.89 1279.82,1206.89 1280.4,1206.89 1280.99,1206.89 1281.58,1206.89 1282.16,1206.89 1282.75,1206.89 1283.34,1206.89 1283.92,1206.89 1284.51,1206.89 1285.1,1206.89 1285.68,1206.89 1286.27,1206.89 1286.86,1206.89 1287.44,1206.89 1288.03,1206.89 1288.61,1206.89 1289.2,1206.89 1289.79,1206.89 1290.37,1206.89 1290.96,1206.89 1291.55,1206.89 1292.13,1206.89 1292.72,1206.89 1293.31,1206.89 1293.89,1206.89 1294.48,1206.89 1295.06,1206.89 1295.65,1206.89 1296.24,1206.89 1296.82,1206.89 1297.41,1206.89 1298,1206.89 1298.58,1206.89 1299.17,1206.89 1299.76,1206.89 1300.34,1206.89 1300.93,1206.89 1301.52,1206.89 1302.1,1206.89 1302.69,1206.89 1303.27,1206.89 1303.86,1206.89 1304.45,1206.89 1305.03,1206.89 1305.62,1206.89 1306.21,1206.89 1306.79,1206.89 1307.38,1206.89 1307.97,1206.89 1308.55,1206.89 1309.14,1206.89 1309.73,1206.89 1310.31,1206.89 1310.9,1206.89 1311.48,1206.89 1312.07,1206.89 1312.66,1206.89 1313.24,1206.89 1313.83,1206.89 1314.42,1206.89 1315,1206.89 1315.59,1206.89 1316.18,1206.89 1316.76,1206.89 1317.35,1206.89 1317.93,1206.89 1318.52,1206.89 1319.11,1206.89 1319.69,1206.89 1320.28,1206.89 1320.87,1206.89 1321.45,1206.89 1322.04,1206.89 1322.63,1206.89 1323.21,1206.89 1323.8,1206.89 1324.39,1206.89 1324.97,1206.89 1325.56,1206.89 1326.14,1206.89 1326.73,1206.89 1327.32,1206.89 1327.9,1206.89 1328.49,1206.89 1329.08,1206.89 1329.66,1206.89 1330.25,1206.89 1330.84,1206.89 1331.42,1206.89 1332.01,1206.89 1332.6,1206.89 1333.18,1206.89 1333.77,1206.89 1334.35,1206.89 1334.94,1206.89 1335.53,1206.89 1336.11,1206.89 1336.7,1206.89 1337.29,1206.89 1337.87,1206.89 1338.46,1206.89 1339.05,1206.89 1339.63,1206.89 1340.22,1206.89 1340.8,1206.89 1341.39,1206.89 1341.98,1206.89 1342.56,1206.89 1343.15,1206.89 1343.74,1206.89 1344.32,1206.89 1344.91,1206.89 1345.5,1206.89 1346.08,1206.89 1346.67,1206.89 1347.26,1206.89 1347.84,1206.89 1348.43,1206.89 1349.01,1206.89 1349.6,1206.89 1350.19,1206.89 1350.77,1206.89 1351.36,1206.89 1351.95,1206.89 1352.53,1206.89 1353.12,1206.89 1353.71,1206.89 1354.29,1206.89 1354.88,1206.89 1355.47,1206.89 1356.05,1206.89 1356.64,1206.89 1357.22,1206.89 1357.81,1206.89 1358.4,1206.89 1358.98,1206.89 1359.57,1206.89 1360.16,1206.89 1360.74,1206.89 1361.33,1206.89 1361.92,1206.89 1362.5,1206.89 1363.09,1206.89 1363.68,1206.89 1364.26,1206.89 1364.85,1206.89 1365.43,1206.89 1366.02,1206.89 1366.61,1206.89 1367.19,1206.89 1367.78,1206.89 1368.37,1206.89 1368.95,1206.89 1369.54,1206.89 1370.13,1206.89 1370.71,1206.89 1371.3,1206.89 1371.88,1206.89 1372.47,1206.89 1373.06,1206.89 1373.64,1206.89 1374.23,1206.89 1374.82,1206.89 1375.4,1206.89 1375.99,1206.89 1376.58,1206.89 1377.16,1206.89 1377.75,1206.89 1378.34,1206.89 1378.92,1206.89 1379.51,1206.89 1380.09,1206.89 1380.68,1206.89 1381.27,1206.89 1381.85,1206.89 1382.44,1206.89 1383.03,1206.89 1383.61,1206.89 1384.2,1206.89 1384.79,1206.89 1385.37,1206.89 1385.96,1206.89 1386.55,1206.89 1387.13,1206.89 1387.72,1206.89 1388.3,1206.89 1388.89,1206.89 1389.48,1206.89 1390.06,1206.89 1390.65,1206.89 1391.24,1206.89 1391.82,1206.89 1392.41,1206.89 1393,1206.89 1393.58,1206.89 1394.17,1206.89 1394.75,1206.89 1395.34,1206.89 1395.93,1206.89 1396.51,1206.89 1397.1,1206.89 1397.69,1206.89 1398.27,1206.89 1398.86,1206.89 1399.45,1206.89 1400.03,1206.89 1400.62,1206.89 1401.21,1206.89 1401.79,1206.89 1402.38,1206.89 1402.96,1206.89 1403.55,1206.89 1404.14,1206.89 1404.72,1206.89 1405.31,1206.89 1405.9,1206.89 1406.48,1206.89 1407.07,1206.89 1407.66,1206.89 1408.24,1206.89 1408.83,1206.89 1409.42,1206.89 1410,1206.89 1410.59,1206.89 1411.17,1206.89 1411.76,1206.89 1412.35,1206.89 1412.93,1206.89 1413.52,1206.89 1414.11,1206.89 1414.69,1206.89 1415.28,1206.89 1415.87,1206.89 1416.45,1206.89 1417.04,1206.89 1417.63,1206.89 1418.21,1206.89 1418.8,1206.89 1419.38,1206.89 1419.97,1206.89 1420.56,1206.89 1421.14,1206.89 1421.73,1206.89 1422.32,1206.89 1422.9,1206.89 1423.49,1206.89 1424.08,1206.89 1424.66,1206.89 1425.25,1206.89 1425.83,1206.89 1426.42,1206.89 1427.01,1206.89 1427.59,1206.89 1428.18,1206.89 1428.77,1206.89 1429.35,1206.89 1429.94,1206.89 1430.53,1206.89 1431.11,1206.89 1431.7,1206.89 1432.29,1206.89 1432.87,1206.89 1433.46,1206.89 1434.04,1206.89 1434.63,1206.89 1435.22,1206.89 1435.8,1206.89 1436.39,1206.89 1436.98,1206.89 1437.56,1206.89 1438.15,1206.89 1438.74,1206.89 1439.32,1206.89 1439.91,1206.89 1440.5,1206.89 1441.08,1206.89 1441.67,1206.89 1442.25,1206.89 1442.84,1206.89 1443.43,1206.89 1444.01,1206.89 1444.6,1206.89 1445.19,1206.89 1445.77,1206.89 1446.36,1206.89 1446.95,1206.89 1447.53,1206.89 1448.12,1206.89 1448.7,1206.89 1449.29,1206.89 1449.88,1206.89 1450.46,1206.89 1451.05,1206.89 1451.64,1206.89 1452.22,1206.89 1452.81,1206.89 1453.4,1206.89 1453.98,1206.89 1454.57,1206.89 1455.16,1206.89 1455.74,1206.89 1456.33,1206.89 1456.91,1206.89 1457.5,1206.89 1458.09,1206.89 1458.67,1206.89 1459.26,1206.89 1459.85,1206.89 1460.43,1206.89 1461.02,1206.89 1461.61,1206.89 1462.19,1206.89 1462.78,1206.89 1463.37,1206.89 1463.95,1206.89 1464.54,1206.89 1465.12,1206.89 1465.71,1206.89 1466.3,1206.89 1466.88,1206.89 1467.47,1206.89 1468.06,1206.89 1468.64,1206.89 1469.23,1206.89 1469.82,1206.89 1470.4,1206.89 1470.99,1206.89 1471.57,1206.89 1472.16,1206.89 1472.75,1206.89 1473.33,1206.89 1473.92,1206.89 1474.51,1206.89 1475.09,1206.89 1475.68,1206.89 1476.27,1206.89 1476.85,1206.89 1477.44,1206.89 1478.03,1206.89 1478.61,1206.89 1479.2,1206.89 1479.78,1206.89 1480.37,1206.89 1480.96,1206.89 1481.54,1206.89 1482.13,1206.89 1482.72,1206.89 1483.3,1206.89 1483.89,1206.89 1484.48,1206.89 1485.06,1206.89 1485.65,1206.89 1486.24,1206.89 1486.82,1206.89 1487.41,1206.89 1487.99,1206.89 1488.58,1206.89 1489.17,1206.89 1489.75,1206.89 1490.34,1206.89 1490.93,1206.89 1491.51,1206.89 1492.1,1206.89 1492.69,1206.89 1493.27,1206.89 1493.86,1206.89 1494.45,1206.89 1495.03,1206.89 1495.62,1206.89 1496.2,1206.89 1496.79,1206.89 1497.38,1206.89 1497.96,1206.89 1498.55,1206.89 1499.14,1206.89 1499.72,1206.89 1500.31,1206.89 1500.9,1206.89 1501.48,1206.89 1502.07,1206.89 1502.65,1206.89 1503.24,1206.89 1503.83,1206.89 1504.41,1206.89 1505,1206.89 1505.59,1206.89 1506.17,1206.89 1506.76,1206.89 1507.35,1206.89 1507.93,1206.89 1508.52,1206.89 1509.11,1206.89 1509.69,1206.89 1510.28,1206.89 1510.86,1206.89 1511.45,1206.89 1512.04,1206.89 1512.62,1206.89 1513.21,1206.89 1513.8,1206.89 1514.38,1206.89 1514.97,1206.89 1515.56,1206.89 1516.14,1206.89 1516.73,1206.89 1517.32,1206.89 1517.9,1206.89 1518.49,1206.89 1519.07,1206.89 1519.66,1206.89 1520.25,1206.89 1520.83,1206.89 1521.42,1206.89 1522.01,1206.89 1522.59,1206.89 1523.18,1206.89 1523.77,1206.89 1524.35,1206.89 1524.94,1206.89 1525.52,1206.89 1526.11,1206.89 1526.7,1206.89 1527.28,1206.89 1527.87,1206.89 1528.46,1206.89 1529.04,1206.89 1529.63,1206.89 1530.22,1206.89 1530.8,1206.89 1531.39,1206.89 1531.98,1206.89 1532.56,1206.89 1533.15,1206.89 1533.73,1206.89 1534.32,1206.89 1534.91,1206.89 1535.49,1206.89 1536.08,1206.89 1536.67,1206.89 1537.25,1206.89 1537.84,1206.89 1538.43,1206.89 1539.01,1206.89 1539.6,1206.89 1540.19,1206.89 1540.77,1206.89 1541.36,1206.89 1541.94,1206.89 1542.53,1206.89 1543.12,1206.89 1543.7,1206.89 1544.29,1206.89 1544.88,1206.89 1545.46,1206.89 1546.05,1206.89 1546.64,1206.89 1547.22,1206.89 1547.81,1206.89 1548.4,1206.89 1548.98,1206.89 1549.57,1206.89 1550.15,1206.89 1550.74,1206.89 1551.33,1206.89 1551.91,1206.89 1552.5,1206.89 1553.09,1206.89 1553.67,1206.89 1554.26,1206.89 1554.85,1206.89 1555.43,1206.89 1556.02,1206.89 1556.6,1206.89 1557.19,1206.89 1557.78,1206.89 1558.36,1206.89 1558.95,1206.89 1559.54,1206.89 1560.12,1206.89 1560.71,1206.89 1561.3,1206.89 1561.88,1206.89 1562.47,1206.89 1563.06,1206.89 1563.64,1206.89 1564.23,1206.89 1564.81,1206.89 1565.4,1206.89 1565.99,1206.89 1566.57,1206.89 1567.16,1206.89 1567.75,1206.89 1568.33,1206.89 1568.92,1206.89 1569.51,1206.89 1570.09,1206.89 1570.68,1206.89 1571.27,1206.89 1571.85,1206.89 1572.44,1206.89 1573.02,1206.89 1573.61,1206.89 1574.2,1206.89 1574.78,1206.89 1575.37,1206.89 1575.96,1206.89 1576.54,1206.89 1577.13,1206.89 1577.72,1206.89 1578.3,1206.89 1578.89,1206.89 1579.47,1206.89 1580.06,1206.89 1580.65,1206.89 1581.23,1206.89 1581.82,1206.89 1582.41,1206.89 1582.99,1206.89 1583.58,1206.89 1584.17,1206.89 1584.75,1206.89 1585.34,1206.89 1585.93,1206.89 1586.51,1206.89 1587.1,1206.89 1587.68,1206.89 1588.27,1206.89 1588.86,1206.89 1589.44,1206.89 1590.03,1206.89 1590.62,1206.89 1591.2,1206.89 1591.79,1206.89 1592.38,1206.89 1592.96,1206.89 1593.55,1206.89 1594.14,1206.89 1594.72,1206.89 1595.31,1206.89 1595.89,1206.89 1596.48,1206.89 1597.07,1206.89 1597.65,1206.89 1598.24,1206.89 1598.83,1206.89 1599.41,1206.89 1600,1206.89 1600.59,1206.89 1601.17,1206.89 1601.76,1206.89 1602.34,1206.89 1602.93,1206.89 1603.52,1206.89 1604.1,1206.89 1604.69,1206.89 1605.28,1206.89 1605.86,1206.89 1606.45,1206.89 1607.04,1206.89 1607.62,1206.89 1608.21,1206.89 1608.8,1206.89 1609.38,1206.89 1609.97,1206.89 1610.55,1206.89 1611.14,1206.89 1611.73,1206.89 1612.31,1206.89 1612.9,1206.89 1613.49,1206.89 1614.07,1206.89 1614.66,1206.89 1615.25,1206.89 1615.83,1206.89 1616.42,1206.89 1617.01,1206.89 1617.59,1206.89 1618.18,1206.89 1618.76,1206.89 1619.35,1206.89 1619.94,1206.89 1620.52,1206.89 1621.11,1206.89 1621.7,1206.89 1622.28,1206.89 1622.87,1206.89 1623.46,1206.89 1624.04,1206.89 1624.63,1206.89 1625.22,1206.89 1625.8,1206.89 1626.39,1206.89 1626.97,1206.89 1627.56,1206.89 1628.15,1206.89 1628.73,1206.89 1629.32,1206.89 1629.91,1206.89 1630.49,1206.89 1631.08,1206.89 1631.67,1206.89 1632.25,1206.89 1632.84,1206.89 1633.42,1206.89 1634.01,1206.89 1634.6,1206.89 1635.18,1206.89 1635.77,1206.89 1636.36,1206.89 1636.94,1206.89 1637.53,1206.89 1638.12,1206.89 1638.7,1206.89 1639.29,1206.89 1639.88,1206.89 1640.46,1206.89 1641.05,1206.89 1641.63,1206.89 1642.22,1206.89 1642.81,1206.89 1643.39,1206.89 1643.98,1206.89 1644.57,1206.89 1645.15,1206.89 1645.74,1206.89 1646.33,1206.89 1646.91,1206.89 1647.5,1206.89 1648.09,1206.89 1648.67,1206.89 1649.26,1206.89 1649.84,1206.89 1650.43,1206.89 1651.02,1206.89 1651.6,1206.89 1652.19,1206.89 1652.78,1206.89 1653.36,1206.89 1653.95,1206.89 1654.54,1206.89 1655.12,1206.89 1655.71,1206.89 1656.29,1206.89 1656.88,1206.89 1657.47,1206.89 1658.05,1206.89 1658.64,1206.89 1659.23,1206.89 1659.81,1206.89 1660.4,1206.89 1660.99,1206.89 1661.57,1206.89 1662.16,1206.89 1662.75,1206.89 1663.33,1206.89 1663.92,1206.89 1664.5,1206.89 1665.09,1206.89 1665.68,1206.89 1666.26,1206.89 1666.85,1206.89 1667.44,1206.89 1668.02,1206.89 1668.61,1206.89 1669.2,1206.89 1669.78,1206.89 1670.37,1206.89 1670.96,1206.89 1671.54,1206.89 1672.13,1206.89 1672.71,1206.89 1673.3,1206.89 1673.89,1206.89 1674.47,1206.89 1675.06,1206.89 1675.65,1206.89 1676.23,1206.89 1676.82,1206.89 1677.41,1206.89 1677.99,1206.89 1678.58,1206.89 1679.17,1206.89 1679.75,1206.89 1680.34,1206.89 1680.92,1206.89 1681.51,1206.89 1682.1,1206.89 1682.68,1206.89 1683.27,1206.89 1683.86,1206.89 1684.44,1206.89 1685.03,1206.89 1685.62,1206.89 1686.2,1206.89 1686.79,1206.89 1687.37,1206.89 1687.96,1206.89 1688.55,1206.89 1689.13,1206.89 1689.72,1206.89 1690.31,1206.89 1690.89,1206.89 1691.48,1206.89 1692.07,1206.89 1692.65,1206.89 1693.24,1206.89 1693.83,1206.89 1694.41,1206.89 1695,1206.89 1695.58,1206.89 1696.17,1206.89 1696.76,1206.89 1697.34,1206.89 1697.93,1206.89 1698.52,1206.89 1699.1,1206.89 1699.69,1206.89 1700.28,1206.89 1700.86,1206.89 1701.45,1206.89 1702.04,1206.89 1702.62,1206.89 1703.21,1206.89 1703.79,1206.89 1704.38,1206.89 1704.97,1206.89 1705.55,1206.89 1706.14,1206.89 1706.73,1206.89 1707.31,1206.89 1707.9,1206.89 1708.49,1206.89 1709.07,1206.89 1709.66,1206.89 1710.24,1206.89 1710.83,1206.89 1711.42,1206.89 1712,1206.89 1712.59,1206.89 1713.18,1206.89 1713.76,1206.89 1714.35,1206.89 1714.94,1206.89 1715.52,1206.89 1716.11,1206.89 1716.7,1206.89 1717.28,1206.89 1717.87,1206.89 1718.45,1206.89 1719.04,1206.89 1719.63,1206.89 1720.21,1206.89 1720.8,1206.89 1721.39,1206.89 1721.97,1206.89 1722.56,1206.89 1723.15,1206.89 1723.73,1206.89 1724.32,1206.89 1724.91,1206.89 1725.49,1206.89 1726.08,1206.89 1726.66,1206.89 1727.25,1206.89 1727.84,1206.89 1728.42,1206.89 1729.01,1206.89 1729.6,1206.89 1730.18,1206.89 1730.77,1206.89 1731.36,1206.89 1731.94,1206.89 1732.53,1206.89 1733.11,1206.89 1733.7,1206.89 1734.29,1206.89 1734.87,1206.89 1735.46,1206.89 1736.05,1206.89 1736.63,1206.89 1737.22,1206.89 1737.81,1206.89 1738.39,1206.89 1738.98,1206.89 1739.57,1206.89 1740.15,1206.89 1740.74,1206.89 1741.32,1206.89 1741.91,1206.89 1742.5,1206.89 1743.08,1206.89 1743.67,1206.89 1744.26,1206.89 1744.84,1206.89 1745.43,1206.89 1746.02,1206.89 1746.6,1206.89 1747.19,1206.89 1747.78,1206.89 1748.36,1206.89 1748.95,1206.89 1749.53,1206.89 1750.12,1206.89 1750.71,1206.89 1751.29,1206.89 1751.88,1206.89 1752.47,1206.89 1753.05,1206.89 1753.64,1206.89 1754.23,1206.89 1754.81,1206.89 1755.4,1206.89 1755.99,1206.89 1756.57,1206.89 1757.16,1206.89 1757.74,1206.89 1758.33,1206.89 1758.92,1206.89 1759.5,1206.89 1760.09,1206.89 1760.68,1206.89 1761.26,1206.89 1761.85,1206.89 1762.44,1206.89 1763.02,1206.89 1763.61,1206.89 1764.19,1206.89 1764.78,1206.89 1765.37,1206.89 1765.95,1206.89 1766.54,1206.89 1767.13,1206.89 1767.71,1206.89 1768.3,1206.89 1768.89,1206.89 1769.47,1206.89 1770.06,1206.89 1770.65,1206.89 1771.23,1206.89 1771.82,1206.89 1772.4,1206.89 1772.99,1206.89 1773.58,1206.89 1774.16,1206.89 1774.75,1206.89 1775.34,1206.89 1775.92,1206.89 1776.51,1206.89 1777.1,1206.89 1777.68,1206.89 1778.27,1206.89 1778.86,1206.89 1779.44,1206.89 1780.03,1206.89 1780.61,1206.89 1781.2,1206.89 1781.79,1206.89 1782.37,1206.89 1782.96,1206.89 1783.55,1206.89 1784.13,1206.89 1784.72,1206.89 1785.31,1206.89 1785.89,1206.89 1786.48,1206.89 1787.06,1206.89 1787.65,1206.89 1788.24,1206.89 1788.82,1206.89 1789.41,1206.89 1790,1206.89 1790.58,1206.89 1791.17,1206.89 1791.76,1206.89 1792.34,1206.89 1792.93,1206.89 1793.52,1206.89 1794.1,1206.89 1794.69,1206.89 1795.27,1206.89 1795.86,1206.89 1796.45,1206.89 1797.03,1206.89 1797.62,1206.89 1798.21,1206.89 1798.79,1206.89 1799.38,1206.89 1799.97,1206.89 1800.55,1206.89 1801.14,1206.89 1801.73,1206.89 1802.31,1206.89 1802.9,1206.89 1803.48,1206.89 1804.07,1206.89 1804.66,1206.89 1805.24,1206.89 1805.83,1206.89 1806.42,1206.89 1807,1206.89 1807.59,1206.89 1808.18,1206.89 1808.76,1206.89 1809.35,1206.89 1809.94,1206.89 1810.52,1206.89 1811.11,1206.89 1811.69,1206.89 1812.28,1206.89 1812.87,1206.89 1813.45,1206.89 1814.04,1206.89 1814.63,1206.89 1815.21,1206.89 1815.8,1206.89 1816.39,1206.89 1816.97,1206.89 1817.56,1206.89 1818.14,1206.89 1818.73,1206.89 1819.32,1206.89 1819.9,1206.89 1820.49,1206.89 1821.08,1206.89 1821.66,1206.89 1822.25,1206.89 1822.84,1206.89 1823.42,1206.89 1824.01,1206.89 1824.6,1206.89 1825.18,1206.89 1825.77,1206.89 1826.35,1206.89 1826.94,1206.89 1827.53,1206.89 1828.11,1206.89 1828.7,1206.89 1829.29,1206.89 1829.87,1206.89 1830.46,1206.89 1831.05,1206.89 1831.63,1206.89 1832.22,1206.89 1832.81,1206.89 1833.39,1206.89 1833.98,1206.89 1834.56,1206.89 1835.15,1206.89 1835.74,1206.89 1836.32,1206.89 1836.91,1206.89 1837.5,1206.89 1838.08,1206.89 1838.67,1206.89 1839.26,1206.89 1839.84,1206.89 1840.43,1206.89 1841.01,1206.89 1841.6,1206.89 1842.19,1206.89 1842.77,1206.89 1843.36,1206.89 1843.95,1206.89 1844.53,1206.89 1845.12,1206.89 1845.71,1206.89 1846.29,1206.89 1846.88,1206.89 1847.47,1206.89 1848.05,1206.89 1848.64,1206.89 1849.22,1206.89 1849.81,1206.89 1850.4,1206.89 1850.98,1206.89 1851.57,1206.89 1852.16,1206.89 1852.74,1206.89 1853.33,1206.89 1853.92,1206.89 1854.5,1206.89 1855.09,1206.89 1855.68,1206.89 1856.26,1206.89 1856.85,1206.89 1857.43,1206.89 1858.02,1206.89 1858.61,1206.89 1859.19,1206.89 1859.78,1206.89 1860.37,1206.89 1860.95,1206.89 1861.54,1206.89 1862.13,1206.89 1862.71,1206.89 1863.3,1206.89 1863.88,1206.89 1864.47,1206.89 1865.06,1206.89 1865.64,1206.89 1866.23,1206.89 1866.82,1206.89 1867.4,1206.89 1867.99,1206.89 1868.58,1206.89 1869.16,1206.89 1869.75,1206.89 1870.34,1206.89 1870.92,1206.89 1871.51,1206.89 1872.09,1206.89 1872.68,1206.89 1873.27,1206.89 1873.85,1206.89 1874.44,1206.89 1875.03,1206.89 1875.61,1206.89 1876.2,1206.89 1876.79,1206.89 1877.37,1206.89 1877.96,1206.89 1878.55,1206.89 1879.13,1206.89 1879.72,1206.89 1880.3,1206.89 1880.89,1206.89 1881.48,1206.89 1882.06,1206.89 1882.65,1206.89 1883.24,1206.89 1883.82,1206.89 1884.41,1206.89 1885,1206.89 1885.58,1206.89 1886.17,1206.89 1886.76,1206.89 1887.34,1206.89 1887.93,1206.89 1888.51,1206.89 1889.1,1206.89 1889.69,1206.89 1890.27,1206.89 1890.86,1206.89 1891.45,1206.89 1892.03,1206.89 1892.62,1206.89 1893.21,1206.89 1893.79,1206.89 1894.38,1206.89 1894.96,1206.89 1895.55,1206.89 1896.14,1206.89 1896.72,1206.89 1897.31,1206.89 1897.9,1206.89 1898.48,1206.89 1899.07,1206.89 1899.66,1206.89 1900.24,1206.89 1900.83,1206.89 1901.42,1206.89 1902,1206.89 1902.59,1206.89 1903.17,1206.89 1903.76,1206.89 1904.35,1206.89 1904.93,1206.89 1905.52,1206.89 1906.11,1206.89 1906.69,1206.89 1907.28,1206.89 1907.87,1206.89 1908.45,1206.89 1909.04,1206.89 1909.63,1206.89 1910.21,1206.89 1910.8,1206.89 1911.38,1206.89 1911.97,1206.89 1912.56,1206.89 1913.14,1206.89 1913.73,1206.89 1914.32,1206.89 1914.9,1206.89 1915.49,1206.89 1916.08,1206.89 1916.66,1206.89 1917.25,1206.89 1917.83,1206.89 1918.42,1206.89 1919.01,1206.89 1919.59,1206.89 1920.18,1206.89 1920.77,1206.89 1921.35,1206.89 1921.94,1206.89 1922.53,1206.89 1923.11,1206.89 1923.7,1206.89 1924.29,1206.89 1924.87,1206.89 1925.46,1206.89 1926.04,1206.89 1926.63,1206.89 1927.22,1206.89 1927.8,1206.89 1928.39,1206.89 1928.98,1206.89 1929.56,1206.89 1930.15,1206.89 1930.74,1206.89 1931.32,1206.89 1931.91,1206.89 1932.5,1206.89 1933.08,1206.89 1933.67,1206.89 1934.25,1206.89 1934.84,1206.89 1935.43,1206.89 1936.01,1206.89 1936.6,1206.89 1937.19,1206.89 1937.77,1206.89 1938.36,1206.89 1938.95,1206.89 1939.53,1206.89 1940.12,1206.89 1940.71,1206.89 1941.29,1206.89 1941.88,1206.89 1942.46,1206.89 1943.05,1206.89 1943.64,1206.89 1944.22,1206.89 1944.81,1206.89 1945.4,1206.89 1945.98,1206.89 1946.57,1206.89 1947.16,1206.89 1947.74,1206.89 1948.33,1206.89 1948.91,1206.89 1949.5,1206.89 1950.09,1206.89 1950.67,1206.89 1951.26,1206.89 1951.85,1206.89 1952.43,1206.89 1953.02,1206.89 1953.61,1206.89 1954.19,1206.89 1954.78,1206.89 1955.37,1206.89 1955.95,1206.89 1956.54,1206.89 1957.12,1206.89 1957.71,1206.89 1958.3,1206.89 1958.88,1206.89 1959.47,1206.89 1960.06,1206.89 1960.64,1206.89 1961.23,1206.89 1961.82,1206.89 1962.4,1206.89 1962.99,1206.89 1963.58,1206.89 1964.16,1206.89 1964.75,1206.89 1965.33,1206.89 1965.92,1206.89 1966.51,1206.89 1967.09,1206.89 1967.68,1206.89 1968.27,1206.89 1968.85,1206.89 1969.44,1206.89 1970.03,1206.89 1970.61,1206.89 1971.2,1206.89 1971.78,1206.89 1972.37,1206.89 1972.96,1206.89 1973.54,1206.89 1974.13,1206.89 1974.72,1206.89 1975.3,1206.89 1975.89,1206.89 1976.48,1206.89 1977.06,1206.89 1977.65,1206.89 1978.24,1206.89 1978.82,1206.89 1979.41,1206.89 1979.99,1206.89 1980.58,1206.89 1981.17,1206.89 1981.75,1206.89 1982.34,1206.89 1982.93,1206.89 1983.51,1206.89 1984.1,1206.89 1984.69,1206.89 1985.27,1206.89 1985.86,1206.89 1986.45,1206.89 1987.03,1206.89 1987.62,1206.89 1988.2,1206.89 1988.79,1206.89 1989.38,1206.89 1989.96,1206.89 1990.55,1206.89 1991.14,1206.89 1991.72,1206.89 1992.31,1206.89 1992.9,1206.89 1993.48,1206.89 1994.07,1206.89 1994.65,1206.89 1995.24,1206.89 1995.83,1206.89 1996.41,1206.89 1997,1206.89 1997.59,1206.89 1998.17,1206.89 1998.76,1206.89 1999.35,1206.89 1999.93,1206.89 2000.52,1206.89 2001.11,1206.89 2001.69,1206.89 2002.28,1206.89 2002.86,1206.89 2003.45,1206.89 2004.04,1206.89 2004.62,1206.89 2005.21,1206.89 2005.8,1206.89 2006.38,1206.89 2006.97,1206.89 2007.56,1206.89 2008.14,1206.89 2008.73,1206.89 2009.32,1206.89 2009.9,1206.89 2010.49,1206.89 2011.07,1206.89 2011.66,1206.89 2012.25,1206.89 2012.83,1206.89 2013.42,1206.89 2014.01,1206.89 2014.59,1206.89 2015.18,1206.89 2015.77,1206.89 2016.35,1206.89 2016.94,1206.89 2017.53,1206.89 2018.11,1206.89 2018.7,1206.89 2019.28,1206.89 2019.87,1206.89 2020.46,1206.89 2021.04,1206.89 2021.63,1206.89 2022.22,1206.89 2022.8,1206.89 2023.39,1206.89 2023.98,1206.89 2024.56,1206.89 2025.15,1206.89 2025.73,1206.89 2026.32,1206.89 2026.91,1206.89 2027.49,1206.89 2028.08,1206.89 2028.67,1206.89 2029.25,1206.89 2029.84,1206.89 2030.43,1206.89 2031.01,1206.89 2031.6,1206.89 2032.19,1206.89 2032.77,1206.89 2033.36,1206.89 2033.94,1206.89 2034.53,1206.89 2035.12,1206.89 2035.7,1206.89 2036.29,1206.89 2036.88,1206.89 2037.46,1206.89 2038.05,1206.89 2038.64,1206.89 2039.22,1206.89 2039.81,1206.89 2040.4,1206.89 2040.98,1206.89 2041.57,1206.89 2042.15,1206.89 2042.74,1206.89 2043.33,1206.89 2043.91,1206.89 2044.5,1206.89 2045.09,1206.89 2045.67,1206.89 2046.26,1206.89 2046.85,1206.89 2047.43,1206.89 2048.02,1206.89 2048.6,1206.89 2049.19,1206.89 2049.78,1206.89 2050.36,1206.89 2050.95,1206.89 2051.54,1206.89 2052.12,1206.89 2052.71,1206.89 2053.3,1206.89 2053.88,1206.89 2054.47,1206.89 2055.06,1206.89 2055.64,1206.89 2056.23,1206.89 2056.81,1206.89 2057.4,1206.89 2057.99,1206.89 2058.57,1206.89 2059.16,1206.89 2059.75,1206.89 2060.33,1206.89 2060.92,1206.89 2061.51,1206.89 2062.09,1206.89 2062.68,1206.89 2063.27,1206.89 2063.85,1206.89 2064.44,1206.89 2065.02,1206.89 2065.61,1206.89 2066.2,1206.89 2066.78,1206.89 2067.37,1206.89 2067.96,1206.89 2068.54,1206.89 2069.13,1206.89 2069.72,1206.89 2070.3,1206.89 2070.89,1206.89 2071.48,1206.89 2072.06,1206.89 2072.65,1206.89 2073.23,1206.89 2073.82,1206.89 2074.41,1206.89 2074.99,1206.89 2075.58,1206.89 2076.17,1206.89 2076.75,1206.89 2077.34,1206.89 2077.93,1206.89 2078.51,1206.89 2079.1,1206.89 2079.68,1206.89 2080.27,1206.89 2080.86,1206.89 2081.44,1206.89 2082.03,1206.89 2082.62,1206.89 2083.2,1206.89 2083.79,1206.89 2084.38,1206.89 2084.96,1206.89 2085.55,1206.89 2086.14,1206.89 2086.72,1206.89 2087.31,1206.89 2087.89,1206.89 2088.48,1206.89 2089.07,1206.89 2089.65,1206.89 2090.24,1206.89 2090.83,1206.89 2091.41,1206.89 2092,1206.89 2092.59,1206.89 2093.17,1206.89 2093.76,1206.89 2094.35,1206.89 2094.93,1206.89 2095.52,1206.89 2096.1,1206.89 2096.69,1206.89 2097.28,1206.89 2097.86,1206.89 2098.45,1206.89 2099.04,1206.89 2099.62,1206.89 2100.21,1206.89 2100.8,1206.89 2101.38,1206.89 2101.97,1206.89 2102.55,1206.89 2103.14,1206.89 2103.73,1206.89 2104.31,1206.89 2104.9,1206.89 2105.49,1206.89 2106.07,1206.89 2106.66,1206.89 2107.25,1206.89 2107.83,1206.89 2108.42,1206.89 2109.01,1206.89 2109.59,1206.89 2110.18,1206.89 2110.76,1206.89 2111.35,1206.89 2111.94,1206.89 2112.52,1206.89 2113.11,1206.89 2113.7,1206.89 2114.28,1206.89 2114.87,1206.89 2115.46,1206.89 2116.04,1206.89 2116.63,1206.89 2117.22,1206.89 2117.8,1206.89 2118.39,1206.89 2118.97,1206.89 2119.56,1206.89 2120.15,1206.89 2120.73,1206.89 2121.32,1206.89 2121.91,1206.89 2122.49,1206.89 2123.08,1206.89 2123.67,1206.89 2124.25,1206.89 2124.84,1206.89 2125.42,1206.89 2126.01,1206.89 2126.6,1206.89 2127.18,1206.89 2127.77,1206.89 2128.36,1206.89 2128.94,1206.89 2129.53,1206.89 2130.12,1206.89 2130.7,1206.89 2131.29,1206.89 2131.88,1206.89 2132.46,1206.89 2133.05,1206.89 2133.63,1206.89 2134.22,1206.89 2134.81,1206.89 2135.39,1206.89 2135.98,1206.89 2136.57,1206.89 2137.15,1206.89 2137.74,1206.89 2138.33,1206.89 2138.91,1206.89 2139.5,1206.89 2140.09,1206.89 2140.67,1206.89 2141.26,1206.89 2141.84,1206.89 2142.43,1206.89 2143.02,1206.89 2143.6,1206.89 2144.19,1206.89 2144.78,1206.89 2145.36,1206.89 2145.95,1206.89 2146.54,1206.89 2147.12,1206.89 2147.71,1206.89 2148.3,1206.89 2148.88,1206.89 2149.47,1206.89 2150.05,1206.89 2150.64,1206.89 2151.23,1206.89 2151.81,1206.89 2152.4,1206.89 2152.99,1206.89 2153.57,1206.89 2154.16,1206.89 2154.75,1206.89 2155.33,1206.89 2155.92,1206.89 2156.5,1206.89 2157.09,1206.89 2157.68,1206.89 2158.26,1206.89 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.88,1188.75 1400.59,899.083 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1224.58 985.439,1188.75 2158.26,1188.75 2158.26,1224.58 985.439,1224.58 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip173\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip173)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-9677.11 167.147,-10242.7 167.706,-10749.2 168.266,-11185.3 168.825,-10712 169.384,-10314.1 169.943,-10678.8 170.503,-10997.8 171.062,-10646.9 171.621,-10920.1 172.18,-11155.3 172.74,-11354.9 173.299,-11029.1 173.858,-11180.7 174.417,-11294.1 174.977,-10980.4 175.536,-11049.6 176.095,-10747.2 176.655,-10788.3 177.214,-10823 177.773,-10823.6 178.332,-10283.8 178.892,-10015 179.451,-9997.98 180.01,-9533.43 180.569,-9503.29 181.129,-9452.29 181.688,-9397.48 182.247,-9148.75 182.806,-9072.08 183.366,-8996.92 183.925,-8917.34 184.484,-8688.89 185.043,-8319.66 185.603,-7963.45 186.162,-7873.61 186.721,-7656.97 187.28,-7439.46 187.84,-7328.9 188.399,-7112 188.958,-6809.24 189.517,-6525.59 190.077,-6418.87 190.636,-6315.46 191.195,-6201.22 191.754,-5945.62 192.314,-5705.71 192.873,-5545.21 193.432,-5447.99 193.991,-5351.05 194.551,-5248.62 195.11,-5144.47 195.669,-5041.23 196.228,-4827.68 196.788,-4566.75 197.347,-4417.3 197.906,-4322.34 198.465,-4178.46 199.025,-4088.36 199.584,-3951.5 200.143,-3815.93 200.702,-3643.37 201.262,-3560.72 201.821,-3349.46 202.38,-3190.9 202.939,-3077.36 203.499,-2927.6 204.058,-2744.24 204.617,-2638.69 205.176,-2533.45 205.736,-2398.56 206.295,-2335.05 206.854,-2241.17 207.413,-2145.82 207.973,-1991.29 208.532,-1907.45 209.091,-1854.98 209.65,-1714.43 210.21,-1665.73 210.769,-1553.22 211.328,-1388.04 211.887,-1281.23 212.447,-1178.85 213.006,-1139.72 213.565,-1068.41 214.124,-997.953 214.684,-907.804 215.243,-871.513 215.802,-810.967 216.361,-650.682 216.921,-617.453 217.48,-564.202 218.039,-531.691 218.598,-450.155 219.158,-418.34 219.717,-363.248 220.276,-292.023 220.835,-197.713 221.395,-110.565 221.954,-88.8636 222.513,-23.8478 223.072,-28.9251 223.632,54.9557 224.191,95.7792 224.75,128.819 225.309,144.909 225.869,176.719 226.428,211.869 226.987,286.065 227.546,315.705 228.106,324.155 228.665,312.097 229.224,348.871 229.783,357.806 230.343,448.208 230.902,454.472 231.461,459.838 232.02,465.782 232.58,492.268 233.139,537.185 233.698,539.853 234.257,566.746 234.817,626.578 235.376,653.246 235.935,671.079 236.494,764.197 237.054,818.158 237.613,798.693 238.172,851.247 238.731,880.822 239.291,837.397 239.85,831.553 240.409,865.082 240.968,877.756 241.528,893.908 242.087,943.689 242.646,918.335 243.205,909.406 243.765,908.419 244.324,903.959 244.883,915.382 245.442,930.252 246.002,944.889 246.561,975.864 247.12,987.963 247.679,980.051 248.239,995.078 248.798,972.038 249.357,1005.19 249.916,1016.28 250.476,1028.92 251.035,1038.33 251.594,978.925 252.153,975.274 252.713,970.833 253.272,966.16 253.831,982.338 254.39,979.608 254.95,991.582 255.509,988.94 256.068,964.7 256.627,960.625 257.187,973.424 257.746,987.832 258.305,986.782 258.864,986.846 259.424,1019.12 259.983,1013.84 260.542,1025.19 261.101,1087.61 261.661,1079.21 262.22,1084.81 262.779,1109.22 263.338,1084.45 263.898,1092.41 264.457,1066.36 265.016,1044.47 265.575,1055.79 266.135,1086.25 266.694,1113.11 267.253,1155.94 267.812,1162.89 268.372,1153.26 268.931,1107.83 269.49,1132.09 270.049,1156.26 270.609,1194.32 271.168,1215.62 271.727,1199.92 272.286,1185.76 272.846,1173.46 273.405,1145.4 273.964,1116.33 274.523,1105.45 275.083,1082.53 275.642,1074.18 276.201,1079.87 276.76,1086.59 277.32,1064.72 277.879,1041.97 278.438,1037.9 278.997,1065.34 279.557,1077.61 280.116,1088.11 280.675,1034.2 281.234,998.369 281.794,977.712 282.353,959.33 282.912,973.575 283.471,969.324 284.031,985.102 284.59,1016.02 285.149,979.328 285.708,963.559 286.268,997.377 286.827,994.846 287.386,1021.46 287.945,983.041 288.505,979.622 289.064,975.416 289.623,973.245 290.182,888.394 290.742,907.52 291.301,922.68 291.86,938.486 292.419,970.334 292.979,950.743 293.538,965.692 294.097,979.903 294.656,991.819 295.216,1023.65 295.775,1051.07 296.334,1062.63 296.893,1054.58 297.453,1063.8 298.012,1072.68 298.571,1065.85 299.13,1088.54 299.69,1096.52 300.249,1087.42 300.808,1042.82 301.368,1037.72 301.927,1030.11 302.486,1040.71 303.045,1037.43 303.605,1068.14 304.164,1056.74 304.723,1046.58 305.282,1040.82 305.842,1033.79 306.401,1010.56 306.96,1017.13 307.519,995.842 308.079,1009.48 308.638,1022.03 309.197,1000.72 309.756,1027.81 310.316,1070.52 310.875,1077.55 311.434,1099.74 311.993,1105.27 312.553,1108.6 313.112,1081.84 313.671,1083.54 314.23,1056.87 314.79,1066.59 315.349,1071.39 315.908,1062.94 316.467,1053.37 317.027,1094.52 317.586,1083.21 318.145,1072.25 318.704,1045.07 319.264,1036.46 319.823,1010.55 320.382,1034.14 320.941,1010.76 321.501,1006.88 322.06,983.415 322.619,1009.46 323.178,1000.67 323.738,977.56 324.297,971.812 324.856,964.213 325.415,944.95 325.975,961.383 326.534,989.238 327.093,965.508 327.652,990.751 328.212,955.348 328.771,967.044 329.33,991.946 329.889,969.951 330.449,929.129 331.008,923.659 331.567,936.876 332.126,950.132 332.686,897.556 333.245,875.705 333.804,874.865 334.363,890.77 334.923,882.751 335.482,894.764 336.041,908.277 336.6,922.776 337.16,934.066 337.719,961.663 338.278,957.278 338.837,967.117 339.397,958.037 339.956,965.824 340.515,943.127 341.074,932.557 341.634,894.511 342.193,875.799 342.752,875.22 343.311,874.029 343.871,889.062 344.43,884.513 344.989,901.213 345.548,930.218 346.108,942.081 346.667,957.607 347.226,967.807 347.785,944.011 348.345,940.062 348.904,934.857 349.463,942.154 350.022,916.188 350.582,928.187 351.141,907.205 351.7,919.434 352.259,901.644 352.819,931.172 353.378,1005.45 353.937,982.465 354.496,977.025 355.056,970.429 355.615,959.988 356.174,987.269 356.733,960.481 357.293,936.625 357.852,930.64 358.411,940.685 358.97,934.664 359.53,944.255 360.089,936.836 360.648,963.094 361.207,940.291 361.767,918.425 362.326,947.144 362.885,938.695 363.444,933.234 364.004,912.115 364.563,906.739 365.122,902.229 365.681,847.938 366.241,860.635 366.8,810.301 367.359,777.372 367.918,793.911 368.478,813.819 369.037,864.34 369.596,863.29 370.155,856.292 370.715,850.085 371.274,816.57 371.833,797.45 372.392,797.797 372.952,811.857 373.511,779.358 374.07,781.354 374.629,779.443 375.189,765.208 375.748,767.773 376.307,732.271 376.866,754.449 377.426,744.421 377.985,779.611 378.544,799.656 379.103,799.853 379.663,813.993 380.222,812.964 380.781,812.248 381.34,824.031 381.9,821.434 382.459,837.298 383.018,835.659 383.577,848.928 384.137,829.975 384.696,809.325 385.255,821.736 385.814,803.032 386.374,847.716 386.933,861.22 387.492,874.963 388.051,867.496 388.611,877.727 389.17,874.234 389.729,869.92 390.288,881.09 390.848,907.856 391.407,867.857 391.966,831.915 392.525,816.255 393.085,815.054 393.644,815.558 394.203,797.9 394.762,797.869 395.322,780.318 395.881,745.014 396.44,765.677 396.999,765.103 397.559,782.907 398.118,781.045 398.677,785.146 399.236,769.628 399.796,825.899 400.355,869.437 400.914,849.367 401.473,844.602 402.033,839.478 402.592,836.416 403.151,853.072 403.71,844.704 404.27,874.615 404.829,869.074 405.388,848.748 405.947,845.363 406.507,825.183 407.066,808.347 407.625,809.238 408.184,854.105 408.744,853.301 409.303,863.197 409.862,845.722 410.421,860.243 410.981,906.238 411.54,882.442 412.099,859.825 412.658,875.809 413.218,836.96 413.777,801.87 414.336,801.814 414.895,815.464 415.455,783.266 416.014,768.07 416.573,769.512 417.132,768.736 417.692,787.648 418.251,819.522 418.81,816.007 419.369,827.421 419.929,857.789 420.488,854.241 421.047,832.375 421.606,831.033 422.166,827.372 422.725,824.282 423.284,833.621 423.843,833.576 424.403,826.339 424.962,805.866 425.521,837.21 426.08,815.813 426.64,797.216 427.199,794.92 427.758,810.849 428.318,805.953 428.877,772.236 429.436,770.325 429.995,769.334 430.555,764.639 431.114,717.038 431.673,704.577 432.232,721.471 432.792,725.111 433.351,729.179 433.91,762.601 434.469,780.563 435.029,780.17 435.588,798.879 436.147,815.219 436.706,826.404 437.266,806.623 437.825,834.488 438.384,812.807 438.943,841.882 439.503,818.964 440.062,797.204 440.621,780.44 441.18,783.45 441.74,781.15 442.299,781.04 442.858,810.784 443.417,808.347 443.977,836.324 444.536,832.489 445.095,826.591 445.654,822.162 446.214,817.198 446.773,846.656 447.332,840.014 447.891,851.076 448.451,843.324 449.01,836.012 449.569,814.735 450.128,776.513 450.688,789.335 451.247,837.105 451.806,831.699 452.365,827.174 452.925,823.623 453.484,803.105 454.043,815.323 454.602,841.739 455.162,823.053 455.721,837.988 456.28,849.792 456.839,844.612 457.399,841.291 457.958,882.707 458.517,857.604 459.076,849.537 459.636,815.135 460.195,792.632 460.754,796.014 461.313,791.488 461.873,776.216 462.432,754.918 462.991,753.605 463.55,752.243 464.11,751.994 464.669,769.146 465.228,798.016 465.787,782.246 466.347,762.909 466.906,743.577 467.465,712.325 468.024,710.499 468.584,715.045 469.143,733.919 469.702,735.873 470.261,752.856 470.821,799.778 471.38,762.832 471.939,745.886 472.498,744.38 473.058,774.69 473.617,742.099 474.176,743.713 474.735,774.993 475.295,773.175 475.854,771.609 476.413,769.749 476.972,735.115 477.532,736.09 478.091,721.808 478.65,740.507 479.209,739.436 479.769,753.847 480.328,753.166 480.887,735.686 481.446,752.517 482.006,766.942 482.565,762.702 483.124,747.73 483.683,726.635 484.243,726.049 484.802,711.975 485.361,682.373 485.92,719.834 486.48,720.904 487.039,735.959 487.598,734.403 488.157,720.062 488.717,722.448 489.276,691.437 489.835,692.056 490.394,644.4 490.954,634.246 491.513,642.536 492.072,679.284 492.631,683.503 493.191,700.994 493.75,714.327 494.309,748.575 494.868,747.598 495.428,762.818 495.987,747.118 496.546,746.258 497.105,760.821 497.665,772.284 498.224,785.636 498.783,781.822 499.342,781.268 499.902,795.178 500.461,774.593 501.02,773.304 501.579,753.552 502.139,769.652 502.698,770.345 503.257,772.561 503.816,803.35 504.376,797.281 504.935,793.912 505.494,794.596 506.053,806.518 506.613,786.831 507.172,816.994 507.731,846.258 508.29,853.67 508.85,830.215 509.409,825.905 509.968,851.3 510.527,846.385 511.087,841.984 511.646,835.463 512.205,829.674 512.764,804.544 513.324,814.052 513.883,806.921 514.442,802.806 515.001,784.429 515.561,747.342 516.12,764.724 516.679,778.072 517.238,755.038 517.798,753.58 518.357,724.77 518.916,708.356 519.475,725.448 520.035,742.803 520.594,756.159 521.153,770.377 521.712,739.044 522.272,740.333 522.831,739.727 523.39,753.738 523.949,736.278 524.509,717.33 525.068,731.351 525.627,745.636 526.186,760.485 526.746,774.758 527.305,772.015 527.864,755.312 528.423,753.87 528.983,766.998 529.542,751.385 530.101,753.179 530.66,766.141 531.22,762.701 531.779,792.458 532.338,789.793 532.897,789.378 533.457,819.382 534.016,813.14 534.575,792.853 535.134,789.335 535.694,770.348 536.253,769.079 536.812,779.868 537.371,760.276 537.931,756.437 538.49,754.192 539.049,718.541 539.608,685.071 540.168,653.252 540.727,642.351 541.286,628.925 541.845,647.228 542.405,664.009 542.964,587.864 543.523,594.313 544.082,584.42 544.642,589.061 545.201,579.449 545.76,589.37 546.319,579.245 546.879,602.192 547.438,609.005 547.997,617.535 548.556,643.095 549.116,646.274 549.675,636.824 550.234,705.502 550.793,706.34 551.353,692.352 551.912,694.671 552.471,683.356 553.031,700.461 553.59,687.388 554.149,688.808 554.708,672.207 555.268,642.629 555.827,646.327 556.386,652.575 556.945,689.208 557.505,707.313 558.064,718.299 558.623,750.09 559.182,734.179 559.742,717.336 560.301,734.373 560.86,736.565 561.419,751.058 561.979,735.113 562.538,749.77 563.097,747.154 563.656,744.026 564.216,726.383 564.775,728.022 565.334,763.185 565.893,762.797 566.453,811.004 567.012,801.167 567.571,764.673 568.13,745.032 568.69,775.811 569.249,769.422 569.808,751.896 570.367,783.466 570.927,797.419 571.486,789.615 572.045,786.516 572.604,783.327 573.164,779.279 573.723,796.199 574.282,774.955 574.841,788.739 575.401,770.642 575.96,768.142 576.519,779.549 577.078,744.838 577.638,728.746 578.197,761.871 578.756,743.754 579.315,742.651 579.875,738.884 580.434,736.846 580.993,701.147 581.552,702.413 582.112,718.316 582.671,731.9 583.23,698.783 583.789,684.142 584.349,655.597 584.908,676.392 585.467,662.171 586.026,665.649 586.586,684.636 587.145,682.191 587.704,649.31 588.263,652.818 588.823,653.973 589.382,657.227 589.941,694.459 590.5,680.532 591.06,670.765 591.619,673.094 592.178,660.037 592.737,678.658 593.297,696.227 593.856,710.419 594.415,694.485 594.974,682.917 595.534,716.029 596.093,686.12 596.652,703.155 597.211,720.729 597.771,706.895 598.33,718.559 598.889,716.455 599.448,717.956 600.008,717.651 600.567,719.096 601.126,700.947 601.685,720.121 602.245,734.212 602.804,733.852 603.363,751.538 603.922,732.235 604.482,730.632 605.041,746.432 605.6,757.684 606.159,754.851 606.719,734.449 607.278,733.309 607.837,730.688 608.396,728.955 608.956,729.375 609.515,730.598 610.074,747.606 610.633,746.257 611.193,726.41 611.752,708.93 612.311,708.441 612.87,696.088 613.43,664.119 613.989,634.404 614.548,653.927 615.107,638.787 615.667,643.036 616.226,646.356 616.785,665.232 617.344,685.116 617.904,687.106 618.463,701.099 619.022,683.178 619.581,716.316 620.141,718.376 620.7,697.797 621.259,699.486 621.818,702.247 622.378,659.256 622.937,662.094 623.496,677.964 624.055,646.097 624.615,681.778 625.174,702.157 625.733,688.217 626.292,691.223 626.852,691.021 627.411,707.283 627.97,656.812 628.529,675.409 629.089,646.22 629.648,650.395 630.207,673.042 630.766,677.981 631.326,695.49 631.885,698.111 632.444,681.747 633.003,702.275 633.563,734.085 634.122,732.659 634.681,714.524 635.24,699.847 635.8,720.261 636.359,704.551 636.918,690.649 637.477,691.246 638.037,707.611 638.596,723.342 639.155,770.346 639.714,748.563 640.274,747.136 640.833,745.97 641.392,728.291 641.951,758.878 642.511,739.518 643.07,734.702 643.629,748.043 644.188,744.718 644.748,787.748 645.307,783.987 645.866,778.306 646.425,725.881 646.985,723.902 647.544,703.677 648.103,702.738 648.662,724.658 649.222,658.869 649.781,648.669 650.34,667.071 650.899,685.13 651.459,720.761 652.018,720.013 652.577,701.504 653.136,686.132 653.696,687.806 654.255,733.048 654.814,726.776 655.373,726.183 655.933,725.079 656.492,737.714 657.051,734.865 657.61,733.944 658.17,749.585 658.729,747.922 659.288,725.913 659.847,743.506 660.407,755.024 660.966,785.748 661.525,749.002 662.084,757.906 662.644,755.711 663.203,718.362 663.762,703.674 664.321,688.011 664.881,690.5 665.44,689.92 665.999,689.065 666.558,705.82 667.118,753.946 667.677,764.496 668.236,732.192 668.795,714.176 669.355,714.899 669.914,710.753 670.473,681.879 671.032,696.424 671.592,714.687 672.151,683.22 672.71,701.06 673.269,715.16 673.829,714.375 674.388,695.383 674.947,695.064 675.506,712.174 676.066,745.366 676.625,709.344 677.184,730.773 677.743,743.764 678.303,775.594 678.862,773.138 679.421,752.901 679.981,765.25 680.54,776.074 681.099,768.126 681.658,810.457 682.218,790.123 682.777,796.881 683.336,809.22 683.895,801.73 684.455,793.864 685.014,773.217 685.573,801.405 686.132,749.38 686.692,762.361 687.251,745.197 687.81,725.692 688.369,724.177 688.929,744.019 689.488,773.301 690.047,769.833 690.606,762.921 691.166,756.455 691.725,769.326 692.284,764.289 692.843,755.735 693.403,724.242 693.962,720.8 694.521,734.453 695.08,733.198 695.64,695.976 696.199,714.801 696.758,729.491 697.317,723.916 697.877,720.185 698.436,716.927 698.995,699.439 699.554,700.056 700.114,683.46 700.673,664.868 701.232,625.578 701.791,595.149 702.351,566.764 702.91,541.034 703.469,534.149 704.028,544.78 704.588,569.422 705.147,607.053 705.706,663.132 706.265,664.535 706.825,663.166 707.384,635.173 707.943,625.938 708.502,629.249 709.062,645.527 709.621,648.209 710.18,650.083 710.739,653.224 711.299,658.015 711.858,659.382 712.417,609.981 712.976,612.824 713.536,616.343 714.095,637.261 714.654,654.997 715.213,657.028 715.773,641.74 716.332,679.36 716.891,628.37 717.45,660.984 718.01,666.703 718.569,655.363 719.128,640.453 719.687,580.609 720.247,588.455 720.806,592.866 721.365,581.495 721.924,602.197 722.484,608.192 723.043,628.635 723.602,650.39 724.161,653.445 724.721,674.516 725.28,677.52 725.839,701.164 726.398,721.714 726.958,721.022 727.517,784.361 728.076,777.032 728.635,775.743 729.195,778.545 729.754,760.885 730.313,755.244 730.872,752.237 731.432,762.919 731.991,762.124 732.55,755.141 733.109,750.196 733.669,751.137 734.228,745.001 734.787,724.301 735.346,723.35 735.906,686.131 736.465,707.912 737.024,689.79 737.583,673.444 738.143,672.376 738.702,671.716 739.261,672.271 739.82,654.844 740.38,670.336 740.939,656.873 741.498,661.959 742.057,695.666 742.617,677.065 743.176,679.491 743.735,667.948 744.294,656.736 744.854,641.17 745.413,644.678 745.972,628.612 746.531,664.49 747.091,667.746 747.65,651.515 748.209,604.447 748.768,574.145 749.328,579.08 749.887,582.962 750.446,604.945 751.005,622.732 751.565,627.749 752.124,629.526 752.683,615.381 753.242,622.19 753.802,627.993 754.361,630.65 754.92,632.902 755.479,602.323 756.039,622.215 756.598,610.487 757.157,602.001 757.716,644.194 758.276,628.811 758.835,647.008 759.394,639.022 759.953,657.705 760.513,661.33 761.072,629.783 761.631,634.551 762.19,641.261 762.75,646.795 763.309,663.799 763.868,678.139 764.427,695.669 764.987,711.197 765.546,709.859 766.105,710.772 766.664,677.53 767.224,711.665 767.783,695.213 768.342,712.585 768.901,715.171 769.461,714.336 770.02,729.874 770.579,794.755 771.138,776.133 771.698,737.767 772.257,749.069 772.816,728.073 773.375,727.317 773.935,739.652 774.494,739.049 775.053,768.092 775.612,778.823 776.172,759.487 776.731,739.355 777.29,737.304 777.849,702.01 778.409,683.47 778.968,716.015 779.527,728.237 780.086,709.435 780.646,692.132 781.205,691.629 781.764,663.036 782.323,652.195 782.883,620.18 783.442,607.963 784.001,623.772 784.56,612.753 785.12,634.599 785.679,653.987 786.238,652.898 786.797,621.309 787.357,627.669 787.916,647.071 788.475,621.856 789.034,642.31 789.594,642.551 790.153,677.576 790.712,677.424 791.271,727.59 791.831,739.56 792.39,720.123 792.949,764.625 793.508,760.428 794.068,740.892 794.627,753.917 795.186,755.657 795.745,737.806 796.305,749.453 796.864,745.448 797.423,744.308 797.982,723.056 798.542,740.26 799.101,738.545 799.66,702.844 800.219,695.456 800.779,709.606 801.338,709.313 801.897,693.497 802.456,692.491 803.016,712.848 803.575,728.421 804.134,723.268 804.693,737.928 805.253,765.332 805.812,761.514 806.371,724.652 806.931,737.721 807.49,715.12 808.049,700.007 808.608,698.669 809.168,698.892 809.727,700.374 810.286,681.774 810.845,681.095 811.405,682.548 811.964,695.959 812.523,680.161 813.082,679.711 813.642,677.762 814.201,625.79 814.76,597.331 815.319,617.837 815.879,669.524 816.438,689.691 816.997,693.103 817.556,695.127 818.116,727.299 818.675,727.337 819.234,755.409 819.793,772.436 820.353,757.201 820.912,755.201 821.471,718.223 822.03,762.261 822.59,778.734 823.149,792.178 823.708,789.763 824.267,781.255 824.827,727.34 825.386,722.289 825.945,752.373 826.504,749.038 827.064,728.384 827.623,739.648 828.182,734.476 828.741,715.311 829.301,713.917 829.86,742.306 830.419,737.396 830.978,734.774 831.538,735.506 832.097,732.041 832.656,745.043 833.215,726.752 833.775,758.205 834.334,784.293 834.893,796.339 835.452,757.275 836.012,753.238 836.571,702.164 837.13,704.93 837.689,672.536 838.249,688.069 838.808,669.299 839.367,669.497 839.926,637.428 840.486,674.988 841.045,662.445 841.604,627.38 842.163,665.183 842.723,713.957 843.282,699.745 843.841,713.373 844.4,746.738 844.96,741.948 845.519,706.695 846.078,704.303 846.637,688.034 847.197,702.949 847.756,720.763 848.315,705.537 848.874,721.229 849.434,768.375 849.993,731.022 850.552,727.321 851.111,707.905 851.671,676.783 852.23,647.637 852.789,651.008 853.348,651.573 853.908,651.071 854.467,650.556 855.026,618.51 855.585,621.762 856.145,623.374 856.704,609.02 857.263,631.071 857.822,649.837 858.382,651.23 858.941,657.243 859.5,709.135 860.059,706.002 860.619,707.794 861.178,706.703 861.737,723.485 862.296,756.777 862.856,753.173 863.415,769.343 863.974,765.647 864.533,710.138 865.093,675.463 865.652,646.727 866.211,647.985 866.77,682.341 867.33,734.963 867.889,731.785 868.448,713.242 869.007,698.983 869.567,685.605 870.126,685.459 870.685,700.218 871.244,684.947 871.804,701.169 872.363,685.947 872.922,686.127 873.481,638.21 874.041,657.789 874.6,660.607 875.159,662.259 875.718,682.778 876.278,698.964 876.837,680.585 877.396,666.507 877.955,668.195 878.515,667.833 879.074,667.117 879.633,701.631 880.192,730.018 880.752,711.499 881.311,698.301 881.87,716.858 882.429,731.304 882.989,711.12 883.548,711.498 884.107,691.151 884.666,710.734 885.226,663.9 885.785,649.345 886.344,668.87 886.903,703.634 887.463,700.225 888.022,697.897 888.581,694.456 889.14,712.037 889.7,698.651 890.259,681.093 890.818,667.661 891.377,703.761 891.937,703.56 892.496,703.435 893.055,667.394 893.614,702.619 894.174,700.645 894.733,716.931 895.292,716.029 895.851,729.268 896.411,726.469 896.97,709.367 897.529,707.16 898.088,693.234 898.648,724.453 899.207,723.119 899.766,719.874 900.325,704.152 900.885,702.276 901.444,698.665 902.003,698.721 902.562,697.054 903.122,725.847 903.681,704.275 904.24,705.601 904.799,720.964 905.359,699.365 905.918,701.385 906.477,731.12 907.036,730.487 907.596,729.757 908.155,714.103 908.714,709.834 909.273,691.9 909.833,690.313 910.392,709.228 910.951,709.388 911.51,709.898 912.07,707.185 912.629,658.08 913.188,709.169 913.747,671.251 914.307,641.197 914.866,643.568 915.425,646.173 915.984,650.644 916.544,668.408 917.103,700.568 917.662,747.356 918.221,739.89 918.781,721.785 919.34,702.819 919.899,699.999 920.458,699.115 921.018,712.603 921.577,709.803 922.136,707.987 922.695,673.575 923.255,720.698 923.814,717.505 924.373,683.426 924.932,662.679 925.492,679.175 926.051,677.244 926.61,679.932 927.169,695.567 927.729,696.93 928.288,711.145 928.847,709.886 929.406,722.773 929.966,720.296 930.525,703.681 931.084,673.306 931.644,675.307 932.203,674.596 932.762,691.109 933.321,691.539 933.881,655.605 934.44,671.606 934.999,669.725 935.558,704.937 936.118,703.642 936.677,719.868 937.236,717.604 937.795,764.681 938.355,761.985 938.914,759.008 939.473,756.087 940.032,784.016 940.592,763.446 941.151,740.925 941.71,754.1 942.269,751.161 942.829,761.811 943.388,758.791 943.947,788.322 944.506,784.556 945.066,813.695 945.625,793.625 946.184,788.875 946.743,751.835 947.303,715.992 947.862,694.696 948.421,659.226 948.98,676.712 949.54,665.488 950.099,649.022 950.658,650.822 951.217,667.987 951.777,681.622 952.336,725.705 952.895,738.613 953.454,707.521 954.014,718.838 954.573,699.818 955.132,734.481 955.691,712.961 956.251,712.888 956.81,679.395 957.369,665.227 957.928,667.829 958.488,669.082 959.047,673.027 959.606,690.636 960.165,622.742 960.725,639.734 961.284,629.807 961.843,614.679 962.402,568.016 962.962,559.175 963.521,532.751 964.08,556.755 964.639,544.853 965.199,553.531 965.758,546.535 966.317,552.918 966.876,560.057 967.436,549.56 967.995,555.148 968.554,499.746 969.113,527.474 969.673,533.634 970.232,544.449 970.791,551.854 971.35,559.299 971.91,579.584 972.469,568.819 973.028,623.385 973.587,612.026 974.147,634.657 974.706,650.283 975.265,622.354 975.824,640.823 976.384,625.289 976.943,607.078 977.502,562.545 978.061,568.355 978.621,588.259 979.18,591.633 979.739,629.508 980.298,615.824 980.858,639.653 981.417,638.785 981.976,639.541 982.535,655.158 983.095,644.162 983.654,665.579 984.213,700.502 984.772,681.617 985.332,664.011 985.891,683.709 986.45,684.752 987.009,702.208 987.569,733.821 988.128,733.253 988.687,758.929 989.246,707.952 989.806,741.115 990.365,726.694 990.924,737.247 991.483,733.797 992.043,779.677 992.602,755.406 993.161,751.588 993.72,749.711 994.28,746.497 994.839,726.05 995.398,725.163 995.957,725.198 996.517,702.754 997.076,705.069 997.635,754.708 998.194,754.317 998.754,731.203 999.313,726.845 999.872,676.59 1000.43,627.678 1000.99,616.65 1001.55,590.704 1002.11,613.545 1002.67,612.637 1003.23,632.087 1003.79,631.795 1004.35,651.196 1004.91,667.969 1005.46,652.9 1006.02,668.398 1006.58,705.302 1007.14,687.699 1007.7,700.761 1008.26,696.437 1008.82,727.762 1009.38,724.94 1009.94,707.822 1010.5,718.856 1011.06,669.307 1011.62,668.23 1012.18,669.474 1012.73,655.24 1013.29,641.39 1013.85,643.483 1014.41,643.8 1014.97,631.014 1015.53,635.213 1016.09,669.35 1016.65,672.251 1017.21,689.678 1017.77,686.373 1018.33,717.895 1018.89,732.651 1019.45,732.898 1020.01,729.031 1020.56,730.413 1021.12,726.918 1021.68,755.278 1022.24,795.778 1022.8,790.809 1023.36,816.914 1023.92,845.157 1024.48,806.433 1025.04,851.768 1025.6,825.586 1026.16,785.404 1026.72,778.394 1027.28,805.332 1027.83,783.532 1028.39,792.943 1028.95,799.95 1029.51,807.076 1030.07,785.242 1030.63,795.439 1031.19,806.026 1031.75,826.416 1032.31,803.638 1032.87,782.87 1033.43,780.703 1033.99,744.262 1034.55,709.052 1035.1,694.664 1035.66,707.339 1036.22,707.708 1036.78,704.397 1037.34,688.181 1037.9,687.761 1038.46,707.437 1039.02,707.859 1039.58,705.099 1040.14,752.208 1040.7,745.358 1041.26,790.449 1041.82,764.85 1042.38,730.688 1042.93,697.054 1043.49,698.872 1044.05,680.503 1044.61,665.879 1045.17,666.316 1045.73,668.121 1046.29,698.324 1046.85,713.025 1047.41,727.776 1047.97,708.519 1048.53,690.113 1049.09,688.785 1049.65,672.094 1050.2,674.66 1050.76,642.387 1051.32,672.287 1051.88,705.1 1052.44,671.934 1053,672.867 1053.56,673.407 1054.12,658.392 1054.68,689.977 1055.24,687.654 1055.8,686.387 1056.36,689.179 1056.92,688.543 1057.48,654.567 1058.03,637.898 1058.59,670.573 1059.15,650.117 1059.71,654.967 1060.27,658.767 1060.83,661.976 1061.39,678.152 1061.95,646.189 1062.51,681.824 1063.07,664.828 1063.63,649.947 1064.19,638.602 1064.75,656.444 1065.3,675.892 1065.86,674.822 1066.42,706.759 1066.98,692.567 1067.54,678.145 1068.1,680.598 1068.66,664.056 1069.22,666.79 1069.78,652.079 1070.34,657.174 1070.9,678.696 1071.46,630.422 1072.02,650.5 1072.57,637.849 1073.13,637.494 1073.69,637.597 1074.25,641.364 1074.81,629.41 1075.37,634.495 1075.93,620.999 1076.49,609.848 1077.05,631.423 1077.61,618.792 1078.17,625.892 1078.73,630.609 1079.29,684.523 1079.85,717.474 1080.4,717.431 1080.96,732.275 1081.52,730.092 1082.08,728.81 1082.64,728.512 1083.2,727.153 1083.76,722.376 1084.32,738.85 1084.88,718.075 1085.44,747.876 1086,744.003 1086.56,709.953 1087.12,706.003 1087.67,672.98 1088.23,660.468 1088.79,677.974 1089.35,662.317 1089.91,632.761 1090.47,602.694 1091.03,639.779 1091.59,629.591 1092.15,632.024 1092.71,651.215 1093.27,666.152 1093.83,682.511 1094.39,699.607 1094.94,700.65 1095.5,712.785 1096.06,663.321 1096.62,650.769 1097.18,669.861 1097.74,684.932 1098.3,682.379 1098.86,699.421 1099.42,712.906 1099.98,716.753 1100.54,728.074 1101.1,725.089 1101.66,721.796 1102.22,723.531 1102.77,689.573 1103.33,686.054 1103.89,658.702 1104.45,694.825 1105.01,679.28 1105.57,711.605 1106.13,725.821 1106.69,723.223 1107.25,719.495 1107.81,702.101 1108.37,684.258 1108.93,703.09 1109.49,718.746 1110.04,704.967 1110.6,673.543 1111.16,674.309 1111.72,694.291 1112.28,692.306 1112.84,691.888 1113.4,691.142 1113.96,690.549 1114.52,723.017 1115.08,706.607 1115.64,703.148 1116.2,719.542 1116.76,715.876 1117.31,701.327 1117.87,686.094 1118.43,685.477 1118.99,668.791 1119.55,704.022 1120.11,686.353 1120.67,719.996 1121.23,720.275 1121.79,732.214 1122.35,728.778 1122.91,710.695 1123.47,726.097 1124.03,738.403 1124.59,735.308 1125.14,701.473 1125.7,715.422 1126.26,698.565 1126.82,727.555 1127.38,709.202 1127.94,691.359 1128.5,661.627 1129.06,662.314 1129.62,711.433 1130.18,712.764 1130.74,697.337 1131.3,680.341 1131.86,660.786 1132.41,679.72 1132.97,681.3 1133.53,649.399 1134.09,653.103 1134.65,654.068 1135.21,654.548 1135.77,652.967 1136.33,656.81 1136.89,658.587 1137.45,724.345 1138.01,677.148 1138.57,662.422 1139.13,679.145 1139.68,679.681 1140.24,728.45 1140.8,691.194 1141.36,708.448 1141.92,727.633 1142.48,726.369 1143.04,707.055 1143.6,700.592 1144.16,701.091 1144.72,701.152 1145.28,729.958 1145.84,742.358 1146.4,758.336 1146.96,755.887 1147.51,787.944 1148.07,786.043 1148.63,799.718 1149.19,809.563 1149.75,819.026 1150.31,826.98 1150.87,804.272 1151.43,800.109 1151.99,763.05 1152.55,787.434 1153.11,798.734 1153.67,841.133 1154.23,786.776 1154.78,761.614 1155.34,772.599 1155.9,737.459 1156.46,719.223 1157.02,717.023 1157.58,732.116 1158.14,710.75 1158.7,658.961 1159.26,660.863 1159.82,693.249 1160.38,708.083 1160.94,672.163 1161.5,671.052 1162.05,672.065 1162.61,609.367 1163.17,577.689 1163.73,582.181 1164.29,604.425 1164.85,655.818 1165.41,659.349 1165.97,643.975 1166.53,630.898 1167.09,653.099 1167.65,687.788 1168.21,701.084 1168.77,668.042 1169.33,668.635 1169.88,635.064 1170.44,638.746 1171,625.943 1171.56,610.874 1172.12,646.546 1172.68,650.994 1173.24,622.358 1173.8,607.59 1174.36,597.594 1174.92,605.558 1175.48,624.473 1176.04,626.418 1176.6,626.019 1177.15,629.569 1177.71,649.257 1178.27,652.201 1178.83,638.944 1179.39,608.192 1179.95,628.557 1180.51,629.83 1181.07,615.502 1181.63,617.798 1182.19,622.614 1182.75,625.194 1183.31,626.013 1183.87,638.986 1184.43,625.973 1184.98,612.338 1185.54,635.588 1186.1,655.236 1186.66,640.309 1187.22,674.726 1187.78,657.64 1188.34,662.859 1188.9,661.683 1189.46,666.731 1190.02,668.96 1190.58,667.51 1191.14,669.767 1191.7,671.872 1192.25,688.095 1192.81,688.724 1193.37,670.927 1193.93,671.672 1194.49,685.838 1195.05,662.81 1195.61,614.462 1196.17,620.371 1196.73,590.92 1197.29,610.31 1197.85,628.333 1198.41,601.288 1198.97,573.662 1199.52,594.121 1200.08,597.324 1200.64,601.811 1201.2,637.817 1201.76,641.773 1202.32,630.531 1202.88,616.147 1203.44,651.903 1204,671.142 1204.56,700.811 1205.12,744.851 1205.68,725.274 1206.24,726.676 1206.8,708.602 1207.35,742.317 1207.91,740.543 1208.47,771.554 1209.03,767.209 1209.59,744.044 1210.15,722.826 1210.71,737.218 1211.27,751.066 1211.83,735.102 1212.39,714.685 1212.95,730.746 1213.51,731.045 1214.07,729.056 1214.62,697.288 1215.18,662.678 1215.74,641.51 1216.3,648.402 1216.86,670.545 1217.42,639.165 1217.98,676.465 1218.54,694.836 1219.1,660.563 1219.66,646.985 1220.22,635.641 1220.78,605.101 1221.34,628.809 1221.89,631.651 1222.45,648.057 1223.01,650.002 1223.57,652.752 1224.13,704.428 1224.69,703.192 1225.25,767.85 1225.81,747.098 1226.37,761.628 1226.93,790.486 1227.49,770.373 1228.05,750.381 1228.61,732.35 1229.17,681.407 1229.72,668.163 1230.28,687.037 1230.84,650.705 1231.4,636.948 1231.96,642.347 1232.52,666.47 1233.08,633.909 1233.64,621.103 1234.2,608.869 1234.76,627.265 1235.32,629.751 1235.88,667.071 1236.44,683.102 1236.99,666.012 1237.55,636.943 1238.11,640.08 1238.67,641.538 1239.23,658.765 1239.79,641.61 1240.35,677.83 1240.91,692.552 1241.47,674.586 1242.03,676.464 1242.59,643.357 1243.15,679.188 1243.71,683.747 1244.26,685.846 1244.82,672.473 1245.38,655.703 1245.94,685.813 1246.5,720.747 1247.06,749.619 1247.62,731.367 1248.18,695.969 1248.74,692.608 1249.3,673.272 1249.86,672.618 1250.42,704.814 1250.98,687.358 1251.54,689.113 1252.09,674.943 1252.65,708.73 1253.21,694.065 1253.77,708.543 1254.33,769.464 1254.89,735.697 1255.45,730.282 1256.01,723.967 1256.57,736.748 1257.13,749.153 1257.69,747.189 1258.25,743.743 1258.81,788.714 1259.36,815.317 1259.92,807.94 1260.48,802.784 1261.04,781.579 1261.6,779.702 1262.16,755.644 1262.72,750.65 1263.28,745.621 1263.84,759.759 1264.4,774.049 1264.96,804.578 1265.52,781.228 1266.08,778.18 1266.63,759.676 1267.19,755.963 1267.75,733.402 1268.31,732.116 1268.87,728.612 1269.43,709.109 1269.99,713.433 1270.55,729.976 1271.11,742.367 1271.67,740.294 1272.23,768.772 1272.79,750.815 1273.35,762.923 1273.91,757.826 1274.46,753.748 1275.02,714.483 1275.58,678.62 1276.14,677.235 1276.7,695.69 1277.26,693.543 1277.82,660.567 1278.38,646.177 1278.94,677.795 1279.5,644.385 1280.06,645.21 1280.62,633.209 1281.18,638.838 1281.73,641.884 1282.29,614.615 1282.85,616.57 1283.41,652.244 1283.97,619.334 1284.53,605.592 1285.09,559.038 1285.65,563.737 1286.21,601.106 1286.77,639.909 1287.33,658.737 1287.89,669.962 1288.45,676.504 1289,644.062 1289.56,646.023 1290.12,666.696 1290.68,682.35 1291.24,715.876 1291.8,727.879 1292.36,737.362 1292.92,734.525 1293.48,712.656 1294.04,691.204 1294.6,688.969 1295.16,653.31 1295.72,622.257 1296.28,625.915 1296.83,613.765 1297.39,631.437 1297.95,648.354 1298.51,680.207 1299.07,697.903 1299.63,744.1 1300.19,726.218 1300.75,708.129 1301.31,736.795 1301.87,704.417 1302.43,718.342 1302.99,730.871 1303.55,729.49 1304.1,708.937 1304.66,660.258 1305.22,678.348 1305.78,709.498 1306.34,705.3 1306.9,720.809 1307.46,722.574 1308.02,720.261 1308.58,684.426 1309.14,683.563 1309.7,652.878 1310.26,621.434 1310.82,627.636 1311.38,614.125 1311.93,635.066 1312.49,622.621 1313.05,641.715 1313.61,662.921 1314.17,654.565 1314.73,674.629 1315.29,677.209 1315.85,681.463 1316.41,668.58 1316.97,655.912 1317.53,640.104 1318.09,659.119 1318.65,626.475 1319.2,628.983 1319.76,663.606 1320.32,648.117 1320.88,650.278 1321.44,635.461 1322,623.465 1322.56,660.063 1323.12,661.388 1323.68,645.914 1324.24,679.739 1324.8,662.027 1325.36,679.891 1325.92,697.147 1326.47,699.321 1327.03,679.514 1327.59,612.969 1328.15,601.177 1328.71,633.669 1329.27,667.014 1329.83,668.182 1330.39,666.944 1330.95,668.448 1331.51,703.405 1332.07,720.259 1332.63,697.167 1333.19,691.997 1333.75,692.089 1334.3,642.768 1334.86,643.846 1335.42,647.418 1335.98,664.546 1336.54,680.582 1337.1,696.052 1337.66,642.049 1338.22,642.923 1338.78,596.103 1339.34,553.411 1339.9,546.094 1340.46,553.661 1341.02,576.723 1341.57,586.892 1342.13,593.201 1342.69,579.527 1343.25,634.294 1343.81,651.863 1344.37,671.777 1344.93,657.824 1345.49,659.421 1346.05,660.56 1346.61,664.24 1347.17,652.004 1347.73,639.63 1348.29,608.503 1348.84,596.804 1349.4,619.012 1349.96,652.069 1350.52,652.842 1351.08,654.099 1351.64,640.825 1352.2,641.262 1352.76,629.132 1353.32,680.32 1353.88,666.326 1354.44,704.332 1355,719.712 1355.56,732.967 1356.12,746.506 1356.67,756.538 1357.23,756.781 1357.79,751.955 1358.35,699.547 1358.91,695.502 1359.47,710.186 1360.03,693.302 1360.59,642.858 1361.15,676.376 1361.71,660.395 1362.27,644.509 1362.83,644.069 1363.39,645.924 1363.94,649.297 1364.5,669.16 1365.06,699.019 1365.62,728.243 1366.18,709.197 1366.74,724.075 1367.3,754.196 1367.86,734.05 1368.42,747.456 1368.98,745.188 1369.54,742.562 1370.1,745.136 1370.66,741.399 1371.21,741.246 1371.77,740.543 1372.33,754.201 1372.89,749.419 1373.45,762.073 1374.01,774.767 1374.57,768.991 1375.13,767.543 1375.69,765.125 1376.25,778.143 1376.81,756.491 1377.37,720.887 1377.93,705.852 1378.49,723.119 1379.04,767.198 1379.6,777.435 1380.16,756.947 1380.72,749.537 1381.28,743.588 1381.84,739.966 1382.4,752.129 1382.96,763.225 1383.52,680.611 1384.08,680.734 1384.64,664.851 1385.2,697.196 1385.76,681.564 1386.31,662.23 1386.87,647.399 1387.43,633.145 1387.99,600.371 1388.55,636.002 1389.11,654.638 1389.67,673.795 1390.23,688.945 1390.79,704.312 1391.35,685.094 1391.91,715.96 1392.47,700.628 1393.03,700.429 1393.58,669.477 1394.14,638.522 1394.7,688.942 1395.26,689.998 1395.82,657.547 1396.38,660.442 1396.94,677.861 1397.5,676.79 1398.06,677.141 1398.62,661.214 1399.18,646.419 1399.74,648.008 1400.3,699.807 1400.86,685.359 1401.41,683.271 1401.97,667.442 1402.53,668.42 1403.09,636.421 1403.65,654.572 1404.21,656.155 1404.77,657.393 1405.33,655.361 1405.89,659.403 1406.45,660.509 1407.01,644.939 1407.57,646.954 1408.13,647.043 1408.68,631.516 1409.24,631.977 1409.8,618.24 1410.36,607.477 1410.92,575.646 1411.48,580.423 1412.04,585.397 1412.6,578.97 1413.16,617.095 1413.72,587.405 1414.28,612.175 1414.84,600.079 1415.4,618.751 1415.95,667.891 1416.51,649.688 1417.07,652.223 1417.63,671.824 1418.19,687.955 1418.75,685.63 1419.31,684.541 1419.87,684.855 1420.43,715.532 1420.99,666.662 1421.55,684.581 1422.11,730.664 1422.67,727.3 1423.23,740.914 1423.78,736.306 1424.34,699.836 1424.9,683.817 1425.46,701.982 1426.02,730.737 1426.58,695.195 1427.14,661.979 1427.7,632.483 1428.26,634.676 1428.82,637.421 1429.38,622.036 1429.94,608.753 1430.5,594.283 1431.05,581.348 1431.61,588.182 1432.17,594.438 1432.73,596.094 1433.29,598.931 1433.85,568.949 1434.41,572.974 1434.97,597.61 1435.53,590.513 1436.09,597.388 1436.65,614.843 1437.21,620.276 1437.77,642.875 1438.33,662.848 1438.88,650.299 1439.44,669.709 1440,671.054 1440.56,672.594 1441.12,689.655 1441.68,655.102 1442.24,658.468 1442.8,623.268 1443.36,614.14 1443.92,617.475 1444.48,636.823 1445.04,691.681 1445.6,660.298 1446.15,661.184 1446.71,629.305 1447.27,618.792 1447.83,656.487 1448.39,622.59 1448.95,644.327 1449.51,660.255 1450.07,678.579 1450.63,675.232 1451.19,677.827 1451.75,679.281 1452.31,666.403 1452.87,672.302 1453.42,659.856 1453.98,645.688 1454.54,682.121 1455.1,735.799 1455.66,738.058 1456.22,736.547 1456.78,722.641 1457.34,722.594 1457.9,724.541 1458.46,766.893 1459.02,765.051 1459.58,760.422 1460.14,723.253 1460.7,721.721 1461.25,719.484 1461.81,734.112 1462.37,733.477 1462.93,747.668 1463.49,779.203 1464.05,755.049 1464.61,749.964 1465.17,745.802 1465.73,773.615 1466.29,753.249 1466.85,749.488 1467.41,733.665 1467.97,745.321 1468.52,741.285 1469.08,736.367 1469.64,699.678 1470.2,682.79 1470.76,650.388 1471.32,684.484 1471.88,684.064 1472.44,699.289 1473,714.896 1473.56,712.943 1474.12,728.617 1474.68,709.302 1475.24,718.671 1475.79,703.537 1476.35,736.271 1476.91,749.06 1477.47,760.502 1478.03,757.474 1478.59,724.044 1479.15,737.507 1479.71,748.107 1480.27,743.831 1480.83,757.005 1481.39,721.853 1481.95,735.748 1482.51,729.651 1483.07,741.284 1483.62,755.1 1484.18,753.297 1484.74,733.222 1485.3,746.469 1485.86,759.203 1486.42,773.309 1486.98,736.464 1487.54,732.97 1488.1,760.973 1488.66,755.784 1489.22,751.801 1489.78,730.953 1490.34,759.395 1490.89,757.474 1491.45,720.693 1492.01,736.829 1492.57,732.38 1493.13,745.939 1493.69,757.626 1494.25,739.767 1494.81,735.176 1495.37,731.342 1495.93,744.126 1496.49,737.315 1497.05,701.006 1497.61,699.617 1498.16,668.019 1498.72,669.877 1499.28,701.014 1499.84,667.823 1500.4,688.148 1500.96,703.036 1501.52,702.84 1502.08,718.356 1502.64,697.38 1503.2,692.79 1503.76,676.734 1504.32,659.963 1504.88,674.186 1505.44,658.044 1505.99,660.087 1506.55,661.259 1507.11,599.477 1507.67,586.151 1508.23,624.992 1508.79,643.772 1509.35,627.783 1509.91,613.009 1510.47,615.422 1511.03,617.982 1511.59,620.715 1512.15,622.997 1512.71,610.223 1513.26,582.796 1513.82,606.604 1514.38,612.691 1514.94,666.015 1515.5,634.465 1516.06,670.756 1516.62,653.59 1517.18,623.552 1517.74,624.476 1518.3,625.569 1518.86,643.626 1519.42,646.104 1519.98,647.745 1520.53,634.45 1521.09,654.309 1521.65,669.563 1522.21,681.881 1522.77,662.865 1523.33,679.86 1523.89,714.416 1524.45,693.73 1525.01,708.291 1525.57,692.305 1526.13,690.319 1526.69,742.007 1527.25,769.358 1527.81,750.287 1528.36,780.076 1528.92,807.725 1529.48,803.293 1530.04,797.949 1530.6,788.473 1531.16,812.632 1531.72,822.362 1532.28,811.292 1532.84,822.377 1533.4,818.267 1533.96,813.803 1534.52,809.205 1535.08,800.493 1535.63,761.074 1536.19,773.071 1536.75,783.822 1537.31,761.908 1537.87,739.475 1538.43,751.274 1538.99,760.369 1539.55,756.022 1540.11,717.95 1540.67,731.089 1541.23,710.612 1541.79,725.558 1542.35,723.786 1542.9,771.872 1543.46,779.504 1544.02,777.773 1544.58,725.76 1545.14,722.038 1545.7,723.141 1546.26,708.452 1546.82,707.899 1547.38,702.452 1547.94,720.556 1548.5,704.571 1549.06,686.323 1549.62,688.669 1550.18,638.594 1550.73,606.096 1551.29,623.297 1551.85,642.903 1552.41,642.157 1552.97,623.12 1553.53,627.868 1554.09,632.51 1554.65,621.681 1555.21,658.42 1555.77,692.016 1556.33,677.723 1556.89,710.147 1557.45,713.434 1558,709.948 1558.56,705.939 1559.12,721.756 1559.68,702.464 1560.24,699.187 1560.8,694.68 1561.36,710.667 1561.92,708.798 1562.48,722.101 1563.04,701.61 1563.6,685.769 1564.16,685.439 1564.72,700.483 1565.28,716.017 1565.83,764.385 1566.39,727.151 1566.95,725.726 1567.51,739.856 1568.07,739.278 1568.63,719.551 1569.19,734.224 1569.75,793.805 1570.31,788.798 1570.87,799.249 1571.43,808.151 1571.99,802.175 1572.55,826.123 1573.1,752.927 1573.66,751.574 1574.22,766.185 1574.78,714.454 1575.34,711.418 1575.9,742.147 1576.46,758.622 1577.02,757.277 1577.58,755.585 1578.14,702.669 1578.7,735.808 1579.26,716.022 1579.82,726.712 1580.37,694.26 1580.93,677.665 1581.49,680.155 1582.05,682.149 1582.61,664.372 1583.17,618.026 1583.73,655.327 1584.29,672.21 1584.85,657.693 1585.41,643.551 1585.97,677.924 1586.53,663.359 1587.09,660.111 1587.65,677.196 1588.2,693.969 1588.76,673.167 1589.32,627.403 1589.88,633.914 1590.44,618.853 1591,606.401 1591.56,609.233 1592.12,596.573 1592.68,602.233 1593.24,606.241 1593.8,591.573 1594.36,631.18 1594.92,639.505 1595.47,659.691 1596.03,677.107 1596.59,676.69 1597.15,679.433 1597.71,680.224 1598.27,630.596 1598.83,632.301 1599.39,619.719 1599.95,624.334 1600.51,629.556 1601.07,680.835 1601.63,679.121 1602.19,697.884 1602.74,682.419 1603.3,681.908 1603.86,651.108 1604.42,669.818 1604.98,656.029 1605.54,638.359 1606.1,641.633 1606.66,641.436 1607.22,662.066 1607.78,646.909 1608.34,648.633 1608.9,632.656 1609.46,620.276 1610.02,640.387 1610.57,656.799 1611.13,659.438 1611.69,661.674 1612.25,644.122 1612.81,660.319 1613.37,678.743 1613.93,680.851 1614.49,667.424 1615.05,648.001 1615.61,650.912 1616.17,635.034 1616.73,655.79 1617.29,675.95 1617.84,679.912 1618.4,678.161 1618.96,678.281 1619.52,695.336 1620.08,713.64 1620.64,711.451 1621.2,694.901 1621.76,710.371 1622.32,705.007 1622.88,721.325 1623.44,738.929 1624,768.824 1624.56,782.018 1625.11,728.08 1625.67,709.043 1626.23,770.392 1626.79,779.605 1627.35,772.868 1627.91,734.128 1628.47,717.719 1629.03,716.653 1629.59,698.252 1630.15,685.419 1630.71,670.803 1631.27,687.364 1631.83,656.19 1632.39,625.764 1632.94,613.362 1633.5,598.719 1634.06,589.096 1634.62,563.638 1635.18,568.722 1635.74,557.516 1636.3,562.54 1636.86,537.37 1637.42,498.182 1637.98,524.107 1638.54,549.732 1639.1,576.075 1639.66,582.675 1640.21,589.465 1640.77,606.533 1641.33,613.062 1641.89,586.557 1642.45,578.486 1643.01,565.547 1643.57,554.317 1644.13,576.833 1644.69,568.239 1645.25,557.603 1645.81,547.007 1646.37,572.477 1646.93,579.593 1647.48,554.449 1648.04,564.776 1648.6,603.762 1649.16,622.254 1649.72,654.764 1650.28,667.876 1650.84,668.409 1651.4,684.656 1651.96,716.238 1652.52,698.031 1653.08,681.963 1653.64,698.862 1654.2,682.902 1654.76,671.054 1655.31,687.727 1655.87,703.91 1656.43,703.994 1656.99,721.016 1657.55,703.303 1658.11,734.763 1658.67,733.779 1659.23,729.556 1659.79,729.635 1660.35,729.428 1660.91,743.822 1661.47,758.127 1662.03,772.227 1662.58,755.445 1663.14,750.286 1663.7,778.32 1664.26,726.764 1664.82,710.507 1665.38,708.429 1665.94,689.872 1666.5,657.018 1667.06,660.022 1667.62,674.72 1668.18,677.464 1668.74,614.042 1669.3,649.835 1669.85,651.708 1670.41,670.294 1670.97,671.184 1671.53,658.227 1672.09,659.775 1672.65,661.313 1673.21,649.738 1673.77,686.642 1674.33,674.256 1674.89,674.45 1675.45,657.291 1676.01,656.586 1676.57,672.024 1677.13,689.734 1677.68,659.193 1678.24,690.787 1678.8,693.248 1679.36,697.446 1679.92,716.129 1680.48,695.854 1681.04,693.65 1681.6,691.147 1682.16,688.513 1682.72,703.193 1683.28,702.023 1683.84,718.946 1684.4,733.696 1684.95,700.082 1685.51,683.015 1686.07,663.155 1686.63,680.417 1687.19,661.34 1687.75,691.574 1688.31,674.489 1688.87,674.986 1689.43,672.952 1689.99,689.183 1690.55,673.969 1691.11,658.869 1691.67,676.556 1692.23,691.224 1692.78,677.158 1693.34,712.726 1693.9,742.561 1694.46,756.378 1695.02,766.302 1695.58,777.241 1696.14,787.971 1696.7,781.902 1697.26,789.937 1697.82,804.048 1698.38,831.389 1698.94,842.945 1699.5,819.395 1700.05,797.444 1700.61,804.893 1701.17,828.915 1701.73,824.298 1702.29,850.118 1702.85,858.224 1703.41,864.747 1703.97,838.349 1704.53,809.195 1705.09,801.756 1705.65,808.884 1706.21,784.635 1706.77,781.141 1707.32,745.174 1707.88,753.277 1708.44,781.324 1709,726.641 1709.56,677.719 1710.12,662.123 1710.68,691.392 1711.24,676.008 1711.8,676.009 1712.36,678.022 1712.92,678.975 1713.48,664.894 1714.04,651.304 1714.6,667.723 1715.15,648.406 1715.71,683.957 1716.27,667.756 1716.83,654.333 1717.39,688.177 1717.95,670.595 1718.51,673.741 1719.07,658.491 1719.63,690.657 1720.19,690.676 1720.75,705.968 1721.31,674.869 1721.87,674.498 1722.42,675.857 1722.98,643.924 1723.54,628.881 1724.1,615.184 1724.66,649.293 1725.22,667.6 1725.78,666.475 1726.34,649.571 1726.9,632.381 1727.46,602.256 1728.02,622.162 1728.58,604.722 1729.14,610.614 1729.69,580.131 1730.25,583.126 1730.81,572.186 1731.37,565.447 1731.93,567.242 1732.49,570.887 1733.05,576.466 1733.61,595.605 1734.17,586.766 1734.73,606.209 1735.29,626.137 1735.85,628.779 1736.41,651.011 1736.97,668.049 1737.52,651.084 1738.08,653.418 1738.64,672.604 1739.2,670.445 1739.76,686.649 1740.32,684.999 1740.88,703.98 1741.44,704.978 1742,700.721 1742.56,715.156 1743.12,713.347 1743.68,728.599 1744.24,695.359 1744.79,695.417 1745.35,730.529 1745.91,714.204 1746.47,711.848 1747.03,696.227 1747.59,712.819 1748.15,728.443 1748.71,753.744 1749.27,796.005 1749.83,777.703 1750.39,757.432 1750.95,753.226 1751.51,748.233 1752.06,744.916 1752.62,739.243 1753.18,769.835 1753.74,764.477 1754.3,744.138 1754.86,740.642 1755.42,735.404 1755.98,751.53 1756.54,728.759 1757.1,728.581 1757.66,711.205 1758.22,694.941 1758.78,689.339 1759.34,625.539 1759.89,615.071 1760.45,618.058 1761.01,654.035 1761.57,620.712 1762.13,640.425 1762.69,561.844 1763.25,551.162 1763.81,556.31 1764.37,575.444 1764.93,600.499 1765.49,576.71 1766.05,599.592 1766.61,602.717 1767.16,593.4 1767.72,583.807 1768.28,592.144 1768.84,598.548 1769.4,605.445 1769.96,627.232 1770.52,597.172 1771.08,634.869 1771.64,650.17 1772.2,636.643 1772.76,636.716 1773.32,640.436 1773.88,674.35 1774.43,674.176 1774.99,674.834 1775.55,642.343 1776.11,626.971 1776.67,642.275 1777.23,647.195 1777.79,634.765 1778.35,637.814 1778.91,639.535 1779.47,623.95 1780.03,629.338 1780.59,614.059 1781.15,580.816 1781.71,588.372 1782.26,573.61 1782.82,579.473 1783.38,603.255 1783.94,593.798 1784.5,595.781 1785.06,613.323 1785.62,619.367 1786.18,641.022 1786.74,675.839 1787.3,673.807 1787.86,658.038 1788.42,639.852 1788.98,655.783 1789.53,687.16 1790.09,688.323 1790.65,671.299 1791.21,687.575 1791.77,689.819 1792.33,689.046 1792.89,688.825 1793.45,638.157 1794.01,642.756 1794.57,626.36 1795.13,632.379 1795.69,635.365 1796.25,602.47 1796.8,622.21 1797.36,610.615 1797.92,615.202 1798.48,604.009 1799.04,624.187 1799.6,627.354 1800.16,647.885 1800.72,652.113 1801.28,638.234 1801.84,637.08 1802.4,657.715 1802.96,659.108 1803.52,643.579 1804.08,648.986 1804.63,680.074 1805.19,631.715 1805.75,618.353 1806.31,639.189 1806.87,694.84 1807.43,678.134 1807.99,662.631 1808.55,684.407 1809.11,700.159 1809.67,733.398 1810.23,748.466 1810.79,712.346 1811.35,691.973 1811.9,708.866 1812.46,724.533 1813.02,709.798 1813.58,727.428 1814.14,744.917 1814.7,712.772 1815.26,693.26 1815.82,642.66 1816.38,640.267 1816.94,643.155 1817.5,629.441 1818.06,631.353 1818.62,652.954 1819.18,690.515 1819.73,691.224 1820.29,611.235 1820.85,649.471 1821.41,664.685 1821.97,662.844 1822.53,665.666 1823.09,667.486 1823.65,684.62 1824.21,719.096 1824.77,737.156 1825.33,752.422 1825.89,749.219 1826.45,713.462 1827,696.173 1827.56,696.4 1828.12,710.726 1828.68,693.251 1829.24,694.528 1829.8,681.303 1830.36,651.688 1830.92,668.407 1831.48,702.359 1832.04,713.842 1832.6,712.514 1833.16,708.726 1833.72,692.383 1834.27,691.867 1834.83,672.4 1835.39,670.953 1835.95,688.107 1836.51,703.767 1837.07,735.478 1837.63,748.823 1838.19,764.788 \"/>\n<path clip-path=\"url(#clip173)\" d=\"M720.247 691.003 L720.806 691.003 L721.365 691.003 L721.924 691.003 L722.484 691.003 L723.043 691.003 L723.602 691.003 L724.161 691.003 L724.721 691.003 L725.28 691.003 L725.839 691.003 L726.398 691.003 L726.958 691.003 L727.517 691.003 L728.076 691.003 L728.635 691.003 L729.195 691.003 L729.754 691.003 L730.313 691.003 L730.872 691.003 L731.432 691.003 L731.991 691.003 L732.55 691.003 L733.109 691.003 L733.669 691.003 L734.228 691.003 L734.787 691.003 L735.346 691.003 L735.906 691.003 L736.465 691.003 L737.024 691.003 L737.583 691.003 L738.143 691.003 L738.702 691.003 L739.261 691.003 L739.82 691.003 L740.38 691.003 L740.939 691.003 L741.498 691.003 L742.057 691.003 L742.617 691.003 L743.176 691.003 L743.735 691.003 L744.294 691.003 L744.854 691.003 L745.413 691.003 L745.972 691.003 L746.531 691.003 L747.091 691.003 L747.65 691.003 L748.209 691.003 L748.768 691.003 L749.328 691.003 L749.887 691.003 L750.446 691.003 L751.005 691.003 L751.565 691.003 L752.124 691.003 L752.683 691.003 L753.242 691.003 L753.802 691.003 L754.361 691.003 L754.92 691.003 L755.479 691.003 L756.039 691.003 L756.598 691.003 L757.157 691.003 L757.716 691.003 L758.276 691.003 L758.835 691.003 L759.394 691.003 L759.953 691.003 L760.513 691.003 L761.072 691.003 L761.631 691.003 L762.19 691.003 L762.75 691.003 L763.309 691.003 L763.868 691.003 L764.427 691.003 L764.987 691.003 L765.546 691.003 L766.105 691.003 L766.664 691.003 L767.224 691.003 L767.783 691.003 L768.342 691.003 L768.901 691.003 L769.461 691.003 L770.02 691.003 L770.579 691.003 L771.138 691.003 L771.698 691.003 L772.257 691.003 L772.816 691.003 L773.375 691.003 L773.935 691.003 L774.494 691.003 L775.053 691.003 L775.612 691.003 L776.172 691.003 L776.731 691.003 L777.29 691.003 L777.849 691.003 L778.409 691.003 L778.968 691.003 L779.527 691.003 L780.086 691.003 L780.646 691.003 L781.205 691.003 L781.764 691.003 L782.323 691.003 L782.883 691.003 L783.442 691.003 L784.001 691.003 L784.56 691.003 L785.12 691.003 L785.679 691.003 L786.238 691.003 L786.797 691.003 L787.357 691.003 L787.916 691.003 L788.475 691.003 L789.034 691.003 L789.594 691.003 L790.153 691.003 L790.712 691.003 L791.271 691.003 L791.831 691.003 L792.39 691.003 L792.949 691.003 L793.508 691.003 L794.068 691.003 L794.627 691.003 L795.186 691.003 L795.745 691.003 L796.305 691.003 L796.864 691.003 L797.423 691.003 L797.982 691.003 L798.542 691.003 L799.101 691.003 L799.66 691.003 L800.219 691.003 L800.779 691.003 L801.338 691.003 L801.897 691.003 L802.456 691.003 L803.016 691.003 L803.575 691.003 L804.134 691.003 L804.693 691.003 L805.253 691.003 L805.812 691.003 L806.371 691.003 L806.931 691.003 L807.49 691.003 L808.049 691.003 L808.608 691.003 L809.168 691.003 L809.727 691.003 L810.286 691.003 L810.845 691.003 L811.405 691.003 L811.964 691.003 L812.523 691.003 L813.082 691.003 L813.642 691.003 L814.201 691.003 L814.76 691.003 L815.319 691.003 L815.879 691.003 L816.438 691.003 L816.997 691.003 L817.556 691.003 L818.116 691.003 L818.675 691.003 L819.234 691.003 L819.793 691.003 L820.353 691.003 L820.912 691.003 L821.471 691.003 L822.03 691.003 L822.59 691.003 L823.149 691.003 L823.708 691.003 L824.267 691.003 L824.827 691.003 L825.386 691.003 L825.945 691.003 L826.504 691.003 L827.064 691.003 L827.623 691.003 L828.182 691.003 L828.741 691.003 L829.301 691.003 L829.86 691.003 L830.419 691.003 L830.978 691.003 L831.538 691.003 L832.097 691.003 L832.656 691.003 L833.215 691.003 L833.775 691.003 L834.334 691.003 L834.893 691.003 L835.452 691.003 L836.012 691.003 L836.571 691.003 L837.13 691.003 L837.689 691.003 L838.249 691.003 L838.808 691.003 L839.367 691.003 L839.926 691.003 L840.486 691.003 L841.045 691.003 L841.604 691.003 L842.163 691.003 L842.723 691.003 L843.282 691.003 L843.841 691.003 L844.4 691.003 L844.96 691.003 L845.519 691.003 L846.078 691.003 L846.637 691.003 L847.197 691.003 L847.756 691.003 L848.315 691.003 L848.874 691.003 L849.434 691.003 L849.993 691.003 L850.552 691.003 L851.111 691.003 L851.671 691.003 L852.23 691.003 L852.789 691.003 L853.348 691.003 L853.908 691.003 L854.467 691.003 L855.026 691.003 L855.585 691.003 L856.145 691.003 L856.704 691.003 L857.263 691.003 L857.822 691.003 L858.382 691.003 L858.941 691.003 L859.5 691.003 L860.059 691.003 L860.619 691.003 L861.178 691.003 L861.737 691.003 L862.296 691.003 L862.856 691.003 L863.415 691.003 L863.974 691.003 L864.533 691.003 L865.093 691.003 L865.652 691.003 L866.211 691.003 L866.77 691.003 L867.33 691.003 L867.889 691.003 L868.448 691.003 L869.007 691.003 L869.567 691.003 L870.126 691.003 L870.685 691.003 L871.244 691.003 L871.804 691.003 L872.363 691.003 L872.922 691.003 L873.481 691.003 L874.041 691.003 L874.6 691.003 L875.159 691.003 L875.718 691.003 L876.278 691.003 L876.837 691.003 L877.396 691.003 L877.955 691.003 L878.515 691.003 L879.074 691.003 L879.633 691.003 L880.192 691.003 L880.752 691.003 L881.311 691.003 L881.87 691.003 L882.429 691.003 L882.989 691.003 L883.548 691.003 L884.107 691.003 L884.666 691.003 L885.226 691.003 L885.785 691.003 L886.344 691.003 L886.903 691.003 L887.463 691.003 L888.022 691.003 L888.581 691.003 L889.14 691.003 L889.7 691.003 L890.259 691.003 L890.818 691.003 L891.377 691.003 L891.937 691.003 L892.496 691.003 L893.055 691.003 L893.614 691.003 L894.174 691.003 L894.733 691.003 L895.292 691.003 L895.851 691.003 L896.411 691.003 L896.97 691.003 L897.529 691.003 L898.088 691.003 L898.648 691.003 L899.207 691.003 L899.766 691.003 L900.325 691.003 L900.885 691.003 L901.444 691.003 L902.003 691.003 L902.562 691.003 L903.122 691.003 L903.681 691.003 L904.24 691.003 L904.799 691.003 L905.359 691.003 L905.918 691.003 L906.477 691.003 L907.036 691.003 L907.596 691.003 L908.155 691.003 L908.714 691.003 L909.273 691.003 L909.833 691.003 L910.392 691.003 L910.951 691.003 L911.51 691.003 L912.07 691.003 L912.629 691.003 L913.188 691.003 L913.747 691.003 L914.307 691.003 L914.866 691.003 L915.425 691.003 L915.984 691.003 L916.544 691.003 L917.103 691.003 L917.662 691.003 L918.221 691.003 L918.781 691.003 L919.34 691.003 L919.899 691.003 L920.458 691.003 L921.018 691.003 L921.577 691.003 L922.136 691.003 L922.695 691.003 L923.255 691.003 L923.814 691.003 L924.373 691.003 L924.932 691.003 L925.492 691.003 L926.051 691.003 L926.61 691.003 L927.169 691.003 L927.729 691.003 L928.288 691.003 L928.847 691.003 L929.406 691.003 L929.966 691.003 L930.525 691.003 L931.084 691.003 L931.644 691.003 L932.203 691.003 L932.762 691.003 L933.321 691.003 L933.881 691.003 L934.44 691.003 L934.999 691.003 L935.558 691.003 L936.118 691.003 L936.677 691.003 L937.236 691.003 L937.795 691.003 L938.355 691.003 L938.914 691.003 L939.473 691.003 L940.032 691.003 L940.592 691.003 L941.151 691.003 L941.71 691.003 L942.269 691.003 L942.829 691.003 L943.388 691.003 L943.947 691.003 L944.506 691.003 L945.066 691.003 L945.625 691.003 L946.184 691.003 L946.743 691.003 L947.303 691.003 L947.862 691.003 L948.421 691.003 L948.98 691.003 L949.54 691.003 L950.099 691.003 L950.658 691.003 L951.217 691.003 L951.777 691.003 L952.336 691.003 L952.895 691.003 L953.454 691.003 L954.014 691.003 L954.573 691.003 L955.132 691.003 L955.691 691.003 L956.251 691.003 L956.81 691.003 L957.369 691.003 L957.928 691.003 L958.488 691.003 L959.047 691.003 L959.606 691.003 L960.165 691.003 L960.725 691.003 L961.284 691.003 L961.843 691.003 L962.402 691.003 L962.962 691.003 L963.521 691.003 L964.08 691.003 L964.639 691.003 L965.199 691.003 L965.758 691.003 L966.317 691.003 L966.876 691.003 L967.436 691.003 L967.995 691.003 L968.554 691.003 L969.113 691.003 L969.673 691.003 L970.232 691.003 L970.791 691.003 L971.35 691.003 L971.91 691.003 L972.469 691.003 L973.028 691.003 L973.587 691.003 L974.147 691.003 L974.706 691.003 L975.265 691.003 L975.824 691.003 L976.384 691.003 L976.943 691.003 L977.502 691.003 L978.061 691.003 L978.621 691.003 L979.18 691.003 L979.739 691.003 L980.298 691.003 L980.858 691.003 L981.417 691.003 L981.976 691.003 L982.535 691.003 L983.095 691.003 L983.654 691.003 L984.213 691.003 L984.772 691.003 L985.332 691.003 L985.891 691.003 L986.45 691.003 L987.009 691.003 L987.569 691.003 L988.128 691.003 L988.687 691.003 L989.246 691.003 L989.806 691.003 L990.365 691.003 L990.924 691.003 L991.483 691.003 L992.043 691.003 L992.602 691.003 L993.161 691.003 L993.72 691.003 L994.28 691.003 L994.839 691.003 L995.398 691.003 L995.957 691.003 L996.517 691.003 L997.076 691.003 L997.635 691.003 L998.194 691.003 L998.754 691.003 L999.313 691.003 L999.872 691.003 L1000.43 691.003 L1000.99 691.003 L1001.55 691.003 L1002.11 691.003 L1002.67 691.003 L1003.23 691.003 L1003.79 691.003 L1004.35 691.003 L1004.91 691.003 L1005.46 691.003 L1006.02 691.003 L1006.58 691.003 L1007.14 691.003 L1007.7 691.003 L1008.26 691.003 L1008.82 691.003 L1009.38 691.003 L1009.94 691.003 L1010.5 691.003 L1011.06 691.003 L1011.62 691.003 L1012.18 691.003 L1012.73 691.003 L1013.29 691.003 L1013.85 691.003 L1014.41 691.003 L1014.97 691.003 L1015.53 691.003 L1016.09 691.003 L1016.65 691.003 L1017.21 691.003 L1017.77 691.003 L1018.33 691.003 L1018.89 691.003 L1019.45 691.003 L1020.01 691.003 L1020.56 691.003 L1021.12 691.003 L1021.68 691.003 L1022.24 691.003 L1022.8 691.003 L1023.36 691.003 L1023.92 691.003 L1024.48 691.003 L1025.04 691.003 L1025.6 691.003 L1026.16 691.003 L1026.72 691.003 L1027.28 691.003 L1027.83 691.003 L1028.39 691.003 L1028.95 691.003 L1029.51 691.003 L1030.07 691.003 L1030.63 691.003 L1031.19 691.003 L1031.75 691.003 L1032.31 691.003 L1032.87 691.003 L1033.43 691.003 L1033.99 691.003 L1034.55 691.003 L1035.1 691.003 L1035.66 691.003 L1036.22 691.003 L1036.78 691.003 L1037.34 691.003 L1037.9 691.003 L1038.46 691.003 L1039.02 691.003 L1039.58 691.003 L1040.14 691.003 L1040.7 691.003 L1041.26 691.003 L1041.82 691.003 L1042.38 691.003 L1042.93 691.003 L1043.49 691.003 L1044.05 691.003 L1044.61 691.003 L1045.17 691.003 L1045.73 691.003 L1046.29 691.003 L1046.85 691.003 L1047.41 691.003 L1047.97 691.003 L1048.53 691.003 L1049.09 691.003 L1049.65 691.003 L1050.2 691.003 L1050.76 691.003 L1051.32 691.003 L1051.88 691.003 L1052.44 691.003 L1053 691.003 L1053.56 691.003 L1054.12 691.003 L1054.68 691.003 L1055.24 691.003 L1055.8 691.003 L1056.36 691.003 L1056.92 691.003 L1057.48 691.003 L1058.03 691.003 L1058.59 691.003 L1059.15 691.003 L1059.71 691.003 L1060.27 691.003 L1060.83 691.003 L1061.39 691.003 L1061.95 691.003 L1062.51 691.003 L1063.07 691.003 L1063.63 691.003 L1064.19 691.003 L1064.75 691.003 L1065.3 691.003 L1065.86 691.003 L1066.42 691.003 L1066.98 691.003 L1067.54 691.003 L1068.1 691.003 L1068.66 691.003 L1069.22 691.003 L1069.78 691.003 L1070.34 691.003 L1070.9 691.003 L1071.46 691.003 L1072.02 691.003 L1072.57 691.003 L1073.13 691.003 L1073.69 691.003 L1074.25 691.003 L1074.81 691.003 L1075.37 691.003 L1075.93 691.003 L1076.49 691.003 L1077.05 691.003 L1077.61 691.003 L1078.17 691.003 L1078.73 691.003 L1079.29 691.003 L1079.85 691.003 L1080.4 691.003 L1080.96 691.003 L1081.52 691.003 L1082.08 691.003 L1082.64 691.003 L1083.2 691.003 L1083.76 691.003 L1084.32 691.003 L1084.88 691.003 L1085.44 691.003 L1086 691.003 L1086.56 691.003 L1087.12 691.003 L1087.67 691.003 L1088.23 691.003 L1088.79 691.003 L1089.35 691.003 L1089.91 691.003 L1090.47 691.003 L1091.03 691.003 L1091.59 691.003 L1092.15 691.003 L1092.71 691.003 L1093.27 691.003 L1093.83 691.003 L1094.39 691.003 L1094.94 691.003 L1095.5 691.003 L1096.06 691.003 L1096.62 691.003 L1097.18 691.003 L1097.74 691.003 L1098.3 691.003 L1098.86 691.003 L1099.42 691.003 L1099.98 691.003 L1100.54 691.003 L1101.1 691.003 L1101.66 691.003 L1102.22 691.003 L1102.77 691.003 L1103.33 691.003 L1103.89 691.003 L1104.45 691.003 L1105.01 691.003 L1105.57 691.003 L1106.13 691.003 L1106.69 691.003 L1107.25 691.003 L1107.81 691.003 L1108.37 691.003 L1108.93 691.003 L1109.49 691.003 L1110.04 691.003 L1110.6 691.003 L1111.16 691.003 L1111.72 691.003 L1112.28 691.003 L1112.84 691.003 L1113.4 691.003 L1113.96 691.003 L1114.52 691.003 L1115.08 691.003 L1115.64 691.003 L1116.2 691.003 L1116.76 691.003 L1117.31 691.003 L1117.87 691.003 L1118.43 691.003 L1118.99 691.003 L1119.55 691.003 L1120.11 691.003 L1120.67 691.003 L1121.23 691.003 L1121.79 691.003 L1122.35 691.003 L1122.91 691.003 L1123.47 691.003 L1124.03 691.003 L1124.59 691.003 L1125.14 691.003 L1125.7 691.003 L1126.26 691.003 L1126.82 691.003 L1127.38 691.003 L1127.94 691.003 L1128.5 691.003 L1129.06 691.003 L1129.62 691.003 L1130.18 691.003 L1130.74 691.003 L1131.3 691.003 L1131.86 691.003 L1132.41 691.003 L1132.97 691.003 L1133.53 691.003 L1134.09 691.003 L1134.65 691.003 L1135.21 691.003 L1135.77 691.003 L1136.33 691.003 L1136.89 691.003 L1137.45 691.003 L1138.01 691.003 L1138.57 691.003 L1139.13 691.003 L1139.68 691.003 L1140.24 691.003 L1140.8 691.003 L1141.36 691.003 L1141.92 691.003 L1142.48 691.003 L1143.04 691.003 L1143.6 691.003 L1144.16 691.003 L1144.72 691.003 L1145.28 691.003 L1145.84 691.003 L1146.4 691.003 L1146.96 691.003 L1147.51 691.003 L1148.07 691.003 L1148.63 691.003 L1149.19 691.003 L1149.75 691.003 L1150.31 691.003 L1150.87 691.003 L1151.43 691.003 L1151.99 691.003 L1152.55 691.003 L1153.11 691.003 L1153.67 691.003 L1154.23 691.003 L1154.78 691.003 L1155.34 691.003 L1155.9 691.003 L1156.46 691.003 L1157.02 691.003 L1157.58 691.003 L1158.14 691.003 L1158.7 691.003 L1159.26 691.003 L1159.82 691.003 L1160.38 691.003 L1160.94 691.003 L1161.5 691.003 L1162.05 691.003 L1162.61 691.003 L1163.17 691.003 L1163.73 691.003 L1164.29 691.003 L1164.85 691.003 L1165.41 691.003 L1165.97 691.003 L1166.53 691.003 L1167.09 691.003 L1167.65 691.003 L1168.21 691.003 L1168.77 691.003 L1169.33 691.003 L1169.88 691.003 L1170.44 691.003 L1171 691.003 L1171.56 691.003 L1172.12 691.003 L1172.68 691.003 L1173.24 691.003 L1173.8 691.003 L1174.36 691.003 L1174.92 691.003 L1175.48 691.003 L1176.04 691.003 L1176.6 691.003 L1177.15 691.003 L1177.71 691.003 L1178.27 691.003 L1178.83 691.003 L1179.39 691.003 L1179.95 691.003 L1180.51 691.003 L1181.07 691.003 L1181.63 691.003 L1182.19 691.003 L1182.75 691.003 L1183.31 691.003 L1183.87 691.003 L1184.43 691.003 L1184.98 691.003 L1185.54 691.003 L1186.1 691.003 L1186.66 691.003 L1187.22 691.003 L1187.78 691.003 L1188.34 691.003 L1188.9 691.003 L1189.46 691.003 L1190.02 691.003 L1190.58 691.003 L1191.14 691.003 L1191.7 691.003 L1192.25 691.003 L1192.81 691.003 L1193.37 691.003 L1193.93 691.003 L1194.49 691.003 L1195.05 691.003 L1195.61 691.003 L1196.17 691.003 L1196.73 691.003 L1197.29 691.003 L1197.85 691.003 L1198.41 691.003 L1198.97 691.003 L1199.52 691.003 L1200.08 691.003 L1200.64 691.003 L1201.2 691.003 L1201.76 691.003 L1202.32 691.003 L1202.88 691.003 L1203.44 691.003 L1204 691.003 L1204.56 691.003 L1205.12 691.003 L1205.68 691.003 L1206.24 691.003 L1206.8 691.003 L1207.35 691.003 L1207.91 691.003 L1208.47 691.003 L1209.03 691.003 L1209.59 691.003 L1210.15 691.003 L1210.71 691.003 L1211.27 691.003 L1211.83 691.003 L1212.39 691.003 L1212.95 691.003 L1213.51 691.003 L1214.07 691.003 L1214.62 691.003 L1215.18 691.003 L1215.74 691.003 L1216.3 691.003 L1216.86 691.003 L1217.42 691.003 L1217.98 691.003 L1218.54 691.003 L1219.1 691.003 L1219.66 691.003 L1220.22 691.003 L1220.78 691.003 L1221.34 691.003 L1221.89 691.003 L1222.45 691.003 L1223.01 691.003 L1223.57 691.003 L1224.13 691.003 L1224.69 691.003 L1225.25 691.003 L1225.81 691.003 L1226.37 691.003 L1226.93 691.003 L1227.49 691.003 L1228.05 691.003 L1228.61 691.003 L1229.17 691.003 L1229.72 691.003 L1230.28 691.003 L1230.84 691.003 L1231.4 691.003 L1231.96 691.003 L1232.52 691.003 L1233.08 691.003 L1233.64 691.003 L1234.2 691.003 L1234.76 691.003 L1235.32 691.003 L1235.88 691.003 L1236.44 691.003 L1236.99 691.003 L1237.55 691.003 L1238.11 691.003 L1238.67 691.003 L1239.23 691.003 L1239.79 691.003 L1240.35 691.003 L1240.91 691.003 L1241.47 691.003 L1242.03 691.003 L1242.59 691.003 L1243.15 691.003 L1243.71 691.003 L1244.26 691.003 L1244.82 691.003 L1245.38 691.003 L1245.94 691.003 L1246.5 691.003 L1247.06 691.003 L1247.62 691.003 L1248.18 691.003 L1248.74 691.003 L1249.3 691.003 L1249.86 691.003 L1250.42 691.003 L1250.98 691.003 L1251.54 691.003 L1252.09 691.003 L1252.65 691.003 L1253.21 691.003 L1253.77 691.003 L1254.33 691.003 L1254.89 691.003 L1255.45 691.003 L1256.01 691.003 L1256.57 691.003 L1257.13 691.003 L1257.69 691.003 L1258.25 691.003 L1258.81 691.003 L1259.36 691.003 L1259.92 691.003 L1260.48 691.003 L1261.04 691.003 L1261.6 691.003 L1262.16 691.003 L1262.72 691.003 L1263.28 691.003 L1263.84 691.003 L1264.4 691.003 L1264.96 691.003 L1265.52 691.003 L1266.08 691.003 L1266.63 691.003 L1267.19 691.003 L1267.75 691.003 L1268.31 691.003 L1268.87 691.003 L1269.43 691.003 L1269.99 691.003 L1270.55 691.003 L1271.11 691.003 L1271.67 691.003 L1272.23 691.003 L1272.79 691.003 L1273.35 691.003 L1273.91 691.003 L1274.46 691.003 L1275.02 691.003 L1275.58 691.003 L1276.14 691.003 L1276.7 691.003 L1277.26 691.003 L1277.82 691.003 L1278.38 691.003 L1278.94 691.003 L1279.5 691.003 L1280.06 691.003 L1280.62 691.003 L1281.18 691.003 L1281.73 691.003 L1282.29 691.003 L1282.85 691.003 L1283.41 691.003 L1283.97 691.003 L1284.53 691.003 L1285.09 691.003 L1285.65 691.003 L1286.21 691.003 L1286.77 691.003 L1287.33 691.003 L1287.89 691.003 L1288.45 691.003 L1289 691.003 L1289.56 691.003 L1290.12 691.003 L1290.68 691.003 L1291.24 691.003 L1291.8 691.003 L1292.36 691.003 L1292.92 691.003 L1293.48 691.003 L1294.04 691.003 L1294.6 691.003 L1295.16 691.003 L1295.72 691.003 L1296.28 691.003 L1296.83 691.003 L1297.39 691.003 L1297.95 691.003 L1298.51 691.003 L1299.07 691.003 L1299.63 691.003 L1300.19 691.003 L1300.75 691.003 L1301.31 691.003 L1301.87 691.003 L1302.43 691.003 L1302.99 691.003 L1303.55 691.003 L1304.1 691.003 L1304.66 691.003 L1305.22 691.003 L1305.78 691.003 L1306.34 691.003 L1306.9 691.003 L1307.46 691.003 L1308.02 691.003 L1308.58 691.003 L1309.14 691.003 L1309.7 691.003 L1310.26 691.003 L1310.82 691.003 L1311.38 691.003 L1311.93 691.003 L1312.49 691.003 L1313.05 691.003 L1313.61 691.003 L1314.17 691.003 L1314.73 691.003 L1315.29 691.003 L1315.85 691.003 L1316.41 691.003 L1316.97 691.003 L1317.53 691.003 L1318.09 691.003 L1318.65 691.003 L1319.2 691.003 L1319.76 691.003 L1320.32 691.003 L1320.88 691.003 L1321.44 691.003 L1322 691.003 L1322.56 691.003 L1323.12 691.003 L1323.68 691.003 L1324.24 691.003 L1324.8 691.003 L1325.36 691.003 L1325.92 691.003 L1326.47 691.003 L1327.03 691.003 L1327.59 691.003 L1328.15 691.003 L1328.71 691.003 L1329.27 691.003 L1329.83 691.003 L1330.39 691.003 L1330.95 691.003 L1331.51 691.003 L1332.07 691.003 L1332.63 691.003 L1333.19 691.003 L1333.75 691.003 L1334.3 691.003 L1334.86 691.003 L1335.42 691.003 L1335.98 691.003 L1336.54 691.003 L1337.1 691.003 L1337.66 691.003 L1338.22 691.003 L1338.78 691.003 L1339.34 691.003 L1339.9 691.003 L1340.46 691.003 L1341.02 691.003 L1341.57 691.003 L1342.13 691.003 L1342.69 691.003 L1343.25 691.003 L1343.81 691.003 L1344.37 691.003 L1344.93 691.003 L1345.49 691.003 L1346.05 691.003 L1346.61 691.003 L1347.17 691.003 L1347.73 691.003 L1348.29 691.003 L1348.84 691.003 L1349.4 691.003 L1349.96 691.003 L1350.52 691.003 L1351.08 691.003 L1351.64 691.003 L1352.2 691.003 L1352.76 691.003 L1353.32 691.003 L1353.88 691.003 L1354.44 691.003 L1355 691.003 L1355.56 691.003 L1356.12 691.003 L1356.67 691.003 L1357.23 691.003 L1357.79 691.003 L1358.35 691.003 L1358.91 691.003 L1359.47 691.003 L1360.03 691.003 L1360.59 691.003 L1361.15 691.003 L1361.71 691.003 L1362.27 691.003 L1362.83 691.003 L1363.39 691.003 L1363.94 691.003 L1364.5 691.003 L1365.06 691.003 L1365.62 691.003 L1366.18 691.003 L1366.74 691.003 L1367.3 691.003 L1367.86 691.003 L1368.42 691.003 L1368.98 691.003 L1369.54 691.003 L1370.1 691.003 L1370.66 691.003 L1371.21 691.003 L1371.77 691.003 L1372.33 691.003 L1372.89 691.003 L1373.45 691.003 L1374.01 691.003 L1374.57 691.003 L1375.13 691.003 L1375.69 691.003 L1376.25 691.003 L1376.81 691.003 L1377.37 691.003 L1377.93 691.003 L1378.49 691.003 L1379.04 691.003 L1379.6 691.003 L1380.16 691.003 L1380.72 691.003 L1381.28 691.003 L1381.84 691.003 L1382.4 691.003 L1382.96 691.003 L1383.52 691.003 L1384.08 691.003 L1384.64 691.003 L1385.2 691.003 L1385.76 691.003 L1386.31 691.003 L1386.87 691.003 L1387.43 691.003 L1387.99 691.003 L1388.55 691.003 L1389.11 691.003 L1389.67 691.003 L1390.23 691.003 L1390.79 691.003 L1391.35 691.003 L1391.91 691.003 L1392.47 691.003 L1393.03 691.003 L1393.58 691.003 L1394.14 691.003 L1394.7 691.003 L1395.26 691.003 L1395.82 691.003 L1396.38 691.003 L1396.94 691.003 L1397.5 691.003 L1398.06 691.003 L1398.62 691.003 L1399.18 691.003 L1399.74 691.003 L1400.3 691.003 L1400.86 691.003 L1401.41 691.003 L1401.97 691.003 L1402.53 691.003 L1403.09 691.003 L1403.65 691.003 L1404.21 691.003 L1404.77 691.003 L1405.33 691.003 L1405.89 691.003 L1406.45 691.003 L1407.01 691.003 L1407.57 691.003 L1408.13 691.003 L1408.68 691.003 L1409.24 691.003 L1409.8 691.003 L1410.36 691.003 L1410.92 691.003 L1411.48 691.003 L1412.04 691.003 L1412.6 691.003 L1413.16 691.003 L1413.72 691.003 L1414.28 691.003 L1414.84 691.003 L1415.4 691.003 L1415.95 691.003 L1416.51 691.003 L1417.07 691.003 L1417.63 691.003 L1418.19 691.003 L1418.75 691.003 L1419.31 691.003 L1419.87 691.003 L1420.43 691.003 L1420.99 691.003 L1421.55 691.003 L1422.11 691.003 L1422.67 691.003 L1423.23 691.003 L1423.78 691.003 L1424.34 691.003 L1424.9 691.003 L1425.46 691.003 L1426.02 691.003 L1426.58 691.003 L1427.14 691.003 L1427.7 691.003 L1428.26 691.003 L1428.82 691.003 L1429.38 691.003 L1429.94 691.003 L1430.5 691.003 L1431.05 691.003 L1431.61 691.003 L1432.17 691.003 L1432.73 691.003 L1433.29 691.003 L1433.85 691.003 L1434.41 691.003 L1434.97 691.003 L1435.53 691.003 L1436.09 691.003 L1436.65 691.003 L1437.21 691.003 L1437.77 691.003 L1438.33 691.003 L1438.88 691.003 L1439.44 691.003 L1440 691.003 L1440.56 691.003 L1441.12 691.003 L1441.68 691.003 L1442.24 691.003 L1442.8 691.003 L1443.36 691.003 L1443.92 691.003 L1444.48 691.003 L1445.04 691.003 L1445.6 691.003 L1446.15 691.003 L1446.71 691.003 L1447.27 691.003 L1447.83 691.003 L1448.39 691.003 L1448.95 691.003 L1449.51 691.003 L1450.07 691.003 L1450.63 691.003 L1451.19 691.003 L1451.75 691.003 L1452.31 691.003 L1452.87 691.003 L1453.42 691.003 L1453.98 691.003 L1454.54 691.003 L1455.1 691.003 L1455.66 691.003 L1456.22 691.003 L1456.78 691.003 L1457.34 691.003 L1457.9 691.003 L1458.46 691.003 L1459.02 691.003 L1459.58 691.003 L1460.14 691.003 L1460.7 691.003 L1461.25 691.003 L1461.81 691.003 L1462.37 691.003 L1462.93 691.003 L1463.49 691.003 L1464.05 691.003 L1464.61 691.003 L1465.17 691.003 L1465.73 691.003 L1466.29 691.003 L1466.85 691.003 L1467.41 691.003 L1467.97 691.003 L1468.52 691.003 L1469.08 691.003 L1469.64 691.003 L1470.2 691.003 L1470.76 691.003 L1471.32 691.003 L1471.88 691.003 L1472.44 691.003 L1473 691.003 L1473.56 691.003 L1474.12 691.003 L1474.68 691.003 L1475.24 691.003 L1475.79 691.003 L1476.35 691.003 L1476.91 691.003 L1477.47 691.003 L1478.03 691.003 L1478.59 691.003 L1479.15 691.003 L1479.71 691.003 L1480.27 691.003 L1480.83 691.003 L1481.39 691.003 L1481.95 691.003 L1482.51 691.003 L1483.07 691.003 L1483.62 691.003 L1484.18 691.003 L1484.74 691.003 L1485.3 691.003 L1485.86 691.003 L1486.42 691.003 L1486.98 691.003 L1487.54 691.003 L1488.1 691.003 L1488.66 691.003 L1489.22 691.003 L1489.78 691.003 L1490.34 691.003 L1490.89 691.003 L1491.45 691.003 L1492.01 691.003 L1492.57 691.003 L1493.13 691.003 L1493.69 691.003 L1494.25 691.003 L1494.81 691.003 L1495.37 691.003 L1495.93 691.003 L1496.49 691.003 L1497.05 691.003 L1497.61 691.003 L1498.16 691.003 L1498.72 691.003 L1499.28 691.003 L1499.84 691.003 L1500.4 691.003 L1500.96 691.003 L1501.52 691.003 L1502.08 691.003 L1502.64 691.003 L1503.2 691.003 L1503.76 691.003 L1504.32 691.003 L1504.88 691.003 L1505.44 691.003 L1505.99 691.003 L1506.55 691.003 L1507.11 691.003 L1507.67 691.003 L1508.23 691.003 L1508.79 691.003 L1509.35 691.003 L1509.91 691.003 L1510.47 691.003 L1511.03 691.003 L1511.59 691.003 L1512.15 691.003 L1512.71 691.003 L1513.26 691.003 L1513.82 691.003 L1514.38 691.003 L1514.94 691.003 L1515.5 691.003 L1516.06 691.003 L1516.62 691.003 L1517.18 691.003 L1517.74 691.003 L1518.3 691.003 L1518.86 691.003 L1519.42 691.003 L1519.98 691.003 L1520.53 691.003 L1521.09 691.003 L1521.65 691.003 L1522.21 691.003 L1522.77 691.003 L1523.33 691.003 L1523.89 691.003 L1524.45 691.003 L1525.01 691.003 L1525.57 691.003 L1526.13 691.003 L1526.69 691.003 L1527.25 691.003 L1527.81 691.003 L1528.36 691.003 L1528.92 691.003 L1529.48 691.003 L1530.04 691.003 L1530.6 691.003 L1531.16 691.003 L1531.72 691.003 L1532.28 691.003 L1532.84 691.003 L1533.4 691.003 L1533.96 691.003 L1534.52 691.003 L1535.08 691.003 L1535.63 691.003 L1536.19 691.003 L1536.75 691.003 L1537.31 691.003 L1537.87 691.003 L1538.43 691.003 L1538.99 691.003 L1539.55 691.003 L1540.11 691.003 L1540.67 691.003 L1541.23 691.003 L1541.79 691.003 L1542.35 691.003 L1542.9 691.003 L1543.46 691.003 L1544.02 691.003 L1544.58 691.003 L1545.14 691.003 L1545.7 691.003 L1546.26 691.003 L1546.82 691.003 L1547.38 691.003 L1547.94 691.003 L1548.5 691.003 L1549.06 691.003 L1549.62 691.003 L1550.18 691.003 L1550.73 691.003 L1551.29 691.003 L1551.85 691.003 L1552.41 691.003 L1552.97 691.003 L1553.53 691.003 L1554.09 691.003 L1554.65 691.003 L1555.21 691.003 L1555.77 691.003 L1556.33 691.003 L1556.89 691.003 L1557.45 691.003 L1558 691.003 L1558.56 691.003 L1559.12 691.003 L1559.68 691.003 L1560.24 691.003 L1560.8 691.003 L1561.36 691.003 L1561.92 691.003 L1562.48 691.003 L1563.04 691.003 L1563.6 691.003 L1564.16 691.003 L1564.72 691.003 L1565.28 691.003 L1565.83 691.003 L1566.39 691.003 L1566.95 691.003 L1567.51 691.003 L1568.07 691.003 L1568.63 691.003 L1569.19 691.003 L1569.75 691.003 L1570.31 691.003 L1570.87 691.003 L1571.43 691.003 L1571.99 691.003 L1572.55 691.003 L1573.1 691.003 L1573.66 691.003 L1574.22 691.003 L1574.78 691.003 L1575.34 691.003 L1575.9 691.003 L1576.46 691.003 L1577.02 691.003 L1577.58 691.003 L1578.14 691.003 L1578.7 691.003 L1579.26 691.003 L1579.82 691.003 L1580.37 691.003 L1580.93 691.003 L1581.49 691.003 L1582.05 691.003 L1582.61 691.003 L1583.17 691.003 L1583.73 691.003 L1584.29 691.003 L1584.85 691.003 L1585.41 691.003 L1585.97 691.003 L1586.53 691.003 L1587.09 691.003 L1587.65 691.003 L1588.2 691.003 L1588.76 691.003 L1589.32 691.003 L1589.88 691.003 L1590.44 691.003 L1591 691.003 L1591.56 691.003 L1592.12 691.003 L1592.68 691.003 L1593.24 691.003 L1593.8 691.003 L1594.36 691.003 L1594.92 691.003 L1595.47 691.003 L1596.03 691.003 L1596.59 691.003 L1597.15 691.003 L1597.71 691.003 L1598.27 691.003 L1598.83 691.003 L1599.39 691.003 L1599.95 691.003 L1600.51 691.003 L1601.07 691.003 L1601.63 691.003 L1602.19 691.003 L1602.74 691.003 L1603.3 691.003 L1603.86 691.003 L1604.42 691.003 L1604.98 691.003 L1605.54 691.003 L1606.1 691.003 L1606.66 691.003 L1607.22 691.003 L1607.78 691.003 L1608.34 691.003 L1608.9 691.003 L1609.46 691.003 L1610.02 691.003 L1610.57 691.003 L1611.13 691.003 L1611.69 691.003 L1612.25 691.003 L1612.81 691.003 L1613.37 691.003 L1613.93 691.003 L1614.49 691.003 L1615.05 691.003 L1615.61 691.003 L1616.17 691.003 L1616.73 691.003 L1617.29 691.003 L1617.84 691.003 L1618.4 691.003 L1618.96 691.003 L1619.52 691.003 L1620.08 691.003 L1620.64 691.003 L1621.2 691.003 L1621.76 691.003 L1622.32 691.003 L1622.88 691.003 L1623.44 691.003 L1624 691.003 L1624.56 691.003 L1625.11 691.003 L1625.67 691.003 L1626.23 691.003 L1626.79 691.003 L1627.35 691.003 L1627.91 691.003 L1628.47 691.003 L1629.03 691.003 L1629.59 691.003 L1630.15 691.003 L1630.71 691.003 L1631.27 691.003 L1631.83 691.003 L1632.39 691.003 L1632.94 691.003 L1633.5 691.003 L1634.06 691.003 L1634.62 691.003 L1635.18 691.003 L1635.74 691.003 L1636.3 691.003 L1636.86 691.003 L1637.42 691.003 L1637.98 691.003 L1638.54 691.003 L1639.1 691.003 L1639.66 691.003 L1640.21 691.003 L1640.77 691.003 L1641.33 691.003 L1641.89 691.003 L1642.45 691.003 L1643.01 691.003 L1643.57 691.003 L1644.13 691.003 L1644.69 691.003 L1645.25 691.003 L1645.81 691.003 L1646.37 691.003 L1646.93 691.003 L1647.48 691.003 L1648.04 691.003 L1648.6 691.003 L1649.16 691.003 L1649.72 691.003 L1650.28 691.003 L1650.84 691.003 L1651.4 691.003 L1651.96 691.003 L1652.52 691.003 L1653.08 691.003 L1653.64 691.003 L1654.2 691.003 L1654.76 691.003 L1655.31 691.003 L1655.87 691.003 L1656.43 691.003 L1656.99 691.003 L1657.55 691.003 L1658.11 691.003 L1658.67 691.003 L1659.23 691.003 L1659.79 691.003 L1660.35 691.003 L1660.91 691.003 L1661.47 691.003 L1662.03 691.003 L1662.58 691.003 L1663.14 691.003 L1663.7 691.003 L1664.26 691.003 L1664.82 691.003 L1665.38 691.003 L1665.94 691.003 L1666.5 691.003 L1667.06 691.003 L1667.62 691.003 L1668.18 691.003 L1668.74 691.003 L1669.3 691.003 L1669.85 691.003 L1670.41 691.003 L1670.97 691.003 L1671.53 691.003 L1672.09 691.003 L1672.65 691.003 L1673.21 691.003 L1673.77 691.003 L1674.33 691.003 L1674.89 691.003 L1675.45 691.003 L1676.01 691.003 L1676.57 691.003 L1677.13 691.003 L1677.68 691.003 L1678.24 691.003 L1678.8 691.003 L1679.36 691.003 L1679.92 691.003 L1680.48 691.003 L1681.04 691.003 L1681.6 691.003 L1682.16 691.003 L1682.72 691.003 L1683.28 691.003 L1683.84 691.003 L1684.4 691.003 L1684.95 691.003 L1685.51 691.003 L1686.07 691.003 L1686.63 691.003 L1687.19 691.003 L1687.75 691.003 L1688.31 691.003 L1688.87 691.003 L1689.43 691.003 L1689.99 691.003 L1690.55 691.003 L1691.11 691.003 L1691.67 691.003 L1692.23 691.003 L1692.78 691.003 L1693.34 691.003 L1693.9 691.003 L1694.46 691.003 L1695.02 691.003 L1695.58 691.003 L1696.14 691.003 L1696.7 691.003 L1697.26 691.003 L1697.82 691.003 L1698.38 691.003 L1698.94 691.003 L1699.5 691.003 L1700.05 691.003 L1700.61 691.003 L1701.17 691.003 L1701.73 691.003 L1702.29 691.003 L1702.85 691.003 L1703.41 691.003 L1703.97 691.003 L1704.53 691.003 L1705.09 691.003 L1705.65 691.003 L1706.21 691.003 L1706.77 691.003 L1707.32 691.003 L1707.88 691.003 L1708.44 691.003 L1709 691.003 L1709.56 691.003 L1710.12 691.003 L1710.68 691.003 L1711.24 691.003 L1711.8 691.003 L1712.36 691.003 L1712.92 691.003 L1713.48 691.003 L1714.04 691.003 L1714.6 691.003 L1715.15 691.003 L1715.71 691.003 L1716.27 691.003 L1716.83 691.003 L1717.39 691.003 L1717.95 691.003 L1718.51 691.003 L1719.07 691.003 L1719.63 691.003 L1720.19 691.003 L1720.75 691.003 L1721.31 691.003 L1721.87 691.003 L1722.42 691.003 L1722.98 691.003 L1723.54 691.003 L1724.1 691.003 L1724.66 691.003 L1725.22 691.003 L1725.78 691.003 L1726.34 691.003 L1726.9 691.003 L1727.46 691.003 L1728.02 691.003 L1728.58 691.003 L1729.14 691.003 L1729.69 691.003 L1730.25 691.003 L1730.81 691.003 L1731.37 691.003 L1731.93 691.003 L1732.49 691.003 L1733.05 691.003 L1733.61 691.003 L1734.17 691.003 L1734.73 691.003 L1735.29 691.003 L1735.85 691.003 L1736.41 691.003 L1736.97 691.003 L1737.52 691.003 L1738.08 691.003 L1738.64 691.003 L1739.2 691.003 L1739.76 691.003 L1740.32 691.003 L1740.88 691.003 L1741.44 691.003 L1742 691.003 L1742.56 691.003 L1743.12 691.003 L1743.68 691.003 L1744.24 691.003 L1744.79 691.003 L1745.35 691.003 L1745.91 691.003 L1746.47 691.003 L1747.03 691.003 L1747.59 691.003 L1748.15 691.003 L1748.71 691.003 L1749.27 691.003 L1749.83 691.003 L1750.39 691.003 L1750.95 691.003 L1751.51 691.003 L1752.06 691.003 L1752.62 691.003 L1753.18 691.003 L1753.74 691.003 L1754.3 691.003 L1754.86 691.003 L1755.42 691.003 L1755.98 691.003 L1756.54 691.003 L1757.1 691.003 L1757.66 691.003 L1758.22 691.003 L1758.78 691.003 L1759.34 691.003 L1759.89 691.003 L1760.45 691.003 L1761.01 691.003 L1761.57 691.003 L1762.13 691.003 L1762.69 691.003 L1763.25 691.003 L1763.81 691.003 L1764.37 691.003 L1764.93 691.003 L1765.49 691.003 L1766.05 691.003 L1766.61 691.003 L1767.16 691.003 L1767.72 691.003 L1768.28 691.003 L1768.84 691.003 L1769.4 691.003 L1769.96 691.003 L1770.52 691.003 L1771.08 691.003 L1771.64 691.003 L1772.2 691.003 L1772.76 691.003 L1773.32 691.003 L1773.88 691.003 L1774.43 691.003 L1774.99 691.003 L1775.55 691.003 L1776.11 691.003 L1776.67 691.003 L1777.23 691.003 L1777.79 691.003 L1778.35 691.003 L1778.91 691.003 L1779.47 691.003 L1780.03 691.003 L1780.59 691.003 L1781.15 691.003 L1781.71 691.003 L1782.26 691.003 L1782.82 691.003 L1783.38 691.003 L1783.94 691.003 L1784.5 691.003 L1785.06 691.003 L1785.62 691.003 L1786.18 691.003 L1786.74 691.003 L1787.3 691.003 L1787.86 691.003 L1788.42 691.003 L1788.98 691.003 L1789.53 691.003 L1790.09 691.003 L1790.65 691.003 L1791.21 691.003 L1791.77 691.003 L1792.33 691.003 L1792.89 691.003 L1793.45 691.003 L1794.01 691.003 L1794.57 691.003 L1795.13 691.003 L1795.69 691.003 L1796.25 691.003 L1796.8 691.003 L1797.36 691.003 L1797.92 691.003 L1798.48 691.003 L1799.04 691.003 L1799.6 691.003 L1800.16 691.003 L1800.72 691.003 L1801.28 691.003 L1801.84 691.003 L1802.4 691.003 L1802.96 691.003 L1803.52 691.003 L1804.08 691.003 L1804.63 691.003 L1805.19 691.003 L1805.75 691.003 L1806.31 691.003 L1806.87 691.003 L1807.43 691.003 L1807.99 691.003 L1808.55 691.003 L1809.11 691.003 L1809.67 691.003 L1810.23 691.003 L1810.79 691.003 L1811.35 691.003 L1811.9 691.003 L1812.46 691.003 L1813.02 691.003 L1813.58 691.003 L1814.14 691.003 L1814.7 691.003 L1815.26 691.003 L1815.82 691.003 L1816.38 691.003 L1816.94 691.003 L1817.5 691.003 L1818.06 691.003 L1818.62 691.003 L1819.18 691.003 L1819.73 691.003 L1820.29 691.003 L1820.85 691.003 L1821.41 691.003 L1821.97 691.003 L1822.53 691.003 L1823.09 691.003 L1823.65 691.003 L1824.21 691.003 L1824.77 691.003 L1825.33 691.003 L1825.89 691.003 L1826.45 691.003 L1827 691.003 L1827.56 691.003 L1828.12 691.003 L1828.68 691.003 L1829.24 691.003 L1829.8 691.003 L1830.36 691.003 L1830.92 691.003 L1831.48 691.003 L1832.04 691.003 L1832.6 691.003 L1833.16 691.003 L1833.72 691.003 L1834.27 691.003 L1834.83 691.003 L1835.39 691.003 L1835.95 691.003 L1836.51 691.003 L1837.07 691.003 L1837.63 691.003 L1838.19 691.003 L1838.19 680.842 L1837.63 680.842 L1837.07 680.842 L1836.51 680.842 L1835.95 680.842 L1835.39 680.842 L1834.83 680.842 L1834.27 680.842 L1833.72 680.842 L1833.16 680.842 L1832.6 680.842 L1832.04 680.842 L1831.48 680.842 L1830.92 680.842 L1830.36 680.842 L1829.8 680.842 L1829.24 680.842 L1828.68 680.842 L1828.12 680.842 L1827.56 680.842 L1827 680.842 L1826.45 680.842 L1825.89 680.842 L1825.33 680.842 L1824.77 680.842 L1824.21 680.842 L1823.65 680.842 L1823.09 680.842 L1822.53 680.842 L1821.97 680.842 L1821.41 680.842 L1820.85 680.842 L1820.29 680.842 L1819.73 680.842 L1819.18 680.842 L1818.62 680.842 L1818.06 680.842 L1817.5 680.842 L1816.94 680.842 L1816.38 680.842 L1815.82 680.842 L1815.26 680.842 L1814.7 680.842 L1814.14 680.842 L1813.58 680.842 L1813.02 680.842 L1812.46 680.842 L1811.9 680.842 L1811.35 680.842 L1810.79 680.842 L1810.23 680.842 L1809.67 680.842 L1809.11 680.842 L1808.55 680.842 L1807.99 680.842 L1807.43 680.842 L1806.87 680.842 L1806.31 680.842 L1805.75 680.842 L1805.19 680.842 L1804.63 680.842 L1804.08 680.842 L1803.52 680.842 L1802.96 680.842 L1802.4 680.842 L1801.84 680.842 L1801.28 680.842 L1800.72 680.842 L1800.16 680.842 L1799.6 680.842 L1799.04 680.842 L1798.48 680.842 L1797.92 680.842 L1797.36 680.842 L1796.8 680.842 L1796.25 680.842 L1795.69 680.842 L1795.13 680.842 L1794.57 680.842 L1794.01 680.842 L1793.45 680.842 L1792.89 680.842 L1792.33 680.842 L1791.77 680.842 L1791.21 680.842 L1790.65 680.842 L1790.09 680.842 L1789.53 680.842 L1788.98 680.842 L1788.42 680.842 L1787.86 680.842 L1787.3 680.842 L1786.74 680.842 L1786.18 680.842 L1785.62 680.842 L1785.06 680.842 L1784.5 680.842 L1783.94 680.842 L1783.38 680.842 L1782.82 680.842 L1782.26 680.842 L1781.71 680.842 L1781.15 680.842 L1780.59 680.842 L1780.03 680.842 L1779.47 680.842 L1778.91 680.842 L1778.35 680.842 L1777.79 680.842 L1777.23 680.842 L1776.67 680.842 L1776.11 680.842 L1775.55 680.842 L1774.99 680.842 L1774.43 680.842 L1773.88 680.842 L1773.32 680.842 L1772.76 680.842 L1772.2 680.842 L1771.64 680.842 L1771.08 680.842 L1770.52 680.842 L1769.96 680.842 L1769.4 680.842 L1768.84 680.842 L1768.28 680.842 L1767.72 680.842 L1767.16 680.842 L1766.61 680.842 L1766.05 680.842 L1765.49 680.842 L1764.93 680.842 L1764.37 680.842 L1763.81 680.842 L1763.25 680.842 L1762.69 680.842 L1762.13 680.842 L1761.57 680.842 L1761.01 680.842 L1760.45 680.842 L1759.89 680.842 L1759.34 680.842 L1758.78 680.842 L1758.22 680.842 L1757.66 680.842 L1757.1 680.842 L1756.54 680.842 L1755.98 680.842 L1755.42 680.842 L1754.86 680.842 L1754.3 680.842 L1753.74 680.842 L1753.18 680.842 L1752.62 680.842 L1752.06 680.842 L1751.51 680.842 L1750.95 680.842 L1750.39 680.842 L1749.83 680.842 L1749.27 680.842 L1748.71 680.842 L1748.15 680.842 L1747.59 680.842 L1747.03 680.842 L1746.47 680.842 L1745.91 680.842 L1745.35 680.842 L1744.79 680.842 L1744.24 680.842 L1743.68 680.842 L1743.12 680.842 L1742.56 680.842 L1742 680.842 L1741.44 680.842 L1740.88 680.842 L1740.32 680.842 L1739.76 680.842 L1739.2 680.842 L1738.64 680.842 L1738.08 680.842 L1737.52 680.842 L1736.97 680.842 L1736.41 680.842 L1735.85 680.842 L1735.29 680.842 L1734.73 680.842 L1734.17 680.842 L1733.61 680.842 L1733.05 680.842 L1732.49 680.842 L1731.93 680.842 L1731.37 680.842 L1730.81 680.842 L1730.25 680.842 L1729.69 680.842 L1729.14 680.842 L1728.58 680.842 L1728.02 680.842 L1727.46 680.842 L1726.9 680.842 L1726.34 680.842 L1725.78 680.842 L1725.22 680.842 L1724.66 680.842 L1724.1 680.842 L1723.54 680.842 L1722.98 680.842 L1722.42 680.842 L1721.87 680.842 L1721.31 680.842 L1720.75 680.842 L1720.19 680.842 L1719.63 680.842 L1719.07 680.842 L1718.51 680.842 L1717.95 680.842 L1717.39 680.842 L1716.83 680.842 L1716.27 680.842 L1715.71 680.842 L1715.15 680.842 L1714.6 680.842 L1714.04 680.842 L1713.48 680.842 L1712.92 680.842 L1712.36 680.842 L1711.8 680.842 L1711.24 680.842 L1710.68 680.842 L1710.12 680.842 L1709.56 680.842 L1709 680.842 L1708.44 680.842 L1707.88 680.842 L1707.32 680.842 L1706.77 680.842 L1706.21 680.842 L1705.65 680.842 L1705.09 680.842 L1704.53 680.842 L1703.97 680.842 L1703.41 680.842 L1702.85 680.842 L1702.29 680.842 L1701.73 680.842 L1701.17 680.842 L1700.61 680.842 L1700.05 680.842 L1699.5 680.842 L1698.94 680.842 L1698.38 680.842 L1697.82 680.842 L1697.26 680.842 L1696.7 680.842 L1696.14 680.842 L1695.58 680.842 L1695.02 680.842 L1694.46 680.842 L1693.9 680.842 L1693.34 680.842 L1692.78 680.842 L1692.23 680.842 L1691.67 680.842 L1691.11 680.842 L1690.55 680.842 L1689.99 680.842 L1689.43 680.842 L1688.87 680.842 L1688.31 680.842 L1687.75 680.842 L1687.19 680.842 L1686.63 680.842 L1686.07 680.842 L1685.51 680.842 L1684.95 680.842 L1684.4 680.842 L1683.84 680.842 L1683.28 680.842 L1682.72 680.842 L1682.16 680.842 L1681.6 680.842 L1681.04 680.842 L1680.48 680.842 L1679.92 680.842 L1679.36 680.842 L1678.8 680.842 L1678.24 680.842 L1677.68 680.842 L1677.13 680.842 L1676.57 680.842 L1676.01 680.842 L1675.45 680.842 L1674.89 680.842 L1674.33 680.842 L1673.77 680.842 L1673.21 680.842 L1672.65 680.842 L1672.09 680.842 L1671.53 680.842 L1670.97 680.842 L1670.41 680.842 L1669.85 680.842 L1669.3 680.842 L1668.74 680.842 L1668.18 680.842 L1667.62 680.842 L1667.06 680.842 L1666.5 680.842 L1665.94 680.842 L1665.38 680.842 L1664.82 680.842 L1664.26 680.842 L1663.7 680.842 L1663.14 680.842 L1662.58 680.842 L1662.03 680.842 L1661.47 680.842 L1660.91 680.842 L1660.35 680.842 L1659.79 680.842 L1659.23 680.842 L1658.67 680.842 L1658.11 680.842 L1657.55 680.842 L1656.99 680.842 L1656.43 680.842 L1655.87 680.842 L1655.31 680.842 L1654.76 680.842 L1654.2 680.842 L1653.64 680.842 L1653.08 680.842 L1652.52 680.842 L1651.96 680.842 L1651.4 680.842 L1650.84 680.842 L1650.28 680.842 L1649.72 680.842 L1649.16 680.842 L1648.6 680.842 L1648.04 680.842 L1647.48 680.842 L1646.93 680.842 L1646.37 680.842 L1645.81 680.842 L1645.25 680.842 L1644.69 680.842 L1644.13 680.842 L1643.57 680.842 L1643.01 680.842 L1642.45 680.842 L1641.89 680.842 L1641.33 680.842 L1640.77 680.842 L1640.21 680.842 L1639.66 680.842 L1639.1 680.842 L1638.54 680.842 L1637.98 680.842 L1637.42 680.842 L1636.86 680.842 L1636.3 680.842 L1635.74 680.842 L1635.18 680.842 L1634.62 680.842 L1634.06 680.842 L1633.5 680.842 L1632.94 680.842 L1632.39 680.842 L1631.83 680.842 L1631.27 680.842 L1630.71 680.842 L1630.15 680.842 L1629.59 680.842 L1629.03 680.842 L1628.47 680.842 L1627.91 680.842 L1627.35 680.842 L1626.79 680.842 L1626.23 680.842 L1625.67 680.842 L1625.11 680.842 L1624.56 680.842 L1624 680.842 L1623.44 680.842 L1622.88 680.842 L1622.32 680.842 L1621.76 680.842 L1621.2 680.842 L1620.64 680.842 L1620.08 680.842 L1619.52 680.842 L1618.96 680.842 L1618.4 680.842 L1617.84 680.842 L1617.29 680.842 L1616.73 680.842 L1616.17 680.842 L1615.61 680.842 L1615.05 680.842 L1614.49 680.842 L1613.93 680.842 L1613.37 680.842 L1612.81 680.842 L1612.25 680.842 L1611.69 680.842 L1611.13 680.842 L1610.57 680.842 L1610.02 680.842 L1609.46 680.842 L1608.9 680.842 L1608.34 680.842 L1607.78 680.842 L1607.22 680.842 L1606.66 680.842 L1606.1 680.842 L1605.54 680.842 L1604.98 680.842 L1604.42 680.842 L1603.86 680.842 L1603.3 680.842 L1602.74 680.842 L1602.19 680.842 L1601.63 680.842 L1601.07 680.842 L1600.51 680.842 L1599.95 680.842 L1599.39 680.842 L1598.83 680.842 L1598.27 680.842 L1597.71 680.842 L1597.15 680.842 L1596.59 680.842 L1596.03 680.842 L1595.47 680.842 L1594.92 680.842 L1594.36 680.842 L1593.8 680.842 L1593.24 680.842 L1592.68 680.842 L1592.12 680.842 L1591.56 680.842 L1591 680.842 L1590.44 680.842 L1589.88 680.842 L1589.32 680.842 L1588.76 680.842 L1588.2 680.842 L1587.65 680.842 L1587.09 680.842 L1586.53 680.842 L1585.97 680.842 L1585.41 680.842 L1584.85 680.842 L1584.29 680.842 L1583.73 680.842 L1583.17 680.842 L1582.61 680.842 L1582.05 680.842 L1581.49 680.842 L1580.93 680.842 L1580.37 680.842 L1579.82 680.842 L1579.26 680.842 L1578.7 680.842 L1578.14 680.842 L1577.58 680.842 L1577.02 680.842 L1576.46 680.842 L1575.9 680.842 L1575.34 680.842 L1574.78 680.842 L1574.22 680.842 L1573.66 680.842 L1573.1 680.842 L1572.55 680.842 L1571.99 680.842 L1571.43 680.842 L1570.87 680.842 L1570.31 680.842 L1569.75 680.842 L1569.19 680.842 L1568.63 680.842 L1568.07 680.842 L1567.51 680.842 L1566.95 680.842 L1566.39 680.842 L1565.83 680.842 L1565.28 680.842 L1564.72 680.842 L1564.16 680.842 L1563.6 680.842 L1563.04 680.842 L1562.48 680.842 L1561.92 680.842 L1561.36 680.842 L1560.8 680.842 L1560.24 680.842 L1559.68 680.842 L1559.12 680.842 L1558.56 680.842 L1558 680.842 L1557.45 680.842 L1556.89 680.842 L1556.33 680.842 L1555.77 680.842 L1555.21 680.842 L1554.65 680.842 L1554.09 680.842 L1553.53 680.842 L1552.97 680.842 L1552.41 680.842 L1551.85 680.842 L1551.29 680.842 L1550.73 680.842 L1550.18 680.842 L1549.62 680.842 L1549.06 680.842 L1548.5 680.842 L1547.94 680.842 L1547.38 680.842 L1546.82 680.842 L1546.26 680.842 L1545.7 680.842 L1545.14 680.842 L1544.58 680.842 L1544.02 680.842 L1543.46 680.842 L1542.9 680.842 L1542.35 680.842 L1541.79 680.842 L1541.23 680.842 L1540.67 680.842 L1540.11 680.842 L1539.55 680.842 L1538.99 680.842 L1538.43 680.842 L1537.87 680.842 L1537.31 680.842 L1536.75 680.842 L1536.19 680.842 L1535.63 680.842 L1535.08 680.842 L1534.52 680.842 L1533.96 680.842 L1533.4 680.842 L1532.84 680.842 L1532.28 680.842 L1531.72 680.842 L1531.16 680.842 L1530.6 680.842 L1530.04 680.842 L1529.48 680.842 L1528.92 680.842 L1528.36 680.842 L1527.81 680.842 L1527.25 680.842 L1526.69 680.842 L1526.13 680.842 L1525.57 680.842 L1525.01 680.842 L1524.45 680.842 L1523.89 680.842 L1523.33 680.842 L1522.77 680.842 L1522.21 680.842 L1521.65 680.842 L1521.09 680.842 L1520.53 680.842 L1519.98 680.842 L1519.42 680.842 L1518.86 680.842 L1518.3 680.842 L1517.74 680.842 L1517.18 680.842 L1516.62 680.842 L1516.06 680.842 L1515.5 680.842 L1514.94 680.842 L1514.38 680.842 L1513.82 680.842 L1513.26 680.842 L1512.71 680.842 L1512.15 680.842 L1511.59 680.842 L1511.03 680.842 L1510.47 680.842 L1509.91 680.842 L1509.35 680.842 L1508.79 680.842 L1508.23 680.842 L1507.67 680.842 L1507.11 680.842 L1506.55 680.842 L1505.99 680.842 L1505.44 680.842 L1504.88 680.842 L1504.32 680.842 L1503.76 680.842 L1503.2 680.842 L1502.64 680.842 L1502.08 680.842 L1501.52 680.842 L1500.96 680.842 L1500.4 680.842 L1499.84 680.842 L1499.28 680.842 L1498.72 680.842 L1498.16 680.842 L1497.61 680.842 L1497.05 680.842 L1496.49 680.842 L1495.93 680.842 L1495.37 680.842 L1494.81 680.842 L1494.25 680.842 L1493.69 680.842 L1493.13 680.842 L1492.57 680.842 L1492.01 680.842 L1491.45 680.842 L1490.89 680.842 L1490.34 680.842 L1489.78 680.842 L1489.22 680.842 L1488.66 680.842 L1488.1 680.842 L1487.54 680.842 L1486.98 680.842 L1486.42 680.842 L1485.86 680.842 L1485.3 680.842 L1484.74 680.842 L1484.18 680.842 L1483.62 680.842 L1483.07 680.842 L1482.51 680.842 L1481.95 680.842 L1481.39 680.842 L1480.83 680.842 L1480.27 680.842 L1479.71 680.842 L1479.15 680.842 L1478.59 680.842 L1478.03 680.842 L1477.47 680.842 L1476.91 680.842 L1476.35 680.842 L1475.79 680.842 L1475.24 680.842 L1474.68 680.842 L1474.12 680.842 L1473.56 680.842 L1473 680.842 L1472.44 680.842 L1471.88 680.842 L1471.32 680.842 L1470.76 680.842 L1470.2 680.842 L1469.64 680.842 L1469.08 680.842 L1468.52 680.842 L1467.97 680.842 L1467.41 680.842 L1466.85 680.842 L1466.29 680.842 L1465.73 680.842 L1465.17 680.842 L1464.61 680.842 L1464.05 680.842 L1463.49 680.842 L1462.93 680.842 L1462.37 680.842 L1461.81 680.842 L1461.25 680.842 L1460.7 680.842 L1460.14 680.842 L1459.58 680.842 L1459.02 680.842 L1458.46 680.842 L1457.9 680.842 L1457.34 680.842 L1456.78 680.842 L1456.22 680.842 L1455.66 680.842 L1455.1 680.842 L1454.54 680.842 L1453.98 680.842 L1453.42 680.842 L1452.87 680.842 L1452.31 680.842 L1451.75 680.842 L1451.19 680.842 L1450.63 680.842 L1450.07 680.842 L1449.51 680.842 L1448.95 680.842 L1448.39 680.842 L1447.83 680.842 L1447.27 680.842 L1446.71 680.842 L1446.15 680.842 L1445.6 680.842 L1445.04 680.842 L1444.48 680.842 L1443.92 680.842 L1443.36 680.842 L1442.8 680.842 L1442.24 680.842 L1441.68 680.842 L1441.12 680.842 L1440.56 680.842 L1440 680.842 L1439.44 680.842 L1438.88 680.842 L1438.33 680.842 L1437.77 680.842 L1437.21 680.842 L1436.65 680.842 L1436.09 680.842 L1435.53 680.842 L1434.97 680.842 L1434.41 680.842 L1433.85 680.842 L1433.29 680.842 L1432.73 680.842 L1432.17 680.842 L1431.61 680.842 L1431.05 680.842 L1430.5 680.842 L1429.94 680.842 L1429.38 680.842 L1428.82 680.842 L1428.26 680.842 L1427.7 680.842 L1427.14 680.842 L1426.58 680.842 L1426.02 680.842 L1425.46 680.842 L1424.9 680.842 L1424.34 680.842 L1423.78 680.842 L1423.23 680.842 L1422.67 680.842 L1422.11 680.842 L1421.55 680.842 L1420.99 680.842 L1420.43 680.842 L1419.87 680.842 L1419.31 680.842 L1418.75 680.842 L1418.19 680.842 L1417.63 680.842 L1417.07 680.842 L1416.51 680.842 L1415.95 680.842 L1415.4 680.842 L1414.84 680.842 L1414.28 680.842 L1413.72 680.842 L1413.16 680.842 L1412.6 680.842 L1412.04 680.842 L1411.48 680.842 L1410.92 680.842 L1410.36 680.842 L1409.8 680.842 L1409.24 680.842 L1408.68 680.842 L1408.13 680.842 L1407.57 680.842 L1407.01 680.842 L1406.45 680.842 L1405.89 680.842 L1405.33 680.842 L1404.77 680.842 L1404.21 680.842 L1403.65 680.842 L1403.09 680.842 L1402.53 680.842 L1401.97 680.842 L1401.41 680.842 L1400.86 680.842 L1400.3 680.842 L1399.74 680.842 L1399.18 680.842 L1398.62 680.842 L1398.06 680.842 L1397.5 680.842 L1396.94 680.842 L1396.38 680.842 L1395.82 680.842 L1395.26 680.842 L1394.7 680.842 L1394.14 680.842 L1393.58 680.842 L1393.03 680.842 L1392.47 680.842 L1391.91 680.842 L1391.35 680.842 L1390.79 680.842 L1390.23 680.842 L1389.67 680.842 L1389.11 680.842 L1388.55 680.842 L1387.99 680.842 L1387.43 680.842 L1386.87 680.842 L1386.31 680.842 L1385.76 680.842 L1385.2 680.842 L1384.64 680.842 L1384.08 680.842 L1383.52 680.842 L1382.96 680.842 L1382.4 680.842 L1381.84 680.842 L1381.28 680.842 L1380.72 680.842 L1380.16 680.842 L1379.6 680.842 L1379.04 680.842 L1378.49 680.842 L1377.93 680.842 L1377.37 680.842 L1376.81 680.842 L1376.25 680.842 L1375.69 680.842 L1375.13 680.842 L1374.57 680.842 L1374.01 680.842 L1373.45 680.842 L1372.89 680.842 L1372.33 680.842 L1371.77 680.842 L1371.21 680.842 L1370.66 680.842 L1370.1 680.842 L1369.54 680.842 L1368.98 680.842 L1368.42 680.842 L1367.86 680.842 L1367.3 680.842 L1366.74 680.842 L1366.18 680.842 L1365.62 680.842 L1365.06 680.842 L1364.5 680.842 L1363.94 680.842 L1363.39 680.842 L1362.83 680.842 L1362.27 680.842 L1361.71 680.842 L1361.15 680.842 L1360.59 680.842 L1360.03 680.842 L1359.47 680.842 L1358.91 680.842 L1358.35 680.842 L1357.79 680.842 L1357.23 680.842 L1356.67 680.842 L1356.12 680.842 L1355.56 680.842 L1355 680.842 L1354.44 680.842 L1353.88 680.842 L1353.32 680.842 L1352.76 680.842 L1352.2 680.842 L1351.64 680.842 L1351.08 680.842 L1350.52 680.842 L1349.96 680.842 L1349.4 680.842 L1348.84 680.842 L1348.29 680.842 L1347.73 680.842 L1347.17 680.842 L1346.61 680.842 L1346.05 680.842 L1345.49 680.842 L1344.93 680.842 L1344.37 680.842 L1343.81 680.842 L1343.25 680.842 L1342.69 680.842 L1342.13 680.842 L1341.57 680.842 L1341.02 680.842 L1340.46 680.842 L1339.9 680.842 L1339.34 680.842 L1338.78 680.842 L1338.22 680.842 L1337.66 680.842 L1337.1 680.842 L1336.54 680.842 L1335.98 680.842 L1335.42 680.842 L1334.86 680.842 L1334.3 680.842 L1333.75 680.842 L1333.19 680.842 L1332.63 680.842 L1332.07 680.842 L1331.51 680.842 L1330.95 680.842 L1330.39 680.842 L1329.83 680.842 L1329.27 680.842 L1328.71 680.842 L1328.15 680.842 L1327.59 680.842 L1327.03 680.842 L1326.47 680.842 L1325.92 680.842 L1325.36 680.842 L1324.8 680.842 L1324.24 680.842 L1323.68 680.842 L1323.12 680.842 L1322.56 680.842 L1322 680.842 L1321.44 680.842 L1320.88 680.842 L1320.32 680.842 L1319.76 680.842 L1319.2 680.842 L1318.65 680.842 L1318.09 680.842 L1317.53 680.842 L1316.97 680.842 L1316.41 680.842 L1315.85 680.842 L1315.29 680.842 L1314.73 680.842 L1314.17 680.842 L1313.61 680.842 L1313.05 680.842 L1312.49 680.842 L1311.93 680.842 L1311.38 680.842 L1310.82 680.842 L1310.26 680.842 L1309.7 680.842 L1309.14 680.842 L1308.58 680.842 L1308.02 680.842 L1307.46 680.842 L1306.9 680.842 L1306.34 680.842 L1305.78 680.842 L1305.22 680.842 L1304.66 680.842 L1304.1 680.842 L1303.55 680.842 L1302.99 680.842 L1302.43 680.842 L1301.87 680.842 L1301.31 680.842 L1300.75 680.842 L1300.19 680.842 L1299.63 680.842 L1299.07 680.842 L1298.51 680.842 L1297.95 680.842 L1297.39 680.842 L1296.83 680.842 L1296.28 680.842 L1295.72 680.842 L1295.16 680.842 L1294.6 680.842 L1294.04 680.842 L1293.48 680.842 L1292.92 680.842 L1292.36 680.842 L1291.8 680.842 L1291.24 680.842 L1290.68 680.842 L1290.12 680.842 L1289.56 680.842 L1289 680.842 L1288.45 680.842 L1287.89 680.842 L1287.33 680.842 L1286.77 680.842 L1286.21 680.842 L1285.65 680.842 L1285.09 680.842 L1284.53 680.842 L1283.97 680.842 L1283.41 680.842 L1282.85 680.842 L1282.29 680.842 L1281.73 680.842 L1281.18 680.842 L1280.62 680.842 L1280.06 680.842 L1279.5 680.842 L1278.94 680.842 L1278.38 680.842 L1277.82 680.842 L1277.26 680.842 L1276.7 680.842 L1276.14 680.842 L1275.58 680.842 L1275.02 680.842 L1274.46 680.842 L1273.91 680.842 L1273.35 680.842 L1272.79 680.842 L1272.23 680.842 L1271.67 680.842 L1271.11 680.842 L1270.55 680.842 L1269.99 680.842 L1269.43 680.842 L1268.87 680.842 L1268.31 680.842 L1267.75 680.842 L1267.19 680.842 L1266.63 680.842 L1266.08 680.842 L1265.52 680.842 L1264.96 680.842 L1264.4 680.842 L1263.84 680.842 L1263.28 680.842 L1262.72 680.842 L1262.16 680.842 L1261.6 680.842 L1261.04 680.842 L1260.48 680.842 L1259.92 680.842 L1259.36 680.842 L1258.81 680.842 L1258.25 680.842 L1257.69 680.842 L1257.13 680.842 L1256.57 680.842 L1256.01 680.842 L1255.45 680.842 L1254.89 680.842 L1254.33 680.842 L1253.77 680.842 L1253.21 680.842 L1252.65 680.842 L1252.09 680.842 L1251.54 680.842 L1250.98 680.842 L1250.42 680.842 L1249.86 680.842 L1249.3 680.842 L1248.74 680.842 L1248.18 680.842 L1247.62 680.842 L1247.06 680.842 L1246.5 680.842 L1245.94 680.842 L1245.38 680.842 L1244.82 680.842 L1244.26 680.842 L1243.71 680.842 L1243.15 680.842 L1242.59 680.842 L1242.03 680.842 L1241.47 680.842 L1240.91 680.842 L1240.35 680.842 L1239.79 680.842 L1239.23 680.842 L1238.67 680.842 L1238.11 680.842 L1237.55 680.842 L1236.99 680.842 L1236.44 680.842 L1235.88 680.842 L1235.32 680.842 L1234.76 680.842 L1234.2 680.842 L1233.64 680.842 L1233.08 680.842 L1232.52 680.842 L1231.96 680.842 L1231.4 680.842 L1230.84 680.842 L1230.28 680.842 L1229.72 680.842 L1229.17 680.842 L1228.61 680.842 L1228.05 680.842 L1227.49 680.842 L1226.93 680.842 L1226.37 680.842 L1225.81 680.842 L1225.25 680.842 L1224.69 680.842 L1224.13 680.842 L1223.57 680.842 L1223.01 680.842 L1222.45 680.842 L1221.89 680.842 L1221.34 680.842 L1220.78 680.842 L1220.22 680.842 L1219.66 680.842 L1219.1 680.842 L1218.54 680.842 L1217.98 680.842 L1217.42 680.842 L1216.86 680.842 L1216.3 680.842 L1215.74 680.842 L1215.18 680.842 L1214.62 680.842 L1214.07 680.842 L1213.51 680.842 L1212.95 680.842 L1212.39 680.842 L1211.83 680.842 L1211.27 680.842 L1210.71 680.842 L1210.15 680.842 L1209.59 680.842 L1209.03 680.842 L1208.47 680.842 L1207.91 680.842 L1207.35 680.842 L1206.8 680.842 L1206.24 680.842 L1205.68 680.842 L1205.12 680.842 L1204.56 680.842 L1204 680.842 L1203.44 680.842 L1202.88 680.842 L1202.32 680.842 L1201.76 680.842 L1201.2 680.842 L1200.64 680.842 L1200.08 680.842 L1199.52 680.842 L1198.97 680.842 L1198.41 680.842 L1197.85 680.842 L1197.29 680.842 L1196.73 680.842 L1196.17 680.842 L1195.61 680.842 L1195.05 680.842 L1194.49 680.842 L1193.93 680.842 L1193.37 680.842 L1192.81 680.842 L1192.25 680.842 L1191.7 680.842 L1191.14 680.842 L1190.58 680.842 L1190.02 680.842 L1189.46 680.842 L1188.9 680.842 L1188.34 680.842 L1187.78 680.842 L1187.22 680.842 L1186.66 680.842 L1186.1 680.842 L1185.54 680.842 L1184.98 680.842 L1184.43 680.842 L1183.87 680.842 L1183.31 680.842 L1182.75 680.842 L1182.19 680.842 L1181.63 680.842 L1181.07 680.842 L1180.51 680.842 L1179.95 680.842 L1179.39 680.842 L1178.83 680.842 L1178.27 680.842 L1177.71 680.842 L1177.15 680.842 L1176.6 680.842 L1176.04 680.842 L1175.48 680.842 L1174.92 680.842 L1174.36 680.842 L1173.8 680.842 L1173.24 680.842 L1172.68 680.842 L1172.12 680.842 L1171.56 680.842 L1171 680.842 L1170.44 680.842 L1169.88 680.842 L1169.33 680.842 L1168.77 680.842 L1168.21 680.842 L1167.65 680.842 L1167.09 680.842 L1166.53 680.842 L1165.97 680.842 L1165.41 680.842 L1164.85 680.842 L1164.29 680.842 L1163.73 680.842 L1163.17 680.842 L1162.61 680.842 L1162.05 680.842 L1161.5 680.842 L1160.94 680.842 L1160.38 680.842 L1159.82 680.842 L1159.26 680.842 L1158.7 680.842 L1158.14 680.842 L1157.58 680.842 L1157.02 680.842 L1156.46 680.842 L1155.9 680.842 L1155.34 680.842 L1154.78 680.842 L1154.23 680.842 L1153.67 680.842 L1153.11 680.842 L1152.55 680.842 L1151.99 680.842 L1151.43 680.842 L1150.87 680.842 L1150.31 680.842 L1149.75 680.842 L1149.19 680.842 L1148.63 680.842 L1148.07 680.842 L1147.51 680.842 L1146.96 680.842 L1146.4 680.842 L1145.84 680.842 L1145.28 680.842 L1144.72 680.842 L1144.16 680.842 L1143.6 680.842 L1143.04 680.842 L1142.48 680.842 L1141.92 680.842 L1141.36 680.842 L1140.8 680.842 L1140.24 680.842 L1139.68 680.842 L1139.13 680.842 L1138.57 680.842 L1138.01 680.842 L1137.45 680.842 L1136.89 680.842 L1136.33 680.842 L1135.77 680.842 L1135.21 680.842 L1134.65 680.842 L1134.09 680.842 L1133.53 680.842 L1132.97 680.842 L1132.41 680.842 L1131.86 680.842 L1131.3 680.842 L1130.74 680.842 L1130.18 680.842 L1129.62 680.842 L1129.06 680.842 L1128.5 680.842 L1127.94 680.842 L1127.38 680.842 L1126.82 680.842 L1126.26 680.842 L1125.7 680.842 L1125.14 680.842 L1124.59 680.842 L1124.03 680.842 L1123.47 680.842 L1122.91 680.842 L1122.35 680.842 L1121.79 680.842 L1121.23 680.842 L1120.67 680.842 L1120.11 680.842 L1119.55 680.842 L1118.99 680.842 L1118.43 680.842 L1117.87 680.842 L1117.31 680.842 L1116.76 680.842 L1116.2 680.842 L1115.64 680.842 L1115.08 680.842 L1114.52 680.842 L1113.96 680.842 L1113.4 680.842 L1112.84 680.842 L1112.28 680.842 L1111.72 680.842 L1111.16 680.842 L1110.6 680.842 L1110.04 680.842 L1109.49 680.842 L1108.93 680.842 L1108.37 680.842 L1107.81 680.842 L1107.25 680.842 L1106.69 680.842 L1106.13 680.842 L1105.57 680.842 L1105.01 680.842 L1104.45 680.842 L1103.89 680.842 L1103.33 680.842 L1102.77 680.842 L1102.22 680.842 L1101.66 680.842 L1101.1 680.842 L1100.54 680.842 L1099.98 680.842 L1099.42 680.842 L1098.86 680.842 L1098.3 680.842 L1097.74 680.842 L1097.18 680.842 L1096.62 680.842 L1096.06 680.842 L1095.5 680.842 L1094.94 680.842 L1094.39 680.842 L1093.83 680.842 L1093.27 680.842 L1092.71 680.842 L1092.15 680.842 L1091.59 680.842 L1091.03 680.842 L1090.47 680.842 L1089.91 680.842 L1089.35 680.842 L1088.79 680.842 L1088.23 680.842 L1087.67 680.842 L1087.12 680.842 L1086.56 680.842 L1086 680.842 L1085.44 680.842 L1084.88 680.842 L1084.32 680.842 L1083.76 680.842 L1083.2 680.842 L1082.64 680.842 L1082.08 680.842 L1081.52 680.842 L1080.96 680.842 L1080.4 680.842 L1079.85 680.842 L1079.29 680.842 L1078.73 680.842 L1078.17 680.842 L1077.61 680.842 L1077.05 680.842 L1076.49 680.842 L1075.93 680.842 L1075.37 680.842 L1074.81 680.842 L1074.25 680.842 L1073.69 680.842 L1073.13 680.842 L1072.57 680.842 L1072.02 680.842 L1071.46 680.842 L1070.9 680.842 L1070.34 680.842 L1069.78 680.842 L1069.22 680.842 L1068.66 680.842 L1068.1 680.842 L1067.54 680.842 L1066.98 680.842 L1066.42 680.842 L1065.86 680.842 L1065.3 680.842 L1064.75 680.842 L1064.19 680.842 L1063.63 680.842 L1063.07 680.842 L1062.51 680.842 L1061.95 680.842 L1061.39 680.842 L1060.83 680.842 L1060.27 680.842 L1059.71 680.842 L1059.15 680.842 L1058.59 680.842 L1058.03 680.842 L1057.48 680.842 L1056.92 680.842 L1056.36 680.842 L1055.8 680.842 L1055.24 680.842 L1054.68 680.842 L1054.12 680.842 L1053.56 680.842 L1053 680.842 L1052.44 680.842 L1051.88 680.842 L1051.32 680.842 L1050.76 680.842 L1050.2 680.842 L1049.65 680.842 L1049.09 680.842 L1048.53 680.842 L1047.97 680.842 L1047.41 680.842 L1046.85 680.842 L1046.29 680.842 L1045.73 680.842 L1045.17 680.842 L1044.61 680.842 L1044.05 680.842 L1043.49 680.842 L1042.93 680.842 L1042.38 680.842 L1041.82 680.842 L1041.26 680.842 L1040.7 680.842 L1040.14 680.842 L1039.58 680.842 L1039.02 680.842 L1038.46 680.842 L1037.9 680.842 L1037.34 680.842 L1036.78 680.842 L1036.22 680.842 L1035.66 680.842 L1035.1 680.842 L1034.55 680.842 L1033.99 680.842 L1033.43 680.842 L1032.87 680.842 L1032.31 680.842 L1031.75 680.842 L1031.19 680.842 L1030.63 680.842 L1030.07 680.842 L1029.51 680.842 L1028.95 680.842 L1028.39 680.842 L1027.83 680.842 L1027.28 680.842 L1026.72 680.842 L1026.16 680.842 L1025.6 680.842 L1025.04 680.842 L1024.48 680.842 L1023.92 680.842 L1023.36 680.842 L1022.8 680.842 L1022.24 680.842 L1021.68 680.842 L1021.12 680.842 L1020.56 680.842 L1020.01 680.842 L1019.45 680.842 L1018.89 680.842 L1018.33 680.842 L1017.77 680.842 L1017.21 680.842 L1016.65 680.842 L1016.09 680.842 L1015.53 680.842 L1014.97 680.842 L1014.41 680.842 L1013.85 680.842 L1013.29 680.842 L1012.73 680.842 L1012.18 680.842 L1011.62 680.842 L1011.06 680.842 L1010.5 680.842 L1009.94 680.842 L1009.38 680.842 L1008.82 680.842 L1008.26 680.842 L1007.7 680.842 L1007.14 680.842 L1006.58 680.842 L1006.02 680.842 L1005.46 680.842 L1004.91 680.842 L1004.35 680.842 L1003.79 680.842 L1003.23 680.842 L1002.67 680.842 L1002.11 680.842 L1001.55 680.842 L1000.99 680.842 L1000.43 680.842 L999.872 680.842 L999.313 680.842 L998.754 680.842 L998.194 680.842 L997.635 680.842 L997.076 680.842 L996.517 680.842 L995.957 680.842 L995.398 680.842 L994.839 680.842 L994.28 680.842 L993.72 680.842 L993.161 680.842 L992.602 680.842 L992.043 680.842 L991.483 680.842 L990.924 680.842 L990.365 680.842 L989.806 680.842 L989.246 680.842 L988.687 680.842 L988.128 680.842 L987.569 680.842 L987.009 680.842 L986.45 680.842 L985.891 680.842 L985.332 680.842 L984.772 680.842 L984.213 680.842 L983.654 680.842 L983.095 680.842 L982.535 680.842 L981.976 680.842 L981.417 680.842 L980.858 680.842 L980.298 680.842 L979.739 680.842 L979.18 680.842 L978.621 680.842 L978.061 680.842 L977.502 680.842 L976.943 680.842 L976.384 680.842 L975.824 680.842 L975.265 680.842 L974.706 680.842 L974.147 680.842 L973.587 680.842 L973.028 680.842 L972.469 680.842 L971.91 680.842 L971.35 680.842 L970.791 680.842 L970.232 680.842 L969.673 680.842 L969.113 680.842 L968.554 680.842 L967.995 680.842 L967.436 680.842 L966.876 680.842 L966.317 680.842 L965.758 680.842 L965.199 680.842 L964.639 680.842 L964.08 680.842 L963.521 680.842 L962.962 680.842 L962.402 680.842 L961.843 680.842 L961.284 680.842 L960.725 680.842 L960.165 680.842 L959.606 680.842 L959.047 680.842 L958.488 680.842 L957.928 680.842 L957.369 680.842 L956.81 680.842 L956.251 680.842 L955.691 680.842 L955.132 680.842 L954.573 680.842 L954.014 680.842 L953.454 680.842 L952.895 680.842 L952.336 680.842 L951.777 680.842 L951.217 680.842 L950.658 680.842 L950.099 680.842 L949.54 680.842 L948.98 680.842 L948.421 680.842 L947.862 680.842 L947.303 680.842 L946.743 680.842 L946.184 680.842 L945.625 680.842 L945.066 680.842 L944.506 680.842 L943.947 680.842 L943.388 680.842 L942.829 680.842 L942.269 680.842 L941.71 680.842 L941.151 680.842 L940.592 680.842 L940.032 680.842 L939.473 680.842 L938.914 680.842 L938.355 680.842 L937.795 680.842 L937.236 680.842 L936.677 680.842 L936.118 680.842 L935.558 680.842 L934.999 680.842 L934.44 680.842 L933.881 680.842 L933.321 680.842 L932.762 680.842 L932.203 680.842 L931.644 680.842 L931.084 680.842 L930.525 680.842 L929.966 680.842 L929.406 680.842 L928.847 680.842 L928.288 680.842 L927.729 680.842 L927.169 680.842 L926.61 680.842 L926.051 680.842 L925.492 680.842 L924.932 680.842 L924.373 680.842 L923.814 680.842 L923.255 680.842 L922.695 680.842 L922.136 680.842 L921.577 680.842 L921.018 680.842 L920.458 680.842 L919.899 680.842 L919.34 680.842 L918.781 680.842 L918.221 680.842 L917.662 680.842 L917.103 680.842 L916.544 680.842 L915.984 680.842 L915.425 680.842 L914.866 680.842 L914.307 680.842 L913.747 680.842 L913.188 680.842 L912.629 680.842 L912.07 680.842 L911.51 680.842 L910.951 680.842 L910.392 680.842 L909.833 680.842 L909.273 680.842 L908.714 680.842 L908.155 680.842 L907.596 680.842 L907.036 680.842 L906.477 680.842 L905.918 680.842 L905.359 680.842 L904.799 680.842 L904.24 680.842 L903.681 680.842 L903.122 680.842 L902.562 680.842 L902.003 680.842 L901.444 680.842 L900.885 680.842 L900.325 680.842 L899.766 680.842 L899.207 680.842 L898.648 680.842 L898.088 680.842 L897.529 680.842 L896.97 680.842 L896.411 680.842 L895.851 680.842 L895.292 680.842 L894.733 680.842 L894.174 680.842 L893.614 680.842 L893.055 680.842 L892.496 680.842 L891.937 680.842 L891.377 680.842 L890.818 680.842 L890.259 680.842 L889.7 680.842 L889.14 680.842 L888.581 680.842 L888.022 680.842 L887.463 680.842 L886.903 680.842 L886.344 680.842 L885.785 680.842 L885.226 680.842 L884.666 680.842 L884.107 680.842 L883.548 680.842 L882.989 680.842 L882.429 680.842 L881.87 680.842 L881.311 680.842 L880.752 680.842 L880.192 680.842 L879.633 680.842 L879.074 680.842 L878.515 680.842 L877.955 680.842 L877.396 680.842 L876.837 680.842 L876.278 680.842 L875.718 680.842 L875.159 680.842 L874.6 680.842 L874.041 680.842 L873.481 680.842 L872.922 680.842 L872.363 680.842 L871.804 680.842 L871.244 680.842 L870.685 680.842 L870.126 680.842 L869.567 680.842 L869.007 680.842 L868.448 680.842 L867.889 680.842 L867.33 680.842 L866.77 680.842 L866.211 680.842 L865.652 680.842 L865.093 680.842 L864.533 680.842 L863.974 680.842 L863.415 680.842 L862.856 680.842 L862.296 680.842 L861.737 680.842 L861.178 680.842 L860.619 680.842 L860.059 680.842 L859.5 680.842 L858.941 680.842 L858.382 680.842 L857.822 680.842 L857.263 680.842 L856.704 680.842 L856.145 680.842 L855.585 680.842 L855.026 680.842 L854.467 680.842 L853.908 680.842 L853.348 680.842 L852.789 680.842 L852.23 680.842 L851.671 680.842 L851.111 680.842 L850.552 680.842 L849.993 680.842 L849.434 680.842 L848.874 680.842 L848.315 680.842 L847.756 680.842 L847.197 680.842 L846.637 680.842 L846.078 680.842 L845.519 680.842 L844.96 680.842 L844.4 680.842 L843.841 680.842 L843.282 680.842 L842.723 680.842 L842.163 680.842 L841.604 680.842 L841.045 680.842 L840.486 680.842 L839.926 680.842 L839.367 680.842 L838.808 680.842 L838.249 680.842 L837.689 680.842 L837.13 680.842 L836.571 680.842 L836.012 680.842 L835.452 680.842 L834.893 680.842 L834.334 680.842 L833.775 680.842 L833.215 680.842 L832.656 680.842 L832.097 680.842 L831.538 680.842 L830.978 680.842 L830.419 680.842 L829.86 680.842 L829.301 680.842 L828.741 680.842 L828.182 680.842 L827.623 680.842 L827.064 680.842 L826.504 680.842 L825.945 680.842 L825.386 680.842 L824.827 680.842 L824.267 680.842 L823.708 680.842 L823.149 680.842 L822.59 680.842 L822.03 680.842 L821.471 680.842 L820.912 680.842 L820.353 680.842 L819.793 680.842 L819.234 680.842 L818.675 680.842 L818.116 680.842 L817.556 680.842 L816.997 680.842 L816.438 680.842 L815.879 680.842 L815.319 680.842 L814.76 680.842 L814.201 680.842 L813.642 680.842 L813.082 680.842 L812.523 680.842 L811.964 680.842 L811.405 680.842 L810.845 680.842 L810.286 680.842 L809.727 680.842 L809.168 680.842 L808.608 680.842 L808.049 680.842 L807.49 680.842 L806.931 680.842 L806.371 680.842 L805.812 680.842 L805.253 680.842 L804.693 680.842 L804.134 680.842 L803.575 680.842 L803.016 680.842 L802.456 680.842 L801.897 680.842 L801.338 680.842 L800.779 680.842 L800.219 680.842 L799.66 680.842 L799.101 680.842 L798.542 680.842 L797.982 680.842 L797.423 680.842 L796.864 680.842 L796.305 680.842 L795.745 680.842 L795.186 680.842 L794.627 680.842 L794.068 680.842 L793.508 680.842 L792.949 680.842 L792.39 680.842 L791.831 680.842 L791.271 680.842 L790.712 680.842 L790.153 680.842 L789.594 680.842 L789.034 680.842 L788.475 680.842 L787.916 680.842 L787.357 680.842 L786.797 680.842 L786.238 680.842 L785.679 680.842 L785.12 680.842 L784.56 680.842 L784.001 680.842 L783.442 680.842 L782.883 680.842 L782.323 680.842 L781.764 680.842 L781.205 680.842 L780.646 680.842 L780.086 680.842 L779.527 680.842 L778.968 680.842 L778.409 680.842 L777.849 680.842 L777.29 680.842 L776.731 680.842 L776.172 680.842 L775.612 680.842 L775.053 680.842 L774.494 680.842 L773.935 680.842 L773.375 680.842 L772.816 680.842 L772.257 680.842 L771.698 680.842 L771.138 680.842 L770.579 680.842 L770.02 680.842 L769.461 680.842 L768.901 680.842 L768.342 680.842 L767.783 680.842 L767.224 680.842 L766.664 680.842 L766.105 680.842 L765.546 680.842 L764.987 680.842 L764.427 680.842 L763.868 680.842 L763.309 680.842 L762.75 680.842 L762.19 680.842 L761.631 680.842 L761.072 680.842 L760.513 680.842 L759.953 680.842 L759.394 680.842 L758.835 680.842 L758.276 680.842 L757.716 680.842 L757.157 680.842 L756.598 680.842 L756.039 680.842 L755.479 680.842 L754.92 680.842 L754.361 680.842 L753.802 680.842 L753.242 680.842 L752.683 680.842 L752.124 680.842 L751.565 680.842 L751.005 680.842 L750.446 680.842 L749.887 680.842 L749.328 680.842 L748.768 680.842 L748.209 680.842 L747.65 680.842 L747.091 680.842 L746.531 680.842 L745.972 680.842 L745.413 680.842 L744.854 680.842 L744.294 680.842 L743.735 680.842 L743.176 680.842 L742.617 680.842 L742.057 680.842 L741.498 680.842 L740.939 680.842 L740.38 680.842 L739.82 680.842 L739.261 680.842 L738.702 680.842 L738.143 680.842 L737.583 680.842 L737.024 680.842 L736.465 680.842 L735.906 680.842 L735.346 680.842 L734.787 680.842 L734.228 680.842 L733.669 680.842 L733.109 680.842 L732.55 680.842 L731.991 680.842 L731.432 680.842 L730.872 680.842 L730.313 680.842 L729.754 680.842 L729.195 680.842 L728.635 680.842 L728.076 680.842 L727.517 680.842 L726.958 680.842 L726.398 680.842 L725.839 680.842 L725.28 680.842 L724.721 680.842 L724.161 680.842 L723.602 680.842 L723.043 680.842 L722.484 680.842 L721.924 680.842 L721.365 680.842 L720.806 680.842 L720.247 680.842  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.922 720.806,685.922 721.365,685.922 721.924,685.922 722.484,685.922 723.043,685.922 723.602,685.922 724.161,685.922 724.721,685.922 725.28,685.922 725.839,685.922 726.398,685.922 726.958,685.922 727.517,685.922 728.076,685.922 728.635,685.922 729.195,685.922 729.754,685.922 730.313,685.922 730.872,685.922 731.432,685.922 731.991,685.922 732.55,685.922 733.109,685.922 733.669,685.922 734.228,685.922 734.787,685.922 735.346,685.922 735.906,685.922 736.465,685.922 737.024,685.922 737.583,685.922 738.143,685.922 738.702,685.922 739.261,685.922 739.82,685.922 740.38,685.922 740.939,685.922 741.498,685.922 742.057,685.922 742.617,685.922 743.176,685.922 743.735,685.922 744.294,685.922 744.854,685.922 745.413,685.922 745.972,685.922 746.531,685.922 747.091,685.922 747.65,685.922 748.209,685.922 748.768,685.922 749.328,685.922 749.887,685.922 750.446,685.922 751.005,685.922 751.565,685.922 752.124,685.922 752.683,685.922 753.242,685.922 753.802,685.922 754.361,685.922 754.92,685.922 755.479,685.922 756.039,685.922 756.598,685.922 757.157,685.922 757.716,685.922 758.276,685.922 758.835,685.922 759.394,685.922 759.953,685.922 760.513,685.922 761.072,685.922 761.631,685.922 762.19,685.922 762.75,685.922 763.309,685.922 763.868,685.922 764.427,685.922 764.987,685.922 765.546,685.922 766.105,685.922 766.664,685.922 767.224,685.922 767.783,685.922 768.342,685.922 768.901,685.922 769.461,685.922 770.02,685.922 770.579,685.922 771.138,685.922 771.698,685.922 772.257,685.922 772.816,685.922 773.375,685.922 773.935,685.922 774.494,685.922 775.053,685.922 775.612,685.922 776.172,685.922 776.731,685.922 777.29,685.922 777.849,685.922 778.409,685.922 778.968,685.922 779.527,685.922 780.086,685.922 780.646,685.922 781.205,685.922 781.764,685.922 782.323,685.922 782.883,685.922 783.442,685.922 784.001,685.922 784.56,685.922 785.12,685.922 785.679,685.922 786.238,685.922 786.797,685.922 787.357,685.922 787.916,685.922 788.475,685.922 789.034,685.922 789.594,685.922 790.153,685.922 790.712,685.922 791.271,685.922 791.831,685.922 792.39,685.922 792.949,685.922 793.508,685.922 794.068,685.922 794.627,685.922 795.186,685.922 795.745,685.922 796.305,685.922 796.864,685.922 797.423,685.922 797.982,685.922 798.542,685.922 799.101,685.922 799.66,685.922 800.219,685.922 800.779,685.922 801.338,685.922 801.897,685.922 802.456,685.922 803.016,685.922 803.575,685.922 804.134,685.922 804.693,685.922 805.253,685.922 805.812,685.922 806.371,685.922 806.931,685.922 807.49,685.922 808.049,685.922 808.608,685.922 809.168,685.922 809.727,685.922 810.286,685.922 810.845,685.922 811.405,685.922 811.964,685.922 812.523,685.922 813.082,685.922 813.642,685.922 814.201,685.922 814.76,685.922 815.319,685.922 815.879,685.922 816.438,685.922 816.997,685.922 817.556,685.922 818.116,685.922 818.675,685.922 819.234,685.922 819.793,685.922 820.353,685.922 820.912,685.922 821.471,685.922 822.03,685.922 822.59,685.922 823.149,685.922 823.708,685.922 824.267,685.922 824.827,685.922 825.386,685.922 825.945,685.922 826.504,685.922 827.064,685.922 827.623,685.922 828.182,685.922 828.741,685.922 829.301,685.922 829.86,685.922 830.419,685.922 830.978,685.922 831.538,685.922 832.097,685.922 832.656,685.922 833.215,685.922 833.775,685.922 834.334,685.922 834.893,685.922 835.452,685.922 836.012,685.922 836.571,685.922 837.13,685.922 837.689,685.922 838.249,685.922 838.808,685.922 839.367,685.922 839.926,685.922 840.486,685.922 841.045,685.922 841.604,685.922 842.163,685.922 842.723,685.922 843.282,685.922 843.841,685.922 844.4,685.922 844.96,685.922 845.519,685.922 846.078,685.922 846.637,685.922 847.197,685.922 847.756,685.922 848.315,685.922 848.874,685.922 849.434,685.922 849.993,685.922 850.552,685.922 851.111,685.922 851.671,685.922 852.23,685.922 852.789,685.922 853.348,685.922 853.908,685.922 854.467,685.922 855.026,685.922 855.585,685.922 856.145,685.922 856.704,685.922 857.263,685.922 857.822,685.922 858.382,685.922 858.941,685.922 859.5,685.922 860.059,685.922 860.619,685.922 861.178,685.922 861.737,685.922 862.296,685.922 862.856,685.922 863.415,685.922 863.974,685.922 864.533,685.922 865.093,685.922 865.652,685.922 866.211,685.922 866.77,685.922 867.33,685.922 867.889,685.922 868.448,685.922 869.007,685.922 869.567,685.922 870.126,685.922 870.685,685.922 871.244,685.922 871.804,685.922 872.363,685.922 872.922,685.922 873.481,685.922 874.041,685.922 874.6,685.922 875.159,685.922 875.718,685.922 876.278,685.922 876.837,685.922 877.396,685.922 877.955,685.922 878.515,685.922 879.074,685.922 879.633,685.922 880.192,685.922 880.752,685.922 881.311,685.922 881.87,685.922 882.429,685.922 882.989,685.922 883.548,685.922 884.107,685.922 884.666,685.922 885.226,685.922 885.785,685.922 886.344,685.922 886.903,685.922 887.463,685.922 888.022,685.922 888.581,685.922 889.14,685.922 889.7,685.922 890.259,685.922 890.818,685.922 891.377,685.922 891.937,685.922 892.496,685.922 893.055,685.922 893.614,685.922 894.174,685.922 894.733,685.922 895.292,685.922 895.851,685.922 896.411,685.922 896.97,685.922 897.529,685.922 898.088,685.922 898.648,685.922 899.207,685.922 899.766,685.922 900.325,685.922 900.885,685.922 901.444,685.922 902.003,685.922 902.562,685.922 903.122,685.922 903.681,685.922 904.24,685.922 904.799,685.922 905.359,685.922 905.918,685.922 906.477,685.922 907.036,685.922 907.596,685.922 908.155,685.922 908.714,685.922 909.273,685.922 909.833,685.922 910.392,685.922 910.951,685.922 911.51,685.922 912.07,685.922 912.629,685.922 913.188,685.922 913.747,685.922 914.307,685.922 914.866,685.922 915.425,685.922 915.984,685.922 916.544,685.922 917.103,685.922 917.662,685.922 918.221,685.922 918.781,685.922 919.34,685.922 919.899,685.922 920.458,685.922 921.018,685.922 921.577,685.922 922.136,685.922 922.695,685.922 923.255,685.922 923.814,685.922 924.373,685.922 924.932,685.922 925.492,685.922 926.051,685.922 926.61,685.922 927.169,685.922 927.729,685.922 928.288,685.922 928.847,685.922 929.406,685.922 929.966,685.922 930.525,685.922 931.084,685.922 931.644,685.922 932.203,685.922 932.762,685.922 933.321,685.922 933.881,685.922 934.44,685.922 934.999,685.922 935.558,685.922 936.118,685.922 936.677,685.922 937.236,685.922 937.795,685.922 938.355,685.922 938.914,685.922 939.473,685.922 940.032,685.922 940.592,685.922 941.151,685.922 941.71,685.922 942.269,685.922 942.829,685.922 943.388,685.922 943.947,685.922 944.506,685.922 945.066,685.922 945.625,685.922 946.184,685.922 946.743,685.922 947.303,685.922 947.862,685.922 948.421,685.922 948.98,685.922 949.54,685.922 950.099,685.922 950.658,685.922 951.217,685.922 951.777,685.922 952.336,685.922 952.895,685.922 953.454,685.922 954.014,685.922 954.573,685.922 955.132,685.922 955.691,685.922 956.251,685.922 956.81,685.922 957.369,685.922 957.928,685.922 958.488,685.922 959.047,685.922 959.606,685.922 960.165,685.922 960.725,685.922 961.284,685.922 961.843,685.922 962.402,685.922 962.962,685.922 963.521,685.922 964.08,685.922 964.639,685.922 965.199,685.922 965.758,685.922 966.317,685.922 966.876,685.922 967.436,685.922 967.995,685.922 968.554,685.922 969.113,685.922 969.673,685.922 970.232,685.922 970.791,685.922 971.35,685.922 971.91,685.922 972.469,685.922 973.028,685.922 973.587,685.922 974.147,685.922 974.706,685.922 975.265,685.922 975.824,685.922 976.384,685.922 976.943,685.922 977.502,685.922 978.061,685.922 978.621,685.922 979.18,685.922 979.739,685.922 980.298,685.922 980.858,685.922 981.417,685.922 981.976,685.922 982.535,685.922 983.095,685.922 983.654,685.922 984.213,685.922 984.772,685.922 985.332,685.922 985.891,685.922 986.45,685.922 987.009,685.922 987.569,685.922 988.128,685.922 988.687,685.922 989.246,685.922 989.806,685.922 990.365,685.922 990.924,685.922 991.483,685.922 992.043,685.922 992.602,685.922 993.161,685.922 993.72,685.922 994.28,685.922 994.839,685.922 995.398,685.922 995.957,685.922 996.517,685.922 997.076,685.922 997.635,685.922 998.194,685.922 998.754,685.922 999.313,685.922 999.872,685.922 1000.43,685.922 1000.99,685.922 1001.55,685.922 1002.11,685.922 1002.67,685.922 1003.23,685.922 1003.79,685.922 1004.35,685.922 1004.91,685.922 1005.46,685.922 1006.02,685.922 1006.58,685.922 1007.14,685.922 1007.7,685.922 1008.26,685.922 1008.82,685.922 1009.38,685.922 1009.94,685.922 1010.5,685.922 1011.06,685.922 1011.62,685.922 1012.18,685.922 1012.73,685.922 1013.29,685.922 1013.85,685.922 1014.41,685.922 1014.97,685.922 1015.53,685.922 1016.09,685.922 1016.65,685.922 1017.21,685.922 1017.77,685.922 1018.33,685.922 1018.89,685.922 1019.45,685.922 1020.01,685.922 1020.56,685.922 1021.12,685.922 1021.68,685.922 1022.24,685.922 1022.8,685.922 1023.36,685.922 1023.92,685.922 1024.48,685.922 1025.04,685.922 1025.6,685.922 1026.16,685.922 1026.72,685.922 1027.28,685.922 1027.83,685.922 1028.39,685.922 1028.95,685.922 1029.51,685.922 1030.07,685.922 1030.63,685.922 1031.19,685.922 1031.75,685.922 1032.31,685.922 1032.87,685.922 1033.43,685.922 1033.99,685.922 1034.55,685.922 1035.1,685.922 1035.66,685.922 1036.22,685.922 1036.78,685.922 1037.34,685.922 1037.9,685.922 1038.46,685.922 1039.02,685.922 1039.58,685.922 1040.14,685.922 1040.7,685.922 1041.26,685.922 1041.82,685.922 1042.38,685.922 1042.93,685.922 1043.49,685.922 1044.05,685.922 1044.61,685.922 1045.17,685.922 1045.73,685.922 1046.29,685.922 1046.85,685.922 1047.41,685.922 1047.97,685.922 1048.53,685.922 1049.09,685.922 1049.65,685.922 1050.2,685.922 1050.76,685.922 1051.32,685.922 1051.88,685.922 1052.44,685.922 1053,685.922 1053.56,685.922 1054.12,685.922 1054.68,685.922 1055.24,685.922 1055.8,685.922 1056.36,685.922 1056.92,685.922 1057.48,685.922 1058.03,685.922 1058.59,685.922 1059.15,685.922 1059.71,685.922 1060.27,685.922 1060.83,685.922 1061.39,685.922 1061.95,685.922 1062.51,685.922 1063.07,685.922 1063.63,685.922 1064.19,685.922 1064.75,685.922 1065.3,685.922 1065.86,685.922 1066.42,685.922 1066.98,685.922 1067.54,685.922 1068.1,685.922 1068.66,685.922 1069.22,685.922 1069.78,685.922 1070.34,685.922 1070.9,685.922 1071.46,685.922 1072.02,685.922 1072.57,685.922 1073.13,685.922 1073.69,685.922 1074.25,685.922 1074.81,685.922 1075.37,685.922 1075.93,685.922 1076.49,685.922 1077.05,685.922 1077.61,685.922 1078.17,685.922 1078.73,685.922 1079.29,685.922 1079.85,685.922 1080.4,685.922 1080.96,685.922 1081.52,685.922 1082.08,685.922 1082.64,685.922 1083.2,685.922 1083.76,685.922 1084.32,685.922 1084.88,685.922 1085.44,685.922 1086,685.922 1086.56,685.922 1087.12,685.922 1087.67,685.922 1088.23,685.922 1088.79,685.922 1089.35,685.922 1089.91,685.922 1090.47,685.922 1091.03,685.922 1091.59,685.922 1092.15,685.922 1092.71,685.922 1093.27,685.922 1093.83,685.922 1094.39,685.922 1094.94,685.922 1095.5,685.922 1096.06,685.922 1096.62,685.922 1097.18,685.922 1097.74,685.922 1098.3,685.922 1098.86,685.922 1099.42,685.922 1099.98,685.922 1100.54,685.922 1101.1,685.922 1101.66,685.922 1102.22,685.922 1102.77,685.922 1103.33,685.922 1103.89,685.922 1104.45,685.922 1105.01,685.922 1105.57,685.922 1106.13,685.922 1106.69,685.922 1107.25,685.922 1107.81,685.922 1108.37,685.922 1108.93,685.922 1109.49,685.922 1110.04,685.922 1110.6,685.922 1111.16,685.922 1111.72,685.922 1112.28,685.922 1112.84,685.922 1113.4,685.922 1113.96,685.922 1114.52,685.922 1115.08,685.922 1115.64,685.922 1116.2,685.922 1116.76,685.922 1117.31,685.922 1117.87,685.922 1118.43,685.922 1118.99,685.922 1119.55,685.922 1120.11,685.922 1120.67,685.922 1121.23,685.922 1121.79,685.922 1122.35,685.922 1122.91,685.922 1123.47,685.922 1124.03,685.922 1124.59,685.922 1125.14,685.922 1125.7,685.922 1126.26,685.922 1126.82,685.922 1127.38,685.922 1127.94,685.922 1128.5,685.922 1129.06,685.922 1129.62,685.922 1130.18,685.922 1130.74,685.922 1131.3,685.922 1131.86,685.922 1132.41,685.922 1132.97,685.922 1133.53,685.922 1134.09,685.922 1134.65,685.922 1135.21,685.922 1135.77,685.922 1136.33,685.922 1136.89,685.922 1137.45,685.922 1138.01,685.922 1138.57,685.922 1139.13,685.922 1139.68,685.922 1140.24,685.922 1140.8,685.922 1141.36,685.922 1141.92,685.922 1142.48,685.922 1143.04,685.922 1143.6,685.922 1144.16,685.922 1144.72,685.922 1145.28,685.922 1145.84,685.922 1146.4,685.922 1146.96,685.922 1147.51,685.922 1148.07,685.922 1148.63,685.922 1149.19,685.922 1149.75,685.922 1150.31,685.922 1150.87,685.922 1151.43,685.922 1151.99,685.922 1152.55,685.922 1153.11,685.922 1153.67,685.922 1154.23,685.922 1154.78,685.922 1155.34,685.922 1155.9,685.922 1156.46,685.922 1157.02,685.922 1157.58,685.922 1158.14,685.922 1158.7,685.922 1159.26,685.922 1159.82,685.922 1160.38,685.922 1160.94,685.922 1161.5,685.922 1162.05,685.922 1162.61,685.922 1163.17,685.922 1163.73,685.922 1164.29,685.922 1164.85,685.922 1165.41,685.922 1165.97,685.922 1166.53,685.922 1167.09,685.922 1167.65,685.922 1168.21,685.922 1168.77,685.922 1169.33,685.922 1169.88,685.922 1170.44,685.922 1171,685.922 1171.56,685.922 1172.12,685.922 1172.68,685.922 1173.24,685.922 1173.8,685.922 1174.36,685.922 1174.92,685.922 1175.48,685.922 1176.04,685.922 1176.6,685.922 1177.15,685.922 1177.71,685.922 1178.27,685.922 1178.83,685.922 1179.39,685.922 1179.95,685.922 1180.51,685.922 1181.07,685.922 1181.63,685.922 1182.19,685.922 1182.75,685.922 1183.31,685.922 1183.87,685.922 1184.43,685.922 1184.98,685.922 1185.54,685.922 1186.1,685.922 1186.66,685.922 1187.22,685.922 1187.78,685.922 1188.34,685.922 1188.9,685.922 1189.46,685.922 1190.02,685.922 1190.58,685.922 1191.14,685.922 1191.7,685.922 1192.25,685.922 1192.81,685.922 1193.37,685.922 1193.93,685.922 1194.49,685.922 1195.05,685.922 1195.61,685.922 1196.17,685.922 1196.73,685.922 1197.29,685.922 1197.85,685.922 1198.41,685.922 1198.97,685.922 1199.52,685.922 1200.08,685.922 1200.64,685.922 1201.2,685.922 1201.76,685.922 1202.32,685.922 1202.88,685.922 1203.44,685.922 1204,685.922 1204.56,685.922 1205.12,685.922 1205.68,685.922 1206.24,685.922 1206.8,685.922 1207.35,685.922 1207.91,685.922 1208.47,685.922 1209.03,685.922 1209.59,685.922 1210.15,685.922 1210.71,685.922 1211.27,685.922 1211.83,685.922 1212.39,685.922 1212.95,685.922 1213.51,685.922 1214.07,685.922 1214.62,685.922 1215.18,685.922 1215.74,685.922 1216.3,685.922 1216.86,685.922 1217.42,685.922 1217.98,685.922 1218.54,685.922 1219.1,685.922 1219.66,685.922 1220.22,685.922 1220.78,685.922 1221.34,685.922 1221.89,685.922 1222.45,685.922 1223.01,685.922 1223.57,685.922 1224.13,685.922 1224.69,685.922 1225.25,685.922 1225.81,685.922 1226.37,685.922 1226.93,685.922 1227.49,685.922 1228.05,685.922 1228.61,685.922 1229.17,685.922 1229.72,685.922 1230.28,685.922 1230.84,685.922 1231.4,685.922 1231.96,685.922 1232.52,685.922 1233.08,685.922 1233.64,685.922 1234.2,685.922 1234.76,685.922 1235.32,685.922 1235.88,685.922 1236.44,685.922 1236.99,685.922 1237.55,685.922 1238.11,685.922 1238.67,685.922 1239.23,685.922 1239.79,685.922 1240.35,685.922 1240.91,685.922 1241.47,685.922 1242.03,685.922 1242.59,685.922 1243.15,685.922 1243.71,685.922 1244.26,685.922 1244.82,685.922 1245.38,685.922 1245.94,685.922 1246.5,685.922 1247.06,685.922 1247.62,685.922 1248.18,685.922 1248.74,685.922 1249.3,685.922 1249.86,685.922 1250.42,685.922 1250.98,685.922 1251.54,685.922 1252.09,685.922 1252.65,685.922 1253.21,685.922 1253.77,685.922 1254.33,685.922 1254.89,685.922 1255.45,685.922 1256.01,685.922 1256.57,685.922 1257.13,685.922 1257.69,685.922 1258.25,685.922 1258.81,685.922 1259.36,685.922 1259.92,685.922 1260.48,685.922 1261.04,685.922 1261.6,685.922 1262.16,685.922 1262.72,685.922 1263.28,685.922 1263.84,685.922 1264.4,685.922 1264.96,685.922 1265.52,685.922 1266.08,685.922 1266.63,685.922 1267.19,685.922 1267.75,685.922 1268.31,685.922 1268.87,685.922 1269.43,685.922 1269.99,685.922 1270.55,685.922 1271.11,685.922 1271.67,685.922 1272.23,685.922 1272.79,685.922 1273.35,685.922 1273.91,685.922 1274.46,685.922 1275.02,685.922 1275.58,685.922 1276.14,685.922 1276.7,685.922 1277.26,685.922 1277.82,685.922 1278.38,685.922 1278.94,685.922 1279.5,685.922 1280.06,685.922 1280.62,685.922 1281.18,685.922 1281.73,685.922 1282.29,685.922 1282.85,685.922 1283.41,685.922 1283.97,685.922 1284.53,685.922 1285.09,685.922 1285.65,685.922 1286.21,685.922 1286.77,685.922 1287.33,685.922 1287.89,685.922 1288.45,685.922 1289,685.922 1289.56,685.922 1290.12,685.922 1290.68,685.922 1291.24,685.922 1291.8,685.922 1292.36,685.922 1292.92,685.922 1293.48,685.922 1294.04,685.922 1294.6,685.922 1295.16,685.922 1295.72,685.922 1296.28,685.922 1296.83,685.922 1297.39,685.922 1297.95,685.922 1298.51,685.922 1299.07,685.922 1299.63,685.922 1300.19,685.922 1300.75,685.922 1301.31,685.922 1301.87,685.922 1302.43,685.922 1302.99,685.922 1303.55,685.922 1304.1,685.922 1304.66,685.922 1305.22,685.922 1305.78,685.922 1306.34,685.922 1306.9,685.922 1307.46,685.922 1308.02,685.922 1308.58,685.922 1309.14,685.922 1309.7,685.922 1310.26,685.922 1310.82,685.922 1311.38,685.922 1311.93,685.922 1312.49,685.922 1313.05,685.922 1313.61,685.922 1314.17,685.922 1314.73,685.922 1315.29,685.922 1315.85,685.922 1316.41,685.922 1316.97,685.922 1317.53,685.922 1318.09,685.922 1318.65,685.922 1319.2,685.922 1319.76,685.922 1320.32,685.922 1320.88,685.922 1321.44,685.922 1322,685.922 1322.56,685.922 1323.12,685.922 1323.68,685.922 1324.24,685.922 1324.8,685.922 1325.36,685.922 1325.92,685.922 1326.47,685.922 1327.03,685.922 1327.59,685.922 1328.15,685.922 1328.71,685.922 1329.27,685.922 1329.83,685.922 1330.39,685.922 1330.95,685.922 1331.51,685.922 1332.07,685.922 1332.63,685.922 1333.19,685.922 1333.75,685.922 1334.3,685.922 1334.86,685.922 1335.42,685.922 1335.98,685.922 1336.54,685.922 1337.1,685.922 1337.66,685.922 1338.22,685.922 1338.78,685.922 1339.34,685.922 1339.9,685.922 1340.46,685.922 1341.02,685.922 1341.57,685.922 1342.13,685.922 1342.69,685.922 1343.25,685.922 1343.81,685.922 1344.37,685.922 1344.93,685.922 1345.49,685.922 1346.05,685.922 1346.61,685.922 1347.17,685.922 1347.73,685.922 1348.29,685.922 1348.84,685.922 1349.4,685.922 1349.96,685.922 1350.52,685.922 1351.08,685.922 1351.64,685.922 1352.2,685.922 1352.76,685.922 1353.32,685.922 1353.88,685.922 1354.44,685.922 1355,685.922 1355.56,685.922 1356.12,685.922 1356.67,685.922 1357.23,685.922 1357.79,685.922 1358.35,685.922 1358.91,685.922 1359.47,685.922 1360.03,685.922 1360.59,685.922 1361.15,685.922 1361.71,685.922 1362.27,685.922 1362.83,685.922 1363.39,685.922 1363.94,685.922 1364.5,685.922 1365.06,685.922 1365.62,685.922 1366.18,685.922 1366.74,685.922 1367.3,685.922 1367.86,685.922 1368.42,685.922 1368.98,685.922 1369.54,685.922 1370.1,685.922 1370.66,685.922 1371.21,685.922 1371.77,685.922 1372.33,685.922 1372.89,685.922 1373.45,685.922 1374.01,685.922 1374.57,685.922 1375.13,685.922 1375.69,685.922 1376.25,685.922 1376.81,685.922 1377.37,685.922 1377.93,685.922 1378.49,685.922 1379.04,685.922 1379.6,685.922 1380.16,685.922 1380.72,685.922 1381.28,685.922 1381.84,685.922 1382.4,685.922 1382.96,685.922 1383.52,685.922 1384.08,685.922 1384.64,685.922 1385.2,685.922 1385.76,685.922 1386.31,685.922 1386.87,685.922 1387.43,685.922 1387.99,685.922 1388.55,685.922 1389.11,685.922 1389.67,685.922 1390.23,685.922 1390.79,685.922 1391.35,685.922 1391.91,685.922 1392.47,685.922 1393.03,685.922 1393.58,685.922 1394.14,685.922 1394.7,685.922 1395.26,685.922 1395.82,685.922 1396.38,685.922 1396.94,685.922 1397.5,685.922 1398.06,685.922 1398.62,685.922 1399.18,685.922 1399.74,685.922 1400.3,685.922 1400.86,685.922 1401.41,685.922 1401.97,685.922 1402.53,685.922 1403.09,685.922 1403.65,685.922 1404.21,685.922 1404.77,685.922 1405.33,685.922 1405.89,685.922 1406.45,685.922 1407.01,685.922 1407.57,685.922 1408.13,685.922 1408.68,685.922 1409.24,685.922 1409.8,685.922 1410.36,685.922 1410.92,685.922 1411.48,685.922 1412.04,685.922 1412.6,685.922 1413.16,685.922 1413.72,685.922 1414.28,685.922 1414.84,685.922 1415.4,685.922 1415.95,685.922 1416.51,685.922 1417.07,685.922 1417.63,685.922 1418.19,685.922 1418.75,685.922 1419.31,685.922 1419.87,685.922 1420.43,685.922 1420.99,685.922 1421.55,685.922 1422.11,685.922 1422.67,685.922 1423.23,685.922 1423.78,685.922 1424.34,685.922 1424.9,685.922 1425.46,685.922 1426.02,685.922 1426.58,685.922 1427.14,685.922 1427.7,685.922 1428.26,685.922 1428.82,685.922 1429.38,685.922 1429.94,685.922 1430.5,685.922 1431.05,685.922 1431.61,685.922 1432.17,685.922 1432.73,685.922 1433.29,685.922 1433.85,685.922 1434.41,685.922 1434.97,685.922 1435.53,685.922 1436.09,685.922 1436.65,685.922 1437.21,685.922 1437.77,685.922 1438.33,685.922 1438.88,685.922 1439.44,685.922 1440,685.922 1440.56,685.922 1441.12,685.922 1441.68,685.922 1442.24,685.922 1442.8,685.922 1443.36,685.922 1443.92,685.922 1444.48,685.922 1445.04,685.922 1445.6,685.922 1446.15,685.922 1446.71,685.922 1447.27,685.922 1447.83,685.922 1448.39,685.922 1448.95,685.922 1449.51,685.922 1450.07,685.922 1450.63,685.922 1451.19,685.922 1451.75,685.922 1452.31,685.922 1452.87,685.922 1453.42,685.922 1453.98,685.922 1454.54,685.922 1455.1,685.922 1455.66,685.922 1456.22,685.922 1456.78,685.922 1457.34,685.922 1457.9,685.922 1458.46,685.922 1459.02,685.922 1459.58,685.922 1460.14,685.922 1460.7,685.922 1461.25,685.922 1461.81,685.922 1462.37,685.922 1462.93,685.922 1463.49,685.922 1464.05,685.922 1464.61,685.922 1465.17,685.922 1465.73,685.922 1466.29,685.922 1466.85,685.922 1467.41,685.922 1467.97,685.922 1468.52,685.922 1469.08,685.922 1469.64,685.922 1470.2,685.922 1470.76,685.922 1471.32,685.922 1471.88,685.922 1472.44,685.922 1473,685.922 1473.56,685.922 1474.12,685.922 1474.68,685.922 1475.24,685.922 1475.79,685.922 1476.35,685.922 1476.91,685.922 1477.47,685.922 1478.03,685.922 1478.59,685.922 1479.15,685.922 1479.71,685.922 1480.27,685.922 1480.83,685.922 1481.39,685.922 1481.95,685.922 1482.51,685.922 1483.07,685.922 1483.62,685.922 1484.18,685.922 1484.74,685.922 1485.3,685.922 1485.86,685.922 1486.42,685.922 1486.98,685.922 1487.54,685.922 1488.1,685.922 1488.66,685.922 1489.22,685.922 1489.78,685.922 1490.34,685.922 1490.89,685.922 1491.45,685.922 1492.01,685.922 1492.57,685.922 1493.13,685.922 1493.69,685.922 1494.25,685.922 1494.81,685.922 1495.37,685.922 1495.93,685.922 1496.49,685.922 1497.05,685.922 1497.61,685.922 1498.16,685.922 1498.72,685.922 1499.28,685.922 1499.84,685.922 1500.4,685.922 1500.96,685.922 1501.52,685.922 1502.08,685.922 1502.64,685.922 1503.2,685.922 1503.76,685.922 1504.32,685.922 1504.88,685.922 1505.44,685.922 1505.99,685.922 1506.55,685.922 1507.11,685.922 1507.67,685.922 1508.23,685.922 1508.79,685.922 1509.35,685.922 1509.91,685.922 1510.47,685.922 1511.03,685.922 1511.59,685.922 1512.15,685.922 1512.71,685.922 1513.26,685.922 1513.82,685.922 1514.38,685.922 1514.94,685.922 1515.5,685.922 1516.06,685.922 1516.62,685.922 1517.18,685.922 1517.74,685.922 1518.3,685.922 1518.86,685.922 1519.42,685.922 1519.98,685.922 1520.53,685.922 1521.09,685.922 1521.65,685.922 1522.21,685.922 1522.77,685.922 1523.33,685.922 1523.89,685.922 1524.45,685.922 1525.01,685.922 1525.57,685.922 1526.13,685.922 1526.69,685.922 1527.25,685.922 1527.81,685.922 1528.36,685.922 1528.92,685.922 1529.48,685.922 1530.04,685.922 1530.6,685.922 1531.16,685.922 1531.72,685.922 1532.28,685.922 1532.84,685.922 1533.4,685.922 1533.96,685.922 1534.52,685.922 1535.08,685.922 1535.63,685.922 1536.19,685.922 1536.75,685.922 1537.31,685.922 1537.87,685.922 1538.43,685.922 1538.99,685.922 1539.55,685.922 1540.11,685.922 1540.67,685.922 1541.23,685.922 1541.79,685.922 1542.35,685.922 1542.9,685.922 1543.46,685.922 1544.02,685.922 1544.58,685.922 1545.14,685.922 1545.7,685.922 1546.26,685.922 1546.82,685.922 1547.38,685.922 1547.94,685.922 1548.5,685.922 1549.06,685.922 1549.62,685.922 1550.18,685.922 1550.73,685.922 1551.29,685.922 1551.85,685.922 1552.41,685.922 1552.97,685.922 1553.53,685.922 1554.09,685.922 1554.65,685.922 1555.21,685.922 1555.77,685.922 1556.33,685.922 1556.89,685.922 1557.45,685.922 1558,685.922 1558.56,685.922 1559.12,685.922 1559.68,685.922 1560.24,685.922 1560.8,685.922 1561.36,685.922 1561.92,685.922 1562.48,685.922 1563.04,685.922 1563.6,685.922 1564.16,685.922 1564.72,685.922 1565.28,685.922 1565.83,685.922 1566.39,685.922 1566.95,685.922 1567.51,685.922 1568.07,685.922 1568.63,685.922 1569.19,685.922 1569.75,685.922 1570.31,685.922 1570.87,685.922 1571.43,685.922 1571.99,685.922 1572.55,685.922 1573.1,685.922 1573.66,685.922 1574.22,685.922 1574.78,685.922 1575.34,685.922 1575.9,685.922 1576.46,685.922 1577.02,685.922 1577.58,685.922 1578.14,685.922 1578.7,685.922 1579.26,685.922 1579.82,685.922 1580.37,685.922 1580.93,685.922 1581.49,685.922 1582.05,685.922 1582.61,685.922 1583.17,685.922 1583.73,685.922 1584.29,685.922 1584.85,685.922 1585.41,685.922 1585.97,685.922 1586.53,685.922 1587.09,685.922 1587.65,685.922 1588.2,685.922 1588.76,685.922 1589.32,685.922 1589.88,685.922 1590.44,685.922 1591,685.922 1591.56,685.922 1592.12,685.922 1592.68,685.922 1593.24,685.922 1593.8,685.922 1594.36,685.922 1594.92,685.922 1595.47,685.922 1596.03,685.922 1596.59,685.922 1597.15,685.922 1597.71,685.922 1598.27,685.922 1598.83,685.922 1599.39,685.922 1599.95,685.922 1600.51,685.922 1601.07,685.922 1601.63,685.922 1602.19,685.922 1602.74,685.922 1603.3,685.922 1603.86,685.922 1604.42,685.922 1604.98,685.922 1605.54,685.922 1606.1,685.922 1606.66,685.922 1607.22,685.922 1607.78,685.922 1608.34,685.922 1608.9,685.922 1609.46,685.922 1610.02,685.922 1610.57,685.922 1611.13,685.922 1611.69,685.922 1612.25,685.922 1612.81,685.922 1613.37,685.922 1613.93,685.922 1614.49,685.922 1615.05,685.922 1615.61,685.922 1616.17,685.922 1616.73,685.922 1617.29,685.922 1617.84,685.922 1618.4,685.922 1618.96,685.922 1619.52,685.922 1620.08,685.922 1620.64,685.922 1621.2,685.922 1621.76,685.922 1622.32,685.922 1622.88,685.922 1623.44,685.922 1624,685.922 1624.56,685.922 1625.11,685.922 1625.67,685.922 1626.23,685.922 1626.79,685.922 1627.35,685.922 1627.91,685.922 1628.47,685.922 1629.03,685.922 1629.59,685.922 1630.15,685.922 1630.71,685.922 1631.27,685.922 1631.83,685.922 1632.39,685.922 1632.94,685.922 1633.5,685.922 1634.06,685.922 1634.62,685.922 1635.18,685.922 1635.74,685.922 1636.3,685.922 1636.86,685.922 1637.42,685.922 1637.98,685.922 1638.54,685.922 1639.1,685.922 1639.66,685.922 1640.21,685.922 1640.77,685.922 1641.33,685.922 1641.89,685.922 1642.45,685.922 1643.01,685.922 1643.57,685.922 1644.13,685.922 1644.69,685.922 1645.25,685.922 1645.81,685.922 1646.37,685.922 1646.93,685.922 1647.48,685.922 1648.04,685.922 1648.6,685.922 1649.16,685.922 1649.72,685.922 1650.28,685.922 1650.84,685.922 1651.4,685.922 1651.96,685.922 1652.52,685.922 1653.08,685.922 1653.64,685.922 1654.2,685.922 1654.76,685.922 1655.31,685.922 1655.87,685.922 1656.43,685.922 1656.99,685.922 1657.55,685.922 1658.11,685.922 1658.67,685.922 1659.23,685.922 1659.79,685.922 1660.35,685.922 1660.91,685.922 1661.47,685.922 1662.03,685.922 1662.58,685.922 1663.14,685.922 1663.7,685.922 1664.26,685.922 1664.82,685.922 1665.38,685.922 1665.94,685.922 1666.5,685.922 1667.06,685.922 1667.62,685.922 1668.18,685.922 1668.74,685.922 1669.3,685.922 1669.85,685.922 1670.41,685.922 1670.97,685.922 1671.53,685.922 1672.09,685.922 1672.65,685.922 1673.21,685.922 1673.77,685.922 1674.33,685.922 1674.89,685.922 1675.45,685.922 1676.01,685.922 1676.57,685.922 1677.13,685.922 1677.68,685.922 1678.24,685.922 1678.8,685.922 1679.36,685.922 1679.92,685.922 1680.48,685.922 1681.04,685.922 1681.6,685.922 1682.16,685.922 1682.72,685.922 1683.28,685.922 1683.84,685.922 1684.4,685.922 1684.95,685.922 1685.51,685.922 1686.07,685.922 1686.63,685.922 1687.19,685.922 1687.75,685.922 1688.31,685.922 1688.87,685.922 1689.43,685.922 1689.99,685.922 1690.55,685.922 1691.11,685.922 1691.67,685.922 1692.23,685.922 1692.78,685.922 1693.34,685.922 1693.9,685.922 1694.46,685.922 1695.02,685.922 1695.58,685.922 1696.14,685.922 1696.7,685.922 1697.26,685.922 1697.82,685.922 1698.38,685.922 1698.94,685.922 1699.5,685.922 1700.05,685.922 1700.61,685.922 1701.17,685.922 1701.73,685.922 1702.29,685.922 1702.85,685.922 1703.41,685.922 1703.97,685.922 1704.53,685.922 1705.09,685.922 1705.65,685.922 1706.21,685.922 1706.77,685.922 1707.32,685.922 1707.88,685.922 1708.44,685.922 1709,685.922 1709.56,685.922 1710.12,685.922 1710.68,685.922 1711.24,685.922 1711.8,685.922 1712.36,685.922 1712.92,685.922 1713.48,685.922 1714.04,685.922 1714.6,685.922 1715.15,685.922 1715.71,685.922 1716.27,685.922 1716.83,685.922 1717.39,685.922 1717.95,685.922 1718.51,685.922 1719.07,685.922 1719.63,685.922 1720.19,685.922 1720.75,685.922 1721.31,685.922 1721.87,685.922 1722.42,685.922 1722.98,685.922 1723.54,685.922 1724.1,685.922 1724.66,685.922 1725.22,685.922 1725.78,685.922 1726.34,685.922 1726.9,685.922 1727.46,685.922 1728.02,685.922 1728.58,685.922 1729.14,685.922 1729.69,685.922 1730.25,685.922 1730.81,685.922 1731.37,685.922 1731.93,685.922 1732.49,685.922 1733.05,685.922 1733.61,685.922 1734.17,685.922 1734.73,685.922 1735.29,685.922 1735.85,685.922 1736.41,685.922 1736.97,685.922 1737.52,685.922 1738.08,685.922 1738.64,685.922 1739.2,685.922 1739.76,685.922 1740.32,685.922 1740.88,685.922 1741.44,685.922 1742,685.922 1742.56,685.922 1743.12,685.922 1743.68,685.922 1744.24,685.922 1744.79,685.922 1745.35,685.922 1745.91,685.922 1746.47,685.922 1747.03,685.922 1747.59,685.922 1748.15,685.922 1748.71,685.922 1749.27,685.922 1749.83,685.922 1750.39,685.922 1750.95,685.922 1751.51,685.922 1752.06,685.922 1752.62,685.922 1753.18,685.922 1753.74,685.922 1754.3,685.922 1754.86,685.922 1755.42,685.922 1755.98,685.922 1756.54,685.922 1757.1,685.922 1757.66,685.922 1758.22,685.922 1758.78,685.922 1759.34,685.922 1759.89,685.922 1760.45,685.922 1761.01,685.922 1761.57,685.922 1762.13,685.922 1762.69,685.922 1763.25,685.922 1763.81,685.922 1764.37,685.922 1764.93,685.922 1765.49,685.922 1766.05,685.922 1766.61,685.922 1767.16,685.922 1767.72,685.922 1768.28,685.922 1768.84,685.922 1769.4,685.922 1769.96,685.922 1770.52,685.922 1771.08,685.922 1771.64,685.922 1772.2,685.922 1772.76,685.922 1773.32,685.922 1773.88,685.922 1774.43,685.922 1774.99,685.922 1775.55,685.922 1776.11,685.922 1776.67,685.922 1777.23,685.922 1777.79,685.922 1778.35,685.922 1778.91,685.922 1779.47,685.922 1780.03,685.922 1780.59,685.922 1781.15,685.922 1781.71,685.922 1782.26,685.922 1782.82,685.922 1783.38,685.922 1783.94,685.922 1784.5,685.922 1785.06,685.922 1785.62,685.922 1786.18,685.922 1786.74,685.922 1787.3,685.922 1787.86,685.922 1788.42,685.922 1788.98,685.922 1789.53,685.922 1790.09,685.922 1790.65,685.922 1791.21,685.922 1791.77,685.922 1792.33,685.922 1792.89,685.922 1793.45,685.922 1794.01,685.922 1794.57,685.922 1795.13,685.922 1795.69,685.922 1796.25,685.922 1796.8,685.922 1797.36,685.922 1797.92,685.922 1798.48,685.922 1799.04,685.922 1799.6,685.922 1800.16,685.922 1800.72,685.922 1801.28,685.922 1801.84,685.922 1802.4,685.922 1802.96,685.922 1803.52,685.922 1804.08,685.922 1804.63,685.922 1805.19,685.922 1805.75,685.922 1806.31,685.922 1806.87,685.922 1807.43,685.922 1807.99,685.922 1808.55,685.922 1809.11,685.922 1809.67,685.922 1810.23,685.922 1810.79,685.922 1811.35,685.922 1811.9,685.922 1812.46,685.922 1813.02,685.922 1813.58,685.922 1814.14,685.922 1814.7,685.922 1815.26,685.922 1815.82,685.922 1816.38,685.922 1816.94,685.922 1817.5,685.922 1818.06,685.922 1818.62,685.922 1819.18,685.922 1819.73,685.922 1820.29,685.922 1820.85,685.922 1821.41,685.922 1821.97,685.922 1822.53,685.922 1823.09,685.922 1823.65,685.922 1824.21,685.922 1824.77,685.922 1825.33,685.922 1825.89,685.922 1826.45,685.922 1827,685.922 1827.56,685.922 1828.12,685.922 1828.68,685.922 1829.24,685.922 1829.8,685.922 1830.36,685.922 1830.92,685.922 1831.48,685.922 1832.04,685.922 1832.6,685.922 1833.16,685.922 1833.72,685.922 1834.27,685.922 1834.83,685.922 1835.39,685.922 1835.95,685.922 1836.51,685.922 1837.07,685.922 1837.63,685.922 1838.19,685.922 \"/>\n<path clip-path=\"url(#clip173)\" d=\"M720.247 684.674 L720.806 684.674 L721.365 684.674 L721.924 684.674 L722.484 684.674 L723.043 684.674 L723.602 684.674 L724.161 684.674 L724.721 684.674 L725.28 684.674 L725.839 684.674 L726.398 684.674 L726.958 684.674 L727.517 684.674 L728.076 684.674 L728.635 684.674 L729.195 684.674 L729.754 684.674 L730.313 684.674 L730.872 684.674 L731.432 684.674 L731.991 684.674 L732.55 684.674 L733.109 684.674 L733.669 684.674 L734.228 684.674 L734.787 684.674 L735.346 684.674 L735.906 684.674 L736.465 684.674 L737.024 684.674 L737.583 684.674 L738.143 684.674 L738.702 684.674 L739.261 684.674 L739.82 684.674 L740.38 684.674 L740.939 684.674 L741.498 684.674 L742.057 684.674 L742.617 684.674 L743.176 684.674 L743.735 684.674 L744.294 684.674 L744.854 684.674 L745.413 684.674 L745.972 684.674 L746.531 684.674 L747.091 684.674 L747.65 684.674 L748.209 684.674 L748.768 684.674 L749.328 684.674 L749.887 684.674 L750.446 684.674 L751.005 684.674 L751.565 684.674 L752.124 684.674 L752.683 684.674 L753.242 684.674 L753.802 684.674 L754.361 684.674 L754.92 684.674 L755.479 684.674 L756.039 684.674 L756.598 684.674 L757.157 684.674 L757.716 684.674 L758.276 684.674 L758.835 684.674 L759.394 684.674 L759.953 684.674 L760.513 684.674 L761.072 684.674 L761.631 684.674 L762.19 684.674 L762.75 684.674 L763.309 684.674 L763.868 684.674 L764.427 684.674 L764.987 684.674 L765.546 684.674 L766.105 684.674 L766.664 684.674 L767.224 684.674 L767.783 684.674 L768.342 684.674 L768.901 684.674 L769.461 684.674 L770.02 684.674 L770.579 684.674 L771.138 684.674 L771.698 684.674 L772.257 684.674 L772.816 684.674 L773.375 684.674 L773.935 684.674 L774.494 684.674 L775.053 684.674 L775.612 684.674 L776.172 684.674 L776.731 684.674 L777.29 684.674 L777.849 684.674 L778.409 684.674 L778.968 684.674 L779.527 684.674 L780.086 684.674 L780.646 684.674 L781.205 684.674 L781.764 684.674 L782.323 684.674 L782.883 684.674 L783.442 684.674 L784.001 684.674 L784.56 684.674 L785.12 684.674 L785.679 684.674 L786.238 684.674 L786.797 684.674 L787.357 684.674 L787.916 684.674 L788.475 684.674 L789.034 684.674 L789.594 684.674 L790.153 684.674 L790.712 684.674 L791.271 684.674 L791.831 684.674 L792.39 684.674 L792.949 684.674 L793.508 684.674 L794.068 684.674 L794.627 684.674 L795.186 684.674 L795.745 684.674 L796.305 684.674 L796.864 684.674 L797.423 684.674 L797.982 684.674 L798.542 684.674 L799.101 684.674 L799.66 684.674 L800.219 684.674 L800.779 684.674 L801.338 684.674 L801.897 684.674 L802.456 684.674 L803.016 684.674 L803.575 684.674 L804.134 684.674 L804.693 684.674 L805.253 684.674 L805.812 684.674 L806.371 684.674 L806.931 684.674 L807.49 684.674 L808.049 684.674 L808.608 684.674 L809.168 684.674 L809.727 684.674 L810.286 684.674 L810.845 684.674 L811.405 684.674 L811.964 684.674 L812.523 684.674 L813.082 684.674 L813.642 684.674 L814.201 684.674 L814.76 684.674 L815.319 684.674 L815.879 684.674 L816.438 684.674 L816.997 684.674 L817.556 684.674 L818.116 684.674 L818.675 684.674 L819.234 684.674 L819.793 684.674 L820.353 684.674 L820.912 684.674 L821.471 684.674 L822.03 684.674 L822.59 684.674 L823.149 684.674 L823.708 684.674 L824.267 684.674 L824.827 684.674 L825.386 684.674 L825.945 684.674 L826.504 684.674 L827.064 684.674 L827.623 684.674 L828.182 684.674 L828.741 684.674 L829.301 684.674 L829.86 684.674 L830.419 684.674 L830.978 684.674 L831.538 684.674 L832.097 684.674 L832.656 684.674 L833.215 684.674 L833.775 684.674 L834.334 684.674 L834.893 684.674 L835.452 684.674 L836.012 684.674 L836.571 684.674 L837.13 684.674 L837.689 684.674 L838.249 684.674 L838.808 684.674 L839.367 684.674 L839.926 684.674 L840.486 684.674 L841.045 684.674 L841.604 684.674 L842.163 684.674 L842.723 684.674 L843.282 684.674 L843.841 684.674 L844.4 684.674 L844.96 684.674 L845.519 684.674 L846.078 684.674 L846.637 684.674 L847.197 684.674 L847.756 684.674 L848.315 684.674 L848.874 684.674 L849.434 684.674 L849.993 684.674 L850.552 684.674 L851.111 684.674 L851.671 684.674 L852.23 684.674 L852.789 684.674 L853.348 684.674 L853.908 684.674 L854.467 684.674 L855.026 684.674 L855.585 684.674 L856.145 684.674 L856.704 684.674 L857.263 684.674 L857.822 684.674 L858.382 684.674 L858.941 684.674 L859.5 684.674 L860.059 684.674 L860.619 684.674 L861.178 684.674 L861.737 684.674 L862.296 684.674 L862.856 684.674 L863.415 684.674 L863.974 684.674 L864.533 684.674 L865.093 684.674 L865.652 684.674 L866.211 684.674 L866.77 684.674 L867.33 684.674 L867.889 684.674 L868.448 684.674 L869.007 684.674 L869.567 684.674 L870.126 684.674 L870.685 684.674 L871.244 684.674 L871.804 684.674 L872.363 684.674 L872.922 684.674 L873.481 684.674 L874.041 684.674 L874.6 684.674 L875.159 684.674 L875.718 684.674 L876.278 684.674 L876.837 684.674 L877.396 684.674 L877.955 684.674 L878.515 684.674 L879.074 684.674 L879.633 684.674 L880.192 684.674 L880.752 684.674 L881.311 684.674 L881.87 684.674 L882.429 684.674 L882.989 684.674 L883.548 684.674 L884.107 684.674 L884.666 684.674 L885.226 684.674 L885.785 684.674 L886.344 684.674 L886.903 684.674 L887.463 684.674 L888.022 684.674 L888.581 684.674 L889.14 684.674 L889.7 684.674 L890.259 684.674 L890.818 684.674 L891.377 684.674 L891.937 684.674 L892.496 684.674 L893.055 684.674 L893.614 684.674 L894.174 684.674 L894.733 684.674 L895.292 684.674 L895.851 684.674 L896.411 684.674 L896.97 684.674 L897.529 684.674 L898.088 684.674 L898.648 684.674 L899.207 684.674 L899.766 684.674 L900.325 684.674 L900.885 684.674 L901.444 684.674 L902.003 684.674 L902.562 684.674 L903.122 684.674 L903.681 684.674 L904.24 684.674 L904.799 684.674 L905.359 684.674 L905.918 684.674 L906.477 684.674 L907.036 684.674 L907.596 684.674 L908.155 684.674 L908.714 684.674 L909.273 684.674 L909.833 684.674 L910.392 684.674 L910.951 684.674 L911.51 684.674 L912.07 684.674 L912.629 684.674 L913.188 684.674 L913.747 684.674 L914.307 684.674 L914.866 684.674 L915.425 684.674 L915.984 684.674 L916.544 684.674 L917.103 684.674 L917.662 684.674 L918.221 684.674 L918.781 684.674 L919.34 684.674 L919.899 684.674 L920.458 684.674 L921.018 684.674 L921.577 684.674 L922.136 684.674 L922.695 684.674 L923.255 684.674 L923.814 684.674 L924.373 684.674 L924.932 684.674 L925.492 684.674 L926.051 684.674 L926.61 684.674 L927.169 684.674 L927.729 684.674 L928.288 684.674 L928.847 684.674 L929.406 684.674 L929.966 684.674 L930.525 684.674 L931.084 684.674 L931.644 684.674 L932.203 684.674 L932.762 684.674 L933.321 684.674 L933.881 684.674 L934.44 684.674 L934.999 684.674 L935.558 684.674 L936.118 684.674 L936.677 684.674 L937.236 684.674 L937.795 684.674 L938.355 684.674 L938.914 684.674 L939.473 684.674 L940.032 684.674 L940.592 684.674 L941.151 684.674 L941.71 684.674 L942.269 684.674 L942.829 684.674 L943.388 684.674 L943.947 684.674 L944.506 684.674 L945.066 684.674 L945.625 684.674 L946.184 684.674 L946.743 684.674 L947.303 684.674 L947.862 684.674 L948.421 684.674 L948.98 684.674 L949.54 684.674 L950.099 684.674 L950.658 684.674 L951.217 684.674 L951.777 684.674 L952.336 684.674 L952.895 684.674 L953.454 684.674 L954.014 684.674 L954.573 684.674 L955.132 684.674 L955.691 684.674 L956.251 684.674 L956.81 684.674 L957.369 684.674 L957.928 684.674 L958.488 684.674 L959.047 684.674 L959.606 684.674 L960.165 684.674 L960.725 684.674 L961.284 684.674 L961.843 684.674 L962.402 684.674 L962.962 684.674 L963.521 684.674 L964.08 684.674 L964.639 684.674 L965.199 684.674 L965.758 684.674 L966.317 684.674 L966.876 684.674 L967.436 684.674 L967.995 684.674 L968.554 684.674 L969.113 684.674 L969.673 684.674 L970.232 684.674 L970.791 684.674 L971.35 684.674 L971.91 684.674 L972.469 684.674 L973.028 684.674 L973.587 684.674 L974.147 684.674 L974.706 684.674 L975.265 684.674 L975.824 684.674 L976.384 684.674 L976.943 684.674 L977.502 684.674 L978.061 684.674 L978.621 684.674 L979.18 684.674 L979.739 684.674 L980.298 684.674 L980.858 684.674 L981.417 684.674 L981.976 684.674 L982.535 684.674 L983.095 684.674 L983.654 684.674 L984.213 684.674 L984.772 684.674 L985.332 684.674 L985.891 684.674 L986.45 684.674 L987.009 684.674 L987.569 684.674 L988.128 684.674 L988.687 684.674 L989.246 684.674 L989.806 684.674 L990.365 684.674 L990.924 684.674 L991.483 684.674 L992.043 684.674 L992.602 684.674 L993.161 684.674 L993.72 684.674 L994.28 684.674 L994.839 684.674 L995.398 684.674 L995.957 684.674 L996.517 684.674 L997.076 684.674 L997.635 684.674 L998.194 684.674 L998.754 684.674 L999.313 684.674 L999.872 684.674 L1000.43 684.674 L1000.99 684.674 L1001.55 684.674 L1002.11 684.674 L1002.67 684.674 L1003.23 684.674 L1003.79 684.674 L1004.35 684.674 L1004.91 684.674 L1005.46 684.674 L1006.02 684.674 L1006.58 684.674 L1007.14 684.674 L1007.7 684.674 L1008.26 684.674 L1008.82 684.674 L1009.38 684.674 L1009.94 684.674 L1010.5 684.674 L1011.06 684.674 L1011.62 684.674 L1012.18 684.674 L1012.73 684.674 L1013.29 684.674 L1013.85 684.674 L1014.41 684.674 L1014.97 684.674 L1015.53 684.674 L1016.09 684.674 L1016.65 684.674 L1017.21 684.674 L1017.77 684.674 L1018.33 684.674 L1018.89 684.674 L1019.45 684.674 L1020.01 684.674 L1020.56 684.674 L1021.12 684.674 L1021.68 684.674 L1022.24 684.674 L1022.8 684.674 L1023.36 684.674 L1023.92 684.674 L1024.48 684.674 L1025.04 684.674 L1025.6 684.674 L1026.16 684.674 L1026.72 684.674 L1027.28 684.674 L1027.83 684.674 L1028.39 684.674 L1028.95 684.674 L1029.51 684.674 L1030.07 684.674 L1030.63 684.674 L1031.19 684.674 L1031.75 684.674 L1032.31 684.674 L1032.87 684.674 L1033.43 684.674 L1033.99 684.674 L1034.55 684.674 L1035.1 684.674 L1035.66 684.674 L1036.22 684.674 L1036.78 684.674 L1037.34 684.674 L1037.9 684.674 L1038.46 684.674 L1039.02 684.674 L1039.58 684.674 L1040.14 684.674 L1040.7 684.674 L1041.26 684.674 L1041.82 684.674 L1042.38 684.674 L1042.93 684.674 L1043.49 684.674 L1044.05 684.674 L1044.61 684.674 L1045.17 684.674 L1045.73 684.674 L1046.29 684.674 L1046.85 684.674 L1047.41 684.674 L1047.97 684.674 L1048.53 684.674 L1049.09 684.674 L1049.65 684.674 L1050.2 684.674 L1050.76 684.674 L1051.32 684.674 L1051.88 684.674 L1052.44 684.674 L1053 684.674 L1053.56 684.674 L1054.12 684.674 L1054.68 684.674 L1055.24 684.674 L1055.8 684.674 L1056.36 684.674 L1056.92 684.674 L1057.48 684.674 L1058.03 684.674 L1058.59 684.674 L1059.15 684.674 L1059.71 684.674 L1060.27 684.674 L1060.83 684.674 L1061.39 684.674 L1061.95 684.674 L1062.51 684.674 L1063.07 684.674 L1063.63 684.674 L1064.19 684.674 L1064.75 684.674 L1065.3 684.674 L1065.86 684.674 L1066.42 684.674 L1066.98 684.674 L1067.54 684.674 L1068.1 684.674 L1068.66 684.674 L1069.22 684.674 L1069.78 684.674 L1070.34 684.674 L1070.9 684.674 L1071.46 684.674 L1072.02 684.674 L1072.57 684.674 L1073.13 684.674 L1073.69 684.674 L1074.25 684.674 L1074.81 684.674 L1075.37 684.674 L1075.93 684.674 L1076.49 684.674 L1077.05 684.674 L1077.61 684.674 L1078.17 684.674 L1078.73 684.674 L1079.29 684.674 L1079.85 684.674 L1080.4 684.674 L1080.96 684.674 L1081.52 684.674 L1082.08 684.674 L1082.64 684.674 L1083.2 684.674 L1083.76 684.674 L1084.32 684.674 L1084.88 684.674 L1085.44 684.674 L1086 684.674 L1086.56 684.674 L1087.12 684.674 L1087.67 684.674 L1088.23 684.674 L1088.79 684.674 L1089.35 684.674 L1089.91 684.674 L1090.47 684.674 L1091.03 684.674 L1091.59 684.674 L1092.15 684.674 L1092.71 684.674 L1093.27 684.674 L1093.83 684.674 L1094.39 684.674 L1094.94 684.674 L1095.5 684.674 L1096.06 684.674 L1096.62 684.674 L1097.18 684.674 L1097.74 684.674 L1098.3 684.674 L1098.86 684.674 L1099.42 684.674 L1099.98 684.674 L1100.54 684.674 L1101.1 684.674 L1101.66 684.674 L1102.22 684.674 L1102.77 684.674 L1103.33 684.674 L1103.89 684.674 L1104.45 684.674 L1105.01 684.674 L1105.57 684.674 L1106.13 684.674 L1106.69 684.674 L1107.25 684.674 L1107.81 684.674 L1108.37 684.674 L1108.93 684.674 L1109.49 684.674 L1110.04 684.674 L1110.6 684.674 L1111.16 684.674 L1111.72 684.674 L1112.28 684.674 L1112.84 684.674 L1113.4 684.674 L1113.96 684.674 L1114.52 684.674 L1115.08 684.674 L1115.64 684.674 L1116.2 684.674 L1116.76 684.674 L1117.31 684.674 L1117.87 684.674 L1118.43 684.674 L1118.99 684.674 L1119.55 684.674 L1120.11 684.674 L1120.67 684.674 L1121.23 684.674 L1121.79 684.674 L1122.35 684.674 L1122.91 684.674 L1123.47 684.674 L1124.03 684.674 L1124.59 684.674 L1125.14 684.674 L1125.7 684.674 L1126.26 684.674 L1126.82 684.674 L1127.38 684.674 L1127.94 684.674 L1128.5 684.674 L1129.06 684.674 L1129.62 684.674 L1130.18 684.674 L1130.74 684.674 L1131.3 684.674 L1131.86 684.674 L1132.41 684.674 L1132.97 684.674 L1133.53 684.674 L1134.09 684.674 L1134.65 684.674 L1135.21 684.674 L1135.77 684.674 L1136.33 684.674 L1136.89 684.674 L1137.45 684.674 L1138.01 684.674 L1138.57 684.674 L1139.13 684.674 L1139.68 684.674 L1140.24 684.674 L1140.8 684.674 L1141.36 684.674 L1141.92 684.674 L1142.48 684.674 L1143.04 684.674 L1143.6 684.674 L1144.16 684.674 L1144.72 684.674 L1145.28 684.674 L1145.84 684.674 L1146.4 684.674 L1146.96 684.674 L1147.51 684.674 L1148.07 684.674 L1148.63 684.674 L1149.19 684.674 L1149.75 684.674 L1150.31 684.674 L1150.87 684.674 L1151.43 684.674 L1151.99 684.674 L1152.55 684.674 L1153.11 684.674 L1153.67 684.674 L1154.23 684.674 L1154.78 684.674 L1155.34 684.674 L1155.9 684.674 L1156.46 684.674 L1157.02 684.674 L1157.58 684.674 L1158.14 684.674 L1158.7 684.674 L1159.26 684.674 L1159.82 684.674 L1160.38 684.674 L1160.94 684.674 L1161.5 684.674 L1162.05 684.674 L1162.61 684.674 L1163.17 684.674 L1163.73 684.674 L1164.29 684.674 L1164.85 684.674 L1165.41 684.674 L1165.97 684.674 L1166.53 684.674 L1167.09 684.674 L1167.65 684.674 L1168.21 684.674 L1168.77 684.674 L1169.33 684.674 L1169.88 684.674 L1170.44 684.674 L1171 684.674 L1171.56 684.674 L1172.12 684.674 L1172.68 684.674 L1173.24 684.674 L1173.8 684.674 L1174.36 684.674 L1174.92 684.674 L1175.48 684.674 L1176.04 684.674 L1176.6 684.674 L1177.15 684.674 L1177.71 684.674 L1178.27 684.674 L1178.83 684.674 L1179.39 684.674 L1179.95 684.674 L1180.51 684.674 L1181.07 684.674 L1181.63 684.674 L1182.19 684.674 L1182.75 684.674 L1183.31 684.674 L1183.87 684.674 L1184.43 684.674 L1184.98 684.674 L1185.54 684.674 L1186.1 684.674 L1186.66 684.674 L1187.22 684.674 L1187.78 684.674 L1188.34 684.674 L1188.9 684.674 L1189.46 684.674 L1190.02 684.674 L1190.58 684.674 L1191.14 684.674 L1191.7 684.674 L1192.25 684.674 L1192.81 684.674 L1193.37 684.674 L1193.93 684.674 L1194.49 684.674 L1195.05 684.674 L1195.61 684.674 L1196.17 684.674 L1196.73 684.674 L1197.29 684.674 L1197.85 684.674 L1198.41 684.674 L1198.97 684.674 L1199.52 684.674 L1200.08 684.674 L1200.64 684.674 L1201.2 684.674 L1201.76 684.674 L1202.32 684.674 L1202.88 684.674 L1203.44 684.674 L1204 684.674 L1204.56 684.674 L1205.12 684.674 L1205.68 684.674 L1206.24 684.674 L1206.8 684.674 L1207.35 684.674 L1207.91 684.674 L1208.47 684.674 L1209.03 684.674 L1209.59 684.674 L1210.15 684.674 L1210.71 684.674 L1211.27 684.674 L1211.83 684.674 L1212.39 684.674 L1212.95 684.674 L1213.51 684.674 L1214.07 684.674 L1214.62 684.674 L1215.18 684.674 L1215.74 684.674 L1216.3 684.674 L1216.86 684.674 L1217.42 684.674 L1217.98 684.674 L1218.54 684.674 L1219.1 684.674 L1219.66 684.674 L1220.22 684.674 L1220.78 684.674 L1221.34 684.674 L1221.89 684.674 L1222.45 684.674 L1223.01 684.674 L1223.57 684.674 L1224.13 684.674 L1224.69 684.674 L1225.25 684.674 L1225.81 684.674 L1226.37 684.674 L1226.93 684.674 L1227.49 684.674 L1228.05 684.674 L1228.61 684.674 L1229.17 684.674 L1229.72 684.674 L1230.28 684.674 L1230.84 684.674 L1231.4 684.674 L1231.96 684.674 L1232.52 684.674 L1233.08 684.674 L1233.64 684.674 L1234.2 684.674 L1234.76 684.674 L1235.32 684.674 L1235.88 684.674 L1236.44 684.674 L1236.99 684.674 L1237.55 684.674 L1238.11 684.674 L1238.67 684.674 L1239.23 684.674 L1239.79 684.674 L1240.35 684.674 L1240.91 684.674 L1241.47 684.674 L1242.03 684.674 L1242.59 684.674 L1243.15 684.674 L1243.71 684.674 L1244.26 684.674 L1244.82 684.674 L1245.38 684.674 L1245.94 684.674 L1246.5 684.674 L1247.06 684.674 L1247.62 684.674 L1248.18 684.674 L1248.74 684.674 L1249.3 684.674 L1249.86 684.674 L1250.42 684.674 L1250.98 684.674 L1251.54 684.674 L1252.09 684.674 L1252.65 684.674 L1253.21 684.674 L1253.77 684.674 L1254.33 684.674 L1254.89 684.674 L1255.45 684.674 L1256.01 684.674 L1256.57 684.674 L1257.13 684.674 L1257.69 684.674 L1258.25 684.674 L1258.81 684.674 L1259.36 684.674 L1259.92 684.674 L1260.48 684.674 L1261.04 684.674 L1261.6 684.674 L1262.16 684.674 L1262.72 684.674 L1263.28 684.674 L1263.84 684.674 L1264.4 684.674 L1264.96 684.674 L1265.52 684.674 L1266.08 684.674 L1266.63 684.674 L1267.19 684.674 L1267.75 684.674 L1268.31 684.674 L1268.87 684.674 L1269.43 684.674 L1269.99 684.674 L1270.55 684.674 L1271.11 684.674 L1271.67 684.674 L1272.23 684.674 L1272.79 684.674 L1273.35 684.674 L1273.91 684.674 L1274.46 684.674 L1275.02 684.674 L1275.58 684.674 L1276.14 684.674 L1276.7 684.674 L1277.26 684.674 L1277.82 684.674 L1278.38 684.674 L1278.94 684.674 L1279.5 684.674 L1280.06 684.674 L1280.62 684.674 L1281.18 684.674 L1281.73 684.674 L1282.29 684.674 L1282.85 684.674 L1283.41 684.674 L1283.97 684.674 L1284.53 684.674 L1285.09 684.674 L1285.65 684.674 L1286.21 684.674 L1286.77 684.674 L1287.33 684.674 L1287.89 684.674 L1288.45 684.674 L1289 684.674 L1289.56 684.674 L1290.12 684.674 L1290.68 684.674 L1291.24 684.674 L1291.8 684.674 L1292.36 684.674 L1292.92 684.674 L1293.48 684.674 L1294.04 684.674 L1294.6 684.674 L1295.16 684.674 L1295.72 684.674 L1296.28 684.674 L1296.83 684.674 L1297.39 684.674 L1297.95 684.674 L1298.51 684.674 L1299.07 684.674 L1299.63 684.674 L1300.19 684.674 L1300.75 684.674 L1301.31 684.674 L1301.87 684.674 L1302.43 684.674 L1302.99 684.674 L1303.55 684.674 L1304.1 684.674 L1304.66 684.674 L1305.22 684.674 L1305.78 684.674 L1306.34 684.674 L1306.9 684.674 L1307.46 684.674 L1308.02 684.674 L1308.58 684.674 L1309.14 684.674 L1309.7 684.674 L1310.26 684.674 L1310.82 684.674 L1311.38 684.674 L1311.93 684.674 L1312.49 684.674 L1313.05 684.674 L1313.61 684.674 L1314.17 684.674 L1314.73 684.674 L1315.29 684.674 L1315.85 684.674 L1316.41 684.674 L1316.97 684.674 L1317.53 684.674 L1318.09 684.674 L1318.65 684.674 L1319.2 684.674 L1319.76 684.674 L1320.32 684.674 L1320.88 684.674 L1321.44 684.674 L1322 684.674 L1322.56 684.674 L1323.12 684.674 L1323.68 684.674 L1324.24 684.674 L1324.8 684.674 L1325.36 684.674 L1325.92 684.674 L1326.47 684.674 L1327.03 684.674 L1327.59 684.674 L1328.15 684.674 L1328.71 684.674 L1329.27 684.674 L1329.83 684.674 L1330.39 684.674 L1330.95 684.674 L1331.51 684.674 L1332.07 684.674 L1332.63 684.674 L1333.19 684.674 L1333.75 684.674 L1334.3 684.674 L1334.86 684.674 L1335.42 684.674 L1335.98 684.674 L1336.54 684.674 L1337.1 684.674 L1337.66 684.674 L1338.22 684.674 L1338.78 684.674 L1339.34 684.674 L1339.9 684.674 L1340.46 684.674 L1341.02 684.674 L1341.57 684.674 L1342.13 684.674 L1342.69 684.674 L1343.25 684.674 L1343.81 684.674 L1344.37 684.674 L1344.93 684.674 L1345.49 684.674 L1346.05 684.674 L1346.61 684.674 L1347.17 684.674 L1347.73 684.674 L1348.29 684.674 L1348.84 684.674 L1349.4 684.674 L1349.96 684.674 L1350.52 684.674 L1351.08 684.674 L1351.64 684.674 L1352.2 684.674 L1352.76 684.674 L1353.32 684.674 L1353.88 684.674 L1354.44 684.674 L1355 684.674 L1355.56 684.674 L1356.12 684.674 L1356.67 684.674 L1357.23 684.674 L1357.79 684.674 L1358.35 684.674 L1358.91 684.674 L1359.47 684.674 L1360.03 684.674 L1360.59 684.674 L1361.15 684.674 L1361.71 684.674 L1362.27 684.674 L1362.83 684.674 L1363.39 684.674 L1363.94 684.674 L1364.5 684.674 L1365.06 684.674 L1365.62 684.674 L1366.18 684.674 L1366.74 684.674 L1367.3 684.674 L1367.86 684.674 L1368.42 684.674 L1368.98 684.674 L1369.54 684.674 L1370.1 684.674 L1370.66 684.674 L1371.21 684.674 L1371.77 684.674 L1372.33 684.674 L1372.89 684.674 L1373.45 684.674 L1374.01 684.674 L1374.57 684.674 L1375.13 684.674 L1375.69 684.674 L1376.25 684.674 L1376.81 684.674 L1377.37 684.674 L1377.93 684.674 L1378.49 684.674 L1379.04 684.674 L1379.6 684.674 L1380.16 684.674 L1380.72 684.674 L1381.28 684.674 L1381.84 684.674 L1382.4 684.674 L1382.96 684.674 L1383.52 684.674 L1384.08 684.674 L1384.64 684.674 L1385.2 684.674 L1385.76 684.674 L1386.31 684.674 L1386.87 684.674 L1387.43 684.674 L1387.99 684.674 L1388.55 684.674 L1389.11 684.674 L1389.67 684.674 L1390.23 684.674 L1390.79 684.674 L1391.35 684.674 L1391.91 684.674 L1392.47 684.674 L1393.03 684.674 L1393.58 684.674 L1394.14 684.674 L1394.7 684.674 L1395.26 684.674 L1395.82 684.674 L1396.38 684.674 L1396.94 684.674 L1397.5 684.674 L1398.06 684.674 L1398.62 684.674 L1399.18 684.674 L1399.74 684.674 L1400.3 684.674 L1400.86 684.674 L1401.41 684.674 L1401.97 684.674 L1402.53 684.674 L1403.09 684.674 L1403.65 684.674 L1404.21 684.674 L1404.77 684.674 L1405.33 684.674 L1405.89 684.674 L1406.45 684.674 L1407.01 684.674 L1407.57 684.674 L1408.13 684.674 L1408.68 684.674 L1409.24 684.674 L1409.8 684.674 L1410.36 684.674 L1410.92 684.674 L1411.48 684.674 L1412.04 684.674 L1412.6 684.674 L1413.16 684.674 L1413.72 684.674 L1414.28 684.674 L1414.84 684.674 L1415.4 684.674 L1415.95 684.674 L1416.51 684.674 L1417.07 684.674 L1417.63 684.674 L1418.19 684.674 L1418.75 684.674 L1419.31 684.674 L1419.87 684.674 L1420.43 684.674 L1420.99 684.674 L1421.55 684.674 L1422.11 684.674 L1422.67 684.674 L1423.23 684.674 L1423.78 684.674 L1424.34 684.674 L1424.9 684.674 L1425.46 684.674 L1426.02 684.674 L1426.58 684.674 L1427.14 684.674 L1427.7 684.674 L1428.26 684.674 L1428.82 684.674 L1429.38 684.674 L1429.94 684.674 L1430.5 684.674 L1431.05 684.674 L1431.61 684.674 L1432.17 684.674 L1432.73 684.674 L1433.29 684.674 L1433.85 684.674 L1434.41 684.674 L1434.97 684.674 L1435.53 684.674 L1436.09 684.674 L1436.65 684.674 L1437.21 684.674 L1437.77 684.674 L1438.33 684.674 L1438.88 684.674 L1439.44 684.674 L1440 684.674 L1440.56 684.674 L1441.12 684.674 L1441.68 684.674 L1442.24 684.674 L1442.8 684.674 L1443.36 684.674 L1443.92 684.674 L1444.48 684.674 L1445.04 684.674 L1445.6 684.674 L1446.15 684.674 L1446.71 684.674 L1447.27 684.674 L1447.83 684.674 L1448.39 684.674 L1448.95 684.674 L1449.51 684.674 L1450.07 684.674 L1450.63 684.674 L1451.19 684.674 L1451.75 684.674 L1452.31 684.674 L1452.87 684.674 L1453.42 684.674 L1453.98 684.674 L1454.54 684.674 L1455.1 684.674 L1455.66 684.674 L1456.22 684.674 L1456.78 684.674 L1457.34 684.674 L1457.9 684.674 L1458.46 684.674 L1459.02 684.674 L1459.58 684.674 L1460.14 684.674 L1460.7 684.674 L1461.25 684.674 L1461.81 684.674 L1462.37 684.674 L1462.93 684.674 L1463.49 684.674 L1464.05 684.674 L1464.61 684.674 L1465.17 684.674 L1465.73 684.674 L1466.29 684.674 L1466.85 684.674 L1467.41 684.674 L1467.97 684.674 L1468.52 684.674 L1469.08 684.674 L1469.64 684.674 L1470.2 684.674 L1470.76 684.674 L1471.32 684.674 L1471.88 684.674 L1472.44 684.674 L1473 684.674 L1473.56 684.674 L1474.12 684.674 L1474.68 684.674 L1475.24 684.674 L1475.79 684.674 L1476.35 684.674 L1476.91 684.674 L1477.47 684.674 L1478.03 684.674 L1478.59 684.674 L1479.15 684.674 L1479.71 684.674 L1480.27 684.674 L1480.83 684.674 L1481.39 684.674 L1481.95 684.674 L1482.51 684.674 L1483.07 684.674 L1483.62 684.674 L1484.18 684.674 L1484.74 684.674 L1485.3 684.674 L1485.86 684.674 L1486.42 684.674 L1486.98 684.674 L1487.54 684.674 L1488.1 684.674 L1488.66 684.674 L1489.22 684.674 L1489.78 684.674 L1490.34 684.674 L1490.89 684.674 L1491.45 684.674 L1492.01 684.674 L1492.57 684.674 L1493.13 684.674 L1493.69 684.674 L1494.25 684.674 L1494.81 684.674 L1495.37 684.674 L1495.93 684.674 L1496.49 684.674 L1497.05 684.674 L1497.61 684.674 L1498.16 684.674 L1498.72 684.674 L1499.28 684.674 L1499.84 684.674 L1500.4 684.674 L1500.96 684.674 L1501.52 684.674 L1502.08 684.674 L1502.64 684.674 L1503.2 684.674 L1503.76 684.674 L1504.32 684.674 L1504.88 684.674 L1505.44 684.674 L1505.99 684.674 L1506.55 684.674 L1507.11 684.674 L1507.67 684.674 L1508.23 684.674 L1508.79 684.674 L1509.35 684.674 L1509.91 684.674 L1510.47 684.674 L1511.03 684.674 L1511.59 684.674 L1512.15 684.674 L1512.71 684.674 L1513.26 684.674 L1513.82 684.674 L1514.38 684.674 L1514.94 684.674 L1515.5 684.674 L1516.06 684.674 L1516.62 684.674 L1517.18 684.674 L1517.74 684.674 L1518.3 684.674 L1518.86 684.674 L1519.42 684.674 L1519.98 684.674 L1520.53 684.674 L1521.09 684.674 L1521.65 684.674 L1522.21 684.674 L1522.77 684.674 L1523.33 684.674 L1523.89 684.674 L1524.45 684.674 L1525.01 684.674 L1525.57 684.674 L1526.13 684.674 L1526.69 684.674 L1527.25 684.674 L1527.81 684.674 L1528.36 684.674 L1528.92 684.674 L1529.48 684.674 L1530.04 684.674 L1530.6 684.674 L1531.16 684.674 L1531.72 684.674 L1532.28 684.674 L1532.84 684.674 L1533.4 684.674 L1533.96 684.674 L1534.52 684.674 L1535.08 684.674 L1535.63 684.674 L1536.19 684.674 L1536.75 684.674 L1537.31 684.674 L1537.87 684.674 L1538.43 684.674 L1538.99 684.674 L1539.55 684.674 L1540.11 684.674 L1540.67 684.674 L1541.23 684.674 L1541.79 684.674 L1542.35 684.674 L1542.9 684.674 L1543.46 684.674 L1544.02 684.674 L1544.58 684.674 L1545.14 684.674 L1545.7 684.674 L1546.26 684.674 L1546.82 684.674 L1547.38 684.674 L1547.94 684.674 L1548.5 684.674 L1549.06 684.674 L1549.62 684.674 L1550.18 684.674 L1550.73 684.674 L1551.29 684.674 L1551.85 684.674 L1552.41 684.674 L1552.97 684.674 L1553.53 684.674 L1554.09 684.674 L1554.65 684.674 L1555.21 684.674 L1555.77 684.674 L1556.33 684.674 L1556.89 684.674 L1557.45 684.674 L1558 684.674 L1558.56 684.674 L1559.12 684.674 L1559.68 684.674 L1560.24 684.674 L1560.8 684.674 L1561.36 684.674 L1561.92 684.674 L1562.48 684.674 L1563.04 684.674 L1563.6 684.674 L1564.16 684.674 L1564.72 684.674 L1565.28 684.674 L1565.83 684.674 L1566.39 684.674 L1566.95 684.674 L1567.51 684.674 L1568.07 684.674 L1568.63 684.674 L1569.19 684.674 L1569.75 684.674 L1570.31 684.674 L1570.87 684.674 L1571.43 684.674 L1571.99 684.674 L1572.55 684.674 L1573.1 684.674 L1573.66 684.674 L1574.22 684.674 L1574.78 684.674 L1575.34 684.674 L1575.9 684.674 L1576.46 684.674 L1577.02 684.674 L1577.58 684.674 L1578.14 684.674 L1578.7 684.674 L1579.26 684.674 L1579.82 684.674 L1580.37 684.674 L1580.93 684.674 L1581.49 684.674 L1582.05 684.674 L1582.61 684.674 L1583.17 684.674 L1583.73 684.674 L1584.29 684.674 L1584.85 684.674 L1585.41 684.674 L1585.97 684.674 L1586.53 684.674 L1587.09 684.674 L1587.65 684.674 L1588.2 684.674 L1588.76 684.674 L1589.32 684.674 L1589.88 684.674 L1590.44 684.674 L1591 684.674 L1591.56 684.674 L1592.12 684.674 L1592.68 684.674 L1593.24 684.674 L1593.8 684.674 L1594.36 684.674 L1594.92 684.674 L1595.47 684.674 L1596.03 684.674 L1596.59 684.674 L1597.15 684.674 L1597.71 684.674 L1598.27 684.674 L1598.83 684.674 L1599.39 684.674 L1599.95 684.674 L1600.51 684.674 L1601.07 684.674 L1601.63 684.674 L1602.19 684.674 L1602.74 684.674 L1603.3 684.674 L1603.86 684.674 L1604.42 684.674 L1604.98 684.674 L1605.54 684.674 L1606.1 684.674 L1606.66 684.674 L1607.22 684.674 L1607.78 684.674 L1608.34 684.674 L1608.9 684.674 L1609.46 684.674 L1610.02 684.674 L1610.57 684.674 L1611.13 684.674 L1611.69 684.674 L1612.25 684.674 L1612.81 684.674 L1613.37 684.674 L1613.93 684.674 L1614.49 684.674 L1615.05 684.674 L1615.61 684.674 L1616.17 684.674 L1616.73 684.674 L1617.29 684.674 L1617.84 684.674 L1618.4 684.674 L1618.96 684.674 L1619.52 684.674 L1620.08 684.674 L1620.64 684.674 L1621.2 684.674 L1621.76 684.674 L1622.32 684.674 L1622.88 684.674 L1623.44 684.674 L1624 684.674 L1624.56 684.674 L1625.11 684.674 L1625.67 684.674 L1626.23 684.674 L1626.79 684.674 L1627.35 684.674 L1627.91 684.674 L1628.47 684.674 L1629.03 684.674 L1629.59 684.674 L1630.15 684.674 L1630.71 684.674 L1631.27 684.674 L1631.83 684.674 L1632.39 684.674 L1632.94 684.674 L1633.5 684.674 L1634.06 684.674 L1634.62 684.674 L1635.18 684.674 L1635.74 684.674 L1636.3 684.674 L1636.86 684.674 L1637.42 684.674 L1637.98 684.674 L1638.54 684.674 L1639.1 684.674 L1639.66 684.674 L1640.21 684.674 L1640.77 684.674 L1641.33 684.674 L1641.89 684.674 L1642.45 684.674 L1643.01 684.674 L1643.57 684.674 L1644.13 684.674 L1644.69 684.674 L1645.25 684.674 L1645.81 684.674 L1646.37 684.674 L1646.93 684.674 L1647.48 684.674 L1648.04 684.674 L1648.6 684.674 L1649.16 684.674 L1649.72 684.674 L1650.28 684.674 L1650.84 684.674 L1651.4 684.674 L1651.96 684.674 L1652.52 684.674 L1653.08 684.674 L1653.64 684.674 L1654.2 684.674 L1654.76 684.674 L1655.31 684.674 L1655.87 684.674 L1656.43 684.674 L1656.99 684.674 L1657.55 684.674 L1658.11 684.674 L1658.67 684.674 L1659.23 684.674 L1659.79 684.674 L1660.35 684.674 L1660.91 684.674 L1661.47 684.674 L1662.03 684.674 L1662.58 684.674 L1663.14 684.674 L1663.7 684.674 L1664.26 684.674 L1664.82 684.674 L1665.38 684.674 L1665.94 684.674 L1666.5 684.674 L1667.06 684.674 L1667.62 684.674 L1668.18 684.674 L1668.74 684.674 L1669.3 684.674 L1669.85 684.674 L1670.41 684.674 L1670.97 684.674 L1671.53 684.674 L1672.09 684.674 L1672.65 684.674 L1673.21 684.674 L1673.77 684.674 L1674.33 684.674 L1674.89 684.674 L1675.45 684.674 L1676.01 684.674 L1676.57 684.674 L1677.13 684.674 L1677.68 684.674 L1678.24 684.674 L1678.8 684.674 L1679.36 684.674 L1679.92 684.674 L1680.48 684.674 L1681.04 684.674 L1681.6 684.674 L1682.16 684.674 L1682.72 684.674 L1683.28 684.674 L1683.84 684.674 L1684.4 684.674 L1684.95 684.674 L1685.51 684.674 L1686.07 684.674 L1686.63 684.674 L1687.19 684.674 L1687.75 684.674 L1688.31 684.674 L1688.87 684.674 L1689.43 684.674 L1689.99 684.674 L1690.55 684.674 L1691.11 684.674 L1691.67 684.674 L1692.23 684.674 L1692.78 684.674 L1693.34 684.674 L1693.9 684.674 L1694.46 684.674 L1695.02 684.674 L1695.58 684.674 L1696.14 684.674 L1696.7 684.674 L1697.26 684.674 L1697.82 684.674 L1698.38 684.674 L1698.94 684.674 L1699.5 684.674 L1700.05 684.674 L1700.61 684.674 L1701.17 684.674 L1701.73 684.674 L1702.29 684.674 L1702.85 684.674 L1703.41 684.674 L1703.97 684.674 L1704.53 684.674 L1705.09 684.674 L1705.65 684.674 L1706.21 684.674 L1706.77 684.674 L1707.32 684.674 L1707.88 684.674 L1708.44 684.674 L1709 684.674 L1709.56 684.674 L1710.12 684.674 L1710.68 684.674 L1711.24 684.674 L1711.8 684.674 L1712.36 684.674 L1712.92 684.674 L1713.48 684.674 L1714.04 684.674 L1714.6 684.674 L1715.15 684.674 L1715.71 684.674 L1716.27 684.674 L1716.83 684.674 L1717.39 684.674 L1717.95 684.674 L1718.51 684.674 L1719.07 684.674 L1719.63 684.674 L1720.19 684.674 L1720.75 684.674 L1721.31 684.674 L1721.87 684.674 L1722.42 684.674 L1722.98 684.674 L1723.54 684.674 L1724.1 684.674 L1724.66 684.674 L1725.22 684.674 L1725.78 684.674 L1726.34 684.674 L1726.9 684.674 L1727.46 684.674 L1728.02 684.674 L1728.58 684.674 L1729.14 684.674 L1729.69 684.674 L1730.25 684.674 L1730.81 684.674 L1731.37 684.674 L1731.93 684.674 L1732.49 684.674 L1733.05 684.674 L1733.61 684.674 L1734.17 684.674 L1734.73 684.674 L1735.29 684.674 L1735.85 684.674 L1736.41 684.674 L1736.97 684.674 L1737.52 684.674 L1738.08 684.674 L1738.64 684.674 L1739.2 684.674 L1739.76 684.674 L1740.32 684.674 L1740.88 684.674 L1741.44 684.674 L1742 684.674 L1742.56 684.674 L1743.12 684.674 L1743.68 684.674 L1744.24 684.674 L1744.79 684.674 L1745.35 684.674 L1745.91 684.674 L1746.47 684.674 L1747.03 684.674 L1747.59 684.674 L1748.15 684.674 L1748.71 684.674 L1749.27 684.674 L1749.83 684.674 L1750.39 684.674 L1750.95 684.674 L1751.51 684.674 L1752.06 684.674 L1752.62 684.674 L1753.18 684.674 L1753.74 684.674 L1754.3 684.674 L1754.86 684.674 L1755.42 684.674 L1755.98 684.674 L1756.54 684.674 L1757.1 684.674 L1757.66 684.674 L1758.22 684.674 L1758.78 684.674 L1759.34 684.674 L1759.89 684.674 L1760.45 684.674 L1761.01 684.674 L1761.57 684.674 L1762.13 684.674 L1762.69 684.674 L1763.25 684.674 L1763.81 684.674 L1764.37 684.674 L1764.93 684.674 L1765.49 684.674 L1766.05 684.674 L1766.61 684.674 L1767.16 684.674 L1767.72 684.674 L1768.28 684.674 L1768.84 684.674 L1769.4 684.674 L1769.96 684.674 L1770.52 684.674 L1771.08 684.674 L1771.64 684.674 L1772.2 684.674 L1772.76 684.674 L1773.32 684.674 L1773.88 684.674 L1774.43 684.674 L1774.99 684.674 L1775.55 684.674 L1776.11 684.674 L1776.67 684.674 L1777.23 684.674 L1777.79 684.674 L1778.35 684.674 L1778.91 684.674 L1779.47 684.674 L1780.03 684.674 L1780.59 684.674 L1781.15 684.674 L1781.71 684.674 L1782.26 684.674 L1782.82 684.674 L1783.38 684.674 L1783.94 684.674 L1784.5 684.674 L1785.06 684.674 L1785.62 684.674 L1786.18 684.674 L1786.74 684.674 L1787.3 684.674 L1787.86 684.674 L1788.42 684.674 L1788.98 684.674 L1789.53 684.674 L1790.09 684.674 L1790.65 684.674 L1791.21 684.674 L1791.77 684.674 L1792.33 684.674 L1792.89 684.674 L1793.45 684.674 L1794.01 684.674 L1794.57 684.674 L1795.13 684.674 L1795.69 684.674 L1796.25 684.674 L1796.8 684.674 L1797.36 684.674 L1797.92 684.674 L1798.48 684.674 L1799.04 684.674 L1799.6 684.674 L1800.16 684.674 L1800.72 684.674 L1801.28 684.674 L1801.84 684.674 L1802.4 684.674 L1802.96 684.674 L1803.52 684.674 L1804.08 684.674 L1804.63 684.674 L1805.19 684.674 L1805.75 684.674 L1806.31 684.674 L1806.87 684.674 L1807.43 684.674 L1807.99 684.674 L1808.55 684.674 L1809.11 684.674 L1809.67 684.674 L1810.23 684.674 L1810.79 684.674 L1811.35 684.674 L1811.9 684.674 L1812.46 684.674 L1813.02 684.674 L1813.58 684.674 L1814.14 684.674 L1814.7 684.674 L1815.26 684.674 L1815.82 684.674 L1816.38 684.674 L1816.94 684.674 L1817.5 684.674 L1818.06 684.674 L1818.62 684.674 L1819.18 684.674 L1819.73 684.674 L1820.29 684.674 L1820.85 684.674 L1821.41 684.674 L1821.97 684.674 L1822.53 684.674 L1823.09 684.674 L1823.65 684.674 L1824.21 684.674 L1824.77 684.674 L1825.33 684.674 L1825.89 684.674 L1826.45 684.674 L1827 684.674 L1827.56 684.674 L1828.12 684.674 L1828.68 684.674 L1829.24 684.674 L1829.8 684.674 L1830.36 684.674 L1830.92 684.674 L1831.48 684.674 L1832.04 684.674 L1832.6 684.674 L1833.16 684.674 L1833.72 684.674 L1834.27 684.674 L1834.83 684.674 L1835.39 684.674 L1835.95 684.674 L1836.51 684.674 L1837.07 684.674 L1837.63 684.674 L1838.19 684.674 L1838.19 682.081 L1837.63 682.081 L1837.07 682.081 L1836.51 682.081 L1835.95 682.081 L1835.39 682.081 L1834.83 682.081 L1834.27 682.081 L1833.72 682.081 L1833.16 682.081 L1832.6 682.081 L1832.04 682.081 L1831.48 682.081 L1830.92 682.081 L1830.36 682.081 L1829.8 682.081 L1829.24 682.081 L1828.68 682.081 L1828.12 682.081 L1827.56 682.081 L1827 682.081 L1826.45 682.081 L1825.89 682.081 L1825.33 682.081 L1824.77 682.081 L1824.21 682.081 L1823.65 682.081 L1823.09 682.081 L1822.53 682.081 L1821.97 682.081 L1821.41 682.081 L1820.85 682.081 L1820.29 682.081 L1819.73 682.081 L1819.18 682.081 L1818.62 682.081 L1818.06 682.081 L1817.5 682.081 L1816.94 682.081 L1816.38 682.081 L1815.82 682.081 L1815.26 682.081 L1814.7 682.081 L1814.14 682.081 L1813.58 682.081 L1813.02 682.081 L1812.46 682.081 L1811.9 682.081 L1811.35 682.081 L1810.79 682.081 L1810.23 682.081 L1809.67 682.081 L1809.11 682.081 L1808.55 682.081 L1807.99 682.081 L1807.43 682.081 L1806.87 682.081 L1806.31 682.081 L1805.75 682.081 L1805.19 682.081 L1804.63 682.081 L1804.08 682.081 L1803.52 682.081 L1802.96 682.081 L1802.4 682.081 L1801.84 682.081 L1801.28 682.081 L1800.72 682.081 L1800.16 682.081 L1799.6 682.081 L1799.04 682.081 L1798.48 682.081 L1797.92 682.081 L1797.36 682.081 L1796.8 682.081 L1796.25 682.081 L1795.69 682.081 L1795.13 682.081 L1794.57 682.081 L1794.01 682.081 L1793.45 682.081 L1792.89 682.081 L1792.33 682.081 L1791.77 682.081 L1791.21 682.081 L1790.65 682.081 L1790.09 682.081 L1789.53 682.081 L1788.98 682.081 L1788.42 682.081 L1787.86 682.081 L1787.3 682.081 L1786.74 682.081 L1786.18 682.081 L1785.62 682.081 L1785.06 682.081 L1784.5 682.081 L1783.94 682.081 L1783.38 682.081 L1782.82 682.081 L1782.26 682.081 L1781.71 682.081 L1781.15 682.081 L1780.59 682.081 L1780.03 682.081 L1779.47 682.081 L1778.91 682.081 L1778.35 682.081 L1777.79 682.081 L1777.23 682.081 L1776.67 682.081 L1776.11 682.081 L1775.55 682.081 L1774.99 682.081 L1774.43 682.081 L1773.88 682.081 L1773.32 682.081 L1772.76 682.081 L1772.2 682.081 L1771.64 682.081 L1771.08 682.081 L1770.52 682.081 L1769.96 682.081 L1769.4 682.081 L1768.84 682.081 L1768.28 682.081 L1767.72 682.081 L1767.16 682.081 L1766.61 682.081 L1766.05 682.081 L1765.49 682.081 L1764.93 682.081 L1764.37 682.081 L1763.81 682.081 L1763.25 682.081 L1762.69 682.081 L1762.13 682.081 L1761.57 682.081 L1761.01 682.081 L1760.45 682.081 L1759.89 682.081 L1759.34 682.081 L1758.78 682.081 L1758.22 682.081 L1757.66 682.081 L1757.1 682.081 L1756.54 682.081 L1755.98 682.081 L1755.42 682.081 L1754.86 682.081 L1754.3 682.081 L1753.74 682.081 L1753.18 682.081 L1752.62 682.081 L1752.06 682.081 L1751.51 682.081 L1750.95 682.081 L1750.39 682.081 L1749.83 682.081 L1749.27 682.081 L1748.71 682.081 L1748.15 682.081 L1747.59 682.081 L1747.03 682.081 L1746.47 682.081 L1745.91 682.081 L1745.35 682.081 L1744.79 682.081 L1744.24 682.081 L1743.68 682.081 L1743.12 682.081 L1742.56 682.081 L1742 682.081 L1741.44 682.081 L1740.88 682.081 L1740.32 682.081 L1739.76 682.081 L1739.2 682.081 L1738.64 682.081 L1738.08 682.081 L1737.52 682.081 L1736.97 682.081 L1736.41 682.081 L1735.85 682.081 L1735.29 682.081 L1734.73 682.081 L1734.17 682.081 L1733.61 682.081 L1733.05 682.081 L1732.49 682.081 L1731.93 682.081 L1731.37 682.081 L1730.81 682.081 L1730.25 682.081 L1729.69 682.081 L1729.14 682.081 L1728.58 682.081 L1728.02 682.081 L1727.46 682.081 L1726.9 682.081 L1726.34 682.081 L1725.78 682.081 L1725.22 682.081 L1724.66 682.081 L1724.1 682.081 L1723.54 682.081 L1722.98 682.081 L1722.42 682.081 L1721.87 682.081 L1721.31 682.081 L1720.75 682.081 L1720.19 682.081 L1719.63 682.081 L1719.07 682.081 L1718.51 682.081 L1717.95 682.081 L1717.39 682.081 L1716.83 682.081 L1716.27 682.081 L1715.71 682.081 L1715.15 682.081 L1714.6 682.081 L1714.04 682.081 L1713.48 682.081 L1712.92 682.081 L1712.36 682.081 L1711.8 682.081 L1711.24 682.081 L1710.68 682.081 L1710.12 682.081 L1709.56 682.081 L1709 682.081 L1708.44 682.081 L1707.88 682.081 L1707.32 682.081 L1706.77 682.081 L1706.21 682.081 L1705.65 682.081 L1705.09 682.081 L1704.53 682.081 L1703.97 682.081 L1703.41 682.081 L1702.85 682.081 L1702.29 682.081 L1701.73 682.081 L1701.17 682.081 L1700.61 682.081 L1700.05 682.081 L1699.5 682.081 L1698.94 682.081 L1698.38 682.081 L1697.82 682.081 L1697.26 682.081 L1696.7 682.081 L1696.14 682.081 L1695.58 682.081 L1695.02 682.081 L1694.46 682.081 L1693.9 682.081 L1693.34 682.081 L1692.78 682.081 L1692.23 682.081 L1691.67 682.081 L1691.11 682.081 L1690.55 682.081 L1689.99 682.081 L1689.43 682.081 L1688.87 682.081 L1688.31 682.081 L1687.75 682.081 L1687.19 682.081 L1686.63 682.081 L1686.07 682.081 L1685.51 682.081 L1684.95 682.081 L1684.4 682.081 L1683.84 682.081 L1683.28 682.081 L1682.72 682.081 L1682.16 682.081 L1681.6 682.081 L1681.04 682.081 L1680.48 682.081 L1679.92 682.081 L1679.36 682.081 L1678.8 682.081 L1678.24 682.081 L1677.68 682.081 L1677.13 682.081 L1676.57 682.081 L1676.01 682.081 L1675.45 682.081 L1674.89 682.081 L1674.33 682.081 L1673.77 682.081 L1673.21 682.081 L1672.65 682.081 L1672.09 682.081 L1671.53 682.081 L1670.97 682.081 L1670.41 682.081 L1669.85 682.081 L1669.3 682.081 L1668.74 682.081 L1668.18 682.081 L1667.62 682.081 L1667.06 682.081 L1666.5 682.081 L1665.94 682.081 L1665.38 682.081 L1664.82 682.081 L1664.26 682.081 L1663.7 682.081 L1663.14 682.081 L1662.58 682.081 L1662.03 682.081 L1661.47 682.081 L1660.91 682.081 L1660.35 682.081 L1659.79 682.081 L1659.23 682.081 L1658.67 682.081 L1658.11 682.081 L1657.55 682.081 L1656.99 682.081 L1656.43 682.081 L1655.87 682.081 L1655.31 682.081 L1654.76 682.081 L1654.2 682.081 L1653.64 682.081 L1653.08 682.081 L1652.52 682.081 L1651.96 682.081 L1651.4 682.081 L1650.84 682.081 L1650.28 682.081 L1649.72 682.081 L1649.16 682.081 L1648.6 682.081 L1648.04 682.081 L1647.48 682.081 L1646.93 682.081 L1646.37 682.081 L1645.81 682.081 L1645.25 682.081 L1644.69 682.081 L1644.13 682.081 L1643.57 682.081 L1643.01 682.081 L1642.45 682.081 L1641.89 682.081 L1641.33 682.081 L1640.77 682.081 L1640.21 682.081 L1639.66 682.081 L1639.1 682.081 L1638.54 682.081 L1637.98 682.081 L1637.42 682.081 L1636.86 682.081 L1636.3 682.081 L1635.74 682.081 L1635.18 682.081 L1634.62 682.081 L1634.06 682.081 L1633.5 682.081 L1632.94 682.081 L1632.39 682.081 L1631.83 682.081 L1631.27 682.081 L1630.71 682.081 L1630.15 682.081 L1629.59 682.081 L1629.03 682.081 L1628.47 682.081 L1627.91 682.081 L1627.35 682.081 L1626.79 682.081 L1626.23 682.081 L1625.67 682.081 L1625.11 682.081 L1624.56 682.081 L1624 682.081 L1623.44 682.081 L1622.88 682.081 L1622.32 682.081 L1621.76 682.081 L1621.2 682.081 L1620.64 682.081 L1620.08 682.081 L1619.52 682.081 L1618.96 682.081 L1618.4 682.081 L1617.84 682.081 L1617.29 682.081 L1616.73 682.081 L1616.17 682.081 L1615.61 682.081 L1615.05 682.081 L1614.49 682.081 L1613.93 682.081 L1613.37 682.081 L1612.81 682.081 L1612.25 682.081 L1611.69 682.081 L1611.13 682.081 L1610.57 682.081 L1610.02 682.081 L1609.46 682.081 L1608.9 682.081 L1608.34 682.081 L1607.78 682.081 L1607.22 682.081 L1606.66 682.081 L1606.1 682.081 L1605.54 682.081 L1604.98 682.081 L1604.42 682.081 L1603.86 682.081 L1603.3 682.081 L1602.74 682.081 L1602.19 682.081 L1601.63 682.081 L1601.07 682.081 L1600.51 682.081 L1599.95 682.081 L1599.39 682.081 L1598.83 682.081 L1598.27 682.081 L1597.71 682.081 L1597.15 682.081 L1596.59 682.081 L1596.03 682.081 L1595.47 682.081 L1594.92 682.081 L1594.36 682.081 L1593.8 682.081 L1593.24 682.081 L1592.68 682.081 L1592.12 682.081 L1591.56 682.081 L1591 682.081 L1590.44 682.081 L1589.88 682.081 L1589.32 682.081 L1588.76 682.081 L1588.2 682.081 L1587.65 682.081 L1587.09 682.081 L1586.53 682.081 L1585.97 682.081 L1585.41 682.081 L1584.85 682.081 L1584.29 682.081 L1583.73 682.081 L1583.17 682.081 L1582.61 682.081 L1582.05 682.081 L1581.49 682.081 L1580.93 682.081 L1580.37 682.081 L1579.82 682.081 L1579.26 682.081 L1578.7 682.081 L1578.14 682.081 L1577.58 682.081 L1577.02 682.081 L1576.46 682.081 L1575.9 682.081 L1575.34 682.081 L1574.78 682.081 L1574.22 682.081 L1573.66 682.081 L1573.1 682.081 L1572.55 682.081 L1571.99 682.081 L1571.43 682.081 L1570.87 682.081 L1570.31 682.081 L1569.75 682.081 L1569.19 682.081 L1568.63 682.081 L1568.07 682.081 L1567.51 682.081 L1566.95 682.081 L1566.39 682.081 L1565.83 682.081 L1565.28 682.081 L1564.72 682.081 L1564.16 682.081 L1563.6 682.081 L1563.04 682.081 L1562.48 682.081 L1561.92 682.081 L1561.36 682.081 L1560.8 682.081 L1560.24 682.081 L1559.68 682.081 L1559.12 682.081 L1558.56 682.081 L1558 682.081 L1557.45 682.081 L1556.89 682.081 L1556.33 682.081 L1555.77 682.081 L1555.21 682.081 L1554.65 682.081 L1554.09 682.081 L1553.53 682.081 L1552.97 682.081 L1552.41 682.081 L1551.85 682.081 L1551.29 682.081 L1550.73 682.081 L1550.18 682.081 L1549.62 682.081 L1549.06 682.081 L1548.5 682.081 L1547.94 682.081 L1547.38 682.081 L1546.82 682.081 L1546.26 682.081 L1545.7 682.081 L1545.14 682.081 L1544.58 682.081 L1544.02 682.081 L1543.46 682.081 L1542.9 682.081 L1542.35 682.081 L1541.79 682.081 L1541.23 682.081 L1540.67 682.081 L1540.11 682.081 L1539.55 682.081 L1538.99 682.081 L1538.43 682.081 L1537.87 682.081 L1537.31 682.081 L1536.75 682.081 L1536.19 682.081 L1535.63 682.081 L1535.08 682.081 L1534.52 682.081 L1533.96 682.081 L1533.4 682.081 L1532.84 682.081 L1532.28 682.081 L1531.72 682.081 L1531.16 682.081 L1530.6 682.081 L1530.04 682.081 L1529.48 682.081 L1528.92 682.081 L1528.36 682.081 L1527.81 682.081 L1527.25 682.081 L1526.69 682.081 L1526.13 682.081 L1525.57 682.081 L1525.01 682.081 L1524.45 682.081 L1523.89 682.081 L1523.33 682.081 L1522.77 682.081 L1522.21 682.081 L1521.65 682.081 L1521.09 682.081 L1520.53 682.081 L1519.98 682.081 L1519.42 682.081 L1518.86 682.081 L1518.3 682.081 L1517.74 682.081 L1517.18 682.081 L1516.62 682.081 L1516.06 682.081 L1515.5 682.081 L1514.94 682.081 L1514.38 682.081 L1513.82 682.081 L1513.26 682.081 L1512.71 682.081 L1512.15 682.081 L1511.59 682.081 L1511.03 682.081 L1510.47 682.081 L1509.91 682.081 L1509.35 682.081 L1508.79 682.081 L1508.23 682.081 L1507.67 682.081 L1507.11 682.081 L1506.55 682.081 L1505.99 682.081 L1505.44 682.081 L1504.88 682.081 L1504.32 682.081 L1503.76 682.081 L1503.2 682.081 L1502.64 682.081 L1502.08 682.081 L1501.52 682.081 L1500.96 682.081 L1500.4 682.081 L1499.84 682.081 L1499.28 682.081 L1498.72 682.081 L1498.16 682.081 L1497.61 682.081 L1497.05 682.081 L1496.49 682.081 L1495.93 682.081 L1495.37 682.081 L1494.81 682.081 L1494.25 682.081 L1493.69 682.081 L1493.13 682.081 L1492.57 682.081 L1492.01 682.081 L1491.45 682.081 L1490.89 682.081 L1490.34 682.081 L1489.78 682.081 L1489.22 682.081 L1488.66 682.081 L1488.1 682.081 L1487.54 682.081 L1486.98 682.081 L1486.42 682.081 L1485.86 682.081 L1485.3 682.081 L1484.74 682.081 L1484.18 682.081 L1483.62 682.081 L1483.07 682.081 L1482.51 682.081 L1481.95 682.081 L1481.39 682.081 L1480.83 682.081 L1480.27 682.081 L1479.71 682.081 L1479.15 682.081 L1478.59 682.081 L1478.03 682.081 L1477.47 682.081 L1476.91 682.081 L1476.35 682.081 L1475.79 682.081 L1475.24 682.081 L1474.68 682.081 L1474.12 682.081 L1473.56 682.081 L1473 682.081 L1472.44 682.081 L1471.88 682.081 L1471.32 682.081 L1470.76 682.081 L1470.2 682.081 L1469.64 682.081 L1469.08 682.081 L1468.52 682.081 L1467.97 682.081 L1467.41 682.081 L1466.85 682.081 L1466.29 682.081 L1465.73 682.081 L1465.17 682.081 L1464.61 682.081 L1464.05 682.081 L1463.49 682.081 L1462.93 682.081 L1462.37 682.081 L1461.81 682.081 L1461.25 682.081 L1460.7 682.081 L1460.14 682.081 L1459.58 682.081 L1459.02 682.081 L1458.46 682.081 L1457.9 682.081 L1457.34 682.081 L1456.78 682.081 L1456.22 682.081 L1455.66 682.081 L1455.1 682.081 L1454.54 682.081 L1453.98 682.081 L1453.42 682.081 L1452.87 682.081 L1452.31 682.081 L1451.75 682.081 L1451.19 682.081 L1450.63 682.081 L1450.07 682.081 L1449.51 682.081 L1448.95 682.081 L1448.39 682.081 L1447.83 682.081 L1447.27 682.081 L1446.71 682.081 L1446.15 682.081 L1445.6 682.081 L1445.04 682.081 L1444.48 682.081 L1443.92 682.081 L1443.36 682.081 L1442.8 682.081 L1442.24 682.081 L1441.68 682.081 L1441.12 682.081 L1440.56 682.081 L1440 682.081 L1439.44 682.081 L1438.88 682.081 L1438.33 682.081 L1437.77 682.081 L1437.21 682.081 L1436.65 682.081 L1436.09 682.081 L1435.53 682.081 L1434.97 682.081 L1434.41 682.081 L1433.85 682.081 L1433.29 682.081 L1432.73 682.081 L1432.17 682.081 L1431.61 682.081 L1431.05 682.081 L1430.5 682.081 L1429.94 682.081 L1429.38 682.081 L1428.82 682.081 L1428.26 682.081 L1427.7 682.081 L1427.14 682.081 L1426.58 682.081 L1426.02 682.081 L1425.46 682.081 L1424.9 682.081 L1424.34 682.081 L1423.78 682.081 L1423.23 682.081 L1422.67 682.081 L1422.11 682.081 L1421.55 682.081 L1420.99 682.081 L1420.43 682.081 L1419.87 682.081 L1419.31 682.081 L1418.75 682.081 L1418.19 682.081 L1417.63 682.081 L1417.07 682.081 L1416.51 682.081 L1415.95 682.081 L1415.4 682.081 L1414.84 682.081 L1414.28 682.081 L1413.72 682.081 L1413.16 682.081 L1412.6 682.081 L1412.04 682.081 L1411.48 682.081 L1410.92 682.081 L1410.36 682.081 L1409.8 682.081 L1409.24 682.081 L1408.68 682.081 L1408.13 682.081 L1407.57 682.081 L1407.01 682.081 L1406.45 682.081 L1405.89 682.081 L1405.33 682.081 L1404.77 682.081 L1404.21 682.081 L1403.65 682.081 L1403.09 682.081 L1402.53 682.081 L1401.97 682.081 L1401.41 682.081 L1400.86 682.081 L1400.3 682.081 L1399.74 682.081 L1399.18 682.081 L1398.62 682.081 L1398.06 682.081 L1397.5 682.081 L1396.94 682.081 L1396.38 682.081 L1395.82 682.081 L1395.26 682.081 L1394.7 682.081 L1394.14 682.081 L1393.58 682.081 L1393.03 682.081 L1392.47 682.081 L1391.91 682.081 L1391.35 682.081 L1390.79 682.081 L1390.23 682.081 L1389.67 682.081 L1389.11 682.081 L1388.55 682.081 L1387.99 682.081 L1387.43 682.081 L1386.87 682.081 L1386.31 682.081 L1385.76 682.081 L1385.2 682.081 L1384.64 682.081 L1384.08 682.081 L1383.52 682.081 L1382.96 682.081 L1382.4 682.081 L1381.84 682.081 L1381.28 682.081 L1380.72 682.081 L1380.16 682.081 L1379.6 682.081 L1379.04 682.081 L1378.49 682.081 L1377.93 682.081 L1377.37 682.081 L1376.81 682.081 L1376.25 682.081 L1375.69 682.081 L1375.13 682.081 L1374.57 682.081 L1374.01 682.081 L1373.45 682.081 L1372.89 682.081 L1372.33 682.081 L1371.77 682.081 L1371.21 682.081 L1370.66 682.081 L1370.1 682.081 L1369.54 682.081 L1368.98 682.081 L1368.42 682.081 L1367.86 682.081 L1367.3 682.081 L1366.74 682.081 L1366.18 682.081 L1365.62 682.081 L1365.06 682.081 L1364.5 682.081 L1363.94 682.081 L1363.39 682.081 L1362.83 682.081 L1362.27 682.081 L1361.71 682.081 L1361.15 682.081 L1360.59 682.081 L1360.03 682.081 L1359.47 682.081 L1358.91 682.081 L1358.35 682.081 L1357.79 682.081 L1357.23 682.081 L1356.67 682.081 L1356.12 682.081 L1355.56 682.081 L1355 682.081 L1354.44 682.081 L1353.88 682.081 L1353.32 682.081 L1352.76 682.081 L1352.2 682.081 L1351.64 682.081 L1351.08 682.081 L1350.52 682.081 L1349.96 682.081 L1349.4 682.081 L1348.84 682.081 L1348.29 682.081 L1347.73 682.081 L1347.17 682.081 L1346.61 682.081 L1346.05 682.081 L1345.49 682.081 L1344.93 682.081 L1344.37 682.081 L1343.81 682.081 L1343.25 682.081 L1342.69 682.081 L1342.13 682.081 L1341.57 682.081 L1341.02 682.081 L1340.46 682.081 L1339.9 682.081 L1339.34 682.081 L1338.78 682.081 L1338.22 682.081 L1337.66 682.081 L1337.1 682.081 L1336.54 682.081 L1335.98 682.081 L1335.42 682.081 L1334.86 682.081 L1334.3 682.081 L1333.75 682.081 L1333.19 682.081 L1332.63 682.081 L1332.07 682.081 L1331.51 682.081 L1330.95 682.081 L1330.39 682.081 L1329.83 682.081 L1329.27 682.081 L1328.71 682.081 L1328.15 682.081 L1327.59 682.081 L1327.03 682.081 L1326.47 682.081 L1325.92 682.081 L1325.36 682.081 L1324.8 682.081 L1324.24 682.081 L1323.68 682.081 L1323.12 682.081 L1322.56 682.081 L1322 682.081 L1321.44 682.081 L1320.88 682.081 L1320.32 682.081 L1319.76 682.081 L1319.2 682.081 L1318.65 682.081 L1318.09 682.081 L1317.53 682.081 L1316.97 682.081 L1316.41 682.081 L1315.85 682.081 L1315.29 682.081 L1314.73 682.081 L1314.17 682.081 L1313.61 682.081 L1313.05 682.081 L1312.49 682.081 L1311.93 682.081 L1311.38 682.081 L1310.82 682.081 L1310.26 682.081 L1309.7 682.081 L1309.14 682.081 L1308.58 682.081 L1308.02 682.081 L1307.46 682.081 L1306.9 682.081 L1306.34 682.081 L1305.78 682.081 L1305.22 682.081 L1304.66 682.081 L1304.1 682.081 L1303.55 682.081 L1302.99 682.081 L1302.43 682.081 L1301.87 682.081 L1301.31 682.081 L1300.75 682.081 L1300.19 682.081 L1299.63 682.081 L1299.07 682.081 L1298.51 682.081 L1297.95 682.081 L1297.39 682.081 L1296.83 682.081 L1296.28 682.081 L1295.72 682.081 L1295.16 682.081 L1294.6 682.081 L1294.04 682.081 L1293.48 682.081 L1292.92 682.081 L1292.36 682.081 L1291.8 682.081 L1291.24 682.081 L1290.68 682.081 L1290.12 682.081 L1289.56 682.081 L1289 682.081 L1288.45 682.081 L1287.89 682.081 L1287.33 682.081 L1286.77 682.081 L1286.21 682.081 L1285.65 682.081 L1285.09 682.081 L1284.53 682.081 L1283.97 682.081 L1283.41 682.081 L1282.85 682.081 L1282.29 682.081 L1281.73 682.081 L1281.18 682.081 L1280.62 682.081 L1280.06 682.081 L1279.5 682.081 L1278.94 682.081 L1278.38 682.081 L1277.82 682.081 L1277.26 682.081 L1276.7 682.081 L1276.14 682.081 L1275.58 682.081 L1275.02 682.081 L1274.46 682.081 L1273.91 682.081 L1273.35 682.081 L1272.79 682.081 L1272.23 682.081 L1271.67 682.081 L1271.11 682.081 L1270.55 682.081 L1269.99 682.081 L1269.43 682.081 L1268.87 682.081 L1268.31 682.081 L1267.75 682.081 L1267.19 682.081 L1266.63 682.081 L1266.08 682.081 L1265.52 682.081 L1264.96 682.081 L1264.4 682.081 L1263.84 682.081 L1263.28 682.081 L1262.72 682.081 L1262.16 682.081 L1261.6 682.081 L1261.04 682.081 L1260.48 682.081 L1259.92 682.081 L1259.36 682.081 L1258.81 682.081 L1258.25 682.081 L1257.69 682.081 L1257.13 682.081 L1256.57 682.081 L1256.01 682.081 L1255.45 682.081 L1254.89 682.081 L1254.33 682.081 L1253.77 682.081 L1253.21 682.081 L1252.65 682.081 L1252.09 682.081 L1251.54 682.081 L1250.98 682.081 L1250.42 682.081 L1249.86 682.081 L1249.3 682.081 L1248.74 682.081 L1248.18 682.081 L1247.62 682.081 L1247.06 682.081 L1246.5 682.081 L1245.94 682.081 L1245.38 682.081 L1244.82 682.081 L1244.26 682.081 L1243.71 682.081 L1243.15 682.081 L1242.59 682.081 L1242.03 682.081 L1241.47 682.081 L1240.91 682.081 L1240.35 682.081 L1239.79 682.081 L1239.23 682.081 L1238.67 682.081 L1238.11 682.081 L1237.55 682.081 L1236.99 682.081 L1236.44 682.081 L1235.88 682.081 L1235.32 682.081 L1234.76 682.081 L1234.2 682.081 L1233.64 682.081 L1233.08 682.081 L1232.52 682.081 L1231.96 682.081 L1231.4 682.081 L1230.84 682.081 L1230.28 682.081 L1229.72 682.081 L1229.17 682.081 L1228.61 682.081 L1228.05 682.081 L1227.49 682.081 L1226.93 682.081 L1226.37 682.081 L1225.81 682.081 L1225.25 682.081 L1224.69 682.081 L1224.13 682.081 L1223.57 682.081 L1223.01 682.081 L1222.45 682.081 L1221.89 682.081 L1221.34 682.081 L1220.78 682.081 L1220.22 682.081 L1219.66 682.081 L1219.1 682.081 L1218.54 682.081 L1217.98 682.081 L1217.42 682.081 L1216.86 682.081 L1216.3 682.081 L1215.74 682.081 L1215.18 682.081 L1214.62 682.081 L1214.07 682.081 L1213.51 682.081 L1212.95 682.081 L1212.39 682.081 L1211.83 682.081 L1211.27 682.081 L1210.71 682.081 L1210.15 682.081 L1209.59 682.081 L1209.03 682.081 L1208.47 682.081 L1207.91 682.081 L1207.35 682.081 L1206.8 682.081 L1206.24 682.081 L1205.68 682.081 L1205.12 682.081 L1204.56 682.081 L1204 682.081 L1203.44 682.081 L1202.88 682.081 L1202.32 682.081 L1201.76 682.081 L1201.2 682.081 L1200.64 682.081 L1200.08 682.081 L1199.52 682.081 L1198.97 682.081 L1198.41 682.081 L1197.85 682.081 L1197.29 682.081 L1196.73 682.081 L1196.17 682.081 L1195.61 682.081 L1195.05 682.081 L1194.49 682.081 L1193.93 682.081 L1193.37 682.081 L1192.81 682.081 L1192.25 682.081 L1191.7 682.081 L1191.14 682.081 L1190.58 682.081 L1190.02 682.081 L1189.46 682.081 L1188.9 682.081 L1188.34 682.081 L1187.78 682.081 L1187.22 682.081 L1186.66 682.081 L1186.1 682.081 L1185.54 682.081 L1184.98 682.081 L1184.43 682.081 L1183.87 682.081 L1183.31 682.081 L1182.75 682.081 L1182.19 682.081 L1181.63 682.081 L1181.07 682.081 L1180.51 682.081 L1179.95 682.081 L1179.39 682.081 L1178.83 682.081 L1178.27 682.081 L1177.71 682.081 L1177.15 682.081 L1176.6 682.081 L1176.04 682.081 L1175.48 682.081 L1174.92 682.081 L1174.36 682.081 L1173.8 682.081 L1173.24 682.081 L1172.68 682.081 L1172.12 682.081 L1171.56 682.081 L1171 682.081 L1170.44 682.081 L1169.88 682.081 L1169.33 682.081 L1168.77 682.081 L1168.21 682.081 L1167.65 682.081 L1167.09 682.081 L1166.53 682.081 L1165.97 682.081 L1165.41 682.081 L1164.85 682.081 L1164.29 682.081 L1163.73 682.081 L1163.17 682.081 L1162.61 682.081 L1162.05 682.081 L1161.5 682.081 L1160.94 682.081 L1160.38 682.081 L1159.82 682.081 L1159.26 682.081 L1158.7 682.081 L1158.14 682.081 L1157.58 682.081 L1157.02 682.081 L1156.46 682.081 L1155.9 682.081 L1155.34 682.081 L1154.78 682.081 L1154.23 682.081 L1153.67 682.081 L1153.11 682.081 L1152.55 682.081 L1151.99 682.081 L1151.43 682.081 L1150.87 682.081 L1150.31 682.081 L1149.75 682.081 L1149.19 682.081 L1148.63 682.081 L1148.07 682.081 L1147.51 682.081 L1146.96 682.081 L1146.4 682.081 L1145.84 682.081 L1145.28 682.081 L1144.72 682.081 L1144.16 682.081 L1143.6 682.081 L1143.04 682.081 L1142.48 682.081 L1141.92 682.081 L1141.36 682.081 L1140.8 682.081 L1140.24 682.081 L1139.68 682.081 L1139.13 682.081 L1138.57 682.081 L1138.01 682.081 L1137.45 682.081 L1136.89 682.081 L1136.33 682.081 L1135.77 682.081 L1135.21 682.081 L1134.65 682.081 L1134.09 682.081 L1133.53 682.081 L1132.97 682.081 L1132.41 682.081 L1131.86 682.081 L1131.3 682.081 L1130.74 682.081 L1130.18 682.081 L1129.62 682.081 L1129.06 682.081 L1128.5 682.081 L1127.94 682.081 L1127.38 682.081 L1126.82 682.081 L1126.26 682.081 L1125.7 682.081 L1125.14 682.081 L1124.59 682.081 L1124.03 682.081 L1123.47 682.081 L1122.91 682.081 L1122.35 682.081 L1121.79 682.081 L1121.23 682.081 L1120.67 682.081 L1120.11 682.081 L1119.55 682.081 L1118.99 682.081 L1118.43 682.081 L1117.87 682.081 L1117.31 682.081 L1116.76 682.081 L1116.2 682.081 L1115.64 682.081 L1115.08 682.081 L1114.52 682.081 L1113.96 682.081 L1113.4 682.081 L1112.84 682.081 L1112.28 682.081 L1111.72 682.081 L1111.16 682.081 L1110.6 682.081 L1110.04 682.081 L1109.49 682.081 L1108.93 682.081 L1108.37 682.081 L1107.81 682.081 L1107.25 682.081 L1106.69 682.081 L1106.13 682.081 L1105.57 682.081 L1105.01 682.081 L1104.45 682.081 L1103.89 682.081 L1103.33 682.081 L1102.77 682.081 L1102.22 682.081 L1101.66 682.081 L1101.1 682.081 L1100.54 682.081 L1099.98 682.081 L1099.42 682.081 L1098.86 682.081 L1098.3 682.081 L1097.74 682.081 L1097.18 682.081 L1096.62 682.081 L1096.06 682.081 L1095.5 682.081 L1094.94 682.081 L1094.39 682.081 L1093.83 682.081 L1093.27 682.081 L1092.71 682.081 L1092.15 682.081 L1091.59 682.081 L1091.03 682.081 L1090.47 682.081 L1089.91 682.081 L1089.35 682.081 L1088.79 682.081 L1088.23 682.081 L1087.67 682.081 L1087.12 682.081 L1086.56 682.081 L1086 682.081 L1085.44 682.081 L1084.88 682.081 L1084.32 682.081 L1083.76 682.081 L1083.2 682.081 L1082.64 682.081 L1082.08 682.081 L1081.52 682.081 L1080.96 682.081 L1080.4 682.081 L1079.85 682.081 L1079.29 682.081 L1078.73 682.081 L1078.17 682.081 L1077.61 682.081 L1077.05 682.081 L1076.49 682.081 L1075.93 682.081 L1075.37 682.081 L1074.81 682.081 L1074.25 682.081 L1073.69 682.081 L1073.13 682.081 L1072.57 682.081 L1072.02 682.081 L1071.46 682.081 L1070.9 682.081 L1070.34 682.081 L1069.78 682.081 L1069.22 682.081 L1068.66 682.081 L1068.1 682.081 L1067.54 682.081 L1066.98 682.081 L1066.42 682.081 L1065.86 682.081 L1065.3 682.081 L1064.75 682.081 L1064.19 682.081 L1063.63 682.081 L1063.07 682.081 L1062.51 682.081 L1061.95 682.081 L1061.39 682.081 L1060.83 682.081 L1060.27 682.081 L1059.71 682.081 L1059.15 682.081 L1058.59 682.081 L1058.03 682.081 L1057.48 682.081 L1056.92 682.081 L1056.36 682.081 L1055.8 682.081 L1055.24 682.081 L1054.68 682.081 L1054.12 682.081 L1053.56 682.081 L1053 682.081 L1052.44 682.081 L1051.88 682.081 L1051.32 682.081 L1050.76 682.081 L1050.2 682.081 L1049.65 682.081 L1049.09 682.081 L1048.53 682.081 L1047.97 682.081 L1047.41 682.081 L1046.85 682.081 L1046.29 682.081 L1045.73 682.081 L1045.17 682.081 L1044.61 682.081 L1044.05 682.081 L1043.49 682.081 L1042.93 682.081 L1042.38 682.081 L1041.82 682.081 L1041.26 682.081 L1040.7 682.081 L1040.14 682.081 L1039.58 682.081 L1039.02 682.081 L1038.46 682.081 L1037.9 682.081 L1037.34 682.081 L1036.78 682.081 L1036.22 682.081 L1035.66 682.081 L1035.1 682.081 L1034.55 682.081 L1033.99 682.081 L1033.43 682.081 L1032.87 682.081 L1032.31 682.081 L1031.75 682.081 L1031.19 682.081 L1030.63 682.081 L1030.07 682.081 L1029.51 682.081 L1028.95 682.081 L1028.39 682.081 L1027.83 682.081 L1027.28 682.081 L1026.72 682.081 L1026.16 682.081 L1025.6 682.081 L1025.04 682.081 L1024.48 682.081 L1023.92 682.081 L1023.36 682.081 L1022.8 682.081 L1022.24 682.081 L1021.68 682.081 L1021.12 682.081 L1020.56 682.081 L1020.01 682.081 L1019.45 682.081 L1018.89 682.081 L1018.33 682.081 L1017.77 682.081 L1017.21 682.081 L1016.65 682.081 L1016.09 682.081 L1015.53 682.081 L1014.97 682.081 L1014.41 682.081 L1013.85 682.081 L1013.29 682.081 L1012.73 682.081 L1012.18 682.081 L1011.62 682.081 L1011.06 682.081 L1010.5 682.081 L1009.94 682.081 L1009.38 682.081 L1008.82 682.081 L1008.26 682.081 L1007.7 682.081 L1007.14 682.081 L1006.58 682.081 L1006.02 682.081 L1005.46 682.081 L1004.91 682.081 L1004.35 682.081 L1003.79 682.081 L1003.23 682.081 L1002.67 682.081 L1002.11 682.081 L1001.55 682.081 L1000.99 682.081 L1000.43 682.081 L999.872 682.081 L999.313 682.081 L998.754 682.081 L998.194 682.081 L997.635 682.081 L997.076 682.081 L996.517 682.081 L995.957 682.081 L995.398 682.081 L994.839 682.081 L994.28 682.081 L993.72 682.081 L993.161 682.081 L992.602 682.081 L992.043 682.081 L991.483 682.081 L990.924 682.081 L990.365 682.081 L989.806 682.081 L989.246 682.081 L988.687 682.081 L988.128 682.081 L987.569 682.081 L987.009 682.081 L986.45 682.081 L985.891 682.081 L985.332 682.081 L984.772 682.081 L984.213 682.081 L983.654 682.081 L983.095 682.081 L982.535 682.081 L981.976 682.081 L981.417 682.081 L980.858 682.081 L980.298 682.081 L979.739 682.081 L979.18 682.081 L978.621 682.081 L978.061 682.081 L977.502 682.081 L976.943 682.081 L976.384 682.081 L975.824 682.081 L975.265 682.081 L974.706 682.081 L974.147 682.081 L973.587 682.081 L973.028 682.081 L972.469 682.081 L971.91 682.081 L971.35 682.081 L970.791 682.081 L970.232 682.081 L969.673 682.081 L969.113 682.081 L968.554 682.081 L967.995 682.081 L967.436 682.081 L966.876 682.081 L966.317 682.081 L965.758 682.081 L965.199 682.081 L964.639 682.081 L964.08 682.081 L963.521 682.081 L962.962 682.081 L962.402 682.081 L961.843 682.081 L961.284 682.081 L960.725 682.081 L960.165 682.081 L959.606 682.081 L959.047 682.081 L958.488 682.081 L957.928 682.081 L957.369 682.081 L956.81 682.081 L956.251 682.081 L955.691 682.081 L955.132 682.081 L954.573 682.081 L954.014 682.081 L953.454 682.081 L952.895 682.081 L952.336 682.081 L951.777 682.081 L951.217 682.081 L950.658 682.081 L950.099 682.081 L949.54 682.081 L948.98 682.081 L948.421 682.081 L947.862 682.081 L947.303 682.081 L946.743 682.081 L946.184 682.081 L945.625 682.081 L945.066 682.081 L944.506 682.081 L943.947 682.081 L943.388 682.081 L942.829 682.081 L942.269 682.081 L941.71 682.081 L941.151 682.081 L940.592 682.081 L940.032 682.081 L939.473 682.081 L938.914 682.081 L938.355 682.081 L937.795 682.081 L937.236 682.081 L936.677 682.081 L936.118 682.081 L935.558 682.081 L934.999 682.081 L934.44 682.081 L933.881 682.081 L933.321 682.081 L932.762 682.081 L932.203 682.081 L931.644 682.081 L931.084 682.081 L930.525 682.081 L929.966 682.081 L929.406 682.081 L928.847 682.081 L928.288 682.081 L927.729 682.081 L927.169 682.081 L926.61 682.081 L926.051 682.081 L925.492 682.081 L924.932 682.081 L924.373 682.081 L923.814 682.081 L923.255 682.081 L922.695 682.081 L922.136 682.081 L921.577 682.081 L921.018 682.081 L920.458 682.081 L919.899 682.081 L919.34 682.081 L918.781 682.081 L918.221 682.081 L917.662 682.081 L917.103 682.081 L916.544 682.081 L915.984 682.081 L915.425 682.081 L914.866 682.081 L914.307 682.081 L913.747 682.081 L913.188 682.081 L912.629 682.081 L912.07 682.081 L911.51 682.081 L910.951 682.081 L910.392 682.081 L909.833 682.081 L909.273 682.081 L908.714 682.081 L908.155 682.081 L907.596 682.081 L907.036 682.081 L906.477 682.081 L905.918 682.081 L905.359 682.081 L904.799 682.081 L904.24 682.081 L903.681 682.081 L903.122 682.081 L902.562 682.081 L902.003 682.081 L901.444 682.081 L900.885 682.081 L900.325 682.081 L899.766 682.081 L899.207 682.081 L898.648 682.081 L898.088 682.081 L897.529 682.081 L896.97 682.081 L896.411 682.081 L895.851 682.081 L895.292 682.081 L894.733 682.081 L894.174 682.081 L893.614 682.081 L893.055 682.081 L892.496 682.081 L891.937 682.081 L891.377 682.081 L890.818 682.081 L890.259 682.081 L889.7 682.081 L889.14 682.081 L888.581 682.081 L888.022 682.081 L887.463 682.081 L886.903 682.081 L886.344 682.081 L885.785 682.081 L885.226 682.081 L884.666 682.081 L884.107 682.081 L883.548 682.081 L882.989 682.081 L882.429 682.081 L881.87 682.081 L881.311 682.081 L880.752 682.081 L880.192 682.081 L879.633 682.081 L879.074 682.081 L878.515 682.081 L877.955 682.081 L877.396 682.081 L876.837 682.081 L876.278 682.081 L875.718 682.081 L875.159 682.081 L874.6 682.081 L874.041 682.081 L873.481 682.081 L872.922 682.081 L872.363 682.081 L871.804 682.081 L871.244 682.081 L870.685 682.081 L870.126 682.081 L869.567 682.081 L869.007 682.081 L868.448 682.081 L867.889 682.081 L867.33 682.081 L866.77 682.081 L866.211 682.081 L865.652 682.081 L865.093 682.081 L864.533 682.081 L863.974 682.081 L863.415 682.081 L862.856 682.081 L862.296 682.081 L861.737 682.081 L861.178 682.081 L860.619 682.081 L860.059 682.081 L859.5 682.081 L858.941 682.081 L858.382 682.081 L857.822 682.081 L857.263 682.081 L856.704 682.081 L856.145 682.081 L855.585 682.081 L855.026 682.081 L854.467 682.081 L853.908 682.081 L853.348 682.081 L852.789 682.081 L852.23 682.081 L851.671 682.081 L851.111 682.081 L850.552 682.081 L849.993 682.081 L849.434 682.081 L848.874 682.081 L848.315 682.081 L847.756 682.081 L847.197 682.081 L846.637 682.081 L846.078 682.081 L845.519 682.081 L844.96 682.081 L844.4 682.081 L843.841 682.081 L843.282 682.081 L842.723 682.081 L842.163 682.081 L841.604 682.081 L841.045 682.081 L840.486 682.081 L839.926 682.081 L839.367 682.081 L838.808 682.081 L838.249 682.081 L837.689 682.081 L837.13 682.081 L836.571 682.081 L836.012 682.081 L835.452 682.081 L834.893 682.081 L834.334 682.081 L833.775 682.081 L833.215 682.081 L832.656 682.081 L832.097 682.081 L831.538 682.081 L830.978 682.081 L830.419 682.081 L829.86 682.081 L829.301 682.081 L828.741 682.081 L828.182 682.081 L827.623 682.081 L827.064 682.081 L826.504 682.081 L825.945 682.081 L825.386 682.081 L824.827 682.081 L824.267 682.081 L823.708 682.081 L823.149 682.081 L822.59 682.081 L822.03 682.081 L821.471 682.081 L820.912 682.081 L820.353 682.081 L819.793 682.081 L819.234 682.081 L818.675 682.081 L818.116 682.081 L817.556 682.081 L816.997 682.081 L816.438 682.081 L815.879 682.081 L815.319 682.081 L814.76 682.081 L814.201 682.081 L813.642 682.081 L813.082 682.081 L812.523 682.081 L811.964 682.081 L811.405 682.081 L810.845 682.081 L810.286 682.081 L809.727 682.081 L809.168 682.081 L808.608 682.081 L808.049 682.081 L807.49 682.081 L806.931 682.081 L806.371 682.081 L805.812 682.081 L805.253 682.081 L804.693 682.081 L804.134 682.081 L803.575 682.081 L803.016 682.081 L802.456 682.081 L801.897 682.081 L801.338 682.081 L800.779 682.081 L800.219 682.081 L799.66 682.081 L799.101 682.081 L798.542 682.081 L797.982 682.081 L797.423 682.081 L796.864 682.081 L796.305 682.081 L795.745 682.081 L795.186 682.081 L794.627 682.081 L794.068 682.081 L793.508 682.081 L792.949 682.081 L792.39 682.081 L791.831 682.081 L791.271 682.081 L790.712 682.081 L790.153 682.081 L789.594 682.081 L789.034 682.081 L788.475 682.081 L787.916 682.081 L787.357 682.081 L786.797 682.081 L786.238 682.081 L785.679 682.081 L785.12 682.081 L784.56 682.081 L784.001 682.081 L783.442 682.081 L782.883 682.081 L782.323 682.081 L781.764 682.081 L781.205 682.081 L780.646 682.081 L780.086 682.081 L779.527 682.081 L778.968 682.081 L778.409 682.081 L777.849 682.081 L777.29 682.081 L776.731 682.081 L776.172 682.081 L775.612 682.081 L775.053 682.081 L774.494 682.081 L773.935 682.081 L773.375 682.081 L772.816 682.081 L772.257 682.081 L771.698 682.081 L771.138 682.081 L770.579 682.081 L770.02 682.081 L769.461 682.081 L768.901 682.081 L768.342 682.081 L767.783 682.081 L767.224 682.081 L766.664 682.081 L766.105 682.081 L765.546 682.081 L764.987 682.081 L764.427 682.081 L763.868 682.081 L763.309 682.081 L762.75 682.081 L762.19 682.081 L761.631 682.081 L761.072 682.081 L760.513 682.081 L759.953 682.081 L759.394 682.081 L758.835 682.081 L758.276 682.081 L757.716 682.081 L757.157 682.081 L756.598 682.081 L756.039 682.081 L755.479 682.081 L754.92 682.081 L754.361 682.081 L753.802 682.081 L753.242 682.081 L752.683 682.081 L752.124 682.081 L751.565 682.081 L751.005 682.081 L750.446 682.081 L749.887 682.081 L749.328 682.081 L748.768 682.081 L748.209 682.081 L747.65 682.081 L747.091 682.081 L746.531 682.081 L745.972 682.081 L745.413 682.081 L744.854 682.081 L744.294 682.081 L743.735 682.081 L743.176 682.081 L742.617 682.081 L742.057 682.081 L741.498 682.081 L740.939 682.081 L740.38 682.081 L739.82 682.081 L739.261 682.081 L738.702 682.081 L738.143 682.081 L737.583 682.081 L737.024 682.081 L736.465 682.081 L735.906 682.081 L735.346 682.081 L734.787 682.081 L734.228 682.081 L733.669 682.081 L733.109 682.081 L732.55 682.081 L731.991 682.081 L731.432 682.081 L730.872 682.081 L730.313 682.081 L729.754 682.081 L729.195 682.081 L728.635 682.081 L728.076 682.081 L727.517 682.081 L726.958 682.081 L726.398 682.081 L725.839 682.081 L725.28 682.081 L724.721 682.081 L724.161 682.081 L723.602 682.081 L723.043 682.081 L722.484 682.081 L721.924 682.081 L721.365 682.081 L720.806 682.081 L720.247 682.081  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip173)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.37 720.806,683.37 721.365,683.37 721.924,683.37 722.484,683.37 723.043,683.37 723.602,683.37 724.161,683.37 724.721,683.37 725.28,683.37 725.839,683.37 726.398,683.37 726.958,683.37 727.517,683.37 728.076,683.37 728.635,683.37 729.195,683.37 729.754,683.37 730.313,683.37 730.872,683.37 731.432,683.37 731.991,683.37 732.55,683.37 733.109,683.37 733.669,683.37 734.228,683.37 734.787,683.37 735.346,683.37 735.906,683.37 736.465,683.37 737.024,683.37 737.583,683.37 738.143,683.37 738.702,683.37 739.261,683.37 739.82,683.37 740.38,683.37 740.939,683.37 741.498,683.37 742.057,683.37 742.617,683.37 743.176,683.37 743.735,683.37 744.294,683.37 744.854,683.37 745.413,683.37 745.972,683.37 746.531,683.37 747.091,683.37 747.65,683.37 748.209,683.37 748.768,683.37 749.328,683.37 749.887,683.37 750.446,683.37 751.005,683.37 751.565,683.37 752.124,683.37 752.683,683.37 753.242,683.37 753.802,683.37 754.361,683.37 754.92,683.37 755.479,683.37 756.039,683.37 756.598,683.37 757.157,683.37 757.716,683.37 758.276,683.37 758.835,683.37 759.394,683.37 759.953,683.37 760.513,683.37 761.072,683.37 761.631,683.37 762.19,683.37 762.75,683.37 763.309,683.37 763.868,683.37 764.427,683.37 764.987,683.37 765.546,683.37 766.105,683.37 766.664,683.37 767.224,683.37 767.783,683.37 768.342,683.37 768.901,683.37 769.461,683.37 770.02,683.37 770.579,683.37 771.138,683.37 771.698,683.37 772.257,683.37 772.816,683.37 773.375,683.37 773.935,683.37 774.494,683.37 775.053,683.37 775.612,683.37 776.172,683.37 776.731,683.37 777.29,683.37 777.849,683.37 778.409,683.37 778.968,683.37 779.527,683.37 780.086,683.37 780.646,683.37 781.205,683.37 781.764,683.37 782.323,683.37 782.883,683.37 783.442,683.37 784.001,683.37 784.56,683.37 785.12,683.37 785.679,683.37 786.238,683.37 786.797,683.37 787.357,683.37 787.916,683.37 788.475,683.37 789.034,683.37 789.594,683.37 790.153,683.37 790.712,683.37 791.271,683.37 791.831,683.37 792.39,683.37 792.949,683.37 793.508,683.37 794.068,683.37 794.627,683.37 795.186,683.37 795.745,683.37 796.305,683.37 796.864,683.37 797.423,683.37 797.982,683.37 798.542,683.37 799.101,683.37 799.66,683.37 800.219,683.37 800.779,683.37 801.338,683.37 801.897,683.37 802.456,683.37 803.016,683.37 803.575,683.37 804.134,683.37 804.693,683.37 805.253,683.37 805.812,683.37 806.371,683.37 806.931,683.37 807.49,683.37 808.049,683.37 808.608,683.37 809.168,683.37 809.727,683.37 810.286,683.37 810.845,683.37 811.405,683.37 811.964,683.37 812.523,683.37 813.082,683.37 813.642,683.37 814.201,683.37 814.76,683.37 815.319,683.37 815.879,683.37 816.438,683.37 816.997,683.37 817.556,683.37 818.116,683.37 818.675,683.37 819.234,683.37 819.793,683.37 820.353,683.37 820.912,683.37 821.471,683.37 822.03,683.37 822.59,683.37 823.149,683.37 823.708,683.37 824.267,683.37 824.827,683.37 825.386,683.37 825.945,683.37 826.504,683.37 827.064,683.37 827.623,683.37 828.182,683.37 828.741,683.37 829.301,683.37 829.86,683.37 830.419,683.37 830.978,683.37 831.538,683.37 832.097,683.37 832.656,683.37 833.215,683.37 833.775,683.37 834.334,683.37 834.893,683.37 835.452,683.37 836.012,683.37 836.571,683.37 837.13,683.37 837.689,683.37 838.249,683.37 838.808,683.37 839.367,683.37 839.926,683.37 840.486,683.37 841.045,683.37 841.604,683.37 842.163,683.37 842.723,683.37 843.282,683.37 843.841,683.37 844.4,683.37 844.96,683.37 845.519,683.37 846.078,683.37 846.637,683.37 847.197,683.37 847.756,683.37 848.315,683.37 848.874,683.37 849.434,683.37 849.993,683.37 850.552,683.37 851.111,683.37 851.671,683.37 852.23,683.37 852.789,683.37 853.348,683.37 853.908,683.37 854.467,683.37 855.026,683.37 855.585,683.37 856.145,683.37 856.704,683.37 857.263,683.37 857.822,683.37 858.382,683.37 858.941,683.37 859.5,683.37 860.059,683.37 860.619,683.37 861.178,683.37 861.737,683.37 862.296,683.37 862.856,683.37 863.415,683.37 863.974,683.37 864.533,683.37 865.093,683.37 865.652,683.37 866.211,683.37 866.77,683.37 867.33,683.37 867.889,683.37 868.448,683.37 869.007,683.37 869.567,683.37 870.126,683.37 870.685,683.37 871.244,683.37 871.804,683.37 872.363,683.37 872.922,683.37 873.481,683.37 874.041,683.37 874.6,683.37 875.159,683.37 875.718,683.37 876.278,683.37 876.837,683.37 877.396,683.37 877.955,683.37 878.515,683.37 879.074,683.37 879.633,683.37 880.192,683.37 880.752,683.37 881.311,683.37 881.87,683.37 882.429,683.37 882.989,683.37 883.548,683.37 884.107,683.37 884.666,683.37 885.226,683.37 885.785,683.37 886.344,683.37 886.903,683.37 887.463,683.37 888.022,683.37 888.581,683.37 889.14,683.37 889.7,683.37 890.259,683.37 890.818,683.37 891.377,683.37 891.937,683.37 892.496,683.37 893.055,683.37 893.614,683.37 894.174,683.37 894.733,683.37 895.292,683.37 895.851,683.37 896.411,683.37 896.97,683.37 897.529,683.37 898.088,683.37 898.648,683.37 899.207,683.37 899.766,683.37 900.325,683.37 900.885,683.37 901.444,683.37 902.003,683.37 902.562,683.37 903.122,683.37 903.681,683.37 904.24,683.37 904.799,683.37 905.359,683.37 905.918,683.37 906.477,683.37 907.036,683.37 907.596,683.37 908.155,683.37 908.714,683.37 909.273,683.37 909.833,683.37 910.392,683.37 910.951,683.37 911.51,683.37 912.07,683.37 912.629,683.37 913.188,683.37 913.747,683.37 914.307,683.37 914.866,683.37 915.425,683.37 915.984,683.37 916.544,683.37 917.103,683.37 917.662,683.37 918.221,683.37 918.781,683.37 919.34,683.37 919.899,683.37 920.458,683.37 921.018,683.37 921.577,683.37 922.136,683.37 922.695,683.37 923.255,683.37 923.814,683.37 924.373,683.37 924.932,683.37 925.492,683.37 926.051,683.37 926.61,683.37 927.169,683.37 927.729,683.37 928.288,683.37 928.847,683.37 929.406,683.37 929.966,683.37 930.525,683.37 931.084,683.37 931.644,683.37 932.203,683.37 932.762,683.37 933.321,683.37 933.881,683.37 934.44,683.37 934.999,683.37 935.558,683.37 936.118,683.37 936.677,683.37 937.236,683.37 937.795,683.37 938.355,683.37 938.914,683.37 939.473,683.37 940.032,683.37 940.592,683.37 941.151,683.37 941.71,683.37 942.269,683.37 942.829,683.37 943.388,683.37 943.947,683.37 944.506,683.37 945.066,683.37 945.625,683.37 946.184,683.37 946.743,683.37 947.303,683.37 947.862,683.37 948.421,683.37 948.98,683.37 949.54,683.37 950.099,683.37 950.658,683.37 951.217,683.37 951.777,683.37 952.336,683.37 952.895,683.37 953.454,683.37 954.014,683.37 954.573,683.37 955.132,683.37 955.691,683.37 956.251,683.37 956.81,683.37 957.369,683.37 957.928,683.37 958.488,683.37 959.047,683.37 959.606,683.37 960.165,683.37 960.725,683.37 961.284,683.37 961.843,683.37 962.402,683.37 962.962,683.37 963.521,683.37 964.08,683.37 964.639,683.37 965.199,683.37 965.758,683.37 966.317,683.37 966.876,683.37 967.436,683.37 967.995,683.37 968.554,683.37 969.113,683.37 969.673,683.37 970.232,683.37 970.791,683.37 971.35,683.37 971.91,683.37 972.469,683.37 973.028,683.37 973.587,683.37 974.147,683.37 974.706,683.37 975.265,683.37 975.824,683.37 976.384,683.37 976.943,683.37 977.502,683.37 978.061,683.37 978.621,683.37 979.18,683.37 979.739,683.37 980.298,683.37 980.858,683.37 981.417,683.37 981.976,683.37 982.535,683.37 983.095,683.37 983.654,683.37 984.213,683.37 984.772,683.37 985.332,683.37 985.891,683.37 986.45,683.37 987.009,683.37 987.569,683.37 988.128,683.37 988.687,683.37 989.246,683.37 989.806,683.37 990.365,683.37 990.924,683.37 991.483,683.37 992.043,683.37 992.602,683.37 993.161,683.37 993.72,683.37 994.28,683.37 994.839,683.37 995.398,683.37 995.957,683.37 996.517,683.37 997.076,683.37 997.635,683.37 998.194,683.37 998.754,683.37 999.313,683.37 999.872,683.37 1000.43,683.37 1000.99,683.37 1001.55,683.37 1002.11,683.37 1002.67,683.37 1003.23,683.37 1003.79,683.37 1004.35,683.37 1004.91,683.37 1005.46,683.37 1006.02,683.37 1006.58,683.37 1007.14,683.37 1007.7,683.37 1008.26,683.37 1008.82,683.37 1009.38,683.37 1009.94,683.37 1010.5,683.37 1011.06,683.37 1011.62,683.37 1012.18,683.37 1012.73,683.37 1013.29,683.37 1013.85,683.37 1014.41,683.37 1014.97,683.37 1015.53,683.37 1016.09,683.37 1016.65,683.37 1017.21,683.37 1017.77,683.37 1018.33,683.37 1018.89,683.37 1019.45,683.37 1020.01,683.37 1020.56,683.37 1021.12,683.37 1021.68,683.37 1022.24,683.37 1022.8,683.37 1023.36,683.37 1023.92,683.37 1024.48,683.37 1025.04,683.37 1025.6,683.37 1026.16,683.37 1026.72,683.37 1027.28,683.37 1027.83,683.37 1028.39,683.37 1028.95,683.37 1029.51,683.37 1030.07,683.37 1030.63,683.37 1031.19,683.37 1031.75,683.37 1032.31,683.37 1032.87,683.37 1033.43,683.37 1033.99,683.37 1034.55,683.37 1035.1,683.37 1035.66,683.37 1036.22,683.37 1036.78,683.37 1037.34,683.37 1037.9,683.37 1038.46,683.37 1039.02,683.37 1039.58,683.37 1040.14,683.37 1040.7,683.37 1041.26,683.37 1041.82,683.37 1042.38,683.37 1042.93,683.37 1043.49,683.37 1044.05,683.37 1044.61,683.37 1045.17,683.37 1045.73,683.37 1046.29,683.37 1046.85,683.37 1047.41,683.37 1047.97,683.37 1048.53,683.37 1049.09,683.37 1049.65,683.37 1050.2,683.37 1050.76,683.37 1051.32,683.37 1051.88,683.37 1052.44,683.37 1053,683.37 1053.56,683.37 1054.12,683.37 1054.68,683.37 1055.24,683.37 1055.8,683.37 1056.36,683.37 1056.92,683.37 1057.48,683.37 1058.03,683.37 1058.59,683.37 1059.15,683.37 1059.71,683.37 1060.27,683.37 1060.83,683.37 1061.39,683.37 1061.95,683.37 1062.51,683.37 1063.07,683.37 1063.63,683.37 1064.19,683.37 1064.75,683.37 1065.3,683.37 1065.86,683.37 1066.42,683.37 1066.98,683.37 1067.54,683.37 1068.1,683.37 1068.66,683.37 1069.22,683.37 1069.78,683.37 1070.34,683.37 1070.9,683.37 1071.46,683.37 1072.02,683.37 1072.57,683.37 1073.13,683.37 1073.69,683.37 1074.25,683.37 1074.81,683.37 1075.37,683.37 1075.93,683.37 1076.49,683.37 1077.05,683.37 1077.61,683.37 1078.17,683.37 1078.73,683.37 1079.29,683.37 1079.85,683.37 1080.4,683.37 1080.96,683.37 1081.52,683.37 1082.08,683.37 1082.64,683.37 1083.2,683.37 1083.76,683.37 1084.32,683.37 1084.88,683.37 1085.44,683.37 1086,683.37 1086.56,683.37 1087.12,683.37 1087.67,683.37 1088.23,683.37 1088.79,683.37 1089.35,683.37 1089.91,683.37 1090.47,683.37 1091.03,683.37 1091.59,683.37 1092.15,683.37 1092.71,683.37 1093.27,683.37 1093.83,683.37 1094.39,683.37 1094.94,683.37 1095.5,683.37 1096.06,683.37 1096.62,683.37 1097.18,683.37 1097.74,683.37 1098.3,683.37 1098.86,683.37 1099.42,683.37 1099.98,683.37 1100.54,683.37 1101.1,683.37 1101.66,683.37 1102.22,683.37 1102.77,683.37 1103.33,683.37 1103.89,683.37 1104.45,683.37 1105.01,683.37 1105.57,683.37 1106.13,683.37 1106.69,683.37 1107.25,683.37 1107.81,683.37 1108.37,683.37 1108.93,683.37 1109.49,683.37 1110.04,683.37 1110.6,683.37 1111.16,683.37 1111.72,683.37 1112.28,683.37 1112.84,683.37 1113.4,683.37 1113.96,683.37 1114.52,683.37 1115.08,683.37 1115.64,683.37 1116.2,683.37 1116.76,683.37 1117.31,683.37 1117.87,683.37 1118.43,683.37 1118.99,683.37 1119.55,683.37 1120.11,683.37 1120.67,683.37 1121.23,683.37 1121.79,683.37 1122.35,683.37 1122.91,683.37 1123.47,683.37 1124.03,683.37 1124.59,683.37 1125.14,683.37 1125.7,683.37 1126.26,683.37 1126.82,683.37 1127.38,683.37 1127.94,683.37 1128.5,683.37 1129.06,683.37 1129.62,683.37 1130.18,683.37 1130.74,683.37 1131.3,683.37 1131.86,683.37 1132.41,683.37 1132.97,683.37 1133.53,683.37 1134.09,683.37 1134.65,683.37 1135.21,683.37 1135.77,683.37 1136.33,683.37 1136.89,683.37 1137.45,683.37 1138.01,683.37 1138.57,683.37 1139.13,683.37 1139.68,683.37 1140.24,683.37 1140.8,683.37 1141.36,683.37 1141.92,683.37 1142.48,683.37 1143.04,683.37 1143.6,683.37 1144.16,683.37 1144.72,683.37 1145.28,683.37 1145.84,683.37 1146.4,683.37 1146.96,683.37 1147.51,683.37 1148.07,683.37 1148.63,683.37 1149.19,683.37 1149.75,683.37 1150.31,683.37 1150.87,683.37 1151.43,683.37 1151.99,683.37 1152.55,683.37 1153.11,683.37 1153.67,683.37 1154.23,683.37 1154.78,683.37 1155.34,683.37 1155.9,683.37 1156.46,683.37 1157.02,683.37 1157.58,683.37 1158.14,683.37 1158.7,683.37 1159.26,683.37 1159.82,683.37 1160.38,683.37 1160.94,683.37 1161.5,683.37 1162.05,683.37 1162.61,683.37 1163.17,683.37 1163.73,683.37 1164.29,683.37 1164.85,683.37 1165.41,683.37 1165.97,683.37 1166.53,683.37 1167.09,683.37 1167.65,683.37 1168.21,683.37 1168.77,683.37 1169.33,683.37 1169.88,683.37 1170.44,683.37 1171,683.37 1171.56,683.37 1172.12,683.37 1172.68,683.37 1173.24,683.37 1173.8,683.37 1174.36,683.37 1174.92,683.37 1175.48,683.37 1176.04,683.37 1176.6,683.37 1177.15,683.37 1177.71,683.37 1178.27,683.37 1178.83,683.37 1179.39,683.37 1179.95,683.37 1180.51,683.37 1181.07,683.37 1181.63,683.37 1182.19,683.37 1182.75,683.37 1183.31,683.37 1183.87,683.37 1184.43,683.37 1184.98,683.37 1185.54,683.37 1186.1,683.37 1186.66,683.37 1187.22,683.37 1187.78,683.37 1188.34,683.37 1188.9,683.37 1189.46,683.37 1190.02,683.37 1190.58,683.37 1191.14,683.37 1191.7,683.37 1192.25,683.37 1192.81,683.37 1193.37,683.37 1193.93,683.37 1194.49,683.37 1195.05,683.37 1195.61,683.37 1196.17,683.37 1196.73,683.37 1197.29,683.37 1197.85,683.37 1198.41,683.37 1198.97,683.37 1199.52,683.37 1200.08,683.37 1200.64,683.37 1201.2,683.37 1201.76,683.37 1202.32,683.37 1202.88,683.37 1203.44,683.37 1204,683.37 1204.56,683.37 1205.12,683.37 1205.68,683.37 1206.24,683.37 1206.8,683.37 1207.35,683.37 1207.91,683.37 1208.47,683.37 1209.03,683.37 1209.59,683.37 1210.15,683.37 1210.71,683.37 1211.27,683.37 1211.83,683.37 1212.39,683.37 1212.95,683.37 1213.51,683.37 1214.07,683.37 1214.62,683.37 1215.18,683.37 1215.74,683.37 1216.3,683.37 1216.86,683.37 1217.42,683.37 1217.98,683.37 1218.54,683.37 1219.1,683.37 1219.66,683.37 1220.22,683.37 1220.78,683.37 1221.34,683.37 1221.89,683.37 1222.45,683.37 1223.01,683.37 1223.57,683.37 1224.13,683.37 1224.69,683.37 1225.25,683.37 1225.81,683.37 1226.37,683.37 1226.93,683.37 1227.49,683.37 1228.05,683.37 1228.61,683.37 1229.17,683.37 1229.72,683.37 1230.28,683.37 1230.84,683.37 1231.4,683.37 1231.96,683.37 1232.52,683.37 1233.08,683.37 1233.64,683.37 1234.2,683.37 1234.76,683.37 1235.32,683.37 1235.88,683.37 1236.44,683.37 1236.99,683.37 1237.55,683.37 1238.11,683.37 1238.67,683.37 1239.23,683.37 1239.79,683.37 1240.35,683.37 1240.91,683.37 1241.47,683.37 1242.03,683.37 1242.59,683.37 1243.15,683.37 1243.71,683.37 1244.26,683.37 1244.82,683.37 1245.38,683.37 1245.94,683.37 1246.5,683.37 1247.06,683.37 1247.62,683.37 1248.18,683.37 1248.74,683.37 1249.3,683.37 1249.86,683.37 1250.42,683.37 1250.98,683.37 1251.54,683.37 1252.09,683.37 1252.65,683.37 1253.21,683.37 1253.77,683.37 1254.33,683.37 1254.89,683.37 1255.45,683.37 1256.01,683.37 1256.57,683.37 1257.13,683.37 1257.69,683.37 1258.25,683.37 1258.81,683.37 1259.36,683.37 1259.92,683.37 1260.48,683.37 1261.04,683.37 1261.6,683.37 1262.16,683.37 1262.72,683.37 1263.28,683.37 1263.84,683.37 1264.4,683.37 1264.96,683.37 1265.52,683.37 1266.08,683.37 1266.63,683.37 1267.19,683.37 1267.75,683.37 1268.31,683.37 1268.87,683.37 1269.43,683.37 1269.99,683.37 1270.55,683.37 1271.11,683.37 1271.67,683.37 1272.23,683.37 1272.79,683.37 1273.35,683.37 1273.91,683.37 1274.46,683.37 1275.02,683.37 1275.58,683.37 1276.14,683.37 1276.7,683.37 1277.26,683.37 1277.82,683.37 1278.38,683.37 1278.94,683.37 1279.5,683.37 1280.06,683.37 1280.62,683.37 1281.18,683.37 1281.73,683.37 1282.29,683.37 1282.85,683.37 1283.41,683.37 1283.97,683.37 1284.53,683.37 1285.09,683.37 1285.65,683.37 1286.21,683.37 1286.77,683.37 1287.33,683.37 1287.89,683.37 1288.45,683.37 1289,683.37 1289.56,683.37 1290.12,683.37 1290.68,683.37 1291.24,683.37 1291.8,683.37 1292.36,683.37 1292.92,683.37 1293.48,683.37 1294.04,683.37 1294.6,683.37 1295.16,683.37 1295.72,683.37 1296.28,683.37 1296.83,683.37 1297.39,683.37 1297.95,683.37 1298.51,683.37 1299.07,683.37 1299.63,683.37 1300.19,683.37 1300.75,683.37 1301.31,683.37 1301.87,683.37 1302.43,683.37 1302.99,683.37 1303.55,683.37 1304.1,683.37 1304.66,683.37 1305.22,683.37 1305.78,683.37 1306.34,683.37 1306.9,683.37 1307.46,683.37 1308.02,683.37 1308.58,683.37 1309.14,683.37 1309.7,683.37 1310.26,683.37 1310.82,683.37 1311.38,683.37 1311.93,683.37 1312.49,683.37 1313.05,683.37 1313.61,683.37 1314.17,683.37 1314.73,683.37 1315.29,683.37 1315.85,683.37 1316.41,683.37 1316.97,683.37 1317.53,683.37 1318.09,683.37 1318.65,683.37 1319.2,683.37 1319.76,683.37 1320.32,683.37 1320.88,683.37 1321.44,683.37 1322,683.37 1322.56,683.37 1323.12,683.37 1323.68,683.37 1324.24,683.37 1324.8,683.37 1325.36,683.37 1325.92,683.37 1326.47,683.37 1327.03,683.37 1327.59,683.37 1328.15,683.37 1328.71,683.37 1329.27,683.37 1329.83,683.37 1330.39,683.37 1330.95,683.37 1331.51,683.37 1332.07,683.37 1332.63,683.37 1333.19,683.37 1333.75,683.37 1334.3,683.37 1334.86,683.37 1335.42,683.37 1335.98,683.37 1336.54,683.37 1337.1,683.37 1337.66,683.37 1338.22,683.37 1338.78,683.37 1339.34,683.37 1339.9,683.37 1340.46,683.37 1341.02,683.37 1341.57,683.37 1342.13,683.37 1342.69,683.37 1343.25,683.37 1343.81,683.37 1344.37,683.37 1344.93,683.37 1345.49,683.37 1346.05,683.37 1346.61,683.37 1347.17,683.37 1347.73,683.37 1348.29,683.37 1348.84,683.37 1349.4,683.37 1349.96,683.37 1350.52,683.37 1351.08,683.37 1351.64,683.37 1352.2,683.37 1352.76,683.37 1353.32,683.37 1353.88,683.37 1354.44,683.37 1355,683.37 1355.56,683.37 1356.12,683.37 1356.67,683.37 1357.23,683.37 1357.79,683.37 1358.35,683.37 1358.91,683.37 1359.47,683.37 1360.03,683.37 1360.59,683.37 1361.15,683.37 1361.71,683.37 1362.27,683.37 1362.83,683.37 1363.39,683.37 1363.94,683.37 1364.5,683.37 1365.06,683.37 1365.62,683.37 1366.18,683.37 1366.74,683.37 1367.3,683.37 1367.86,683.37 1368.42,683.37 1368.98,683.37 1369.54,683.37 1370.1,683.37 1370.66,683.37 1371.21,683.37 1371.77,683.37 1372.33,683.37 1372.89,683.37 1373.45,683.37 1374.01,683.37 1374.57,683.37 1375.13,683.37 1375.69,683.37 1376.25,683.37 1376.81,683.37 1377.37,683.37 1377.93,683.37 1378.49,683.37 1379.04,683.37 1379.6,683.37 1380.16,683.37 1380.72,683.37 1381.28,683.37 1381.84,683.37 1382.4,683.37 1382.96,683.37 1383.52,683.37 1384.08,683.37 1384.64,683.37 1385.2,683.37 1385.76,683.37 1386.31,683.37 1386.87,683.37 1387.43,683.37 1387.99,683.37 1388.55,683.37 1389.11,683.37 1389.67,683.37 1390.23,683.37 1390.79,683.37 1391.35,683.37 1391.91,683.37 1392.47,683.37 1393.03,683.37 1393.58,683.37 1394.14,683.37 1394.7,683.37 1395.26,683.37 1395.82,683.37 1396.38,683.37 1396.94,683.37 1397.5,683.37 1398.06,683.37 1398.62,683.37 1399.18,683.37 1399.74,683.37 1400.3,683.37 1400.86,683.37 1401.41,683.37 1401.97,683.37 1402.53,683.37 1403.09,683.37 1403.65,683.37 1404.21,683.37 1404.77,683.37 1405.33,683.37 1405.89,683.37 1406.45,683.37 1407.01,683.37 1407.57,683.37 1408.13,683.37 1408.68,683.37 1409.24,683.37 1409.8,683.37 1410.36,683.37 1410.92,683.37 1411.48,683.37 1412.04,683.37 1412.6,683.37 1413.16,683.37 1413.72,683.37 1414.28,683.37 1414.84,683.37 1415.4,683.37 1415.95,683.37 1416.51,683.37 1417.07,683.37 1417.63,683.37 1418.19,683.37 1418.75,683.37 1419.31,683.37 1419.87,683.37 1420.43,683.37 1420.99,683.37 1421.55,683.37 1422.11,683.37 1422.67,683.37 1423.23,683.37 1423.78,683.37 1424.34,683.37 1424.9,683.37 1425.46,683.37 1426.02,683.37 1426.58,683.37 1427.14,683.37 1427.7,683.37 1428.26,683.37 1428.82,683.37 1429.38,683.37 1429.94,683.37 1430.5,683.37 1431.05,683.37 1431.61,683.37 1432.17,683.37 1432.73,683.37 1433.29,683.37 1433.85,683.37 1434.41,683.37 1434.97,683.37 1435.53,683.37 1436.09,683.37 1436.65,683.37 1437.21,683.37 1437.77,683.37 1438.33,683.37 1438.88,683.37 1439.44,683.37 1440,683.37 1440.56,683.37 1441.12,683.37 1441.68,683.37 1442.24,683.37 1442.8,683.37 1443.36,683.37 1443.92,683.37 1444.48,683.37 1445.04,683.37 1445.6,683.37 1446.15,683.37 1446.71,683.37 1447.27,683.37 1447.83,683.37 1448.39,683.37 1448.95,683.37 1449.51,683.37 1450.07,683.37 1450.63,683.37 1451.19,683.37 1451.75,683.37 1452.31,683.37 1452.87,683.37 1453.42,683.37 1453.98,683.37 1454.54,683.37 1455.1,683.37 1455.66,683.37 1456.22,683.37 1456.78,683.37 1457.34,683.37 1457.9,683.37 1458.46,683.37 1459.02,683.37 1459.58,683.37 1460.14,683.37 1460.7,683.37 1461.25,683.37 1461.81,683.37 1462.37,683.37 1462.93,683.37 1463.49,683.37 1464.05,683.37 1464.61,683.37 1465.17,683.37 1465.73,683.37 1466.29,683.37 1466.85,683.37 1467.41,683.37 1467.97,683.37 1468.52,683.37 1469.08,683.37 1469.64,683.37 1470.2,683.37 1470.76,683.37 1471.32,683.37 1471.88,683.37 1472.44,683.37 1473,683.37 1473.56,683.37 1474.12,683.37 1474.68,683.37 1475.24,683.37 1475.79,683.37 1476.35,683.37 1476.91,683.37 1477.47,683.37 1478.03,683.37 1478.59,683.37 1479.15,683.37 1479.71,683.37 1480.27,683.37 1480.83,683.37 1481.39,683.37 1481.95,683.37 1482.51,683.37 1483.07,683.37 1483.62,683.37 1484.18,683.37 1484.74,683.37 1485.3,683.37 1485.86,683.37 1486.42,683.37 1486.98,683.37 1487.54,683.37 1488.1,683.37 1488.66,683.37 1489.22,683.37 1489.78,683.37 1490.34,683.37 1490.89,683.37 1491.45,683.37 1492.01,683.37 1492.57,683.37 1493.13,683.37 1493.69,683.37 1494.25,683.37 1494.81,683.37 1495.37,683.37 1495.93,683.37 1496.49,683.37 1497.05,683.37 1497.61,683.37 1498.16,683.37 1498.72,683.37 1499.28,683.37 1499.84,683.37 1500.4,683.37 1500.96,683.37 1501.52,683.37 1502.08,683.37 1502.64,683.37 1503.2,683.37 1503.76,683.37 1504.32,683.37 1504.88,683.37 1505.44,683.37 1505.99,683.37 1506.55,683.37 1507.11,683.37 1507.67,683.37 1508.23,683.37 1508.79,683.37 1509.35,683.37 1509.91,683.37 1510.47,683.37 1511.03,683.37 1511.59,683.37 1512.15,683.37 1512.71,683.37 1513.26,683.37 1513.82,683.37 1514.38,683.37 1514.94,683.37 1515.5,683.37 1516.06,683.37 1516.62,683.37 1517.18,683.37 1517.74,683.37 1518.3,683.37 1518.86,683.37 1519.42,683.37 1519.98,683.37 1520.53,683.37 1521.09,683.37 1521.65,683.37 1522.21,683.37 1522.77,683.37 1523.33,683.37 1523.89,683.37 1524.45,683.37 1525.01,683.37 1525.57,683.37 1526.13,683.37 1526.69,683.37 1527.25,683.37 1527.81,683.37 1528.36,683.37 1528.92,683.37 1529.48,683.37 1530.04,683.37 1530.6,683.37 1531.16,683.37 1531.72,683.37 1532.28,683.37 1532.84,683.37 1533.4,683.37 1533.96,683.37 1534.52,683.37 1535.08,683.37 1535.63,683.37 1536.19,683.37 1536.75,683.37 1537.31,683.37 1537.87,683.37 1538.43,683.37 1538.99,683.37 1539.55,683.37 1540.11,683.37 1540.67,683.37 1541.23,683.37 1541.79,683.37 1542.35,683.37 1542.9,683.37 1543.46,683.37 1544.02,683.37 1544.58,683.37 1545.14,683.37 1545.7,683.37 1546.26,683.37 1546.82,683.37 1547.38,683.37 1547.94,683.37 1548.5,683.37 1549.06,683.37 1549.62,683.37 1550.18,683.37 1550.73,683.37 1551.29,683.37 1551.85,683.37 1552.41,683.37 1552.97,683.37 1553.53,683.37 1554.09,683.37 1554.65,683.37 1555.21,683.37 1555.77,683.37 1556.33,683.37 1556.89,683.37 1557.45,683.37 1558,683.37 1558.56,683.37 1559.12,683.37 1559.68,683.37 1560.24,683.37 1560.8,683.37 1561.36,683.37 1561.92,683.37 1562.48,683.37 1563.04,683.37 1563.6,683.37 1564.16,683.37 1564.72,683.37 1565.28,683.37 1565.83,683.37 1566.39,683.37 1566.95,683.37 1567.51,683.37 1568.07,683.37 1568.63,683.37 1569.19,683.37 1569.75,683.37 1570.31,683.37 1570.87,683.37 1571.43,683.37 1571.99,683.37 1572.55,683.37 1573.1,683.37 1573.66,683.37 1574.22,683.37 1574.78,683.37 1575.34,683.37 1575.9,683.37 1576.46,683.37 1577.02,683.37 1577.58,683.37 1578.14,683.37 1578.7,683.37 1579.26,683.37 1579.82,683.37 1580.37,683.37 1580.93,683.37 1581.49,683.37 1582.05,683.37 1582.61,683.37 1583.17,683.37 1583.73,683.37 1584.29,683.37 1584.85,683.37 1585.41,683.37 1585.97,683.37 1586.53,683.37 1587.09,683.37 1587.65,683.37 1588.2,683.37 1588.76,683.37 1589.32,683.37 1589.88,683.37 1590.44,683.37 1591,683.37 1591.56,683.37 1592.12,683.37 1592.68,683.37 1593.24,683.37 1593.8,683.37 1594.36,683.37 1594.92,683.37 1595.47,683.37 1596.03,683.37 1596.59,683.37 1597.15,683.37 1597.71,683.37 1598.27,683.37 1598.83,683.37 1599.39,683.37 1599.95,683.37 1600.51,683.37 1601.07,683.37 1601.63,683.37 1602.19,683.37 1602.74,683.37 1603.3,683.37 1603.86,683.37 1604.42,683.37 1604.98,683.37 1605.54,683.37 1606.1,683.37 1606.66,683.37 1607.22,683.37 1607.78,683.37 1608.34,683.37 1608.9,683.37 1609.46,683.37 1610.02,683.37 1610.57,683.37 1611.13,683.37 1611.69,683.37 1612.25,683.37 1612.81,683.37 1613.37,683.37 1613.93,683.37 1614.49,683.37 1615.05,683.37 1615.61,683.37 1616.17,683.37 1616.73,683.37 1617.29,683.37 1617.84,683.37 1618.4,683.37 1618.96,683.37 1619.52,683.37 1620.08,683.37 1620.64,683.37 1621.2,683.37 1621.76,683.37 1622.32,683.37 1622.88,683.37 1623.44,683.37 1624,683.37 1624.56,683.37 1625.11,683.37 1625.67,683.37 1626.23,683.37 1626.79,683.37 1627.35,683.37 1627.91,683.37 1628.47,683.37 1629.03,683.37 1629.59,683.37 1630.15,683.37 1630.71,683.37 1631.27,683.37 1631.83,683.37 1632.39,683.37 1632.94,683.37 1633.5,683.37 1634.06,683.37 1634.62,683.37 1635.18,683.37 1635.74,683.37 1636.3,683.37 1636.86,683.37 1637.42,683.37 1637.98,683.37 1638.54,683.37 1639.1,683.37 1639.66,683.37 1640.21,683.37 1640.77,683.37 1641.33,683.37 1641.89,683.37 1642.45,683.37 1643.01,683.37 1643.57,683.37 1644.13,683.37 1644.69,683.37 1645.25,683.37 1645.81,683.37 1646.37,683.37 1646.93,683.37 1647.48,683.37 1648.04,683.37 1648.6,683.37 1649.16,683.37 1649.72,683.37 1650.28,683.37 1650.84,683.37 1651.4,683.37 1651.96,683.37 1652.52,683.37 1653.08,683.37 1653.64,683.37 1654.2,683.37 1654.76,683.37 1655.31,683.37 1655.87,683.37 1656.43,683.37 1656.99,683.37 1657.55,683.37 1658.11,683.37 1658.67,683.37 1659.23,683.37 1659.79,683.37 1660.35,683.37 1660.91,683.37 1661.47,683.37 1662.03,683.37 1662.58,683.37 1663.14,683.37 1663.7,683.37 1664.26,683.37 1664.82,683.37 1665.38,683.37 1665.94,683.37 1666.5,683.37 1667.06,683.37 1667.62,683.37 1668.18,683.37 1668.74,683.37 1669.3,683.37 1669.85,683.37 1670.41,683.37 1670.97,683.37 1671.53,683.37 1672.09,683.37 1672.65,683.37 1673.21,683.37 1673.77,683.37 1674.33,683.37 1674.89,683.37 1675.45,683.37 1676.01,683.37 1676.57,683.37 1677.13,683.37 1677.68,683.37 1678.24,683.37 1678.8,683.37 1679.36,683.37 1679.92,683.37 1680.48,683.37 1681.04,683.37 1681.6,683.37 1682.16,683.37 1682.72,683.37 1683.28,683.37 1683.84,683.37 1684.4,683.37 1684.95,683.37 1685.51,683.37 1686.07,683.37 1686.63,683.37 1687.19,683.37 1687.75,683.37 1688.31,683.37 1688.87,683.37 1689.43,683.37 1689.99,683.37 1690.55,683.37 1691.11,683.37 1691.67,683.37 1692.23,683.37 1692.78,683.37 1693.34,683.37 1693.9,683.37 1694.46,683.37 1695.02,683.37 1695.58,683.37 1696.14,683.37 1696.7,683.37 1697.26,683.37 1697.82,683.37 1698.38,683.37 1698.94,683.37 1699.5,683.37 1700.05,683.37 1700.61,683.37 1701.17,683.37 1701.73,683.37 1702.29,683.37 1702.85,683.37 1703.41,683.37 1703.97,683.37 1704.53,683.37 1705.09,683.37 1705.65,683.37 1706.21,683.37 1706.77,683.37 1707.32,683.37 1707.88,683.37 1708.44,683.37 1709,683.37 1709.56,683.37 1710.12,683.37 1710.68,683.37 1711.24,683.37 1711.8,683.37 1712.36,683.37 1712.92,683.37 1713.48,683.37 1714.04,683.37 1714.6,683.37 1715.15,683.37 1715.71,683.37 1716.27,683.37 1716.83,683.37 1717.39,683.37 1717.95,683.37 1718.51,683.37 1719.07,683.37 1719.63,683.37 1720.19,683.37 1720.75,683.37 1721.31,683.37 1721.87,683.37 1722.42,683.37 1722.98,683.37 1723.54,683.37 1724.1,683.37 1724.66,683.37 1725.22,683.37 1725.78,683.37 1726.34,683.37 1726.9,683.37 1727.46,683.37 1728.02,683.37 1728.58,683.37 1729.14,683.37 1729.69,683.37 1730.25,683.37 1730.81,683.37 1731.37,683.37 1731.93,683.37 1732.49,683.37 1733.05,683.37 1733.61,683.37 1734.17,683.37 1734.73,683.37 1735.29,683.37 1735.85,683.37 1736.41,683.37 1736.97,683.37 1737.52,683.37 1738.08,683.37 1738.64,683.37 1739.2,683.37 1739.76,683.37 1740.32,683.37 1740.88,683.37 1741.44,683.37 1742,683.37 1742.56,683.37 1743.12,683.37 1743.68,683.37 1744.24,683.37 1744.79,683.37 1745.35,683.37 1745.91,683.37 1746.47,683.37 1747.03,683.37 1747.59,683.37 1748.15,683.37 1748.71,683.37 1749.27,683.37 1749.83,683.37 1750.39,683.37 1750.95,683.37 1751.51,683.37 1752.06,683.37 1752.62,683.37 1753.18,683.37 1753.74,683.37 1754.3,683.37 1754.86,683.37 1755.42,683.37 1755.98,683.37 1756.54,683.37 1757.1,683.37 1757.66,683.37 1758.22,683.37 1758.78,683.37 1759.34,683.37 1759.89,683.37 1760.45,683.37 1761.01,683.37 1761.57,683.37 1762.13,683.37 1762.69,683.37 1763.25,683.37 1763.81,683.37 1764.37,683.37 1764.93,683.37 1765.49,683.37 1766.05,683.37 1766.61,683.37 1767.16,683.37 1767.72,683.37 1768.28,683.37 1768.84,683.37 1769.4,683.37 1769.96,683.37 1770.52,683.37 1771.08,683.37 1771.64,683.37 1772.2,683.37 1772.76,683.37 1773.32,683.37 1773.88,683.37 1774.43,683.37 1774.99,683.37 1775.55,683.37 1776.11,683.37 1776.67,683.37 1777.23,683.37 1777.79,683.37 1778.35,683.37 1778.91,683.37 1779.47,683.37 1780.03,683.37 1780.59,683.37 1781.15,683.37 1781.71,683.37 1782.26,683.37 1782.82,683.37 1783.38,683.37 1783.94,683.37 1784.5,683.37 1785.06,683.37 1785.62,683.37 1786.18,683.37 1786.74,683.37 1787.3,683.37 1787.86,683.37 1788.42,683.37 1788.98,683.37 1789.53,683.37 1790.09,683.37 1790.65,683.37 1791.21,683.37 1791.77,683.37 1792.33,683.37 1792.89,683.37 1793.45,683.37 1794.01,683.37 1794.57,683.37 1795.13,683.37 1795.69,683.37 1796.25,683.37 1796.8,683.37 1797.36,683.37 1797.92,683.37 1798.48,683.37 1799.04,683.37 1799.6,683.37 1800.16,683.37 1800.72,683.37 1801.28,683.37 1801.84,683.37 1802.4,683.37 1802.96,683.37 1803.52,683.37 1804.08,683.37 1804.63,683.37 1805.19,683.37 1805.75,683.37 1806.31,683.37 1806.87,683.37 1807.43,683.37 1807.99,683.37 1808.55,683.37 1809.11,683.37 1809.67,683.37 1810.23,683.37 1810.79,683.37 1811.35,683.37 1811.9,683.37 1812.46,683.37 1813.02,683.37 1813.58,683.37 1814.14,683.37 1814.7,683.37 1815.26,683.37 1815.82,683.37 1816.38,683.37 1816.94,683.37 1817.5,683.37 1818.06,683.37 1818.62,683.37 1819.18,683.37 1819.73,683.37 1820.29,683.37 1820.85,683.37 1821.41,683.37 1821.97,683.37 1822.53,683.37 1823.09,683.37 1823.65,683.37 1824.21,683.37 1824.77,683.37 1825.33,683.37 1825.89,683.37 1826.45,683.37 1827,683.37 1827.56,683.37 1828.12,683.37 1828.68,683.37 1829.24,683.37 1829.8,683.37 1830.36,683.37 1830.92,683.37 1831.48,683.37 1832.04,683.37 1832.6,683.37 1833.16,683.37 1833.72,683.37 1834.27,683.37 1834.83,683.37 1835.39,683.37 1835.95,683.37 1836.51,683.37 1837.07,683.37 1837.63,683.37 1838.19,683.37 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.02685366124626 ± 0.025577408658157063\nProjected Energy: -4.014003854038504 ± (0.006563818880585437, 0.006491341642989035)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.6424</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.8915e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.5618e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.1111e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.663e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.206e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.0399e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321623\n -3.3631242916133495\n -0.759019192277087\n  0.13584182219622498\n  0.157899986946072\n  0.8767114411781307\n  1.530592997097334\n  1.5835732611867313\n  3.0728703303258698\n  3.125672653951834\n  4.862107221562175\n  6.260694850380597\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Custom-Hamiltonians-and-observables","page":"Custom Hamiltonians","title":"Custom Hamiltonians and observables","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the submodule Rimu.InterfaceTests, see Interface tests.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator type hierarchy works in Rimu. For an example of how to code custom Hamiltonians that are not part of the Rimu.jl package, see RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy in a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
