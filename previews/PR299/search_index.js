var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21963895669303687 ± 0.0014951849242277675\n   G2(1) = 0.9142064620050405 ± 0.0007679643711020396\n   G2(2) = 0.9810762026076278 ± 0.000524414116844422\n   G2(3) = 0.989795714081625 ± 0.0010203973708087187\n   G2(4) = 0.9810762026076278 ± 0.000524414116844422\n   G2(5) = 0.9142064620050405 ± 0.0007679643711020396\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.024380396158632 ± 0.13445060380589097\n   Replica 2: -3.9960123577254287 ± 0.11123659542610839\n   Replica 3: -4.007990508898051 ± 0.14641198772399486\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip610\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip611\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip610)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip612\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.59 2211.02,1003.59 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.359 2211.02,746.359 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.13 2211.02,489.13 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.9 2211.02,231.9 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.59 423.181,1003.59 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.359 423.181,746.359 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.13 423.181,489.13 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.9 423.181,231.9 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M290.043 1016.93 L306.363 1016.93 L306.363 1020.87 L284.418 1020.87 L284.418 1016.93 Q287.08 1014.18 291.664 1009.55 Q296.27 1004.9 297.451 1003.55 Q299.696 1001.03 300.576 999.294 Q301.478 997.535 301.478 995.845 Q301.478 993.091 299.534 991.355 Q297.613 989.619 294.511 989.619 Q292.312 989.619 289.858 990.382 Q287.427 991.146 284.65 992.697 L284.65 987.975 Q287.474 986.841 289.927 986.262 Q292.381 985.683 294.418 985.683 Q299.789 985.683 302.983 988.369 Q306.177 991.054 306.177 995.544 Q306.177 997.674 305.367 999.595 Q304.58 1001.49 302.474 1004.09 Q301.895 1004.76 298.793 1007.97 Q295.691 1011.17 290.043 1016.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 986.308 L334.58 986.308 L334.58 990.244 L320.506 990.244 L320.506 998.716 Q321.524 998.368 322.543 998.206 Q323.562 998.021 324.58 998.021 Q330.367 998.021 333.747 1001.19 Q337.126 1004.36 337.126 1009.78 Q337.126 1015.36 333.654 1018.46 Q330.182 1021.54 323.862 1021.54 Q321.687 1021.54 319.418 1021.17 Q317.173 1020.8 314.765 1020.06 L314.765 1015.36 Q316.849 1016.49 319.071 1017.05 Q321.293 1017.6 323.77 1017.6 Q327.774 1017.6 330.112 1015.5 Q332.45 1013.39 332.45 1009.78 Q332.45 1006.17 330.112 1004.06 Q327.774 1001.96 323.77 1001.96 Q321.895 1001.96 320.02 1002.37 Q318.168 1002.79 316.224 1003.67 L316.224 986.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 989.387 Q352.728 989.387 350.899 992.952 Q349.094 996.493 349.094 1003.62 Q349.094 1010.73 350.899 1014.29 Q352.728 1017.84 356.339 1017.84 Q359.973 1017.84 361.779 1014.29 Q363.608 1010.73 363.608 1003.62 Q363.608 996.493 361.779 992.952 Q359.973 989.387 356.339 989.387 M356.339 985.683 Q362.149 985.683 365.205 990.29 Q368.284 994.873 368.284 1003.62 Q368.284 1012.35 365.205 1016.96 Q362.149 1021.54 356.339 1021.54 Q350.529 1021.54 347.45 1016.96 Q344.395 1012.35 344.395 1003.62 Q344.395 994.873 347.45 990.29 Q350.529 985.683 356.339 985.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M286.062 729.079 L304.418 729.079 L304.418 733.014 L290.344 733.014 L290.344 741.486 Q291.363 741.139 292.381 740.977 Q293.4 740.792 294.418 740.792 Q300.205 740.792 303.585 743.963 Q306.964 747.134 306.964 752.551 Q306.964 758.13 303.492 761.232 Q300.02 764.31 293.701 764.31 Q291.525 764.31 289.256 763.94 Q287.011 763.57 284.603 762.829 L284.603 758.13 Q286.687 759.264 288.909 759.82 Q291.131 760.375 293.608 760.375 Q297.613 760.375 299.951 758.269 Q302.288 756.162 302.288 752.551 Q302.288 748.94 299.951 746.834 Q297.613 744.727 293.608 744.727 Q291.733 744.727 289.858 745.144 Q288.006 745.56 286.062 746.44 L286.062 729.079 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 732.158 Q322.566 732.158 320.737 735.722 Q318.932 739.264 318.932 746.394 Q318.932 753.5 320.737 757.065 Q322.566 760.607 326.177 760.607 Q329.811 760.607 331.617 757.065 Q333.446 753.5 333.446 746.394 Q333.446 739.264 331.617 735.722 Q329.811 732.158 326.177 732.158 M326.177 728.454 Q331.987 728.454 335.043 733.06 Q338.122 737.644 338.122 746.394 Q338.122 755.121 335.043 759.727 Q331.987 764.31 326.177 764.31 Q320.367 764.31 317.288 759.727 Q314.233 755.121 314.233 746.394 Q314.233 737.644 317.288 733.06 Q320.367 728.454 326.177 728.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 732.158 Q352.728 732.158 350.899 735.722 Q349.094 739.264 349.094 746.394 Q349.094 753.5 350.899 757.065 Q352.728 760.607 356.339 760.607 Q359.973 760.607 361.779 757.065 Q363.608 753.5 363.608 746.394 Q363.608 739.264 361.779 735.722 Q359.973 732.158 356.339 732.158 M356.339 728.454 Q362.149 728.454 365.205 733.06 Q368.284 737.644 368.284 746.394 Q368.284 755.121 365.205 759.727 Q362.149 764.31 356.339 764.31 Q350.529 764.31 347.45 759.727 Q344.395 755.121 344.395 746.394 Q344.395 737.644 347.45 733.06 Q350.529 728.454 356.339 728.454 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M284.835 471.85 L307.057 471.85 L307.057 473.84 L294.511 506.41 L289.627 506.41 L301.432 475.785 L284.835 475.785 L284.835 471.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M316.224 471.85 L334.58 471.85 L334.58 475.785 L320.506 475.785 L320.506 484.257 Q321.524 483.91 322.543 483.748 Q323.562 483.563 324.58 483.563 Q330.367 483.563 333.747 486.734 Q337.126 489.905 337.126 495.322 Q337.126 500.9 333.654 504.002 Q330.182 507.081 323.862 507.081 Q321.687 507.081 319.418 506.711 Q317.173 506.34 314.765 505.599 L314.765 500.9 Q316.849 502.035 319.071 502.59 Q321.293 503.146 323.77 503.146 Q327.774 503.146 330.112 501.039 Q332.45 498.933 332.45 495.322 Q332.45 491.711 330.112 489.604 Q327.774 487.498 323.77 487.498 Q321.895 487.498 320.02 487.914 Q318.168 488.331 316.224 489.211 L316.224 471.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 474.928 Q352.728 474.928 350.899 478.493 Q349.094 482.035 349.094 489.164 Q349.094 496.271 350.899 499.836 Q352.728 503.377 356.339 503.377 Q359.973 503.377 361.779 499.836 Q363.608 496.271 363.608 489.164 Q363.608 482.035 361.779 478.493 Q359.973 474.928 356.339 474.928 M356.339 471.225 Q362.149 471.225 365.205 475.831 Q368.284 480.414 368.284 489.164 Q368.284 497.891 365.205 502.498 Q362.149 507.081 356.339 507.081 Q350.529 507.081 347.45 502.498 Q344.395 497.891 344.395 489.164 Q344.395 480.414 347.45 475.831 Q350.529 471.225 356.339 471.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M256.664 245.245 L264.303 245.245 L264.303 218.879 L255.992 220.546 L255.992 216.287 L264.256 214.62 L268.932 214.62 L268.932 245.245 L276.571 245.245 L276.571 249.18 L256.664 249.18 L256.664 245.245 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M296.015 217.699 Q292.404 217.699 290.576 221.264 Q288.77 224.805 288.77 231.935 Q288.77 239.041 290.576 242.606 Q292.404 246.148 296.015 246.148 Q299.65 246.148 301.455 242.606 Q303.284 239.041 303.284 231.935 Q303.284 224.805 301.455 221.264 Q299.65 217.699 296.015 217.699 M296.015 213.995 Q301.826 213.995 304.881 218.602 Q307.96 223.185 307.96 231.935 Q307.96 240.662 304.881 245.268 Q301.826 249.852 296.015 249.852 Q290.205 249.852 287.127 245.268 Q284.071 240.662 284.071 231.935 Q284.071 223.185 287.127 218.602 Q290.205 213.995 296.015 213.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M326.177 217.699 Q322.566 217.699 320.737 221.264 Q318.932 224.805 318.932 231.935 Q318.932 239.041 320.737 242.606 Q322.566 246.148 326.177 246.148 Q329.811 246.148 331.617 242.606 Q333.446 239.041 333.446 231.935 Q333.446 224.805 331.617 221.264 Q329.811 217.699 326.177 217.699 M326.177 213.995 Q331.987 213.995 335.043 218.602 Q338.122 223.185 338.122 231.935 Q338.122 240.662 335.043 245.268 Q331.987 249.852 326.177 249.852 Q320.367 249.852 317.288 245.268 Q314.233 240.662 314.233 231.935 Q314.233 223.185 317.288 218.602 Q320.367 213.995 326.177 213.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M356.339 217.699 Q352.728 217.699 350.899 221.264 Q349.094 224.805 349.094 231.935 Q349.094 239.041 350.899 242.606 Q352.728 246.148 356.339 246.148 Q359.973 246.148 361.779 242.606 Q363.608 239.041 363.608 231.935 Q363.608 224.805 361.779 221.264 Q359.973 217.699 356.339 217.699 M356.339 213.995 Q362.149 213.995 365.205 218.602 Q368.284 223.185 368.284 231.935 Q368.284 240.662 365.205 245.268 Q362.149 249.852 356.339 249.852 Q350.529 249.852 347.45 245.268 Q344.395 240.662 344.395 231.935 Q344.395 223.185 347.45 218.602 Q350.529 213.995 356.339 213.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip612)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.9 4017.76,231.9 \"/>\n<polyline clip-path=\"url(#clip612)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1247.56 459.964,1246.04 460.533,1245.48 461.101,1244.85 461.669,1244.14 462.238,1243.35 462.806,1242.47 463.375,1240.47 463.943,1238.39 464.511,1237.25 465.08,1235.98 465.648,1234.63 466.216,1233.16 466.785,1231.57 467.353,1229.83 467.921,1225.92 468.49,1223.98 469.058,1220.84 469.626,1218.59 470.195,1216.17 470.763,1213.55 471.331,1209.79 471.9,1204.81 472.468,1201.66 473.036,1198.39 473.605,1194.97 474.173,1191.35 474.741,1187.51 475.31,1183.44 475.878,1179.23 476.446,1173.71 477.015,1167.95 477.583,1163.04 478.152,1156.84 478.72,1151.46 479.288,1143.8 479.857,1138.08 480.425,1130.14 480.993,1123.03 481.562,1114.7 482.13,1107.08 482.698,1098.39 483.267,1091.56 483.835,1083.48 484.403,1076.35 484.972,1066.81 485.54,1058.25 486.108,1050.57 486.677,1042.66 487.245,1034.62 487.813,1025.37 488.382,1014.68 488.95,1003.81 489.518,994.959 490.087,983.885 490.655,972.801 491.224,960.703 491.792,949.472 492.36,940.333 492.929,929.96 493.497,918.564 494.065,909.131 494.634,897.636 495.202,887.192 495.77,876.67 496.339,867.368 496.907,856.828 497.475,847.25 498.044,833.646 498.612,821.039 499.18,808.57 499.749,798.244 500.317,787.177 500.885,776.918 501.454,766.735 502.022,757.749 502.59,746.709 503.159,737.918 503.727,727.08 504.295,718.107 504.864,708.305 505.432,696.625 506.001,688.181 506.569,677.724 507.137,668.528 507.706,660.385 508.274,652.257 508.842,642.092 509.411,633.973 509.979,623.974 510.547,613.025 511.116,604.524 511.684,594.084 512.252,586.897 512.821,576.434 513.389,567.567 513.957,559.805 514.526,552.148 515.094,545.622 515.662,539.154 516.231,526.419 516.799,517.422 517.367,511.845 517.936,506.284 518.504,499.741 519.072,494.112 519.641,489.866 520.209,483.403 520.778,478.239 521.346,471.901 521.914,463.692 522.483,458.009 523.051,452.189 523.619,445.621 524.188,439.118 524.756,432.031 525.324,426.216 525.893,421.529 526.461,417.964 527.029,414.648 527.598,409.948 528.166,406.662 528.734,402.16 529.303,395.851 529.871,390.499 530.439,386.778 531.008,382.926 531.576,379.05 532.144,375.538 532.713,371.83 533.281,370.384 533.85,366.913 534.418,362.579 534.986,359.481 535.555,356.199 536.123,354.848 536.691,351.503 537.26,348.479 537.828,346.348 538.396,344.379 538.965,341.191 539.533,338.161 540.101,334.335 540.67,330.649 541.238,326.857 541.806,324.45 542.375,323.318 542.943,320.005 543.511,317.75 544.08,317.529 544.648,316.128 545.216,313.906 545.785,314.587 546.353,312.063 546.921,310.817 547.49,308.629 548.058,307.356 548.627,305.117 549.195,304.822 549.763,302.608 550.332,299.296 550.9,297.332 551.468,297.48 552.037,298.51 552.605,297.624 553.173,294.257 553.742,292.158 554.31,289.1 554.878,291.42 555.447,288.325 556.015,284.534 556.583,282.863 557.152,282.456 557.72,280.741 558.288,277.968 558.857,275.567 559.425,272.349 559.993,271.254 560.562,271.507 561.13,271.456 561.698,271.331 562.267,271.153 562.835,271.02 563.404,269.987 563.972,267.713 564.54,266.592 565.109,265.306 565.677,265.362 566.245,265.388 566.814,265.338 567.382,266.518 567.95,265.359 568.519,265.121 569.087,262.82 569.655,262.95 570.224,263.865 570.792,262.713 571.36,263.824 571.929,262.805 572.497,262.529 573.065,262.334 573.634,260.21 574.202,261.172 574.77,261.069 575.339,259.812 575.907,259.597 576.476,259.621 577.044,258.469 577.612,258.469 578.181,257.363 578.749,260.451 579.317,261.012 579.886,259.663 580.454,259.31 581.022,257.055 581.591,252.741 582.159,252.831 582.727,252.88 583.296,253.969 583.864,252.747 584.432,250.725 585.001,250.897 585.569,251.115 586.137,251.254 586.706,247.387 587.274,246.642 587.842,245.736 588.411,246.033 588.979,246.565 589.547,249.017 590.116,249.196 590.684,250.283 591.253,251.168 591.821,251.818 592.389,250.493 592.958,250.435 593.526,251.256 594.094,251.237 594.663,251.151 595.231,252.008 595.799,252.802 596.368,250.485 596.936,251.491 597.504,251.091 598.073,250.791 598.641,250.432 599.209,245.993 599.778,244.861 600.346,241.994 600.914,243.348 601.483,240.476 602.051,240.917 602.619,242.346 603.188,242.431 603.756,242.799 604.325,241.958 604.893,244.193 605.461,244.294 606.03,244.274 606.598,242.197 607.166,241.354 607.735,241.754 608.303,241.986 608.871,241.004 609.44,241.115 610.008,239.186 610.576,239.612 611.145,240.132 611.713,239.57 612.281,238.816 612.85,238.217 613.418,237.445 613.986,237.02 614.555,237.726 615.123,236.293 615.691,232.728 616.26,232.434 616.828,234.284 617.396,235.914 617.965,236.436 618.533,235.099 619.102,233.687 619.67,234.513 620.238,235.071 620.807,236.732 621.375,235.261 621.943,237.997 622.512,237.47 623.08,238.925 623.648,238.417 624.217,237.859 624.785,236.266 625.353,236.657 625.922,241.377 626.49,241.631 627.058,242.81 627.627,241.751 628.195,242.049 628.763,241.111 629.332,241.433 629.9,242.519 630.468,243.808 631.037,243.86 631.605,244.875 632.173,243.79 632.742,242.648 633.31,242.394 633.879,243.4 634.447,242.312 635.015,243.24 635.584,242.262 636.152,240.283 636.72,237.26 637.289,238.808 637.857,238.802 638.425,237.896 638.994,238.051 639.562,238.437 640.13,239.499 640.699,240.793 641.267,240.867 641.835,240.669 642.404,240.738 642.972,241.874 643.54,241.713 644.109,240.696 644.677,241.522 645.245,239.297 645.814,238.256 646.382,238.314 646.951,237.353 647.519,235.626 648.087,234.109 648.656,235.394 649.224,234.834 649.792,235.144 650.361,236.618 650.929,238.05 651.497,241.403 652.066,242.464 652.634,240.21 653.202,240.234 653.771,237.991 654.339,239.209 654.907,238.297 655.476,239.35 656.044,238.383 656.612,239.636 657.181,239.742 657.749,240.562 658.317,239.418 658.886,239.464 659.454,239.549 660.022,239.619 660.591,240.777 661.159,238.709 661.728,237.985 662.296,234.916 662.864,233.154 663.433,236.451 664.001,235.633 664.569,231.728 665.138,233.134 665.706,234.332 666.274,236.882 666.843,237.972 667.411,238.087 667.979,239.086 668.548,241.091 669.116,239.676 669.684,240.389 670.253,239.128 670.821,238.983 671.389,236.857 671.958,237.997 672.526,238.746 673.094,240.583 673.663,239.365 674.231,239.373 674.799,240.1 675.368,238.945 675.936,238.822 676.505,238.635 677.073,237.452 677.641,236.388 678.21,232.426 678.778,233.578 679.346,235.042 679.915,235.117 680.483,235.055 681.051,234.235 681.62,233.526 682.188,232.739 682.756,233.129 683.325,235.178 683.893,233.272 684.461,234.449 685.03,234.674 685.598,235.937 686.166,233.903 686.735,236.09 687.303,232.951 687.871,234.271 688.44,232.573 689.008,233.75 689.577,233.995 690.145,234.288 690.713,233.695 691.282,234.869 691.85,234.147 692.418,233.628 692.987,233.717 693.555,234.957 694.123,236.279 694.692,238.304 695.26,238.238 695.828,239.384 696.397,241.162 696.965,238.836 697.533,238.628 698.102,238.423 698.67,238.05 699.238,236.746 699.807,237.583 700.375,238.6 700.943,238.192 701.512,236.841 702.08,236.93 702.648,236.039 703.217,235.041 703.785,236.059 704.354,234.934 704.922,232.961 705.49,234.222 706.059,237.29 706.627,237.051 707.195,236.982 707.764,238.943 708.332,238.71 708.9,238.268 709.469,234.307 710.037,232.574 710.605,232.922 711.174,238.189 711.742,237.96 712.31,236.65 712.879,236.154 713.447,238.216 714.015,238.959 714.584,238.809 715.152,238.44 715.72,233.977 716.289,234.005 716.857,234.314 717.425,234.292 717.994,234.19 718.562,234.003 719.131,230.858 719.699,231.197 720.267,231.493 720.836,230.935 721.404,232.289 721.972,233.362 722.541,233.32 723.109,233.374 723.677,231.567 724.246,232.587 724.814,233.508 725.382,234.521 725.951,236.562 726.519,236.225 727.087,237.061 727.656,236.927 728.224,235.74 728.792,235.723 729.361,236.868 729.929,234.644 730.497,234.275 731.066,233.207 731.634,232.394 732.203,231.574 732.771,229.785 733.339,230.044 733.908,229.426 734.476,229.913 735.044,230.294 735.613,230.673 736.181,230.056 736.749,231.409 737.318,232.471 737.886,231.442 738.454,231.576 739.023,230.796 739.591,230.829 740.159,230.943 740.728,233.275 741.296,233.536 741.864,234.467 742.433,233.765 743.001,234.999 743.569,234.83 744.138,234.929 744.706,236.113 745.274,237.059 745.843,237.897 746.411,238.81 746.98,238.44 747.548,237.211 748.116,234.912 748.685,234.737 749.253,235.753 749.821,234.718 750.39,234.699 750.958,232.495 751.526,231.565 752.095,230.665 752.663,231.695 753.231,232.845 753.8,233.862 754.368,232.864 754.936,232.003 755.505,231.327 756.073,230.465 756.641,231.681 757.21,231.726 757.778,231.005 758.346,232.17 758.915,230.441 759.483,229.544 760.052,231.945 760.62,233.228 761.188,234.194 761.757,234.158 762.325,234.048 762.893,234.15 763.462,229.114 764.03,229.301 764.598,229.524 765.167,228.854 765.735,230.342 766.303,229.562 766.872,229.812 767.44,230.203 768.008,228.453 768.577,228.911 769.145,228.303 769.713,227.54 770.282,228.915 770.85,229.184 771.418,231.763 771.987,230.954 772.555,233.204 773.123,235.564 773.692,235.708 774.26,235.754 774.829,237.875 775.397,239.442 775.965,240.14 776.534,238.746 777.102,238.215 777.67,236.884 778.239,236.764 778.807,237.671 779.375,237.449 779.944,238.299 780.512,237.048 781.08,235.752 781.649,234.623 782.217,235.527 782.785,235.378 783.354,234.312 783.922,234.073 784.49,236.276 785.059,234.173 785.627,233.128 786.195,231.918 786.764,230.993 787.332,231.339 787.9,231.491 788.469,231.515 789.037,228.866 789.606,229.246 790.174,229.566 790.742,228.937 791.311,231.214 791.879,230.679 792.447,228.645 793.016,229.97 793.584,231.046 794.152,230.239 794.721,230.421 795.289,232.649 795.857,231.79 796.426,232.919 796.994,231.932 797.562,230.962 798.131,230.283 798.699,229.568 799.267,229.793 799.836,231.082 800.404,231.259 800.972,233.488 801.541,230.522 802.109,231.888 802.678,231.169 803.246,232.598 803.814,232.818 804.383,232.851 804.951,234.101 805.519,231.829 806.088,232.023 806.656,231.062 807.224,231.302 807.793,231.312 808.361,229.651 808.929,231.993 809.498,232.238 810.066,235.485 810.634,236.26 811.203,234 811.771,235.012 812.339,233.949 812.908,233.961 813.476,234.93 814.044,234.907 814.613,235.856 815.181,234.795 815.749,231.824 816.318,232.637 816.886,232.69 817.455,232.928 818.023,232.093 818.591,233.276 819.16,234.187 819.728,233.112 820.296,234.228 820.865,233.187 821.433,230.262 822.001,231.511 822.57,230.717 823.138,231.881 823.706,231.987 824.275,233.325 824.843,234.279 825.411,232.447 825.98,233.7 826.548,231.817 827.116,232.005 827.685,231.454 828.253,231.659 828.821,231.99 829.39,230.108 829.958,232.539 830.526,231.598 831.095,231.892 831.663,230.049 832.232,231.063 832.8,231.34 833.368,233.719 833.937,235.652 834.505,235.582 835.073,235.555 835.642,236.408 836.21,237.265 836.778,237.959 837.347,237.779 837.915,237.735 838.483,238.626 839.052,235.987 839.62,233.874 840.188,234.628 840.757,233.706 841.325,234.428 841.893,235.552 842.462,236.206 843.03,237.169 843.598,235.682 844.167,232.387 844.735,232.333 845.304,233.523 845.872,231.489 846.44,228.604 847.009,229.876 847.577,230.008 848.145,230.242 848.714,227.353 849.282,226.816 849.85,229.357 850.419,229.401 850.987,229.657 851.555,228.929 852.124,230.16 852.692,232.401 853.26,233.484 853.829,231.452 854.397,228.533 854.965,230.842 855.534,230.152 856.102,230.398 856.67,231.647 857.239,231.777 857.807,232.878 858.375,233.863 858.944,235.882 859.512,235.631 860.081,236.663 860.649,234.474 861.217,235.472 861.786,235.236 862.354,233.955 862.922,234.262 863.491,234.941 864.059,232.865 864.627,232.879 865.196,234.062 865.764,234.038 866.332,235.112 866.901,232.954 867.469,234.036 868.037,234.879 868.606,237.751 869.174,240.631 869.742,239.249 870.311,236.824 870.879,237.412 871.447,238.122 872.016,237.735 872.584,237.363 873.152,234.741 873.721,236.652 874.289,237.362 874.858,233.979 875.426,232.818 875.994,231.791 876.563,231.865 877.131,232.772 877.699,231.591 878.268,231.429 878.836,227.374 879.404,226.662 879.973,225.037 880.541,225.736 881.109,227.415 881.678,225.866 882.246,225.453 882.814,226.004 883.383,227.346 883.951,225.843 884.519,224.305 885.088,223.989 885.656,224.712 886.224,224.331 886.793,224.037 887.361,224.773 887.93,226.346 888.498,225.828 889.066,227.264 889.635,227.528 890.203,228.144 890.771,229.6 891.34,230.145 891.908,228.61 892.476,230.046 893.045,232.226 893.613,231.615 894.181,231.9 894.75,230.317 895.318,232.915 895.886,232.865 896.455,232.874 897.023,233.995 897.591,236.332 898.16,233.976 898.728,235.108 899.296,236.008 899.865,236.917 900.433,237.863 901.001,238.004 901.57,236.829 902.138,236.62 902.707,236.418 903.275,240.079 903.843,239.393 904.412,238.038 904.98,237.656 905.548,237.486 906.117,238.142 906.685,237.975 907.253,238.587 907.822,233.889 908.39,233.974 908.958,236.909 909.527,235.705 910.095,236.327 910.663,238.304 911.232,235.684 911.8,236.356 912.368,238.184 912.937,238.586 913.505,236.938 914.073,236.486 914.642,237.098 915.21,236.737 915.779,234.509 916.347,233.211 916.915,231.055 917.484,232.182 918.052,232.315 918.62,232.287 919.189,232.108 919.757,233.154 920.325,232.913 920.894,231.794 921.462,229.809 922.03,229.046 922.599,231.361 923.167,232.553 923.735,231.288 924.304,231.449 924.872,230.478 925.44,231.412 926.009,232.236 926.577,232.368 927.145,231.353 927.714,232.526 928.282,233.632 928.85,235.775 929.419,239.678 929.987,239.231 930.556,239.425 931.124,239.99 931.692,237.356 932.261,240.223 932.829,236.286 933.397,235.833 933.966,235.535 934.534,234.182 935.102,235.09 935.671,234.865 936.239,235.544 936.807,234.208 937.376,234.096 937.944,232.819 938.512,232.57 939.081,230.581 939.649,229.341 940.217,230.825 940.786,231.851 941.354,230.827 941.922,230.618 942.491,230.695 943.059,230.793 943.627,229.73 944.196,228.716 944.764,228.988 945.333,223.971 945.901,223.457 946.469,225.857 947.038,225.107 947.606,225.534 948.174,224.797 948.743,227.223 949.311,226.739 949.879,226.075 950.448,228.358 951.016,228.673 951.584,228.013 952.153,228.434 952.721,229.85 953.289,231.932 953.858,231.852 954.426,231.885 954.994,230.995 955.563,230.899 956.131,229.957 956.699,228.06 957.268,225.51 957.836,228.092 958.405,227.552 958.973,225.972 959.541,226.482 960.11,224.606 960.678,225.224 961.246,225.88 961.815,229.755 962.383,229.039 962.951,228.235 963.52,228.707 964.088,229.844 964.656,230.051 965.225,230.331 965.793,227.511 966.361,230.048 966.93,230.297 967.498,232.736 968.066,233.789 968.635,234.018 969.203,232.981 969.771,234.042 970.34,232.85 970.908,232.774 971.476,233.765 972.045,235.736 972.613,237.826 973.182,237.761 973.75,238.296 974.318,235.792 974.887,236.65 975.455,236.515 976.023,236.318 976.592,236.267 977.16,237.093 977.728,236.818 978.297,237.415 978.865,236.903 979.433,238.645 980.002,239.23 980.57,237.768 981.138,236.415 981.707,235.169 982.275,234.989 982.843,234.018 983.412,230.877 983.98,230.019 984.548,230.353 985.117,231.539 985.685,231.548 986.253,231.507 986.822,232.601 987.39,231.901 987.959,229.99 988.527,230.318 989.095,228.492 989.664,228.542 990.232,230.187 990.8,231.534 991.369,230.828 991.937,231.972 992.505,233.017 993.074,233.978 993.642,232.929 994.21,234.959 994.779,234.747 995.347,233.656 995.915,234.702 996.484,235.512 997.052,235.211 997.62,233.081 998.189,235.232 998.757,238.159 999.325,237.657 999.894,239.504 1000.46,235.967 1001.03,234.831 1001.6,235.737 1002.17,235.261 1002.74,234.861 1003.3,233.627 1003.87,233.329 1004.44,234.391 1005.01,234.1 1005.58,232.786 1006.15,231.565 1006.71,231.519 1007.28,233.349 1007.85,235.179 1008.42,237.023 1008.99,235.563 1009.56,233.244 1010.12,234.162 1010.69,233.855 1011.26,232.732 1011.83,234.763 1012.4,233.39 1012.97,231.296 1013.53,231.523 1014.1,231.509 1014.67,232.53 1015.24,232.466 1015.81,231.359 1016.38,231.461 1016.94,229.337 1017.51,230.416 1018.08,229.53 1018.65,229.687 1019.22,230.718 1019.79,231.941 1020.35,230.71 1020.92,232.715 1021.49,232.426 1022.06,232.248 1022.63,232.3 1023.2,231.081 1023.76,231.34 1024.33,231.469 1024.9,233.375 1025.47,232.254 1026.04,232.148 1026.61,231.993 1027.17,230.847 1027.74,233.036 1028.31,231.91 1028.88,229.936 1029.45,228.946 1030.02,230.207 1030.58,232.507 1031.15,232.593 1031.72,228.229 1032.29,227.315 1032.86,228.724 1033.43,232.98 1033.99,233.802 1034.56,233.665 1035.13,232.543 1035.7,232.439 1036.27,232.245 1036.84,233.157 1037.4,233.971 1037.97,235.778 1038.54,236.592 1039.11,237.479 1039.68,235.799 1040.25,237.342 1040.81,235.882 1041.38,235.593 1041.95,234.185 1042.52,233.011 1043.09,231.915 1043.66,229.742 1044.22,229.791 1044.79,229.826 1045.36,230.939 1045.93,231.018 1046.5,229.905 1047.07,229.067 1047.63,229.224 1048.2,230.387 1048.77,231.409 1049.34,231.32 1049.91,232.467 1050.48,234.348 1051.05,234.15 1051.61,233.91 1052.18,233.851 1052.75,233.77 1053.32,232.823 1053.89,232.753 1054.46,229.465 1055.02,229.403 1055.59,230.735 1056.16,230.662 1056.73,230.668 1057.3,230.562 1057.87,230.468 1058.43,230.373 1059,229.708 1059.57,229.73 1060.14,231.651 1060.71,231.664 1061.28,232.39 1061.84,233.291 1062.41,233.989 1062.98,233.707 1063.55,233.534 1064.12,232.495 1064.69,231.234 1065.25,233.542 1065.82,233.474 1066.39,231.332 1066.96,231.289 1067.53,231.106 1068.1,232.27 1068.66,233.247 1069.23,235.1 1069.8,234.835 1070.37,236.514 1070.94,235.124 1071.51,235.029 1072.07,233.936 1072.64,234.802 1073.21,235.669 1073.78,235.43 1074.35,236.081 1074.92,236.784 1075.48,236.151 1076.05,233.778 1076.62,232.488 1077.19,233.224 1077.76,233.098 1078.33,234.108 1078.89,232.961 1079.46,230.454 1080.03,229.248 1080.6,228.304 1081.17,228.521 1081.74,228.567 1082.3,225.408 1082.87,224.668 1083.44,225.202 1084.01,224.704 1084.58,225.212 1085.15,226.663 1085.71,229.178 1086.28,229.611 1086.85,229.801 1087.42,229.849 1087.99,228.836 1088.56,231.059 1089.12,231.52 1089.69,230.567 1090.26,229.619 1090.83,230.833 1091.4,225.789 1091.97,227.169 1092.53,227.434 1093.1,226.741 1093.67,226.133 1094.24,227.477 1094.81,227.714 1095.38,226.189 1095.94,228.453 1096.51,229.752 1097.08,232.147 1097.65,232.113 1098.22,232.115 1098.79,231.05 1099.35,231.116 1099.92,232.359 1100.49,234.472 1101.06,236.251 1101.63,235.933 1102.2,236.809 1102.76,236.686 1103.33,237.257 1103.9,235.937 1104.47,238.763 1105.04,236.122 1105.61,236.778 1106.17,236.318 1106.74,234.927 1107.31,233.593 1107.88,232.467 1108.45,230.371 1109.02,228.407 1109.58,229.74 1110.15,231.158 1110.72,231.346 1111.29,231.27 1111.86,230.159 1112.43,230.333 1112.99,229.535 1113.56,231.826 1114.13,230.677 1114.7,231.706 1115.27,232.723 1115.84,234.68 1116.4,234.334 1116.97,233.989 1117.54,239.012 1118.11,238.522 1118.68,239.916 1119.25,238.189 1119.81,237.896 1120.38,238.428 1120.95,237.005 1121.52,236.41 1122.09,236.96 1122.66,236.796 1123.23,238.428 1123.79,236.861 1124.36,237.504 1124.93,237.071 1125.5,238.824 1126.07,237.468 1126.64,238.985 1127.2,236.167 1127.77,236.696 1128.34,237.2 1128.91,236.711 1129.48,236.219 1130.05,234.723 1130.61,234.054 1131.18,234.895 1131.75,238.609 1132.32,236.933 1132.89,233.238 1133.46,236.074 1134.02,234.536 1134.59,234.26 1135.16,234.765 1135.73,232.384 1136.3,230.162 1136.87,230.093 1137.43,229.127 1138,228.438 1138.57,226.558 1139.14,227.824 1139.71,227.812 1140.28,228.909 1140.84,227.672 1141.41,228.93 1141.98,229.933 1142.55,230.984 1143.12,231.855 1143.69,231.729 1144.25,232.604 1144.82,233.554 1145.39,230.117 1145.96,230.939 1146.53,229.851 1147.1,228.82 1147.66,228.777 1148.23,227.796 1148.8,228.918 1149.37,227.845 1149.94,230.125 1150.51,229.199 1151.07,229.339 1151.64,230.466 1152.21,231.334 1152.78,229.309 1153.35,227.296 1153.92,226.377 1154.48,226.638 1155.05,227.995 1155.62,229.122 1156.19,228.346 1156.76,226.469 1157.33,227.596 1157.89,229.78 1158.46,229.728 1159.03,227.929 1159.6,228.446 1160.17,228.35 1160.74,228.538 1161.3,226.688 1161.87,225.764 1162.44,224.085 1163.01,223.538 1163.58,225.074 1164.15,224.39 1164.71,223.773 1165.28,224.397 1165.85,225.181 1166.42,221.665 1166.99,225.383 1167.56,226.724 1168.12,228.116 1168.69,228.153 1169.26,228.635 1169.83,231.144 1170.4,231.472 1170.97,231.743 1171.53,229.991 1172.1,232.276 1172.67,232.31 1173.24,233.421 1173.81,231.464 1174.38,231.542 1174.94,231.636 1175.51,232.86 1176.08,231.794 1176.65,230.927 1177.22,230.979 1177.79,228.197 1178.35,230.707 1178.92,229.902 1179.49,231.082 1180.06,233.358 1180.63,235.385 1181.2,235.037 1181.76,234.987 1182.33,232.786 1182.9,232.718 1183.47,232.693 1184.04,232.799 1184.61,233.813 1185.17,232.786 1185.74,234.096 1186.31,235.013 1186.88,233.774 1187.45,233.83 1188.02,235.974 1188.58,238.973 1189.15,238.61 1189.72,238.04 1190.29,235.657 1190.86,235.425 1191.43,236.05 1192,235.797 1192.56,235.499 1193.13,234.275 1193.7,232.965 1194.27,231.864 1194.84,230.788 1195.41,230.857 1195.97,230.14 1196.54,227.174 1197.11,226.376 1197.68,225.609 1198.25,227.948 1198.82,229.258 1199.38,231.618 1199.95,231.646 1200.52,230.556 1201.09,230.632 1201.66,233.701 1202.23,232.536 1202.79,233.665 1203.36,234.631 1203.93,234.246 1204.5,236.059 1205.07,235.788 1205.64,233.389 1206.2,232.149 1206.77,231.022 1207.34,230.934 1207.91,230.995 1208.48,232.272 1209.05,231.1 1209.61,233.419 1210.18,232.311 1210.75,233.353 1211.32,233.281 1211.89,234.223 1212.46,230.881 1213.02,229.924 1213.59,230.271 1214.16,231.328 1214.73,229.472 1215.3,229.579 1215.87,230.851 1216.43,228.985 1217,230.119 1217.57,231.221 1218.14,230.329 1218.71,230.318 1219.28,233.571 1219.84,232.61 1220.41,233.547 1220.98,236.365 1221.55,237.321 1222.12,236.98 1222.69,237.527 1223.25,237.137 1223.82,234.632 1224.39,233.451 1224.96,234.403 1225.53,234.285 1226.1,234.19 1226.66,235.084 1227.23,235.01 1227.8,235.792 1228.37,234.358 1228.94,234.093 1229.51,233.906 1230.07,232.856 1230.64,232.876 1231.21,230.743 1231.78,230.802 1232.35,232.092 1232.92,230.978 1233.48,231.2 1234.05,233.439 1234.62,233.37 1235.19,234.426 1235.76,234.418 1236.33,231.394 1236.89,230.332 1237.46,230.295 1238.03,229.397 1238.6,229.429 1239.17,231.54 1239.74,232.631 1240.3,232.661 1240.87,232.371 1241.44,234.436 1242.01,232.947 1242.58,232.923 1243.15,232.715 1243.71,229.443 1244.28,228.772 1244.85,230.015 1245.42,229.336 1245.99,229.542 1246.56,228.901 1247.12,231.089 1247.69,233.248 1248.26,234.002 1248.83,234.867 1249.4,234.633 1249.97,233.047 1250.53,232.952 1251.1,232.988 1251.67,232.947 1252.24,233.821 1252.81,233.79 1253.38,232.358 1253.94,232.294 1254.51,233.365 1255.08,233.103 1255.65,231.843 1256.22,229.71 1256.79,228.873 1257.35,226.145 1257.92,227.51 1258.49,226.586 1259.06,228.123 1259.63,227.297 1260.2,226.741 1260.76,227.014 1261.33,228.534 1261.9,227.732 1262.47,228.364 1263.04,229.665 1263.61,228.826 1264.18,228.005 1264.74,229.401 1265.31,232.851 1265.88,232.01 1266.45,234.406 1267.02,237.002 1267.59,237.659 1268.15,235.164 1268.72,233.81 1269.29,231.64 1269.86,229.631 1270.43,235.092 1271,234.012 1271.56,233.076 1272.13,230.978 1272.7,231.082 1273.27,231.248 1273.84,230.239 1274.41,230.488 1274.97,230.629 1275.54,229.532 1276.11,230.896 1276.68,229.994 1277.25,230.1 1277.82,229.104 1278.38,228.974 1278.95,228.158 1279.52,229.512 1280.09,227.628 1280.66,228.069 1281.23,230.4 1281.79,230.306 1282.36,232.54 1282.93,232.598 1283.5,232.495 1284.07,232.425 1284.64,227.37 1285.2,228.712 1285.77,228.815 1286.34,230.03 1286.91,232.872 1287.48,232.973 1288.05,233.044 1288.61,229.897 1289.18,229.075 1289.75,229.416 1290.32,229.704 1290.89,230.889 1291.46,231.14 1292.02,232.159 1292.59,233.396 1293.16,234.364 1293.73,235.218 1294.3,235.03 1294.87,235.836 1295.43,234.632 1296,232.572 1296.57,232.746 1297.14,232.646 1297.71,231.403 1298.28,234.421 1298.84,234.091 1299.41,231.866 1299.98,234.902 1300.55,234.625 1301.12,234.329 1301.69,233.214 1302.25,231.106 1302.82,231.123 1303.39,230.226 1303.96,230.57 1304.53,230.556 1305.1,231.435 1305.66,231.351 1306.23,231.471 1306.8,231.75 1307.37,231.985 1307.94,233.034 1308.51,234.222 1309.07,234.074 1309.64,233.795 1310.21,232.715 1310.78,232.676 1311.35,232.674 1311.92,234.804 1312.48,235.492 1313.05,237.297 1313.62,234.854 1314.19,235.753 1314.76,234.679 1315.33,236.502 1315.89,238.194 1316.46,237.698 1317.03,237.168 1317.6,234.463 1318.17,234.342 1318.74,234.093 1319.3,231.968 1319.87,233.012 1320.44,233.988 1321.01,234.702 1321.58,230.276 1322.15,231.394 1322.71,232.403 1323.28,232.143 1323.85,234.193 1324.42,234.01 1324.99,233.869 1325.56,233.634 1326.12,231.064 1326.69,231.93 1327.26,231.981 1327.83,229.935 1328.4,227.801 1328.97,228.915 1329.53,230.111 1330.1,232.435 1330.67,229.245 1331.24,229.387 1331.81,230.61 1332.38,231.85 1332.94,231.869 1333.51,230.893 1334.08,228.815 1334.65,229.817 1335.22,228.958 1335.79,226.99 1336.36,225.635 1336.92,225.873 1337.49,227.476 1338.06,223.691 1338.63,225.254 1339.2,224.747 1339.77,225.37 1340.33,224.637 1340.9,225.357 1341.47,227.941 1342.04,229.473 1342.61,229.548 1343.18,230.835 1343.74,233.078 1344.31,234.06 1344.88,233.944 1345.45,233.865 1346.02,233.762 1346.59,233.608 1347.15,234.708 1347.72,234.554 1348.29,233.368 1348.86,233.295 1349.43,231.997 1350,229.92 1350.56,229.109 1351.13,229.354 1351.7,228.581 1352.27,228.629 1352.84,227.848 1353.41,225.987 1353.97,226.683 1354.54,229.187 1355.11,231.901 1355.68,231.903 1356.25,231.923 1356.82,231.014 1357.38,234.404 1357.95,233.145 1358.52,231.966 1359.09,233.058 1359.66,235.384 1360.23,233.145 1360.79,235.199 1361.36,236.085 1361.93,234.912 1362.5,236.725 1363.07,234.516 1363.64,233.321 1364.2,233.4 1364.77,231.131 1365.34,228.238 1365.91,231.518 1366.48,231.891 1367.05,230.068 1367.61,228.306 1368.18,228.769 1368.75,229.041 1369.32,233.298 1369.89,233.212 1370.46,232.093 1371.02,233.077 1371.59,233.112 1372.16,232.046 1372.73,233.039 1373.3,233.107 1373.87,233.995 1374.43,231.964 1375,231.16 1375.57,233.002 1376.14,232.892 1376.71,233.799 1377.28,232.759 1377.84,231.749 1378.41,231.953 1378.98,230.901 1379.55,232.032 1380.12,230.899 1380.69,229.15 1381.25,229.239 1381.82,229.282 1382.39,230.589 1382.96,229.656 1383.53,229.733 1384.1,228.943 1384.66,232.177 1385.23,231.135 1385.8,233.461 1386.37,234.379 1386.94,234.291 1387.51,235.048 1388.07,234.884 1388.64,236.644 1389.21,236.54 1389.78,236.43 1390.35,237.252 1390.92,238.822 1391.48,235.358 1392.05,235.033 1392.62,234.811 1393.19,234.518 1393.76,234.495 1394.33,233.471 1394.89,232.265 1395.46,232.301 1396.03,230.198 1396.6,232.507 1397.17,231.381 1397.74,231.326 1398.3,230.536 1398.87,231.503 1399.44,229.548 1400.01,228.827 1400.58,230.134 1401.15,230.123 1401.71,231.314 1402.28,233.705 1402.85,233.481 1403.42,234.421 1403.99,235.144 1404.56,237.844 1405.13,237.494 1405.69,239.308 1406.26,236.692 1406.83,237.272 1407.4,235.699 1407.97,237.104 1408.54,237.697 1409.1,237.401 1409.67,235.852 1410.24,237.43 1410.81,236.899 1411.38,235.573 1411.95,235.167 1412.51,235.807 1413.08,233.481 1413.65,234.169 1414.22,234.929 1414.79,234.404 1415.36,236.215 1415.92,235.83 1416.49,235.41 1417.06,232.91 1417.63,233.669 1418.2,233.347 1418.77,235.058 1419.33,234.668 1419.9,233.382 1420.47,233.276 1421.04,236.35 1421.61,236.91 1422.18,235.244 1422.74,235.938 1423.31,234.583 1423.88,232.317 1424.45,228.332 1425.02,227.393 1425.59,226.589 1426.15,227.742 1426.72,229.165 1427.29,228.102 1427.86,228.316 1428.43,226.28 1429,227.647 1429.56,226.86 1430.13,230.225 1430.7,231.238 1431.27,235.252 1431.84,233.797 1432.41,233.621 1432.97,234.613 1433.54,234.133 1434.11,232.998 1434.68,233.833 1435.25,234.637 1435.82,233.15 1436.38,232.849 1436.95,232.663 1437.52,230.436 1438.09,227.935 1438.66,228.279 1439.23,226.481 1439.79,227.082 1440.36,226.262 1440.93,227.722 1441.5,225.938 1442.07,224.968 1442.64,226.506 1443.2,226.831 1443.77,228.204 1444.34,227.525 1444.91,228.603 1445.48,226.908 1446.05,226.059 1446.61,225.373 1447.18,227.09 1447.75,227.513 1448.32,227.917 1448.89,229.289 1449.46,230.761 1450.02,230.919 1450.59,230.909 1451.16,229.878 1451.73,230.112 1452.3,230.193 1452.87,230.425 1453.43,230.455 1454,228.353 1454.57,228.857 1455.14,230.325 1455.71,231.443 1456.28,230.557 1456.84,230.799 1457.41,232.842 1457.98,232.832 1458.55,232.932 1459.12,231.728 1459.69,229.878 1460.25,232.112 1460.82,232.142 1461.39,232.367 1461.96,231.182 1462.53,230.263 1463.1,230.433 1463.66,229.608 1464.23,229.581 1464.8,231.895 1465.37,232.657 1465.94,234.76 1466.51,235.685 1467.07,236.194 1467.64,234.678 1468.21,234.599 1468.78,231.349 1469.35,231.529 1469.92,232.78 1470.48,232.915 1471.05,234.916 1471.62,234.941 1472.19,234.826 1472.76,232.679 1473.33,234.678 1473.89,231.321 1474.46,230.395 1475.03,230.619 1475.6,230.767 1476.17,229.711 1476.74,229.968 1477.31,230.265 1477.87,229.396 1478.44,228.584 1479.01,228.821 1479.58,230.083 1480.15,230.28 1480.72,230.402 1481.28,231.306 1481.85,232.351 1482.42,231.253 1482.99,233.446 1483.56,233.391 1484.13,233.48 1484.69,234.534 1485.26,234.481 1485.83,235.23 1486.4,238.356 1486.97,237.723 1487.54,237.393 1488.1,234.766 1488.67,234.496 1489.24,234.109 1489.81,232.927 1490.38,230.935 1490.95,231.069 1491.51,231.151 1492.08,230.306 1492.65,229.433 1493.22,229.505 1493.79,230.75 1494.36,230.981 1494.92,230.078 1495.49,230.32 1496.06,230.427 1496.63,231.54 1497.2,230.44 1497.77,233.759 1498.33,233.623 1498.9,232.385 1499.47,231.233 1500.04,231.381 1500.61,232.486 1501.18,229.223 1501.74,229.412 1502.31,229.699 1502.88,230.995 1503.45,231.188 1504.02,232.342 1504.59,233.372 1505.15,234.241 1505.72,234.042 1506.29,233.942 1506.86,235.838 1507.43,232.55 1508,233.704 1508.56,236.902 1509.13,234.636 1509.7,233.23 1510.27,233.267 1510.84,233.189 1511.41,233.1 1511.97,233.113 1512.54,232.132 1513.11,231.153 1513.68,231.872 1514.25,230.668 1514.82,232.743 1515.38,232.839 1515.95,233.674 1516.52,233.504 1517.09,234.512 1517.66,234.142 1518.23,232.994 1518.79,229.802 1519.36,229.814 1519.93,230.896 1520.5,229.804 1521.07,232.018 1521.64,232.259 1522.2,232.171 1522.77,231.146 1523.34,227.103 1523.91,230.465 1524.48,230.582 1525.05,230.797 1525.61,230.978 1526.18,230.998 1526.75,231.088 1527.32,230.91 1527.89,230.824 1528.46,229.793 1529.02,228.875 1529.59,229.027 1530.16,229.09 1530.73,232.462 1531.3,231.176 1531.87,231.142 1532.43,231.009 1533,230.098 1533.57,229.156 1534.14,228.31 1534.71,229.903 1535.28,229.073 1535.84,228.173 1536.41,227.623 1536.98,228.154 1537.55,230.691 1538.12,229.783 1538.69,231.125 1539.25,231.43 1539.82,229.424 1540.39,229.826 1540.96,229.867 1541.53,230.3 1542.1,232.657 1542.66,231.589 1543.23,230.45 1543.8,229.519 1544.37,228.55 1544.94,228.762 1545.51,229.863 1546.08,229.062 1546.64,230.127 1547.21,228.306 1547.78,227.797 1548.35,229.096 1548.92,230.564 1549.49,230.744 1550.05,231.151 1550.62,231.262 1551.19,231.456 1551.76,231.524 1552.33,231.659 1552.9,232.876 1553.46,234.832 1554.03,234.576 1554.6,234.323 1555.17,233.141 1555.74,231.965 1556.31,233.061 1556.87,232.798 1557.44,230.627 1558.01,230.972 1558.58,231.132 1559.15,232.323 1559.72,233.563 1560.28,234.51 1560.85,235.385 1561.42,234.063 1561.99,233.957 1562.56,233.791 1563.13,232.768 1563.69,230.677 1564.26,233.644 1564.83,234.594 1565.4,234.528 1565.97,236.535 1566.54,236.071 1567.1,235.097 1567.67,235.913 1568.24,234.629 1568.81,235.192 1569.38,235.848 1569.95,236.583 1570.51,235.412 1571.08,234.201 1571.65,236.825 1572.22,234.528 1572.79,232.249 1573.36,231.139 1573.92,230.141 1574.49,229.115 1575.06,228.249 1575.63,230.345 1576.2,230.655 1576.77,232.861 1577.33,234.944 1577.9,231.505 1578.47,231.496 1579.04,230.405 1579.61,231.717 1580.18,233.948 1580.74,234.603 1581.31,234.563 1581.88,233.553 1582.45,232.311 1583.02,233.371 1583.59,233.43 1584.15,232.295 1584.72,231.087 1585.29,232.125 1585.86,232.102 1586.43,232.239 1587,231.359 1587.56,231.508 1588.13,233.262 1588.7,232.131 1589.27,233.109 1589.84,235.167 1590.41,234.751 1590.97,238.584 1591.54,238.32 1592.11,236.708 1592.68,234.246 1593.25,232.895 1593.82,234.845 1594.38,231.57 1594.95,233.537 1595.52,234.424 1596.09,234.315 1596.66,231.836 1597.23,232.716 1597.79,234.74 1598.36,235.615 1598.93,236.459 1599.5,235.93 1600.07,234.59 1600.64,234.175 1601.2,233.939 1601.77,236.609 1602.34,236.366 1602.91,234.974 1603.48,233.487 1604.05,232.212 1604.61,232.956 1605.18,232.584 1605.75,232.635 1606.32,231.502 1606.89,229.292 1607.46,227.252 1608.02,226.458 1608.59,224.478 1609.16,223.914 1609.73,224.419 1610.3,224.071 1610.87,223.814 1611.43,225.429 1612,223.9 1612.57,224.22 1613.14,226.909 1613.71,228.078 1614.28,228.232 1614.84,227.406 1615.41,225.698 1615.98,225.239 1616.55,225.822 1617.12,226.072 1617.69,227.362 1618.26,227.724 1618.82,227.943 1619.39,229.09 1619.96,227.3 1620.53,227.76 1621.1,227.082 1621.67,225.518 1622.23,226.116 1622.8,226.477 1623.37,225.731 1623.94,225.066 1624.51,224.673 1625.08,225.173 1625.64,225.871 1626.21,225.745 1626.78,225.337 1627.35,226.881 1627.92,226.367 1628.49,224.729 1629.05,226.447 1629.62,225.15 1630.19,224.764 1630.76,225.371 1631.33,225.975 1631.9,226.429 1632.46,228.816 1633.03,229.364 1633.6,227.698 1634.17,228.111 1634.74,231.878 1635.31,231.954 1635.87,231.392 1636.44,228.438 1637.01,228.764 1637.58,230.343 1638.15,231.379 1638.72,230.438 1639.28,232.966 1639.85,237.154 1640.42,238.123 1640.99,237.832 1641.56,237.49 1642.13,235.351 1642.69,235.153 1643.26,235.934 1643.83,236.716 1644.4,235.514 1644.97,237.43 1645.54,236.133 1646.1,234.964 1646.67,233.862 1647.24,234.818 1647.81,234.598 1648.38,235.579 1648.95,236.351 1649.51,236.932 1650.08,238.719 1650.65,237.475 1651.22,235.114 1651.79,231.859 1652.36,232.871 1652.92,234.179 1653.49,234.304 1654.06,233.407 1654.63,235.236 1655.2,237.175 1655.77,236.938 1656.33,236.782 1656.9,236.418 1657.47,238.062 1658.04,238.781 1658.61,238.279 1659.18,237.817 1659.74,239.511 1660.31,238.837 1660.88,238.478 1661.45,240.242 1662.02,238.68 1662.59,239.116 1663.15,239.766 1663.72,242.069 1664.29,242.029 1664.86,240.276 1665.43,238.649 1666,237.249 1666.56,233.897 1667.13,234.794 1667.7,234.743 1668.27,234.387 1668.84,236.386 1669.41,235.776 1669.97,231.592 1670.54,230.362 1671.11,229.44 1671.68,226.48 1672.25,226.599 1672.82,225.031 1673.38,226.524 1673.95,225.929 1674.52,226.183 1675.09,225.631 1675.66,226.226 1676.23,225.599 1676.79,223.684 1677.36,222.063 1677.93,223.949 1678.5,225.432 1679.07,227.049 1679.64,226.539 1680.2,225.963 1680.77,226.426 1681.34,226.764 1681.91,228.219 1682.48,227.459 1683.05,228.767 1683.61,228.898 1684.18,229.152 1684.75,230.484 1685.32,232.913 1685.89,236.07 1686.46,237.123 1687.02,236.757 1687.59,236.433 1688.16,236.033 1688.73,235.694 1689.3,235.4 1689.87,235.235 1690.44,232.817 1691,231.584 1691.57,231.434 1692.14,231.299 1692.71,233.591 1693.28,232.407 1693.85,230.366 1694.41,227.567 1694.98,227.741 1695.55,230.959 1696.12,228.951 1696.69,229.165 1697.26,229.257 1697.82,229.66 1698.39,230.87 1698.96,231.193 1699.53,232.25 1700.1,234.472 1700.67,236.232 1701.23,235.941 1701.8,235.67 1702.37,235.322 1702.94,237.295 1703.51,236.969 1704.08,237.728 1704.64,236.234 1705.21,235.888 1705.78,235.869 1706.35,235.461 1706.92,235.401 1707.49,235.367 1708.05,233.368 1708.62,235.219 1709.19,237.119 1709.76,235.813 1710.33,235.571 1710.9,235.644 1711.46,235.357 1712.03,235.102 1712.6,235.669 1713.17,235.326 1713.74,234.934 1714.31,236.844 1714.87,235.345 1715.44,236.172 1716.01,234.873 1716.58,234.574 1717.15,234.477 1717.72,233.586 1718.28,234.388 1718.85,236.133 1719.42,235.918 1719.99,236.747 1720.56,234.5 1721.13,232.287 1721.69,231.113 1722.26,231.205 1722.83,233.099 1723.4,234.969 1723.97,235.69 1724.54,236.378 1725.1,235.912 1725.67,236.706 1726.24,238.231 1726.81,235.699 1727.38,235.481 1727.95,234.308 1728.51,235.942 1729.08,235.307 1729.65,233.908 1730.22,234.582 1730.79,233.262 1731.36,233.078 1731.92,232.969 1732.49,233.864 1733.06,233.703 1733.63,233.278 1734.2,233.041 1734.77,231.636 1735.33,232.56 1735.9,232.418 1736.47,231.207 1737.04,231.302 1737.61,232.067 1738.18,230.811 1738.74,227.468 1739.31,227.44 1739.88,228.602 1740.45,228.846 1741.02,227.89 1741.59,227.853 1742.15,225.793 1742.72,224.243 1743.29,223.491 1743.86,222.839 1744.43,220.321 1745,219.895 1745.56,221.596 1746.13,222.198 1746.7,222.861 1747.27,224.344 1747.84,225.02 1748.41,226.567 1748.97,226.76 1749.54,225.054 1750.11,226.369 1750.68,226.891 1751.25,226.276 1751.82,227.916 1752.38,230.142 1752.95,230.299 1753.52,230.525 1754.09,229.733 1754.66,227.826 1755.23,228.238 1755.79,228.528 1756.36,227.761 1756.93,222.919 1757.5,223.487 1758.07,224.324 1758.64,225.872 1759.21,227.263 1759.77,225.656 1760.34,227.467 1760.91,228.854 1761.48,229.07 1762.05,230.398 1762.62,231.664 1763.18,232.839 1763.75,233.968 1764.32,236.069 1764.89,235.95 1765.46,234.81 1766.03,235.734 1766.59,234.472 1767.16,235.371 1767.73,235.191 1768.3,237.303 1768.87,238.235 1769.44,237.912 1770,238.784 1770.57,236.28 1771.14,235.919 1771.71,235.759 1772.28,236.468 1772.85,232.068 1773.41,231.983 1773.98,231.95 1774.55,232.936 1775.12,232.749 1775.69,233.609 1776.26,234.566 1776.82,235.29 1777.39,236.05 1777.96,236.721 1778.53,236.524 1779.1,237.131 1779.67,237.791 1780.23,237.516 1780.8,237.006 1781.37,238.69 1781.94,238.115 1782.51,236.807 1783.08,235.314 1783.64,237.073 1784.21,236.64 1784.78,237.189 1785.35,237.875 1785.92,237.411 1786.49,236.616 1787.05,235.126 1787.62,233.828 1788.19,233.645 1788.76,233.538 1789.33,234.397 1789.9,236.011 1790.46,238.445 1791.03,240.816 1791.6,239.04 1792.17,238.096 1792.74,237.82 1793.31,238.267 1793.87,237.338 1794.44,237.55 1795.01,235.937 1795.58,236.462 1796.15,238.072 1796.72,238.501 1797.28,236.758 1797.85,239.546 1798.42,236.773 1798.99,233.993 1799.56,232.528 1800.13,230.177 1800.69,230.244 1801.26,230.179 1801.83,230.983 1802.4,229.962 1802.97,230.785 1803.54,229.67 1804.1,227.547 1804.67,229.581 1805.24,227.705 1805.81,228.906 1806.38,228.864 1806.95,227.751 1807.51,226.855 1808.08,225.117 1808.65,225.381 1809.22,225.662 1809.79,226.031 1810.36,227.341 1810.92,227.596 1811.49,227.703 1812.06,229.976 1812.63,231.977 1813.2,230.798 1813.77,228.804 1814.33,231.234 1814.9,231.407 1815.47,232.102 1816.04,232.074 1816.61,230.069 1817.18,229.99 1817.74,229.813 1818.31,229.786 1818.88,230.867 1819.45,230.87 1820.02,229.837 1820.59,230.79 1821.15,232.617 1821.72,232.429 1822.29,232.392 1822.86,232.238 1823.43,228.948 1824,229.393 1824.56,228.545 1825.13,227.849 1825.7,229.181 1826.27,226.43 1826.84,228.743 1827.41,228.88 1827.97,228.13 1828.54,227.248 1829.11,227.622 1829.68,226.859 1830.25,227.161 1830.82,227.388 1831.39,227.748 1831.95,227.861 1832.52,228.285 1833.09,227.368 1833.66,229.8 1834.23,230.024 1834.8,231.491 1835.36,232.48 1835.93,232.194 1836.5,232.007 1837.07,231.251 1837.64,231.006 1838.21,228.971 1838.77,229.045 1839.34,229.497 1839.91,230.61 1840.48,232.651 1841.05,230.581 1841.62,228.836 1842.18,227.936 1842.75,228.447 1843.32,227.625 1843.89,227.951 1844.46,228.408 1845.03,228.936 1845.59,230.25 1846.16,231.482 1846.73,231.326 1847.3,233.414 1847.87,232.332 1848.44,232.41 1849,232.37 1849.57,232.504 1850.14,230.294 1850.71,229.423 1851.28,228.548 1851.85,228.826 1852.41,227.96 1852.98,228.255 1853.55,226.254 1854.12,226.689 1854.69,226.189 1855.26,226.502 1855.82,227.797 1856.39,232.133 1856.96,233.228 1857.53,233.82 1858.1,233.757 1858.67,234.545 1859.23,235.499 1859.8,229.126 1860.37,228.55 1860.94,228.808 1861.51,228.281 1862.08,230.601 1862.64,231.781 1863.21,232.056 1863.78,231.178 1864.35,231.498 1864.92,233.918 1865.49,230.784 1866.05,231.911 1866.62,231.11 1867.19,232.279 1867.76,233.454 1868.33,233.366 1868.9,233.567 1869.46,234.341 1870.03,235.477 1870.6,233.296 1871.17,230.043 1871.74,227.34 1872.31,230.014 1872.87,229.219 1873.44,227.425 1874.01,227.897 1874.58,230.252 1875.15,233.706 1875.72,236.805 1876.28,233.572 1876.85,234.776 1877.42,231.562 1877.99,232.619 1878.56,232.657 1879.13,230.843 1879.69,234.24 1880.26,233.095 1880.83,233.139 1881.4,233.244 1881.97,233.072 1882.54,231.107 1883.1,231.086 1883.67,231.334 1884.24,232.463 1884.81,231.61 1885.38,231.869 1885.95,234.197 1886.51,235.992 1887.08,235.737 1887.65,235.684 1888.22,236.404 1888.79,236.186 1889.36,236.87 1889.92,234.591 1890.49,233.603 1891.06,234.501 1891.63,237.397 1892.2,236.973 1892.77,237.674 1893.33,237.272 1893.9,236.655 1894.47,238.27 1895.04,235.692 1895.61,235.136 1896.18,234.717 1896.74,232.305 1897.31,232.33 1897.88,232.293 1898.45,232.293 1899.02,234.015 1899.59,233.67 1900.16,234.537 1900.72,235.425 1901.29,233.285 1901.86,231.373 1902.43,231.33 1903,231.146 1903.57,230.188 1904.13,231.407 1904.7,231.576 1905.27,230.577 1905.84,230.672 1906.41,230.586 1906.98,230.391 1907.54,231.598 1908.11,231.486 1908.68,231.542 1909.25,228.407 1909.82,227.701 1910.39,227.969 1910.95,228.224 1911.52,228.24 1912.09,229.702 1912.66,228.685 1913.23,228.997 1913.8,230.176 1914.36,228.25 1914.93,231.902 1915.5,231.017 1916.07,232.148 1916.64,232.306 1917.21,234.208 1917.77,235.174 1918.34,235.854 1918.91,235.596 1919.48,237.322 1920.05,237.007 1920.62,236.762 1921.18,236.746 1921.75,235.375 1922.32,235.144 1922.89,231.893 1923.46,232.988 1924.03,232.642 1924.59,232.591 1925.16,232.39 1925.73,230.352 1926.3,228.34 1926.87,229.619 1927.44,229.759 1928,229.768 1928.57,231.096 1929.14,232.013 1929.71,231.015 1930.28,229.732 1930.85,230.722 1931.41,230.795 1931.98,231.019 1932.55,231.026 1933.12,231.004 1933.69,230.005 1934.26,231.129 1934.82,231.218 1935.39,232.284 1935.96,231.03 1936.53,231.178 1937.1,230.479 1937.67,231.644 1938.23,230.682 1938.8,231.738 1939.37,230.752 1939.94,230.768 1940.51,231.922 1941.08,233.101 1941.64,234.082 1942.21,236.048 1942.78,232.516 1943.35,231.439 1943.92,232.338 1944.49,232.41 1945.05,232.485 1945.62,232.371 1946.19,232.221 1946.76,234.254 1947.33,234.069 1947.9,233.753 1948.46,233.719 1949.03,232.398 1949.6,231.337 1950.17,231.383 1950.74,228.426 1951.31,227.761 1951.87,229.204 1952.44,228.178 1953.01,229.546 1953.58,231.723 1954.15,235.917 1954.72,235.588 1955.28,235.232 1955.85,231.827 1956.42,232.913 1956.99,230.745 1957.56,232.776 1958.13,231.84 1958.69,229.843 1959.26,231.194 1959.83,232.384 1960.4,234.548 1960.97,234.299 1961.54,232.993 1962.1,233.916 1962.67,231.732 1963.24,232.737 1963.81,233.738 1964.38,233.719 1964.95,234.611 1965.51,232.429 1966.08,231.414 1966.65,231.313 1967.22,232.467 1967.79,230.465 1968.36,229.361 1968.92,229.575 1969.49,229.785 1970.06,229.849 1970.63,231.208 1971.2,231.396 1971.77,231.385 1972.34,232.56 1972.9,231.684 1973.47,230.703 1974.04,230.841 1974.61,232.11 1975.18,231.393 1975.75,232.293 1976.31,232.171 1976.88,232.037 1977.45,230.994 1978.02,231.107 1978.59,234.473 1979.16,234.159 1979.72,232.954 1980.29,235.992 1980.86,235.66 1981.43,237.413 1982,236.961 1982.57,237.691 1983.13,235.12 1983.7,234.891 1984.27,235.763 1984.84,235.668 1985.41,235.432 1985.98,234.067 1986.54,232.969 1987.11,234.928 1987.68,234.745 1988.25,235.612 1988.82,236.309 1989.39,234.79 1989.95,235.482 1990.52,235.922 1991.09,234.552 1991.66,234.229 1992.23,232.696 1992.8,232.501 1993.36,230.135 1993.93,230.183 1994.5,230.358 1995.07,230.203 1995.64,229.413 1996.21,228.473 1996.77,228.581 1997.34,226.702 1997.91,225.904 1998.48,226.16 1999.05,224.547 1999.62,223.121 2000.18,221.8 2000.75,223.531 2001.32,224.181 2001.89,223.687 2002.46,225.214 2003.03,225.672 2003.59,226.392 2004.16,224.981 2004.73,224.213 2005.3,227.78 2005.87,228.007 2006.44,228.417 2007,229.695 2007.57,229.962 2008.14,229.029 2008.71,227.287 2009.28,230.827 2009.85,234.969 2010.41,234.006 2010.98,233.036 2011.55,235.832 2012.12,232.705 2012.69,232.76 2013.26,233.665 2013.82,231.677 2014.39,230.582 2014.96,233.846 2015.53,234.005 2016.1,232.77 2016.67,230.732 2017.23,230.925 2017.8,231.088 2018.37,229.075 2018.94,228.382 2019.51,229.859 2020.08,230.959 2020.64,232.013 2021.21,233.141 2021.78,233.265 2022.35,234.018 2022.92,234.912 2023.49,235.82 2024.05,233.558 2024.62,234.575 2025.19,234.371 2025.76,235.181 2026.33,235.872 2026.9,235.49 2027.46,233.219 2028.03,233.176 2028.6,232.082 2029.17,233.079 2029.74,233.223 2030.31,232.003 2030.87,230.954 2031.44,231.188 2032.01,230.43 2032.58,231.627 2033.15,229.492 2033.72,229.583 2034.28,227.796 2034.85,227.817 2035.42,227.934 2035.99,226.999 2036.56,227.562 2037.13,228.915 2037.69,229.201 2038.26,230.381 2038.83,230.452 2039.4,230.587 2039.97,231.752 2040.54,231.876 2041.11,230.797 2041.67,232.941 2042.24,234.935 2042.81,234.638 2043.38,235.534 2043.95,235.308 2044.52,235.116 2045.08,235.849 2045.65,237.856 2046.22,236.529 2046.79,236.26 2047.36,233.918 2047.93,234.892 2048.49,234.801 2049.06,234.52 2049.63,234.51 2050.2,235.479 2050.77,234.155 2051.34,231.009 2051.9,235.229 2052.47,235.025 2053.04,234.936 2053.61,233.685 2054.18,233.59 2054.75,231.292 2055.31,232.241 2055.88,233.197 2056.45,232.15 2057.02,232.196 2057.59,232.222 2058.16,230.124 2058.72,231.139 2059.29,231.057 2059.86,232.118 2060.43,230.091 2061,231.198 2061.57,228.248 2062.13,230.472 2062.7,229.403 2063.27,229.612 2063.84,231.845 2064.41,231.734 2064.98,231.624 2065.54,232.618 2066.11,233.669 2066.68,233.427 2067.25,232.125 2067.82,232.124 2068.39,233.159 2068.95,234.982 2069.52,232.505 2070.09,233.584 2070.66,233.843 2071.23,232.536 2071.8,233.188 2072.36,233.096 2072.93,234.087 2073.5,233.952 2074.07,232.945 2074.64,234.017 2075.21,233.968 2075.77,235.863 2076.34,235.485 2076.91,234.286 2077.48,236.035 2078.05,235.581 2078.62,233.235 2079.18,232.193 2079.75,232.152 2080.32,230.955 2080.89,231.138 2081.46,229.024 2082.03,229.2 2082.59,230.449 2083.16,231.751 2083.73,233.765 2084.3,233.562 2084.87,233.567 2085.44,231.376 2086,228.356 2086.57,230.674 2087.14,230.816 2087.71,230.861 2088.28,230.927 2088.85,229.879 2089.41,228.929 2089.98,230.036 2090.55,229.223 2091.12,229.301 2091.69,229.536 2092.26,228.639 2092.82,230.873 2093.39,231.104 2093.96,230.264 2094.53,231.486 2095.1,231.277 2095.67,231.245 2096.23,229.331 2096.8,228.536 2097.37,228.645 2097.94,229.871 2098.51,229.1 2099.08,230.363 2099.64,229.777 2100.21,229.738 2100.78,229.959 2101.35,229.878 2101.92,230.021 2102.49,228.33 2103.05,229.873 2103.62,229.019 2104.19,228.006 2104.76,230.19 2105.33,231.27 2105.9,234.344 2106.46,235.33 2107.03,235.112 2107.6,236.993 2108.17,236.731 2108.74,234.237 2109.31,233.232 2109.87,230.996 2110.44,231.199 2111.01,232.281 2111.58,233.334 2112.15,233.219 2112.72,233.053 2113.29,232.969 2113.85,231.945 2114.42,230.972 2114.99,230.991 2115.56,232.185 2116.13,232.201 2116.7,234.355 2117.26,233.944 2117.83,234.832 2118.4,236.791 2118.97,235.425 2119.54,236.021 2120.11,236.766 2120.67,235.252 2121.24,234.114 2121.81,231.945 2122.38,232.002 2122.95,232.926 2123.52,234.96 2124.08,234.419 2124.65,235.127 2125.22,235.725 2125.79,234.173 2126.36,233.862 2126.93,232.541 2127.49,231.186 2128.06,229.217 2128.63,228.408 2129.2,227.617 2129.77,223.768 2130.34,223.421 2130.9,226.251 2131.47,227.455 2132.04,227.651 2132.61,227.821 2133.18,228.3 2133.75,229.535 2134.31,228.65 2134.88,228.902 2135.45,228.124 2136.02,226.533 2136.59,226.677 2137.16,229.358 2137.72,228.453 2138.29,229.719 2138.86,228.895 2139.43,226.18 2140,225.553 2140.57,225.857 2141.13,228.321 2141.7,229.612 2142.27,229.904 2142.84,229.927 2143.41,231.326 2143.98,232.697 2144.54,232.667 2145.11,232.413 2145.68,229.369 2146.25,229.31 2146.82,230.559 2147.39,230.826 2147.95,230.037 2148.52,233.24 2149.09,236.414 2149.66,236.124 2150.23,235.77 2150.8,235.666 2151.36,236.507 2151.93,236.315 2152.5,237.074 2153.07,235.712 2153.64,235.353 2154.21,230.968 2154.77,233.249 2155.34,231.981 2155.91,229.79 2156.48,230.881 2157.05,230.102 2157.62,230.128 2158.18,229.302 2158.75,225.57 2159.32,229.199 2159.89,229.483 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip610)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip610)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip610)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip610)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.024\n  with uncertainty of ± 0.0021560392741988865\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01408 ± (0.00395669, 0.00394184) (MC)\n  95% confidence interval: [-4.02153, -4.0065] (MC)\n  linear error propagation: -4.01454 ± 0.00388178\n  |δ_y| = |0.00232317| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014083990861429, val_l = 0.007445592237237619, val_u = 0.007584204701065467)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip640\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip641\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip640)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip642\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.37 2211.02,1146.37 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,983.404 2211.02,983.404 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,820.439 2211.02,820.439 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,657.474 2211.02,657.474 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,494.509 2211.02,494.509 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,331.544 2211.02,331.544 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.37 365.751,1146.37 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,983.404 365.751,983.404 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,820.439 365.751,820.439 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,657.474 365.751,657.474 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,494.509 365.751,494.509 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,331.544 365.751,331.544 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M298.909 1132.17 Q295.298 1132.17 293.469 1135.73 Q291.664 1139.27 291.664 1146.4 Q291.664 1153.51 293.469 1157.08 Q295.298 1160.62 298.909 1160.62 Q302.543 1160.62 304.349 1157.08 Q306.177 1153.51 306.177 1146.4 Q306.177 1139.27 304.349 1135.73 Q302.543 1132.17 298.909 1132.17 M298.909 1128.46 Q304.719 1128.46 307.775 1133.07 Q310.853 1137.65 310.853 1146.4 Q310.853 1155.13 307.775 1159.74 Q304.719 1164.32 298.909 1164.32 Q293.099 1164.32 290.02 1159.74 Q286.964 1155.13 286.964 1146.4 Q286.964 1137.65 290.02 1133.07 Q293.099 1128.46 298.909 1128.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M259.557 996.749 L267.196 996.749 L267.196 970.383 L258.886 972.05 L258.886 967.791 L267.15 966.124 L271.826 966.124 L271.826 996.749 L279.465 996.749 L279.465 1000.68 L259.557 1000.68 L259.557 996.749 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 969.203 Q295.298 969.203 293.469 972.767 Q291.664 976.309 291.664 983.439 Q291.664 990.545 293.469 994.11 Q295.298 997.652 298.909 997.652 Q302.543 997.652 304.349 994.11 Q306.177 990.545 306.177 983.439 Q306.177 976.309 304.349 972.767 Q302.543 969.203 298.909 969.203 M298.909 965.499 Q304.719 965.499 307.775 970.105 Q310.853 974.689 310.853 983.439 Q310.853 992.166 307.775 996.772 Q304.719 1001.36 298.909 1001.36 Q293.099 1001.36 290.02 996.772 Q286.964 992.166 286.964 983.439 Q286.964 974.689 290.02 970.105 Q293.099 965.499 298.909 965.499 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M262.775 833.784 L279.094 833.784 L279.094 837.719 L257.15 837.719 L257.15 833.784 Q259.812 831.029 264.395 826.4 Q269.002 821.747 270.182 820.404 Q272.428 817.881 273.307 816.145 Q274.21 814.386 274.21 812.696 Q274.21 809.941 272.266 808.205 Q270.344 806.469 267.242 806.469 Q265.043 806.469 262.59 807.233 Q260.159 807.997 257.381 809.548 L257.381 804.826 Q260.205 803.691 262.659 803.113 Q265.113 802.534 267.15 802.534 Q272.52 802.534 275.715 805.219 Q278.909 807.904 278.909 812.395 Q278.909 814.525 278.099 816.446 Q277.312 818.344 275.205 820.937 Q274.627 821.608 271.525 824.825 Q268.423 828.02 262.775 833.784 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 806.238 Q295.298 806.238 293.469 809.802 Q291.664 813.344 291.664 820.474 Q291.664 827.58 293.469 831.145 Q295.298 834.686 298.909 834.686 Q302.543 834.686 304.349 831.145 Q306.177 827.58 306.177 820.474 Q306.177 813.344 304.349 809.802 Q302.543 806.238 298.909 806.238 M298.909 802.534 Q304.719 802.534 307.775 807.14 Q310.853 811.724 310.853 820.474 Q310.853 829.2 307.775 833.807 Q304.719 838.39 298.909 838.39 Q293.099 838.39 290.02 833.807 Q286.964 829.2 286.964 820.474 Q286.964 811.724 290.02 807.14 Q293.099 802.534 298.909 802.534 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M272.914 656.12 Q276.27 656.837 278.145 659.106 Q280.043 661.374 280.043 664.708 Q280.043 669.823 276.525 672.624 Q273.006 675.425 266.525 675.425 Q264.349 675.425 262.034 674.985 Q259.742 674.569 257.289 673.712 L257.289 669.198 Q259.233 670.332 261.548 670.911 Q263.863 671.49 266.386 671.49 Q270.784 671.49 273.076 669.754 Q275.39 668.018 275.39 664.708 Q275.39 661.652 273.238 659.939 Q271.108 658.203 267.289 658.203 L263.261 658.203 L263.261 654.36 L267.474 654.36 Q270.923 654.36 272.752 652.995 Q274.58 651.606 274.58 649.013 Q274.58 646.351 272.682 644.939 Q270.807 643.504 267.289 643.504 Q265.367 643.504 263.168 643.921 Q260.969 644.337 258.33 645.217 L258.33 641.05 Q260.992 640.31 263.307 639.939 Q265.645 639.569 267.705 639.569 Q273.029 639.569 276.131 641.999 Q279.233 644.407 279.233 648.527 Q279.233 651.397 277.59 653.388 Q275.946 655.356 272.914 656.12 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 643.272 Q295.298 643.272 293.469 646.837 Q291.664 650.379 291.664 657.508 Q291.664 664.615 293.469 668.18 Q295.298 671.721 298.909 671.721 Q302.543 671.721 304.349 668.18 Q306.177 664.615 306.177 657.508 Q306.177 650.379 304.349 646.837 Q302.543 643.272 298.909 643.272 M298.909 639.569 Q304.719 639.569 307.775 644.175 Q310.853 648.759 310.853 657.508 Q310.853 666.235 307.775 670.842 Q304.719 675.425 298.909 675.425 Q293.099 675.425 290.02 670.842 Q286.964 666.235 286.964 657.508 Q286.964 648.759 290.02 644.175 Q293.099 639.569 298.909 639.569 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M271.594 481.303 L259.789 499.752 L271.594 499.752 L271.594 481.303 M270.367 477.229 L276.247 477.229 L276.247 499.752 L281.177 499.752 L281.177 503.641 L276.247 503.641 L276.247 511.789 L271.594 511.789 L271.594 503.641 L255.992 503.641 L255.992 499.127 L270.367 477.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 480.307 Q295.298 480.307 293.469 483.872 Q291.664 487.414 291.664 494.543 Q291.664 501.65 293.469 505.215 Q295.298 508.756 298.909 508.756 Q302.543 508.756 304.349 505.215 Q306.177 501.65 306.177 494.543 Q306.177 487.414 304.349 483.872 Q302.543 480.307 298.909 480.307 M298.909 476.604 Q304.719 476.604 307.775 481.21 Q310.853 485.793 310.853 494.543 Q310.853 503.27 307.775 507.877 Q304.719 512.46 298.909 512.46 Q293.099 512.46 290.02 507.877 Q286.964 503.27 286.964 494.543 Q286.964 485.793 290.02 481.21 Q293.099 476.604 298.909 476.604 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M258.793 314.264 L277.15 314.264 L277.15 318.199 L263.076 318.199 L263.076 326.671 Q264.094 326.324 265.113 326.162 Q266.131 325.976 267.15 325.976 Q272.937 325.976 276.316 329.148 Q279.696 332.319 279.696 337.736 Q279.696 343.314 276.224 346.416 Q272.752 349.495 266.432 349.495 Q264.256 349.495 261.988 349.124 Q259.742 348.754 257.335 348.013 L257.335 343.314 Q259.418 344.449 261.641 345.004 Q263.863 345.56 266.34 345.56 Q270.344 345.56 272.682 343.453 Q275.02 341.347 275.02 337.736 Q275.02 334.125 272.682 332.018 Q270.344 329.912 266.34 329.912 Q264.465 329.912 262.59 330.328 Q260.738 330.745 258.793 331.625 L258.793 314.264 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M298.909 317.342 Q295.298 317.342 293.469 320.907 Q291.664 324.449 291.664 331.578 Q291.664 338.685 293.469 342.249 Q295.298 345.791 298.909 345.791 Q302.543 345.791 304.349 342.249 Q306.177 338.685 306.177 331.578 Q306.177 324.449 304.349 320.907 Q302.543 317.342 298.909 317.342 M298.909 313.639 Q304.719 313.639 307.775 318.245 Q310.853 322.828 310.853 331.578 Q310.853 340.305 307.775 344.912 Q304.719 349.495 298.909 349.495 Q293.099 349.495 290.02 344.912 Q286.964 340.305 286.964 331.578 Q286.964 322.828 290.02 318.245 Q293.099 313.639 298.909 313.639 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip642)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1026.29 400.199,915.977 400.786,814.76 401.372,722.028 401.958,637.217 402.545,559.803 403.131,489.304 403.718,532.678 404.304,563.716 404.891,501.827 405.477,445.739 406.063,395.076 406.65,349.487 407.236,308.643 407.823,341.228 408.409,368.382 408.995,334.402 409.582,305.556 410.168,279.041 410.755,255.929 411.341,235.995 411.927,219.895 412.514,286.471 413.1,270.315 413.687,292.066 414.273,280.505 414.86,271.118 415.446,265.287 416.032,286.562 416.619,332.097 417.205,328.978 417.792,326.092 418.378,324.016 418.964,323.491 419.551,324.69 420.137,327.646 420.724,330.721 421.31,351.641 421.896,372.422 422.483,378.247 423.069,398.575 423.656,405.896 424.242,437.486 424.829,444.294 425.415,472.26 426.001,488.874 426.588,514.527 427.174,531.187 427.761,554.756 428.347,561.412 428.933,576.367 429.52,582.896 430.106,605.14 430.693,619.055 431.279,626.2 431.865,633.901 432.452,641.599 433.038,655.378 433.625,675.96 434.211,696.151 434.798,704.991 435.384,723.972 435.97,741.937 436.557,763.456 437.143,780.183 437.73,787.488 438.316,799.431 438.902,814.88 439.489,822.334 440.075,837.115 440.662,847.662 441.248,858.18 441.835,864.307 442.421,874.396 443.007,881.18 443.594,900.452 444.18,916.21 444.767,931.228 445.353,939.814 445.939,950.408 446.526,958.676 447.112,966.698 447.699,971.538 448.285,981.75 448.871,986.206 449.458,995.837 450.044,1000.89 450.631,1008.02 451.217,1019.62 451.804,1023.71 452.39,1032.49 452.976,1038.5 453.563,1042.25 454.149,1046.09 454.736,1054.42 455.322,1058.5 455.908,1066.62 456.495,1076.78 457.081,1082.06 457.668,1091.32 458.254,1094.26 458.84,1103.72 459.427,1110.2 460.013,1114.71 460.6,1119.15 461.186,1121.62 461.773,1124.11 462.359,1138.12 462.945,1145.52 463.532,1146.99 464.118,1148.54 464.705,1151.94 465.291,1153.88 465.877,1153.55 466.464,1157.12 467.05,1158.62 467.637,1162.21 468.223,1169.05 468.809,1171.84 469.396,1174.98 469.982,1179.45 470.569,1183.95 471.155,1189.5 471.742,1193.16 472.328,1195.15 472.914,1195.48 473.501,1195.5 474.087,1197.76 474.674,1197.94 475.26,1200.07 475.846,1205.09 476.433,1208.77 477.019,1210.08 477.606,1211.67 478.192,1213.39 478.778,1214.65 479.365,1216.29 479.951,1214.64 480.538,1216.04 481.124,1218.81 481.711,1219.84 482.297,1221.23 482.883,1219.85 483.47,1221.44 484.056,1222.63 484.643,1222.6 485.229,1222.38 485.815,1223.98 486.402,1225.43 486.988,1228.09 487.575,1230.63 488.161,1233.41 488.748,1234.31 489.334,1233.46 489.92,1235.72 490.507,1236.57 491.093,1234.61 491.68,1234.32 492.266,1235.22 492.852,1232.1 493.439,1233.45 494.025,1233.09 494.612,1234.06 495.198,1233.82 495.784,1234.95 496.371,1233.44 496.957,1234.6 497.544,1237.33 498.13,1238.28 498.717,1236.36 499.303,1233.22 499.889,1232.7 500.476,1235.62 501.062,1236.87 501.649,1239.49 502.235,1234.82 502.821,1237.5 503.408,1241.21 503.994,1242.11 504.581,1241.34 505.167,1242.36 505.753,1244.85 506.34,1246.9 506.926,1250.1 507.513,1250.53 508.099,1249.17 508.686,1248.22 509.272,1247.36 509.858,1246.58 510.445,1245.75 511.031,1246.12 511.618,1248.19 512.204,1248.76 512.79,1249.59 513.377,1248.65 513.963,1247.76 514.55,1246.96 515.136,1244.52 515.722,1245.18 516.309,1244.63 516.895,1246.85 517.482,1245.88 518.068,1243.86 518.655,1244.57 519.241,1242.3 519.827,1242.84 520.414,1242.41 521,1241.88 521.587,1243.92 522.173,1241.92 522.759,1241.3 523.346,1242.22 523.932,1241.79 524.519,1241.05 525.105,1241.87 525.691,1241.18 526.278,1241.97 526.864,1237.22 527.451,1235.74 528.037,1236.78 528.624,1236.54 529.21,1238.82 529.796,1243.88 530.383,1243.23 530.969,1242.63 531.556,1240.65 532.142,1241.7 532.728,1243.83 533.315,1243.12 533.901,1242.35 534.488,1241.68 535.074,1246.26 535.661,1246.85 536.247,1247.66 536.833,1246.92 537.42,1245.86 538.006,1242.27 538.593,1241.59 539.179,1239.72 539.765,1238.08 540.352,1236.74 540.938,1237.97 541.525,1237.57 542.111,1236.02 542.697,1235.55 543.284,1235.17 543.87,1233.54 544.457,1231.98 545.043,1234.5 545.63,1232.7 546.216,1232.73 546.802,1232.63 547.389,1232.62 547.975,1237.98 548.562,1239.1 549.148,1242.51 549.734,1240.49 550.321,1243.95 550.907,1243.15 551.494,1241.06 552.08,1240.68 552.666,1239.93 553.253,1240.75 553.839,1237.58 554.426,1237.13 555.012,1236.84 555.599,1239.24 556.185,1240.08 556.771,1239.31 557.358,1238.76 557.944,1239.79 558.531,1239.41 559.117,1241.69 559.703,1240.95 560.29,1240.08 560.876,1240.6 561.463,1241.38 562.049,1241.99 562.635,1242.83 563.222,1243.24 563.808,1242.19 564.395,1243.91 564.981,1248.41 565.568,1248.77 566.154,1246.37 566.74,1244.19 567.327,1243.41 567.913,1245.03 568.5,1246.78 569.086,1245.67 569.672,1244.88 570.259,1242.64 570.845,1244.43 571.432,1240.79 572.018,1241.32 572.605,1239.28 573.191,1239.77 573.777,1240.33 574.364,1242.24 574.95,1241.63 575.537,1235.36 576.123,1234.79 576.709,1233 577.296,1234.11 577.882,1233.47 578.469,1234.43 579.055,1233.78 579.641,1232.12 580.228,1230.16 580.814,1229.79 581.401,1228.16 581.987,1229.25 582.574,1230.44 583.16,1230.5 583.746,1228.91 584.333,1230.04 584.919,1228.57 585.506,1229.55 586.092,1231.87 586.678,1235.59 587.265,1233.44 587.851,1233.27 588.438,1234.28 589.024,1233.92 589.61,1233.26 590.197,1231.72 590.783,1229.84 591.37,1229.51 591.956,1229.54 592.543,1229.23 593.129,1227.52 593.715,1227.48 594.302,1228.56 594.888,1227.26 595.475,1229.91 596.061,1231.08 596.647,1230.84 597.234,1231.93 597.82,1234.03 598.407,1235.9 598.993,1234.18 599.579,1234.82 600.166,1234.34 600.752,1232.35 601.339,1230.37 601.925,1225.84 602.512,1224.22 603.098,1226.89 603.684,1226.64 604.271,1229.35 604.857,1227.61 605.444,1228.61 606.03,1227.08 606.616,1228.15 607.203,1226.35 607.789,1226.02 608.376,1224.75 608.962,1226.02 609.548,1225.77 610.135,1225.47 610.721,1225.18 611.308,1223.48 611.894,1225.94 612.481,1226.71 613.067,1230.54 613.653,1232.75 614.24,1228.44 614.826,1229.39 615.413,1234.35 615.999,1232.53 616.585,1230.95 617.172,1227.58 617.758,1226.04 618.345,1225.74 618.931,1224.28 619.518,1221.48 620.104,1223.09 620.69,1221.97 621.277,1223.4 621.863,1223.4 622.45,1225.98 623.036,1224.38 623.622,1223.25 624.209,1220.68 624.795,1222.05 625.382,1221.85 625.968,1220.71 626.554,1222 627.141,1221.99 627.727,1222.05 628.314,1223.42 628.9,1224.66 629.487,1229.68 630.073,1228.17 630.659,1226.24 631.246,1226.06 631.832,1226.06 632.419,1227.04 633.005,1227.9 633.591,1228.88 634.178,1228.35 634.764,1225.67 635.351,1228.05 635.937,1226.49 636.523,1226.14 637.11,1224.43 637.696,1226.96 638.283,1224.08 638.869,1228.04 639.456,1226.3 640.042,1228.44 640.628,1226.9 641.215,1226.54 641.801,1226.1 642.388,1226.81 642.974,1225.24 643.56,1226.1 644.147,1226.72 644.733,1226.56 645.32,1224.91 645.906,1223.12 646.492,1220.37 647.079,1220.3 647.665,1218.64 648.252,1216.14 648.838,1218.93 649.425,1219.02 650.011,1219.12 650.597,1219.44 651.184,1220.98 651.77,1219.77 652.357,1218.3 652.943,1218.66 653.529,1220.26 654.116,1220.02 654.702,1221.04 655.289,1222.23 655.875,1220.83 656.462,1222.19 657.048,1224.67 657.634,1223.01 658.221,1218.97 658.807,1219.14 659.394,1219.1 659.98,1216.42 660.566,1216.54 661.153,1216.95 661.739,1221.93 662.326,1224.11 662.912,1223.64 663.498,1216.78 664.085,1216.92 664.671,1218.47 665.258,1218.99 665.844,1216.21 666.431,1215.08 667.017,1215.09 667.603,1215.4 668.19,1221.03 668.776,1220.94 669.363,1220.48 669.949,1220.45 670.535,1220.52 671.122,1220.7 671.708,1224.72 672.295,1224.31 672.881,1223.94 673.467,1224.67 674.054,1222.95 674.64,1221.55 675.227,1221.57 675.813,1221.46 676.4,1223.76 676.986,1222.45 677.572,1221.24 678.159,1219.89 678.745,1217.18 679.332,1217.49 679.918,1216.3 680.504,1216.34 681.091,1217.76 681.677,1217.68 682.264,1216.1 682.85,1218.86 683.436,1219.26 684.023,1220.59 684.609,1221.61 685.196,1222.65 685.782,1224.97 686.369,1224.69 686.955,1225.53 687.541,1224.97 688.128,1224.53 688.714,1224.08 689.301,1224.91 689.887,1223.21 690.473,1221.85 691.06,1223.16 691.646,1223 692.233,1224.02 692.819,1224 693.405,1223.88 693.992,1220.89 694.578,1220.52 695.165,1219.27 695.751,1220.11 696.338,1218.47 696.924,1218.61 697.51,1218.41 698.097,1216.79 698.683,1215.46 699.27,1214.24 699.856,1212.9 700.442,1213.2 701.029,1214.64 701.615,1217.49 702.202,1217.63 702.788,1216.25 703.375,1217.49 703.961,1217.44 704.547,1220.23 705.134,1221.41 705.72,1222.58 706.307,1221.28 706.893,1219.8 707.479,1218.46 708.066,1219.7 708.652,1220.79 709.239,1221.66 709.825,1222.79 710.411,1221.26 710.998,1221.21 711.584,1222.14 712.171,1220.66 712.757,1222.88 713.344,1224.08 713.93,1221.04 714.516,1219.38 715.103,1218.09 715.689,1218.08 716.276,1218.17 716.862,1217.98 717.448,1224.43 718.035,1224.26 718.621,1224.04 719.208,1224.96 719.794,1223.12 720.38,1224.17 720.967,1223.9 721.553,1223.45 722.14,1225.75 722.726,1225.25 723.313,1226.11 723.899,1227.18 724.485,1225.52 725.072,1225.25 725.658,1221.99 726.245,1223.04 726.831,1220.15 727.417,1217.06 728.004,1216.78 728.59,1216.63 729.177,1213.77 729.763,1211.58 730.349,1210.48 730.936,1212.09 731.522,1212.6 732.109,1214.17 732.695,1214.2 733.282,1212.9 733.868,1213.04 734.454,1211.8 735.041,1213.26 735.627,1214.81 736.214,1216.18 736.8,1214.94 737.386,1215.04 737.973,1216.33 738.559,1216.58 739.146,1213.67 739.732,1216.28 740.318,1217.58 740.905,1219.11 741.491,1220.31 742.078,1219.88 742.664,1219.7 743.251,1219.68 743.837,1223.11 744.423,1222.7 745.01,1222.35 745.596,1223.22 746.183,1220.36 746.769,1221.07 747.355,1223.72 747.942,1222.09 748.528,1220.75 749.115,1221.82 749.701,1221.62 750.288,1218.78 750.874,1219.87 751.46,1218.42 752.047,1219.67 752.633,1220.92 753.22,1221.82 753.806,1222.78 754.392,1222.55 754.979,1220.94 755.565,1220.73 756.152,1217.87 756.738,1221.66 757.324,1219.93 757.911,1220.86 758.497,1219.03 759.084,1218.73 759.67,1218.67 760.257,1217.02 760.843,1219.91 761.429,1219.66 762.016,1220.9 762.602,1220.61 763.189,1220.61 763.775,1222.77 764.361,1219.8 764.948,1219.48 765.534,1215.27 766.121,1214.17 766.707,1216.99 767.293,1215.63 767.88,1216.93 768.466,1216.86 769.053,1215.55 769.639,1215.5 770.226,1214.2 770.812,1215.47 771.398,1219.24 771.985,1218.19 772.571,1218.11 773.158,1217.78 773.744,1218.83 774.33,1217.3 774.917,1216.08 775.503,1217.42 776.09,1215.94 776.676,1217.23 777.262,1220.98 777.849,1219.41 778.435,1220.44 779.022,1218.97 779.608,1218.83 780.195,1217.1 780.781,1215.83 781.367,1218.14 781.954,1216.5 782.54,1218.89 783.127,1218.65 783.713,1219.36 784.299,1219.11 784.886,1218.69 785.472,1221.11 786.059,1218.02 786.645,1219.22 787.232,1218.85 787.818,1221.23 788.404,1219.97 788.991,1219.63 789.577,1216.57 790.164,1214.02 790.75,1214.01 791.336,1213.95 791.923,1212.75 792.509,1211.53 793.096,1210.49 793.682,1210.57 794.268,1210.48 794.855,1209.17 795.441,1212.43 796.028,1215.06 796.614,1214.03 797.201,1215.16 797.787,1214.18 798.373,1212.66 798.96,1211.72 799.546,1210.36 800.133,1212.15 800.719,1216.32 801.305,1216.38 801.892,1214.83 802.478,1217.42 803.065,1221.15 803.651,1219.6 804.237,1219.48 804.824,1219.22 805.41,1222.99 805.997,1223.79 806.583,1220.65 807.17,1220.66 807.756,1220.39 808.342,1221.39 808.929,1219.88 809.515,1217.02 810.102,1215.61 810.688,1218.2 811.274,1221.97 811.861,1219.08 812.447,1220 813.034,1219.73 813.62,1218.15 814.206,1217.99 814.793,1216.57 815.379,1215.27 815.966,1212.6 816.552,1212.83 817.139,1211.39 817.725,1214.11 818.311,1212.75 818.898,1212.97 819.484,1214.54 820.071,1214.09 820.657,1213.15 821.243,1215.77 821.83,1215.72 822.416,1214.17 823.003,1214.14 823.589,1212.7 824.175,1215.41 824.762,1213.98 825.348,1212.84 825.935,1209.03 826.521,1205.14 827.108,1206.71 827.694,1209.68 828.28,1208.79 828.867,1207.73 829.453,1208.07 830.04,1208.41 830.626,1211.67 831.212,1209.12 831.799,1208.08 832.385,1212.33 832.972,1213.78 833.558,1215.08 834.145,1214.99 834.731,1213.82 835.317,1215.32 835.904,1215.54 836.49,1220.78 837.077,1221.81 837.663,1224.03 838.249,1223.31 838.836,1221.3 839.422,1223.41 840.009,1224.09 840.595,1223.55 841.181,1221.97 841.768,1224.02 842.354,1226.14 842.941,1226.74 843.527,1226.01 844.114,1226.68 844.7,1227.25 845.286,1226.51 845.873,1224.67 846.459,1225.47 847.046,1223.78 847.632,1223.56 848.218,1222.87 848.805,1221.09 849.391,1220.45 849.978,1222.47 850.564,1220.7 851.15,1217.94 851.737,1218.72 852.323,1218.36 852.91,1220.4 853.496,1217.08 854.083,1217.12 854.669,1217.09 855.255,1215.61 855.842,1212.53 856.428,1215.47 857.015,1213.95 857.601,1212.7 858.187,1211.42 858.774,1210.06 859.36,1209.72 859.947,1211.1 860.533,1211.24 861.119,1211.39 861.706,1206.51 862.292,1207.19 862.879,1208.77 863.465,1209.11 864.052,1209.18 864.638,1208.19 865.224,1208.25 865.811,1207.3 866.397,1213.22 866.984,1213.06 867.57,1209.2 868.156,1210.64 868.743,1209.73 869.329,1207.05 869.916,1210.29 870.502,1209.33 871.089,1206.84 871.675,1206.16 872.261,1208.13 872.848,1208.59 873.434,1207.68 874.021,1208.01 874.607,1210.78 875.193,1212.39 875.78,1215.15 876.366,1213.71 876.953,1213.53 877.539,1213.56 878.125,1213.78 878.712,1212.42 879.298,1212.7 879.885,1214.12 880.471,1216.69 881.058,1217.73 881.644,1214.81 882.23,1213.28 882.817,1214.9 883.403,1214.71 883.99,1215.98 884.576,1214.81 885.162,1213.75 885.749,1213.57 886.335,1214.87 886.922,1213.37 887.508,1211.93 888.094,1209.1 888.681,1203.93 889.267,1204.32 889.854,1203.88 890.44,1202.95 891.027,1206.17 891.613,1202.3 892.199,1207.21 892.786,1207.69 893.372,1207.97 893.959,1209.63 894.545,1208.4 895.131,1208.61 895.718,1207.66 896.304,1209.29 896.891,1209.38 897.477,1210.98 898.063,1211.28 898.65,1213.83 899.236,1215.46 899.823,1213.61 900.409,1212.32 900.996,1213.64 901.582,1213.94 902.168,1213.87 902.755,1213.77 903.341,1215.17 903.928,1216.54 904.514,1216.27 905.1,1222.79 905.687,1223.65 906.273,1220.78 906.86,1221.9 907.446,1221.52 908.032,1222.63 908.619,1219.69 909.205,1220.43 909.792,1221.41 910.378,1218.62 910.965,1218.31 911.551,1219.24 912.137,1218.8 912.724,1217.06 913.31,1214.42 913.897,1214.53 914.483,1214.48 915.069,1215.63 915.656,1215.78 916.242,1217.02 916.829,1219.52 917.415,1222.89 918.002,1219.73 918.588,1220.53 919.174,1222.67 919.761,1222.16 920.347,1224.71 920.934,1224.1 921.52,1223.42 922.106,1218.59 922.693,1219.57 923.279,1220.67 923.866,1220.16 924.452,1218.77 925.038,1218.56 925.625,1218.24 926.211,1221.92 926.798,1218.76 927.384,1218.49 927.971,1215.37 928.557,1213.99 929.143,1213.65 929.73,1214.93 930.316,1213.53 930.903,1215.02 931.489,1215.1 932.075,1213.79 932.662,1211.19 933.248,1208.38 933.835,1208.31 934.421,1207.47 935.007,1210.56 935.594,1209.35 936.18,1209.4 936.767,1209.54 937.353,1209.49 937.94,1208.31 938.526,1208.54 939.112,1207.64 939.699,1208.16 940.285,1205.77 940.872,1204.84 941.458,1206.55 942.044,1208.16 942.631,1209.66 943.217,1209.81 943.804,1210.99 944.39,1215 944.976,1216.13 945.563,1215.75 946.149,1214.26 946.736,1214.25 947.322,1214.32 947.909,1212.91 948.495,1213.8 949.081,1216.27 949.668,1215.89 950.254,1218.29 950.841,1218.31 951.427,1216.27 952.013,1214.58 952.6,1215.5 953.186,1214.05 953.773,1212.69 954.359,1211.42 954.945,1212.73 955.532,1210.07 956.118,1210.27 956.705,1211.61 957.291,1210.21 957.878,1209.09 958.464,1209.39 959.05,1212.06 959.637,1209.25 960.223,1205.36 960.81,1205.85 961.396,1203.31 961.982,1207.71 962.569,1209.08 963.155,1207.83 963.742,1208.35 964.328,1208.78 964.915,1210.31 965.501,1210.65 966.087,1209.24 966.674,1209.55 967.26,1211.2 967.847,1212.75 968.433,1212.82 969.019,1210.46 969.606,1208.06 970.192,1205.58 970.779,1207.35 971.365,1210.26 971.951,1209.03 972.538,1209.37 973.124,1210.78 973.711,1208.13 974.297,1209.83 974.884,1212.5 975.47,1212.22 976.056,1212.25 976.643,1210.94 977.229,1211.01 977.816,1212.43 978.402,1212.31 978.988,1215.06 979.575,1213.73 980.161,1214.91 980.748,1214.77 981.334,1213.5 981.92,1211.95 982.507,1213.54 983.093,1210.98 983.68,1211.33 984.266,1211.55 984.853,1211.47 985.439,1213.03 986.025,1212.72 986.612,1212.57 987.198,1210.11 987.785,1211.53 988.371,1211.65 988.957,1211.85 989.544,1213.33 990.13,1210.53 990.717,1211.95 991.303,1214.5 991.889,1215.83 992.476,1214.28 993.062,1211.35 993.649,1211.22 994.235,1216.83 994.822,1218.1 995.408,1216.41 995.994,1210.99 996.581,1209.9 997.167,1210.03 997.754,1211.44 998.34,1211.55 998.926,1211.79 999.513,1210.6 1000.1,1209.52 1000.69,1207.12 1001.27,1205.97 1001.86,1204.7 1002.44,1206.74 1003.03,1204.63 1003.62,1206.39 1004.2,1206.67 1004.79,1208.4 1005.38,1209.86 1005.96,1211.25 1006.55,1214.05 1007.14,1214.04 1007.72,1214.05 1008.31,1212.67 1008.9,1212.59 1009.48,1214.05 1010.07,1215.18 1010.65,1215.05 1011.24,1213.62 1011.83,1212.34 1012.41,1212.46 1013,1211 1013.59,1208.55 1014.17,1208.74 1014.76,1209 1015.35,1209.02 1015.93,1209.08 1016.52,1210.25 1017.11,1210.32 1017.69,1214.55 1018.28,1214.69 1018.86,1213.03 1019.45,1213.16 1020.04,1213.18 1020.62,1213.35 1021.21,1213.5 1021.8,1213.66 1022.38,1214.56 1022.97,1214.59 1023.56,1212.16 1024.14,1212.15 1024.73,1211.22 1025.32,1210.04 1025.9,1209.1 1026.49,1209.41 1027.07,1209.59 1027.66,1210.89 1028.25,1212.51 1028.83,1209.54 1029.42,1209.59 1030.01,1212.32 1030.59,1212.39 1031.18,1212.64 1031.77,1211.16 1032.35,1209.88 1032.94,1207.45 1033.52,1207.71 1034.11,1205.46 1034.7,1207.14 1035.28,1207.19 1035.87,1208.52 1036.46,1207.35 1037.04,1206.15 1037.63,1206.37 1038.22,1205.43 1038.8,1204.41 1039.39,1205.11 1039.98,1208.08 1040.56,1209.7 1041.15,1208.73 1041.73,1208.86 1042.32,1207.52 1042.91,1208.95 1043.49,1212.17 1044.08,1213.76 1044.67,1215.04 1045.25,1214.85 1045.84,1214.88 1046.43,1219.03 1047.01,1220.14 1047.6,1219.64 1048.19,1220.45 1048.77,1219.98 1049.36,1218.28 1049.94,1215.18 1050.53,1214.68 1051.12,1214.5 1051.7,1214.49 1052.29,1215.85 1052.88,1213.06 1053.46,1212.48 1054.05,1213.72 1054.64,1214.98 1055.22,1213.47 1055.81,1219.99 1056.39,1218.38 1056.98,1218.15 1057.57,1219.16 1058.15,1220.07 1058.74,1218.49 1059.33,1218.29 1059.91,1220.36 1060.5,1217.59 1061.09,1216.01 1061.67,1212.97 1062.26,1213.01 1062.85,1213 1063.43,1214.37 1064.02,1214.3 1064.6,1212.72 1065.19,1209.97 1065.78,1207.6 1066.36,1207.9 1066.95,1206.66 1067.54,1206.7 1068.12,1205.83 1068.71,1207.41 1069.3,1203.64 1069.88,1206.89 1070.47,1205.94 1071.06,1206.41 1071.64,1208.1 1072.23,1209.75 1072.81,1211.17 1073.4,1213.86 1073.99,1216.43 1074.57,1214.8 1075.16,1213.03 1075.75,1212.8 1076.33,1212.91 1076.92,1214.36 1077.51,1214.18 1078.09,1215.25 1078.68,1212.36 1079.26,1213.84 1079.85,1212.54 1080.44,1211.23 1081.02,1208.68 1081.61,1209.06 1082.2,1209.44 1082.78,1202.87 1083.37,1203.32 1083.96,1201.34 1084.54,1203.38 1085.13,1203.61 1085.72,1202.76 1086.3,1204.44 1086.89,1205.09 1087.47,1204.26 1088.06,1204.34 1088.65,1202.1 1089.23,1203.97 1089.82,1203.01 1090.41,1203.43 1090.99,1201.02 1091.58,1202.61 1092.17,1200.49 1092.75,1203.97 1093.34,1203.18 1093.93,1202.4 1094.51,1202.9 1095.1,1203.42 1095.68,1205.25 1096.27,1206.04 1096.86,1204.9 1097.44,1200 1098.03,1202.01 1098.62,1206.67 1099.2,1202.96 1099.79,1204.85 1100.38,1205.14 1100.96,1204.43 1101.55,1207.44 1102.14,1210.29 1102.72,1210.43 1103.31,1211.72 1103.89,1212.68 1104.48,1215.18 1105.07,1213.69 1105.65,1213.81 1106.24,1212.5 1106.83,1214.17 1107.41,1212.66 1108,1211.44 1108.59,1210.13 1109.17,1209.03 1109.76,1209.19 1110.34,1208.07 1110.93,1206.82 1111.52,1211.22 1112.1,1210.2 1112.69,1211.63 1113.28,1213.01 1113.86,1213.15 1114.45,1214.49 1115.04,1213.15 1115.62,1214.6 1116.21,1211.77 1116.8,1213.01 1117.38,1212.9 1117.97,1211.51 1118.55,1210.42 1119.14,1213.05 1119.73,1215.71 1120.31,1217.01 1120.9,1216.81 1121.49,1215.2 1122.07,1213.84 1122.66,1214.91 1123.25,1217.42 1123.83,1216.11 1124.42,1213.4 1125.01,1213.52 1125.59,1215.89 1126.18,1215.33 1126.76,1215.54 1127.35,1215.39 1127.94,1217.85 1128.52,1219.17 1129.11,1221.48 1129.7,1222.38 1130.28,1220.62 1130.87,1221.67 1131.46,1222.66 1132.04,1222.06 1132.63,1221.24 1133.21,1225.92 1133.8,1221.41 1134.39,1219.85 1134.97,1218.19 1135.56,1218.24 1136.15,1217.71 1136.73,1214.56 1137.32,1214.16 1137.91,1213.82 1138.49,1216.08 1139.08,1213.18 1139.67,1213.13 1140.25,1211.68 1140.84,1214.17 1141.42,1214.08 1142.01,1213.97 1142.6,1212.39 1143.18,1213.75 1143.77,1214.87 1144.36,1214.83 1144.94,1218.44 1145.53,1215.3 1146.12,1216.37 1146.7,1214.89 1147.29,1211.97 1147.88,1209.31 1148.46,1209.67 1149.05,1209.66 1149.63,1212.43 1150.22,1212.49 1150.81,1212.5 1151.39,1212.35 1151.98,1211.01 1152.57,1212.29 1153.15,1210.57 1153.74,1209.33 1154.33,1210.86 1154.91,1210.74 1155.5,1207.91 1156.09,1203.91 1156.67,1204.2 1157.26,1204.77 1157.84,1207.71 1158.43,1207.92 1159.02,1207.02 1159.6,1207.24 1160.19,1207.53 1160.78,1209.02 1161.36,1210.66 1161.95,1212.05 1162.54,1213.44 1163.12,1213.38 1163.71,1214.34 1164.29,1218.2 1164.88,1219.35 1165.47,1220.47 1166.05,1217.62 1166.64,1216.04 1167.23,1213.06 1167.81,1213.03 1168.4,1214.44 1168.99,1214.38 1169.57,1210.44 1170.16,1211.9 1170.75,1210.43 1171.33,1209.13 1171.92,1209.56 1172.5,1207.15 1173.09,1207.4 1173.68,1210.41 1174.26,1211.97 1174.85,1213.42 1175.44,1213.56 1176.02,1213.5 1176.61,1211.88 1177.2,1213.38 1177.78,1210.4 1178.37,1211.8 1178.96,1210.44 1179.54,1210.5 1180.13,1209.24 1180.71,1213.5 1181.3,1214.77 1181.89,1214.37 1182.47,1213.05 1183.06,1215.45 1183.65,1215.38 1184.23,1213.8 1184.82,1216.23 1185.41,1214.84 1185.99,1213.46 1186.58,1214.63 1187.16,1214.69 1187.75,1210.52 1188.34,1211.72 1188.92,1210.49 1189.51,1206.8 1190.1,1205.44 1190.68,1205.75 1191.27,1204.91 1191.86,1205.27 1192.44,1208.39 1193.03,1209.85 1193.62,1208.58 1194.2,1208.67 1194.79,1208.73 1195.37,1207.51 1195.96,1207.53 1196.55,1206.43 1197.13,1208.19 1197.72,1208.48 1198.31,1208.66 1198.89,1209.97 1199.48,1209.92 1200.07,1212.65 1200.65,1212.61 1201.24,1210.97 1201.83,1212.4 1202.41,1212.14 1203,1209.26 1203.58,1209.31 1204.17,1207.91 1204.76,1207.85 1205.34,1211.7 1205.93,1213.08 1206.52,1213.17 1207.1,1214.37 1207.69,1214.39 1208.28,1211.73 1208.86,1210.33 1209.45,1210.27 1210.03,1210.63 1210.62,1207.94 1211.21,1209.81 1211.79,1209.81 1212.38,1210.05 1212.97,1214.26 1213.55,1215.19 1214.14,1213.66 1214.73,1214.59 1215.31,1214.39 1215.9,1215.27 1216.49,1212.52 1217.07,1209.75 1217.66,1208.74 1218.24,1207.57 1218.83,1207.8 1219.42,1209.78 1220,1209.88 1220.59,1209.8 1221.18,1209.83 1221.76,1208.67 1222.35,1208.66 1222.94,1210.47 1223.52,1210.54 1224.11,1209.14 1224.7,1209.44 1225.28,1211.04 1225.87,1213.8 1226.45,1214.93 1227.04,1218.52 1227.63,1216.91 1228.21,1218.21 1228.8,1216.37 1229.39,1217.53 1229.97,1218.36 1230.56,1218.14 1231.15,1216.3 1231.73,1217.42 1232.32,1216.71 1232.91,1215.13 1233.49,1216.26 1234.08,1217.4 1234.66,1215.7 1235.25,1211.31 1235.84,1212.37 1236.42,1209.27 1237.01,1205.84 1237.6,1204.85 1238.18,1207.94 1238.77,1209.62 1239.36,1212.38 1239.94,1214.97 1240.53,1207.97 1241.11,1209.29 1241.7,1210.45 1242.29,1213.13 1242.87,1213.02 1243.46,1212.82 1244.05,1214.14 1244.63,1213.86 1245.22,1213.72 1245.81,1215.17 1246.39,1213.47 1246.98,1214.66 1247.57,1214.57 1248.15,1215.9 1248.74,1216.13 1249.32,1217.26 1249.91,1215.61 1250.5,1218.1 1251.08,1217.64 1251.67,1214.73 1252.26,1214.89 1252.84,1212.04 1253.43,1211.95 1254.02,1212.07 1254.6,1212.14 1255.19,1218.65 1255.78,1217.04 1256.36,1216.98 1256.95,1215.5 1257.53,1211.87 1258.12,1211.72 1258.71,1211.6 1259.29,1215.64 1259.88,1216.75 1260.47,1216.38 1261.05,1216.07 1261.64,1214.6 1262.23,1214.3 1262.81,1213 1263.4,1211.39 1263.98,1210.1 1264.57,1208.93 1265.16,1209.09 1265.74,1207.97 1266.33,1209.43 1266.92,1212.03 1267.5,1211.78 1268.09,1211.89 1268.68,1213.48 1269.26,1209.59 1269.85,1209.95 1270.44,1212.77 1271.02,1208.85 1271.61,1209.13 1272.19,1209.44 1272.78,1210.82 1273.37,1213.52 1273.95,1213.51 1274.54,1214.69 1275.13,1214.29 1275.71,1214.34 1276.3,1213.24 1276.89,1213.36 1277.47,1213.22 1278.06,1212.87 1278.65,1212.57 1279.23,1211.21 1279.82,1209.65 1280.4,1209.78 1280.99,1210.09 1281.58,1211.43 1282.16,1211.46 1282.75,1211.45 1283.34,1208.67 1283.92,1207.7 1284.51,1205.27 1285.1,1208.3 1285.68,1207.06 1286.27,1208.36 1286.86,1205.92 1287.44,1203.61 1288.03,1204.09 1288.61,1204.63 1289.2,1208.01 1289.79,1208.1 1290.37,1208.36 1290.96,1211.05 1291.55,1209.7 1292.13,1208.41 1292.72,1207.43 1293.31,1213.09 1293.89,1211.68 1294.48,1210.39 1295.06,1210.71 1295.65,1208.06 1296.24,1208.24 1296.82,1208.36 1297.41,1208.62 1298,1211.9 1298.58,1210.8 1299.17,1210.73 1299.76,1213.37 1300.34,1216.17 1300.93,1214.84 1301.52,1213.38 1302.1,1210.42 1302.69,1214.52 1303.27,1214.41 1303.86,1212.89 1304.45,1211.32 1305.03,1211.3 1305.62,1212.56 1306.21,1215.27 1306.79,1214.05 1307.38,1215.22 1307.97,1217.82 1308.55,1219.69 1309.14,1219.54 1309.73,1217.63 1310.31,1222.61 1310.9,1220.81 1311.48,1221.63 1312.07,1221.01 1312.66,1222.11 1313.24,1221.37 1313.83,1218.22 1314.42,1216.34 1315,1216.31 1315.59,1214.71 1316.18,1211.83 1316.76,1210.53 1317.35,1210.63 1317.93,1210.68 1318.52,1210.76 1319.11,1210.91 1319.69,1209.45 1320.28,1209.57 1320.87,1211.04 1321.45,1211.1 1322.04,1212.74 1322.63,1215.42 1323.21,1216.52 1323.8,1216.27 1324.39,1217.33 1324.97,1217.36 1325.56,1218.45 1326.14,1220.94 1326.73,1220.2 1327.32,1217.1 1327.9,1213.67 1328.49,1213.67 1329.08,1213.64 1329.66,1214.82 1330.25,1210.45 1330.84,1212.02 1331.42,1213.51 1332.01,1212.1 1332.6,1209.06 1333.18,1211.87 1333.77,1209.18 1334.35,1207.94 1334.94,1209.36 1335.53,1206.93 1336.11,1209.67 1336.7,1211.15 1337.29,1211.02 1337.87,1213.91 1338.46,1217.66 1339.05,1213.52 1339.63,1213.05 1340.22,1215.41 1340.8,1217.72 1341.39,1217.22 1341.98,1216.95 1342.56,1211.52 1343.15,1211.6 1343.74,1213.01 1344.32,1211.73 1344.91,1211.66 1345.5,1213.01 1346.08,1211.72 1346.67,1211.6 1347.26,1210.42 1347.84,1212.99 1348.43,1214.03 1349.01,1211.67 1349.6,1211.78 1350.19,1210.59 1350.77,1211.88 1351.36,1213.17 1351.95,1212.91 1352.53,1214.26 1353.12,1212.83 1353.71,1214.29 1354.29,1216.57 1354.88,1216.53 1355.47,1216.54 1356.05,1214.92 1356.64,1216.16 1357.22,1216.11 1357.81,1217.19 1358.4,1213.09 1358.98,1214.43 1359.57,1211.44 1360.16,1210.21 1360.74,1210.26 1361.33,1209.22 1361.92,1209.35 1362.5,1206.99 1363.09,1207.01 1363.68,1207.03 1364.26,1205.85 1364.85,1203.67 1365.43,1208 1366.02,1208.33 1366.61,1208.54 1367.19,1208.84 1367.78,1208.81 1368.37,1210.07 1368.95,1211.59 1369.54,1211.53 1370.13,1214.24 1370.71,1211.3 1371.3,1212.74 1371.88,1212.82 1372.47,1213.86 1373.06,1212.64 1373.64,1215.18 1374.23,1216.17 1374.82,1214.56 1375.4,1214.62 1375.99,1213.13 1376.58,1210.05 1377.16,1210.29 1377.75,1209.03 1378.34,1208.03 1378.92,1204.45 1379.51,1204.75 1380.09,1202.25 1380.68,1205.46 1381.27,1204.59 1381.85,1206.49 1382.44,1204.57 1383.03,1203.67 1383.61,1203.91 1384.2,1205.78 1384.79,1203.63 1385.37,1204.18 1385.96,1205.77 1386.55,1206.2 1387.13,1205.29 1387.72,1208.21 1388.3,1207.28 1388.89,1206.23 1389.48,1206.84 1390.06,1204.43 1390.65,1204.82 1391.24,1205.26 1391.82,1208.41 1392.41,1207.4 1393,1207.77 1393.58,1205.52 1394.17,1205.95 1394.75,1207.54 1395.34,1207.64 1395.93,1203.62 1396.51,1202.78 1397.1,1204.82 1397.69,1203.83 1398.27,1205.49 1398.86,1208.35 1399.45,1213.48 1400.03,1214.78 1400.62,1215.93 1401.21,1214.58 1401.79,1212.85 1402.38,1214.29 1402.96,1214.11 1403.55,1216.82 1404.14,1215.21 1404.72,1216.33 1405.31,1212.12 1405.9,1210.85 1406.48,1205.68 1407.07,1207.48 1407.66,1207.66 1408.24,1206.33 1408.83,1206.88 1409.42,1208.29 1410,1207.18 1410.59,1206.09 1411.17,1207.95 1411.76,1208.31 1412.35,1208.52 1412.93,1211.38 1413.52,1214.64 1414.11,1214.3 1414.69,1216.71 1415.28,1216.07 1415.87,1217.25 1416.45,1215.51 1417.04,1217.91 1417.63,1219.31 1418.21,1217.51 1418.8,1217.22 1419.38,1215.59 1419.97,1216.55 1420.56,1215.28 1421.14,1217.54 1421.73,1218.76 1422.32,1219.79 1422.9,1217.75 1423.49,1217.32 1424.08,1216.91 1424.66,1215.25 1425.25,1213.41 1425.83,1213.24 1426.42,1213.28 1427.01,1214.63 1427.59,1214.38 1428.18,1214.32 1428.77,1214.07 1429.35,1214.07 1429.94,1216.81 1430.53,1216.25 1431.11,1214.44 1431.7,1213.03 1432.29,1214.19 1432.87,1213.91 1433.46,1211.3 1434.04,1211.29 1434.63,1211.13 1435.22,1212.66 1435.8,1215.06 1436.39,1212.22 1436.98,1212.18 1437.56,1211.88 1438.15,1213.4 1438.74,1214.61 1439.32,1214.43 1439.91,1215.53 1440.5,1215.62 1441.08,1212.69 1441.67,1211.71 1442.25,1208.97 1442.84,1207.7 1443.43,1206.94 1444.01,1208.8 1444.6,1208.83 1445.19,1212.96 1445.77,1212.74 1446.36,1211.14 1446.95,1210.94 1447.53,1208.32 1448.12,1208.21 1448.7,1208.29 1449.29,1210.99 1449.88,1208.38 1450.46,1212.66 1451.05,1213.87 1451.64,1213.62 1452.22,1213.46 1452.81,1214.85 1453.4,1214.57 1453.98,1214.24 1454.57,1215.4 1455.16,1216.51 1455.74,1216.29 1456.33,1214.74 1456.91,1214.53 1457.5,1214.42 1458.09,1213.29 1458.67,1211.95 1459.26,1213.36 1459.85,1210.54 1460.43,1210.57 1461.02,1210.42 1461.61,1209.01 1462.19,1209.01 1462.78,1207.98 1463.37,1203.83 1463.95,1204.49 1464.54,1204.77 1465.12,1208.04 1465.71,1208.32 1466.3,1208.76 1466.88,1210.23 1467.47,1212.78 1468.06,1212.63 1468.64,1212.55 1469.23,1213.66 1469.82,1214.82 1470.4,1214.79 1470.99,1213.25 1471.57,1212.98 1472.16,1214.17 1472.75,1213.9 1473.33,1213.8 1473.92,1212.4 1474.51,1213.83 1475.09,1209.58 1475.68,1209.71 1476.27,1211.26 1476.85,1212.74 1477.44,1212.57 1478.03,1211.15 1478.61,1215.35 1479.2,1215.17 1479.78,1214.87 1480.37,1213.25 1480.96,1213.02 1481.54,1211.55 1482.13,1210.21 1482.72,1209.04 1483.3,1209.24 1483.89,1209.32 1484.48,1206.81 1485.06,1210.97 1485.65,1209.46 1486.24,1205.27 1486.82,1208.08 1487.41,1209.83 1487.99,1209.75 1488.58,1209.81 1489.17,1209.9 1489.75,1209.85 1490.34,1211.09 1490.93,1212.35 1491.51,1211.44 1492.1,1212.99 1492.69,1210.34 1493.27,1210.2 1493.86,1209.09 1494.45,1209.27 1495.03,1207.92 1495.62,1208.33 1496.2,1209.76 1496.79,1213.86 1497.38,1213.9 1497.96,1212.55 1498.55,1213.99 1499.14,1211.18 1499.72,1210.87 1500.31,1210.97 1500.9,1212.29 1501.48,1217.52 1502.07,1213.31 1502.65,1213.19 1503.24,1212.95 1503.83,1212.75 1504.41,1212.74 1505,1212.65 1505.59,1212.9 1506.17,1213.04 1506.76,1214.39 1507.35,1215.63 1507.93,1215.51 1508.52,1215.5 1509.11,1211.22 1509.69,1212.87 1510.28,1212.93 1510.86,1213.12 1511.45,1214.32 1512.04,1215.58 1512.62,1216.74 1513.21,1214.78 1513.8,1215.9 1514.38,1217.13 1514.97,1217.93 1515.56,1217.36 1516.14,1214.18 1516.73,1215.38 1517.32,1213.7 1517.9,1213.33 1518.49,1215.93 1519.07,1215.47 1519.66,1215.47 1520.25,1214.97 1520.83,1211.96 1521.42,1213.32 1522.01,1214.8 1522.59,1216.04 1523.18,1217.35 1523.77,1217.16 1524.35,1215.82 1524.94,1216.9 1525.52,1215.6 1526.11,1218 1526.7,1218.74 1527.28,1217.17 1527.87,1215.35 1528.46,1215.15 1529.04,1214.66 1529.63,1214.53 1530.22,1214.3 1530.8,1214.22 1531.39,1214.06 1531.98,1212.49 1532.56,1209.93 1533.15,1210.19 1533.73,1210.45 1534.32,1211.92 1534.91,1213.41 1535.49,1211.99 1536.08,1212.3 1536.67,1215.08 1537.25,1214.67 1537.84,1214.48 1538.43,1212.96 1539.01,1211.35 1539.6,1210.08 1540.19,1208.88 1540.77,1210.51 1541.36,1210.59 1541.94,1210.75 1542.53,1212.03 1543.12,1214.71 1543.7,1210.9 1544.29,1209.63 1544.88,1209.64 1545.46,1206.97 1546.05,1207.46 1546.64,1208.62 1547.22,1207.48 1547.81,1209.04 1548.4,1208.24 1548.98,1207.31 1549.57,1206.25 1550.15,1207.65 1550.74,1209.13 1551.33,1205.67 1551.91,1208.53 1552.5,1211.41 1553.09,1212.83 1553.67,1214.14 1554.26,1215.51 1554.85,1216.7 1555.43,1214.09 1556.02,1213.73 1556.6,1210.91 1557.19,1208.18 1557.78,1212.56 1558.36,1212.58 1558.95,1214 1559.54,1212.34 1560.12,1209.46 1560.71,1208.56 1561.3,1208.54 1561.88,1209.78 1562.47,1211.35 1563.06,1209.97 1563.64,1209.85 1564.23,1211.28 1564.81,1212.83 1565.4,1211.51 1565.99,1211.54 1566.57,1211.35 1567.16,1212.48 1567.75,1212.31 1568.33,1210.05 1568.92,1211.48 1569.51,1210.21 1570.09,1207.51 1570.68,1207.96 1571.27,1202.92 1571.85,1203.09 1572.44,1205.02 1573.02,1208.09 1573.61,1209.78 1574.2,1207.23 1574.78,1211.39 1575.37,1208.86 1575.96,1207.67 1576.54,1207.75 1577.13,1210.89 1577.72,1209.76 1578.3,1207.11 1578.89,1205.91 1579.47,1204.72 1580.06,1205.29 1580.65,1206.92 1581.23,1207.39 1581.82,1207.64 1582.41,1204.13 1582.99,1204.32 1583.58,1206.02 1584.17,1207.86 1584.75,1209.47 1585.34,1208.5 1585.93,1208.96 1586.51,1208.87 1587.1,1210.32 1587.68,1213.18 1588.27,1215.88 1588.86,1217.01 1589.44,1219.7 1590.03,1220.61 1590.62,1220.16 1591.2,1220.79 1591.79,1221.32 1592.38,1219.45 1592.96,1221.58 1593.55,1221.37 1594.14,1218.11 1594.72,1216.73 1595.31,1216.63 1595.89,1217.79 1596.48,1220.1 1597.07,1220.84 1597.65,1220.26 1598.24,1220.09 1598.83,1218.58 1599.41,1218.23 1600,1218.06 1600.59,1216.68 1601.17,1219.05 1601.76,1218.58 1602.34,1219.56 1602.93,1221.69 1603.52,1221.08 1604.1,1220.76 1604.69,1221.86 1605.28,1222.87 1605.86,1223.55 1606.45,1223.09 1607.04,1222.36 1607.62,1222.67 1608.21,1223.35 1608.8,1221.54 1609.38,1222.32 1609.97,1224.57 1610.55,1222.54 1611.14,1224.35 1611.73,1225.01 1612.31,1224.41 1612.9,1223.8 1613.49,1223.37 1614.07,1220.43 1614.66,1219.81 1615.25,1222.02 1615.83,1221.59 1616.42,1216.83 1617.01,1216.73 1617.59,1217.45 1618.18,1221.28 1618.76,1220.95 1619.35,1218.99 1619.94,1217.69 1620.52,1218.92 1621.11,1215.69 1621.7,1210.23 1622.28,1208.84 1622.87,1209.06 1623.46,1209.35 1624.04,1211.99 1624.63,1212.16 1625.22,1211.06 1625.8,1209.94 1626.39,1211.38 1626.97,1208.8 1627.56,1210.35 1628.15,1211.76 1628.73,1213.11 1629.32,1211.82 1629.91,1212.03 1630.49,1210.69 1631.08,1209.59 1631.67,1208.73 1632.25,1206.27 1632.84,1207.72 1633.42,1210.64 1634.01,1214.77 1634.6,1213.47 1635.18,1211.75 1635.77,1211.53 1636.36,1212.63 1636.94,1210.22 1637.53,1207.62 1638.12,1207.79 1638.7,1207.87 1639.29,1208.22 1639.88,1205.97 1640.46,1204.87 1641.05,1205.35 1641.63,1205.79 1642.22,1203.44 1642.81,1204.12 1643.39,1204.41 1643.98,1201.95 1644.57,1203.77 1645.15,1203.03 1645.74,1202 1646.33,1198.8 1646.91,1198.59 1647.5,1200.62 1648.09,1202.52 1648.67,1204.17 1649.26,1208.38 1649.84,1207.17 1650.43,1207.16 1651.02,1207.55 1651.6,1204.9 1652.19,1205.57 1652.78,1210.89 1653.36,1212.49 1653.95,1213.72 1654.54,1217.59 1655.12,1217.58 1655.71,1219.72 1656.29,1217.98 1656.88,1218.88 1657.47,1218.7 1658.05,1219.56 1658.64,1218.95 1659.23,1219.9 1659.81,1222.52 1660.4,1224.8 1660.99,1222.63 1661.57,1220.93 1662.16,1219.02 1662.75,1219.79 1663.33,1220.67 1663.92,1220.22 1664.5,1219.93 1665.09,1218.19 1665.68,1219.26 1666.26,1217.69 1666.85,1217.6 1667.44,1217.34 1668.02,1215.7 1668.61,1212.59 1669.2,1208.48 1669.78,1207 1670.37,1207.35 1670.96,1207.64 1671.54,1208.05 1672.13,1208.38 1672.71,1208.67 1673.3,1208.79 1673.89,1211.84 1674.47,1213.41 1675.06,1213.61 1675.65,1213.8 1676.23,1210.85 1676.82,1212.34 1677.41,1214.96 1677.99,1218.61 1678.58,1218.5 1679.17,1214.45 1679.75,1217.07 1680.34,1216.86 1680.92,1216.81 1681.51,1216.36 1682.1,1214.86 1682.68,1214.47 1683.27,1213.12 1683.86,1210.23 1684.44,1207.89 1685.03,1208.15 1685.62,1208.4 1686.2,1208.76 1686.79,1206.11 1687.37,1206.4 1687.96,1205.28 1688.55,1207.07 1689.13,1207.41 1689.72,1207.34 1690.31,1207.77 1690.89,1207.75 1691.48,1207.71 1692.07,1210.21 1692.65,1207.77 1693.24,1205.22 1693.83,1206.79 1694.41,1207 1695,1206.81 1695.58,1207.09 1696.17,1207.33 1696.76,1206.52 1697.34,1206.87 1697.93,1207.29 1698.52,1204.73 1699.1,1206.55 1699.69,1205.39 1700.28,1206.97 1700.86,1207.28 1701.45,1207.34 1702.04,1208.43 1702.62,1207.35 1703.21,1205.02 1703.79,1205.19 1704.38,1204.01 1704.97,1206.81 1705.55,1209.6 1706.14,1211.11 1706.73,1211.01 1707.31,1208.58 1707.9,1206.13 1708.49,1205.12 1709.07,1204.13 1709.66,1204.62 1710.24,1203.49 1710.83,1201.38 1711.42,1204.51 1712,1204.7 1712.59,1206.13 1713.18,1203.95 1713.76,1204.67 1714.35,1206.39 1714.94,1205.47 1715.52,1207.11 1716.11,1207.31 1716.7,1207.43 1717.28,1206.24 1717.87,1206.4 1718.45,1206.9 1719.04,1207.17 1719.63,1208.96 1720.21,1207.77 1720.8,1207.94 1721.39,1209.49 1721.97,1209.39 1722.56,1208.41 1723.15,1210.03 1723.73,1214.37 1724.32,1214.52 1724.91,1213.13 1725.49,1212.9 1726.08,1214.21 1726.66,1214.36 1727.25,1217.11 1727.84,1219.26 1728.42,1220.41 1729.01,1221.46 1729.6,1224.91 1730.18,1225.75 1730.77,1223.88 1731.36,1223.37 1731.94,1222.76 1732.53,1221.09 1733.11,1220.41 1733.7,1218.6 1734.29,1218.48 1734.87,1220.81 1735.46,1219.29 1736.05,1218.76 1736.63,1219.68 1737.22,1217.71 1737.81,1214.94 1738.39,1214.78 1738.98,1214.53 1739.57,1215.59 1740.15,1218.1 1740.74,1217.67 1741.32,1217.39 1741.91,1218.46 1742.5,1224.79 1743.08,1224.29 1743.67,1223.43 1744.26,1221.63 1744.84,1219.99 1745.43,1222.18 1746.02,1220.01 1746.6,1218.33 1747.19,1218.13 1747.78,1216.49 1748.36,1214.89 1748.95,1213.38 1749.53,1211.89 1750.12,1209.12 1750.71,1209.17 1751.29,1210.54 1751.88,1209.27 1752.47,1210.81 1753.05,1209.58 1753.64,1209.72 1754.23,1206.9 1754.81,1205.55 1755.4,1205.81 1755.99,1204.52 1756.57,1207.6 1757.16,1207.96 1757.74,1208.06 1758.33,1207.05 1758.92,1212.63 1759.5,1212.74 1760.09,1212.78 1760.68,1211.5 1761.26,1211.71 1761.85,1210.58 1762.44,1209.3 1763.02,1208.29 1763.61,1207.22 1764.19,1206.24 1764.78,1206.38 1765.37,1205.47 1765.95,1204.48 1766.54,1204.69 1767.13,1205.21 1767.71,1202.89 1768.3,1203.46 1768.89,1205.01 1769.47,1206.82 1770.06,1204.45 1770.65,1204.88 1771.23,1204.05 1771.82,1203.02 1772.4,1203.47 1772.99,1204.36 1773.58,1206.18 1774.16,1207.78 1774.75,1207.97 1775.34,1208.06 1775.92,1206.91 1776.51,1204.75 1777.1,1201.48 1777.68,1198.23 1778.27,1200.32 1778.86,1201.36 1779.44,1201.56 1780.03,1200.83 1780.61,1201.88 1781.2,1201.46 1781.79,1203.42 1782.37,1202.63 1782.96,1200.42 1783.55,1199.71 1784.13,1201.81 1784.72,1198.06 1785.31,1201.47 1785.89,1204.95 1786.48,1206.79 1787.06,1209.81 1787.65,1209.77 1788.24,1209.9 1788.82,1208.9 1789.41,1210.24 1790,1209.23 1790.58,1210.7 1791.17,1213.49 1791.76,1210.98 1792.34,1213.46 1792.93,1212.01 1793.52,1212.14 1794.1,1213.66 1794.69,1214.91 1795.27,1217.27 1795.86,1217.11 1796.45,1216.91 1797.03,1216.59 1797.62,1215.06 1798.21,1214.84 1798.79,1214.82 1799.38,1211.99 1799.97,1209.46 1800.55,1210.98 1801.14,1213.58 1801.73,1210.52 1802.31,1210.31 1802.9,1209.43 1803.48,1209.46 1804.07,1212.05 1804.66,1212.19 1805.24,1212.47 1805.83,1212.56 1806.42,1211.22 1807,1211.24 1807.59,1212.6 1808.18,1211.42 1808.76,1209.09 1809.35,1209.31 1809.94,1209.35 1810.52,1209.53 1811.11,1213.77 1811.69,1213.27 1812.28,1214.43 1812.87,1215.41 1813.45,1213.8 1814.04,1217.41 1814.63,1214.57 1815.21,1214.47 1815.8,1215.52 1816.39,1216.75 1816.97,1216.38 1817.56,1217.47 1818.14,1217.21 1818.73,1217.04 1819.32,1216.69 1819.9,1216.65 1820.49,1216.2 1821.08,1217.48 1821.66,1214.46 1822.25,1214.22 1822.84,1212.38 1823.42,1211.11 1824.01,1211.46 1824.6,1211.7 1825.18,1212.67 1825.77,1213 1826.35,1215.65 1826.94,1215.63 1827.53,1215.12 1828.11,1213.75 1828.7,1211.14 1829.29,1213.8 1829.87,1216.08 1830.46,1217.32 1831.05,1216.76 1831.63,1217.9 1832.22,1217.59 1832.81,1217.1 1833.39,1216.51 1833.98,1214.89 1834.56,1213.34 1835.15,1213.56 1835.74,1210.87 1836.32,1212.23 1836.91,1212.12 1837.5,1212.16 1838.08,1211.97 1838.67,1214.81 1839.26,1215.98 1839.84,1217.17 1840.43,1216.9 1841.01,1218.09 1841.6,1217.81 1842.19,1220.48 1842.77,1220.06 1843.36,1220.83 1843.95,1220.58 1844.53,1219.05 1845.12,1213.56 1845.71,1212.13 1846.29,1211.33 1846.88,1211.37 1847.47,1210.3 1848.05,1209 1848.64,1217.14 1849.22,1217.96 1849.81,1217.71 1850.4,1218.47 1850.98,1215.57 1851.57,1214.08 1852.16,1213.72 1852.74,1214.85 1853.33,1214.46 1853.92,1211.34 1854.5,1215.34 1855.09,1213.91 1855.68,1214.95 1856.26,1213.46 1856.85,1211.93 1857.43,1212 1858.02,1211.7 1858.61,1210.66 1859.19,1209.12 1859.78,1211.86 1860.37,1216.03 1860.95,1219.56 1861.54,1216.23 1862.13,1217.3 1862.71,1219.68 1863.3,1219.18 1863.88,1216.25 1864.47,1211.83 1865.06,1207.76 1865.64,1211.83 1866.23,1210.23 1866.82,1214.31 1867.4,1212.96 1867.99,1212.89 1868.58,1215.21 1869.16,1210.85 1869.75,1212.27 1870.34,1212.18 1870.92,1212.02 1871.51,1212.2 1872.09,1214.72 1872.68,1214.76 1873.27,1214.46 1873.85,1213.02 1874.44,1214.11 1875.03,1213.78 1875.61,1210.77 1876.2,1208.38 1876.79,1208.61 1877.37,1208.58 1877.96,1207.55 1878.55,1207.72 1879.13,1206.72 1879.72,1209.55 1880.3,1210.76 1880.89,1209.56 1881.48,1205.73 1882.06,1206.14 1882.65,1205.1 1883.24,1205.48 1883.82,1206.14 1884.41,1203.93 1885,1207.11 1885.58,1207.74 1886.17,1208.2 1886.76,1211.25 1887.34,1211.21 1887.93,1211.24 1888.51,1211.23 1889.1,1209 1889.69,1209.39 1890.27,1208.22 1890.86,1207 1891.45,1209.68 1892.03,1212.12 1892.62,1212.19 1893.21,1212.44 1893.79,1213.7 1894.38,1212.17 1894.96,1211.96 1895.55,1213.26 1896.14,1213.17 1896.72,1213.31 1897.31,1213.6 1897.9,1212.08 1898.48,1212.23 1899.07,1212.17 1899.66,1216.22 1900.24,1217.22 1900.83,1216.98 1901.42,1216.75 1902,1216.82 1902.59,1215.03 1903.17,1216.4 1903.76,1216.08 1904.35,1214.63 1904.93,1217.16 1905.52,1212.54 1906.11,1213.68 1906.69,1212.24 1907.28,1212.03 1907.87,1209.56 1908.45,1208.25 1909.04,1207.29 1909.63,1207.52 1910.21,1205.19 1910.8,1205.46 1911.38,1205.65 1911.97,1205.54 1912.56,1207.2 1913.14,1207.41 1913.73,1211.54 1914.32,1210.12 1914.9,1210.54 1915.49,1210.59 1916.08,1210.83 1916.66,1213.45 1917.25,1216.08 1917.83,1214.52 1918.42,1214.4 1919.01,1214.44 1919.59,1212.78 1920.18,1211.62 1920.77,1212.91 1921.35,1214.58 1921.94,1213.36 1922.53,1213.3 1923.11,1213.04 1923.7,1213.05 1924.29,1213.1 1924.87,1214.41 1925.46,1213.01 1926.04,1212.91 1926.63,1211.55 1927.22,1213.17 1927.8,1213 1928.39,1213.92 1928.98,1212.45 1929.56,1213.7 1930.15,1212.36 1930.74,1213.64 1931.32,1213.65 1931.91,1212.19 1932.5,1210.66 1933.08,1209.36 1933.67,1206.76 1934.25,1211.23 1934.84,1212.6 1935.43,1211.45 1936.01,1211.35 1936.6,1211.24 1937.19,1211.37 1937.77,1211.55 1938.36,1208.92 1938.95,1209.1 1939.53,1209.45 1940.12,1209.45 1940.71,1211.11 1941.29,1212.47 1941.88,1212.42 1942.46,1216.25 1943.05,1217.2 1943.64,1215.44 1944.22,1216.83 1944.81,1215.16 1945.4,1212.41 1945.98,1206.99 1946.57,1207.31 1947.16,1207.68 1947.74,1212 1948.33,1210.6 1948.91,1213.38 1949.5,1210.78 1950.09,1211.97 1950.67,1214.55 1951.26,1212.86 1951.85,1211.34 1952.43,1208.52 1953.02,1208.78 1953.61,1210.41 1954.19,1209.19 1954.78,1211.96 1955.37,1210.67 1955.95,1209.35 1956.54,1209.33 1957.12,1208.12 1957.71,1210.88 1958.3,1212.18 1958.88,1212.32 1959.47,1210.85 1960.06,1213.42 1960.64,1214.88 1961.23,1214.67 1961.82,1214.45 1962.4,1214.42 1962.99,1212.72 1963.58,1212.5 1964.16,1212.53 1964.75,1211.02 1965.33,1212.14 1965.92,1213.41 1966.51,1213.26 1967.09,1211.65 1967.68,1212.57 1968.27,1211.42 1968.85,1211.57 1969.44,1211.73 1970.03,1213.08 1970.61,1212.95 1971.2,1208.62 1971.78,1208.96 1972.37,1210.46 1972.96,1206.5 1973.54,1206.83 1974.13,1204.46 1974.72,1204.9 1975.3,1203.83 1975.89,1207.02 1976.48,1207.23 1977.06,1206.02 1977.65,1206.05 1978.24,1206.26 1978.82,1207.94 1979.41,1209.31 1979.99,1206.74 1980.58,1206.9 1981.17,1205.71 1981.75,1204.71 1982.34,1206.57 1982.93,1205.6 1983.51,1204.93 1984.1,1206.61 1984.69,1206.96 1985.27,1208.88 1985.86,1209.12 1986.45,1212.16 1987.03,1212.14 1987.62,1211.96 1988.2,1212.2 1988.79,1213.26 1989.38,1214.53 1989.96,1214.48 1990.55,1216.98 1991.14,1218.14 1991.72,1217.96 1992.31,1220.18 1992.9,1222.19 1993.48,1224.11 1994.07,1222.14 1994.65,1221.52 1995.24,1222.35 1995.83,1220.6 1996.41,1220.18 1997,1219.41 1997.59,1221.36 1998.17,1222.52 1998.76,1218.13 1999.35,1217.95 1999.93,1217.52 2000.52,1215.96 2001.11,1215.67 2001.69,1216.92 2002.28,1219.24 2002.86,1214.79 2003.45,1209.46 2004.04,1210.63 2004.62,1211.83 2005.21,1208.18 2005.8,1212.13 2006.38,1212.04 2006.97,1210.85 2007.56,1213.37 2008.14,1214.79 2008.73,1210.61 2009.32,1210.35 2009.9,1211.9 2010.49,1214.51 2011.07,1214.29 2011.66,1214.1 2012.25,1216.72 2012.83,1217.68 2013.42,1215.87 2014.01,1214.5 2014.59,1213.16 2015.18,1211.7 2015.77,1211.51 2016.35,1210.5 2016.94,1209.29 2017.53,1208.04 2018.11,1210.87 2018.7,1209.51 2019.28,1209.7 2019.87,1208.59 2020.46,1207.61 2021.04,1208.01 2021.63,1210.86 2022.22,1210.88 2022.8,1212.26 2023.39,1210.97 2023.98,1210.75 2024.56,1212.3 2025.15,1213.65 2025.73,1213.37 2026.32,1214.37 2026.91,1212.86 2027.49,1215.62 2028.08,1215.56 2028.67,1217.93 2029.25,1218 2029.84,1217.96 2030.43,1219.26 2031.01,1218.66 2031.6,1217.03 2032.19,1216.73 2032.77,1215.28 2033.36,1215.23 2033.94,1215.09 2034.53,1213.62 2035.12,1213.46 2035.7,1214.86 2036.29,1212.11 2036.88,1209.5 2037.46,1209.81 2038.05,1208.58 2038.64,1208.78 2039.22,1208.94 2039.81,1207.91 2040.4,1205.2 2040.98,1206.78 2041.57,1207.01 2042.15,1209.93 2042.74,1208.62 2043.33,1208.66 2043.91,1208.95 2044.5,1208.9 2045.09,1207.58 2045.67,1209.2 2046.26,1213.21 2046.85,1207.78 2047.43,1207.96 2048.02,1207.99 2048.6,1209.54 2049.19,1209.61 2049.78,1212.54 2050.36,1211.33 2050.95,1210.09 2051.54,1211.41 2052.12,1211.34 2052.71,1211.3 2053.3,1214 2053.88,1212.74 2054.47,1212.86 2055.06,1211.51 2055.64,1214.13 2056.23,1212.74 2056.81,1216.56 2057.4,1213.79 2057.99,1215.21 2058.57,1215 2059.16,1212.17 2059.75,1212.32 2060.33,1212.46 2060.92,1211.19 2061.51,1209.81 2062.09,1210.08 2062.68,1211.72 2063.27,1211.72 2063.85,1210.37 2064.44,1207.98 2065.02,1211.11 2065.61,1209.7 2066.2,1209.32 2066.78,1210.96 2067.37,1210.1 2067.96,1210.19 2068.54,1208.88 2069.13,1209 2069.72,1210.25 2070.3,1208.83 2070.89,1208.84 2071.48,1206.33 2072.06,1206.72 2072.65,1208.19 2073.23,1205.86 2073.82,1206.34 2074.41,1209.29 2074.99,1210.6 2075.58,1210.65 2076.17,1212.19 2076.75,1211.98 2077.34,1214.72 2077.93,1214.57 2078.51,1213.02 2079.1,1211.38 2079.68,1208.78 2080.27,1209 2080.86,1208.95 2081.44,1211.74 2082.03,1215.65 2082.62,1212.75 2083.2,1212.59 2083.79,1212.56 2084.38,1212.51 2084.96,1213.88 2085.55,1215.16 2086.14,1213.81 2086.72,1214.9 2087.31,1214.87 2087.89,1214.63 2088.48,1215.85 2089.07,1213.05 2089.65,1212.78 2090.24,1213.88 2090.83,1212.34 2091.41,1212.63 2092,1212.68 2092.59,1215.17 2093.17,1216.26 2093.76,1216.2 2094.35,1214.7 2094.93,1215.75 2095.52,1214.19 2096.1,1214.99 2096.69,1215.09 2097.28,1214.86 2097.86,1215.02 2098.45,1214.88 2099.04,1217.11 2099.62,1215.21 2100.21,1216.36 2100.8,1217.74 2101.38,1215.02 2101.97,1213.67 2102.55,1209.71 2103.14,1208.37 2103.73,1208.57 2104.31,1206.05 2104.9,1206.26 2105.49,1209.37 2106.07,1210.61 2106.66,1213.47 2107.25,1213.23 2107.83,1211.85 2108.42,1210.48 2109.01,1210.59 2109.59,1210.77 2110.18,1210.85 2110.76,1212.15 2111.35,1213.4 2111.94,1213.4 2112.52,1211.88 2113.11,1211.85 2113.7,1209.06 2114.28,1209.53 2114.87,1208.33 2115.46,1205.71 2116.04,1207.36 2116.63,1206.5 2117.22,1205.42 2117.8,1207.26 2118.39,1208.65 2118.97,1211.41 2119.56,1211.33 2120.15,1210.13 2120.73,1207.47 2121.32,1208.1 2121.91,1207.11 2122.49,1206.26 2123.08,1208.17 2123.67,1208.52 2124.25,1210.18 2124.84,1211.91 2125.42,1214.47 2126.01,1215.58 2126.6,1216.69 2127.18,1221.74 2127.77,1222.39 2128.36,1218.97 2128.94,1217.57 2129.53,1217.43 2130.12,1217.32 2130.7,1216.8 2131.29,1215.3 2131.88,1216.5 2132.46,1216.26 2133.05,1217.34 2133.63,1219.48 2134.22,1219.43 2134.81,1216.11 2135.39,1217.34 2135.98,1215.8 2136.57,1216.91 2137.15,1220.48 2137.74,1221.43 2138.33,1221.2 2138.91,1218.19 2139.5,1216.61 2140.09,1216.29 2140.67,1216.32 2141.26,1214.56 2141.84,1212.8 2142.43,1212.82 2143.02,1213.13 2143.6,1217.05 2144.19,1217.19 2144.78,1215.64 2145.36,1215.33 2145.95,1216.38 2146.54,1212.28 2147.12,1208.14 2147.71,1208.4 2148.3,1208.75 2148.88,1208.79 2149.47,1207.6 2150.05,1207.73 2150.64,1206.64 2151.23,1208.27 2151.81,1208.64 2152.4,1214.23 2152.99,1211.3 2153.57,1212.91 2154.16,1215.73 2154.75,1214.38 2155.33,1215.41 2155.92,1215.42 2156.5,1216.53 2157.09,1221.4 2157.68,1216.89 2158.26,1216.6 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1212.42 L986.612 1212.42 L987.198 1212.42 L987.785 1212.42 L988.371 1212.42 L988.957 1212.42 L989.544 1212.42 L990.13 1212.42 L990.717 1212.42 L991.303 1212.42 L991.889 1212.42 L992.476 1212.42 L993.062 1212.42 L993.649 1212.42 L994.235 1212.42 L994.822 1212.42 L995.408 1212.42 L995.994 1212.42 L996.581 1212.42 L997.167 1212.42 L997.754 1212.42 L998.34 1212.42 L998.926 1212.42 L999.513 1212.42 L1000.1 1212.42 L1000.69 1212.42 L1001.27 1212.42 L1001.86 1212.42 L1002.44 1212.42 L1003.03 1212.42 L1003.62 1212.42 L1004.2 1212.42 L1004.79 1212.42 L1005.38 1212.42 L1005.96 1212.42 L1006.55 1212.42 L1007.14 1212.42 L1007.72 1212.42 L1008.31 1212.42 L1008.9 1212.42 L1009.48 1212.42 L1010.07 1212.42 L1010.65 1212.42 L1011.24 1212.42 L1011.83 1212.42 L1012.41 1212.42 L1013 1212.42 L1013.59 1212.42 L1014.17 1212.42 L1014.76 1212.42 L1015.35 1212.42 L1015.93 1212.42 L1016.52 1212.42 L1017.11 1212.42 L1017.69 1212.42 L1018.28 1212.42 L1018.86 1212.42 L1019.45 1212.42 L1020.04 1212.42 L1020.62 1212.42 L1021.21 1212.42 L1021.8 1212.42 L1022.38 1212.42 L1022.97 1212.42 L1023.56 1212.42 L1024.14 1212.42 L1024.73 1212.42 L1025.32 1212.42 L1025.9 1212.42 L1026.49 1212.42 L1027.07 1212.42 L1027.66 1212.42 L1028.25 1212.42 L1028.83 1212.42 L1029.42 1212.42 L1030.01 1212.42 L1030.59 1212.42 L1031.18 1212.42 L1031.77 1212.42 L1032.35 1212.42 L1032.94 1212.42 L1033.52 1212.42 L1034.11 1212.42 L1034.7 1212.42 L1035.28 1212.42 L1035.87 1212.42 L1036.46 1212.42 L1037.04 1212.42 L1037.63 1212.42 L1038.22 1212.42 L1038.8 1212.42 L1039.39 1212.42 L1039.98 1212.42 L1040.56 1212.42 L1041.15 1212.42 L1041.73 1212.42 L1042.32 1212.42 L1042.91 1212.42 L1043.49 1212.42 L1044.08 1212.42 L1044.67 1212.42 L1045.25 1212.42 L1045.84 1212.42 L1046.43 1212.42 L1047.01 1212.42 L1047.6 1212.42 L1048.19 1212.42 L1048.77 1212.42 L1049.36 1212.42 L1049.94 1212.42 L1050.53 1212.42 L1051.12 1212.42 L1051.7 1212.42 L1052.29 1212.42 L1052.88 1212.42 L1053.46 1212.42 L1054.05 1212.42 L1054.64 1212.42 L1055.22 1212.42 L1055.81 1212.42 L1056.39 1212.42 L1056.98 1212.42 L1057.57 1212.42 L1058.15 1212.42 L1058.74 1212.42 L1059.33 1212.42 L1059.91 1212.42 L1060.5 1212.42 L1061.09 1212.42 L1061.67 1212.42 L1062.26 1212.42 L1062.85 1212.42 L1063.43 1212.42 L1064.02 1212.42 L1064.6 1212.42 L1065.19 1212.42 L1065.78 1212.42 L1066.36 1212.42 L1066.95 1212.42 L1067.54 1212.42 L1068.12 1212.42 L1068.71 1212.42 L1069.3 1212.42 L1069.88 1212.42 L1070.47 1212.42 L1071.06 1212.42 L1071.64 1212.42 L1072.23 1212.42 L1072.81 1212.42 L1073.4 1212.42 L1073.99 1212.42 L1074.57 1212.42 L1075.16 1212.42 L1075.75 1212.42 L1076.33 1212.42 L1076.92 1212.42 L1077.51 1212.42 L1078.09 1212.42 L1078.68 1212.42 L1079.26 1212.42 L1079.85 1212.42 L1080.44 1212.42 L1081.02 1212.42 L1081.61 1212.42 L1082.2 1212.42 L1082.78 1212.42 L1083.37 1212.42 L1083.96 1212.42 L1084.54 1212.42 L1085.13 1212.42 L1085.72 1212.42 L1086.3 1212.42 L1086.89 1212.42 L1087.47 1212.42 L1088.06 1212.42 L1088.65 1212.42 L1089.23 1212.42 L1089.82 1212.42 L1090.41 1212.42 L1090.99 1212.42 L1091.58 1212.42 L1092.17 1212.42 L1092.75 1212.42 L1093.34 1212.42 L1093.93 1212.42 L1094.51 1212.42 L1095.1 1212.42 L1095.68 1212.42 L1096.27 1212.42 L1096.86 1212.42 L1097.44 1212.42 L1098.03 1212.42 L1098.62 1212.42 L1099.2 1212.42 L1099.79 1212.42 L1100.38 1212.42 L1100.96 1212.42 L1101.55 1212.42 L1102.14 1212.42 L1102.72 1212.42 L1103.31 1212.42 L1103.89 1212.42 L1104.48 1212.42 L1105.07 1212.42 L1105.65 1212.42 L1106.24 1212.42 L1106.83 1212.42 L1107.41 1212.42 L1108 1212.42 L1108.59 1212.42 L1109.17 1212.42 L1109.76 1212.42 L1110.34 1212.42 L1110.93 1212.42 L1111.52 1212.42 L1112.1 1212.42 L1112.69 1212.42 L1113.28 1212.42 L1113.86 1212.42 L1114.45 1212.42 L1115.04 1212.42 L1115.62 1212.42 L1116.21 1212.42 L1116.8 1212.42 L1117.38 1212.42 L1117.97 1212.42 L1118.55 1212.42 L1119.14 1212.42 L1119.73 1212.42 L1120.31 1212.42 L1120.9 1212.42 L1121.49 1212.42 L1122.07 1212.42 L1122.66 1212.42 L1123.25 1212.42 L1123.83 1212.42 L1124.42 1212.42 L1125.01 1212.42 L1125.59 1212.42 L1126.18 1212.42 L1126.76 1212.42 L1127.35 1212.42 L1127.94 1212.42 L1128.52 1212.42 L1129.11 1212.42 L1129.7 1212.42 L1130.28 1212.42 L1130.87 1212.42 L1131.46 1212.42 L1132.04 1212.42 L1132.63 1212.42 L1133.21 1212.42 L1133.8 1212.42 L1134.39 1212.42 L1134.97 1212.42 L1135.56 1212.42 L1136.15 1212.42 L1136.73 1212.42 L1137.32 1212.42 L1137.91 1212.42 L1138.49 1212.42 L1139.08 1212.42 L1139.67 1212.42 L1140.25 1212.42 L1140.84 1212.42 L1141.42 1212.42 L1142.01 1212.42 L1142.6 1212.42 L1143.18 1212.42 L1143.77 1212.42 L1144.36 1212.42 L1144.94 1212.42 L1145.53 1212.42 L1146.12 1212.42 L1146.7 1212.42 L1147.29 1212.42 L1147.88 1212.42 L1148.46 1212.42 L1149.05 1212.42 L1149.63 1212.42 L1150.22 1212.42 L1150.81 1212.42 L1151.39 1212.42 L1151.98 1212.42 L1152.57 1212.42 L1153.15 1212.42 L1153.74 1212.42 L1154.33 1212.42 L1154.91 1212.42 L1155.5 1212.42 L1156.09 1212.42 L1156.67 1212.42 L1157.26 1212.42 L1157.84 1212.42 L1158.43 1212.42 L1159.02 1212.42 L1159.6 1212.42 L1160.19 1212.42 L1160.78 1212.42 L1161.36 1212.42 L1161.95 1212.42 L1162.54 1212.42 L1163.12 1212.42 L1163.71 1212.42 L1164.29 1212.42 L1164.88 1212.42 L1165.47 1212.42 L1166.05 1212.42 L1166.64 1212.42 L1167.23 1212.42 L1167.81 1212.42 L1168.4 1212.42 L1168.99 1212.42 L1169.57 1212.42 L1170.16 1212.42 L1170.75 1212.42 L1171.33 1212.42 L1171.92 1212.42 L1172.5 1212.42 L1173.09 1212.42 L1173.68 1212.42 L1174.26 1212.42 L1174.85 1212.42 L1175.44 1212.42 L1176.02 1212.42 L1176.61 1212.42 L1177.2 1212.42 L1177.78 1212.42 L1178.37 1212.42 L1178.96 1212.42 L1179.54 1212.42 L1180.13 1212.42 L1180.71 1212.42 L1181.3 1212.42 L1181.89 1212.42 L1182.47 1212.42 L1183.06 1212.42 L1183.65 1212.42 L1184.23 1212.42 L1184.82 1212.42 L1185.41 1212.42 L1185.99 1212.42 L1186.58 1212.42 L1187.16 1212.42 L1187.75 1212.42 L1188.34 1212.42 L1188.92 1212.42 L1189.51 1212.42 L1190.1 1212.42 L1190.68 1212.42 L1191.27 1212.42 L1191.86 1212.42 L1192.44 1212.42 L1193.03 1212.42 L1193.62 1212.42 L1194.2 1212.42 L1194.79 1212.42 L1195.37 1212.42 L1195.96 1212.42 L1196.55 1212.42 L1197.13 1212.42 L1197.72 1212.42 L1198.31 1212.42 L1198.89 1212.42 L1199.48 1212.42 L1200.07 1212.42 L1200.65 1212.42 L1201.24 1212.42 L1201.83 1212.42 L1202.41 1212.42 L1203 1212.42 L1203.58 1212.42 L1204.17 1212.42 L1204.76 1212.42 L1205.34 1212.42 L1205.93 1212.42 L1206.52 1212.42 L1207.1 1212.42 L1207.69 1212.42 L1208.28 1212.42 L1208.86 1212.42 L1209.45 1212.42 L1210.03 1212.42 L1210.62 1212.42 L1211.21 1212.42 L1211.79 1212.42 L1212.38 1212.42 L1212.97 1212.42 L1213.55 1212.42 L1214.14 1212.42 L1214.73 1212.42 L1215.31 1212.42 L1215.9 1212.42 L1216.49 1212.42 L1217.07 1212.42 L1217.66 1212.42 L1218.24 1212.42 L1218.83 1212.42 L1219.42 1212.42 L1220 1212.42 L1220.59 1212.42 L1221.18 1212.42 L1221.76 1212.42 L1222.35 1212.42 L1222.94 1212.42 L1223.52 1212.42 L1224.11 1212.42 L1224.7 1212.42 L1225.28 1212.42 L1225.87 1212.42 L1226.45 1212.42 L1227.04 1212.42 L1227.63 1212.42 L1228.21 1212.42 L1228.8 1212.42 L1229.39 1212.42 L1229.97 1212.42 L1230.56 1212.42 L1231.15 1212.42 L1231.73 1212.42 L1232.32 1212.42 L1232.91 1212.42 L1233.49 1212.42 L1234.08 1212.42 L1234.66 1212.42 L1235.25 1212.42 L1235.84 1212.42 L1236.42 1212.42 L1237.01 1212.42 L1237.6 1212.42 L1238.18 1212.42 L1238.77 1212.42 L1239.36 1212.42 L1239.94 1212.42 L1240.53 1212.42 L1241.11 1212.42 L1241.7 1212.42 L1242.29 1212.42 L1242.87 1212.42 L1243.46 1212.42 L1244.05 1212.42 L1244.63 1212.42 L1245.22 1212.42 L1245.81 1212.42 L1246.39 1212.42 L1246.98 1212.42 L1247.57 1212.42 L1248.15 1212.42 L1248.74 1212.42 L1249.32 1212.42 L1249.91 1212.42 L1250.5 1212.42 L1251.08 1212.42 L1251.67 1212.42 L1252.26 1212.42 L1252.84 1212.42 L1253.43 1212.42 L1254.02 1212.42 L1254.6 1212.42 L1255.19 1212.42 L1255.78 1212.42 L1256.36 1212.42 L1256.95 1212.42 L1257.53 1212.42 L1258.12 1212.42 L1258.71 1212.42 L1259.29 1212.42 L1259.88 1212.42 L1260.47 1212.42 L1261.05 1212.42 L1261.64 1212.42 L1262.23 1212.42 L1262.81 1212.42 L1263.4 1212.42 L1263.98 1212.42 L1264.57 1212.42 L1265.16 1212.42 L1265.74 1212.42 L1266.33 1212.42 L1266.92 1212.42 L1267.5 1212.42 L1268.09 1212.42 L1268.68 1212.42 L1269.26 1212.42 L1269.85 1212.42 L1270.44 1212.42 L1271.02 1212.42 L1271.61 1212.42 L1272.19 1212.42 L1272.78 1212.42 L1273.37 1212.42 L1273.95 1212.42 L1274.54 1212.42 L1275.13 1212.42 L1275.71 1212.42 L1276.3 1212.42 L1276.89 1212.42 L1277.47 1212.42 L1278.06 1212.42 L1278.65 1212.42 L1279.23 1212.42 L1279.82 1212.42 L1280.4 1212.42 L1280.99 1212.42 L1281.58 1212.42 L1282.16 1212.42 L1282.75 1212.42 L1283.34 1212.42 L1283.92 1212.42 L1284.51 1212.42 L1285.1 1212.42 L1285.68 1212.42 L1286.27 1212.42 L1286.86 1212.42 L1287.44 1212.42 L1288.03 1212.42 L1288.61 1212.42 L1289.2 1212.42 L1289.79 1212.42 L1290.37 1212.42 L1290.96 1212.42 L1291.55 1212.42 L1292.13 1212.42 L1292.72 1212.42 L1293.31 1212.42 L1293.89 1212.42 L1294.48 1212.42 L1295.06 1212.42 L1295.65 1212.42 L1296.24 1212.42 L1296.82 1212.42 L1297.41 1212.42 L1298 1212.42 L1298.58 1212.42 L1299.17 1212.42 L1299.76 1212.42 L1300.34 1212.42 L1300.93 1212.42 L1301.52 1212.42 L1302.1 1212.42 L1302.69 1212.42 L1303.27 1212.42 L1303.86 1212.42 L1304.45 1212.42 L1305.03 1212.42 L1305.62 1212.42 L1306.21 1212.42 L1306.79 1212.42 L1307.38 1212.42 L1307.97 1212.42 L1308.55 1212.42 L1309.14 1212.42 L1309.73 1212.42 L1310.31 1212.42 L1310.9 1212.42 L1311.48 1212.42 L1312.07 1212.42 L1312.66 1212.42 L1313.24 1212.42 L1313.83 1212.42 L1314.42 1212.42 L1315 1212.42 L1315.59 1212.42 L1316.18 1212.42 L1316.76 1212.42 L1317.35 1212.42 L1317.93 1212.42 L1318.52 1212.42 L1319.11 1212.42 L1319.69 1212.42 L1320.28 1212.42 L1320.87 1212.42 L1321.45 1212.42 L1322.04 1212.42 L1322.63 1212.42 L1323.21 1212.42 L1323.8 1212.42 L1324.39 1212.42 L1324.97 1212.42 L1325.56 1212.42 L1326.14 1212.42 L1326.73 1212.42 L1327.32 1212.42 L1327.9 1212.42 L1328.49 1212.42 L1329.08 1212.42 L1329.66 1212.42 L1330.25 1212.42 L1330.84 1212.42 L1331.42 1212.42 L1332.01 1212.42 L1332.6 1212.42 L1333.18 1212.42 L1333.77 1212.42 L1334.35 1212.42 L1334.94 1212.42 L1335.53 1212.42 L1336.11 1212.42 L1336.7 1212.42 L1337.29 1212.42 L1337.87 1212.42 L1338.46 1212.42 L1339.05 1212.42 L1339.63 1212.42 L1340.22 1212.42 L1340.8 1212.42 L1341.39 1212.42 L1341.98 1212.42 L1342.56 1212.42 L1343.15 1212.42 L1343.74 1212.42 L1344.32 1212.42 L1344.91 1212.42 L1345.5 1212.42 L1346.08 1212.42 L1346.67 1212.42 L1347.26 1212.42 L1347.84 1212.42 L1348.43 1212.42 L1349.01 1212.42 L1349.6 1212.42 L1350.19 1212.42 L1350.77 1212.42 L1351.36 1212.42 L1351.95 1212.42 L1352.53 1212.42 L1353.12 1212.42 L1353.71 1212.42 L1354.29 1212.42 L1354.88 1212.42 L1355.47 1212.42 L1356.05 1212.42 L1356.64 1212.42 L1357.22 1212.42 L1357.81 1212.42 L1358.4 1212.42 L1358.98 1212.42 L1359.57 1212.42 L1360.16 1212.42 L1360.74 1212.42 L1361.33 1212.42 L1361.92 1212.42 L1362.5 1212.42 L1363.09 1212.42 L1363.68 1212.42 L1364.26 1212.42 L1364.85 1212.42 L1365.43 1212.42 L1366.02 1212.42 L1366.61 1212.42 L1367.19 1212.42 L1367.78 1212.42 L1368.37 1212.42 L1368.95 1212.42 L1369.54 1212.42 L1370.13 1212.42 L1370.71 1212.42 L1371.3 1212.42 L1371.88 1212.42 L1372.47 1212.42 L1373.06 1212.42 L1373.64 1212.42 L1374.23 1212.42 L1374.82 1212.42 L1375.4 1212.42 L1375.99 1212.42 L1376.58 1212.42 L1377.16 1212.42 L1377.75 1212.42 L1378.34 1212.42 L1378.92 1212.42 L1379.51 1212.42 L1380.09 1212.42 L1380.68 1212.42 L1381.27 1212.42 L1381.85 1212.42 L1382.44 1212.42 L1383.03 1212.42 L1383.61 1212.42 L1384.2 1212.42 L1384.79 1212.42 L1385.37 1212.42 L1385.96 1212.42 L1386.55 1212.42 L1387.13 1212.42 L1387.72 1212.42 L1388.3 1212.42 L1388.89 1212.42 L1389.48 1212.42 L1390.06 1212.42 L1390.65 1212.42 L1391.24 1212.42 L1391.82 1212.42 L1392.41 1212.42 L1393 1212.42 L1393.58 1212.42 L1394.17 1212.42 L1394.75 1212.42 L1395.34 1212.42 L1395.93 1212.42 L1396.51 1212.42 L1397.1 1212.42 L1397.69 1212.42 L1398.27 1212.42 L1398.86 1212.42 L1399.45 1212.42 L1400.03 1212.42 L1400.62 1212.42 L1401.21 1212.42 L1401.79 1212.42 L1402.38 1212.42 L1402.96 1212.42 L1403.55 1212.42 L1404.14 1212.42 L1404.72 1212.42 L1405.31 1212.42 L1405.9 1212.42 L1406.48 1212.42 L1407.07 1212.42 L1407.66 1212.42 L1408.24 1212.42 L1408.83 1212.42 L1409.42 1212.42 L1410 1212.42 L1410.59 1212.42 L1411.17 1212.42 L1411.76 1212.42 L1412.35 1212.42 L1412.93 1212.42 L1413.52 1212.42 L1414.11 1212.42 L1414.69 1212.42 L1415.28 1212.42 L1415.87 1212.42 L1416.45 1212.42 L1417.04 1212.42 L1417.63 1212.42 L1418.21 1212.42 L1418.8 1212.42 L1419.38 1212.42 L1419.97 1212.42 L1420.56 1212.42 L1421.14 1212.42 L1421.73 1212.42 L1422.32 1212.42 L1422.9 1212.42 L1423.49 1212.42 L1424.08 1212.42 L1424.66 1212.42 L1425.25 1212.42 L1425.83 1212.42 L1426.42 1212.42 L1427.01 1212.42 L1427.59 1212.42 L1428.18 1212.42 L1428.77 1212.42 L1429.35 1212.42 L1429.94 1212.42 L1430.53 1212.42 L1431.11 1212.42 L1431.7 1212.42 L1432.29 1212.42 L1432.87 1212.42 L1433.46 1212.42 L1434.04 1212.42 L1434.63 1212.42 L1435.22 1212.42 L1435.8 1212.42 L1436.39 1212.42 L1436.98 1212.42 L1437.56 1212.42 L1438.15 1212.42 L1438.74 1212.42 L1439.32 1212.42 L1439.91 1212.42 L1440.5 1212.42 L1441.08 1212.42 L1441.67 1212.42 L1442.25 1212.42 L1442.84 1212.42 L1443.43 1212.42 L1444.01 1212.42 L1444.6 1212.42 L1445.19 1212.42 L1445.77 1212.42 L1446.36 1212.42 L1446.95 1212.42 L1447.53 1212.42 L1448.12 1212.42 L1448.7 1212.42 L1449.29 1212.42 L1449.88 1212.42 L1450.46 1212.42 L1451.05 1212.42 L1451.64 1212.42 L1452.22 1212.42 L1452.81 1212.42 L1453.4 1212.42 L1453.98 1212.42 L1454.57 1212.42 L1455.16 1212.42 L1455.74 1212.42 L1456.33 1212.42 L1456.91 1212.42 L1457.5 1212.42 L1458.09 1212.42 L1458.67 1212.42 L1459.26 1212.42 L1459.85 1212.42 L1460.43 1212.42 L1461.02 1212.42 L1461.61 1212.42 L1462.19 1212.42 L1462.78 1212.42 L1463.37 1212.42 L1463.95 1212.42 L1464.54 1212.42 L1465.12 1212.42 L1465.71 1212.42 L1466.3 1212.42 L1466.88 1212.42 L1467.47 1212.42 L1468.06 1212.42 L1468.64 1212.42 L1469.23 1212.42 L1469.82 1212.42 L1470.4 1212.42 L1470.99 1212.42 L1471.57 1212.42 L1472.16 1212.42 L1472.75 1212.42 L1473.33 1212.42 L1473.92 1212.42 L1474.51 1212.42 L1475.09 1212.42 L1475.68 1212.42 L1476.27 1212.42 L1476.85 1212.42 L1477.44 1212.42 L1478.03 1212.42 L1478.61 1212.42 L1479.2 1212.42 L1479.78 1212.42 L1480.37 1212.42 L1480.96 1212.42 L1481.54 1212.42 L1482.13 1212.42 L1482.72 1212.42 L1483.3 1212.42 L1483.89 1212.42 L1484.48 1212.42 L1485.06 1212.42 L1485.65 1212.42 L1486.24 1212.42 L1486.82 1212.42 L1487.41 1212.42 L1487.99 1212.42 L1488.58 1212.42 L1489.17 1212.42 L1489.75 1212.42 L1490.34 1212.42 L1490.93 1212.42 L1491.51 1212.42 L1492.1 1212.42 L1492.69 1212.42 L1493.27 1212.42 L1493.86 1212.42 L1494.45 1212.42 L1495.03 1212.42 L1495.62 1212.42 L1496.2 1212.42 L1496.79 1212.42 L1497.38 1212.42 L1497.96 1212.42 L1498.55 1212.42 L1499.14 1212.42 L1499.72 1212.42 L1500.31 1212.42 L1500.9 1212.42 L1501.48 1212.42 L1502.07 1212.42 L1502.65 1212.42 L1503.24 1212.42 L1503.83 1212.42 L1504.41 1212.42 L1505 1212.42 L1505.59 1212.42 L1506.17 1212.42 L1506.76 1212.42 L1507.35 1212.42 L1507.93 1212.42 L1508.52 1212.42 L1509.11 1212.42 L1509.69 1212.42 L1510.28 1212.42 L1510.86 1212.42 L1511.45 1212.42 L1512.04 1212.42 L1512.62 1212.42 L1513.21 1212.42 L1513.8 1212.42 L1514.38 1212.42 L1514.97 1212.42 L1515.56 1212.42 L1516.14 1212.42 L1516.73 1212.42 L1517.32 1212.42 L1517.9 1212.42 L1518.49 1212.42 L1519.07 1212.42 L1519.66 1212.42 L1520.25 1212.42 L1520.83 1212.42 L1521.42 1212.42 L1522.01 1212.42 L1522.59 1212.42 L1523.18 1212.42 L1523.77 1212.42 L1524.35 1212.42 L1524.94 1212.42 L1525.52 1212.42 L1526.11 1212.42 L1526.7 1212.42 L1527.28 1212.42 L1527.87 1212.42 L1528.46 1212.42 L1529.04 1212.42 L1529.63 1212.42 L1530.22 1212.42 L1530.8 1212.42 L1531.39 1212.42 L1531.98 1212.42 L1532.56 1212.42 L1533.15 1212.42 L1533.73 1212.42 L1534.32 1212.42 L1534.91 1212.42 L1535.49 1212.42 L1536.08 1212.42 L1536.67 1212.42 L1537.25 1212.42 L1537.84 1212.42 L1538.43 1212.42 L1539.01 1212.42 L1539.6 1212.42 L1540.19 1212.42 L1540.77 1212.42 L1541.36 1212.42 L1541.94 1212.42 L1542.53 1212.42 L1543.12 1212.42 L1543.7 1212.42 L1544.29 1212.42 L1544.88 1212.42 L1545.46 1212.42 L1546.05 1212.42 L1546.64 1212.42 L1547.22 1212.42 L1547.81 1212.42 L1548.4 1212.42 L1548.98 1212.42 L1549.57 1212.42 L1550.15 1212.42 L1550.74 1212.42 L1551.33 1212.42 L1551.91 1212.42 L1552.5 1212.42 L1553.09 1212.42 L1553.67 1212.42 L1554.26 1212.42 L1554.85 1212.42 L1555.43 1212.42 L1556.02 1212.42 L1556.6 1212.42 L1557.19 1212.42 L1557.78 1212.42 L1558.36 1212.42 L1558.95 1212.42 L1559.54 1212.42 L1560.12 1212.42 L1560.71 1212.42 L1561.3 1212.42 L1561.88 1212.42 L1562.47 1212.42 L1563.06 1212.42 L1563.64 1212.42 L1564.23 1212.42 L1564.81 1212.42 L1565.4 1212.42 L1565.99 1212.42 L1566.57 1212.42 L1567.16 1212.42 L1567.75 1212.42 L1568.33 1212.42 L1568.92 1212.42 L1569.51 1212.42 L1570.09 1212.42 L1570.68 1212.42 L1571.27 1212.42 L1571.85 1212.42 L1572.44 1212.42 L1573.02 1212.42 L1573.61 1212.42 L1574.2 1212.42 L1574.78 1212.42 L1575.37 1212.42 L1575.96 1212.42 L1576.54 1212.42 L1577.13 1212.42 L1577.72 1212.42 L1578.3 1212.42 L1578.89 1212.42 L1579.47 1212.42 L1580.06 1212.42 L1580.65 1212.42 L1581.23 1212.42 L1581.82 1212.42 L1582.41 1212.42 L1582.99 1212.42 L1583.58 1212.42 L1584.17 1212.42 L1584.75 1212.42 L1585.34 1212.42 L1585.93 1212.42 L1586.51 1212.42 L1587.1 1212.42 L1587.68 1212.42 L1588.27 1212.42 L1588.86 1212.42 L1589.44 1212.42 L1590.03 1212.42 L1590.62 1212.42 L1591.2 1212.42 L1591.79 1212.42 L1592.38 1212.42 L1592.96 1212.42 L1593.55 1212.42 L1594.14 1212.42 L1594.72 1212.42 L1595.31 1212.42 L1595.89 1212.42 L1596.48 1212.42 L1597.07 1212.42 L1597.65 1212.42 L1598.24 1212.42 L1598.83 1212.42 L1599.41 1212.42 L1600 1212.42 L1600.59 1212.42 L1601.17 1212.42 L1601.76 1212.42 L1602.34 1212.42 L1602.93 1212.42 L1603.52 1212.42 L1604.1 1212.42 L1604.69 1212.42 L1605.28 1212.42 L1605.86 1212.42 L1606.45 1212.42 L1607.04 1212.42 L1607.62 1212.42 L1608.21 1212.42 L1608.8 1212.42 L1609.38 1212.42 L1609.97 1212.42 L1610.55 1212.42 L1611.14 1212.42 L1611.73 1212.42 L1612.31 1212.42 L1612.9 1212.42 L1613.49 1212.42 L1614.07 1212.42 L1614.66 1212.42 L1615.25 1212.42 L1615.83 1212.42 L1616.42 1212.42 L1617.01 1212.42 L1617.59 1212.42 L1618.18 1212.42 L1618.76 1212.42 L1619.35 1212.42 L1619.94 1212.42 L1620.52 1212.42 L1621.11 1212.42 L1621.7 1212.42 L1622.28 1212.42 L1622.87 1212.42 L1623.46 1212.42 L1624.04 1212.42 L1624.63 1212.42 L1625.22 1212.42 L1625.8 1212.42 L1626.39 1212.42 L1626.97 1212.42 L1627.56 1212.42 L1628.15 1212.42 L1628.73 1212.42 L1629.32 1212.42 L1629.91 1212.42 L1630.49 1212.42 L1631.08 1212.42 L1631.67 1212.42 L1632.25 1212.42 L1632.84 1212.42 L1633.42 1212.42 L1634.01 1212.42 L1634.6 1212.42 L1635.18 1212.42 L1635.77 1212.42 L1636.36 1212.42 L1636.94 1212.42 L1637.53 1212.42 L1638.12 1212.42 L1638.7 1212.42 L1639.29 1212.42 L1639.88 1212.42 L1640.46 1212.42 L1641.05 1212.42 L1641.63 1212.42 L1642.22 1212.42 L1642.81 1212.42 L1643.39 1212.42 L1643.98 1212.42 L1644.57 1212.42 L1645.15 1212.42 L1645.74 1212.42 L1646.33 1212.42 L1646.91 1212.42 L1647.5 1212.42 L1648.09 1212.42 L1648.67 1212.42 L1649.26 1212.42 L1649.84 1212.42 L1650.43 1212.42 L1651.02 1212.42 L1651.6 1212.42 L1652.19 1212.42 L1652.78 1212.42 L1653.36 1212.42 L1653.95 1212.42 L1654.54 1212.42 L1655.12 1212.42 L1655.71 1212.42 L1656.29 1212.42 L1656.88 1212.42 L1657.47 1212.42 L1658.05 1212.42 L1658.64 1212.42 L1659.23 1212.42 L1659.81 1212.42 L1660.4 1212.42 L1660.99 1212.42 L1661.57 1212.42 L1662.16 1212.42 L1662.75 1212.42 L1663.33 1212.42 L1663.92 1212.42 L1664.5 1212.42 L1665.09 1212.42 L1665.68 1212.42 L1666.26 1212.42 L1666.85 1212.42 L1667.44 1212.42 L1668.02 1212.42 L1668.61 1212.42 L1669.2 1212.42 L1669.78 1212.42 L1670.37 1212.42 L1670.96 1212.42 L1671.54 1212.42 L1672.13 1212.42 L1672.71 1212.42 L1673.3 1212.42 L1673.89 1212.42 L1674.47 1212.42 L1675.06 1212.42 L1675.65 1212.42 L1676.23 1212.42 L1676.82 1212.42 L1677.41 1212.42 L1677.99 1212.42 L1678.58 1212.42 L1679.17 1212.42 L1679.75 1212.42 L1680.34 1212.42 L1680.92 1212.42 L1681.51 1212.42 L1682.1 1212.42 L1682.68 1212.42 L1683.27 1212.42 L1683.86 1212.42 L1684.44 1212.42 L1685.03 1212.42 L1685.62 1212.42 L1686.2 1212.42 L1686.79 1212.42 L1687.37 1212.42 L1687.96 1212.42 L1688.55 1212.42 L1689.13 1212.42 L1689.72 1212.42 L1690.31 1212.42 L1690.89 1212.42 L1691.48 1212.42 L1692.07 1212.42 L1692.65 1212.42 L1693.24 1212.42 L1693.83 1212.42 L1694.41 1212.42 L1695 1212.42 L1695.58 1212.42 L1696.17 1212.42 L1696.76 1212.42 L1697.34 1212.42 L1697.93 1212.42 L1698.52 1212.42 L1699.1 1212.42 L1699.69 1212.42 L1700.28 1212.42 L1700.86 1212.42 L1701.45 1212.42 L1702.04 1212.42 L1702.62 1212.42 L1703.21 1212.42 L1703.79 1212.42 L1704.38 1212.42 L1704.97 1212.42 L1705.55 1212.42 L1706.14 1212.42 L1706.73 1212.42 L1707.31 1212.42 L1707.9 1212.42 L1708.49 1212.42 L1709.07 1212.42 L1709.66 1212.42 L1710.24 1212.42 L1710.83 1212.42 L1711.42 1212.42 L1712 1212.42 L1712.59 1212.42 L1713.18 1212.42 L1713.76 1212.42 L1714.35 1212.42 L1714.94 1212.42 L1715.52 1212.42 L1716.11 1212.42 L1716.7 1212.42 L1717.28 1212.42 L1717.87 1212.42 L1718.45 1212.42 L1719.04 1212.42 L1719.63 1212.42 L1720.21 1212.42 L1720.8 1212.42 L1721.39 1212.42 L1721.97 1212.42 L1722.56 1212.42 L1723.15 1212.42 L1723.73 1212.42 L1724.32 1212.42 L1724.91 1212.42 L1725.49 1212.42 L1726.08 1212.42 L1726.66 1212.42 L1727.25 1212.42 L1727.84 1212.42 L1728.42 1212.42 L1729.01 1212.42 L1729.6 1212.42 L1730.18 1212.42 L1730.77 1212.42 L1731.36 1212.42 L1731.94 1212.42 L1732.53 1212.42 L1733.11 1212.42 L1733.7 1212.42 L1734.29 1212.42 L1734.87 1212.42 L1735.46 1212.42 L1736.05 1212.42 L1736.63 1212.42 L1737.22 1212.42 L1737.81 1212.42 L1738.39 1212.42 L1738.98 1212.42 L1739.57 1212.42 L1740.15 1212.42 L1740.74 1212.42 L1741.32 1212.42 L1741.91 1212.42 L1742.5 1212.42 L1743.08 1212.42 L1743.67 1212.42 L1744.26 1212.42 L1744.84 1212.42 L1745.43 1212.42 L1746.02 1212.42 L1746.6 1212.42 L1747.19 1212.42 L1747.78 1212.42 L1748.36 1212.42 L1748.95 1212.42 L1749.53 1212.42 L1750.12 1212.42 L1750.71 1212.42 L1751.29 1212.42 L1751.88 1212.42 L1752.47 1212.42 L1753.05 1212.42 L1753.64 1212.42 L1754.23 1212.42 L1754.81 1212.42 L1755.4 1212.42 L1755.99 1212.42 L1756.57 1212.42 L1757.16 1212.42 L1757.74 1212.42 L1758.33 1212.42 L1758.92 1212.42 L1759.5 1212.42 L1760.09 1212.42 L1760.68 1212.42 L1761.26 1212.42 L1761.85 1212.42 L1762.44 1212.42 L1763.02 1212.42 L1763.61 1212.42 L1764.19 1212.42 L1764.78 1212.42 L1765.37 1212.42 L1765.95 1212.42 L1766.54 1212.42 L1767.13 1212.42 L1767.71 1212.42 L1768.3 1212.42 L1768.89 1212.42 L1769.47 1212.42 L1770.06 1212.42 L1770.65 1212.42 L1771.23 1212.42 L1771.82 1212.42 L1772.4 1212.42 L1772.99 1212.42 L1773.58 1212.42 L1774.16 1212.42 L1774.75 1212.42 L1775.34 1212.42 L1775.92 1212.42 L1776.51 1212.42 L1777.1 1212.42 L1777.68 1212.42 L1778.27 1212.42 L1778.86 1212.42 L1779.44 1212.42 L1780.03 1212.42 L1780.61 1212.42 L1781.2 1212.42 L1781.79 1212.42 L1782.37 1212.42 L1782.96 1212.42 L1783.55 1212.42 L1784.13 1212.42 L1784.72 1212.42 L1785.31 1212.42 L1785.89 1212.42 L1786.48 1212.42 L1787.06 1212.42 L1787.65 1212.42 L1788.24 1212.42 L1788.82 1212.42 L1789.41 1212.42 L1790 1212.42 L1790.58 1212.42 L1791.17 1212.42 L1791.76 1212.42 L1792.34 1212.42 L1792.93 1212.42 L1793.52 1212.42 L1794.1 1212.42 L1794.69 1212.42 L1795.27 1212.42 L1795.86 1212.42 L1796.45 1212.42 L1797.03 1212.42 L1797.62 1212.42 L1798.21 1212.42 L1798.79 1212.42 L1799.38 1212.42 L1799.97 1212.42 L1800.55 1212.42 L1801.14 1212.42 L1801.73 1212.42 L1802.31 1212.42 L1802.9 1212.42 L1803.48 1212.42 L1804.07 1212.42 L1804.66 1212.42 L1805.24 1212.42 L1805.83 1212.42 L1806.42 1212.42 L1807 1212.42 L1807.59 1212.42 L1808.18 1212.42 L1808.76 1212.42 L1809.35 1212.42 L1809.94 1212.42 L1810.52 1212.42 L1811.11 1212.42 L1811.69 1212.42 L1812.28 1212.42 L1812.87 1212.42 L1813.45 1212.42 L1814.04 1212.42 L1814.63 1212.42 L1815.21 1212.42 L1815.8 1212.42 L1816.39 1212.42 L1816.97 1212.42 L1817.56 1212.42 L1818.14 1212.42 L1818.73 1212.42 L1819.32 1212.42 L1819.9 1212.42 L1820.49 1212.42 L1821.08 1212.42 L1821.66 1212.42 L1822.25 1212.42 L1822.84 1212.42 L1823.42 1212.42 L1824.01 1212.42 L1824.6 1212.42 L1825.18 1212.42 L1825.77 1212.42 L1826.35 1212.42 L1826.94 1212.42 L1827.53 1212.42 L1828.11 1212.42 L1828.7 1212.42 L1829.29 1212.42 L1829.87 1212.42 L1830.46 1212.42 L1831.05 1212.42 L1831.63 1212.42 L1832.22 1212.42 L1832.81 1212.42 L1833.39 1212.42 L1833.98 1212.42 L1834.56 1212.42 L1835.15 1212.42 L1835.74 1212.42 L1836.32 1212.42 L1836.91 1212.42 L1837.5 1212.42 L1838.08 1212.42 L1838.67 1212.42 L1839.26 1212.42 L1839.84 1212.42 L1840.43 1212.42 L1841.01 1212.42 L1841.6 1212.42 L1842.19 1212.42 L1842.77 1212.42 L1843.36 1212.42 L1843.95 1212.42 L1844.53 1212.42 L1845.12 1212.42 L1845.71 1212.42 L1846.29 1212.42 L1846.88 1212.42 L1847.47 1212.42 L1848.05 1212.42 L1848.64 1212.42 L1849.22 1212.42 L1849.81 1212.42 L1850.4 1212.42 L1850.98 1212.42 L1851.57 1212.42 L1852.16 1212.42 L1852.74 1212.42 L1853.33 1212.42 L1853.92 1212.42 L1854.5 1212.42 L1855.09 1212.42 L1855.68 1212.42 L1856.26 1212.42 L1856.85 1212.42 L1857.43 1212.42 L1858.02 1212.42 L1858.61 1212.42 L1859.19 1212.42 L1859.78 1212.42 L1860.37 1212.42 L1860.95 1212.42 L1861.54 1212.42 L1862.13 1212.42 L1862.71 1212.42 L1863.3 1212.42 L1863.88 1212.42 L1864.47 1212.42 L1865.06 1212.42 L1865.64 1212.42 L1866.23 1212.42 L1866.82 1212.42 L1867.4 1212.42 L1867.99 1212.42 L1868.58 1212.42 L1869.16 1212.42 L1869.75 1212.42 L1870.34 1212.42 L1870.92 1212.42 L1871.51 1212.42 L1872.09 1212.42 L1872.68 1212.42 L1873.27 1212.42 L1873.85 1212.42 L1874.44 1212.42 L1875.03 1212.42 L1875.61 1212.42 L1876.2 1212.42 L1876.79 1212.42 L1877.37 1212.42 L1877.96 1212.42 L1878.55 1212.42 L1879.13 1212.42 L1879.72 1212.42 L1880.3 1212.42 L1880.89 1212.42 L1881.48 1212.42 L1882.06 1212.42 L1882.65 1212.42 L1883.24 1212.42 L1883.82 1212.42 L1884.41 1212.42 L1885 1212.42 L1885.58 1212.42 L1886.17 1212.42 L1886.76 1212.42 L1887.34 1212.42 L1887.93 1212.42 L1888.51 1212.42 L1889.1 1212.42 L1889.69 1212.42 L1890.27 1212.42 L1890.86 1212.42 L1891.45 1212.42 L1892.03 1212.42 L1892.62 1212.42 L1893.21 1212.42 L1893.79 1212.42 L1894.38 1212.42 L1894.96 1212.42 L1895.55 1212.42 L1896.14 1212.42 L1896.72 1212.42 L1897.31 1212.42 L1897.9 1212.42 L1898.48 1212.42 L1899.07 1212.42 L1899.66 1212.42 L1900.24 1212.42 L1900.83 1212.42 L1901.42 1212.42 L1902 1212.42 L1902.59 1212.42 L1903.17 1212.42 L1903.76 1212.42 L1904.35 1212.42 L1904.93 1212.42 L1905.52 1212.42 L1906.11 1212.42 L1906.69 1212.42 L1907.28 1212.42 L1907.87 1212.42 L1908.45 1212.42 L1909.04 1212.42 L1909.63 1212.42 L1910.21 1212.42 L1910.8 1212.42 L1911.38 1212.42 L1911.97 1212.42 L1912.56 1212.42 L1913.14 1212.42 L1913.73 1212.42 L1914.32 1212.42 L1914.9 1212.42 L1915.49 1212.42 L1916.08 1212.42 L1916.66 1212.42 L1917.25 1212.42 L1917.83 1212.42 L1918.42 1212.42 L1919.01 1212.42 L1919.59 1212.42 L1920.18 1212.42 L1920.77 1212.42 L1921.35 1212.42 L1921.94 1212.42 L1922.53 1212.42 L1923.11 1212.42 L1923.7 1212.42 L1924.29 1212.42 L1924.87 1212.42 L1925.46 1212.42 L1926.04 1212.42 L1926.63 1212.42 L1927.22 1212.42 L1927.8 1212.42 L1928.39 1212.42 L1928.98 1212.42 L1929.56 1212.42 L1930.15 1212.42 L1930.74 1212.42 L1931.32 1212.42 L1931.91 1212.42 L1932.5 1212.42 L1933.08 1212.42 L1933.67 1212.42 L1934.25 1212.42 L1934.84 1212.42 L1935.43 1212.42 L1936.01 1212.42 L1936.6 1212.42 L1937.19 1212.42 L1937.77 1212.42 L1938.36 1212.42 L1938.95 1212.42 L1939.53 1212.42 L1940.12 1212.42 L1940.71 1212.42 L1941.29 1212.42 L1941.88 1212.42 L1942.46 1212.42 L1943.05 1212.42 L1943.64 1212.42 L1944.22 1212.42 L1944.81 1212.42 L1945.4 1212.42 L1945.98 1212.42 L1946.57 1212.42 L1947.16 1212.42 L1947.74 1212.42 L1948.33 1212.42 L1948.91 1212.42 L1949.5 1212.42 L1950.09 1212.42 L1950.67 1212.42 L1951.26 1212.42 L1951.85 1212.42 L1952.43 1212.42 L1953.02 1212.42 L1953.61 1212.42 L1954.19 1212.42 L1954.78 1212.42 L1955.37 1212.42 L1955.95 1212.42 L1956.54 1212.42 L1957.12 1212.42 L1957.71 1212.42 L1958.3 1212.42 L1958.88 1212.42 L1959.47 1212.42 L1960.06 1212.42 L1960.64 1212.42 L1961.23 1212.42 L1961.82 1212.42 L1962.4 1212.42 L1962.99 1212.42 L1963.58 1212.42 L1964.16 1212.42 L1964.75 1212.42 L1965.33 1212.42 L1965.92 1212.42 L1966.51 1212.42 L1967.09 1212.42 L1967.68 1212.42 L1968.27 1212.42 L1968.85 1212.42 L1969.44 1212.42 L1970.03 1212.42 L1970.61 1212.42 L1971.2 1212.42 L1971.78 1212.42 L1972.37 1212.42 L1972.96 1212.42 L1973.54 1212.42 L1974.13 1212.42 L1974.72 1212.42 L1975.3 1212.42 L1975.89 1212.42 L1976.48 1212.42 L1977.06 1212.42 L1977.65 1212.42 L1978.24 1212.42 L1978.82 1212.42 L1979.41 1212.42 L1979.99 1212.42 L1980.58 1212.42 L1981.17 1212.42 L1981.75 1212.42 L1982.34 1212.42 L1982.93 1212.42 L1983.51 1212.42 L1984.1 1212.42 L1984.69 1212.42 L1985.27 1212.42 L1985.86 1212.42 L1986.45 1212.42 L1987.03 1212.42 L1987.62 1212.42 L1988.2 1212.42 L1988.79 1212.42 L1989.38 1212.42 L1989.96 1212.42 L1990.55 1212.42 L1991.14 1212.42 L1991.72 1212.42 L1992.31 1212.42 L1992.9 1212.42 L1993.48 1212.42 L1994.07 1212.42 L1994.65 1212.42 L1995.24 1212.42 L1995.83 1212.42 L1996.41 1212.42 L1997 1212.42 L1997.59 1212.42 L1998.17 1212.42 L1998.76 1212.42 L1999.35 1212.42 L1999.93 1212.42 L2000.52 1212.42 L2001.11 1212.42 L2001.69 1212.42 L2002.28 1212.42 L2002.86 1212.42 L2003.45 1212.42 L2004.04 1212.42 L2004.62 1212.42 L2005.21 1212.42 L2005.8 1212.42 L2006.38 1212.42 L2006.97 1212.42 L2007.56 1212.42 L2008.14 1212.42 L2008.73 1212.42 L2009.32 1212.42 L2009.9 1212.42 L2010.49 1212.42 L2011.07 1212.42 L2011.66 1212.42 L2012.25 1212.42 L2012.83 1212.42 L2013.42 1212.42 L2014.01 1212.42 L2014.59 1212.42 L2015.18 1212.42 L2015.77 1212.42 L2016.35 1212.42 L2016.94 1212.42 L2017.53 1212.42 L2018.11 1212.42 L2018.7 1212.42 L2019.28 1212.42 L2019.87 1212.42 L2020.46 1212.42 L2021.04 1212.42 L2021.63 1212.42 L2022.22 1212.42 L2022.8 1212.42 L2023.39 1212.42 L2023.98 1212.42 L2024.56 1212.42 L2025.15 1212.42 L2025.73 1212.42 L2026.32 1212.42 L2026.91 1212.42 L2027.49 1212.42 L2028.08 1212.42 L2028.67 1212.42 L2029.25 1212.42 L2029.84 1212.42 L2030.43 1212.42 L2031.01 1212.42 L2031.6 1212.42 L2032.19 1212.42 L2032.77 1212.42 L2033.36 1212.42 L2033.94 1212.42 L2034.53 1212.42 L2035.12 1212.42 L2035.7 1212.42 L2036.29 1212.42 L2036.88 1212.42 L2037.46 1212.42 L2038.05 1212.42 L2038.64 1212.42 L2039.22 1212.42 L2039.81 1212.42 L2040.4 1212.42 L2040.98 1212.42 L2041.57 1212.42 L2042.15 1212.42 L2042.74 1212.42 L2043.33 1212.42 L2043.91 1212.42 L2044.5 1212.42 L2045.09 1212.42 L2045.67 1212.42 L2046.26 1212.42 L2046.85 1212.42 L2047.43 1212.42 L2048.02 1212.42 L2048.6 1212.42 L2049.19 1212.42 L2049.78 1212.42 L2050.36 1212.42 L2050.95 1212.42 L2051.54 1212.42 L2052.12 1212.42 L2052.71 1212.42 L2053.3 1212.42 L2053.88 1212.42 L2054.47 1212.42 L2055.06 1212.42 L2055.64 1212.42 L2056.23 1212.42 L2056.81 1212.42 L2057.4 1212.42 L2057.99 1212.42 L2058.57 1212.42 L2059.16 1212.42 L2059.75 1212.42 L2060.33 1212.42 L2060.92 1212.42 L2061.51 1212.42 L2062.09 1212.42 L2062.68 1212.42 L2063.27 1212.42 L2063.85 1212.42 L2064.44 1212.42 L2065.02 1212.42 L2065.61 1212.42 L2066.2 1212.42 L2066.78 1212.42 L2067.37 1212.42 L2067.96 1212.42 L2068.54 1212.42 L2069.13 1212.42 L2069.72 1212.42 L2070.3 1212.42 L2070.89 1212.42 L2071.48 1212.42 L2072.06 1212.42 L2072.65 1212.42 L2073.23 1212.42 L2073.82 1212.42 L2074.41 1212.42 L2074.99 1212.42 L2075.58 1212.42 L2076.17 1212.42 L2076.75 1212.42 L2077.34 1212.42 L2077.93 1212.42 L2078.51 1212.42 L2079.1 1212.42 L2079.68 1212.42 L2080.27 1212.42 L2080.86 1212.42 L2081.44 1212.42 L2082.03 1212.42 L2082.62 1212.42 L2083.2 1212.42 L2083.79 1212.42 L2084.38 1212.42 L2084.96 1212.42 L2085.55 1212.42 L2086.14 1212.42 L2086.72 1212.42 L2087.31 1212.42 L2087.89 1212.42 L2088.48 1212.42 L2089.07 1212.42 L2089.65 1212.42 L2090.24 1212.42 L2090.83 1212.42 L2091.41 1212.42 L2092 1212.42 L2092.59 1212.42 L2093.17 1212.42 L2093.76 1212.42 L2094.35 1212.42 L2094.93 1212.42 L2095.52 1212.42 L2096.1 1212.42 L2096.69 1212.42 L2097.28 1212.42 L2097.86 1212.42 L2098.45 1212.42 L2099.04 1212.42 L2099.62 1212.42 L2100.21 1212.42 L2100.8 1212.42 L2101.38 1212.42 L2101.97 1212.42 L2102.55 1212.42 L2103.14 1212.42 L2103.73 1212.42 L2104.31 1212.42 L2104.9 1212.42 L2105.49 1212.42 L2106.07 1212.42 L2106.66 1212.42 L2107.25 1212.42 L2107.83 1212.42 L2108.42 1212.42 L2109.01 1212.42 L2109.59 1212.42 L2110.18 1212.42 L2110.76 1212.42 L2111.35 1212.42 L2111.94 1212.42 L2112.52 1212.42 L2113.11 1212.42 L2113.7 1212.42 L2114.28 1212.42 L2114.87 1212.42 L2115.46 1212.42 L2116.04 1212.42 L2116.63 1212.42 L2117.22 1212.42 L2117.8 1212.42 L2118.39 1212.42 L2118.97 1212.42 L2119.56 1212.42 L2120.15 1212.42 L2120.73 1212.42 L2121.32 1212.42 L2121.91 1212.42 L2122.49 1212.42 L2123.08 1212.42 L2123.67 1212.42 L2124.25 1212.42 L2124.84 1212.42 L2125.42 1212.42 L2126.01 1212.42 L2126.6 1212.42 L2127.18 1212.42 L2127.77 1212.42 L2128.36 1212.42 L2128.94 1212.42 L2129.53 1212.42 L2130.12 1212.42 L2130.7 1212.42 L2131.29 1212.42 L2131.88 1212.42 L2132.46 1212.42 L2133.05 1212.42 L2133.63 1212.42 L2134.22 1212.42 L2134.81 1212.42 L2135.39 1212.42 L2135.98 1212.42 L2136.57 1212.42 L2137.15 1212.42 L2137.74 1212.42 L2138.33 1212.42 L2138.91 1212.42 L2139.5 1212.42 L2140.09 1212.42 L2140.67 1212.42 L2141.26 1212.42 L2141.84 1212.42 L2142.43 1212.42 L2143.02 1212.42 L2143.6 1212.42 L2144.19 1212.42 L2144.78 1212.42 L2145.36 1212.42 L2145.95 1212.42 L2146.54 1212.42 L2147.12 1212.42 L2147.71 1212.42 L2148.3 1212.42 L2148.88 1212.42 L2149.47 1212.42 L2150.05 1212.42 L2150.64 1212.42 L2151.23 1212.42 L2151.81 1212.42 L2152.4 1212.42 L2152.99 1212.42 L2153.57 1212.42 L2154.16 1212.42 L2154.75 1212.42 L2155.33 1212.42 L2155.92 1212.42 L2156.5 1212.42 L2157.09 1212.42 L2157.68 1212.42 L2158.26 1212.42 L2158.26 1211.65 L2157.68 1211.65 L2157.09 1211.65 L2156.5 1211.65 L2155.92 1211.65 L2155.33 1211.65 L2154.75 1211.65 L2154.16 1211.65 L2153.57 1211.65 L2152.99 1211.65 L2152.4 1211.65 L2151.81 1211.65 L2151.23 1211.65 L2150.64 1211.65 L2150.05 1211.65 L2149.47 1211.65 L2148.88 1211.65 L2148.3 1211.65 L2147.71 1211.65 L2147.12 1211.65 L2146.54 1211.65 L2145.95 1211.65 L2145.36 1211.65 L2144.78 1211.65 L2144.19 1211.65 L2143.6 1211.65 L2143.02 1211.65 L2142.43 1211.65 L2141.84 1211.65 L2141.26 1211.65 L2140.67 1211.65 L2140.09 1211.65 L2139.5 1211.65 L2138.91 1211.65 L2138.33 1211.65 L2137.74 1211.65 L2137.15 1211.65 L2136.57 1211.65 L2135.98 1211.65 L2135.39 1211.65 L2134.81 1211.65 L2134.22 1211.65 L2133.63 1211.65 L2133.05 1211.65 L2132.46 1211.65 L2131.88 1211.65 L2131.29 1211.65 L2130.7 1211.65 L2130.12 1211.65 L2129.53 1211.65 L2128.94 1211.65 L2128.36 1211.65 L2127.77 1211.65 L2127.18 1211.65 L2126.6 1211.65 L2126.01 1211.65 L2125.42 1211.65 L2124.84 1211.65 L2124.25 1211.65 L2123.67 1211.65 L2123.08 1211.65 L2122.49 1211.65 L2121.91 1211.65 L2121.32 1211.65 L2120.73 1211.65 L2120.15 1211.65 L2119.56 1211.65 L2118.97 1211.65 L2118.39 1211.65 L2117.8 1211.65 L2117.22 1211.65 L2116.63 1211.65 L2116.04 1211.65 L2115.46 1211.65 L2114.87 1211.65 L2114.28 1211.65 L2113.7 1211.65 L2113.11 1211.65 L2112.52 1211.65 L2111.94 1211.65 L2111.35 1211.65 L2110.76 1211.65 L2110.18 1211.65 L2109.59 1211.65 L2109.01 1211.65 L2108.42 1211.65 L2107.83 1211.65 L2107.25 1211.65 L2106.66 1211.65 L2106.07 1211.65 L2105.49 1211.65 L2104.9 1211.65 L2104.31 1211.65 L2103.73 1211.65 L2103.14 1211.65 L2102.55 1211.65 L2101.97 1211.65 L2101.38 1211.65 L2100.8 1211.65 L2100.21 1211.65 L2099.62 1211.65 L2099.04 1211.65 L2098.45 1211.65 L2097.86 1211.65 L2097.28 1211.65 L2096.69 1211.65 L2096.1 1211.65 L2095.52 1211.65 L2094.93 1211.65 L2094.35 1211.65 L2093.76 1211.65 L2093.17 1211.65 L2092.59 1211.65 L2092 1211.65 L2091.41 1211.65 L2090.83 1211.65 L2090.24 1211.65 L2089.65 1211.65 L2089.07 1211.65 L2088.48 1211.65 L2087.89 1211.65 L2087.31 1211.65 L2086.72 1211.65 L2086.14 1211.65 L2085.55 1211.65 L2084.96 1211.65 L2084.38 1211.65 L2083.79 1211.65 L2083.2 1211.65 L2082.62 1211.65 L2082.03 1211.65 L2081.44 1211.65 L2080.86 1211.65 L2080.27 1211.65 L2079.68 1211.65 L2079.1 1211.65 L2078.51 1211.65 L2077.93 1211.65 L2077.34 1211.65 L2076.75 1211.65 L2076.17 1211.65 L2075.58 1211.65 L2074.99 1211.65 L2074.41 1211.65 L2073.82 1211.65 L2073.23 1211.65 L2072.65 1211.65 L2072.06 1211.65 L2071.48 1211.65 L2070.89 1211.65 L2070.3 1211.65 L2069.72 1211.65 L2069.13 1211.65 L2068.54 1211.65 L2067.96 1211.65 L2067.37 1211.65 L2066.78 1211.65 L2066.2 1211.65 L2065.61 1211.65 L2065.02 1211.65 L2064.44 1211.65 L2063.85 1211.65 L2063.27 1211.65 L2062.68 1211.65 L2062.09 1211.65 L2061.51 1211.65 L2060.92 1211.65 L2060.33 1211.65 L2059.75 1211.65 L2059.16 1211.65 L2058.57 1211.65 L2057.99 1211.65 L2057.4 1211.65 L2056.81 1211.65 L2056.23 1211.65 L2055.64 1211.65 L2055.06 1211.65 L2054.47 1211.65 L2053.88 1211.65 L2053.3 1211.65 L2052.71 1211.65 L2052.12 1211.65 L2051.54 1211.65 L2050.95 1211.65 L2050.36 1211.65 L2049.78 1211.65 L2049.19 1211.65 L2048.6 1211.65 L2048.02 1211.65 L2047.43 1211.65 L2046.85 1211.65 L2046.26 1211.65 L2045.67 1211.65 L2045.09 1211.65 L2044.5 1211.65 L2043.91 1211.65 L2043.33 1211.65 L2042.74 1211.65 L2042.15 1211.65 L2041.57 1211.65 L2040.98 1211.65 L2040.4 1211.65 L2039.81 1211.65 L2039.22 1211.65 L2038.64 1211.65 L2038.05 1211.65 L2037.46 1211.65 L2036.88 1211.65 L2036.29 1211.65 L2035.7 1211.65 L2035.12 1211.65 L2034.53 1211.65 L2033.94 1211.65 L2033.36 1211.65 L2032.77 1211.65 L2032.19 1211.65 L2031.6 1211.65 L2031.01 1211.65 L2030.43 1211.65 L2029.84 1211.65 L2029.25 1211.65 L2028.67 1211.65 L2028.08 1211.65 L2027.49 1211.65 L2026.91 1211.65 L2026.32 1211.65 L2025.73 1211.65 L2025.15 1211.65 L2024.56 1211.65 L2023.98 1211.65 L2023.39 1211.65 L2022.8 1211.65 L2022.22 1211.65 L2021.63 1211.65 L2021.04 1211.65 L2020.46 1211.65 L2019.87 1211.65 L2019.28 1211.65 L2018.7 1211.65 L2018.11 1211.65 L2017.53 1211.65 L2016.94 1211.65 L2016.35 1211.65 L2015.77 1211.65 L2015.18 1211.65 L2014.59 1211.65 L2014.01 1211.65 L2013.42 1211.65 L2012.83 1211.65 L2012.25 1211.65 L2011.66 1211.65 L2011.07 1211.65 L2010.49 1211.65 L2009.9 1211.65 L2009.32 1211.65 L2008.73 1211.65 L2008.14 1211.65 L2007.56 1211.65 L2006.97 1211.65 L2006.38 1211.65 L2005.8 1211.65 L2005.21 1211.65 L2004.62 1211.65 L2004.04 1211.65 L2003.45 1211.65 L2002.86 1211.65 L2002.28 1211.65 L2001.69 1211.65 L2001.11 1211.65 L2000.52 1211.65 L1999.93 1211.65 L1999.35 1211.65 L1998.76 1211.65 L1998.17 1211.65 L1997.59 1211.65 L1997 1211.65 L1996.41 1211.65 L1995.83 1211.65 L1995.24 1211.65 L1994.65 1211.65 L1994.07 1211.65 L1993.48 1211.65 L1992.9 1211.65 L1992.31 1211.65 L1991.72 1211.65 L1991.14 1211.65 L1990.55 1211.65 L1989.96 1211.65 L1989.38 1211.65 L1988.79 1211.65 L1988.2 1211.65 L1987.62 1211.65 L1987.03 1211.65 L1986.45 1211.65 L1985.86 1211.65 L1985.27 1211.65 L1984.69 1211.65 L1984.1 1211.65 L1983.51 1211.65 L1982.93 1211.65 L1982.34 1211.65 L1981.75 1211.65 L1981.17 1211.65 L1980.58 1211.65 L1979.99 1211.65 L1979.41 1211.65 L1978.82 1211.65 L1978.24 1211.65 L1977.65 1211.65 L1977.06 1211.65 L1976.48 1211.65 L1975.89 1211.65 L1975.3 1211.65 L1974.72 1211.65 L1974.13 1211.65 L1973.54 1211.65 L1972.96 1211.65 L1972.37 1211.65 L1971.78 1211.65 L1971.2 1211.65 L1970.61 1211.65 L1970.03 1211.65 L1969.44 1211.65 L1968.85 1211.65 L1968.27 1211.65 L1967.68 1211.65 L1967.09 1211.65 L1966.51 1211.65 L1965.92 1211.65 L1965.33 1211.65 L1964.75 1211.65 L1964.16 1211.65 L1963.58 1211.65 L1962.99 1211.65 L1962.4 1211.65 L1961.82 1211.65 L1961.23 1211.65 L1960.64 1211.65 L1960.06 1211.65 L1959.47 1211.65 L1958.88 1211.65 L1958.3 1211.65 L1957.71 1211.65 L1957.12 1211.65 L1956.54 1211.65 L1955.95 1211.65 L1955.37 1211.65 L1954.78 1211.65 L1954.19 1211.65 L1953.61 1211.65 L1953.02 1211.65 L1952.43 1211.65 L1951.85 1211.65 L1951.26 1211.65 L1950.67 1211.65 L1950.09 1211.65 L1949.5 1211.65 L1948.91 1211.65 L1948.33 1211.65 L1947.74 1211.65 L1947.16 1211.65 L1946.57 1211.65 L1945.98 1211.65 L1945.4 1211.65 L1944.81 1211.65 L1944.22 1211.65 L1943.64 1211.65 L1943.05 1211.65 L1942.46 1211.65 L1941.88 1211.65 L1941.29 1211.65 L1940.71 1211.65 L1940.12 1211.65 L1939.53 1211.65 L1938.95 1211.65 L1938.36 1211.65 L1937.77 1211.65 L1937.19 1211.65 L1936.6 1211.65 L1936.01 1211.65 L1935.43 1211.65 L1934.84 1211.65 L1934.25 1211.65 L1933.67 1211.65 L1933.08 1211.65 L1932.5 1211.65 L1931.91 1211.65 L1931.32 1211.65 L1930.74 1211.65 L1930.15 1211.65 L1929.56 1211.65 L1928.98 1211.65 L1928.39 1211.65 L1927.8 1211.65 L1927.22 1211.65 L1926.63 1211.65 L1926.04 1211.65 L1925.46 1211.65 L1924.87 1211.65 L1924.29 1211.65 L1923.7 1211.65 L1923.11 1211.65 L1922.53 1211.65 L1921.94 1211.65 L1921.35 1211.65 L1920.77 1211.65 L1920.18 1211.65 L1919.59 1211.65 L1919.01 1211.65 L1918.42 1211.65 L1917.83 1211.65 L1917.25 1211.65 L1916.66 1211.65 L1916.08 1211.65 L1915.49 1211.65 L1914.9 1211.65 L1914.32 1211.65 L1913.73 1211.65 L1913.14 1211.65 L1912.56 1211.65 L1911.97 1211.65 L1911.38 1211.65 L1910.8 1211.65 L1910.21 1211.65 L1909.63 1211.65 L1909.04 1211.65 L1908.45 1211.65 L1907.87 1211.65 L1907.28 1211.65 L1906.69 1211.65 L1906.11 1211.65 L1905.52 1211.65 L1904.93 1211.65 L1904.35 1211.65 L1903.76 1211.65 L1903.17 1211.65 L1902.59 1211.65 L1902 1211.65 L1901.42 1211.65 L1900.83 1211.65 L1900.24 1211.65 L1899.66 1211.65 L1899.07 1211.65 L1898.48 1211.65 L1897.9 1211.65 L1897.31 1211.65 L1896.72 1211.65 L1896.14 1211.65 L1895.55 1211.65 L1894.96 1211.65 L1894.38 1211.65 L1893.79 1211.65 L1893.21 1211.65 L1892.62 1211.65 L1892.03 1211.65 L1891.45 1211.65 L1890.86 1211.65 L1890.27 1211.65 L1889.69 1211.65 L1889.1 1211.65 L1888.51 1211.65 L1887.93 1211.65 L1887.34 1211.65 L1886.76 1211.65 L1886.17 1211.65 L1885.58 1211.65 L1885 1211.65 L1884.41 1211.65 L1883.82 1211.65 L1883.24 1211.65 L1882.65 1211.65 L1882.06 1211.65 L1881.48 1211.65 L1880.89 1211.65 L1880.3 1211.65 L1879.72 1211.65 L1879.13 1211.65 L1878.55 1211.65 L1877.96 1211.65 L1877.37 1211.65 L1876.79 1211.65 L1876.2 1211.65 L1875.61 1211.65 L1875.03 1211.65 L1874.44 1211.65 L1873.85 1211.65 L1873.27 1211.65 L1872.68 1211.65 L1872.09 1211.65 L1871.51 1211.65 L1870.92 1211.65 L1870.34 1211.65 L1869.75 1211.65 L1869.16 1211.65 L1868.58 1211.65 L1867.99 1211.65 L1867.4 1211.65 L1866.82 1211.65 L1866.23 1211.65 L1865.64 1211.65 L1865.06 1211.65 L1864.47 1211.65 L1863.88 1211.65 L1863.3 1211.65 L1862.71 1211.65 L1862.13 1211.65 L1861.54 1211.65 L1860.95 1211.65 L1860.37 1211.65 L1859.78 1211.65 L1859.19 1211.65 L1858.61 1211.65 L1858.02 1211.65 L1857.43 1211.65 L1856.85 1211.65 L1856.26 1211.65 L1855.68 1211.65 L1855.09 1211.65 L1854.5 1211.65 L1853.92 1211.65 L1853.33 1211.65 L1852.74 1211.65 L1852.16 1211.65 L1851.57 1211.65 L1850.98 1211.65 L1850.4 1211.65 L1849.81 1211.65 L1849.22 1211.65 L1848.64 1211.65 L1848.05 1211.65 L1847.47 1211.65 L1846.88 1211.65 L1846.29 1211.65 L1845.71 1211.65 L1845.12 1211.65 L1844.53 1211.65 L1843.95 1211.65 L1843.36 1211.65 L1842.77 1211.65 L1842.19 1211.65 L1841.6 1211.65 L1841.01 1211.65 L1840.43 1211.65 L1839.84 1211.65 L1839.26 1211.65 L1838.67 1211.65 L1838.08 1211.65 L1837.5 1211.65 L1836.91 1211.65 L1836.32 1211.65 L1835.74 1211.65 L1835.15 1211.65 L1834.56 1211.65 L1833.98 1211.65 L1833.39 1211.65 L1832.81 1211.65 L1832.22 1211.65 L1831.63 1211.65 L1831.05 1211.65 L1830.46 1211.65 L1829.87 1211.65 L1829.29 1211.65 L1828.7 1211.65 L1828.11 1211.65 L1827.53 1211.65 L1826.94 1211.65 L1826.35 1211.65 L1825.77 1211.65 L1825.18 1211.65 L1824.6 1211.65 L1824.01 1211.65 L1823.42 1211.65 L1822.84 1211.65 L1822.25 1211.65 L1821.66 1211.65 L1821.08 1211.65 L1820.49 1211.65 L1819.9 1211.65 L1819.32 1211.65 L1818.73 1211.65 L1818.14 1211.65 L1817.56 1211.65 L1816.97 1211.65 L1816.39 1211.65 L1815.8 1211.65 L1815.21 1211.65 L1814.63 1211.65 L1814.04 1211.65 L1813.45 1211.65 L1812.87 1211.65 L1812.28 1211.65 L1811.69 1211.65 L1811.11 1211.65 L1810.52 1211.65 L1809.94 1211.65 L1809.35 1211.65 L1808.76 1211.65 L1808.18 1211.65 L1807.59 1211.65 L1807 1211.65 L1806.42 1211.65 L1805.83 1211.65 L1805.24 1211.65 L1804.66 1211.65 L1804.07 1211.65 L1803.48 1211.65 L1802.9 1211.65 L1802.31 1211.65 L1801.73 1211.65 L1801.14 1211.65 L1800.55 1211.65 L1799.97 1211.65 L1799.38 1211.65 L1798.79 1211.65 L1798.21 1211.65 L1797.62 1211.65 L1797.03 1211.65 L1796.45 1211.65 L1795.86 1211.65 L1795.27 1211.65 L1794.69 1211.65 L1794.1 1211.65 L1793.52 1211.65 L1792.93 1211.65 L1792.34 1211.65 L1791.76 1211.65 L1791.17 1211.65 L1790.58 1211.65 L1790 1211.65 L1789.41 1211.65 L1788.82 1211.65 L1788.24 1211.65 L1787.65 1211.65 L1787.06 1211.65 L1786.48 1211.65 L1785.89 1211.65 L1785.31 1211.65 L1784.72 1211.65 L1784.13 1211.65 L1783.55 1211.65 L1782.96 1211.65 L1782.37 1211.65 L1781.79 1211.65 L1781.2 1211.65 L1780.61 1211.65 L1780.03 1211.65 L1779.44 1211.65 L1778.86 1211.65 L1778.27 1211.65 L1777.68 1211.65 L1777.1 1211.65 L1776.51 1211.65 L1775.92 1211.65 L1775.34 1211.65 L1774.75 1211.65 L1774.16 1211.65 L1773.58 1211.65 L1772.99 1211.65 L1772.4 1211.65 L1771.82 1211.65 L1771.23 1211.65 L1770.65 1211.65 L1770.06 1211.65 L1769.47 1211.65 L1768.89 1211.65 L1768.3 1211.65 L1767.71 1211.65 L1767.13 1211.65 L1766.54 1211.65 L1765.95 1211.65 L1765.37 1211.65 L1764.78 1211.65 L1764.19 1211.65 L1763.61 1211.65 L1763.02 1211.65 L1762.44 1211.65 L1761.85 1211.65 L1761.26 1211.65 L1760.68 1211.65 L1760.09 1211.65 L1759.5 1211.65 L1758.92 1211.65 L1758.33 1211.65 L1757.74 1211.65 L1757.16 1211.65 L1756.57 1211.65 L1755.99 1211.65 L1755.4 1211.65 L1754.81 1211.65 L1754.23 1211.65 L1753.64 1211.65 L1753.05 1211.65 L1752.47 1211.65 L1751.88 1211.65 L1751.29 1211.65 L1750.71 1211.65 L1750.12 1211.65 L1749.53 1211.65 L1748.95 1211.65 L1748.36 1211.65 L1747.78 1211.65 L1747.19 1211.65 L1746.6 1211.65 L1746.02 1211.65 L1745.43 1211.65 L1744.84 1211.65 L1744.26 1211.65 L1743.67 1211.65 L1743.08 1211.65 L1742.5 1211.65 L1741.91 1211.65 L1741.32 1211.65 L1740.74 1211.65 L1740.15 1211.65 L1739.57 1211.65 L1738.98 1211.65 L1738.39 1211.65 L1737.81 1211.65 L1737.22 1211.65 L1736.63 1211.65 L1736.05 1211.65 L1735.46 1211.65 L1734.87 1211.65 L1734.29 1211.65 L1733.7 1211.65 L1733.11 1211.65 L1732.53 1211.65 L1731.94 1211.65 L1731.36 1211.65 L1730.77 1211.65 L1730.18 1211.65 L1729.6 1211.65 L1729.01 1211.65 L1728.42 1211.65 L1727.84 1211.65 L1727.25 1211.65 L1726.66 1211.65 L1726.08 1211.65 L1725.49 1211.65 L1724.91 1211.65 L1724.32 1211.65 L1723.73 1211.65 L1723.15 1211.65 L1722.56 1211.65 L1721.97 1211.65 L1721.39 1211.65 L1720.8 1211.65 L1720.21 1211.65 L1719.63 1211.65 L1719.04 1211.65 L1718.45 1211.65 L1717.87 1211.65 L1717.28 1211.65 L1716.7 1211.65 L1716.11 1211.65 L1715.52 1211.65 L1714.94 1211.65 L1714.35 1211.65 L1713.76 1211.65 L1713.18 1211.65 L1712.59 1211.65 L1712 1211.65 L1711.42 1211.65 L1710.83 1211.65 L1710.24 1211.65 L1709.66 1211.65 L1709.07 1211.65 L1708.49 1211.65 L1707.9 1211.65 L1707.31 1211.65 L1706.73 1211.65 L1706.14 1211.65 L1705.55 1211.65 L1704.97 1211.65 L1704.38 1211.65 L1703.79 1211.65 L1703.21 1211.65 L1702.62 1211.65 L1702.04 1211.65 L1701.45 1211.65 L1700.86 1211.65 L1700.28 1211.65 L1699.69 1211.65 L1699.1 1211.65 L1698.52 1211.65 L1697.93 1211.65 L1697.34 1211.65 L1696.76 1211.65 L1696.17 1211.65 L1695.58 1211.65 L1695 1211.65 L1694.41 1211.65 L1693.83 1211.65 L1693.24 1211.65 L1692.65 1211.65 L1692.07 1211.65 L1691.48 1211.65 L1690.89 1211.65 L1690.31 1211.65 L1689.72 1211.65 L1689.13 1211.65 L1688.55 1211.65 L1687.96 1211.65 L1687.37 1211.65 L1686.79 1211.65 L1686.2 1211.65 L1685.62 1211.65 L1685.03 1211.65 L1684.44 1211.65 L1683.86 1211.65 L1683.27 1211.65 L1682.68 1211.65 L1682.1 1211.65 L1681.51 1211.65 L1680.92 1211.65 L1680.34 1211.65 L1679.75 1211.65 L1679.17 1211.65 L1678.58 1211.65 L1677.99 1211.65 L1677.41 1211.65 L1676.82 1211.65 L1676.23 1211.65 L1675.65 1211.65 L1675.06 1211.65 L1674.47 1211.65 L1673.89 1211.65 L1673.3 1211.65 L1672.71 1211.65 L1672.13 1211.65 L1671.54 1211.65 L1670.96 1211.65 L1670.37 1211.65 L1669.78 1211.65 L1669.2 1211.65 L1668.61 1211.65 L1668.02 1211.65 L1667.44 1211.65 L1666.85 1211.65 L1666.26 1211.65 L1665.68 1211.65 L1665.09 1211.65 L1664.5 1211.65 L1663.92 1211.65 L1663.33 1211.65 L1662.75 1211.65 L1662.16 1211.65 L1661.57 1211.65 L1660.99 1211.65 L1660.4 1211.65 L1659.81 1211.65 L1659.23 1211.65 L1658.64 1211.65 L1658.05 1211.65 L1657.47 1211.65 L1656.88 1211.65 L1656.29 1211.65 L1655.71 1211.65 L1655.12 1211.65 L1654.54 1211.65 L1653.95 1211.65 L1653.36 1211.65 L1652.78 1211.65 L1652.19 1211.65 L1651.6 1211.65 L1651.02 1211.65 L1650.43 1211.65 L1649.84 1211.65 L1649.26 1211.65 L1648.67 1211.65 L1648.09 1211.65 L1647.5 1211.65 L1646.91 1211.65 L1646.33 1211.65 L1645.74 1211.65 L1645.15 1211.65 L1644.57 1211.65 L1643.98 1211.65 L1643.39 1211.65 L1642.81 1211.65 L1642.22 1211.65 L1641.63 1211.65 L1641.05 1211.65 L1640.46 1211.65 L1639.88 1211.65 L1639.29 1211.65 L1638.7 1211.65 L1638.12 1211.65 L1637.53 1211.65 L1636.94 1211.65 L1636.36 1211.65 L1635.77 1211.65 L1635.18 1211.65 L1634.6 1211.65 L1634.01 1211.65 L1633.42 1211.65 L1632.84 1211.65 L1632.25 1211.65 L1631.67 1211.65 L1631.08 1211.65 L1630.49 1211.65 L1629.91 1211.65 L1629.32 1211.65 L1628.73 1211.65 L1628.15 1211.65 L1627.56 1211.65 L1626.97 1211.65 L1626.39 1211.65 L1625.8 1211.65 L1625.22 1211.65 L1624.63 1211.65 L1624.04 1211.65 L1623.46 1211.65 L1622.87 1211.65 L1622.28 1211.65 L1621.7 1211.65 L1621.11 1211.65 L1620.52 1211.65 L1619.94 1211.65 L1619.35 1211.65 L1618.76 1211.65 L1618.18 1211.65 L1617.59 1211.65 L1617.01 1211.65 L1616.42 1211.65 L1615.83 1211.65 L1615.25 1211.65 L1614.66 1211.65 L1614.07 1211.65 L1613.49 1211.65 L1612.9 1211.65 L1612.31 1211.65 L1611.73 1211.65 L1611.14 1211.65 L1610.55 1211.65 L1609.97 1211.65 L1609.38 1211.65 L1608.8 1211.65 L1608.21 1211.65 L1607.62 1211.65 L1607.04 1211.65 L1606.45 1211.65 L1605.86 1211.65 L1605.28 1211.65 L1604.69 1211.65 L1604.1 1211.65 L1603.52 1211.65 L1602.93 1211.65 L1602.34 1211.65 L1601.76 1211.65 L1601.17 1211.65 L1600.59 1211.65 L1600 1211.65 L1599.41 1211.65 L1598.83 1211.65 L1598.24 1211.65 L1597.65 1211.65 L1597.07 1211.65 L1596.48 1211.65 L1595.89 1211.65 L1595.31 1211.65 L1594.72 1211.65 L1594.14 1211.65 L1593.55 1211.65 L1592.96 1211.65 L1592.38 1211.65 L1591.79 1211.65 L1591.2 1211.65 L1590.62 1211.65 L1590.03 1211.65 L1589.44 1211.65 L1588.86 1211.65 L1588.27 1211.65 L1587.68 1211.65 L1587.1 1211.65 L1586.51 1211.65 L1585.93 1211.65 L1585.34 1211.65 L1584.75 1211.65 L1584.17 1211.65 L1583.58 1211.65 L1582.99 1211.65 L1582.41 1211.65 L1581.82 1211.65 L1581.23 1211.65 L1580.65 1211.65 L1580.06 1211.65 L1579.47 1211.65 L1578.89 1211.65 L1578.3 1211.65 L1577.72 1211.65 L1577.13 1211.65 L1576.54 1211.65 L1575.96 1211.65 L1575.37 1211.65 L1574.78 1211.65 L1574.2 1211.65 L1573.61 1211.65 L1573.02 1211.65 L1572.44 1211.65 L1571.85 1211.65 L1571.27 1211.65 L1570.68 1211.65 L1570.09 1211.65 L1569.51 1211.65 L1568.92 1211.65 L1568.33 1211.65 L1567.75 1211.65 L1567.16 1211.65 L1566.57 1211.65 L1565.99 1211.65 L1565.4 1211.65 L1564.81 1211.65 L1564.23 1211.65 L1563.64 1211.65 L1563.06 1211.65 L1562.47 1211.65 L1561.88 1211.65 L1561.3 1211.65 L1560.71 1211.65 L1560.12 1211.65 L1559.54 1211.65 L1558.95 1211.65 L1558.36 1211.65 L1557.78 1211.65 L1557.19 1211.65 L1556.6 1211.65 L1556.02 1211.65 L1555.43 1211.65 L1554.85 1211.65 L1554.26 1211.65 L1553.67 1211.65 L1553.09 1211.65 L1552.5 1211.65 L1551.91 1211.65 L1551.33 1211.65 L1550.74 1211.65 L1550.15 1211.65 L1549.57 1211.65 L1548.98 1211.65 L1548.4 1211.65 L1547.81 1211.65 L1547.22 1211.65 L1546.64 1211.65 L1546.05 1211.65 L1545.46 1211.65 L1544.88 1211.65 L1544.29 1211.65 L1543.7 1211.65 L1543.12 1211.65 L1542.53 1211.65 L1541.94 1211.65 L1541.36 1211.65 L1540.77 1211.65 L1540.19 1211.65 L1539.6 1211.65 L1539.01 1211.65 L1538.43 1211.65 L1537.84 1211.65 L1537.25 1211.65 L1536.67 1211.65 L1536.08 1211.65 L1535.49 1211.65 L1534.91 1211.65 L1534.32 1211.65 L1533.73 1211.65 L1533.15 1211.65 L1532.56 1211.65 L1531.98 1211.65 L1531.39 1211.65 L1530.8 1211.65 L1530.22 1211.65 L1529.63 1211.65 L1529.04 1211.65 L1528.46 1211.65 L1527.87 1211.65 L1527.28 1211.65 L1526.7 1211.65 L1526.11 1211.65 L1525.52 1211.65 L1524.94 1211.65 L1524.35 1211.65 L1523.77 1211.65 L1523.18 1211.65 L1522.59 1211.65 L1522.01 1211.65 L1521.42 1211.65 L1520.83 1211.65 L1520.25 1211.65 L1519.66 1211.65 L1519.07 1211.65 L1518.49 1211.65 L1517.9 1211.65 L1517.32 1211.65 L1516.73 1211.65 L1516.14 1211.65 L1515.56 1211.65 L1514.97 1211.65 L1514.38 1211.65 L1513.8 1211.65 L1513.21 1211.65 L1512.62 1211.65 L1512.04 1211.65 L1511.45 1211.65 L1510.86 1211.65 L1510.28 1211.65 L1509.69 1211.65 L1509.11 1211.65 L1508.52 1211.65 L1507.93 1211.65 L1507.35 1211.65 L1506.76 1211.65 L1506.17 1211.65 L1505.59 1211.65 L1505 1211.65 L1504.41 1211.65 L1503.83 1211.65 L1503.24 1211.65 L1502.65 1211.65 L1502.07 1211.65 L1501.48 1211.65 L1500.9 1211.65 L1500.31 1211.65 L1499.72 1211.65 L1499.14 1211.65 L1498.55 1211.65 L1497.96 1211.65 L1497.38 1211.65 L1496.79 1211.65 L1496.2 1211.65 L1495.62 1211.65 L1495.03 1211.65 L1494.45 1211.65 L1493.86 1211.65 L1493.27 1211.65 L1492.69 1211.65 L1492.1 1211.65 L1491.51 1211.65 L1490.93 1211.65 L1490.34 1211.65 L1489.75 1211.65 L1489.17 1211.65 L1488.58 1211.65 L1487.99 1211.65 L1487.41 1211.65 L1486.82 1211.65 L1486.24 1211.65 L1485.65 1211.65 L1485.06 1211.65 L1484.48 1211.65 L1483.89 1211.65 L1483.3 1211.65 L1482.72 1211.65 L1482.13 1211.65 L1481.54 1211.65 L1480.96 1211.65 L1480.37 1211.65 L1479.78 1211.65 L1479.2 1211.65 L1478.61 1211.65 L1478.03 1211.65 L1477.44 1211.65 L1476.85 1211.65 L1476.27 1211.65 L1475.68 1211.65 L1475.09 1211.65 L1474.51 1211.65 L1473.92 1211.65 L1473.33 1211.65 L1472.75 1211.65 L1472.16 1211.65 L1471.57 1211.65 L1470.99 1211.65 L1470.4 1211.65 L1469.82 1211.65 L1469.23 1211.65 L1468.64 1211.65 L1468.06 1211.65 L1467.47 1211.65 L1466.88 1211.65 L1466.3 1211.65 L1465.71 1211.65 L1465.12 1211.65 L1464.54 1211.65 L1463.95 1211.65 L1463.37 1211.65 L1462.78 1211.65 L1462.19 1211.65 L1461.61 1211.65 L1461.02 1211.65 L1460.43 1211.65 L1459.85 1211.65 L1459.26 1211.65 L1458.67 1211.65 L1458.09 1211.65 L1457.5 1211.65 L1456.91 1211.65 L1456.33 1211.65 L1455.74 1211.65 L1455.16 1211.65 L1454.57 1211.65 L1453.98 1211.65 L1453.4 1211.65 L1452.81 1211.65 L1452.22 1211.65 L1451.64 1211.65 L1451.05 1211.65 L1450.46 1211.65 L1449.88 1211.65 L1449.29 1211.65 L1448.7 1211.65 L1448.12 1211.65 L1447.53 1211.65 L1446.95 1211.65 L1446.36 1211.65 L1445.77 1211.65 L1445.19 1211.65 L1444.6 1211.65 L1444.01 1211.65 L1443.43 1211.65 L1442.84 1211.65 L1442.25 1211.65 L1441.67 1211.65 L1441.08 1211.65 L1440.5 1211.65 L1439.91 1211.65 L1439.32 1211.65 L1438.74 1211.65 L1438.15 1211.65 L1437.56 1211.65 L1436.98 1211.65 L1436.39 1211.65 L1435.8 1211.65 L1435.22 1211.65 L1434.63 1211.65 L1434.04 1211.65 L1433.46 1211.65 L1432.87 1211.65 L1432.29 1211.65 L1431.7 1211.65 L1431.11 1211.65 L1430.53 1211.65 L1429.94 1211.65 L1429.35 1211.65 L1428.77 1211.65 L1428.18 1211.65 L1427.59 1211.65 L1427.01 1211.65 L1426.42 1211.65 L1425.83 1211.65 L1425.25 1211.65 L1424.66 1211.65 L1424.08 1211.65 L1423.49 1211.65 L1422.9 1211.65 L1422.32 1211.65 L1421.73 1211.65 L1421.14 1211.65 L1420.56 1211.65 L1419.97 1211.65 L1419.38 1211.65 L1418.8 1211.65 L1418.21 1211.65 L1417.63 1211.65 L1417.04 1211.65 L1416.45 1211.65 L1415.87 1211.65 L1415.28 1211.65 L1414.69 1211.65 L1414.11 1211.65 L1413.52 1211.65 L1412.93 1211.65 L1412.35 1211.65 L1411.76 1211.65 L1411.17 1211.65 L1410.59 1211.65 L1410 1211.65 L1409.42 1211.65 L1408.83 1211.65 L1408.24 1211.65 L1407.66 1211.65 L1407.07 1211.65 L1406.48 1211.65 L1405.9 1211.65 L1405.31 1211.65 L1404.72 1211.65 L1404.14 1211.65 L1403.55 1211.65 L1402.96 1211.65 L1402.38 1211.65 L1401.79 1211.65 L1401.21 1211.65 L1400.62 1211.65 L1400.03 1211.65 L1399.45 1211.65 L1398.86 1211.65 L1398.27 1211.65 L1397.69 1211.65 L1397.1 1211.65 L1396.51 1211.65 L1395.93 1211.65 L1395.34 1211.65 L1394.75 1211.65 L1394.17 1211.65 L1393.58 1211.65 L1393 1211.65 L1392.41 1211.65 L1391.82 1211.65 L1391.24 1211.65 L1390.65 1211.65 L1390.06 1211.65 L1389.48 1211.65 L1388.89 1211.65 L1388.3 1211.65 L1387.72 1211.65 L1387.13 1211.65 L1386.55 1211.65 L1385.96 1211.65 L1385.37 1211.65 L1384.79 1211.65 L1384.2 1211.65 L1383.61 1211.65 L1383.03 1211.65 L1382.44 1211.65 L1381.85 1211.65 L1381.27 1211.65 L1380.68 1211.65 L1380.09 1211.65 L1379.51 1211.65 L1378.92 1211.65 L1378.34 1211.65 L1377.75 1211.65 L1377.16 1211.65 L1376.58 1211.65 L1375.99 1211.65 L1375.4 1211.65 L1374.82 1211.65 L1374.23 1211.65 L1373.64 1211.65 L1373.06 1211.65 L1372.47 1211.65 L1371.88 1211.65 L1371.3 1211.65 L1370.71 1211.65 L1370.13 1211.65 L1369.54 1211.65 L1368.95 1211.65 L1368.37 1211.65 L1367.78 1211.65 L1367.19 1211.65 L1366.61 1211.65 L1366.02 1211.65 L1365.43 1211.65 L1364.85 1211.65 L1364.26 1211.65 L1363.68 1211.65 L1363.09 1211.65 L1362.5 1211.65 L1361.92 1211.65 L1361.33 1211.65 L1360.74 1211.65 L1360.16 1211.65 L1359.57 1211.65 L1358.98 1211.65 L1358.4 1211.65 L1357.81 1211.65 L1357.22 1211.65 L1356.64 1211.65 L1356.05 1211.65 L1355.47 1211.65 L1354.88 1211.65 L1354.29 1211.65 L1353.71 1211.65 L1353.12 1211.65 L1352.53 1211.65 L1351.95 1211.65 L1351.36 1211.65 L1350.77 1211.65 L1350.19 1211.65 L1349.6 1211.65 L1349.01 1211.65 L1348.43 1211.65 L1347.84 1211.65 L1347.26 1211.65 L1346.67 1211.65 L1346.08 1211.65 L1345.5 1211.65 L1344.91 1211.65 L1344.32 1211.65 L1343.74 1211.65 L1343.15 1211.65 L1342.56 1211.65 L1341.98 1211.65 L1341.39 1211.65 L1340.8 1211.65 L1340.22 1211.65 L1339.63 1211.65 L1339.05 1211.65 L1338.46 1211.65 L1337.87 1211.65 L1337.29 1211.65 L1336.7 1211.65 L1336.11 1211.65 L1335.53 1211.65 L1334.94 1211.65 L1334.35 1211.65 L1333.77 1211.65 L1333.18 1211.65 L1332.6 1211.65 L1332.01 1211.65 L1331.42 1211.65 L1330.84 1211.65 L1330.25 1211.65 L1329.66 1211.65 L1329.08 1211.65 L1328.49 1211.65 L1327.9 1211.65 L1327.32 1211.65 L1326.73 1211.65 L1326.14 1211.65 L1325.56 1211.65 L1324.97 1211.65 L1324.39 1211.65 L1323.8 1211.65 L1323.21 1211.65 L1322.63 1211.65 L1322.04 1211.65 L1321.45 1211.65 L1320.87 1211.65 L1320.28 1211.65 L1319.69 1211.65 L1319.11 1211.65 L1318.52 1211.65 L1317.93 1211.65 L1317.35 1211.65 L1316.76 1211.65 L1316.18 1211.65 L1315.59 1211.65 L1315 1211.65 L1314.42 1211.65 L1313.83 1211.65 L1313.24 1211.65 L1312.66 1211.65 L1312.07 1211.65 L1311.48 1211.65 L1310.9 1211.65 L1310.31 1211.65 L1309.73 1211.65 L1309.14 1211.65 L1308.55 1211.65 L1307.97 1211.65 L1307.38 1211.65 L1306.79 1211.65 L1306.21 1211.65 L1305.62 1211.65 L1305.03 1211.65 L1304.45 1211.65 L1303.86 1211.65 L1303.27 1211.65 L1302.69 1211.65 L1302.1 1211.65 L1301.52 1211.65 L1300.93 1211.65 L1300.34 1211.65 L1299.76 1211.65 L1299.17 1211.65 L1298.58 1211.65 L1298 1211.65 L1297.41 1211.65 L1296.82 1211.65 L1296.24 1211.65 L1295.65 1211.65 L1295.06 1211.65 L1294.48 1211.65 L1293.89 1211.65 L1293.31 1211.65 L1292.72 1211.65 L1292.13 1211.65 L1291.55 1211.65 L1290.96 1211.65 L1290.37 1211.65 L1289.79 1211.65 L1289.2 1211.65 L1288.61 1211.65 L1288.03 1211.65 L1287.44 1211.65 L1286.86 1211.65 L1286.27 1211.65 L1285.68 1211.65 L1285.1 1211.65 L1284.51 1211.65 L1283.92 1211.65 L1283.34 1211.65 L1282.75 1211.65 L1282.16 1211.65 L1281.58 1211.65 L1280.99 1211.65 L1280.4 1211.65 L1279.82 1211.65 L1279.23 1211.65 L1278.65 1211.65 L1278.06 1211.65 L1277.47 1211.65 L1276.89 1211.65 L1276.3 1211.65 L1275.71 1211.65 L1275.13 1211.65 L1274.54 1211.65 L1273.95 1211.65 L1273.37 1211.65 L1272.78 1211.65 L1272.19 1211.65 L1271.61 1211.65 L1271.02 1211.65 L1270.44 1211.65 L1269.85 1211.65 L1269.26 1211.65 L1268.68 1211.65 L1268.09 1211.65 L1267.5 1211.65 L1266.92 1211.65 L1266.33 1211.65 L1265.74 1211.65 L1265.16 1211.65 L1264.57 1211.65 L1263.98 1211.65 L1263.4 1211.65 L1262.81 1211.65 L1262.23 1211.65 L1261.64 1211.65 L1261.05 1211.65 L1260.47 1211.65 L1259.88 1211.65 L1259.29 1211.65 L1258.71 1211.65 L1258.12 1211.65 L1257.53 1211.65 L1256.95 1211.65 L1256.36 1211.65 L1255.78 1211.65 L1255.19 1211.65 L1254.6 1211.65 L1254.02 1211.65 L1253.43 1211.65 L1252.84 1211.65 L1252.26 1211.65 L1251.67 1211.65 L1251.08 1211.65 L1250.5 1211.65 L1249.91 1211.65 L1249.32 1211.65 L1248.74 1211.65 L1248.15 1211.65 L1247.57 1211.65 L1246.98 1211.65 L1246.39 1211.65 L1245.81 1211.65 L1245.22 1211.65 L1244.63 1211.65 L1244.05 1211.65 L1243.46 1211.65 L1242.87 1211.65 L1242.29 1211.65 L1241.7 1211.65 L1241.11 1211.65 L1240.53 1211.65 L1239.94 1211.65 L1239.36 1211.65 L1238.77 1211.65 L1238.18 1211.65 L1237.6 1211.65 L1237.01 1211.65 L1236.42 1211.65 L1235.84 1211.65 L1235.25 1211.65 L1234.66 1211.65 L1234.08 1211.65 L1233.49 1211.65 L1232.91 1211.65 L1232.32 1211.65 L1231.73 1211.65 L1231.15 1211.65 L1230.56 1211.65 L1229.97 1211.65 L1229.39 1211.65 L1228.8 1211.65 L1228.21 1211.65 L1227.63 1211.65 L1227.04 1211.65 L1226.45 1211.65 L1225.87 1211.65 L1225.28 1211.65 L1224.7 1211.65 L1224.11 1211.65 L1223.52 1211.65 L1222.94 1211.65 L1222.35 1211.65 L1221.76 1211.65 L1221.18 1211.65 L1220.59 1211.65 L1220 1211.65 L1219.42 1211.65 L1218.83 1211.65 L1218.24 1211.65 L1217.66 1211.65 L1217.07 1211.65 L1216.49 1211.65 L1215.9 1211.65 L1215.31 1211.65 L1214.73 1211.65 L1214.14 1211.65 L1213.55 1211.65 L1212.97 1211.65 L1212.38 1211.65 L1211.79 1211.65 L1211.21 1211.65 L1210.62 1211.65 L1210.03 1211.65 L1209.45 1211.65 L1208.86 1211.65 L1208.28 1211.65 L1207.69 1211.65 L1207.1 1211.65 L1206.52 1211.65 L1205.93 1211.65 L1205.34 1211.65 L1204.76 1211.65 L1204.17 1211.65 L1203.58 1211.65 L1203 1211.65 L1202.41 1211.65 L1201.83 1211.65 L1201.24 1211.65 L1200.65 1211.65 L1200.07 1211.65 L1199.48 1211.65 L1198.89 1211.65 L1198.31 1211.65 L1197.72 1211.65 L1197.13 1211.65 L1196.55 1211.65 L1195.96 1211.65 L1195.37 1211.65 L1194.79 1211.65 L1194.2 1211.65 L1193.62 1211.65 L1193.03 1211.65 L1192.44 1211.65 L1191.86 1211.65 L1191.27 1211.65 L1190.68 1211.65 L1190.1 1211.65 L1189.51 1211.65 L1188.92 1211.65 L1188.34 1211.65 L1187.75 1211.65 L1187.16 1211.65 L1186.58 1211.65 L1185.99 1211.65 L1185.41 1211.65 L1184.82 1211.65 L1184.23 1211.65 L1183.65 1211.65 L1183.06 1211.65 L1182.47 1211.65 L1181.89 1211.65 L1181.3 1211.65 L1180.71 1211.65 L1180.13 1211.65 L1179.54 1211.65 L1178.96 1211.65 L1178.37 1211.65 L1177.78 1211.65 L1177.2 1211.65 L1176.61 1211.65 L1176.02 1211.65 L1175.44 1211.65 L1174.85 1211.65 L1174.26 1211.65 L1173.68 1211.65 L1173.09 1211.65 L1172.5 1211.65 L1171.92 1211.65 L1171.33 1211.65 L1170.75 1211.65 L1170.16 1211.65 L1169.57 1211.65 L1168.99 1211.65 L1168.4 1211.65 L1167.81 1211.65 L1167.23 1211.65 L1166.64 1211.65 L1166.05 1211.65 L1165.47 1211.65 L1164.88 1211.65 L1164.29 1211.65 L1163.71 1211.65 L1163.12 1211.65 L1162.54 1211.65 L1161.95 1211.65 L1161.36 1211.65 L1160.78 1211.65 L1160.19 1211.65 L1159.6 1211.65 L1159.02 1211.65 L1158.43 1211.65 L1157.84 1211.65 L1157.26 1211.65 L1156.67 1211.65 L1156.09 1211.65 L1155.5 1211.65 L1154.91 1211.65 L1154.33 1211.65 L1153.74 1211.65 L1153.15 1211.65 L1152.57 1211.65 L1151.98 1211.65 L1151.39 1211.65 L1150.81 1211.65 L1150.22 1211.65 L1149.63 1211.65 L1149.05 1211.65 L1148.46 1211.65 L1147.88 1211.65 L1147.29 1211.65 L1146.7 1211.65 L1146.12 1211.65 L1145.53 1211.65 L1144.94 1211.65 L1144.36 1211.65 L1143.77 1211.65 L1143.18 1211.65 L1142.6 1211.65 L1142.01 1211.65 L1141.42 1211.65 L1140.84 1211.65 L1140.25 1211.65 L1139.67 1211.65 L1139.08 1211.65 L1138.49 1211.65 L1137.91 1211.65 L1137.32 1211.65 L1136.73 1211.65 L1136.15 1211.65 L1135.56 1211.65 L1134.97 1211.65 L1134.39 1211.65 L1133.8 1211.65 L1133.21 1211.65 L1132.63 1211.65 L1132.04 1211.65 L1131.46 1211.65 L1130.87 1211.65 L1130.28 1211.65 L1129.7 1211.65 L1129.11 1211.65 L1128.52 1211.65 L1127.94 1211.65 L1127.35 1211.65 L1126.76 1211.65 L1126.18 1211.65 L1125.59 1211.65 L1125.01 1211.65 L1124.42 1211.65 L1123.83 1211.65 L1123.25 1211.65 L1122.66 1211.65 L1122.07 1211.65 L1121.49 1211.65 L1120.9 1211.65 L1120.31 1211.65 L1119.73 1211.65 L1119.14 1211.65 L1118.55 1211.65 L1117.97 1211.65 L1117.38 1211.65 L1116.8 1211.65 L1116.21 1211.65 L1115.62 1211.65 L1115.04 1211.65 L1114.45 1211.65 L1113.86 1211.65 L1113.28 1211.65 L1112.69 1211.65 L1112.1 1211.65 L1111.52 1211.65 L1110.93 1211.65 L1110.34 1211.65 L1109.76 1211.65 L1109.17 1211.65 L1108.59 1211.65 L1108 1211.65 L1107.41 1211.65 L1106.83 1211.65 L1106.24 1211.65 L1105.65 1211.65 L1105.07 1211.65 L1104.48 1211.65 L1103.89 1211.65 L1103.31 1211.65 L1102.72 1211.65 L1102.14 1211.65 L1101.55 1211.65 L1100.96 1211.65 L1100.38 1211.65 L1099.79 1211.65 L1099.2 1211.65 L1098.62 1211.65 L1098.03 1211.65 L1097.44 1211.65 L1096.86 1211.65 L1096.27 1211.65 L1095.68 1211.65 L1095.1 1211.65 L1094.51 1211.65 L1093.93 1211.65 L1093.34 1211.65 L1092.75 1211.65 L1092.17 1211.65 L1091.58 1211.65 L1090.99 1211.65 L1090.41 1211.65 L1089.82 1211.65 L1089.23 1211.65 L1088.65 1211.65 L1088.06 1211.65 L1087.47 1211.65 L1086.89 1211.65 L1086.3 1211.65 L1085.72 1211.65 L1085.13 1211.65 L1084.54 1211.65 L1083.96 1211.65 L1083.37 1211.65 L1082.78 1211.65 L1082.2 1211.65 L1081.61 1211.65 L1081.02 1211.65 L1080.44 1211.65 L1079.85 1211.65 L1079.26 1211.65 L1078.68 1211.65 L1078.09 1211.65 L1077.51 1211.65 L1076.92 1211.65 L1076.33 1211.65 L1075.75 1211.65 L1075.16 1211.65 L1074.57 1211.65 L1073.99 1211.65 L1073.4 1211.65 L1072.81 1211.65 L1072.23 1211.65 L1071.64 1211.65 L1071.06 1211.65 L1070.47 1211.65 L1069.88 1211.65 L1069.3 1211.65 L1068.71 1211.65 L1068.12 1211.65 L1067.54 1211.65 L1066.95 1211.65 L1066.36 1211.65 L1065.78 1211.65 L1065.19 1211.65 L1064.6 1211.65 L1064.02 1211.65 L1063.43 1211.65 L1062.85 1211.65 L1062.26 1211.65 L1061.67 1211.65 L1061.09 1211.65 L1060.5 1211.65 L1059.91 1211.65 L1059.33 1211.65 L1058.74 1211.65 L1058.15 1211.65 L1057.57 1211.65 L1056.98 1211.65 L1056.39 1211.65 L1055.81 1211.65 L1055.22 1211.65 L1054.64 1211.65 L1054.05 1211.65 L1053.46 1211.65 L1052.88 1211.65 L1052.29 1211.65 L1051.7 1211.65 L1051.12 1211.65 L1050.53 1211.65 L1049.94 1211.65 L1049.36 1211.65 L1048.77 1211.65 L1048.19 1211.65 L1047.6 1211.65 L1047.01 1211.65 L1046.43 1211.65 L1045.84 1211.65 L1045.25 1211.65 L1044.67 1211.65 L1044.08 1211.65 L1043.49 1211.65 L1042.91 1211.65 L1042.32 1211.65 L1041.73 1211.65 L1041.15 1211.65 L1040.56 1211.65 L1039.98 1211.65 L1039.39 1211.65 L1038.8 1211.65 L1038.22 1211.65 L1037.63 1211.65 L1037.04 1211.65 L1036.46 1211.65 L1035.87 1211.65 L1035.28 1211.65 L1034.7 1211.65 L1034.11 1211.65 L1033.52 1211.65 L1032.94 1211.65 L1032.35 1211.65 L1031.77 1211.65 L1031.18 1211.65 L1030.59 1211.65 L1030.01 1211.65 L1029.42 1211.65 L1028.83 1211.65 L1028.25 1211.65 L1027.66 1211.65 L1027.07 1211.65 L1026.49 1211.65 L1025.9 1211.65 L1025.32 1211.65 L1024.73 1211.65 L1024.14 1211.65 L1023.56 1211.65 L1022.97 1211.65 L1022.38 1211.65 L1021.8 1211.65 L1021.21 1211.65 L1020.62 1211.65 L1020.04 1211.65 L1019.45 1211.65 L1018.86 1211.65 L1018.28 1211.65 L1017.69 1211.65 L1017.11 1211.65 L1016.52 1211.65 L1015.93 1211.65 L1015.35 1211.65 L1014.76 1211.65 L1014.17 1211.65 L1013.59 1211.65 L1013 1211.65 L1012.41 1211.65 L1011.83 1211.65 L1011.24 1211.65 L1010.65 1211.65 L1010.07 1211.65 L1009.48 1211.65 L1008.9 1211.65 L1008.31 1211.65 L1007.72 1211.65 L1007.14 1211.65 L1006.55 1211.65 L1005.96 1211.65 L1005.38 1211.65 L1004.79 1211.65 L1004.2 1211.65 L1003.62 1211.65 L1003.03 1211.65 L1002.44 1211.65 L1001.86 1211.65 L1001.27 1211.65 L1000.69 1211.65 L1000.1 1211.65 L999.513 1211.65 L998.926 1211.65 L998.34 1211.65 L997.754 1211.65 L997.167 1211.65 L996.581 1211.65 L995.994 1211.65 L995.408 1211.65 L994.822 1211.65 L994.235 1211.65 L993.649 1211.65 L993.062 1211.65 L992.476 1211.65 L991.889 1211.65 L991.303 1211.65 L990.717 1211.65 L990.13 1211.65 L989.544 1211.65 L988.957 1211.65 L988.371 1211.65 L987.785 1211.65 L987.198 1211.65 L986.612 1211.65 L986.025 1211.65  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.03 986.612,1212.03 987.198,1212.03 987.785,1212.03 988.371,1212.03 988.957,1212.03 989.544,1212.03 990.13,1212.03 990.717,1212.03 991.303,1212.03 991.889,1212.03 992.476,1212.03 993.062,1212.03 993.649,1212.03 994.235,1212.03 994.822,1212.03 995.408,1212.03 995.994,1212.03 996.581,1212.03 997.167,1212.03 997.754,1212.03 998.34,1212.03 998.926,1212.03 999.513,1212.03 1000.1,1212.03 1000.69,1212.03 1001.27,1212.03 1001.86,1212.03 1002.44,1212.03 1003.03,1212.03 1003.62,1212.03 1004.2,1212.03 1004.79,1212.03 1005.38,1212.03 1005.96,1212.03 1006.55,1212.03 1007.14,1212.03 1007.72,1212.03 1008.31,1212.03 1008.9,1212.03 1009.48,1212.03 1010.07,1212.03 1010.65,1212.03 1011.24,1212.03 1011.83,1212.03 1012.41,1212.03 1013,1212.03 1013.59,1212.03 1014.17,1212.03 1014.76,1212.03 1015.35,1212.03 1015.93,1212.03 1016.52,1212.03 1017.11,1212.03 1017.69,1212.03 1018.28,1212.03 1018.86,1212.03 1019.45,1212.03 1020.04,1212.03 1020.62,1212.03 1021.21,1212.03 1021.8,1212.03 1022.38,1212.03 1022.97,1212.03 1023.56,1212.03 1024.14,1212.03 1024.73,1212.03 1025.32,1212.03 1025.9,1212.03 1026.49,1212.03 1027.07,1212.03 1027.66,1212.03 1028.25,1212.03 1028.83,1212.03 1029.42,1212.03 1030.01,1212.03 1030.59,1212.03 1031.18,1212.03 1031.77,1212.03 1032.35,1212.03 1032.94,1212.03 1033.52,1212.03 1034.11,1212.03 1034.7,1212.03 1035.28,1212.03 1035.87,1212.03 1036.46,1212.03 1037.04,1212.03 1037.63,1212.03 1038.22,1212.03 1038.8,1212.03 1039.39,1212.03 1039.98,1212.03 1040.56,1212.03 1041.15,1212.03 1041.73,1212.03 1042.32,1212.03 1042.91,1212.03 1043.49,1212.03 1044.08,1212.03 1044.67,1212.03 1045.25,1212.03 1045.84,1212.03 1046.43,1212.03 1047.01,1212.03 1047.6,1212.03 1048.19,1212.03 1048.77,1212.03 1049.36,1212.03 1049.94,1212.03 1050.53,1212.03 1051.12,1212.03 1051.7,1212.03 1052.29,1212.03 1052.88,1212.03 1053.46,1212.03 1054.05,1212.03 1054.64,1212.03 1055.22,1212.03 1055.81,1212.03 1056.39,1212.03 1056.98,1212.03 1057.57,1212.03 1058.15,1212.03 1058.74,1212.03 1059.33,1212.03 1059.91,1212.03 1060.5,1212.03 1061.09,1212.03 1061.67,1212.03 1062.26,1212.03 1062.85,1212.03 1063.43,1212.03 1064.02,1212.03 1064.6,1212.03 1065.19,1212.03 1065.78,1212.03 1066.36,1212.03 1066.95,1212.03 1067.54,1212.03 1068.12,1212.03 1068.71,1212.03 1069.3,1212.03 1069.88,1212.03 1070.47,1212.03 1071.06,1212.03 1071.64,1212.03 1072.23,1212.03 1072.81,1212.03 1073.4,1212.03 1073.99,1212.03 1074.57,1212.03 1075.16,1212.03 1075.75,1212.03 1076.33,1212.03 1076.92,1212.03 1077.51,1212.03 1078.09,1212.03 1078.68,1212.03 1079.26,1212.03 1079.85,1212.03 1080.44,1212.03 1081.02,1212.03 1081.61,1212.03 1082.2,1212.03 1082.78,1212.03 1083.37,1212.03 1083.96,1212.03 1084.54,1212.03 1085.13,1212.03 1085.72,1212.03 1086.3,1212.03 1086.89,1212.03 1087.47,1212.03 1088.06,1212.03 1088.65,1212.03 1089.23,1212.03 1089.82,1212.03 1090.41,1212.03 1090.99,1212.03 1091.58,1212.03 1092.17,1212.03 1092.75,1212.03 1093.34,1212.03 1093.93,1212.03 1094.51,1212.03 1095.1,1212.03 1095.68,1212.03 1096.27,1212.03 1096.86,1212.03 1097.44,1212.03 1098.03,1212.03 1098.62,1212.03 1099.2,1212.03 1099.79,1212.03 1100.38,1212.03 1100.96,1212.03 1101.55,1212.03 1102.14,1212.03 1102.72,1212.03 1103.31,1212.03 1103.89,1212.03 1104.48,1212.03 1105.07,1212.03 1105.65,1212.03 1106.24,1212.03 1106.83,1212.03 1107.41,1212.03 1108,1212.03 1108.59,1212.03 1109.17,1212.03 1109.76,1212.03 1110.34,1212.03 1110.93,1212.03 1111.52,1212.03 1112.1,1212.03 1112.69,1212.03 1113.28,1212.03 1113.86,1212.03 1114.45,1212.03 1115.04,1212.03 1115.62,1212.03 1116.21,1212.03 1116.8,1212.03 1117.38,1212.03 1117.97,1212.03 1118.55,1212.03 1119.14,1212.03 1119.73,1212.03 1120.31,1212.03 1120.9,1212.03 1121.49,1212.03 1122.07,1212.03 1122.66,1212.03 1123.25,1212.03 1123.83,1212.03 1124.42,1212.03 1125.01,1212.03 1125.59,1212.03 1126.18,1212.03 1126.76,1212.03 1127.35,1212.03 1127.94,1212.03 1128.52,1212.03 1129.11,1212.03 1129.7,1212.03 1130.28,1212.03 1130.87,1212.03 1131.46,1212.03 1132.04,1212.03 1132.63,1212.03 1133.21,1212.03 1133.8,1212.03 1134.39,1212.03 1134.97,1212.03 1135.56,1212.03 1136.15,1212.03 1136.73,1212.03 1137.32,1212.03 1137.91,1212.03 1138.49,1212.03 1139.08,1212.03 1139.67,1212.03 1140.25,1212.03 1140.84,1212.03 1141.42,1212.03 1142.01,1212.03 1142.6,1212.03 1143.18,1212.03 1143.77,1212.03 1144.36,1212.03 1144.94,1212.03 1145.53,1212.03 1146.12,1212.03 1146.7,1212.03 1147.29,1212.03 1147.88,1212.03 1148.46,1212.03 1149.05,1212.03 1149.63,1212.03 1150.22,1212.03 1150.81,1212.03 1151.39,1212.03 1151.98,1212.03 1152.57,1212.03 1153.15,1212.03 1153.74,1212.03 1154.33,1212.03 1154.91,1212.03 1155.5,1212.03 1156.09,1212.03 1156.67,1212.03 1157.26,1212.03 1157.84,1212.03 1158.43,1212.03 1159.02,1212.03 1159.6,1212.03 1160.19,1212.03 1160.78,1212.03 1161.36,1212.03 1161.95,1212.03 1162.54,1212.03 1163.12,1212.03 1163.71,1212.03 1164.29,1212.03 1164.88,1212.03 1165.47,1212.03 1166.05,1212.03 1166.64,1212.03 1167.23,1212.03 1167.81,1212.03 1168.4,1212.03 1168.99,1212.03 1169.57,1212.03 1170.16,1212.03 1170.75,1212.03 1171.33,1212.03 1171.92,1212.03 1172.5,1212.03 1173.09,1212.03 1173.68,1212.03 1174.26,1212.03 1174.85,1212.03 1175.44,1212.03 1176.02,1212.03 1176.61,1212.03 1177.2,1212.03 1177.78,1212.03 1178.37,1212.03 1178.96,1212.03 1179.54,1212.03 1180.13,1212.03 1180.71,1212.03 1181.3,1212.03 1181.89,1212.03 1182.47,1212.03 1183.06,1212.03 1183.65,1212.03 1184.23,1212.03 1184.82,1212.03 1185.41,1212.03 1185.99,1212.03 1186.58,1212.03 1187.16,1212.03 1187.75,1212.03 1188.34,1212.03 1188.92,1212.03 1189.51,1212.03 1190.1,1212.03 1190.68,1212.03 1191.27,1212.03 1191.86,1212.03 1192.44,1212.03 1193.03,1212.03 1193.62,1212.03 1194.2,1212.03 1194.79,1212.03 1195.37,1212.03 1195.96,1212.03 1196.55,1212.03 1197.13,1212.03 1197.72,1212.03 1198.31,1212.03 1198.89,1212.03 1199.48,1212.03 1200.07,1212.03 1200.65,1212.03 1201.24,1212.03 1201.83,1212.03 1202.41,1212.03 1203,1212.03 1203.58,1212.03 1204.17,1212.03 1204.76,1212.03 1205.34,1212.03 1205.93,1212.03 1206.52,1212.03 1207.1,1212.03 1207.69,1212.03 1208.28,1212.03 1208.86,1212.03 1209.45,1212.03 1210.03,1212.03 1210.62,1212.03 1211.21,1212.03 1211.79,1212.03 1212.38,1212.03 1212.97,1212.03 1213.55,1212.03 1214.14,1212.03 1214.73,1212.03 1215.31,1212.03 1215.9,1212.03 1216.49,1212.03 1217.07,1212.03 1217.66,1212.03 1218.24,1212.03 1218.83,1212.03 1219.42,1212.03 1220,1212.03 1220.59,1212.03 1221.18,1212.03 1221.76,1212.03 1222.35,1212.03 1222.94,1212.03 1223.52,1212.03 1224.11,1212.03 1224.7,1212.03 1225.28,1212.03 1225.87,1212.03 1226.45,1212.03 1227.04,1212.03 1227.63,1212.03 1228.21,1212.03 1228.8,1212.03 1229.39,1212.03 1229.97,1212.03 1230.56,1212.03 1231.15,1212.03 1231.73,1212.03 1232.32,1212.03 1232.91,1212.03 1233.49,1212.03 1234.08,1212.03 1234.66,1212.03 1235.25,1212.03 1235.84,1212.03 1236.42,1212.03 1237.01,1212.03 1237.6,1212.03 1238.18,1212.03 1238.77,1212.03 1239.36,1212.03 1239.94,1212.03 1240.53,1212.03 1241.11,1212.03 1241.7,1212.03 1242.29,1212.03 1242.87,1212.03 1243.46,1212.03 1244.05,1212.03 1244.63,1212.03 1245.22,1212.03 1245.81,1212.03 1246.39,1212.03 1246.98,1212.03 1247.57,1212.03 1248.15,1212.03 1248.74,1212.03 1249.32,1212.03 1249.91,1212.03 1250.5,1212.03 1251.08,1212.03 1251.67,1212.03 1252.26,1212.03 1252.84,1212.03 1253.43,1212.03 1254.02,1212.03 1254.6,1212.03 1255.19,1212.03 1255.78,1212.03 1256.36,1212.03 1256.95,1212.03 1257.53,1212.03 1258.12,1212.03 1258.71,1212.03 1259.29,1212.03 1259.88,1212.03 1260.47,1212.03 1261.05,1212.03 1261.64,1212.03 1262.23,1212.03 1262.81,1212.03 1263.4,1212.03 1263.98,1212.03 1264.57,1212.03 1265.16,1212.03 1265.74,1212.03 1266.33,1212.03 1266.92,1212.03 1267.5,1212.03 1268.09,1212.03 1268.68,1212.03 1269.26,1212.03 1269.85,1212.03 1270.44,1212.03 1271.02,1212.03 1271.61,1212.03 1272.19,1212.03 1272.78,1212.03 1273.37,1212.03 1273.95,1212.03 1274.54,1212.03 1275.13,1212.03 1275.71,1212.03 1276.3,1212.03 1276.89,1212.03 1277.47,1212.03 1278.06,1212.03 1278.65,1212.03 1279.23,1212.03 1279.82,1212.03 1280.4,1212.03 1280.99,1212.03 1281.58,1212.03 1282.16,1212.03 1282.75,1212.03 1283.34,1212.03 1283.92,1212.03 1284.51,1212.03 1285.1,1212.03 1285.68,1212.03 1286.27,1212.03 1286.86,1212.03 1287.44,1212.03 1288.03,1212.03 1288.61,1212.03 1289.2,1212.03 1289.79,1212.03 1290.37,1212.03 1290.96,1212.03 1291.55,1212.03 1292.13,1212.03 1292.72,1212.03 1293.31,1212.03 1293.89,1212.03 1294.48,1212.03 1295.06,1212.03 1295.65,1212.03 1296.24,1212.03 1296.82,1212.03 1297.41,1212.03 1298,1212.03 1298.58,1212.03 1299.17,1212.03 1299.76,1212.03 1300.34,1212.03 1300.93,1212.03 1301.52,1212.03 1302.1,1212.03 1302.69,1212.03 1303.27,1212.03 1303.86,1212.03 1304.45,1212.03 1305.03,1212.03 1305.62,1212.03 1306.21,1212.03 1306.79,1212.03 1307.38,1212.03 1307.97,1212.03 1308.55,1212.03 1309.14,1212.03 1309.73,1212.03 1310.31,1212.03 1310.9,1212.03 1311.48,1212.03 1312.07,1212.03 1312.66,1212.03 1313.24,1212.03 1313.83,1212.03 1314.42,1212.03 1315,1212.03 1315.59,1212.03 1316.18,1212.03 1316.76,1212.03 1317.35,1212.03 1317.93,1212.03 1318.52,1212.03 1319.11,1212.03 1319.69,1212.03 1320.28,1212.03 1320.87,1212.03 1321.45,1212.03 1322.04,1212.03 1322.63,1212.03 1323.21,1212.03 1323.8,1212.03 1324.39,1212.03 1324.97,1212.03 1325.56,1212.03 1326.14,1212.03 1326.73,1212.03 1327.32,1212.03 1327.9,1212.03 1328.49,1212.03 1329.08,1212.03 1329.66,1212.03 1330.25,1212.03 1330.84,1212.03 1331.42,1212.03 1332.01,1212.03 1332.6,1212.03 1333.18,1212.03 1333.77,1212.03 1334.35,1212.03 1334.94,1212.03 1335.53,1212.03 1336.11,1212.03 1336.7,1212.03 1337.29,1212.03 1337.87,1212.03 1338.46,1212.03 1339.05,1212.03 1339.63,1212.03 1340.22,1212.03 1340.8,1212.03 1341.39,1212.03 1341.98,1212.03 1342.56,1212.03 1343.15,1212.03 1343.74,1212.03 1344.32,1212.03 1344.91,1212.03 1345.5,1212.03 1346.08,1212.03 1346.67,1212.03 1347.26,1212.03 1347.84,1212.03 1348.43,1212.03 1349.01,1212.03 1349.6,1212.03 1350.19,1212.03 1350.77,1212.03 1351.36,1212.03 1351.95,1212.03 1352.53,1212.03 1353.12,1212.03 1353.71,1212.03 1354.29,1212.03 1354.88,1212.03 1355.47,1212.03 1356.05,1212.03 1356.64,1212.03 1357.22,1212.03 1357.81,1212.03 1358.4,1212.03 1358.98,1212.03 1359.57,1212.03 1360.16,1212.03 1360.74,1212.03 1361.33,1212.03 1361.92,1212.03 1362.5,1212.03 1363.09,1212.03 1363.68,1212.03 1364.26,1212.03 1364.85,1212.03 1365.43,1212.03 1366.02,1212.03 1366.61,1212.03 1367.19,1212.03 1367.78,1212.03 1368.37,1212.03 1368.95,1212.03 1369.54,1212.03 1370.13,1212.03 1370.71,1212.03 1371.3,1212.03 1371.88,1212.03 1372.47,1212.03 1373.06,1212.03 1373.64,1212.03 1374.23,1212.03 1374.82,1212.03 1375.4,1212.03 1375.99,1212.03 1376.58,1212.03 1377.16,1212.03 1377.75,1212.03 1378.34,1212.03 1378.92,1212.03 1379.51,1212.03 1380.09,1212.03 1380.68,1212.03 1381.27,1212.03 1381.85,1212.03 1382.44,1212.03 1383.03,1212.03 1383.61,1212.03 1384.2,1212.03 1384.79,1212.03 1385.37,1212.03 1385.96,1212.03 1386.55,1212.03 1387.13,1212.03 1387.72,1212.03 1388.3,1212.03 1388.89,1212.03 1389.48,1212.03 1390.06,1212.03 1390.65,1212.03 1391.24,1212.03 1391.82,1212.03 1392.41,1212.03 1393,1212.03 1393.58,1212.03 1394.17,1212.03 1394.75,1212.03 1395.34,1212.03 1395.93,1212.03 1396.51,1212.03 1397.1,1212.03 1397.69,1212.03 1398.27,1212.03 1398.86,1212.03 1399.45,1212.03 1400.03,1212.03 1400.62,1212.03 1401.21,1212.03 1401.79,1212.03 1402.38,1212.03 1402.96,1212.03 1403.55,1212.03 1404.14,1212.03 1404.72,1212.03 1405.31,1212.03 1405.9,1212.03 1406.48,1212.03 1407.07,1212.03 1407.66,1212.03 1408.24,1212.03 1408.83,1212.03 1409.42,1212.03 1410,1212.03 1410.59,1212.03 1411.17,1212.03 1411.76,1212.03 1412.35,1212.03 1412.93,1212.03 1413.52,1212.03 1414.11,1212.03 1414.69,1212.03 1415.28,1212.03 1415.87,1212.03 1416.45,1212.03 1417.04,1212.03 1417.63,1212.03 1418.21,1212.03 1418.8,1212.03 1419.38,1212.03 1419.97,1212.03 1420.56,1212.03 1421.14,1212.03 1421.73,1212.03 1422.32,1212.03 1422.9,1212.03 1423.49,1212.03 1424.08,1212.03 1424.66,1212.03 1425.25,1212.03 1425.83,1212.03 1426.42,1212.03 1427.01,1212.03 1427.59,1212.03 1428.18,1212.03 1428.77,1212.03 1429.35,1212.03 1429.94,1212.03 1430.53,1212.03 1431.11,1212.03 1431.7,1212.03 1432.29,1212.03 1432.87,1212.03 1433.46,1212.03 1434.04,1212.03 1434.63,1212.03 1435.22,1212.03 1435.8,1212.03 1436.39,1212.03 1436.98,1212.03 1437.56,1212.03 1438.15,1212.03 1438.74,1212.03 1439.32,1212.03 1439.91,1212.03 1440.5,1212.03 1441.08,1212.03 1441.67,1212.03 1442.25,1212.03 1442.84,1212.03 1443.43,1212.03 1444.01,1212.03 1444.6,1212.03 1445.19,1212.03 1445.77,1212.03 1446.36,1212.03 1446.95,1212.03 1447.53,1212.03 1448.12,1212.03 1448.7,1212.03 1449.29,1212.03 1449.88,1212.03 1450.46,1212.03 1451.05,1212.03 1451.64,1212.03 1452.22,1212.03 1452.81,1212.03 1453.4,1212.03 1453.98,1212.03 1454.57,1212.03 1455.16,1212.03 1455.74,1212.03 1456.33,1212.03 1456.91,1212.03 1457.5,1212.03 1458.09,1212.03 1458.67,1212.03 1459.26,1212.03 1459.85,1212.03 1460.43,1212.03 1461.02,1212.03 1461.61,1212.03 1462.19,1212.03 1462.78,1212.03 1463.37,1212.03 1463.95,1212.03 1464.54,1212.03 1465.12,1212.03 1465.71,1212.03 1466.3,1212.03 1466.88,1212.03 1467.47,1212.03 1468.06,1212.03 1468.64,1212.03 1469.23,1212.03 1469.82,1212.03 1470.4,1212.03 1470.99,1212.03 1471.57,1212.03 1472.16,1212.03 1472.75,1212.03 1473.33,1212.03 1473.92,1212.03 1474.51,1212.03 1475.09,1212.03 1475.68,1212.03 1476.27,1212.03 1476.85,1212.03 1477.44,1212.03 1478.03,1212.03 1478.61,1212.03 1479.2,1212.03 1479.78,1212.03 1480.37,1212.03 1480.96,1212.03 1481.54,1212.03 1482.13,1212.03 1482.72,1212.03 1483.3,1212.03 1483.89,1212.03 1484.48,1212.03 1485.06,1212.03 1485.65,1212.03 1486.24,1212.03 1486.82,1212.03 1487.41,1212.03 1487.99,1212.03 1488.58,1212.03 1489.17,1212.03 1489.75,1212.03 1490.34,1212.03 1490.93,1212.03 1491.51,1212.03 1492.1,1212.03 1492.69,1212.03 1493.27,1212.03 1493.86,1212.03 1494.45,1212.03 1495.03,1212.03 1495.62,1212.03 1496.2,1212.03 1496.79,1212.03 1497.38,1212.03 1497.96,1212.03 1498.55,1212.03 1499.14,1212.03 1499.72,1212.03 1500.31,1212.03 1500.9,1212.03 1501.48,1212.03 1502.07,1212.03 1502.65,1212.03 1503.24,1212.03 1503.83,1212.03 1504.41,1212.03 1505,1212.03 1505.59,1212.03 1506.17,1212.03 1506.76,1212.03 1507.35,1212.03 1507.93,1212.03 1508.52,1212.03 1509.11,1212.03 1509.69,1212.03 1510.28,1212.03 1510.86,1212.03 1511.45,1212.03 1512.04,1212.03 1512.62,1212.03 1513.21,1212.03 1513.8,1212.03 1514.38,1212.03 1514.97,1212.03 1515.56,1212.03 1516.14,1212.03 1516.73,1212.03 1517.32,1212.03 1517.9,1212.03 1518.49,1212.03 1519.07,1212.03 1519.66,1212.03 1520.25,1212.03 1520.83,1212.03 1521.42,1212.03 1522.01,1212.03 1522.59,1212.03 1523.18,1212.03 1523.77,1212.03 1524.35,1212.03 1524.94,1212.03 1525.52,1212.03 1526.11,1212.03 1526.7,1212.03 1527.28,1212.03 1527.87,1212.03 1528.46,1212.03 1529.04,1212.03 1529.63,1212.03 1530.22,1212.03 1530.8,1212.03 1531.39,1212.03 1531.98,1212.03 1532.56,1212.03 1533.15,1212.03 1533.73,1212.03 1534.32,1212.03 1534.91,1212.03 1535.49,1212.03 1536.08,1212.03 1536.67,1212.03 1537.25,1212.03 1537.84,1212.03 1538.43,1212.03 1539.01,1212.03 1539.6,1212.03 1540.19,1212.03 1540.77,1212.03 1541.36,1212.03 1541.94,1212.03 1542.53,1212.03 1543.12,1212.03 1543.7,1212.03 1544.29,1212.03 1544.88,1212.03 1545.46,1212.03 1546.05,1212.03 1546.64,1212.03 1547.22,1212.03 1547.81,1212.03 1548.4,1212.03 1548.98,1212.03 1549.57,1212.03 1550.15,1212.03 1550.74,1212.03 1551.33,1212.03 1551.91,1212.03 1552.5,1212.03 1553.09,1212.03 1553.67,1212.03 1554.26,1212.03 1554.85,1212.03 1555.43,1212.03 1556.02,1212.03 1556.6,1212.03 1557.19,1212.03 1557.78,1212.03 1558.36,1212.03 1558.95,1212.03 1559.54,1212.03 1560.12,1212.03 1560.71,1212.03 1561.3,1212.03 1561.88,1212.03 1562.47,1212.03 1563.06,1212.03 1563.64,1212.03 1564.23,1212.03 1564.81,1212.03 1565.4,1212.03 1565.99,1212.03 1566.57,1212.03 1567.16,1212.03 1567.75,1212.03 1568.33,1212.03 1568.92,1212.03 1569.51,1212.03 1570.09,1212.03 1570.68,1212.03 1571.27,1212.03 1571.85,1212.03 1572.44,1212.03 1573.02,1212.03 1573.61,1212.03 1574.2,1212.03 1574.78,1212.03 1575.37,1212.03 1575.96,1212.03 1576.54,1212.03 1577.13,1212.03 1577.72,1212.03 1578.3,1212.03 1578.89,1212.03 1579.47,1212.03 1580.06,1212.03 1580.65,1212.03 1581.23,1212.03 1581.82,1212.03 1582.41,1212.03 1582.99,1212.03 1583.58,1212.03 1584.17,1212.03 1584.75,1212.03 1585.34,1212.03 1585.93,1212.03 1586.51,1212.03 1587.1,1212.03 1587.68,1212.03 1588.27,1212.03 1588.86,1212.03 1589.44,1212.03 1590.03,1212.03 1590.62,1212.03 1591.2,1212.03 1591.79,1212.03 1592.38,1212.03 1592.96,1212.03 1593.55,1212.03 1594.14,1212.03 1594.72,1212.03 1595.31,1212.03 1595.89,1212.03 1596.48,1212.03 1597.07,1212.03 1597.65,1212.03 1598.24,1212.03 1598.83,1212.03 1599.41,1212.03 1600,1212.03 1600.59,1212.03 1601.17,1212.03 1601.76,1212.03 1602.34,1212.03 1602.93,1212.03 1603.52,1212.03 1604.1,1212.03 1604.69,1212.03 1605.28,1212.03 1605.86,1212.03 1606.45,1212.03 1607.04,1212.03 1607.62,1212.03 1608.21,1212.03 1608.8,1212.03 1609.38,1212.03 1609.97,1212.03 1610.55,1212.03 1611.14,1212.03 1611.73,1212.03 1612.31,1212.03 1612.9,1212.03 1613.49,1212.03 1614.07,1212.03 1614.66,1212.03 1615.25,1212.03 1615.83,1212.03 1616.42,1212.03 1617.01,1212.03 1617.59,1212.03 1618.18,1212.03 1618.76,1212.03 1619.35,1212.03 1619.94,1212.03 1620.52,1212.03 1621.11,1212.03 1621.7,1212.03 1622.28,1212.03 1622.87,1212.03 1623.46,1212.03 1624.04,1212.03 1624.63,1212.03 1625.22,1212.03 1625.8,1212.03 1626.39,1212.03 1626.97,1212.03 1627.56,1212.03 1628.15,1212.03 1628.73,1212.03 1629.32,1212.03 1629.91,1212.03 1630.49,1212.03 1631.08,1212.03 1631.67,1212.03 1632.25,1212.03 1632.84,1212.03 1633.42,1212.03 1634.01,1212.03 1634.6,1212.03 1635.18,1212.03 1635.77,1212.03 1636.36,1212.03 1636.94,1212.03 1637.53,1212.03 1638.12,1212.03 1638.7,1212.03 1639.29,1212.03 1639.88,1212.03 1640.46,1212.03 1641.05,1212.03 1641.63,1212.03 1642.22,1212.03 1642.81,1212.03 1643.39,1212.03 1643.98,1212.03 1644.57,1212.03 1645.15,1212.03 1645.74,1212.03 1646.33,1212.03 1646.91,1212.03 1647.5,1212.03 1648.09,1212.03 1648.67,1212.03 1649.26,1212.03 1649.84,1212.03 1650.43,1212.03 1651.02,1212.03 1651.6,1212.03 1652.19,1212.03 1652.78,1212.03 1653.36,1212.03 1653.95,1212.03 1654.54,1212.03 1655.12,1212.03 1655.71,1212.03 1656.29,1212.03 1656.88,1212.03 1657.47,1212.03 1658.05,1212.03 1658.64,1212.03 1659.23,1212.03 1659.81,1212.03 1660.4,1212.03 1660.99,1212.03 1661.57,1212.03 1662.16,1212.03 1662.75,1212.03 1663.33,1212.03 1663.92,1212.03 1664.5,1212.03 1665.09,1212.03 1665.68,1212.03 1666.26,1212.03 1666.85,1212.03 1667.44,1212.03 1668.02,1212.03 1668.61,1212.03 1669.2,1212.03 1669.78,1212.03 1670.37,1212.03 1670.96,1212.03 1671.54,1212.03 1672.13,1212.03 1672.71,1212.03 1673.3,1212.03 1673.89,1212.03 1674.47,1212.03 1675.06,1212.03 1675.65,1212.03 1676.23,1212.03 1676.82,1212.03 1677.41,1212.03 1677.99,1212.03 1678.58,1212.03 1679.17,1212.03 1679.75,1212.03 1680.34,1212.03 1680.92,1212.03 1681.51,1212.03 1682.1,1212.03 1682.68,1212.03 1683.27,1212.03 1683.86,1212.03 1684.44,1212.03 1685.03,1212.03 1685.62,1212.03 1686.2,1212.03 1686.79,1212.03 1687.37,1212.03 1687.96,1212.03 1688.55,1212.03 1689.13,1212.03 1689.72,1212.03 1690.31,1212.03 1690.89,1212.03 1691.48,1212.03 1692.07,1212.03 1692.65,1212.03 1693.24,1212.03 1693.83,1212.03 1694.41,1212.03 1695,1212.03 1695.58,1212.03 1696.17,1212.03 1696.76,1212.03 1697.34,1212.03 1697.93,1212.03 1698.52,1212.03 1699.1,1212.03 1699.69,1212.03 1700.28,1212.03 1700.86,1212.03 1701.45,1212.03 1702.04,1212.03 1702.62,1212.03 1703.21,1212.03 1703.79,1212.03 1704.38,1212.03 1704.97,1212.03 1705.55,1212.03 1706.14,1212.03 1706.73,1212.03 1707.31,1212.03 1707.9,1212.03 1708.49,1212.03 1709.07,1212.03 1709.66,1212.03 1710.24,1212.03 1710.83,1212.03 1711.42,1212.03 1712,1212.03 1712.59,1212.03 1713.18,1212.03 1713.76,1212.03 1714.35,1212.03 1714.94,1212.03 1715.52,1212.03 1716.11,1212.03 1716.7,1212.03 1717.28,1212.03 1717.87,1212.03 1718.45,1212.03 1719.04,1212.03 1719.63,1212.03 1720.21,1212.03 1720.8,1212.03 1721.39,1212.03 1721.97,1212.03 1722.56,1212.03 1723.15,1212.03 1723.73,1212.03 1724.32,1212.03 1724.91,1212.03 1725.49,1212.03 1726.08,1212.03 1726.66,1212.03 1727.25,1212.03 1727.84,1212.03 1728.42,1212.03 1729.01,1212.03 1729.6,1212.03 1730.18,1212.03 1730.77,1212.03 1731.36,1212.03 1731.94,1212.03 1732.53,1212.03 1733.11,1212.03 1733.7,1212.03 1734.29,1212.03 1734.87,1212.03 1735.46,1212.03 1736.05,1212.03 1736.63,1212.03 1737.22,1212.03 1737.81,1212.03 1738.39,1212.03 1738.98,1212.03 1739.57,1212.03 1740.15,1212.03 1740.74,1212.03 1741.32,1212.03 1741.91,1212.03 1742.5,1212.03 1743.08,1212.03 1743.67,1212.03 1744.26,1212.03 1744.84,1212.03 1745.43,1212.03 1746.02,1212.03 1746.6,1212.03 1747.19,1212.03 1747.78,1212.03 1748.36,1212.03 1748.95,1212.03 1749.53,1212.03 1750.12,1212.03 1750.71,1212.03 1751.29,1212.03 1751.88,1212.03 1752.47,1212.03 1753.05,1212.03 1753.64,1212.03 1754.23,1212.03 1754.81,1212.03 1755.4,1212.03 1755.99,1212.03 1756.57,1212.03 1757.16,1212.03 1757.74,1212.03 1758.33,1212.03 1758.92,1212.03 1759.5,1212.03 1760.09,1212.03 1760.68,1212.03 1761.26,1212.03 1761.85,1212.03 1762.44,1212.03 1763.02,1212.03 1763.61,1212.03 1764.19,1212.03 1764.78,1212.03 1765.37,1212.03 1765.95,1212.03 1766.54,1212.03 1767.13,1212.03 1767.71,1212.03 1768.3,1212.03 1768.89,1212.03 1769.47,1212.03 1770.06,1212.03 1770.65,1212.03 1771.23,1212.03 1771.82,1212.03 1772.4,1212.03 1772.99,1212.03 1773.58,1212.03 1774.16,1212.03 1774.75,1212.03 1775.34,1212.03 1775.92,1212.03 1776.51,1212.03 1777.1,1212.03 1777.68,1212.03 1778.27,1212.03 1778.86,1212.03 1779.44,1212.03 1780.03,1212.03 1780.61,1212.03 1781.2,1212.03 1781.79,1212.03 1782.37,1212.03 1782.96,1212.03 1783.55,1212.03 1784.13,1212.03 1784.72,1212.03 1785.31,1212.03 1785.89,1212.03 1786.48,1212.03 1787.06,1212.03 1787.65,1212.03 1788.24,1212.03 1788.82,1212.03 1789.41,1212.03 1790,1212.03 1790.58,1212.03 1791.17,1212.03 1791.76,1212.03 1792.34,1212.03 1792.93,1212.03 1793.52,1212.03 1794.1,1212.03 1794.69,1212.03 1795.27,1212.03 1795.86,1212.03 1796.45,1212.03 1797.03,1212.03 1797.62,1212.03 1798.21,1212.03 1798.79,1212.03 1799.38,1212.03 1799.97,1212.03 1800.55,1212.03 1801.14,1212.03 1801.73,1212.03 1802.31,1212.03 1802.9,1212.03 1803.48,1212.03 1804.07,1212.03 1804.66,1212.03 1805.24,1212.03 1805.83,1212.03 1806.42,1212.03 1807,1212.03 1807.59,1212.03 1808.18,1212.03 1808.76,1212.03 1809.35,1212.03 1809.94,1212.03 1810.52,1212.03 1811.11,1212.03 1811.69,1212.03 1812.28,1212.03 1812.87,1212.03 1813.45,1212.03 1814.04,1212.03 1814.63,1212.03 1815.21,1212.03 1815.8,1212.03 1816.39,1212.03 1816.97,1212.03 1817.56,1212.03 1818.14,1212.03 1818.73,1212.03 1819.32,1212.03 1819.9,1212.03 1820.49,1212.03 1821.08,1212.03 1821.66,1212.03 1822.25,1212.03 1822.84,1212.03 1823.42,1212.03 1824.01,1212.03 1824.6,1212.03 1825.18,1212.03 1825.77,1212.03 1826.35,1212.03 1826.94,1212.03 1827.53,1212.03 1828.11,1212.03 1828.7,1212.03 1829.29,1212.03 1829.87,1212.03 1830.46,1212.03 1831.05,1212.03 1831.63,1212.03 1832.22,1212.03 1832.81,1212.03 1833.39,1212.03 1833.98,1212.03 1834.56,1212.03 1835.15,1212.03 1835.74,1212.03 1836.32,1212.03 1836.91,1212.03 1837.5,1212.03 1838.08,1212.03 1838.67,1212.03 1839.26,1212.03 1839.84,1212.03 1840.43,1212.03 1841.01,1212.03 1841.6,1212.03 1842.19,1212.03 1842.77,1212.03 1843.36,1212.03 1843.95,1212.03 1844.53,1212.03 1845.12,1212.03 1845.71,1212.03 1846.29,1212.03 1846.88,1212.03 1847.47,1212.03 1848.05,1212.03 1848.64,1212.03 1849.22,1212.03 1849.81,1212.03 1850.4,1212.03 1850.98,1212.03 1851.57,1212.03 1852.16,1212.03 1852.74,1212.03 1853.33,1212.03 1853.92,1212.03 1854.5,1212.03 1855.09,1212.03 1855.68,1212.03 1856.26,1212.03 1856.85,1212.03 1857.43,1212.03 1858.02,1212.03 1858.61,1212.03 1859.19,1212.03 1859.78,1212.03 1860.37,1212.03 1860.95,1212.03 1861.54,1212.03 1862.13,1212.03 1862.71,1212.03 1863.3,1212.03 1863.88,1212.03 1864.47,1212.03 1865.06,1212.03 1865.64,1212.03 1866.23,1212.03 1866.82,1212.03 1867.4,1212.03 1867.99,1212.03 1868.58,1212.03 1869.16,1212.03 1869.75,1212.03 1870.34,1212.03 1870.92,1212.03 1871.51,1212.03 1872.09,1212.03 1872.68,1212.03 1873.27,1212.03 1873.85,1212.03 1874.44,1212.03 1875.03,1212.03 1875.61,1212.03 1876.2,1212.03 1876.79,1212.03 1877.37,1212.03 1877.96,1212.03 1878.55,1212.03 1879.13,1212.03 1879.72,1212.03 1880.3,1212.03 1880.89,1212.03 1881.48,1212.03 1882.06,1212.03 1882.65,1212.03 1883.24,1212.03 1883.82,1212.03 1884.41,1212.03 1885,1212.03 1885.58,1212.03 1886.17,1212.03 1886.76,1212.03 1887.34,1212.03 1887.93,1212.03 1888.51,1212.03 1889.1,1212.03 1889.69,1212.03 1890.27,1212.03 1890.86,1212.03 1891.45,1212.03 1892.03,1212.03 1892.62,1212.03 1893.21,1212.03 1893.79,1212.03 1894.38,1212.03 1894.96,1212.03 1895.55,1212.03 1896.14,1212.03 1896.72,1212.03 1897.31,1212.03 1897.9,1212.03 1898.48,1212.03 1899.07,1212.03 1899.66,1212.03 1900.24,1212.03 1900.83,1212.03 1901.42,1212.03 1902,1212.03 1902.59,1212.03 1903.17,1212.03 1903.76,1212.03 1904.35,1212.03 1904.93,1212.03 1905.52,1212.03 1906.11,1212.03 1906.69,1212.03 1907.28,1212.03 1907.87,1212.03 1908.45,1212.03 1909.04,1212.03 1909.63,1212.03 1910.21,1212.03 1910.8,1212.03 1911.38,1212.03 1911.97,1212.03 1912.56,1212.03 1913.14,1212.03 1913.73,1212.03 1914.32,1212.03 1914.9,1212.03 1915.49,1212.03 1916.08,1212.03 1916.66,1212.03 1917.25,1212.03 1917.83,1212.03 1918.42,1212.03 1919.01,1212.03 1919.59,1212.03 1920.18,1212.03 1920.77,1212.03 1921.35,1212.03 1921.94,1212.03 1922.53,1212.03 1923.11,1212.03 1923.7,1212.03 1924.29,1212.03 1924.87,1212.03 1925.46,1212.03 1926.04,1212.03 1926.63,1212.03 1927.22,1212.03 1927.8,1212.03 1928.39,1212.03 1928.98,1212.03 1929.56,1212.03 1930.15,1212.03 1930.74,1212.03 1931.32,1212.03 1931.91,1212.03 1932.5,1212.03 1933.08,1212.03 1933.67,1212.03 1934.25,1212.03 1934.84,1212.03 1935.43,1212.03 1936.01,1212.03 1936.6,1212.03 1937.19,1212.03 1937.77,1212.03 1938.36,1212.03 1938.95,1212.03 1939.53,1212.03 1940.12,1212.03 1940.71,1212.03 1941.29,1212.03 1941.88,1212.03 1942.46,1212.03 1943.05,1212.03 1943.64,1212.03 1944.22,1212.03 1944.81,1212.03 1945.4,1212.03 1945.98,1212.03 1946.57,1212.03 1947.16,1212.03 1947.74,1212.03 1948.33,1212.03 1948.91,1212.03 1949.5,1212.03 1950.09,1212.03 1950.67,1212.03 1951.26,1212.03 1951.85,1212.03 1952.43,1212.03 1953.02,1212.03 1953.61,1212.03 1954.19,1212.03 1954.78,1212.03 1955.37,1212.03 1955.95,1212.03 1956.54,1212.03 1957.12,1212.03 1957.71,1212.03 1958.3,1212.03 1958.88,1212.03 1959.47,1212.03 1960.06,1212.03 1960.64,1212.03 1961.23,1212.03 1961.82,1212.03 1962.4,1212.03 1962.99,1212.03 1963.58,1212.03 1964.16,1212.03 1964.75,1212.03 1965.33,1212.03 1965.92,1212.03 1966.51,1212.03 1967.09,1212.03 1967.68,1212.03 1968.27,1212.03 1968.85,1212.03 1969.44,1212.03 1970.03,1212.03 1970.61,1212.03 1971.2,1212.03 1971.78,1212.03 1972.37,1212.03 1972.96,1212.03 1973.54,1212.03 1974.13,1212.03 1974.72,1212.03 1975.3,1212.03 1975.89,1212.03 1976.48,1212.03 1977.06,1212.03 1977.65,1212.03 1978.24,1212.03 1978.82,1212.03 1979.41,1212.03 1979.99,1212.03 1980.58,1212.03 1981.17,1212.03 1981.75,1212.03 1982.34,1212.03 1982.93,1212.03 1983.51,1212.03 1984.1,1212.03 1984.69,1212.03 1985.27,1212.03 1985.86,1212.03 1986.45,1212.03 1987.03,1212.03 1987.62,1212.03 1988.2,1212.03 1988.79,1212.03 1989.38,1212.03 1989.96,1212.03 1990.55,1212.03 1991.14,1212.03 1991.72,1212.03 1992.31,1212.03 1992.9,1212.03 1993.48,1212.03 1994.07,1212.03 1994.65,1212.03 1995.24,1212.03 1995.83,1212.03 1996.41,1212.03 1997,1212.03 1997.59,1212.03 1998.17,1212.03 1998.76,1212.03 1999.35,1212.03 1999.93,1212.03 2000.52,1212.03 2001.11,1212.03 2001.69,1212.03 2002.28,1212.03 2002.86,1212.03 2003.45,1212.03 2004.04,1212.03 2004.62,1212.03 2005.21,1212.03 2005.8,1212.03 2006.38,1212.03 2006.97,1212.03 2007.56,1212.03 2008.14,1212.03 2008.73,1212.03 2009.32,1212.03 2009.9,1212.03 2010.49,1212.03 2011.07,1212.03 2011.66,1212.03 2012.25,1212.03 2012.83,1212.03 2013.42,1212.03 2014.01,1212.03 2014.59,1212.03 2015.18,1212.03 2015.77,1212.03 2016.35,1212.03 2016.94,1212.03 2017.53,1212.03 2018.11,1212.03 2018.7,1212.03 2019.28,1212.03 2019.87,1212.03 2020.46,1212.03 2021.04,1212.03 2021.63,1212.03 2022.22,1212.03 2022.8,1212.03 2023.39,1212.03 2023.98,1212.03 2024.56,1212.03 2025.15,1212.03 2025.73,1212.03 2026.32,1212.03 2026.91,1212.03 2027.49,1212.03 2028.08,1212.03 2028.67,1212.03 2029.25,1212.03 2029.84,1212.03 2030.43,1212.03 2031.01,1212.03 2031.6,1212.03 2032.19,1212.03 2032.77,1212.03 2033.36,1212.03 2033.94,1212.03 2034.53,1212.03 2035.12,1212.03 2035.7,1212.03 2036.29,1212.03 2036.88,1212.03 2037.46,1212.03 2038.05,1212.03 2038.64,1212.03 2039.22,1212.03 2039.81,1212.03 2040.4,1212.03 2040.98,1212.03 2041.57,1212.03 2042.15,1212.03 2042.74,1212.03 2043.33,1212.03 2043.91,1212.03 2044.5,1212.03 2045.09,1212.03 2045.67,1212.03 2046.26,1212.03 2046.85,1212.03 2047.43,1212.03 2048.02,1212.03 2048.6,1212.03 2049.19,1212.03 2049.78,1212.03 2050.36,1212.03 2050.95,1212.03 2051.54,1212.03 2052.12,1212.03 2052.71,1212.03 2053.3,1212.03 2053.88,1212.03 2054.47,1212.03 2055.06,1212.03 2055.64,1212.03 2056.23,1212.03 2056.81,1212.03 2057.4,1212.03 2057.99,1212.03 2058.57,1212.03 2059.16,1212.03 2059.75,1212.03 2060.33,1212.03 2060.92,1212.03 2061.51,1212.03 2062.09,1212.03 2062.68,1212.03 2063.27,1212.03 2063.85,1212.03 2064.44,1212.03 2065.02,1212.03 2065.61,1212.03 2066.2,1212.03 2066.78,1212.03 2067.37,1212.03 2067.96,1212.03 2068.54,1212.03 2069.13,1212.03 2069.72,1212.03 2070.3,1212.03 2070.89,1212.03 2071.48,1212.03 2072.06,1212.03 2072.65,1212.03 2073.23,1212.03 2073.82,1212.03 2074.41,1212.03 2074.99,1212.03 2075.58,1212.03 2076.17,1212.03 2076.75,1212.03 2077.34,1212.03 2077.93,1212.03 2078.51,1212.03 2079.1,1212.03 2079.68,1212.03 2080.27,1212.03 2080.86,1212.03 2081.44,1212.03 2082.03,1212.03 2082.62,1212.03 2083.2,1212.03 2083.79,1212.03 2084.38,1212.03 2084.96,1212.03 2085.55,1212.03 2086.14,1212.03 2086.72,1212.03 2087.31,1212.03 2087.89,1212.03 2088.48,1212.03 2089.07,1212.03 2089.65,1212.03 2090.24,1212.03 2090.83,1212.03 2091.41,1212.03 2092,1212.03 2092.59,1212.03 2093.17,1212.03 2093.76,1212.03 2094.35,1212.03 2094.93,1212.03 2095.52,1212.03 2096.1,1212.03 2096.69,1212.03 2097.28,1212.03 2097.86,1212.03 2098.45,1212.03 2099.04,1212.03 2099.62,1212.03 2100.21,1212.03 2100.8,1212.03 2101.38,1212.03 2101.97,1212.03 2102.55,1212.03 2103.14,1212.03 2103.73,1212.03 2104.31,1212.03 2104.9,1212.03 2105.49,1212.03 2106.07,1212.03 2106.66,1212.03 2107.25,1212.03 2107.83,1212.03 2108.42,1212.03 2109.01,1212.03 2109.59,1212.03 2110.18,1212.03 2110.76,1212.03 2111.35,1212.03 2111.94,1212.03 2112.52,1212.03 2113.11,1212.03 2113.7,1212.03 2114.28,1212.03 2114.87,1212.03 2115.46,1212.03 2116.04,1212.03 2116.63,1212.03 2117.22,1212.03 2117.8,1212.03 2118.39,1212.03 2118.97,1212.03 2119.56,1212.03 2120.15,1212.03 2120.73,1212.03 2121.32,1212.03 2121.91,1212.03 2122.49,1212.03 2123.08,1212.03 2123.67,1212.03 2124.25,1212.03 2124.84,1212.03 2125.42,1212.03 2126.01,1212.03 2126.6,1212.03 2127.18,1212.03 2127.77,1212.03 2128.36,1212.03 2128.94,1212.03 2129.53,1212.03 2130.12,1212.03 2130.7,1212.03 2131.29,1212.03 2131.88,1212.03 2132.46,1212.03 2133.05,1212.03 2133.63,1212.03 2134.22,1212.03 2134.81,1212.03 2135.39,1212.03 2135.98,1212.03 2136.57,1212.03 2137.15,1212.03 2137.74,1212.03 2138.33,1212.03 2138.91,1212.03 2139.5,1212.03 2140.09,1212.03 2140.67,1212.03 2141.26,1212.03 2141.84,1212.03 2142.43,1212.03 2143.02,1212.03 2143.6,1212.03 2144.19,1212.03 2144.78,1212.03 2145.36,1212.03 2145.95,1212.03 2146.54,1212.03 2147.12,1212.03 2147.71,1212.03 2148.3,1212.03 2148.88,1212.03 2149.47,1212.03 2150.05,1212.03 2150.64,1212.03 2151.23,1212.03 2151.81,1212.03 2152.4,1212.03 2152.99,1212.03 2153.57,1212.03 2154.16,1212.03 2154.75,1212.03 2155.33,1212.03 2155.92,1212.03 2156.5,1212.03 2157.09,1212.03 2157.68,1212.03 2158.26,1212.03 \"/>\n<path clip-path=\"url(#clip642)\" d=\"M986.025 1211.91 L986.612 1211.91 L987.198 1211.91 L987.785 1211.91 L988.371 1211.91 L988.957 1211.91 L989.544 1211.91 L990.13 1211.91 L990.717 1211.91 L991.303 1211.91 L991.889 1211.91 L992.476 1211.91 L993.062 1211.91 L993.649 1211.91 L994.235 1211.91 L994.822 1211.91 L995.408 1211.91 L995.994 1211.91 L996.581 1211.91 L997.167 1211.91 L997.754 1211.91 L998.34 1211.91 L998.926 1211.91 L999.513 1211.91 L1000.1 1211.91 L1000.69 1211.91 L1001.27 1211.91 L1001.86 1211.91 L1002.44 1211.91 L1003.03 1211.91 L1003.62 1211.91 L1004.2 1211.91 L1004.79 1211.91 L1005.38 1211.91 L1005.96 1211.91 L1006.55 1211.91 L1007.14 1211.91 L1007.72 1211.91 L1008.31 1211.91 L1008.9 1211.91 L1009.48 1211.91 L1010.07 1211.91 L1010.65 1211.91 L1011.24 1211.91 L1011.83 1211.91 L1012.41 1211.91 L1013 1211.91 L1013.59 1211.91 L1014.17 1211.91 L1014.76 1211.91 L1015.35 1211.91 L1015.93 1211.91 L1016.52 1211.91 L1017.11 1211.91 L1017.69 1211.91 L1018.28 1211.91 L1018.86 1211.91 L1019.45 1211.91 L1020.04 1211.91 L1020.62 1211.91 L1021.21 1211.91 L1021.8 1211.91 L1022.38 1211.91 L1022.97 1211.91 L1023.56 1211.91 L1024.14 1211.91 L1024.73 1211.91 L1025.32 1211.91 L1025.9 1211.91 L1026.49 1211.91 L1027.07 1211.91 L1027.66 1211.91 L1028.25 1211.91 L1028.83 1211.91 L1029.42 1211.91 L1030.01 1211.91 L1030.59 1211.91 L1031.18 1211.91 L1031.77 1211.91 L1032.35 1211.91 L1032.94 1211.91 L1033.52 1211.91 L1034.11 1211.91 L1034.7 1211.91 L1035.28 1211.91 L1035.87 1211.91 L1036.46 1211.91 L1037.04 1211.91 L1037.63 1211.91 L1038.22 1211.91 L1038.8 1211.91 L1039.39 1211.91 L1039.98 1211.91 L1040.56 1211.91 L1041.15 1211.91 L1041.73 1211.91 L1042.32 1211.91 L1042.91 1211.91 L1043.49 1211.91 L1044.08 1211.91 L1044.67 1211.91 L1045.25 1211.91 L1045.84 1211.91 L1046.43 1211.91 L1047.01 1211.91 L1047.6 1211.91 L1048.19 1211.91 L1048.77 1211.91 L1049.36 1211.91 L1049.94 1211.91 L1050.53 1211.91 L1051.12 1211.91 L1051.7 1211.91 L1052.29 1211.91 L1052.88 1211.91 L1053.46 1211.91 L1054.05 1211.91 L1054.64 1211.91 L1055.22 1211.91 L1055.81 1211.91 L1056.39 1211.91 L1056.98 1211.91 L1057.57 1211.91 L1058.15 1211.91 L1058.74 1211.91 L1059.33 1211.91 L1059.91 1211.91 L1060.5 1211.91 L1061.09 1211.91 L1061.67 1211.91 L1062.26 1211.91 L1062.85 1211.91 L1063.43 1211.91 L1064.02 1211.91 L1064.6 1211.91 L1065.19 1211.91 L1065.78 1211.91 L1066.36 1211.91 L1066.95 1211.91 L1067.54 1211.91 L1068.12 1211.91 L1068.71 1211.91 L1069.3 1211.91 L1069.88 1211.91 L1070.47 1211.91 L1071.06 1211.91 L1071.64 1211.91 L1072.23 1211.91 L1072.81 1211.91 L1073.4 1211.91 L1073.99 1211.91 L1074.57 1211.91 L1075.16 1211.91 L1075.75 1211.91 L1076.33 1211.91 L1076.92 1211.91 L1077.51 1211.91 L1078.09 1211.91 L1078.68 1211.91 L1079.26 1211.91 L1079.85 1211.91 L1080.44 1211.91 L1081.02 1211.91 L1081.61 1211.91 L1082.2 1211.91 L1082.78 1211.91 L1083.37 1211.91 L1083.96 1211.91 L1084.54 1211.91 L1085.13 1211.91 L1085.72 1211.91 L1086.3 1211.91 L1086.89 1211.91 L1087.47 1211.91 L1088.06 1211.91 L1088.65 1211.91 L1089.23 1211.91 L1089.82 1211.91 L1090.41 1211.91 L1090.99 1211.91 L1091.58 1211.91 L1092.17 1211.91 L1092.75 1211.91 L1093.34 1211.91 L1093.93 1211.91 L1094.51 1211.91 L1095.1 1211.91 L1095.68 1211.91 L1096.27 1211.91 L1096.86 1211.91 L1097.44 1211.91 L1098.03 1211.91 L1098.62 1211.91 L1099.2 1211.91 L1099.79 1211.91 L1100.38 1211.91 L1100.96 1211.91 L1101.55 1211.91 L1102.14 1211.91 L1102.72 1211.91 L1103.31 1211.91 L1103.89 1211.91 L1104.48 1211.91 L1105.07 1211.91 L1105.65 1211.91 L1106.24 1211.91 L1106.83 1211.91 L1107.41 1211.91 L1108 1211.91 L1108.59 1211.91 L1109.17 1211.91 L1109.76 1211.91 L1110.34 1211.91 L1110.93 1211.91 L1111.52 1211.91 L1112.1 1211.91 L1112.69 1211.91 L1113.28 1211.91 L1113.86 1211.91 L1114.45 1211.91 L1115.04 1211.91 L1115.62 1211.91 L1116.21 1211.91 L1116.8 1211.91 L1117.38 1211.91 L1117.97 1211.91 L1118.55 1211.91 L1119.14 1211.91 L1119.73 1211.91 L1120.31 1211.91 L1120.9 1211.91 L1121.49 1211.91 L1122.07 1211.91 L1122.66 1211.91 L1123.25 1211.91 L1123.83 1211.91 L1124.42 1211.91 L1125.01 1211.91 L1125.59 1211.91 L1126.18 1211.91 L1126.76 1211.91 L1127.35 1211.91 L1127.94 1211.91 L1128.52 1211.91 L1129.11 1211.91 L1129.7 1211.91 L1130.28 1211.91 L1130.87 1211.91 L1131.46 1211.91 L1132.04 1211.91 L1132.63 1211.91 L1133.21 1211.91 L1133.8 1211.91 L1134.39 1211.91 L1134.97 1211.91 L1135.56 1211.91 L1136.15 1211.91 L1136.73 1211.91 L1137.32 1211.91 L1137.91 1211.91 L1138.49 1211.91 L1139.08 1211.91 L1139.67 1211.91 L1140.25 1211.91 L1140.84 1211.91 L1141.42 1211.91 L1142.01 1211.91 L1142.6 1211.91 L1143.18 1211.91 L1143.77 1211.91 L1144.36 1211.91 L1144.94 1211.91 L1145.53 1211.91 L1146.12 1211.91 L1146.7 1211.91 L1147.29 1211.91 L1147.88 1211.91 L1148.46 1211.91 L1149.05 1211.91 L1149.63 1211.91 L1150.22 1211.91 L1150.81 1211.91 L1151.39 1211.91 L1151.98 1211.91 L1152.57 1211.91 L1153.15 1211.91 L1153.74 1211.91 L1154.33 1211.91 L1154.91 1211.91 L1155.5 1211.91 L1156.09 1211.91 L1156.67 1211.91 L1157.26 1211.91 L1157.84 1211.91 L1158.43 1211.91 L1159.02 1211.91 L1159.6 1211.91 L1160.19 1211.91 L1160.78 1211.91 L1161.36 1211.91 L1161.95 1211.91 L1162.54 1211.91 L1163.12 1211.91 L1163.71 1211.91 L1164.29 1211.91 L1164.88 1211.91 L1165.47 1211.91 L1166.05 1211.91 L1166.64 1211.91 L1167.23 1211.91 L1167.81 1211.91 L1168.4 1211.91 L1168.99 1211.91 L1169.57 1211.91 L1170.16 1211.91 L1170.75 1211.91 L1171.33 1211.91 L1171.92 1211.91 L1172.5 1211.91 L1173.09 1211.91 L1173.68 1211.91 L1174.26 1211.91 L1174.85 1211.91 L1175.44 1211.91 L1176.02 1211.91 L1176.61 1211.91 L1177.2 1211.91 L1177.78 1211.91 L1178.37 1211.91 L1178.96 1211.91 L1179.54 1211.91 L1180.13 1211.91 L1180.71 1211.91 L1181.3 1211.91 L1181.89 1211.91 L1182.47 1211.91 L1183.06 1211.91 L1183.65 1211.91 L1184.23 1211.91 L1184.82 1211.91 L1185.41 1211.91 L1185.99 1211.91 L1186.58 1211.91 L1187.16 1211.91 L1187.75 1211.91 L1188.34 1211.91 L1188.92 1211.91 L1189.51 1211.91 L1190.1 1211.91 L1190.68 1211.91 L1191.27 1211.91 L1191.86 1211.91 L1192.44 1211.91 L1193.03 1211.91 L1193.62 1211.91 L1194.2 1211.91 L1194.79 1211.91 L1195.37 1211.91 L1195.96 1211.91 L1196.55 1211.91 L1197.13 1211.91 L1197.72 1211.91 L1198.31 1211.91 L1198.89 1211.91 L1199.48 1211.91 L1200.07 1211.91 L1200.65 1211.91 L1201.24 1211.91 L1201.83 1211.91 L1202.41 1211.91 L1203 1211.91 L1203.58 1211.91 L1204.17 1211.91 L1204.76 1211.91 L1205.34 1211.91 L1205.93 1211.91 L1206.52 1211.91 L1207.1 1211.91 L1207.69 1211.91 L1208.28 1211.91 L1208.86 1211.91 L1209.45 1211.91 L1210.03 1211.91 L1210.62 1211.91 L1211.21 1211.91 L1211.79 1211.91 L1212.38 1211.91 L1212.97 1211.91 L1213.55 1211.91 L1214.14 1211.91 L1214.73 1211.91 L1215.31 1211.91 L1215.9 1211.91 L1216.49 1211.91 L1217.07 1211.91 L1217.66 1211.91 L1218.24 1211.91 L1218.83 1211.91 L1219.42 1211.91 L1220 1211.91 L1220.59 1211.91 L1221.18 1211.91 L1221.76 1211.91 L1222.35 1211.91 L1222.94 1211.91 L1223.52 1211.91 L1224.11 1211.91 L1224.7 1211.91 L1225.28 1211.91 L1225.87 1211.91 L1226.45 1211.91 L1227.04 1211.91 L1227.63 1211.91 L1228.21 1211.91 L1228.8 1211.91 L1229.39 1211.91 L1229.97 1211.91 L1230.56 1211.91 L1231.15 1211.91 L1231.73 1211.91 L1232.32 1211.91 L1232.91 1211.91 L1233.49 1211.91 L1234.08 1211.91 L1234.66 1211.91 L1235.25 1211.91 L1235.84 1211.91 L1236.42 1211.91 L1237.01 1211.91 L1237.6 1211.91 L1238.18 1211.91 L1238.77 1211.91 L1239.36 1211.91 L1239.94 1211.91 L1240.53 1211.91 L1241.11 1211.91 L1241.7 1211.91 L1242.29 1211.91 L1242.87 1211.91 L1243.46 1211.91 L1244.05 1211.91 L1244.63 1211.91 L1245.22 1211.91 L1245.81 1211.91 L1246.39 1211.91 L1246.98 1211.91 L1247.57 1211.91 L1248.15 1211.91 L1248.74 1211.91 L1249.32 1211.91 L1249.91 1211.91 L1250.5 1211.91 L1251.08 1211.91 L1251.67 1211.91 L1252.26 1211.91 L1252.84 1211.91 L1253.43 1211.91 L1254.02 1211.91 L1254.6 1211.91 L1255.19 1211.91 L1255.78 1211.91 L1256.36 1211.91 L1256.95 1211.91 L1257.53 1211.91 L1258.12 1211.91 L1258.71 1211.91 L1259.29 1211.91 L1259.88 1211.91 L1260.47 1211.91 L1261.05 1211.91 L1261.64 1211.91 L1262.23 1211.91 L1262.81 1211.91 L1263.4 1211.91 L1263.98 1211.91 L1264.57 1211.91 L1265.16 1211.91 L1265.74 1211.91 L1266.33 1211.91 L1266.92 1211.91 L1267.5 1211.91 L1268.09 1211.91 L1268.68 1211.91 L1269.26 1211.91 L1269.85 1211.91 L1270.44 1211.91 L1271.02 1211.91 L1271.61 1211.91 L1272.19 1211.91 L1272.78 1211.91 L1273.37 1211.91 L1273.95 1211.91 L1274.54 1211.91 L1275.13 1211.91 L1275.71 1211.91 L1276.3 1211.91 L1276.89 1211.91 L1277.47 1211.91 L1278.06 1211.91 L1278.65 1211.91 L1279.23 1211.91 L1279.82 1211.91 L1280.4 1211.91 L1280.99 1211.91 L1281.58 1211.91 L1282.16 1211.91 L1282.75 1211.91 L1283.34 1211.91 L1283.92 1211.91 L1284.51 1211.91 L1285.1 1211.91 L1285.68 1211.91 L1286.27 1211.91 L1286.86 1211.91 L1287.44 1211.91 L1288.03 1211.91 L1288.61 1211.91 L1289.2 1211.91 L1289.79 1211.91 L1290.37 1211.91 L1290.96 1211.91 L1291.55 1211.91 L1292.13 1211.91 L1292.72 1211.91 L1293.31 1211.91 L1293.89 1211.91 L1294.48 1211.91 L1295.06 1211.91 L1295.65 1211.91 L1296.24 1211.91 L1296.82 1211.91 L1297.41 1211.91 L1298 1211.91 L1298.58 1211.91 L1299.17 1211.91 L1299.76 1211.91 L1300.34 1211.91 L1300.93 1211.91 L1301.52 1211.91 L1302.1 1211.91 L1302.69 1211.91 L1303.27 1211.91 L1303.86 1211.91 L1304.45 1211.91 L1305.03 1211.91 L1305.62 1211.91 L1306.21 1211.91 L1306.79 1211.91 L1307.38 1211.91 L1307.97 1211.91 L1308.55 1211.91 L1309.14 1211.91 L1309.73 1211.91 L1310.31 1211.91 L1310.9 1211.91 L1311.48 1211.91 L1312.07 1211.91 L1312.66 1211.91 L1313.24 1211.91 L1313.83 1211.91 L1314.42 1211.91 L1315 1211.91 L1315.59 1211.91 L1316.18 1211.91 L1316.76 1211.91 L1317.35 1211.91 L1317.93 1211.91 L1318.52 1211.91 L1319.11 1211.91 L1319.69 1211.91 L1320.28 1211.91 L1320.87 1211.91 L1321.45 1211.91 L1322.04 1211.91 L1322.63 1211.91 L1323.21 1211.91 L1323.8 1211.91 L1324.39 1211.91 L1324.97 1211.91 L1325.56 1211.91 L1326.14 1211.91 L1326.73 1211.91 L1327.32 1211.91 L1327.9 1211.91 L1328.49 1211.91 L1329.08 1211.91 L1329.66 1211.91 L1330.25 1211.91 L1330.84 1211.91 L1331.42 1211.91 L1332.01 1211.91 L1332.6 1211.91 L1333.18 1211.91 L1333.77 1211.91 L1334.35 1211.91 L1334.94 1211.91 L1335.53 1211.91 L1336.11 1211.91 L1336.7 1211.91 L1337.29 1211.91 L1337.87 1211.91 L1338.46 1211.91 L1339.05 1211.91 L1339.63 1211.91 L1340.22 1211.91 L1340.8 1211.91 L1341.39 1211.91 L1341.98 1211.91 L1342.56 1211.91 L1343.15 1211.91 L1343.74 1211.91 L1344.32 1211.91 L1344.91 1211.91 L1345.5 1211.91 L1346.08 1211.91 L1346.67 1211.91 L1347.26 1211.91 L1347.84 1211.91 L1348.43 1211.91 L1349.01 1211.91 L1349.6 1211.91 L1350.19 1211.91 L1350.77 1211.91 L1351.36 1211.91 L1351.95 1211.91 L1352.53 1211.91 L1353.12 1211.91 L1353.71 1211.91 L1354.29 1211.91 L1354.88 1211.91 L1355.47 1211.91 L1356.05 1211.91 L1356.64 1211.91 L1357.22 1211.91 L1357.81 1211.91 L1358.4 1211.91 L1358.98 1211.91 L1359.57 1211.91 L1360.16 1211.91 L1360.74 1211.91 L1361.33 1211.91 L1361.92 1211.91 L1362.5 1211.91 L1363.09 1211.91 L1363.68 1211.91 L1364.26 1211.91 L1364.85 1211.91 L1365.43 1211.91 L1366.02 1211.91 L1366.61 1211.91 L1367.19 1211.91 L1367.78 1211.91 L1368.37 1211.91 L1368.95 1211.91 L1369.54 1211.91 L1370.13 1211.91 L1370.71 1211.91 L1371.3 1211.91 L1371.88 1211.91 L1372.47 1211.91 L1373.06 1211.91 L1373.64 1211.91 L1374.23 1211.91 L1374.82 1211.91 L1375.4 1211.91 L1375.99 1211.91 L1376.58 1211.91 L1377.16 1211.91 L1377.75 1211.91 L1378.34 1211.91 L1378.92 1211.91 L1379.51 1211.91 L1380.09 1211.91 L1380.68 1211.91 L1381.27 1211.91 L1381.85 1211.91 L1382.44 1211.91 L1383.03 1211.91 L1383.61 1211.91 L1384.2 1211.91 L1384.79 1211.91 L1385.37 1211.91 L1385.96 1211.91 L1386.55 1211.91 L1387.13 1211.91 L1387.72 1211.91 L1388.3 1211.91 L1388.89 1211.91 L1389.48 1211.91 L1390.06 1211.91 L1390.65 1211.91 L1391.24 1211.91 L1391.82 1211.91 L1392.41 1211.91 L1393 1211.91 L1393.58 1211.91 L1394.17 1211.91 L1394.75 1211.91 L1395.34 1211.91 L1395.93 1211.91 L1396.51 1211.91 L1397.1 1211.91 L1397.69 1211.91 L1398.27 1211.91 L1398.86 1211.91 L1399.45 1211.91 L1400.03 1211.91 L1400.62 1211.91 L1401.21 1211.91 L1401.79 1211.91 L1402.38 1211.91 L1402.96 1211.91 L1403.55 1211.91 L1404.14 1211.91 L1404.72 1211.91 L1405.31 1211.91 L1405.9 1211.91 L1406.48 1211.91 L1407.07 1211.91 L1407.66 1211.91 L1408.24 1211.91 L1408.83 1211.91 L1409.42 1211.91 L1410 1211.91 L1410.59 1211.91 L1411.17 1211.91 L1411.76 1211.91 L1412.35 1211.91 L1412.93 1211.91 L1413.52 1211.91 L1414.11 1211.91 L1414.69 1211.91 L1415.28 1211.91 L1415.87 1211.91 L1416.45 1211.91 L1417.04 1211.91 L1417.63 1211.91 L1418.21 1211.91 L1418.8 1211.91 L1419.38 1211.91 L1419.97 1211.91 L1420.56 1211.91 L1421.14 1211.91 L1421.73 1211.91 L1422.32 1211.91 L1422.9 1211.91 L1423.49 1211.91 L1424.08 1211.91 L1424.66 1211.91 L1425.25 1211.91 L1425.83 1211.91 L1426.42 1211.91 L1427.01 1211.91 L1427.59 1211.91 L1428.18 1211.91 L1428.77 1211.91 L1429.35 1211.91 L1429.94 1211.91 L1430.53 1211.91 L1431.11 1211.91 L1431.7 1211.91 L1432.29 1211.91 L1432.87 1211.91 L1433.46 1211.91 L1434.04 1211.91 L1434.63 1211.91 L1435.22 1211.91 L1435.8 1211.91 L1436.39 1211.91 L1436.98 1211.91 L1437.56 1211.91 L1438.15 1211.91 L1438.74 1211.91 L1439.32 1211.91 L1439.91 1211.91 L1440.5 1211.91 L1441.08 1211.91 L1441.67 1211.91 L1442.25 1211.91 L1442.84 1211.91 L1443.43 1211.91 L1444.01 1211.91 L1444.6 1211.91 L1445.19 1211.91 L1445.77 1211.91 L1446.36 1211.91 L1446.95 1211.91 L1447.53 1211.91 L1448.12 1211.91 L1448.7 1211.91 L1449.29 1211.91 L1449.88 1211.91 L1450.46 1211.91 L1451.05 1211.91 L1451.64 1211.91 L1452.22 1211.91 L1452.81 1211.91 L1453.4 1211.91 L1453.98 1211.91 L1454.57 1211.91 L1455.16 1211.91 L1455.74 1211.91 L1456.33 1211.91 L1456.91 1211.91 L1457.5 1211.91 L1458.09 1211.91 L1458.67 1211.91 L1459.26 1211.91 L1459.85 1211.91 L1460.43 1211.91 L1461.02 1211.91 L1461.61 1211.91 L1462.19 1211.91 L1462.78 1211.91 L1463.37 1211.91 L1463.95 1211.91 L1464.54 1211.91 L1465.12 1211.91 L1465.71 1211.91 L1466.3 1211.91 L1466.88 1211.91 L1467.47 1211.91 L1468.06 1211.91 L1468.64 1211.91 L1469.23 1211.91 L1469.82 1211.91 L1470.4 1211.91 L1470.99 1211.91 L1471.57 1211.91 L1472.16 1211.91 L1472.75 1211.91 L1473.33 1211.91 L1473.92 1211.91 L1474.51 1211.91 L1475.09 1211.91 L1475.68 1211.91 L1476.27 1211.91 L1476.85 1211.91 L1477.44 1211.91 L1478.03 1211.91 L1478.61 1211.91 L1479.2 1211.91 L1479.78 1211.91 L1480.37 1211.91 L1480.96 1211.91 L1481.54 1211.91 L1482.13 1211.91 L1482.72 1211.91 L1483.3 1211.91 L1483.89 1211.91 L1484.48 1211.91 L1485.06 1211.91 L1485.65 1211.91 L1486.24 1211.91 L1486.82 1211.91 L1487.41 1211.91 L1487.99 1211.91 L1488.58 1211.91 L1489.17 1211.91 L1489.75 1211.91 L1490.34 1211.91 L1490.93 1211.91 L1491.51 1211.91 L1492.1 1211.91 L1492.69 1211.91 L1493.27 1211.91 L1493.86 1211.91 L1494.45 1211.91 L1495.03 1211.91 L1495.62 1211.91 L1496.2 1211.91 L1496.79 1211.91 L1497.38 1211.91 L1497.96 1211.91 L1498.55 1211.91 L1499.14 1211.91 L1499.72 1211.91 L1500.31 1211.91 L1500.9 1211.91 L1501.48 1211.91 L1502.07 1211.91 L1502.65 1211.91 L1503.24 1211.91 L1503.83 1211.91 L1504.41 1211.91 L1505 1211.91 L1505.59 1211.91 L1506.17 1211.91 L1506.76 1211.91 L1507.35 1211.91 L1507.93 1211.91 L1508.52 1211.91 L1509.11 1211.91 L1509.69 1211.91 L1510.28 1211.91 L1510.86 1211.91 L1511.45 1211.91 L1512.04 1211.91 L1512.62 1211.91 L1513.21 1211.91 L1513.8 1211.91 L1514.38 1211.91 L1514.97 1211.91 L1515.56 1211.91 L1516.14 1211.91 L1516.73 1211.91 L1517.32 1211.91 L1517.9 1211.91 L1518.49 1211.91 L1519.07 1211.91 L1519.66 1211.91 L1520.25 1211.91 L1520.83 1211.91 L1521.42 1211.91 L1522.01 1211.91 L1522.59 1211.91 L1523.18 1211.91 L1523.77 1211.91 L1524.35 1211.91 L1524.94 1211.91 L1525.52 1211.91 L1526.11 1211.91 L1526.7 1211.91 L1527.28 1211.91 L1527.87 1211.91 L1528.46 1211.91 L1529.04 1211.91 L1529.63 1211.91 L1530.22 1211.91 L1530.8 1211.91 L1531.39 1211.91 L1531.98 1211.91 L1532.56 1211.91 L1533.15 1211.91 L1533.73 1211.91 L1534.32 1211.91 L1534.91 1211.91 L1535.49 1211.91 L1536.08 1211.91 L1536.67 1211.91 L1537.25 1211.91 L1537.84 1211.91 L1538.43 1211.91 L1539.01 1211.91 L1539.6 1211.91 L1540.19 1211.91 L1540.77 1211.91 L1541.36 1211.91 L1541.94 1211.91 L1542.53 1211.91 L1543.12 1211.91 L1543.7 1211.91 L1544.29 1211.91 L1544.88 1211.91 L1545.46 1211.91 L1546.05 1211.91 L1546.64 1211.91 L1547.22 1211.91 L1547.81 1211.91 L1548.4 1211.91 L1548.98 1211.91 L1549.57 1211.91 L1550.15 1211.91 L1550.74 1211.91 L1551.33 1211.91 L1551.91 1211.91 L1552.5 1211.91 L1553.09 1211.91 L1553.67 1211.91 L1554.26 1211.91 L1554.85 1211.91 L1555.43 1211.91 L1556.02 1211.91 L1556.6 1211.91 L1557.19 1211.91 L1557.78 1211.91 L1558.36 1211.91 L1558.95 1211.91 L1559.54 1211.91 L1560.12 1211.91 L1560.71 1211.91 L1561.3 1211.91 L1561.88 1211.91 L1562.47 1211.91 L1563.06 1211.91 L1563.64 1211.91 L1564.23 1211.91 L1564.81 1211.91 L1565.4 1211.91 L1565.99 1211.91 L1566.57 1211.91 L1567.16 1211.91 L1567.75 1211.91 L1568.33 1211.91 L1568.92 1211.91 L1569.51 1211.91 L1570.09 1211.91 L1570.68 1211.91 L1571.27 1211.91 L1571.85 1211.91 L1572.44 1211.91 L1573.02 1211.91 L1573.61 1211.91 L1574.2 1211.91 L1574.78 1211.91 L1575.37 1211.91 L1575.96 1211.91 L1576.54 1211.91 L1577.13 1211.91 L1577.72 1211.91 L1578.3 1211.91 L1578.89 1211.91 L1579.47 1211.91 L1580.06 1211.91 L1580.65 1211.91 L1581.23 1211.91 L1581.82 1211.91 L1582.41 1211.91 L1582.99 1211.91 L1583.58 1211.91 L1584.17 1211.91 L1584.75 1211.91 L1585.34 1211.91 L1585.93 1211.91 L1586.51 1211.91 L1587.1 1211.91 L1587.68 1211.91 L1588.27 1211.91 L1588.86 1211.91 L1589.44 1211.91 L1590.03 1211.91 L1590.62 1211.91 L1591.2 1211.91 L1591.79 1211.91 L1592.38 1211.91 L1592.96 1211.91 L1593.55 1211.91 L1594.14 1211.91 L1594.72 1211.91 L1595.31 1211.91 L1595.89 1211.91 L1596.48 1211.91 L1597.07 1211.91 L1597.65 1211.91 L1598.24 1211.91 L1598.83 1211.91 L1599.41 1211.91 L1600 1211.91 L1600.59 1211.91 L1601.17 1211.91 L1601.76 1211.91 L1602.34 1211.91 L1602.93 1211.91 L1603.52 1211.91 L1604.1 1211.91 L1604.69 1211.91 L1605.28 1211.91 L1605.86 1211.91 L1606.45 1211.91 L1607.04 1211.91 L1607.62 1211.91 L1608.21 1211.91 L1608.8 1211.91 L1609.38 1211.91 L1609.97 1211.91 L1610.55 1211.91 L1611.14 1211.91 L1611.73 1211.91 L1612.31 1211.91 L1612.9 1211.91 L1613.49 1211.91 L1614.07 1211.91 L1614.66 1211.91 L1615.25 1211.91 L1615.83 1211.91 L1616.42 1211.91 L1617.01 1211.91 L1617.59 1211.91 L1618.18 1211.91 L1618.76 1211.91 L1619.35 1211.91 L1619.94 1211.91 L1620.52 1211.91 L1621.11 1211.91 L1621.7 1211.91 L1622.28 1211.91 L1622.87 1211.91 L1623.46 1211.91 L1624.04 1211.91 L1624.63 1211.91 L1625.22 1211.91 L1625.8 1211.91 L1626.39 1211.91 L1626.97 1211.91 L1627.56 1211.91 L1628.15 1211.91 L1628.73 1211.91 L1629.32 1211.91 L1629.91 1211.91 L1630.49 1211.91 L1631.08 1211.91 L1631.67 1211.91 L1632.25 1211.91 L1632.84 1211.91 L1633.42 1211.91 L1634.01 1211.91 L1634.6 1211.91 L1635.18 1211.91 L1635.77 1211.91 L1636.36 1211.91 L1636.94 1211.91 L1637.53 1211.91 L1638.12 1211.91 L1638.7 1211.91 L1639.29 1211.91 L1639.88 1211.91 L1640.46 1211.91 L1641.05 1211.91 L1641.63 1211.91 L1642.22 1211.91 L1642.81 1211.91 L1643.39 1211.91 L1643.98 1211.91 L1644.57 1211.91 L1645.15 1211.91 L1645.74 1211.91 L1646.33 1211.91 L1646.91 1211.91 L1647.5 1211.91 L1648.09 1211.91 L1648.67 1211.91 L1649.26 1211.91 L1649.84 1211.91 L1650.43 1211.91 L1651.02 1211.91 L1651.6 1211.91 L1652.19 1211.91 L1652.78 1211.91 L1653.36 1211.91 L1653.95 1211.91 L1654.54 1211.91 L1655.12 1211.91 L1655.71 1211.91 L1656.29 1211.91 L1656.88 1211.91 L1657.47 1211.91 L1658.05 1211.91 L1658.64 1211.91 L1659.23 1211.91 L1659.81 1211.91 L1660.4 1211.91 L1660.99 1211.91 L1661.57 1211.91 L1662.16 1211.91 L1662.75 1211.91 L1663.33 1211.91 L1663.92 1211.91 L1664.5 1211.91 L1665.09 1211.91 L1665.68 1211.91 L1666.26 1211.91 L1666.85 1211.91 L1667.44 1211.91 L1668.02 1211.91 L1668.61 1211.91 L1669.2 1211.91 L1669.78 1211.91 L1670.37 1211.91 L1670.96 1211.91 L1671.54 1211.91 L1672.13 1211.91 L1672.71 1211.91 L1673.3 1211.91 L1673.89 1211.91 L1674.47 1211.91 L1675.06 1211.91 L1675.65 1211.91 L1676.23 1211.91 L1676.82 1211.91 L1677.41 1211.91 L1677.99 1211.91 L1678.58 1211.91 L1679.17 1211.91 L1679.75 1211.91 L1680.34 1211.91 L1680.92 1211.91 L1681.51 1211.91 L1682.1 1211.91 L1682.68 1211.91 L1683.27 1211.91 L1683.86 1211.91 L1684.44 1211.91 L1685.03 1211.91 L1685.62 1211.91 L1686.2 1211.91 L1686.79 1211.91 L1687.37 1211.91 L1687.96 1211.91 L1688.55 1211.91 L1689.13 1211.91 L1689.72 1211.91 L1690.31 1211.91 L1690.89 1211.91 L1691.48 1211.91 L1692.07 1211.91 L1692.65 1211.91 L1693.24 1211.91 L1693.83 1211.91 L1694.41 1211.91 L1695 1211.91 L1695.58 1211.91 L1696.17 1211.91 L1696.76 1211.91 L1697.34 1211.91 L1697.93 1211.91 L1698.52 1211.91 L1699.1 1211.91 L1699.69 1211.91 L1700.28 1211.91 L1700.86 1211.91 L1701.45 1211.91 L1702.04 1211.91 L1702.62 1211.91 L1703.21 1211.91 L1703.79 1211.91 L1704.38 1211.91 L1704.97 1211.91 L1705.55 1211.91 L1706.14 1211.91 L1706.73 1211.91 L1707.31 1211.91 L1707.9 1211.91 L1708.49 1211.91 L1709.07 1211.91 L1709.66 1211.91 L1710.24 1211.91 L1710.83 1211.91 L1711.42 1211.91 L1712 1211.91 L1712.59 1211.91 L1713.18 1211.91 L1713.76 1211.91 L1714.35 1211.91 L1714.94 1211.91 L1715.52 1211.91 L1716.11 1211.91 L1716.7 1211.91 L1717.28 1211.91 L1717.87 1211.91 L1718.45 1211.91 L1719.04 1211.91 L1719.63 1211.91 L1720.21 1211.91 L1720.8 1211.91 L1721.39 1211.91 L1721.97 1211.91 L1722.56 1211.91 L1723.15 1211.91 L1723.73 1211.91 L1724.32 1211.91 L1724.91 1211.91 L1725.49 1211.91 L1726.08 1211.91 L1726.66 1211.91 L1727.25 1211.91 L1727.84 1211.91 L1728.42 1211.91 L1729.01 1211.91 L1729.6 1211.91 L1730.18 1211.91 L1730.77 1211.91 L1731.36 1211.91 L1731.94 1211.91 L1732.53 1211.91 L1733.11 1211.91 L1733.7 1211.91 L1734.29 1211.91 L1734.87 1211.91 L1735.46 1211.91 L1736.05 1211.91 L1736.63 1211.91 L1737.22 1211.91 L1737.81 1211.91 L1738.39 1211.91 L1738.98 1211.91 L1739.57 1211.91 L1740.15 1211.91 L1740.74 1211.91 L1741.32 1211.91 L1741.91 1211.91 L1742.5 1211.91 L1743.08 1211.91 L1743.67 1211.91 L1744.26 1211.91 L1744.84 1211.91 L1745.43 1211.91 L1746.02 1211.91 L1746.6 1211.91 L1747.19 1211.91 L1747.78 1211.91 L1748.36 1211.91 L1748.95 1211.91 L1749.53 1211.91 L1750.12 1211.91 L1750.71 1211.91 L1751.29 1211.91 L1751.88 1211.91 L1752.47 1211.91 L1753.05 1211.91 L1753.64 1211.91 L1754.23 1211.91 L1754.81 1211.91 L1755.4 1211.91 L1755.99 1211.91 L1756.57 1211.91 L1757.16 1211.91 L1757.74 1211.91 L1758.33 1211.91 L1758.92 1211.91 L1759.5 1211.91 L1760.09 1211.91 L1760.68 1211.91 L1761.26 1211.91 L1761.85 1211.91 L1762.44 1211.91 L1763.02 1211.91 L1763.61 1211.91 L1764.19 1211.91 L1764.78 1211.91 L1765.37 1211.91 L1765.95 1211.91 L1766.54 1211.91 L1767.13 1211.91 L1767.71 1211.91 L1768.3 1211.91 L1768.89 1211.91 L1769.47 1211.91 L1770.06 1211.91 L1770.65 1211.91 L1771.23 1211.91 L1771.82 1211.91 L1772.4 1211.91 L1772.99 1211.91 L1773.58 1211.91 L1774.16 1211.91 L1774.75 1211.91 L1775.34 1211.91 L1775.92 1211.91 L1776.51 1211.91 L1777.1 1211.91 L1777.68 1211.91 L1778.27 1211.91 L1778.86 1211.91 L1779.44 1211.91 L1780.03 1211.91 L1780.61 1211.91 L1781.2 1211.91 L1781.79 1211.91 L1782.37 1211.91 L1782.96 1211.91 L1783.55 1211.91 L1784.13 1211.91 L1784.72 1211.91 L1785.31 1211.91 L1785.89 1211.91 L1786.48 1211.91 L1787.06 1211.91 L1787.65 1211.91 L1788.24 1211.91 L1788.82 1211.91 L1789.41 1211.91 L1790 1211.91 L1790.58 1211.91 L1791.17 1211.91 L1791.76 1211.91 L1792.34 1211.91 L1792.93 1211.91 L1793.52 1211.91 L1794.1 1211.91 L1794.69 1211.91 L1795.27 1211.91 L1795.86 1211.91 L1796.45 1211.91 L1797.03 1211.91 L1797.62 1211.91 L1798.21 1211.91 L1798.79 1211.91 L1799.38 1211.91 L1799.97 1211.91 L1800.55 1211.91 L1801.14 1211.91 L1801.73 1211.91 L1802.31 1211.91 L1802.9 1211.91 L1803.48 1211.91 L1804.07 1211.91 L1804.66 1211.91 L1805.24 1211.91 L1805.83 1211.91 L1806.42 1211.91 L1807 1211.91 L1807.59 1211.91 L1808.18 1211.91 L1808.76 1211.91 L1809.35 1211.91 L1809.94 1211.91 L1810.52 1211.91 L1811.11 1211.91 L1811.69 1211.91 L1812.28 1211.91 L1812.87 1211.91 L1813.45 1211.91 L1814.04 1211.91 L1814.63 1211.91 L1815.21 1211.91 L1815.8 1211.91 L1816.39 1211.91 L1816.97 1211.91 L1817.56 1211.91 L1818.14 1211.91 L1818.73 1211.91 L1819.32 1211.91 L1819.9 1211.91 L1820.49 1211.91 L1821.08 1211.91 L1821.66 1211.91 L1822.25 1211.91 L1822.84 1211.91 L1823.42 1211.91 L1824.01 1211.91 L1824.6 1211.91 L1825.18 1211.91 L1825.77 1211.91 L1826.35 1211.91 L1826.94 1211.91 L1827.53 1211.91 L1828.11 1211.91 L1828.7 1211.91 L1829.29 1211.91 L1829.87 1211.91 L1830.46 1211.91 L1831.05 1211.91 L1831.63 1211.91 L1832.22 1211.91 L1832.81 1211.91 L1833.39 1211.91 L1833.98 1211.91 L1834.56 1211.91 L1835.15 1211.91 L1835.74 1211.91 L1836.32 1211.91 L1836.91 1211.91 L1837.5 1211.91 L1838.08 1211.91 L1838.67 1211.91 L1839.26 1211.91 L1839.84 1211.91 L1840.43 1211.91 L1841.01 1211.91 L1841.6 1211.91 L1842.19 1211.91 L1842.77 1211.91 L1843.36 1211.91 L1843.95 1211.91 L1844.53 1211.91 L1845.12 1211.91 L1845.71 1211.91 L1846.29 1211.91 L1846.88 1211.91 L1847.47 1211.91 L1848.05 1211.91 L1848.64 1211.91 L1849.22 1211.91 L1849.81 1211.91 L1850.4 1211.91 L1850.98 1211.91 L1851.57 1211.91 L1852.16 1211.91 L1852.74 1211.91 L1853.33 1211.91 L1853.92 1211.91 L1854.5 1211.91 L1855.09 1211.91 L1855.68 1211.91 L1856.26 1211.91 L1856.85 1211.91 L1857.43 1211.91 L1858.02 1211.91 L1858.61 1211.91 L1859.19 1211.91 L1859.78 1211.91 L1860.37 1211.91 L1860.95 1211.91 L1861.54 1211.91 L1862.13 1211.91 L1862.71 1211.91 L1863.3 1211.91 L1863.88 1211.91 L1864.47 1211.91 L1865.06 1211.91 L1865.64 1211.91 L1866.23 1211.91 L1866.82 1211.91 L1867.4 1211.91 L1867.99 1211.91 L1868.58 1211.91 L1869.16 1211.91 L1869.75 1211.91 L1870.34 1211.91 L1870.92 1211.91 L1871.51 1211.91 L1872.09 1211.91 L1872.68 1211.91 L1873.27 1211.91 L1873.85 1211.91 L1874.44 1211.91 L1875.03 1211.91 L1875.61 1211.91 L1876.2 1211.91 L1876.79 1211.91 L1877.37 1211.91 L1877.96 1211.91 L1878.55 1211.91 L1879.13 1211.91 L1879.72 1211.91 L1880.3 1211.91 L1880.89 1211.91 L1881.48 1211.91 L1882.06 1211.91 L1882.65 1211.91 L1883.24 1211.91 L1883.82 1211.91 L1884.41 1211.91 L1885 1211.91 L1885.58 1211.91 L1886.17 1211.91 L1886.76 1211.91 L1887.34 1211.91 L1887.93 1211.91 L1888.51 1211.91 L1889.1 1211.91 L1889.69 1211.91 L1890.27 1211.91 L1890.86 1211.91 L1891.45 1211.91 L1892.03 1211.91 L1892.62 1211.91 L1893.21 1211.91 L1893.79 1211.91 L1894.38 1211.91 L1894.96 1211.91 L1895.55 1211.91 L1896.14 1211.91 L1896.72 1211.91 L1897.31 1211.91 L1897.9 1211.91 L1898.48 1211.91 L1899.07 1211.91 L1899.66 1211.91 L1900.24 1211.91 L1900.83 1211.91 L1901.42 1211.91 L1902 1211.91 L1902.59 1211.91 L1903.17 1211.91 L1903.76 1211.91 L1904.35 1211.91 L1904.93 1211.91 L1905.52 1211.91 L1906.11 1211.91 L1906.69 1211.91 L1907.28 1211.91 L1907.87 1211.91 L1908.45 1211.91 L1909.04 1211.91 L1909.63 1211.91 L1910.21 1211.91 L1910.8 1211.91 L1911.38 1211.91 L1911.97 1211.91 L1912.56 1211.91 L1913.14 1211.91 L1913.73 1211.91 L1914.32 1211.91 L1914.9 1211.91 L1915.49 1211.91 L1916.08 1211.91 L1916.66 1211.91 L1917.25 1211.91 L1917.83 1211.91 L1918.42 1211.91 L1919.01 1211.91 L1919.59 1211.91 L1920.18 1211.91 L1920.77 1211.91 L1921.35 1211.91 L1921.94 1211.91 L1922.53 1211.91 L1923.11 1211.91 L1923.7 1211.91 L1924.29 1211.91 L1924.87 1211.91 L1925.46 1211.91 L1926.04 1211.91 L1926.63 1211.91 L1927.22 1211.91 L1927.8 1211.91 L1928.39 1211.91 L1928.98 1211.91 L1929.56 1211.91 L1930.15 1211.91 L1930.74 1211.91 L1931.32 1211.91 L1931.91 1211.91 L1932.5 1211.91 L1933.08 1211.91 L1933.67 1211.91 L1934.25 1211.91 L1934.84 1211.91 L1935.43 1211.91 L1936.01 1211.91 L1936.6 1211.91 L1937.19 1211.91 L1937.77 1211.91 L1938.36 1211.91 L1938.95 1211.91 L1939.53 1211.91 L1940.12 1211.91 L1940.71 1211.91 L1941.29 1211.91 L1941.88 1211.91 L1942.46 1211.91 L1943.05 1211.91 L1943.64 1211.91 L1944.22 1211.91 L1944.81 1211.91 L1945.4 1211.91 L1945.98 1211.91 L1946.57 1211.91 L1947.16 1211.91 L1947.74 1211.91 L1948.33 1211.91 L1948.91 1211.91 L1949.5 1211.91 L1950.09 1211.91 L1950.67 1211.91 L1951.26 1211.91 L1951.85 1211.91 L1952.43 1211.91 L1953.02 1211.91 L1953.61 1211.91 L1954.19 1211.91 L1954.78 1211.91 L1955.37 1211.91 L1955.95 1211.91 L1956.54 1211.91 L1957.12 1211.91 L1957.71 1211.91 L1958.3 1211.91 L1958.88 1211.91 L1959.47 1211.91 L1960.06 1211.91 L1960.64 1211.91 L1961.23 1211.91 L1961.82 1211.91 L1962.4 1211.91 L1962.99 1211.91 L1963.58 1211.91 L1964.16 1211.91 L1964.75 1211.91 L1965.33 1211.91 L1965.92 1211.91 L1966.51 1211.91 L1967.09 1211.91 L1967.68 1211.91 L1968.27 1211.91 L1968.85 1211.91 L1969.44 1211.91 L1970.03 1211.91 L1970.61 1211.91 L1971.2 1211.91 L1971.78 1211.91 L1972.37 1211.91 L1972.96 1211.91 L1973.54 1211.91 L1974.13 1211.91 L1974.72 1211.91 L1975.3 1211.91 L1975.89 1211.91 L1976.48 1211.91 L1977.06 1211.91 L1977.65 1211.91 L1978.24 1211.91 L1978.82 1211.91 L1979.41 1211.91 L1979.99 1211.91 L1980.58 1211.91 L1981.17 1211.91 L1981.75 1211.91 L1982.34 1211.91 L1982.93 1211.91 L1983.51 1211.91 L1984.1 1211.91 L1984.69 1211.91 L1985.27 1211.91 L1985.86 1211.91 L1986.45 1211.91 L1987.03 1211.91 L1987.62 1211.91 L1988.2 1211.91 L1988.79 1211.91 L1989.38 1211.91 L1989.96 1211.91 L1990.55 1211.91 L1991.14 1211.91 L1991.72 1211.91 L1992.31 1211.91 L1992.9 1211.91 L1993.48 1211.91 L1994.07 1211.91 L1994.65 1211.91 L1995.24 1211.91 L1995.83 1211.91 L1996.41 1211.91 L1997 1211.91 L1997.59 1211.91 L1998.17 1211.91 L1998.76 1211.91 L1999.35 1211.91 L1999.93 1211.91 L2000.52 1211.91 L2001.11 1211.91 L2001.69 1211.91 L2002.28 1211.91 L2002.86 1211.91 L2003.45 1211.91 L2004.04 1211.91 L2004.62 1211.91 L2005.21 1211.91 L2005.8 1211.91 L2006.38 1211.91 L2006.97 1211.91 L2007.56 1211.91 L2008.14 1211.91 L2008.73 1211.91 L2009.32 1211.91 L2009.9 1211.91 L2010.49 1211.91 L2011.07 1211.91 L2011.66 1211.91 L2012.25 1211.91 L2012.83 1211.91 L2013.42 1211.91 L2014.01 1211.91 L2014.59 1211.91 L2015.18 1211.91 L2015.77 1211.91 L2016.35 1211.91 L2016.94 1211.91 L2017.53 1211.91 L2018.11 1211.91 L2018.7 1211.91 L2019.28 1211.91 L2019.87 1211.91 L2020.46 1211.91 L2021.04 1211.91 L2021.63 1211.91 L2022.22 1211.91 L2022.8 1211.91 L2023.39 1211.91 L2023.98 1211.91 L2024.56 1211.91 L2025.15 1211.91 L2025.73 1211.91 L2026.32 1211.91 L2026.91 1211.91 L2027.49 1211.91 L2028.08 1211.91 L2028.67 1211.91 L2029.25 1211.91 L2029.84 1211.91 L2030.43 1211.91 L2031.01 1211.91 L2031.6 1211.91 L2032.19 1211.91 L2032.77 1211.91 L2033.36 1211.91 L2033.94 1211.91 L2034.53 1211.91 L2035.12 1211.91 L2035.7 1211.91 L2036.29 1211.91 L2036.88 1211.91 L2037.46 1211.91 L2038.05 1211.91 L2038.64 1211.91 L2039.22 1211.91 L2039.81 1211.91 L2040.4 1211.91 L2040.98 1211.91 L2041.57 1211.91 L2042.15 1211.91 L2042.74 1211.91 L2043.33 1211.91 L2043.91 1211.91 L2044.5 1211.91 L2045.09 1211.91 L2045.67 1211.91 L2046.26 1211.91 L2046.85 1211.91 L2047.43 1211.91 L2048.02 1211.91 L2048.6 1211.91 L2049.19 1211.91 L2049.78 1211.91 L2050.36 1211.91 L2050.95 1211.91 L2051.54 1211.91 L2052.12 1211.91 L2052.71 1211.91 L2053.3 1211.91 L2053.88 1211.91 L2054.47 1211.91 L2055.06 1211.91 L2055.64 1211.91 L2056.23 1211.91 L2056.81 1211.91 L2057.4 1211.91 L2057.99 1211.91 L2058.57 1211.91 L2059.16 1211.91 L2059.75 1211.91 L2060.33 1211.91 L2060.92 1211.91 L2061.51 1211.91 L2062.09 1211.91 L2062.68 1211.91 L2063.27 1211.91 L2063.85 1211.91 L2064.44 1211.91 L2065.02 1211.91 L2065.61 1211.91 L2066.2 1211.91 L2066.78 1211.91 L2067.37 1211.91 L2067.96 1211.91 L2068.54 1211.91 L2069.13 1211.91 L2069.72 1211.91 L2070.3 1211.91 L2070.89 1211.91 L2071.48 1211.91 L2072.06 1211.91 L2072.65 1211.91 L2073.23 1211.91 L2073.82 1211.91 L2074.41 1211.91 L2074.99 1211.91 L2075.58 1211.91 L2076.17 1211.91 L2076.75 1211.91 L2077.34 1211.91 L2077.93 1211.91 L2078.51 1211.91 L2079.1 1211.91 L2079.68 1211.91 L2080.27 1211.91 L2080.86 1211.91 L2081.44 1211.91 L2082.03 1211.91 L2082.62 1211.91 L2083.2 1211.91 L2083.79 1211.91 L2084.38 1211.91 L2084.96 1211.91 L2085.55 1211.91 L2086.14 1211.91 L2086.72 1211.91 L2087.31 1211.91 L2087.89 1211.91 L2088.48 1211.91 L2089.07 1211.91 L2089.65 1211.91 L2090.24 1211.91 L2090.83 1211.91 L2091.41 1211.91 L2092 1211.91 L2092.59 1211.91 L2093.17 1211.91 L2093.76 1211.91 L2094.35 1211.91 L2094.93 1211.91 L2095.52 1211.91 L2096.1 1211.91 L2096.69 1211.91 L2097.28 1211.91 L2097.86 1211.91 L2098.45 1211.91 L2099.04 1211.91 L2099.62 1211.91 L2100.21 1211.91 L2100.8 1211.91 L2101.38 1211.91 L2101.97 1211.91 L2102.55 1211.91 L2103.14 1211.91 L2103.73 1211.91 L2104.31 1211.91 L2104.9 1211.91 L2105.49 1211.91 L2106.07 1211.91 L2106.66 1211.91 L2107.25 1211.91 L2107.83 1211.91 L2108.42 1211.91 L2109.01 1211.91 L2109.59 1211.91 L2110.18 1211.91 L2110.76 1211.91 L2111.35 1211.91 L2111.94 1211.91 L2112.52 1211.91 L2113.11 1211.91 L2113.7 1211.91 L2114.28 1211.91 L2114.87 1211.91 L2115.46 1211.91 L2116.04 1211.91 L2116.63 1211.91 L2117.22 1211.91 L2117.8 1211.91 L2118.39 1211.91 L2118.97 1211.91 L2119.56 1211.91 L2120.15 1211.91 L2120.73 1211.91 L2121.32 1211.91 L2121.91 1211.91 L2122.49 1211.91 L2123.08 1211.91 L2123.67 1211.91 L2124.25 1211.91 L2124.84 1211.91 L2125.42 1211.91 L2126.01 1211.91 L2126.6 1211.91 L2127.18 1211.91 L2127.77 1211.91 L2128.36 1211.91 L2128.94 1211.91 L2129.53 1211.91 L2130.12 1211.91 L2130.7 1211.91 L2131.29 1211.91 L2131.88 1211.91 L2132.46 1211.91 L2133.05 1211.91 L2133.63 1211.91 L2134.22 1211.91 L2134.81 1211.91 L2135.39 1211.91 L2135.98 1211.91 L2136.57 1211.91 L2137.15 1211.91 L2137.74 1211.91 L2138.33 1211.91 L2138.91 1211.91 L2139.5 1211.91 L2140.09 1211.91 L2140.67 1211.91 L2141.26 1211.91 L2141.84 1211.91 L2142.43 1211.91 L2143.02 1211.91 L2143.6 1211.91 L2144.19 1211.91 L2144.78 1211.91 L2145.36 1211.91 L2145.95 1211.91 L2146.54 1211.91 L2147.12 1211.91 L2147.71 1211.91 L2148.3 1211.91 L2148.88 1211.91 L2149.47 1211.91 L2150.05 1211.91 L2150.64 1211.91 L2151.23 1211.91 L2151.81 1211.91 L2152.4 1211.91 L2152.99 1211.91 L2153.57 1211.91 L2154.16 1211.91 L2154.75 1211.91 L2155.33 1211.91 L2155.92 1211.91 L2156.5 1211.91 L2157.09 1211.91 L2157.68 1211.91 L2158.26 1211.91 L2158.26 1211.66 L2157.68 1211.66 L2157.09 1211.66 L2156.5 1211.66 L2155.92 1211.66 L2155.33 1211.66 L2154.75 1211.66 L2154.16 1211.66 L2153.57 1211.66 L2152.99 1211.66 L2152.4 1211.66 L2151.81 1211.66 L2151.23 1211.66 L2150.64 1211.66 L2150.05 1211.66 L2149.47 1211.66 L2148.88 1211.66 L2148.3 1211.66 L2147.71 1211.66 L2147.12 1211.66 L2146.54 1211.66 L2145.95 1211.66 L2145.36 1211.66 L2144.78 1211.66 L2144.19 1211.66 L2143.6 1211.66 L2143.02 1211.66 L2142.43 1211.66 L2141.84 1211.66 L2141.26 1211.66 L2140.67 1211.66 L2140.09 1211.66 L2139.5 1211.66 L2138.91 1211.66 L2138.33 1211.66 L2137.74 1211.66 L2137.15 1211.66 L2136.57 1211.66 L2135.98 1211.66 L2135.39 1211.66 L2134.81 1211.66 L2134.22 1211.66 L2133.63 1211.66 L2133.05 1211.66 L2132.46 1211.66 L2131.88 1211.66 L2131.29 1211.66 L2130.7 1211.66 L2130.12 1211.66 L2129.53 1211.66 L2128.94 1211.66 L2128.36 1211.66 L2127.77 1211.66 L2127.18 1211.66 L2126.6 1211.66 L2126.01 1211.66 L2125.42 1211.66 L2124.84 1211.66 L2124.25 1211.66 L2123.67 1211.66 L2123.08 1211.66 L2122.49 1211.66 L2121.91 1211.66 L2121.32 1211.66 L2120.73 1211.66 L2120.15 1211.66 L2119.56 1211.66 L2118.97 1211.66 L2118.39 1211.66 L2117.8 1211.66 L2117.22 1211.66 L2116.63 1211.66 L2116.04 1211.66 L2115.46 1211.66 L2114.87 1211.66 L2114.28 1211.66 L2113.7 1211.66 L2113.11 1211.66 L2112.52 1211.66 L2111.94 1211.66 L2111.35 1211.66 L2110.76 1211.66 L2110.18 1211.66 L2109.59 1211.66 L2109.01 1211.66 L2108.42 1211.66 L2107.83 1211.66 L2107.25 1211.66 L2106.66 1211.66 L2106.07 1211.66 L2105.49 1211.66 L2104.9 1211.66 L2104.31 1211.66 L2103.73 1211.66 L2103.14 1211.66 L2102.55 1211.66 L2101.97 1211.66 L2101.38 1211.66 L2100.8 1211.66 L2100.21 1211.66 L2099.62 1211.66 L2099.04 1211.66 L2098.45 1211.66 L2097.86 1211.66 L2097.28 1211.66 L2096.69 1211.66 L2096.1 1211.66 L2095.52 1211.66 L2094.93 1211.66 L2094.35 1211.66 L2093.76 1211.66 L2093.17 1211.66 L2092.59 1211.66 L2092 1211.66 L2091.41 1211.66 L2090.83 1211.66 L2090.24 1211.66 L2089.65 1211.66 L2089.07 1211.66 L2088.48 1211.66 L2087.89 1211.66 L2087.31 1211.66 L2086.72 1211.66 L2086.14 1211.66 L2085.55 1211.66 L2084.96 1211.66 L2084.38 1211.66 L2083.79 1211.66 L2083.2 1211.66 L2082.62 1211.66 L2082.03 1211.66 L2081.44 1211.66 L2080.86 1211.66 L2080.27 1211.66 L2079.68 1211.66 L2079.1 1211.66 L2078.51 1211.66 L2077.93 1211.66 L2077.34 1211.66 L2076.75 1211.66 L2076.17 1211.66 L2075.58 1211.66 L2074.99 1211.66 L2074.41 1211.66 L2073.82 1211.66 L2073.23 1211.66 L2072.65 1211.66 L2072.06 1211.66 L2071.48 1211.66 L2070.89 1211.66 L2070.3 1211.66 L2069.72 1211.66 L2069.13 1211.66 L2068.54 1211.66 L2067.96 1211.66 L2067.37 1211.66 L2066.78 1211.66 L2066.2 1211.66 L2065.61 1211.66 L2065.02 1211.66 L2064.44 1211.66 L2063.85 1211.66 L2063.27 1211.66 L2062.68 1211.66 L2062.09 1211.66 L2061.51 1211.66 L2060.92 1211.66 L2060.33 1211.66 L2059.75 1211.66 L2059.16 1211.66 L2058.57 1211.66 L2057.99 1211.66 L2057.4 1211.66 L2056.81 1211.66 L2056.23 1211.66 L2055.64 1211.66 L2055.06 1211.66 L2054.47 1211.66 L2053.88 1211.66 L2053.3 1211.66 L2052.71 1211.66 L2052.12 1211.66 L2051.54 1211.66 L2050.95 1211.66 L2050.36 1211.66 L2049.78 1211.66 L2049.19 1211.66 L2048.6 1211.66 L2048.02 1211.66 L2047.43 1211.66 L2046.85 1211.66 L2046.26 1211.66 L2045.67 1211.66 L2045.09 1211.66 L2044.5 1211.66 L2043.91 1211.66 L2043.33 1211.66 L2042.74 1211.66 L2042.15 1211.66 L2041.57 1211.66 L2040.98 1211.66 L2040.4 1211.66 L2039.81 1211.66 L2039.22 1211.66 L2038.64 1211.66 L2038.05 1211.66 L2037.46 1211.66 L2036.88 1211.66 L2036.29 1211.66 L2035.7 1211.66 L2035.12 1211.66 L2034.53 1211.66 L2033.94 1211.66 L2033.36 1211.66 L2032.77 1211.66 L2032.19 1211.66 L2031.6 1211.66 L2031.01 1211.66 L2030.43 1211.66 L2029.84 1211.66 L2029.25 1211.66 L2028.67 1211.66 L2028.08 1211.66 L2027.49 1211.66 L2026.91 1211.66 L2026.32 1211.66 L2025.73 1211.66 L2025.15 1211.66 L2024.56 1211.66 L2023.98 1211.66 L2023.39 1211.66 L2022.8 1211.66 L2022.22 1211.66 L2021.63 1211.66 L2021.04 1211.66 L2020.46 1211.66 L2019.87 1211.66 L2019.28 1211.66 L2018.7 1211.66 L2018.11 1211.66 L2017.53 1211.66 L2016.94 1211.66 L2016.35 1211.66 L2015.77 1211.66 L2015.18 1211.66 L2014.59 1211.66 L2014.01 1211.66 L2013.42 1211.66 L2012.83 1211.66 L2012.25 1211.66 L2011.66 1211.66 L2011.07 1211.66 L2010.49 1211.66 L2009.9 1211.66 L2009.32 1211.66 L2008.73 1211.66 L2008.14 1211.66 L2007.56 1211.66 L2006.97 1211.66 L2006.38 1211.66 L2005.8 1211.66 L2005.21 1211.66 L2004.62 1211.66 L2004.04 1211.66 L2003.45 1211.66 L2002.86 1211.66 L2002.28 1211.66 L2001.69 1211.66 L2001.11 1211.66 L2000.52 1211.66 L1999.93 1211.66 L1999.35 1211.66 L1998.76 1211.66 L1998.17 1211.66 L1997.59 1211.66 L1997 1211.66 L1996.41 1211.66 L1995.83 1211.66 L1995.24 1211.66 L1994.65 1211.66 L1994.07 1211.66 L1993.48 1211.66 L1992.9 1211.66 L1992.31 1211.66 L1991.72 1211.66 L1991.14 1211.66 L1990.55 1211.66 L1989.96 1211.66 L1989.38 1211.66 L1988.79 1211.66 L1988.2 1211.66 L1987.62 1211.66 L1987.03 1211.66 L1986.45 1211.66 L1985.86 1211.66 L1985.27 1211.66 L1984.69 1211.66 L1984.1 1211.66 L1983.51 1211.66 L1982.93 1211.66 L1982.34 1211.66 L1981.75 1211.66 L1981.17 1211.66 L1980.58 1211.66 L1979.99 1211.66 L1979.41 1211.66 L1978.82 1211.66 L1978.24 1211.66 L1977.65 1211.66 L1977.06 1211.66 L1976.48 1211.66 L1975.89 1211.66 L1975.3 1211.66 L1974.72 1211.66 L1974.13 1211.66 L1973.54 1211.66 L1972.96 1211.66 L1972.37 1211.66 L1971.78 1211.66 L1971.2 1211.66 L1970.61 1211.66 L1970.03 1211.66 L1969.44 1211.66 L1968.85 1211.66 L1968.27 1211.66 L1967.68 1211.66 L1967.09 1211.66 L1966.51 1211.66 L1965.92 1211.66 L1965.33 1211.66 L1964.75 1211.66 L1964.16 1211.66 L1963.58 1211.66 L1962.99 1211.66 L1962.4 1211.66 L1961.82 1211.66 L1961.23 1211.66 L1960.64 1211.66 L1960.06 1211.66 L1959.47 1211.66 L1958.88 1211.66 L1958.3 1211.66 L1957.71 1211.66 L1957.12 1211.66 L1956.54 1211.66 L1955.95 1211.66 L1955.37 1211.66 L1954.78 1211.66 L1954.19 1211.66 L1953.61 1211.66 L1953.02 1211.66 L1952.43 1211.66 L1951.85 1211.66 L1951.26 1211.66 L1950.67 1211.66 L1950.09 1211.66 L1949.5 1211.66 L1948.91 1211.66 L1948.33 1211.66 L1947.74 1211.66 L1947.16 1211.66 L1946.57 1211.66 L1945.98 1211.66 L1945.4 1211.66 L1944.81 1211.66 L1944.22 1211.66 L1943.64 1211.66 L1943.05 1211.66 L1942.46 1211.66 L1941.88 1211.66 L1941.29 1211.66 L1940.71 1211.66 L1940.12 1211.66 L1939.53 1211.66 L1938.95 1211.66 L1938.36 1211.66 L1937.77 1211.66 L1937.19 1211.66 L1936.6 1211.66 L1936.01 1211.66 L1935.43 1211.66 L1934.84 1211.66 L1934.25 1211.66 L1933.67 1211.66 L1933.08 1211.66 L1932.5 1211.66 L1931.91 1211.66 L1931.32 1211.66 L1930.74 1211.66 L1930.15 1211.66 L1929.56 1211.66 L1928.98 1211.66 L1928.39 1211.66 L1927.8 1211.66 L1927.22 1211.66 L1926.63 1211.66 L1926.04 1211.66 L1925.46 1211.66 L1924.87 1211.66 L1924.29 1211.66 L1923.7 1211.66 L1923.11 1211.66 L1922.53 1211.66 L1921.94 1211.66 L1921.35 1211.66 L1920.77 1211.66 L1920.18 1211.66 L1919.59 1211.66 L1919.01 1211.66 L1918.42 1211.66 L1917.83 1211.66 L1917.25 1211.66 L1916.66 1211.66 L1916.08 1211.66 L1915.49 1211.66 L1914.9 1211.66 L1914.32 1211.66 L1913.73 1211.66 L1913.14 1211.66 L1912.56 1211.66 L1911.97 1211.66 L1911.38 1211.66 L1910.8 1211.66 L1910.21 1211.66 L1909.63 1211.66 L1909.04 1211.66 L1908.45 1211.66 L1907.87 1211.66 L1907.28 1211.66 L1906.69 1211.66 L1906.11 1211.66 L1905.52 1211.66 L1904.93 1211.66 L1904.35 1211.66 L1903.76 1211.66 L1903.17 1211.66 L1902.59 1211.66 L1902 1211.66 L1901.42 1211.66 L1900.83 1211.66 L1900.24 1211.66 L1899.66 1211.66 L1899.07 1211.66 L1898.48 1211.66 L1897.9 1211.66 L1897.31 1211.66 L1896.72 1211.66 L1896.14 1211.66 L1895.55 1211.66 L1894.96 1211.66 L1894.38 1211.66 L1893.79 1211.66 L1893.21 1211.66 L1892.62 1211.66 L1892.03 1211.66 L1891.45 1211.66 L1890.86 1211.66 L1890.27 1211.66 L1889.69 1211.66 L1889.1 1211.66 L1888.51 1211.66 L1887.93 1211.66 L1887.34 1211.66 L1886.76 1211.66 L1886.17 1211.66 L1885.58 1211.66 L1885 1211.66 L1884.41 1211.66 L1883.82 1211.66 L1883.24 1211.66 L1882.65 1211.66 L1882.06 1211.66 L1881.48 1211.66 L1880.89 1211.66 L1880.3 1211.66 L1879.72 1211.66 L1879.13 1211.66 L1878.55 1211.66 L1877.96 1211.66 L1877.37 1211.66 L1876.79 1211.66 L1876.2 1211.66 L1875.61 1211.66 L1875.03 1211.66 L1874.44 1211.66 L1873.85 1211.66 L1873.27 1211.66 L1872.68 1211.66 L1872.09 1211.66 L1871.51 1211.66 L1870.92 1211.66 L1870.34 1211.66 L1869.75 1211.66 L1869.16 1211.66 L1868.58 1211.66 L1867.99 1211.66 L1867.4 1211.66 L1866.82 1211.66 L1866.23 1211.66 L1865.64 1211.66 L1865.06 1211.66 L1864.47 1211.66 L1863.88 1211.66 L1863.3 1211.66 L1862.71 1211.66 L1862.13 1211.66 L1861.54 1211.66 L1860.95 1211.66 L1860.37 1211.66 L1859.78 1211.66 L1859.19 1211.66 L1858.61 1211.66 L1858.02 1211.66 L1857.43 1211.66 L1856.85 1211.66 L1856.26 1211.66 L1855.68 1211.66 L1855.09 1211.66 L1854.5 1211.66 L1853.92 1211.66 L1853.33 1211.66 L1852.74 1211.66 L1852.16 1211.66 L1851.57 1211.66 L1850.98 1211.66 L1850.4 1211.66 L1849.81 1211.66 L1849.22 1211.66 L1848.64 1211.66 L1848.05 1211.66 L1847.47 1211.66 L1846.88 1211.66 L1846.29 1211.66 L1845.71 1211.66 L1845.12 1211.66 L1844.53 1211.66 L1843.95 1211.66 L1843.36 1211.66 L1842.77 1211.66 L1842.19 1211.66 L1841.6 1211.66 L1841.01 1211.66 L1840.43 1211.66 L1839.84 1211.66 L1839.26 1211.66 L1838.67 1211.66 L1838.08 1211.66 L1837.5 1211.66 L1836.91 1211.66 L1836.32 1211.66 L1835.74 1211.66 L1835.15 1211.66 L1834.56 1211.66 L1833.98 1211.66 L1833.39 1211.66 L1832.81 1211.66 L1832.22 1211.66 L1831.63 1211.66 L1831.05 1211.66 L1830.46 1211.66 L1829.87 1211.66 L1829.29 1211.66 L1828.7 1211.66 L1828.11 1211.66 L1827.53 1211.66 L1826.94 1211.66 L1826.35 1211.66 L1825.77 1211.66 L1825.18 1211.66 L1824.6 1211.66 L1824.01 1211.66 L1823.42 1211.66 L1822.84 1211.66 L1822.25 1211.66 L1821.66 1211.66 L1821.08 1211.66 L1820.49 1211.66 L1819.9 1211.66 L1819.32 1211.66 L1818.73 1211.66 L1818.14 1211.66 L1817.56 1211.66 L1816.97 1211.66 L1816.39 1211.66 L1815.8 1211.66 L1815.21 1211.66 L1814.63 1211.66 L1814.04 1211.66 L1813.45 1211.66 L1812.87 1211.66 L1812.28 1211.66 L1811.69 1211.66 L1811.11 1211.66 L1810.52 1211.66 L1809.94 1211.66 L1809.35 1211.66 L1808.76 1211.66 L1808.18 1211.66 L1807.59 1211.66 L1807 1211.66 L1806.42 1211.66 L1805.83 1211.66 L1805.24 1211.66 L1804.66 1211.66 L1804.07 1211.66 L1803.48 1211.66 L1802.9 1211.66 L1802.31 1211.66 L1801.73 1211.66 L1801.14 1211.66 L1800.55 1211.66 L1799.97 1211.66 L1799.38 1211.66 L1798.79 1211.66 L1798.21 1211.66 L1797.62 1211.66 L1797.03 1211.66 L1796.45 1211.66 L1795.86 1211.66 L1795.27 1211.66 L1794.69 1211.66 L1794.1 1211.66 L1793.52 1211.66 L1792.93 1211.66 L1792.34 1211.66 L1791.76 1211.66 L1791.17 1211.66 L1790.58 1211.66 L1790 1211.66 L1789.41 1211.66 L1788.82 1211.66 L1788.24 1211.66 L1787.65 1211.66 L1787.06 1211.66 L1786.48 1211.66 L1785.89 1211.66 L1785.31 1211.66 L1784.72 1211.66 L1784.13 1211.66 L1783.55 1211.66 L1782.96 1211.66 L1782.37 1211.66 L1781.79 1211.66 L1781.2 1211.66 L1780.61 1211.66 L1780.03 1211.66 L1779.44 1211.66 L1778.86 1211.66 L1778.27 1211.66 L1777.68 1211.66 L1777.1 1211.66 L1776.51 1211.66 L1775.92 1211.66 L1775.34 1211.66 L1774.75 1211.66 L1774.16 1211.66 L1773.58 1211.66 L1772.99 1211.66 L1772.4 1211.66 L1771.82 1211.66 L1771.23 1211.66 L1770.65 1211.66 L1770.06 1211.66 L1769.47 1211.66 L1768.89 1211.66 L1768.3 1211.66 L1767.71 1211.66 L1767.13 1211.66 L1766.54 1211.66 L1765.95 1211.66 L1765.37 1211.66 L1764.78 1211.66 L1764.19 1211.66 L1763.61 1211.66 L1763.02 1211.66 L1762.44 1211.66 L1761.85 1211.66 L1761.26 1211.66 L1760.68 1211.66 L1760.09 1211.66 L1759.5 1211.66 L1758.92 1211.66 L1758.33 1211.66 L1757.74 1211.66 L1757.16 1211.66 L1756.57 1211.66 L1755.99 1211.66 L1755.4 1211.66 L1754.81 1211.66 L1754.23 1211.66 L1753.64 1211.66 L1753.05 1211.66 L1752.47 1211.66 L1751.88 1211.66 L1751.29 1211.66 L1750.71 1211.66 L1750.12 1211.66 L1749.53 1211.66 L1748.95 1211.66 L1748.36 1211.66 L1747.78 1211.66 L1747.19 1211.66 L1746.6 1211.66 L1746.02 1211.66 L1745.43 1211.66 L1744.84 1211.66 L1744.26 1211.66 L1743.67 1211.66 L1743.08 1211.66 L1742.5 1211.66 L1741.91 1211.66 L1741.32 1211.66 L1740.74 1211.66 L1740.15 1211.66 L1739.57 1211.66 L1738.98 1211.66 L1738.39 1211.66 L1737.81 1211.66 L1737.22 1211.66 L1736.63 1211.66 L1736.05 1211.66 L1735.46 1211.66 L1734.87 1211.66 L1734.29 1211.66 L1733.7 1211.66 L1733.11 1211.66 L1732.53 1211.66 L1731.94 1211.66 L1731.36 1211.66 L1730.77 1211.66 L1730.18 1211.66 L1729.6 1211.66 L1729.01 1211.66 L1728.42 1211.66 L1727.84 1211.66 L1727.25 1211.66 L1726.66 1211.66 L1726.08 1211.66 L1725.49 1211.66 L1724.91 1211.66 L1724.32 1211.66 L1723.73 1211.66 L1723.15 1211.66 L1722.56 1211.66 L1721.97 1211.66 L1721.39 1211.66 L1720.8 1211.66 L1720.21 1211.66 L1719.63 1211.66 L1719.04 1211.66 L1718.45 1211.66 L1717.87 1211.66 L1717.28 1211.66 L1716.7 1211.66 L1716.11 1211.66 L1715.52 1211.66 L1714.94 1211.66 L1714.35 1211.66 L1713.76 1211.66 L1713.18 1211.66 L1712.59 1211.66 L1712 1211.66 L1711.42 1211.66 L1710.83 1211.66 L1710.24 1211.66 L1709.66 1211.66 L1709.07 1211.66 L1708.49 1211.66 L1707.9 1211.66 L1707.31 1211.66 L1706.73 1211.66 L1706.14 1211.66 L1705.55 1211.66 L1704.97 1211.66 L1704.38 1211.66 L1703.79 1211.66 L1703.21 1211.66 L1702.62 1211.66 L1702.04 1211.66 L1701.45 1211.66 L1700.86 1211.66 L1700.28 1211.66 L1699.69 1211.66 L1699.1 1211.66 L1698.52 1211.66 L1697.93 1211.66 L1697.34 1211.66 L1696.76 1211.66 L1696.17 1211.66 L1695.58 1211.66 L1695 1211.66 L1694.41 1211.66 L1693.83 1211.66 L1693.24 1211.66 L1692.65 1211.66 L1692.07 1211.66 L1691.48 1211.66 L1690.89 1211.66 L1690.31 1211.66 L1689.72 1211.66 L1689.13 1211.66 L1688.55 1211.66 L1687.96 1211.66 L1687.37 1211.66 L1686.79 1211.66 L1686.2 1211.66 L1685.62 1211.66 L1685.03 1211.66 L1684.44 1211.66 L1683.86 1211.66 L1683.27 1211.66 L1682.68 1211.66 L1682.1 1211.66 L1681.51 1211.66 L1680.92 1211.66 L1680.34 1211.66 L1679.75 1211.66 L1679.17 1211.66 L1678.58 1211.66 L1677.99 1211.66 L1677.41 1211.66 L1676.82 1211.66 L1676.23 1211.66 L1675.65 1211.66 L1675.06 1211.66 L1674.47 1211.66 L1673.89 1211.66 L1673.3 1211.66 L1672.71 1211.66 L1672.13 1211.66 L1671.54 1211.66 L1670.96 1211.66 L1670.37 1211.66 L1669.78 1211.66 L1669.2 1211.66 L1668.61 1211.66 L1668.02 1211.66 L1667.44 1211.66 L1666.85 1211.66 L1666.26 1211.66 L1665.68 1211.66 L1665.09 1211.66 L1664.5 1211.66 L1663.92 1211.66 L1663.33 1211.66 L1662.75 1211.66 L1662.16 1211.66 L1661.57 1211.66 L1660.99 1211.66 L1660.4 1211.66 L1659.81 1211.66 L1659.23 1211.66 L1658.64 1211.66 L1658.05 1211.66 L1657.47 1211.66 L1656.88 1211.66 L1656.29 1211.66 L1655.71 1211.66 L1655.12 1211.66 L1654.54 1211.66 L1653.95 1211.66 L1653.36 1211.66 L1652.78 1211.66 L1652.19 1211.66 L1651.6 1211.66 L1651.02 1211.66 L1650.43 1211.66 L1649.84 1211.66 L1649.26 1211.66 L1648.67 1211.66 L1648.09 1211.66 L1647.5 1211.66 L1646.91 1211.66 L1646.33 1211.66 L1645.74 1211.66 L1645.15 1211.66 L1644.57 1211.66 L1643.98 1211.66 L1643.39 1211.66 L1642.81 1211.66 L1642.22 1211.66 L1641.63 1211.66 L1641.05 1211.66 L1640.46 1211.66 L1639.88 1211.66 L1639.29 1211.66 L1638.7 1211.66 L1638.12 1211.66 L1637.53 1211.66 L1636.94 1211.66 L1636.36 1211.66 L1635.77 1211.66 L1635.18 1211.66 L1634.6 1211.66 L1634.01 1211.66 L1633.42 1211.66 L1632.84 1211.66 L1632.25 1211.66 L1631.67 1211.66 L1631.08 1211.66 L1630.49 1211.66 L1629.91 1211.66 L1629.32 1211.66 L1628.73 1211.66 L1628.15 1211.66 L1627.56 1211.66 L1626.97 1211.66 L1626.39 1211.66 L1625.8 1211.66 L1625.22 1211.66 L1624.63 1211.66 L1624.04 1211.66 L1623.46 1211.66 L1622.87 1211.66 L1622.28 1211.66 L1621.7 1211.66 L1621.11 1211.66 L1620.52 1211.66 L1619.94 1211.66 L1619.35 1211.66 L1618.76 1211.66 L1618.18 1211.66 L1617.59 1211.66 L1617.01 1211.66 L1616.42 1211.66 L1615.83 1211.66 L1615.25 1211.66 L1614.66 1211.66 L1614.07 1211.66 L1613.49 1211.66 L1612.9 1211.66 L1612.31 1211.66 L1611.73 1211.66 L1611.14 1211.66 L1610.55 1211.66 L1609.97 1211.66 L1609.38 1211.66 L1608.8 1211.66 L1608.21 1211.66 L1607.62 1211.66 L1607.04 1211.66 L1606.45 1211.66 L1605.86 1211.66 L1605.28 1211.66 L1604.69 1211.66 L1604.1 1211.66 L1603.52 1211.66 L1602.93 1211.66 L1602.34 1211.66 L1601.76 1211.66 L1601.17 1211.66 L1600.59 1211.66 L1600 1211.66 L1599.41 1211.66 L1598.83 1211.66 L1598.24 1211.66 L1597.65 1211.66 L1597.07 1211.66 L1596.48 1211.66 L1595.89 1211.66 L1595.31 1211.66 L1594.72 1211.66 L1594.14 1211.66 L1593.55 1211.66 L1592.96 1211.66 L1592.38 1211.66 L1591.79 1211.66 L1591.2 1211.66 L1590.62 1211.66 L1590.03 1211.66 L1589.44 1211.66 L1588.86 1211.66 L1588.27 1211.66 L1587.68 1211.66 L1587.1 1211.66 L1586.51 1211.66 L1585.93 1211.66 L1585.34 1211.66 L1584.75 1211.66 L1584.17 1211.66 L1583.58 1211.66 L1582.99 1211.66 L1582.41 1211.66 L1581.82 1211.66 L1581.23 1211.66 L1580.65 1211.66 L1580.06 1211.66 L1579.47 1211.66 L1578.89 1211.66 L1578.3 1211.66 L1577.72 1211.66 L1577.13 1211.66 L1576.54 1211.66 L1575.96 1211.66 L1575.37 1211.66 L1574.78 1211.66 L1574.2 1211.66 L1573.61 1211.66 L1573.02 1211.66 L1572.44 1211.66 L1571.85 1211.66 L1571.27 1211.66 L1570.68 1211.66 L1570.09 1211.66 L1569.51 1211.66 L1568.92 1211.66 L1568.33 1211.66 L1567.75 1211.66 L1567.16 1211.66 L1566.57 1211.66 L1565.99 1211.66 L1565.4 1211.66 L1564.81 1211.66 L1564.23 1211.66 L1563.64 1211.66 L1563.06 1211.66 L1562.47 1211.66 L1561.88 1211.66 L1561.3 1211.66 L1560.71 1211.66 L1560.12 1211.66 L1559.54 1211.66 L1558.95 1211.66 L1558.36 1211.66 L1557.78 1211.66 L1557.19 1211.66 L1556.6 1211.66 L1556.02 1211.66 L1555.43 1211.66 L1554.85 1211.66 L1554.26 1211.66 L1553.67 1211.66 L1553.09 1211.66 L1552.5 1211.66 L1551.91 1211.66 L1551.33 1211.66 L1550.74 1211.66 L1550.15 1211.66 L1549.57 1211.66 L1548.98 1211.66 L1548.4 1211.66 L1547.81 1211.66 L1547.22 1211.66 L1546.64 1211.66 L1546.05 1211.66 L1545.46 1211.66 L1544.88 1211.66 L1544.29 1211.66 L1543.7 1211.66 L1543.12 1211.66 L1542.53 1211.66 L1541.94 1211.66 L1541.36 1211.66 L1540.77 1211.66 L1540.19 1211.66 L1539.6 1211.66 L1539.01 1211.66 L1538.43 1211.66 L1537.84 1211.66 L1537.25 1211.66 L1536.67 1211.66 L1536.08 1211.66 L1535.49 1211.66 L1534.91 1211.66 L1534.32 1211.66 L1533.73 1211.66 L1533.15 1211.66 L1532.56 1211.66 L1531.98 1211.66 L1531.39 1211.66 L1530.8 1211.66 L1530.22 1211.66 L1529.63 1211.66 L1529.04 1211.66 L1528.46 1211.66 L1527.87 1211.66 L1527.28 1211.66 L1526.7 1211.66 L1526.11 1211.66 L1525.52 1211.66 L1524.94 1211.66 L1524.35 1211.66 L1523.77 1211.66 L1523.18 1211.66 L1522.59 1211.66 L1522.01 1211.66 L1521.42 1211.66 L1520.83 1211.66 L1520.25 1211.66 L1519.66 1211.66 L1519.07 1211.66 L1518.49 1211.66 L1517.9 1211.66 L1517.32 1211.66 L1516.73 1211.66 L1516.14 1211.66 L1515.56 1211.66 L1514.97 1211.66 L1514.38 1211.66 L1513.8 1211.66 L1513.21 1211.66 L1512.62 1211.66 L1512.04 1211.66 L1511.45 1211.66 L1510.86 1211.66 L1510.28 1211.66 L1509.69 1211.66 L1509.11 1211.66 L1508.52 1211.66 L1507.93 1211.66 L1507.35 1211.66 L1506.76 1211.66 L1506.17 1211.66 L1505.59 1211.66 L1505 1211.66 L1504.41 1211.66 L1503.83 1211.66 L1503.24 1211.66 L1502.65 1211.66 L1502.07 1211.66 L1501.48 1211.66 L1500.9 1211.66 L1500.31 1211.66 L1499.72 1211.66 L1499.14 1211.66 L1498.55 1211.66 L1497.96 1211.66 L1497.38 1211.66 L1496.79 1211.66 L1496.2 1211.66 L1495.62 1211.66 L1495.03 1211.66 L1494.45 1211.66 L1493.86 1211.66 L1493.27 1211.66 L1492.69 1211.66 L1492.1 1211.66 L1491.51 1211.66 L1490.93 1211.66 L1490.34 1211.66 L1489.75 1211.66 L1489.17 1211.66 L1488.58 1211.66 L1487.99 1211.66 L1487.41 1211.66 L1486.82 1211.66 L1486.24 1211.66 L1485.65 1211.66 L1485.06 1211.66 L1484.48 1211.66 L1483.89 1211.66 L1483.3 1211.66 L1482.72 1211.66 L1482.13 1211.66 L1481.54 1211.66 L1480.96 1211.66 L1480.37 1211.66 L1479.78 1211.66 L1479.2 1211.66 L1478.61 1211.66 L1478.03 1211.66 L1477.44 1211.66 L1476.85 1211.66 L1476.27 1211.66 L1475.68 1211.66 L1475.09 1211.66 L1474.51 1211.66 L1473.92 1211.66 L1473.33 1211.66 L1472.75 1211.66 L1472.16 1211.66 L1471.57 1211.66 L1470.99 1211.66 L1470.4 1211.66 L1469.82 1211.66 L1469.23 1211.66 L1468.64 1211.66 L1468.06 1211.66 L1467.47 1211.66 L1466.88 1211.66 L1466.3 1211.66 L1465.71 1211.66 L1465.12 1211.66 L1464.54 1211.66 L1463.95 1211.66 L1463.37 1211.66 L1462.78 1211.66 L1462.19 1211.66 L1461.61 1211.66 L1461.02 1211.66 L1460.43 1211.66 L1459.85 1211.66 L1459.26 1211.66 L1458.67 1211.66 L1458.09 1211.66 L1457.5 1211.66 L1456.91 1211.66 L1456.33 1211.66 L1455.74 1211.66 L1455.16 1211.66 L1454.57 1211.66 L1453.98 1211.66 L1453.4 1211.66 L1452.81 1211.66 L1452.22 1211.66 L1451.64 1211.66 L1451.05 1211.66 L1450.46 1211.66 L1449.88 1211.66 L1449.29 1211.66 L1448.7 1211.66 L1448.12 1211.66 L1447.53 1211.66 L1446.95 1211.66 L1446.36 1211.66 L1445.77 1211.66 L1445.19 1211.66 L1444.6 1211.66 L1444.01 1211.66 L1443.43 1211.66 L1442.84 1211.66 L1442.25 1211.66 L1441.67 1211.66 L1441.08 1211.66 L1440.5 1211.66 L1439.91 1211.66 L1439.32 1211.66 L1438.74 1211.66 L1438.15 1211.66 L1437.56 1211.66 L1436.98 1211.66 L1436.39 1211.66 L1435.8 1211.66 L1435.22 1211.66 L1434.63 1211.66 L1434.04 1211.66 L1433.46 1211.66 L1432.87 1211.66 L1432.29 1211.66 L1431.7 1211.66 L1431.11 1211.66 L1430.53 1211.66 L1429.94 1211.66 L1429.35 1211.66 L1428.77 1211.66 L1428.18 1211.66 L1427.59 1211.66 L1427.01 1211.66 L1426.42 1211.66 L1425.83 1211.66 L1425.25 1211.66 L1424.66 1211.66 L1424.08 1211.66 L1423.49 1211.66 L1422.9 1211.66 L1422.32 1211.66 L1421.73 1211.66 L1421.14 1211.66 L1420.56 1211.66 L1419.97 1211.66 L1419.38 1211.66 L1418.8 1211.66 L1418.21 1211.66 L1417.63 1211.66 L1417.04 1211.66 L1416.45 1211.66 L1415.87 1211.66 L1415.28 1211.66 L1414.69 1211.66 L1414.11 1211.66 L1413.52 1211.66 L1412.93 1211.66 L1412.35 1211.66 L1411.76 1211.66 L1411.17 1211.66 L1410.59 1211.66 L1410 1211.66 L1409.42 1211.66 L1408.83 1211.66 L1408.24 1211.66 L1407.66 1211.66 L1407.07 1211.66 L1406.48 1211.66 L1405.9 1211.66 L1405.31 1211.66 L1404.72 1211.66 L1404.14 1211.66 L1403.55 1211.66 L1402.96 1211.66 L1402.38 1211.66 L1401.79 1211.66 L1401.21 1211.66 L1400.62 1211.66 L1400.03 1211.66 L1399.45 1211.66 L1398.86 1211.66 L1398.27 1211.66 L1397.69 1211.66 L1397.1 1211.66 L1396.51 1211.66 L1395.93 1211.66 L1395.34 1211.66 L1394.75 1211.66 L1394.17 1211.66 L1393.58 1211.66 L1393 1211.66 L1392.41 1211.66 L1391.82 1211.66 L1391.24 1211.66 L1390.65 1211.66 L1390.06 1211.66 L1389.48 1211.66 L1388.89 1211.66 L1388.3 1211.66 L1387.72 1211.66 L1387.13 1211.66 L1386.55 1211.66 L1385.96 1211.66 L1385.37 1211.66 L1384.79 1211.66 L1384.2 1211.66 L1383.61 1211.66 L1383.03 1211.66 L1382.44 1211.66 L1381.85 1211.66 L1381.27 1211.66 L1380.68 1211.66 L1380.09 1211.66 L1379.51 1211.66 L1378.92 1211.66 L1378.34 1211.66 L1377.75 1211.66 L1377.16 1211.66 L1376.58 1211.66 L1375.99 1211.66 L1375.4 1211.66 L1374.82 1211.66 L1374.23 1211.66 L1373.64 1211.66 L1373.06 1211.66 L1372.47 1211.66 L1371.88 1211.66 L1371.3 1211.66 L1370.71 1211.66 L1370.13 1211.66 L1369.54 1211.66 L1368.95 1211.66 L1368.37 1211.66 L1367.78 1211.66 L1367.19 1211.66 L1366.61 1211.66 L1366.02 1211.66 L1365.43 1211.66 L1364.85 1211.66 L1364.26 1211.66 L1363.68 1211.66 L1363.09 1211.66 L1362.5 1211.66 L1361.92 1211.66 L1361.33 1211.66 L1360.74 1211.66 L1360.16 1211.66 L1359.57 1211.66 L1358.98 1211.66 L1358.4 1211.66 L1357.81 1211.66 L1357.22 1211.66 L1356.64 1211.66 L1356.05 1211.66 L1355.47 1211.66 L1354.88 1211.66 L1354.29 1211.66 L1353.71 1211.66 L1353.12 1211.66 L1352.53 1211.66 L1351.95 1211.66 L1351.36 1211.66 L1350.77 1211.66 L1350.19 1211.66 L1349.6 1211.66 L1349.01 1211.66 L1348.43 1211.66 L1347.84 1211.66 L1347.26 1211.66 L1346.67 1211.66 L1346.08 1211.66 L1345.5 1211.66 L1344.91 1211.66 L1344.32 1211.66 L1343.74 1211.66 L1343.15 1211.66 L1342.56 1211.66 L1341.98 1211.66 L1341.39 1211.66 L1340.8 1211.66 L1340.22 1211.66 L1339.63 1211.66 L1339.05 1211.66 L1338.46 1211.66 L1337.87 1211.66 L1337.29 1211.66 L1336.7 1211.66 L1336.11 1211.66 L1335.53 1211.66 L1334.94 1211.66 L1334.35 1211.66 L1333.77 1211.66 L1333.18 1211.66 L1332.6 1211.66 L1332.01 1211.66 L1331.42 1211.66 L1330.84 1211.66 L1330.25 1211.66 L1329.66 1211.66 L1329.08 1211.66 L1328.49 1211.66 L1327.9 1211.66 L1327.32 1211.66 L1326.73 1211.66 L1326.14 1211.66 L1325.56 1211.66 L1324.97 1211.66 L1324.39 1211.66 L1323.8 1211.66 L1323.21 1211.66 L1322.63 1211.66 L1322.04 1211.66 L1321.45 1211.66 L1320.87 1211.66 L1320.28 1211.66 L1319.69 1211.66 L1319.11 1211.66 L1318.52 1211.66 L1317.93 1211.66 L1317.35 1211.66 L1316.76 1211.66 L1316.18 1211.66 L1315.59 1211.66 L1315 1211.66 L1314.42 1211.66 L1313.83 1211.66 L1313.24 1211.66 L1312.66 1211.66 L1312.07 1211.66 L1311.48 1211.66 L1310.9 1211.66 L1310.31 1211.66 L1309.73 1211.66 L1309.14 1211.66 L1308.55 1211.66 L1307.97 1211.66 L1307.38 1211.66 L1306.79 1211.66 L1306.21 1211.66 L1305.62 1211.66 L1305.03 1211.66 L1304.45 1211.66 L1303.86 1211.66 L1303.27 1211.66 L1302.69 1211.66 L1302.1 1211.66 L1301.52 1211.66 L1300.93 1211.66 L1300.34 1211.66 L1299.76 1211.66 L1299.17 1211.66 L1298.58 1211.66 L1298 1211.66 L1297.41 1211.66 L1296.82 1211.66 L1296.24 1211.66 L1295.65 1211.66 L1295.06 1211.66 L1294.48 1211.66 L1293.89 1211.66 L1293.31 1211.66 L1292.72 1211.66 L1292.13 1211.66 L1291.55 1211.66 L1290.96 1211.66 L1290.37 1211.66 L1289.79 1211.66 L1289.2 1211.66 L1288.61 1211.66 L1288.03 1211.66 L1287.44 1211.66 L1286.86 1211.66 L1286.27 1211.66 L1285.68 1211.66 L1285.1 1211.66 L1284.51 1211.66 L1283.92 1211.66 L1283.34 1211.66 L1282.75 1211.66 L1282.16 1211.66 L1281.58 1211.66 L1280.99 1211.66 L1280.4 1211.66 L1279.82 1211.66 L1279.23 1211.66 L1278.65 1211.66 L1278.06 1211.66 L1277.47 1211.66 L1276.89 1211.66 L1276.3 1211.66 L1275.71 1211.66 L1275.13 1211.66 L1274.54 1211.66 L1273.95 1211.66 L1273.37 1211.66 L1272.78 1211.66 L1272.19 1211.66 L1271.61 1211.66 L1271.02 1211.66 L1270.44 1211.66 L1269.85 1211.66 L1269.26 1211.66 L1268.68 1211.66 L1268.09 1211.66 L1267.5 1211.66 L1266.92 1211.66 L1266.33 1211.66 L1265.74 1211.66 L1265.16 1211.66 L1264.57 1211.66 L1263.98 1211.66 L1263.4 1211.66 L1262.81 1211.66 L1262.23 1211.66 L1261.64 1211.66 L1261.05 1211.66 L1260.47 1211.66 L1259.88 1211.66 L1259.29 1211.66 L1258.71 1211.66 L1258.12 1211.66 L1257.53 1211.66 L1256.95 1211.66 L1256.36 1211.66 L1255.78 1211.66 L1255.19 1211.66 L1254.6 1211.66 L1254.02 1211.66 L1253.43 1211.66 L1252.84 1211.66 L1252.26 1211.66 L1251.67 1211.66 L1251.08 1211.66 L1250.5 1211.66 L1249.91 1211.66 L1249.32 1211.66 L1248.74 1211.66 L1248.15 1211.66 L1247.57 1211.66 L1246.98 1211.66 L1246.39 1211.66 L1245.81 1211.66 L1245.22 1211.66 L1244.63 1211.66 L1244.05 1211.66 L1243.46 1211.66 L1242.87 1211.66 L1242.29 1211.66 L1241.7 1211.66 L1241.11 1211.66 L1240.53 1211.66 L1239.94 1211.66 L1239.36 1211.66 L1238.77 1211.66 L1238.18 1211.66 L1237.6 1211.66 L1237.01 1211.66 L1236.42 1211.66 L1235.84 1211.66 L1235.25 1211.66 L1234.66 1211.66 L1234.08 1211.66 L1233.49 1211.66 L1232.91 1211.66 L1232.32 1211.66 L1231.73 1211.66 L1231.15 1211.66 L1230.56 1211.66 L1229.97 1211.66 L1229.39 1211.66 L1228.8 1211.66 L1228.21 1211.66 L1227.63 1211.66 L1227.04 1211.66 L1226.45 1211.66 L1225.87 1211.66 L1225.28 1211.66 L1224.7 1211.66 L1224.11 1211.66 L1223.52 1211.66 L1222.94 1211.66 L1222.35 1211.66 L1221.76 1211.66 L1221.18 1211.66 L1220.59 1211.66 L1220 1211.66 L1219.42 1211.66 L1218.83 1211.66 L1218.24 1211.66 L1217.66 1211.66 L1217.07 1211.66 L1216.49 1211.66 L1215.9 1211.66 L1215.31 1211.66 L1214.73 1211.66 L1214.14 1211.66 L1213.55 1211.66 L1212.97 1211.66 L1212.38 1211.66 L1211.79 1211.66 L1211.21 1211.66 L1210.62 1211.66 L1210.03 1211.66 L1209.45 1211.66 L1208.86 1211.66 L1208.28 1211.66 L1207.69 1211.66 L1207.1 1211.66 L1206.52 1211.66 L1205.93 1211.66 L1205.34 1211.66 L1204.76 1211.66 L1204.17 1211.66 L1203.58 1211.66 L1203 1211.66 L1202.41 1211.66 L1201.83 1211.66 L1201.24 1211.66 L1200.65 1211.66 L1200.07 1211.66 L1199.48 1211.66 L1198.89 1211.66 L1198.31 1211.66 L1197.72 1211.66 L1197.13 1211.66 L1196.55 1211.66 L1195.96 1211.66 L1195.37 1211.66 L1194.79 1211.66 L1194.2 1211.66 L1193.62 1211.66 L1193.03 1211.66 L1192.44 1211.66 L1191.86 1211.66 L1191.27 1211.66 L1190.68 1211.66 L1190.1 1211.66 L1189.51 1211.66 L1188.92 1211.66 L1188.34 1211.66 L1187.75 1211.66 L1187.16 1211.66 L1186.58 1211.66 L1185.99 1211.66 L1185.41 1211.66 L1184.82 1211.66 L1184.23 1211.66 L1183.65 1211.66 L1183.06 1211.66 L1182.47 1211.66 L1181.89 1211.66 L1181.3 1211.66 L1180.71 1211.66 L1180.13 1211.66 L1179.54 1211.66 L1178.96 1211.66 L1178.37 1211.66 L1177.78 1211.66 L1177.2 1211.66 L1176.61 1211.66 L1176.02 1211.66 L1175.44 1211.66 L1174.85 1211.66 L1174.26 1211.66 L1173.68 1211.66 L1173.09 1211.66 L1172.5 1211.66 L1171.92 1211.66 L1171.33 1211.66 L1170.75 1211.66 L1170.16 1211.66 L1169.57 1211.66 L1168.99 1211.66 L1168.4 1211.66 L1167.81 1211.66 L1167.23 1211.66 L1166.64 1211.66 L1166.05 1211.66 L1165.47 1211.66 L1164.88 1211.66 L1164.29 1211.66 L1163.71 1211.66 L1163.12 1211.66 L1162.54 1211.66 L1161.95 1211.66 L1161.36 1211.66 L1160.78 1211.66 L1160.19 1211.66 L1159.6 1211.66 L1159.02 1211.66 L1158.43 1211.66 L1157.84 1211.66 L1157.26 1211.66 L1156.67 1211.66 L1156.09 1211.66 L1155.5 1211.66 L1154.91 1211.66 L1154.33 1211.66 L1153.74 1211.66 L1153.15 1211.66 L1152.57 1211.66 L1151.98 1211.66 L1151.39 1211.66 L1150.81 1211.66 L1150.22 1211.66 L1149.63 1211.66 L1149.05 1211.66 L1148.46 1211.66 L1147.88 1211.66 L1147.29 1211.66 L1146.7 1211.66 L1146.12 1211.66 L1145.53 1211.66 L1144.94 1211.66 L1144.36 1211.66 L1143.77 1211.66 L1143.18 1211.66 L1142.6 1211.66 L1142.01 1211.66 L1141.42 1211.66 L1140.84 1211.66 L1140.25 1211.66 L1139.67 1211.66 L1139.08 1211.66 L1138.49 1211.66 L1137.91 1211.66 L1137.32 1211.66 L1136.73 1211.66 L1136.15 1211.66 L1135.56 1211.66 L1134.97 1211.66 L1134.39 1211.66 L1133.8 1211.66 L1133.21 1211.66 L1132.63 1211.66 L1132.04 1211.66 L1131.46 1211.66 L1130.87 1211.66 L1130.28 1211.66 L1129.7 1211.66 L1129.11 1211.66 L1128.52 1211.66 L1127.94 1211.66 L1127.35 1211.66 L1126.76 1211.66 L1126.18 1211.66 L1125.59 1211.66 L1125.01 1211.66 L1124.42 1211.66 L1123.83 1211.66 L1123.25 1211.66 L1122.66 1211.66 L1122.07 1211.66 L1121.49 1211.66 L1120.9 1211.66 L1120.31 1211.66 L1119.73 1211.66 L1119.14 1211.66 L1118.55 1211.66 L1117.97 1211.66 L1117.38 1211.66 L1116.8 1211.66 L1116.21 1211.66 L1115.62 1211.66 L1115.04 1211.66 L1114.45 1211.66 L1113.86 1211.66 L1113.28 1211.66 L1112.69 1211.66 L1112.1 1211.66 L1111.52 1211.66 L1110.93 1211.66 L1110.34 1211.66 L1109.76 1211.66 L1109.17 1211.66 L1108.59 1211.66 L1108 1211.66 L1107.41 1211.66 L1106.83 1211.66 L1106.24 1211.66 L1105.65 1211.66 L1105.07 1211.66 L1104.48 1211.66 L1103.89 1211.66 L1103.31 1211.66 L1102.72 1211.66 L1102.14 1211.66 L1101.55 1211.66 L1100.96 1211.66 L1100.38 1211.66 L1099.79 1211.66 L1099.2 1211.66 L1098.62 1211.66 L1098.03 1211.66 L1097.44 1211.66 L1096.86 1211.66 L1096.27 1211.66 L1095.68 1211.66 L1095.1 1211.66 L1094.51 1211.66 L1093.93 1211.66 L1093.34 1211.66 L1092.75 1211.66 L1092.17 1211.66 L1091.58 1211.66 L1090.99 1211.66 L1090.41 1211.66 L1089.82 1211.66 L1089.23 1211.66 L1088.65 1211.66 L1088.06 1211.66 L1087.47 1211.66 L1086.89 1211.66 L1086.3 1211.66 L1085.72 1211.66 L1085.13 1211.66 L1084.54 1211.66 L1083.96 1211.66 L1083.37 1211.66 L1082.78 1211.66 L1082.2 1211.66 L1081.61 1211.66 L1081.02 1211.66 L1080.44 1211.66 L1079.85 1211.66 L1079.26 1211.66 L1078.68 1211.66 L1078.09 1211.66 L1077.51 1211.66 L1076.92 1211.66 L1076.33 1211.66 L1075.75 1211.66 L1075.16 1211.66 L1074.57 1211.66 L1073.99 1211.66 L1073.4 1211.66 L1072.81 1211.66 L1072.23 1211.66 L1071.64 1211.66 L1071.06 1211.66 L1070.47 1211.66 L1069.88 1211.66 L1069.3 1211.66 L1068.71 1211.66 L1068.12 1211.66 L1067.54 1211.66 L1066.95 1211.66 L1066.36 1211.66 L1065.78 1211.66 L1065.19 1211.66 L1064.6 1211.66 L1064.02 1211.66 L1063.43 1211.66 L1062.85 1211.66 L1062.26 1211.66 L1061.67 1211.66 L1061.09 1211.66 L1060.5 1211.66 L1059.91 1211.66 L1059.33 1211.66 L1058.74 1211.66 L1058.15 1211.66 L1057.57 1211.66 L1056.98 1211.66 L1056.39 1211.66 L1055.81 1211.66 L1055.22 1211.66 L1054.64 1211.66 L1054.05 1211.66 L1053.46 1211.66 L1052.88 1211.66 L1052.29 1211.66 L1051.7 1211.66 L1051.12 1211.66 L1050.53 1211.66 L1049.94 1211.66 L1049.36 1211.66 L1048.77 1211.66 L1048.19 1211.66 L1047.6 1211.66 L1047.01 1211.66 L1046.43 1211.66 L1045.84 1211.66 L1045.25 1211.66 L1044.67 1211.66 L1044.08 1211.66 L1043.49 1211.66 L1042.91 1211.66 L1042.32 1211.66 L1041.73 1211.66 L1041.15 1211.66 L1040.56 1211.66 L1039.98 1211.66 L1039.39 1211.66 L1038.8 1211.66 L1038.22 1211.66 L1037.63 1211.66 L1037.04 1211.66 L1036.46 1211.66 L1035.87 1211.66 L1035.28 1211.66 L1034.7 1211.66 L1034.11 1211.66 L1033.52 1211.66 L1032.94 1211.66 L1032.35 1211.66 L1031.77 1211.66 L1031.18 1211.66 L1030.59 1211.66 L1030.01 1211.66 L1029.42 1211.66 L1028.83 1211.66 L1028.25 1211.66 L1027.66 1211.66 L1027.07 1211.66 L1026.49 1211.66 L1025.9 1211.66 L1025.32 1211.66 L1024.73 1211.66 L1024.14 1211.66 L1023.56 1211.66 L1022.97 1211.66 L1022.38 1211.66 L1021.8 1211.66 L1021.21 1211.66 L1020.62 1211.66 L1020.04 1211.66 L1019.45 1211.66 L1018.86 1211.66 L1018.28 1211.66 L1017.69 1211.66 L1017.11 1211.66 L1016.52 1211.66 L1015.93 1211.66 L1015.35 1211.66 L1014.76 1211.66 L1014.17 1211.66 L1013.59 1211.66 L1013 1211.66 L1012.41 1211.66 L1011.83 1211.66 L1011.24 1211.66 L1010.65 1211.66 L1010.07 1211.66 L1009.48 1211.66 L1008.9 1211.66 L1008.31 1211.66 L1007.72 1211.66 L1007.14 1211.66 L1006.55 1211.66 L1005.96 1211.66 L1005.38 1211.66 L1004.79 1211.66 L1004.2 1211.66 L1003.62 1211.66 L1003.03 1211.66 L1002.44 1211.66 L1001.86 1211.66 L1001.27 1211.66 L1000.69 1211.66 L1000.1 1211.66 L999.513 1211.66 L998.926 1211.66 L998.34 1211.66 L997.754 1211.66 L997.167 1211.66 L996.581 1211.66 L995.994 1211.66 L995.408 1211.66 L994.822 1211.66 L994.235 1211.66 L993.649 1211.66 L993.062 1211.66 L992.476 1211.66 L991.889 1211.66 L991.303 1211.66 L990.717 1211.66 L990.13 1211.66 L989.544 1211.66 L988.957 1211.66 L988.371 1211.66 L987.785 1211.66 L987.198 1211.66 L986.612 1211.66 L986.025 1211.66  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.78 986.612,1211.78 987.198,1211.78 987.785,1211.78 988.371,1211.78 988.957,1211.78 989.544,1211.78 990.13,1211.78 990.717,1211.78 991.303,1211.78 991.889,1211.78 992.476,1211.78 993.062,1211.78 993.649,1211.78 994.235,1211.78 994.822,1211.78 995.408,1211.78 995.994,1211.78 996.581,1211.78 997.167,1211.78 997.754,1211.78 998.34,1211.78 998.926,1211.78 999.513,1211.78 1000.1,1211.78 1000.69,1211.78 1001.27,1211.78 1001.86,1211.78 1002.44,1211.78 1003.03,1211.78 1003.62,1211.78 1004.2,1211.78 1004.79,1211.78 1005.38,1211.78 1005.96,1211.78 1006.55,1211.78 1007.14,1211.78 1007.72,1211.78 1008.31,1211.78 1008.9,1211.78 1009.48,1211.78 1010.07,1211.78 1010.65,1211.78 1011.24,1211.78 1011.83,1211.78 1012.41,1211.78 1013,1211.78 1013.59,1211.78 1014.17,1211.78 1014.76,1211.78 1015.35,1211.78 1015.93,1211.78 1016.52,1211.78 1017.11,1211.78 1017.69,1211.78 1018.28,1211.78 1018.86,1211.78 1019.45,1211.78 1020.04,1211.78 1020.62,1211.78 1021.21,1211.78 1021.8,1211.78 1022.38,1211.78 1022.97,1211.78 1023.56,1211.78 1024.14,1211.78 1024.73,1211.78 1025.32,1211.78 1025.9,1211.78 1026.49,1211.78 1027.07,1211.78 1027.66,1211.78 1028.25,1211.78 1028.83,1211.78 1029.42,1211.78 1030.01,1211.78 1030.59,1211.78 1031.18,1211.78 1031.77,1211.78 1032.35,1211.78 1032.94,1211.78 1033.52,1211.78 1034.11,1211.78 1034.7,1211.78 1035.28,1211.78 1035.87,1211.78 1036.46,1211.78 1037.04,1211.78 1037.63,1211.78 1038.22,1211.78 1038.8,1211.78 1039.39,1211.78 1039.98,1211.78 1040.56,1211.78 1041.15,1211.78 1041.73,1211.78 1042.32,1211.78 1042.91,1211.78 1043.49,1211.78 1044.08,1211.78 1044.67,1211.78 1045.25,1211.78 1045.84,1211.78 1046.43,1211.78 1047.01,1211.78 1047.6,1211.78 1048.19,1211.78 1048.77,1211.78 1049.36,1211.78 1049.94,1211.78 1050.53,1211.78 1051.12,1211.78 1051.7,1211.78 1052.29,1211.78 1052.88,1211.78 1053.46,1211.78 1054.05,1211.78 1054.64,1211.78 1055.22,1211.78 1055.81,1211.78 1056.39,1211.78 1056.98,1211.78 1057.57,1211.78 1058.15,1211.78 1058.74,1211.78 1059.33,1211.78 1059.91,1211.78 1060.5,1211.78 1061.09,1211.78 1061.67,1211.78 1062.26,1211.78 1062.85,1211.78 1063.43,1211.78 1064.02,1211.78 1064.6,1211.78 1065.19,1211.78 1065.78,1211.78 1066.36,1211.78 1066.95,1211.78 1067.54,1211.78 1068.12,1211.78 1068.71,1211.78 1069.3,1211.78 1069.88,1211.78 1070.47,1211.78 1071.06,1211.78 1071.64,1211.78 1072.23,1211.78 1072.81,1211.78 1073.4,1211.78 1073.99,1211.78 1074.57,1211.78 1075.16,1211.78 1075.75,1211.78 1076.33,1211.78 1076.92,1211.78 1077.51,1211.78 1078.09,1211.78 1078.68,1211.78 1079.26,1211.78 1079.85,1211.78 1080.44,1211.78 1081.02,1211.78 1081.61,1211.78 1082.2,1211.78 1082.78,1211.78 1083.37,1211.78 1083.96,1211.78 1084.54,1211.78 1085.13,1211.78 1085.72,1211.78 1086.3,1211.78 1086.89,1211.78 1087.47,1211.78 1088.06,1211.78 1088.65,1211.78 1089.23,1211.78 1089.82,1211.78 1090.41,1211.78 1090.99,1211.78 1091.58,1211.78 1092.17,1211.78 1092.75,1211.78 1093.34,1211.78 1093.93,1211.78 1094.51,1211.78 1095.1,1211.78 1095.68,1211.78 1096.27,1211.78 1096.86,1211.78 1097.44,1211.78 1098.03,1211.78 1098.62,1211.78 1099.2,1211.78 1099.79,1211.78 1100.38,1211.78 1100.96,1211.78 1101.55,1211.78 1102.14,1211.78 1102.72,1211.78 1103.31,1211.78 1103.89,1211.78 1104.48,1211.78 1105.07,1211.78 1105.65,1211.78 1106.24,1211.78 1106.83,1211.78 1107.41,1211.78 1108,1211.78 1108.59,1211.78 1109.17,1211.78 1109.76,1211.78 1110.34,1211.78 1110.93,1211.78 1111.52,1211.78 1112.1,1211.78 1112.69,1211.78 1113.28,1211.78 1113.86,1211.78 1114.45,1211.78 1115.04,1211.78 1115.62,1211.78 1116.21,1211.78 1116.8,1211.78 1117.38,1211.78 1117.97,1211.78 1118.55,1211.78 1119.14,1211.78 1119.73,1211.78 1120.31,1211.78 1120.9,1211.78 1121.49,1211.78 1122.07,1211.78 1122.66,1211.78 1123.25,1211.78 1123.83,1211.78 1124.42,1211.78 1125.01,1211.78 1125.59,1211.78 1126.18,1211.78 1126.76,1211.78 1127.35,1211.78 1127.94,1211.78 1128.52,1211.78 1129.11,1211.78 1129.7,1211.78 1130.28,1211.78 1130.87,1211.78 1131.46,1211.78 1132.04,1211.78 1132.63,1211.78 1133.21,1211.78 1133.8,1211.78 1134.39,1211.78 1134.97,1211.78 1135.56,1211.78 1136.15,1211.78 1136.73,1211.78 1137.32,1211.78 1137.91,1211.78 1138.49,1211.78 1139.08,1211.78 1139.67,1211.78 1140.25,1211.78 1140.84,1211.78 1141.42,1211.78 1142.01,1211.78 1142.6,1211.78 1143.18,1211.78 1143.77,1211.78 1144.36,1211.78 1144.94,1211.78 1145.53,1211.78 1146.12,1211.78 1146.7,1211.78 1147.29,1211.78 1147.88,1211.78 1148.46,1211.78 1149.05,1211.78 1149.63,1211.78 1150.22,1211.78 1150.81,1211.78 1151.39,1211.78 1151.98,1211.78 1152.57,1211.78 1153.15,1211.78 1153.74,1211.78 1154.33,1211.78 1154.91,1211.78 1155.5,1211.78 1156.09,1211.78 1156.67,1211.78 1157.26,1211.78 1157.84,1211.78 1158.43,1211.78 1159.02,1211.78 1159.6,1211.78 1160.19,1211.78 1160.78,1211.78 1161.36,1211.78 1161.95,1211.78 1162.54,1211.78 1163.12,1211.78 1163.71,1211.78 1164.29,1211.78 1164.88,1211.78 1165.47,1211.78 1166.05,1211.78 1166.64,1211.78 1167.23,1211.78 1167.81,1211.78 1168.4,1211.78 1168.99,1211.78 1169.57,1211.78 1170.16,1211.78 1170.75,1211.78 1171.33,1211.78 1171.92,1211.78 1172.5,1211.78 1173.09,1211.78 1173.68,1211.78 1174.26,1211.78 1174.85,1211.78 1175.44,1211.78 1176.02,1211.78 1176.61,1211.78 1177.2,1211.78 1177.78,1211.78 1178.37,1211.78 1178.96,1211.78 1179.54,1211.78 1180.13,1211.78 1180.71,1211.78 1181.3,1211.78 1181.89,1211.78 1182.47,1211.78 1183.06,1211.78 1183.65,1211.78 1184.23,1211.78 1184.82,1211.78 1185.41,1211.78 1185.99,1211.78 1186.58,1211.78 1187.16,1211.78 1187.75,1211.78 1188.34,1211.78 1188.92,1211.78 1189.51,1211.78 1190.1,1211.78 1190.68,1211.78 1191.27,1211.78 1191.86,1211.78 1192.44,1211.78 1193.03,1211.78 1193.62,1211.78 1194.2,1211.78 1194.79,1211.78 1195.37,1211.78 1195.96,1211.78 1196.55,1211.78 1197.13,1211.78 1197.72,1211.78 1198.31,1211.78 1198.89,1211.78 1199.48,1211.78 1200.07,1211.78 1200.65,1211.78 1201.24,1211.78 1201.83,1211.78 1202.41,1211.78 1203,1211.78 1203.58,1211.78 1204.17,1211.78 1204.76,1211.78 1205.34,1211.78 1205.93,1211.78 1206.52,1211.78 1207.1,1211.78 1207.69,1211.78 1208.28,1211.78 1208.86,1211.78 1209.45,1211.78 1210.03,1211.78 1210.62,1211.78 1211.21,1211.78 1211.79,1211.78 1212.38,1211.78 1212.97,1211.78 1213.55,1211.78 1214.14,1211.78 1214.73,1211.78 1215.31,1211.78 1215.9,1211.78 1216.49,1211.78 1217.07,1211.78 1217.66,1211.78 1218.24,1211.78 1218.83,1211.78 1219.42,1211.78 1220,1211.78 1220.59,1211.78 1221.18,1211.78 1221.76,1211.78 1222.35,1211.78 1222.94,1211.78 1223.52,1211.78 1224.11,1211.78 1224.7,1211.78 1225.28,1211.78 1225.87,1211.78 1226.45,1211.78 1227.04,1211.78 1227.63,1211.78 1228.21,1211.78 1228.8,1211.78 1229.39,1211.78 1229.97,1211.78 1230.56,1211.78 1231.15,1211.78 1231.73,1211.78 1232.32,1211.78 1232.91,1211.78 1233.49,1211.78 1234.08,1211.78 1234.66,1211.78 1235.25,1211.78 1235.84,1211.78 1236.42,1211.78 1237.01,1211.78 1237.6,1211.78 1238.18,1211.78 1238.77,1211.78 1239.36,1211.78 1239.94,1211.78 1240.53,1211.78 1241.11,1211.78 1241.7,1211.78 1242.29,1211.78 1242.87,1211.78 1243.46,1211.78 1244.05,1211.78 1244.63,1211.78 1245.22,1211.78 1245.81,1211.78 1246.39,1211.78 1246.98,1211.78 1247.57,1211.78 1248.15,1211.78 1248.74,1211.78 1249.32,1211.78 1249.91,1211.78 1250.5,1211.78 1251.08,1211.78 1251.67,1211.78 1252.26,1211.78 1252.84,1211.78 1253.43,1211.78 1254.02,1211.78 1254.6,1211.78 1255.19,1211.78 1255.78,1211.78 1256.36,1211.78 1256.95,1211.78 1257.53,1211.78 1258.12,1211.78 1258.71,1211.78 1259.29,1211.78 1259.88,1211.78 1260.47,1211.78 1261.05,1211.78 1261.64,1211.78 1262.23,1211.78 1262.81,1211.78 1263.4,1211.78 1263.98,1211.78 1264.57,1211.78 1265.16,1211.78 1265.74,1211.78 1266.33,1211.78 1266.92,1211.78 1267.5,1211.78 1268.09,1211.78 1268.68,1211.78 1269.26,1211.78 1269.85,1211.78 1270.44,1211.78 1271.02,1211.78 1271.61,1211.78 1272.19,1211.78 1272.78,1211.78 1273.37,1211.78 1273.95,1211.78 1274.54,1211.78 1275.13,1211.78 1275.71,1211.78 1276.3,1211.78 1276.89,1211.78 1277.47,1211.78 1278.06,1211.78 1278.65,1211.78 1279.23,1211.78 1279.82,1211.78 1280.4,1211.78 1280.99,1211.78 1281.58,1211.78 1282.16,1211.78 1282.75,1211.78 1283.34,1211.78 1283.92,1211.78 1284.51,1211.78 1285.1,1211.78 1285.68,1211.78 1286.27,1211.78 1286.86,1211.78 1287.44,1211.78 1288.03,1211.78 1288.61,1211.78 1289.2,1211.78 1289.79,1211.78 1290.37,1211.78 1290.96,1211.78 1291.55,1211.78 1292.13,1211.78 1292.72,1211.78 1293.31,1211.78 1293.89,1211.78 1294.48,1211.78 1295.06,1211.78 1295.65,1211.78 1296.24,1211.78 1296.82,1211.78 1297.41,1211.78 1298,1211.78 1298.58,1211.78 1299.17,1211.78 1299.76,1211.78 1300.34,1211.78 1300.93,1211.78 1301.52,1211.78 1302.1,1211.78 1302.69,1211.78 1303.27,1211.78 1303.86,1211.78 1304.45,1211.78 1305.03,1211.78 1305.62,1211.78 1306.21,1211.78 1306.79,1211.78 1307.38,1211.78 1307.97,1211.78 1308.55,1211.78 1309.14,1211.78 1309.73,1211.78 1310.31,1211.78 1310.9,1211.78 1311.48,1211.78 1312.07,1211.78 1312.66,1211.78 1313.24,1211.78 1313.83,1211.78 1314.42,1211.78 1315,1211.78 1315.59,1211.78 1316.18,1211.78 1316.76,1211.78 1317.35,1211.78 1317.93,1211.78 1318.52,1211.78 1319.11,1211.78 1319.69,1211.78 1320.28,1211.78 1320.87,1211.78 1321.45,1211.78 1322.04,1211.78 1322.63,1211.78 1323.21,1211.78 1323.8,1211.78 1324.39,1211.78 1324.97,1211.78 1325.56,1211.78 1326.14,1211.78 1326.73,1211.78 1327.32,1211.78 1327.9,1211.78 1328.49,1211.78 1329.08,1211.78 1329.66,1211.78 1330.25,1211.78 1330.84,1211.78 1331.42,1211.78 1332.01,1211.78 1332.6,1211.78 1333.18,1211.78 1333.77,1211.78 1334.35,1211.78 1334.94,1211.78 1335.53,1211.78 1336.11,1211.78 1336.7,1211.78 1337.29,1211.78 1337.87,1211.78 1338.46,1211.78 1339.05,1211.78 1339.63,1211.78 1340.22,1211.78 1340.8,1211.78 1341.39,1211.78 1341.98,1211.78 1342.56,1211.78 1343.15,1211.78 1343.74,1211.78 1344.32,1211.78 1344.91,1211.78 1345.5,1211.78 1346.08,1211.78 1346.67,1211.78 1347.26,1211.78 1347.84,1211.78 1348.43,1211.78 1349.01,1211.78 1349.6,1211.78 1350.19,1211.78 1350.77,1211.78 1351.36,1211.78 1351.95,1211.78 1352.53,1211.78 1353.12,1211.78 1353.71,1211.78 1354.29,1211.78 1354.88,1211.78 1355.47,1211.78 1356.05,1211.78 1356.64,1211.78 1357.22,1211.78 1357.81,1211.78 1358.4,1211.78 1358.98,1211.78 1359.57,1211.78 1360.16,1211.78 1360.74,1211.78 1361.33,1211.78 1361.92,1211.78 1362.5,1211.78 1363.09,1211.78 1363.68,1211.78 1364.26,1211.78 1364.85,1211.78 1365.43,1211.78 1366.02,1211.78 1366.61,1211.78 1367.19,1211.78 1367.78,1211.78 1368.37,1211.78 1368.95,1211.78 1369.54,1211.78 1370.13,1211.78 1370.71,1211.78 1371.3,1211.78 1371.88,1211.78 1372.47,1211.78 1373.06,1211.78 1373.64,1211.78 1374.23,1211.78 1374.82,1211.78 1375.4,1211.78 1375.99,1211.78 1376.58,1211.78 1377.16,1211.78 1377.75,1211.78 1378.34,1211.78 1378.92,1211.78 1379.51,1211.78 1380.09,1211.78 1380.68,1211.78 1381.27,1211.78 1381.85,1211.78 1382.44,1211.78 1383.03,1211.78 1383.61,1211.78 1384.2,1211.78 1384.79,1211.78 1385.37,1211.78 1385.96,1211.78 1386.55,1211.78 1387.13,1211.78 1387.72,1211.78 1388.3,1211.78 1388.89,1211.78 1389.48,1211.78 1390.06,1211.78 1390.65,1211.78 1391.24,1211.78 1391.82,1211.78 1392.41,1211.78 1393,1211.78 1393.58,1211.78 1394.17,1211.78 1394.75,1211.78 1395.34,1211.78 1395.93,1211.78 1396.51,1211.78 1397.1,1211.78 1397.69,1211.78 1398.27,1211.78 1398.86,1211.78 1399.45,1211.78 1400.03,1211.78 1400.62,1211.78 1401.21,1211.78 1401.79,1211.78 1402.38,1211.78 1402.96,1211.78 1403.55,1211.78 1404.14,1211.78 1404.72,1211.78 1405.31,1211.78 1405.9,1211.78 1406.48,1211.78 1407.07,1211.78 1407.66,1211.78 1408.24,1211.78 1408.83,1211.78 1409.42,1211.78 1410,1211.78 1410.59,1211.78 1411.17,1211.78 1411.76,1211.78 1412.35,1211.78 1412.93,1211.78 1413.52,1211.78 1414.11,1211.78 1414.69,1211.78 1415.28,1211.78 1415.87,1211.78 1416.45,1211.78 1417.04,1211.78 1417.63,1211.78 1418.21,1211.78 1418.8,1211.78 1419.38,1211.78 1419.97,1211.78 1420.56,1211.78 1421.14,1211.78 1421.73,1211.78 1422.32,1211.78 1422.9,1211.78 1423.49,1211.78 1424.08,1211.78 1424.66,1211.78 1425.25,1211.78 1425.83,1211.78 1426.42,1211.78 1427.01,1211.78 1427.59,1211.78 1428.18,1211.78 1428.77,1211.78 1429.35,1211.78 1429.94,1211.78 1430.53,1211.78 1431.11,1211.78 1431.7,1211.78 1432.29,1211.78 1432.87,1211.78 1433.46,1211.78 1434.04,1211.78 1434.63,1211.78 1435.22,1211.78 1435.8,1211.78 1436.39,1211.78 1436.98,1211.78 1437.56,1211.78 1438.15,1211.78 1438.74,1211.78 1439.32,1211.78 1439.91,1211.78 1440.5,1211.78 1441.08,1211.78 1441.67,1211.78 1442.25,1211.78 1442.84,1211.78 1443.43,1211.78 1444.01,1211.78 1444.6,1211.78 1445.19,1211.78 1445.77,1211.78 1446.36,1211.78 1446.95,1211.78 1447.53,1211.78 1448.12,1211.78 1448.7,1211.78 1449.29,1211.78 1449.88,1211.78 1450.46,1211.78 1451.05,1211.78 1451.64,1211.78 1452.22,1211.78 1452.81,1211.78 1453.4,1211.78 1453.98,1211.78 1454.57,1211.78 1455.16,1211.78 1455.74,1211.78 1456.33,1211.78 1456.91,1211.78 1457.5,1211.78 1458.09,1211.78 1458.67,1211.78 1459.26,1211.78 1459.85,1211.78 1460.43,1211.78 1461.02,1211.78 1461.61,1211.78 1462.19,1211.78 1462.78,1211.78 1463.37,1211.78 1463.95,1211.78 1464.54,1211.78 1465.12,1211.78 1465.71,1211.78 1466.3,1211.78 1466.88,1211.78 1467.47,1211.78 1468.06,1211.78 1468.64,1211.78 1469.23,1211.78 1469.82,1211.78 1470.4,1211.78 1470.99,1211.78 1471.57,1211.78 1472.16,1211.78 1472.75,1211.78 1473.33,1211.78 1473.92,1211.78 1474.51,1211.78 1475.09,1211.78 1475.68,1211.78 1476.27,1211.78 1476.85,1211.78 1477.44,1211.78 1478.03,1211.78 1478.61,1211.78 1479.2,1211.78 1479.78,1211.78 1480.37,1211.78 1480.96,1211.78 1481.54,1211.78 1482.13,1211.78 1482.72,1211.78 1483.3,1211.78 1483.89,1211.78 1484.48,1211.78 1485.06,1211.78 1485.65,1211.78 1486.24,1211.78 1486.82,1211.78 1487.41,1211.78 1487.99,1211.78 1488.58,1211.78 1489.17,1211.78 1489.75,1211.78 1490.34,1211.78 1490.93,1211.78 1491.51,1211.78 1492.1,1211.78 1492.69,1211.78 1493.27,1211.78 1493.86,1211.78 1494.45,1211.78 1495.03,1211.78 1495.62,1211.78 1496.2,1211.78 1496.79,1211.78 1497.38,1211.78 1497.96,1211.78 1498.55,1211.78 1499.14,1211.78 1499.72,1211.78 1500.31,1211.78 1500.9,1211.78 1501.48,1211.78 1502.07,1211.78 1502.65,1211.78 1503.24,1211.78 1503.83,1211.78 1504.41,1211.78 1505,1211.78 1505.59,1211.78 1506.17,1211.78 1506.76,1211.78 1507.35,1211.78 1507.93,1211.78 1508.52,1211.78 1509.11,1211.78 1509.69,1211.78 1510.28,1211.78 1510.86,1211.78 1511.45,1211.78 1512.04,1211.78 1512.62,1211.78 1513.21,1211.78 1513.8,1211.78 1514.38,1211.78 1514.97,1211.78 1515.56,1211.78 1516.14,1211.78 1516.73,1211.78 1517.32,1211.78 1517.9,1211.78 1518.49,1211.78 1519.07,1211.78 1519.66,1211.78 1520.25,1211.78 1520.83,1211.78 1521.42,1211.78 1522.01,1211.78 1522.59,1211.78 1523.18,1211.78 1523.77,1211.78 1524.35,1211.78 1524.94,1211.78 1525.52,1211.78 1526.11,1211.78 1526.7,1211.78 1527.28,1211.78 1527.87,1211.78 1528.46,1211.78 1529.04,1211.78 1529.63,1211.78 1530.22,1211.78 1530.8,1211.78 1531.39,1211.78 1531.98,1211.78 1532.56,1211.78 1533.15,1211.78 1533.73,1211.78 1534.32,1211.78 1534.91,1211.78 1535.49,1211.78 1536.08,1211.78 1536.67,1211.78 1537.25,1211.78 1537.84,1211.78 1538.43,1211.78 1539.01,1211.78 1539.6,1211.78 1540.19,1211.78 1540.77,1211.78 1541.36,1211.78 1541.94,1211.78 1542.53,1211.78 1543.12,1211.78 1543.7,1211.78 1544.29,1211.78 1544.88,1211.78 1545.46,1211.78 1546.05,1211.78 1546.64,1211.78 1547.22,1211.78 1547.81,1211.78 1548.4,1211.78 1548.98,1211.78 1549.57,1211.78 1550.15,1211.78 1550.74,1211.78 1551.33,1211.78 1551.91,1211.78 1552.5,1211.78 1553.09,1211.78 1553.67,1211.78 1554.26,1211.78 1554.85,1211.78 1555.43,1211.78 1556.02,1211.78 1556.6,1211.78 1557.19,1211.78 1557.78,1211.78 1558.36,1211.78 1558.95,1211.78 1559.54,1211.78 1560.12,1211.78 1560.71,1211.78 1561.3,1211.78 1561.88,1211.78 1562.47,1211.78 1563.06,1211.78 1563.64,1211.78 1564.23,1211.78 1564.81,1211.78 1565.4,1211.78 1565.99,1211.78 1566.57,1211.78 1567.16,1211.78 1567.75,1211.78 1568.33,1211.78 1568.92,1211.78 1569.51,1211.78 1570.09,1211.78 1570.68,1211.78 1571.27,1211.78 1571.85,1211.78 1572.44,1211.78 1573.02,1211.78 1573.61,1211.78 1574.2,1211.78 1574.78,1211.78 1575.37,1211.78 1575.96,1211.78 1576.54,1211.78 1577.13,1211.78 1577.72,1211.78 1578.3,1211.78 1578.89,1211.78 1579.47,1211.78 1580.06,1211.78 1580.65,1211.78 1581.23,1211.78 1581.82,1211.78 1582.41,1211.78 1582.99,1211.78 1583.58,1211.78 1584.17,1211.78 1584.75,1211.78 1585.34,1211.78 1585.93,1211.78 1586.51,1211.78 1587.1,1211.78 1587.68,1211.78 1588.27,1211.78 1588.86,1211.78 1589.44,1211.78 1590.03,1211.78 1590.62,1211.78 1591.2,1211.78 1591.79,1211.78 1592.38,1211.78 1592.96,1211.78 1593.55,1211.78 1594.14,1211.78 1594.72,1211.78 1595.31,1211.78 1595.89,1211.78 1596.48,1211.78 1597.07,1211.78 1597.65,1211.78 1598.24,1211.78 1598.83,1211.78 1599.41,1211.78 1600,1211.78 1600.59,1211.78 1601.17,1211.78 1601.76,1211.78 1602.34,1211.78 1602.93,1211.78 1603.52,1211.78 1604.1,1211.78 1604.69,1211.78 1605.28,1211.78 1605.86,1211.78 1606.45,1211.78 1607.04,1211.78 1607.62,1211.78 1608.21,1211.78 1608.8,1211.78 1609.38,1211.78 1609.97,1211.78 1610.55,1211.78 1611.14,1211.78 1611.73,1211.78 1612.31,1211.78 1612.9,1211.78 1613.49,1211.78 1614.07,1211.78 1614.66,1211.78 1615.25,1211.78 1615.83,1211.78 1616.42,1211.78 1617.01,1211.78 1617.59,1211.78 1618.18,1211.78 1618.76,1211.78 1619.35,1211.78 1619.94,1211.78 1620.52,1211.78 1621.11,1211.78 1621.7,1211.78 1622.28,1211.78 1622.87,1211.78 1623.46,1211.78 1624.04,1211.78 1624.63,1211.78 1625.22,1211.78 1625.8,1211.78 1626.39,1211.78 1626.97,1211.78 1627.56,1211.78 1628.15,1211.78 1628.73,1211.78 1629.32,1211.78 1629.91,1211.78 1630.49,1211.78 1631.08,1211.78 1631.67,1211.78 1632.25,1211.78 1632.84,1211.78 1633.42,1211.78 1634.01,1211.78 1634.6,1211.78 1635.18,1211.78 1635.77,1211.78 1636.36,1211.78 1636.94,1211.78 1637.53,1211.78 1638.12,1211.78 1638.7,1211.78 1639.29,1211.78 1639.88,1211.78 1640.46,1211.78 1641.05,1211.78 1641.63,1211.78 1642.22,1211.78 1642.81,1211.78 1643.39,1211.78 1643.98,1211.78 1644.57,1211.78 1645.15,1211.78 1645.74,1211.78 1646.33,1211.78 1646.91,1211.78 1647.5,1211.78 1648.09,1211.78 1648.67,1211.78 1649.26,1211.78 1649.84,1211.78 1650.43,1211.78 1651.02,1211.78 1651.6,1211.78 1652.19,1211.78 1652.78,1211.78 1653.36,1211.78 1653.95,1211.78 1654.54,1211.78 1655.12,1211.78 1655.71,1211.78 1656.29,1211.78 1656.88,1211.78 1657.47,1211.78 1658.05,1211.78 1658.64,1211.78 1659.23,1211.78 1659.81,1211.78 1660.4,1211.78 1660.99,1211.78 1661.57,1211.78 1662.16,1211.78 1662.75,1211.78 1663.33,1211.78 1663.92,1211.78 1664.5,1211.78 1665.09,1211.78 1665.68,1211.78 1666.26,1211.78 1666.85,1211.78 1667.44,1211.78 1668.02,1211.78 1668.61,1211.78 1669.2,1211.78 1669.78,1211.78 1670.37,1211.78 1670.96,1211.78 1671.54,1211.78 1672.13,1211.78 1672.71,1211.78 1673.3,1211.78 1673.89,1211.78 1674.47,1211.78 1675.06,1211.78 1675.65,1211.78 1676.23,1211.78 1676.82,1211.78 1677.41,1211.78 1677.99,1211.78 1678.58,1211.78 1679.17,1211.78 1679.75,1211.78 1680.34,1211.78 1680.92,1211.78 1681.51,1211.78 1682.1,1211.78 1682.68,1211.78 1683.27,1211.78 1683.86,1211.78 1684.44,1211.78 1685.03,1211.78 1685.62,1211.78 1686.2,1211.78 1686.79,1211.78 1687.37,1211.78 1687.96,1211.78 1688.55,1211.78 1689.13,1211.78 1689.72,1211.78 1690.31,1211.78 1690.89,1211.78 1691.48,1211.78 1692.07,1211.78 1692.65,1211.78 1693.24,1211.78 1693.83,1211.78 1694.41,1211.78 1695,1211.78 1695.58,1211.78 1696.17,1211.78 1696.76,1211.78 1697.34,1211.78 1697.93,1211.78 1698.52,1211.78 1699.1,1211.78 1699.69,1211.78 1700.28,1211.78 1700.86,1211.78 1701.45,1211.78 1702.04,1211.78 1702.62,1211.78 1703.21,1211.78 1703.79,1211.78 1704.38,1211.78 1704.97,1211.78 1705.55,1211.78 1706.14,1211.78 1706.73,1211.78 1707.31,1211.78 1707.9,1211.78 1708.49,1211.78 1709.07,1211.78 1709.66,1211.78 1710.24,1211.78 1710.83,1211.78 1711.42,1211.78 1712,1211.78 1712.59,1211.78 1713.18,1211.78 1713.76,1211.78 1714.35,1211.78 1714.94,1211.78 1715.52,1211.78 1716.11,1211.78 1716.7,1211.78 1717.28,1211.78 1717.87,1211.78 1718.45,1211.78 1719.04,1211.78 1719.63,1211.78 1720.21,1211.78 1720.8,1211.78 1721.39,1211.78 1721.97,1211.78 1722.56,1211.78 1723.15,1211.78 1723.73,1211.78 1724.32,1211.78 1724.91,1211.78 1725.49,1211.78 1726.08,1211.78 1726.66,1211.78 1727.25,1211.78 1727.84,1211.78 1728.42,1211.78 1729.01,1211.78 1729.6,1211.78 1730.18,1211.78 1730.77,1211.78 1731.36,1211.78 1731.94,1211.78 1732.53,1211.78 1733.11,1211.78 1733.7,1211.78 1734.29,1211.78 1734.87,1211.78 1735.46,1211.78 1736.05,1211.78 1736.63,1211.78 1737.22,1211.78 1737.81,1211.78 1738.39,1211.78 1738.98,1211.78 1739.57,1211.78 1740.15,1211.78 1740.74,1211.78 1741.32,1211.78 1741.91,1211.78 1742.5,1211.78 1743.08,1211.78 1743.67,1211.78 1744.26,1211.78 1744.84,1211.78 1745.43,1211.78 1746.02,1211.78 1746.6,1211.78 1747.19,1211.78 1747.78,1211.78 1748.36,1211.78 1748.95,1211.78 1749.53,1211.78 1750.12,1211.78 1750.71,1211.78 1751.29,1211.78 1751.88,1211.78 1752.47,1211.78 1753.05,1211.78 1753.64,1211.78 1754.23,1211.78 1754.81,1211.78 1755.4,1211.78 1755.99,1211.78 1756.57,1211.78 1757.16,1211.78 1757.74,1211.78 1758.33,1211.78 1758.92,1211.78 1759.5,1211.78 1760.09,1211.78 1760.68,1211.78 1761.26,1211.78 1761.85,1211.78 1762.44,1211.78 1763.02,1211.78 1763.61,1211.78 1764.19,1211.78 1764.78,1211.78 1765.37,1211.78 1765.95,1211.78 1766.54,1211.78 1767.13,1211.78 1767.71,1211.78 1768.3,1211.78 1768.89,1211.78 1769.47,1211.78 1770.06,1211.78 1770.65,1211.78 1771.23,1211.78 1771.82,1211.78 1772.4,1211.78 1772.99,1211.78 1773.58,1211.78 1774.16,1211.78 1774.75,1211.78 1775.34,1211.78 1775.92,1211.78 1776.51,1211.78 1777.1,1211.78 1777.68,1211.78 1778.27,1211.78 1778.86,1211.78 1779.44,1211.78 1780.03,1211.78 1780.61,1211.78 1781.2,1211.78 1781.79,1211.78 1782.37,1211.78 1782.96,1211.78 1783.55,1211.78 1784.13,1211.78 1784.72,1211.78 1785.31,1211.78 1785.89,1211.78 1786.48,1211.78 1787.06,1211.78 1787.65,1211.78 1788.24,1211.78 1788.82,1211.78 1789.41,1211.78 1790,1211.78 1790.58,1211.78 1791.17,1211.78 1791.76,1211.78 1792.34,1211.78 1792.93,1211.78 1793.52,1211.78 1794.1,1211.78 1794.69,1211.78 1795.27,1211.78 1795.86,1211.78 1796.45,1211.78 1797.03,1211.78 1797.62,1211.78 1798.21,1211.78 1798.79,1211.78 1799.38,1211.78 1799.97,1211.78 1800.55,1211.78 1801.14,1211.78 1801.73,1211.78 1802.31,1211.78 1802.9,1211.78 1803.48,1211.78 1804.07,1211.78 1804.66,1211.78 1805.24,1211.78 1805.83,1211.78 1806.42,1211.78 1807,1211.78 1807.59,1211.78 1808.18,1211.78 1808.76,1211.78 1809.35,1211.78 1809.94,1211.78 1810.52,1211.78 1811.11,1211.78 1811.69,1211.78 1812.28,1211.78 1812.87,1211.78 1813.45,1211.78 1814.04,1211.78 1814.63,1211.78 1815.21,1211.78 1815.8,1211.78 1816.39,1211.78 1816.97,1211.78 1817.56,1211.78 1818.14,1211.78 1818.73,1211.78 1819.32,1211.78 1819.9,1211.78 1820.49,1211.78 1821.08,1211.78 1821.66,1211.78 1822.25,1211.78 1822.84,1211.78 1823.42,1211.78 1824.01,1211.78 1824.6,1211.78 1825.18,1211.78 1825.77,1211.78 1826.35,1211.78 1826.94,1211.78 1827.53,1211.78 1828.11,1211.78 1828.7,1211.78 1829.29,1211.78 1829.87,1211.78 1830.46,1211.78 1831.05,1211.78 1831.63,1211.78 1832.22,1211.78 1832.81,1211.78 1833.39,1211.78 1833.98,1211.78 1834.56,1211.78 1835.15,1211.78 1835.74,1211.78 1836.32,1211.78 1836.91,1211.78 1837.5,1211.78 1838.08,1211.78 1838.67,1211.78 1839.26,1211.78 1839.84,1211.78 1840.43,1211.78 1841.01,1211.78 1841.6,1211.78 1842.19,1211.78 1842.77,1211.78 1843.36,1211.78 1843.95,1211.78 1844.53,1211.78 1845.12,1211.78 1845.71,1211.78 1846.29,1211.78 1846.88,1211.78 1847.47,1211.78 1848.05,1211.78 1848.64,1211.78 1849.22,1211.78 1849.81,1211.78 1850.4,1211.78 1850.98,1211.78 1851.57,1211.78 1852.16,1211.78 1852.74,1211.78 1853.33,1211.78 1853.92,1211.78 1854.5,1211.78 1855.09,1211.78 1855.68,1211.78 1856.26,1211.78 1856.85,1211.78 1857.43,1211.78 1858.02,1211.78 1858.61,1211.78 1859.19,1211.78 1859.78,1211.78 1860.37,1211.78 1860.95,1211.78 1861.54,1211.78 1862.13,1211.78 1862.71,1211.78 1863.3,1211.78 1863.88,1211.78 1864.47,1211.78 1865.06,1211.78 1865.64,1211.78 1866.23,1211.78 1866.82,1211.78 1867.4,1211.78 1867.99,1211.78 1868.58,1211.78 1869.16,1211.78 1869.75,1211.78 1870.34,1211.78 1870.92,1211.78 1871.51,1211.78 1872.09,1211.78 1872.68,1211.78 1873.27,1211.78 1873.85,1211.78 1874.44,1211.78 1875.03,1211.78 1875.61,1211.78 1876.2,1211.78 1876.79,1211.78 1877.37,1211.78 1877.96,1211.78 1878.55,1211.78 1879.13,1211.78 1879.72,1211.78 1880.3,1211.78 1880.89,1211.78 1881.48,1211.78 1882.06,1211.78 1882.65,1211.78 1883.24,1211.78 1883.82,1211.78 1884.41,1211.78 1885,1211.78 1885.58,1211.78 1886.17,1211.78 1886.76,1211.78 1887.34,1211.78 1887.93,1211.78 1888.51,1211.78 1889.1,1211.78 1889.69,1211.78 1890.27,1211.78 1890.86,1211.78 1891.45,1211.78 1892.03,1211.78 1892.62,1211.78 1893.21,1211.78 1893.79,1211.78 1894.38,1211.78 1894.96,1211.78 1895.55,1211.78 1896.14,1211.78 1896.72,1211.78 1897.31,1211.78 1897.9,1211.78 1898.48,1211.78 1899.07,1211.78 1899.66,1211.78 1900.24,1211.78 1900.83,1211.78 1901.42,1211.78 1902,1211.78 1902.59,1211.78 1903.17,1211.78 1903.76,1211.78 1904.35,1211.78 1904.93,1211.78 1905.52,1211.78 1906.11,1211.78 1906.69,1211.78 1907.28,1211.78 1907.87,1211.78 1908.45,1211.78 1909.04,1211.78 1909.63,1211.78 1910.21,1211.78 1910.8,1211.78 1911.38,1211.78 1911.97,1211.78 1912.56,1211.78 1913.14,1211.78 1913.73,1211.78 1914.32,1211.78 1914.9,1211.78 1915.49,1211.78 1916.08,1211.78 1916.66,1211.78 1917.25,1211.78 1917.83,1211.78 1918.42,1211.78 1919.01,1211.78 1919.59,1211.78 1920.18,1211.78 1920.77,1211.78 1921.35,1211.78 1921.94,1211.78 1922.53,1211.78 1923.11,1211.78 1923.7,1211.78 1924.29,1211.78 1924.87,1211.78 1925.46,1211.78 1926.04,1211.78 1926.63,1211.78 1927.22,1211.78 1927.8,1211.78 1928.39,1211.78 1928.98,1211.78 1929.56,1211.78 1930.15,1211.78 1930.74,1211.78 1931.32,1211.78 1931.91,1211.78 1932.5,1211.78 1933.08,1211.78 1933.67,1211.78 1934.25,1211.78 1934.84,1211.78 1935.43,1211.78 1936.01,1211.78 1936.6,1211.78 1937.19,1211.78 1937.77,1211.78 1938.36,1211.78 1938.95,1211.78 1939.53,1211.78 1940.12,1211.78 1940.71,1211.78 1941.29,1211.78 1941.88,1211.78 1942.46,1211.78 1943.05,1211.78 1943.64,1211.78 1944.22,1211.78 1944.81,1211.78 1945.4,1211.78 1945.98,1211.78 1946.57,1211.78 1947.16,1211.78 1947.74,1211.78 1948.33,1211.78 1948.91,1211.78 1949.5,1211.78 1950.09,1211.78 1950.67,1211.78 1951.26,1211.78 1951.85,1211.78 1952.43,1211.78 1953.02,1211.78 1953.61,1211.78 1954.19,1211.78 1954.78,1211.78 1955.37,1211.78 1955.95,1211.78 1956.54,1211.78 1957.12,1211.78 1957.71,1211.78 1958.3,1211.78 1958.88,1211.78 1959.47,1211.78 1960.06,1211.78 1960.64,1211.78 1961.23,1211.78 1961.82,1211.78 1962.4,1211.78 1962.99,1211.78 1963.58,1211.78 1964.16,1211.78 1964.75,1211.78 1965.33,1211.78 1965.92,1211.78 1966.51,1211.78 1967.09,1211.78 1967.68,1211.78 1968.27,1211.78 1968.85,1211.78 1969.44,1211.78 1970.03,1211.78 1970.61,1211.78 1971.2,1211.78 1971.78,1211.78 1972.37,1211.78 1972.96,1211.78 1973.54,1211.78 1974.13,1211.78 1974.72,1211.78 1975.3,1211.78 1975.89,1211.78 1976.48,1211.78 1977.06,1211.78 1977.65,1211.78 1978.24,1211.78 1978.82,1211.78 1979.41,1211.78 1979.99,1211.78 1980.58,1211.78 1981.17,1211.78 1981.75,1211.78 1982.34,1211.78 1982.93,1211.78 1983.51,1211.78 1984.1,1211.78 1984.69,1211.78 1985.27,1211.78 1985.86,1211.78 1986.45,1211.78 1987.03,1211.78 1987.62,1211.78 1988.2,1211.78 1988.79,1211.78 1989.38,1211.78 1989.96,1211.78 1990.55,1211.78 1991.14,1211.78 1991.72,1211.78 1992.31,1211.78 1992.9,1211.78 1993.48,1211.78 1994.07,1211.78 1994.65,1211.78 1995.24,1211.78 1995.83,1211.78 1996.41,1211.78 1997,1211.78 1997.59,1211.78 1998.17,1211.78 1998.76,1211.78 1999.35,1211.78 1999.93,1211.78 2000.52,1211.78 2001.11,1211.78 2001.69,1211.78 2002.28,1211.78 2002.86,1211.78 2003.45,1211.78 2004.04,1211.78 2004.62,1211.78 2005.21,1211.78 2005.8,1211.78 2006.38,1211.78 2006.97,1211.78 2007.56,1211.78 2008.14,1211.78 2008.73,1211.78 2009.32,1211.78 2009.9,1211.78 2010.49,1211.78 2011.07,1211.78 2011.66,1211.78 2012.25,1211.78 2012.83,1211.78 2013.42,1211.78 2014.01,1211.78 2014.59,1211.78 2015.18,1211.78 2015.77,1211.78 2016.35,1211.78 2016.94,1211.78 2017.53,1211.78 2018.11,1211.78 2018.7,1211.78 2019.28,1211.78 2019.87,1211.78 2020.46,1211.78 2021.04,1211.78 2021.63,1211.78 2022.22,1211.78 2022.8,1211.78 2023.39,1211.78 2023.98,1211.78 2024.56,1211.78 2025.15,1211.78 2025.73,1211.78 2026.32,1211.78 2026.91,1211.78 2027.49,1211.78 2028.08,1211.78 2028.67,1211.78 2029.25,1211.78 2029.84,1211.78 2030.43,1211.78 2031.01,1211.78 2031.6,1211.78 2032.19,1211.78 2032.77,1211.78 2033.36,1211.78 2033.94,1211.78 2034.53,1211.78 2035.12,1211.78 2035.7,1211.78 2036.29,1211.78 2036.88,1211.78 2037.46,1211.78 2038.05,1211.78 2038.64,1211.78 2039.22,1211.78 2039.81,1211.78 2040.4,1211.78 2040.98,1211.78 2041.57,1211.78 2042.15,1211.78 2042.74,1211.78 2043.33,1211.78 2043.91,1211.78 2044.5,1211.78 2045.09,1211.78 2045.67,1211.78 2046.26,1211.78 2046.85,1211.78 2047.43,1211.78 2048.02,1211.78 2048.6,1211.78 2049.19,1211.78 2049.78,1211.78 2050.36,1211.78 2050.95,1211.78 2051.54,1211.78 2052.12,1211.78 2052.71,1211.78 2053.3,1211.78 2053.88,1211.78 2054.47,1211.78 2055.06,1211.78 2055.64,1211.78 2056.23,1211.78 2056.81,1211.78 2057.4,1211.78 2057.99,1211.78 2058.57,1211.78 2059.16,1211.78 2059.75,1211.78 2060.33,1211.78 2060.92,1211.78 2061.51,1211.78 2062.09,1211.78 2062.68,1211.78 2063.27,1211.78 2063.85,1211.78 2064.44,1211.78 2065.02,1211.78 2065.61,1211.78 2066.2,1211.78 2066.78,1211.78 2067.37,1211.78 2067.96,1211.78 2068.54,1211.78 2069.13,1211.78 2069.72,1211.78 2070.3,1211.78 2070.89,1211.78 2071.48,1211.78 2072.06,1211.78 2072.65,1211.78 2073.23,1211.78 2073.82,1211.78 2074.41,1211.78 2074.99,1211.78 2075.58,1211.78 2076.17,1211.78 2076.75,1211.78 2077.34,1211.78 2077.93,1211.78 2078.51,1211.78 2079.1,1211.78 2079.68,1211.78 2080.27,1211.78 2080.86,1211.78 2081.44,1211.78 2082.03,1211.78 2082.62,1211.78 2083.2,1211.78 2083.79,1211.78 2084.38,1211.78 2084.96,1211.78 2085.55,1211.78 2086.14,1211.78 2086.72,1211.78 2087.31,1211.78 2087.89,1211.78 2088.48,1211.78 2089.07,1211.78 2089.65,1211.78 2090.24,1211.78 2090.83,1211.78 2091.41,1211.78 2092,1211.78 2092.59,1211.78 2093.17,1211.78 2093.76,1211.78 2094.35,1211.78 2094.93,1211.78 2095.52,1211.78 2096.1,1211.78 2096.69,1211.78 2097.28,1211.78 2097.86,1211.78 2098.45,1211.78 2099.04,1211.78 2099.62,1211.78 2100.21,1211.78 2100.8,1211.78 2101.38,1211.78 2101.97,1211.78 2102.55,1211.78 2103.14,1211.78 2103.73,1211.78 2104.31,1211.78 2104.9,1211.78 2105.49,1211.78 2106.07,1211.78 2106.66,1211.78 2107.25,1211.78 2107.83,1211.78 2108.42,1211.78 2109.01,1211.78 2109.59,1211.78 2110.18,1211.78 2110.76,1211.78 2111.35,1211.78 2111.94,1211.78 2112.52,1211.78 2113.11,1211.78 2113.7,1211.78 2114.28,1211.78 2114.87,1211.78 2115.46,1211.78 2116.04,1211.78 2116.63,1211.78 2117.22,1211.78 2117.8,1211.78 2118.39,1211.78 2118.97,1211.78 2119.56,1211.78 2120.15,1211.78 2120.73,1211.78 2121.32,1211.78 2121.91,1211.78 2122.49,1211.78 2123.08,1211.78 2123.67,1211.78 2124.25,1211.78 2124.84,1211.78 2125.42,1211.78 2126.01,1211.78 2126.6,1211.78 2127.18,1211.78 2127.77,1211.78 2128.36,1211.78 2128.94,1211.78 2129.53,1211.78 2130.12,1211.78 2130.7,1211.78 2131.29,1211.78 2131.88,1211.78 2132.46,1211.78 2133.05,1211.78 2133.63,1211.78 2134.22,1211.78 2134.81,1211.78 2135.39,1211.78 2135.98,1211.78 2136.57,1211.78 2137.15,1211.78 2137.74,1211.78 2138.33,1211.78 2138.91,1211.78 2139.5,1211.78 2140.09,1211.78 2140.67,1211.78 2141.26,1211.78 2141.84,1211.78 2142.43,1211.78 2143.02,1211.78 2143.6,1211.78 2144.19,1211.78 2144.78,1211.78 2145.36,1211.78 2145.95,1211.78 2146.54,1211.78 2147.12,1211.78 2147.71,1211.78 2148.3,1211.78 2148.88,1211.78 2149.47,1211.78 2150.05,1211.78 2150.64,1211.78 2151.23,1211.78 2151.81,1211.78 2152.4,1211.78 2152.99,1211.78 2153.57,1211.78 2154.16,1211.78 2154.75,1211.78 2155.33,1211.78 2155.92,1211.78 2156.5,1211.78 2157.09,1211.78 2157.68,1211.78 2158.26,1211.78 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.96,1193.63 1399.47,899.083 \"/>\n<polyline clip-path=\"url(#clip642)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.48 985.439,1193.63 2158.26,1193.63 2158.26,1229.48 985.439,1229.48 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip643\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip640)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip640)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip640)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip643)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-7593.95 165.469,-7215.64 166.029,-7969.97 166.588,-8653.61 167.147,-9271.12 167.706,-9826.79 168.266,-10324.6 168.825,-9927.45 169.384,-9596.48 169.943,-10010.6 170.503,-10362.2 171.062,-10685.4 171.621,-10967.1 172.18,-11210.1 172.74,-11406.3 173.299,-10594.9 173.858,-10791.8 174.417,-10526.7 174.977,-10667.6 175.536,-10782 176.095,-10853.1 176.655,-10593.8 177.214,-10038.7 177.773,-10076.8 178.332,-10111.9 178.892,-10137.2 179.451,-10143.6 180.01,-10129 180.569,-10093 181.129,-10055.5 181.688,-9800.53 182.247,-9547.24 182.806,-9476.25 183.366,-9228.47 183.925,-9139.24 184.484,-8754.21 185.043,-8671.22 185.603,-8330.36 186.162,-8127.86 186.721,-7815.19 187.28,-7612.13 187.84,-7324.85 188.399,-7243.73 188.958,-7061.44 189.517,-6981.86 190.077,-6710.74 190.636,-6541.13 191.195,-6454.06 191.754,-6360.19 192.314,-6266.36 192.873,-6098.42 193.432,-5847.55 193.991,-5601.45 194.551,-5493.7 195.11,-5262.35 195.669,-5043.39 196.228,-4781.09 196.788,-4577.22 197.347,-4488.19 197.906,-4342.61 198.465,-4154.31 199.025,-4063.46 199.584,-3883.31 200.143,-3754.74 200.702,-3626.54 201.262,-3551.87 201.821,-3428.89 202.38,-3346.22 202.939,-3111.31 203.499,-2919.25 204.058,-2736.2 204.617,-2631.54 205.176,-2502.42 205.736,-2401.65 206.295,-2303.87 206.854,-2244.87 207.413,-2120.41 207.973,-2066.1 208.532,-1948.7 209.091,-1887.08 209.65,-1800.26 210.21,-1658.79 210.769,-1608.98 211.328,-1501.91 211.887,-1428.76 212.447,-1382.97 213.006,-1336.21 213.565,-1234.62 214.124,-1184.93 214.684,-1085.94 215.243,-962.107 215.802,-897.832 216.361,-784.945 216.921,-749.034 217.48,-633.808 218.039,-554.743 218.598,-499.775 219.158,-445.655 219.717,-415.566 220.276,-385.24 220.835,-214.43 221.395,-124.259 221.954,-106.413 222.513,-87.44 223.072,-46.05 223.632,-22.4479 224.191,-26.4184 224.75,17.1459 225.309,35.3845 225.869,79.1557 226.428,162.529 226.987,196.543 227.546,234.753 228.106,289.318 228.665,344.102 229.224,411.818 229.783,456.398 230.343,480.656 230.902,484.623 231.461,484.866 232.02,512.493 232.58,514.581 233.139,540.624 233.698,601.806 234.257,646.609 234.817,662.57 235.376,681.989 235.935,702.954 236.494,718.332 237.054,738.289 237.613,718.178 238.172,735.288 238.731,768.984 239.291,781.618 239.85,798.463 240.409,781.734 240.968,801.021 241.528,815.559 242.087,815.155 242.646,812.541 243.205,832.045 243.765,849.66 244.324,882.095 244.883,913.122 245.442,947.005 246.002,957.951 246.561,947.574 247.12,975.182 247.679,985.522 248.239,961.638 248.798,958.087 249.357,969.024 249.916,930.954 250.476,947.508 251.035,943.007 251.594,954.924 252.153,951.957 252.713,965.761 253.272,947.309 253.831,961.433 254.39,994.732 254.95,1006.29 255.509,982.919 256.068,944.637 256.627,938.291 257.187,973.877 257.746,989.154 258.305,1021.06 258.864,964.156 259.424,996.877 259.983,1042.02 260.542,1053.04 261.101,1043.63 261.661,1056.02 262.22,1086.35 262.779,1111.34 263.338,1150.41 263.898,1155.62 264.457,1139.07 265.016,1127.44 265.575,1117.03 266.135,1107.53 266.694,1097.34 267.253,1101.93 267.812,1127.1 268.372,1134.12 268.931,1144.17 269.49,1132.77 270.049,1121.85 270.609,1112.13 271.168,1082.42 271.727,1090.43 272.286,1083.78 272.846,1110.77 273.405,1098.96 273.964,1074.36 274.523,1083.04 275.083,1055.33 275.642,1061.87 276.201,1056.65 276.76,1050.22 277.32,1075.12 277.879,1050.66 278.438,1043.16 278.997,1054.39 279.557,1049.13 280.116,1040.07 280.675,1050.03 281.234,1041.71 281.794,1051.27 282.353,993.357 282.912,975.314 283.471,988.055 284.031,985.079 284.59,1012.95 285.149,1074.59 285.708,1066.64 286.268,1059.32 286.827,1035.25 287.386,1048.03 287.945,1074 288.505,1065.36 289.064,1055.94 289.623,1047.72 290.182,1103.65 290.742,1110.74 291.301,1120.62 291.86,1111.58 292.419,1098.68 292.979,1054.9 293.538,1046.69 294.097,1023.88 294.656,1003.95 295.216,987.503 295.775,1002.57 296.334,997.703 296.893,978.738 297.453,973.015 298.012,968.371 298.571,948.596 299.13,929.565 299.69,960.258 300.249,938.318 300.808,938.63 301.368,937.463 301.927,937.327 302.486,1002.62 303.045,1016.3 303.605,1057.93 304.164,1033.25 304.723,1075.39 305.282,1065.72 305.842,1040.2 306.401,1035.59 306.96,1026.47 307.519,1036.47 308.079,997.758 308.638,992.321 309.197,988.789 309.756,1018.02 310.316,1028.24 310.875,1018.94 311.434,1012.21 311.993,1024.69 312.553,1020.09 313.112,1047.87 313.671,1038.85 314.23,1028.21 314.79,1034.58 315.349,1044.16 315.908,1051.51 316.467,1061.78 317.027,1066.79 317.586,1054.03 318.145,1074.91 318.704,1129.85 319.264,1134.23 319.823,1104.88 320.382,1078.39 320.941,1068.89 321.501,1088.62 322.06,1109.94 322.619,1096.34 323.178,1086.73 323.738,1059.47 324.297,1081.24 324.856,1036.9 325.415,1043.36 325.975,1018.57 326.534,1024.45 327.093,1031.28 327.652,1054.65 328.212,1047.12 328.771,970.774 329.33,963.787 329.889,942.01 330.449,955.471 331.008,947.672 331.567,959.443 332.126,951.472 332.686,931.232 333.245,907.411 333.804,902.882 334.363,882.977 334.923,896.249 335.482,910.743 336.041,911.448 336.6,892.164 337.16,905.921 337.719,887.921 338.278,899.955 338.837,928.203 339.397,973.543 339.956,947.355 340.515,945.312 341.074,957.535 341.634,953.226 342.193,945.193 342.752,926.322 343.311,903.428 343.871,899.492 344.43,899.853 344.989,896.037 345.548,875.237 346.108,874.702 346.667,887.813 347.226,871.963 347.785,904.311 348.345,918.528 348.904,915.643 349.463,928.876 350.022,954.529 350.582,977.333 351.141,956.356 351.7,964.128 352.259,958.324 352.819,933.997 353.378,909.87 353.937,854.743 354.496,834.905 355.056,867.458 355.615,864.501 356.174,897.51 356.733,876.298 357.293,888.509 357.852,869.815 358.411,882.845 358.97,860.969 359.53,856.88 360.089,841.429 360.648,856.909 361.207,853.84 361.767,850.15 362.326,846.673 362.885,825.884 363.444,855.96 364.004,865.321 364.563,912.004 365.122,938.875 365.681,886.408 366.241,897.947 366.8,958.413 367.359,936.294 367.918,917.01 368.478,875.945 369.037,857.146 369.596,853.443 370.155,835.679 370.715,801.618 371.274,821.242 371.833,807.507 372.392,824.899 372.952,824.957 373.511,856.439 374.07,836.847 374.629,823.086 375.189,791.815 375.748,808.463 376.307,806.013 376.866,792.161 377.426,807.951 377.985,807.722 378.544,808.538 379.103,825.193 379.663,840.318 380.222,901.494 380.781,883.16 381.34,859.524 381.9,857.381 382.459,857.354 383.018,869.337 383.577,879.807 384.137,891.707 384.696,885.299 385.255,852.575 385.814,881.651 386.374,862.651 386.933,858.315 387.492,837.49 388.051,868.382 388.611,833.199 389.17,881.477 389.729,860.334 390.288,886.379 390.848,867.613 391.407,863.177 391.966,857.904 392.525,866.522 393.085,847.432 393.644,857.916 394.203,865.416 394.762,863.476 395.322,843.334 395.881,821.492 396.44,788.056 396.999,787.129 397.559,766.985 398.118,736.424 398.677,770.489 399.236,771.633 399.796,772.799 400.355,776.696 400.914,795.434 401.473,780.691 402.033,762.8 402.592,767.195 403.151,786.647 403.71,783.712 404.27,796.251 404.829,810.747 405.388,793.688 405.947,810.178 406.507,840.389 407.066,820.16 407.625,770.924 408.184,773.04 408.744,772.545 409.303,739.885 409.862,741.399 410.421,746.307 410.981,806.995 411.54,833.59 412.099,827.89 412.658,744.32 413.218,746 413.777,764.858 414.336,771.233 414.895,737.267 415.455,723.537 416.014,723.728 416.573,727.437 417.132,796.016 417.692,794.918 418.251,789.393 418.81,789.005 419.369,789.871 419.929,792.11 420.488,841.031 421.047,836.009 421.606,831.576 422.166,840.485 422.725,819.456 423.284,802.413 423.843,802.627 424.403,801.346 424.962,829.359 425.521,813.4 426.08,798.661 426.64,782.169 427.199,749.103 427.758,752.984 428.318,738.413 428.877,738.937 429.436,756.164 429.995,755.237 430.555,735.942 431.114,769.575 431.673,774.554 432.232,790.677 432.792,803.09 433.351,815.85 433.91,844.107 434.469,840.675 435.029,850.966 435.588,844.084 436.147,838.698 436.706,833.226 437.266,843.322 437.825,822.598 438.384,806.019 438.943,822.051 439.503,820.078 440.062,832.464 440.621,832.277 441.18,830.818 441.74,794.373 442.299,789.833 442.858,774.633 443.417,784.914 443.977,764.858 444.536,766.575 445.095,764.1 445.654,744.45 446.214,728.175 446.773,713.293 447.332,696.971 447.891,700.692 448.451,718.145 449.01,752.865 449.569,754.691 450.128,737.758 450.688,752.924 451.247,752.352 451.806,786.264 452.365,800.736 452.925,815.001 453.484,799.162 454.043,781.115 454.602,764.777 455.162,779.914 455.721,793.185 456.28,803.794 456.839,817.547 457.399,798.843 457.958,798.209 458.517,809.614 459.076,791.531 459.636,818.675 460.195,833.222 460.754,796.18 461.313,775.94 461.873,760.28 462.432,760.143 462.991,761.182 463.55,758.912 464.11,837.516 464.669,835.436 465.228,832.741 465.787,843.994 466.347,821.554 466.906,834.301 467.465,831.089 468.024,825.577 468.584,853.61 469.143,847.484 469.702,857.941 470.261,871.03 470.821,850.789 471.38,847.49 471.939,807.746 472.498,820.53 473.058,785.379 473.617,747.703 474.176,744.299 474.735,742.397 475.295,707.627 475.854,680.928 476.413,667.5 476.972,687.073 477.532,693.368 478.091,712.494 478.65,712.856 479.209,696.981 479.769,698.708 480.328,683.534 480.887,701.365 481.446,720.278 482.006,736.921 482.565,721.794 483.124,723.03 483.683,738.798 484.243,741.82 484.802,706.34 485.361,738.221 485.92,754.006 486.48,772.703 487.039,787.259 487.598,782.097 488.157,779.869 488.717,779.622 489.276,821.396 489.835,816.372 490.394,812.16 490.954,822.753 491.513,787.87 492.072,796.504 492.631,828.847 493.191,809.027 493.75,792.704 494.309,805.656 494.868,803.306 495.428,768.682 495.987,781.993 496.546,764.231 497.105,779.465 497.665,794.728 498.224,805.706 498.783,817.449 499.342,814.624 499.902,795.009 500.461,792.465 501.02,757.538 501.579,803.778 502.139,782.693 502.698,794.018 503.257,771.735 503.816,768.048 504.376,767.248 504.935,747.227 505.494,782.378 506.053,779.343 506.613,794.447 507.172,790.918 507.731,790.952 508.29,817.268 508.85,781.107 509.409,777.205 509.968,725.865 510.527,712.495 511.087,746.86 511.646,730.222 512.205,746.057 512.764,745.237 513.324,729.284 513.883,728.712 514.442,712.784 515.001,728.327 515.561,774.306 516.12,761.507 516.679,760.444 517.238,756.448 517.798,769.298 518.357,750.583 518.916,735.788 519.475,752.047 520.035,734.052 520.594,749.766 521.153,795.429 521.712,776.286 522.272,788.908 522.831,770.95 523.39,769.287 523.949,748.155 524.509,732.659 525.068,760.822 525.627,740.902 526.186,770.034 526.746,767.101 527.305,775.746 527.864,772.654 528.423,767.507 528.983,797.105 529.542,759.379 530.101,774.011 530.66,769.481 531.22,798.49 531.779,783.108 532.338,778.995 532.897,741.676 533.457,710.585 534.016,710.526 534.575,709.821 535.134,695.201 535.694,680.229 536.253,667.577 536.812,668.552 537.371,667.434 537.931,651.502 538.49,691.213 539.049,723.327 539.608,710.805 540.168,724.522 540.727,712.561 541.286,694.032 541.845,682.56 542.405,665.976 542.964,687.876 543.523,738.722 544.082,739.422 544.642,720.524 545.201,752.073 545.76,797.577 546.319,778.598 546.879,777.154 547.438,774.062 547.997,819.944 548.556,829.762 549.116,791.445 549.675,791.544 550.234,788.292 550.793,800.425 551.353,781.996 551.912,747.245 552.471,730.011 553.031,761.554 553.59,807.588 554.149,772.329 554.708,783.51 555.268,780.182 555.827,760.991 556.386,759.021 556.945,741.704 557.505,725.869 558.064,693.362 558.623,696.1 559.182,678.626 559.742,711.746 560.301,695.191 560.86,697.818 561.419,717.017 561.979,711.537 562.538,700.075 563.097,731.909 563.656,731.381 564.216,712.412 564.775,712.128 565.334,694.505 565.893,727.576 566.453,710.172 567.012,696.202 567.571,649.852 568.13,602.339 568.69,621.58 569.249,657.729 569.808,646.889 570.367,633.932 570.927,638.135 571.486,642.22 572.045,682.009 572.604,650.915 573.164,638.204 573.723,689.993 574.282,707.664 574.841,723.569 575.401,722.446 575.96,708.151 576.519,726.498 577.078,729.144 577.638,793.008 578.197,805.571 578.756,832.635 579.315,823.809 579.875,799.381 580.434,825.041 580.993,833.371 581.552,826.734 582.112,807.506 582.671,832.476 583.23,858.408 583.789,865.679 584.349,856.804 584.908,864.983 585.467,871.912 586.026,862.819 586.586,840.389 587.145,850.211 587.704,829.581 588.263,826.856 588.823,818.546 589.382,796.829 589.941,788.983 590.5,813.638 591.06,792.096 591.619,758.353 592.178,767.871 592.737,763.474 593.297,788.388 593.856,747.955 594.415,748.43 594.974,748.001 595.534,730.008 596.093,692.433 596.652,728.291 597.211,709.766 597.771,694.545 598.33,678.892 598.889,662.362 599.448,658.277 600.008,675.003 600.567,676.775 601.126,678.517 601.685,619.082 602.245,627.436 602.804,646.6 603.363,650.752 603.922,651.662 604.482,639.545 605.041,640.25 605.6,628.666 606.159,700.919 606.719,698.97 607.278,651.923 607.837,669.425 608.396,658.403 608.956,625.735 609.515,665.227 610.074,653.421 610.633,623.103 611.193,614.772 611.752,638.813 612.311,644.403 612.87,633.298 613.43,637.412 613.989,671.141 614.548,690.809 615.107,724.375 615.667,706.893 616.226,704.708 616.785,705.023 617.344,707.731 617.904,691.177 618.463,694.585 619.022,711.906 619.581,743.18 620.141,755.817 620.7,720.281 621.259,701.669 621.818,721.403 622.378,719.055 622.937,734.478 623.496,720.207 624.055,707.377 624.615,705.206 625.174,721.046 625.733,702.738 626.292,685.097 626.852,650.719 627.411,587.675 627.97,592.361 628.529,587.016 629.089,575.704 629.648,614.964 630.207,567.817 630.766,627.643 631.326,633.448 631.885,636.933 632.444,657.181 633.003,642.144 633.563,644.712 634.122,633.06 634.681,653.034 635.24,654.1 635.8,673.568 636.359,677.201 636.918,708.319 637.477,728.221 638.037,705.673 638.596,689.861 639.155,705.989 639.714,709.61 640.274,708.797 640.833,707.632 641.392,724.688 641.951,741.286 642.511,738.006 643.07,817.513 643.629,827.986 644.188,793.038 644.748,806.64 645.307,802.056 645.866,815.546 646.425,779.74 646.985,788.762 647.544,800.761 648.103,766.759 648.662,762.901 649.222,774.251 649.781,768.85 650.34,747.664 650.899,715.534 651.459,716.789 652.018,716.276 652.577,730.304 653.136,732.088 653.696,747.224 654.255,777.614 654.814,818.775 655.373,780.268 655.933,789.918 656.492,816.026 657.051,809.851 657.61,840.894 658.17,833.464 658.729,825.259 659.288,766.316 659.847,778.222 660.407,791.736 660.966,785.457 661.525,768.575 662.084,765.945 662.644,762.123 663.203,806.89 663.762,768.4 664.321,765.053 664.881,727.147 665.44,710.279 665.999,706.078 666.558,721.781 667.118,704.714 667.677,722.855 668.236,723.768 668.795,707.855 669.355,676.143 669.914,641.882 670.473,641.074 671.032,630.782 671.592,668.451 672.151,653.659 672.71,654.333 673.269,656.015 673.829,655.458 674.388,641.037 674.947,643.778 675.506,632.811 676.066,639.209 676.625,610.049 677.184,598.69 677.743,619.588 678.303,639.193 678.862,657.5 679.421,659.336 679.981,673.72 680.54,722.562 681.099,736.386 681.658,731.708 682.218,713.519 682.777,713.481 683.336,714.241 683.895,697.133 684.455,707.951 685.014,738.02 685.573,733.443 686.132,762.626 686.692,762.891 687.251,738.083 687.81,717.41 688.369,728.649 688.929,710.956 689.488,694.475 690.047,678.958 690.606,694.863 691.166,662.515 691.725,664.91 692.284,681.258 692.843,664.201 693.403,650.529 693.962,654.168 694.521,686.77 695.08,652.451 695.64,605.09 696.199,611.106 696.758,580.041 697.317,633.719 697.877,650.425 698.436,635.186 698.995,641.536 699.554,646.813 700.114,665.372 700.673,669.546 701.232,652.346 701.791,656.166 702.351,676.216 702.91,695.19 703.469,696.012 704.028,667.284 704.588,637.938 705.147,607.769 705.706,629.273 706.265,664.755 706.825,649.856 707.384,654.008 707.943,671.111 708.502,638.811 709.062,659.588 709.621,692.14 710.18,688.748 710.739,689.08 711.299,673.119 711.858,673.94 712.417,691.203 712.976,689.757 713.536,723.299 714.095,707.136 714.654,721.514 715.213,719.79 715.773,704.258 716.332,685.363 716.891,704.736 717.45,673.518 718.01,677.821 718.569,680.466 719.128,679.535 719.687,698.618 720.247,694.792 720.806,692.927 721.365,663.028 721.924,680.25 722.484,681.804 723.043,684.172 723.602,702.183 724.161,668.034 724.721,685.421 725.28,716.485 725.839,732.657 726.398,713.749 726.958,678.047 727.517,676.517 728.076,744.941 728.635,760.411 729.195,739.713 729.754,673.72 730.313,660.423 730.872,661.993 731.432,679.136 731.991,680.582 732.55,683.476 733.109,668.997 733.669,655.752 734.228,626.571 734.787,612.487 735.346,596.999 735.906,621.855 736.465,596.228 737.024,617.649 737.583,620.99 738.143,642.086 738.702,659.909 739.261,676.847 739.82,711.034 740.38,710.922 740.939,711.03 741.498,694.154 742.057,693.209 742.617,711.001 743.176,724.775 743.735,723.188 744.294,705.734 744.854,690.112 745.413,691.671 745.972,673.785 746.531,643.934 747.091,646.299 747.65,649.387 748.209,649.694 748.768,650.372 749.328,664.737 749.887,665.555 750.446,717.049 751.005,718.778 751.565,698.599 752.124,700.099 752.683,700.389 753.242,702.433 753.802,704.329 754.361,706.271 754.92,717.196 755.479,717.522 756.039,687.969 756.598,687.836 757.157,676.48 757.716,662.127 758.276,650.682 758.835,654.489 759.394,656.658 759.953,672.538 760.513,692.214 761.072,656.043 761.631,656.609 762.19,689.887 762.75,690.742 763.309,693.797 763.868,675.722 764.427,660.192 764.987,630.535 765.546,633.729 766.105,606.267 766.664,626.816 767.224,627.326 767.783,643.625 768.342,629.321 768.901,614.715 769.461,617.335 770.02,605.94 770.579,593.532 771.138,602.026 771.698,638.206 772.257,657.976 772.816,646.187 773.375,647.757 773.935,631.461 774.494,648.879 775.053,688.021 775.612,707.44 776.172,723.076 776.731,720.786 777.29,721.102 777.849,771.661 778.409,785.235 778.968,779.099 779.527,788.962 780.086,783.23 780.646,762.567 781.205,724.712 781.764,718.736 782.323,716.457 782.883,716.349 783.442,732.912 784.001,698.894 784.56,691.898 785.12,707.015 785.679,722.343 786.238,703.954 786.797,783.453 787.357,763.722 787.916,761.015 788.475,773.267 789.034,784.377 789.594,765.091 790.153,762.727 790.712,787.928 791.271,754.184 791.831,734.845 792.39,697.812 792.949,698.268 793.508,698.166 794.068,714.876 794.627,714.098 795.186,694.759 795.745,661.282 796.305,632.374 796.864,636.059 797.423,620.951 797.982,621.374 798.542,610.855 799.101,630.093 799.66,584.082 800.219,623.779 800.779,612.101 801.338,617.858 801.897,638.489 802.456,658.621 803.016,675.847 803.575,708.68 804.134,740.017 804.693,720.144 805.253,698.506 805.812,695.774 806.371,697.141 806.931,714.824 807.49,712.625 808.049,725.649 808.608,690.34 809.168,708.451 809.727,692.629 810.286,676.659 810.845,645.526 811.405,650.129 811.964,654.824 812.523,574.69 813.082,580.262 813.642,556.092 814.201,581.003 814.76,583.7 815.319,573.402 815.879,593.924 816.438,601.771 816.997,591.663 817.556,592.691 818.116,565.331 818.675,588.127 819.234,576.418 819.793,581.536 820.353,552.146 820.912,571.499 821.471,545.735 822.03,588.174 822.59,578.479 823.149,569.01 823.708,575.109 824.267,581.404 824.827,603.718 825.386,613.417 825.945,599.466 826.504,539.762 827.064,564.228 827.623,621.056 828.182,575.851 828.741,598.876 829.301,602.418 829.86,593.714 830.419,630.384 830.978,665.219 831.538,666.846 832.097,682.581 832.656,694.256 833.215,724.816 833.775,706.615 834.334,708.056 834.893,692.099 835.452,712.428 836.012,693.995 836.571,679.138 837.13,663.215 837.689,649.791 838.249,651.777 838.808,638.053 839.367,622.85 839.926,676.472 840.486,664.094 841.045,681.508 841.604,698.336 842.163,699.969 842.723,716.331 843.282,699.978 843.841,717.743 844.4,683.179 844.96,698.283 845.519,696.92 846.078,679.992 846.637,666.771 847.197,698.798 847.756,731.19 848.315,747.021 848.874,744.625 849.434,724.967 849.993,708.472 850.552,721.522 851.111,752.062 851.671,736.063 852.23,703.084 852.789,704.557 853.348,733.482 853.908,726.604 854.467,729.164 855.026,727.315 855.585,757.37 856.145,773.451 856.704,801.612 857.263,812.573 857.822,791.123 858.382,803.929 858.941,815.885 859.5,808.621 860.059,798.665 860.619,855.673 861.178,800.723 861.737,781.718 862.296,761.483 862.856,762.067 863.415,755.66 863.974,717.222 864.533,712.293 865.093,708.147 865.652,735.779 866.211,700.393 866.77,699.742 867.33,682.098 867.889,712.472 868.448,711.375 869.007,710.011 869.567,690.802 870.126,707.306 870.685,720.995 871.244,720.469 871.804,764.486 872.363,726.184 872.922,739.213 873.481,721.262 874.041,685.653 874.6,653.199 875.159,657.615 875.718,657.437 876.278,691.224 876.837,692.013 877.396,692.164 877.955,690.245 878.515,673.974 879.074,689.581 879.633,668.63 880.192,653.469 880.752,672.08 881.311,670.621 881.87,636.14 882.429,587.377 882.989,590.954 883.548,597.897 884.107,633.727 884.666,636.233 885.226,625.262 885.785,627.966 886.344,631.481 886.903,649.695 887.463,669.635 888.022,686.665 888.581,703.61 889.14,702.875 889.7,714.479 890.259,761.598 890.818,775.561 891.377,789.276 891.937,754.549 892.496,735.2 893.055,698.881 893.614,698.526 894.174,715.762 894.733,714.99 895.292,667.016 895.851,684.836 896.411,666.835 896.97,651.044 897.529,656.27 898.088,626.902 898.648,629.903 899.207,666.59 899.766,685.668 900.325,703.337 900.885,705.006 901.444,704.338 902.003,684.507 902.562,702.856 903.122,666.555 903.681,683.549 904.24,666.992 904.799,667.688 905.359,652.393 905.918,704.35 906.477,719.721 907.036,714.876 907.596,698.748 908.155,728.121 908.714,727.189 909.273,707.901 909.833,737.563 910.392,720.631 910.951,703.843 911.51,718.088 912.07,718.745 912.629,667.989 913.188,682.627 913.747,667.64 914.307,622.594 914.866,606.084 915.425,609.805 915.984,599.579 916.544,604.006 917.103,642.004 917.662,659.791 918.221,644.29 918.781,645.377 919.34,646.145 919.899,631.306 920.458,631.498 921.018,618.177 921.577,639.625 922.136,643.047 922.695,645.33 923.255,661.272 923.814,660.656 924.373,693.951 924.932,693.392 925.492,673.419 926.051,690.889 926.61,687.69 927.169,652.625 927.729,653.225 928.288,636.104 928.847,635.46 929.406,682.366 929.966,699.223 930.525,700.288 931.084,714.901 931.644,715.175 932.203,682.727 932.762,665.655 933.321,664.946 933.881,669.282 934.44,636.571 934.999,659.275 935.558,659.337 936.118,662.291 936.677,713.548 937.236,724.846 937.795,706.272 938.355,717.529 938.914,715.088 939.473,725.889 940.032,692.407 940.592,658.634 941.151,646.327 941.71,632.019 942.269,634.79 942.829,658.979 943.388,660.118 943.947,659.233 944.506,659.535 945.066,645.432 945.625,645.323 946.184,667.329 946.743,668.191 947.303,651.191 947.862,654.86 948.421,674.349 948.98,707.934 949.54,721.755 950.099,765.482 950.658,745.858 951.217,761.701 951.777,739.239 952.336,753.364 952.895,763.495 953.454,760.795 954.014,738.455 954.573,752.083 955.132,743.451 955.691,724.112 956.251,737.981 956.81,751.807 957.369,731.085 957.928,677.564 958.488,690.522 959.047,652.696 959.606,610.88 960.165,598.893 960.725,636.584 961.284,656.953 961.843,690.582 962.402,722.266 962.962,636.904 963.521,652.964 964.08,667.079 964.639,699.777 965.199,698.421 965.758,696.058 966.317,712.136 966.876,708.736 967.436,706.947 967.995,724.602 968.554,703.875 969.113,718.381 969.673,717.297 970.232,733.51 970.791,736.407 971.35,750.119 971.91,730.007 972.469,760.333 973.028,754.725 973.587,719.282 974.147,721.235 974.706,686.547 975.265,685.428 975.824,686.847 976.384,687.766 976.943,767.068 977.502,747.407 978.061,746.767 978.621,728.639 979.18,684.464 979.739,682.566 980.298,681.12 980.858,730.323 981.417,743.858 981.976,739.366 982.535,735.613 983.095,717.653 983.654,714.003 984.213,698.198 984.772,678.61 985.332,662.869 985.891,648.619 986.45,650.566 987.009,636.857 987.569,654.671 988.128,686.321 988.687,683.369 989.246,684.691 989.806,704.048 990.365,656.602 990.924,661.029 991.483,695.443 992.043,647.569 992.602,651.004 993.161,654.843 993.72,671.684 994.28,704.496 994.839,704.465 995.398,718.826 995.957,713.927 996.517,714.564 997.076,701.145 997.635,702.612 998.194,700.882 998.754,696.634 999.313,692.967 999.872,676.412 1000.43,657.32 1000.99,658.934 1001.55,662.672 1002.11,679.115 1002.67,679.472 1003.23,679.274 1003.79,645.418 1004.35,633.641 1004.91,603.982 1005.46,640.941 1006.02,625.828 1006.58,641.599 1007.14,611.931 1007.7,583.705 1008.26,589.617 1008.82,596.212 1009.38,637.363 1009.94,638.476 1010.5,641.65 1011.06,674.488 1011.62,658.014 1012.18,642.269 1012.73,630.34 1013.29,699.239 1013.85,682.148 1014.41,666.41 1014.97,670.345 1015.53,637.94 1016.09,640.128 1016.65,641.705 1017.21,644.803 1017.77,684.757 1018.33,671.381 1018.89,670.575 1019.45,702.747 1020.01,736.876 1020.56,720.652 1021.12,702.773 1021.68,666.737 1022.24,716.77 1022.8,715.358 1023.36,696.908 1023.92,677.78 1024.48,677.503 1025.04,692.876 1025.6,725.859 1026.16,711.057 1026.72,725.211 1027.28,756.999 1027.83,779.744 1028.39,777.945 1028.95,754.668 1029.51,815.292 1030.07,793.375 1030.63,803.356 1031.19,795.817 1031.75,809.286 1032.31,800.259 1032.87,761.77 1033.43,738.943 1033.99,738.504 1034.55,718.993 1035.1,683.981 1035.66,668.125 1036.22,669.287 1036.78,669.9 1037.34,670.928 1037.9,672.782 1038.46,654.89 1039.02,656.449 1039.58,674.353 1040.14,675.042 1040.7,695.07 1041.26,727.737 1041.82,741.09 1042.38,738.099 1042.93,751.027 1043.49,751.295 1044.05,764.568 1044.61,794.991 1045.17,785.907 1045.73,748.221 1046.29,706.371 1046.85,706.339 1047.41,706.018 1047.97,720.321 1048.53,667.146 1049.09,686.248 1049.65,704.448 1050.2,687.215 1050.76,650.132 1051.32,684.402 1051.88,651.597 1052.44,636.572 1053,653.808 1053.56,624.214 1054.12,657.64 1054.68,675.697 1055.24,674.007 1055.8,709.295 1056.36,755.007 1056.92,704.579 1057.48,698.824 1058.03,727.515 1058.59,755.755 1059.15,749.597 1059.71,746.288 1060.27,680.169 1060.83,681.086 1061.39,698.325 1061.95,682.756 1062.51,681.842 1063.07,698.271 1063.63,682.575 1064.19,681.147 1064.75,666.761 1065.3,698.137 1065.86,710.778 1066.42,681.99 1066.98,683.375 1067.54,668.773 1068.1,684.591 1068.66,700.236 1069.22,697.063 1069.78,713.614 1070.34,696.124 1070.9,713.91 1071.46,741.726 1072.02,741.174 1072.57,741.319 1073.13,721.577 1073.69,736.656 1074.25,736.141 1074.81,749.218 1075.37,699.254 1075.93,715.582 1076.49,679.163 1077.05,664.185 1077.61,664.806 1078.17,652.113 1078.73,653.733 1079.29,624.976 1079.85,625.157 1080.4,625.459 1080.96,611.046 1081.52,584.507 1082.08,637.218 1082.64,641.273 1083.2,643.814 1083.76,647.544 1084.32,647.1 1084.88,662.458 1085.44,680.988 1086,680.315 1086.56,713.286 1087.12,677.458 1087.67,695.01 1088.23,696.038 1088.79,708.652 1089.35,693.854 1089.91,724.724 1090.47,736.787 1091.03,717.187 1091.59,717.904 1092.15,699.724 1092.71,662.216 1093.27,665.195 1093.83,649.869 1094.39,637.655 1094.94,593.939 1095.5,597.63 1096.06,567.142 1096.62,606.299 1097.18,595.642 1097.74,618.869 1098.3,595.466 1098.86,584.459 1099.42,587.347 1099.98,610.16 1100.54,583.966 1101.1,590.666 1101.66,610.091 1102.22,615.366 1102.77,604.245 1103.33,639.766 1103.89,628.433 1104.45,615.717 1105.01,623.075 1105.57,593.682 1106.13,598.436 1106.69,603.864 1107.25,642.234 1107.81,629.956 1108.37,634.491 1108.93,607.023 1109.49,612.219 1110.04,631.658 1110.6,632.863 1111.16,583.891 1111.72,573.651 1112.28,598.448 1112.84,586.436 1113.4,606.61 1113.96,641.521 1114.52,704.081 1115.08,719.914 1115.64,733.901 1116.2,717.465 1116.76,696.403 1117.31,713.934 1117.87,711.755 1118.43,744.775 1118.99,725.083 1119.55,738.739 1120.11,687.457 1120.67,672.025 1121.23,608.928 1121.79,630.869 1122.35,633.051 1122.91,616.864 1123.47,623.594 1124.03,640.819 1124.59,627.305 1125.14,614.012 1125.7,636.643 1126.26,641.004 1126.82,643.637 1127.38,678.469 1127.94,718.225 1128.5,714.048 1129.06,743.359 1129.62,735.6 1130.18,749.946 1130.74,728.786 1131.3,758.043 1131.86,775.071 1132.41,753.123 1132.97,749.686 1133.53,729.709 1134.09,741.5 1134.65,725.93 1135.21,753.547 1135.77,768.379 1136.33,780.927 1136.89,756.042 1137.45,750.889 1138.01,745.906 1138.57,725.586 1139.13,703.244 1139.68,701.111 1140.24,701.567 1140.8,718.088 1141.36,715.03 1141.92,714.31 1142.48,711.189 1143.04,711.18 1143.6,744.651 1144.16,737.83 1144.72,715.696 1145.28,698.594 1145.84,712.674 1146.4,709.288 1146.96,677.447 1147.51,677.308 1148.07,675.453 1148.63,694.103 1149.19,723.266 1149.75,688.722 1150.31,688.195 1150.87,684.565 1151.43,703.094 1151.99,717.768 1152.55,715.608 1153.11,729.026 1153.67,730.165 1154.23,694.467 1154.78,682.461 1155.34,649.036 1155.9,633.539 1156.46,624.316 1157.02,646.956 1157.58,647.336 1158.14,697.751 1158.7,695.086 1159.26,675.486 1159.82,673.095 1160.38,641.195 1160.94,639.871 1161.5,640.747 1162.05,673.723 1162.61,641.933 1163.17,694.022 1163.73,708.765 1164.29,705.711 1164.85,703.783 1165.41,720.727 1165.97,717.366 1166.53,713.296 1167.09,727.464 1167.65,740.995 1168.21,738.288 1168.77,719.402 1169.33,716.863 1169.88,715.447 1170.44,701.681 1171,685.408 1171.56,702.558 1172.12,668.2 1172.68,668.587 1173.24,666.724 1173.8,649.602 1174.36,649.626 1174.92,637.001 1175.48,586.487 1176.04,594.523 1176.6,597.94 1177.15,637.783 1177.71,641.175 1178.27,646.469 1178.83,664.44 1179.39,695.51 1179.95,693.693 1180.51,692.665 1181.07,706.187 1181.63,720.412 1182.19,720.033 1182.75,701.192 1183.31,697.914 1183.87,712.407 1184.43,709.166 1184.98,707.959 1185.54,690.897 1186.1,708.322 1186.66,656.479 1187.22,658.053 1187.78,677.039 1188.34,695.048 1188.9,692.922 1189.46,675.673 1190.02,726.844 1190.58,724.699 1191.14,720.955 1191.7,701.249 1192.25,698.49 1192.81,680.531 1193.37,664.149 1193.93,649.992 1194.49,652.399 1195.05,653.312 1195.61,622.73 1196.17,673.43 1196.73,655.02 1197.29,603.923 1197.85,638.211 1198.41,659.549 1198.97,658.563 1199.52,659.359 1200.08,660.364 1200.64,659.786 1201.2,674.883 1201.76,690.229 1202.32,679.137 1202.88,698.106 1203.44,665.807 1204,664.021 1204.56,650.573 1205.12,652.695 1205.68,636.288 1206.24,641.327 1206.8,658.742 1207.35,708.675 1207.91,709.126 1208.47,692.75 1209.03,710.242 1209.59,676.048 1210.15,672.205 1210.71,673.477 1211.27,689.535 1211.83,753.287 1212.39,701.969 1212.95,700.566 1213.51,697.602 1214.07,695.092 1214.62,695.065 1215.18,693.922 1215.74,696.978 1216.3,698.632 1216.86,715.177 1217.42,730.257 1217.98,728.795 1218.54,728.694 1219.1,676.502 1219.66,696.58 1220.22,697.349 1220.78,699.678 1221.34,714.28 1221.89,729.639 1222.45,743.779 1223.01,719.849 1223.57,733.513 1224.13,748.528 1224.69,758.303 1225.25,751.294 1225.81,712.566 1226.37,727.226 1226.93,706.764 1227.49,702.202 1228.05,733.901 1228.61,728.35 1229.17,728.353 1229.72,722.171 1230.28,685.543 1230.84,702.145 1231.4,720.163 1231.96,735.248 1232.52,751.205 1233.08,748.911 1233.64,732.575 1234.2,745.793 1234.76,729.929 1235.32,759.09 1235.88,768.18 1236.44,749.05 1236.99,726.836 1237.55,724.422 1238.11,718.377 1238.67,716.863 1239.23,714.008 1239.79,713.075 1240.35,711.063 1240.91,691.958 1241.47,660.79 1242.03,663.926 1242.59,667.083 1243.15,684.985 1243.71,703.146 1244.26,685.843 1244.82,689.64 1245.38,723.546 1245.94,718.517 1246.5,716.287 1247.06,697.758 1247.62,678.079 1248.18,662.622 1248.74,647.989 1249.3,667.792 1249.86,668.795 1250.42,670.779 1250.98,686.329 1251.54,718.989 1252.09,672.616 1252.65,657.09 1253.21,657.29 1253.77,624.76 1254.33,630.661 1254.89,644.774 1255.45,630.875 1256.01,649.934 1256.57,640.196 1257.13,628.811 1257.69,615.95 1258.25,633.021 1258.81,651.062 1259.36,608.882 1259.92,643.67 1260.48,678.804 1261.04,696.176 1261.6,712.123 1262.16,728.783 1262.72,743.251 1263.28,711.446 1263.84,707.04 1264.4,672.681 1264.96,639.503 1265.52,692.808 1266.08,693.076 1266.63,710.373 1267.19,690.173 1267.75,655.064 1268.31,644.086 1268.87,643.884 1269.43,659.004 1269.99,678.074 1270.55,661.238 1271.11,659.853 1271.67,677.269 1272.23,696.168 1272.79,680.077 1273.35,680.374 1273.91,678.147 1274.46,691.915 1275.02,689.73 1275.58,662.21 1276.14,679.617 1276.7,664.135 1277.26,631.259 1277.82,636.829 1278.38,575.279 1278.94,577.406 1279.5,600.942 1280.06,638.365 1280.62,658.956 1281.18,627.876 1281.73,678.616 1282.29,647.717 1282.85,633.206 1283.41,634.149 1283.97,672.497 1284.53,658.649 1285.09,626.465 1285.65,611.759 1286.21,597.264 1286.77,604.214 1287.33,624.152 1287.89,629.869 1288.45,632.892 1289,590.062 1289.56,592.443 1290.12,613.07 1290.68,635.607 1291.24,655.207 1291.8,643.396 1292.36,648.935 1292.92,647.918 1293.48,665.54 1294.04,700.417 1294.6,733.249 1295.16,747.128 1295.72,779.803 1296.28,790.911 1296.83,785.463 1297.39,793.206 1297.95,799.637 1298.51,776.869 1299.07,802.778 1299.63,800.234 1300.19,760.497 1300.75,743.696 1301.31,742.456 1301.87,756.548 1302.43,784.694 1302.99,793.801 1303.55,786.715 1304.1,784.676 1304.66,766.255 1305.22,761.972 1305.78,759.83 1306.34,743.042 1306.9,771.998 1307.46,766.208 1308.02,778.112 1308.58,804.105 1309.14,796.702 1309.7,792.828 1310.26,806.181 1310.82,818.488 1311.38,826.739 1311.93,821.146 1312.49,812.286 1313.05,816.116 1313.61,824.408 1314.17,802.235 1314.73,811.846 1315.29,839.181 1315.85,814.496 1316.41,836.489 1316.97,844.604 1317.53,837.302 1318.09,829.858 1318.65,824.568 1319.2,788.803 1319.76,781.148 1320.32,808.089 1320.88,802.902 1321.44,744.841 1322,743.652 1322.56,752.484 1323.12,799.086 1323.68,795.04 1324.24,771.195 1324.8,755.362 1325.36,770.329 1325.92,730.977 1326.47,664.472 1327.03,647.484 1327.59,650.168 1328.15,653.752 1328.71,685.86 1329.27,687.926 1329.83,674.576 1330.39,660.95 1330.95,678.481 1331.51,647.042 1332.07,665.858 1332.63,683.024 1333.19,699.481 1333.75,683.773 1334.3,686.355 1334.86,670.012 1335.42,656.664 1335.98,646.095 1336.54,616.225 1337.1,633.822 1337.66,669.445 1338.22,719.804 1338.78,703.875 1339.34,682.944 1339.9,680.258 1340.46,693.669 1341.02,664.328 1341.57,632.629 1342.13,634.741 1342.69,635.659 1343.25,639.9 1343.81,612.467 1344.37,599.158 1344.93,604.985 1345.49,610.325 1346.05,581.642 1346.61,589.97 1347.17,593.52 1347.73,563.482 1348.29,585.68 1348.84,576.67 1349.4,564.125 1349.96,525.079 1350.52,522.564 1351.08,547.281 1351.64,570.51 1352.2,590.601 1352.76,641.928 1353.32,627.148 1353.88,627.058 1354.44,631.802 1355,599.444 1355.56,607.695 1356.12,672.531 1356.67,691.98 1357.23,706.943 1357.79,754.162 1358.35,753.965 1358.91,780.151 1359.47,758.891 1360.03,769.869 1360.59,767.724 1361.15,778.128 1361.71,770.737 1362.27,782.31 1362.83,814.208 1363.39,842.05 1363.94,815.616 1364.5,794.862 1365.06,771.528 1365.62,781.005 1366.18,791.682 1366.74,786.254 1367.3,782.651 1367.86,761.407 1368.42,774.476 1368.98,755.318 1369.54,754.217 1370.1,751.152 1370.66,731.07 1371.21,693.241 1371.77,643.077 1372.33,625.114 1372.89,629.293 1373.45,632.925 1374.01,637.849 1374.57,641.929 1375.13,645.393 1375.69,646.918 1376.25,684.064 1376.81,703.214 1377.37,705.673 1377.93,707.94 1378.49,671.998 1379.04,690.146 1379.6,722.123 1380.16,766.572 1380.72,765.176 1381.28,715.886 1381.84,747.749 1382.4,745.302 1382.96,744.69 1383.52,739.171 1384.08,720.832 1384.64,716.067 1385.2,699.641 1385.76,664.476 1386.31,635.874 1386.87,639.135 1387.43,642.166 1387.99,646.505 1388.55,614.232 1389.11,617.717 1389.67,604.125 1390.23,625.978 1390.79,630.106 1391.35,629.172 1391.91,634.398 1392.47,634.25 1393.03,633.7 1393.58,664.183 1394.14,634.507 1394.7,603.432 1395.26,622.473 1395.82,625.097 1396.38,622.796 1396.94,626.172 1397.5,629.142 1398.06,619.195 1398.62,623.443 1399.18,628.58 1399.74,597.442 1400.3,619.616 1400.86,605.477 1401.41,624.683 1401.97,628.495 1402.53,629.191 1403.09,642.464 1403.65,629.283 1404.21,600.941 1404.77,603.025 1405.33,588.671 1405.89,622.695 1406.45,656.79 1407.01,675.164 1407.57,673.96 1408.13,644.334 1408.68,614.444 1409.24,602.095 1409.8,590.049 1410.36,596.03 1410.92,582.233 1411.48,556.583 1412.04,594.709 1412.6,596.978 1413.16,614.41 1413.72,587.842 1414.28,596.628 1414.84,617.672 1415.4,606.407 1415.95,626.406 1416.51,628.895 1417.07,630.253 1417.63,615.792 1418.19,617.727 1418.75,623.874 1419.31,627.196 1419.87,648.976 1420.43,634.51 1420.99,636.541 1421.55,655.459 1422.11,654.171 1422.67,642.313 1423.23,662.04 1423.78,714.884 1424.34,716.701 1424.9,699.841 1425.46,697.027 1426.02,712.972 1426.58,714.78 1427.14,748.318 1427.7,774.465 1428.26,788.576 1428.82,801.348 1429.38,843.404 1429.94,853.587 1430.5,830.771 1431.05,824.554 1431.61,817.181 1432.17,796.782 1432.73,788.537 1433.29,766.427 1433.85,765.039 1434.41,793.355 1434.97,774.862 1435.53,768.387 1436.09,779.567 1436.65,755.583 1437.21,721.849 1437.77,719.927 1438.33,716.853 1438.88,729.737 1439.44,760.36 1440,755.145 1440.56,751.717 1441.12,764.795 1441.68,841.872 1442.24,835.766 1442.8,825.267 1443.36,803.371 1443.92,783.422 1444.48,810.038 1445.04,783.587 1445.6,763.182 1446.15,760.724 1446.71,740.724 1447.27,721.26 1447.83,702.82 1448.39,684.72 1448.95,650.876 1449.51,651.464 1450.07,668.236 1450.63,652.728 1451.19,671.49 1451.75,656.495 1452.31,658.267 1452.87,623.833 1453.42,607.396 1453.98,610.551 1454.54,594.859 1455.1,632.396 1455.66,636.743 1456.22,638.03 1456.78,625.627 1457.34,693.674 1457.9,694.974 1458.46,695.464 1459.02,679.915 1459.58,682.535 1460.14,668.706 1460.7,653.069 1461.25,640.805 1461.81,627.751 1462.37,615.842 1462.93,617.466 1463.49,606.437 1464.05,594.364 1464.61,596.89 1465.17,603.232 1465.73,574.968 1466.29,581.981 1466.85,600.772 1467.41,622.866 1467.97,593.979 1468.52,599.24 1469.08,589.078 1469.64,576.576 1470.2,582.063 1470.76,592.948 1471.32,615.053 1471.88,634.555 1472.44,636.839 1473,637.993 1473.56,623.929 1474.12,597.652 1474.68,557.836 1475.24,518.172 1475.79,543.599 1476.35,556.354 1476.91,558.817 1477.47,549.89 1478.03,562.643 1478.59,557.597 1479.15,581.382 1479.71,571.831 1480.27,544.912 1480.83,536.204 1481.39,561.769 1481.95,516.075 1482.51,557.665 1483.07,600.087 1483.62,622.56 1484.18,659.377 1484.74,658.859 1485.3,660.381 1485.86,648.269 1486.42,664.617 1486.98,652.267 1487.54,670.148 1488.1,704.167 1488.66,673.572 1489.22,703.749 1489.78,686.185 1490.34,687.777 1490.89,706.187 1491.45,721.507 1492.01,750.294 1492.57,748.247 1493.13,745.856 1493.69,742.002 1494.25,723.263 1494.81,720.681 1495.37,720.331 1495.93,685.923 1496.49,655.02 1497.05,673.551 1497.61,705.24 1498.16,667.984 1498.72,665.471 1499.28,654.679 1499.84,655.065 1500.4,686.567 1500.96,688.372 1501.52,691.735 1502.08,692.806 1502.64,676.458 1503.2,676.729 1503.76,693.306 1504.32,678.94 1504.88,650.508 1505.44,653.254 1505.99,653.678 1506.55,655.947 1507.11,707.614 1507.67,701.521 1508.23,715.626 1508.79,727.584 1509.35,707.92 1509.91,751.912 1510.47,717.326 1511.03,716.14 1511.59,728.853 1512.15,743.845 1512.71,739.423 1513.26,752.704 1513.82,749.518 1514.38,747.415 1514.94,743.162 1515.5,742.668 1516.06,737.262 1516.62,752.759 1517.18,715.971 1517.74,713.099 1518.3,690.592 1518.86,675.132 1519.42,679.466 1519.98,682.324 1520.53,694.194 1521.09,698.252 1521.65,730.522 1522.21,730.269 1522.77,724.046 1523.33,707.29 1523.89,675.543 1524.45,707.91 1525.01,735.741 1525.57,750.813 1526.13,744.019 1526.69,757.98 1527.25,754.182 1527.81,748.228 1528.36,741.024 1528.92,721.285 1529.48,702.4 1530.04,704.99 1530.6,672.259 1531.16,688.848 1531.72,687.492 1532.28,687.955 1532.84,685.696 1533.4,720.318 1533.96,734.496 1534.52,749.012 1535.08,745.673 1535.63,760.231 1536.19,756.807 1536.75,789.318 1537.31,784.235 1537.87,793.668 1538.43,790.532 1538.99,771.886 1539.55,704.981 1540.11,687.649 1540.67,677.897 1541.23,678.284 1541.79,665.285 1542.35,649.39 1542.9,748.71 1543.46,758.601 1544.02,755.585 1544.58,764.816 1545.14,729.472 1545.7,711.305 1546.26,707 1546.82,720.778 1547.38,715.97 1547.94,677.942 1548.5,726.709 1549.06,709.31 1549.62,721.914 1550.18,703.756 1550.73,685.107 1551.29,686.018 1551.85,682.388 1552.41,669.651 1552.97,650.953 1553.53,684.287 1554.09,735.085 1554.65,778.114 1555.21,737.532 1555.77,750.607 1556.33,779.591 1556.89,773.563 1557.45,737.799 1558,683.9 1558.56,634.357 1559.12,683.938 1559.68,664.411 1560.24,714.208 1560.8,697.669 1561.36,696.837 1561.92,725.185 1562.48,671.958 1563.04,689.302 1563.6,688.25 1564.16,686.202 1564.72,688.497 1565.28,719.106 1565.83,719.669 1566.39,716.023 1566.95,698.409 1567.51,711.682 1568.07,707.693 1568.63,670.991 1569.19,641.915 1569.75,644.672 1570.31,644.331 1570.87,631.769 1571.43,633.822 1571.99,621.671 1572.55,656.166 1573.1,670.928 1573.66,656.228 1574.22,609.63 1574.78,614.638 1575.34,601.966 1575.9,606.547 1576.46,614.645 1577.02,587.603 1577.58,626.441 1578.14,634.053 1578.7,639.669 1579.26,676.849 1579.82,676.341 1580.37,676.792 1580.93,676.658 1581.49,649.389 1582.05,654.168 1582.61,639.944 1583.17,625.093 1583.73,657.79 1584.29,687.502 1584.85,688.343 1585.41,691.405 1585.97,706.714 1586.53,688.058 1587.09,685.553 1587.65,701.387 1588.2,700.29 1588.76,702.02 1589.32,705.494 1589.88,686.97 1590.44,688.832 1591,688.071 1591.56,737.469 1592.12,749.637 1592.68,746.716 1593.24,743.93 1593.8,744.813 1594.36,722.978 1594.92,739.632 1595.47,735.724 1596.03,718.091 1596.59,748.886 1597.15,692.572 1597.71,706.514 1598.27,688.98 1598.83,686.406 1599.39,656.288 1599.95,640.317 1600.51,628.554 1601.07,631.399 1601.63,602.95 1602.19,606.257 1602.74,608.556 1603.3,607.302 1603.86,627.49 1604.42,630.058 1604.98,680.349 1605.54,663.095 1606.1,668.224 1606.66,668.785 1607.22,671.741 1607.78,703.676 1608.34,735.777 1608.9,716.786 1609.46,715.293 1610.02,715.798 1610.57,695.569 1611.13,681.382 1611.69,697.063 1612.25,717.511 1612.81,702.62 1613.37,701.838 1613.93,698.651 1614.49,698.811 1615.05,699.431 1615.61,715.419 1616.17,698.319 1616.73,697.154 1617.29,680.584 1617.84,700.214 1618.4,698.15 1618.96,709.364 1619.52,691.477 1620.08,706.7 1620.64,690.445 1621.2,706.012 1621.76,706.121 1622.32,688.305 1622.88,669.719 1623.44,653.856 1624,622.114 1624.56,676.608 1625.11,693.383 1625.67,679.362 1626.23,678.097 1626.79,676.747 1627.35,678.362 1627.91,680.584 1628.47,648.427 1629.03,650.611 1629.59,654.93 1630.15,654.898 1630.71,675.165 1631.27,691.717 1631.83,691.181 1632.39,737.825 1632.94,749.336 1633.5,727.946 1634.06,744.901 1634.62,724.56 1635.18,691.035 1635.74,624.901 1636.3,628.851 1636.86,633.345 1637.42,686.035 1637.98,668.936 1638.54,702.778 1639.1,671.144 1639.66,685.621 1640.21,717.066 1640.77,696.448 1641.33,677.93 1641.89,643.636 1642.45,646.749 1643.01,666.619 1643.57,651.722 1644.13,685.528 1644.69,669.743 1645.25,653.699 1645.81,653.419 1646.37,638.778 1646.93,672.363 1647.48,688.2 1648.04,689.941 1648.6,671.941 1649.16,703.294 1649.72,721.082 1650.28,718.514 1650.84,715.928 1651.4,715.566 1651.96,694.829 1652.52,692.087 1653.08,692.409 1653.64,674.051 1654.2,687.66 1654.76,703.164 1655.31,701.364 1655.87,681.702 1656.43,692.943 1656.99,678.912 1657.55,680.711 1658.11,682.746 1658.67,699.133 1659.23,697.62 1659.79,644.804 1660.35,648.965 1660.91,667.277 1661.47,618.973 1662.03,622.962 1662.58,594.06 1663.14,599.5 1663.7,586.385 1664.26,625.267 1664.82,627.892 1665.38,613.175 1665.94,613.491 1666.5,616.049 1667.06,636.527 1667.62,653.18 1668.18,621.926 1668.74,623.882 1669.3,609.296 1669.85,597.132 1670.41,619.77 1670.97,607.951 1671.53,599.876 1672.09,620.289 1672.65,624.563 1673.21,648.035 1673.77,650.853 1674.33,687.927 1674.89,687.721 1675.45,685.488 1676.01,688.398 1676.57,701.352 1677.13,716.879 1677.68,716.236 1678.24,746.737 1678.8,760.854 1679.36,758.692 1679.92,785.703 1680.48,810.255 1681.04,833.568 1681.6,809.655 1682.16,802.07 1682.72,812.167 1683.28,790.816 1683.84,785.692 1684.4,776.337 1684.95,800.123 1685.51,814.277 1686.07,760.776 1686.63,758.475 1687.19,753.247 1687.75,734.231 1688.31,730.717 1688.87,745.984 1689.43,774.211 1689.99,720.022 1690.55,655.038 1691.11,669.306 1691.67,683.96 1692.23,639.442 1692.78,687.609 1693.34,686.483 1693.9,671.947 1694.46,702.749 1695.02,720.043 1695.58,669.029 1696.14,665.913 1696.7,684.739 1697.26,716.58 1697.82,713.902 1698.38,711.627 1698.94,743.54 1699.5,755.293 1700.05,733.174 1700.61,716.503 1701.17,700.201 1701.73,682.381 1702.29,680.034 1702.85,667.734 1703.41,652.964 1703.97,637.684 1704.53,672.188 1705.09,655.625 1705.65,658.025 1706.21,644.462 1706.77,632.522 1707.32,637.332 1707.88,672.079 1708.44,672.35 1709,689.212 1709.56,673.442 1710.12,670.801 1710.68,689.616 1711.24,706.105 1711.8,702.711 1712.36,714.868 1712.92,696.481 1713.48,730.148 1714.04,729.459 1714.6,758.245 1715.15,759.181 1715.71,758.604 1716.27,774.494 1716.83,767.165 1717.39,747.263 1717.95,743.704 1718.51,725.981 1719.07,725.335 1719.63,723.658 1720.19,705.729 1720.75,703.813 1721.31,720.813 1721.87,687.385 1722.42,655.575 1722.98,659.339 1723.54,644.333 1724.1,646.786 1724.66,648.758 1725.22,636.176 1725.78,603.18 1726.34,622.357 1726.9,625.181 1727.46,660.837 1728.02,644.828 1728.58,645.341 1729.14,648.883 1729.69,648.226 1730.25,632.11 1730.81,651.922 1731.37,700.809 1731.93,634.53 1732.49,636.725 1733.05,637.173 1733.61,655.989 1734.17,656.934 1734.73,692.62 1735.29,677.86 1735.85,662.687 1736.41,678.788 1736.97,677.985 1737.52,677.495 1738.08,710.419 1738.64,694.998 1739.2,696.522 1739.76,680.071 1740.32,711.916 1740.88,695.057 1741.44,741.65 1742,707.816 1742.56,725.075 1743.12,722.556 1743.68,688.131 1744.24,689.887 1744.79,691.677 1745.35,676.093 1745.91,659.304 1746.47,662.574 1747.03,682.636 1747.59,682.572 1748.15,666.184 1748.71,637.02 1749.27,675.167 1749.83,657.954 1750.39,653.351 1750.95,673.367 1751.51,662.881 1752.06,663.942 1752.62,647.938 1753.18,649.393 1753.74,664.633 1754.3,647.405 1754.86,647.525 1755.42,616.942 1755.98,621.692 1756.54,639.533 1757.1,611.15 1757.66,617.047 1758.22,652.955 1758.78,668.977 1759.34,669.53 1759.89,688.296 1760.45,685.714 1761.01,719.193 1761.57,717.306 1762.13,698.501 1762.69,678.466 1763.25,646.762 1763.81,649.386 1764.37,648.784 1764.93,682.813 1765.49,730.448 1766.05,695.118 1766.61,693.252 1767.16,692.888 1767.72,692.17 1768.28,708.957 1768.84,724.51 1769.4,708.015 1769.96,721.371 1770.52,720.979 1771.08,718.093 1771.64,732.912 1772.2,698.8 1772.76,695.476 1773.32,708.939 1773.88,690.214 1774.43,693.638 1774.99,694.321 1775.55,724.629 1776.11,737.908 1776.67,737.238 1777.23,718.973 1777.79,731.719 1778.35,712.737 1778.91,722.424 1779.47,723.683 1780.03,720.884 1780.59,722.761 1781.15,721.132 1781.71,748.282 1782.26,725.141 1782.82,739.187 1783.38,755.974 1783.94,722.863 1784.5,706.4 1785.06,658.128 1785.62,641.805 1786.18,644.177 1786.74,613.441 1787.3,616.004 1787.86,653.941 1788.42,669.067 1788.98,703.9 1789.53,700.972 1790.09,684.155 1790.65,667.432 1791.21,668.809 1791.77,671.012 1792.33,671.98 1792.89,687.793 1793.45,703.092 1794.01,703.092 1794.57,684.563 1795.13,684.228 1795.69,650.156 1796.25,655.882 1796.8,641.231 1797.36,609.344 1797.92,629.433 1798.48,618.923 1799.04,605.857 1799.6,628.293 1800.16,645.237 1800.72,678.761 1801.28,677.842 1801.84,663.244 1802.4,630.835 1802.96,638.435 1803.52,626.461 1804.08,616.01 1804.63,639.347 1805.19,643.558 1805.75,663.786 1806.31,684.94 1806.87,716.126 1807.43,729.658 1807.99,743.139 1808.55,804.73 1809.11,812.661 1809.67,770.983 1810.23,753.851 1810.79,752.15 1811.35,750.793 1811.9,744.527 1812.46,726.242 1813.02,740.882 1813.58,737.927 1814.14,751.068 1814.7,777.176 1815.26,776.571 1815.82,736.103 1816.38,751.116 1816.94,732.281 1817.5,745.897 1818.06,789.419 1818.62,800.999 1819.18,798.196 1819.73,761.421 1820.29,742.249 1820.85,738.359 1821.41,738.617 1821.97,717.21 1822.53,695.788 1823.09,696.02 1823.65,699.786 1824.21,747.536 1824.77,749.244 1825.33,730.396 1825.89,726.61 1826.45,739.352 1827,689.483 1827.56,638.939 1828.12,642.128 1828.68,646.419 1829.24,646.862 1829.8,632.394 1830.36,634.005 1830.92,620.624 1831.48,640.571 1832.04,645.067 1832.6,713.169 1833.16,677.516 1833.72,697.085 1834.27,731.534 1834.83,715.025 1835.39,727.603 1835.95,727.746 1836.51,741.28 1837.07,800.606 1837.63,745.639 1838.19,742.023 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 691.159 L720.806 691.159 L721.365 691.159 L721.924 691.159 L722.484 691.159 L723.043 691.159 L723.602 691.159 L724.161 691.159 L724.721 691.159 L725.28 691.159 L725.839 691.159 L726.398 691.159 L726.958 691.159 L727.517 691.159 L728.076 691.159 L728.635 691.159 L729.195 691.159 L729.754 691.159 L730.313 691.159 L730.872 691.159 L731.432 691.159 L731.991 691.159 L732.55 691.159 L733.109 691.159 L733.669 691.159 L734.228 691.159 L734.787 691.159 L735.346 691.159 L735.906 691.159 L736.465 691.159 L737.024 691.159 L737.583 691.159 L738.143 691.159 L738.702 691.159 L739.261 691.159 L739.82 691.159 L740.38 691.159 L740.939 691.159 L741.498 691.159 L742.057 691.159 L742.617 691.159 L743.176 691.159 L743.735 691.159 L744.294 691.159 L744.854 691.159 L745.413 691.159 L745.972 691.159 L746.531 691.159 L747.091 691.159 L747.65 691.159 L748.209 691.159 L748.768 691.159 L749.328 691.159 L749.887 691.159 L750.446 691.159 L751.005 691.159 L751.565 691.159 L752.124 691.159 L752.683 691.159 L753.242 691.159 L753.802 691.159 L754.361 691.159 L754.92 691.159 L755.479 691.159 L756.039 691.159 L756.598 691.159 L757.157 691.159 L757.716 691.159 L758.276 691.159 L758.835 691.159 L759.394 691.159 L759.953 691.159 L760.513 691.159 L761.072 691.159 L761.631 691.159 L762.19 691.159 L762.75 691.159 L763.309 691.159 L763.868 691.159 L764.427 691.159 L764.987 691.159 L765.546 691.159 L766.105 691.159 L766.664 691.159 L767.224 691.159 L767.783 691.159 L768.342 691.159 L768.901 691.159 L769.461 691.159 L770.02 691.159 L770.579 691.159 L771.138 691.159 L771.698 691.159 L772.257 691.159 L772.816 691.159 L773.375 691.159 L773.935 691.159 L774.494 691.159 L775.053 691.159 L775.612 691.159 L776.172 691.159 L776.731 691.159 L777.29 691.159 L777.849 691.159 L778.409 691.159 L778.968 691.159 L779.527 691.159 L780.086 691.159 L780.646 691.159 L781.205 691.159 L781.764 691.159 L782.323 691.159 L782.883 691.159 L783.442 691.159 L784.001 691.159 L784.56 691.159 L785.12 691.159 L785.679 691.159 L786.238 691.159 L786.797 691.159 L787.357 691.159 L787.916 691.159 L788.475 691.159 L789.034 691.159 L789.594 691.159 L790.153 691.159 L790.712 691.159 L791.271 691.159 L791.831 691.159 L792.39 691.159 L792.949 691.159 L793.508 691.159 L794.068 691.159 L794.627 691.159 L795.186 691.159 L795.745 691.159 L796.305 691.159 L796.864 691.159 L797.423 691.159 L797.982 691.159 L798.542 691.159 L799.101 691.159 L799.66 691.159 L800.219 691.159 L800.779 691.159 L801.338 691.159 L801.897 691.159 L802.456 691.159 L803.016 691.159 L803.575 691.159 L804.134 691.159 L804.693 691.159 L805.253 691.159 L805.812 691.159 L806.371 691.159 L806.931 691.159 L807.49 691.159 L808.049 691.159 L808.608 691.159 L809.168 691.159 L809.727 691.159 L810.286 691.159 L810.845 691.159 L811.405 691.159 L811.964 691.159 L812.523 691.159 L813.082 691.159 L813.642 691.159 L814.201 691.159 L814.76 691.159 L815.319 691.159 L815.879 691.159 L816.438 691.159 L816.997 691.159 L817.556 691.159 L818.116 691.159 L818.675 691.159 L819.234 691.159 L819.793 691.159 L820.353 691.159 L820.912 691.159 L821.471 691.159 L822.03 691.159 L822.59 691.159 L823.149 691.159 L823.708 691.159 L824.267 691.159 L824.827 691.159 L825.386 691.159 L825.945 691.159 L826.504 691.159 L827.064 691.159 L827.623 691.159 L828.182 691.159 L828.741 691.159 L829.301 691.159 L829.86 691.159 L830.419 691.159 L830.978 691.159 L831.538 691.159 L832.097 691.159 L832.656 691.159 L833.215 691.159 L833.775 691.159 L834.334 691.159 L834.893 691.159 L835.452 691.159 L836.012 691.159 L836.571 691.159 L837.13 691.159 L837.689 691.159 L838.249 691.159 L838.808 691.159 L839.367 691.159 L839.926 691.159 L840.486 691.159 L841.045 691.159 L841.604 691.159 L842.163 691.159 L842.723 691.159 L843.282 691.159 L843.841 691.159 L844.4 691.159 L844.96 691.159 L845.519 691.159 L846.078 691.159 L846.637 691.159 L847.197 691.159 L847.756 691.159 L848.315 691.159 L848.874 691.159 L849.434 691.159 L849.993 691.159 L850.552 691.159 L851.111 691.159 L851.671 691.159 L852.23 691.159 L852.789 691.159 L853.348 691.159 L853.908 691.159 L854.467 691.159 L855.026 691.159 L855.585 691.159 L856.145 691.159 L856.704 691.159 L857.263 691.159 L857.822 691.159 L858.382 691.159 L858.941 691.159 L859.5 691.159 L860.059 691.159 L860.619 691.159 L861.178 691.159 L861.737 691.159 L862.296 691.159 L862.856 691.159 L863.415 691.159 L863.974 691.159 L864.533 691.159 L865.093 691.159 L865.652 691.159 L866.211 691.159 L866.77 691.159 L867.33 691.159 L867.889 691.159 L868.448 691.159 L869.007 691.159 L869.567 691.159 L870.126 691.159 L870.685 691.159 L871.244 691.159 L871.804 691.159 L872.363 691.159 L872.922 691.159 L873.481 691.159 L874.041 691.159 L874.6 691.159 L875.159 691.159 L875.718 691.159 L876.278 691.159 L876.837 691.159 L877.396 691.159 L877.955 691.159 L878.515 691.159 L879.074 691.159 L879.633 691.159 L880.192 691.159 L880.752 691.159 L881.311 691.159 L881.87 691.159 L882.429 691.159 L882.989 691.159 L883.548 691.159 L884.107 691.159 L884.666 691.159 L885.226 691.159 L885.785 691.159 L886.344 691.159 L886.903 691.159 L887.463 691.159 L888.022 691.159 L888.581 691.159 L889.14 691.159 L889.7 691.159 L890.259 691.159 L890.818 691.159 L891.377 691.159 L891.937 691.159 L892.496 691.159 L893.055 691.159 L893.614 691.159 L894.174 691.159 L894.733 691.159 L895.292 691.159 L895.851 691.159 L896.411 691.159 L896.97 691.159 L897.529 691.159 L898.088 691.159 L898.648 691.159 L899.207 691.159 L899.766 691.159 L900.325 691.159 L900.885 691.159 L901.444 691.159 L902.003 691.159 L902.562 691.159 L903.122 691.159 L903.681 691.159 L904.24 691.159 L904.799 691.159 L905.359 691.159 L905.918 691.159 L906.477 691.159 L907.036 691.159 L907.596 691.159 L908.155 691.159 L908.714 691.159 L909.273 691.159 L909.833 691.159 L910.392 691.159 L910.951 691.159 L911.51 691.159 L912.07 691.159 L912.629 691.159 L913.188 691.159 L913.747 691.159 L914.307 691.159 L914.866 691.159 L915.425 691.159 L915.984 691.159 L916.544 691.159 L917.103 691.159 L917.662 691.159 L918.221 691.159 L918.781 691.159 L919.34 691.159 L919.899 691.159 L920.458 691.159 L921.018 691.159 L921.577 691.159 L922.136 691.159 L922.695 691.159 L923.255 691.159 L923.814 691.159 L924.373 691.159 L924.932 691.159 L925.492 691.159 L926.051 691.159 L926.61 691.159 L927.169 691.159 L927.729 691.159 L928.288 691.159 L928.847 691.159 L929.406 691.159 L929.966 691.159 L930.525 691.159 L931.084 691.159 L931.644 691.159 L932.203 691.159 L932.762 691.159 L933.321 691.159 L933.881 691.159 L934.44 691.159 L934.999 691.159 L935.558 691.159 L936.118 691.159 L936.677 691.159 L937.236 691.159 L937.795 691.159 L938.355 691.159 L938.914 691.159 L939.473 691.159 L940.032 691.159 L940.592 691.159 L941.151 691.159 L941.71 691.159 L942.269 691.159 L942.829 691.159 L943.388 691.159 L943.947 691.159 L944.506 691.159 L945.066 691.159 L945.625 691.159 L946.184 691.159 L946.743 691.159 L947.303 691.159 L947.862 691.159 L948.421 691.159 L948.98 691.159 L949.54 691.159 L950.099 691.159 L950.658 691.159 L951.217 691.159 L951.777 691.159 L952.336 691.159 L952.895 691.159 L953.454 691.159 L954.014 691.159 L954.573 691.159 L955.132 691.159 L955.691 691.159 L956.251 691.159 L956.81 691.159 L957.369 691.159 L957.928 691.159 L958.488 691.159 L959.047 691.159 L959.606 691.159 L960.165 691.159 L960.725 691.159 L961.284 691.159 L961.843 691.159 L962.402 691.159 L962.962 691.159 L963.521 691.159 L964.08 691.159 L964.639 691.159 L965.199 691.159 L965.758 691.159 L966.317 691.159 L966.876 691.159 L967.436 691.159 L967.995 691.159 L968.554 691.159 L969.113 691.159 L969.673 691.159 L970.232 691.159 L970.791 691.159 L971.35 691.159 L971.91 691.159 L972.469 691.159 L973.028 691.159 L973.587 691.159 L974.147 691.159 L974.706 691.159 L975.265 691.159 L975.824 691.159 L976.384 691.159 L976.943 691.159 L977.502 691.159 L978.061 691.159 L978.621 691.159 L979.18 691.159 L979.739 691.159 L980.298 691.159 L980.858 691.159 L981.417 691.159 L981.976 691.159 L982.535 691.159 L983.095 691.159 L983.654 691.159 L984.213 691.159 L984.772 691.159 L985.332 691.159 L985.891 691.159 L986.45 691.159 L987.009 691.159 L987.569 691.159 L988.128 691.159 L988.687 691.159 L989.246 691.159 L989.806 691.159 L990.365 691.159 L990.924 691.159 L991.483 691.159 L992.043 691.159 L992.602 691.159 L993.161 691.159 L993.72 691.159 L994.28 691.159 L994.839 691.159 L995.398 691.159 L995.957 691.159 L996.517 691.159 L997.076 691.159 L997.635 691.159 L998.194 691.159 L998.754 691.159 L999.313 691.159 L999.872 691.159 L1000.43 691.159 L1000.99 691.159 L1001.55 691.159 L1002.11 691.159 L1002.67 691.159 L1003.23 691.159 L1003.79 691.159 L1004.35 691.159 L1004.91 691.159 L1005.46 691.159 L1006.02 691.159 L1006.58 691.159 L1007.14 691.159 L1007.7 691.159 L1008.26 691.159 L1008.82 691.159 L1009.38 691.159 L1009.94 691.159 L1010.5 691.159 L1011.06 691.159 L1011.62 691.159 L1012.18 691.159 L1012.73 691.159 L1013.29 691.159 L1013.85 691.159 L1014.41 691.159 L1014.97 691.159 L1015.53 691.159 L1016.09 691.159 L1016.65 691.159 L1017.21 691.159 L1017.77 691.159 L1018.33 691.159 L1018.89 691.159 L1019.45 691.159 L1020.01 691.159 L1020.56 691.159 L1021.12 691.159 L1021.68 691.159 L1022.24 691.159 L1022.8 691.159 L1023.36 691.159 L1023.92 691.159 L1024.48 691.159 L1025.04 691.159 L1025.6 691.159 L1026.16 691.159 L1026.72 691.159 L1027.28 691.159 L1027.83 691.159 L1028.39 691.159 L1028.95 691.159 L1029.51 691.159 L1030.07 691.159 L1030.63 691.159 L1031.19 691.159 L1031.75 691.159 L1032.31 691.159 L1032.87 691.159 L1033.43 691.159 L1033.99 691.159 L1034.55 691.159 L1035.1 691.159 L1035.66 691.159 L1036.22 691.159 L1036.78 691.159 L1037.34 691.159 L1037.9 691.159 L1038.46 691.159 L1039.02 691.159 L1039.58 691.159 L1040.14 691.159 L1040.7 691.159 L1041.26 691.159 L1041.82 691.159 L1042.38 691.159 L1042.93 691.159 L1043.49 691.159 L1044.05 691.159 L1044.61 691.159 L1045.17 691.159 L1045.73 691.159 L1046.29 691.159 L1046.85 691.159 L1047.41 691.159 L1047.97 691.159 L1048.53 691.159 L1049.09 691.159 L1049.65 691.159 L1050.2 691.159 L1050.76 691.159 L1051.32 691.159 L1051.88 691.159 L1052.44 691.159 L1053 691.159 L1053.56 691.159 L1054.12 691.159 L1054.68 691.159 L1055.24 691.159 L1055.8 691.159 L1056.36 691.159 L1056.92 691.159 L1057.48 691.159 L1058.03 691.159 L1058.59 691.159 L1059.15 691.159 L1059.71 691.159 L1060.27 691.159 L1060.83 691.159 L1061.39 691.159 L1061.95 691.159 L1062.51 691.159 L1063.07 691.159 L1063.63 691.159 L1064.19 691.159 L1064.75 691.159 L1065.3 691.159 L1065.86 691.159 L1066.42 691.159 L1066.98 691.159 L1067.54 691.159 L1068.1 691.159 L1068.66 691.159 L1069.22 691.159 L1069.78 691.159 L1070.34 691.159 L1070.9 691.159 L1071.46 691.159 L1072.02 691.159 L1072.57 691.159 L1073.13 691.159 L1073.69 691.159 L1074.25 691.159 L1074.81 691.159 L1075.37 691.159 L1075.93 691.159 L1076.49 691.159 L1077.05 691.159 L1077.61 691.159 L1078.17 691.159 L1078.73 691.159 L1079.29 691.159 L1079.85 691.159 L1080.4 691.159 L1080.96 691.159 L1081.52 691.159 L1082.08 691.159 L1082.64 691.159 L1083.2 691.159 L1083.76 691.159 L1084.32 691.159 L1084.88 691.159 L1085.44 691.159 L1086 691.159 L1086.56 691.159 L1087.12 691.159 L1087.67 691.159 L1088.23 691.159 L1088.79 691.159 L1089.35 691.159 L1089.91 691.159 L1090.47 691.159 L1091.03 691.159 L1091.59 691.159 L1092.15 691.159 L1092.71 691.159 L1093.27 691.159 L1093.83 691.159 L1094.39 691.159 L1094.94 691.159 L1095.5 691.159 L1096.06 691.159 L1096.62 691.159 L1097.18 691.159 L1097.74 691.159 L1098.3 691.159 L1098.86 691.159 L1099.42 691.159 L1099.98 691.159 L1100.54 691.159 L1101.1 691.159 L1101.66 691.159 L1102.22 691.159 L1102.77 691.159 L1103.33 691.159 L1103.89 691.159 L1104.45 691.159 L1105.01 691.159 L1105.57 691.159 L1106.13 691.159 L1106.69 691.159 L1107.25 691.159 L1107.81 691.159 L1108.37 691.159 L1108.93 691.159 L1109.49 691.159 L1110.04 691.159 L1110.6 691.159 L1111.16 691.159 L1111.72 691.159 L1112.28 691.159 L1112.84 691.159 L1113.4 691.159 L1113.96 691.159 L1114.52 691.159 L1115.08 691.159 L1115.64 691.159 L1116.2 691.159 L1116.76 691.159 L1117.31 691.159 L1117.87 691.159 L1118.43 691.159 L1118.99 691.159 L1119.55 691.159 L1120.11 691.159 L1120.67 691.159 L1121.23 691.159 L1121.79 691.159 L1122.35 691.159 L1122.91 691.159 L1123.47 691.159 L1124.03 691.159 L1124.59 691.159 L1125.14 691.159 L1125.7 691.159 L1126.26 691.159 L1126.82 691.159 L1127.38 691.159 L1127.94 691.159 L1128.5 691.159 L1129.06 691.159 L1129.62 691.159 L1130.18 691.159 L1130.74 691.159 L1131.3 691.159 L1131.86 691.159 L1132.41 691.159 L1132.97 691.159 L1133.53 691.159 L1134.09 691.159 L1134.65 691.159 L1135.21 691.159 L1135.77 691.159 L1136.33 691.159 L1136.89 691.159 L1137.45 691.159 L1138.01 691.159 L1138.57 691.159 L1139.13 691.159 L1139.68 691.159 L1140.24 691.159 L1140.8 691.159 L1141.36 691.159 L1141.92 691.159 L1142.48 691.159 L1143.04 691.159 L1143.6 691.159 L1144.16 691.159 L1144.72 691.159 L1145.28 691.159 L1145.84 691.159 L1146.4 691.159 L1146.96 691.159 L1147.51 691.159 L1148.07 691.159 L1148.63 691.159 L1149.19 691.159 L1149.75 691.159 L1150.31 691.159 L1150.87 691.159 L1151.43 691.159 L1151.99 691.159 L1152.55 691.159 L1153.11 691.159 L1153.67 691.159 L1154.23 691.159 L1154.78 691.159 L1155.34 691.159 L1155.9 691.159 L1156.46 691.159 L1157.02 691.159 L1157.58 691.159 L1158.14 691.159 L1158.7 691.159 L1159.26 691.159 L1159.82 691.159 L1160.38 691.159 L1160.94 691.159 L1161.5 691.159 L1162.05 691.159 L1162.61 691.159 L1163.17 691.159 L1163.73 691.159 L1164.29 691.159 L1164.85 691.159 L1165.41 691.159 L1165.97 691.159 L1166.53 691.159 L1167.09 691.159 L1167.65 691.159 L1168.21 691.159 L1168.77 691.159 L1169.33 691.159 L1169.88 691.159 L1170.44 691.159 L1171 691.159 L1171.56 691.159 L1172.12 691.159 L1172.68 691.159 L1173.24 691.159 L1173.8 691.159 L1174.36 691.159 L1174.92 691.159 L1175.48 691.159 L1176.04 691.159 L1176.6 691.159 L1177.15 691.159 L1177.71 691.159 L1178.27 691.159 L1178.83 691.159 L1179.39 691.159 L1179.95 691.159 L1180.51 691.159 L1181.07 691.159 L1181.63 691.159 L1182.19 691.159 L1182.75 691.159 L1183.31 691.159 L1183.87 691.159 L1184.43 691.159 L1184.98 691.159 L1185.54 691.159 L1186.1 691.159 L1186.66 691.159 L1187.22 691.159 L1187.78 691.159 L1188.34 691.159 L1188.9 691.159 L1189.46 691.159 L1190.02 691.159 L1190.58 691.159 L1191.14 691.159 L1191.7 691.159 L1192.25 691.159 L1192.81 691.159 L1193.37 691.159 L1193.93 691.159 L1194.49 691.159 L1195.05 691.159 L1195.61 691.159 L1196.17 691.159 L1196.73 691.159 L1197.29 691.159 L1197.85 691.159 L1198.41 691.159 L1198.97 691.159 L1199.52 691.159 L1200.08 691.159 L1200.64 691.159 L1201.2 691.159 L1201.76 691.159 L1202.32 691.159 L1202.88 691.159 L1203.44 691.159 L1204 691.159 L1204.56 691.159 L1205.12 691.159 L1205.68 691.159 L1206.24 691.159 L1206.8 691.159 L1207.35 691.159 L1207.91 691.159 L1208.47 691.159 L1209.03 691.159 L1209.59 691.159 L1210.15 691.159 L1210.71 691.159 L1211.27 691.159 L1211.83 691.159 L1212.39 691.159 L1212.95 691.159 L1213.51 691.159 L1214.07 691.159 L1214.62 691.159 L1215.18 691.159 L1215.74 691.159 L1216.3 691.159 L1216.86 691.159 L1217.42 691.159 L1217.98 691.159 L1218.54 691.159 L1219.1 691.159 L1219.66 691.159 L1220.22 691.159 L1220.78 691.159 L1221.34 691.159 L1221.89 691.159 L1222.45 691.159 L1223.01 691.159 L1223.57 691.159 L1224.13 691.159 L1224.69 691.159 L1225.25 691.159 L1225.81 691.159 L1226.37 691.159 L1226.93 691.159 L1227.49 691.159 L1228.05 691.159 L1228.61 691.159 L1229.17 691.159 L1229.72 691.159 L1230.28 691.159 L1230.84 691.159 L1231.4 691.159 L1231.96 691.159 L1232.52 691.159 L1233.08 691.159 L1233.64 691.159 L1234.2 691.159 L1234.76 691.159 L1235.32 691.159 L1235.88 691.159 L1236.44 691.159 L1236.99 691.159 L1237.55 691.159 L1238.11 691.159 L1238.67 691.159 L1239.23 691.159 L1239.79 691.159 L1240.35 691.159 L1240.91 691.159 L1241.47 691.159 L1242.03 691.159 L1242.59 691.159 L1243.15 691.159 L1243.71 691.159 L1244.26 691.159 L1244.82 691.159 L1245.38 691.159 L1245.94 691.159 L1246.5 691.159 L1247.06 691.159 L1247.62 691.159 L1248.18 691.159 L1248.74 691.159 L1249.3 691.159 L1249.86 691.159 L1250.42 691.159 L1250.98 691.159 L1251.54 691.159 L1252.09 691.159 L1252.65 691.159 L1253.21 691.159 L1253.77 691.159 L1254.33 691.159 L1254.89 691.159 L1255.45 691.159 L1256.01 691.159 L1256.57 691.159 L1257.13 691.159 L1257.69 691.159 L1258.25 691.159 L1258.81 691.159 L1259.36 691.159 L1259.92 691.159 L1260.48 691.159 L1261.04 691.159 L1261.6 691.159 L1262.16 691.159 L1262.72 691.159 L1263.28 691.159 L1263.84 691.159 L1264.4 691.159 L1264.96 691.159 L1265.52 691.159 L1266.08 691.159 L1266.63 691.159 L1267.19 691.159 L1267.75 691.159 L1268.31 691.159 L1268.87 691.159 L1269.43 691.159 L1269.99 691.159 L1270.55 691.159 L1271.11 691.159 L1271.67 691.159 L1272.23 691.159 L1272.79 691.159 L1273.35 691.159 L1273.91 691.159 L1274.46 691.159 L1275.02 691.159 L1275.58 691.159 L1276.14 691.159 L1276.7 691.159 L1277.26 691.159 L1277.82 691.159 L1278.38 691.159 L1278.94 691.159 L1279.5 691.159 L1280.06 691.159 L1280.62 691.159 L1281.18 691.159 L1281.73 691.159 L1282.29 691.159 L1282.85 691.159 L1283.41 691.159 L1283.97 691.159 L1284.53 691.159 L1285.09 691.159 L1285.65 691.159 L1286.21 691.159 L1286.77 691.159 L1287.33 691.159 L1287.89 691.159 L1288.45 691.159 L1289 691.159 L1289.56 691.159 L1290.12 691.159 L1290.68 691.159 L1291.24 691.159 L1291.8 691.159 L1292.36 691.159 L1292.92 691.159 L1293.48 691.159 L1294.04 691.159 L1294.6 691.159 L1295.16 691.159 L1295.72 691.159 L1296.28 691.159 L1296.83 691.159 L1297.39 691.159 L1297.95 691.159 L1298.51 691.159 L1299.07 691.159 L1299.63 691.159 L1300.19 691.159 L1300.75 691.159 L1301.31 691.159 L1301.87 691.159 L1302.43 691.159 L1302.99 691.159 L1303.55 691.159 L1304.1 691.159 L1304.66 691.159 L1305.22 691.159 L1305.78 691.159 L1306.34 691.159 L1306.9 691.159 L1307.46 691.159 L1308.02 691.159 L1308.58 691.159 L1309.14 691.159 L1309.7 691.159 L1310.26 691.159 L1310.82 691.159 L1311.38 691.159 L1311.93 691.159 L1312.49 691.159 L1313.05 691.159 L1313.61 691.159 L1314.17 691.159 L1314.73 691.159 L1315.29 691.159 L1315.85 691.159 L1316.41 691.159 L1316.97 691.159 L1317.53 691.159 L1318.09 691.159 L1318.65 691.159 L1319.2 691.159 L1319.76 691.159 L1320.32 691.159 L1320.88 691.159 L1321.44 691.159 L1322 691.159 L1322.56 691.159 L1323.12 691.159 L1323.68 691.159 L1324.24 691.159 L1324.8 691.159 L1325.36 691.159 L1325.92 691.159 L1326.47 691.159 L1327.03 691.159 L1327.59 691.159 L1328.15 691.159 L1328.71 691.159 L1329.27 691.159 L1329.83 691.159 L1330.39 691.159 L1330.95 691.159 L1331.51 691.159 L1332.07 691.159 L1332.63 691.159 L1333.19 691.159 L1333.75 691.159 L1334.3 691.159 L1334.86 691.159 L1335.42 691.159 L1335.98 691.159 L1336.54 691.159 L1337.1 691.159 L1337.66 691.159 L1338.22 691.159 L1338.78 691.159 L1339.34 691.159 L1339.9 691.159 L1340.46 691.159 L1341.02 691.159 L1341.57 691.159 L1342.13 691.159 L1342.69 691.159 L1343.25 691.159 L1343.81 691.159 L1344.37 691.159 L1344.93 691.159 L1345.49 691.159 L1346.05 691.159 L1346.61 691.159 L1347.17 691.159 L1347.73 691.159 L1348.29 691.159 L1348.84 691.159 L1349.4 691.159 L1349.96 691.159 L1350.52 691.159 L1351.08 691.159 L1351.64 691.159 L1352.2 691.159 L1352.76 691.159 L1353.32 691.159 L1353.88 691.159 L1354.44 691.159 L1355 691.159 L1355.56 691.159 L1356.12 691.159 L1356.67 691.159 L1357.23 691.159 L1357.79 691.159 L1358.35 691.159 L1358.91 691.159 L1359.47 691.159 L1360.03 691.159 L1360.59 691.159 L1361.15 691.159 L1361.71 691.159 L1362.27 691.159 L1362.83 691.159 L1363.39 691.159 L1363.94 691.159 L1364.5 691.159 L1365.06 691.159 L1365.62 691.159 L1366.18 691.159 L1366.74 691.159 L1367.3 691.159 L1367.86 691.159 L1368.42 691.159 L1368.98 691.159 L1369.54 691.159 L1370.1 691.159 L1370.66 691.159 L1371.21 691.159 L1371.77 691.159 L1372.33 691.159 L1372.89 691.159 L1373.45 691.159 L1374.01 691.159 L1374.57 691.159 L1375.13 691.159 L1375.69 691.159 L1376.25 691.159 L1376.81 691.159 L1377.37 691.159 L1377.93 691.159 L1378.49 691.159 L1379.04 691.159 L1379.6 691.159 L1380.16 691.159 L1380.72 691.159 L1381.28 691.159 L1381.84 691.159 L1382.4 691.159 L1382.96 691.159 L1383.52 691.159 L1384.08 691.159 L1384.64 691.159 L1385.2 691.159 L1385.76 691.159 L1386.31 691.159 L1386.87 691.159 L1387.43 691.159 L1387.99 691.159 L1388.55 691.159 L1389.11 691.159 L1389.67 691.159 L1390.23 691.159 L1390.79 691.159 L1391.35 691.159 L1391.91 691.159 L1392.47 691.159 L1393.03 691.159 L1393.58 691.159 L1394.14 691.159 L1394.7 691.159 L1395.26 691.159 L1395.82 691.159 L1396.38 691.159 L1396.94 691.159 L1397.5 691.159 L1398.06 691.159 L1398.62 691.159 L1399.18 691.159 L1399.74 691.159 L1400.3 691.159 L1400.86 691.159 L1401.41 691.159 L1401.97 691.159 L1402.53 691.159 L1403.09 691.159 L1403.65 691.159 L1404.21 691.159 L1404.77 691.159 L1405.33 691.159 L1405.89 691.159 L1406.45 691.159 L1407.01 691.159 L1407.57 691.159 L1408.13 691.159 L1408.68 691.159 L1409.24 691.159 L1409.8 691.159 L1410.36 691.159 L1410.92 691.159 L1411.48 691.159 L1412.04 691.159 L1412.6 691.159 L1413.16 691.159 L1413.72 691.159 L1414.28 691.159 L1414.84 691.159 L1415.4 691.159 L1415.95 691.159 L1416.51 691.159 L1417.07 691.159 L1417.63 691.159 L1418.19 691.159 L1418.75 691.159 L1419.31 691.159 L1419.87 691.159 L1420.43 691.159 L1420.99 691.159 L1421.55 691.159 L1422.11 691.159 L1422.67 691.159 L1423.23 691.159 L1423.78 691.159 L1424.34 691.159 L1424.9 691.159 L1425.46 691.159 L1426.02 691.159 L1426.58 691.159 L1427.14 691.159 L1427.7 691.159 L1428.26 691.159 L1428.82 691.159 L1429.38 691.159 L1429.94 691.159 L1430.5 691.159 L1431.05 691.159 L1431.61 691.159 L1432.17 691.159 L1432.73 691.159 L1433.29 691.159 L1433.85 691.159 L1434.41 691.159 L1434.97 691.159 L1435.53 691.159 L1436.09 691.159 L1436.65 691.159 L1437.21 691.159 L1437.77 691.159 L1438.33 691.159 L1438.88 691.159 L1439.44 691.159 L1440 691.159 L1440.56 691.159 L1441.12 691.159 L1441.68 691.159 L1442.24 691.159 L1442.8 691.159 L1443.36 691.159 L1443.92 691.159 L1444.48 691.159 L1445.04 691.159 L1445.6 691.159 L1446.15 691.159 L1446.71 691.159 L1447.27 691.159 L1447.83 691.159 L1448.39 691.159 L1448.95 691.159 L1449.51 691.159 L1450.07 691.159 L1450.63 691.159 L1451.19 691.159 L1451.75 691.159 L1452.31 691.159 L1452.87 691.159 L1453.42 691.159 L1453.98 691.159 L1454.54 691.159 L1455.1 691.159 L1455.66 691.159 L1456.22 691.159 L1456.78 691.159 L1457.34 691.159 L1457.9 691.159 L1458.46 691.159 L1459.02 691.159 L1459.58 691.159 L1460.14 691.159 L1460.7 691.159 L1461.25 691.159 L1461.81 691.159 L1462.37 691.159 L1462.93 691.159 L1463.49 691.159 L1464.05 691.159 L1464.61 691.159 L1465.17 691.159 L1465.73 691.159 L1466.29 691.159 L1466.85 691.159 L1467.41 691.159 L1467.97 691.159 L1468.52 691.159 L1469.08 691.159 L1469.64 691.159 L1470.2 691.159 L1470.76 691.159 L1471.32 691.159 L1471.88 691.159 L1472.44 691.159 L1473 691.159 L1473.56 691.159 L1474.12 691.159 L1474.68 691.159 L1475.24 691.159 L1475.79 691.159 L1476.35 691.159 L1476.91 691.159 L1477.47 691.159 L1478.03 691.159 L1478.59 691.159 L1479.15 691.159 L1479.71 691.159 L1480.27 691.159 L1480.83 691.159 L1481.39 691.159 L1481.95 691.159 L1482.51 691.159 L1483.07 691.159 L1483.62 691.159 L1484.18 691.159 L1484.74 691.159 L1485.3 691.159 L1485.86 691.159 L1486.42 691.159 L1486.98 691.159 L1487.54 691.159 L1488.1 691.159 L1488.66 691.159 L1489.22 691.159 L1489.78 691.159 L1490.34 691.159 L1490.89 691.159 L1491.45 691.159 L1492.01 691.159 L1492.57 691.159 L1493.13 691.159 L1493.69 691.159 L1494.25 691.159 L1494.81 691.159 L1495.37 691.159 L1495.93 691.159 L1496.49 691.159 L1497.05 691.159 L1497.61 691.159 L1498.16 691.159 L1498.72 691.159 L1499.28 691.159 L1499.84 691.159 L1500.4 691.159 L1500.96 691.159 L1501.52 691.159 L1502.08 691.159 L1502.64 691.159 L1503.2 691.159 L1503.76 691.159 L1504.32 691.159 L1504.88 691.159 L1505.44 691.159 L1505.99 691.159 L1506.55 691.159 L1507.11 691.159 L1507.67 691.159 L1508.23 691.159 L1508.79 691.159 L1509.35 691.159 L1509.91 691.159 L1510.47 691.159 L1511.03 691.159 L1511.59 691.159 L1512.15 691.159 L1512.71 691.159 L1513.26 691.159 L1513.82 691.159 L1514.38 691.159 L1514.94 691.159 L1515.5 691.159 L1516.06 691.159 L1516.62 691.159 L1517.18 691.159 L1517.74 691.159 L1518.3 691.159 L1518.86 691.159 L1519.42 691.159 L1519.98 691.159 L1520.53 691.159 L1521.09 691.159 L1521.65 691.159 L1522.21 691.159 L1522.77 691.159 L1523.33 691.159 L1523.89 691.159 L1524.45 691.159 L1525.01 691.159 L1525.57 691.159 L1526.13 691.159 L1526.69 691.159 L1527.25 691.159 L1527.81 691.159 L1528.36 691.159 L1528.92 691.159 L1529.48 691.159 L1530.04 691.159 L1530.6 691.159 L1531.16 691.159 L1531.72 691.159 L1532.28 691.159 L1532.84 691.159 L1533.4 691.159 L1533.96 691.159 L1534.52 691.159 L1535.08 691.159 L1535.63 691.159 L1536.19 691.159 L1536.75 691.159 L1537.31 691.159 L1537.87 691.159 L1538.43 691.159 L1538.99 691.159 L1539.55 691.159 L1540.11 691.159 L1540.67 691.159 L1541.23 691.159 L1541.79 691.159 L1542.35 691.159 L1542.9 691.159 L1543.46 691.159 L1544.02 691.159 L1544.58 691.159 L1545.14 691.159 L1545.7 691.159 L1546.26 691.159 L1546.82 691.159 L1547.38 691.159 L1547.94 691.159 L1548.5 691.159 L1549.06 691.159 L1549.62 691.159 L1550.18 691.159 L1550.73 691.159 L1551.29 691.159 L1551.85 691.159 L1552.41 691.159 L1552.97 691.159 L1553.53 691.159 L1554.09 691.159 L1554.65 691.159 L1555.21 691.159 L1555.77 691.159 L1556.33 691.159 L1556.89 691.159 L1557.45 691.159 L1558 691.159 L1558.56 691.159 L1559.12 691.159 L1559.68 691.159 L1560.24 691.159 L1560.8 691.159 L1561.36 691.159 L1561.92 691.159 L1562.48 691.159 L1563.04 691.159 L1563.6 691.159 L1564.16 691.159 L1564.72 691.159 L1565.28 691.159 L1565.83 691.159 L1566.39 691.159 L1566.95 691.159 L1567.51 691.159 L1568.07 691.159 L1568.63 691.159 L1569.19 691.159 L1569.75 691.159 L1570.31 691.159 L1570.87 691.159 L1571.43 691.159 L1571.99 691.159 L1572.55 691.159 L1573.1 691.159 L1573.66 691.159 L1574.22 691.159 L1574.78 691.159 L1575.34 691.159 L1575.9 691.159 L1576.46 691.159 L1577.02 691.159 L1577.58 691.159 L1578.14 691.159 L1578.7 691.159 L1579.26 691.159 L1579.82 691.159 L1580.37 691.159 L1580.93 691.159 L1581.49 691.159 L1582.05 691.159 L1582.61 691.159 L1583.17 691.159 L1583.73 691.159 L1584.29 691.159 L1584.85 691.159 L1585.41 691.159 L1585.97 691.159 L1586.53 691.159 L1587.09 691.159 L1587.65 691.159 L1588.2 691.159 L1588.76 691.159 L1589.32 691.159 L1589.88 691.159 L1590.44 691.159 L1591 691.159 L1591.56 691.159 L1592.12 691.159 L1592.68 691.159 L1593.24 691.159 L1593.8 691.159 L1594.36 691.159 L1594.92 691.159 L1595.47 691.159 L1596.03 691.159 L1596.59 691.159 L1597.15 691.159 L1597.71 691.159 L1598.27 691.159 L1598.83 691.159 L1599.39 691.159 L1599.95 691.159 L1600.51 691.159 L1601.07 691.159 L1601.63 691.159 L1602.19 691.159 L1602.74 691.159 L1603.3 691.159 L1603.86 691.159 L1604.42 691.159 L1604.98 691.159 L1605.54 691.159 L1606.1 691.159 L1606.66 691.159 L1607.22 691.159 L1607.78 691.159 L1608.34 691.159 L1608.9 691.159 L1609.46 691.159 L1610.02 691.159 L1610.57 691.159 L1611.13 691.159 L1611.69 691.159 L1612.25 691.159 L1612.81 691.159 L1613.37 691.159 L1613.93 691.159 L1614.49 691.159 L1615.05 691.159 L1615.61 691.159 L1616.17 691.159 L1616.73 691.159 L1617.29 691.159 L1617.84 691.159 L1618.4 691.159 L1618.96 691.159 L1619.52 691.159 L1620.08 691.159 L1620.64 691.159 L1621.2 691.159 L1621.76 691.159 L1622.32 691.159 L1622.88 691.159 L1623.44 691.159 L1624 691.159 L1624.56 691.159 L1625.11 691.159 L1625.67 691.159 L1626.23 691.159 L1626.79 691.159 L1627.35 691.159 L1627.91 691.159 L1628.47 691.159 L1629.03 691.159 L1629.59 691.159 L1630.15 691.159 L1630.71 691.159 L1631.27 691.159 L1631.83 691.159 L1632.39 691.159 L1632.94 691.159 L1633.5 691.159 L1634.06 691.159 L1634.62 691.159 L1635.18 691.159 L1635.74 691.159 L1636.3 691.159 L1636.86 691.159 L1637.42 691.159 L1637.98 691.159 L1638.54 691.159 L1639.1 691.159 L1639.66 691.159 L1640.21 691.159 L1640.77 691.159 L1641.33 691.159 L1641.89 691.159 L1642.45 691.159 L1643.01 691.159 L1643.57 691.159 L1644.13 691.159 L1644.69 691.159 L1645.25 691.159 L1645.81 691.159 L1646.37 691.159 L1646.93 691.159 L1647.48 691.159 L1648.04 691.159 L1648.6 691.159 L1649.16 691.159 L1649.72 691.159 L1650.28 691.159 L1650.84 691.159 L1651.4 691.159 L1651.96 691.159 L1652.52 691.159 L1653.08 691.159 L1653.64 691.159 L1654.2 691.159 L1654.76 691.159 L1655.31 691.159 L1655.87 691.159 L1656.43 691.159 L1656.99 691.159 L1657.55 691.159 L1658.11 691.159 L1658.67 691.159 L1659.23 691.159 L1659.79 691.159 L1660.35 691.159 L1660.91 691.159 L1661.47 691.159 L1662.03 691.159 L1662.58 691.159 L1663.14 691.159 L1663.7 691.159 L1664.26 691.159 L1664.82 691.159 L1665.38 691.159 L1665.94 691.159 L1666.5 691.159 L1667.06 691.159 L1667.62 691.159 L1668.18 691.159 L1668.74 691.159 L1669.3 691.159 L1669.85 691.159 L1670.41 691.159 L1670.97 691.159 L1671.53 691.159 L1672.09 691.159 L1672.65 691.159 L1673.21 691.159 L1673.77 691.159 L1674.33 691.159 L1674.89 691.159 L1675.45 691.159 L1676.01 691.159 L1676.57 691.159 L1677.13 691.159 L1677.68 691.159 L1678.24 691.159 L1678.8 691.159 L1679.36 691.159 L1679.92 691.159 L1680.48 691.159 L1681.04 691.159 L1681.6 691.159 L1682.16 691.159 L1682.72 691.159 L1683.28 691.159 L1683.84 691.159 L1684.4 691.159 L1684.95 691.159 L1685.51 691.159 L1686.07 691.159 L1686.63 691.159 L1687.19 691.159 L1687.75 691.159 L1688.31 691.159 L1688.87 691.159 L1689.43 691.159 L1689.99 691.159 L1690.55 691.159 L1691.11 691.159 L1691.67 691.159 L1692.23 691.159 L1692.78 691.159 L1693.34 691.159 L1693.9 691.159 L1694.46 691.159 L1695.02 691.159 L1695.58 691.159 L1696.14 691.159 L1696.7 691.159 L1697.26 691.159 L1697.82 691.159 L1698.38 691.159 L1698.94 691.159 L1699.5 691.159 L1700.05 691.159 L1700.61 691.159 L1701.17 691.159 L1701.73 691.159 L1702.29 691.159 L1702.85 691.159 L1703.41 691.159 L1703.97 691.159 L1704.53 691.159 L1705.09 691.159 L1705.65 691.159 L1706.21 691.159 L1706.77 691.159 L1707.32 691.159 L1707.88 691.159 L1708.44 691.159 L1709 691.159 L1709.56 691.159 L1710.12 691.159 L1710.68 691.159 L1711.24 691.159 L1711.8 691.159 L1712.36 691.159 L1712.92 691.159 L1713.48 691.159 L1714.04 691.159 L1714.6 691.159 L1715.15 691.159 L1715.71 691.159 L1716.27 691.159 L1716.83 691.159 L1717.39 691.159 L1717.95 691.159 L1718.51 691.159 L1719.07 691.159 L1719.63 691.159 L1720.19 691.159 L1720.75 691.159 L1721.31 691.159 L1721.87 691.159 L1722.42 691.159 L1722.98 691.159 L1723.54 691.159 L1724.1 691.159 L1724.66 691.159 L1725.22 691.159 L1725.78 691.159 L1726.34 691.159 L1726.9 691.159 L1727.46 691.159 L1728.02 691.159 L1728.58 691.159 L1729.14 691.159 L1729.69 691.159 L1730.25 691.159 L1730.81 691.159 L1731.37 691.159 L1731.93 691.159 L1732.49 691.159 L1733.05 691.159 L1733.61 691.159 L1734.17 691.159 L1734.73 691.159 L1735.29 691.159 L1735.85 691.159 L1736.41 691.159 L1736.97 691.159 L1737.52 691.159 L1738.08 691.159 L1738.64 691.159 L1739.2 691.159 L1739.76 691.159 L1740.32 691.159 L1740.88 691.159 L1741.44 691.159 L1742 691.159 L1742.56 691.159 L1743.12 691.159 L1743.68 691.159 L1744.24 691.159 L1744.79 691.159 L1745.35 691.159 L1745.91 691.159 L1746.47 691.159 L1747.03 691.159 L1747.59 691.159 L1748.15 691.159 L1748.71 691.159 L1749.27 691.159 L1749.83 691.159 L1750.39 691.159 L1750.95 691.159 L1751.51 691.159 L1752.06 691.159 L1752.62 691.159 L1753.18 691.159 L1753.74 691.159 L1754.3 691.159 L1754.86 691.159 L1755.42 691.159 L1755.98 691.159 L1756.54 691.159 L1757.1 691.159 L1757.66 691.159 L1758.22 691.159 L1758.78 691.159 L1759.34 691.159 L1759.89 691.159 L1760.45 691.159 L1761.01 691.159 L1761.57 691.159 L1762.13 691.159 L1762.69 691.159 L1763.25 691.159 L1763.81 691.159 L1764.37 691.159 L1764.93 691.159 L1765.49 691.159 L1766.05 691.159 L1766.61 691.159 L1767.16 691.159 L1767.72 691.159 L1768.28 691.159 L1768.84 691.159 L1769.4 691.159 L1769.96 691.159 L1770.52 691.159 L1771.08 691.159 L1771.64 691.159 L1772.2 691.159 L1772.76 691.159 L1773.32 691.159 L1773.88 691.159 L1774.43 691.159 L1774.99 691.159 L1775.55 691.159 L1776.11 691.159 L1776.67 691.159 L1777.23 691.159 L1777.79 691.159 L1778.35 691.159 L1778.91 691.159 L1779.47 691.159 L1780.03 691.159 L1780.59 691.159 L1781.15 691.159 L1781.71 691.159 L1782.26 691.159 L1782.82 691.159 L1783.38 691.159 L1783.94 691.159 L1784.5 691.159 L1785.06 691.159 L1785.62 691.159 L1786.18 691.159 L1786.74 691.159 L1787.3 691.159 L1787.86 691.159 L1788.42 691.159 L1788.98 691.159 L1789.53 691.159 L1790.09 691.159 L1790.65 691.159 L1791.21 691.159 L1791.77 691.159 L1792.33 691.159 L1792.89 691.159 L1793.45 691.159 L1794.01 691.159 L1794.57 691.159 L1795.13 691.159 L1795.69 691.159 L1796.25 691.159 L1796.8 691.159 L1797.36 691.159 L1797.92 691.159 L1798.48 691.159 L1799.04 691.159 L1799.6 691.159 L1800.16 691.159 L1800.72 691.159 L1801.28 691.159 L1801.84 691.159 L1802.4 691.159 L1802.96 691.159 L1803.52 691.159 L1804.08 691.159 L1804.63 691.159 L1805.19 691.159 L1805.75 691.159 L1806.31 691.159 L1806.87 691.159 L1807.43 691.159 L1807.99 691.159 L1808.55 691.159 L1809.11 691.159 L1809.67 691.159 L1810.23 691.159 L1810.79 691.159 L1811.35 691.159 L1811.9 691.159 L1812.46 691.159 L1813.02 691.159 L1813.58 691.159 L1814.14 691.159 L1814.7 691.159 L1815.26 691.159 L1815.82 691.159 L1816.38 691.159 L1816.94 691.159 L1817.5 691.159 L1818.06 691.159 L1818.62 691.159 L1819.18 691.159 L1819.73 691.159 L1820.29 691.159 L1820.85 691.159 L1821.41 691.159 L1821.97 691.159 L1822.53 691.159 L1823.09 691.159 L1823.65 691.159 L1824.21 691.159 L1824.77 691.159 L1825.33 691.159 L1825.89 691.159 L1826.45 691.159 L1827 691.159 L1827.56 691.159 L1828.12 691.159 L1828.68 691.159 L1829.24 691.159 L1829.8 691.159 L1830.36 691.159 L1830.92 691.159 L1831.48 691.159 L1832.04 691.159 L1832.6 691.159 L1833.16 691.159 L1833.72 691.159 L1834.27 691.159 L1834.83 691.159 L1835.39 691.159 L1835.95 691.159 L1836.51 691.159 L1837.07 691.159 L1837.63 691.159 L1838.19 691.159 L1838.19 681.698 L1837.63 681.698 L1837.07 681.698 L1836.51 681.698 L1835.95 681.698 L1835.39 681.698 L1834.83 681.698 L1834.27 681.698 L1833.72 681.698 L1833.16 681.698 L1832.6 681.698 L1832.04 681.698 L1831.48 681.698 L1830.92 681.698 L1830.36 681.698 L1829.8 681.698 L1829.24 681.698 L1828.68 681.698 L1828.12 681.698 L1827.56 681.698 L1827 681.698 L1826.45 681.698 L1825.89 681.698 L1825.33 681.698 L1824.77 681.698 L1824.21 681.698 L1823.65 681.698 L1823.09 681.698 L1822.53 681.698 L1821.97 681.698 L1821.41 681.698 L1820.85 681.698 L1820.29 681.698 L1819.73 681.698 L1819.18 681.698 L1818.62 681.698 L1818.06 681.698 L1817.5 681.698 L1816.94 681.698 L1816.38 681.698 L1815.82 681.698 L1815.26 681.698 L1814.7 681.698 L1814.14 681.698 L1813.58 681.698 L1813.02 681.698 L1812.46 681.698 L1811.9 681.698 L1811.35 681.698 L1810.79 681.698 L1810.23 681.698 L1809.67 681.698 L1809.11 681.698 L1808.55 681.698 L1807.99 681.698 L1807.43 681.698 L1806.87 681.698 L1806.31 681.698 L1805.75 681.698 L1805.19 681.698 L1804.63 681.698 L1804.08 681.698 L1803.52 681.698 L1802.96 681.698 L1802.4 681.698 L1801.84 681.698 L1801.28 681.698 L1800.72 681.698 L1800.16 681.698 L1799.6 681.698 L1799.04 681.698 L1798.48 681.698 L1797.92 681.698 L1797.36 681.698 L1796.8 681.698 L1796.25 681.698 L1795.69 681.698 L1795.13 681.698 L1794.57 681.698 L1794.01 681.698 L1793.45 681.698 L1792.89 681.698 L1792.33 681.698 L1791.77 681.698 L1791.21 681.698 L1790.65 681.698 L1790.09 681.698 L1789.53 681.698 L1788.98 681.698 L1788.42 681.698 L1787.86 681.698 L1787.3 681.698 L1786.74 681.698 L1786.18 681.698 L1785.62 681.698 L1785.06 681.698 L1784.5 681.698 L1783.94 681.698 L1783.38 681.698 L1782.82 681.698 L1782.26 681.698 L1781.71 681.698 L1781.15 681.698 L1780.59 681.698 L1780.03 681.698 L1779.47 681.698 L1778.91 681.698 L1778.35 681.698 L1777.79 681.698 L1777.23 681.698 L1776.67 681.698 L1776.11 681.698 L1775.55 681.698 L1774.99 681.698 L1774.43 681.698 L1773.88 681.698 L1773.32 681.698 L1772.76 681.698 L1772.2 681.698 L1771.64 681.698 L1771.08 681.698 L1770.52 681.698 L1769.96 681.698 L1769.4 681.698 L1768.84 681.698 L1768.28 681.698 L1767.72 681.698 L1767.16 681.698 L1766.61 681.698 L1766.05 681.698 L1765.49 681.698 L1764.93 681.698 L1764.37 681.698 L1763.81 681.698 L1763.25 681.698 L1762.69 681.698 L1762.13 681.698 L1761.57 681.698 L1761.01 681.698 L1760.45 681.698 L1759.89 681.698 L1759.34 681.698 L1758.78 681.698 L1758.22 681.698 L1757.66 681.698 L1757.1 681.698 L1756.54 681.698 L1755.98 681.698 L1755.42 681.698 L1754.86 681.698 L1754.3 681.698 L1753.74 681.698 L1753.18 681.698 L1752.62 681.698 L1752.06 681.698 L1751.51 681.698 L1750.95 681.698 L1750.39 681.698 L1749.83 681.698 L1749.27 681.698 L1748.71 681.698 L1748.15 681.698 L1747.59 681.698 L1747.03 681.698 L1746.47 681.698 L1745.91 681.698 L1745.35 681.698 L1744.79 681.698 L1744.24 681.698 L1743.68 681.698 L1743.12 681.698 L1742.56 681.698 L1742 681.698 L1741.44 681.698 L1740.88 681.698 L1740.32 681.698 L1739.76 681.698 L1739.2 681.698 L1738.64 681.698 L1738.08 681.698 L1737.52 681.698 L1736.97 681.698 L1736.41 681.698 L1735.85 681.698 L1735.29 681.698 L1734.73 681.698 L1734.17 681.698 L1733.61 681.698 L1733.05 681.698 L1732.49 681.698 L1731.93 681.698 L1731.37 681.698 L1730.81 681.698 L1730.25 681.698 L1729.69 681.698 L1729.14 681.698 L1728.58 681.698 L1728.02 681.698 L1727.46 681.698 L1726.9 681.698 L1726.34 681.698 L1725.78 681.698 L1725.22 681.698 L1724.66 681.698 L1724.1 681.698 L1723.54 681.698 L1722.98 681.698 L1722.42 681.698 L1721.87 681.698 L1721.31 681.698 L1720.75 681.698 L1720.19 681.698 L1719.63 681.698 L1719.07 681.698 L1718.51 681.698 L1717.95 681.698 L1717.39 681.698 L1716.83 681.698 L1716.27 681.698 L1715.71 681.698 L1715.15 681.698 L1714.6 681.698 L1714.04 681.698 L1713.48 681.698 L1712.92 681.698 L1712.36 681.698 L1711.8 681.698 L1711.24 681.698 L1710.68 681.698 L1710.12 681.698 L1709.56 681.698 L1709 681.698 L1708.44 681.698 L1707.88 681.698 L1707.32 681.698 L1706.77 681.698 L1706.21 681.698 L1705.65 681.698 L1705.09 681.698 L1704.53 681.698 L1703.97 681.698 L1703.41 681.698 L1702.85 681.698 L1702.29 681.698 L1701.73 681.698 L1701.17 681.698 L1700.61 681.698 L1700.05 681.698 L1699.5 681.698 L1698.94 681.698 L1698.38 681.698 L1697.82 681.698 L1697.26 681.698 L1696.7 681.698 L1696.14 681.698 L1695.58 681.698 L1695.02 681.698 L1694.46 681.698 L1693.9 681.698 L1693.34 681.698 L1692.78 681.698 L1692.23 681.698 L1691.67 681.698 L1691.11 681.698 L1690.55 681.698 L1689.99 681.698 L1689.43 681.698 L1688.87 681.698 L1688.31 681.698 L1687.75 681.698 L1687.19 681.698 L1686.63 681.698 L1686.07 681.698 L1685.51 681.698 L1684.95 681.698 L1684.4 681.698 L1683.84 681.698 L1683.28 681.698 L1682.72 681.698 L1682.16 681.698 L1681.6 681.698 L1681.04 681.698 L1680.48 681.698 L1679.92 681.698 L1679.36 681.698 L1678.8 681.698 L1678.24 681.698 L1677.68 681.698 L1677.13 681.698 L1676.57 681.698 L1676.01 681.698 L1675.45 681.698 L1674.89 681.698 L1674.33 681.698 L1673.77 681.698 L1673.21 681.698 L1672.65 681.698 L1672.09 681.698 L1671.53 681.698 L1670.97 681.698 L1670.41 681.698 L1669.85 681.698 L1669.3 681.698 L1668.74 681.698 L1668.18 681.698 L1667.62 681.698 L1667.06 681.698 L1666.5 681.698 L1665.94 681.698 L1665.38 681.698 L1664.82 681.698 L1664.26 681.698 L1663.7 681.698 L1663.14 681.698 L1662.58 681.698 L1662.03 681.698 L1661.47 681.698 L1660.91 681.698 L1660.35 681.698 L1659.79 681.698 L1659.23 681.698 L1658.67 681.698 L1658.11 681.698 L1657.55 681.698 L1656.99 681.698 L1656.43 681.698 L1655.87 681.698 L1655.31 681.698 L1654.76 681.698 L1654.2 681.698 L1653.64 681.698 L1653.08 681.698 L1652.52 681.698 L1651.96 681.698 L1651.4 681.698 L1650.84 681.698 L1650.28 681.698 L1649.72 681.698 L1649.16 681.698 L1648.6 681.698 L1648.04 681.698 L1647.48 681.698 L1646.93 681.698 L1646.37 681.698 L1645.81 681.698 L1645.25 681.698 L1644.69 681.698 L1644.13 681.698 L1643.57 681.698 L1643.01 681.698 L1642.45 681.698 L1641.89 681.698 L1641.33 681.698 L1640.77 681.698 L1640.21 681.698 L1639.66 681.698 L1639.1 681.698 L1638.54 681.698 L1637.98 681.698 L1637.42 681.698 L1636.86 681.698 L1636.3 681.698 L1635.74 681.698 L1635.18 681.698 L1634.62 681.698 L1634.06 681.698 L1633.5 681.698 L1632.94 681.698 L1632.39 681.698 L1631.83 681.698 L1631.27 681.698 L1630.71 681.698 L1630.15 681.698 L1629.59 681.698 L1629.03 681.698 L1628.47 681.698 L1627.91 681.698 L1627.35 681.698 L1626.79 681.698 L1626.23 681.698 L1625.67 681.698 L1625.11 681.698 L1624.56 681.698 L1624 681.698 L1623.44 681.698 L1622.88 681.698 L1622.32 681.698 L1621.76 681.698 L1621.2 681.698 L1620.64 681.698 L1620.08 681.698 L1619.52 681.698 L1618.96 681.698 L1618.4 681.698 L1617.84 681.698 L1617.29 681.698 L1616.73 681.698 L1616.17 681.698 L1615.61 681.698 L1615.05 681.698 L1614.49 681.698 L1613.93 681.698 L1613.37 681.698 L1612.81 681.698 L1612.25 681.698 L1611.69 681.698 L1611.13 681.698 L1610.57 681.698 L1610.02 681.698 L1609.46 681.698 L1608.9 681.698 L1608.34 681.698 L1607.78 681.698 L1607.22 681.698 L1606.66 681.698 L1606.1 681.698 L1605.54 681.698 L1604.98 681.698 L1604.42 681.698 L1603.86 681.698 L1603.3 681.698 L1602.74 681.698 L1602.19 681.698 L1601.63 681.698 L1601.07 681.698 L1600.51 681.698 L1599.95 681.698 L1599.39 681.698 L1598.83 681.698 L1598.27 681.698 L1597.71 681.698 L1597.15 681.698 L1596.59 681.698 L1596.03 681.698 L1595.47 681.698 L1594.92 681.698 L1594.36 681.698 L1593.8 681.698 L1593.24 681.698 L1592.68 681.698 L1592.12 681.698 L1591.56 681.698 L1591 681.698 L1590.44 681.698 L1589.88 681.698 L1589.32 681.698 L1588.76 681.698 L1588.2 681.698 L1587.65 681.698 L1587.09 681.698 L1586.53 681.698 L1585.97 681.698 L1585.41 681.698 L1584.85 681.698 L1584.29 681.698 L1583.73 681.698 L1583.17 681.698 L1582.61 681.698 L1582.05 681.698 L1581.49 681.698 L1580.93 681.698 L1580.37 681.698 L1579.82 681.698 L1579.26 681.698 L1578.7 681.698 L1578.14 681.698 L1577.58 681.698 L1577.02 681.698 L1576.46 681.698 L1575.9 681.698 L1575.34 681.698 L1574.78 681.698 L1574.22 681.698 L1573.66 681.698 L1573.1 681.698 L1572.55 681.698 L1571.99 681.698 L1571.43 681.698 L1570.87 681.698 L1570.31 681.698 L1569.75 681.698 L1569.19 681.698 L1568.63 681.698 L1568.07 681.698 L1567.51 681.698 L1566.95 681.698 L1566.39 681.698 L1565.83 681.698 L1565.28 681.698 L1564.72 681.698 L1564.16 681.698 L1563.6 681.698 L1563.04 681.698 L1562.48 681.698 L1561.92 681.698 L1561.36 681.698 L1560.8 681.698 L1560.24 681.698 L1559.68 681.698 L1559.12 681.698 L1558.56 681.698 L1558 681.698 L1557.45 681.698 L1556.89 681.698 L1556.33 681.698 L1555.77 681.698 L1555.21 681.698 L1554.65 681.698 L1554.09 681.698 L1553.53 681.698 L1552.97 681.698 L1552.41 681.698 L1551.85 681.698 L1551.29 681.698 L1550.73 681.698 L1550.18 681.698 L1549.62 681.698 L1549.06 681.698 L1548.5 681.698 L1547.94 681.698 L1547.38 681.698 L1546.82 681.698 L1546.26 681.698 L1545.7 681.698 L1545.14 681.698 L1544.58 681.698 L1544.02 681.698 L1543.46 681.698 L1542.9 681.698 L1542.35 681.698 L1541.79 681.698 L1541.23 681.698 L1540.67 681.698 L1540.11 681.698 L1539.55 681.698 L1538.99 681.698 L1538.43 681.698 L1537.87 681.698 L1537.31 681.698 L1536.75 681.698 L1536.19 681.698 L1535.63 681.698 L1535.08 681.698 L1534.52 681.698 L1533.96 681.698 L1533.4 681.698 L1532.84 681.698 L1532.28 681.698 L1531.72 681.698 L1531.16 681.698 L1530.6 681.698 L1530.04 681.698 L1529.48 681.698 L1528.92 681.698 L1528.36 681.698 L1527.81 681.698 L1527.25 681.698 L1526.69 681.698 L1526.13 681.698 L1525.57 681.698 L1525.01 681.698 L1524.45 681.698 L1523.89 681.698 L1523.33 681.698 L1522.77 681.698 L1522.21 681.698 L1521.65 681.698 L1521.09 681.698 L1520.53 681.698 L1519.98 681.698 L1519.42 681.698 L1518.86 681.698 L1518.3 681.698 L1517.74 681.698 L1517.18 681.698 L1516.62 681.698 L1516.06 681.698 L1515.5 681.698 L1514.94 681.698 L1514.38 681.698 L1513.82 681.698 L1513.26 681.698 L1512.71 681.698 L1512.15 681.698 L1511.59 681.698 L1511.03 681.698 L1510.47 681.698 L1509.91 681.698 L1509.35 681.698 L1508.79 681.698 L1508.23 681.698 L1507.67 681.698 L1507.11 681.698 L1506.55 681.698 L1505.99 681.698 L1505.44 681.698 L1504.88 681.698 L1504.32 681.698 L1503.76 681.698 L1503.2 681.698 L1502.64 681.698 L1502.08 681.698 L1501.52 681.698 L1500.96 681.698 L1500.4 681.698 L1499.84 681.698 L1499.28 681.698 L1498.72 681.698 L1498.16 681.698 L1497.61 681.698 L1497.05 681.698 L1496.49 681.698 L1495.93 681.698 L1495.37 681.698 L1494.81 681.698 L1494.25 681.698 L1493.69 681.698 L1493.13 681.698 L1492.57 681.698 L1492.01 681.698 L1491.45 681.698 L1490.89 681.698 L1490.34 681.698 L1489.78 681.698 L1489.22 681.698 L1488.66 681.698 L1488.1 681.698 L1487.54 681.698 L1486.98 681.698 L1486.42 681.698 L1485.86 681.698 L1485.3 681.698 L1484.74 681.698 L1484.18 681.698 L1483.62 681.698 L1483.07 681.698 L1482.51 681.698 L1481.95 681.698 L1481.39 681.698 L1480.83 681.698 L1480.27 681.698 L1479.71 681.698 L1479.15 681.698 L1478.59 681.698 L1478.03 681.698 L1477.47 681.698 L1476.91 681.698 L1476.35 681.698 L1475.79 681.698 L1475.24 681.698 L1474.68 681.698 L1474.12 681.698 L1473.56 681.698 L1473 681.698 L1472.44 681.698 L1471.88 681.698 L1471.32 681.698 L1470.76 681.698 L1470.2 681.698 L1469.64 681.698 L1469.08 681.698 L1468.52 681.698 L1467.97 681.698 L1467.41 681.698 L1466.85 681.698 L1466.29 681.698 L1465.73 681.698 L1465.17 681.698 L1464.61 681.698 L1464.05 681.698 L1463.49 681.698 L1462.93 681.698 L1462.37 681.698 L1461.81 681.698 L1461.25 681.698 L1460.7 681.698 L1460.14 681.698 L1459.58 681.698 L1459.02 681.698 L1458.46 681.698 L1457.9 681.698 L1457.34 681.698 L1456.78 681.698 L1456.22 681.698 L1455.66 681.698 L1455.1 681.698 L1454.54 681.698 L1453.98 681.698 L1453.42 681.698 L1452.87 681.698 L1452.31 681.698 L1451.75 681.698 L1451.19 681.698 L1450.63 681.698 L1450.07 681.698 L1449.51 681.698 L1448.95 681.698 L1448.39 681.698 L1447.83 681.698 L1447.27 681.698 L1446.71 681.698 L1446.15 681.698 L1445.6 681.698 L1445.04 681.698 L1444.48 681.698 L1443.92 681.698 L1443.36 681.698 L1442.8 681.698 L1442.24 681.698 L1441.68 681.698 L1441.12 681.698 L1440.56 681.698 L1440 681.698 L1439.44 681.698 L1438.88 681.698 L1438.33 681.698 L1437.77 681.698 L1437.21 681.698 L1436.65 681.698 L1436.09 681.698 L1435.53 681.698 L1434.97 681.698 L1434.41 681.698 L1433.85 681.698 L1433.29 681.698 L1432.73 681.698 L1432.17 681.698 L1431.61 681.698 L1431.05 681.698 L1430.5 681.698 L1429.94 681.698 L1429.38 681.698 L1428.82 681.698 L1428.26 681.698 L1427.7 681.698 L1427.14 681.698 L1426.58 681.698 L1426.02 681.698 L1425.46 681.698 L1424.9 681.698 L1424.34 681.698 L1423.78 681.698 L1423.23 681.698 L1422.67 681.698 L1422.11 681.698 L1421.55 681.698 L1420.99 681.698 L1420.43 681.698 L1419.87 681.698 L1419.31 681.698 L1418.75 681.698 L1418.19 681.698 L1417.63 681.698 L1417.07 681.698 L1416.51 681.698 L1415.95 681.698 L1415.4 681.698 L1414.84 681.698 L1414.28 681.698 L1413.72 681.698 L1413.16 681.698 L1412.6 681.698 L1412.04 681.698 L1411.48 681.698 L1410.92 681.698 L1410.36 681.698 L1409.8 681.698 L1409.24 681.698 L1408.68 681.698 L1408.13 681.698 L1407.57 681.698 L1407.01 681.698 L1406.45 681.698 L1405.89 681.698 L1405.33 681.698 L1404.77 681.698 L1404.21 681.698 L1403.65 681.698 L1403.09 681.698 L1402.53 681.698 L1401.97 681.698 L1401.41 681.698 L1400.86 681.698 L1400.3 681.698 L1399.74 681.698 L1399.18 681.698 L1398.62 681.698 L1398.06 681.698 L1397.5 681.698 L1396.94 681.698 L1396.38 681.698 L1395.82 681.698 L1395.26 681.698 L1394.7 681.698 L1394.14 681.698 L1393.58 681.698 L1393.03 681.698 L1392.47 681.698 L1391.91 681.698 L1391.35 681.698 L1390.79 681.698 L1390.23 681.698 L1389.67 681.698 L1389.11 681.698 L1388.55 681.698 L1387.99 681.698 L1387.43 681.698 L1386.87 681.698 L1386.31 681.698 L1385.76 681.698 L1385.2 681.698 L1384.64 681.698 L1384.08 681.698 L1383.52 681.698 L1382.96 681.698 L1382.4 681.698 L1381.84 681.698 L1381.28 681.698 L1380.72 681.698 L1380.16 681.698 L1379.6 681.698 L1379.04 681.698 L1378.49 681.698 L1377.93 681.698 L1377.37 681.698 L1376.81 681.698 L1376.25 681.698 L1375.69 681.698 L1375.13 681.698 L1374.57 681.698 L1374.01 681.698 L1373.45 681.698 L1372.89 681.698 L1372.33 681.698 L1371.77 681.698 L1371.21 681.698 L1370.66 681.698 L1370.1 681.698 L1369.54 681.698 L1368.98 681.698 L1368.42 681.698 L1367.86 681.698 L1367.3 681.698 L1366.74 681.698 L1366.18 681.698 L1365.62 681.698 L1365.06 681.698 L1364.5 681.698 L1363.94 681.698 L1363.39 681.698 L1362.83 681.698 L1362.27 681.698 L1361.71 681.698 L1361.15 681.698 L1360.59 681.698 L1360.03 681.698 L1359.47 681.698 L1358.91 681.698 L1358.35 681.698 L1357.79 681.698 L1357.23 681.698 L1356.67 681.698 L1356.12 681.698 L1355.56 681.698 L1355 681.698 L1354.44 681.698 L1353.88 681.698 L1353.32 681.698 L1352.76 681.698 L1352.2 681.698 L1351.64 681.698 L1351.08 681.698 L1350.52 681.698 L1349.96 681.698 L1349.4 681.698 L1348.84 681.698 L1348.29 681.698 L1347.73 681.698 L1347.17 681.698 L1346.61 681.698 L1346.05 681.698 L1345.49 681.698 L1344.93 681.698 L1344.37 681.698 L1343.81 681.698 L1343.25 681.698 L1342.69 681.698 L1342.13 681.698 L1341.57 681.698 L1341.02 681.698 L1340.46 681.698 L1339.9 681.698 L1339.34 681.698 L1338.78 681.698 L1338.22 681.698 L1337.66 681.698 L1337.1 681.698 L1336.54 681.698 L1335.98 681.698 L1335.42 681.698 L1334.86 681.698 L1334.3 681.698 L1333.75 681.698 L1333.19 681.698 L1332.63 681.698 L1332.07 681.698 L1331.51 681.698 L1330.95 681.698 L1330.39 681.698 L1329.83 681.698 L1329.27 681.698 L1328.71 681.698 L1328.15 681.698 L1327.59 681.698 L1327.03 681.698 L1326.47 681.698 L1325.92 681.698 L1325.36 681.698 L1324.8 681.698 L1324.24 681.698 L1323.68 681.698 L1323.12 681.698 L1322.56 681.698 L1322 681.698 L1321.44 681.698 L1320.88 681.698 L1320.32 681.698 L1319.76 681.698 L1319.2 681.698 L1318.65 681.698 L1318.09 681.698 L1317.53 681.698 L1316.97 681.698 L1316.41 681.698 L1315.85 681.698 L1315.29 681.698 L1314.73 681.698 L1314.17 681.698 L1313.61 681.698 L1313.05 681.698 L1312.49 681.698 L1311.93 681.698 L1311.38 681.698 L1310.82 681.698 L1310.26 681.698 L1309.7 681.698 L1309.14 681.698 L1308.58 681.698 L1308.02 681.698 L1307.46 681.698 L1306.9 681.698 L1306.34 681.698 L1305.78 681.698 L1305.22 681.698 L1304.66 681.698 L1304.1 681.698 L1303.55 681.698 L1302.99 681.698 L1302.43 681.698 L1301.87 681.698 L1301.31 681.698 L1300.75 681.698 L1300.19 681.698 L1299.63 681.698 L1299.07 681.698 L1298.51 681.698 L1297.95 681.698 L1297.39 681.698 L1296.83 681.698 L1296.28 681.698 L1295.72 681.698 L1295.16 681.698 L1294.6 681.698 L1294.04 681.698 L1293.48 681.698 L1292.92 681.698 L1292.36 681.698 L1291.8 681.698 L1291.24 681.698 L1290.68 681.698 L1290.12 681.698 L1289.56 681.698 L1289 681.698 L1288.45 681.698 L1287.89 681.698 L1287.33 681.698 L1286.77 681.698 L1286.21 681.698 L1285.65 681.698 L1285.09 681.698 L1284.53 681.698 L1283.97 681.698 L1283.41 681.698 L1282.85 681.698 L1282.29 681.698 L1281.73 681.698 L1281.18 681.698 L1280.62 681.698 L1280.06 681.698 L1279.5 681.698 L1278.94 681.698 L1278.38 681.698 L1277.82 681.698 L1277.26 681.698 L1276.7 681.698 L1276.14 681.698 L1275.58 681.698 L1275.02 681.698 L1274.46 681.698 L1273.91 681.698 L1273.35 681.698 L1272.79 681.698 L1272.23 681.698 L1271.67 681.698 L1271.11 681.698 L1270.55 681.698 L1269.99 681.698 L1269.43 681.698 L1268.87 681.698 L1268.31 681.698 L1267.75 681.698 L1267.19 681.698 L1266.63 681.698 L1266.08 681.698 L1265.52 681.698 L1264.96 681.698 L1264.4 681.698 L1263.84 681.698 L1263.28 681.698 L1262.72 681.698 L1262.16 681.698 L1261.6 681.698 L1261.04 681.698 L1260.48 681.698 L1259.92 681.698 L1259.36 681.698 L1258.81 681.698 L1258.25 681.698 L1257.69 681.698 L1257.13 681.698 L1256.57 681.698 L1256.01 681.698 L1255.45 681.698 L1254.89 681.698 L1254.33 681.698 L1253.77 681.698 L1253.21 681.698 L1252.65 681.698 L1252.09 681.698 L1251.54 681.698 L1250.98 681.698 L1250.42 681.698 L1249.86 681.698 L1249.3 681.698 L1248.74 681.698 L1248.18 681.698 L1247.62 681.698 L1247.06 681.698 L1246.5 681.698 L1245.94 681.698 L1245.38 681.698 L1244.82 681.698 L1244.26 681.698 L1243.71 681.698 L1243.15 681.698 L1242.59 681.698 L1242.03 681.698 L1241.47 681.698 L1240.91 681.698 L1240.35 681.698 L1239.79 681.698 L1239.23 681.698 L1238.67 681.698 L1238.11 681.698 L1237.55 681.698 L1236.99 681.698 L1236.44 681.698 L1235.88 681.698 L1235.32 681.698 L1234.76 681.698 L1234.2 681.698 L1233.64 681.698 L1233.08 681.698 L1232.52 681.698 L1231.96 681.698 L1231.4 681.698 L1230.84 681.698 L1230.28 681.698 L1229.72 681.698 L1229.17 681.698 L1228.61 681.698 L1228.05 681.698 L1227.49 681.698 L1226.93 681.698 L1226.37 681.698 L1225.81 681.698 L1225.25 681.698 L1224.69 681.698 L1224.13 681.698 L1223.57 681.698 L1223.01 681.698 L1222.45 681.698 L1221.89 681.698 L1221.34 681.698 L1220.78 681.698 L1220.22 681.698 L1219.66 681.698 L1219.1 681.698 L1218.54 681.698 L1217.98 681.698 L1217.42 681.698 L1216.86 681.698 L1216.3 681.698 L1215.74 681.698 L1215.18 681.698 L1214.62 681.698 L1214.07 681.698 L1213.51 681.698 L1212.95 681.698 L1212.39 681.698 L1211.83 681.698 L1211.27 681.698 L1210.71 681.698 L1210.15 681.698 L1209.59 681.698 L1209.03 681.698 L1208.47 681.698 L1207.91 681.698 L1207.35 681.698 L1206.8 681.698 L1206.24 681.698 L1205.68 681.698 L1205.12 681.698 L1204.56 681.698 L1204 681.698 L1203.44 681.698 L1202.88 681.698 L1202.32 681.698 L1201.76 681.698 L1201.2 681.698 L1200.64 681.698 L1200.08 681.698 L1199.52 681.698 L1198.97 681.698 L1198.41 681.698 L1197.85 681.698 L1197.29 681.698 L1196.73 681.698 L1196.17 681.698 L1195.61 681.698 L1195.05 681.698 L1194.49 681.698 L1193.93 681.698 L1193.37 681.698 L1192.81 681.698 L1192.25 681.698 L1191.7 681.698 L1191.14 681.698 L1190.58 681.698 L1190.02 681.698 L1189.46 681.698 L1188.9 681.698 L1188.34 681.698 L1187.78 681.698 L1187.22 681.698 L1186.66 681.698 L1186.1 681.698 L1185.54 681.698 L1184.98 681.698 L1184.43 681.698 L1183.87 681.698 L1183.31 681.698 L1182.75 681.698 L1182.19 681.698 L1181.63 681.698 L1181.07 681.698 L1180.51 681.698 L1179.95 681.698 L1179.39 681.698 L1178.83 681.698 L1178.27 681.698 L1177.71 681.698 L1177.15 681.698 L1176.6 681.698 L1176.04 681.698 L1175.48 681.698 L1174.92 681.698 L1174.36 681.698 L1173.8 681.698 L1173.24 681.698 L1172.68 681.698 L1172.12 681.698 L1171.56 681.698 L1171 681.698 L1170.44 681.698 L1169.88 681.698 L1169.33 681.698 L1168.77 681.698 L1168.21 681.698 L1167.65 681.698 L1167.09 681.698 L1166.53 681.698 L1165.97 681.698 L1165.41 681.698 L1164.85 681.698 L1164.29 681.698 L1163.73 681.698 L1163.17 681.698 L1162.61 681.698 L1162.05 681.698 L1161.5 681.698 L1160.94 681.698 L1160.38 681.698 L1159.82 681.698 L1159.26 681.698 L1158.7 681.698 L1158.14 681.698 L1157.58 681.698 L1157.02 681.698 L1156.46 681.698 L1155.9 681.698 L1155.34 681.698 L1154.78 681.698 L1154.23 681.698 L1153.67 681.698 L1153.11 681.698 L1152.55 681.698 L1151.99 681.698 L1151.43 681.698 L1150.87 681.698 L1150.31 681.698 L1149.75 681.698 L1149.19 681.698 L1148.63 681.698 L1148.07 681.698 L1147.51 681.698 L1146.96 681.698 L1146.4 681.698 L1145.84 681.698 L1145.28 681.698 L1144.72 681.698 L1144.16 681.698 L1143.6 681.698 L1143.04 681.698 L1142.48 681.698 L1141.92 681.698 L1141.36 681.698 L1140.8 681.698 L1140.24 681.698 L1139.68 681.698 L1139.13 681.698 L1138.57 681.698 L1138.01 681.698 L1137.45 681.698 L1136.89 681.698 L1136.33 681.698 L1135.77 681.698 L1135.21 681.698 L1134.65 681.698 L1134.09 681.698 L1133.53 681.698 L1132.97 681.698 L1132.41 681.698 L1131.86 681.698 L1131.3 681.698 L1130.74 681.698 L1130.18 681.698 L1129.62 681.698 L1129.06 681.698 L1128.5 681.698 L1127.94 681.698 L1127.38 681.698 L1126.82 681.698 L1126.26 681.698 L1125.7 681.698 L1125.14 681.698 L1124.59 681.698 L1124.03 681.698 L1123.47 681.698 L1122.91 681.698 L1122.35 681.698 L1121.79 681.698 L1121.23 681.698 L1120.67 681.698 L1120.11 681.698 L1119.55 681.698 L1118.99 681.698 L1118.43 681.698 L1117.87 681.698 L1117.31 681.698 L1116.76 681.698 L1116.2 681.698 L1115.64 681.698 L1115.08 681.698 L1114.52 681.698 L1113.96 681.698 L1113.4 681.698 L1112.84 681.698 L1112.28 681.698 L1111.72 681.698 L1111.16 681.698 L1110.6 681.698 L1110.04 681.698 L1109.49 681.698 L1108.93 681.698 L1108.37 681.698 L1107.81 681.698 L1107.25 681.698 L1106.69 681.698 L1106.13 681.698 L1105.57 681.698 L1105.01 681.698 L1104.45 681.698 L1103.89 681.698 L1103.33 681.698 L1102.77 681.698 L1102.22 681.698 L1101.66 681.698 L1101.1 681.698 L1100.54 681.698 L1099.98 681.698 L1099.42 681.698 L1098.86 681.698 L1098.3 681.698 L1097.74 681.698 L1097.18 681.698 L1096.62 681.698 L1096.06 681.698 L1095.5 681.698 L1094.94 681.698 L1094.39 681.698 L1093.83 681.698 L1093.27 681.698 L1092.71 681.698 L1092.15 681.698 L1091.59 681.698 L1091.03 681.698 L1090.47 681.698 L1089.91 681.698 L1089.35 681.698 L1088.79 681.698 L1088.23 681.698 L1087.67 681.698 L1087.12 681.698 L1086.56 681.698 L1086 681.698 L1085.44 681.698 L1084.88 681.698 L1084.32 681.698 L1083.76 681.698 L1083.2 681.698 L1082.64 681.698 L1082.08 681.698 L1081.52 681.698 L1080.96 681.698 L1080.4 681.698 L1079.85 681.698 L1079.29 681.698 L1078.73 681.698 L1078.17 681.698 L1077.61 681.698 L1077.05 681.698 L1076.49 681.698 L1075.93 681.698 L1075.37 681.698 L1074.81 681.698 L1074.25 681.698 L1073.69 681.698 L1073.13 681.698 L1072.57 681.698 L1072.02 681.698 L1071.46 681.698 L1070.9 681.698 L1070.34 681.698 L1069.78 681.698 L1069.22 681.698 L1068.66 681.698 L1068.1 681.698 L1067.54 681.698 L1066.98 681.698 L1066.42 681.698 L1065.86 681.698 L1065.3 681.698 L1064.75 681.698 L1064.19 681.698 L1063.63 681.698 L1063.07 681.698 L1062.51 681.698 L1061.95 681.698 L1061.39 681.698 L1060.83 681.698 L1060.27 681.698 L1059.71 681.698 L1059.15 681.698 L1058.59 681.698 L1058.03 681.698 L1057.48 681.698 L1056.92 681.698 L1056.36 681.698 L1055.8 681.698 L1055.24 681.698 L1054.68 681.698 L1054.12 681.698 L1053.56 681.698 L1053 681.698 L1052.44 681.698 L1051.88 681.698 L1051.32 681.698 L1050.76 681.698 L1050.2 681.698 L1049.65 681.698 L1049.09 681.698 L1048.53 681.698 L1047.97 681.698 L1047.41 681.698 L1046.85 681.698 L1046.29 681.698 L1045.73 681.698 L1045.17 681.698 L1044.61 681.698 L1044.05 681.698 L1043.49 681.698 L1042.93 681.698 L1042.38 681.698 L1041.82 681.698 L1041.26 681.698 L1040.7 681.698 L1040.14 681.698 L1039.58 681.698 L1039.02 681.698 L1038.46 681.698 L1037.9 681.698 L1037.34 681.698 L1036.78 681.698 L1036.22 681.698 L1035.66 681.698 L1035.1 681.698 L1034.55 681.698 L1033.99 681.698 L1033.43 681.698 L1032.87 681.698 L1032.31 681.698 L1031.75 681.698 L1031.19 681.698 L1030.63 681.698 L1030.07 681.698 L1029.51 681.698 L1028.95 681.698 L1028.39 681.698 L1027.83 681.698 L1027.28 681.698 L1026.72 681.698 L1026.16 681.698 L1025.6 681.698 L1025.04 681.698 L1024.48 681.698 L1023.92 681.698 L1023.36 681.698 L1022.8 681.698 L1022.24 681.698 L1021.68 681.698 L1021.12 681.698 L1020.56 681.698 L1020.01 681.698 L1019.45 681.698 L1018.89 681.698 L1018.33 681.698 L1017.77 681.698 L1017.21 681.698 L1016.65 681.698 L1016.09 681.698 L1015.53 681.698 L1014.97 681.698 L1014.41 681.698 L1013.85 681.698 L1013.29 681.698 L1012.73 681.698 L1012.18 681.698 L1011.62 681.698 L1011.06 681.698 L1010.5 681.698 L1009.94 681.698 L1009.38 681.698 L1008.82 681.698 L1008.26 681.698 L1007.7 681.698 L1007.14 681.698 L1006.58 681.698 L1006.02 681.698 L1005.46 681.698 L1004.91 681.698 L1004.35 681.698 L1003.79 681.698 L1003.23 681.698 L1002.67 681.698 L1002.11 681.698 L1001.55 681.698 L1000.99 681.698 L1000.43 681.698 L999.872 681.698 L999.313 681.698 L998.754 681.698 L998.194 681.698 L997.635 681.698 L997.076 681.698 L996.517 681.698 L995.957 681.698 L995.398 681.698 L994.839 681.698 L994.28 681.698 L993.72 681.698 L993.161 681.698 L992.602 681.698 L992.043 681.698 L991.483 681.698 L990.924 681.698 L990.365 681.698 L989.806 681.698 L989.246 681.698 L988.687 681.698 L988.128 681.698 L987.569 681.698 L987.009 681.698 L986.45 681.698 L985.891 681.698 L985.332 681.698 L984.772 681.698 L984.213 681.698 L983.654 681.698 L983.095 681.698 L982.535 681.698 L981.976 681.698 L981.417 681.698 L980.858 681.698 L980.298 681.698 L979.739 681.698 L979.18 681.698 L978.621 681.698 L978.061 681.698 L977.502 681.698 L976.943 681.698 L976.384 681.698 L975.824 681.698 L975.265 681.698 L974.706 681.698 L974.147 681.698 L973.587 681.698 L973.028 681.698 L972.469 681.698 L971.91 681.698 L971.35 681.698 L970.791 681.698 L970.232 681.698 L969.673 681.698 L969.113 681.698 L968.554 681.698 L967.995 681.698 L967.436 681.698 L966.876 681.698 L966.317 681.698 L965.758 681.698 L965.199 681.698 L964.639 681.698 L964.08 681.698 L963.521 681.698 L962.962 681.698 L962.402 681.698 L961.843 681.698 L961.284 681.698 L960.725 681.698 L960.165 681.698 L959.606 681.698 L959.047 681.698 L958.488 681.698 L957.928 681.698 L957.369 681.698 L956.81 681.698 L956.251 681.698 L955.691 681.698 L955.132 681.698 L954.573 681.698 L954.014 681.698 L953.454 681.698 L952.895 681.698 L952.336 681.698 L951.777 681.698 L951.217 681.698 L950.658 681.698 L950.099 681.698 L949.54 681.698 L948.98 681.698 L948.421 681.698 L947.862 681.698 L947.303 681.698 L946.743 681.698 L946.184 681.698 L945.625 681.698 L945.066 681.698 L944.506 681.698 L943.947 681.698 L943.388 681.698 L942.829 681.698 L942.269 681.698 L941.71 681.698 L941.151 681.698 L940.592 681.698 L940.032 681.698 L939.473 681.698 L938.914 681.698 L938.355 681.698 L937.795 681.698 L937.236 681.698 L936.677 681.698 L936.118 681.698 L935.558 681.698 L934.999 681.698 L934.44 681.698 L933.881 681.698 L933.321 681.698 L932.762 681.698 L932.203 681.698 L931.644 681.698 L931.084 681.698 L930.525 681.698 L929.966 681.698 L929.406 681.698 L928.847 681.698 L928.288 681.698 L927.729 681.698 L927.169 681.698 L926.61 681.698 L926.051 681.698 L925.492 681.698 L924.932 681.698 L924.373 681.698 L923.814 681.698 L923.255 681.698 L922.695 681.698 L922.136 681.698 L921.577 681.698 L921.018 681.698 L920.458 681.698 L919.899 681.698 L919.34 681.698 L918.781 681.698 L918.221 681.698 L917.662 681.698 L917.103 681.698 L916.544 681.698 L915.984 681.698 L915.425 681.698 L914.866 681.698 L914.307 681.698 L913.747 681.698 L913.188 681.698 L912.629 681.698 L912.07 681.698 L911.51 681.698 L910.951 681.698 L910.392 681.698 L909.833 681.698 L909.273 681.698 L908.714 681.698 L908.155 681.698 L907.596 681.698 L907.036 681.698 L906.477 681.698 L905.918 681.698 L905.359 681.698 L904.799 681.698 L904.24 681.698 L903.681 681.698 L903.122 681.698 L902.562 681.698 L902.003 681.698 L901.444 681.698 L900.885 681.698 L900.325 681.698 L899.766 681.698 L899.207 681.698 L898.648 681.698 L898.088 681.698 L897.529 681.698 L896.97 681.698 L896.411 681.698 L895.851 681.698 L895.292 681.698 L894.733 681.698 L894.174 681.698 L893.614 681.698 L893.055 681.698 L892.496 681.698 L891.937 681.698 L891.377 681.698 L890.818 681.698 L890.259 681.698 L889.7 681.698 L889.14 681.698 L888.581 681.698 L888.022 681.698 L887.463 681.698 L886.903 681.698 L886.344 681.698 L885.785 681.698 L885.226 681.698 L884.666 681.698 L884.107 681.698 L883.548 681.698 L882.989 681.698 L882.429 681.698 L881.87 681.698 L881.311 681.698 L880.752 681.698 L880.192 681.698 L879.633 681.698 L879.074 681.698 L878.515 681.698 L877.955 681.698 L877.396 681.698 L876.837 681.698 L876.278 681.698 L875.718 681.698 L875.159 681.698 L874.6 681.698 L874.041 681.698 L873.481 681.698 L872.922 681.698 L872.363 681.698 L871.804 681.698 L871.244 681.698 L870.685 681.698 L870.126 681.698 L869.567 681.698 L869.007 681.698 L868.448 681.698 L867.889 681.698 L867.33 681.698 L866.77 681.698 L866.211 681.698 L865.652 681.698 L865.093 681.698 L864.533 681.698 L863.974 681.698 L863.415 681.698 L862.856 681.698 L862.296 681.698 L861.737 681.698 L861.178 681.698 L860.619 681.698 L860.059 681.698 L859.5 681.698 L858.941 681.698 L858.382 681.698 L857.822 681.698 L857.263 681.698 L856.704 681.698 L856.145 681.698 L855.585 681.698 L855.026 681.698 L854.467 681.698 L853.908 681.698 L853.348 681.698 L852.789 681.698 L852.23 681.698 L851.671 681.698 L851.111 681.698 L850.552 681.698 L849.993 681.698 L849.434 681.698 L848.874 681.698 L848.315 681.698 L847.756 681.698 L847.197 681.698 L846.637 681.698 L846.078 681.698 L845.519 681.698 L844.96 681.698 L844.4 681.698 L843.841 681.698 L843.282 681.698 L842.723 681.698 L842.163 681.698 L841.604 681.698 L841.045 681.698 L840.486 681.698 L839.926 681.698 L839.367 681.698 L838.808 681.698 L838.249 681.698 L837.689 681.698 L837.13 681.698 L836.571 681.698 L836.012 681.698 L835.452 681.698 L834.893 681.698 L834.334 681.698 L833.775 681.698 L833.215 681.698 L832.656 681.698 L832.097 681.698 L831.538 681.698 L830.978 681.698 L830.419 681.698 L829.86 681.698 L829.301 681.698 L828.741 681.698 L828.182 681.698 L827.623 681.698 L827.064 681.698 L826.504 681.698 L825.945 681.698 L825.386 681.698 L824.827 681.698 L824.267 681.698 L823.708 681.698 L823.149 681.698 L822.59 681.698 L822.03 681.698 L821.471 681.698 L820.912 681.698 L820.353 681.698 L819.793 681.698 L819.234 681.698 L818.675 681.698 L818.116 681.698 L817.556 681.698 L816.997 681.698 L816.438 681.698 L815.879 681.698 L815.319 681.698 L814.76 681.698 L814.201 681.698 L813.642 681.698 L813.082 681.698 L812.523 681.698 L811.964 681.698 L811.405 681.698 L810.845 681.698 L810.286 681.698 L809.727 681.698 L809.168 681.698 L808.608 681.698 L808.049 681.698 L807.49 681.698 L806.931 681.698 L806.371 681.698 L805.812 681.698 L805.253 681.698 L804.693 681.698 L804.134 681.698 L803.575 681.698 L803.016 681.698 L802.456 681.698 L801.897 681.698 L801.338 681.698 L800.779 681.698 L800.219 681.698 L799.66 681.698 L799.101 681.698 L798.542 681.698 L797.982 681.698 L797.423 681.698 L796.864 681.698 L796.305 681.698 L795.745 681.698 L795.186 681.698 L794.627 681.698 L794.068 681.698 L793.508 681.698 L792.949 681.698 L792.39 681.698 L791.831 681.698 L791.271 681.698 L790.712 681.698 L790.153 681.698 L789.594 681.698 L789.034 681.698 L788.475 681.698 L787.916 681.698 L787.357 681.698 L786.797 681.698 L786.238 681.698 L785.679 681.698 L785.12 681.698 L784.56 681.698 L784.001 681.698 L783.442 681.698 L782.883 681.698 L782.323 681.698 L781.764 681.698 L781.205 681.698 L780.646 681.698 L780.086 681.698 L779.527 681.698 L778.968 681.698 L778.409 681.698 L777.849 681.698 L777.29 681.698 L776.731 681.698 L776.172 681.698 L775.612 681.698 L775.053 681.698 L774.494 681.698 L773.935 681.698 L773.375 681.698 L772.816 681.698 L772.257 681.698 L771.698 681.698 L771.138 681.698 L770.579 681.698 L770.02 681.698 L769.461 681.698 L768.901 681.698 L768.342 681.698 L767.783 681.698 L767.224 681.698 L766.664 681.698 L766.105 681.698 L765.546 681.698 L764.987 681.698 L764.427 681.698 L763.868 681.698 L763.309 681.698 L762.75 681.698 L762.19 681.698 L761.631 681.698 L761.072 681.698 L760.513 681.698 L759.953 681.698 L759.394 681.698 L758.835 681.698 L758.276 681.698 L757.716 681.698 L757.157 681.698 L756.598 681.698 L756.039 681.698 L755.479 681.698 L754.92 681.698 L754.361 681.698 L753.802 681.698 L753.242 681.698 L752.683 681.698 L752.124 681.698 L751.565 681.698 L751.005 681.698 L750.446 681.698 L749.887 681.698 L749.328 681.698 L748.768 681.698 L748.209 681.698 L747.65 681.698 L747.091 681.698 L746.531 681.698 L745.972 681.698 L745.413 681.698 L744.854 681.698 L744.294 681.698 L743.735 681.698 L743.176 681.698 L742.617 681.698 L742.057 681.698 L741.498 681.698 L740.939 681.698 L740.38 681.698 L739.82 681.698 L739.261 681.698 L738.702 681.698 L738.143 681.698 L737.583 681.698 L737.024 681.698 L736.465 681.698 L735.906 681.698 L735.346 681.698 L734.787 681.698 L734.228 681.698 L733.669 681.698 L733.109 681.698 L732.55 681.698 L731.991 681.698 L731.432 681.698 L730.872 681.698 L730.313 681.698 L729.754 681.698 L729.195 681.698 L728.635 681.698 L728.076 681.698 L727.517 681.698 L726.958 681.698 L726.398 681.698 L725.839 681.698 L725.28 681.698 L724.721 681.698 L724.161 681.698 L723.602 681.698 L723.043 681.698 L722.484 681.698 L721.924 681.698 L721.365 681.698 L720.806 681.698 L720.247 681.698  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.428 720.806,686.428 721.365,686.428 721.924,686.428 722.484,686.428 723.043,686.428 723.602,686.428 724.161,686.428 724.721,686.428 725.28,686.428 725.839,686.428 726.398,686.428 726.958,686.428 727.517,686.428 728.076,686.428 728.635,686.428 729.195,686.428 729.754,686.428 730.313,686.428 730.872,686.428 731.432,686.428 731.991,686.428 732.55,686.428 733.109,686.428 733.669,686.428 734.228,686.428 734.787,686.428 735.346,686.428 735.906,686.428 736.465,686.428 737.024,686.428 737.583,686.428 738.143,686.428 738.702,686.428 739.261,686.428 739.82,686.428 740.38,686.428 740.939,686.428 741.498,686.428 742.057,686.428 742.617,686.428 743.176,686.428 743.735,686.428 744.294,686.428 744.854,686.428 745.413,686.428 745.972,686.428 746.531,686.428 747.091,686.428 747.65,686.428 748.209,686.428 748.768,686.428 749.328,686.428 749.887,686.428 750.446,686.428 751.005,686.428 751.565,686.428 752.124,686.428 752.683,686.428 753.242,686.428 753.802,686.428 754.361,686.428 754.92,686.428 755.479,686.428 756.039,686.428 756.598,686.428 757.157,686.428 757.716,686.428 758.276,686.428 758.835,686.428 759.394,686.428 759.953,686.428 760.513,686.428 761.072,686.428 761.631,686.428 762.19,686.428 762.75,686.428 763.309,686.428 763.868,686.428 764.427,686.428 764.987,686.428 765.546,686.428 766.105,686.428 766.664,686.428 767.224,686.428 767.783,686.428 768.342,686.428 768.901,686.428 769.461,686.428 770.02,686.428 770.579,686.428 771.138,686.428 771.698,686.428 772.257,686.428 772.816,686.428 773.375,686.428 773.935,686.428 774.494,686.428 775.053,686.428 775.612,686.428 776.172,686.428 776.731,686.428 777.29,686.428 777.849,686.428 778.409,686.428 778.968,686.428 779.527,686.428 780.086,686.428 780.646,686.428 781.205,686.428 781.764,686.428 782.323,686.428 782.883,686.428 783.442,686.428 784.001,686.428 784.56,686.428 785.12,686.428 785.679,686.428 786.238,686.428 786.797,686.428 787.357,686.428 787.916,686.428 788.475,686.428 789.034,686.428 789.594,686.428 790.153,686.428 790.712,686.428 791.271,686.428 791.831,686.428 792.39,686.428 792.949,686.428 793.508,686.428 794.068,686.428 794.627,686.428 795.186,686.428 795.745,686.428 796.305,686.428 796.864,686.428 797.423,686.428 797.982,686.428 798.542,686.428 799.101,686.428 799.66,686.428 800.219,686.428 800.779,686.428 801.338,686.428 801.897,686.428 802.456,686.428 803.016,686.428 803.575,686.428 804.134,686.428 804.693,686.428 805.253,686.428 805.812,686.428 806.371,686.428 806.931,686.428 807.49,686.428 808.049,686.428 808.608,686.428 809.168,686.428 809.727,686.428 810.286,686.428 810.845,686.428 811.405,686.428 811.964,686.428 812.523,686.428 813.082,686.428 813.642,686.428 814.201,686.428 814.76,686.428 815.319,686.428 815.879,686.428 816.438,686.428 816.997,686.428 817.556,686.428 818.116,686.428 818.675,686.428 819.234,686.428 819.793,686.428 820.353,686.428 820.912,686.428 821.471,686.428 822.03,686.428 822.59,686.428 823.149,686.428 823.708,686.428 824.267,686.428 824.827,686.428 825.386,686.428 825.945,686.428 826.504,686.428 827.064,686.428 827.623,686.428 828.182,686.428 828.741,686.428 829.301,686.428 829.86,686.428 830.419,686.428 830.978,686.428 831.538,686.428 832.097,686.428 832.656,686.428 833.215,686.428 833.775,686.428 834.334,686.428 834.893,686.428 835.452,686.428 836.012,686.428 836.571,686.428 837.13,686.428 837.689,686.428 838.249,686.428 838.808,686.428 839.367,686.428 839.926,686.428 840.486,686.428 841.045,686.428 841.604,686.428 842.163,686.428 842.723,686.428 843.282,686.428 843.841,686.428 844.4,686.428 844.96,686.428 845.519,686.428 846.078,686.428 846.637,686.428 847.197,686.428 847.756,686.428 848.315,686.428 848.874,686.428 849.434,686.428 849.993,686.428 850.552,686.428 851.111,686.428 851.671,686.428 852.23,686.428 852.789,686.428 853.348,686.428 853.908,686.428 854.467,686.428 855.026,686.428 855.585,686.428 856.145,686.428 856.704,686.428 857.263,686.428 857.822,686.428 858.382,686.428 858.941,686.428 859.5,686.428 860.059,686.428 860.619,686.428 861.178,686.428 861.737,686.428 862.296,686.428 862.856,686.428 863.415,686.428 863.974,686.428 864.533,686.428 865.093,686.428 865.652,686.428 866.211,686.428 866.77,686.428 867.33,686.428 867.889,686.428 868.448,686.428 869.007,686.428 869.567,686.428 870.126,686.428 870.685,686.428 871.244,686.428 871.804,686.428 872.363,686.428 872.922,686.428 873.481,686.428 874.041,686.428 874.6,686.428 875.159,686.428 875.718,686.428 876.278,686.428 876.837,686.428 877.396,686.428 877.955,686.428 878.515,686.428 879.074,686.428 879.633,686.428 880.192,686.428 880.752,686.428 881.311,686.428 881.87,686.428 882.429,686.428 882.989,686.428 883.548,686.428 884.107,686.428 884.666,686.428 885.226,686.428 885.785,686.428 886.344,686.428 886.903,686.428 887.463,686.428 888.022,686.428 888.581,686.428 889.14,686.428 889.7,686.428 890.259,686.428 890.818,686.428 891.377,686.428 891.937,686.428 892.496,686.428 893.055,686.428 893.614,686.428 894.174,686.428 894.733,686.428 895.292,686.428 895.851,686.428 896.411,686.428 896.97,686.428 897.529,686.428 898.088,686.428 898.648,686.428 899.207,686.428 899.766,686.428 900.325,686.428 900.885,686.428 901.444,686.428 902.003,686.428 902.562,686.428 903.122,686.428 903.681,686.428 904.24,686.428 904.799,686.428 905.359,686.428 905.918,686.428 906.477,686.428 907.036,686.428 907.596,686.428 908.155,686.428 908.714,686.428 909.273,686.428 909.833,686.428 910.392,686.428 910.951,686.428 911.51,686.428 912.07,686.428 912.629,686.428 913.188,686.428 913.747,686.428 914.307,686.428 914.866,686.428 915.425,686.428 915.984,686.428 916.544,686.428 917.103,686.428 917.662,686.428 918.221,686.428 918.781,686.428 919.34,686.428 919.899,686.428 920.458,686.428 921.018,686.428 921.577,686.428 922.136,686.428 922.695,686.428 923.255,686.428 923.814,686.428 924.373,686.428 924.932,686.428 925.492,686.428 926.051,686.428 926.61,686.428 927.169,686.428 927.729,686.428 928.288,686.428 928.847,686.428 929.406,686.428 929.966,686.428 930.525,686.428 931.084,686.428 931.644,686.428 932.203,686.428 932.762,686.428 933.321,686.428 933.881,686.428 934.44,686.428 934.999,686.428 935.558,686.428 936.118,686.428 936.677,686.428 937.236,686.428 937.795,686.428 938.355,686.428 938.914,686.428 939.473,686.428 940.032,686.428 940.592,686.428 941.151,686.428 941.71,686.428 942.269,686.428 942.829,686.428 943.388,686.428 943.947,686.428 944.506,686.428 945.066,686.428 945.625,686.428 946.184,686.428 946.743,686.428 947.303,686.428 947.862,686.428 948.421,686.428 948.98,686.428 949.54,686.428 950.099,686.428 950.658,686.428 951.217,686.428 951.777,686.428 952.336,686.428 952.895,686.428 953.454,686.428 954.014,686.428 954.573,686.428 955.132,686.428 955.691,686.428 956.251,686.428 956.81,686.428 957.369,686.428 957.928,686.428 958.488,686.428 959.047,686.428 959.606,686.428 960.165,686.428 960.725,686.428 961.284,686.428 961.843,686.428 962.402,686.428 962.962,686.428 963.521,686.428 964.08,686.428 964.639,686.428 965.199,686.428 965.758,686.428 966.317,686.428 966.876,686.428 967.436,686.428 967.995,686.428 968.554,686.428 969.113,686.428 969.673,686.428 970.232,686.428 970.791,686.428 971.35,686.428 971.91,686.428 972.469,686.428 973.028,686.428 973.587,686.428 974.147,686.428 974.706,686.428 975.265,686.428 975.824,686.428 976.384,686.428 976.943,686.428 977.502,686.428 978.061,686.428 978.621,686.428 979.18,686.428 979.739,686.428 980.298,686.428 980.858,686.428 981.417,686.428 981.976,686.428 982.535,686.428 983.095,686.428 983.654,686.428 984.213,686.428 984.772,686.428 985.332,686.428 985.891,686.428 986.45,686.428 987.009,686.428 987.569,686.428 988.128,686.428 988.687,686.428 989.246,686.428 989.806,686.428 990.365,686.428 990.924,686.428 991.483,686.428 992.043,686.428 992.602,686.428 993.161,686.428 993.72,686.428 994.28,686.428 994.839,686.428 995.398,686.428 995.957,686.428 996.517,686.428 997.076,686.428 997.635,686.428 998.194,686.428 998.754,686.428 999.313,686.428 999.872,686.428 1000.43,686.428 1000.99,686.428 1001.55,686.428 1002.11,686.428 1002.67,686.428 1003.23,686.428 1003.79,686.428 1004.35,686.428 1004.91,686.428 1005.46,686.428 1006.02,686.428 1006.58,686.428 1007.14,686.428 1007.7,686.428 1008.26,686.428 1008.82,686.428 1009.38,686.428 1009.94,686.428 1010.5,686.428 1011.06,686.428 1011.62,686.428 1012.18,686.428 1012.73,686.428 1013.29,686.428 1013.85,686.428 1014.41,686.428 1014.97,686.428 1015.53,686.428 1016.09,686.428 1016.65,686.428 1017.21,686.428 1017.77,686.428 1018.33,686.428 1018.89,686.428 1019.45,686.428 1020.01,686.428 1020.56,686.428 1021.12,686.428 1021.68,686.428 1022.24,686.428 1022.8,686.428 1023.36,686.428 1023.92,686.428 1024.48,686.428 1025.04,686.428 1025.6,686.428 1026.16,686.428 1026.72,686.428 1027.28,686.428 1027.83,686.428 1028.39,686.428 1028.95,686.428 1029.51,686.428 1030.07,686.428 1030.63,686.428 1031.19,686.428 1031.75,686.428 1032.31,686.428 1032.87,686.428 1033.43,686.428 1033.99,686.428 1034.55,686.428 1035.1,686.428 1035.66,686.428 1036.22,686.428 1036.78,686.428 1037.34,686.428 1037.9,686.428 1038.46,686.428 1039.02,686.428 1039.58,686.428 1040.14,686.428 1040.7,686.428 1041.26,686.428 1041.82,686.428 1042.38,686.428 1042.93,686.428 1043.49,686.428 1044.05,686.428 1044.61,686.428 1045.17,686.428 1045.73,686.428 1046.29,686.428 1046.85,686.428 1047.41,686.428 1047.97,686.428 1048.53,686.428 1049.09,686.428 1049.65,686.428 1050.2,686.428 1050.76,686.428 1051.32,686.428 1051.88,686.428 1052.44,686.428 1053,686.428 1053.56,686.428 1054.12,686.428 1054.68,686.428 1055.24,686.428 1055.8,686.428 1056.36,686.428 1056.92,686.428 1057.48,686.428 1058.03,686.428 1058.59,686.428 1059.15,686.428 1059.71,686.428 1060.27,686.428 1060.83,686.428 1061.39,686.428 1061.95,686.428 1062.51,686.428 1063.07,686.428 1063.63,686.428 1064.19,686.428 1064.75,686.428 1065.3,686.428 1065.86,686.428 1066.42,686.428 1066.98,686.428 1067.54,686.428 1068.1,686.428 1068.66,686.428 1069.22,686.428 1069.78,686.428 1070.34,686.428 1070.9,686.428 1071.46,686.428 1072.02,686.428 1072.57,686.428 1073.13,686.428 1073.69,686.428 1074.25,686.428 1074.81,686.428 1075.37,686.428 1075.93,686.428 1076.49,686.428 1077.05,686.428 1077.61,686.428 1078.17,686.428 1078.73,686.428 1079.29,686.428 1079.85,686.428 1080.4,686.428 1080.96,686.428 1081.52,686.428 1082.08,686.428 1082.64,686.428 1083.2,686.428 1083.76,686.428 1084.32,686.428 1084.88,686.428 1085.44,686.428 1086,686.428 1086.56,686.428 1087.12,686.428 1087.67,686.428 1088.23,686.428 1088.79,686.428 1089.35,686.428 1089.91,686.428 1090.47,686.428 1091.03,686.428 1091.59,686.428 1092.15,686.428 1092.71,686.428 1093.27,686.428 1093.83,686.428 1094.39,686.428 1094.94,686.428 1095.5,686.428 1096.06,686.428 1096.62,686.428 1097.18,686.428 1097.74,686.428 1098.3,686.428 1098.86,686.428 1099.42,686.428 1099.98,686.428 1100.54,686.428 1101.1,686.428 1101.66,686.428 1102.22,686.428 1102.77,686.428 1103.33,686.428 1103.89,686.428 1104.45,686.428 1105.01,686.428 1105.57,686.428 1106.13,686.428 1106.69,686.428 1107.25,686.428 1107.81,686.428 1108.37,686.428 1108.93,686.428 1109.49,686.428 1110.04,686.428 1110.6,686.428 1111.16,686.428 1111.72,686.428 1112.28,686.428 1112.84,686.428 1113.4,686.428 1113.96,686.428 1114.52,686.428 1115.08,686.428 1115.64,686.428 1116.2,686.428 1116.76,686.428 1117.31,686.428 1117.87,686.428 1118.43,686.428 1118.99,686.428 1119.55,686.428 1120.11,686.428 1120.67,686.428 1121.23,686.428 1121.79,686.428 1122.35,686.428 1122.91,686.428 1123.47,686.428 1124.03,686.428 1124.59,686.428 1125.14,686.428 1125.7,686.428 1126.26,686.428 1126.82,686.428 1127.38,686.428 1127.94,686.428 1128.5,686.428 1129.06,686.428 1129.62,686.428 1130.18,686.428 1130.74,686.428 1131.3,686.428 1131.86,686.428 1132.41,686.428 1132.97,686.428 1133.53,686.428 1134.09,686.428 1134.65,686.428 1135.21,686.428 1135.77,686.428 1136.33,686.428 1136.89,686.428 1137.45,686.428 1138.01,686.428 1138.57,686.428 1139.13,686.428 1139.68,686.428 1140.24,686.428 1140.8,686.428 1141.36,686.428 1141.92,686.428 1142.48,686.428 1143.04,686.428 1143.6,686.428 1144.16,686.428 1144.72,686.428 1145.28,686.428 1145.84,686.428 1146.4,686.428 1146.96,686.428 1147.51,686.428 1148.07,686.428 1148.63,686.428 1149.19,686.428 1149.75,686.428 1150.31,686.428 1150.87,686.428 1151.43,686.428 1151.99,686.428 1152.55,686.428 1153.11,686.428 1153.67,686.428 1154.23,686.428 1154.78,686.428 1155.34,686.428 1155.9,686.428 1156.46,686.428 1157.02,686.428 1157.58,686.428 1158.14,686.428 1158.7,686.428 1159.26,686.428 1159.82,686.428 1160.38,686.428 1160.94,686.428 1161.5,686.428 1162.05,686.428 1162.61,686.428 1163.17,686.428 1163.73,686.428 1164.29,686.428 1164.85,686.428 1165.41,686.428 1165.97,686.428 1166.53,686.428 1167.09,686.428 1167.65,686.428 1168.21,686.428 1168.77,686.428 1169.33,686.428 1169.88,686.428 1170.44,686.428 1171,686.428 1171.56,686.428 1172.12,686.428 1172.68,686.428 1173.24,686.428 1173.8,686.428 1174.36,686.428 1174.92,686.428 1175.48,686.428 1176.04,686.428 1176.6,686.428 1177.15,686.428 1177.71,686.428 1178.27,686.428 1178.83,686.428 1179.39,686.428 1179.95,686.428 1180.51,686.428 1181.07,686.428 1181.63,686.428 1182.19,686.428 1182.75,686.428 1183.31,686.428 1183.87,686.428 1184.43,686.428 1184.98,686.428 1185.54,686.428 1186.1,686.428 1186.66,686.428 1187.22,686.428 1187.78,686.428 1188.34,686.428 1188.9,686.428 1189.46,686.428 1190.02,686.428 1190.58,686.428 1191.14,686.428 1191.7,686.428 1192.25,686.428 1192.81,686.428 1193.37,686.428 1193.93,686.428 1194.49,686.428 1195.05,686.428 1195.61,686.428 1196.17,686.428 1196.73,686.428 1197.29,686.428 1197.85,686.428 1198.41,686.428 1198.97,686.428 1199.52,686.428 1200.08,686.428 1200.64,686.428 1201.2,686.428 1201.76,686.428 1202.32,686.428 1202.88,686.428 1203.44,686.428 1204,686.428 1204.56,686.428 1205.12,686.428 1205.68,686.428 1206.24,686.428 1206.8,686.428 1207.35,686.428 1207.91,686.428 1208.47,686.428 1209.03,686.428 1209.59,686.428 1210.15,686.428 1210.71,686.428 1211.27,686.428 1211.83,686.428 1212.39,686.428 1212.95,686.428 1213.51,686.428 1214.07,686.428 1214.62,686.428 1215.18,686.428 1215.74,686.428 1216.3,686.428 1216.86,686.428 1217.42,686.428 1217.98,686.428 1218.54,686.428 1219.1,686.428 1219.66,686.428 1220.22,686.428 1220.78,686.428 1221.34,686.428 1221.89,686.428 1222.45,686.428 1223.01,686.428 1223.57,686.428 1224.13,686.428 1224.69,686.428 1225.25,686.428 1225.81,686.428 1226.37,686.428 1226.93,686.428 1227.49,686.428 1228.05,686.428 1228.61,686.428 1229.17,686.428 1229.72,686.428 1230.28,686.428 1230.84,686.428 1231.4,686.428 1231.96,686.428 1232.52,686.428 1233.08,686.428 1233.64,686.428 1234.2,686.428 1234.76,686.428 1235.32,686.428 1235.88,686.428 1236.44,686.428 1236.99,686.428 1237.55,686.428 1238.11,686.428 1238.67,686.428 1239.23,686.428 1239.79,686.428 1240.35,686.428 1240.91,686.428 1241.47,686.428 1242.03,686.428 1242.59,686.428 1243.15,686.428 1243.71,686.428 1244.26,686.428 1244.82,686.428 1245.38,686.428 1245.94,686.428 1246.5,686.428 1247.06,686.428 1247.62,686.428 1248.18,686.428 1248.74,686.428 1249.3,686.428 1249.86,686.428 1250.42,686.428 1250.98,686.428 1251.54,686.428 1252.09,686.428 1252.65,686.428 1253.21,686.428 1253.77,686.428 1254.33,686.428 1254.89,686.428 1255.45,686.428 1256.01,686.428 1256.57,686.428 1257.13,686.428 1257.69,686.428 1258.25,686.428 1258.81,686.428 1259.36,686.428 1259.92,686.428 1260.48,686.428 1261.04,686.428 1261.6,686.428 1262.16,686.428 1262.72,686.428 1263.28,686.428 1263.84,686.428 1264.4,686.428 1264.96,686.428 1265.52,686.428 1266.08,686.428 1266.63,686.428 1267.19,686.428 1267.75,686.428 1268.31,686.428 1268.87,686.428 1269.43,686.428 1269.99,686.428 1270.55,686.428 1271.11,686.428 1271.67,686.428 1272.23,686.428 1272.79,686.428 1273.35,686.428 1273.91,686.428 1274.46,686.428 1275.02,686.428 1275.58,686.428 1276.14,686.428 1276.7,686.428 1277.26,686.428 1277.82,686.428 1278.38,686.428 1278.94,686.428 1279.5,686.428 1280.06,686.428 1280.62,686.428 1281.18,686.428 1281.73,686.428 1282.29,686.428 1282.85,686.428 1283.41,686.428 1283.97,686.428 1284.53,686.428 1285.09,686.428 1285.65,686.428 1286.21,686.428 1286.77,686.428 1287.33,686.428 1287.89,686.428 1288.45,686.428 1289,686.428 1289.56,686.428 1290.12,686.428 1290.68,686.428 1291.24,686.428 1291.8,686.428 1292.36,686.428 1292.92,686.428 1293.48,686.428 1294.04,686.428 1294.6,686.428 1295.16,686.428 1295.72,686.428 1296.28,686.428 1296.83,686.428 1297.39,686.428 1297.95,686.428 1298.51,686.428 1299.07,686.428 1299.63,686.428 1300.19,686.428 1300.75,686.428 1301.31,686.428 1301.87,686.428 1302.43,686.428 1302.99,686.428 1303.55,686.428 1304.1,686.428 1304.66,686.428 1305.22,686.428 1305.78,686.428 1306.34,686.428 1306.9,686.428 1307.46,686.428 1308.02,686.428 1308.58,686.428 1309.14,686.428 1309.7,686.428 1310.26,686.428 1310.82,686.428 1311.38,686.428 1311.93,686.428 1312.49,686.428 1313.05,686.428 1313.61,686.428 1314.17,686.428 1314.73,686.428 1315.29,686.428 1315.85,686.428 1316.41,686.428 1316.97,686.428 1317.53,686.428 1318.09,686.428 1318.65,686.428 1319.2,686.428 1319.76,686.428 1320.32,686.428 1320.88,686.428 1321.44,686.428 1322,686.428 1322.56,686.428 1323.12,686.428 1323.68,686.428 1324.24,686.428 1324.8,686.428 1325.36,686.428 1325.92,686.428 1326.47,686.428 1327.03,686.428 1327.59,686.428 1328.15,686.428 1328.71,686.428 1329.27,686.428 1329.83,686.428 1330.39,686.428 1330.95,686.428 1331.51,686.428 1332.07,686.428 1332.63,686.428 1333.19,686.428 1333.75,686.428 1334.3,686.428 1334.86,686.428 1335.42,686.428 1335.98,686.428 1336.54,686.428 1337.1,686.428 1337.66,686.428 1338.22,686.428 1338.78,686.428 1339.34,686.428 1339.9,686.428 1340.46,686.428 1341.02,686.428 1341.57,686.428 1342.13,686.428 1342.69,686.428 1343.25,686.428 1343.81,686.428 1344.37,686.428 1344.93,686.428 1345.49,686.428 1346.05,686.428 1346.61,686.428 1347.17,686.428 1347.73,686.428 1348.29,686.428 1348.84,686.428 1349.4,686.428 1349.96,686.428 1350.52,686.428 1351.08,686.428 1351.64,686.428 1352.2,686.428 1352.76,686.428 1353.32,686.428 1353.88,686.428 1354.44,686.428 1355,686.428 1355.56,686.428 1356.12,686.428 1356.67,686.428 1357.23,686.428 1357.79,686.428 1358.35,686.428 1358.91,686.428 1359.47,686.428 1360.03,686.428 1360.59,686.428 1361.15,686.428 1361.71,686.428 1362.27,686.428 1362.83,686.428 1363.39,686.428 1363.94,686.428 1364.5,686.428 1365.06,686.428 1365.62,686.428 1366.18,686.428 1366.74,686.428 1367.3,686.428 1367.86,686.428 1368.42,686.428 1368.98,686.428 1369.54,686.428 1370.1,686.428 1370.66,686.428 1371.21,686.428 1371.77,686.428 1372.33,686.428 1372.89,686.428 1373.45,686.428 1374.01,686.428 1374.57,686.428 1375.13,686.428 1375.69,686.428 1376.25,686.428 1376.81,686.428 1377.37,686.428 1377.93,686.428 1378.49,686.428 1379.04,686.428 1379.6,686.428 1380.16,686.428 1380.72,686.428 1381.28,686.428 1381.84,686.428 1382.4,686.428 1382.96,686.428 1383.52,686.428 1384.08,686.428 1384.64,686.428 1385.2,686.428 1385.76,686.428 1386.31,686.428 1386.87,686.428 1387.43,686.428 1387.99,686.428 1388.55,686.428 1389.11,686.428 1389.67,686.428 1390.23,686.428 1390.79,686.428 1391.35,686.428 1391.91,686.428 1392.47,686.428 1393.03,686.428 1393.58,686.428 1394.14,686.428 1394.7,686.428 1395.26,686.428 1395.82,686.428 1396.38,686.428 1396.94,686.428 1397.5,686.428 1398.06,686.428 1398.62,686.428 1399.18,686.428 1399.74,686.428 1400.3,686.428 1400.86,686.428 1401.41,686.428 1401.97,686.428 1402.53,686.428 1403.09,686.428 1403.65,686.428 1404.21,686.428 1404.77,686.428 1405.33,686.428 1405.89,686.428 1406.45,686.428 1407.01,686.428 1407.57,686.428 1408.13,686.428 1408.68,686.428 1409.24,686.428 1409.8,686.428 1410.36,686.428 1410.92,686.428 1411.48,686.428 1412.04,686.428 1412.6,686.428 1413.16,686.428 1413.72,686.428 1414.28,686.428 1414.84,686.428 1415.4,686.428 1415.95,686.428 1416.51,686.428 1417.07,686.428 1417.63,686.428 1418.19,686.428 1418.75,686.428 1419.31,686.428 1419.87,686.428 1420.43,686.428 1420.99,686.428 1421.55,686.428 1422.11,686.428 1422.67,686.428 1423.23,686.428 1423.78,686.428 1424.34,686.428 1424.9,686.428 1425.46,686.428 1426.02,686.428 1426.58,686.428 1427.14,686.428 1427.7,686.428 1428.26,686.428 1428.82,686.428 1429.38,686.428 1429.94,686.428 1430.5,686.428 1431.05,686.428 1431.61,686.428 1432.17,686.428 1432.73,686.428 1433.29,686.428 1433.85,686.428 1434.41,686.428 1434.97,686.428 1435.53,686.428 1436.09,686.428 1436.65,686.428 1437.21,686.428 1437.77,686.428 1438.33,686.428 1438.88,686.428 1439.44,686.428 1440,686.428 1440.56,686.428 1441.12,686.428 1441.68,686.428 1442.24,686.428 1442.8,686.428 1443.36,686.428 1443.92,686.428 1444.48,686.428 1445.04,686.428 1445.6,686.428 1446.15,686.428 1446.71,686.428 1447.27,686.428 1447.83,686.428 1448.39,686.428 1448.95,686.428 1449.51,686.428 1450.07,686.428 1450.63,686.428 1451.19,686.428 1451.75,686.428 1452.31,686.428 1452.87,686.428 1453.42,686.428 1453.98,686.428 1454.54,686.428 1455.1,686.428 1455.66,686.428 1456.22,686.428 1456.78,686.428 1457.34,686.428 1457.9,686.428 1458.46,686.428 1459.02,686.428 1459.58,686.428 1460.14,686.428 1460.7,686.428 1461.25,686.428 1461.81,686.428 1462.37,686.428 1462.93,686.428 1463.49,686.428 1464.05,686.428 1464.61,686.428 1465.17,686.428 1465.73,686.428 1466.29,686.428 1466.85,686.428 1467.41,686.428 1467.97,686.428 1468.52,686.428 1469.08,686.428 1469.64,686.428 1470.2,686.428 1470.76,686.428 1471.32,686.428 1471.88,686.428 1472.44,686.428 1473,686.428 1473.56,686.428 1474.12,686.428 1474.68,686.428 1475.24,686.428 1475.79,686.428 1476.35,686.428 1476.91,686.428 1477.47,686.428 1478.03,686.428 1478.59,686.428 1479.15,686.428 1479.71,686.428 1480.27,686.428 1480.83,686.428 1481.39,686.428 1481.95,686.428 1482.51,686.428 1483.07,686.428 1483.62,686.428 1484.18,686.428 1484.74,686.428 1485.3,686.428 1485.86,686.428 1486.42,686.428 1486.98,686.428 1487.54,686.428 1488.1,686.428 1488.66,686.428 1489.22,686.428 1489.78,686.428 1490.34,686.428 1490.89,686.428 1491.45,686.428 1492.01,686.428 1492.57,686.428 1493.13,686.428 1493.69,686.428 1494.25,686.428 1494.81,686.428 1495.37,686.428 1495.93,686.428 1496.49,686.428 1497.05,686.428 1497.61,686.428 1498.16,686.428 1498.72,686.428 1499.28,686.428 1499.84,686.428 1500.4,686.428 1500.96,686.428 1501.52,686.428 1502.08,686.428 1502.64,686.428 1503.2,686.428 1503.76,686.428 1504.32,686.428 1504.88,686.428 1505.44,686.428 1505.99,686.428 1506.55,686.428 1507.11,686.428 1507.67,686.428 1508.23,686.428 1508.79,686.428 1509.35,686.428 1509.91,686.428 1510.47,686.428 1511.03,686.428 1511.59,686.428 1512.15,686.428 1512.71,686.428 1513.26,686.428 1513.82,686.428 1514.38,686.428 1514.94,686.428 1515.5,686.428 1516.06,686.428 1516.62,686.428 1517.18,686.428 1517.74,686.428 1518.3,686.428 1518.86,686.428 1519.42,686.428 1519.98,686.428 1520.53,686.428 1521.09,686.428 1521.65,686.428 1522.21,686.428 1522.77,686.428 1523.33,686.428 1523.89,686.428 1524.45,686.428 1525.01,686.428 1525.57,686.428 1526.13,686.428 1526.69,686.428 1527.25,686.428 1527.81,686.428 1528.36,686.428 1528.92,686.428 1529.48,686.428 1530.04,686.428 1530.6,686.428 1531.16,686.428 1531.72,686.428 1532.28,686.428 1532.84,686.428 1533.4,686.428 1533.96,686.428 1534.52,686.428 1535.08,686.428 1535.63,686.428 1536.19,686.428 1536.75,686.428 1537.31,686.428 1537.87,686.428 1538.43,686.428 1538.99,686.428 1539.55,686.428 1540.11,686.428 1540.67,686.428 1541.23,686.428 1541.79,686.428 1542.35,686.428 1542.9,686.428 1543.46,686.428 1544.02,686.428 1544.58,686.428 1545.14,686.428 1545.7,686.428 1546.26,686.428 1546.82,686.428 1547.38,686.428 1547.94,686.428 1548.5,686.428 1549.06,686.428 1549.62,686.428 1550.18,686.428 1550.73,686.428 1551.29,686.428 1551.85,686.428 1552.41,686.428 1552.97,686.428 1553.53,686.428 1554.09,686.428 1554.65,686.428 1555.21,686.428 1555.77,686.428 1556.33,686.428 1556.89,686.428 1557.45,686.428 1558,686.428 1558.56,686.428 1559.12,686.428 1559.68,686.428 1560.24,686.428 1560.8,686.428 1561.36,686.428 1561.92,686.428 1562.48,686.428 1563.04,686.428 1563.6,686.428 1564.16,686.428 1564.72,686.428 1565.28,686.428 1565.83,686.428 1566.39,686.428 1566.95,686.428 1567.51,686.428 1568.07,686.428 1568.63,686.428 1569.19,686.428 1569.75,686.428 1570.31,686.428 1570.87,686.428 1571.43,686.428 1571.99,686.428 1572.55,686.428 1573.1,686.428 1573.66,686.428 1574.22,686.428 1574.78,686.428 1575.34,686.428 1575.9,686.428 1576.46,686.428 1577.02,686.428 1577.58,686.428 1578.14,686.428 1578.7,686.428 1579.26,686.428 1579.82,686.428 1580.37,686.428 1580.93,686.428 1581.49,686.428 1582.05,686.428 1582.61,686.428 1583.17,686.428 1583.73,686.428 1584.29,686.428 1584.85,686.428 1585.41,686.428 1585.97,686.428 1586.53,686.428 1587.09,686.428 1587.65,686.428 1588.2,686.428 1588.76,686.428 1589.32,686.428 1589.88,686.428 1590.44,686.428 1591,686.428 1591.56,686.428 1592.12,686.428 1592.68,686.428 1593.24,686.428 1593.8,686.428 1594.36,686.428 1594.92,686.428 1595.47,686.428 1596.03,686.428 1596.59,686.428 1597.15,686.428 1597.71,686.428 1598.27,686.428 1598.83,686.428 1599.39,686.428 1599.95,686.428 1600.51,686.428 1601.07,686.428 1601.63,686.428 1602.19,686.428 1602.74,686.428 1603.3,686.428 1603.86,686.428 1604.42,686.428 1604.98,686.428 1605.54,686.428 1606.1,686.428 1606.66,686.428 1607.22,686.428 1607.78,686.428 1608.34,686.428 1608.9,686.428 1609.46,686.428 1610.02,686.428 1610.57,686.428 1611.13,686.428 1611.69,686.428 1612.25,686.428 1612.81,686.428 1613.37,686.428 1613.93,686.428 1614.49,686.428 1615.05,686.428 1615.61,686.428 1616.17,686.428 1616.73,686.428 1617.29,686.428 1617.84,686.428 1618.4,686.428 1618.96,686.428 1619.52,686.428 1620.08,686.428 1620.64,686.428 1621.2,686.428 1621.76,686.428 1622.32,686.428 1622.88,686.428 1623.44,686.428 1624,686.428 1624.56,686.428 1625.11,686.428 1625.67,686.428 1626.23,686.428 1626.79,686.428 1627.35,686.428 1627.91,686.428 1628.47,686.428 1629.03,686.428 1629.59,686.428 1630.15,686.428 1630.71,686.428 1631.27,686.428 1631.83,686.428 1632.39,686.428 1632.94,686.428 1633.5,686.428 1634.06,686.428 1634.62,686.428 1635.18,686.428 1635.74,686.428 1636.3,686.428 1636.86,686.428 1637.42,686.428 1637.98,686.428 1638.54,686.428 1639.1,686.428 1639.66,686.428 1640.21,686.428 1640.77,686.428 1641.33,686.428 1641.89,686.428 1642.45,686.428 1643.01,686.428 1643.57,686.428 1644.13,686.428 1644.69,686.428 1645.25,686.428 1645.81,686.428 1646.37,686.428 1646.93,686.428 1647.48,686.428 1648.04,686.428 1648.6,686.428 1649.16,686.428 1649.72,686.428 1650.28,686.428 1650.84,686.428 1651.4,686.428 1651.96,686.428 1652.52,686.428 1653.08,686.428 1653.64,686.428 1654.2,686.428 1654.76,686.428 1655.31,686.428 1655.87,686.428 1656.43,686.428 1656.99,686.428 1657.55,686.428 1658.11,686.428 1658.67,686.428 1659.23,686.428 1659.79,686.428 1660.35,686.428 1660.91,686.428 1661.47,686.428 1662.03,686.428 1662.58,686.428 1663.14,686.428 1663.7,686.428 1664.26,686.428 1664.82,686.428 1665.38,686.428 1665.94,686.428 1666.5,686.428 1667.06,686.428 1667.62,686.428 1668.18,686.428 1668.74,686.428 1669.3,686.428 1669.85,686.428 1670.41,686.428 1670.97,686.428 1671.53,686.428 1672.09,686.428 1672.65,686.428 1673.21,686.428 1673.77,686.428 1674.33,686.428 1674.89,686.428 1675.45,686.428 1676.01,686.428 1676.57,686.428 1677.13,686.428 1677.68,686.428 1678.24,686.428 1678.8,686.428 1679.36,686.428 1679.92,686.428 1680.48,686.428 1681.04,686.428 1681.6,686.428 1682.16,686.428 1682.72,686.428 1683.28,686.428 1683.84,686.428 1684.4,686.428 1684.95,686.428 1685.51,686.428 1686.07,686.428 1686.63,686.428 1687.19,686.428 1687.75,686.428 1688.31,686.428 1688.87,686.428 1689.43,686.428 1689.99,686.428 1690.55,686.428 1691.11,686.428 1691.67,686.428 1692.23,686.428 1692.78,686.428 1693.34,686.428 1693.9,686.428 1694.46,686.428 1695.02,686.428 1695.58,686.428 1696.14,686.428 1696.7,686.428 1697.26,686.428 1697.82,686.428 1698.38,686.428 1698.94,686.428 1699.5,686.428 1700.05,686.428 1700.61,686.428 1701.17,686.428 1701.73,686.428 1702.29,686.428 1702.85,686.428 1703.41,686.428 1703.97,686.428 1704.53,686.428 1705.09,686.428 1705.65,686.428 1706.21,686.428 1706.77,686.428 1707.32,686.428 1707.88,686.428 1708.44,686.428 1709,686.428 1709.56,686.428 1710.12,686.428 1710.68,686.428 1711.24,686.428 1711.8,686.428 1712.36,686.428 1712.92,686.428 1713.48,686.428 1714.04,686.428 1714.6,686.428 1715.15,686.428 1715.71,686.428 1716.27,686.428 1716.83,686.428 1717.39,686.428 1717.95,686.428 1718.51,686.428 1719.07,686.428 1719.63,686.428 1720.19,686.428 1720.75,686.428 1721.31,686.428 1721.87,686.428 1722.42,686.428 1722.98,686.428 1723.54,686.428 1724.1,686.428 1724.66,686.428 1725.22,686.428 1725.78,686.428 1726.34,686.428 1726.9,686.428 1727.46,686.428 1728.02,686.428 1728.58,686.428 1729.14,686.428 1729.69,686.428 1730.25,686.428 1730.81,686.428 1731.37,686.428 1731.93,686.428 1732.49,686.428 1733.05,686.428 1733.61,686.428 1734.17,686.428 1734.73,686.428 1735.29,686.428 1735.85,686.428 1736.41,686.428 1736.97,686.428 1737.52,686.428 1738.08,686.428 1738.64,686.428 1739.2,686.428 1739.76,686.428 1740.32,686.428 1740.88,686.428 1741.44,686.428 1742,686.428 1742.56,686.428 1743.12,686.428 1743.68,686.428 1744.24,686.428 1744.79,686.428 1745.35,686.428 1745.91,686.428 1746.47,686.428 1747.03,686.428 1747.59,686.428 1748.15,686.428 1748.71,686.428 1749.27,686.428 1749.83,686.428 1750.39,686.428 1750.95,686.428 1751.51,686.428 1752.06,686.428 1752.62,686.428 1753.18,686.428 1753.74,686.428 1754.3,686.428 1754.86,686.428 1755.42,686.428 1755.98,686.428 1756.54,686.428 1757.1,686.428 1757.66,686.428 1758.22,686.428 1758.78,686.428 1759.34,686.428 1759.89,686.428 1760.45,686.428 1761.01,686.428 1761.57,686.428 1762.13,686.428 1762.69,686.428 1763.25,686.428 1763.81,686.428 1764.37,686.428 1764.93,686.428 1765.49,686.428 1766.05,686.428 1766.61,686.428 1767.16,686.428 1767.72,686.428 1768.28,686.428 1768.84,686.428 1769.4,686.428 1769.96,686.428 1770.52,686.428 1771.08,686.428 1771.64,686.428 1772.2,686.428 1772.76,686.428 1773.32,686.428 1773.88,686.428 1774.43,686.428 1774.99,686.428 1775.55,686.428 1776.11,686.428 1776.67,686.428 1777.23,686.428 1777.79,686.428 1778.35,686.428 1778.91,686.428 1779.47,686.428 1780.03,686.428 1780.59,686.428 1781.15,686.428 1781.71,686.428 1782.26,686.428 1782.82,686.428 1783.38,686.428 1783.94,686.428 1784.5,686.428 1785.06,686.428 1785.62,686.428 1786.18,686.428 1786.74,686.428 1787.3,686.428 1787.86,686.428 1788.42,686.428 1788.98,686.428 1789.53,686.428 1790.09,686.428 1790.65,686.428 1791.21,686.428 1791.77,686.428 1792.33,686.428 1792.89,686.428 1793.45,686.428 1794.01,686.428 1794.57,686.428 1795.13,686.428 1795.69,686.428 1796.25,686.428 1796.8,686.428 1797.36,686.428 1797.92,686.428 1798.48,686.428 1799.04,686.428 1799.6,686.428 1800.16,686.428 1800.72,686.428 1801.28,686.428 1801.84,686.428 1802.4,686.428 1802.96,686.428 1803.52,686.428 1804.08,686.428 1804.63,686.428 1805.19,686.428 1805.75,686.428 1806.31,686.428 1806.87,686.428 1807.43,686.428 1807.99,686.428 1808.55,686.428 1809.11,686.428 1809.67,686.428 1810.23,686.428 1810.79,686.428 1811.35,686.428 1811.9,686.428 1812.46,686.428 1813.02,686.428 1813.58,686.428 1814.14,686.428 1814.7,686.428 1815.26,686.428 1815.82,686.428 1816.38,686.428 1816.94,686.428 1817.5,686.428 1818.06,686.428 1818.62,686.428 1819.18,686.428 1819.73,686.428 1820.29,686.428 1820.85,686.428 1821.41,686.428 1821.97,686.428 1822.53,686.428 1823.09,686.428 1823.65,686.428 1824.21,686.428 1824.77,686.428 1825.33,686.428 1825.89,686.428 1826.45,686.428 1827,686.428 1827.56,686.428 1828.12,686.428 1828.68,686.428 1829.24,686.428 1829.8,686.428 1830.36,686.428 1830.92,686.428 1831.48,686.428 1832.04,686.428 1832.6,686.428 1833.16,686.428 1833.72,686.428 1834.27,686.428 1834.83,686.428 1835.39,686.428 1835.95,686.428 1836.51,686.428 1837.07,686.428 1837.63,686.428 1838.19,686.428 \"/>\n<path clip-path=\"url(#clip643)\" d=\"M720.247 684.865 L720.806 684.865 L721.365 684.865 L721.924 684.865 L722.484 684.865 L723.043 684.865 L723.602 684.865 L724.161 684.865 L724.721 684.865 L725.28 684.865 L725.839 684.865 L726.398 684.865 L726.958 684.865 L727.517 684.865 L728.076 684.865 L728.635 684.865 L729.195 684.865 L729.754 684.865 L730.313 684.865 L730.872 684.865 L731.432 684.865 L731.991 684.865 L732.55 684.865 L733.109 684.865 L733.669 684.865 L734.228 684.865 L734.787 684.865 L735.346 684.865 L735.906 684.865 L736.465 684.865 L737.024 684.865 L737.583 684.865 L738.143 684.865 L738.702 684.865 L739.261 684.865 L739.82 684.865 L740.38 684.865 L740.939 684.865 L741.498 684.865 L742.057 684.865 L742.617 684.865 L743.176 684.865 L743.735 684.865 L744.294 684.865 L744.854 684.865 L745.413 684.865 L745.972 684.865 L746.531 684.865 L747.091 684.865 L747.65 684.865 L748.209 684.865 L748.768 684.865 L749.328 684.865 L749.887 684.865 L750.446 684.865 L751.005 684.865 L751.565 684.865 L752.124 684.865 L752.683 684.865 L753.242 684.865 L753.802 684.865 L754.361 684.865 L754.92 684.865 L755.479 684.865 L756.039 684.865 L756.598 684.865 L757.157 684.865 L757.716 684.865 L758.276 684.865 L758.835 684.865 L759.394 684.865 L759.953 684.865 L760.513 684.865 L761.072 684.865 L761.631 684.865 L762.19 684.865 L762.75 684.865 L763.309 684.865 L763.868 684.865 L764.427 684.865 L764.987 684.865 L765.546 684.865 L766.105 684.865 L766.664 684.865 L767.224 684.865 L767.783 684.865 L768.342 684.865 L768.901 684.865 L769.461 684.865 L770.02 684.865 L770.579 684.865 L771.138 684.865 L771.698 684.865 L772.257 684.865 L772.816 684.865 L773.375 684.865 L773.935 684.865 L774.494 684.865 L775.053 684.865 L775.612 684.865 L776.172 684.865 L776.731 684.865 L777.29 684.865 L777.849 684.865 L778.409 684.865 L778.968 684.865 L779.527 684.865 L780.086 684.865 L780.646 684.865 L781.205 684.865 L781.764 684.865 L782.323 684.865 L782.883 684.865 L783.442 684.865 L784.001 684.865 L784.56 684.865 L785.12 684.865 L785.679 684.865 L786.238 684.865 L786.797 684.865 L787.357 684.865 L787.916 684.865 L788.475 684.865 L789.034 684.865 L789.594 684.865 L790.153 684.865 L790.712 684.865 L791.271 684.865 L791.831 684.865 L792.39 684.865 L792.949 684.865 L793.508 684.865 L794.068 684.865 L794.627 684.865 L795.186 684.865 L795.745 684.865 L796.305 684.865 L796.864 684.865 L797.423 684.865 L797.982 684.865 L798.542 684.865 L799.101 684.865 L799.66 684.865 L800.219 684.865 L800.779 684.865 L801.338 684.865 L801.897 684.865 L802.456 684.865 L803.016 684.865 L803.575 684.865 L804.134 684.865 L804.693 684.865 L805.253 684.865 L805.812 684.865 L806.371 684.865 L806.931 684.865 L807.49 684.865 L808.049 684.865 L808.608 684.865 L809.168 684.865 L809.727 684.865 L810.286 684.865 L810.845 684.865 L811.405 684.865 L811.964 684.865 L812.523 684.865 L813.082 684.865 L813.642 684.865 L814.201 684.865 L814.76 684.865 L815.319 684.865 L815.879 684.865 L816.438 684.865 L816.997 684.865 L817.556 684.865 L818.116 684.865 L818.675 684.865 L819.234 684.865 L819.793 684.865 L820.353 684.865 L820.912 684.865 L821.471 684.865 L822.03 684.865 L822.59 684.865 L823.149 684.865 L823.708 684.865 L824.267 684.865 L824.827 684.865 L825.386 684.865 L825.945 684.865 L826.504 684.865 L827.064 684.865 L827.623 684.865 L828.182 684.865 L828.741 684.865 L829.301 684.865 L829.86 684.865 L830.419 684.865 L830.978 684.865 L831.538 684.865 L832.097 684.865 L832.656 684.865 L833.215 684.865 L833.775 684.865 L834.334 684.865 L834.893 684.865 L835.452 684.865 L836.012 684.865 L836.571 684.865 L837.13 684.865 L837.689 684.865 L838.249 684.865 L838.808 684.865 L839.367 684.865 L839.926 684.865 L840.486 684.865 L841.045 684.865 L841.604 684.865 L842.163 684.865 L842.723 684.865 L843.282 684.865 L843.841 684.865 L844.4 684.865 L844.96 684.865 L845.519 684.865 L846.078 684.865 L846.637 684.865 L847.197 684.865 L847.756 684.865 L848.315 684.865 L848.874 684.865 L849.434 684.865 L849.993 684.865 L850.552 684.865 L851.111 684.865 L851.671 684.865 L852.23 684.865 L852.789 684.865 L853.348 684.865 L853.908 684.865 L854.467 684.865 L855.026 684.865 L855.585 684.865 L856.145 684.865 L856.704 684.865 L857.263 684.865 L857.822 684.865 L858.382 684.865 L858.941 684.865 L859.5 684.865 L860.059 684.865 L860.619 684.865 L861.178 684.865 L861.737 684.865 L862.296 684.865 L862.856 684.865 L863.415 684.865 L863.974 684.865 L864.533 684.865 L865.093 684.865 L865.652 684.865 L866.211 684.865 L866.77 684.865 L867.33 684.865 L867.889 684.865 L868.448 684.865 L869.007 684.865 L869.567 684.865 L870.126 684.865 L870.685 684.865 L871.244 684.865 L871.804 684.865 L872.363 684.865 L872.922 684.865 L873.481 684.865 L874.041 684.865 L874.6 684.865 L875.159 684.865 L875.718 684.865 L876.278 684.865 L876.837 684.865 L877.396 684.865 L877.955 684.865 L878.515 684.865 L879.074 684.865 L879.633 684.865 L880.192 684.865 L880.752 684.865 L881.311 684.865 L881.87 684.865 L882.429 684.865 L882.989 684.865 L883.548 684.865 L884.107 684.865 L884.666 684.865 L885.226 684.865 L885.785 684.865 L886.344 684.865 L886.903 684.865 L887.463 684.865 L888.022 684.865 L888.581 684.865 L889.14 684.865 L889.7 684.865 L890.259 684.865 L890.818 684.865 L891.377 684.865 L891.937 684.865 L892.496 684.865 L893.055 684.865 L893.614 684.865 L894.174 684.865 L894.733 684.865 L895.292 684.865 L895.851 684.865 L896.411 684.865 L896.97 684.865 L897.529 684.865 L898.088 684.865 L898.648 684.865 L899.207 684.865 L899.766 684.865 L900.325 684.865 L900.885 684.865 L901.444 684.865 L902.003 684.865 L902.562 684.865 L903.122 684.865 L903.681 684.865 L904.24 684.865 L904.799 684.865 L905.359 684.865 L905.918 684.865 L906.477 684.865 L907.036 684.865 L907.596 684.865 L908.155 684.865 L908.714 684.865 L909.273 684.865 L909.833 684.865 L910.392 684.865 L910.951 684.865 L911.51 684.865 L912.07 684.865 L912.629 684.865 L913.188 684.865 L913.747 684.865 L914.307 684.865 L914.866 684.865 L915.425 684.865 L915.984 684.865 L916.544 684.865 L917.103 684.865 L917.662 684.865 L918.221 684.865 L918.781 684.865 L919.34 684.865 L919.899 684.865 L920.458 684.865 L921.018 684.865 L921.577 684.865 L922.136 684.865 L922.695 684.865 L923.255 684.865 L923.814 684.865 L924.373 684.865 L924.932 684.865 L925.492 684.865 L926.051 684.865 L926.61 684.865 L927.169 684.865 L927.729 684.865 L928.288 684.865 L928.847 684.865 L929.406 684.865 L929.966 684.865 L930.525 684.865 L931.084 684.865 L931.644 684.865 L932.203 684.865 L932.762 684.865 L933.321 684.865 L933.881 684.865 L934.44 684.865 L934.999 684.865 L935.558 684.865 L936.118 684.865 L936.677 684.865 L937.236 684.865 L937.795 684.865 L938.355 684.865 L938.914 684.865 L939.473 684.865 L940.032 684.865 L940.592 684.865 L941.151 684.865 L941.71 684.865 L942.269 684.865 L942.829 684.865 L943.388 684.865 L943.947 684.865 L944.506 684.865 L945.066 684.865 L945.625 684.865 L946.184 684.865 L946.743 684.865 L947.303 684.865 L947.862 684.865 L948.421 684.865 L948.98 684.865 L949.54 684.865 L950.099 684.865 L950.658 684.865 L951.217 684.865 L951.777 684.865 L952.336 684.865 L952.895 684.865 L953.454 684.865 L954.014 684.865 L954.573 684.865 L955.132 684.865 L955.691 684.865 L956.251 684.865 L956.81 684.865 L957.369 684.865 L957.928 684.865 L958.488 684.865 L959.047 684.865 L959.606 684.865 L960.165 684.865 L960.725 684.865 L961.284 684.865 L961.843 684.865 L962.402 684.865 L962.962 684.865 L963.521 684.865 L964.08 684.865 L964.639 684.865 L965.199 684.865 L965.758 684.865 L966.317 684.865 L966.876 684.865 L967.436 684.865 L967.995 684.865 L968.554 684.865 L969.113 684.865 L969.673 684.865 L970.232 684.865 L970.791 684.865 L971.35 684.865 L971.91 684.865 L972.469 684.865 L973.028 684.865 L973.587 684.865 L974.147 684.865 L974.706 684.865 L975.265 684.865 L975.824 684.865 L976.384 684.865 L976.943 684.865 L977.502 684.865 L978.061 684.865 L978.621 684.865 L979.18 684.865 L979.739 684.865 L980.298 684.865 L980.858 684.865 L981.417 684.865 L981.976 684.865 L982.535 684.865 L983.095 684.865 L983.654 684.865 L984.213 684.865 L984.772 684.865 L985.332 684.865 L985.891 684.865 L986.45 684.865 L987.009 684.865 L987.569 684.865 L988.128 684.865 L988.687 684.865 L989.246 684.865 L989.806 684.865 L990.365 684.865 L990.924 684.865 L991.483 684.865 L992.043 684.865 L992.602 684.865 L993.161 684.865 L993.72 684.865 L994.28 684.865 L994.839 684.865 L995.398 684.865 L995.957 684.865 L996.517 684.865 L997.076 684.865 L997.635 684.865 L998.194 684.865 L998.754 684.865 L999.313 684.865 L999.872 684.865 L1000.43 684.865 L1000.99 684.865 L1001.55 684.865 L1002.11 684.865 L1002.67 684.865 L1003.23 684.865 L1003.79 684.865 L1004.35 684.865 L1004.91 684.865 L1005.46 684.865 L1006.02 684.865 L1006.58 684.865 L1007.14 684.865 L1007.7 684.865 L1008.26 684.865 L1008.82 684.865 L1009.38 684.865 L1009.94 684.865 L1010.5 684.865 L1011.06 684.865 L1011.62 684.865 L1012.18 684.865 L1012.73 684.865 L1013.29 684.865 L1013.85 684.865 L1014.41 684.865 L1014.97 684.865 L1015.53 684.865 L1016.09 684.865 L1016.65 684.865 L1017.21 684.865 L1017.77 684.865 L1018.33 684.865 L1018.89 684.865 L1019.45 684.865 L1020.01 684.865 L1020.56 684.865 L1021.12 684.865 L1021.68 684.865 L1022.24 684.865 L1022.8 684.865 L1023.36 684.865 L1023.92 684.865 L1024.48 684.865 L1025.04 684.865 L1025.6 684.865 L1026.16 684.865 L1026.72 684.865 L1027.28 684.865 L1027.83 684.865 L1028.39 684.865 L1028.95 684.865 L1029.51 684.865 L1030.07 684.865 L1030.63 684.865 L1031.19 684.865 L1031.75 684.865 L1032.31 684.865 L1032.87 684.865 L1033.43 684.865 L1033.99 684.865 L1034.55 684.865 L1035.1 684.865 L1035.66 684.865 L1036.22 684.865 L1036.78 684.865 L1037.34 684.865 L1037.9 684.865 L1038.46 684.865 L1039.02 684.865 L1039.58 684.865 L1040.14 684.865 L1040.7 684.865 L1041.26 684.865 L1041.82 684.865 L1042.38 684.865 L1042.93 684.865 L1043.49 684.865 L1044.05 684.865 L1044.61 684.865 L1045.17 684.865 L1045.73 684.865 L1046.29 684.865 L1046.85 684.865 L1047.41 684.865 L1047.97 684.865 L1048.53 684.865 L1049.09 684.865 L1049.65 684.865 L1050.2 684.865 L1050.76 684.865 L1051.32 684.865 L1051.88 684.865 L1052.44 684.865 L1053 684.865 L1053.56 684.865 L1054.12 684.865 L1054.68 684.865 L1055.24 684.865 L1055.8 684.865 L1056.36 684.865 L1056.92 684.865 L1057.48 684.865 L1058.03 684.865 L1058.59 684.865 L1059.15 684.865 L1059.71 684.865 L1060.27 684.865 L1060.83 684.865 L1061.39 684.865 L1061.95 684.865 L1062.51 684.865 L1063.07 684.865 L1063.63 684.865 L1064.19 684.865 L1064.75 684.865 L1065.3 684.865 L1065.86 684.865 L1066.42 684.865 L1066.98 684.865 L1067.54 684.865 L1068.1 684.865 L1068.66 684.865 L1069.22 684.865 L1069.78 684.865 L1070.34 684.865 L1070.9 684.865 L1071.46 684.865 L1072.02 684.865 L1072.57 684.865 L1073.13 684.865 L1073.69 684.865 L1074.25 684.865 L1074.81 684.865 L1075.37 684.865 L1075.93 684.865 L1076.49 684.865 L1077.05 684.865 L1077.61 684.865 L1078.17 684.865 L1078.73 684.865 L1079.29 684.865 L1079.85 684.865 L1080.4 684.865 L1080.96 684.865 L1081.52 684.865 L1082.08 684.865 L1082.64 684.865 L1083.2 684.865 L1083.76 684.865 L1084.32 684.865 L1084.88 684.865 L1085.44 684.865 L1086 684.865 L1086.56 684.865 L1087.12 684.865 L1087.67 684.865 L1088.23 684.865 L1088.79 684.865 L1089.35 684.865 L1089.91 684.865 L1090.47 684.865 L1091.03 684.865 L1091.59 684.865 L1092.15 684.865 L1092.71 684.865 L1093.27 684.865 L1093.83 684.865 L1094.39 684.865 L1094.94 684.865 L1095.5 684.865 L1096.06 684.865 L1096.62 684.865 L1097.18 684.865 L1097.74 684.865 L1098.3 684.865 L1098.86 684.865 L1099.42 684.865 L1099.98 684.865 L1100.54 684.865 L1101.1 684.865 L1101.66 684.865 L1102.22 684.865 L1102.77 684.865 L1103.33 684.865 L1103.89 684.865 L1104.45 684.865 L1105.01 684.865 L1105.57 684.865 L1106.13 684.865 L1106.69 684.865 L1107.25 684.865 L1107.81 684.865 L1108.37 684.865 L1108.93 684.865 L1109.49 684.865 L1110.04 684.865 L1110.6 684.865 L1111.16 684.865 L1111.72 684.865 L1112.28 684.865 L1112.84 684.865 L1113.4 684.865 L1113.96 684.865 L1114.52 684.865 L1115.08 684.865 L1115.64 684.865 L1116.2 684.865 L1116.76 684.865 L1117.31 684.865 L1117.87 684.865 L1118.43 684.865 L1118.99 684.865 L1119.55 684.865 L1120.11 684.865 L1120.67 684.865 L1121.23 684.865 L1121.79 684.865 L1122.35 684.865 L1122.91 684.865 L1123.47 684.865 L1124.03 684.865 L1124.59 684.865 L1125.14 684.865 L1125.7 684.865 L1126.26 684.865 L1126.82 684.865 L1127.38 684.865 L1127.94 684.865 L1128.5 684.865 L1129.06 684.865 L1129.62 684.865 L1130.18 684.865 L1130.74 684.865 L1131.3 684.865 L1131.86 684.865 L1132.41 684.865 L1132.97 684.865 L1133.53 684.865 L1134.09 684.865 L1134.65 684.865 L1135.21 684.865 L1135.77 684.865 L1136.33 684.865 L1136.89 684.865 L1137.45 684.865 L1138.01 684.865 L1138.57 684.865 L1139.13 684.865 L1139.68 684.865 L1140.24 684.865 L1140.8 684.865 L1141.36 684.865 L1141.92 684.865 L1142.48 684.865 L1143.04 684.865 L1143.6 684.865 L1144.16 684.865 L1144.72 684.865 L1145.28 684.865 L1145.84 684.865 L1146.4 684.865 L1146.96 684.865 L1147.51 684.865 L1148.07 684.865 L1148.63 684.865 L1149.19 684.865 L1149.75 684.865 L1150.31 684.865 L1150.87 684.865 L1151.43 684.865 L1151.99 684.865 L1152.55 684.865 L1153.11 684.865 L1153.67 684.865 L1154.23 684.865 L1154.78 684.865 L1155.34 684.865 L1155.9 684.865 L1156.46 684.865 L1157.02 684.865 L1157.58 684.865 L1158.14 684.865 L1158.7 684.865 L1159.26 684.865 L1159.82 684.865 L1160.38 684.865 L1160.94 684.865 L1161.5 684.865 L1162.05 684.865 L1162.61 684.865 L1163.17 684.865 L1163.73 684.865 L1164.29 684.865 L1164.85 684.865 L1165.41 684.865 L1165.97 684.865 L1166.53 684.865 L1167.09 684.865 L1167.65 684.865 L1168.21 684.865 L1168.77 684.865 L1169.33 684.865 L1169.88 684.865 L1170.44 684.865 L1171 684.865 L1171.56 684.865 L1172.12 684.865 L1172.68 684.865 L1173.24 684.865 L1173.8 684.865 L1174.36 684.865 L1174.92 684.865 L1175.48 684.865 L1176.04 684.865 L1176.6 684.865 L1177.15 684.865 L1177.71 684.865 L1178.27 684.865 L1178.83 684.865 L1179.39 684.865 L1179.95 684.865 L1180.51 684.865 L1181.07 684.865 L1181.63 684.865 L1182.19 684.865 L1182.75 684.865 L1183.31 684.865 L1183.87 684.865 L1184.43 684.865 L1184.98 684.865 L1185.54 684.865 L1186.1 684.865 L1186.66 684.865 L1187.22 684.865 L1187.78 684.865 L1188.34 684.865 L1188.9 684.865 L1189.46 684.865 L1190.02 684.865 L1190.58 684.865 L1191.14 684.865 L1191.7 684.865 L1192.25 684.865 L1192.81 684.865 L1193.37 684.865 L1193.93 684.865 L1194.49 684.865 L1195.05 684.865 L1195.61 684.865 L1196.17 684.865 L1196.73 684.865 L1197.29 684.865 L1197.85 684.865 L1198.41 684.865 L1198.97 684.865 L1199.52 684.865 L1200.08 684.865 L1200.64 684.865 L1201.2 684.865 L1201.76 684.865 L1202.32 684.865 L1202.88 684.865 L1203.44 684.865 L1204 684.865 L1204.56 684.865 L1205.12 684.865 L1205.68 684.865 L1206.24 684.865 L1206.8 684.865 L1207.35 684.865 L1207.91 684.865 L1208.47 684.865 L1209.03 684.865 L1209.59 684.865 L1210.15 684.865 L1210.71 684.865 L1211.27 684.865 L1211.83 684.865 L1212.39 684.865 L1212.95 684.865 L1213.51 684.865 L1214.07 684.865 L1214.62 684.865 L1215.18 684.865 L1215.74 684.865 L1216.3 684.865 L1216.86 684.865 L1217.42 684.865 L1217.98 684.865 L1218.54 684.865 L1219.1 684.865 L1219.66 684.865 L1220.22 684.865 L1220.78 684.865 L1221.34 684.865 L1221.89 684.865 L1222.45 684.865 L1223.01 684.865 L1223.57 684.865 L1224.13 684.865 L1224.69 684.865 L1225.25 684.865 L1225.81 684.865 L1226.37 684.865 L1226.93 684.865 L1227.49 684.865 L1228.05 684.865 L1228.61 684.865 L1229.17 684.865 L1229.72 684.865 L1230.28 684.865 L1230.84 684.865 L1231.4 684.865 L1231.96 684.865 L1232.52 684.865 L1233.08 684.865 L1233.64 684.865 L1234.2 684.865 L1234.76 684.865 L1235.32 684.865 L1235.88 684.865 L1236.44 684.865 L1236.99 684.865 L1237.55 684.865 L1238.11 684.865 L1238.67 684.865 L1239.23 684.865 L1239.79 684.865 L1240.35 684.865 L1240.91 684.865 L1241.47 684.865 L1242.03 684.865 L1242.59 684.865 L1243.15 684.865 L1243.71 684.865 L1244.26 684.865 L1244.82 684.865 L1245.38 684.865 L1245.94 684.865 L1246.5 684.865 L1247.06 684.865 L1247.62 684.865 L1248.18 684.865 L1248.74 684.865 L1249.3 684.865 L1249.86 684.865 L1250.42 684.865 L1250.98 684.865 L1251.54 684.865 L1252.09 684.865 L1252.65 684.865 L1253.21 684.865 L1253.77 684.865 L1254.33 684.865 L1254.89 684.865 L1255.45 684.865 L1256.01 684.865 L1256.57 684.865 L1257.13 684.865 L1257.69 684.865 L1258.25 684.865 L1258.81 684.865 L1259.36 684.865 L1259.92 684.865 L1260.48 684.865 L1261.04 684.865 L1261.6 684.865 L1262.16 684.865 L1262.72 684.865 L1263.28 684.865 L1263.84 684.865 L1264.4 684.865 L1264.96 684.865 L1265.52 684.865 L1266.08 684.865 L1266.63 684.865 L1267.19 684.865 L1267.75 684.865 L1268.31 684.865 L1268.87 684.865 L1269.43 684.865 L1269.99 684.865 L1270.55 684.865 L1271.11 684.865 L1271.67 684.865 L1272.23 684.865 L1272.79 684.865 L1273.35 684.865 L1273.91 684.865 L1274.46 684.865 L1275.02 684.865 L1275.58 684.865 L1276.14 684.865 L1276.7 684.865 L1277.26 684.865 L1277.82 684.865 L1278.38 684.865 L1278.94 684.865 L1279.5 684.865 L1280.06 684.865 L1280.62 684.865 L1281.18 684.865 L1281.73 684.865 L1282.29 684.865 L1282.85 684.865 L1283.41 684.865 L1283.97 684.865 L1284.53 684.865 L1285.09 684.865 L1285.65 684.865 L1286.21 684.865 L1286.77 684.865 L1287.33 684.865 L1287.89 684.865 L1288.45 684.865 L1289 684.865 L1289.56 684.865 L1290.12 684.865 L1290.68 684.865 L1291.24 684.865 L1291.8 684.865 L1292.36 684.865 L1292.92 684.865 L1293.48 684.865 L1294.04 684.865 L1294.6 684.865 L1295.16 684.865 L1295.72 684.865 L1296.28 684.865 L1296.83 684.865 L1297.39 684.865 L1297.95 684.865 L1298.51 684.865 L1299.07 684.865 L1299.63 684.865 L1300.19 684.865 L1300.75 684.865 L1301.31 684.865 L1301.87 684.865 L1302.43 684.865 L1302.99 684.865 L1303.55 684.865 L1304.1 684.865 L1304.66 684.865 L1305.22 684.865 L1305.78 684.865 L1306.34 684.865 L1306.9 684.865 L1307.46 684.865 L1308.02 684.865 L1308.58 684.865 L1309.14 684.865 L1309.7 684.865 L1310.26 684.865 L1310.82 684.865 L1311.38 684.865 L1311.93 684.865 L1312.49 684.865 L1313.05 684.865 L1313.61 684.865 L1314.17 684.865 L1314.73 684.865 L1315.29 684.865 L1315.85 684.865 L1316.41 684.865 L1316.97 684.865 L1317.53 684.865 L1318.09 684.865 L1318.65 684.865 L1319.2 684.865 L1319.76 684.865 L1320.32 684.865 L1320.88 684.865 L1321.44 684.865 L1322 684.865 L1322.56 684.865 L1323.12 684.865 L1323.68 684.865 L1324.24 684.865 L1324.8 684.865 L1325.36 684.865 L1325.92 684.865 L1326.47 684.865 L1327.03 684.865 L1327.59 684.865 L1328.15 684.865 L1328.71 684.865 L1329.27 684.865 L1329.83 684.865 L1330.39 684.865 L1330.95 684.865 L1331.51 684.865 L1332.07 684.865 L1332.63 684.865 L1333.19 684.865 L1333.75 684.865 L1334.3 684.865 L1334.86 684.865 L1335.42 684.865 L1335.98 684.865 L1336.54 684.865 L1337.1 684.865 L1337.66 684.865 L1338.22 684.865 L1338.78 684.865 L1339.34 684.865 L1339.9 684.865 L1340.46 684.865 L1341.02 684.865 L1341.57 684.865 L1342.13 684.865 L1342.69 684.865 L1343.25 684.865 L1343.81 684.865 L1344.37 684.865 L1344.93 684.865 L1345.49 684.865 L1346.05 684.865 L1346.61 684.865 L1347.17 684.865 L1347.73 684.865 L1348.29 684.865 L1348.84 684.865 L1349.4 684.865 L1349.96 684.865 L1350.52 684.865 L1351.08 684.865 L1351.64 684.865 L1352.2 684.865 L1352.76 684.865 L1353.32 684.865 L1353.88 684.865 L1354.44 684.865 L1355 684.865 L1355.56 684.865 L1356.12 684.865 L1356.67 684.865 L1357.23 684.865 L1357.79 684.865 L1358.35 684.865 L1358.91 684.865 L1359.47 684.865 L1360.03 684.865 L1360.59 684.865 L1361.15 684.865 L1361.71 684.865 L1362.27 684.865 L1362.83 684.865 L1363.39 684.865 L1363.94 684.865 L1364.5 684.865 L1365.06 684.865 L1365.62 684.865 L1366.18 684.865 L1366.74 684.865 L1367.3 684.865 L1367.86 684.865 L1368.42 684.865 L1368.98 684.865 L1369.54 684.865 L1370.1 684.865 L1370.66 684.865 L1371.21 684.865 L1371.77 684.865 L1372.33 684.865 L1372.89 684.865 L1373.45 684.865 L1374.01 684.865 L1374.57 684.865 L1375.13 684.865 L1375.69 684.865 L1376.25 684.865 L1376.81 684.865 L1377.37 684.865 L1377.93 684.865 L1378.49 684.865 L1379.04 684.865 L1379.6 684.865 L1380.16 684.865 L1380.72 684.865 L1381.28 684.865 L1381.84 684.865 L1382.4 684.865 L1382.96 684.865 L1383.52 684.865 L1384.08 684.865 L1384.64 684.865 L1385.2 684.865 L1385.76 684.865 L1386.31 684.865 L1386.87 684.865 L1387.43 684.865 L1387.99 684.865 L1388.55 684.865 L1389.11 684.865 L1389.67 684.865 L1390.23 684.865 L1390.79 684.865 L1391.35 684.865 L1391.91 684.865 L1392.47 684.865 L1393.03 684.865 L1393.58 684.865 L1394.14 684.865 L1394.7 684.865 L1395.26 684.865 L1395.82 684.865 L1396.38 684.865 L1396.94 684.865 L1397.5 684.865 L1398.06 684.865 L1398.62 684.865 L1399.18 684.865 L1399.74 684.865 L1400.3 684.865 L1400.86 684.865 L1401.41 684.865 L1401.97 684.865 L1402.53 684.865 L1403.09 684.865 L1403.65 684.865 L1404.21 684.865 L1404.77 684.865 L1405.33 684.865 L1405.89 684.865 L1406.45 684.865 L1407.01 684.865 L1407.57 684.865 L1408.13 684.865 L1408.68 684.865 L1409.24 684.865 L1409.8 684.865 L1410.36 684.865 L1410.92 684.865 L1411.48 684.865 L1412.04 684.865 L1412.6 684.865 L1413.16 684.865 L1413.72 684.865 L1414.28 684.865 L1414.84 684.865 L1415.4 684.865 L1415.95 684.865 L1416.51 684.865 L1417.07 684.865 L1417.63 684.865 L1418.19 684.865 L1418.75 684.865 L1419.31 684.865 L1419.87 684.865 L1420.43 684.865 L1420.99 684.865 L1421.55 684.865 L1422.11 684.865 L1422.67 684.865 L1423.23 684.865 L1423.78 684.865 L1424.34 684.865 L1424.9 684.865 L1425.46 684.865 L1426.02 684.865 L1426.58 684.865 L1427.14 684.865 L1427.7 684.865 L1428.26 684.865 L1428.82 684.865 L1429.38 684.865 L1429.94 684.865 L1430.5 684.865 L1431.05 684.865 L1431.61 684.865 L1432.17 684.865 L1432.73 684.865 L1433.29 684.865 L1433.85 684.865 L1434.41 684.865 L1434.97 684.865 L1435.53 684.865 L1436.09 684.865 L1436.65 684.865 L1437.21 684.865 L1437.77 684.865 L1438.33 684.865 L1438.88 684.865 L1439.44 684.865 L1440 684.865 L1440.56 684.865 L1441.12 684.865 L1441.68 684.865 L1442.24 684.865 L1442.8 684.865 L1443.36 684.865 L1443.92 684.865 L1444.48 684.865 L1445.04 684.865 L1445.6 684.865 L1446.15 684.865 L1446.71 684.865 L1447.27 684.865 L1447.83 684.865 L1448.39 684.865 L1448.95 684.865 L1449.51 684.865 L1450.07 684.865 L1450.63 684.865 L1451.19 684.865 L1451.75 684.865 L1452.31 684.865 L1452.87 684.865 L1453.42 684.865 L1453.98 684.865 L1454.54 684.865 L1455.1 684.865 L1455.66 684.865 L1456.22 684.865 L1456.78 684.865 L1457.34 684.865 L1457.9 684.865 L1458.46 684.865 L1459.02 684.865 L1459.58 684.865 L1460.14 684.865 L1460.7 684.865 L1461.25 684.865 L1461.81 684.865 L1462.37 684.865 L1462.93 684.865 L1463.49 684.865 L1464.05 684.865 L1464.61 684.865 L1465.17 684.865 L1465.73 684.865 L1466.29 684.865 L1466.85 684.865 L1467.41 684.865 L1467.97 684.865 L1468.52 684.865 L1469.08 684.865 L1469.64 684.865 L1470.2 684.865 L1470.76 684.865 L1471.32 684.865 L1471.88 684.865 L1472.44 684.865 L1473 684.865 L1473.56 684.865 L1474.12 684.865 L1474.68 684.865 L1475.24 684.865 L1475.79 684.865 L1476.35 684.865 L1476.91 684.865 L1477.47 684.865 L1478.03 684.865 L1478.59 684.865 L1479.15 684.865 L1479.71 684.865 L1480.27 684.865 L1480.83 684.865 L1481.39 684.865 L1481.95 684.865 L1482.51 684.865 L1483.07 684.865 L1483.62 684.865 L1484.18 684.865 L1484.74 684.865 L1485.3 684.865 L1485.86 684.865 L1486.42 684.865 L1486.98 684.865 L1487.54 684.865 L1488.1 684.865 L1488.66 684.865 L1489.22 684.865 L1489.78 684.865 L1490.34 684.865 L1490.89 684.865 L1491.45 684.865 L1492.01 684.865 L1492.57 684.865 L1493.13 684.865 L1493.69 684.865 L1494.25 684.865 L1494.81 684.865 L1495.37 684.865 L1495.93 684.865 L1496.49 684.865 L1497.05 684.865 L1497.61 684.865 L1498.16 684.865 L1498.72 684.865 L1499.28 684.865 L1499.84 684.865 L1500.4 684.865 L1500.96 684.865 L1501.52 684.865 L1502.08 684.865 L1502.64 684.865 L1503.2 684.865 L1503.76 684.865 L1504.32 684.865 L1504.88 684.865 L1505.44 684.865 L1505.99 684.865 L1506.55 684.865 L1507.11 684.865 L1507.67 684.865 L1508.23 684.865 L1508.79 684.865 L1509.35 684.865 L1509.91 684.865 L1510.47 684.865 L1511.03 684.865 L1511.59 684.865 L1512.15 684.865 L1512.71 684.865 L1513.26 684.865 L1513.82 684.865 L1514.38 684.865 L1514.94 684.865 L1515.5 684.865 L1516.06 684.865 L1516.62 684.865 L1517.18 684.865 L1517.74 684.865 L1518.3 684.865 L1518.86 684.865 L1519.42 684.865 L1519.98 684.865 L1520.53 684.865 L1521.09 684.865 L1521.65 684.865 L1522.21 684.865 L1522.77 684.865 L1523.33 684.865 L1523.89 684.865 L1524.45 684.865 L1525.01 684.865 L1525.57 684.865 L1526.13 684.865 L1526.69 684.865 L1527.25 684.865 L1527.81 684.865 L1528.36 684.865 L1528.92 684.865 L1529.48 684.865 L1530.04 684.865 L1530.6 684.865 L1531.16 684.865 L1531.72 684.865 L1532.28 684.865 L1532.84 684.865 L1533.4 684.865 L1533.96 684.865 L1534.52 684.865 L1535.08 684.865 L1535.63 684.865 L1536.19 684.865 L1536.75 684.865 L1537.31 684.865 L1537.87 684.865 L1538.43 684.865 L1538.99 684.865 L1539.55 684.865 L1540.11 684.865 L1540.67 684.865 L1541.23 684.865 L1541.79 684.865 L1542.35 684.865 L1542.9 684.865 L1543.46 684.865 L1544.02 684.865 L1544.58 684.865 L1545.14 684.865 L1545.7 684.865 L1546.26 684.865 L1546.82 684.865 L1547.38 684.865 L1547.94 684.865 L1548.5 684.865 L1549.06 684.865 L1549.62 684.865 L1550.18 684.865 L1550.73 684.865 L1551.29 684.865 L1551.85 684.865 L1552.41 684.865 L1552.97 684.865 L1553.53 684.865 L1554.09 684.865 L1554.65 684.865 L1555.21 684.865 L1555.77 684.865 L1556.33 684.865 L1556.89 684.865 L1557.45 684.865 L1558 684.865 L1558.56 684.865 L1559.12 684.865 L1559.68 684.865 L1560.24 684.865 L1560.8 684.865 L1561.36 684.865 L1561.92 684.865 L1562.48 684.865 L1563.04 684.865 L1563.6 684.865 L1564.16 684.865 L1564.72 684.865 L1565.28 684.865 L1565.83 684.865 L1566.39 684.865 L1566.95 684.865 L1567.51 684.865 L1568.07 684.865 L1568.63 684.865 L1569.19 684.865 L1569.75 684.865 L1570.31 684.865 L1570.87 684.865 L1571.43 684.865 L1571.99 684.865 L1572.55 684.865 L1573.1 684.865 L1573.66 684.865 L1574.22 684.865 L1574.78 684.865 L1575.34 684.865 L1575.9 684.865 L1576.46 684.865 L1577.02 684.865 L1577.58 684.865 L1578.14 684.865 L1578.7 684.865 L1579.26 684.865 L1579.82 684.865 L1580.37 684.865 L1580.93 684.865 L1581.49 684.865 L1582.05 684.865 L1582.61 684.865 L1583.17 684.865 L1583.73 684.865 L1584.29 684.865 L1584.85 684.865 L1585.41 684.865 L1585.97 684.865 L1586.53 684.865 L1587.09 684.865 L1587.65 684.865 L1588.2 684.865 L1588.76 684.865 L1589.32 684.865 L1589.88 684.865 L1590.44 684.865 L1591 684.865 L1591.56 684.865 L1592.12 684.865 L1592.68 684.865 L1593.24 684.865 L1593.8 684.865 L1594.36 684.865 L1594.92 684.865 L1595.47 684.865 L1596.03 684.865 L1596.59 684.865 L1597.15 684.865 L1597.71 684.865 L1598.27 684.865 L1598.83 684.865 L1599.39 684.865 L1599.95 684.865 L1600.51 684.865 L1601.07 684.865 L1601.63 684.865 L1602.19 684.865 L1602.74 684.865 L1603.3 684.865 L1603.86 684.865 L1604.42 684.865 L1604.98 684.865 L1605.54 684.865 L1606.1 684.865 L1606.66 684.865 L1607.22 684.865 L1607.78 684.865 L1608.34 684.865 L1608.9 684.865 L1609.46 684.865 L1610.02 684.865 L1610.57 684.865 L1611.13 684.865 L1611.69 684.865 L1612.25 684.865 L1612.81 684.865 L1613.37 684.865 L1613.93 684.865 L1614.49 684.865 L1615.05 684.865 L1615.61 684.865 L1616.17 684.865 L1616.73 684.865 L1617.29 684.865 L1617.84 684.865 L1618.4 684.865 L1618.96 684.865 L1619.52 684.865 L1620.08 684.865 L1620.64 684.865 L1621.2 684.865 L1621.76 684.865 L1622.32 684.865 L1622.88 684.865 L1623.44 684.865 L1624 684.865 L1624.56 684.865 L1625.11 684.865 L1625.67 684.865 L1626.23 684.865 L1626.79 684.865 L1627.35 684.865 L1627.91 684.865 L1628.47 684.865 L1629.03 684.865 L1629.59 684.865 L1630.15 684.865 L1630.71 684.865 L1631.27 684.865 L1631.83 684.865 L1632.39 684.865 L1632.94 684.865 L1633.5 684.865 L1634.06 684.865 L1634.62 684.865 L1635.18 684.865 L1635.74 684.865 L1636.3 684.865 L1636.86 684.865 L1637.42 684.865 L1637.98 684.865 L1638.54 684.865 L1639.1 684.865 L1639.66 684.865 L1640.21 684.865 L1640.77 684.865 L1641.33 684.865 L1641.89 684.865 L1642.45 684.865 L1643.01 684.865 L1643.57 684.865 L1644.13 684.865 L1644.69 684.865 L1645.25 684.865 L1645.81 684.865 L1646.37 684.865 L1646.93 684.865 L1647.48 684.865 L1648.04 684.865 L1648.6 684.865 L1649.16 684.865 L1649.72 684.865 L1650.28 684.865 L1650.84 684.865 L1651.4 684.865 L1651.96 684.865 L1652.52 684.865 L1653.08 684.865 L1653.64 684.865 L1654.2 684.865 L1654.76 684.865 L1655.31 684.865 L1655.87 684.865 L1656.43 684.865 L1656.99 684.865 L1657.55 684.865 L1658.11 684.865 L1658.67 684.865 L1659.23 684.865 L1659.79 684.865 L1660.35 684.865 L1660.91 684.865 L1661.47 684.865 L1662.03 684.865 L1662.58 684.865 L1663.14 684.865 L1663.7 684.865 L1664.26 684.865 L1664.82 684.865 L1665.38 684.865 L1665.94 684.865 L1666.5 684.865 L1667.06 684.865 L1667.62 684.865 L1668.18 684.865 L1668.74 684.865 L1669.3 684.865 L1669.85 684.865 L1670.41 684.865 L1670.97 684.865 L1671.53 684.865 L1672.09 684.865 L1672.65 684.865 L1673.21 684.865 L1673.77 684.865 L1674.33 684.865 L1674.89 684.865 L1675.45 684.865 L1676.01 684.865 L1676.57 684.865 L1677.13 684.865 L1677.68 684.865 L1678.24 684.865 L1678.8 684.865 L1679.36 684.865 L1679.92 684.865 L1680.48 684.865 L1681.04 684.865 L1681.6 684.865 L1682.16 684.865 L1682.72 684.865 L1683.28 684.865 L1683.84 684.865 L1684.4 684.865 L1684.95 684.865 L1685.51 684.865 L1686.07 684.865 L1686.63 684.865 L1687.19 684.865 L1687.75 684.865 L1688.31 684.865 L1688.87 684.865 L1689.43 684.865 L1689.99 684.865 L1690.55 684.865 L1691.11 684.865 L1691.67 684.865 L1692.23 684.865 L1692.78 684.865 L1693.34 684.865 L1693.9 684.865 L1694.46 684.865 L1695.02 684.865 L1695.58 684.865 L1696.14 684.865 L1696.7 684.865 L1697.26 684.865 L1697.82 684.865 L1698.38 684.865 L1698.94 684.865 L1699.5 684.865 L1700.05 684.865 L1700.61 684.865 L1701.17 684.865 L1701.73 684.865 L1702.29 684.865 L1702.85 684.865 L1703.41 684.865 L1703.97 684.865 L1704.53 684.865 L1705.09 684.865 L1705.65 684.865 L1706.21 684.865 L1706.77 684.865 L1707.32 684.865 L1707.88 684.865 L1708.44 684.865 L1709 684.865 L1709.56 684.865 L1710.12 684.865 L1710.68 684.865 L1711.24 684.865 L1711.8 684.865 L1712.36 684.865 L1712.92 684.865 L1713.48 684.865 L1714.04 684.865 L1714.6 684.865 L1715.15 684.865 L1715.71 684.865 L1716.27 684.865 L1716.83 684.865 L1717.39 684.865 L1717.95 684.865 L1718.51 684.865 L1719.07 684.865 L1719.63 684.865 L1720.19 684.865 L1720.75 684.865 L1721.31 684.865 L1721.87 684.865 L1722.42 684.865 L1722.98 684.865 L1723.54 684.865 L1724.1 684.865 L1724.66 684.865 L1725.22 684.865 L1725.78 684.865 L1726.34 684.865 L1726.9 684.865 L1727.46 684.865 L1728.02 684.865 L1728.58 684.865 L1729.14 684.865 L1729.69 684.865 L1730.25 684.865 L1730.81 684.865 L1731.37 684.865 L1731.93 684.865 L1732.49 684.865 L1733.05 684.865 L1733.61 684.865 L1734.17 684.865 L1734.73 684.865 L1735.29 684.865 L1735.85 684.865 L1736.41 684.865 L1736.97 684.865 L1737.52 684.865 L1738.08 684.865 L1738.64 684.865 L1739.2 684.865 L1739.76 684.865 L1740.32 684.865 L1740.88 684.865 L1741.44 684.865 L1742 684.865 L1742.56 684.865 L1743.12 684.865 L1743.68 684.865 L1744.24 684.865 L1744.79 684.865 L1745.35 684.865 L1745.91 684.865 L1746.47 684.865 L1747.03 684.865 L1747.59 684.865 L1748.15 684.865 L1748.71 684.865 L1749.27 684.865 L1749.83 684.865 L1750.39 684.865 L1750.95 684.865 L1751.51 684.865 L1752.06 684.865 L1752.62 684.865 L1753.18 684.865 L1753.74 684.865 L1754.3 684.865 L1754.86 684.865 L1755.42 684.865 L1755.98 684.865 L1756.54 684.865 L1757.1 684.865 L1757.66 684.865 L1758.22 684.865 L1758.78 684.865 L1759.34 684.865 L1759.89 684.865 L1760.45 684.865 L1761.01 684.865 L1761.57 684.865 L1762.13 684.865 L1762.69 684.865 L1763.25 684.865 L1763.81 684.865 L1764.37 684.865 L1764.93 684.865 L1765.49 684.865 L1766.05 684.865 L1766.61 684.865 L1767.16 684.865 L1767.72 684.865 L1768.28 684.865 L1768.84 684.865 L1769.4 684.865 L1769.96 684.865 L1770.52 684.865 L1771.08 684.865 L1771.64 684.865 L1772.2 684.865 L1772.76 684.865 L1773.32 684.865 L1773.88 684.865 L1774.43 684.865 L1774.99 684.865 L1775.55 684.865 L1776.11 684.865 L1776.67 684.865 L1777.23 684.865 L1777.79 684.865 L1778.35 684.865 L1778.91 684.865 L1779.47 684.865 L1780.03 684.865 L1780.59 684.865 L1781.15 684.865 L1781.71 684.865 L1782.26 684.865 L1782.82 684.865 L1783.38 684.865 L1783.94 684.865 L1784.5 684.865 L1785.06 684.865 L1785.62 684.865 L1786.18 684.865 L1786.74 684.865 L1787.3 684.865 L1787.86 684.865 L1788.42 684.865 L1788.98 684.865 L1789.53 684.865 L1790.09 684.865 L1790.65 684.865 L1791.21 684.865 L1791.77 684.865 L1792.33 684.865 L1792.89 684.865 L1793.45 684.865 L1794.01 684.865 L1794.57 684.865 L1795.13 684.865 L1795.69 684.865 L1796.25 684.865 L1796.8 684.865 L1797.36 684.865 L1797.92 684.865 L1798.48 684.865 L1799.04 684.865 L1799.6 684.865 L1800.16 684.865 L1800.72 684.865 L1801.28 684.865 L1801.84 684.865 L1802.4 684.865 L1802.96 684.865 L1803.52 684.865 L1804.08 684.865 L1804.63 684.865 L1805.19 684.865 L1805.75 684.865 L1806.31 684.865 L1806.87 684.865 L1807.43 684.865 L1807.99 684.865 L1808.55 684.865 L1809.11 684.865 L1809.67 684.865 L1810.23 684.865 L1810.79 684.865 L1811.35 684.865 L1811.9 684.865 L1812.46 684.865 L1813.02 684.865 L1813.58 684.865 L1814.14 684.865 L1814.7 684.865 L1815.26 684.865 L1815.82 684.865 L1816.38 684.865 L1816.94 684.865 L1817.5 684.865 L1818.06 684.865 L1818.62 684.865 L1819.18 684.865 L1819.73 684.865 L1820.29 684.865 L1820.85 684.865 L1821.41 684.865 L1821.97 684.865 L1822.53 684.865 L1823.09 684.865 L1823.65 684.865 L1824.21 684.865 L1824.77 684.865 L1825.33 684.865 L1825.89 684.865 L1826.45 684.865 L1827 684.865 L1827.56 684.865 L1828.12 684.865 L1828.68 684.865 L1829.24 684.865 L1829.8 684.865 L1830.36 684.865 L1830.92 684.865 L1831.48 684.865 L1832.04 684.865 L1832.6 684.865 L1833.16 684.865 L1833.72 684.865 L1834.27 684.865 L1834.83 684.865 L1835.39 684.865 L1835.95 684.865 L1836.51 684.865 L1837.07 684.865 L1837.63 684.865 L1838.19 684.865 L1838.19 681.879 L1837.63 681.879 L1837.07 681.879 L1836.51 681.879 L1835.95 681.879 L1835.39 681.879 L1834.83 681.879 L1834.27 681.879 L1833.72 681.879 L1833.16 681.879 L1832.6 681.879 L1832.04 681.879 L1831.48 681.879 L1830.92 681.879 L1830.36 681.879 L1829.8 681.879 L1829.24 681.879 L1828.68 681.879 L1828.12 681.879 L1827.56 681.879 L1827 681.879 L1826.45 681.879 L1825.89 681.879 L1825.33 681.879 L1824.77 681.879 L1824.21 681.879 L1823.65 681.879 L1823.09 681.879 L1822.53 681.879 L1821.97 681.879 L1821.41 681.879 L1820.85 681.879 L1820.29 681.879 L1819.73 681.879 L1819.18 681.879 L1818.62 681.879 L1818.06 681.879 L1817.5 681.879 L1816.94 681.879 L1816.38 681.879 L1815.82 681.879 L1815.26 681.879 L1814.7 681.879 L1814.14 681.879 L1813.58 681.879 L1813.02 681.879 L1812.46 681.879 L1811.9 681.879 L1811.35 681.879 L1810.79 681.879 L1810.23 681.879 L1809.67 681.879 L1809.11 681.879 L1808.55 681.879 L1807.99 681.879 L1807.43 681.879 L1806.87 681.879 L1806.31 681.879 L1805.75 681.879 L1805.19 681.879 L1804.63 681.879 L1804.08 681.879 L1803.52 681.879 L1802.96 681.879 L1802.4 681.879 L1801.84 681.879 L1801.28 681.879 L1800.72 681.879 L1800.16 681.879 L1799.6 681.879 L1799.04 681.879 L1798.48 681.879 L1797.92 681.879 L1797.36 681.879 L1796.8 681.879 L1796.25 681.879 L1795.69 681.879 L1795.13 681.879 L1794.57 681.879 L1794.01 681.879 L1793.45 681.879 L1792.89 681.879 L1792.33 681.879 L1791.77 681.879 L1791.21 681.879 L1790.65 681.879 L1790.09 681.879 L1789.53 681.879 L1788.98 681.879 L1788.42 681.879 L1787.86 681.879 L1787.3 681.879 L1786.74 681.879 L1786.18 681.879 L1785.62 681.879 L1785.06 681.879 L1784.5 681.879 L1783.94 681.879 L1783.38 681.879 L1782.82 681.879 L1782.26 681.879 L1781.71 681.879 L1781.15 681.879 L1780.59 681.879 L1780.03 681.879 L1779.47 681.879 L1778.91 681.879 L1778.35 681.879 L1777.79 681.879 L1777.23 681.879 L1776.67 681.879 L1776.11 681.879 L1775.55 681.879 L1774.99 681.879 L1774.43 681.879 L1773.88 681.879 L1773.32 681.879 L1772.76 681.879 L1772.2 681.879 L1771.64 681.879 L1771.08 681.879 L1770.52 681.879 L1769.96 681.879 L1769.4 681.879 L1768.84 681.879 L1768.28 681.879 L1767.72 681.879 L1767.16 681.879 L1766.61 681.879 L1766.05 681.879 L1765.49 681.879 L1764.93 681.879 L1764.37 681.879 L1763.81 681.879 L1763.25 681.879 L1762.69 681.879 L1762.13 681.879 L1761.57 681.879 L1761.01 681.879 L1760.45 681.879 L1759.89 681.879 L1759.34 681.879 L1758.78 681.879 L1758.22 681.879 L1757.66 681.879 L1757.1 681.879 L1756.54 681.879 L1755.98 681.879 L1755.42 681.879 L1754.86 681.879 L1754.3 681.879 L1753.74 681.879 L1753.18 681.879 L1752.62 681.879 L1752.06 681.879 L1751.51 681.879 L1750.95 681.879 L1750.39 681.879 L1749.83 681.879 L1749.27 681.879 L1748.71 681.879 L1748.15 681.879 L1747.59 681.879 L1747.03 681.879 L1746.47 681.879 L1745.91 681.879 L1745.35 681.879 L1744.79 681.879 L1744.24 681.879 L1743.68 681.879 L1743.12 681.879 L1742.56 681.879 L1742 681.879 L1741.44 681.879 L1740.88 681.879 L1740.32 681.879 L1739.76 681.879 L1739.2 681.879 L1738.64 681.879 L1738.08 681.879 L1737.52 681.879 L1736.97 681.879 L1736.41 681.879 L1735.85 681.879 L1735.29 681.879 L1734.73 681.879 L1734.17 681.879 L1733.61 681.879 L1733.05 681.879 L1732.49 681.879 L1731.93 681.879 L1731.37 681.879 L1730.81 681.879 L1730.25 681.879 L1729.69 681.879 L1729.14 681.879 L1728.58 681.879 L1728.02 681.879 L1727.46 681.879 L1726.9 681.879 L1726.34 681.879 L1725.78 681.879 L1725.22 681.879 L1724.66 681.879 L1724.1 681.879 L1723.54 681.879 L1722.98 681.879 L1722.42 681.879 L1721.87 681.879 L1721.31 681.879 L1720.75 681.879 L1720.19 681.879 L1719.63 681.879 L1719.07 681.879 L1718.51 681.879 L1717.95 681.879 L1717.39 681.879 L1716.83 681.879 L1716.27 681.879 L1715.71 681.879 L1715.15 681.879 L1714.6 681.879 L1714.04 681.879 L1713.48 681.879 L1712.92 681.879 L1712.36 681.879 L1711.8 681.879 L1711.24 681.879 L1710.68 681.879 L1710.12 681.879 L1709.56 681.879 L1709 681.879 L1708.44 681.879 L1707.88 681.879 L1707.32 681.879 L1706.77 681.879 L1706.21 681.879 L1705.65 681.879 L1705.09 681.879 L1704.53 681.879 L1703.97 681.879 L1703.41 681.879 L1702.85 681.879 L1702.29 681.879 L1701.73 681.879 L1701.17 681.879 L1700.61 681.879 L1700.05 681.879 L1699.5 681.879 L1698.94 681.879 L1698.38 681.879 L1697.82 681.879 L1697.26 681.879 L1696.7 681.879 L1696.14 681.879 L1695.58 681.879 L1695.02 681.879 L1694.46 681.879 L1693.9 681.879 L1693.34 681.879 L1692.78 681.879 L1692.23 681.879 L1691.67 681.879 L1691.11 681.879 L1690.55 681.879 L1689.99 681.879 L1689.43 681.879 L1688.87 681.879 L1688.31 681.879 L1687.75 681.879 L1687.19 681.879 L1686.63 681.879 L1686.07 681.879 L1685.51 681.879 L1684.95 681.879 L1684.4 681.879 L1683.84 681.879 L1683.28 681.879 L1682.72 681.879 L1682.16 681.879 L1681.6 681.879 L1681.04 681.879 L1680.48 681.879 L1679.92 681.879 L1679.36 681.879 L1678.8 681.879 L1678.24 681.879 L1677.68 681.879 L1677.13 681.879 L1676.57 681.879 L1676.01 681.879 L1675.45 681.879 L1674.89 681.879 L1674.33 681.879 L1673.77 681.879 L1673.21 681.879 L1672.65 681.879 L1672.09 681.879 L1671.53 681.879 L1670.97 681.879 L1670.41 681.879 L1669.85 681.879 L1669.3 681.879 L1668.74 681.879 L1668.18 681.879 L1667.62 681.879 L1667.06 681.879 L1666.5 681.879 L1665.94 681.879 L1665.38 681.879 L1664.82 681.879 L1664.26 681.879 L1663.7 681.879 L1663.14 681.879 L1662.58 681.879 L1662.03 681.879 L1661.47 681.879 L1660.91 681.879 L1660.35 681.879 L1659.79 681.879 L1659.23 681.879 L1658.67 681.879 L1658.11 681.879 L1657.55 681.879 L1656.99 681.879 L1656.43 681.879 L1655.87 681.879 L1655.31 681.879 L1654.76 681.879 L1654.2 681.879 L1653.64 681.879 L1653.08 681.879 L1652.52 681.879 L1651.96 681.879 L1651.4 681.879 L1650.84 681.879 L1650.28 681.879 L1649.72 681.879 L1649.16 681.879 L1648.6 681.879 L1648.04 681.879 L1647.48 681.879 L1646.93 681.879 L1646.37 681.879 L1645.81 681.879 L1645.25 681.879 L1644.69 681.879 L1644.13 681.879 L1643.57 681.879 L1643.01 681.879 L1642.45 681.879 L1641.89 681.879 L1641.33 681.879 L1640.77 681.879 L1640.21 681.879 L1639.66 681.879 L1639.1 681.879 L1638.54 681.879 L1637.98 681.879 L1637.42 681.879 L1636.86 681.879 L1636.3 681.879 L1635.74 681.879 L1635.18 681.879 L1634.62 681.879 L1634.06 681.879 L1633.5 681.879 L1632.94 681.879 L1632.39 681.879 L1631.83 681.879 L1631.27 681.879 L1630.71 681.879 L1630.15 681.879 L1629.59 681.879 L1629.03 681.879 L1628.47 681.879 L1627.91 681.879 L1627.35 681.879 L1626.79 681.879 L1626.23 681.879 L1625.67 681.879 L1625.11 681.879 L1624.56 681.879 L1624 681.879 L1623.44 681.879 L1622.88 681.879 L1622.32 681.879 L1621.76 681.879 L1621.2 681.879 L1620.64 681.879 L1620.08 681.879 L1619.52 681.879 L1618.96 681.879 L1618.4 681.879 L1617.84 681.879 L1617.29 681.879 L1616.73 681.879 L1616.17 681.879 L1615.61 681.879 L1615.05 681.879 L1614.49 681.879 L1613.93 681.879 L1613.37 681.879 L1612.81 681.879 L1612.25 681.879 L1611.69 681.879 L1611.13 681.879 L1610.57 681.879 L1610.02 681.879 L1609.46 681.879 L1608.9 681.879 L1608.34 681.879 L1607.78 681.879 L1607.22 681.879 L1606.66 681.879 L1606.1 681.879 L1605.54 681.879 L1604.98 681.879 L1604.42 681.879 L1603.86 681.879 L1603.3 681.879 L1602.74 681.879 L1602.19 681.879 L1601.63 681.879 L1601.07 681.879 L1600.51 681.879 L1599.95 681.879 L1599.39 681.879 L1598.83 681.879 L1598.27 681.879 L1597.71 681.879 L1597.15 681.879 L1596.59 681.879 L1596.03 681.879 L1595.47 681.879 L1594.92 681.879 L1594.36 681.879 L1593.8 681.879 L1593.24 681.879 L1592.68 681.879 L1592.12 681.879 L1591.56 681.879 L1591 681.879 L1590.44 681.879 L1589.88 681.879 L1589.32 681.879 L1588.76 681.879 L1588.2 681.879 L1587.65 681.879 L1587.09 681.879 L1586.53 681.879 L1585.97 681.879 L1585.41 681.879 L1584.85 681.879 L1584.29 681.879 L1583.73 681.879 L1583.17 681.879 L1582.61 681.879 L1582.05 681.879 L1581.49 681.879 L1580.93 681.879 L1580.37 681.879 L1579.82 681.879 L1579.26 681.879 L1578.7 681.879 L1578.14 681.879 L1577.58 681.879 L1577.02 681.879 L1576.46 681.879 L1575.9 681.879 L1575.34 681.879 L1574.78 681.879 L1574.22 681.879 L1573.66 681.879 L1573.1 681.879 L1572.55 681.879 L1571.99 681.879 L1571.43 681.879 L1570.87 681.879 L1570.31 681.879 L1569.75 681.879 L1569.19 681.879 L1568.63 681.879 L1568.07 681.879 L1567.51 681.879 L1566.95 681.879 L1566.39 681.879 L1565.83 681.879 L1565.28 681.879 L1564.72 681.879 L1564.16 681.879 L1563.6 681.879 L1563.04 681.879 L1562.48 681.879 L1561.92 681.879 L1561.36 681.879 L1560.8 681.879 L1560.24 681.879 L1559.68 681.879 L1559.12 681.879 L1558.56 681.879 L1558 681.879 L1557.45 681.879 L1556.89 681.879 L1556.33 681.879 L1555.77 681.879 L1555.21 681.879 L1554.65 681.879 L1554.09 681.879 L1553.53 681.879 L1552.97 681.879 L1552.41 681.879 L1551.85 681.879 L1551.29 681.879 L1550.73 681.879 L1550.18 681.879 L1549.62 681.879 L1549.06 681.879 L1548.5 681.879 L1547.94 681.879 L1547.38 681.879 L1546.82 681.879 L1546.26 681.879 L1545.7 681.879 L1545.14 681.879 L1544.58 681.879 L1544.02 681.879 L1543.46 681.879 L1542.9 681.879 L1542.35 681.879 L1541.79 681.879 L1541.23 681.879 L1540.67 681.879 L1540.11 681.879 L1539.55 681.879 L1538.99 681.879 L1538.43 681.879 L1537.87 681.879 L1537.31 681.879 L1536.75 681.879 L1536.19 681.879 L1535.63 681.879 L1535.08 681.879 L1534.52 681.879 L1533.96 681.879 L1533.4 681.879 L1532.84 681.879 L1532.28 681.879 L1531.72 681.879 L1531.16 681.879 L1530.6 681.879 L1530.04 681.879 L1529.48 681.879 L1528.92 681.879 L1528.36 681.879 L1527.81 681.879 L1527.25 681.879 L1526.69 681.879 L1526.13 681.879 L1525.57 681.879 L1525.01 681.879 L1524.45 681.879 L1523.89 681.879 L1523.33 681.879 L1522.77 681.879 L1522.21 681.879 L1521.65 681.879 L1521.09 681.879 L1520.53 681.879 L1519.98 681.879 L1519.42 681.879 L1518.86 681.879 L1518.3 681.879 L1517.74 681.879 L1517.18 681.879 L1516.62 681.879 L1516.06 681.879 L1515.5 681.879 L1514.94 681.879 L1514.38 681.879 L1513.82 681.879 L1513.26 681.879 L1512.71 681.879 L1512.15 681.879 L1511.59 681.879 L1511.03 681.879 L1510.47 681.879 L1509.91 681.879 L1509.35 681.879 L1508.79 681.879 L1508.23 681.879 L1507.67 681.879 L1507.11 681.879 L1506.55 681.879 L1505.99 681.879 L1505.44 681.879 L1504.88 681.879 L1504.32 681.879 L1503.76 681.879 L1503.2 681.879 L1502.64 681.879 L1502.08 681.879 L1501.52 681.879 L1500.96 681.879 L1500.4 681.879 L1499.84 681.879 L1499.28 681.879 L1498.72 681.879 L1498.16 681.879 L1497.61 681.879 L1497.05 681.879 L1496.49 681.879 L1495.93 681.879 L1495.37 681.879 L1494.81 681.879 L1494.25 681.879 L1493.69 681.879 L1493.13 681.879 L1492.57 681.879 L1492.01 681.879 L1491.45 681.879 L1490.89 681.879 L1490.34 681.879 L1489.78 681.879 L1489.22 681.879 L1488.66 681.879 L1488.1 681.879 L1487.54 681.879 L1486.98 681.879 L1486.42 681.879 L1485.86 681.879 L1485.3 681.879 L1484.74 681.879 L1484.18 681.879 L1483.62 681.879 L1483.07 681.879 L1482.51 681.879 L1481.95 681.879 L1481.39 681.879 L1480.83 681.879 L1480.27 681.879 L1479.71 681.879 L1479.15 681.879 L1478.59 681.879 L1478.03 681.879 L1477.47 681.879 L1476.91 681.879 L1476.35 681.879 L1475.79 681.879 L1475.24 681.879 L1474.68 681.879 L1474.12 681.879 L1473.56 681.879 L1473 681.879 L1472.44 681.879 L1471.88 681.879 L1471.32 681.879 L1470.76 681.879 L1470.2 681.879 L1469.64 681.879 L1469.08 681.879 L1468.52 681.879 L1467.97 681.879 L1467.41 681.879 L1466.85 681.879 L1466.29 681.879 L1465.73 681.879 L1465.17 681.879 L1464.61 681.879 L1464.05 681.879 L1463.49 681.879 L1462.93 681.879 L1462.37 681.879 L1461.81 681.879 L1461.25 681.879 L1460.7 681.879 L1460.14 681.879 L1459.58 681.879 L1459.02 681.879 L1458.46 681.879 L1457.9 681.879 L1457.34 681.879 L1456.78 681.879 L1456.22 681.879 L1455.66 681.879 L1455.1 681.879 L1454.54 681.879 L1453.98 681.879 L1453.42 681.879 L1452.87 681.879 L1452.31 681.879 L1451.75 681.879 L1451.19 681.879 L1450.63 681.879 L1450.07 681.879 L1449.51 681.879 L1448.95 681.879 L1448.39 681.879 L1447.83 681.879 L1447.27 681.879 L1446.71 681.879 L1446.15 681.879 L1445.6 681.879 L1445.04 681.879 L1444.48 681.879 L1443.92 681.879 L1443.36 681.879 L1442.8 681.879 L1442.24 681.879 L1441.68 681.879 L1441.12 681.879 L1440.56 681.879 L1440 681.879 L1439.44 681.879 L1438.88 681.879 L1438.33 681.879 L1437.77 681.879 L1437.21 681.879 L1436.65 681.879 L1436.09 681.879 L1435.53 681.879 L1434.97 681.879 L1434.41 681.879 L1433.85 681.879 L1433.29 681.879 L1432.73 681.879 L1432.17 681.879 L1431.61 681.879 L1431.05 681.879 L1430.5 681.879 L1429.94 681.879 L1429.38 681.879 L1428.82 681.879 L1428.26 681.879 L1427.7 681.879 L1427.14 681.879 L1426.58 681.879 L1426.02 681.879 L1425.46 681.879 L1424.9 681.879 L1424.34 681.879 L1423.78 681.879 L1423.23 681.879 L1422.67 681.879 L1422.11 681.879 L1421.55 681.879 L1420.99 681.879 L1420.43 681.879 L1419.87 681.879 L1419.31 681.879 L1418.75 681.879 L1418.19 681.879 L1417.63 681.879 L1417.07 681.879 L1416.51 681.879 L1415.95 681.879 L1415.4 681.879 L1414.84 681.879 L1414.28 681.879 L1413.72 681.879 L1413.16 681.879 L1412.6 681.879 L1412.04 681.879 L1411.48 681.879 L1410.92 681.879 L1410.36 681.879 L1409.8 681.879 L1409.24 681.879 L1408.68 681.879 L1408.13 681.879 L1407.57 681.879 L1407.01 681.879 L1406.45 681.879 L1405.89 681.879 L1405.33 681.879 L1404.77 681.879 L1404.21 681.879 L1403.65 681.879 L1403.09 681.879 L1402.53 681.879 L1401.97 681.879 L1401.41 681.879 L1400.86 681.879 L1400.3 681.879 L1399.74 681.879 L1399.18 681.879 L1398.62 681.879 L1398.06 681.879 L1397.5 681.879 L1396.94 681.879 L1396.38 681.879 L1395.82 681.879 L1395.26 681.879 L1394.7 681.879 L1394.14 681.879 L1393.58 681.879 L1393.03 681.879 L1392.47 681.879 L1391.91 681.879 L1391.35 681.879 L1390.79 681.879 L1390.23 681.879 L1389.67 681.879 L1389.11 681.879 L1388.55 681.879 L1387.99 681.879 L1387.43 681.879 L1386.87 681.879 L1386.31 681.879 L1385.76 681.879 L1385.2 681.879 L1384.64 681.879 L1384.08 681.879 L1383.52 681.879 L1382.96 681.879 L1382.4 681.879 L1381.84 681.879 L1381.28 681.879 L1380.72 681.879 L1380.16 681.879 L1379.6 681.879 L1379.04 681.879 L1378.49 681.879 L1377.93 681.879 L1377.37 681.879 L1376.81 681.879 L1376.25 681.879 L1375.69 681.879 L1375.13 681.879 L1374.57 681.879 L1374.01 681.879 L1373.45 681.879 L1372.89 681.879 L1372.33 681.879 L1371.77 681.879 L1371.21 681.879 L1370.66 681.879 L1370.1 681.879 L1369.54 681.879 L1368.98 681.879 L1368.42 681.879 L1367.86 681.879 L1367.3 681.879 L1366.74 681.879 L1366.18 681.879 L1365.62 681.879 L1365.06 681.879 L1364.5 681.879 L1363.94 681.879 L1363.39 681.879 L1362.83 681.879 L1362.27 681.879 L1361.71 681.879 L1361.15 681.879 L1360.59 681.879 L1360.03 681.879 L1359.47 681.879 L1358.91 681.879 L1358.35 681.879 L1357.79 681.879 L1357.23 681.879 L1356.67 681.879 L1356.12 681.879 L1355.56 681.879 L1355 681.879 L1354.44 681.879 L1353.88 681.879 L1353.32 681.879 L1352.76 681.879 L1352.2 681.879 L1351.64 681.879 L1351.08 681.879 L1350.52 681.879 L1349.96 681.879 L1349.4 681.879 L1348.84 681.879 L1348.29 681.879 L1347.73 681.879 L1347.17 681.879 L1346.61 681.879 L1346.05 681.879 L1345.49 681.879 L1344.93 681.879 L1344.37 681.879 L1343.81 681.879 L1343.25 681.879 L1342.69 681.879 L1342.13 681.879 L1341.57 681.879 L1341.02 681.879 L1340.46 681.879 L1339.9 681.879 L1339.34 681.879 L1338.78 681.879 L1338.22 681.879 L1337.66 681.879 L1337.1 681.879 L1336.54 681.879 L1335.98 681.879 L1335.42 681.879 L1334.86 681.879 L1334.3 681.879 L1333.75 681.879 L1333.19 681.879 L1332.63 681.879 L1332.07 681.879 L1331.51 681.879 L1330.95 681.879 L1330.39 681.879 L1329.83 681.879 L1329.27 681.879 L1328.71 681.879 L1328.15 681.879 L1327.59 681.879 L1327.03 681.879 L1326.47 681.879 L1325.92 681.879 L1325.36 681.879 L1324.8 681.879 L1324.24 681.879 L1323.68 681.879 L1323.12 681.879 L1322.56 681.879 L1322 681.879 L1321.44 681.879 L1320.88 681.879 L1320.32 681.879 L1319.76 681.879 L1319.2 681.879 L1318.65 681.879 L1318.09 681.879 L1317.53 681.879 L1316.97 681.879 L1316.41 681.879 L1315.85 681.879 L1315.29 681.879 L1314.73 681.879 L1314.17 681.879 L1313.61 681.879 L1313.05 681.879 L1312.49 681.879 L1311.93 681.879 L1311.38 681.879 L1310.82 681.879 L1310.26 681.879 L1309.7 681.879 L1309.14 681.879 L1308.58 681.879 L1308.02 681.879 L1307.46 681.879 L1306.9 681.879 L1306.34 681.879 L1305.78 681.879 L1305.22 681.879 L1304.66 681.879 L1304.1 681.879 L1303.55 681.879 L1302.99 681.879 L1302.43 681.879 L1301.87 681.879 L1301.31 681.879 L1300.75 681.879 L1300.19 681.879 L1299.63 681.879 L1299.07 681.879 L1298.51 681.879 L1297.95 681.879 L1297.39 681.879 L1296.83 681.879 L1296.28 681.879 L1295.72 681.879 L1295.16 681.879 L1294.6 681.879 L1294.04 681.879 L1293.48 681.879 L1292.92 681.879 L1292.36 681.879 L1291.8 681.879 L1291.24 681.879 L1290.68 681.879 L1290.12 681.879 L1289.56 681.879 L1289 681.879 L1288.45 681.879 L1287.89 681.879 L1287.33 681.879 L1286.77 681.879 L1286.21 681.879 L1285.65 681.879 L1285.09 681.879 L1284.53 681.879 L1283.97 681.879 L1283.41 681.879 L1282.85 681.879 L1282.29 681.879 L1281.73 681.879 L1281.18 681.879 L1280.62 681.879 L1280.06 681.879 L1279.5 681.879 L1278.94 681.879 L1278.38 681.879 L1277.82 681.879 L1277.26 681.879 L1276.7 681.879 L1276.14 681.879 L1275.58 681.879 L1275.02 681.879 L1274.46 681.879 L1273.91 681.879 L1273.35 681.879 L1272.79 681.879 L1272.23 681.879 L1271.67 681.879 L1271.11 681.879 L1270.55 681.879 L1269.99 681.879 L1269.43 681.879 L1268.87 681.879 L1268.31 681.879 L1267.75 681.879 L1267.19 681.879 L1266.63 681.879 L1266.08 681.879 L1265.52 681.879 L1264.96 681.879 L1264.4 681.879 L1263.84 681.879 L1263.28 681.879 L1262.72 681.879 L1262.16 681.879 L1261.6 681.879 L1261.04 681.879 L1260.48 681.879 L1259.92 681.879 L1259.36 681.879 L1258.81 681.879 L1258.25 681.879 L1257.69 681.879 L1257.13 681.879 L1256.57 681.879 L1256.01 681.879 L1255.45 681.879 L1254.89 681.879 L1254.33 681.879 L1253.77 681.879 L1253.21 681.879 L1252.65 681.879 L1252.09 681.879 L1251.54 681.879 L1250.98 681.879 L1250.42 681.879 L1249.86 681.879 L1249.3 681.879 L1248.74 681.879 L1248.18 681.879 L1247.62 681.879 L1247.06 681.879 L1246.5 681.879 L1245.94 681.879 L1245.38 681.879 L1244.82 681.879 L1244.26 681.879 L1243.71 681.879 L1243.15 681.879 L1242.59 681.879 L1242.03 681.879 L1241.47 681.879 L1240.91 681.879 L1240.35 681.879 L1239.79 681.879 L1239.23 681.879 L1238.67 681.879 L1238.11 681.879 L1237.55 681.879 L1236.99 681.879 L1236.44 681.879 L1235.88 681.879 L1235.32 681.879 L1234.76 681.879 L1234.2 681.879 L1233.64 681.879 L1233.08 681.879 L1232.52 681.879 L1231.96 681.879 L1231.4 681.879 L1230.84 681.879 L1230.28 681.879 L1229.72 681.879 L1229.17 681.879 L1228.61 681.879 L1228.05 681.879 L1227.49 681.879 L1226.93 681.879 L1226.37 681.879 L1225.81 681.879 L1225.25 681.879 L1224.69 681.879 L1224.13 681.879 L1223.57 681.879 L1223.01 681.879 L1222.45 681.879 L1221.89 681.879 L1221.34 681.879 L1220.78 681.879 L1220.22 681.879 L1219.66 681.879 L1219.1 681.879 L1218.54 681.879 L1217.98 681.879 L1217.42 681.879 L1216.86 681.879 L1216.3 681.879 L1215.74 681.879 L1215.18 681.879 L1214.62 681.879 L1214.07 681.879 L1213.51 681.879 L1212.95 681.879 L1212.39 681.879 L1211.83 681.879 L1211.27 681.879 L1210.71 681.879 L1210.15 681.879 L1209.59 681.879 L1209.03 681.879 L1208.47 681.879 L1207.91 681.879 L1207.35 681.879 L1206.8 681.879 L1206.24 681.879 L1205.68 681.879 L1205.12 681.879 L1204.56 681.879 L1204 681.879 L1203.44 681.879 L1202.88 681.879 L1202.32 681.879 L1201.76 681.879 L1201.2 681.879 L1200.64 681.879 L1200.08 681.879 L1199.52 681.879 L1198.97 681.879 L1198.41 681.879 L1197.85 681.879 L1197.29 681.879 L1196.73 681.879 L1196.17 681.879 L1195.61 681.879 L1195.05 681.879 L1194.49 681.879 L1193.93 681.879 L1193.37 681.879 L1192.81 681.879 L1192.25 681.879 L1191.7 681.879 L1191.14 681.879 L1190.58 681.879 L1190.02 681.879 L1189.46 681.879 L1188.9 681.879 L1188.34 681.879 L1187.78 681.879 L1187.22 681.879 L1186.66 681.879 L1186.1 681.879 L1185.54 681.879 L1184.98 681.879 L1184.43 681.879 L1183.87 681.879 L1183.31 681.879 L1182.75 681.879 L1182.19 681.879 L1181.63 681.879 L1181.07 681.879 L1180.51 681.879 L1179.95 681.879 L1179.39 681.879 L1178.83 681.879 L1178.27 681.879 L1177.71 681.879 L1177.15 681.879 L1176.6 681.879 L1176.04 681.879 L1175.48 681.879 L1174.92 681.879 L1174.36 681.879 L1173.8 681.879 L1173.24 681.879 L1172.68 681.879 L1172.12 681.879 L1171.56 681.879 L1171 681.879 L1170.44 681.879 L1169.88 681.879 L1169.33 681.879 L1168.77 681.879 L1168.21 681.879 L1167.65 681.879 L1167.09 681.879 L1166.53 681.879 L1165.97 681.879 L1165.41 681.879 L1164.85 681.879 L1164.29 681.879 L1163.73 681.879 L1163.17 681.879 L1162.61 681.879 L1162.05 681.879 L1161.5 681.879 L1160.94 681.879 L1160.38 681.879 L1159.82 681.879 L1159.26 681.879 L1158.7 681.879 L1158.14 681.879 L1157.58 681.879 L1157.02 681.879 L1156.46 681.879 L1155.9 681.879 L1155.34 681.879 L1154.78 681.879 L1154.23 681.879 L1153.67 681.879 L1153.11 681.879 L1152.55 681.879 L1151.99 681.879 L1151.43 681.879 L1150.87 681.879 L1150.31 681.879 L1149.75 681.879 L1149.19 681.879 L1148.63 681.879 L1148.07 681.879 L1147.51 681.879 L1146.96 681.879 L1146.4 681.879 L1145.84 681.879 L1145.28 681.879 L1144.72 681.879 L1144.16 681.879 L1143.6 681.879 L1143.04 681.879 L1142.48 681.879 L1141.92 681.879 L1141.36 681.879 L1140.8 681.879 L1140.24 681.879 L1139.68 681.879 L1139.13 681.879 L1138.57 681.879 L1138.01 681.879 L1137.45 681.879 L1136.89 681.879 L1136.33 681.879 L1135.77 681.879 L1135.21 681.879 L1134.65 681.879 L1134.09 681.879 L1133.53 681.879 L1132.97 681.879 L1132.41 681.879 L1131.86 681.879 L1131.3 681.879 L1130.74 681.879 L1130.18 681.879 L1129.62 681.879 L1129.06 681.879 L1128.5 681.879 L1127.94 681.879 L1127.38 681.879 L1126.82 681.879 L1126.26 681.879 L1125.7 681.879 L1125.14 681.879 L1124.59 681.879 L1124.03 681.879 L1123.47 681.879 L1122.91 681.879 L1122.35 681.879 L1121.79 681.879 L1121.23 681.879 L1120.67 681.879 L1120.11 681.879 L1119.55 681.879 L1118.99 681.879 L1118.43 681.879 L1117.87 681.879 L1117.31 681.879 L1116.76 681.879 L1116.2 681.879 L1115.64 681.879 L1115.08 681.879 L1114.52 681.879 L1113.96 681.879 L1113.4 681.879 L1112.84 681.879 L1112.28 681.879 L1111.72 681.879 L1111.16 681.879 L1110.6 681.879 L1110.04 681.879 L1109.49 681.879 L1108.93 681.879 L1108.37 681.879 L1107.81 681.879 L1107.25 681.879 L1106.69 681.879 L1106.13 681.879 L1105.57 681.879 L1105.01 681.879 L1104.45 681.879 L1103.89 681.879 L1103.33 681.879 L1102.77 681.879 L1102.22 681.879 L1101.66 681.879 L1101.1 681.879 L1100.54 681.879 L1099.98 681.879 L1099.42 681.879 L1098.86 681.879 L1098.3 681.879 L1097.74 681.879 L1097.18 681.879 L1096.62 681.879 L1096.06 681.879 L1095.5 681.879 L1094.94 681.879 L1094.39 681.879 L1093.83 681.879 L1093.27 681.879 L1092.71 681.879 L1092.15 681.879 L1091.59 681.879 L1091.03 681.879 L1090.47 681.879 L1089.91 681.879 L1089.35 681.879 L1088.79 681.879 L1088.23 681.879 L1087.67 681.879 L1087.12 681.879 L1086.56 681.879 L1086 681.879 L1085.44 681.879 L1084.88 681.879 L1084.32 681.879 L1083.76 681.879 L1083.2 681.879 L1082.64 681.879 L1082.08 681.879 L1081.52 681.879 L1080.96 681.879 L1080.4 681.879 L1079.85 681.879 L1079.29 681.879 L1078.73 681.879 L1078.17 681.879 L1077.61 681.879 L1077.05 681.879 L1076.49 681.879 L1075.93 681.879 L1075.37 681.879 L1074.81 681.879 L1074.25 681.879 L1073.69 681.879 L1073.13 681.879 L1072.57 681.879 L1072.02 681.879 L1071.46 681.879 L1070.9 681.879 L1070.34 681.879 L1069.78 681.879 L1069.22 681.879 L1068.66 681.879 L1068.1 681.879 L1067.54 681.879 L1066.98 681.879 L1066.42 681.879 L1065.86 681.879 L1065.3 681.879 L1064.75 681.879 L1064.19 681.879 L1063.63 681.879 L1063.07 681.879 L1062.51 681.879 L1061.95 681.879 L1061.39 681.879 L1060.83 681.879 L1060.27 681.879 L1059.71 681.879 L1059.15 681.879 L1058.59 681.879 L1058.03 681.879 L1057.48 681.879 L1056.92 681.879 L1056.36 681.879 L1055.8 681.879 L1055.24 681.879 L1054.68 681.879 L1054.12 681.879 L1053.56 681.879 L1053 681.879 L1052.44 681.879 L1051.88 681.879 L1051.32 681.879 L1050.76 681.879 L1050.2 681.879 L1049.65 681.879 L1049.09 681.879 L1048.53 681.879 L1047.97 681.879 L1047.41 681.879 L1046.85 681.879 L1046.29 681.879 L1045.73 681.879 L1045.17 681.879 L1044.61 681.879 L1044.05 681.879 L1043.49 681.879 L1042.93 681.879 L1042.38 681.879 L1041.82 681.879 L1041.26 681.879 L1040.7 681.879 L1040.14 681.879 L1039.58 681.879 L1039.02 681.879 L1038.46 681.879 L1037.9 681.879 L1037.34 681.879 L1036.78 681.879 L1036.22 681.879 L1035.66 681.879 L1035.1 681.879 L1034.55 681.879 L1033.99 681.879 L1033.43 681.879 L1032.87 681.879 L1032.31 681.879 L1031.75 681.879 L1031.19 681.879 L1030.63 681.879 L1030.07 681.879 L1029.51 681.879 L1028.95 681.879 L1028.39 681.879 L1027.83 681.879 L1027.28 681.879 L1026.72 681.879 L1026.16 681.879 L1025.6 681.879 L1025.04 681.879 L1024.48 681.879 L1023.92 681.879 L1023.36 681.879 L1022.8 681.879 L1022.24 681.879 L1021.68 681.879 L1021.12 681.879 L1020.56 681.879 L1020.01 681.879 L1019.45 681.879 L1018.89 681.879 L1018.33 681.879 L1017.77 681.879 L1017.21 681.879 L1016.65 681.879 L1016.09 681.879 L1015.53 681.879 L1014.97 681.879 L1014.41 681.879 L1013.85 681.879 L1013.29 681.879 L1012.73 681.879 L1012.18 681.879 L1011.62 681.879 L1011.06 681.879 L1010.5 681.879 L1009.94 681.879 L1009.38 681.879 L1008.82 681.879 L1008.26 681.879 L1007.7 681.879 L1007.14 681.879 L1006.58 681.879 L1006.02 681.879 L1005.46 681.879 L1004.91 681.879 L1004.35 681.879 L1003.79 681.879 L1003.23 681.879 L1002.67 681.879 L1002.11 681.879 L1001.55 681.879 L1000.99 681.879 L1000.43 681.879 L999.872 681.879 L999.313 681.879 L998.754 681.879 L998.194 681.879 L997.635 681.879 L997.076 681.879 L996.517 681.879 L995.957 681.879 L995.398 681.879 L994.839 681.879 L994.28 681.879 L993.72 681.879 L993.161 681.879 L992.602 681.879 L992.043 681.879 L991.483 681.879 L990.924 681.879 L990.365 681.879 L989.806 681.879 L989.246 681.879 L988.687 681.879 L988.128 681.879 L987.569 681.879 L987.009 681.879 L986.45 681.879 L985.891 681.879 L985.332 681.879 L984.772 681.879 L984.213 681.879 L983.654 681.879 L983.095 681.879 L982.535 681.879 L981.976 681.879 L981.417 681.879 L980.858 681.879 L980.298 681.879 L979.739 681.879 L979.18 681.879 L978.621 681.879 L978.061 681.879 L977.502 681.879 L976.943 681.879 L976.384 681.879 L975.824 681.879 L975.265 681.879 L974.706 681.879 L974.147 681.879 L973.587 681.879 L973.028 681.879 L972.469 681.879 L971.91 681.879 L971.35 681.879 L970.791 681.879 L970.232 681.879 L969.673 681.879 L969.113 681.879 L968.554 681.879 L967.995 681.879 L967.436 681.879 L966.876 681.879 L966.317 681.879 L965.758 681.879 L965.199 681.879 L964.639 681.879 L964.08 681.879 L963.521 681.879 L962.962 681.879 L962.402 681.879 L961.843 681.879 L961.284 681.879 L960.725 681.879 L960.165 681.879 L959.606 681.879 L959.047 681.879 L958.488 681.879 L957.928 681.879 L957.369 681.879 L956.81 681.879 L956.251 681.879 L955.691 681.879 L955.132 681.879 L954.573 681.879 L954.014 681.879 L953.454 681.879 L952.895 681.879 L952.336 681.879 L951.777 681.879 L951.217 681.879 L950.658 681.879 L950.099 681.879 L949.54 681.879 L948.98 681.879 L948.421 681.879 L947.862 681.879 L947.303 681.879 L946.743 681.879 L946.184 681.879 L945.625 681.879 L945.066 681.879 L944.506 681.879 L943.947 681.879 L943.388 681.879 L942.829 681.879 L942.269 681.879 L941.71 681.879 L941.151 681.879 L940.592 681.879 L940.032 681.879 L939.473 681.879 L938.914 681.879 L938.355 681.879 L937.795 681.879 L937.236 681.879 L936.677 681.879 L936.118 681.879 L935.558 681.879 L934.999 681.879 L934.44 681.879 L933.881 681.879 L933.321 681.879 L932.762 681.879 L932.203 681.879 L931.644 681.879 L931.084 681.879 L930.525 681.879 L929.966 681.879 L929.406 681.879 L928.847 681.879 L928.288 681.879 L927.729 681.879 L927.169 681.879 L926.61 681.879 L926.051 681.879 L925.492 681.879 L924.932 681.879 L924.373 681.879 L923.814 681.879 L923.255 681.879 L922.695 681.879 L922.136 681.879 L921.577 681.879 L921.018 681.879 L920.458 681.879 L919.899 681.879 L919.34 681.879 L918.781 681.879 L918.221 681.879 L917.662 681.879 L917.103 681.879 L916.544 681.879 L915.984 681.879 L915.425 681.879 L914.866 681.879 L914.307 681.879 L913.747 681.879 L913.188 681.879 L912.629 681.879 L912.07 681.879 L911.51 681.879 L910.951 681.879 L910.392 681.879 L909.833 681.879 L909.273 681.879 L908.714 681.879 L908.155 681.879 L907.596 681.879 L907.036 681.879 L906.477 681.879 L905.918 681.879 L905.359 681.879 L904.799 681.879 L904.24 681.879 L903.681 681.879 L903.122 681.879 L902.562 681.879 L902.003 681.879 L901.444 681.879 L900.885 681.879 L900.325 681.879 L899.766 681.879 L899.207 681.879 L898.648 681.879 L898.088 681.879 L897.529 681.879 L896.97 681.879 L896.411 681.879 L895.851 681.879 L895.292 681.879 L894.733 681.879 L894.174 681.879 L893.614 681.879 L893.055 681.879 L892.496 681.879 L891.937 681.879 L891.377 681.879 L890.818 681.879 L890.259 681.879 L889.7 681.879 L889.14 681.879 L888.581 681.879 L888.022 681.879 L887.463 681.879 L886.903 681.879 L886.344 681.879 L885.785 681.879 L885.226 681.879 L884.666 681.879 L884.107 681.879 L883.548 681.879 L882.989 681.879 L882.429 681.879 L881.87 681.879 L881.311 681.879 L880.752 681.879 L880.192 681.879 L879.633 681.879 L879.074 681.879 L878.515 681.879 L877.955 681.879 L877.396 681.879 L876.837 681.879 L876.278 681.879 L875.718 681.879 L875.159 681.879 L874.6 681.879 L874.041 681.879 L873.481 681.879 L872.922 681.879 L872.363 681.879 L871.804 681.879 L871.244 681.879 L870.685 681.879 L870.126 681.879 L869.567 681.879 L869.007 681.879 L868.448 681.879 L867.889 681.879 L867.33 681.879 L866.77 681.879 L866.211 681.879 L865.652 681.879 L865.093 681.879 L864.533 681.879 L863.974 681.879 L863.415 681.879 L862.856 681.879 L862.296 681.879 L861.737 681.879 L861.178 681.879 L860.619 681.879 L860.059 681.879 L859.5 681.879 L858.941 681.879 L858.382 681.879 L857.822 681.879 L857.263 681.879 L856.704 681.879 L856.145 681.879 L855.585 681.879 L855.026 681.879 L854.467 681.879 L853.908 681.879 L853.348 681.879 L852.789 681.879 L852.23 681.879 L851.671 681.879 L851.111 681.879 L850.552 681.879 L849.993 681.879 L849.434 681.879 L848.874 681.879 L848.315 681.879 L847.756 681.879 L847.197 681.879 L846.637 681.879 L846.078 681.879 L845.519 681.879 L844.96 681.879 L844.4 681.879 L843.841 681.879 L843.282 681.879 L842.723 681.879 L842.163 681.879 L841.604 681.879 L841.045 681.879 L840.486 681.879 L839.926 681.879 L839.367 681.879 L838.808 681.879 L838.249 681.879 L837.689 681.879 L837.13 681.879 L836.571 681.879 L836.012 681.879 L835.452 681.879 L834.893 681.879 L834.334 681.879 L833.775 681.879 L833.215 681.879 L832.656 681.879 L832.097 681.879 L831.538 681.879 L830.978 681.879 L830.419 681.879 L829.86 681.879 L829.301 681.879 L828.741 681.879 L828.182 681.879 L827.623 681.879 L827.064 681.879 L826.504 681.879 L825.945 681.879 L825.386 681.879 L824.827 681.879 L824.267 681.879 L823.708 681.879 L823.149 681.879 L822.59 681.879 L822.03 681.879 L821.471 681.879 L820.912 681.879 L820.353 681.879 L819.793 681.879 L819.234 681.879 L818.675 681.879 L818.116 681.879 L817.556 681.879 L816.997 681.879 L816.438 681.879 L815.879 681.879 L815.319 681.879 L814.76 681.879 L814.201 681.879 L813.642 681.879 L813.082 681.879 L812.523 681.879 L811.964 681.879 L811.405 681.879 L810.845 681.879 L810.286 681.879 L809.727 681.879 L809.168 681.879 L808.608 681.879 L808.049 681.879 L807.49 681.879 L806.931 681.879 L806.371 681.879 L805.812 681.879 L805.253 681.879 L804.693 681.879 L804.134 681.879 L803.575 681.879 L803.016 681.879 L802.456 681.879 L801.897 681.879 L801.338 681.879 L800.779 681.879 L800.219 681.879 L799.66 681.879 L799.101 681.879 L798.542 681.879 L797.982 681.879 L797.423 681.879 L796.864 681.879 L796.305 681.879 L795.745 681.879 L795.186 681.879 L794.627 681.879 L794.068 681.879 L793.508 681.879 L792.949 681.879 L792.39 681.879 L791.831 681.879 L791.271 681.879 L790.712 681.879 L790.153 681.879 L789.594 681.879 L789.034 681.879 L788.475 681.879 L787.916 681.879 L787.357 681.879 L786.797 681.879 L786.238 681.879 L785.679 681.879 L785.12 681.879 L784.56 681.879 L784.001 681.879 L783.442 681.879 L782.883 681.879 L782.323 681.879 L781.764 681.879 L781.205 681.879 L780.646 681.879 L780.086 681.879 L779.527 681.879 L778.968 681.879 L778.409 681.879 L777.849 681.879 L777.29 681.879 L776.731 681.879 L776.172 681.879 L775.612 681.879 L775.053 681.879 L774.494 681.879 L773.935 681.879 L773.375 681.879 L772.816 681.879 L772.257 681.879 L771.698 681.879 L771.138 681.879 L770.579 681.879 L770.02 681.879 L769.461 681.879 L768.901 681.879 L768.342 681.879 L767.783 681.879 L767.224 681.879 L766.664 681.879 L766.105 681.879 L765.546 681.879 L764.987 681.879 L764.427 681.879 L763.868 681.879 L763.309 681.879 L762.75 681.879 L762.19 681.879 L761.631 681.879 L761.072 681.879 L760.513 681.879 L759.953 681.879 L759.394 681.879 L758.835 681.879 L758.276 681.879 L757.716 681.879 L757.157 681.879 L756.598 681.879 L756.039 681.879 L755.479 681.879 L754.92 681.879 L754.361 681.879 L753.802 681.879 L753.242 681.879 L752.683 681.879 L752.124 681.879 L751.565 681.879 L751.005 681.879 L750.446 681.879 L749.887 681.879 L749.328 681.879 L748.768 681.879 L748.209 681.879 L747.65 681.879 L747.091 681.879 L746.531 681.879 L745.972 681.879 L745.413 681.879 L744.854 681.879 L744.294 681.879 L743.735 681.879 L743.176 681.879 L742.617 681.879 L742.057 681.879 L741.498 681.879 L740.939 681.879 L740.38 681.879 L739.82 681.879 L739.261 681.879 L738.702 681.879 L738.143 681.879 L737.583 681.879 L737.024 681.879 L736.465 681.879 L735.906 681.879 L735.346 681.879 L734.787 681.879 L734.228 681.879 L733.669 681.879 L733.109 681.879 L732.55 681.879 L731.991 681.879 L731.432 681.879 L730.872 681.879 L730.313 681.879 L729.754 681.879 L729.195 681.879 L728.635 681.879 L728.076 681.879 L727.517 681.879 L726.958 681.879 L726.398 681.879 L725.839 681.879 L725.28 681.879 L724.721 681.879 L724.161 681.879 L723.602 681.879 L723.043 681.879 L722.484 681.879 L721.924 681.879 L721.365 681.879 L720.806 681.879 L720.247 681.879  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip643)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.386 720.806,683.386 721.365,683.386 721.924,683.386 722.484,683.386 723.043,683.386 723.602,683.386 724.161,683.386 724.721,683.386 725.28,683.386 725.839,683.386 726.398,683.386 726.958,683.386 727.517,683.386 728.076,683.386 728.635,683.386 729.195,683.386 729.754,683.386 730.313,683.386 730.872,683.386 731.432,683.386 731.991,683.386 732.55,683.386 733.109,683.386 733.669,683.386 734.228,683.386 734.787,683.386 735.346,683.386 735.906,683.386 736.465,683.386 737.024,683.386 737.583,683.386 738.143,683.386 738.702,683.386 739.261,683.386 739.82,683.386 740.38,683.386 740.939,683.386 741.498,683.386 742.057,683.386 742.617,683.386 743.176,683.386 743.735,683.386 744.294,683.386 744.854,683.386 745.413,683.386 745.972,683.386 746.531,683.386 747.091,683.386 747.65,683.386 748.209,683.386 748.768,683.386 749.328,683.386 749.887,683.386 750.446,683.386 751.005,683.386 751.565,683.386 752.124,683.386 752.683,683.386 753.242,683.386 753.802,683.386 754.361,683.386 754.92,683.386 755.479,683.386 756.039,683.386 756.598,683.386 757.157,683.386 757.716,683.386 758.276,683.386 758.835,683.386 759.394,683.386 759.953,683.386 760.513,683.386 761.072,683.386 761.631,683.386 762.19,683.386 762.75,683.386 763.309,683.386 763.868,683.386 764.427,683.386 764.987,683.386 765.546,683.386 766.105,683.386 766.664,683.386 767.224,683.386 767.783,683.386 768.342,683.386 768.901,683.386 769.461,683.386 770.02,683.386 770.579,683.386 771.138,683.386 771.698,683.386 772.257,683.386 772.816,683.386 773.375,683.386 773.935,683.386 774.494,683.386 775.053,683.386 775.612,683.386 776.172,683.386 776.731,683.386 777.29,683.386 777.849,683.386 778.409,683.386 778.968,683.386 779.527,683.386 780.086,683.386 780.646,683.386 781.205,683.386 781.764,683.386 782.323,683.386 782.883,683.386 783.442,683.386 784.001,683.386 784.56,683.386 785.12,683.386 785.679,683.386 786.238,683.386 786.797,683.386 787.357,683.386 787.916,683.386 788.475,683.386 789.034,683.386 789.594,683.386 790.153,683.386 790.712,683.386 791.271,683.386 791.831,683.386 792.39,683.386 792.949,683.386 793.508,683.386 794.068,683.386 794.627,683.386 795.186,683.386 795.745,683.386 796.305,683.386 796.864,683.386 797.423,683.386 797.982,683.386 798.542,683.386 799.101,683.386 799.66,683.386 800.219,683.386 800.779,683.386 801.338,683.386 801.897,683.386 802.456,683.386 803.016,683.386 803.575,683.386 804.134,683.386 804.693,683.386 805.253,683.386 805.812,683.386 806.371,683.386 806.931,683.386 807.49,683.386 808.049,683.386 808.608,683.386 809.168,683.386 809.727,683.386 810.286,683.386 810.845,683.386 811.405,683.386 811.964,683.386 812.523,683.386 813.082,683.386 813.642,683.386 814.201,683.386 814.76,683.386 815.319,683.386 815.879,683.386 816.438,683.386 816.997,683.386 817.556,683.386 818.116,683.386 818.675,683.386 819.234,683.386 819.793,683.386 820.353,683.386 820.912,683.386 821.471,683.386 822.03,683.386 822.59,683.386 823.149,683.386 823.708,683.386 824.267,683.386 824.827,683.386 825.386,683.386 825.945,683.386 826.504,683.386 827.064,683.386 827.623,683.386 828.182,683.386 828.741,683.386 829.301,683.386 829.86,683.386 830.419,683.386 830.978,683.386 831.538,683.386 832.097,683.386 832.656,683.386 833.215,683.386 833.775,683.386 834.334,683.386 834.893,683.386 835.452,683.386 836.012,683.386 836.571,683.386 837.13,683.386 837.689,683.386 838.249,683.386 838.808,683.386 839.367,683.386 839.926,683.386 840.486,683.386 841.045,683.386 841.604,683.386 842.163,683.386 842.723,683.386 843.282,683.386 843.841,683.386 844.4,683.386 844.96,683.386 845.519,683.386 846.078,683.386 846.637,683.386 847.197,683.386 847.756,683.386 848.315,683.386 848.874,683.386 849.434,683.386 849.993,683.386 850.552,683.386 851.111,683.386 851.671,683.386 852.23,683.386 852.789,683.386 853.348,683.386 853.908,683.386 854.467,683.386 855.026,683.386 855.585,683.386 856.145,683.386 856.704,683.386 857.263,683.386 857.822,683.386 858.382,683.386 858.941,683.386 859.5,683.386 860.059,683.386 860.619,683.386 861.178,683.386 861.737,683.386 862.296,683.386 862.856,683.386 863.415,683.386 863.974,683.386 864.533,683.386 865.093,683.386 865.652,683.386 866.211,683.386 866.77,683.386 867.33,683.386 867.889,683.386 868.448,683.386 869.007,683.386 869.567,683.386 870.126,683.386 870.685,683.386 871.244,683.386 871.804,683.386 872.363,683.386 872.922,683.386 873.481,683.386 874.041,683.386 874.6,683.386 875.159,683.386 875.718,683.386 876.278,683.386 876.837,683.386 877.396,683.386 877.955,683.386 878.515,683.386 879.074,683.386 879.633,683.386 880.192,683.386 880.752,683.386 881.311,683.386 881.87,683.386 882.429,683.386 882.989,683.386 883.548,683.386 884.107,683.386 884.666,683.386 885.226,683.386 885.785,683.386 886.344,683.386 886.903,683.386 887.463,683.386 888.022,683.386 888.581,683.386 889.14,683.386 889.7,683.386 890.259,683.386 890.818,683.386 891.377,683.386 891.937,683.386 892.496,683.386 893.055,683.386 893.614,683.386 894.174,683.386 894.733,683.386 895.292,683.386 895.851,683.386 896.411,683.386 896.97,683.386 897.529,683.386 898.088,683.386 898.648,683.386 899.207,683.386 899.766,683.386 900.325,683.386 900.885,683.386 901.444,683.386 902.003,683.386 902.562,683.386 903.122,683.386 903.681,683.386 904.24,683.386 904.799,683.386 905.359,683.386 905.918,683.386 906.477,683.386 907.036,683.386 907.596,683.386 908.155,683.386 908.714,683.386 909.273,683.386 909.833,683.386 910.392,683.386 910.951,683.386 911.51,683.386 912.07,683.386 912.629,683.386 913.188,683.386 913.747,683.386 914.307,683.386 914.866,683.386 915.425,683.386 915.984,683.386 916.544,683.386 917.103,683.386 917.662,683.386 918.221,683.386 918.781,683.386 919.34,683.386 919.899,683.386 920.458,683.386 921.018,683.386 921.577,683.386 922.136,683.386 922.695,683.386 923.255,683.386 923.814,683.386 924.373,683.386 924.932,683.386 925.492,683.386 926.051,683.386 926.61,683.386 927.169,683.386 927.729,683.386 928.288,683.386 928.847,683.386 929.406,683.386 929.966,683.386 930.525,683.386 931.084,683.386 931.644,683.386 932.203,683.386 932.762,683.386 933.321,683.386 933.881,683.386 934.44,683.386 934.999,683.386 935.558,683.386 936.118,683.386 936.677,683.386 937.236,683.386 937.795,683.386 938.355,683.386 938.914,683.386 939.473,683.386 940.032,683.386 940.592,683.386 941.151,683.386 941.71,683.386 942.269,683.386 942.829,683.386 943.388,683.386 943.947,683.386 944.506,683.386 945.066,683.386 945.625,683.386 946.184,683.386 946.743,683.386 947.303,683.386 947.862,683.386 948.421,683.386 948.98,683.386 949.54,683.386 950.099,683.386 950.658,683.386 951.217,683.386 951.777,683.386 952.336,683.386 952.895,683.386 953.454,683.386 954.014,683.386 954.573,683.386 955.132,683.386 955.691,683.386 956.251,683.386 956.81,683.386 957.369,683.386 957.928,683.386 958.488,683.386 959.047,683.386 959.606,683.386 960.165,683.386 960.725,683.386 961.284,683.386 961.843,683.386 962.402,683.386 962.962,683.386 963.521,683.386 964.08,683.386 964.639,683.386 965.199,683.386 965.758,683.386 966.317,683.386 966.876,683.386 967.436,683.386 967.995,683.386 968.554,683.386 969.113,683.386 969.673,683.386 970.232,683.386 970.791,683.386 971.35,683.386 971.91,683.386 972.469,683.386 973.028,683.386 973.587,683.386 974.147,683.386 974.706,683.386 975.265,683.386 975.824,683.386 976.384,683.386 976.943,683.386 977.502,683.386 978.061,683.386 978.621,683.386 979.18,683.386 979.739,683.386 980.298,683.386 980.858,683.386 981.417,683.386 981.976,683.386 982.535,683.386 983.095,683.386 983.654,683.386 984.213,683.386 984.772,683.386 985.332,683.386 985.891,683.386 986.45,683.386 987.009,683.386 987.569,683.386 988.128,683.386 988.687,683.386 989.246,683.386 989.806,683.386 990.365,683.386 990.924,683.386 991.483,683.386 992.043,683.386 992.602,683.386 993.161,683.386 993.72,683.386 994.28,683.386 994.839,683.386 995.398,683.386 995.957,683.386 996.517,683.386 997.076,683.386 997.635,683.386 998.194,683.386 998.754,683.386 999.313,683.386 999.872,683.386 1000.43,683.386 1000.99,683.386 1001.55,683.386 1002.11,683.386 1002.67,683.386 1003.23,683.386 1003.79,683.386 1004.35,683.386 1004.91,683.386 1005.46,683.386 1006.02,683.386 1006.58,683.386 1007.14,683.386 1007.7,683.386 1008.26,683.386 1008.82,683.386 1009.38,683.386 1009.94,683.386 1010.5,683.386 1011.06,683.386 1011.62,683.386 1012.18,683.386 1012.73,683.386 1013.29,683.386 1013.85,683.386 1014.41,683.386 1014.97,683.386 1015.53,683.386 1016.09,683.386 1016.65,683.386 1017.21,683.386 1017.77,683.386 1018.33,683.386 1018.89,683.386 1019.45,683.386 1020.01,683.386 1020.56,683.386 1021.12,683.386 1021.68,683.386 1022.24,683.386 1022.8,683.386 1023.36,683.386 1023.92,683.386 1024.48,683.386 1025.04,683.386 1025.6,683.386 1026.16,683.386 1026.72,683.386 1027.28,683.386 1027.83,683.386 1028.39,683.386 1028.95,683.386 1029.51,683.386 1030.07,683.386 1030.63,683.386 1031.19,683.386 1031.75,683.386 1032.31,683.386 1032.87,683.386 1033.43,683.386 1033.99,683.386 1034.55,683.386 1035.1,683.386 1035.66,683.386 1036.22,683.386 1036.78,683.386 1037.34,683.386 1037.9,683.386 1038.46,683.386 1039.02,683.386 1039.58,683.386 1040.14,683.386 1040.7,683.386 1041.26,683.386 1041.82,683.386 1042.38,683.386 1042.93,683.386 1043.49,683.386 1044.05,683.386 1044.61,683.386 1045.17,683.386 1045.73,683.386 1046.29,683.386 1046.85,683.386 1047.41,683.386 1047.97,683.386 1048.53,683.386 1049.09,683.386 1049.65,683.386 1050.2,683.386 1050.76,683.386 1051.32,683.386 1051.88,683.386 1052.44,683.386 1053,683.386 1053.56,683.386 1054.12,683.386 1054.68,683.386 1055.24,683.386 1055.8,683.386 1056.36,683.386 1056.92,683.386 1057.48,683.386 1058.03,683.386 1058.59,683.386 1059.15,683.386 1059.71,683.386 1060.27,683.386 1060.83,683.386 1061.39,683.386 1061.95,683.386 1062.51,683.386 1063.07,683.386 1063.63,683.386 1064.19,683.386 1064.75,683.386 1065.3,683.386 1065.86,683.386 1066.42,683.386 1066.98,683.386 1067.54,683.386 1068.1,683.386 1068.66,683.386 1069.22,683.386 1069.78,683.386 1070.34,683.386 1070.9,683.386 1071.46,683.386 1072.02,683.386 1072.57,683.386 1073.13,683.386 1073.69,683.386 1074.25,683.386 1074.81,683.386 1075.37,683.386 1075.93,683.386 1076.49,683.386 1077.05,683.386 1077.61,683.386 1078.17,683.386 1078.73,683.386 1079.29,683.386 1079.85,683.386 1080.4,683.386 1080.96,683.386 1081.52,683.386 1082.08,683.386 1082.64,683.386 1083.2,683.386 1083.76,683.386 1084.32,683.386 1084.88,683.386 1085.44,683.386 1086,683.386 1086.56,683.386 1087.12,683.386 1087.67,683.386 1088.23,683.386 1088.79,683.386 1089.35,683.386 1089.91,683.386 1090.47,683.386 1091.03,683.386 1091.59,683.386 1092.15,683.386 1092.71,683.386 1093.27,683.386 1093.83,683.386 1094.39,683.386 1094.94,683.386 1095.5,683.386 1096.06,683.386 1096.62,683.386 1097.18,683.386 1097.74,683.386 1098.3,683.386 1098.86,683.386 1099.42,683.386 1099.98,683.386 1100.54,683.386 1101.1,683.386 1101.66,683.386 1102.22,683.386 1102.77,683.386 1103.33,683.386 1103.89,683.386 1104.45,683.386 1105.01,683.386 1105.57,683.386 1106.13,683.386 1106.69,683.386 1107.25,683.386 1107.81,683.386 1108.37,683.386 1108.93,683.386 1109.49,683.386 1110.04,683.386 1110.6,683.386 1111.16,683.386 1111.72,683.386 1112.28,683.386 1112.84,683.386 1113.4,683.386 1113.96,683.386 1114.52,683.386 1115.08,683.386 1115.64,683.386 1116.2,683.386 1116.76,683.386 1117.31,683.386 1117.87,683.386 1118.43,683.386 1118.99,683.386 1119.55,683.386 1120.11,683.386 1120.67,683.386 1121.23,683.386 1121.79,683.386 1122.35,683.386 1122.91,683.386 1123.47,683.386 1124.03,683.386 1124.59,683.386 1125.14,683.386 1125.7,683.386 1126.26,683.386 1126.82,683.386 1127.38,683.386 1127.94,683.386 1128.5,683.386 1129.06,683.386 1129.62,683.386 1130.18,683.386 1130.74,683.386 1131.3,683.386 1131.86,683.386 1132.41,683.386 1132.97,683.386 1133.53,683.386 1134.09,683.386 1134.65,683.386 1135.21,683.386 1135.77,683.386 1136.33,683.386 1136.89,683.386 1137.45,683.386 1138.01,683.386 1138.57,683.386 1139.13,683.386 1139.68,683.386 1140.24,683.386 1140.8,683.386 1141.36,683.386 1141.92,683.386 1142.48,683.386 1143.04,683.386 1143.6,683.386 1144.16,683.386 1144.72,683.386 1145.28,683.386 1145.84,683.386 1146.4,683.386 1146.96,683.386 1147.51,683.386 1148.07,683.386 1148.63,683.386 1149.19,683.386 1149.75,683.386 1150.31,683.386 1150.87,683.386 1151.43,683.386 1151.99,683.386 1152.55,683.386 1153.11,683.386 1153.67,683.386 1154.23,683.386 1154.78,683.386 1155.34,683.386 1155.9,683.386 1156.46,683.386 1157.02,683.386 1157.58,683.386 1158.14,683.386 1158.7,683.386 1159.26,683.386 1159.82,683.386 1160.38,683.386 1160.94,683.386 1161.5,683.386 1162.05,683.386 1162.61,683.386 1163.17,683.386 1163.73,683.386 1164.29,683.386 1164.85,683.386 1165.41,683.386 1165.97,683.386 1166.53,683.386 1167.09,683.386 1167.65,683.386 1168.21,683.386 1168.77,683.386 1169.33,683.386 1169.88,683.386 1170.44,683.386 1171,683.386 1171.56,683.386 1172.12,683.386 1172.68,683.386 1173.24,683.386 1173.8,683.386 1174.36,683.386 1174.92,683.386 1175.48,683.386 1176.04,683.386 1176.6,683.386 1177.15,683.386 1177.71,683.386 1178.27,683.386 1178.83,683.386 1179.39,683.386 1179.95,683.386 1180.51,683.386 1181.07,683.386 1181.63,683.386 1182.19,683.386 1182.75,683.386 1183.31,683.386 1183.87,683.386 1184.43,683.386 1184.98,683.386 1185.54,683.386 1186.1,683.386 1186.66,683.386 1187.22,683.386 1187.78,683.386 1188.34,683.386 1188.9,683.386 1189.46,683.386 1190.02,683.386 1190.58,683.386 1191.14,683.386 1191.7,683.386 1192.25,683.386 1192.81,683.386 1193.37,683.386 1193.93,683.386 1194.49,683.386 1195.05,683.386 1195.61,683.386 1196.17,683.386 1196.73,683.386 1197.29,683.386 1197.85,683.386 1198.41,683.386 1198.97,683.386 1199.52,683.386 1200.08,683.386 1200.64,683.386 1201.2,683.386 1201.76,683.386 1202.32,683.386 1202.88,683.386 1203.44,683.386 1204,683.386 1204.56,683.386 1205.12,683.386 1205.68,683.386 1206.24,683.386 1206.8,683.386 1207.35,683.386 1207.91,683.386 1208.47,683.386 1209.03,683.386 1209.59,683.386 1210.15,683.386 1210.71,683.386 1211.27,683.386 1211.83,683.386 1212.39,683.386 1212.95,683.386 1213.51,683.386 1214.07,683.386 1214.62,683.386 1215.18,683.386 1215.74,683.386 1216.3,683.386 1216.86,683.386 1217.42,683.386 1217.98,683.386 1218.54,683.386 1219.1,683.386 1219.66,683.386 1220.22,683.386 1220.78,683.386 1221.34,683.386 1221.89,683.386 1222.45,683.386 1223.01,683.386 1223.57,683.386 1224.13,683.386 1224.69,683.386 1225.25,683.386 1225.81,683.386 1226.37,683.386 1226.93,683.386 1227.49,683.386 1228.05,683.386 1228.61,683.386 1229.17,683.386 1229.72,683.386 1230.28,683.386 1230.84,683.386 1231.4,683.386 1231.96,683.386 1232.52,683.386 1233.08,683.386 1233.64,683.386 1234.2,683.386 1234.76,683.386 1235.32,683.386 1235.88,683.386 1236.44,683.386 1236.99,683.386 1237.55,683.386 1238.11,683.386 1238.67,683.386 1239.23,683.386 1239.79,683.386 1240.35,683.386 1240.91,683.386 1241.47,683.386 1242.03,683.386 1242.59,683.386 1243.15,683.386 1243.71,683.386 1244.26,683.386 1244.82,683.386 1245.38,683.386 1245.94,683.386 1246.5,683.386 1247.06,683.386 1247.62,683.386 1248.18,683.386 1248.74,683.386 1249.3,683.386 1249.86,683.386 1250.42,683.386 1250.98,683.386 1251.54,683.386 1252.09,683.386 1252.65,683.386 1253.21,683.386 1253.77,683.386 1254.33,683.386 1254.89,683.386 1255.45,683.386 1256.01,683.386 1256.57,683.386 1257.13,683.386 1257.69,683.386 1258.25,683.386 1258.81,683.386 1259.36,683.386 1259.92,683.386 1260.48,683.386 1261.04,683.386 1261.6,683.386 1262.16,683.386 1262.72,683.386 1263.28,683.386 1263.84,683.386 1264.4,683.386 1264.96,683.386 1265.52,683.386 1266.08,683.386 1266.63,683.386 1267.19,683.386 1267.75,683.386 1268.31,683.386 1268.87,683.386 1269.43,683.386 1269.99,683.386 1270.55,683.386 1271.11,683.386 1271.67,683.386 1272.23,683.386 1272.79,683.386 1273.35,683.386 1273.91,683.386 1274.46,683.386 1275.02,683.386 1275.58,683.386 1276.14,683.386 1276.7,683.386 1277.26,683.386 1277.82,683.386 1278.38,683.386 1278.94,683.386 1279.5,683.386 1280.06,683.386 1280.62,683.386 1281.18,683.386 1281.73,683.386 1282.29,683.386 1282.85,683.386 1283.41,683.386 1283.97,683.386 1284.53,683.386 1285.09,683.386 1285.65,683.386 1286.21,683.386 1286.77,683.386 1287.33,683.386 1287.89,683.386 1288.45,683.386 1289,683.386 1289.56,683.386 1290.12,683.386 1290.68,683.386 1291.24,683.386 1291.8,683.386 1292.36,683.386 1292.92,683.386 1293.48,683.386 1294.04,683.386 1294.6,683.386 1295.16,683.386 1295.72,683.386 1296.28,683.386 1296.83,683.386 1297.39,683.386 1297.95,683.386 1298.51,683.386 1299.07,683.386 1299.63,683.386 1300.19,683.386 1300.75,683.386 1301.31,683.386 1301.87,683.386 1302.43,683.386 1302.99,683.386 1303.55,683.386 1304.1,683.386 1304.66,683.386 1305.22,683.386 1305.78,683.386 1306.34,683.386 1306.9,683.386 1307.46,683.386 1308.02,683.386 1308.58,683.386 1309.14,683.386 1309.7,683.386 1310.26,683.386 1310.82,683.386 1311.38,683.386 1311.93,683.386 1312.49,683.386 1313.05,683.386 1313.61,683.386 1314.17,683.386 1314.73,683.386 1315.29,683.386 1315.85,683.386 1316.41,683.386 1316.97,683.386 1317.53,683.386 1318.09,683.386 1318.65,683.386 1319.2,683.386 1319.76,683.386 1320.32,683.386 1320.88,683.386 1321.44,683.386 1322,683.386 1322.56,683.386 1323.12,683.386 1323.68,683.386 1324.24,683.386 1324.8,683.386 1325.36,683.386 1325.92,683.386 1326.47,683.386 1327.03,683.386 1327.59,683.386 1328.15,683.386 1328.71,683.386 1329.27,683.386 1329.83,683.386 1330.39,683.386 1330.95,683.386 1331.51,683.386 1332.07,683.386 1332.63,683.386 1333.19,683.386 1333.75,683.386 1334.3,683.386 1334.86,683.386 1335.42,683.386 1335.98,683.386 1336.54,683.386 1337.1,683.386 1337.66,683.386 1338.22,683.386 1338.78,683.386 1339.34,683.386 1339.9,683.386 1340.46,683.386 1341.02,683.386 1341.57,683.386 1342.13,683.386 1342.69,683.386 1343.25,683.386 1343.81,683.386 1344.37,683.386 1344.93,683.386 1345.49,683.386 1346.05,683.386 1346.61,683.386 1347.17,683.386 1347.73,683.386 1348.29,683.386 1348.84,683.386 1349.4,683.386 1349.96,683.386 1350.52,683.386 1351.08,683.386 1351.64,683.386 1352.2,683.386 1352.76,683.386 1353.32,683.386 1353.88,683.386 1354.44,683.386 1355,683.386 1355.56,683.386 1356.12,683.386 1356.67,683.386 1357.23,683.386 1357.79,683.386 1358.35,683.386 1358.91,683.386 1359.47,683.386 1360.03,683.386 1360.59,683.386 1361.15,683.386 1361.71,683.386 1362.27,683.386 1362.83,683.386 1363.39,683.386 1363.94,683.386 1364.5,683.386 1365.06,683.386 1365.62,683.386 1366.18,683.386 1366.74,683.386 1367.3,683.386 1367.86,683.386 1368.42,683.386 1368.98,683.386 1369.54,683.386 1370.1,683.386 1370.66,683.386 1371.21,683.386 1371.77,683.386 1372.33,683.386 1372.89,683.386 1373.45,683.386 1374.01,683.386 1374.57,683.386 1375.13,683.386 1375.69,683.386 1376.25,683.386 1376.81,683.386 1377.37,683.386 1377.93,683.386 1378.49,683.386 1379.04,683.386 1379.6,683.386 1380.16,683.386 1380.72,683.386 1381.28,683.386 1381.84,683.386 1382.4,683.386 1382.96,683.386 1383.52,683.386 1384.08,683.386 1384.64,683.386 1385.2,683.386 1385.76,683.386 1386.31,683.386 1386.87,683.386 1387.43,683.386 1387.99,683.386 1388.55,683.386 1389.11,683.386 1389.67,683.386 1390.23,683.386 1390.79,683.386 1391.35,683.386 1391.91,683.386 1392.47,683.386 1393.03,683.386 1393.58,683.386 1394.14,683.386 1394.7,683.386 1395.26,683.386 1395.82,683.386 1396.38,683.386 1396.94,683.386 1397.5,683.386 1398.06,683.386 1398.62,683.386 1399.18,683.386 1399.74,683.386 1400.3,683.386 1400.86,683.386 1401.41,683.386 1401.97,683.386 1402.53,683.386 1403.09,683.386 1403.65,683.386 1404.21,683.386 1404.77,683.386 1405.33,683.386 1405.89,683.386 1406.45,683.386 1407.01,683.386 1407.57,683.386 1408.13,683.386 1408.68,683.386 1409.24,683.386 1409.8,683.386 1410.36,683.386 1410.92,683.386 1411.48,683.386 1412.04,683.386 1412.6,683.386 1413.16,683.386 1413.72,683.386 1414.28,683.386 1414.84,683.386 1415.4,683.386 1415.95,683.386 1416.51,683.386 1417.07,683.386 1417.63,683.386 1418.19,683.386 1418.75,683.386 1419.31,683.386 1419.87,683.386 1420.43,683.386 1420.99,683.386 1421.55,683.386 1422.11,683.386 1422.67,683.386 1423.23,683.386 1423.78,683.386 1424.34,683.386 1424.9,683.386 1425.46,683.386 1426.02,683.386 1426.58,683.386 1427.14,683.386 1427.7,683.386 1428.26,683.386 1428.82,683.386 1429.38,683.386 1429.94,683.386 1430.5,683.386 1431.05,683.386 1431.61,683.386 1432.17,683.386 1432.73,683.386 1433.29,683.386 1433.85,683.386 1434.41,683.386 1434.97,683.386 1435.53,683.386 1436.09,683.386 1436.65,683.386 1437.21,683.386 1437.77,683.386 1438.33,683.386 1438.88,683.386 1439.44,683.386 1440,683.386 1440.56,683.386 1441.12,683.386 1441.68,683.386 1442.24,683.386 1442.8,683.386 1443.36,683.386 1443.92,683.386 1444.48,683.386 1445.04,683.386 1445.6,683.386 1446.15,683.386 1446.71,683.386 1447.27,683.386 1447.83,683.386 1448.39,683.386 1448.95,683.386 1449.51,683.386 1450.07,683.386 1450.63,683.386 1451.19,683.386 1451.75,683.386 1452.31,683.386 1452.87,683.386 1453.42,683.386 1453.98,683.386 1454.54,683.386 1455.1,683.386 1455.66,683.386 1456.22,683.386 1456.78,683.386 1457.34,683.386 1457.9,683.386 1458.46,683.386 1459.02,683.386 1459.58,683.386 1460.14,683.386 1460.7,683.386 1461.25,683.386 1461.81,683.386 1462.37,683.386 1462.93,683.386 1463.49,683.386 1464.05,683.386 1464.61,683.386 1465.17,683.386 1465.73,683.386 1466.29,683.386 1466.85,683.386 1467.41,683.386 1467.97,683.386 1468.52,683.386 1469.08,683.386 1469.64,683.386 1470.2,683.386 1470.76,683.386 1471.32,683.386 1471.88,683.386 1472.44,683.386 1473,683.386 1473.56,683.386 1474.12,683.386 1474.68,683.386 1475.24,683.386 1475.79,683.386 1476.35,683.386 1476.91,683.386 1477.47,683.386 1478.03,683.386 1478.59,683.386 1479.15,683.386 1479.71,683.386 1480.27,683.386 1480.83,683.386 1481.39,683.386 1481.95,683.386 1482.51,683.386 1483.07,683.386 1483.62,683.386 1484.18,683.386 1484.74,683.386 1485.3,683.386 1485.86,683.386 1486.42,683.386 1486.98,683.386 1487.54,683.386 1488.1,683.386 1488.66,683.386 1489.22,683.386 1489.78,683.386 1490.34,683.386 1490.89,683.386 1491.45,683.386 1492.01,683.386 1492.57,683.386 1493.13,683.386 1493.69,683.386 1494.25,683.386 1494.81,683.386 1495.37,683.386 1495.93,683.386 1496.49,683.386 1497.05,683.386 1497.61,683.386 1498.16,683.386 1498.72,683.386 1499.28,683.386 1499.84,683.386 1500.4,683.386 1500.96,683.386 1501.52,683.386 1502.08,683.386 1502.64,683.386 1503.2,683.386 1503.76,683.386 1504.32,683.386 1504.88,683.386 1505.44,683.386 1505.99,683.386 1506.55,683.386 1507.11,683.386 1507.67,683.386 1508.23,683.386 1508.79,683.386 1509.35,683.386 1509.91,683.386 1510.47,683.386 1511.03,683.386 1511.59,683.386 1512.15,683.386 1512.71,683.386 1513.26,683.386 1513.82,683.386 1514.38,683.386 1514.94,683.386 1515.5,683.386 1516.06,683.386 1516.62,683.386 1517.18,683.386 1517.74,683.386 1518.3,683.386 1518.86,683.386 1519.42,683.386 1519.98,683.386 1520.53,683.386 1521.09,683.386 1521.65,683.386 1522.21,683.386 1522.77,683.386 1523.33,683.386 1523.89,683.386 1524.45,683.386 1525.01,683.386 1525.57,683.386 1526.13,683.386 1526.69,683.386 1527.25,683.386 1527.81,683.386 1528.36,683.386 1528.92,683.386 1529.48,683.386 1530.04,683.386 1530.6,683.386 1531.16,683.386 1531.72,683.386 1532.28,683.386 1532.84,683.386 1533.4,683.386 1533.96,683.386 1534.52,683.386 1535.08,683.386 1535.63,683.386 1536.19,683.386 1536.75,683.386 1537.31,683.386 1537.87,683.386 1538.43,683.386 1538.99,683.386 1539.55,683.386 1540.11,683.386 1540.67,683.386 1541.23,683.386 1541.79,683.386 1542.35,683.386 1542.9,683.386 1543.46,683.386 1544.02,683.386 1544.58,683.386 1545.14,683.386 1545.7,683.386 1546.26,683.386 1546.82,683.386 1547.38,683.386 1547.94,683.386 1548.5,683.386 1549.06,683.386 1549.62,683.386 1550.18,683.386 1550.73,683.386 1551.29,683.386 1551.85,683.386 1552.41,683.386 1552.97,683.386 1553.53,683.386 1554.09,683.386 1554.65,683.386 1555.21,683.386 1555.77,683.386 1556.33,683.386 1556.89,683.386 1557.45,683.386 1558,683.386 1558.56,683.386 1559.12,683.386 1559.68,683.386 1560.24,683.386 1560.8,683.386 1561.36,683.386 1561.92,683.386 1562.48,683.386 1563.04,683.386 1563.6,683.386 1564.16,683.386 1564.72,683.386 1565.28,683.386 1565.83,683.386 1566.39,683.386 1566.95,683.386 1567.51,683.386 1568.07,683.386 1568.63,683.386 1569.19,683.386 1569.75,683.386 1570.31,683.386 1570.87,683.386 1571.43,683.386 1571.99,683.386 1572.55,683.386 1573.1,683.386 1573.66,683.386 1574.22,683.386 1574.78,683.386 1575.34,683.386 1575.9,683.386 1576.46,683.386 1577.02,683.386 1577.58,683.386 1578.14,683.386 1578.7,683.386 1579.26,683.386 1579.82,683.386 1580.37,683.386 1580.93,683.386 1581.49,683.386 1582.05,683.386 1582.61,683.386 1583.17,683.386 1583.73,683.386 1584.29,683.386 1584.85,683.386 1585.41,683.386 1585.97,683.386 1586.53,683.386 1587.09,683.386 1587.65,683.386 1588.2,683.386 1588.76,683.386 1589.32,683.386 1589.88,683.386 1590.44,683.386 1591,683.386 1591.56,683.386 1592.12,683.386 1592.68,683.386 1593.24,683.386 1593.8,683.386 1594.36,683.386 1594.92,683.386 1595.47,683.386 1596.03,683.386 1596.59,683.386 1597.15,683.386 1597.71,683.386 1598.27,683.386 1598.83,683.386 1599.39,683.386 1599.95,683.386 1600.51,683.386 1601.07,683.386 1601.63,683.386 1602.19,683.386 1602.74,683.386 1603.3,683.386 1603.86,683.386 1604.42,683.386 1604.98,683.386 1605.54,683.386 1606.1,683.386 1606.66,683.386 1607.22,683.386 1607.78,683.386 1608.34,683.386 1608.9,683.386 1609.46,683.386 1610.02,683.386 1610.57,683.386 1611.13,683.386 1611.69,683.386 1612.25,683.386 1612.81,683.386 1613.37,683.386 1613.93,683.386 1614.49,683.386 1615.05,683.386 1615.61,683.386 1616.17,683.386 1616.73,683.386 1617.29,683.386 1617.84,683.386 1618.4,683.386 1618.96,683.386 1619.52,683.386 1620.08,683.386 1620.64,683.386 1621.2,683.386 1621.76,683.386 1622.32,683.386 1622.88,683.386 1623.44,683.386 1624,683.386 1624.56,683.386 1625.11,683.386 1625.67,683.386 1626.23,683.386 1626.79,683.386 1627.35,683.386 1627.91,683.386 1628.47,683.386 1629.03,683.386 1629.59,683.386 1630.15,683.386 1630.71,683.386 1631.27,683.386 1631.83,683.386 1632.39,683.386 1632.94,683.386 1633.5,683.386 1634.06,683.386 1634.62,683.386 1635.18,683.386 1635.74,683.386 1636.3,683.386 1636.86,683.386 1637.42,683.386 1637.98,683.386 1638.54,683.386 1639.1,683.386 1639.66,683.386 1640.21,683.386 1640.77,683.386 1641.33,683.386 1641.89,683.386 1642.45,683.386 1643.01,683.386 1643.57,683.386 1644.13,683.386 1644.69,683.386 1645.25,683.386 1645.81,683.386 1646.37,683.386 1646.93,683.386 1647.48,683.386 1648.04,683.386 1648.6,683.386 1649.16,683.386 1649.72,683.386 1650.28,683.386 1650.84,683.386 1651.4,683.386 1651.96,683.386 1652.52,683.386 1653.08,683.386 1653.64,683.386 1654.2,683.386 1654.76,683.386 1655.31,683.386 1655.87,683.386 1656.43,683.386 1656.99,683.386 1657.55,683.386 1658.11,683.386 1658.67,683.386 1659.23,683.386 1659.79,683.386 1660.35,683.386 1660.91,683.386 1661.47,683.386 1662.03,683.386 1662.58,683.386 1663.14,683.386 1663.7,683.386 1664.26,683.386 1664.82,683.386 1665.38,683.386 1665.94,683.386 1666.5,683.386 1667.06,683.386 1667.62,683.386 1668.18,683.386 1668.74,683.386 1669.3,683.386 1669.85,683.386 1670.41,683.386 1670.97,683.386 1671.53,683.386 1672.09,683.386 1672.65,683.386 1673.21,683.386 1673.77,683.386 1674.33,683.386 1674.89,683.386 1675.45,683.386 1676.01,683.386 1676.57,683.386 1677.13,683.386 1677.68,683.386 1678.24,683.386 1678.8,683.386 1679.36,683.386 1679.92,683.386 1680.48,683.386 1681.04,683.386 1681.6,683.386 1682.16,683.386 1682.72,683.386 1683.28,683.386 1683.84,683.386 1684.4,683.386 1684.95,683.386 1685.51,683.386 1686.07,683.386 1686.63,683.386 1687.19,683.386 1687.75,683.386 1688.31,683.386 1688.87,683.386 1689.43,683.386 1689.99,683.386 1690.55,683.386 1691.11,683.386 1691.67,683.386 1692.23,683.386 1692.78,683.386 1693.34,683.386 1693.9,683.386 1694.46,683.386 1695.02,683.386 1695.58,683.386 1696.14,683.386 1696.7,683.386 1697.26,683.386 1697.82,683.386 1698.38,683.386 1698.94,683.386 1699.5,683.386 1700.05,683.386 1700.61,683.386 1701.17,683.386 1701.73,683.386 1702.29,683.386 1702.85,683.386 1703.41,683.386 1703.97,683.386 1704.53,683.386 1705.09,683.386 1705.65,683.386 1706.21,683.386 1706.77,683.386 1707.32,683.386 1707.88,683.386 1708.44,683.386 1709,683.386 1709.56,683.386 1710.12,683.386 1710.68,683.386 1711.24,683.386 1711.8,683.386 1712.36,683.386 1712.92,683.386 1713.48,683.386 1714.04,683.386 1714.6,683.386 1715.15,683.386 1715.71,683.386 1716.27,683.386 1716.83,683.386 1717.39,683.386 1717.95,683.386 1718.51,683.386 1719.07,683.386 1719.63,683.386 1720.19,683.386 1720.75,683.386 1721.31,683.386 1721.87,683.386 1722.42,683.386 1722.98,683.386 1723.54,683.386 1724.1,683.386 1724.66,683.386 1725.22,683.386 1725.78,683.386 1726.34,683.386 1726.9,683.386 1727.46,683.386 1728.02,683.386 1728.58,683.386 1729.14,683.386 1729.69,683.386 1730.25,683.386 1730.81,683.386 1731.37,683.386 1731.93,683.386 1732.49,683.386 1733.05,683.386 1733.61,683.386 1734.17,683.386 1734.73,683.386 1735.29,683.386 1735.85,683.386 1736.41,683.386 1736.97,683.386 1737.52,683.386 1738.08,683.386 1738.64,683.386 1739.2,683.386 1739.76,683.386 1740.32,683.386 1740.88,683.386 1741.44,683.386 1742,683.386 1742.56,683.386 1743.12,683.386 1743.68,683.386 1744.24,683.386 1744.79,683.386 1745.35,683.386 1745.91,683.386 1746.47,683.386 1747.03,683.386 1747.59,683.386 1748.15,683.386 1748.71,683.386 1749.27,683.386 1749.83,683.386 1750.39,683.386 1750.95,683.386 1751.51,683.386 1752.06,683.386 1752.62,683.386 1753.18,683.386 1753.74,683.386 1754.3,683.386 1754.86,683.386 1755.42,683.386 1755.98,683.386 1756.54,683.386 1757.1,683.386 1757.66,683.386 1758.22,683.386 1758.78,683.386 1759.34,683.386 1759.89,683.386 1760.45,683.386 1761.01,683.386 1761.57,683.386 1762.13,683.386 1762.69,683.386 1763.25,683.386 1763.81,683.386 1764.37,683.386 1764.93,683.386 1765.49,683.386 1766.05,683.386 1766.61,683.386 1767.16,683.386 1767.72,683.386 1768.28,683.386 1768.84,683.386 1769.4,683.386 1769.96,683.386 1770.52,683.386 1771.08,683.386 1771.64,683.386 1772.2,683.386 1772.76,683.386 1773.32,683.386 1773.88,683.386 1774.43,683.386 1774.99,683.386 1775.55,683.386 1776.11,683.386 1776.67,683.386 1777.23,683.386 1777.79,683.386 1778.35,683.386 1778.91,683.386 1779.47,683.386 1780.03,683.386 1780.59,683.386 1781.15,683.386 1781.71,683.386 1782.26,683.386 1782.82,683.386 1783.38,683.386 1783.94,683.386 1784.5,683.386 1785.06,683.386 1785.62,683.386 1786.18,683.386 1786.74,683.386 1787.3,683.386 1787.86,683.386 1788.42,683.386 1788.98,683.386 1789.53,683.386 1790.09,683.386 1790.65,683.386 1791.21,683.386 1791.77,683.386 1792.33,683.386 1792.89,683.386 1793.45,683.386 1794.01,683.386 1794.57,683.386 1795.13,683.386 1795.69,683.386 1796.25,683.386 1796.8,683.386 1797.36,683.386 1797.92,683.386 1798.48,683.386 1799.04,683.386 1799.6,683.386 1800.16,683.386 1800.72,683.386 1801.28,683.386 1801.84,683.386 1802.4,683.386 1802.96,683.386 1803.52,683.386 1804.08,683.386 1804.63,683.386 1805.19,683.386 1805.75,683.386 1806.31,683.386 1806.87,683.386 1807.43,683.386 1807.99,683.386 1808.55,683.386 1809.11,683.386 1809.67,683.386 1810.23,683.386 1810.79,683.386 1811.35,683.386 1811.9,683.386 1812.46,683.386 1813.02,683.386 1813.58,683.386 1814.14,683.386 1814.7,683.386 1815.26,683.386 1815.82,683.386 1816.38,683.386 1816.94,683.386 1817.5,683.386 1818.06,683.386 1818.62,683.386 1819.18,683.386 1819.73,683.386 1820.29,683.386 1820.85,683.386 1821.41,683.386 1821.97,683.386 1822.53,683.386 1823.09,683.386 1823.65,683.386 1824.21,683.386 1824.77,683.386 1825.33,683.386 1825.89,683.386 1826.45,683.386 1827,683.386 1827.56,683.386 1828.12,683.386 1828.68,683.386 1829.24,683.386 1829.8,683.386 1830.36,683.386 1830.92,683.386 1831.48,683.386 1832.04,683.386 1832.6,683.386 1833.16,683.386 1833.72,683.386 1834.27,683.386 1834.83,683.386 1835.39,683.386 1835.95,683.386 1836.51,683.386 1837.07,683.386 1837.63,683.386 1838.19,683.386 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029400475822655 ± 0.023814232150761096\nProjected Energy: -4.014083990861429 ± (0.007445592237237619, 0.007584204701065467)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.588357</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.8916e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.8976e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.1812e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.653e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.186e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.658e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133743\n -0.7590191922770853\n  0.1358418221962303\n  0.15789998694608087\n  0.8767114411781343\n  1.5305929970973216\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518347\n  4.862107221562172\n  6.260694850380595\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Custom-Hamiltonians-and-observables","page":"Custom Hamiltonians","title":"Custom Hamiltonians and observables","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the submodule Rimu.InterfaceTests, see Interface tests.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator type hierarchy works in Rimu. For an example of how to code custom Hamiltonians that are not part of the Rimu.jl package, see RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy in a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
