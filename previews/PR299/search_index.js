var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2109519793520603 ± 0.0012766796062281837\n   G2(1) = 0.9167088783915424 ± 0.0005754064579207214\n   G2(2) = 0.9822670032236889 ± 0.000549080064384189\n   G2(3) = 0.9910962574174769 ± 0.0008590270207969009\n   G2(4) = 0.9822670032236889 ± 0.000549080064384189\n   G2(5) = 0.9167088783915424 ± 0.0005754064579207214\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.031109893152169 ± 0.1356463288601138\n   Replica 2: -3.95464064877774 ± 0.138485218844025\n   Replica 3: -3.918177479562748 ± 0.12275065336042333\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip830\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip830)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip831\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip830)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip832\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.42 2211.02,1003.42 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.012 2211.02,746.012 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.606 2211.02,488.606 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.2 2211.02,231.2 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.42 423.181,1003.42 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.012 423.181,746.012 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.606 423.181,488.606 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.2 423.181,231.2 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M290.043 1016.76 L306.363 1016.76 L306.363 1020.7 L284.418 1020.7 L284.418 1016.76 Q287.08 1014.01 291.664 1009.38 Q296.27 1004.73 297.451 1003.38 Q299.696 1000.86 300.576 999.125 Q301.478 997.365 301.478 995.675 Q301.478 992.921 299.534 991.185 Q297.613 989.449 294.511 989.449 Q292.312 989.449 289.858 990.213 Q287.427 990.976 284.65 992.527 L284.65 987.805 Q287.474 986.671 289.927 986.092 Q292.381 985.514 294.418 985.514 Q299.789 985.514 302.983 988.199 Q306.177 990.884 306.177 995.375 Q306.177 997.504 305.367 999.425 Q304.58 1001.32 302.474 1003.92 Q301.895 1004.59 298.793 1007.81 Q295.691 1011 290.043 1016.76 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M316.224 986.138 L334.58 986.138 L334.58 990.074 L320.506 990.074 L320.506 998.546 Q321.524 998.199 322.543 998.037 Q323.562 997.851 324.58 997.851 Q330.367 997.851 333.747 1001.02 Q337.126 1004.19 337.126 1009.61 Q337.126 1015.19 333.654 1018.29 Q330.182 1021.37 323.862 1021.37 Q321.687 1021.37 319.418 1021 Q317.173 1020.63 314.765 1019.89 L314.765 1015.19 Q316.849 1016.32 319.071 1016.88 Q321.293 1017.43 323.77 1017.43 Q327.774 1017.43 330.112 1015.33 Q332.45 1013.22 332.45 1009.61 Q332.45 1006 330.112 1003.89 Q327.774 1001.79 323.77 1001.79 Q321.895 1001.79 320.02 1002.2 Q318.168 1002.62 316.224 1003.5 L316.224 986.138 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M356.339 989.217 Q352.728 989.217 350.899 992.782 Q349.094 996.324 349.094 1003.45 Q349.094 1010.56 350.899 1014.12 Q352.728 1017.67 356.339 1017.67 Q359.973 1017.67 361.779 1014.12 Q363.608 1010.56 363.608 1003.45 Q363.608 996.324 361.779 992.782 Q359.973 989.217 356.339 989.217 M356.339 985.514 Q362.149 985.514 365.205 990.12 Q368.284 994.703 368.284 1003.45 Q368.284 1012.18 365.205 1016.79 Q362.149 1021.37 356.339 1021.37 Q350.529 1021.37 347.45 1016.79 Q344.395 1012.18 344.395 1003.45 Q344.395 994.703 347.45 990.12 Q350.529 985.514 356.339 985.514 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M286.062 728.732 L304.418 728.732 L304.418 732.667 L290.344 732.667 L290.344 741.14 Q291.363 740.792 292.381 740.63 Q293.4 740.445 294.418 740.445 Q300.205 740.445 303.585 743.616 Q306.964 746.788 306.964 752.204 Q306.964 757.783 303.492 760.885 Q300.02 763.963 293.701 763.963 Q291.525 763.963 289.256 763.593 Q287.011 763.223 284.603 762.482 L284.603 757.783 Q286.687 758.917 288.909 759.473 Q291.131 760.028 293.608 760.028 Q297.613 760.028 299.951 757.922 Q302.288 755.815 302.288 752.204 Q302.288 748.593 299.951 746.487 Q297.613 744.38 293.608 744.38 Q291.733 744.38 289.858 744.797 Q288.006 745.214 286.062 746.093 L286.062 728.732 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M326.177 731.811 Q322.566 731.811 320.737 735.376 Q318.932 738.917 318.932 746.047 Q318.932 753.153 320.737 756.718 Q322.566 760.26 326.177 760.26 Q329.811 760.26 331.617 756.718 Q333.446 753.153 333.446 746.047 Q333.446 738.917 331.617 735.376 Q329.811 731.811 326.177 731.811 M326.177 728.107 Q331.987 728.107 335.043 732.714 Q338.122 737.297 338.122 746.047 Q338.122 754.774 335.043 759.38 Q331.987 763.963 326.177 763.963 Q320.367 763.963 317.288 759.38 Q314.233 754.774 314.233 746.047 Q314.233 737.297 317.288 732.714 Q320.367 728.107 326.177 728.107 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M356.339 731.811 Q352.728 731.811 350.899 735.376 Q349.094 738.917 349.094 746.047 Q349.094 753.153 350.899 756.718 Q352.728 760.26 356.339 760.26 Q359.973 760.26 361.779 756.718 Q363.608 753.153 363.608 746.047 Q363.608 738.917 361.779 735.376 Q359.973 731.811 356.339 731.811 M356.339 728.107 Q362.149 728.107 365.205 732.714 Q368.284 737.297 368.284 746.047 Q368.284 754.774 365.205 759.38 Q362.149 763.963 356.339 763.963 Q350.529 763.963 347.45 759.38 Q344.395 754.774 344.395 746.047 Q344.395 737.297 347.45 732.714 Q350.529 728.107 356.339 728.107 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M284.835 471.326 L307.057 471.326 L307.057 473.317 L294.511 505.886 L289.627 505.886 L301.432 475.261 L284.835 475.261 L284.835 471.326 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M316.224 471.326 L334.58 471.326 L334.58 475.261 L320.506 475.261 L320.506 483.733 Q321.524 483.386 322.543 483.224 Q323.562 483.039 324.58 483.039 Q330.367 483.039 333.747 486.21 Q337.126 489.381 337.126 494.798 Q337.126 500.377 333.654 503.478 Q330.182 506.557 323.862 506.557 Q321.687 506.557 319.418 506.187 Q317.173 505.816 314.765 505.076 L314.765 500.377 Q316.849 501.511 319.071 502.066 Q321.293 502.622 323.77 502.622 Q327.774 502.622 330.112 500.516 Q332.45 498.409 332.45 494.798 Q332.45 491.187 330.112 489.08 Q327.774 486.974 323.77 486.974 Q321.895 486.974 320.02 487.391 Q318.168 487.807 316.224 488.687 L316.224 471.326 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M356.339 474.405 Q352.728 474.405 350.899 477.969 Q349.094 481.511 349.094 488.641 Q349.094 495.747 350.899 499.312 Q352.728 502.853 356.339 502.853 Q359.973 502.853 361.779 499.312 Q363.608 495.747 363.608 488.641 Q363.608 481.511 361.779 477.969 Q359.973 474.405 356.339 474.405 M356.339 470.701 Q362.149 470.701 365.205 475.307 Q368.284 479.891 368.284 488.641 Q368.284 497.367 365.205 501.974 Q362.149 506.557 356.339 506.557 Q350.529 506.557 347.45 501.974 Q344.395 497.367 344.395 488.641 Q344.395 479.891 347.45 475.307 Q350.529 470.701 356.339 470.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M256.664 244.544 L264.303 244.544 L264.303 218.179 L255.992 219.845 L255.992 215.586 L264.256 213.92 L268.932 213.92 L268.932 244.544 L276.571 244.544 L276.571 248.48 L256.664 248.48 L256.664 244.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M296.015 216.998 Q292.404 216.998 290.576 220.563 Q288.77 224.105 288.77 231.234 Q288.77 238.341 290.576 241.906 Q292.404 245.447 296.015 245.447 Q299.65 245.447 301.455 241.906 Q303.284 238.341 303.284 231.234 Q303.284 224.105 301.455 220.563 Q299.65 216.998 296.015 216.998 M296.015 213.295 Q301.826 213.295 304.881 217.901 Q307.96 222.484 307.96 231.234 Q307.96 239.961 304.881 244.568 Q301.826 249.151 296.015 249.151 Q290.205 249.151 287.127 244.568 Q284.071 239.961 284.071 231.234 Q284.071 222.484 287.127 217.901 Q290.205 213.295 296.015 213.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M326.177 216.998 Q322.566 216.998 320.737 220.563 Q318.932 224.105 318.932 231.234 Q318.932 238.341 320.737 241.906 Q322.566 245.447 326.177 245.447 Q329.811 245.447 331.617 241.906 Q333.446 238.341 333.446 231.234 Q333.446 224.105 331.617 220.563 Q329.811 216.998 326.177 216.998 M326.177 213.295 Q331.987 213.295 335.043 217.901 Q338.122 222.484 338.122 231.234 Q338.122 239.961 335.043 244.568 Q331.987 249.151 326.177 249.151 Q320.367 249.151 317.288 244.568 Q314.233 239.961 314.233 231.234 Q314.233 222.484 317.288 217.901 Q320.367 213.295 326.177 213.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M356.339 216.998 Q352.728 216.998 350.899 220.563 Q349.094 224.105 349.094 231.234 Q349.094 238.341 350.899 241.906 Q352.728 245.447 356.339 245.447 Q359.973 245.447 361.779 241.906 Q363.608 238.341 363.608 231.234 Q363.608 224.105 361.779 220.563 Q359.973 216.998 356.339 216.998 M356.339 213.295 Q362.149 213.295 365.205 217.901 Q368.284 222.484 368.284 231.234 Q368.284 239.961 365.205 244.568 Q362.149 249.151 356.339 249.151 Q350.529 249.151 347.45 244.568 Q344.395 239.961 344.395 231.234 Q344.395 222.484 347.45 217.901 Q350.529 213.295 356.339 213.295 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip832)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.2 4017.76,231.2 \"/>\n<polyline clip-path=\"url(#clip832)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.36 457.123,1249.19 457.691,1248.92 458.259,1248.62 458.828,1248.21 459.396,1247.79 459.964,1246.27 460.533,1245.73 461.101,1245.11 461.669,1244.4 462.238,1243.61 462.806,1242.73 463.375,1241.77 463.943,1239.68 464.511,1238.53 465.08,1237.28 465.648,1235.92 466.216,1232.34 466.785,1230.74 467.353,1228 467.921,1225.13 468.49,1222.09 469.058,1219.99 469.626,1217.75 470.195,1215.32 470.763,1211.74 471.331,1208.95 471.9,1206.04 472.468,1201.92 473.036,1198.69 473.605,1194.23 474.173,1190.58 474.741,1186.74 475.31,1180.63 475.878,1175.43 476.446,1171.03 477.015,1165.4 477.583,1160.61 478.152,1155.6 478.72,1148.36 479.288,1141.94 479.857,1135.34 480.425,1129.52 480.993,1122.51 481.562,1116.34 482.13,1109.99 482.698,1100.21 483.267,1092.37 483.835,1083.32 484.403,1075.15 484.972,1067.79 485.54,1058.18 486.108,1048.52 486.677,1039.68 487.245,1031.68 487.813,1023.54 488.382,1013.16 488.95,1004.81 489.518,996.257 490.087,984.467 490.655,974.889 491.224,963.951 491.792,954.085 492.36,945.23 492.929,931.019 493.497,922.128 494.065,910.922 494.634,901.748 495.202,891.614 495.77,879.19 496.339,869.05 496.907,857.816 497.475,846.475 498.044,834.163 498.612,824.977 499.18,813.842 499.749,803.672 500.317,792.557 500.885,782.672 501.454,769.866 502.022,760.107 502.59,751.295 503.159,741.632 503.727,727.889 504.295,717.371 504.864,706.989 505.432,697.655 506.001,688.535 506.569,679.541 507.137,671.505 507.706,663.6 508.274,656.639 508.842,647.628 509.411,639.768 509.979,628.951 510.547,621.268 511.116,610.684 511.684,600.183 512.252,590.085 512.821,583.295 513.389,575.683 513.957,568.963 514.526,560.135 515.094,553.672 515.662,547.165 516.231,540.959 516.799,531.578 517.367,524.33 517.936,515.252 518.504,509.503 519.072,501.709 519.641,494.153 520.209,487.981 520.778,480.627 521.346,474.611 521.914,468.696 522.483,462.808 523.051,457.021 523.619,452.339 524.188,448.117 524.756,442.626 525.324,438.2 525.893,432.975 526.461,427.866 527.029,422.851 527.598,416.001 528.166,412.396 528.734,406.805 529.303,402.422 529.871,399.143 530.439,393.893 531.008,390.782 531.576,386.577 532.144,380.441 532.713,375.328 533.281,370.84 533.85,368.589 534.418,366.245 534.986,363.954 535.555,361.638 536.123,358.143 536.691,355.632 537.26,351.392 537.828,348.104 538.396,344.9 538.965,337.678 539.533,336.147 540.101,334.515 540.67,332.96 541.238,331.272 541.806,327.451 542.375,327.064 542.943,324.494 543.511,318.962 544.08,316.563 544.648,313.196 545.216,314.26 545.785,312.987 546.353,312.816 546.921,308.305 547.49,307.21 548.058,306.353 548.627,302.094 549.195,301.484 549.763,299.512 550.332,297.712 550.9,295.823 551.468,295.082 552.037,295.304 552.605,293.366 553.173,290.413 553.742,287.569 554.31,285.851 554.878,283.288 555.447,283.117 556.015,281.72 556.583,280.394 557.152,278.053 557.72,275.636 558.288,274.218 558.857,272.85 559.425,272.682 559.993,271.461 560.562,273.411 561.13,275.302 561.698,272.789 562.267,272.648 562.835,270.151 563.404,271.142 563.972,268.688 564.54,268.518 565.109,268.164 565.677,266.946 566.245,267.803 566.814,268.342 567.382,267 567.95,266.72 568.519,266.322 569.087,263.916 569.655,263.786 570.224,263.285 570.792,263.182 571.36,263.016 571.929,262.725 572.497,261.422 573.065,261.032 573.634,261.967 574.202,262.605 574.77,262.252 575.339,260.851 575.907,262.567 576.476,262.223 577.044,262.819 577.612,261.242 578.181,260.714 578.749,260.254 579.317,260.823 579.886,259.427 580.454,258.779 581.022,259.251 581.591,260.754 582.159,261.16 582.727,260.473 583.296,257.978 583.864,255.239 584.432,253.051 585.001,249.442 585.569,247.562 586.137,244.578 586.706,243.748 587.274,243.881 587.842,243.18 588.411,243.666 588.979,244.044 589.547,241.38 590.116,243.997 590.684,244.197 591.253,243.042 591.821,241.318 592.389,238.691 592.958,239.589 593.526,240.24 594.094,240.571 594.663,242.184 595.231,242.335 595.799,241.682 596.368,240.066 596.936,240.283 597.504,242.902 598.073,243.143 598.641,242.155 599.209,241.475 599.778,241.863 600.346,239.248 600.914,238.885 601.483,238.312 602.051,237.863 602.619,238.238 603.188,238.887 603.756,240.56 604.325,241.075 604.893,241.321 605.461,241.594 606.03,242.095 606.598,241.373 607.166,241.477 607.735,241.92 608.303,242.314 608.871,242.359 609.44,242.422 610.008,245.549 610.576,243.488 611.145,243.662 611.713,243.84 612.281,243.962 612.85,245.947 613.418,246.571 613.986,246.22 614.555,247.088 615.123,246.734 615.691,249.527 616.26,243.888 616.828,243.758 617.396,243.841 617.965,243.327 618.533,241.188 619.102,238.017 619.67,238.357 620.238,238.348 620.807,238.719 621.375,237.98 621.943,237.437 622.512,238.598 623.08,237.744 623.648,239.056 624.217,237.04 624.785,236.173 625.353,236.573 625.922,237.881 626.49,240.285 627.058,239.421 627.627,237.503 628.195,237.674 628.763,235.908 629.332,237.125 629.9,238.286 630.468,239.264 631.037,238.433 631.605,238.621 632.173,237.729 632.742,237.9 633.31,238.907 633.879,239.095 634.447,239.079 635.015,239.198 635.584,237.319 636.152,238.663 636.72,239.774 637.289,241.67 637.857,241.471 638.425,240.072 638.994,240.928 639.562,238.931 640.13,236.793 640.699,235.265 641.267,236.802 641.835,235.045 642.404,235.407 642.972,235.665 643.54,233.864 644.109,232.246 644.677,233.864 645.245,236.247 645.814,237.411 646.382,236.468 646.951,236.746 647.519,238.239 648.087,237.24 648.656,238.339 649.224,236.458 649.792,236.694 650.361,236.96 650.929,236.982 651.497,235.077 652.066,234.605 652.634,232.937 653.202,233.354 653.771,235.731 654.339,239.287 654.907,239.085 655.476,241.23 656.044,240.254 656.612,240.423 657.181,240.41 657.749,239.148 658.317,240.025 658.886,242.836 659.454,240.475 660.022,238.151 660.591,238.128 661.159,236.949 661.728,240.156 662.296,237.87 662.864,237.83 663.433,236.663 664.001,237.549 664.569,237.52 665.138,235.579 665.706,233.655 666.274,232.963 666.843,234.317 667.411,234.428 667.979,234.701 668.548,235.931 669.116,235.808 669.684,236.743 670.253,237.664 670.821,234.369 671.389,234.414 671.958,234.368 672.526,233.664 673.094,232.836 673.663,233.923 674.231,234.953 674.799,234.945 675.368,234.052 675.936,235.24 676.505,237.445 677.073,235.17 677.641,236.577 678.21,236.63 678.778,236.33 679.346,235.04 679.915,235.078 680.483,235.216 681.051,235.167 681.62,234.246 682.188,236.543 682.756,237.48 683.325,238.378 683.893,238.331 684.461,239.364 685.03,237.941 685.598,237.596 686.166,237.546 686.735,237.385 687.303,237.209 687.871,237.025 688.44,237.879 689.008,238.874 689.577,239.656 690.145,238.46 690.713,238.286 691.282,239.05 691.85,238.945 692.418,239.714 692.987,238.377 693.555,237.164 694.123,238.786 694.692,238.364 695.26,238.079 695.828,236.847 696.397,235.593 696.965,235.432 697.533,234.275 698.102,234.008 698.67,232.931 699.238,232.899 699.807,231.777 700.375,231.937 700.943,233.151 701.512,233.092 702.08,233.13 702.648,234.176 703.217,234.207 703.785,233.045 704.354,233.224 704.922,232.307 705.49,231.36 706.059,231.22 706.627,230.193 707.195,230.673 707.764,231.948 708.332,231.04 708.9,230.263 709.469,230.763 710.037,228.822 710.605,230.342 711.174,230.432 711.742,228.714 712.31,231.284 712.879,230.3 713.447,230.59 714.015,232.641 714.584,232.758 715.152,233.894 715.72,233.952 716.289,234.182 716.857,234.072 717.425,233.111 717.994,233.209 718.562,231.321 719.131,232.888 719.699,230.845 720.267,229.17 720.836,228.46 721.404,227.614 721.972,225.917 722.541,226.487 723.109,228.072 723.677,229.616 724.246,230.765 724.814,228.957 725.382,232.342 725.951,233.573 726.519,233.859 727.087,232.941 727.656,233.176 728.224,233.583 728.792,232.62 729.361,231.602 729.929,231.861 730.497,235.044 731.066,235.039 731.634,234.167 732.203,235.302 732.771,234.101 733.339,235.043 733.908,235.855 734.476,232.737 735.044,231.864 735.613,231.676 736.181,230.652 736.749,231.967 737.318,230.14 737.886,229.32 738.454,230.569 739.023,228.863 739.591,232.201 740.159,231.253 740.728,233.528 741.296,233.631 741.864,236.684 742.433,236.293 743.001,236.22 743.569,237.18 744.138,237.074 744.706,236.764 745.274,235.782 745.843,235.704 746.411,236.544 746.98,234.241 747.548,233.932 748.116,233.817 748.685,233.541 749.253,229.366 749.821,231.64 750.39,233.984 750.958,233.806 751.526,232.92 752.095,233.852 752.663,233.852 753.231,233.929 753.8,232.82 754.368,233.86 754.936,235.906 755.505,237.871 756.073,238.782 756.641,238.504 757.21,236.931 757.778,234.672 758.346,233.473 758.915,231.265 759.483,232.632 760.052,234.758 760.62,231.777 761.188,232.898 761.757,232.816 762.325,232.884 762.893,232.705 763.462,233.875 764.03,233.852 764.598,234.84 765.167,234.566 765.735,231.279 766.303,232.42 766.872,231.448 767.44,229.451 768.008,230.853 768.577,229.921 769.145,230.097 769.713,230.509 770.282,230.817 770.85,232.943 771.418,233.17 771.987,235.037 772.555,238.04 773.123,237.704 773.692,236.42 774.26,232.106 774.829,233.162 775.397,233.087 775.965,232.155 776.534,233.287 777.102,230.253 777.67,227.247 778.239,228.765 778.807,230.164 779.375,230.549 779.944,232.58 780.512,231.449 781.08,232.636 781.649,231.613 782.217,232.735 782.785,230.707 783.354,230.745 783.922,233.061 784.49,233.062 785.059,231.037 785.627,231.044 786.195,230.237 786.764,227.452 787.332,225.619 787.9,228.287 788.469,229.641 789.037,231.88 789.606,230.822 790.174,228.913 790.742,228.208 791.311,229.748 791.879,229.084 792.447,229.411 793.016,229.637 793.584,232.169 794.152,233.397 794.721,234.615 795.289,234.523 795.857,235.505 796.426,237.305 796.994,233.974 797.562,237.143 798.131,236.949 798.699,234.549 799.267,233.214 799.836,232.953 800.404,232.93 800.972,233.963 801.541,233.835 802.109,234.533 802.678,233.276 803.246,233.163 803.814,232.872 804.383,235.131 804.951,235.747 805.519,233.382 806.088,233.304 806.656,237.417 807.224,237.148 807.793,237.893 808.361,237.463 808.929,237.947 809.498,237.419 810.066,236.071 810.634,235.5 811.203,235.161 811.771,235.849 812.339,233.751 812.908,231.627 813.476,230.36 814.044,229.282 814.613,231.466 815.181,228.582 815.749,230.782 816.318,230.761 816.886,230.661 817.455,230.691 818.023,229.696 818.591,229.694 819.16,230.662 819.728,229.705 820.296,228.786 820.865,228.903 821.433,226.953 822.001,227.206 822.57,226.435 823.138,228.054 823.706,228.315 824.275,226.622 824.843,227.007 825.411,226.422 825.98,225.741 826.548,225.281 827.116,224.987 827.685,226.607 828.253,224.217 828.821,225.015 829.39,225.668 829.958,226.088 830.526,226.685 831.095,227.273 831.663,227.775 832.232,227.968 832.8,227.229 833.368,227.562 833.937,230.164 834.505,228.583 835.073,229.914 835.642,229.973 836.21,229.49 836.778,230.865 837.347,231.146 837.915,229.567 838.483,231.897 839.052,230.044 839.62,230.405 840.188,233.907 840.757,233.945 841.325,234.905 841.893,235.857 842.462,235.775 843.03,236.933 843.598,236.832 844.167,237.543 844.735,234.094 845.304,234.212 845.872,234.141 846.44,233.857 847.009,235.716 847.577,234.498 848.145,233.478 848.714,232.693 849.282,232.776 849.85,232.563 850.419,232.427 850.987,231.447 851.555,232.683 852.124,232.799 852.692,235.935 853.26,234.967 853.829,234.734 854.397,235.441 854.965,235.259 855.534,236.022 856.102,235.848 856.67,234.555 857.239,233.456 857.807,231.652 858.375,232.962 858.944,232.097 859.512,231.162 860.081,230.315 860.649,230.685 861.217,231.865 861.786,232.194 862.354,232.177 862.922,234.401 863.491,233.316 864.059,232.232 864.627,233.302 865.196,234.235 865.764,234.096 866.332,235.933 866.901,236.812 867.469,235.741 868.037,231.514 868.606,234.637 869.174,237.719 869.742,237.336 870.311,235.937 870.879,235.77 871.447,234.578 872.016,234.51 872.584,233.26 873.152,237.242 873.721,235.8 874.289,235.454 874.858,235.044 875.426,233.702 875.994,233.648 876.563,233.463 877.131,233.53 877.699,233.423 878.268,232.2 878.836,231.151 879.404,230.205 879.973,231.354 880.541,231.404 881.109,233.447 881.678,232.29 882.246,232.227 882.814,233.283 883.383,232.112 883.951,230.89 884.519,231.948 885.088,229.968 885.656,230.662 886.224,230.613 886.793,231.686 887.361,227.587 887.93,228.923 888.498,228.878 889.066,231.13 889.635,230.268 890.203,231.131 890.771,234.06 891.34,234.838 891.908,234.597 892.476,234.331 893.045,235.062 893.613,228.673 894.181,227.991 894.75,230.39 895.318,231.492 895.886,231.706 896.455,230.717 897.023,229.709 897.591,229.77 898.16,229.844 898.728,228.83 899.296,230.251 899.865,230.318 900.433,228.341 901.001,229.861 901.57,229.827 902.138,230.111 902.707,231.357 903.275,232.522 903.843,232.359 904.412,231.42 904.98,232.385 905.548,232.357 906.117,233.183 906.685,233.024 907.253,237.191 907.822,234.756 908.39,235.621 908.958,236.265 909.527,235.914 910.095,235.631 910.663,233.192 911.232,232.034 911.8,232.058 912.368,232.144 912.937,231.919 913.505,229.536 914.073,227.556 914.642,224.619 915.21,224.074 915.779,223.412 916.347,223.787 916.915,225.431 917.484,226.74 918.052,228.841 918.62,228.927 919.189,227.289 919.757,227.671 920.325,228.848 920.894,228.994 921.462,229.15 922.03,230.431 922.599,230.666 923.167,229.478 923.735,229.619 924.304,227.643 924.872,226.04 925.44,226.452 926.009,225.784 926.577,226.23 927.145,227.544 927.714,228.853 928.282,231.315 928.85,231.469 929.419,231.684 929.987,231.826 930.556,231.147 931.124,231.459 931.692,233.583 932.261,234.627 932.829,235.468 933.397,236.205 933.966,235.084 934.534,234.786 935.102,234.828 935.671,237.818 936.239,238.178 936.807,236.821 937.376,236.372 937.944,235.061 938.512,234.017 939.081,232.039 939.649,230.167 940.217,228.362 940.786,227.606 941.354,229.763 941.922,228.8 942.491,228.704 943.059,229.821 943.627,230.806 944.196,229.553 944.764,229.705 945.333,228.641 945.901,228.923 946.469,228.155 947.038,228.478 947.606,227.685 948.174,230.139 948.743,232.527 949.311,232.502 949.879,232.387 950.448,231.379 951.016,229.495 951.584,231.783 952.153,232.584 952.721,234.583 953.289,234.526 953.858,234.246 954.426,234.303 954.994,235.273 955.563,235.976 956.131,237.783 956.699,236.638 957.268,240.304 957.836,239.603 958.405,239.381 958.973,236.692 959.541,237.224 960.11,235.788 960.678,235.59 961.246,235.121 961.815,235.75 962.383,232.401 962.951,235.633 963.52,236.196 964.088,238.003 964.656,238.421 965.225,236.884 965.793,235.298 966.361,236.134 966.93,235.761 967.498,235.662 968.066,232.256 968.635,232.046 969.203,230.811 969.771,228.769 970.34,228.682 970.908,228.763 971.476,226.863 972.045,227.954 972.613,226.23 973.182,226.592 973.75,228.788 974.318,227.939 974.887,229.043 975.455,229.205 976.023,231.488 976.592,229.209 977.16,229.164 977.728,228.289 978.297,228.385 978.865,227.652 979.433,229.147 980.002,230.174 980.57,228.375 981.138,229.37 981.707,228.482 982.275,229.811 982.843,231.046 983.412,230.906 983.98,230.921 984.548,230.888 985.117,232.97 985.685,232.771 986.253,232.88 986.822,233.725 987.39,233.482 987.959,232.435 988.527,234.474 989.095,235.373 989.664,236.127 990.232,233.691 990.8,235.325 991.369,238.19 991.937,238.439 992.505,237.824 993.074,237.234 993.642,234.61 994.21,236.343 994.779,236.137 995.347,236.853 995.915,235.38 996.484,233.816 997.052,233.382 997.62,234.01 998.189,237.742 998.757,234.372 999.325,231.113 999.894,230.85 1000.46,232.765 1001.03,232.543 1001.6,230.377 1002.17,228.26 1002.74,229.476 1003.3,228.479 1003.87,225.587 1004.44,228.942 1005.01,226.906 1005.58,230.183 1006.15,228.174 1006.71,228.291 1007.28,231.583 1007.85,232.564 1008.42,232.458 1008.99,231.354 1009.56,229.099 1010.12,226.079 1010.69,223.287 1011.26,222.891 1011.83,226.179 1012.4,229.522 1012.97,230.513 1013.53,230.359 1014.1,231.34 1014.67,231.461 1015.24,231.428 1015.81,231.317 1016.38,228.899 1016.94,231.072 1017.51,230.279 1018.08,230.253 1018.65,232.29 1019.22,234.213 1019.79,233.996 1020.35,233.909 1020.92,233.732 1021.49,232.573 1022.06,230.407 1022.63,230.355 1023.2,230.48 1023.76,231.566 1024.33,230.506 1024.9,230.173 1025.47,231.215 1026.04,233.186 1026.61,234.048 1027.17,231.918 1027.74,230.992 1028.31,231.04 1028.88,230.093 1029.45,229.867 1030.02,232.217 1030.58,233.277 1031.15,232.999 1031.72,230.92 1032.29,231.009 1032.86,229.936 1033.43,228.834 1033.99,229.855 1034.56,228.914 1035.13,228.013 1035.7,225.054 1036.27,226.222 1036.84,226.765 1037.4,228.2 1037.97,229.558 1038.54,230.799 1039.11,228.96 1039.68,229.045 1040.25,229.173 1040.81,229.336 1041.38,228.385 1041.95,228.689 1042.52,228.732 1043.09,230.948 1043.66,228.675 1044.22,228.81 1044.79,227.924 1045.36,228.032 1045.93,228.206 1046.5,227.499 1047.07,228.766 1047.63,227.028 1048.2,226.382 1048.77,227.928 1049.34,228.211 1049.91,227.597 1050.48,229.015 1051.05,228.137 1051.61,228.414 1052.18,227.548 1052.75,227.81 1053.32,228.975 1053.89,228.061 1054.46,226.247 1055.02,226.766 1055.59,226.064 1056.16,228.547 1056.73,226.979 1057.3,226.522 1057.87,225.922 1058.43,225.495 1059,223.981 1059.57,226.753 1060.14,227.213 1060.71,224.346 1061.28,227.089 1061.84,226.37 1062.41,228.017 1062.98,230.485 1063.55,231.793 1064.12,231.053 1064.69,233.463 1065.25,232.553 1065.82,232.569 1066.39,231.623 1066.96,232.927 1067.53,233.017 1068.1,233.963 1068.66,234.918 1069.23,235.818 1069.8,236.611 1070.37,236.568 1070.94,238.674 1071.51,238.241 1072.07,236.765 1072.64,234.409 1073.21,234.262 1073.78,234.171 1074.35,236.072 1074.92,236.892 1075.48,234.391 1076.05,234.082 1076.62,231.633 1077.19,232.847 1077.76,231.567 1078.33,229.569 1078.89,230.849 1079.46,230.967 1080.03,228.056 1080.6,228.429 1081.17,226.798 1081.74,228.307 1082.3,231.663 1082.87,229.509 1083.44,231.751 1084.01,228.611 1084.58,226.896 1085.15,228.375 1085.71,229.854 1086.28,230.067 1086.85,230.35 1087.42,228.535 1087.99,225.958 1088.56,225.506 1089.12,228.179 1089.69,227.464 1090.26,227.99 1090.83,226.2 1091.4,225.548 1091.97,227.093 1092.53,227.461 1093.1,227.892 1093.67,229.199 1094.24,231.784 1094.81,234.958 1095.38,234.881 1095.94,233.871 1096.51,230.754 1097.08,233.128 1097.65,233.274 1098.22,232.33 1098.79,231.538 1099.35,231.679 1099.92,231.853 1100.49,231.914 1101.06,232.087 1101.63,230.309 1102.2,231.54 1102.76,233.971 1103.33,232.88 1103.9,234.068 1104.47,234.094 1105.04,234.895 1105.61,234.885 1106.17,236.536 1106.74,238.254 1107.31,235.653 1107.88,235.333 1108.45,237.265 1109.02,235.865 1109.58,236.661 1110.15,236.371 1110.72,237.13 1111.29,236.808 1111.86,235.397 1112.43,234.028 1112.99,234.94 1113.56,234.62 1114.13,235.497 1114.7,235.258 1115.27,236.1 1115.84,235.691 1116.4,236.531 1116.97,235.083 1117.54,231.763 1118.11,232.776 1118.68,231.959 1119.25,235.085 1119.81,235.568 1120.38,235.565 1120.95,236.097 1121.52,235.57 1122.09,234.502 1122.66,234.31 1123.23,235.31 1123.79,234.012 1124.36,234.827 1124.93,235.637 1125.5,235.359 1126.07,238.164 1126.64,233.715 1127.2,231.22 1127.77,231.929 1128.34,232.965 1128.91,233.71 1129.48,233.378 1130.05,232.374 1130.61,230.23 1131.18,227.119 1131.75,227.417 1132.32,231.839 1132.89,231.582 1133.46,229.467 1134.02,230.543 1134.59,228.807 1135.16,230.116 1135.73,228.24 1136.3,225.481 1136.87,226.799 1137.43,229.036 1138,227.176 1138.57,226.656 1139.14,227.825 1139.71,226.02 1140.28,224.508 1140.84,226.048 1141.41,222.21 1141.98,221.565 1142.55,223.301 1143.12,224.817 1143.69,224.339 1144.25,227.922 1144.82,227.308 1145.39,226.829 1145.96,228.306 1146.53,229.441 1147.1,230.677 1147.66,230.795 1148.23,231.672 1148.8,237.221 1149.37,235.88 1149.94,237.653 1150.51,241.321 1151.07,239.653 1151.64,239.102 1152.21,236.376 1152.78,232.932 1153.35,232.815 1153.92,232.817 1154.48,233.742 1155.05,232.589 1155.62,231.557 1156.19,231.468 1156.76,231.472 1157.33,232.484 1157.89,235.783 1158.46,236.579 1159.03,237.237 1159.6,237.685 1160.17,238.41 1160.74,236.69 1161.3,238.425 1161.87,238.864 1162.44,239.302 1163.01,239.465 1163.58,239.741 1164.15,241.167 1164.71,239.498 1165.28,239.117 1165.85,240.706 1166.42,239.004 1166.99,238.438 1167.56,236.75 1168.12,232.926 1168.69,233.552 1169.26,232.12 1169.83,231.954 1170.4,231.641 1170.97,233.693 1171.53,233.494 1172.1,234.079 1172.67,230.789 1173.24,230.656 1173.81,230.736 1174.38,229.695 1174.94,228.612 1175.51,228.724 1176.08,226.607 1176.65,225.894 1177.22,225.154 1177.79,225.459 1178.35,227.663 1178.92,229.034 1179.49,226.954 1180.06,228.299 1180.63,228.582 1181.2,229.656 1181.76,230.708 1182.33,230.637 1182.9,232.925 1183.47,232.933 1184.04,234.67 1184.61,234.477 1185.17,235.275 1185.74,235.775 1186.31,235.229 1186.88,232.911 1187.45,233.744 1188.02,233.439 1188.58,232.055 1189.15,230.845 1189.72,234.807 1190.29,233.285 1190.86,235.16 1191.43,232.718 1192,232.429 1192.56,233.196 1193.13,233.061 1193.7,229.565 1194.27,227.488 1194.84,227.48 1195.41,227.589 1195.97,228.696 1196.54,229.972 1197.11,230.837 1197.68,229.703 1198.25,228.73 1198.82,230.867 1199.38,231.928 1199.95,232.717 1200.52,232.458 1201.09,232.151 1201.66,233.944 1202.23,235.665 1202.79,233.064 1203.36,232.801 1203.93,232.58 1204.5,232.203 1205.07,232.908 1205.64,232.561 1206.2,230.345 1206.77,230.38 1207.34,229.304 1207.91,228.246 1208.48,228.292 1209.05,227.289 1209.61,227.559 1210.18,227.698 1210.75,228.801 1211.32,227.985 1211.89,228.069 1212.46,227.118 1213.02,227.304 1213.59,227.231 1214.16,224.264 1214.73,225.531 1215.3,225.077 1215.87,224.364 1216.43,224.816 1217,225.226 1217.57,224.574 1218.14,224.987 1218.71,226.373 1219.28,225.548 1219.84,226.914 1220.41,228.234 1220.98,227.707 1221.55,229.027 1222.12,228.262 1222.69,226.442 1223.25,227.715 1223.82,225.591 1224.39,227.054 1224.96,228.522 1225.53,229.561 1226.1,230.754 1226.66,230.775 1227.23,228.814 1227.8,227.859 1228.37,227.941 1228.94,226.003 1229.51,227.492 1230.07,228.844 1230.64,228.015 1231.21,227.247 1231.78,229.391 1232.35,229.535 1232.92,230.743 1233.48,232.005 1234.05,231.877 1234.62,231.787 1235.19,231.906 1235.76,229.712 1236.33,229.695 1236.89,227.056 1237.46,228.456 1238.03,227.571 1238.6,228.701 1239.17,226.704 1239.74,227.88 1240.3,228.223 1240.87,229.764 1241.44,230.013 1242.01,230.154 1242.58,230.36 1243.15,230.549 1243.71,230.895 1244.28,233.043 1244.85,234.165 1245.42,232.136 1245.99,232.542 1246.56,231.37 1247.12,232.557 1247.69,231.676 1248.26,231.806 1248.83,230.693 1249.4,230.747 1249.97,230.744 1250.53,230.704 1251.1,231.089 1251.67,230.345 1252.24,230.535 1252.81,231.766 1253.38,230.671 1253.94,231.781 1254.51,230.932 1255.08,227.886 1255.65,228.006 1256.22,228.45 1256.79,227.682 1257.35,230.071 1257.92,230.089 1258.49,229.058 1259.06,230.448 1259.63,228.818 1260.2,228.926 1260.76,229.265 1261.33,229.774 1261.9,231.072 1262.47,231.161 1263.04,231.282 1263.61,231.54 1264.18,231.599 1264.74,234.425 1265.31,234.3 1265.88,233.186 1266.45,233.279 1267.02,234.283 1267.59,237.248 1268.15,235.889 1268.72,236.585 1269.29,236.292 1269.86,235.066 1270.43,233.701 1271,233.416 1271.56,233.204 1272.13,234.144 1272.7,233.098 1273.27,230.879 1273.84,230.64 1274.41,230.666 1274.97,228.788 1275.54,228.839 1276.11,230.08 1276.68,231.03 1277.25,230.21 1277.82,228.161 1278.38,227.467 1278.95,225.459 1279.52,226.917 1280.09,225.4 1280.66,225.919 1281.23,228.666 1281.79,229.064 1282.36,227.435 1282.93,233.915 1283.5,234.668 1284.07,236.614 1284.64,235.319 1285.2,236.189 1285.77,236.023 1286.34,235.829 1286.91,235.493 1287.48,233.129 1288.05,235.165 1288.61,236.11 1289.18,235.646 1289.75,235.471 1290.32,235.172 1290.89,234.884 1291.46,233.481 1292.02,233.229 1292.59,235.07 1293.16,233.877 1293.73,234.86 1294.3,234.716 1294.87,235.288 1295.43,236.048 1296,235.631 1296.57,235.378 1297.14,237.225 1297.71,237.936 1298.28,235.403 1298.84,234.138 1299.41,235.322 1299.98,235.922 1300.55,235.649 1301.12,235.285 1301.69,234.959 1302.25,232.454 1302.82,233.505 1303.39,234.22 1303.96,233.966 1304.53,233.853 1305.1,230.48 1305.66,231.599 1306.23,231.503 1306.8,230.411 1307.37,229.6 1307.94,228.691 1308.51,229.003 1309.07,230.273 1309.64,228.256 1310.21,228.397 1310.78,229.699 1311.35,229.828 1311.92,229.691 1312.48,228.673 1313.05,227.812 1313.62,229.003 1314.19,229.167 1314.76,228.382 1315.33,228.661 1315.89,228.525 1316.46,227.62 1317.03,226.859 1317.6,227.354 1318.17,227.498 1318.74,226.834 1319.3,228.152 1319.87,229.346 1320.44,229.424 1321.01,229.774 1321.58,229.656 1322.15,227.839 1322.71,226.28 1323.28,227.744 1323.85,226.779 1324.42,228.172 1324.99,228.27 1325.56,229.554 1326.12,231.65 1326.69,230.584 1327.26,229.66 1327.83,229.564 1328.4,228.679 1328.97,228.194 1329.53,229.557 1330.1,230.724 1330.67,230.807 1331.24,229.668 1331.81,228.552 1332.38,227.774 1332.94,226.261 1333.51,226.786 1334.08,226.293 1334.65,226.62 1335.22,224.834 1335.79,224.395 1336.36,224.102 1336.92,222.494 1337.49,224.253 1338.06,227.867 1338.63,228.242 1339.2,228.473 1339.77,226.754 1340.33,230.628 1340.9,229.805 1341.47,231.16 1342.04,232.589 1342.61,233.512 1343.18,232.477 1343.74,232.573 1344.31,232.442 1344.88,235.597 1345.45,234.182 1346.02,236.032 1346.59,236.899 1347.15,236.402 1347.72,236.984 1348.29,237.861 1348.86,235.461 1349.43,233.264 1350,234.013 1350.56,234.78 1351.13,234.575 1351.7,235.387 1352.27,231.96 1352.84,230.847 1353.41,230.989 1353.97,234.177 1354.54,237.076 1355.11,237.635 1355.68,236.234 1356.25,238.048 1356.82,237.534 1357.38,237.466 1357.95,235.01 1358.52,234.535 1359.09,233.236 1359.66,237.02 1360.23,237.559 1360.79,236.042 1361.36,235.603 1361.93,234.124 1362.5,233.949 1363.07,233.744 1363.64,233.707 1364.2,234.554 1364.77,232.038 1365.34,233.103 1365.91,234.288 1366.48,235.879 1367.05,235.431 1367.61,236.128 1368.18,236.873 1368.75,236.612 1369.32,235.303 1369.89,233.69 1370.46,233.526 1371.02,232.231 1371.59,233.967 1372.16,233.766 1372.73,233.463 1373.3,233.286 1373.87,233.144 1374.43,232.12 1375,231.744 1375.57,232.435 1376.14,231.298 1376.71,233.196 1377.28,233.872 1377.84,233.292 1378.41,234.183 1378.98,233.597 1379.55,232.324 1380.12,232.169 1380.69,232.88 1381.25,231.478 1381.82,229.319 1382.39,230.497 1382.96,230.516 1383.53,230.304 1384.1,228.246 1384.66,229.281 1385.23,228.49 1385.8,228.662 1386.37,226.542 1386.94,227.056 1387.51,226.328 1388.07,226.681 1388.64,225.646 1389.21,226.936 1389.78,228.194 1390.35,224.22 1390.92,223.517 1391.48,226.203 1392.05,227.764 1392.62,229.152 1393.19,229.008 1393.76,229.976 1394.33,229.164 1394.89,229.311 1395.46,230.7 1396.03,228.901 1396.6,227.143 1397.17,227.155 1397.74,229.58 1398.3,233.686 1398.87,236.573 1399.44,238.138 1400.01,236.491 1400.58,237.196 1401.15,237.649 1401.71,239.357 1402.28,238.565 1402.85,237.994 1403.42,238.582 1403.99,237.905 1404.56,237.363 1405.13,236.876 1405.69,235.577 1406.26,234.091 1406.83,233.512 1407.4,234.155 1407.97,232.544 1408.54,232.248 1409.1,231.666 1409.67,228.335 1410.24,228.531 1410.81,226.457 1411.38,225.484 1411.95,223.85 1412.51,226.083 1413.08,226.527 1413.65,225.803 1414.22,219.895 1414.79,221.532 1415.36,223.002 1415.92,224.475 1416.49,225.861 1417.06,229.139 1417.63,229.395 1418.2,229.347 1418.77,231.456 1419.33,231.58 1419.9,233.529 1420.47,234.308 1421.04,232.773 1421.61,231.532 1422.18,228.649 1422.74,229.792 1423.31,228.71 1423.88,229.978 1424.45,227.889 1425.02,227.816 1425.59,230.2 1426.15,229.395 1426.72,229.6 1427.29,229.52 1427.86,227.738 1428.43,228.006 1429,228.298 1429.56,228.932 1430.13,228.105 1430.7,227.412 1431.27,229.785 1431.84,227.846 1432.41,226.904 1432.97,227.349 1433.54,227.66 1434.11,229.115 1434.68,231.279 1435.25,231.255 1435.82,230.344 1436.38,230.578 1436.95,230.654 1437.52,231.87 1438.09,233.95 1438.66,235.742 1439.23,237.199 1439.79,233.722 1440.36,232.747 1440.93,230.694 1441.5,231.91 1442.07,232.028 1442.64,231.925 1443.2,235.805 1443.77,236.49 1444.34,236.235 1444.91,235.661 1445.48,235.536 1446.05,236.199 1446.61,234.714 1447.18,236.406 1447.75,235.065 1448.32,232.67 1448.89,231.484 1449.46,231.511 1450.02,230.524 1450.59,231.845 1451.16,232.815 1451.73,232.648 1452.3,232.475 1452.87,233.38 1453.43,233.247 1454,234.096 1454.57,233.866 1455.14,233.602 1455.71,233.298 1456.28,232.179 1456.84,230.417 1457.41,229.51 1457.98,226.586 1458.55,228.972 1459.12,232.024 1459.69,231.976 1460.25,232.696 1460.82,230.691 1461.39,230.623 1461.96,230.67 1462.53,231.974 1463.1,231.786 1463.66,232.81 1464.23,231.366 1464.8,233.303 1465.37,233.962 1465.94,232.633 1466.51,232.578 1467.07,232.719 1467.64,232.481 1468.21,235.549 1468.78,235.098 1469.35,234.731 1469.92,233.478 1470.48,233.41 1471.05,236.108 1471.62,235.823 1472.19,234.249 1472.76,235.043 1473.33,235.717 1473.89,236.126 1474.46,235.851 1475.03,231.941 1475.6,228.458 1476.17,229.475 1476.74,230.588 1477.31,229.172 1477.87,229.139 1478.44,229.106 1479.01,230.324 1479.58,230.189 1480.15,228.837 1480.72,229.848 1481.28,228.716 1481.85,228.015 1482.42,228.251 1482.99,231.517 1483.56,231.327 1484.13,231.001 1484.69,230.777 1485.26,232.754 1485.83,231.767 1486.4,231.624 1486.97,231.669 1487.54,230.713 1488.1,230.494 1488.67,229.509 1489.24,229.726 1489.81,228.685 1490.38,228.038 1490.95,226.416 1491.51,227.64 1492.08,226.696 1492.65,224.83 1493.22,227.227 1493.79,226.657 1494.36,226.091 1494.92,224.319 1495.49,224.669 1496.06,227.23 1496.63,227.393 1497.2,225.506 1497.77,226.874 1498.33,226.185 1498.9,228.684 1499.47,228.065 1500.04,228.252 1500.61,228.405 1501.18,228.563 1501.74,229.612 1502.31,228.78 1502.88,230.178 1503.45,229.051 1504.02,229.232 1504.59,229.438 1505.15,229.561 1505.72,230.741 1506.29,230.848 1506.86,229.517 1507.43,230.762 1508,230.791 1508.56,232.946 1509.13,232.97 1509.7,233.135 1510.27,235.347 1510.84,234 1511.41,233.856 1511.97,235.793 1512.54,235.73 1513.11,235.362 1513.68,234.008 1514.25,235.73 1514.82,236.127 1515.38,236.999 1515.95,235.563 1516.52,232.172 1517.09,232.23 1517.66,229.904 1518.23,231.176 1518.79,231.169 1519.36,231.296 1519.93,228.226 1520.5,230.542 1521.07,231.536 1521.64,231.614 1522.2,231.67 1522.77,230.571 1523.34,232.68 1523.91,231.708 1524.48,230.702 1525.05,232.818 1525.61,231.573 1526.18,231.575 1526.75,230.36 1527.32,228.183 1527.89,226.445 1528.46,229.854 1529.02,229.129 1529.59,229.239 1530.16,229.62 1530.73,229.512 1531.3,228.633 1531.87,228.667 1532.43,228.76 1533,227.881 1533.57,228.158 1534.14,230.508 1534.71,229.186 1535.28,228.626 1535.84,225.888 1536.41,227.409 1536.98,226.78 1537.55,227.294 1538.12,226.4 1538.69,226.635 1539.25,225.732 1539.82,226.087 1540.39,227.608 1540.96,228.049 1541.53,230.313 1542.1,231.616 1542.66,233.638 1543.23,236.673 1543.8,236.318 1544.37,236.035 1544.94,235.826 1545.51,236.554 1546.08,235.05 1546.64,236.974 1547.21,236.555 1547.78,236.14 1548.35,234.738 1548.92,234.622 1549.49,234.488 1550.05,233.373 1550.62,233.168 1551.19,231.056 1551.76,228.955 1552.33,229.998 1552.9,232.237 1553.46,231.095 1554.03,225.881 1554.6,229.202 1555.17,230.418 1555.74,230.388 1556.31,232.561 1556.87,232.385 1557.44,232.284 1558.01,233.346 1558.58,233.23 1559.15,233.017 1559.72,232.104 1560.28,231.863 1560.85,232.843 1561.42,231.687 1561.99,231.749 1562.56,229.806 1563.13,230.762 1563.69,231.857 1564.26,230.577 1564.83,229.753 1565.4,230.86 1565.97,230.955 1566.54,229.865 1567.1,229.004 1567.67,229.237 1568.24,232.492 1568.81,232.594 1569.38,233.712 1569.95,231.636 1570.51,232.837 1571.08,232.621 1571.65,233.406 1572.22,232.12 1572.79,231.991 1573.36,230.856 1573.92,230.993 1574.49,229.863 1575.06,229.923 1575.63,233.136 1576.2,233.971 1576.77,233.761 1577.33,232.45 1577.9,232.114 1578.47,232.639 1579.04,234.706 1579.61,233.41 1580.18,231.202 1580.74,229.981 1581.31,230.019 1581.88,232.165 1582.45,231.186 1583.02,229.139 1583.59,229.391 1584.15,229.416 1584.72,230.34 1585.29,230.2 1585.86,231.18 1586.43,230.068 1587,230.143 1587.56,231.302 1588.13,232.064 1588.7,231.13 1589.27,230.83 1589.84,230.974 1590.41,229.975 1590.97,232.131 1591.54,232.143 1592.11,230.183 1592.68,232.328 1593.25,232.206 1593.82,230.221 1594.38,230.261 1594.95,230.335 1595.52,228.267 1596.09,227.537 1596.66,227.739 1597.23,227.056 1597.79,228.582 1598.36,228.761 1598.93,228.115 1599.5,229.371 1600.07,228.104 1600.64,230.122 1601.2,231.084 1601.77,230.962 1602.34,232.201 1602.91,231.107 1603.48,234.153 1604.05,235.159 1604.61,235.923 1605.18,235.812 1605.75,236.639 1606.32,237.399 1606.89,236.039 1607.46,235.635 1608.02,233.452 1608.59,233.095 1609.16,235.023 1609.73,234.736 1610.3,235.384 1610.87,229.925 1611.43,229.186 1612,231.575 1612.57,230.416 1613.14,231.387 1613.71,231.182 1614.28,231.095 1614.84,230.012 1615.41,231.004 1615.98,230.925 1616.55,231.873 1617.12,231.817 1617.69,231.664 1618.26,230.568 1618.82,230.521 1619.39,229.711 1619.96,231.77 1620.53,231.784 1621.1,233.721 1621.67,233.246 1622.23,232.063 1622.8,229.829 1623.37,228.7 1623.94,229.73 1624.51,229.751 1625.08,228.758 1625.64,228.939 1626.21,227.815 1626.78,229.151 1627.35,228.447 1627.92,228.623 1628.49,228.493 1629.05,227.714 1629.62,229.791 1630.19,229.936 1630.76,230.176 1631.33,229.25 1631.9,226.143 1632.46,224.367 1633.03,224.944 1633.6,224.484 1634.17,223.987 1634.74,224.607 1635.31,225.898 1635.87,227.44 1636.44,225.899 1637.01,227.351 1637.58,226.84 1638.15,228.29 1638.72,230.666 1639.28,229.745 1639.85,232.961 1640.42,233.005 1640.99,234.049 1641.56,235.123 1642.13,234.034 1642.69,233.67 1643.26,234.563 1643.83,234.253 1644.4,232.844 1644.97,232.745 1645.54,231.641 1646.1,231.644 1646.67,231.594 1647.24,232.496 1647.81,232.51 1648.38,232.511 1648.95,231.648 1649.51,230.673 1650.08,230.84 1650.65,230.81 1651.22,233.899 1651.79,233.872 1652.36,233.859 1652.92,233.831 1653.49,234.635 1654.06,233.673 1654.63,233.543 1655.2,234.284 1655.77,233.947 1656.33,233.9 1656.9,233.924 1657.47,232.715 1658.04,232.634 1658.61,232.423 1659.18,233.207 1659.74,235.076 1660.31,233.733 1660.88,237.628 1661.45,234.018 1662.02,233.943 1662.59,233.902 1663.15,233.772 1663.72,232.377 1664.29,232.101 1664.86,230.026 1665.43,230.052 1666,230.102 1666.56,227.924 1667.13,228.064 1667.7,227.945 1668.27,229.169 1668.84,228.234 1669.41,230.8 1669.97,231.102 1670.54,227.962 1671.11,227.333 1671.68,225.747 1672.25,229.142 1672.82,230.394 1673.38,228.334 1673.95,229.743 1674.52,228.94 1675.09,228.753 1675.66,228.937 1676.23,231.253 1676.79,230.34 1677.36,228.415 1677.93,228.709 1678.5,228.047 1679.07,230.49 1679.64,231.598 1680.2,232.51 1680.77,230.441 1681.34,229.46 1681.91,227.67 1682.48,228.976 1683.05,228.182 1683.61,228.522 1684.18,227.779 1684.75,223.969 1685.32,227.573 1685.89,227.94 1686.46,231.134 1687.02,230.16 1687.59,232.365 1688.16,231.266 1688.73,231.346 1689.3,231.414 1689.87,229.188 1690.44,229.326 1691,227.542 1691.57,228.781 1692.14,228.103 1692.71,228.271 1693.28,230.514 1693.85,231.585 1694.41,230.585 1694.98,228.594 1695.55,227.922 1696.12,226.21 1696.69,225.559 1697.26,228.348 1697.82,228.689 1698.39,229.883 1698.96,231.163 1699.53,233.265 1700.1,234.088 1700.67,234.102 1701.23,234.173 1701.8,232.901 1702.37,232.659 1702.94,231.706 1703.51,231.619 1704.08,229.656 1704.64,232.893 1705.21,234.014 1705.78,231.983 1706.35,230.835 1706.92,230.972 1707.49,231.142 1708.05,231.215 1708.62,232.232 1709.19,232.145 1709.76,232.122 1710.33,233.218 1710.9,232.188 1711.46,232.967 1712.03,233.116 1712.6,235.137 1713.17,237.187 1713.74,236.985 1714.31,234.487 1714.87,235.265 1715.44,235.859 1716.01,233.359 1716.58,234.294 1717.15,237.171 1717.72,234.72 1718.28,235.513 1718.85,233.143 1719.42,232.106 1719.99,233.131 1720.56,234.336 1721.13,235.332 1721.69,234.11 1722.26,234.962 1722.83,235.842 1723.4,236.468 1723.97,236.158 1724.54,236.823 1725.1,233.245 1725.67,234.175 1726.24,233.886 1726.81,234.545 1727.38,236.33 1727.95,235.795 1728.51,235.423 1729.08,235.007 1729.65,233.621 1730.22,232.437 1730.79,231.375 1731.36,230.206 1731.92,231.009 1732.49,230.944 1733.06,231.025 1733.63,231.101 1734.2,231.114 1734.77,230.077 1735.33,226.957 1735.9,228.048 1736.47,226.08 1737.04,225.067 1737.61,226.396 1738.18,228.818 1738.74,229.875 1739.31,233.132 1739.88,231.857 1740.45,231.804 1741.02,230.605 1741.59,229.747 1742.15,228.951 1742.72,228.981 1743.29,229.986 1743.86,228.962 1744.43,228.842 1745,228.994 1745.56,230.078 1746.13,230.104 1746.7,228.032 1747.27,229.245 1747.84,230.459 1748.41,230.537 1748.97,228.272 1749.54,229.417 1750.11,229.589 1750.68,230.793 1751.25,230.822 1751.82,229.852 1752.38,234.159 1752.95,233.814 1753.52,231.699 1754.09,233.636 1754.66,234.332 1755.23,236.371 1755.79,236.091 1756.36,235.523 1756.93,237.428 1757.5,235.804 1758.07,235.353 1758.64,232.924 1759.21,232.725 1759.77,231.555 1760.34,230.577 1760.91,230.524 1761.48,230.693 1762.05,232.662 1762.62,232.653 1763.18,231.486 1763.75,230.761 1764.32,231.751 1764.89,232.715 1765.46,231.437 1766.03,231.216 1766.59,228.149 1767.16,227.243 1767.73,228.847 1768.3,232.224 1768.87,229.046 1769.44,229.197 1770,229.319 1770.57,228.377 1771.14,229.385 1771.71,230.256 1772.28,230.394 1772.85,230.56 1773.41,229.739 1773.98,227.831 1774.55,229.177 1775.12,230.341 1775.69,231.678 1776.26,233.684 1776.82,233.565 1777.39,232.163 1777.96,233.098 1778.53,234.938 1779.1,235.68 1779.67,234.39 1780.23,234.085 1780.8,233.774 1781.37,233.776 1781.94,233.765 1782.51,230.467 1783.08,232.688 1783.64,232.323 1784.21,231.28 1784.78,231.316 1785.35,231.278 1785.92,230.403 1786.49,231.342 1787.05,231.341 1787.62,231.388 1788.19,231.58 1788.76,232.668 1789.33,232.491 1789.9,230.394 1790.46,230.492 1791.03,230.63 1791.6,228.587 1792.17,228.817 1792.74,227.011 1793.31,227.272 1793.87,226.477 1794.44,224.568 1795.01,225.081 1795.58,226.492 1796.15,226.943 1796.72,229.192 1797.28,229.454 1797.85,229.675 1798.42,228.618 1798.99,231.894 1799.56,230.691 1800.13,232.828 1800.69,234.797 1801.26,235.565 1801.83,234.175 1802.4,233.907 1802.97,234.95 1803.54,234.823 1804.1,232.399 1804.67,230.308 1805.24,231.311 1805.81,231.257 1806.38,231.21 1806.95,234.412 1807.51,235.044 1808.08,233.859 1808.65,232.618 1809.22,231.617 1809.79,232.373 1810.36,231.319 1810.92,232.358 1811.49,232.486 1812.06,231.525 1812.63,233.532 1813.2,233.162 1813.77,233.047 1814.33,233.795 1814.9,231.538 1815.47,231.493 1816.04,232.413 1816.61,230.295 1817.18,229.306 1817.74,231.323 1818.31,232.188 1818.88,232.264 1819.45,234.067 1820.02,232.899 1820.59,233.505 1821.15,230.379 1821.72,231.521 1822.29,232.326 1822.86,232.448 1823.43,232.17 1824,229.888 1824.56,227.075 1825.13,228.502 1825.7,227.828 1826.27,227.152 1826.84,227.636 1827.41,227.724 1827.97,226.934 1828.54,229.42 1829.11,230.451 1829.68,230.451 1830.25,229.431 1830.82,229.551 1831.39,229.831 1831.95,227.926 1832.52,228.136 1833.09,228.17 1833.66,226.364 1834.23,225.566 1834.8,223.935 1835.36,226.669 1835.93,229.096 1836.5,229.436 1837.07,227.609 1837.64,228.953 1838.21,231.289 1838.77,233.343 1839.34,233.058 1839.91,231.767 1840.48,234.684 1841.05,234.242 1841.62,234.339 1842.18,234.184 1842.75,233.105 1843.32,231.895 1843.89,233.849 1844.46,235.816 1845.03,234.617 1845.59,234.324 1846.16,235.017 1846.73,235.058 1847.3,233.877 1847.87,234.867 1848.44,234.83 1849,234.534 1849.57,232.442 1850.14,233.054 1850.71,232.665 1851.28,230.464 1851.85,227.425 1852.41,227.618 1852.98,224.619 1853.55,225.929 1854.12,224.372 1854.69,227.923 1855.26,228.258 1855.82,226.448 1856.39,226.924 1856.96,226.405 1857.53,224.801 1858.1,227.395 1858.67,229.603 1859.23,228.783 1859.8,229.951 1860.37,230.183 1860.94,228.232 1861.51,227.544 1862.08,227.715 1862.64,227.127 1863.21,226.445 1863.78,229.978 1864.35,231.951 1864.92,231.988 1865.49,232.171 1866.05,226.083 1866.62,226.531 1867.19,228.854 1867.76,231.176 1868.33,231.185 1868.9,232.182 1869.46,232.031 1870.03,232.124 1870.6,232.094 1871.17,231.951 1871.74,231.95 1872.31,231.982 1872.87,234.143 1873.44,236.073 1874.01,236.826 1874.58,236.572 1875.15,235.05 1875.72,236.962 1876.28,236.42 1876.85,236.984 1877.42,235.348 1877.99,235.988 1878.56,236.786 1879.13,234.317 1879.69,235.074 1880.26,235.951 1880.83,232.447 1881.4,232.524 1881.97,231.227 1882.54,231.069 1883.1,229.977 1883.67,229.873 1884.24,233.093 1884.81,234.119 1885.38,231.807 1885.95,232.629 1886.51,232.39 1887.08,234.182 1887.65,234.109 1888.22,236.002 1888.79,233.501 1889.36,234.244 1889.92,236.052 1890.49,238.706 1891.06,238.108 1891.63,236.43 1892.2,234.878 1892.77,232.627 1893.33,234.317 1893.9,233.982 1894.47,234.633 1895.04,233.112 1895.61,233.837 1896.18,232.693 1896.74,233.535 1897.31,235.441 1897.88,236.155 1898.45,233.836 1899.02,235.651 1899.59,239.266 1900.16,238.488 1900.72,236.532 1901.29,236.993 1901.86,236.177 1902.43,236.672 1903,234.972 1903.57,232.618 1904.13,233.434 1904.7,231.18 1905.27,231.045 1905.84,231.694 1906.41,227.48 1906.98,227.568 1907.54,228.61 1908.11,229.558 1908.68,230.49 1909.25,232.207 1909.82,233.026 1910.39,229.655 1910.95,228.623 1911.52,227.672 1912.09,226.665 1912.66,226.734 1913.23,225.792 1913.8,228.424 1914.36,227.57 1914.93,227.83 1915.5,227.869 1916.07,224.919 1916.64,225.349 1917.21,224.622 1917.77,223.983 1918.34,226.601 1918.91,226.002 1919.48,226.297 1920.05,230.681 1920.62,231.823 1921.18,230.709 1921.75,229.842 1922.32,230.83 1922.89,230.836 1923.46,228.94 1924.03,229.991 1924.59,230.988 1925.16,230.924 1925.73,229.89 1926.3,231.032 1926.87,229.938 1927.44,227.85 1928,228.246 1928.57,228.582 1929.14,228.636 1929.71,227.742 1930.28,229.952 1930.85,227.939 1931.41,226.126 1931.98,226.321 1932.55,224.491 1933.12,225.094 1933.69,226.481 1934.26,226.803 1934.82,224.939 1935.39,224.299 1935.96,224.632 1936.53,224.161 1937.1,224.72 1937.67,225.142 1938.23,224.782 1938.8,225.139 1939.37,225.492 1939.94,225.842 1940.51,228.299 1941.08,227.739 1941.64,228.157 1942.21,228.079 1942.78,227.563 1943.35,229.023 1943.92,230.304 1944.49,228.467 1945.05,227.748 1945.62,230.293 1946.19,231.618 1946.76,232.693 1947.33,232.752 1947.9,232.722 1948.46,231.663 1949.03,231.028 1949.6,230.2 1950.17,230.445 1950.74,232.607 1951.31,234.615 1951.87,234.054 1952.44,233.152 1953.01,234.238 1953.58,233.317 1954.15,236.271 1954.72,236.848 1955.28,234.528 1955.85,234.335 1956.42,236.431 1956.99,235.986 1957.56,236.75 1958.13,239.383 1958.69,238.673 1959.26,237.177 1959.83,234.683 1960.4,235.56 1960.97,235.296 1961.54,233.196 1962.1,233.048 1962.67,233.676 1963.24,233.51 1963.81,236.346 1964.38,233.711 1964.95,231.523 1965.51,231.516 1966.08,230.557 1966.65,231.693 1967.22,233.51 1967.79,232.172 1968.36,234.007 1968.92,234.932 1969.49,233.587 1970.06,231.381 1970.63,231.423 1971.2,231.261 1971.77,231.359 1972.34,231.37 1972.9,231.281 1973.47,230.456 1974.04,230.53 1974.61,228.24 1975.18,226.322 1975.75,228.706 1976.31,230.854 1976.88,230.76 1977.45,231.955 1978.02,232.687 1978.59,232.376 1979.16,230.135 1979.72,231.091 1980.29,229.989 1980.86,231.018 1981.43,230.833 1982,230.603 1982.57,229.65 1983.13,228.717 1983.7,228.881 1984.27,228.119 1984.84,229.168 1985.41,229.105 1985.98,229.315 1986.54,229.325 1987.11,228.476 1987.68,228.518 1988.25,227.763 1988.82,228.015 1989.39,228.248 1989.95,228.473 1990.52,229.598 1991.09,229.748 1991.66,228.858 1992.23,228.945 1992.8,230.02 1993.36,231.048 1993.93,230.949 1994.5,229.824 1995.07,229.959 1995.64,231.186 1996.21,228.249 1996.77,228.53 1997.34,226.866 1997.91,230.207 1998.48,230.352 1999.05,229.41 1999.62,229.877 2000.18,230.995 2000.75,231.066 2001.32,231.242 2001.89,230.281 2002.46,234.617 2003.03,233.417 2003.59,235.341 2004.16,233.178 2004.73,229.925 2005.3,228.846 2005.87,229.163 2006.44,232.589 2007,232.672 2007.57,230.596 2008.14,229.817 2008.71,232.055 2009.28,230.645 2009.85,230.784 2010.41,232.849 2010.98,233.781 2011.55,233.556 2012.12,233.614 2012.69,234.707 2013.26,235.375 2013.82,236.062 2014.39,233.672 2014.96,234.496 2015.53,235.368 2016.1,235.127 2016.67,234.9 2017.23,234.549 2017.8,235.352 2018.37,237.868 2018.94,238.326 2019.51,238.887 2020.08,237.311 2020.64,237.642 2021.21,235.915 2021.78,236.465 2022.35,237.015 2022.92,237.417 2023.49,234.828 2024.05,232.678 2024.62,232.7 2025.19,232.478 2025.76,231.133 2026.33,230.758 2026.9,230.736 2027.46,229.643 2028.03,230.773 2028.6,231.705 2029.17,232.631 2029.74,230.299 2030.31,231.638 2030.87,230.682 2031.44,231.598 2032.01,232.504 2032.58,228.991 2033.15,231.231 2033.72,231.065 2034.28,230.043 2034.85,230.109 2035.42,229.876 2035.99,229.253 2036.56,229.16 2037.13,228.35 2037.69,229.405 2038.26,227.424 2038.83,229.386 2039.4,228.177 2039.97,229.514 2040.54,230.366 2041.11,230.322 2041.67,230.413 2042.24,230.267 2042.81,230.305 2043.38,232.306 2043.95,230.104 2044.52,230.024 2045.08,229.97 2045.65,229.131 2046.22,228.228 2046.79,227.078 2047.36,226.356 2047.93,227.693 2048.49,226.811 2049.06,226.192 2049.63,227.499 2050.2,227.903 2050.77,227.017 2051.34,227.253 2051.9,228.475 2052.47,231.749 2053.04,232.716 2053.61,232.563 2054.18,233.513 2054.75,234.174 2055.31,232.955 2055.88,231.631 2056.45,231.638 2057.02,228.33 2057.59,229.521 2058.16,230.378 2058.72,229.393 2059.29,229.519 2059.86,228.825 2060.43,228.158 2061,227.424 2061.57,229.798 2062.13,232.141 2062.7,234.332 2063.27,233.149 2063.84,235.033 2064.41,234.802 2064.98,233.459 2065.54,233.209 2066.11,233.258 2066.68,232.059 2067.25,231.872 2067.82,232.823 2068.39,231.572 2068.95,230.541 2069.52,230.678 2070.09,231.727 2070.66,230.953 2071.23,234.209 2071.8,234.062 2072.36,233.567 2072.93,232.252 2073.5,231.084 2074.07,230.769 2074.64,228.835 2075.21,230.077 2075.77,229.068 2076.34,230.297 2076.91,228.108 2077.48,226.283 2078.05,228.671 2078.62,229.972 2079.18,230.11 2079.75,233.369 2080.32,232.303 2080.89,229.858 2081.46,230.131 2082.03,230.997 2082.59,232.078 2083.16,231.14 2083.73,231.158 2084.3,231.291 2084.87,232.224 2085.44,232 2086,231.061 2086.57,230.069 2087.14,231.263 2087.71,230.273 2088.28,230.209 2088.85,229.323 2089.41,229.44 2089.98,229.646 2090.55,230.076 2091.12,232.115 2091.69,236.149 2092.26,235.933 2092.82,235.459 2093.39,235.309 2093.96,234.274 2094.53,233.887 2095.1,232.478 2095.67,232.336 2096.23,234.189 2096.8,236.136 2097.37,234.684 2097.94,233.541 2098.51,234.563 2099.08,232.208 2099.64,231.956 2100.21,232.76 2100.78,235.722 2101.35,235.391 2101.92,232.933 2102.49,233.791 2103.05,231.667 2103.62,231.284 2104.19,230.058 2104.76,230.114 2105.33,230.277 2105.9,229.314 2106.46,231.568 2107.03,232.709 2107.6,232.482 2108.17,233.372 2108.74,233.907 2109.31,231.416 2109.87,230.408 2110.44,229.415 2111.01,231.611 2111.58,230.356 2112.15,228.463 2112.72,229.424 2113.29,230.443 2113.85,230.43 2114.42,230.612 2114.99,231.873 2115.56,231.653 2116.13,232.424 2116.7,231.306 2117.26,229.001 2117.83,228.153 2118.4,228.575 2118.97,228.654 2119.54,229.936 2120.11,229.003 2120.67,228.061 2121.24,229.335 2121.81,229.433 2122.38,229.716 2122.95,228.744 2123.52,227.898 2124.08,229.264 2124.65,228.469 2125.22,230.89 2125.79,229.633 2126.36,227.77 2126.93,229.217 2127.49,228.361 2128.06,229.607 2128.63,229.578 2129.2,228.817 2129.77,229.876 2130.34,228.119 2130.9,230.438 2131.47,230.371 2132.04,230.421 2132.61,229.422 2133.18,228.509 2133.75,226.842 2134.31,227.049 2134.88,227.502 2135.45,228.888 2136.02,226.965 2136.59,227.051 2137.16,226.202 2137.72,225.485 2138.29,223.035 2138.86,223.65 2139.43,222.26 2140,223.288 2140.57,225.935 2141.13,225.427 2141.7,226.975 2142.27,227.173 2142.84,228.564 2143.41,228.796 2143.98,231.153 2144.54,230.121 2145.11,231.279 2145.68,230.288 2146.25,230.56 2146.82,230.813 2147.39,230.977 2147.95,232.074 2148.52,232.127 2149.09,234.196 2149.66,233.003 2150.23,231.84 2150.8,232.018 2151.36,236.241 2151.93,234.776 2152.5,236.655 2153.07,235.528 2153.64,234.316 2154.21,231.24 2154.77,231.363 2155.34,230.427 2155.91,229.284 2156.48,229.589 2157.05,228.904 2157.62,229.373 2158.18,232.358 2158.75,234.528 2159.32,233.417 2159.89,233.478 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip830)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip830)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip830)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip830)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.023\n  with uncertainty of ± 0.0020685664285405845\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01548 ± (0.00236412, 0.00263506) (MC)\n  95% confidence interval: [-4.02082, -4.01058] (MC)\n  linear error propagation: -4.01567 ± 0.00250847\n  |δ_y| = |0.00141769| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0154827874405346, val_l = 0.005340339726067178, val_u = 0.004899122930433819)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip860\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip860)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip861\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip860)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip862\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.97 2211.02,1147.97 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,985.636 2211.02,985.636 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,823.306 2211.02,823.306 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,660.976 2211.02,660.976 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,498.647 2211.02,498.647 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,336.317 2211.02,336.317 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.97 365.751,1147.97 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,985.636 365.751,985.636 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,823.306 365.751,823.306 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,660.976 365.751,660.976 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,498.647 365.751,498.647 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,336.317 365.751,336.317 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M298.909 1133.76 Q295.298 1133.76 293.469 1137.33 Q291.664 1140.87 291.664 1148 Q291.664 1155.11 293.469 1158.67 Q295.298 1162.21 298.909 1162.21 Q302.543 1162.21 304.349 1158.67 Q306.177 1155.11 306.177 1148 Q306.177 1140.87 304.349 1137.33 Q302.543 1133.76 298.909 1133.76 M298.909 1130.06 Q304.719 1130.06 307.775 1134.67 Q310.853 1139.25 310.853 1148 Q310.853 1156.73 307.775 1161.33 Q304.719 1165.92 298.909 1165.92 Q293.099 1165.92 290.02 1161.33 Q286.964 1156.73 286.964 1148 Q286.964 1139.25 290.02 1134.67 Q293.099 1130.06 298.909 1130.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M259.557 998.981 L267.196 998.981 L267.196 972.615 L258.886 974.282 L258.886 970.023 L267.15 968.356 L271.826 968.356 L271.826 998.981 L279.465 998.981 L279.465 1002.92 L259.557 1002.92 L259.557 998.981 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M298.909 971.435 Q295.298 971.435 293.469 974.999 Q291.664 978.541 291.664 985.671 Q291.664 992.777 293.469 996.342 Q295.298 999.883 298.909 999.883 Q302.543 999.883 304.349 996.342 Q306.177 992.777 306.177 985.671 Q306.177 978.541 304.349 974.999 Q302.543 971.435 298.909 971.435 M298.909 967.731 Q304.719 967.731 307.775 972.337 Q310.853 976.921 310.853 985.671 Q310.853 994.397 307.775 999.004 Q304.719 1003.59 298.909 1003.59 Q293.099 1003.59 290.02 999.004 Q286.964 994.397 286.964 985.671 Q286.964 976.921 290.02 972.337 Q293.099 967.731 298.909 967.731 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M262.775 836.651 L279.094 836.651 L279.094 840.586 L257.15 840.586 L257.15 836.651 Q259.812 833.896 264.395 829.267 Q269.002 824.614 270.182 823.271 Q272.428 820.748 273.307 819.012 Q274.21 817.253 274.21 815.563 Q274.21 812.808 272.266 811.072 Q270.344 809.336 267.242 809.336 Q265.043 809.336 262.59 810.1 Q260.159 810.864 257.381 812.415 L257.381 807.693 Q260.205 806.559 262.659 805.98 Q265.113 805.401 267.15 805.401 Q272.52 805.401 275.715 808.086 Q278.909 810.771 278.909 815.262 Q278.909 817.392 278.099 819.313 Q277.312 821.211 275.205 823.804 Q274.627 824.475 271.525 827.693 Q268.423 830.887 262.775 836.651 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M298.909 809.105 Q295.298 809.105 293.469 812.67 Q291.664 816.211 291.664 823.341 Q291.664 830.447 293.469 834.012 Q295.298 837.554 298.909 837.554 Q302.543 837.554 304.349 834.012 Q306.177 830.447 306.177 823.341 Q306.177 816.211 304.349 812.67 Q302.543 809.105 298.909 809.105 M298.909 805.401 Q304.719 805.401 307.775 810.008 Q310.853 814.591 310.853 823.341 Q310.853 832.068 307.775 836.674 Q304.719 841.257 298.909 841.257 Q293.099 841.257 290.02 836.674 Q286.964 832.068 286.964 823.341 Q286.964 814.591 290.02 810.008 Q293.099 805.401 298.909 805.401 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M272.914 659.622 Q276.27 660.34 278.145 662.608 Q280.043 664.877 280.043 668.21 Q280.043 673.326 276.525 676.127 Q273.006 678.928 266.525 678.928 Q264.349 678.928 262.034 678.488 Q259.742 678.071 257.289 677.215 L257.289 672.701 Q259.233 673.835 261.548 674.414 Q263.863 674.992 266.386 674.992 Q270.784 674.992 273.076 673.256 Q275.39 671.52 275.39 668.21 Q275.39 665.155 273.238 663.442 Q271.108 661.706 267.289 661.706 L263.261 661.706 L263.261 657.863 L267.474 657.863 Q270.923 657.863 272.752 656.497 Q274.58 655.108 274.58 652.516 Q274.58 649.854 272.682 648.442 Q270.807 647.007 267.289 647.007 Q265.367 647.007 263.168 647.423 Q260.969 647.84 258.33 648.719 L258.33 644.553 Q260.992 643.812 263.307 643.442 Q265.645 643.071 267.705 643.071 Q273.029 643.071 276.131 645.502 Q279.233 647.909 279.233 652.03 Q279.233 654.9 277.59 656.891 Q275.946 658.858 272.914 659.622 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M298.909 646.775 Q295.298 646.775 293.469 650.34 Q291.664 653.881 291.664 661.011 Q291.664 668.118 293.469 671.682 Q295.298 675.224 298.909 675.224 Q302.543 675.224 304.349 671.682 Q306.177 668.118 306.177 661.011 Q306.177 653.881 304.349 650.34 Q302.543 646.775 298.909 646.775 M298.909 643.071 Q304.719 643.071 307.775 647.678 Q310.853 652.261 310.853 661.011 Q310.853 669.738 307.775 674.344 Q304.719 678.928 298.909 678.928 Q293.099 678.928 290.02 674.344 Q286.964 669.738 286.964 661.011 Q286.964 652.261 290.02 647.678 Q293.099 643.071 298.909 643.071 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M271.594 485.441 L259.789 503.89 L271.594 503.89 L271.594 485.441 M270.367 481.367 L276.247 481.367 L276.247 503.89 L281.177 503.89 L281.177 507.778 L276.247 507.778 L276.247 515.927 L271.594 515.927 L271.594 507.778 L255.992 507.778 L255.992 503.265 L270.367 481.367 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M298.909 484.445 Q295.298 484.445 293.469 488.01 Q291.664 491.552 291.664 498.681 Q291.664 505.788 293.469 509.353 Q295.298 512.894 298.909 512.894 Q302.543 512.894 304.349 509.353 Q306.177 505.788 306.177 498.681 Q306.177 491.552 304.349 488.01 Q302.543 484.445 298.909 484.445 M298.909 480.742 Q304.719 480.742 307.775 485.348 Q310.853 489.931 310.853 498.681 Q310.853 507.408 307.775 512.015 Q304.719 516.598 298.909 516.598 Q293.099 516.598 290.02 512.015 Q286.964 507.408 286.964 498.681 Q286.964 489.931 290.02 485.348 Q293.099 480.742 298.909 480.742 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M258.793 319.037 L277.15 319.037 L277.15 322.972 L263.076 322.972 L263.076 331.444 Q264.094 331.097 265.113 330.935 Q266.131 330.75 267.15 330.75 Q272.937 330.75 276.316 333.921 Q279.696 337.092 279.696 342.509 Q279.696 348.088 276.224 351.189 Q272.752 354.268 266.432 354.268 Q264.256 354.268 261.988 353.898 Q259.742 353.527 257.335 352.787 L257.335 348.088 Q259.418 349.222 261.641 349.777 Q263.863 350.333 266.34 350.333 Q270.344 350.333 272.682 348.227 Q275.02 346.12 275.02 342.509 Q275.02 338.898 272.682 336.791 Q270.344 334.685 266.34 334.685 Q264.465 334.685 262.59 335.102 Q260.738 335.518 258.793 336.398 L258.793 319.037 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M298.909 322.116 Q295.298 322.116 293.469 325.68 Q291.664 329.222 291.664 336.352 Q291.664 343.458 293.469 347.023 Q295.298 350.564 298.909 350.564 Q302.543 350.564 304.349 347.023 Q306.177 343.458 306.177 336.352 Q306.177 329.222 304.349 325.68 Q302.543 322.116 298.909 322.116 M298.909 318.412 Q304.719 318.412 307.775 323.018 Q310.853 327.602 310.853 336.352 Q310.853 345.078 307.775 349.685 Q304.719 354.268 298.909 354.268 Q293.099 354.268 290.02 349.685 Q286.964 345.078 286.964 336.352 Q286.964 327.602 290.02 323.018 Q293.099 318.412 298.909 318.412 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip862)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1028.36 400.199,1043.84 400.786,934.636 401.372,836.436 401.958,750.472 402.545,667.926 403.131,596.518 403.718,525.675 404.304,558.437 404.891,495.49 405.477,439.792 406.063,389.497 406.65,344.254 407.236,303.737 407.823,267.639 408.409,301.791 408.995,270.829 409.582,243.612 410.168,219.895 410.755,300.932 411.341,280.3 411.927,304.11 412.514,325.732 413.1,346.394 413.687,331.317 414.273,318.051 414.86,308.345 415.446,327.646 416.032,321.89 416.619,316.612 417.205,336.416 417.792,332.752 418.378,351.809 418.964,351.214 419.551,352.026 420.137,388.684 420.724,405.671 421.31,407.553 421.896,424.744 422.483,427.772 423.069,431.928 423.656,460.798 424.242,476.777 424.829,492.288 425.415,497.675 426.001,513.127 426.588,518.789 427.174,524.725 427.761,558.07 428.347,572.987 428.933,595.218 429.52,609.197 430.106,616.224 430.693,637.056 431.279,656.569 431.865,669.548 432.452,676.697 433.038,683.878 433.625,702.519 434.211,709.389 434.798,716.792 435.384,739.252 435.97,750.222 436.557,766.672 437.143,777.675 437.73,783.922 438.316,811.553 438.902,817.219 439.489,831.456 440.075,837.707 440.662,847.213 441.248,864.414 441.835,873.373 442.421,885.725 443.007,898.124 443.594,913.267 444.18,918.604 444.767,929.692 445.353,937.821 445.939,948.552 446.526,955.758 447.112,970.848 447.699,977.682 448.285,982.067 448.871,988.683 449.458,1005.51 450.044,1014.29 450.631,1022.76 451.217,1028.79 451.804,1034.4 452.39,1039.8 452.976,1043.14 453.563,1046.3 454.149,1047.5 454.736,1053.26 455.322,1056.67 455.908,1066.42 456.495,1069.75 457.081,1079.12 457.668,1088.4 458.254,1096.97 458.84,1099.18 459.427,1103.11 460.013,1105.46 460.6,1111.93 461.186,1114.09 461.773,1116.47 462.359,1118.42 462.945,1126.27 463.532,1130.41 464.118,1137.94 464.705,1139.73 465.291,1145.22 465.877,1150.42 466.464,1153.38 467.05,1158.48 467.637,1161.45 468.223,1164.37 468.809,1167.37 469.396,1170.32 469.982,1171.58 470.569,1172.2 471.155,1174.98 471.742,1176.15 472.328,1178.71 472.914,1181.19 473.501,1183.64 474.087,1189.07 474.674,1189.58 475.26,1193.25 475.846,1195.17 476.433,1195.5 477.019,1198.92 477.606,1199.2 478.192,1201.21 478.778,1206.23 479.365,1209.83 479.951,1212.61 480.538,1212.17 481.124,1211.93 481.711,1211.66 482.297,1211.49 482.883,1213.11 483.47,1213.38 484.056,1216.22 484.643,1217.78 485.229,1219.29 485.815,1226.65 486.402,1226.01 486.988,1225.56 487.575,1225.03 488.161,1224.74 488.748,1227.52 489.334,1225.51 489.92,1226.62 490.507,1231.95 491.093,1233.01 491.68,1235.48 492.266,1231.83 492.852,1231.43 493.439,1229.52 494.025,1233.66 494.612,1233.16 495.198,1232.36 495.784,1236.29 496.371,1235.28 496.957,1236.16 497.544,1236.86 498.13,1237.72 498.717,1237.05 499.303,1235.08 499.889,1236.07 500.476,1238.49 501.062,1240.83 501.649,1241.7 502.235,1243.76 502.821,1242.64 503.408,1243.19 503.994,1243.68 504.581,1245.56 505.167,1247.61 505.753,1248.37 506.34,1249.1 506.926,1248.25 507.513,1248.82 508.099,1245.17 508.686,1241.54 509.272,1243.78 509.858,1242.89 510.445,1245.17 511.031,1242.84 511.618,1245.1 512.204,1244.36 512.79,1243.87 513.377,1244.55 513.963,1242.49 514.55,1240.83 515.136,1241.66 515.722,1241.12 516.309,1240.74 516.895,1243.04 517.482,1242.37 518.068,1242.2 518.655,1241.51 519.241,1240.91 519.827,1240.49 520.414,1241.41 521,1241.15 521.587,1239.15 522.173,1237.51 522.759,1237.18 523.346,1238.24 523.932,1235.2 524.519,1234.86 525.105,1233.27 525.691,1234.55 526.278,1234.48 526.864,1234.34 527.451,1232.84 528.037,1233.93 528.624,1234.06 529.21,1232.74 529.796,1230.03 530.383,1228.73 530.969,1228.88 531.556,1231.43 532.142,1234.36 532.728,1236.62 533.315,1240.8 533.901,1242.79 534.488,1246.27 535.074,1247.02 535.661,1246.52 536.247,1247.11 536.833,1246.18 537.42,1245.37 538.006,1248.51 538.593,1244.85 539.179,1244.26 539.765,1245.44 540.352,1247.38 540.938,1250.53 541.525,1249.17 542.111,1248.12 542.697,1247.46 543.284,1245.13 543.87,1244.65 544.457,1245.22 545.043,1247.05 545.63,1246.54 546.216,1242.91 546.802,1242.3 547.389,1243.28 547.975,1243.89 548.562,1243.12 549.148,1246.25 549.734,1246.51 550.321,1247.06 550.907,1247.46 551.494,1246.81 552.08,1245.79 552.666,1243.43 553.253,1242.52 553.839,1241.95 554.426,1241.34 555.012,1240.42 555.599,1241.09 556.185,1240.69 556.771,1239.86 557.358,1239.07 557.944,1238.73 558.531,1238.37 559.117,1234.01 559.703,1236.33 560.29,1235.79 560.876,1235.24 561.463,1234.76 562.049,1231.85 562.635,1230.66 563.222,1230.73 563.808,1229.21 564.395,1229.27 564.981,1225.23 565.568,1232.12 566.154,1231.97 566.74,1231.54 567.327,1231.89 567.913,1234.37 568.5,1238.23 569.086,1237.61 569.672,1237.44 570.259,1236.78 570.845,1237.55 571.432,1238.08 572.018,1236.42 572.605,1237.34 573.191,1235.47 573.777,1237.89 574.364,1238.86 574.95,1238.22 575.537,1236.39 576.123,1233.1 576.709,1233.99 577.296,1236.27 577.882,1235.89 578.469,1238.01 579.055,1236.32 579.641,1234.66 580.228,1233.22 580.814,1234.09 581.401,1233.66 581.987,1234.63 582.574,1234.24 583.16,1232.77 583.746,1232.33 584.333,1232.15 584.919,1231.8 585.506,1234.03 586.092,1232.13 586.678,1230.5 587.265,1227.82 587.851,1227.82 588.438,1229.37 589.024,1228.04 589.61,1230.38 590.197,1232.96 590.783,1234.79 591.37,1232.7 591.956,1234.83 592.543,1234.26 593.129,1233.82 593.715,1236.04 594.302,1238.05 594.888,1235.94 595.475,1232.8 596.061,1231.16 596.647,1232.23 597.234,1231.73 597.82,1229.66 598.407,1230.78 598.993,1229.2 599.579,1231.45 600.166,1231.02 600.752,1230.53 601.339,1230.36 601.925,1232.68 602.512,1233.19 603.098,1235.25 603.684,1234.67 604.271,1231.55 604.857,1226.83 605.444,1226.89 606.03,1223.9 606.616,1224.92 607.203,1224.47 607.789,1224.25 608.376,1225.66 608.962,1224.32 609.548,1220.44 610.135,1223.21 610.721,1225.99 611.308,1225.85 611.894,1227.2 612.481,1222.9 613.067,1225.63 613.653,1225.52 614.24,1226.86 614.826,1225.57 615.413,1225.45 615.999,1227.8 616.585,1230.17 617.172,1231 617.758,1229.21 618.345,1228.99 618.931,1228.56 619.518,1226.88 620.104,1226.92 620.69,1225.59 621.277,1224.26 621.863,1228.36 622.45,1228.22 623.036,1228.2 623.622,1229.03 624.209,1230.03 624.795,1228.59 625.382,1227.19 625.968,1227.11 626.554,1228.16 627.141,1226.56 627.727,1223.6 628.314,1226.39 628.9,1224.47 629.487,1224.26 630.073,1224.52 630.659,1226.05 631.246,1225.91 631.832,1225.63 632.419,1225.59 633.005,1226.68 633.591,1223.64 634.178,1222.29 634.764,1220.97 635.351,1220.85 635.937,1219.33 636.523,1220.96 637.11,1221.24 637.696,1221.14 638.283,1221.19 638.869,1221.26 639.456,1221.35 640.042,1220.1 640.628,1218.64 641.215,1217.43 641.801,1218.77 642.388,1218.81 642.974,1217.64 643.56,1217.58 644.147,1216.38 644.733,1217.9 645.32,1219.29 645.906,1217.04 646.492,1217.39 647.079,1217.58 647.665,1219 648.252,1220.48 648.838,1220.57 649.425,1221.96 650.011,1222.23 650.597,1223.55 651.184,1223.54 651.77,1224.95 652.357,1224.72 652.943,1223.14 653.529,1223.17 654.116,1223.07 654.702,1221.68 655.289,1221.56 655.875,1222.98 656.462,1222.71 657.048,1223.83 657.634,1225.03 658.221,1225.2 658.807,1226.52 659.394,1225.93 659.98,1224.3 660.566,1225.45 661.153,1226.46 661.739,1225.84 662.326,1228.34 662.912,1226.45 663.498,1226.36 664.085,1228.58 664.671,1225.34 665.258,1226.61 665.844,1226.25 666.431,1223.63 667.017,1223.44 667.603,1221.94 668.19,1221.8 668.776,1221.43 669.363,1221.5 669.949,1222.66 670.535,1222.49 671.122,1224.87 671.708,1222.85 672.295,1225.44 672.881,1227.6 673.467,1228.56 674.054,1229.71 674.64,1231.98 675.227,1231.38 675.813,1229.47 676.4,1227.57 676.986,1226.13 677.572,1228.46 678.159,1224.17 678.745,1222.55 679.332,1222.12 679.918,1223.24 680.504,1222.89 681.091,1222.32 681.677,1223.5 682.264,1224.77 682.85,1224.43 683.436,1220.31 684.023,1220.22 684.609,1221.25 685.196,1219.71 685.782,1221.15 686.369,1219.86 686.955,1218.72 687.541,1222.62 688.128,1223.71 688.714,1223.93 689.301,1225.24 689.887,1223.56 690.473,1225.89 691.06,1226.97 691.646,1225.42 692.233,1227.62 692.819,1223.39 693.405,1224.58 693.992,1221.65 694.578,1221.46 695.165,1217.46 695.751,1217.82 696.338,1217.79 696.924,1216.42 697.51,1216.41 698.097,1216.66 698.683,1217.79 699.27,1217.77 699.856,1216.57 700.442,1219.41 701.029,1219.74 701.615,1219.82 702.202,1220.1 702.788,1225.42 703.375,1222.54 703.961,1219.51 704.547,1219.67 705.134,1220.74 705.72,1219.5 706.307,1219.43 706.893,1219.27 707.479,1220.63 708.066,1219.25 708.652,1216.54 709.239,1213.88 709.825,1212.53 710.411,1212.69 710.998,1214.55 711.584,1217.32 712.171,1218.78 712.757,1221.57 713.344,1219.81 713.93,1217.03 714.516,1220.78 715.103,1219.32 715.689,1219.38 716.276,1219.26 716.862,1219.44 717.448,1217.9 718.035,1217.86 718.621,1216.52 719.208,1216.78 719.794,1220.93 720.38,1219.46 720.967,1220.68 721.553,1223.24 722.14,1221.48 722.726,1222.69 723.313,1222.5 723.899,1221.99 724.485,1221.62 725.072,1218.89 725.658,1218.55 726.245,1216.09 726.831,1212.11 727.417,1212.37 728.004,1213.87 728.59,1219.31 729.177,1217.92 729.763,1217.97 730.349,1219.12 730.936,1217.64 731.522,1221.49 732.109,1225.38 732.695,1223.53 733.282,1221.79 733.868,1221.32 734.454,1218.73 735.041,1220.15 735.627,1218.61 736.214,1219.89 736.8,1218.44 737.386,1221.01 737.973,1220.97 738.559,1218 739.146,1217.96 739.732,1220.52 740.318,1220.51 740.905,1221.55 741.491,1225.15 742.078,1227.59 742.664,1224.32 743.251,1222.65 743.837,1219.81 744.423,1221.16 745.01,1223.62 745.596,1224.58 746.183,1222.68 746.769,1223.57 747.355,1223.2 747.942,1222.95 748.528,1219.74 749.115,1218.13 749.701,1216.5 750.288,1216.54 750.874,1215.18 751.46,1212.75 752.047,1216.9 752.633,1212.73 753.22,1212.83 753.806,1215.79 754.392,1217.43 754.979,1217.71 755.565,1217.7 756.152,1216.32 756.738,1216.42 757.324,1215.45 757.911,1216.99 758.497,1217.08 759.084,1217.41 759.67,1214.45 760.257,1213.56 760.843,1216.49 761.429,1216.54 762.016,1211.17 762.602,1211.36 763.189,1210.25 763.775,1210.64 764.361,1209.85 764.948,1210.36 765.534,1211.95 766.121,1212.57 766.707,1212.89 767.293,1211.91 767.88,1214.5 768.466,1217.17 769.053,1218.79 769.639,1220.19 770.226,1217.43 770.812,1221.13 771.398,1218.37 771.985,1218.41 772.571,1218.55 773.158,1218.53 773.744,1219.82 774.33,1219.86 774.917,1218.65 775.503,1219.89 776.09,1221.11 776.676,1221.02 777.262,1223.58 777.849,1223.36 778.435,1224.45 779.022,1222.5 779.608,1222.24 780.195,1224.48 780.781,1224.11 781.367,1224.96 781.954,1225.95 782.54,1226.68 783.127,1227.2 783.713,1225.29 784.299,1228.46 784.886,1227.62 785.472,1226.94 786.059,1226.54 786.645,1225.9 787.232,1225.26 787.818,1224.72 788.404,1224.56 788.991,1225.58 789.577,1225.26 790.164,1222.01 790.75,1224.07 791.336,1222.42 791.923,1222.38 792.509,1223.03 793.096,1221.31 793.682,1220.95 794.268,1222.99 794.855,1220.03 795.441,1222.4 796.028,1221.96 796.614,1217.47 797.201,1217.35 797.787,1216.05 798.373,1214.72 798.96,1214.71 799.546,1213.1 800.133,1213.08 800.719,1212.02 801.305,1216.32 801.892,1216.09 802.478,1216.11 803.065,1216.4 803.651,1213.93 804.237,1215.39 804.824,1216.62 805.41,1217.58 805.997,1217.43 806.583,1217.67 807.17,1217.81 807.756,1219.04 808.342,1217.44 808.929,1217.25 809.515,1213.17 810.102,1214.3 810.688,1214.5 811.274,1213.5 811.861,1213.63 812.447,1212.54 813.034,1212.64 813.62,1214.2 814.206,1215.53 814.793,1217.8 815.379,1216.1 815.966,1217.17 816.552,1218.35 817.139,1219.44 817.725,1218.99 818.311,1217.48 818.898,1217.04 819.484,1217.04 820.071,1214.14 820.657,1215.46 821.243,1216.81 821.83,1215.4 822.416,1214.15 823.003,1214.25 823.589,1211.8 824.175,1210.55 824.762,1211.79 825.348,1217.13 825.935,1213.09 826.521,1209.02 827.108,1209.35 827.694,1211.01 828.28,1211.1 828.867,1212.53 829.453,1212.53 830.04,1214.06 830.626,1208.86 831.212,1210.57 831.799,1210.9 832.385,1211.33 832.972,1212.96 833.558,1212.97 834.145,1213.14 834.731,1213 835.317,1213.08 835.904,1214.6 836.49,1215.93 837.077,1217.14 837.663,1215.69 838.249,1215.62 838.836,1212.98 839.422,1214.42 840.009,1214.47 840.595,1213.09 841.181,1214.54 841.768,1216.09 842.354,1214.74 842.941,1217.27 843.527,1216.41 844.114,1216.48 844.7,1215.12 845.286,1220.37 845.873,1218.75 846.459,1218.86 847.046,1216.03 847.632,1217.14 848.218,1216.05 848.805,1212.28 849.391,1211.2 849.978,1211.42 850.564,1211.68 851.15,1210.66 851.737,1218.78 852.323,1219.72 852.91,1216.72 853.496,1215.32 854.083,1215.04 854.669,1216.3 855.255,1217.61 855.842,1217.57 856.428,1217.51 857.015,1218.85 857.601,1217.08 858.187,1217.02 858.774,1219.58 859.36,1217.7 859.947,1217.78 860.533,1217.45 861.119,1215.87 861.706,1214.37 862.292,1214.55 862.879,1215.72 863.465,1214.48 864.052,1214.48 864.638,1213.39 865.224,1213.54 865.811,1208.12 866.397,1211.11 866.984,1209.91 867.57,1208.96 868.156,1209.29 868.743,1209.53 869.329,1212.57 869.916,1214.01 870.502,1213.96 871.089,1213.83 871.675,1214.09 872.261,1217.14 872.848,1219.72 873.434,1223.57 874.021,1224.44 874.607,1225.46 875.193,1225.18 875.78,1223.26 876.366,1221.73 876.953,1219.15 877.539,1219.1 878.125,1221.26 878.712,1220.86 879.298,1219.44 879.885,1219.32 880.471,1219.17 881.058,1217.58 881.644,1217.29 882.23,1218.83 882.817,1218.7 883.403,1221.27 883.99,1223.41 884.576,1223.02 885.162,1223.99 885.749,1223.56 886.335,1222 886.922,1220.41 887.508,1217.31 888.094,1217.11 888.681,1216.82 889.267,1216.63 889.854,1217.49 890.44,1217.09 891.027,1214.34 891.613,1212.94 892.199,1211.76 892.786,1210.7 893.372,1212.02 893.959,1212.31 894.545,1212.17 895.131,1208.21 895.718,1207.57 896.304,1209.15 896.891,1209.59 897.477,1211.16 898.063,1212.41 898.65,1214.89 899.236,1217.27 899.823,1219.62 900.409,1220.66 900.996,1217.98 901.582,1219.25 902.168,1219.44 902.755,1218.06 903.341,1216.83 903.928,1218.45 904.514,1218.3 905.1,1219.7 905.687,1219.41 906.273,1220.45 906.86,1220.11 907.446,1221.2 908.032,1218.14 908.619,1215.09 909.205,1215.09 909.792,1215.2 910.378,1216.47 910.965,1218.89 911.551,1215.99 912.137,1214.94 912.724,1212.33 913.31,1212.32 913.897,1212.6 914.483,1212.44 915.069,1211.11 915.656,1210.1 916.242,1207.64 916.829,1208.96 917.415,1204.07 918.002,1204.75 918.588,1204.83 919.174,1208.1 919.761,1207.27 920.347,1208.98 920.934,1209.12 921.52,1209.61 922.106,1208.7 922.693,1212.91 923.279,1208.71 923.866,1207.87 924.452,1205.4 925.038,1204.69 925.625,1206.5 926.211,1208.4 926.798,1207.22 927.384,1207.58 927.971,1207.59 928.557,1211.87 929.143,1212.11 929.73,1213.68 930.316,1216.31 930.903,1216.49 931.489,1216.45 932.075,1218.95 932.662,1217.66 933.248,1219.95 933.835,1219.61 934.421,1216.91 935.007,1218.06 935.594,1216.72 936.18,1216.57 936.767,1213.69 937.353,1216.61 937.94,1216.72 938.526,1217.89 939.112,1217.84 939.699,1218.85 940.285,1217.02 940.872,1215.76 941.458,1218.09 942.044,1216.88 942.631,1218.07 943.217,1216.43 943.804,1214.88 944.39,1215.06 944.976,1215.05 945.563,1215.1 946.149,1212.43 946.736,1212.64 947.322,1212.46 947.909,1211.33 948.495,1211.58 949.081,1212.87 949.668,1210.21 950.254,1208.97 950.841,1207.89 951.427,1210.91 952.013,1208.74 952.6,1204.93 953.186,1204.43 953.773,1205.04 954.359,1205.64 954.945,1208.87 955.532,1206.55 956.118,1206.69 956.705,1205.64 957.291,1207.4 957.878,1209.31 958.464,1209.8 959.05,1208.94 959.637,1204.04 960.223,1208.23 960.81,1212.35 961.396,1212.69 961.982,1210.24 962.569,1210.48 963.155,1213.24 963.742,1215.98 964.328,1214.49 964.915,1215.81 965.501,1219.59 966.087,1215.43 966.674,1218.1 967.26,1214 967.847,1216.6 968.433,1216.53 969.019,1212.37 969.606,1211.1 970.192,1211.2 970.779,1212.59 971.365,1215.49 971.951,1219.41 972.538,1223.11 973.124,1223.81 973.711,1219.82 974.297,1215.66 974.884,1214.43 975.47,1214.64 976.056,1213.4 976.643,1213.24 977.229,1213.28 977.816,1213.42 978.402,1216.52 978.988,1213.79 979.575,1214.81 980.161,1214.87 980.748,1212.27 981.334,1209.76 981.92,1209.97 982.507,1210.01 983.093,1210.17 983.68,1211.6 984.266,1214.35 984.853,1214.44 985.439,1214.3 986.025,1212.92 986.612,1214.27 987.198,1214.72 987.785,1213.41 988.371,1210.87 988.957,1209.71 989.544,1212.38 990.13,1213.55 990.717,1213.5 991.303,1214.72 991.889,1215.03 992.476,1212.05 993.062,1210.66 993.649,1210.96 994.235,1213.59 994.822,1213.48 995.408,1214.87 995.994,1216.32 996.581,1215.06 997.167,1216.31 997.754,1217.52 998.34,1221.39 998.926,1220.05 999.513,1219.48 1000.1,1217.75 1000.69,1216.08 1001.27,1214.53 1001.86,1216.9 1002.44,1216.85 1003.03,1216.74 1003.62,1216.58 1004.2,1217.85 1004.79,1217.53 1005.38,1217.54 1005.96,1214.75 1006.55,1217.68 1007.14,1217.57 1007.72,1218.77 1008.31,1218.71 1008.9,1218.57 1009.48,1219.55 1010.07,1218.02 1010.65,1220.31 1011.24,1221.24 1011.83,1219.38 1012.41,1219.1 1013,1219.96 1013.59,1218.24 1014.17,1219.42 1014.76,1219.14 1015.35,1220.32 1015.93,1220.08 1016.52,1218.67 1017.11,1219.89 1017.69,1222.3 1018.28,1221.76 1018.86,1222.77 1019.45,1219.72 1020.04,1221.79 1020.62,1222.48 1021.21,1223.37 1021.8,1224.05 1022.38,1226.13 1022.97,1222.76 1023.56,1222.29 1024.14,1226.06 1024.73,1222.72 1025.32,1223.74 1025.9,1221.75 1026.49,1218.66 1027.07,1217 1027.66,1217.94 1028.25,1214.84 1028.83,1215.95 1029.42,1215.9 1030.01,1217.08 1030.59,1215.39 1031.18,1215.23 1031.77,1213.97 1032.35,1212.67 1032.94,1211.41 1033.52,1210.27 1034.11,1210.19 1034.7,1207.32 1035.28,1207.7 1035.87,1209.43 1036.46,1212.33 1037.04,1212.44 1037.63,1212.48 1038.22,1209.95 1038.8,1208.77 1039.39,1211.85 1039.98,1212.17 1040.56,1215.25 1041.15,1213.68 1041.73,1215.29 1042.32,1217.85 1042.91,1216.24 1043.49,1216.1 1044.08,1219.84 1044.67,1219.44 1045.25,1221.61 1045.84,1219.78 1046.43,1215.54 1047.01,1218.3 1047.6,1215.46 1048.19,1219.48 1048.77,1221.74 1049.36,1219.96 1049.94,1218.13 1050.53,1217.89 1051.12,1217.55 1051.7,1219.91 1052.29,1223.28 1052.88,1223.99 1053.46,1220.71 1054.05,1221.7 1054.64,1221.12 1055.22,1223.49 1055.81,1224.45 1056.39,1222.62 1056.98,1222.25 1057.57,1221.79 1058.15,1220.2 1058.74,1216.92 1059.33,1212.82 1059.91,1212.82 1060.5,1214.03 1061.09,1217.98 1061.67,1214.93 1062.26,1214.7 1062.85,1215.86 1063.43,1216.85 1064.02,1216.66 1064.6,1216.43 1065.19,1216.33 1065.78,1216.09 1066.36,1218.35 1066.95,1216.79 1067.54,1213.65 1068.12,1214.99 1068.71,1213.42 1069.3,1213.31 1069.88,1212.2 1070.47,1212.12 1071.06,1209.9 1071.64,1207.54 1072.23,1210.72 1072.81,1211.02 1073.4,1208.42 1073.99,1210.08 1074.57,1208.93 1075.16,1209.17 1075.75,1208.06 1076.33,1208.32 1076.92,1210.01 1077.51,1211.67 1078.09,1210.42 1078.68,1210.74 1079.26,1209.52 1079.85,1209.72 1080.44,1208.53 1081.02,1208.93 1081.61,1207.73 1082.2,1209.47 1082.78,1213.65 1083.37,1212.33 1083.96,1213.34 1084.54,1209.3 1085.13,1208.57 1085.72,1208.47 1086.3,1207.67 1086.89,1208.23 1087.47,1209.49 1088.06,1209.66 1088.65,1208.29 1089.23,1209.86 1089.82,1208.74 1090.41,1207.6 1090.99,1207.85 1091.58,1204.11 1092.17,1209.69 1092.75,1212.84 1093.34,1211.92 1093.93,1210.57 1094.51,1209.57 1095.1,1209.93 1095.68,1211.17 1096.27,1213.9 1096.86,1217.92 1097.44,1217.64 1098.03,1212.05 1098.62,1212.37 1099.2,1215.08 1099.79,1213.74 1100.38,1215.98 1100.96,1214.36 1101.55,1216.8 1102.14,1220.41 1102.72,1218.86 1103.31,1216.11 1103.89,1218.55 1104.48,1219.32 1105.07,1217.93 1105.65,1220.33 1106.24,1222.39 1106.83,1220.59 1107.41,1225.62 1108,1226.67 1108.59,1224.7 1109.17,1222.96 1109.76,1223.73 1110.34,1219.32 1110.93,1220.19 1111.52,1220.9 1112.1,1219.12 1112.69,1217.73 1113.28,1216.19 1113.86,1216.05 1114.45,1214.93 1115.04,1207.76 1115.62,1209.34 1116.21,1206.93 1116.8,1202.01 1117.38,1203.92 1117.97,1204.42 1118.55,1207.75 1119.14,1212.06 1119.73,1212.17 1120.31,1212.13 1120.9,1210.89 1121.49,1212.31 1122.07,1213.61 1122.66,1213.71 1123.25,1213.7 1123.83,1212.39 1124.42,1208.1 1125.01,1206.96 1125.59,1205.97 1126.18,1205.24 1126.76,1204.13 1127.35,1206.18 1127.94,1203.79 1128.52,1203.04 1129.11,1202.28 1129.7,1201.86 1130.28,1201.3 1130.87,1199.23 1131.46,1201.14 1132.04,1201.43 1132.63,1199.16 1133.21,1201.13 1133.8,1201.67 1134.39,1203.67 1134.97,1208.47 1135.56,1207.62 1136.15,1209.4 1136.73,1209.59 1137.32,1209.98 1137.91,1207.32 1138.49,1207.51 1139.08,1206.7 1139.67,1210.87 1140.25,1211.05 1140.84,1210.96 1141.42,1212.31 1142.01,1213.74 1142.6,1213.66 1143.18,1216.44 1143.77,1217.46 1144.36,1218.54 1144.94,1218.31 1145.53,1215.63 1146.12,1213.96 1146.7,1216.68 1147.29,1215.06 1147.88,1214.77 1148.46,1213.46 1149.05,1212.15 1149.63,1212.25 1150.22,1209.32 1150.81,1209.27 1151.39,1206.98 1151.98,1207.14 1152.57,1206.03 1153.15,1205.28 1153.74,1205.87 1154.33,1208.76 1154.91,1207.64 1155.5,1207.97 1156.09,1209.7 1156.67,1211.23 1157.26,1206.14 1157.84,1208.01 1158.43,1205.54 1159.02,1208.59 1159.6,1208.92 1160.19,1207.9 1160.78,1208.02 1161.36,1212.48 1161.95,1215.18 1162.54,1215.29 1163.12,1215.24 1163.71,1213.91 1164.29,1212.34 1164.88,1211.25 1165.47,1212.72 1166.05,1214.01 1166.64,1211.33 1167.23,1209.97 1167.81,1208.93 1168.4,1209.23 1168.99,1209.59 1169.57,1207.26 1170.16,1204.97 1170.75,1208.21 1171.33,1208.5 1171.92,1208.75 1172.5,1209.2 1173.09,1208.26 1173.68,1208.67 1174.26,1211.48 1174.85,1211.46 1175.44,1212.86 1176.02,1214.27 1176.61,1214.29 1177.2,1215.64 1177.78,1215.4 1178.37,1215.31 1178.96,1213.98 1179.54,1215.09 1180.13,1215.06 1180.71,1216.36 1181.3,1216.23 1181.89,1216.42 1182.47,1220.32 1183.06,1218.87 1183.65,1219.59 1184.23,1220.66 1184.82,1220.25 1185.41,1219.89 1185.99,1220.87 1186.58,1220.51 1187.16,1218.89 1187.75,1220.07 1188.34,1218.47 1188.92,1216.88 1189.51,1217.63 1190.1,1216.03 1190.68,1217.06 1191.27,1219.47 1191.86,1217.96 1192.44,1220.77 1193.03,1219.03 1193.62,1217.25 1194.2,1215.99 1194.79,1214.5 1195.37,1214.48 1195.96,1217.01 1196.55,1218.3 1197.13,1218.28 1197.72,1220.84 1198.31,1219.06 1198.89,1217.42 1199.48,1218.55 1200.07,1219.61 1200.65,1216.96 1201.24,1216.82 1201.83,1215.31 1202.41,1213.7 1203,1213.84 1203.58,1213.94 1204.17,1213.77 1204.76,1216.58 1205.34,1216.64 1205.93,1220.06 1206.52,1218.37 1207.1,1219.57 1207.69,1218.22 1208.28,1220.84 1208.86,1219.44 1209.45,1219.09 1210.03,1217.18 1210.62,1216.9 1211.21,1216.75 1211.79,1216.51 1212.38,1216.29 1212.97,1215.86 1213.55,1213.1 1214.14,1211.61 1214.73,1214.15 1215.31,1213.6 1215.9,1215.08 1216.49,1213.55 1217.07,1214.65 1217.66,1214.47 1218.24,1215.88 1218.83,1215.83 1219.42,1215.84 1220,1215.9 1220.59,1215.42 1221.18,1216.38 1221.76,1216.16 1222.35,1214.59 1222.94,1215.99 1223.52,1214.57 1224.11,1215.65 1224.7,1219.57 1225.28,1219.5 1225.87,1219.01 1226.45,1220.06 1227.04,1217.08 1227.63,1217.09 1228.21,1218.44 1228.8,1216.71 1229.39,1218.82 1229.97,1218.74 1230.56,1218.37 1231.15,1217.76 1231.73,1216.13 1232.32,1216.02 1232.91,1215.86 1233.49,1215.53 1234.08,1215.45 1234.66,1211.79 1235.25,1211.87 1235.84,1213.23 1236.42,1213.06 1237.01,1211.71 1237.6,1207.8 1238.18,1209.41 1238.77,1208.39 1239.36,1208.63 1239.94,1210.09 1240.53,1211.75 1241.11,1212.06 1241.7,1212.27 1242.29,1211.01 1242.87,1212.29 1243.46,1215.09 1244.05,1215.41 1244.63,1215.39 1245.22,1217.82 1245.81,1217.81 1246.39,1216.28 1246.98,1215.08 1247.57,1216.14 1248.15,1218.8 1248.74,1219.77 1249.32,1222.43 1249.91,1220.71 1250.5,1222.76 1251.08,1222.24 1251.67,1218.85 1252.26,1218.4 1252.84,1220.55 1253.43,1212.31 1254.02,1211.27 1254.6,1208.67 1255.19,1210.21 1255.78,1208.98 1256.36,1209.07 1256.95,1209.19 1257.53,1209.51 1258.12,1212.45 1258.71,1209.78 1259.29,1208.46 1259.88,1208.93 1260.47,1209.05 1261.05,1209.32 1261.64,1209.6 1262.23,1211.31 1262.81,1211.58 1263.4,1209.15 1263.98,1210.6 1264.57,1209.26 1265.16,1209.35 1265.74,1208.53 1266.33,1207.44 1266.92,1207.86 1267.5,1208.07 1268.09,1205.58 1268.68,1204.5 1269.26,1207.61 1269.85,1209.14 1270.44,1207.53 1271.02,1206.66 1271.61,1206.89 1272.19,1207.25 1272.78,1207.56 1273.37,1210.7 1273.95,1209.31 1274.54,1208.33 1275.13,1208.58 1275.71,1208.66 1276.3,1212.94 1276.89,1211.52 1277.47,1211.63 1278.06,1213.03 1278.65,1214.09 1279.23,1215.29 1279.82,1214.96 1280.4,1213.38 1280.99,1215.99 1281.58,1215.89 1282.16,1214.29 1282.75,1214.16 1283.34,1214.37 1283.92,1215.72 1284.51,1216.88 1285.1,1215.44 1285.68,1215.29 1286.27,1216.34 1286.86,1216.06 1287.44,1216.3 1288.03,1217.52 1288.61,1218.59 1289.2,1218.06 1289.79,1217.98 1290.37,1218.92 1290.96,1217.34 1291.55,1215.89 1292.13,1215.83 1292.72,1215.43 1293.31,1215.61 1293.89,1217.99 1294.48,1220.07 1295.06,1218.32 1295.65,1219.64 1296.24,1217.97 1296.82,1217.92 1297.41,1216.34 1298,1213.69 1298.58,1215.05 1299.17,1216.25 1299.76,1216.41 1300.34,1217.59 1300.93,1218.28 1301.52,1216.6 1302.1,1215.14 1302.69,1215.05 1303.27,1216.52 1303.86,1217.99 1304.45,1219.06 1305.03,1221.08 1305.62,1220.54 1306.21,1221.28 1306.79,1220.98 1307.38,1223.38 1307.97,1224.11 1308.55,1224.65 1309.14,1226.88 1309.73,1224.85 1310.31,1220.4 1310.9,1220.01 1311.48,1219.78 1312.07,1222.06 1312.66,1217.2 1313.24,1218.27 1313.83,1216.56 1314.42,1214.72 1315,1213.5 1315.59,1214.77 1316.18,1214.62 1316.76,1214.75 1317.35,1210.65 1317.93,1212.37 1318.52,1209.9 1319.11,1208.66 1319.69,1209.16 1320.28,1208.27 1320.87,1206.99 1321.45,1209.93 1322.04,1212.65 1322.63,1211.64 1323.21,1210.58 1323.8,1210.75 1324.39,1209.62 1324.97,1213.93 1325.56,1215.34 1326.14,1215.17 1326.73,1211.07 1327.32,1207.25 1327.9,1206.37 1328.49,1208.02 1329.08,1205.55 1329.66,1206.04 1330.25,1205.97 1330.84,1208.99 1331.42,1209.5 1332.01,1211.09 1332.6,1206.16 1333.18,1205.31 1333.77,1207.11 1334.35,1207.56 1334.94,1209.36 1335.53,1209.51 1336.11,1209.7 1336.7,1209.69 1337.29,1208.53 1337.87,1211.69 1338.46,1210.3 1339.05,1208.72 1339.63,1206.59 1340.22,1207.05 1340.8,1206.04 1341.39,1204.95 1341.98,1205.15 1342.56,1206.7 1343.15,1208.68 1343.74,1208.83 1344.32,1210.44 1344.91,1208.17 1345.5,1208.36 1346.08,1208.69 1346.67,1208.86 1347.26,1208.99 1347.84,1210.26 1348.43,1210.72 1349.01,1209.82 1349.6,1211.25 1350.19,1208.8 1350.77,1207.88 1351.36,1208.56 1351.95,1207.36 1352.53,1208.04 1353.12,1209.62 1353.71,1209.79 1354.29,1208.85 1354.88,1210.61 1355.47,1213.38 1356.05,1211.92 1356.64,1211.91 1357.22,1212.2 1357.81,1214.86 1358.4,1213.61 1358.98,1214.67 1359.57,1214.52 1360.16,1217.3 1360.74,1216.76 1361.33,1217.8 1361.92,1217.47 1362.5,1218.91 1363.09,1217.4 1363.68,1215.89 1364.26,1221.05 1364.85,1222.13 1365.43,1218.89 1366.02,1217.01 1366.61,1215.32 1367.19,1215.55 1367.78,1214.37 1368.37,1215.44 1368.95,1215.3 1369.54,1213.57 1370.13,1215.89 1370.71,1218.2 1371.3,1218.29 1371.88,1215.28 1372.47,1210.04 1373.06,1206.25 1373.64,1204.08 1374.23,1206.04 1374.82,1204.99 1375.4,1204.26 1375.99,1201.88 1376.58,1202.7 1377.16,1203.25 1377.75,1202.32 1378.34,1203.01 1378.92,1203.54 1379.51,1204.02 1380.09,1205.55 1380.68,1207.36 1381.27,1208.03 1381.85,1207.14 1382.44,1209.15 1383.03,1209.49 1383.61,1210.22 1384.2,1214.49 1384.79,1214.31 1385.37,1217.03 1385.96,1218.4 1386.55,1220.63 1387.13,1217.96 1387.72,1217.52 1388.3,1218.56 1388.89,1226.24 1389.48,1224.44 1390.06,1222.81 1390.65,1221.13 1391.24,1219.53 1391.82,1215.46 1392.41,1215.18 1393,1215.29 1393.58,1212.62 1394.17,1212.46 1394.75,1209.94 1395.34,1208.87 1395.93,1210.78 1396.51,1212.33 1397.1,1216.03 1397.69,1214.63 1398.27,1216.05 1398.86,1214.49 1399.45,1217.2 1400.03,1217.38 1400.62,1214.4 1401.21,1215.46 1401.79,1215.24 1402.38,1215.39 1402.96,1217.71 1403.55,1217.46 1404.14,1217.16 1404.72,1216.42 1405.31,1217.54 1405.9,1218.51 1406.48,1215.56 1407.07,1218.08 1407.66,1219.37 1408.24,1218.91 1408.83,1218.61 1409.42,1216.83 1410,1214.1 1410.59,1214.13 1411.17,1215.3 1411.76,1215.02 1412.35,1214.94 1412.93,1213.39 1413.52,1210.69 1414.11,1208.31 1414.69,1206.31 1415.28,1210.65 1415.87,1211.85 1416.45,1214.45 1417.04,1212.9 1417.63,1212.73 1418.21,1212.84 1418.8,1207.82 1419.38,1206.81 1419.97,1207.01 1420.56,1207.62 1421.14,1207.67 1421.73,1206.71 1422.32,1208.5 1422.9,1206.22 1423.49,1207.82 1424.08,1210.82 1424.66,1212.31 1425.25,1212.26 1425.83,1213.53 1426.42,1211.84 1427.01,1210.58 1427.59,1210.75 1428.18,1210.94 1428.77,1209.74 1429.35,1209.86 1429.94,1208.71 1430.53,1208.93 1431.11,1209.21 1431.7,1209.54 1432.29,1210.93 1432.87,1213.17 1433.46,1214.35 1434.04,1218.15 1434.63,1215.2 1435.22,1211.34 1435.8,1211.38 1436.39,1210.43 1436.98,1212.97 1437.56,1213.07 1438.15,1213.03 1438.74,1211.36 1439.32,1211.59 1439.91,1210.25 1440.5,1212.07 1441.08,1209.57 1441.67,1208.67 1442.25,1210.31 1442.84,1210.35 1443.43,1210.13 1444.01,1210.4 1444.6,1206.41 1445.19,1206.88 1445.77,1207.26 1446.36,1208.78 1446.95,1208.81 1447.53,1205.28 1448.12,1205.52 1448.7,1207.43 1449.29,1206.33 1449.88,1205.36 1450.46,1204.72 1451.05,1204.95 1451.64,1209.88 1452.22,1214.34 1452.81,1213.1 1453.4,1211.71 1453.98,1213.55 1454.57,1213.64 1455.16,1213.74 1455.74,1212.22 1456.33,1212.42 1456.91,1214.18 1457.5,1212.94 1458.09,1214.43 1458.67,1215.39 1459.26,1215.17 1459.85,1211.05 1460.43,1211.28 1461.02,1211.7 1461.61,1211.99 1462.19,1209.46 1462.78,1210.69 1463.37,1210.86 1463.95,1210.79 1464.54,1212.01 1465.12,1212.3 1465.71,1213.59 1466.3,1213.35 1466.88,1214.73 1467.47,1215.62 1468.06,1217.78 1468.64,1216.33 1469.23,1217.63 1469.82,1220.13 1470.4,1217.22 1470.99,1218.05 1471.57,1218.89 1472.16,1221.29 1472.75,1221.01 1473.33,1217.9 1473.92,1217.79 1474.51,1220.3 1475.09,1218.69 1475.68,1219.68 1476.27,1216.61 1476.85,1217.47 1477.44,1217.3 1478.03,1217.18 1478.61,1217.05 1479.2,1215.77 1479.78,1216.88 1480.37,1215.14 1480.96,1216.62 1481.54,1216.44 1482.13,1216.22 1482.72,1216.11 1483.3,1214.64 1483.89,1214.51 1484.48,1216.23 1485.06,1214.67 1485.65,1214.64 1486.24,1211.88 1486.82,1211.8 1487.41,1211.55 1487.99,1208.65 1488.58,1210.28 1489.17,1210.39 1489.75,1207.83 1490.34,1207.79 1490.93,1208.15 1491.51,1209.79 1492.1,1207.5 1492.69,1206.87 1493.27,1205.62 1493.86,1207.33 1494.45,1211.59 1495.03,1211.49 1495.62,1214.46 1496.2,1212.86 1496.79,1212.87 1497.38,1212.71 1497.96,1216.65 1498.55,1213.75 1499.14,1212.49 1499.72,1212.38 1500.31,1212.29 1500.9,1213.7 1501.48,1211 1502.07,1212.21 1502.65,1213.49 1503.24,1210.78 1503.83,1212.34 1504.41,1212.33 1505,1213.89 1505.59,1216.7 1506.17,1219.01 1506.76,1214.75 1507.35,1215.72 1507.93,1215.63 1508.52,1215.19 1509.11,1215.37 1509.69,1216.54 1510.28,1216.56 1510.86,1216.5 1511.45,1217.69 1512.04,1217.42 1512.62,1214.48 1513.21,1216.2 1513.8,1216.97 1514.38,1220.54 1514.97,1218.72 1515.56,1219.63 1516.14,1219.08 1516.73,1220.32 1517.32,1220.14 1517.9,1221.41 1518.49,1221.1 1519.07,1219.28 1519.66,1218.8 1520.25,1215.97 1520.83,1214.32 1521.42,1211.71 1522.01,1207.72 1522.59,1208.05 1523.18,1208.28 1523.77,1208.43 1524.35,1207.37 1524.94,1209.18 1525.52,1206.6 1526.11,1206.99 1526.7,1207.39 1527.28,1209.08 1527.87,1209.14 1528.46,1209.22 1529.04,1210.58 1529.63,1210.79 1530.22,1213.46 1530.8,1216.16 1531.39,1214.88 1531.98,1212.03 1532.56,1213.47 1533.15,1220.17 1533.73,1216.04 1534.32,1214.53 1534.91,1214.59 1535.49,1211.81 1536.08,1212.01 1536.67,1212.11 1537.25,1210.71 1537.84,1210.81 1538.43,1211.03 1539.01,1212.16 1539.6,1212.45 1540.19,1211.17 1540.77,1212.61 1541.36,1212.52 1541.94,1215.01 1542.53,1213.81 1543.12,1212.42 1543.7,1214.05 1544.29,1215.12 1544.88,1213.73 1545.46,1213.62 1546.05,1215.03 1546.64,1216.17 1547.22,1215.92 1547.81,1211.79 1548.4,1211.62 1548.98,1210.15 1549.57,1212.76 1550.15,1211.2 1550.74,1211.44 1551.33,1210.39 1551.91,1211.99 1552.5,1212.13 1553.09,1213.57 1553.67,1213.41 1554.26,1214.86 1554.85,1214.82 1555.43,1210.72 1556.02,1209.59 1556.6,1209.79 1557.19,1211.42 1557.78,1211.82 1558.36,1211.12 1558.95,1208.42 1559.54,1210 1560.12,1212.79 1560.71,1214.36 1561.3,1214.34 1561.88,1211.61 1562.47,1212.85 1563.06,1215.48 1563.64,1215.21 1564.23,1215.22 1564.81,1214.08 1565.4,1214.28 1565.99,1213.04 1566.57,1214.47 1567.16,1214.41 1567.75,1212.94 1568.33,1211.96 1568.92,1213.14 1569.51,1213.53 1570.09,1213.35 1570.68,1214.64 1571.27,1211.9 1571.85,1211.86 1572.44,1214.36 1573.02,1211.62 1573.61,1211.75 1574.2,1214.28 1574.78,1214.25 1575.37,1214.18 1575.96,1216.86 1576.54,1217.87 1577.13,1217.7 1577.72,1218.66 1578.3,1216.81 1578.89,1216.65 1579.47,1217.54 1580.06,1216.01 1580.65,1217.68 1581.23,1215.17 1581.82,1213.95 1582.41,1214.11 1582.99,1212.53 1583.58,1213.91 1584.17,1209.99 1584.75,1208.61 1585.34,1207.53 1585.93,1207.55 1586.51,1206.36 1587.1,1205.24 1587.68,1206.85 1588.27,1207.25 1588.86,1209.95 1589.44,1210.35 1590.03,1207.82 1590.62,1208.09 1591.2,1207.17 1591.79,1214.09 1592.38,1215.08 1592.96,1212.06 1593.55,1213.54 1594.14,1212.31 1594.72,1212.57 1595.31,1212.68 1595.89,1214.07 1596.48,1212.83 1597.07,1212.94 1597.65,1211.72 1598.24,1211.78 1598.83,1211.96 1599.41,1213.36 1600,1213.43 1600.59,1214.49 1601.17,1211.88 1601.76,1211.85 1602.34,1209.34 1602.93,1209.89 1603.52,1211.36 1604.1,1214.21 1604.69,1215.7 1605.28,1214.44 1605.86,1214.45 1606.45,1215.76 1607.04,1215.59 1607.62,1217.09 1608.21,1215.46 1608.8,1216.41 1609.38,1216.26 1609.97,1216.49 1610.55,1217.55 1611.14,1214.98 1611.73,1214.83 1612.31,1214.55 1612.9,1215.76 1613.49,1219.8 1614.07,1222.2 1614.66,1221.63 1615.25,1222.38 1615.83,1223.18 1616.42,1222.57 1617.01,1221.08 1617.59,1219.24 1618.18,1221.31 1618.76,1219.58 1619.35,1220.34 1619.94,1218.59 1620.52,1215.61 1621.11,1216.8 1621.7,1212.7 1622.28,1212.6 1622.87,1211.21 1623.46,1209.75 1624.04,1211.06 1624.63,1211.46 1625.22,1210.24 1625.8,1210.56 1626.39,1212.3 1626.97,1212.38 1627.56,1213.77 1628.15,1213.75 1628.73,1213.8 1629.32,1212.63 1629.91,1212.58 1630.49,1212.55 1631.08,1213.63 1631.67,1214.87 1632.25,1214.67 1632.84,1214.72 1633.42,1210.75 1634.01,1210.71 1634.6,1210.66 1635.18,1210.63 1635.77,1209.53 1636.36,1210.68 1636.94,1210.79 1637.53,1209.77 1638.12,1210.13 1638.7,1210.12 1639.29,1210.02 1639.88,1211.51 1640.46,1211.58 1641.05,1211.81 1641.63,1210.77 1642.22,1208.31 1642.81,1209.94 1643.39,1204.85 1643.98,1209.35 1644.57,1209.38 1645.15,1209.36 1645.74,1209.46 1646.33,1211.19 1646.91,1211.52 1647.5,1214.16 1648.09,1214.16 1648.67,1214.12 1649.26,1216.95 1649.84,1216.85 1650.43,1217.08 1651.02,1215.59 1651.6,1216.85 1652.19,1213.62 1652.78,1213.25 1653.36,1217.28 1653.95,1218.17 1654.54,1220.3 1655.12,1216.08 1655.71,1214.53 1656.29,1217.19 1656.88,1215.46 1657.47,1216.52 1658.05,1216.82 1658.64,1216.65 1659.23,1213.73 1659.81,1214.9 1660.4,1217.39 1660.99,1217.09 1661.57,1218 1662.16,1214.94 1662.75,1213.53 1663.33,1212.35 1663.92,1214.98 1664.5,1216.26 1665.09,1218.6 1665.68,1217.01 1666.26,1218.09 1666.85,1217.73 1667.44,1218.75 1668.02,1223.71 1668.61,1219.28 1669.2,1218.9 1669.78,1214.88 1670.37,1216.13 1670.96,1213.32 1671.54,1214.71 1672.13,1214.6 1672.71,1214.51 1673.3,1217.37 1673.89,1217.24 1674.47,1219.58 1675.06,1218.08 1675.65,1219.01 1676.23,1218.87 1676.82,1216.07 1677.41,1214.71 1677.99,1215.98 1678.58,1218.56 1679.17,1219.48 1679.75,1221.76 1680.34,1222.72 1680.92,1219.29 1681.51,1218.92 1682.1,1217.45 1682.68,1215.84 1683.27,1213.13 1683.86,1212.02 1684.44,1211.93 1685.03,1211.76 1685.62,1213.33 1686.2,1213.6 1686.79,1214.79 1687.37,1214.89 1687.96,1217.4 1688.55,1213.28 1689.13,1211.79 1689.72,1214.33 1690.31,1215.79 1690.89,1215.62 1691.48,1215.41 1692.07,1215.32 1692.65,1214.01 1693.24,1214.09 1693.83,1214.1 1694.41,1212.67 1695,1213.94 1695.58,1212.91 1696.17,1212.68 1696.76,1210.02 1697.34,1207.27 1697.93,1207.38 1698.52,1210.46 1699.1,1209.38 1699.69,1208.51 1700.28,1211.61 1700.86,1210.35 1701.45,1206.56 1702.04,1209.57 1702.62,1208.46 1703.21,1211.41 1703.79,1212.7 1704.38,1211.35 1704.97,1209.75 1705.55,1208.39 1706.14,1209.86 1706.73,1208.69 1707.31,1207.45 1707.9,1206.53 1708.49,1206.8 1709.07,1205.81 1709.66,1210.29 1710.24,1209.04 1710.83,1209.33 1711.42,1208.42 1712,1206.03 1712.59,1206.59 1713.18,1206.95 1713.76,1207.38 1714.35,1209.08 1714.94,1210.54 1715.52,1211.88 1716.11,1213.37 1716.7,1212.37 1717.28,1212.46 1717.87,1212.36 1718.45,1212.26 1719.04,1212.25 1719.63,1213.59 1720.21,1217.62 1720.8,1216.33 1721.39,1218.93 1721.97,1220.35 1722.56,1218.81 1723.15,1215.82 1723.73,1214.52 1724.32,1210.37 1724.91,1211.96 1725.49,1212.01 1726.08,1213.54 1726.66,1214.66 1727.25,1215.72 1727.84,1215.73 1728.42,1214.5 1729.01,1215.84 1729.6,1216.05 1730.18,1215.92 1730.77,1214.58 1731.36,1214.58 1731.94,1217.26 1732.53,1215.79 1733.11,1214.28 1733.7,1214.2 1734.29,1217.12 1734.87,1215.73 1735.46,1215.55 1736.05,1214.04 1736.63,1214.02 1737.22,1215.27 1737.81,1209.76 1738.39,1210.13 1738.98,1212.79 1739.57,1210.28 1740.15,1209.32 1740.74,1206.61 1741.32,1206.84 1741.91,1207.45 1742.5,1204.88 1743.08,1206.82 1743.67,1207.29 1744.26,1210.32 1744.84,1210.53 1745.43,1212 1746.02,1213.25 1746.6,1213.33 1747.19,1213.13 1747.78,1210.61 1748.36,1210.58 1748.95,1212.05 1749.53,1212.97 1750.12,1211.71 1750.71,1210.46 1751.29,1212.06 1751.88,1212.34 1752.47,1216.28 1753.05,1217.52 1753.64,1215.56 1754.23,1211.28 1754.81,1215.34 1755.4,1215.2 1755.99,1215.09 1756.57,1216.35 1757.16,1215.13 1757.74,1214.05 1758.33,1213.9 1758.92,1213.71 1759.5,1214.78 1760.09,1217.27 1760.68,1215.62 1761.26,1214.18 1761.85,1212.48 1762.44,1209.88 1763.02,1209.97 1763.61,1211.72 1764.19,1210.49 1764.78,1208.07 1765.37,1207.02 1765.95,1208.57 1766.54,1208.88 1767.13,1209.21 1767.71,1209.14 1768.3,1209.09 1768.89,1213.28 1769.47,1210.43 1770.06,1210.87 1770.65,1212.18 1771.23,1212.13 1771.82,1212.18 1772.4,1213.3 1772.99,1212.11 1773.58,1212.11 1774.16,1212.05 1774.75,1211.8 1775.34,1210.39 1775.92,1210.58 1776.51,1213.24 1777.1,1213.14 1777.68,1212.98 1778.27,1215.62 1778.86,1215.39 1779.44,1217.76 1780.03,1217.53 1780.61,1218.65 1781.2,1221.21 1781.79,1220.72 1782.37,1219.07 1782.96,1218.61 1783.55,1215.83 1784.13,1215.55 1784.72,1215.31 1785.31,1216.71 1785.89,1212.56 1786.48,1214.09 1787.06,1211.35 1787.65,1208.77 1788.24,1207.69 1788.82,1209.37 1789.41,1209.64 1790,1208.23 1790.58,1208.3 1791.17,1211.33 1791.76,1213.99 1792.34,1212.72 1792.93,1212.79 1793.52,1212.85 1794.1,1208.72 1794.69,1207.83 1795.27,1209.26 1795.86,1210.79 1796.45,1212.05 1797.03,1211.06 1797.62,1212.39 1798.21,1211.05 1798.79,1210.85 1799.38,1212.06 1799.97,1209.46 1800.55,1209.88 1801.14,1209.98 1801.73,1208.97 1802.31,1211.81 1802.9,1211.86 1803.48,1210.67 1804.07,1213.37 1804.66,1214.66 1805.24,1212.11 1805.83,1211 1806.42,1210.87 1807,1208.52 1807.59,1209.96 1808.18,1209.13 1808.76,1213.1 1809.35,1211.65 1809.94,1210.61 1810.52,1210.42 1811.11,1210.75 1811.69,1213.66 1812.28,1217.3 1812.87,1215.57 1813.45,1216.51 1814.04,1217.46 1814.63,1216.94 1815.21,1216.92 1815.8,1218.02 1816.39,1214.94 1816.97,1213.66 1817.56,1213.68 1818.14,1215 1818.73,1214.9 1819.32,1214.58 1819.9,1217.06 1820.49,1216.87 1821.08,1216.9 1821.66,1219.29 1822.25,1220.44 1822.84,1222.66 1823.42,1219.35 1824.01,1216.35 1824.6,1215.97 1825.18,1218.36 1825.77,1216.72 1826.35,1213.78 1826.94,1211.13 1827.53,1211.44 1828.11,1213.06 1828.7,1209.28 1829.29,1209.77 1829.87,1209.57 1830.46,1209.69 1831.05,1211 1831.63,1212.51 1832.22,1209.98 1832.81,1207.37 1833.39,1208.8 1833.98,1209.09 1834.56,1208.12 1835.15,1207.97 1835.74,1209.4 1836.32,1208.05 1836.91,1208.01 1837.5,1208.3 1838.08,1210.91 1838.67,1210.09 1839.26,1210.55 1839.84,1213.34 1840.43,1217.26 1841.01,1217.11 1841.6,1221.04 1842.19,1219.53 1842.77,1221.65 1843.36,1217.28 1843.95,1216.93 1844.53,1219.32 1845.12,1218.83 1845.71,1219.61 1846.29,1221.78 1846.88,1218.62 1847.47,1215.88 1848.05,1216.97 1848.64,1215.54 1849.22,1215.27 1849.81,1217.8 1850.4,1218.76 1850.98,1218.63 1851.57,1219.47 1852.16,1220.45 1852.74,1216.04 1853.33,1213.53 1853.92,1213.46 1854.5,1213.21 1855.09,1221 1855.68,1220.55 1856.26,1217.69 1856.85,1214.77 1857.43,1214.76 1858.02,1213.47 1858.61,1213.64 1859.19,1213.5 1859.78,1213.52 1860.37,1213.68 1860.95,1213.66 1861.54,1213.6 1862.13,1210.8 1862.71,1208.23 1863.3,1207.13 1863.88,1207.32 1864.47,1209.15 1865.06,1206.58 1865.64,1207.14 1866.23,1206.28 1866.82,1208.24 1867.4,1207.31 1867.99,1206.16 1868.58,1209.21 1869.16,1208.15 1869.75,1206.92 1870.34,1211.32 1870.92,1211.19 1871.51,1212.83 1872.09,1213.03 1872.68,1214.44 1873.27,1214.6 1873.85,1210.49 1874.44,1209.12 1875.03,1212.03 1875.61,1210.95 1876.2,1211.22 1876.79,1208.88 1877.37,1208.9 1877.96,1206.39 1878.55,1209.49 1879.13,1208.48 1879.72,1206.06 1880.3,1202.51 1880.89,1203.09 1881.48,1205.09 1882.06,1206.96 1882.65,1209.77 1883.24,1207.56 1883.82,1207.91 1884.41,1207 1885,1208.87 1885.58,1207.89 1886.17,1209.3 1886.76,1208.18 1887.34,1205.66 1887.93,1204.63 1888.51,1207.5 1889.1,1205.09 1889.69,1200.3 1890.27,1201.1 1890.86,1203.45 1891.45,1202.72 1892.03,1203.63 1892.62,1202.86 1893.21,1204.92 1893.79,1207.86 1894.38,1206.77 1894.96,1209.62 1895.55,1209.79 1896.14,1208.96 1896.72,1214.36 1897.31,1214.34 1897.9,1213.1 1898.48,1211.94 1899.07,1210.79 1899.66,1208.6 1900.24,1207.52 1900.83,1211.81 1901.42,1213.17 1902,1214.46 1902.59,1215.83 1903.17,1215.86 1903.76,1217.18 1904.35,1213.94 1904.93,1215.11 1905.52,1214.87 1906.11,1214.9 1906.69,1218.76 1907.28,1218.37 1907.87,1219.45 1908.45,1220.43 1909.04,1217.26 1909.63,1218.14 1910.21,1217.9 1910.8,1212.4 1911.38,1210.94 1911.97,1212.36 1912.56,1213.48 1913.14,1212.25 1913.73,1212.25 1914.32,1214.69 1914.9,1213.4 1915.49,1212.15 1916.08,1212.24 1916.66,1213.57 1917.25,1212.14 1917.83,1213.55 1918.42,1216.26 1919.01,1215.84 1919.59,1215.48 1920.18,1215.48 1920.77,1216.69 1921.35,1213.94 1921.94,1216.56 1922.53,1218.96 1923.11,1218.84 1923.7,1221.3 1924.29,1220.7 1924.87,1219.08 1925.46,1218.79 1926.04,1221.28 1926.63,1222.26 1927.22,1222 1927.8,1222.77 1928.39,1222.23 1928.98,1221.86 1929.56,1222.47 1930.15,1222.18 1930.74,1221.88 1931.32,1221.57 1931.91,1218.56 1932.5,1219.35 1933.08,1218.9 1933.67,1219.08 1934.25,1219.82 1934.84,1218.04 1935.43,1216.45 1936.01,1218.83 1936.6,1219.82 1937.19,1216.64 1937.77,1214.96 1938.36,1213.56 1938.95,1213.45 1939.53,1213.45 1940.12,1214.77 1940.71,1215.58 1941.29,1216.65 1941.88,1216.36 1942.46,1213.59 1943.05,1210.97 1943.64,1211.61 1944.22,1212.7 1944.81,1211.25 1945.4,1212.36 1945.98,1208.49 1946.57,1207.62 1947.16,1210.47 1947.74,1210.64 1948.33,1207.85 1948.91,1208.29 1949.5,1207.19 1950.09,1203.63 1950.67,1204.35 1951.26,1206.1 1951.85,1209.17 1952.43,1207.95 1953.02,1208.18 1953.61,1210.78 1954.19,1210.92 1954.78,1210.07 1955.37,1210.22 1955.95,1206.5 1956.54,1209.77 1957.12,1212.53 1957.71,1212.53 1958.3,1213.75 1958.88,1212.31 1959.47,1209.96 1960.06,1211.62 1960.64,1209.23 1961.23,1207.97 1961.82,1209.61 1962.4,1212.39 1962.99,1212.33 1963.58,1212.53 1964.16,1212.41 1964.75,1212.39 1965.33,1212.5 1965.92,1213.56 1966.51,1213.48 1967.09,1216.44 1967.68,1218.97 1968.27,1216.04 1968.85,1213.34 1969.44,1213.47 1970.03,1211.94 1970.61,1210.98 1971.2,1211.35 1971.78,1214.2 1972.37,1213 1972.96,1214.42 1973.54,1213.12 1974.13,1213.37 1974.72,1213.67 1975.3,1214.91 1975.89,1216.15 1976.48,1216 1977.06,1217.04 1977.65,1215.77 1978.24,1215.9 1978.82,1215.68 1979.41,1215.72 1979.99,1216.86 1980.58,1216.87 1981.17,1217.91 1981.75,1217.67 1982.34,1217.45 1982.93,1217.24 1983.51,1215.86 1984.1,1215.71 1984.69,1216.89 1985.27,1216.83 1985.86,1215.51 1986.45,1214.22 1987.03,1214.35 1987.62,1215.8 1988.2,1215.66 1988.79,1214.12 1989.38,1217.89 1989.96,1217.6 1990.55,1219.81 1991.14,1215.63 1991.72,1215.47 1992.31,1216.7 1992.9,1216.14 1993.48,1214.74 1994.07,1214.65 1994.65,1214.43 1995.24,1215.66 1995.83,1210.1 1996.41,1211.56 1997,1209.02 1997.59,1211.71 1998.17,1215.85 1998.76,1217.27 1999.35,1216.92 1999.93,1212.56 2000.52,1212.42 2001.11,1215.06 2001.69,1216.07 2002.28,1213.23 2002.86,1215.02 2003.45,1214.86 2004.04,1212.21 2004.62,1210.97 2005.21,1211.19 2005.8,1211.06 2006.38,1209.59 2006.97,1208.63 2007.56,1207.64 2008.14,1210.6 2008.73,1209.48 2009.32,1208.27 2009.9,1208.48 2010.49,1208.67 2011.07,1209.03 2011.66,1207.91 2012.25,1204.55 2012.83,1203.79 2013.42,1202.88 2014.01,1204.73 2014.59,1204.14 2015.18,1206.21 2015.77,1205.38 2016.35,1204.54 2016.94,1203.87 2017.53,1207.06 2018.11,1209.74 2018.7,1209.68 2019.28,1209.92 2019.87,1211.62 2020.46,1212.11 2021.04,1212.15 2021.63,1213.56 2022.22,1212.15 2022.8,1210.96 2023.39,1209.76 2023.98,1212.72 2024.56,1211.02 2025.15,1212.24 2025.73,1211.07 2026.32,1209.9 2026.91,1214.38 2027.49,1211.56 2028.08,1211.77 2028.67,1213.09 2029.25,1213.03 2029.84,1213.36 2030.43,1214.2 2031.01,1214.36 2031.6,1215.45 2032.19,1214.17 2032.77,1216.76 2033.36,1214.34 2033.94,1215.93 2034.53,1214.29 2035.12,1213.24 2035.7,1213.32 2036.29,1213.22 2036.88,1213.43 2037.46,1213.41 2038.05,1210.86 2038.64,1213.66 2039.22,1213.79 2039.81,1213.89 2040.4,1215 2040.98,1216.21 2041.57,1217.76 2042.15,1218.79 2042.74,1217.2 2043.33,1218.41 2043.91,1219.32 2044.5,1217.77 2045.09,1217.34 2045.67,1218.56 2046.26,1218.37 2046.85,1216.9 2047.43,1212.76 2048.02,1211.5 2048.6,1211.66 2049.19,1210.4 2049.78,1209.49 2050.36,1210.99 2050.95,1212.65 2051.54,1212.63 2052.12,1216.87 2052.71,1215.41 2053.3,1214.35 2053.88,1215.64 2054.47,1215.52 2055.06,1216.45 2055.64,1217.37 2056.23,1218.39 2056.81,1215.44 2057.4,1212.46 2057.99,1209.61 2058.57,1211.06 2059.16,1208.58 2059.75,1208.78 2060.33,1210.42 2060.92,1210.69 2061.51,1210.57 2062.09,1212.06 2062.68,1212.28 2063.27,1211.04 2063.85,1212.61 2064.44,1213.93 2065.02,1213.77 2065.61,1212.43 2066.2,1213.41 2066.78,1209.23 2067.37,1209.34 2067.96,1209.91 2068.54,1211.54 2069.13,1213.02 2069.72,1213.43 2070.3,1215.92 2070.89,1214.39 2071.48,1215.71 2072.06,1214.19 2072.65,1217.02 2073.23,1219.43 2073.82,1216.5 2074.41,1214.89 2074.99,1214.74 2075.58,1210.58 2076.17,1211.9 2076.75,1215.01 2077.34,1214.7 2077.93,1213.61 2078.51,1212.22 2079.1,1213.41 2079.68,1213.39 2080.27,1213.22 2080.86,1212.01 2081.44,1212.28 2082.03,1213.46 2082.62,1214.74 2083.2,1213.24 2083.79,1214.51 2084.38,1214.61 2084.96,1215.78 2085.55,1215.67 2086.14,1215.45 2086.72,1214.94 2087.31,1212.35 2087.89,1207.12 2088.48,1207.27 2089.07,1207.77 2089.65,1207.85 2090.24,1209.08 2090.83,1209.5 2091.41,1211.25 2092,1211.4 2092.59,1208.99 2093.17,1206.4 2093.76,1208.15 2094.35,1209.53 2094.93,1208.16 2095.52,1211.11 2096.1,1211.41 2096.69,1210.35 2097.28,1206.49 2097.86,1206.8 2098.45,1209.87 2099.04,1208.72 2099.62,1211.39 2100.21,1211.87 2100.8,1213.45 2101.38,1213.4 2101.97,1213.22 2102.55,1214.48 2103.14,1211.63 2103.73,1210.15 2104.31,1210.41 2104.9,1209.23 2105.49,1208.48 2106.07,1211.62 2106.66,1212.91 2107.25,1214.21 2107.83,1211.43 2108.42,1213.04 2109.01,1215.49 2109.59,1214.32 2110.18,1213.06 2110.76,1213.09 2111.35,1212.88 2111.94,1211.27 2112.52,1211.54 2113.11,1210.53 2113.7,1211.94 2114.28,1214.9 2114.87,1216.05 2115.46,1215.58 2116.04,1215.55 2116.63,1213.96 2117.22,1215.19 2117.8,1216.46 2118.39,1214.9 2118.97,1214.82 2119.56,1214.5 2120.15,1215.79 2120.73,1216.94 2121.32,1215.27 2121.91,1216.34 2122.49,1213.3 2123.08,1214.92 2123.67,1217.35 2124.25,1215.58 2124.84,1216.73 2125.42,1215.2 2126.01,1215.28 2126.6,1216.3 2127.18,1215 2127.77,1217.28 2128.36,1214.38 2128.94,1214.49 2129.53,1214.45 2130.12,1215.75 2130.7,1216.97 2131.29,1219.17 2131.88,1219.02 2132.46,1218.54 2133.05,1216.85 2133.63,1219.38 2134.22,1219.38 2134.81,1220.57 2135.39,1221.61 2135.98,1224.89 2136.57,1224.31 2137.15,1226.27 2137.74,1225.18 2138.33,1222 2138.91,1222.78 2139.5,1220.94 2140.09,1220.8 2140.67,1219.11 2141.26,1218.88 2141.84,1215.91 2142.43,1217.24 2143.02,1215.78 2143.6,1217.05 2144.19,1216.73 2144.78,1216.42 2145.36,1216.22 2145.95,1214.81 2146.54,1214.72 2147.12,1212.03 2147.71,1213.49 2148.3,1214.94 2148.88,1214.7 2149.47,1209.23 2150.05,1210.99 2150.64,1208.48 2151.23,1209.79 2151.81,1211.25 2152.4,1215.14 2152.99,1214.98 2153.57,1216.18 2154.16,1217.66 2154.75,1217.32 2155.33,1218.24 2155.92,1217.7 2156.5,1213.9 2157.09,1211.08 2157.68,1212.43 2158.26,1212.29 \"/>\n<path clip-path=\"url(#clip862)\" d=\"M986.025 1213.83 L986.612 1213.83 L987.198 1213.83 L987.785 1213.83 L988.371 1213.83 L988.957 1213.83 L989.544 1213.83 L990.13 1213.83 L990.717 1213.83 L991.303 1213.83 L991.889 1213.83 L992.476 1213.83 L993.062 1213.83 L993.649 1213.83 L994.235 1213.83 L994.822 1213.83 L995.408 1213.83 L995.994 1213.83 L996.581 1213.83 L997.167 1213.83 L997.754 1213.83 L998.34 1213.83 L998.926 1213.83 L999.513 1213.83 L1000.1 1213.83 L1000.69 1213.83 L1001.27 1213.83 L1001.86 1213.83 L1002.44 1213.83 L1003.03 1213.83 L1003.62 1213.83 L1004.2 1213.83 L1004.79 1213.83 L1005.38 1213.83 L1005.96 1213.83 L1006.55 1213.83 L1007.14 1213.83 L1007.72 1213.83 L1008.31 1213.83 L1008.9 1213.83 L1009.48 1213.83 L1010.07 1213.83 L1010.65 1213.83 L1011.24 1213.83 L1011.83 1213.83 L1012.41 1213.83 L1013 1213.83 L1013.59 1213.83 L1014.17 1213.83 L1014.76 1213.83 L1015.35 1213.83 L1015.93 1213.83 L1016.52 1213.83 L1017.11 1213.83 L1017.69 1213.83 L1018.28 1213.83 L1018.86 1213.83 L1019.45 1213.83 L1020.04 1213.83 L1020.62 1213.83 L1021.21 1213.83 L1021.8 1213.83 L1022.38 1213.83 L1022.97 1213.83 L1023.56 1213.83 L1024.14 1213.83 L1024.73 1213.83 L1025.32 1213.83 L1025.9 1213.83 L1026.49 1213.83 L1027.07 1213.83 L1027.66 1213.83 L1028.25 1213.83 L1028.83 1213.83 L1029.42 1213.83 L1030.01 1213.83 L1030.59 1213.83 L1031.18 1213.83 L1031.77 1213.83 L1032.35 1213.83 L1032.94 1213.83 L1033.52 1213.83 L1034.11 1213.83 L1034.7 1213.83 L1035.28 1213.83 L1035.87 1213.83 L1036.46 1213.83 L1037.04 1213.83 L1037.63 1213.83 L1038.22 1213.83 L1038.8 1213.83 L1039.39 1213.83 L1039.98 1213.83 L1040.56 1213.83 L1041.15 1213.83 L1041.73 1213.83 L1042.32 1213.83 L1042.91 1213.83 L1043.49 1213.83 L1044.08 1213.83 L1044.67 1213.83 L1045.25 1213.83 L1045.84 1213.83 L1046.43 1213.83 L1047.01 1213.83 L1047.6 1213.83 L1048.19 1213.83 L1048.77 1213.83 L1049.36 1213.83 L1049.94 1213.83 L1050.53 1213.83 L1051.12 1213.83 L1051.7 1213.83 L1052.29 1213.83 L1052.88 1213.83 L1053.46 1213.83 L1054.05 1213.83 L1054.64 1213.83 L1055.22 1213.83 L1055.81 1213.83 L1056.39 1213.83 L1056.98 1213.83 L1057.57 1213.83 L1058.15 1213.83 L1058.74 1213.83 L1059.33 1213.83 L1059.91 1213.83 L1060.5 1213.83 L1061.09 1213.83 L1061.67 1213.83 L1062.26 1213.83 L1062.85 1213.83 L1063.43 1213.83 L1064.02 1213.83 L1064.6 1213.83 L1065.19 1213.83 L1065.78 1213.83 L1066.36 1213.83 L1066.95 1213.83 L1067.54 1213.83 L1068.12 1213.83 L1068.71 1213.83 L1069.3 1213.83 L1069.88 1213.83 L1070.47 1213.83 L1071.06 1213.83 L1071.64 1213.83 L1072.23 1213.83 L1072.81 1213.83 L1073.4 1213.83 L1073.99 1213.83 L1074.57 1213.83 L1075.16 1213.83 L1075.75 1213.83 L1076.33 1213.83 L1076.92 1213.83 L1077.51 1213.83 L1078.09 1213.83 L1078.68 1213.83 L1079.26 1213.83 L1079.85 1213.83 L1080.44 1213.83 L1081.02 1213.83 L1081.61 1213.83 L1082.2 1213.83 L1082.78 1213.83 L1083.37 1213.83 L1083.96 1213.83 L1084.54 1213.83 L1085.13 1213.83 L1085.72 1213.83 L1086.3 1213.83 L1086.89 1213.83 L1087.47 1213.83 L1088.06 1213.83 L1088.65 1213.83 L1089.23 1213.83 L1089.82 1213.83 L1090.41 1213.83 L1090.99 1213.83 L1091.58 1213.83 L1092.17 1213.83 L1092.75 1213.83 L1093.34 1213.83 L1093.93 1213.83 L1094.51 1213.83 L1095.1 1213.83 L1095.68 1213.83 L1096.27 1213.83 L1096.86 1213.83 L1097.44 1213.83 L1098.03 1213.83 L1098.62 1213.83 L1099.2 1213.83 L1099.79 1213.83 L1100.38 1213.83 L1100.96 1213.83 L1101.55 1213.83 L1102.14 1213.83 L1102.72 1213.83 L1103.31 1213.83 L1103.89 1213.83 L1104.48 1213.83 L1105.07 1213.83 L1105.65 1213.83 L1106.24 1213.83 L1106.83 1213.83 L1107.41 1213.83 L1108 1213.83 L1108.59 1213.83 L1109.17 1213.83 L1109.76 1213.83 L1110.34 1213.83 L1110.93 1213.83 L1111.52 1213.83 L1112.1 1213.83 L1112.69 1213.83 L1113.28 1213.83 L1113.86 1213.83 L1114.45 1213.83 L1115.04 1213.83 L1115.62 1213.83 L1116.21 1213.83 L1116.8 1213.83 L1117.38 1213.83 L1117.97 1213.83 L1118.55 1213.83 L1119.14 1213.83 L1119.73 1213.83 L1120.31 1213.83 L1120.9 1213.83 L1121.49 1213.83 L1122.07 1213.83 L1122.66 1213.83 L1123.25 1213.83 L1123.83 1213.83 L1124.42 1213.83 L1125.01 1213.83 L1125.59 1213.83 L1126.18 1213.83 L1126.76 1213.83 L1127.35 1213.83 L1127.94 1213.83 L1128.52 1213.83 L1129.11 1213.83 L1129.7 1213.83 L1130.28 1213.83 L1130.87 1213.83 L1131.46 1213.83 L1132.04 1213.83 L1132.63 1213.83 L1133.21 1213.83 L1133.8 1213.83 L1134.39 1213.83 L1134.97 1213.83 L1135.56 1213.83 L1136.15 1213.83 L1136.73 1213.83 L1137.32 1213.83 L1137.91 1213.83 L1138.49 1213.83 L1139.08 1213.83 L1139.67 1213.83 L1140.25 1213.83 L1140.84 1213.83 L1141.42 1213.83 L1142.01 1213.83 L1142.6 1213.83 L1143.18 1213.83 L1143.77 1213.83 L1144.36 1213.83 L1144.94 1213.83 L1145.53 1213.83 L1146.12 1213.83 L1146.7 1213.83 L1147.29 1213.83 L1147.88 1213.83 L1148.46 1213.83 L1149.05 1213.83 L1149.63 1213.83 L1150.22 1213.83 L1150.81 1213.83 L1151.39 1213.83 L1151.98 1213.83 L1152.57 1213.83 L1153.15 1213.83 L1153.74 1213.83 L1154.33 1213.83 L1154.91 1213.83 L1155.5 1213.83 L1156.09 1213.83 L1156.67 1213.83 L1157.26 1213.83 L1157.84 1213.83 L1158.43 1213.83 L1159.02 1213.83 L1159.6 1213.83 L1160.19 1213.83 L1160.78 1213.83 L1161.36 1213.83 L1161.95 1213.83 L1162.54 1213.83 L1163.12 1213.83 L1163.71 1213.83 L1164.29 1213.83 L1164.88 1213.83 L1165.47 1213.83 L1166.05 1213.83 L1166.64 1213.83 L1167.23 1213.83 L1167.81 1213.83 L1168.4 1213.83 L1168.99 1213.83 L1169.57 1213.83 L1170.16 1213.83 L1170.75 1213.83 L1171.33 1213.83 L1171.92 1213.83 L1172.5 1213.83 L1173.09 1213.83 L1173.68 1213.83 L1174.26 1213.83 L1174.85 1213.83 L1175.44 1213.83 L1176.02 1213.83 L1176.61 1213.83 L1177.2 1213.83 L1177.78 1213.83 L1178.37 1213.83 L1178.96 1213.83 L1179.54 1213.83 L1180.13 1213.83 L1180.71 1213.83 L1181.3 1213.83 L1181.89 1213.83 L1182.47 1213.83 L1183.06 1213.83 L1183.65 1213.83 L1184.23 1213.83 L1184.82 1213.83 L1185.41 1213.83 L1185.99 1213.83 L1186.58 1213.83 L1187.16 1213.83 L1187.75 1213.83 L1188.34 1213.83 L1188.92 1213.83 L1189.51 1213.83 L1190.1 1213.83 L1190.68 1213.83 L1191.27 1213.83 L1191.86 1213.83 L1192.44 1213.83 L1193.03 1213.83 L1193.62 1213.83 L1194.2 1213.83 L1194.79 1213.83 L1195.37 1213.83 L1195.96 1213.83 L1196.55 1213.83 L1197.13 1213.83 L1197.72 1213.83 L1198.31 1213.83 L1198.89 1213.83 L1199.48 1213.83 L1200.07 1213.83 L1200.65 1213.83 L1201.24 1213.83 L1201.83 1213.83 L1202.41 1213.83 L1203 1213.83 L1203.58 1213.83 L1204.17 1213.83 L1204.76 1213.83 L1205.34 1213.83 L1205.93 1213.83 L1206.52 1213.83 L1207.1 1213.83 L1207.69 1213.83 L1208.28 1213.83 L1208.86 1213.83 L1209.45 1213.83 L1210.03 1213.83 L1210.62 1213.83 L1211.21 1213.83 L1211.79 1213.83 L1212.38 1213.83 L1212.97 1213.83 L1213.55 1213.83 L1214.14 1213.83 L1214.73 1213.83 L1215.31 1213.83 L1215.9 1213.83 L1216.49 1213.83 L1217.07 1213.83 L1217.66 1213.83 L1218.24 1213.83 L1218.83 1213.83 L1219.42 1213.83 L1220 1213.83 L1220.59 1213.83 L1221.18 1213.83 L1221.76 1213.83 L1222.35 1213.83 L1222.94 1213.83 L1223.52 1213.83 L1224.11 1213.83 L1224.7 1213.83 L1225.28 1213.83 L1225.87 1213.83 L1226.45 1213.83 L1227.04 1213.83 L1227.63 1213.83 L1228.21 1213.83 L1228.8 1213.83 L1229.39 1213.83 L1229.97 1213.83 L1230.56 1213.83 L1231.15 1213.83 L1231.73 1213.83 L1232.32 1213.83 L1232.91 1213.83 L1233.49 1213.83 L1234.08 1213.83 L1234.66 1213.83 L1235.25 1213.83 L1235.84 1213.83 L1236.42 1213.83 L1237.01 1213.83 L1237.6 1213.83 L1238.18 1213.83 L1238.77 1213.83 L1239.36 1213.83 L1239.94 1213.83 L1240.53 1213.83 L1241.11 1213.83 L1241.7 1213.83 L1242.29 1213.83 L1242.87 1213.83 L1243.46 1213.83 L1244.05 1213.83 L1244.63 1213.83 L1245.22 1213.83 L1245.81 1213.83 L1246.39 1213.83 L1246.98 1213.83 L1247.57 1213.83 L1248.15 1213.83 L1248.74 1213.83 L1249.32 1213.83 L1249.91 1213.83 L1250.5 1213.83 L1251.08 1213.83 L1251.67 1213.83 L1252.26 1213.83 L1252.84 1213.83 L1253.43 1213.83 L1254.02 1213.83 L1254.6 1213.83 L1255.19 1213.83 L1255.78 1213.83 L1256.36 1213.83 L1256.95 1213.83 L1257.53 1213.83 L1258.12 1213.83 L1258.71 1213.83 L1259.29 1213.83 L1259.88 1213.83 L1260.47 1213.83 L1261.05 1213.83 L1261.64 1213.83 L1262.23 1213.83 L1262.81 1213.83 L1263.4 1213.83 L1263.98 1213.83 L1264.57 1213.83 L1265.16 1213.83 L1265.74 1213.83 L1266.33 1213.83 L1266.92 1213.83 L1267.5 1213.83 L1268.09 1213.83 L1268.68 1213.83 L1269.26 1213.83 L1269.85 1213.83 L1270.44 1213.83 L1271.02 1213.83 L1271.61 1213.83 L1272.19 1213.83 L1272.78 1213.83 L1273.37 1213.83 L1273.95 1213.83 L1274.54 1213.83 L1275.13 1213.83 L1275.71 1213.83 L1276.3 1213.83 L1276.89 1213.83 L1277.47 1213.83 L1278.06 1213.83 L1278.65 1213.83 L1279.23 1213.83 L1279.82 1213.83 L1280.4 1213.83 L1280.99 1213.83 L1281.58 1213.83 L1282.16 1213.83 L1282.75 1213.83 L1283.34 1213.83 L1283.92 1213.83 L1284.51 1213.83 L1285.1 1213.83 L1285.68 1213.83 L1286.27 1213.83 L1286.86 1213.83 L1287.44 1213.83 L1288.03 1213.83 L1288.61 1213.83 L1289.2 1213.83 L1289.79 1213.83 L1290.37 1213.83 L1290.96 1213.83 L1291.55 1213.83 L1292.13 1213.83 L1292.72 1213.83 L1293.31 1213.83 L1293.89 1213.83 L1294.48 1213.83 L1295.06 1213.83 L1295.65 1213.83 L1296.24 1213.83 L1296.82 1213.83 L1297.41 1213.83 L1298 1213.83 L1298.58 1213.83 L1299.17 1213.83 L1299.76 1213.83 L1300.34 1213.83 L1300.93 1213.83 L1301.52 1213.83 L1302.1 1213.83 L1302.69 1213.83 L1303.27 1213.83 L1303.86 1213.83 L1304.45 1213.83 L1305.03 1213.83 L1305.62 1213.83 L1306.21 1213.83 L1306.79 1213.83 L1307.38 1213.83 L1307.97 1213.83 L1308.55 1213.83 L1309.14 1213.83 L1309.73 1213.83 L1310.31 1213.83 L1310.9 1213.83 L1311.48 1213.83 L1312.07 1213.83 L1312.66 1213.83 L1313.24 1213.83 L1313.83 1213.83 L1314.42 1213.83 L1315 1213.83 L1315.59 1213.83 L1316.18 1213.83 L1316.76 1213.83 L1317.35 1213.83 L1317.93 1213.83 L1318.52 1213.83 L1319.11 1213.83 L1319.69 1213.83 L1320.28 1213.83 L1320.87 1213.83 L1321.45 1213.83 L1322.04 1213.83 L1322.63 1213.83 L1323.21 1213.83 L1323.8 1213.83 L1324.39 1213.83 L1324.97 1213.83 L1325.56 1213.83 L1326.14 1213.83 L1326.73 1213.83 L1327.32 1213.83 L1327.9 1213.83 L1328.49 1213.83 L1329.08 1213.83 L1329.66 1213.83 L1330.25 1213.83 L1330.84 1213.83 L1331.42 1213.83 L1332.01 1213.83 L1332.6 1213.83 L1333.18 1213.83 L1333.77 1213.83 L1334.35 1213.83 L1334.94 1213.83 L1335.53 1213.83 L1336.11 1213.83 L1336.7 1213.83 L1337.29 1213.83 L1337.87 1213.83 L1338.46 1213.83 L1339.05 1213.83 L1339.63 1213.83 L1340.22 1213.83 L1340.8 1213.83 L1341.39 1213.83 L1341.98 1213.83 L1342.56 1213.83 L1343.15 1213.83 L1343.74 1213.83 L1344.32 1213.83 L1344.91 1213.83 L1345.5 1213.83 L1346.08 1213.83 L1346.67 1213.83 L1347.26 1213.83 L1347.84 1213.83 L1348.43 1213.83 L1349.01 1213.83 L1349.6 1213.83 L1350.19 1213.83 L1350.77 1213.83 L1351.36 1213.83 L1351.95 1213.83 L1352.53 1213.83 L1353.12 1213.83 L1353.71 1213.83 L1354.29 1213.83 L1354.88 1213.83 L1355.47 1213.83 L1356.05 1213.83 L1356.64 1213.83 L1357.22 1213.83 L1357.81 1213.83 L1358.4 1213.83 L1358.98 1213.83 L1359.57 1213.83 L1360.16 1213.83 L1360.74 1213.83 L1361.33 1213.83 L1361.92 1213.83 L1362.5 1213.83 L1363.09 1213.83 L1363.68 1213.83 L1364.26 1213.83 L1364.85 1213.83 L1365.43 1213.83 L1366.02 1213.83 L1366.61 1213.83 L1367.19 1213.83 L1367.78 1213.83 L1368.37 1213.83 L1368.95 1213.83 L1369.54 1213.83 L1370.13 1213.83 L1370.71 1213.83 L1371.3 1213.83 L1371.88 1213.83 L1372.47 1213.83 L1373.06 1213.83 L1373.64 1213.83 L1374.23 1213.83 L1374.82 1213.83 L1375.4 1213.83 L1375.99 1213.83 L1376.58 1213.83 L1377.16 1213.83 L1377.75 1213.83 L1378.34 1213.83 L1378.92 1213.83 L1379.51 1213.83 L1380.09 1213.83 L1380.68 1213.83 L1381.27 1213.83 L1381.85 1213.83 L1382.44 1213.83 L1383.03 1213.83 L1383.61 1213.83 L1384.2 1213.83 L1384.79 1213.83 L1385.37 1213.83 L1385.96 1213.83 L1386.55 1213.83 L1387.13 1213.83 L1387.72 1213.83 L1388.3 1213.83 L1388.89 1213.83 L1389.48 1213.83 L1390.06 1213.83 L1390.65 1213.83 L1391.24 1213.83 L1391.82 1213.83 L1392.41 1213.83 L1393 1213.83 L1393.58 1213.83 L1394.17 1213.83 L1394.75 1213.83 L1395.34 1213.83 L1395.93 1213.83 L1396.51 1213.83 L1397.1 1213.83 L1397.69 1213.83 L1398.27 1213.83 L1398.86 1213.83 L1399.45 1213.83 L1400.03 1213.83 L1400.62 1213.83 L1401.21 1213.83 L1401.79 1213.83 L1402.38 1213.83 L1402.96 1213.83 L1403.55 1213.83 L1404.14 1213.83 L1404.72 1213.83 L1405.31 1213.83 L1405.9 1213.83 L1406.48 1213.83 L1407.07 1213.83 L1407.66 1213.83 L1408.24 1213.83 L1408.83 1213.83 L1409.42 1213.83 L1410 1213.83 L1410.59 1213.83 L1411.17 1213.83 L1411.76 1213.83 L1412.35 1213.83 L1412.93 1213.83 L1413.52 1213.83 L1414.11 1213.83 L1414.69 1213.83 L1415.28 1213.83 L1415.87 1213.83 L1416.45 1213.83 L1417.04 1213.83 L1417.63 1213.83 L1418.21 1213.83 L1418.8 1213.83 L1419.38 1213.83 L1419.97 1213.83 L1420.56 1213.83 L1421.14 1213.83 L1421.73 1213.83 L1422.32 1213.83 L1422.9 1213.83 L1423.49 1213.83 L1424.08 1213.83 L1424.66 1213.83 L1425.25 1213.83 L1425.83 1213.83 L1426.42 1213.83 L1427.01 1213.83 L1427.59 1213.83 L1428.18 1213.83 L1428.77 1213.83 L1429.35 1213.83 L1429.94 1213.83 L1430.53 1213.83 L1431.11 1213.83 L1431.7 1213.83 L1432.29 1213.83 L1432.87 1213.83 L1433.46 1213.83 L1434.04 1213.83 L1434.63 1213.83 L1435.22 1213.83 L1435.8 1213.83 L1436.39 1213.83 L1436.98 1213.83 L1437.56 1213.83 L1438.15 1213.83 L1438.74 1213.83 L1439.32 1213.83 L1439.91 1213.83 L1440.5 1213.83 L1441.08 1213.83 L1441.67 1213.83 L1442.25 1213.83 L1442.84 1213.83 L1443.43 1213.83 L1444.01 1213.83 L1444.6 1213.83 L1445.19 1213.83 L1445.77 1213.83 L1446.36 1213.83 L1446.95 1213.83 L1447.53 1213.83 L1448.12 1213.83 L1448.7 1213.83 L1449.29 1213.83 L1449.88 1213.83 L1450.46 1213.83 L1451.05 1213.83 L1451.64 1213.83 L1452.22 1213.83 L1452.81 1213.83 L1453.4 1213.83 L1453.98 1213.83 L1454.57 1213.83 L1455.16 1213.83 L1455.74 1213.83 L1456.33 1213.83 L1456.91 1213.83 L1457.5 1213.83 L1458.09 1213.83 L1458.67 1213.83 L1459.26 1213.83 L1459.85 1213.83 L1460.43 1213.83 L1461.02 1213.83 L1461.61 1213.83 L1462.19 1213.83 L1462.78 1213.83 L1463.37 1213.83 L1463.95 1213.83 L1464.54 1213.83 L1465.12 1213.83 L1465.71 1213.83 L1466.3 1213.83 L1466.88 1213.83 L1467.47 1213.83 L1468.06 1213.83 L1468.64 1213.83 L1469.23 1213.83 L1469.82 1213.83 L1470.4 1213.83 L1470.99 1213.83 L1471.57 1213.83 L1472.16 1213.83 L1472.75 1213.83 L1473.33 1213.83 L1473.92 1213.83 L1474.51 1213.83 L1475.09 1213.83 L1475.68 1213.83 L1476.27 1213.83 L1476.85 1213.83 L1477.44 1213.83 L1478.03 1213.83 L1478.61 1213.83 L1479.2 1213.83 L1479.78 1213.83 L1480.37 1213.83 L1480.96 1213.83 L1481.54 1213.83 L1482.13 1213.83 L1482.72 1213.83 L1483.3 1213.83 L1483.89 1213.83 L1484.48 1213.83 L1485.06 1213.83 L1485.65 1213.83 L1486.24 1213.83 L1486.82 1213.83 L1487.41 1213.83 L1487.99 1213.83 L1488.58 1213.83 L1489.17 1213.83 L1489.75 1213.83 L1490.34 1213.83 L1490.93 1213.83 L1491.51 1213.83 L1492.1 1213.83 L1492.69 1213.83 L1493.27 1213.83 L1493.86 1213.83 L1494.45 1213.83 L1495.03 1213.83 L1495.62 1213.83 L1496.2 1213.83 L1496.79 1213.83 L1497.38 1213.83 L1497.96 1213.83 L1498.55 1213.83 L1499.14 1213.83 L1499.72 1213.83 L1500.31 1213.83 L1500.9 1213.83 L1501.48 1213.83 L1502.07 1213.83 L1502.65 1213.83 L1503.24 1213.83 L1503.83 1213.83 L1504.41 1213.83 L1505 1213.83 L1505.59 1213.83 L1506.17 1213.83 L1506.76 1213.83 L1507.35 1213.83 L1507.93 1213.83 L1508.52 1213.83 L1509.11 1213.83 L1509.69 1213.83 L1510.28 1213.83 L1510.86 1213.83 L1511.45 1213.83 L1512.04 1213.83 L1512.62 1213.83 L1513.21 1213.83 L1513.8 1213.83 L1514.38 1213.83 L1514.97 1213.83 L1515.56 1213.83 L1516.14 1213.83 L1516.73 1213.83 L1517.32 1213.83 L1517.9 1213.83 L1518.49 1213.83 L1519.07 1213.83 L1519.66 1213.83 L1520.25 1213.83 L1520.83 1213.83 L1521.42 1213.83 L1522.01 1213.83 L1522.59 1213.83 L1523.18 1213.83 L1523.77 1213.83 L1524.35 1213.83 L1524.94 1213.83 L1525.52 1213.83 L1526.11 1213.83 L1526.7 1213.83 L1527.28 1213.83 L1527.87 1213.83 L1528.46 1213.83 L1529.04 1213.83 L1529.63 1213.83 L1530.22 1213.83 L1530.8 1213.83 L1531.39 1213.83 L1531.98 1213.83 L1532.56 1213.83 L1533.15 1213.83 L1533.73 1213.83 L1534.32 1213.83 L1534.91 1213.83 L1535.49 1213.83 L1536.08 1213.83 L1536.67 1213.83 L1537.25 1213.83 L1537.84 1213.83 L1538.43 1213.83 L1539.01 1213.83 L1539.6 1213.83 L1540.19 1213.83 L1540.77 1213.83 L1541.36 1213.83 L1541.94 1213.83 L1542.53 1213.83 L1543.12 1213.83 L1543.7 1213.83 L1544.29 1213.83 L1544.88 1213.83 L1545.46 1213.83 L1546.05 1213.83 L1546.64 1213.83 L1547.22 1213.83 L1547.81 1213.83 L1548.4 1213.83 L1548.98 1213.83 L1549.57 1213.83 L1550.15 1213.83 L1550.74 1213.83 L1551.33 1213.83 L1551.91 1213.83 L1552.5 1213.83 L1553.09 1213.83 L1553.67 1213.83 L1554.26 1213.83 L1554.85 1213.83 L1555.43 1213.83 L1556.02 1213.83 L1556.6 1213.83 L1557.19 1213.83 L1557.78 1213.83 L1558.36 1213.83 L1558.95 1213.83 L1559.54 1213.83 L1560.12 1213.83 L1560.71 1213.83 L1561.3 1213.83 L1561.88 1213.83 L1562.47 1213.83 L1563.06 1213.83 L1563.64 1213.83 L1564.23 1213.83 L1564.81 1213.83 L1565.4 1213.83 L1565.99 1213.83 L1566.57 1213.83 L1567.16 1213.83 L1567.75 1213.83 L1568.33 1213.83 L1568.92 1213.83 L1569.51 1213.83 L1570.09 1213.83 L1570.68 1213.83 L1571.27 1213.83 L1571.85 1213.83 L1572.44 1213.83 L1573.02 1213.83 L1573.61 1213.83 L1574.2 1213.83 L1574.78 1213.83 L1575.37 1213.83 L1575.96 1213.83 L1576.54 1213.83 L1577.13 1213.83 L1577.72 1213.83 L1578.3 1213.83 L1578.89 1213.83 L1579.47 1213.83 L1580.06 1213.83 L1580.65 1213.83 L1581.23 1213.83 L1581.82 1213.83 L1582.41 1213.83 L1582.99 1213.83 L1583.58 1213.83 L1584.17 1213.83 L1584.75 1213.83 L1585.34 1213.83 L1585.93 1213.83 L1586.51 1213.83 L1587.1 1213.83 L1587.68 1213.83 L1588.27 1213.83 L1588.86 1213.83 L1589.44 1213.83 L1590.03 1213.83 L1590.62 1213.83 L1591.2 1213.83 L1591.79 1213.83 L1592.38 1213.83 L1592.96 1213.83 L1593.55 1213.83 L1594.14 1213.83 L1594.72 1213.83 L1595.31 1213.83 L1595.89 1213.83 L1596.48 1213.83 L1597.07 1213.83 L1597.65 1213.83 L1598.24 1213.83 L1598.83 1213.83 L1599.41 1213.83 L1600 1213.83 L1600.59 1213.83 L1601.17 1213.83 L1601.76 1213.83 L1602.34 1213.83 L1602.93 1213.83 L1603.52 1213.83 L1604.1 1213.83 L1604.69 1213.83 L1605.28 1213.83 L1605.86 1213.83 L1606.45 1213.83 L1607.04 1213.83 L1607.62 1213.83 L1608.21 1213.83 L1608.8 1213.83 L1609.38 1213.83 L1609.97 1213.83 L1610.55 1213.83 L1611.14 1213.83 L1611.73 1213.83 L1612.31 1213.83 L1612.9 1213.83 L1613.49 1213.83 L1614.07 1213.83 L1614.66 1213.83 L1615.25 1213.83 L1615.83 1213.83 L1616.42 1213.83 L1617.01 1213.83 L1617.59 1213.83 L1618.18 1213.83 L1618.76 1213.83 L1619.35 1213.83 L1619.94 1213.83 L1620.52 1213.83 L1621.11 1213.83 L1621.7 1213.83 L1622.28 1213.83 L1622.87 1213.83 L1623.46 1213.83 L1624.04 1213.83 L1624.63 1213.83 L1625.22 1213.83 L1625.8 1213.83 L1626.39 1213.83 L1626.97 1213.83 L1627.56 1213.83 L1628.15 1213.83 L1628.73 1213.83 L1629.32 1213.83 L1629.91 1213.83 L1630.49 1213.83 L1631.08 1213.83 L1631.67 1213.83 L1632.25 1213.83 L1632.84 1213.83 L1633.42 1213.83 L1634.01 1213.83 L1634.6 1213.83 L1635.18 1213.83 L1635.77 1213.83 L1636.36 1213.83 L1636.94 1213.83 L1637.53 1213.83 L1638.12 1213.83 L1638.7 1213.83 L1639.29 1213.83 L1639.88 1213.83 L1640.46 1213.83 L1641.05 1213.83 L1641.63 1213.83 L1642.22 1213.83 L1642.81 1213.83 L1643.39 1213.83 L1643.98 1213.83 L1644.57 1213.83 L1645.15 1213.83 L1645.74 1213.83 L1646.33 1213.83 L1646.91 1213.83 L1647.5 1213.83 L1648.09 1213.83 L1648.67 1213.83 L1649.26 1213.83 L1649.84 1213.83 L1650.43 1213.83 L1651.02 1213.83 L1651.6 1213.83 L1652.19 1213.83 L1652.78 1213.83 L1653.36 1213.83 L1653.95 1213.83 L1654.54 1213.83 L1655.12 1213.83 L1655.71 1213.83 L1656.29 1213.83 L1656.88 1213.83 L1657.47 1213.83 L1658.05 1213.83 L1658.64 1213.83 L1659.23 1213.83 L1659.81 1213.83 L1660.4 1213.83 L1660.99 1213.83 L1661.57 1213.83 L1662.16 1213.83 L1662.75 1213.83 L1663.33 1213.83 L1663.92 1213.83 L1664.5 1213.83 L1665.09 1213.83 L1665.68 1213.83 L1666.26 1213.83 L1666.85 1213.83 L1667.44 1213.83 L1668.02 1213.83 L1668.61 1213.83 L1669.2 1213.83 L1669.78 1213.83 L1670.37 1213.83 L1670.96 1213.83 L1671.54 1213.83 L1672.13 1213.83 L1672.71 1213.83 L1673.3 1213.83 L1673.89 1213.83 L1674.47 1213.83 L1675.06 1213.83 L1675.65 1213.83 L1676.23 1213.83 L1676.82 1213.83 L1677.41 1213.83 L1677.99 1213.83 L1678.58 1213.83 L1679.17 1213.83 L1679.75 1213.83 L1680.34 1213.83 L1680.92 1213.83 L1681.51 1213.83 L1682.1 1213.83 L1682.68 1213.83 L1683.27 1213.83 L1683.86 1213.83 L1684.44 1213.83 L1685.03 1213.83 L1685.62 1213.83 L1686.2 1213.83 L1686.79 1213.83 L1687.37 1213.83 L1687.96 1213.83 L1688.55 1213.83 L1689.13 1213.83 L1689.72 1213.83 L1690.31 1213.83 L1690.89 1213.83 L1691.48 1213.83 L1692.07 1213.83 L1692.65 1213.83 L1693.24 1213.83 L1693.83 1213.83 L1694.41 1213.83 L1695 1213.83 L1695.58 1213.83 L1696.17 1213.83 L1696.76 1213.83 L1697.34 1213.83 L1697.93 1213.83 L1698.52 1213.83 L1699.1 1213.83 L1699.69 1213.83 L1700.28 1213.83 L1700.86 1213.83 L1701.45 1213.83 L1702.04 1213.83 L1702.62 1213.83 L1703.21 1213.83 L1703.79 1213.83 L1704.38 1213.83 L1704.97 1213.83 L1705.55 1213.83 L1706.14 1213.83 L1706.73 1213.83 L1707.31 1213.83 L1707.9 1213.83 L1708.49 1213.83 L1709.07 1213.83 L1709.66 1213.83 L1710.24 1213.83 L1710.83 1213.83 L1711.42 1213.83 L1712 1213.83 L1712.59 1213.83 L1713.18 1213.83 L1713.76 1213.83 L1714.35 1213.83 L1714.94 1213.83 L1715.52 1213.83 L1716.11 1213.83 L1716.7 1213.83 L1717.28 1213.83 L1717.87 1213.83 L1718.45 1213.83 L1719.04 1213.83 L1719.63 1213.83 L1720.21 1213.83 L1720.8 1213.83 L1721.39 1213.83 L1721.97 1213.83 L1722.56 1213.83 L1723.15 1213.83 L1723.73 1213.83 L1724.32 1213.83 L1724.91 1213.83 L1725.49 1213.83 L1726.08 1213.83 L1726.66 1213.83 L1727.25 1213.83 L1727.84 1213.83 L1728.42 1213.83 L1729.01 1213.83 L1729.6 1213.83 L1730.18 1213.83 L1730.77 1213.83 L1731.36 1213.83 L1731.94 1213.83 L1732.53 1213.83 L1733.11 1213.83 L1733.7 1213.83 L1734.29 1213.83 L1734.87 1213.83 L1735.46 1213.83 L1736.05 1213.83 L1736.63 1213.83 L1737.22 1213.83 L1737.81 1213.83 L1738.39 1213.83 L1738.98 1213.83 L1739.57 1213.83 L1740.15 1213.83 L1740.74 1213.83 L1741.32 1213.83 L1741.91 1213.83 L1742.5 1213.83 L1743.08 1213.83 L1743.67 1213.83 L1744.26 1213.83 L1744.84 1213.83 L1745.43 1213.83 L1746.02 1213.83 L1746.6 1213.83 L1747.19 1213.83 L1747.78 1213.83 L1748.36 1213.83 L1748.95 1213.83 L1749.53 1213.83 L1750.12 1213.83 L1750.71 1213.83 L1751.29 1213.83 L1751.88 1213.83 L1752.47 1213.83 L1753.05 1213.83 L1753.64 1213.83 L1754.23 1213.83 L1754.81 1213.83 L1755.4 1213.83 L1755.99 1213.83 L1756.57 1213.83 L1757.16 1213.83 L1757.74 1213.83 L1758.33 1213.83 L1758.92 1213.83 L1759.5 1213.83 L1760.09 1213.83 L1760.68 1213.83 L1761.26 1213.83 L1761.85 1213.83 L1762.44 1213.83 L1763.02 1213.83 L1763.61 1213.83 L1764.19 1213.83 L1764.78 1213.83 L1765.37 1213.83 L1765.95 1213.83 L1766.54 1213.83 L1767.13 1213.83 L1767.71 1213.83 L1768.3 1213.83 L1768.89 1213.83 L1769.47 1213.83 L1770.06 1213.83 L1770.65 1213.83 L1771.23 1213.83 L1771.82 1213.83 L1772.4 1213.83 L1772.99 1213.83 L1773.58 1213.83 L1774.16 1213.83 L1774.75 1213.83 L1775.34 1213.83 L1775.92 1213.83 L1776.51 1213.83 L1777.1 1213.83 L1777.68 1213.83 L1778.27 1213.83 L1778.86 1213.83 L1779.44 1213.83 L1780.03 1213.83 L1780.61 1213.83 L1781.2 1213.83 L1781.79 1213.83 L1782.37 1213.83 L1782.96 1213.83 L1783.55 1213.83 L1784.13 1213.83 L1784.72 1213.83 L1785.31 1213.83 L1785.89 1213.83 L1786.48 1213.83 L1787.06 1213.83 L1787.65 1213.83 L1788.24 1213.83 L1788.82 1213.83 L1789.41 1213.83 L1790 1213.83 L1790.58 1213.83 L1791.17 1213.83 L1791.76 1213.83 L1792.34 1213.83 L1792.93 1213.83 L1793.52 1213.83 L1794.1 1213.83 L1794.69 1213.83 L1795.27 1213.83 L1795.86 1213.83 L1796.45 1213.83 L1797.03 1213.83 L1797.62 1213.83 L1798.21 1213.83 L1798.79 1213.83 L1799.38 1213.83 L1799.97 1213.83 L1800.55 1213.83 L1801.14 1213.83 L1801.73 1213.83 L1802.31 1213.83 L1802.9 1213.83 L1803.48 1213.83 L1804.07 1213.83 L1804.66 1213.83 L1805.24 1213.83 L1805.83 1213.83 L1806.42 1213.83 L1807 1213.83 L1807.59 1213.83 L1808.18 1213.83 L1808.76 1213.83 L1809.35 1213.83 L1809.94 1213.83 L1810.52 1213.83 L1811.11 1213.83 L1811.69 1213.83 L1812.28 1213.83 L1812.87 1213.83 L1813.45 1213.83 L1814.04 1213.83 L1814.63 1213.83 L1815.21 1213.83 L1815.8 1213.83 L1816.39 1213.83 L1816.97 1213.83 L1817.56 1213.83 L1818.14 1213.83 L1818.73 1213.83 L1819.32 1213.83 L1819.9 1213.83 L1820.49 1213.83 L1821.08 1213.83 L1821.66 1213.83 L1822.25 1213.83 L1822.84 1213.83 L1823.42 1213.83 L1824.01 1213.83 L1824.6 1213.83 L1825.18 1213.83 L1825.77 1213.83 L1826.35 1213.83 L1826.94 1213.83 L1827.53 1213.83 L1828.11 1213.83 L1828.7 1213.83 L1829.29 1213.83 L1829.87 1213.83 L1830.46 1213.83 L1831.05 1213.83 L1831.63 1213.83 L1832.22 1213.83 L1832.81 1213.83 L1833.39 1213.83 L1833.98 1213.83 L1834.56 1213.83 L1835.15 1213.83 L1835.74 1213.83 L1836.32 1213.83 L1836.91 1213.83 L1837.5 1213.83 L1838.08 1213.83 L1838.67 1213.83 L1839.26 1213.83 L1839.84 1213.83 L1840.43 1213.83 L1841.01 1213.83 L1841.6 1213.83 L1842.19 1213.83 L1842.77 1213.83 L1843.36 1213.83 L1843.95 1213.83 L1844.53 1213.83 L1845.12 1213.83 L1845.71 1213.83 L1846.29 1213.83 L1846.88 1213.83 L1847.47 1213.83 L1848.05 1213.83 L1848.64 1213.83 L1849.22 1213.83 L1849.81 1213.83 L1850.4 1213.83 L1850.98 1213.83 L1851.57 1213.83 L1852.16 1213.83 L1852.74 1213.83 L1853.33 1213.83 L1853.92 1213.83 L1854.5 1213.83 L1855.09 1213.83 L1855.68 1213.83 L1856.26 1213.83 L1856.85 1213.83 L1857.43 1213.83 L1858.02 1213.83 L1858.61 1213.83 L1859.19 1213.83 L1859.78 1213.83 L1860.37 1213.83 L1860.95 1213.83 L1861.54 1213.83 L1862.13 1213.83 L1862.71 1213.83 L1863.3 1213.83 L1863.88 1213.83 L1864.47 1213.83 L1865.06 1213.83 L1865.64 1213.83 L1866.23 1213.83 L1866.82 1213.83 L1867.4 1213.83 L1867.99 1213.83 L1868.58 1213.83 L1869.16 1213.83 L1869.75 1213.83 L1870.34 1213.83 L1870.92 1213.83 L1871.51 1213.83 L1872.09 1213.83 L1872.68 1213.83 L1873.27 1213.83 L1873.85 1213.83 L1874.44 1213.83 L1875.03 1213.83 L1875.61 1213.83 L1876.2 1213.83 L1876.79 1213.83 L1877.37 1213.83 L1877.96 1213.83 L1878.55 1213.83 L1879.13 1213.83 L1879.72 1213.83 L1880.3 1213.83 L1880.89 1213.83 L1881.48 1213.83 L1882.06 1213.83 L1882.65 1213.83 L1883.24 1213.83 L1883.82 1213.83 L1884.41 1213.83 L1885 1213.83 L1885.58 1213.83 L1886.17 1213.83 L1886.76 1213.83 L1887.34 1213.83 L1887.93 1213.83 L1888.51 1213.83 L1889.1 1213.83 L1889.69 1213.83 L1890.27 1213.83 L1890.86 1213.83 L1891.45 1213.83 L1892.03 1213.83 L1892.62 1213.83 L1893.21 1213.83 L1893.79 1213.83 L1894.38 1213.83 L1894.96 1213.83 L1895.55 1213.83 L1896.14 1213.83 L1896.72 1213.83 L1897.31 1213.83 L1897.9 1213.83 L1898.48 1213.83 L1899.07 1213.83 L1899.66 1213.83 L1900.24 1213.83 L1900.83 1213.83 L1901.42 1213.83 L1902 1213.83 L1902.59 1213.83 L1903.17 1213.83 L1903.76 1213.83 L1904.35 1213.83 L1904.93 1213.83 L1905.52 1213.83 L1906.11 1213.83 L1906.69 1213.83 L1907.28 1213.83 L1907.87 1213.83 L1908.45 1213.83 L1909.04 1213.83 L1909.63 1213.83 L1910.21 1213.83 L1910.8 1213.83 L1911.38 1213.83 L1911.97 1213.83 L1912.56 1213.83 L1913.14 1213.83 L1913.73 1213.83 L1914.32 1213.83 L1914.9 1213.83 L1915.49 1213.83 L1916.08 1213.83 L1916.66 1213.83 L1917.25 1213.83 L1917.83 1213.83 L1918.42 1213.83 L1919.01 1213.83 L1919.59 1213.83 L1920.18 1213.83 L1920.77 1213.83 L1921.35 1213.83 L1921.94 1213.83 L1922.53 1213.83 L1923.11 1213.83 L1923.7 1213.83 L1924.29 1213.83 L1924.87 1213.83 L1925.46 1213.83 L1926.04 1213.83 L1926.63 1213.83 L1927.22 1213.83 L1927.8 1213.83 L1928.39 1213.83 L1928.98 1213.83 L1929.56 1213.83 L1930.15 1213.83 L1930.74 1213.83 L1931.32 1213.83 L1931.91 1213.83 L1932.5 1213.83 L1933.08 1213.83 L1933.67 1213.83 L1934.25 1213.83 L1934.84 1213.83 L1935.43 1213.83 L1936.01 1213.83 L1936.6 1213.83 L1937.19 1213.83 L1937.77 1213.83 L1938.36 1213.83 L1938.95 1213.83 L1939.53 1213.83 L1940.12 1213.83 L1940.71 1213.83 L1941.29 1213.83 L1941.88 1213.83 L1942.46 1213.83 L1943.05 1213.83 L1943.64 1213.83 L1944.22 1213.83 L1944.81 1213.83 L1945.4 1213.83 L1945.98 1213.83 L1946.57 1213.83 L1947.16 1213.83 L1947.74 1213.83 L1948.33 1213.83 L1948.91 1213.83 L1949.5 1213.83 L1950.09 1213.83 L1950.67 1213.83 L1951.26 1213.83 L1951.85 1213.83 L1952.43 1213.83 L1953.02 1213.83 L1953.61 1213.83 L1954.19 1213.83 L1954.78 1213.83 L1955.37 1213.83 L1955.95 1213.83 L1956.54 1213.83 L1957.12 1213.83 L1957.71 1213.83 L1958.3 1213.83 L1958.88 1213.83 L1959.47 1213.83 L1960.06 1213.83 L1960.64 1213.83 L1961.23 1213.83 L1961.82 1213.83 L1962.4 1213.83 L1962.99 1213.83 L1963.58 1213.83 L1964.16 1213.83 L1964.75 1213.83 L1965.33 1213.83 L1965.92 1213.83 L1966.51 1213.83 L1967.09 1213.83 L1967.68 1213.83 L1968.27 1213.83 L1968.85 1213.83 L1969.44 1213.83 L1970.03 1213.83 L1970.61 1213.83 L1971.2 1213.83 L1971.78 1213.83 L1972.37 1213.83 L1972.96 1213.83 L1973.54 1213.83 L1974.13 1213.83 L1974.72 1213.83 L1975.3 1213.83 L1975.89 1213.83 L1976.48 1213.83 L1977.06 1213.83 L1977.65 1213.83 L1978.24 1213.83 L1978.82 1213.83 L1979.41 1213.83 L1979.99 1213.83 L1980.58 1213.83 L1981.17 1213.83 L1981.75 1213.83 L1982.34 1213.83 L1982.93 1213.83 L1983.51 1213.83 L1984.1 1213.83 L1984.69 1213.83 L1985.27 1213.83 L1985.86 1213.83 L1986.45 1213.83 L1987.03 1213.83 L1987.62 1213.83 L1988.2 1213.83 L1988.79 1213.83 L1989.38 1213.83 L1989.96 1213.83 L1990.55 1213.83 L1991.14 1213.83 L1991.72 1213.83 L1992.31 1213.83 L1992.9 1213.83 L1993.48 1213.83 L1994.07 1213.83 L1994.65 1213.83 L1995.24 1213.83 L1995.83 1213.83 L1996.41 1213.83 L1997 1213.83 L1997.59 1213.83 L1998.17 1213.83 L1998.76 1213.83 L1999.35 1213.83 L1999.93 1213.83 L2000.52 1213.83 L2001.11 1213.83 L2001.69 1213.83 L2002.28 1213.83 L2002.86 1213.83 L2003.45 1213.83 L2004.04 1213.83 L2004.62 1213.83 L2005.21 1213.83 L2005.8 1213.83 L2006.38 1213.83 L2006.97 1213.83 L2007.56 1213.83 L2008.14 1213.83 L2008.73 1213.83 L2009.32 1213.83 L2009.9 1213.83 L2010.49 1213.83 L2011.07 1213.83 L2011.66 1213.83 L2012.25 1213.83 L2012.83 1213.83 L2013.42 1213.83 L2014.01 1213.83 L2014.59 1213.83 L2015.18 1213.83 L2015.77 1213.83 L2016.35 1213.83 L2016.94 1213.83 L2017.53 1213.83 L2018.11 1213.83 L2018.7 1213.83 L2019.28 1213.83 L2019.87 1213.83 L2020.46 1213.83 L2021.04 1213.83 L2021.63 1213.83 L2022.22 1213.83 L2022.8 1213.83 L2023.39 1213.83 L2023.98 1213.83 L2024.56 1213.83 L2025.15 1213.83 L2025.73 1213.83 L2026.32 1213.83 L2026.91 1213.83 L2027.49 1213.83 L2028.08 1213.83 L2028.67 1213.83 L2029.25 1213.83 L2029.84 1213.83 L2030.43 1213.83 L2031.01 1213.83 L2031.6 1213.83 L2032.19 1213.83 L2032.77 1213.83 L2033.36 1213.83 L2033.94 1213.83 L2034.53 1213.83 L2035.12 1213.83 L2035.7 1213.83 L2036.29 1213.83 L2036.88 1213.83 L2037.46 1213.83 L2038.05 1213.83 L2038.64 1213.83 L2039.22 1213.83 L2039.81 1213.83 L2040.4 1213.83 L2040.98 1213.83 L2041.57 1213.83 L2042.15 1213.83 L2042.74 1213.83 L2043.33 1213.83 L2043.91 1213.83 L2044.5 1213.83 L2045.09 1213.83 L2045.67 1213.83 L2046.26 1213.83 L2046.85 1213.83 L2047.43 1213.83 L2048.02 1213.83 L2048.6 1213.83 L2049.19 1213.83 L2049.78 1213.83 L2050.36 1213.83 L2050.95 1213.83 L2051.54 1213.83 L2052.12 1213.83 L2052.71 1213.83 L2053.3 1213.83 L2053.88 1213.83 L2054.47 1213.83 L2055.06 1213.83 L2055.64 1213.83 L2056.23 1213.83 L2056.81 1213.83 L2057.4 1213.83 L2057.99 1213.83 L2058.57 1213.83 L2059.16 1213.83 L2059.75 1213.83 L2060.33 1213.83 L2060.92 1213.83 L2061.51 1213.83 L2062.09 1213.83 L2062.68 1213.83 L2063.27 1213.83 L2063.85 1213.83 L2064.44 1213.83 L2065.02 1213.83 L2065.61 1213.83 L2066.2 1213.83 L2066.78 1213.83 L2067.37 1213.83 L2067.96 1213.83 L2068.54 1213.83 L2069.13 1213.83 L2069.72 1213.83 L2070.3 1213.83 L2070.89 1213.83 L2071.48 1213.83 L2072.06 1213.83 L2072.65 1213.83 L2073.23 1213.83 L2073.82 1213.83 L2074.41 1213.83 L2074.99 1213.83 L2075.58 1213.83 L2076.17 1213.83 L2076.75 1213.83 L2077.34 1213.83 L2077.93 1213.83 L2078.51 1213.83 L2079.1 1213.83 L2079.68 1213.83 L2080.27 1213.83 L2080.86 1213.83 L2081.44 1213.83 L2082.03 1213.83 L2082.62 1213.83 L2083.2 1213.83 L2083.79 1213.83 L2084.38 1213.83 L2084.96 1213.83 L2085.55 1213.83 L2086.14 1213.83 L2086.72 1213.83 L2087.31 1213.83 L2087.89 1213.83 L2088.48 1213.83 L2089.07 1213.83 L2089.65 1213.83 L2090.24 1213.83 L2090.83 1213.83 L2091.41 1213.83 L2092 1213.83 L2092.59 1213.83 L2093.17 1213.83 L2093.76 1213.83 L2094.35 1213.83 L2094.93 1213.83 L2095.52 1213.83 L2096.1 1213.83 L2096.69 1213.83 L2097.28 1213.83 L2097.86 1213.83 L2098.45 1213.83 L2099.04 1213.83 L2099.62 1213.83 L2100.21 1213.83 L2100.8 1213.83 L2101.38 1213.83 L2101.97 1213.83 L2102.55 1213.83 L2103.14 1213.83 L2103.73 1213.83 L2104.31 1213.83 L2104.9 1213.83 L2105.49 1213.83 L2106.07 1213.83 L2106.66 1213.83 L2107.25 1213.83 L2107.83 1213.83 L2108.42 1213.83 L2109.01 1213.83 L2109.59 1213.83 L2110.18 1213.83 L2110.76 1213.83 L2111.35 1213.83 L2111.94 1213.83 L2112.52 1213.83 L2113.11 1213.83 L2113.7 1213.83 L2114.28 1213.83 L2114.87 1213.83 L2115.46 1213.83 L2116.04 1213.83 L2116.63 1213.83 L2117.22 1213.83 L2117.8 1213.83 L2118.39 1213.83 L2118.97 1213.83 L2119.56 1213.83 L2120.15 1213.83 L2120.73 1213.83 L2121.32 1213.83 L2121.91 1213.83 L2122.49 1213.83 L2123.08 1213.83 L2123.67 1213.83 L2124.25 1213.83 L2124.84 1213.83 L2125.42 1213.83 L2126.01 1213.83 L2126.6 1213.83 L2127.18 1213.83 L2127.77 1213.83 L2128.36 1213.83 L2128.94 1213.83 L2129.53 1213.83 L2130.12 1213.83 L2130.7 1213.83 L2131.29 1213.83 L2131.88 1213.83 L2132.46 1213.83 L2133.05 1213.83 L2133.63 1213.83 L2134.22 1213.83 L2134.81 1213.83 L2135.39 1213.83 L2135.98 1213.83 L2136.57 1213.83 L2137.15 1213.83 L2137.74 1213.83 L2138.33 1213.83 L2138.91 1213.83 L2139.5 1213.83 L2140.09 1213.83 L2140.67 1213.83 L2141.26 1213.83 L2141.84 1213.83 L2142.43 1213.83 L2143.02 1213.83 L2143.6 1213.83 L2144.19 1213.83 L2144.78 1213.83 L2145.36 1213.83 L2145.95 1213.83 L2146.54 1213.83 L2147.12 1213.83 L2147.71 1213.83 L2148.3 1213.83 L2148.88 1213.83 L2149.47 1213.83 L2150.05 1213.83 L2150.64 1213.83 L2151.23 1213.83 L2151.81 1213.83 L2152.4 1213.83 L2152.99 1213.83 L2153.57 1213.83 L2154.16 1213.83 L2154.75 1213.83 L2155.33 1213.83 L2155.92 1213.83 L2156.5 1213.83 L2157.09 1213.83 L2157.68 1213.83 L2158.26 1213.83 L2158.26 1213.09 L2157.68 1213.09 L2157.09 1213.09 L2156.5 1213.09 L2155.92 1213.09 L2155.33 1213.09 L2154.75 1213.09 L2154.16 1213.09 L2153.57 1213.09 L2152.99 1213.09 L2152.4 1213.09 L2151.81 1213.09 L2151.23 1213.09 L2150.64 1213.09 L2150.05 1213.09 L2149.47 1213.09 L2148.88 1213.09 L2148.3 1213.09 L2147.71 1213.09 L2147.12 1213.09 L2146.54 1213.09 L2145.95 1213.09 L2145.36 1213.09 L2144.78 1213.09 L2144.19 1213.09 L2143.6 1213.09 L2143.02 1213.09 L2142.43 1213.09 L2141.84 1213.09 L2141.26 1213.09 L2140.67 1213.09 L2140.09 1213.09 L2139.5 1213.09 L2138.91 1213.09 L2138.33 1213.09 L2137.74 1213.09 L2137.15 1213.09 L2136.57 1213.09 L2135.98 1213.09 L2135.39 1213.09 L2134.81 1213.09 L2134.22 1213.09 L2133.63 1213.09 L2133.05 1213.09 L2132.46 1213.09 L2131.88 1213.09 L2131.29 1213.09 L2130.7 1213.09 L2130.12 1213.09 L2129.53 1213.09 L2128.94 1213.09 L2128.36 1213.09 L2127.77 1213.09 L2127.18 1213.09 L2126.6 1213.09 L2126.01 1213.09 L2125.42 1213.09 L2124.84 1213.09 L2124.25 1213.09 L2123.67 1213.09 L2123.08 1213.09 L2122.49 1213.09 L2121.91 1213.09 L2121.32 1213.09 L2120.73 1213.09 L2120.15 1213.09 L2119.56 1213.09 L2118.97 1213.09 L2118.39 1213.09 L2117.8 1213.09 L2117.22 1213.09 L2116.63 1213.09 L2116.04 1213.09 L2115.46 1213.09 L2114.87 1213.09 L2114.28 1213.09 L2113.7 1213.09 L2113.11 1213.09 L2112.52 1213.09 L2111.94 1213.09 L2111.35 1213.09 L2110.76 1213.09 L2110.18 1213.09 L2109.59 1213.09 L2109.01 1213.09 L2108.42 1213.09 L2107.83 1213.09 L2107.25 1213.09 L2106.66 1213.09 L2106.07 1213.09 L2105.49 1213.09 L2104.9 1213.09 L2104.31 1213.09 L2103.73 1213.09 L2103.14 1213.09 L2102.55 1213.09 L2101.97 1213.09 L2101.38 1213.09 L2100.8 1213.09 L2100.21 1213.09 L2099.62 1213.09 L2099.04 1213.09 L2098.45 1213.09 L2097.86 1213.09 L2097.28 1213.09 L2096.69 1213.09 L2096.1 1213.09 L2095.52 1213.09 L2094.93 1213.09 L2094.35 1213.09 L2093.76 1213.09 L2093.17 1213.09 L2092.59 1213.09 L2092 1213.09 L2091.41 1213.09 L2090.83 1213.09 L2090.24 1213.09 L2089.65 1213.09 L2089.07 1213.09 L2088.48 1213.09 L2087.89 1213.09 L2087.31 1213.09 L2086.72 1213.09 L2086.14 1213.09 L2085.55 1213.09 L2084.96 1213.09 L2084.38 1213.09 L2083.79 1213.09 L2083.2 1213.09 L2082.62 1213.09 L2082.03 1213.09 L2081.44 1213.09 L2080.86 1213.09 L2080.27 1213.09 L2079.68 1213.09 L2079.1 1213.09 L2078.51 1213.09 L2077.93 1213.09 L2077.34 1213.09 L2076.75 1213.09 L2076.17 1213.09 L2075.58 1213.09 L2074.99 1213.09 L2074.41 1213.09 L2073.82 1213.09 L2073.23 1213.09 L2072.65 1213.09 L2072.06 1213.09 L2071.48 1213.09 L2070.89 1213.09 L2070.3 1213.09 L2069.72 1213.09 L2069.13 1213.09 L2068.54 1213.09 L2067.96 1213.09 L2067.37 1213.09 L2066.78 1213.09 L2066.2 1213.09 L2065.61 1213.09 L2065.02 1213.09 L2064.44 1213.09 L2063.85 1213.09 L2063.27 1213.09 L2062.68 1213.09 L2062.09 1213.09 L2061.51 1213.09 L2060.92 1213.09 L2060.33 1213.09 L2059.75 1213.09 L2059.16 1213.09 L2058.57 1213.09 L2057.99 1213.09 L2057.4 1213.09 L2056.81 1213.09 L2056.23 1213.09 L2055.64 1213.09 L2055.06 1213.09 L2054.47 1213.09 L2053.88 1213.09 L2053.3 1213.09 L2052.71 1213.09 L2052.12 1213.09 L2051.54 1213.09 L2050.95 1213.09 L2050.36 1213.09 L2049.78 1213.09 L2049.19 1213.09 L2048.6 1213.09 L2048.02 1213.09 L2047.43 1213.09 L2046.85 1213.09 L2046.26 1213.09 L2045.67 1213.09 L2045.09 1213.09 L2044.5 1213.09 L2043.91 1213.09 L2043.33 1213.09 L2042.74 1213.09 L2042.15 1213.09 L2041.57 1213.09 L2040.98 1213.09 L2040.4 1213.09 L2039.81 1213.09 L2039.22 1213.09 L2038.64 1213.09 L2038.05 1213.09 L2037.46 1213.09 L2036.88 1213.09 L2036.29 1213.09 L2035.7 1213.09 L2035.12 1213.09 L2034.53 1213.09 L2033.94 1213.09 L2033.36 1213.09 L2032.77 1213.09 L2032.19 1213.09 L2031.6 1213.09 L2031.01 1213.09 L2030.43 1213.09 L2029.84 1213.09 L2029.25 1213.09 L2028.67 1213.09 L2028.08 1213.09 L2027.49 1213.09 L2026.91 1213.09 L2026.32 1213.09 L2025.73 1213.09 L2025.15 1213.09 L2024.56 1213.09 L2023.98 1213.09 L2023.39 1213.09 L2022.8 1213.09 L2022.22 1213.09 L2021.63 1213.09 L2021.04 1213.09 L2020.46 1213.09 L2019.87 1213.09 L2019.28 1213.09 L2018.7 1213.09 L2018.11 1213.09 L2017.53 1213.09 L2016.94 1213.09 L2016.35 1213.09 L2015.77 1213.09 L2015.18 1213.09 L2014.59 1213.09 L2014.01 1213.09 L2013.42 1213.09 L2012.83 1213.09 L2012.25 1213.09 L2011.66 1213.09 L2011.07 1213.09 L2010.49 1213.09 L2009.9 1213.09 L2009.32 1213.09 L2008.73 1213.09 L2008.14 1213.09 L2007.56 1213.09 L2006.97 1213.09 L2006.38 1213.09 L2005.8 1213.09 L2005.21 1213.09 L2004.62 1213.09 L2004.04 1213.09 L2003.45 1213.09 L2002.86 1213.09 L2002.28 1213.09 L2001.69 1213.09 L2001.11 1213.09 L2000.52 1213.09 L1999.93 1213.09 L1999.35 1213.09 L1998.76 1213.09 L1998.17 1213.09 L1997.59 1213.09 L1997 1213.09 L1996.41 1213.09 L1995.83 1213.09 L1995.24 1213.09 L1994.65 1213.09 L1994.07 1213.09 L1993.48 1213.09 L1992.9 1213.09 L1992.31 1213.09 L1991.72 1213.09 L1991.14 1213.09 L1990.55 1213.09 L1989.96 1213.09 L1989.38 1213.09 L1988.79 1213.09 L1988.2 1213.09 L1987.62 1213.09 L1987.03 1213.09 L1986.45 1213.09 L1985.86 1213.09 L1985.27 1213.09 L1984.69 1213.09 L1984.1 1213.09 L1983.51 1213.09 L1982.93 1213.09 L1982.34 1213.09 L1981.75 1213.09 L1981.17 1213.09 L1980.58 1213.09 L1979.99 1213.09 L1979.41 1213.09 L1978.82 1213.09 L1978.24 1213.09 L1977.65 1213.09 L1977.06 1213.09 L1976.48 1213.09 L1975.89 1213.09 L1975.3 1213.09 L1974.72 1213.09 L1974.13 1213.09 L1973.54 1213.09 L1972.96 1213.09 L1972.37 1213.09 L1971.78 1213.09 L1971.2 1213.09 L1970.61 1213.09 L1970.03 1213.09 L1969.44 1213.09 L1968.85 1213.09 L1968.27 1213.09 L1967.68 1213.09 L1967.09 1213.09 L1966.51 1213.09 L1965.92 1213.09 L1965.33 1213.09 L1964.75 1213.09 L1964.16 1213.09 L1963.58 1213.09 L1962.99 1213.09 L1962.4 1213.09 L1961.82 1213.09 L1961.23 1213.09 L1960.64 1213.09 L1960.06 1213.09 L1959.47 1213.09 L1958.88 1213.09 L1958.3 1213.09 L1957.71 1213.09 L1957.12 1213.09 L1956.54 1213.09 L1955.95 1213.09 L1955.37 1213.09 L1954.78 1213.09 L1954.19 1213.09 L1953.61 1213.09 L1953.02 1213.09 L1952.43 1213.09 L1951.85 1213.09 L1951.26 1213.09 L1950.67 1213.09 L1950.09 1213.09 L1949.5 1213.09 L1948.91 1213.09 L1948.33 1213.09 L1947.74 1213.09 L1947.16 1213.09 L1946.57 1213.09 L1945.98 1213.09 L1945.4 1213.09 L1944.81 1213.09 L1944.22 1213.09 L1943.64 1213.09 L1943.05 1213.09 L1942.46 1213.09 L1941.88 1213.09 L1941.29 1213.09 L1940.71 1213.09 L1940.12 1213.09 L1939.53 1213.09 L1938.95 1213.09 L1938.36 1213.09 L1937.77 1213.09 L1937.19 1213.09 L1936.6 1213.09 L1936.01 1213.09 L1935.43 1213.09 L1934.84 1213.09 L1934.25 1213.09 L1933.67 1213.09 L1933.08 1213.09 L1932.5 1213.09 L1931.91 1213.09 L1931.32 1213.09 L1930.74 1213.09 L1930.15 1213.09 L1929.56 1213.09 L1928.98 1213.09 L1928.39 1213.09 L1927.8 1213.09 L1927.22 1213.09 L1926.63 1213.09 L1926.04 1213.09 L1925.46 1213.09 L1924.87 1213.09 L1924.29 1213.09 L1923.7 1213.09 L1923.11 1213.09 L1922.53 1213.09 L1921.94 1213.09 L1921.35 1213.09 L1920.77 1213.09 L1920.18 1213.09 L1919.59 1213.09 L1919.01 1213.09 L1918.42 1213.09 L1917.83 1213.09 L1917.25 1213.09 L1916.66 1213.09 L1916.08 1213.09 L1915.49 1213.09 L1914.9 1213.09 L1914.32 1213.09 L1913.73 1213.09 L1913.14 1213.09 L1912.56 1213.09 L1911.97 1213.09 L1911.38 1213.09 L1910.8 1213.09 L1910.21 1213.09 L1909.63 1213.09 L1909.04 1213.09 L1908.45 1213.09 L1907.87 1213.09 L1907.28 1213.09 L1906.69 1213.09 L1906.11 1213.09 L1905.52 1213.09 L1904.93 1213.09 L1904.35 1213.09 L1903.76 1213.09 L1903.17 1213.09 L1902.59 1213.09 L1902 1213.09 L1901.42 1213.09 L1900.83 1213.09 L1900.24 1213.09 L1899.66 1213.09 L1899.07 1213.09 L1898.48 1213.09 L1897.9 1213.09 L1897.31 1213.09 L1896.72 1213.09 L1896.14 1213.09 L1895.55 1213.09 L1894.96 1213.09 L1894.38 1213.09 L1893.79 1213.09 L1893.21 1213.09 L1892.62 1213.09 L1892.03 1213.09 L1891.45 1213.09 L1890.86 1213.09 L1890.27 1213.09 L1889.69 1213.09 L1889.1 1213.09 L1888.51 1213.09 L1887.93 1213.09 L1887.34 1213.09 L1886.76 1213.09 L1886.17 1213.09 L1885.58 1213.09 L1885 1213.09 L1884.41 1213.09 L1883.82 1213.09 L1883.24 1213.09 L1882.65 1213.09 L1882.06 1213.09 L1881.48 1213.09 L1880.89 1213.09 L1880.3 1213.09 L1879.72 1213.09 L1879.13 1213.09 L1878.55 1213.09 L1877.96 1213.09 L1877.37 1213.09 L1876.79 1213.09 L1876.2 1213.09 L1875.61 1213.09 L1875.03 1213.09 L1874.44 1213.09 L1873.85 1213.09 L1873.27 1213.09 L1872.68 1213.09 L1872.09 1213.09 L1871.51 1213.09 L1870.92 1213.09 L1870.34 1213.09 L1869.75 1213.09 L1869.16 1213.09 L1868.58 1213.09 L1867.99 1213.09 L1867.4 1213.09 L1866.82 1213.09 L1866.23 1213.09 L1865.64 1213.09 L1865.06 1213.09 L1864.47 1213.09 L1863.88 1213.09 L1863.3 1213.09 L1862.71 1213.09 L1862.13 1213.09 L1861.54 1213.09 L1860.95 1213.09 L1860.37 1213.09 L1859.78 1213.09 L1859.19 1213.09 L1858.61 1213.09 L1858.02 1213.09 L1857.43 1213.09 L1856.85 1213.09 L1856.26 1213.09 L1855.68 1213.09 L1855.09 1213.09 L1854.5 1213.09 L1853.92 1213.09 L1853.33 1213.09 L1852.74 1213.09 L1852.16 1213.09 L1851.57 1213.09 L1850.98 1213.09 L1850.4 1213.09 L1849.81 1213.09 L1849.22 1213.09 L1848.64 1213.09 L1848.05 1213.09 L1847.47 1213.09 L1846.88 1213.09 L1846.29 1213.09 L1845.71 1213.09 L1845.12 1213.09 L1844.53 1213.09 L1843.95 1213.09 L1843.36 1213.09 L1842.77 1213.09 L1842.19 1213.09 L1841.6 1213.09 L1841.01 1213.09 L1840.43 1213.09 L1839.84 1213.09 L1839.26 1213.09 L1838.67 1213.09 L1838.08 1213.09 L1837.5 1213.09 L1836.91 1213.09 L1836.32 1213.09 L1835.74 1213.09 L1835.15 1213.09 L1834.56 1213.09 L1833.98 1213.09 L1833.39 1213.09 L1832.81 1213.09 L1832.22 1213.09 L1831.63 1213.09 L1831.05 1213.09 L1830.46 1213.09 L1829.87 1213.09 L1829.29 1213.09 L1828.7 1213.09 L1828.11 1213.09 L1827.53 1213.09 L1826.94 1213.09 L1826.35 1213.09 L1825.77 1213.09 L1825.18 1213.09 L1824.6 1213.09 L1824.01 1213.09 L1823.42 1213.09 L1822.84 1213.09 L1822.25 1213.09 L1821.66 1213.09 L1821.08 1213.09 L1820.49 1213.09 L1819.9 1213.09 L1819.32 1213.09 L1818.73 1213.09 L1818.14 1213.09 L1817.56 1213.09 L1816.97 1213.09 L1816.39 1213.09 L1815.8 1213.09 L1815.21 1213.09 L1814.63 1213.09 L1814.04 1213.09 L1813.45 1213.09 L1812.87 1213.09 L1812.28 1213.09 L1811.69 1213.09 L1811.11 1213.09 L1810.52 1213.09 L1809.94 1213.09 L1809.35 1213.09 L1808.76 1213.09 L1808.18 1213.09 L1807.59 1213.09 L1807 1213.09 L1806.42 1213.09 L1805.83 1213.09 L1805.24 1213.09 L1804.66 1213.09 L1804.07 1213.09 L1803.48 1213.09 L1802.9 1213.09 L1802.31 1213.09 L1801.73 1213.09 L1801.14 1213.09 L1800.55 1213.09 L1799.97 1213.09 L1799.38 1213.09 L1798.79 1213.09 L1798.21 1213.09 L1797.62 1213.09 L1797.03 1213.09 L1796.45 1213.09 L1795.86 1213.09 L1795.27 1213.09 L1794.69 1213.09 L1794.1 1213.09 L1793.52 1213.09 L1792.93 1213.09 L1792.34 1213.09 L1791.76 1213.09 L1791.17 1213.09 L1790.58 1213.09 L1790 1213.09 L1789.41 1213.09 L1788.82 1213.09 L1788.24 1213.09 L1787.65 1213.09 L1787.06 1213.09 L1786.48 1213.09 L1785.89 1213.09 L1785.31 1213.09 L1784.72 1213.09 L1784.13 1213.09 L1783.55 1213.09 L1782.96 1213.09 L1782.37 1213.09 L1781.79 1213.09 L1781.2 1213.09 L1780.61 1213.09 L1780.03 1213.09 L1779.44 1213.09 L1778.86 1213.09 L1778.27 1213.09 L1777.68 1213.09 L1777.1 1213.09 L1776.51 1213.09 L1775.92 1213.09 L1775.34 1213.09 L1774.75 1213.09 L1774.16 1213.09 L1773.58 1213.09 L1772.99 1213.09 L1772.4 1213.09 L1771.82 1213.09 L1771.23 1213.09 L1770.65 1213.09 L1770.06 1213.09 L1769.47 1213.09 L1768.89 1213.09 L1768.3 1213.09 L1767.71 1213.09 L1767.13 1213.09 L1766.54 1213.09 L1765.95 1213.09 L1765.37 1213.09 L1764.78 1213.09 L1764.19 1213.09 L1763.61 1213.09 L1763.02 1213.09 L1762.44 1213.09 L1761.85 1213.09 L1761.26 1213.09 L1760.68 1213.09 L1760.09 1213.09 L1759.5 1213.09 L1758.92 1213.09 L1758.33 1213.09 L1757.74 1213.09 L1757.16 1213.09 L1756.57 1213.09 L1755.99 1213.09 L1755.4 1213.09 L1754.81 1213.09 L1754.23 1213.09 L1753.64 1213.09 L1753.05 1213.09 L1752.47 1213.09 L1751.88 1213.09 L1751.29 1213.09 L1750.71 1213.09 L1750.12 1213.09 L1749.53 1213.09 L1748.95 1213.09 L1748.36 1213.09 L1747.78 1213.09 L1747.19 1213.09 L1746.6 1213.09 L1746.02 1213.09 L1745.43 1213.09 L1744.84 1213.09 L1744.26 1213.09 L1743.67 1213.09 L1743.08 1213.09 L1742.5 1213.09 L1741.91 1213.09 L1741.32 1213.09 L1740.74 1213.09 L1740.15 1213.09 L1739.57 1213.09 L1738.98 1213.09 L1738.39 1213.09 L1737.81 1213.09 L1737.22 1213.09 L1736.63 1213.09 L1736.05 1213.09 L1735.46 1213.09 L1734.87 1213.09 L1734.29 1213.09 L1733.7 1213.09 L1733.11 1213.09 L1732.53 1213.09 L1731.94 1213.09 L1731.36 1213.09 L1730.77 1213.09 L1730.18 1213.09 L1729.6 1213.09 L1729.01 1213.09 L1728.42 1213.09 L1727.84 1213.09 L1727.25 1213.09 L1726.66 1213.09 L1726.08 1213.09 L1725.49 1213.09 L1724.91 1213.09 L1724.32 1213.09 L1723.73 1213.09 L1723.15 1213.09 L1722.56 1213.09 L1721.97 1213.09 L1721.39 1213.09 L1720.8 1213.09 L1720.21 1213.09 L1719.63 1213.09 L1719.04 1213.09 L1718.45 1213.09 L1717.87 1213.09 L1717.28 1213.09 L1716.7 1213.09 L1716.11 1213.09 L1715.52 1213.09 L1714.94 1213.09 L1714.35 1213.09 L1713.76 1213.09 L1713.18 1213.09 L1712.59 1213.09 L1712 1213.09 L1711.42 1213.09 L1710.83 1213.09 L1710.24 1213.09 L1709.66 1213.09 L1709.07 1213.09 L1708.49 1213.09 L1707.9 1213.09 L1707.31 1213.09 L1706.73 1213.09 L1706.14 1213.09 L1705.55 1213.09 L1704.97 1213.09 L1704.38 1213.09 L1703.79 1213.09 L1703.21 1213.09 L1702.62 1213.09 L1702.04 1213.09 L1701.45 1213.09 L1700.86 1213.09 L1700.28 1213.09 L1699.69 1213.09 L1699.1 1213.09 L1698.52 1213.09 L1697.93 1213.09 L1697.34 1213.09 L1696.76 1213.09 L1696.17 1213.09 L1695.58 1213.09 L1695 1213.09 L1694.41 1213.09 L1693.83 1213.09 L1693.24 1213.09 L1692.65 1213.09 L1692.07 1213.09 L1691.48 1213.09 L1690.89 1213.09 L1690.31 1213.09 L1689.72 1213.09 L1689.13 1213.09 L1688.55 1213.09 L1687.96 1213.09 L1687.37 1213.09 L1686.79 1213.09 L1686.2 1213.09 L1685.62 1213.09 L1685.03 1213.09 L1684.44 1213.09 L1683.86 1213.09 L1683.27 1213.09 L1682.68 1213.09 L1682.1 1213.09 L1681.51 1213.09 L1680.92 1213.09 L1680.34 1213.09 L1679.75 1213.09 L1679.17 1213.09 L1678.58 1213.09 L1677.99 1213.09 L1677.41 1213.09 L1676.82 1213.09 L1676.23 1213.09 L1675.65 1213.09 L1675.06 1213.09 L1674.47 1213.09 L1673.89 1213.09 L1673.3 1213.09 L1672.71 1213.09 L1672.13 1213.09 L1671.54 1213.09 L1670.96 1213.09 L1670.37 1213.09 L1669.78 1213.09 L1669.2 1213.09 L1668.61 1213.09 L1668.02 1213.09 L1667.44 1213.09 L1666.85 1213.09 L1666.26 1213.09 L1665.68 1213.09 L1665.09 1213.09 L1664.5 1213.09 L1663.92 1213.09 L1663.33 1213.09 L1662.75 1213.09 L1662.16 1213.09 L1661.57 1213.09 L1660.99 1213.09 L1660.4 1213.09 L1659.81 1213.09 L1659.23 1213.09 L1658.64 1213.09 L1658.05 1213.09 L1657.47 1213.09 L1656.88 1213.09 L1656.29 1213.09 L1655.71 1213.09 L1655.12 1213.09 L1654.54 1213.09 L1653.95 1213.09 L1653.36 1213.09 L1652.78 1213.09 L1652.19 1213.09 L1651.6 1213.09 L1651.02 1213.09 L1650.43 1213.09 L1649.84 1213.09 L1649.26 1213.09 L1648.67 1213.09 L1648.09 1213.09 L1647.5 1213.09 L1646.91 1213.09 L1646.33 1213.09 L1645.74 1213.09 L1645.15 1213.09 L1644.57 1213.09 L1643.98 1213.09 L1643.39 1213.09 L1642.81 1213.09 L1642.22 1213.09 L1641.63 1213.09 L1641.05 1213.09 L1640.46 1213.09 L1639.88 1213.09 L1639.29 1213.09 L1638.7 1213.09 L1638.12 1213.09 L1637.53 1213.09 L1636.94 1213.09 L1636.36 1213.09 L1635.77 1213.09 L1635.18 1213.09 L1634.6 1213.09 L1634.01 1213.09 L1633.42 1213.09 L1632.84 1213.09 L1632.25 1213.09 L1631.67 1213.09 L1631.08 1213.09 L1630.49 1213.09 L1629.91 1213.09 L1629.32 1213.09 L1628.73 1213.09 L1628.15 1213.09 L1627.56 1213.09 L1626.97 1213.09 L1626.39 1213.09 L1625.8 1213.09 L1625.22 1213.09 L1624.63 1213.09 L1624.04 1213.09 L1623.46 1213.09 L1622.87 1213.09 L1622.28 1213.09 L1621.7 1213.09 L1621.11 1213.09 L1620.52 1213.09 L1619.94 1213.09 L1619.35 1213.09 L1618.76 1213.09 L1618.18 1213.09 L1617.59 1213.09 L1617.01 1213.09 L1616.42 1213.09 L1615.83 1213.09 L1615.25 1213.09 L1614.66 1213.09 L1614.07 1213.09 L1613.49 1213.09 L1612.9 1213.09 L1612.31 1213.09 L1611.73 1213.09 L1611.14 1213.09 L1610.55 1213.09 L1609.97 1213.09 L1609.38 1213.09 L1608.8 1213.09 L1608.21 1213.09 L1607.62 1213.09 L1607.04 1213.09 L1606.45 1213.09 L1605.86 1213.09 L1605.28 1213.09 L1604.69 1213.09 L1604.1 1213.09 L1603.52 1213.09 L1602.93 1213.09 L1602.34 1213.09 L1601.76 1213.09 L1601.17 1213.09 L1600.59 1213.09 L1600 1213.09 L1599.41 1213.09 L1598.83 1213.09 L1598.24 1213.09 L1597.65 1213.09 L1597.07 1213.09 L1596.48 1213.09 L1595.89 1213.09 L1595.31 1213.09 L1594.72 1213.09 L1594.14 1213.09 L1593.55 1213.09 L1592.96 1213.09 L1592.38 1213.09 L1591.79 1213.09 L1591.2 1213.09 L1590.62 1213.09 L1590.03 1213.09 L1589.44 1213.09 L1588.86 1213.09 L1588.27 1213.09 L1587.68 1213.09 L1587.1 1213.09 L1586.51 1213.09 L1585.93 1213.09 L1585.34 1213.09 L1584.75 1213.09 L1584.17 1213.09 L1583.58 1213.09 L1582.99 1213.09 L1582.41 1213.09 L1581.82 1213.09 L1581.23 1213.09 L1580.65 1213.09 L1580.06 1213.09 L1579.47 1213.09 L1578.89 1213.09 L1578.3 1213.09 L1577.72 1213.09 L1577.13 1213.09 L1576.54 1213.09 L1575.96 1213.09 L1575.37 1213.09 L1574.78 1213.09 L1574.2 1213.09 L1573.61 1213.09 L1573.02 1213.09 L1572.44 1213.09 L1571.85 1213.09 L1571.27 1213.09 L1570.68 1213.09 L1570.09 1213.09 L1569.51 1213.09 L1568.92 1213.09 L1568.33 1213.09 L1567.75 1213.09 L1567.16 1213.09 L1566.57 1213.09 L1565.99 1213.09 L1565.4 1213.09 L1564.81 1213.09 L1564.23 1213.09 L1563.64 1213.09 L1563.06 1213.09 L1562.47 1213.09 L1561.88 1213.09 L1561.3 1213.09 L1560.71 1213.09 L1560.12 1213.09 L1559.54 1213.09 L1558.95 1213.09 L1558.36 1213.09 L1557.78 1213.09 L1557.19 1213.09 L1556.6 1213.09 L1556.02 1213.09 L1555.43 1213.09 L1554.85 1213.09 L1554.26 1213.09 L1553.67 1213.09 L1553.09 1213.09 L1552.5 1213.09 L1551.91 1213.09 L1551.33 1213.09 L1550.74 1213.09 L1550.15 1213.09 L1549.57 1213.09 L1548.98 1213.09 L1548.4 1213.09 L1547.81 1213.09 L1547.22 1213.09 L1546.64 1213.09 L1546.05 1213.09 L1545.46 1213.09 L1544.88 1213.09 L1544.29 1213.09 L1543.7 1213.09 L1543.12 1213.09 L1542.53 1213.09 L1541.94 1213.09 L1541.36 1213.09 L1540.77 1213.09 L1540.19 1213.09 L1539.6 1213.09 L1539.01 1213.09 L1538.43 1213.09 L1537.84 1213.09 L1537.25 1213.09 L1536.67 1213.09 L1536.08 1213.09 L1535.49 1213.09 L1534.91 1213.09 L1534.32 1213.09 L1533.73 1213.09 L1533.15 1213.09 L1532.56 1213.09 L1531.98 1213.09 L1531.39 1213.09 L1530.8 1213.09 L1530.22 1213.09 L1529.63 1213.09 L1529.04 1213.09 L1528.46 1213.09 L1527.87 1213.09 L1527.28 1213.09 L1526.7 1213.09 L1526.11 1213.09 L1525.52 1213.09 L1524.94 1213.09 L1524.35 1213.09 L1523.77 1213.09 L1523.18 1213.09 L1522.59 1213.09 L1522.01 1213.09 L1521.42 1213.09 L1520.83 1213.09 L1520.25 1213.09 L1519.66 1213.09 L1519.07 1213.09 L1518.49 1213.09 L1517.9 1213.09 L1517.32 1213.09 L1516.73 1213.09 L1516.14 1213.09 L1515.56 1213.09 L1514.97 1213.09 L1514.38 1213.09 L1513.8 1213.09 L1513.21 1213.09 L1512.62 1213.09 L1512.04 1213.09 L1511.45 1213.09 L1510.86 1213.09 L1510.28 1213.09 L1509.69 1213.09 L1509.11 1213.09 L1508.52 1213.09 L1507.93 1213.09 L1507.35 1213.09 L1506.76 1213.09 L1506.17 1213.09 L1505.59 1213.09 L1505 1213.09 L1504.41 1213.09 L1503.83 1213.09 L1503.24 1213.09 L1502.65 1213.09 L1502.07 1213.09 L1501.48 1213.09 L1500.9 1213.09 L1500.31 1213.09 L1499.72 1213.09 L1499.14 1213.09 L1498.55 1213.09 L1497.96 1213.09 L1497.38 1213.09 L1496.79 1213.09 L1496.2 1213.09 L1495.62 1213.09 L1495.03 1213.09 L1494.45 1213.09 L1493.86 1213.09 L1493.27 1213.09 L1492.69 1213.09 L1492.1 1213.09 L1491.51 1213.09 L1490.93 1213.09 L1490.34 1213.09 L1489.75 1213.09 L1489.17 1213.09 L1488.58 1213.09 L1487.99 1213.09 L1487.41 1213.09 L1486.82 1213.09 L1486.24 1213.09 L1485.65 1213.09 L1485.06 1213.09 L1484.48 1213.09 L1483.89 1213.09 L1483.3 1213.09 L1482.72 1213.09 L1482.13 1213.09 L1481.54 1213.09 L1480.96 1213.09 L1480.37 1213.09 L1479.78 1213.09 L1479.2 1213.09 L1478.61 1213.09 L1478.03 1213.09 L1477.44 1213.09 L1476.85 1213.09 L1476.27 1213.09 L1475.68 1213.09 L1475.09 1213.09 L1474.51 1213.09 L1473.92 1213.09 L1473.33 1213.09 L1472.75 1213.09 L1472.16 1213.09 L1471.57 1213.09 L1470.99 1213.09 L1470.4 1213.09 L1469.82 1213.09 L1469.23 1213.09 L1468.64 1213.09 L1468.06 1213.09 L1467.47 1213.09 L1466.88 1213.09 L1466.3 1213.09 L1465.71 1213.09 L1465.12 1213.09 L1464.54 1213.09 L1463.95 1213.09 L1463.37 1213.09 L1462.78 1213.09 L1462.19 1213.09 L1461.61 1213.09 L1461.02 1213.09 L1460.43 1213.09 L1459.85 1213.09 L1459.26 1213.09 L1458.67 1213.09 L1458.09 1213.09 L1457.5 1213.09 L1456.91 1213.09 L1456.33 1213.09 L1455.74 1213.09 L1455.16 1213.09 L1454.57 1213.09 L1453.98 1213.09 L1453.4 1213.09 L1452.81 1213.09 L1452.22 1213.09 L1451.64 1213.09 L1451.05 1213.09 L1450.46 1213.09 L1449.88 1213.09 L1449.29 1213.09 L1448.7 1213.09 L1448.12 1213.09 L1447.53 1213.09 L1446.95 1213.09 L1446.36 1213.09 L1445.77 1213.09 L1445.19 1213.09 L1444.6 1213.09 L1444.01 1213.09 L1443.43 1213.09 L1442.84 1213.09 L1442.25 1213.09 L1441.67 1213.09 L1441.08 1213.09 L1440.5 1213.09 L1439.91 1213.09 L1439.32 1213.09 L1438.74 1213.09 L1438.15 1213.09 L1437.56 1213.09 L1436.98 1213.09 L1436.39 1213.09 L1435.8 1213.09 L1435.22 1213.09 L1434.63 1213.09 L1434.04 1213.09 L1433.46 1213.09 L1432.87 1213.09 L1432.29 1213.09 L1431.7 1213.09 L1431.11 1213.09 L1430.53 1213.09 L1429.94 1213.09 L1429.35 1213.09 L1428.77 1213.09 L1428.18 1213.09 L1427.59 1213.09 L1427.01 1213.09 L1426.42 1213.09 L1425.83 1213.09 L1425.25 1213.09 L1424.66 1213.09 L1424.08 1213.09 L1423.49 1213.09 L1422.9 1213.09 L1422.32 1213.09 L1421.73 1213.09 L1421.14 1213.09 L1420.56 1213.09 L1419.97 1213.09 L1419.38 1213.09 L1418.8 1213.09 L1418.21 1213.09 L1417.63 1213.09 L1417.04 1213.09 L1416.45 1213.09 L1415.87 1213.09 L1415.28 1213.09 L1414.69 1213.09 L1414.11 1213.09 L1413.52 1213.09 L1412.93 1213.09 L1412.35 1213.09 L1411.76 1213.09 L1411.17 1213.09 L1410.59 1213.09 L1410 1213.09 L1409.42 1213.09 L1408.83 1213.09 L1408.24 1213.09 L1407.66 1213.09 L1407.07 1213.09 L1406.48 1213.09 L1405.9 1213.09 L1405.31 1213.09 L1404.72 1213.09 L1404.14 1213.09 L1403.55 1213.09 L1402.96 1213.09 L1402.38 1213.09 L1401.79 1213.09 L1401.21 1213.09 L1400.62 1213.09 L1400.03 1213.09 L1399.45 1213.09 L1398.86 1213.09 L1398.27 1213.09 L1397.69 1213.09 L1397.1 1213.09 L1396.51 1213.09 L1395.93 1213.09 L1395.34 1213.09 L1394.75 1213.09 L1394.17 1213.09 L1393.58 1213.09 L1393 1213.09 L1392.41 1213.09 L1391.82 1213.09 L1391.24 1213.09 L1390.65 1213.09 L1390.06 1213.09 L1389.48 1213.09 L1388.89 1213.09 L1388.3 1213.09 L1387.72 1213.09 L1387.13 1213.09 L1386.55 1213.09 L1385.96 1213.09 L1385.37 1213.09 L1384.79 1213.09 L1384.2 1213.09 L1383.61 1213.09 L1383.03 1213.09 L1382.44 1213.09 L1381.85 1213.09 L1381.27 1213.09 L1380.68 1213.09 L1380.09 1213.09 L1379.51 1213.09 L1378.92 1213.09 L1378.34 1213.09 L1377.75 1213.09 L1377.16 1213.09 L1376.58 1213.09 L1375.99 1213.09 L1375.4 1213.09 L1374.82 1213.09 L1374.23 1213.09 L1373.64 1213.09 L1373.06 1213.09 L1372.47 1213.09 L1371.88 1213.09 L1371.3 1213.09 L1370.71 1213.09 L1370.13 1213.09 L1369.54 1213.09 L1368.95 1213.09 L1368.37 1213.09 L1367.78 1213.09 L1367.19 1213.09 L1366.61 1213.09 L1366.02 1213.09 L1365.43 1213.09 L1364.85 1213.09 L1364.26 1213.09 L1363.68 1213.09 L1363.09 1213.09 L1362.5 1213.09 L1361.92 1213.09 L1361.33 1213.09 L1360.74 1213.09 L1360.16 1213.09 L1359.57 1213.09 L1358.98 1213.09 L1358.4 1213.09 L1357.81 1213.09 L1357.22 1213.09 L1356.64 1213.09 L1356.05 1213.09 L1355.47 1213.09 L1354.88 1213.09 L1354.29 1213.09 L1353.71 1213.09 L1353.12 1213.09 L1352.53 1213.09 L1351.95 1213.09 L1351.36 1213.09 L1350.77 1213.09 L1350.19 1213.09 L1349.6 1213.09 L1349.01 1213.09 L1348.43 1213.09 L1347.84 1213.09 L1347.26 1213.09 L1346.67 1213.09 L1346.08 1213.09 L1345.5 1213.09 L1344.91 1213.09 L1344.32 1213.09 L1343.74 1213.09 L1343.15 1213.09 L1342.56 1213.09 L1341.98 1213.09 L1341.39 1213.09 L1340.8 1213.09 L1340.22 1213.09 L1339.63 1213.09 L1339.05 1213.09 L1338.46 1213.09 L1337.87 1213.09 L1337.29 1213.09 L1336.7 1213.09 L1336.11 1213.09 L1335.53 1213.09 L1334.94 1213.09 L1334.35 1213.09 L1333.77 1213.09 L1333.18 1213.09 L1332.6 1213.09 L1332.01 1213.09 L1331.42 1213.09 L1330.84 1213.09 L1330.25 1213.09 L1329.66 1213.09 L1329.08 1213.09 L1328.49 1213.09 L1327.9 1213.09 L1327.32 1213.09 L1326.73 1213.09 L1326.14 1213.09 L1325.56 1213.09 L1324.97 1213.09 L1324.39 1213.09 L1323.8 1213.09 L1323.21 1213.09 L1322.63 1213.09 L1322.04 1213.09 L1321.45 1213.09 L1320.87 1213.09 L1320.28 1213.09 L1319.69 1213.09 L1319.11 1213.09 L1318.52 1213.09 L1317.93 1213.09 L1317.35 1213.09 L1316.76 1213.09 L1316.18 1213.09 L1315.59 1213.09 L1315 1213.09 L1314.42 1213.09 L1313.83 1213.09 L1313.24 1213.09 L1312.66 1213.09 L1312.07 1213.09 L1311.48 1213.09 L1310.9 1213.09 L1310.31 1213.09 L1309.73 1213.09 L1309.14 1213.09 L1308.55 1213.09 L1307.97 1213.09 L1307.38 1213.09 L1306.79 1213.09 L1306.21 1213.09 L1305.62 1213.09 L1305.03 1213.09 L1304.45 1213.09 L1303.86 1213.09 L1303.27 1213.09 L1302.69 1213.09 L1302.1 1213.09 L1301.52 1213.09 L1300.93 1213.09 L1300.34 1213.09 L1299.76 1213.09 L1299.17 1213.09 L1298.58 1213.09 L1298 1213.09 L1297.41 1213.09 L1296.82 1213.09 L1296.24 1213.09 L1295.65 1213.09 L1295.06 1213.09 L1294.48 1213.09 L1293.89 1213.09 L1293.31 1213.09 L1292.72 1213.09 L1292.13 1213.09 L1291.55 1213.09 L1290.96 1213.09 L1290.37 1213.09 L1289.79 1213.09 L1289.2 1213.09 L1288.61 1213.09 L1288.03 1213.09 L1287.44 1213.09 L1286.86 1213.09 L1286.27 1213.09 L1285.68 1213.09 L1285.1 1213.09 L1284.51 1213.09 L1283.92 1213.09 L1283.34 1213.09 L1282.75 1213.09 L1282.16 1213.09 L1281.58 1213.09 L1280.99 1213.09 L1280.4 1213.09 L1279.82 1213.09 L1279.23 1213.09 L1278.65 1213.09 L1278.06 1213.09 L1277.47 1213.09 L1276.89 1213.09 L1276.3 1213.09 L1275.71 1213.09 L1275.13 1213.09 L1274.54 1213.09 L1273.95 1213.09 L1273.37 1213.09 L1272.78 1213.09 L1272.19 1213.09 L1271.61 1213.09 L1271.02 1213.09 L1270.44 1213.09 L1269.85 1213.09 L1269.26 1213.09 L1268.68 1213.09 L1268.09 1213.09 L1267.5 1213.09 L1266.92 1213.09 L1266.33 1213.09 L1265.74 1213.09 L1265.16 1213.09 L1264.57 1213.09 L1263.98 1213.09 L1263.4 1213.09 L1262.81 1213.09 L1262.23 1213.09 L1261.64 1213.09 L1261.05 1213.09 L1260.47 1213.09 L1259.88 1213.09 L1259.29 1213.09 L1258.71 1213.09 L1258.12 1213.09 L1257.53 1213.09 L1256.95 1213.09 L1256.36 1213.09 L1255.78 1213.09 L1255.19 1213.09 L1254.6 1213.09 L1254.02 1213.09 L1253.43 1213.09 L1252.84 1213.09 L1252.26 1213.09 L1251.67 1213.09 L1251.08 1213.09 L1250.5 1213.09 L1249.91 1213.09 L1249.32 1213.09 L1248.74 1213.09 L1248.15 1213.09 L1247.57 1213.09 L1246.98 1213.09 L1246.39 1213.09 L1245.81 1213.09 L1245.22 1213.09 L1244.63 1213.09 L1244.05 1213.09 L1243.46 1213.09 L1242.87 1213.09 L1242.29 1213.09 L1241.7 1213.09 L1241.11 1213.09 L1240.53 1213.09 L1239.94 1213.09 L1239.36 1213.09 L1238.77 1213.09 L1238.18 1213.09 L1237.6 1213.09 L1237.01 1213.09 L1236.42 1213.09 L1235.84 1213.09 L1235.25 1213.09 L1234.66 1213.09 L1234.08 1213.09 L1233.49 1213.09 L1232.91 1213.09 L1232.32 1213.09 L1231.73 1213.09 L1231.15 1213.09 L1230.56 1213.09 L1229.97 1213.09 L1229.39 1213.09 L1228.8 1213.09 L1228.21 1213.09 L1227.63 1213.09 L1227.04 1213.09 L1226.45 1213.09 L1225.87 1213.09 L1225.28 1213.09 L1224.7 1213.09 L1224.11 1213.09 L1223.52 1213.09 L1222.94 1213.09 L1222.35 1213.09 L1221.76 1213.09 L1221.18 1213.09 L1220.59 1213.09 L1220 1213.09 L1219.42 1213.09 L1218.83 1213.09 L1218.24 1213.09 L1217.66 1213.09 L1217.07 1213.09 L1216.49 1213.09 L1215.9 1213.09 L1215.31 1213.09 L1214.73 1213.09 L1214.14 1213.09 L1213.55 1213.09 L1212.97 1213.09 L1212.38 1213.09 L1211.79 1213.09 L1211.21 1213.09 L1210.62 1213.09 L1210.03 1213.09 L1209.45 1213.09 L1208.86 1213.09 L1208.28 1213.09 L1207.69 1213.09 L1207.1 1213.09 L1206.52 1213.09 L1205.93 1213.09 L1205.34 1213.09 L1204.76 1213.09 L1204.17 1213.09 L1203.58 1213.09 L1203 1213.09 L1202.41 1213.09 L1201.83 1213.09 L1201.24 1213.09 L1200.65 1213.09 L1200.07 1213.09 L1199.48 1213.09 L1198.89 1213.09 L1198.31 1213.09 L1197.72 1213.09 L1197.13 1213.09 L1196.55 1213.09 L1195.96 1213.09 L1195.37 1213.09 L1194.79 1213.09 L1194.2 1213.09 L1193.62 1213.09 L1193.03 1213.09 L1192.44 1213.09 L1191.86 1213.09 L1191.27 1213.09 L1190.68 1213.09 L1190.1 1213.09 L1189.51 1213.09 L1188.92 1213.09 L1188.34 1213.09 L1187.75 1213.09 L1187.16 1213.09 L1186.58 1213.09 L1185.99 1213.09 L1185.41 1213.09 L1184.82 1213.09 L1184.23 1213.09 L1183.65 1213.09 L1183.06 1213.09 L1182.47 1213.09 L1181.89 1213.09 L1181.3 1213.09 L1180.71 1213.09 L1180.13 1213.09 L1179.54 1213.09 L1178.96 1213.09 L1178.37 1213.09 L1177.78 1213.09 L1177.2 1213.09 L1176.61 1213.09 L1176.02 1213.09 L1175.44 1213.09 L1174.85 1213.09 L1174.26 1213.09 L1173.68 1213.09 L1173.09 1213.09 L1172.5 1213.09 L1171.92 1213.09 L1171.33 1213.09 L1170.75 1213.09 L1170.16 1213.09 L1169.57 1213.09 L1168.99 1213.09 L1168.4 1213.09 L1167.81 1213.09 L1167.23 1213.09 L1166.64 1213.09 L1166.05 1213.09 L1165.47 1213.09 L1164.88 1213.09 L1164.29 1213.09 L1163.71 1213.09 L1163.12 1213.09 L1162.54 1213.09 L1161.95 1213.09 L1161.36 1213.09 L1160.78 1213.09 L1160.19 1213.09 L1159.6 1213.09 L1159.02 1213.09 L1158.43 1213.09 L1157.84 1213.09 L1157.26 1213.09 L1156.67 1213.09 L1156.09 1213.09 L1155.5 1213.09 L1154.91 1213.09 L1154.33 1213.09 L1153.74 1213.09 L1153.15 1213.09 L1152.57 1213.09 L1151.98 1213.09 L1151.39 1213.09 L1150.81 1213.09 L1150.22 1213.09 L1149.63 1213.09 L1149.05 1213.09 L1148.46 1213.09 L1147.88 1213.09 L1147.29 1213.09 L1146.7 1213.09 L1146.12 1213.09 L1145.53 1213.09 L1144.94 1213.09 L1144.36 1213.09 L1143.77 1213.09 L1143.18 1213.09 L1142.6 1213.09 L1142.01 1213.09 L1141.42 1213.09 L1140.84 1213.09 L1140.25 1213.09 L1139.67 1213.09 L1139.08 1213.09 L1138.49 1213.09 L1137.91 1213.09 L1137.32 1213.09 L1136.73 1213.09 L1136.15 1213.09 L1135.56 1213.09 L1134.97 1213.09 L1134.39 1213.09 L1133.8 1213.09 L1133.21 1213.09 L1132.63 1213.09 L1132.04 1213.09 L1131.46 1213.09 L1130.87 1213.09 L1130.28 1213.09 L1129.7 1213.09 L1129.11 1213.09 L1128.52 1213.09 L1127.94 1213.09 L1127.35 1213.09 L1126.76 1213.09 L1126.18 1213.09 L1125.59 1213.09 L1125.01 1213.09 L1124.42 1213.09 L1123.83 1213.09 L1123.25 1213.09 L1122.66 1213.09 L1122.07 1213.09 L1121.49 1213.09 L1120.9 1213.09 L1120.31 1213.09 L1119.73 1213.09 L1119.14 1213.09 L1118.55 1213.09 L1117.97 1213.09 L1117.38 1213.09 L1116.8 1213.09 L1116.21 1213.09 L1115.62 1213.09 L1115.04 1213.09 L1114.45 1213.09 L1113.86 1213.09 L1113.28 1213.09 L1112.69 1213.09 L1112.1 1213.09 L1111.52 1213.09 L1110.93 1213.09 L1110.34 1213.09 L1109.76 1213.09 L1109.17 1213.09 L1108.59 1213.09 L1108 1213.09 L1107.41 1213.09 L1106.83 1213.09 L1106.24 1213.09 L1105.65 1213.09 L1105.07 1213.09 L1104.48 1213.09 L1103.89 1213.09 L1103.31 1213.09 L1102.72 1213.09 L1102.14 1213.09 L1101.55 1213.09 L1100.96 1213.09 L1100.38 1213.09 L1099.79 1213.09 L1099.2 1213.09 L1098.62 1213.09 L1098.03 1213.09 L1097.44 1213.09 L1096.86 1213.09 L1096.27 1213.09 L1095.68 1213.09 L1095.1 1213.09 L1094.51 1213.09 L1093.93 1213.09 L1093.34 1213.09 L1092.75 1213.09 L1092.17 1213.09 L1091.58 1213.09 L1090.99 1213.09 L1090.41 1213.09 L1089.82 1213.09 L1089.23 1213.09 L1088.65 1213.09 L1088.06 1213.09 L1087.47 1213.09 L1086.89 1213.09 L1086.3 1213.09 L1085.72 1213.09 L1085.13 1213.09 L1084.54 1213.09 L1083.96 1213.09 L1083.37 1213.09 L1082.78 1213.09 L1082.2 1213.09 L1081.61 1213.09 L1081.02 1213.09 L1080.44 1213.09 L1079.85 1213.09 L1079.26 1213.09 L1078.68 1213.09 L1078.09 1213.09 L1077.51 1213.09 L1076.92 1213.09 L1076.33 1213.09 L1075.75 1213.09 L1075.16 1213.09 L1074.57 1213.09 L1073.99 1213.09 L1073.4 1213.09 L1072.81 1213.09 L1072.23 1213.09 L1071.64 1213.09 L1071.06 1213.09 L1070.47 1213.09 L1069.88 1213.09 L1069.3 1213.09 L1068.71 1213.09 L1068.12 1213.09 L1067.54 1213.09 L1066.95 1213.09 L1066.36 1213.09 L1065.78 1213.09 L1065.19 1213.09 L1064.6 1213.09 L1064.02 1213.09 L1063.43 1213.09 L1062.85 1213.09 L1062.26 1213.09 L1061.67 1213.09 L1061.09 1213.09 L1060.5 1213.09 L1059.91 1213.09 L1059.33 1213.09 L1058.74 1213.09 L1058.15 1213.09 L1057.57 1213.09 L1056.98 1213.09 L1056.39 1213.09 L1055.81 1213.09 L1055.22 1213.09 L1054.64 1213.09 L1054.05 1213.09 L1053.46 1213.09 L1052.88 1213.09 L1052.29 1213.09 L1051.7 1213.09 L1051.12 1213.09 L1050.53 1213.09 L1049.94 1213.09 L1049.36 1213.09 L1048.77 1213.09 L1048.19 1213.09 L1047.6 1213.09 L1047.01 1213.09 L1046.43 1213.09 L1045.84 1213.09 L1045.25 1213.09 L1044.67 1213.09 L1044.08 1213.09 L1043.49 1213.09 L1042.91 1213.09 L1042.32 1213.09 L1041.73 1213.09 L1041.15 1213.09 L1040.56 1213.09 L1039.98 1213.09 L1039.39 1213.09 L1038.8 1213.09 L1038.22 1213.09 L1037.63 1213.09 L1037.04 1213.09 L1036.46 1213.09 L1035.87 1213.09 L1035.28 1213.09 L1034.7 1213.09 L1034.11 1213.09 L1033.52 1213.09 L1032.94 1213.09 L1032.35 1213.09 L1031.77 1213.09 L1031.18 1213.09 L1030.59 1213.09 L1030.01 1213.09 L1029.42 1213.09 L1028.83 1213.09 L1028.25 1213.09 L1027.66 1213.09 L1027.07 1213.09 L1026.49 1213.09 L1025.9 1213.09 L1025.32 1213.09 L1024.73 1213.09 L1024.14 1213.09 L1023.56 1213.09 L1022.97 1213.09 L1022.38 1213.09 L1021.8 1213.09 L1021.21 1213.09 L1020.62 1213.09 L1020.04 1213.09 L1019.45 1213.09 L1018.86 1213.09 L1018.28 1213.09 L1017.69 1213.09 L1017.11 1213.09 L1016.52 1213.09 L1015.93 1213.09 L1015.35 1213.09 L1014.76 1213.09 L1014.17 1213.09 L1013.59 1213.09 L1013 1213.09 L1012.41 1213.09 L1011.83 1213.09 L1011.24 1213.09 L1010.65 1213.09 L1010.07 1213.09 L1009.48 1213.09 L1008.9 1213.09 L1008.31 1213.09 L1007.72 1213.09 L1007.14 1213.09 L1006.55 1213.09 L1005.96 1213.09 L1005.38 1213.09 L1004.79 1213.09 L1004.2 1213.09 L1003.62 1213.09 L1003.03 1213.09 L1002.44 1213.09 L1001.86 1213.09 L1001.27 1213.09 L1000.69 1213.09 L1000.1 1213.09 L999.513 1213.09 L998.926 1213.09 L998.34 1213.09 L997.754 1213.09 L997.167 1213.09 L996.581 1213.09 L995.994 1213.09 L995.408 1213.09 L994.822 1213.09 L994.235 1213.09 L993.649 1213.09 L993.062 1213.09 L992.476 1213.09 L991.889 1213.09 L991.303 1213.09 L990.717 1213.09 L990.13 1213.09 L989.544 1213.09 L988.957 1213.09 L988.371 1213.09 L987.785 1213.09 L987.198 1213.09 L986.612 1213.09 L986.025 1213.09  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.46 986.612,1213.46 987.198,1213.46 987.785,1213.46 988.371,1213.46 988.957,1213.46 989.544,1213.46 990.13,1213.46 990.717,1213.46 991.303,1213.46 991.889,1213.46 992.476,1213.46 993.062,1213.46 993.649,1213.46 994.235,1213.46 994.822,1213.46 995.408,1213.46 995.994,1213.46 996.581,1213.46 997.167,1213.46 997.754,1213.46 998.34,1213.46 998.926,1213.46 999.513,1213.46 1000.1,1213.46 1000.69,1213.46 1001.27,1213.46 1001.86,1213.46 1002.44,1213.46 1003.03,1213.46 1003.62,1213.46 1004.2,1213.46 1004.79,1213.46 1005.38,1213.46 1005.96,1213.46 1006.55,1213.46 1007.14,1213.46 1007.72,1213.46 1008.31,1213.46 1008.9,1213.46 1009.48,1213.46 1010.07,1213.46 1010.65,1213.46 1011.24,1213.46 1011.83,1213.46 1012.41,1213.46 1013,1213.46 1013.59,1213.46 1014.17,1213.46 1014.76,1213.46 1015.35,1213.46 1015.93,1213.46 1016.52,1213.46 1017.11,1213.46 1017.69,1213.46 1018.28,1213.46 1018.86,1213.46 1019.45,1213.46 1020.04,1213.46 1020.62,1213.46 1021.21,1213.46 1021.8,1213.46 1022.38,1213.46 1022.97,1213.46 1023.56,1213.46 1024.14,1213.46 1024.73,1213.46 1025.32,1213.46 1025.9,1213.46 1026.49,1213.46 1027.07,1213.46 1027.66,1213.46 1028.25,1213.46 1028.83,1213.46 1029.42,1213.46 1030.01,1213.46 1030.59,1213.46 1031.18,1213.46 1031.77,1213.46 1032.35,1213.46 1032.94,1213.46 1033.52,1213.46 1034.11,1213.46 1034.7,1213.46 1035.28,1213.46 1035.87,1213.46 1036.46,1213.46 1037.04,1213.46 1037.63,1213.46 1038.22,1213.46 1038.8,1213.46 1039.39,1213.46 1039.98,1213.46 1040.56,1213.46 1041.15,1213.46 1041.73,1213.46 1042.32,1213.46 1042.91,1213.46 1043.49,1213.46 1044.08,1213.46 1044.67,1213.46 1045.25,1213.46 1045.84,1213.46 1046.43,1213.46 1047.01,1213.46 1047.6,1213.46 1048.19,1213.46 1048.77,1213.46 1049.36,1213.46 1049.94,1213.46 1050.53,1213.46 1051.12,1213.46 1051.7,1213.46 1052.29,1213.46 1052.88,1213.46 1053.46,1213.46 1054.05,1213.46 1054.64,1213.46 1055.22,1213.46 1055.81,1213.46 1056.39,1213.46 1056.98,1213.46 1057.57,1213.46 1058.15,1213.46 1058.74,1213.46 1059.33,1213.46 1059.91,1213.46 1060.5,1213.46 1061.09,1213.46 1061.67,1213.46 1062.26,1213.46 1062.85,1213.46 1063.43,1213.46 1064.02,1213.46 1064.6,1213.46 1065.19,1213.46 1065.78,1213.46 1066.36,1213.46 1066.95,1213.46 1067.54,1213.46 1068.12,1213.46 1068.71,1213.46 1069.3,1213.46 1069.88,1213.46 1070.47,1213.46 1071.06,1213.46 1071.64,1213.46 1072.23,1213.46 1072.81,1213.46 1073.4,1213.46 1073.99,1213.46 1074.57,1213.46 1075.16,1213.46 1075.75,1213.46 1076.33,1213.46 1076.92,1213.46 1077.51,1213.46 1078.09,1213.46 1078.68,1213.46 1079.26,1213.46 1079.85,1213.46 1080.44,1213.46 1081.02,1213.46 1081.61,1213.46 1082.2,1213.46 1082.78,1213.46 1083.37,1213.46 1083.96,1213.46 1084.54,1213.46 1085.13,1213.46 1085.72,1213.46 1086.3,1213.46 1086.89,1213.46 1087.47,1213.46 1088.06,1213.46 1088.65,1213.46 1089.23,1213.46 1089.82,1213.46 1090.41,1213.46 1090.99,1213.46 1091.58,1213.46 1092.17,1213.46 1092.75,1213.46 1093.34,1213.46 1093.93,1213.46 1094.51,1213.46 1095.1,1213.46 1095.68,1213.46 1096.27,1213.46 1096.86,1213.46 1097.44,1213.46 1098.03,1213.46 1098.62,1213.46 1099.2,1213.46 1099.79,1213.46 1100.38,1213.46 1100.96,1213.46 1101.55,1213.46 1102.14,1213.46 1102.72,1213.46 1103.31,1213.46 1103.89,1213.46 1104.48,1213.46 1105.07,1213.46 1105.65,1213.46 1106.24,1213.46 1106.83,1213.46 1107.41,1213.46 1108,1213.46 1108.59,1213.46 1109.17,1213.46 1109.76,1213.46 1110.34,1213.46 1110.93,1213.46 1111.52,1213.46 1112.1,1213.46 1112.69,1213.46 1113.28,1213.46 1113.86,1213.46 1114.45,1213.46 1115.04,1213.46 1115.62,1213.46 1116.21,1213.46 1116.8,1213.46 1117.38,1213.46 1117.97,1213.46 1118.55,1213.46 1119.14,1213.46 1119.73,1213.46 1120.31,1213.46 1120.9,1213.46 1121.49,1213.46 1122.07,1213.46 1122.66,1213.46 1123.25,1213.46 1123.83,1213.46 1124.42,1213.46 1125.01,1213.46 1125.59,1213.46 1126.18,1213.46 1126.76,1213.46 1127.35,1213.46 1127.94,1213.46 1128.52,1213.46 1129.11,1213.46 1129.7,1213.46 1130.28,1213.46 1130.87,1213.46 1131.46,1213.46 1132.04,1213.46 1132.63,1213.46 1133.21,1213.46 1133.8,1213.46 1134.39,1213.46 1134.97,1213.46 1135.56,1213.46 1136.15,1213.46 1136.73,1213.46 1137.32,1213.46 1137.91,1213.46 1138.49,1213.46 1139.08,1213.46 1139.67,1213.46 1140.25,1213.46 1140.84,1213.46 1141.42,1213.46 1142.01,1213.46 1142.6,1213.46 1143.18,1213.46 1143.77,1213.46 1144.36,1213.46 1144.94,1213.46 1145.53,1213.46 1146.12,1213.46 1146.7,1213.46 1147.29,1213.46 1147.88,1213.46 1148.46,1213.46 1149.05,1213.46 1149.63,1213.46 1150.22,1213.46 1150.81,1213.46 1151.39,1213.46 1151.98,1213.46 1152.57,1213.46 1153.15,1213.46 1153.74,1213.46 1154.33,1213.46 1154.91,1213.46 1155.5,1213.46 1156.09,1213.46 1156.67,1213.46 1157.26,1213.46 1157.84,1213.46 1158.43,1213.46 1159.02,1213.46 1159.6,1213.46 1160.19,1213.46 1160.78,1213.46 1161.36,1213.46 1161.95,1213.46 1162.54,1213.46 1163.12,1213.46 1163.71,1213.46 1164.29,1213.46 1164.88,1213.46 1165.47,1213.46 1166.05,1213.46 1166.64,1213.46 1167.23,1213.46 1167.81,1213.46 1168.4,1213.46 1168.99,1213.46 1169.57,1213.46 1170.16,1213.46 1170.75,1213.46 1171.33,1213.46 1171.92,1213.46 1172.5,1213.46 1173.09,1213.46 1173.68,1213.46 1174.26,1213.46 1174.85,1213.46 1175.44,1213.46 1176.02,1213.46 1176.61,1213.46 1177.2,1213.46 1177.78,1213.46 1178.37,1213.46 1178.96,1213.46 1179.54,1213.46 1180.13,1213.46 1180.71,1213.46 1181.3,1213.46 1181.89,1213.46 1182.47,1213.46 1183.06,1213.46 1183.65,1213.46 1184.23,1213.46 1184.82,1213.46 1185.41,1213.46 1185.99,1213.46 1186.58,1213.46 1187.16,1213.46 1187.75,1213.46 1188.34,1213.46 1188.92,1213.46 1189.51,1213.46 1190.1,1213.46 1190.68,1213.46 1191.27,1213.46 1191.86,1213.46 1192.44,1213.46 1193.03,1213.46 1193.62,1213.46 1194.2,1213.46 1194.79,1213.46 1195.37,1213.46 1195.96,1213.46 1196.55,1213.46 1197.13,1213.46 1197.72,1213.46 1198.31,1213.46 1198.89,1213.46 1199.48,1213.46 1200.07,1213.46 1200.65,1213.46 1201.24,1213.46 1201.83,1213.46 1202.41,1213.46 1203,1213.46 1203.58,1213.46 1204.17,1213.46 1204.76,1213.46 1205.34,1213.46 1205.93,1213.46 1206.52,1213.46 1207.1,1213.46 1207.69,1213.46 1208.28,1213.46 1208.86,1213.46 1209.45,1213.46 1210.03,1213.46 1210.62,1213.46 1211.21,1213.46 1211.79,1213.46 1212.38,1213.46 1212.97,1213.46 1213.55,1213.46 1214.14,1213.46 1214.73,1213.46 1215.31,1213.46 1215.9,1213.46 1216.49,1213.46 1217.07,1213.46 1217.66,1213.46 1218.24,1213.46 1218.83,1213.46 1219.42,1213.46 1220,1213.46 1220.59,1213.46 1221.18,1213.46 1221.76,1213.46 1222.35,1213.46 1222.94,1213.46 1223.52,1213.46 1224.11,1213.46 1224.7,1213.46 1225.28,1213.46 1225.87,1213.46 1226.45,1213.46 1227.04,1213.46 1227.63,1213.46 1228.21,1213.46 1228.8,1213.46 1229.39,1213.46 1229.97,1213.46 1230.56,1213.46 1231.15,1213.46 1231.73,1213.46 1232.32,1213.46 1232.91,1213.46 1233.49,1213.46 1234.08,1213.46 1234.66,1213.46 1235.25,1213.46 1235.84,1213.46 1236.42,1213.46 1237.01,1213.46 1237.6,1213.46 1238.18,1213.46 1238.77,1213.46 1239.36,1213.46 1239.94,1213.46 1240.53,1213.46 1241.11,1213.46 1241.7,1213.46 1242.29,1213.46 1242.87,1213.46 1243.46,1213.46 1244.05,1213.46 1244.63,1213.46 1245.22,1213.46 1245.81,1213.46 1246.39,1213.46 1246.98,1213.46 1247.57,1213.46 1248.15,1213.46 1248.74,1213.46 1249.32,1213.46 1249.91,1213.46 1250.5,1213.46 1251.08,1213.46 1251.67,1213.46 1252.26,1213.46 1252.84,1213.46 1253.43,1213.46 1254.02,1213.46 1254.6,1213.46 1255.19,1213.46 1255.78,1213.46 1256.36,1213.46 1256.95,1213.46 1257.53,1213.46 1258.12,1213.46 1258.71,1213.46 1259.29,1213.46 1259.88,1213.46 1260.47,1213.46 1261.05,1213.46 1261.64,1213.46 1262.23,1213.46 1262.81,1213.46 1263.4,1213.46 1263.98,1213.46 1264.57,1213.46 1265.16,1213.46 1265.74,1213.46 1266.33,1213.46 1266.92,1213.46 1267.5,1213.46 1268.09,1213.46 1268.68,1213.46 1269.26,1213.46 1269.85,1213.46 1270.44,1213.46 1271.02,1213.46 1271.61,1213.46 1272.19,1213.46 1272.78,1213.46 1273.37,1213.46 1273.95,1213.46 1274.54,1213.46 1275.13,1213.46 1275.71,1213.46 1276.3,1213.46 1276.89,1213.46 1277.47,1213.46 1278.06,1213.46 1278.65,1213.46 1279.23,1213.46 1279.82,1213.46 1280.4,1213.46 1280.99,1213.46 1281.58,1213.46 1282.16,1213.46 1282.75,1213.46 1283.34,1213.46 1283.92,1213.46 1284.51,1213.46 1285.1,1213.46 1285.68,1213.46 1286.27,1213.46 1286.86,1213.46 1287.44,1213.46 1288.03,1213.46 1288.61,1213.46 1289.2,1213.46 1289.79,1213.46 1290.37,1213.46 1290.96,1213.46 1291.55,1213.46 1292.13,1213.46 1292.72,1213.46 1293.31,1213.46 1293.89,1213.46 1294.48,1213.46 1295.06,1213.46 1295.65,1213.46 1296.24,1213.46 1296.82,1213.46 1297.41,1213.46 1298,1213.46 1298.58,1213.46 1299.17,1213.46 1299.76,1213.46 1300.34,1213.46 1300.93,1213.46 1301.52,1213.46 1302.1,1213.46 1302.69,1213.46 1303.27,1213.46 1303.86,1213.46 1304.45,1213.46 1305.03,1213.46 1305.62,1213.46 1306.21,1213.46 1306.79,1213.46 1307.38,1213.46 1307.97,1213.46 1308.55,1213.46 1309.14,1213.46 1309.73,1213.46 1310.31,1213.46 1310.9,1213.46 1311.48,1213.46 1312.07,1213.46 1312.66,1213.46 1313.24,1213.46 1313.83,1213.46 1314.42,1213.46 1315,1213.46 1315.59,1213.46 1316.18,1213.46 1316.76,1213.46 1317.35,1213.46 1317.93,1213.46 1318.52,1213.46 1319.11,1213.46 1319.69,1213.46 1320.28,1213.46 1320.87,1213.46 1321.45,1213.46 1322.04,1213.46 1322.63,1213.46 1323.21,1213.46 1323.8,1213.46 1324.39,1213.46 1324.97,1213.46 1325.56,1213.46 1326.14,1213.46 1326.73,1213.46 1327.32,1213.46 1327.9,1213.46 1328.49,1213.46 1329.08,1213.46 1329.66,1213.46 1330.25,1213.46 1330.84,1213.46 1331.42,1213.46 1332.01,1213.46 1332.6,1213.46 1333.18,1213.46 1333.77,1213.46 1334.35,1213.46 1334.94,1213.46 1335.53,1213.46 1336.11,1213.46 1336.7,1213.46 1337.29,1213.46 1337.87,1213.46 1338.46,1213.46 1339.05,1213.46 1339.63,1213.46 1340.22,1213.46 1340.8,1213.46 1341.39,1213.46 1341.98,1213.46 1342.56,1213.46 1343.15,1213.46 1343.74,1213.46 1344.32,1213.46 1344.91,1213.46 1345.5,1213.46 1346.08,1213.46 1346.67,1213.46 1347.26,1213.46 1347.84,1213.46 1348.43,1213.46 1349.01,1213.46 1349.6,1213.46 1350.19,1213.46 1350.77,1213.46 1351.36,1213.46 1351.95,1213.46 1352.53,1213.46 1353.12,1213.46 1353.71,1213.46 1354.29,1213.46 1354.88,1213.46 1355.47,1213.46 1356.05,1213.46 1356.64,1213.46 1357.22,1213.46 1357.81,1213.46 1358.4,1213.46 1358.98,1213.46 1359.57,1213.46 1360.16,1213.46 1360.74,1213.46 1361.33,1213.46 1361.92,1213.46 1362.5,1213.46 1363.09,1213.46 1363.68,1213.46 1364.26,1213.46 1364.85,1213.46 1365.43,1213.46 1366.02,1213.46 1366.61,1213.46 1367.19,1213.46 1367.78,1213.46 1368.37,1213.46 1368.95,1213.46 1369.54,1213.46 1370.13,1213.46 1370.71,1213.46 1371.3,1213.46 1371.88,1213.46 1372.47,1213.46 1373.06,1213.46 1373.64,1213.46 1374.23,1213.46 1374.82,1213.46 1375.4,1213.46 1375.99,1213.46 1376.58,1213.46 1377.16,1213.46 1377.75,1213.46 1378.34,1213.46 1378.92,1213.46 1379.51,1213.46 1380.09,1213.46 1380.68,1213.46 1381.27,1213.46 1381.85,1213.46 1382.44,1213.46 1383.03,1213.46 1383.61,1213.46 1384.2,1213.46 1384.79,1213.46 1385.37,1213.46 1385.96,1213.46 1386.55,1213.46 1387.13,1213.46 1387.72,1213.46 1388.3,1213.46 1388.89,1213.46 1389.48,1213.46 1390.06,1213.46 1390.65,1213.46 1391.24,1213.46 1391.82,1213.46 1392.41,1213.46 1393,1213.46 1393.58,1213.46 1394.17,1213.46 1394.75,1213.46 1395.34,1213.46 1395.93,1213.46 1396.51,1213.46 1397.1,1213.46 1397.69,1213.46 1398.27,1213.46 1398.86,1213.46 1399.45,1213.46 1400.03,1213.46 1400.62,1213.46 1401.21,1213.46 1401.79,1213.46 1402.38,1213.46 1402.96,1213.46 1403.55,1213.46 1404.14,1213.46 1404.72,1213.46 1405.31,1213.46 1405.9,1213.46 1406.48,1213.46 1407.07,1213.46 1407.66,1213.46 1408.24,1213.46 1408.83,1213.46 1409.42,1213.46 1410,1213.46 1410.59,1213.46 1411.17,1213.46 1411.76,1213.46 1412.35,1213.46 1412.93,1213.46 1413.52,1213.46 1414.11,1213.46 1414.69,1213.46 1415.28,1213.46 1415.87,1213.46 1416.45,1213.46 1417.04,1213.46 1417.63,1213.46 1418.21,1213.46 1418.8,1213.46 1419.38,1213.46 1419.97,1213.46 1420.56,1213.46 1421.14,1213.46 1421.73,1213.46 1422.32,1213.46 1422.9,1213.46 1423.49,1213.46 1424.08,1213.46 1424.66,1213.46 1425.25,1213.46 1425.83,1213.46 1426.42,1213.46 1427.01,1213.46 1427.59,1213.46 1428.18,1213.46 1428.77,1213.46 1429.35,1213.46 1429.94,1213.46 1430.53,1213.46 1431.11,1213.46 1431.7,1213.46 1432.29,1213.46 1432.87,1213.46 1433.46,1213.46 1434.04,1213.46 1434.63,1213.46 1435.22,1213.46 1435.8,1213.46 1436.39,1213.46 1436.98,1213.46 1437.56,1213.46 1438.15,1213.46 1438.74,1213.46 1439.32,1213.46 1439.91,1213.46 1440.5,1213.46 1441.08,1213.46 1441.67,1213.46 1442.25,1213.46 1442.84,1213.46 1443.43,1213.46 1444.01,1213.46 1444.6,1213.46 1445.19,1213.46 1445.77,1213.46 1446.36,1213.46 1446.95,1213.46 1447.53,1213.46 1448.12,1213.46 1448.7,1213.46 1449.29,1213.46 1449.88,1213.46 1450.46,1213.46 1451.05,1213.46 1451.64,1213.46 1452.22,1213.46 1452.81,1213.46 1453.4,1213.46 1453.98,1213.46 1454.57,1213.46 1455.16,1213.46 1455.74,1213.46 1456.33,1213.46 1456.91,1213.46 1457.5,1213.46 1458.09,1213.46 1458.67,1213.46 1459.26,1213.46 1459.85,1213.46 1460.43,1213.46 1461.02,1213.46 1461.61,1213.46 1462.19,1213.46 1462.78,1213.46 1463.37,1213.46 1463.95,1213.46 1464.54,1213.46 1465.12,1213.46 1465.71,1213.46 1466.3,1213.46 1466.88,1213.46 1467.47,1213.46 1468.06,1213.46 1468.64,1213.46 1469.23,1213.46 1469.82,1213.46 1470.4,1213.46 1470.99,1213.46 1471.57,1213.46 1472.16,1213.46 1472.75,1213.46 1473.33,1213.46 1473.92,1213.46 1474.51,1213.46 1475.09,1213.46 1475.68,1213.46 1476.27,1213.46 1476.85,1213.46 1477.44,1213.46 1478.03,1213.46 1478.61,1213.46 1479.2,1213.46 1479.78,1213.46 1480.37,1213.46 1480.96,1213.46 1481.54,1213.46 1482.13,1213.46 1482.72,1213.46 1483.3,1213.46 1483.89,1213.46 1484.48,1213.46 1485.06,1213.46 1485.65,1213.46 1486.24,1213.46 1486.82,1213.46 1487.41,1213.46 1487.99,1213.46 1488.58,1213.46 1489.17,1213.46 1489.75,1213.46 1490.34,1213.46 1490.93,1213.46 1491.51,1213.46 1492.1,1213.46 1492.69,1213.46 1493.27,1213.46 1493.86,1213.46 1494.45,1213.46 1495.03,1213.46 1495.62,1213.46 1496.2,1213.46 1496.79,1213.46 1497.38,1213.46 1497.96,1213.46 1498.55,1213.46 1499.14,1213.46 1499.72,1213.46 1500.31,1213.46 1500.9,1213.46 1501.48,1213.46 1502.07,1213.46 1502.65,1213.46 1503.24,1213.46 1503.83,1213.46 1504.41,1213.46 1505,1213.46 1505.59,1213.46 1506.17,1213.46 1506.76,1213.46 1507.35,1213.46 1507.93,1213.46 1508.52,1213.46 1509.11,1213.46 1509.69,1213.46 1510.28,1213.46 1510.86,1213.46 1511.45,1213.46 1512.04,1213.46 1512.62,1213.46 1513.21,1213.46 1513.8,1213.46 1514.38,1213.46 1514.97,1213.46 1515.56,1213.46 1516.14,1213.46 1516.73,1213.46 1517.32,1213.46 1517.9,1213.46 1518.49,1213.46 1519.07,1213.46 1519.66,1213.46 1520.25,1213.46 1520.83,1213.46 1521.42,1213.46 1522.01,1213.46 1522.59,1213.46 1523.18,1213.46 1523.77,1213.46 1524.35,1213.46 1524.94,1213.46 1525.52,1213.46 1526.11,1213.46 1526.7,1213.46 1527.28,1213.46 1527.87,1213.46 1528.46,1213.46 1529.04,1213.46 1529.63,1213.46 1530.22,1213.46 1530.8,1213.46 1531.39,1213.46 1531.98,1213.46 1532.56,1213.46 1533.15,1213.46 1533.73,1213.46 1534.32,1213.46 1534.91,1213.46 1535.49,1213.46 1536.08,1213.46 1536.67,1213.46 1537.25,1213.46 1537.84,1213.46 1538.43,1213.46 1539.01,1213.46 1539.6,1213.46 1540.19,1213.46 1540.77,1213.46 1541.36,1213.46 1541.94,1213.46 1542.53,1213.46 1543.12,1213.46 1543.7,1213.46 1544.29,1213.46 1544.88,1213.46 1545.46,1213.46 1546.05,1213.46 1546.64,1213.46 1547.22,1213.46 1547.81,1213.46 1548.4,1213.46 1548.98,1213.46 1549.57,1213.46 1550.15,1213.46 1550.74,1213.46 1551.33,1213.46 1551.91,1213.46 1552.5,1213.46 1553.09,1213.46 1553.67,1213.46 1554.26,1213.46 1554.85,1213.46 1555.43,1213.46 1556.02,1213.46 1556.6,1213.46 1557.19,1213.46 1557.78,1213.46 1558.36,1213.46 1558.95,1213.46 1559.54,1213.46 1560.12,1213.46 1560.71,1213.46 1561.3,1213.46 1561.88,1213.46 1562.47,1213.46 1563.06,1213.46 1563.64,1213.46 1564.23,1213.46 1564.81,1213.46 1565.4,1213.46 1565.99,1213.46 1566.57,1213.46 1567.16,1213.46 1567.75,1213.46 1568.33,1213.46 1568.92,1213.46 1569.51,1213.46 1570.09,1213.46 1570.68,1213.46 1571.27,1213.46 1571.85,1213.46 1572.44,1213.46 1573.02,1213.46 1573.61,1213.46 1574.2,1213.46 1574.78,1213.46 1575.37,1213.46 1575.96,1213.46 1576.54,1213.46 1577.13,1213.46 1577.72,1213.46 1578.3,1213.46 1578.89,1213.46 1579.47,1213.46 1580.06,1213.46 1580.65,1213.46 1581.23,1213.46 1581.82,1213.46 1582.41,1213.46 1582.99,1213.46 1583.58,1213.46 1584.17,1213.46 1584.75,1213.46 1585.34,1213.46 1585.93,1213.46 1586.51,1213.46 1587.1,1213.46 1587.68,1213.46 1588.27,1213.46 1588.86,1213.46 1589.44,1213.46 1590.03,1213.46 1590.62,1213.46 1591.2,1213.46 1591.79,1213.46 1592.38,1213.46 1592.96,1213.46 1593.55,1213.46 1594.14,1213.46 1594.72,1213.46 1595.31,1213.46 1595.89,1213.46 1596.48,1213.46 1597.07,1213.46 1597.65,1213.46 1598.24,1213.46 1598.83,1213.46 1599.41,1213.46 1600,1213.46 1600.59,1213.46 1601.17,1213.46 1601.76,1213.46 1602.34,1213.46 1602.93,1213.46 1603.52,1213.46 1604.1,1213.46 1604.69,1213.46 1605.28,1213.46 1605.86,1213.46 1606.45,1213.46 1607.04,1213.46 1607.62,1213.46 1608.21,1213.46 1608.8,1213.46 1609.38,1213.46 1609.97,1213.46 1610.55,1213.46 1611.14,1213.46 1611.73,1213.46 1612.31,1213.46 1612.9,1213.46 1613.49,1213.46 1614.07,1213.46 1614.66,1213.46 1615.25,1213.46 1615.83,1213.46 1616.42,1213.46 1617.01,1213.46 1617.59,1213.46 1618.18,1213.46 1618.76,1213.46 1619.35,1213.46 1619.94,1213.46 1620.52,1213.46 1621.11,1213.46 1621.7,1213.46 1622.28,1213.46 1622.87,1213.46 1623.46,1213.46 1624.04,1213.46 1624.63,1213.46 1625.22,1213.46 1625.8,1213.46 1626.39,1213.46 1626.97,1213.46 1627.56,1213.46 1628.15,1213.46 1628.73,1213.46 1629.32,1213.46 1629.91,1213.46 1630.49,1213.46 1631.08,1213.46 1631.67,1213.46 1632.25,1213.46 1632.84,1213.46 1633.42,1213.46 1634.01,1213.46 1634.6,1213.46 1635.18,1213.46 1635.77,1213.46 1636.36,1213.46 1636.94,1213.46 1637.53,1213.46 1638.12,1213.46 1638.7,1213.46 1639.29,1213.46 1639.88,1213.46 1640.46,1213.46 1641.05,1213.46 1641.63,1213.46 1642.22,1213.46 1642.81,1213.46 1643.39,1213.46 1643.98,1213.46 1644.57,1213.46 1645.15,1213.46 1645.74,1213.46 1646.33,1213.46 1646.91,1213.46 1647.5,1213.46 1648.09,1213.46 1648.67,1213.46 1649.26,1213.46 1649.84,1213.46 1650.43,1213.46 1651.02,1213.46 1651.6,1213.46 1652.19,1213.46 1652.78,1213.46 1653.36,1213.46 1653.95,1213.46 1654.54,1213.46 1655.12,1213.46 1655.71,1213.46 1656.29,1213.46 1656.88,1213.46 1657.47,1213.46 1658.05,1213.46 1658.64,1213.46 1659.23,1213.46 1659.81,1213.46 1660.4,1213.46 1660.99,1213.46 1661.57,1213.46 1662.16,1213.46 1662.75,1213.46 1663.33,1213.46 1663.92,1213.46 1664.5,1213.46 1665.09,1213.46 1665.68,1213.46 1666.26,1213.46 1666.85,1213.46 1667.44,1213.46 1668.02,1213.46 1668.61,1213.46 1669.2,1213.46 1669.78,1213.46 1670.37,1213.46 1670.96,1213.46 1671.54,1213.46 1672.13,1213.46 1672.71,1213.46 1673.3,1213.46 1673.89,1213.46 1674.47,1213.46 1675.06,1213.46 1675.65,1213.46 1676.23,1213.46 1676.82,1213.46 1677.41,1213.46 1677.99,1213.46 1678.58,1213.46 1679.17,1213.46 1679.75,1213.46 1680.34,1213.46 1680.92,1213.46 1681.51,1213.46 1682.1,1213.46 1682.68,1213.46 1683.27,1213.46 1683.86,1213.46 1684.44,1213.46 1685.03,1213.46 1685.62,1213.46 1686.2,1213.46 1686.79,1213.46 1687.37,1213.46 1687.96,1213.46 1688.55,1213.46 1689.13,1213.46 1689.72,1213.46 1690.31,1213.46 1690.89,1213.46 1691.48,1213.46 1692.07,1213.46 1692.65,1213.46 1693.24,1213.46 1693.83,1213.46 1694.41,1213.46 1695,1213.46 1695.58,1213.46 1696.17,1213.46 1696.76,1213.46 1697.34,1213.46 1697.93,1213.46 1698.52,1213.46 1699.1,1213.46 1699.69,1213.46 1700.28,1213.46 1700.86,1213.46 1701.45,1213.46 1702.04,1213.46 1702.62,1213.46 1703.21,1213.46 1703.79,1213.46 1704.38,1213.46 1704.97,1213.46 1705.55,1213.46 1706.14,1213.46 1706.73,1213.46 1707.31,1213.46 1707.9,1213.46 1708.49,1213.46 1709.07,1213.46 1709.66,1213.46 1710.24,1213.46 1710.83,1213.46 1711.42,1213.46 1712,1213.46 1712.59,1213.46 1713.18,1213.46 1713.76,1213.46 1714.35,1213.46 1714.94,1213.46 1715.52,1213.46 1716.11,1213.46 1716.7,1213.46 1717.28,1213.46 1717.87,1213.46 1718.45,1213.46 1719.04,1213.46 1719.63,1213.46 1720.21,1213.46 1720.8,1213.46 1721.39,1213.46 1721.97,1213.46 1722.56,1213.46 1723.15,1213.46 1723.73,1213.46 1724.32,1213.46 1724.91,1213.46 1725.49,1213.46 1726.08,1213.46 1726.66,1213.46 1727.25,1213.46 1727.84,1213.46 1728.42,1213.46 1729.01,1213.46 1729.6,1213.46 1730.18,1213.46 1730.77,1213.46 1731.36,1213.46 1731.94,1213.46 1732.53,1213.46 1733.11,1213.46 1733.7,1213.46 1734.29,1213.46 1734.87,1213.46 1735.46,1213.46 1736.05,1213.46 1736.63,1213.46 1737.22,1213.46 1737.81,1213.46 1738.39,1213.46 1738.98,1213.46 1739.57,1213.46 1740.15,1213.46 1740.74,1213.46 1741.32,1213.46 1741.91,1213.46 1742.5,1213.46 1743.08,1213.46 1743.67,1213.46 1744.26,1213.46 1744.84,1213.46 1745.43,1213.46 1746.02,1213.46 1746.6,1213.46 1747.19,1213.46 1747.78,1213.46 1748.36,1213.46 1748.95,1213.46 1749.53,1213.46 1750.12,1213.46 1750.71,1213.46 1751.29,1213.46 1751.88,1213.46 1752.47,1213.46 1753.05,1213.46 1753.64,1213.46 1754.23,1213.46 1754.81,1213.46 1755.4,1213.46 1755.99,1213.46 1756.57,1213.46 1757.16,1213.46 1757.74,1213.46 1758.33,1213.46 1758.92,1213.46 1759.5,1213.46 1760.09,1213.46 1760.68,1213.46 1761.26,1213.46 1761.85,1213.46 1762.44,1213.46 1763.02,1213.46 1763.61,1213.46 1764.19,1213.46 1764.78,1213.46 1765.37,1213.46 1765.95,1213.46 1766.54,1213.46 1767.13,1213.46 1767.71,1213.46 1768.3,1213.46 1768.89,1213.46 1769.47,1213.46 1770.06,1213.46 1770.65,1213.46 1771.23,1213.46 1771.82,1213.46 1772.4,1213.46 1772.99,1213.46 1773.58,1213.46 1774.16,1213.46 1774.75,1213.46 1775.34,1213.46 1775.92,1213.46 1776.51,1213.46 1777.1,1213.46 1777.68,1213.46 1778.27,1213.46 1778.86,1213.46 1779.44,1213.46 1780.03,1213.46 1780.61,1213.46 1781.2,1213.46 1781.79,1213.46 1782.37,1213.46 1782.96,1213.46 1783.55,1213.46 1784.13,1213.46 1784.72,1213.46 1785.31,1213.46 1785.89,1213.46 1786.48,1213.46 1787.06,1213.46 1787.65,1213.46 1788.24,1213.46 1788.82,1213.46 1789.41,1213.46 1790,1213.46 1790.58,1213.46 1791.17,1213.46 1791.76,1213.46 1792.34,1213.46 1792.93,1213.46 1793.52,1213.46 1794.1,1213.46 1794.69,1213.46 1795.27,1213.46 1795.86,1213.46 1796.45,1213.46 1797.03,1213.46 1797.62,1213.46 1798.21,1213.46 1798.79,1213.46 1799.38,1213.46 1799.97,1213.46 1800.55,1213.46 1801.14,1213.46 1801.73,1213.46 1802.31,1213.46 1802.9,1213.46 1803.48,1213.46 1804.07,1213.46 1804.66,1213.46 1805.24,1213.46 1805.83,1213.46 1806.42,1213.46 1807,1213.46 1807.59,1213.46 1808.18,1213.46 1808.76,1213.46 1809.35,1213.46 1809.94,1213.46 1810.52,1213.46 1811.11,1213.46 1811.69,1213.46 1812.28,1213.46 1812.87,1213.46 1813.45,1213.46 1814.04,1213.46 1814.63,1213.46 1815.21,1213.46 1815.8,1213.46 1816.39,1213.46 1816.97,1213.46 1817.56,1213.46 1818.14,1213.46 1818.73,1213.46 1819.32,1213.46 1819.9,1213.46 1820.49,1213.46 1821.08,1213.46 1821.66,1213.46 1822.25,1213.46 1822.84,1213.46 1823.42,1213.46 1824.01,1213.46 1824.6,1213.46 1825.18,1213.46 1825.77,1213.46 1826.35,1213.46 1826.94,1213.46 1827.53,1213.46 1828.11,1213.46 1828.7,1213.46 1829.29,1213.46 1829.87,1213.46 1830.46,1213.46 1831.05,1213.46 1831.63,1213.46 1832.22,1213.46 1832.81,1213.46 1833.39,1213.46 1833.98,1213.46 1834.56,1213.46 1835.15,1213.46 1835.74,1213.46 1836.32,1213.46 1836.91,1213.46 1837.5,1213.46 1838.08,1213.46 1838.67,1213.46 1839.26,1213.46 1839.84,1213.46 1840.43,1213.46 1841.01,1213.46 1841.6,1213.46 1842.19,1213.46 1842.77,1213.46 1843.36,1213.46 1843.95,1213.46 1844.53,1213.46 1845.12,1213.46 1845.71,1213.46 1846.29,1213.46 1846.88,1213.46 1847.47,1213.46 1848.05,1213.46 1848.64,1213.46 1849.22,1213.46 1849.81,1213.46 1850.4,1213.46 1850.98,1213.46 1851.57,1213.46 1852.16,1213.46 1852.74,1213.46 1853.33,1213.46 1853.92,1213.46 1854.5,1213.46 1855.09,1213.46 1855.68,1213.46 1856.26,1213.46 1856.85,1213.46 1857.43,1213.46 1858.02,1213.46 1858.61,1213.46 1859.19,1213.46 1859.78,1213.46 1860.37,1213.46 1860.95,1213.46 1861.54,1213.46 1862.13,1213.46 1862.71,1213.46 1863.3,1213.46 1863.88,1213.46 1864.47,1213.46 1865.06,1213.46 1865.64,1213.46 1866.23,1213.46 1866.82,1213.46 1867.4,1213.46 1867.99,1213.46 1868.58,1213.46 1869.16,1213.46 1869.75,1213.46 1870.34,1213.46 1870.92,1213.46 1871.51,1213.46 1872.09,1213.46 1872.68,1213.46 1873.27,1213.46 1873.85,1213.46 1874.44,1213.46 1875.03,1213.46 1875.61,1213.46 1876.2,1213.46 1876.79,1213.46 1877.37,1213.46 1877.96,1213.46 1878.55,1213.46 1879.13,1213.46 1879.72,1213.46 1880.3,1213.46 1880.89,1213.46 1881.48,1213.46 1882.06,1213.46 1882.65,1213.46 1883.24,1213.46 1883.82,1213.46 1884.41,1213.46 1885,1213.46 1885.58,1213.46 1886.17,1213.46 1886.76,1213.46 1887.34,1213.46 1887.93,1213.46 1888.51,1213.46 1889.1,1213.46 1889.69,1213.46 1890.27,1213.46 1890.86,1213.46 1891.45,1213.46 1892.03,1213.46 1892.62,1213.46 1893.21,1213.46 1893.79,1213.46 1894.38,1213.46 1894.96,1213.46 1895.55,1213.46 1896.14,1213.46 1896.72,1213.46 1897.31,1213.46 1897.9,1213.46 1898.48,1213.46 1899.07,1213.46 1899.66,1213.46 1900.24,1213.46 1900.83,1213.46 1901.42,1213.46 1902,1213.46 1902.59,1213.46 1903.17,1213.46 1903.76,1213.46 1904.35,1213.46 1904.93,1213.46 1905.52,1213.46 1906.11,1213.46 1906.69,1213.46 1907.28,1213.46 1907.87,1213.46 1908.45,1213.46 1909.04,1213.46 1909.63,1213.46 1910.21,1213.46 1910.8,1213.46 1911.38,1213.46 1911.97,1213.46 1912.56,1213.46 1913.14,1213.46 1913.73,1213.46 1914.32,1213.46 1914.9,1213.46 1915.49,1213.46 1916.08,1213.46 1916.66,1213.46 1917.25,1213.46 1917.83,1213.46 1918.42,1213.46 1919.01,1213.46 1919.59,1213.46 1920.18,1213.46 1920.77,1213.46 1921.35,1213.46 1921.94,1213.46 1922.53,1213.46 1923.11,1213.46 1923.7,1213.46 1924.29,1213.46 1924.87,1213.46 1925.46,1213.46 1926.04,1213.46 1926.63,1213.46 1927.22,1213.46 1927.8,1213.46 1928.39,1213.46 1928.98,1213.46 1929.56,1213.46 1930.15,1213.46 1930.74,1213.46 1931.32,1213.46 1931.91,1213.46 1932.5,1213.46 1933.08,1213.46 1933.67,1213.46 1934.25,1213.46 1934.84,1213.46 1935.43,1213.46 1936.01,1213.46 1936.6,1213.46 1937.19,1213.46 1937.77,1213.46 1938.36,1213.46 1938.95,1213.46 1939.53,1213.46 1940.12,1213.46 1940.71,1213.46 1941.29,1213.46 1941.88,1213.46 1942.46,1213.46 1943.05,1213.46 1943.64,1213.46 1944.22,1213.46 1944.81,1213.46 1945.4,1213.46 1945.98,1213.46 1946.57,1213.46 1947.16,1213.46 1947.74,1213.46 1948.33,1213.46 1948.91,1213.46 1949.5,1213.46 1950.09,1213.46 1950.67,1213.46 1951.26,1213.46 1951.85,1213.46 1952.43,1213.46 1953.02,1213.46 1953.61,1213.46 1954.19,1213.46 1954.78,1213.46 1955.37,1213.46 1955.95,1213.46 1956.54,1213.46 1957.12,1213.46 1957.71,1213.46 1958.3,1213.46 1958.88,1213.46 1959.47,1213.46 1960.06,1213.46 1960.64,1213.46 1961.23,1213.46 1961.82,1213.46 1962.4,1213.46 1962.99,1213.46 1963.58,1213.46 1964.16,1213.46 1964.75,1213.46 1965.33,1213.46 1965.92,1213.46 1966.51,1213.46 1967.09,1213.46 1967.68,1213.46 1968.27,1213.46 1968.85,1213.46 1969.44,1213.46 1970.03,1213.46 1970.61,1213.46 1971.2,1213.46 1971.78,1213.46 1972.37,1213.46 1972.96,1213.46 1973.54,1213.46 1974.13,1213.46 1974.72,1213.46 1975.3,1213.46 1975.89,1213.46 1976.48,1213.46 1977.06,1213.46 1977.65,1213.46 1978.24,1213.46 1978.82,1213.46 1979.41,1213.46 1979.99,1213.46 1980.58,1213.46 1981.17,1213.46 1981.75,1213.46 1982.34,1213.46 1982.93,1213.46 1983.51,1213.46 1984.1,1213.46 1984.69,1213.46 1985.27,1213.46 1985.86,1213.46 1986.45,1213.46 1987.03,1213.46 1987.62,1213.46 1988.2,1213.46 1988.79,1213.46 1989.38,1213.46 1989.96,1213.46 1990.55,1213.46 1991.14,1213.46 1991.72,1213.46 1992.31,1213.46 1992.9,1213.46 1993.48,1213.46 1994.07,1213.46 1994.65,1213.46 1995.24,1213.46 1995.83,1213.46 1996.41,1213.46 1997,1213.46 1997.59,1213.46 1998.17,1213.46 1998.76,1213.46 1999.35,1213.46 1999.93,1213.46 2000.52,1213.46 2001.11,1213.46 2001.69,1213.46 2002.28,1213.46 2002.86,1213.46 2003.45,1213.46 2004.04,1213.46 2004.62,1213.46 2005.21,1213.46 2005.8,1213.46 2006.38,1213.46 2006.97,1213.46 2007.56,1213.46 2008.14,1213.46 2008.73,1213.46 2009.32,1213.46 2009.9,1213.46 2010.49,1213.46 2011.07,1213.46 2011.66,1213.46 2012.25,1213.46 2012.83,1213.46 2013.42,1213.46 2014.01,1213.46 2014.59,1213.46 2015.18,1213.46 2015.77,1213.46 2016.35,1213.46 2016.94,1213.46 2017.53,1213.46 2018.11,1213.46 2018.7,1213.46 2019.28,1213.46 2019.87,1213.46 2020.46,1213.46 2021.04,1213.46 2021.63,1213.46 2022.22,1213.46 2022.8,1213.46 2023.39,1213.46 2023.98,1213.46 2024.56,1213.46 2025.15,1213.46 2025.73,1213.46 2026.32,1213.46 2026.91,1213.46 2027.49,1213.46 2028.08,1213.46 2028.67,1213.46 2029.25,1213.46 2029.84,1213.46 2030.43,1213.46 2031.01,1213.46 2031.6,1213.46 2032.19,1213.46 2032.77,1213.46 2033.36,1213.46 2033.94,1213.46 2034.53,1213.46 2035.12,1213.46 2035.7,1213.46 2036.29,1213.46 2036.88,1213.46 2037.46,1213.46 2038.05,1213.46 2038.64,1213.46 2039.22,1213.46 2039.81,1213.46 2040.4,1213.46 2040.98,1213.46 2041.57,1213.46 2042.15,1213.46 2042.74,1213.46 2043.33,1213.46 2043.91,1213.46 2044.5,1213.46 2045.09,1213.46 2045.67,1213.46 2046.26,1213.46 2046.85,1213.46 2047.43,1213.46 2048.02,1213.46 2048.6,1213.46 2049.19,1213.46 2049.78,1213.46 2050.36,1213.46 2050.95,1213.46 2051.54,1213.46 2052.12,1213.46 2052.71,1213.46 2053.3,1213.46 2053.88,1213.46 2054.47,1213.46 2055.06,1213.46 2055.64,1213.46 2056.23,1213.46 2056.81,1213.46 2057.4,1213.46 2057.99,1213.46 2058.57,1213.46 2059.16,1213.46 2059.75,1213.46 2060.33,1213.46 2060.92,1213.46 2061.51,1213.46 2062.09,1213.46 2062.68,1213.46 2063.27,1213.46 2063.85,1213.46 2064.44,1213.46 2065.02,1213.46 2065.61,1213.46 2066.2,1213.46 2066.78,1213.46 2067.37,1213.46 2067.96,1213.46 2068.54,1213.46 2069.13,1213.46 2069.72,1213.46 2070.3,1213.46 2070.89,1213.46 2071.48,1213.46 2072.06,1213.46 2072.65,1213.46 2073.23,1213.46 2073.82,1213.46 2074.41,1213.46 2074.99,1213.46 2075.58,1213.46 2076.17,1213.46 2076.75,1213.46 2077.34,1213.46 2077.93,1213.46 2078.51,1213.46 2079.1,1213.46 2079.68,1213.46 2080.27,1213.46 2080.86,1213.46 2081.44,1213.46 2082.03,1213.46 2082.62,1213.46 2083.2,1213.46 2083.79,1213.46 2084.38,1213.46 2084.96,1213.46 2085.55,1213.46 2086.14,1213.46 2086.72,1213.46 2087.31,1213.46 2087.89,1213.46 2088.48,1213.46 2089.07,1213.46 2089.65,1213.46 2090.24,1213.46 2090.83,1213.46 2091.41,1213.46 2092,1213.46 2092.59,1213.46 2093.17,1213.46 2093.76,1213.46 2094.35,1213.46 2094.93,1213.46 2095.52,1213.46 2096.1,1213.46 2096.69,1213.46 2097.28,1213.46 2097.86,1213.46 2098.45,1213.46 2099.04,1213.46 2099.62,1213.46 2100.21,1213.46 2100.8,1213.46 2101.38,1213.46 2101.97,1213.46 2102.55,1213.46 2103.14,1213.46 2103.73,1213.46 2104.31,1213.46 2104.9,1213.46 2105.49,1213.46 2106.07,1213.46 2106.66,1213.46 2107.25,1213.46 2107.83,1213.46 2108.42,1213.46 2109.01,1213.46 2109.59,1213.46 2110.18,1213.46 2110.76,1213.46 2111.35,1213.46 2111.94,1213.46 2112.52,1213.46 2113.11,1213.46 2113.7,1213.46 2114.28,1213.46 2114.87,1213.46 2115.46,1213.46 2116.04,1213.46 2116.63,1213.46 2117.22,1213.46 2117.8,1213.46 2118.39,1213.46 2118.97,1213.46 2119.56,1213.46 2120.15,1213.46 2120.73,1213.46 2121.32,1213.46 2121.91,1213.46 2122.49,1213.46 2123.08,1213.46 2123.67,1213.46 2124.25,1213.46 2124.84,1213.46 2125.42,1213.46 2126.01,1213.46 2126.6,1213.46 2127.18,1213.46 2127.77,1213.46 2128.36,1213.46 2128.94,1213.46 2129.53,1213.46 2130.12,1213.46 2130.7,1213.46 2131.29,1213.46 2131.88,1213.46 2132.46,1213.46 2133.05,1213.46 2133.63,1213.46 2134.22,1213.46 2134.81,1213.46 2135.39,1213.46 2135.98,1213.46 2136.57,1213.46 2137.15,1213.46 2137.74,1213.46 2138.33,1213.46 2138.91,1213.46 2139.5,1213.46 2140.09,1213.46 2140.67,1213.46 2141.26,1213.46 2141.84,1213.46 2142.43,1213.46 2143.02,1213.46 2143.6,1213.46 2144.19,1213.46 2144.78,1213.46 2145.36,1213.46 2145.95,1213.46 2146.54,1213.46 2147.12,1213.46 2147.71,1213.46 2148.3,1213.46 2148.88,1213.46 2149.47,1213.46 2150.05,1213.46 2150.64,1213.46 2151.23,1213.46 2151.81,1213.46 2152.4,1213.46 2152.99,1213.46 2153.57,1213.46 2154.16,1213.46 2154.75,1213.46 2155.33,1213.46 2155.92,1213.46 2156.5,1213.46 2157.09,1213.46 2157.68,1213.46 2158.26,1213.46 \"/>\n<path clip-path=\"url(#clip862)\" d=\"M986.025 1213.24 L986.612 1213.24 L987.198 1213.24 L987.785 1213.24 L988.371 1213.24 L988.957 1213.24 L989.544 1213.24 L990.13 1213.24 L990.717 1213.24 L991.303 1213.24 L991.889 1213.24 L992.476 1213.24 L993.062 1213.24 L993.649 1213.24 L994.235 1213.24 L994.822 1213.24 L995.408 1213.24 L995.994 1213.24 L996.581 1213.24 L997.167 1213.24 L997.754 1213.24 L998.34 1213.24 L998.926 1213.24 L999.513 1213.24 L1000.1 1213.24 L1000.69 1213.24 L1001.27 1213.24 L1001.86 1213.24 L1002.44 1213.24 L1003.03 1213.24 L1003.62 1213.24 L1004.2 1213.24 L1004.79 1213.24 L1005.38 1213.24 L1005.96 1213.24 L1006.55 1213.24 L1007.14 1213.24 L1007.72 1213.24 L1008.31 1213.24 L1008.9 1213.24 L1009.48 1213.24 L1010.07 1213.24 L1010.65 1213.24 L1011.24 1213.24 L1011.83 1213.24 L1012.41 1213.24 L1013 1213.24 L1013.59 1213.24 L1014.17 1213.24 L1014.76 1213.24 L1015.35 1213.24 L1015.93 1213.24 L1016.52 1213.24 L1017.11 1213.24 L1017.69 1213.24 L1018.28 1213.24 L1018.86 1213.24 L1019.45 1213.24 L1020.04 1213.24 L1020.62 1213.24 L1021.21 1213.24 L1021.8 1213.24 L1022.38 1213.24 L1022.97 1213.24 L1023.56 1213.24 L1024.14 1213.24 L1024.73 1213.24 L1025.32 1213.24 L1025.9 1213.24 L1026.49 1213.24 L1027.07 1213.24 L1027.66 1213.24 L1028.25 1213.24 L1028.83 1213.24 L1029.42 1213.24 L1030.01 1213.24 L1030.59 1213.24 L1031.18 1213.24 L1031.77 1213.24 L1032.35 1213.24 L1032.94 1213.24 L1033.52 1213.24 L1034.11 1213.24 L1034.7 1213.24 L1035.28 1213.24 L1035.87 1213.24 L1036.46 1213.24 L1037.04 1213.24 L1037.63 1213.24 L1038.22 1213.24 L1038.8 1213.24 L1039.39 1213.24 L1039.98 1213.24 L1040.56 1213.24 L1041.15 1213.24 L1041.73 1213.24 L1042.32 1213.24 L1042.91 1213.24 L1043.49 1213.24 L1044.08 1213.24 L1044.67 1213.24 L1045.25 1213.24 L1045.84 1213.24 L1046.43 1213.24 L1047.01 1213.24 L1047.6 1213.24 L1048.19 1213.24 L1048.77 1213.24 L1049.36 1213.24 L1049.94 1213.24 L1050.53 1213.24 L1051.12 1213.24 L1051.7 1213.24 L1052.29 1213.24 L1052.88 1213.24 L1053.46 1213.24 L1054.05 1213.24 L1054.64 1213.24 L1055.22 1213.24 L1055.81 1213.24 L1056.39 1213.24 L1056.98 1213.24 L1057.57 1213.24 L1058.15 1213.24 L1058.74 1213.24 L1059.33 1213.24 L1059.91 1213.24 L1060.5 1213.24 L1061.09 1213.24 L1061.67 1213.24 L1062.26 1213.24 L1062.85 1213.24 L1063.43 1213.24 L1064.02 1213.24 L1064.6 1213.24 L1065.19 1213.24 L1065.78 1213.24 L1066.36 1213.24 L1066.95 1213.24 L1067.54 1213.24 L1068.12 1213.24 L1068.71 1213.24 L1069.3 1213.24 L1069.88 1213.24 L1070.47 1213.24 L1071.06 1213.24 L1071.64 1213.24 L1072.23 1213.24 L1072.81 1213.24 L1073.4 1213.24 L1073.99 1213.24 L1074.57 1213.24 L1075.16 1213.24 L1075.75 1213.24 L1076.33 1213.24 L1076.92 1213.24 L1077.51 1213.24 L1078.09 1213.24 L1078.68 1213.24 L1079.26 1213.24 L1079.85 1213.24 L1080.44 1213.24 L1081.02 1213.24 L1081.61 1213.24 L1082.2 1213.24 L1082.78 1213.24 L1083.37 1213.24 L1083.96 1213.24 L1084.54 1213.24 L1085.13 1213.24 L1085.72 1213.24 L1086.3 1213.24 L1086.89 1213.24 L1087.47 1213.24 L1088.06 1213.24 L1088.65 1213.24 L1089.23 1213.24 L1089.82 1213.24 L1090.41 1213.24 L1090.99 1213.24 L1091.58 1213.24 L1092.17 1213.24 L1092.75 1213.24 L1093.34 1213.24 L1093.93 1213.24 L1094.51 1213.24 L1095.1 1213.24 L1095.68 1213.24 L1096.27 1213.24 L1096.86 1213.24 L1097.44 1213.24 L1098.03 1213.24 L1098.62 1213.24 L1099.2 1213.24 L1099.79 1213.24 L1100.38 1213.24 L1100.96 1213.24 L1101.55 1213.24 L1102.14 1213.24 L1102.72 1213.24 L1103.31 1213.24 L1103.89 1213.24 L1104.48 1213.24 L1105.07 1213.24 L1105.65 1213.24 L1106.24 1213.24 L1106.83 1213.24 L1107.41 1213.24 L1108 1213.24 L1108.59 1213.24 L1109.17 1213.24 L1109.76 1213.24 L1110.34 1213.24 L1110.93 1213.24 L1111.52 1213.24 L1112.1 1213.24 L1112.69 1213.24 L1113.28 1213.24 L1113.86 1213.24 L1114.45 1213.24 L1115.04 1213.24 L1115.62 1213.24 L1116.21 1213.24 L1116.8 1213.24 L1117.38 1213.24 L1117.97 1213.24 L1118.55 1213.24 L1119.14 1213.24 L1119.73 1213.24 L1120.31 1213.24 L1120.9 1213.24 L1121.49 1213.24 L1122.07 1213.24 L1122.66 1213.24 L1123.25 1213.24 L1123.83 1213.24 L1124.42 1213.24 L1125.01 1213.24 L1125.59 1213.24 L1126.18 1213.24 L1126.76 1213.24 L1127.35 1213.24 L1127.94 1213.24 L1128.52 1213.24 L1129.11 1213.24 L1129.7 1213.24 L1130.28 1213.24 L1130.87 1213.24 L1131.46 1213.24 L1132.04 1213.24 L1132.63 1213.24 L1133.21 1213.24 L1133.8 1213.24 L1134.39 1213.24 L1134.97 1213.24 L1135.56 1213.24 L1136.15 1213.24 L1136.73 1213.24 L1137.32 1213.24 L1137.91 1213.24 L1138.49 1213.24 L1139.08 1213.24 L1139.67 1213.24 L1140.25 1213.24 L1140.84 1213.24 L1141.42 1213.24 L1142.01 1213.24 L1142.6 1213.24 L1143.18 1213.24 L1143.77 1213.24 L1144.36 1213.24 L1144.94 1213.24 L1145.53 1213.24 L1146.12 1213.24 L1146.7 1213.24 L1147.29 1213.24 L1147.88 1213.24 L1148.46 1213.24 L1149.05 1213.24 L1149.63 1213.24 L1150.22 1213.24 L1150.81 1213.24 L1151.39 1213.24 L1151.98 1213.24 L1152.57 1213.24 L1153.15 1213.24 L1153.74 1213.24 L1154.33 1213.24 L1154.91 1213.24 L1155.5 1213.24 L1156.09 1213.24 L1156.67 1213.24 L1157.26 1213.24 L1157.84 1213.24 L1158.43 1213.24 L1159.02 1213.24 L1159.6 1213.24 L1160.19 1213.24 L1160.78 1213.24 L1161.36 1213.24 L1161.95 1213.24 L1162.54 1213.24 L1163.12 1213.24 L1163.71 1213.24 L1164.29 1213.24 L1164.88 1213.24 L1165.47 1213.24 L1166.05 1213.24 L1166.64 1213.24 L1167.23 1213.24 L1167.81 1213.24 L1168.4 1213.24 L1168.99 1213.24 L1169.57 1213.24 L1170.16 1213.24 L1170.75 1213.24 L1171.33 1213.24 L1171.92 1213.24 L1172.5 1213.24 L1173.09 1213.24 L1173.68 1213.24 L1174.26 1213.24 L1174.85 1213.24 L1175.44 1213.24 L1176.02 1213.24 L1176.61 1213.24 L1177.2 1213.24 L1177.78 1213.24 L1178.37 1213.24 L1178.96 1213.24 L1179.54 1213.24 L1180.13 1213.24 L1180.71 1213.24 L1181.3 1213.24 L1181.89 1213.24 L1182.47 1213.24 L1183.06 1213.24 L1183.65 1213.24 L1184.23 1213.24 L1184.82 1213.24 L1185.41 1213.24 L1185.99 1213.24 L1186.58 1213.24 L1187.16 1213.24 L1187.75 1213.24 L1188.34 1213.24 L1188.92 1213.24 L1189.51 1213.24 L1190.1 1213.24 L1190.68 1213.24 L1191.27 1213.24 L1191.86 1213.24 L1192.44 1213.24 L1193.03 1213.24 L1193.62 1213.24 L1194.2 1213.24 L1194.79 1213.24 L1195.37 1213.24 L1195.96 1213.24 L1196.55 1213.24 L1197.13 1213.24 L1197.72 1213.24 L1198.31 1213.24 L1198.89 1213.24 L1199.48 1213.24 L1200.07 1213.24 L1200.65 1213.24 L1201.24 1213.24 L1201.83 1213.24 L1202.41 1213.24 L1203 1213.24 L1203.58 1213.24 L1204.17 1213.24 L1204.76 1213.24 L1205.34 1213.24 L1205.93 1213.24 L1206.52 1213.24 L1207.1 1213.24 L1207.69 1213.24 L1208.28 1213.24 L1208.86 1213.24 L1209.45 1213.24 L1210.03 1213.24 L1210.62 1213.24 L1211.21 1213.24 L1211.79 1213.24 L1212.38 1213.24 L1212.97 1213.24 L1213.55 1213.24 L1214.14 1213.24 L1214.73 1213.24 L1215.31 1213.24 L1215.9 1213.24 L1216.49 1213.24 L1217.07 1213.24 L1217.66 1213.24 L1218.24 1213.24 L1218.83 1213.24 L1219.42 1213.24 L1220 1213.24 L1220.59 1213.24 L1221.18 1213.24 L1221.76 1213.24 L1222.35 1213.24 L1222.94 1213.24 L1223.52 1213.24 L1224.11 1213.24 L1224.7 1213.24 L1225.28 1213.24 L1225.87 1213.24 L1226.45 1213.24 L1227.04 1213.24 L1227.63 1213.24 L1228.21 1213.24 L1228.8 1213.24 L1229.39 1213.24 L1229.97 1213.24 L1230.56 1213.24 L1231.15 1213.24 L1231.73 1213.24 L1232.32 1213.24 L1232.91 1213.24 L1233.49 1213.24 L1234.08 1213.24 L1234.66 1213.24 L1235.25 1213.24 L1235.84 1213.24 L1236.42 1213.24 L1237.01 1213.24 L1237.6 1213.24 L1238.18 1213.24 L1238.77 1213.24 L1239.36 1213.24 L1239.94 1213.24 L1240.53 1213.24 L1241.11 1213.24 L1241.7 1213.24 L1242.29 1213.24 L1242.87 1213.24 L1243.46 1213.24 L1244.05 1213.24 L1244.63 1213.24 L1245.22 1213.24 L1245.81 1213.24 L1246.39 1213.24 L1246.98 1213.24 L1247.57 1213.24 L1248.15 1213.24 L1248.74 1213.24 L1249.32 1213.24 L1249.91 1213.24 L1250.5 1213.24 L1251.08 1213.24 L1251.67 1213.24 L1252.26 1213.24 L1252.84 1213.24 L1253.43 1213.24 L1254.02 1213.24 L1254.6 1213.24 L1255.19 1213.24 L1255.78 1213.24 L1256.36 1213.24 L1256.95 1213.24 L1257.53 1213.24 L1258.12 1213.24 L1258.71 1213.24 L1259.29 1213.24 L1259.88 1213.24 L1260.47 1213.24 L1261.05 1213.24 L1261.64 1213.24 L1262.23 1213.24 L1262.81 1213.24 L1263.4 1213.24 L1263.98 1213.24 L1264.57 1213.24 L1265.16 1213.24 L1265.74 1213.24 L1266.33 1213.24 L1266.92 1213.24 L1267.5 1213.24 L1268.09 1213.24 L1268.68 1213.24 L1269.26 1213.24 L1269.85 1213.24 L1270.44 1213.24 L1271.02 1213.24 L1271.61 1213.24 L1272.19 1213.24 L1272.78 1213.24 L1273.37 1213.24 L1273.95 1213.24 L1274.54 1213.24 L1275.13 1213.24 L1275.71 1213.24 L1276.3 1213.24 L1276.89 1213.24 L1277.47 1213.24 L1278.06 1213.24 L1278.65 1213.24 L1279.23 1213.24 L1279.82 1213.24 L1280.4 1213.24 L1280.99 1213.24 L1281.58 1213.24 L1282.16 1213.24 L1282.75 1213.24 L1283.34 1213.24 L1283.92 1213.24 L1284.51 1213.24 L1285.1 1213.24 L1285.68 1213.24 L1286.27 1213.24 L1286.86 1213.24 L1287.44 1213.24 L1288.03 1213.24 L1288.61 1213.24 L1289.2 1213.24 L1289.79 1213.24 L1290.37 1213.24 L1290.96 1213.24 L1291.55 1213.24 L1292.13 1213.24 L1292.72 1213.24 L1293.31 1213.24 L1293.89 1213.24 L1294.48 1213.24 L1295.06 1213.24 L1295.65 1213.24 L1296.24 1213.24 L1296.82 1213.24 L1297.41 1213.24 L1298 1213.24 L1298.58 1213.24 L1299.17 1213.24 L1299.76 1213.24 L1300.34 1213.24 L1300.93 1213.24 L1301.52 1213.24 L1302.1 1213.24 L1302.69 1213.24 L1303.27 1213.24 L1303.86 1213.24 L1304.45 1213.24 L1305.03 1213.24 L1305.62 1213.24 L1306.21 1213.24 L1306.79 1213.24 L1307.38 1213.24 L1307.97 1213.24 L1308.55 1213.24 L1309.14 1213.24 L1309.73 1213.24 L1310.31 1213.24 L1310.9 1213.24 L1311.48 1213.24 L1312.07 1213.24 L1312.66 1213.24 L1313.24 1213.24 L1313.83 1213.24 L1314.42 1213.24 L1315 1213.24 L1315.59 1213.24 L1316.18 1213.24 L1316.76 1213.24 L1317.35 1213.24 L1317.93 1213.24 L1318.52 1213.24 L1319.11 1213.24 L1319.69 1213.24 L1320.28 1213.24 L1320.87 1213.24 L1321.45 1213.24 L1322.04 1213.24 L1322.63 1213.24 L1323.21 1213.24 L1323.8 1213.24 L1324.39 1213.24 L1324.97 1213.24 L1325.56 1213.24 L1326.14 1213.24 L1326.73 1213.24 L1327.32 1213.24 L1327.9 1213.24 L1328.49 1213.24 L1329.08 1213.24 L1329.66 1213.24 L1330.25 1213.24 L1330.84 1213.24 L1331.42 1213.24 L1332.01 1213.24 L1332.6 1213.24 L1333.18 1213.24 L1333.77 1213.24 L1334.35 1213.24 L1334.94 1213.24 L1335.53 1213.24 L1336.11 1213.24 L1336.7 1213.24 L1337.29 1213.24 L1337.87 1213.24 L1338.46 1213.24 L1339.05 1213.24 L1339.63 1213.24 L1340.22 1213.24 L1340.8 1213.24 L1341.39 1213.24 L1341.98 1213.24 L1342.56 1213.24 L1343.15 1213.24 L1343.74 1213.24 L1344.32 1213.24 L1344.91 1213.24 L1345.5 1213.24 L1346.08 1213.24 L1346.67 1213.24 L1347.26 1213.24 L1347.84 1213.24 L1348.43 1213.24 L1349.01 1213.24 L1349.6 1213.24 L1350.19 1213.24 L1350.77 1213.24 L1351.36 1213.24 L1351.95 1213.24 L1352.53 1213.24 L1353.12 1213.24 L1353.71 1213.24 L1354.29 1213.24 L1354.88 1213.24 L1355.47 1213.24 L1356.05 1213.24 L1356.64 1213.24 L1357.22 1213.24 L1357.81 1213.24 L1358.4 1213.24 L1358.98 1213.24 L1359.57 1213.24 L1360.16 1213.24 L1360.74 1213.24 L1361.33 1213.24 L1361.92 1213.24 L1362.5 1213.24 L1363.09 1213.24 L1363.68 1213.24 L1364.26 1213.24 L1364.85 1213.24 L1365.43 1213.24 L1366.02 1213.24 L1366.61 1213.24 L1367.19 1213.24 L1367.78 1213.24 L1368.37 1213.24 L1368.95 1213.24 L1369.54 1213.24 L1370.13 1213.24 L1370.71 1213.24 L1371.3 1213.24 L1371.88 1213.24 L1372.47 1213.24 L1373.06 1213.24 L1373.64 1213.24 L1374.23 1213.24 L1374.82 1213.24 L1375.4 1213.24 L1375.99 1213.24 L1376.58 1213.24 L1377.16 1213.24 L1377.75 1213.24 L1378.34 1213.24 L1378.92 1213.24 L1379.51 1213.24 L1380.09 1213.24 L1380.68 1213.24 L1381.27 1213.24 L1381.85 1213.24 L1382.44 1213.24 L1383.03 1213.24 L1383.61 1213.24 L1384.2 1213.24 L1384.79 1213.24 L1385.37 1213.24 L1385.96 1213.24 L1386.55 1213.24 L1387.13 1213.24 L1387.72 1213.24 L1388.3 1213.24 L1388.89 1213.24 L1389.48 1213.24 L1390.06 1213.24 L1390.65 1213.24 L1391.24 1213.24 L1391.82 1213.24 L1392.41 1213.24 L1393 1213.24 L1393.58 1213.24 L1394.17 1213.24 L1394.75 1213.24 L1395.34 1213.24 L1395.93 1213.24 L1396.51 1213.24 L1397.1 1213.24 L1397.69 1213.24 L1398.27 1213.24 L1398.86 1213.24 L1399.45 1213.24 L1400.03 1213.24 L1400.62 1213.24 L1401.21 1213.24 L1401.79 1213.24 L1402.38 1213.24 L1402.96 1213.24 L1403.55 1213.24 L1404.14 1213.24 L1404.72 1213.24 L1405.31 1213.24 L1405.9 1213.24 L1406.48 1213.24 L1407.07 1213.24 L1407.66 1213.24 L1408.24 1213.24 L1408.83 1213.24 L1409.42 1213.24 L1410 1213.24 L1410.59 1213.24 L1411.17 1213.24 L1411.76 1213.24 L1412.35 1213.24 L1412.93 1213.24 L1413.52 1213.24 L1414.11 1213.24 L1414.69 1213.24 L1415.28 1213.24 L1415.87 1213.24 L1416.45 1213.24 L1417.04 1213.24 L1417.63 1213.24 L1418.21 1213.24 L1418.8 1213.24 L1419.38 1213.24 L1419.97 1213.24 L1420.56 1213.24 L1421.14 1213.24 L1421.73 1213.24 L1422.32 1213.24 L1422.9 1213.24 L1423.49 1213.24 L1424.08 1213.24 L1424.66 1213.24 L1425.25 1213.24 L1425.83 1213.24 L1426.42 1213.24 L1427.01 1213.24 L1427.59 1213.24 L1428.18 1213.24 L1428.77 1213.24 L1429.35 1213.24 L1429.94 1213.24 L1430.53 1213.24 L1431.11 1213.24 L1431.7 1213.24 L1432.29 1213.24 L1432.87 1213.24 L1433.46 1213.24 L1434.04 1213.24 L1434.63 1213.24 L1435.22 1213.24 L1435.8 1213.24 L1436.39 1213.24 L1436.98 1213.24 L1437.56 1213.24 L1438.15 1213.24 L1438.74 1213.24 L1439.32 1213.24 L1439.91 1213.24 L1440.5 1213.24 L1441.08 1213.24 L1441.67 1213.24 L1442.25 1213.24 L1442.84 1213.24 L1443.43 1213.24 L1444.01 1213.24 L1444.6 1213.24 L1445.19 1213.24 L1445.77 1213.24 L1446.36 1213.24 L1446.95 1213.24 L1447.53 1213.24 L1448.12 1213.24 L1448.7 1213.24 L1449.29 1213.24 L1449.88 1213.24 L1450.46 1213.24 L1451.05 1213.24 L1451.64 1213.24 L1452.22 1213.24 L1452.81 1213.24 L1453.4 1213.24 L1453.98 1213.24 L1454.57 1213.24 L1455.16 1213.24 L1455.74 1213.24 L1456.33 1213.24 L1456.91 1213.24 L1457.5 1213.24 L1458.09 1213.24 L1458.67 1213.24 L1459.26 1213.24 L1459.85 1213.24 L1460.43 1213.24 L1461.02 1213.24 L1461.61 1213.24 L1462.19 1213.24 L1462.78 1213.24 L1463.37 1213.24 L1463.95 1213.24 L1464.54 1213.24 L1465.12 1213.24 L1465.71 1213.24 L1466.3 1213.24 L1466.88 1213.24 L1467.47 1213.24 L1468.06 1213.24 L1468.64 1213.24 L1469.23 1213.24 L1469.82 1213.24 L1470.4 1213.24 L1470.99 1213.24 L1471.57 1213.24 L1472.16 1213.24 L1472.75 1213.24 L1473.33 1213.24 L1473.92 1213.24 L1474.51 1213.24 L1475.09 1213.24 L1475.68 1213.24 L1476.27 1213.24 L1476.85 1213.24 L1477.44 1213.24 L1478.03 1213.24 L1478.61 1213.24 L1479.2 1213.24 L1479.78 1213.24 L1480.37 1213.24 L1480.96 1213.24 L1481.54 1213.24 L1482.13 1213.24 L1482.72 1213.24 L1483.3 1213.24 L1483.89 1213.24 L1484.48 1213.24 L1485.06 1213.24 L1485.65 1213.24 L1486.24 1213.24 L1486.82 1213.24 L1487.41 1213.24 L1487.99 1213.24 L1488.58 1213.24 L1489.17 1213.24 L1489.75 1213.24 L1490.34 1213.24 L1490.93 1213.24 L1491.51 1213.24 L1492.1 1213.24 L1492.69 1213.24 L1493.27 1213.24 L1493.86 1213.24 L1494.45 1213.24 L1495.03 1213.24 L1495.62 1213.24 L1496.2 1213.24 L1496.79 1213.24 L1497.38 1213.24 L1497.96 1213.24 L1498.55 1213.24 L1499.14 1213.24 L1499.72 1213.24 L1500.31 1213.24 L1500.9 1213.24 L1501.48 1213.24 L1502.07 1213.24 L1502.65 1213.24 L1503.24 1213.24 L1503.83 1213.24 L1504.41 1213.24 L1505 1213.24 L1505.59 1213.24 L1506.17 1213.24 L1506.76 1213.24 L1507.35 1213.24 L1507.93 1213.24 L1508.52 1213.24 L1509.11 1213.24 L1509.69 1213.24 L1510.28 1213.24 L1510.86 1213.24 L1511.45 1213.24 L1512.04 1213.24 L1512.62 1213.24 L1513.21 1213.24 L1513.8 1213.24 L1514.38 1213.24 L1514.97 1213.24 L1515.56 1213.24 L1516.14 1213.24 L1516.73 1213.24 L1517.32 1213.24 L1517.9 1213.24 L1518.49 1213.24 L1519.07 1213.24 L1519.66 1213.24 L1520.25 1213.24 L1520.83 1213.24 L1521.42 1213.24 L1522.01 1213.24 L1522.59 1213.24 L1523.18 1213.24 L1523.77 1213.24 L1524.35 1213.24 L1524.94 1213.24 L1525.52 1213.24 L1526.11 1213.24 L1526.7 1213.24 L1527.28 1213.24 L1527.87 1213.24 L1528.46 1213.24 L1529.04 1213.24 L1529.63 1213.24 L1530.22 1213.24 L1530.8 1213.24 L1531.39 1213.24 L1531.98 1213.24 L1532.56 1213.24 L1533.15 1213.24 L1533.73 1213.24 L1534.32 1213.24 L1534.91 1213.24 L1535.49 1213.24 L1536.08 1213.24 L1536.67 1213.24 L1537.25 1213.24 L1537.84 1213.24 L1538.43 1213.24 L1539.01 1213.24 L1539.6 1213.24 L1540.19 1213.24 L1540.77 1213.24 L1541.36 1213.24 L1541.94 1213.24 L1542.53 1213.24 L1543.12 1213.24 L1543.7 1213.24 L1544.29 1213.24 L1544.88 1213.24 L1545.46 1213.24 L1546.05 1213.24 L1546.64 1213.24 L1547.22 1213.24 L1547.81 1213.24 L1548.4 1213.24 L1548.98 1213.24 L1549.57 1213.24 L1550.15 1213.24 L1550.74 1213.24 L1551.33 1213.24 L1551.91 1213.24 L1552.5 1213.24 L1553.09 1213.24 L1553.67 1213.24 L1554.26 1213.24 L1554.85 1213.24 L1555.43 1213.24 L1556.02 1213.24 L1556.6 1213.24 L1557.19 1213.24 L1557.78 1213.24 L1558.36 1213.24 L1558.95 1213.24 L1559.54 1213.24 L1560.12 1213.24 L1560.71 1213.24 L1561.3 1213.24 L1561.88 1213.24 L1562.47 1213.24 L1563.06 1213.24 L1563.64 1213.24 L1564.23 1213.24 L1564.81 1213.24 L1565.4 1213.24 L1565.99 1213.24 L1566.57 1213.24 L1567.16 1213.24 L1567.75 1213.24 L1568.33 1213.24 L1568.92 1213.24 L1569.51 1213.24 L1570.09 1213.24 L1570.68 1213.24 L1571.27 1213.24 L1571.85 1213.24 L1572.44 1213.24 L1573.02 1213.24 L1573.61 1213.24 L1574.2 1213.24 L1574.78 1213.24 L1575.37 1213.24 L1575.96 1213.24 L1576.54 1213.24 L1577.13 1213.24 L1577.72 1213.24 L1578.3 1213.24 L1578.89 1213.24 L1579.47 1213.24 L1580.06 1213.24 L1580.65 1213.24 L1581.23 1213.24 L1581.82 1213.24 L1582.41 1213.24 L1582.99 1213.24 L1583.58 1213.24 L1584.17 1213.24 L1584.75 1213.24 L1585.34 1213.24 L1585.93 1213.24 L1586.51 1213.24 L1587.1 1213.24 L1587.68 1213.24 L1588.27 1213.24 L1588.86 1213.24 L1589.44 1213.24 L1590.03 1213.24 L1590.62 1213.24 L1591.2 1213.24 L1591.79 1213.24 L1592.38 1213.24 L1592.96 1213.24 L1593.55 1213.24 L1594.14 1213.24 L1594.72 1213.24 L1595.31 1213.24 L1595.89 1213.24 L1596.48 1213.24 L1597.07 1213.24 L1597.65 1213.24 L1598.24 1213.24 L1598.83 1213.24 L1599.41 1213.24 L1600 1213.24 L1600.59 1213.24 L1601.17 1213.24 L1601.76 1213.24 L1602.34 1213.24 L1602.93 1213.24 L1603.52 1213.24 L1604.1 1213.24 L1604.69 1213.24 L1605.28 1213.24 L1605.86 1213.24 L1606.45 1213.24 L1607.04 1213.24 L1607.62 1213.24 L1608.21 1213.24 L1608.8 1213.24 L1609.38 1213.24 L1609.97 1213.24 L1610.55 1213.24 L1611.14 1213.24 L1611.73 1213.24 L1612.31 1213.24 L1612.9 1213.24 L1613.49 1213.24 L1614.07 1213.24 L1614.66 1213.24 L1615.25 1213.24 L1615.83 1213.24 L1616.42 1213.24 L1617.01 1213.24 L1617.59 1213.24 L1618.18 1213.24 L1618.76 1213.24 L1619.35 1213.24 L1619.94 1213.24 L1620.52 1213.24 L1621.11 1213.24 L1621.7 1213.24 L1622.28 1213.24 L1622.87 1213.24 L1623.46 1213.24 L1624.04 1213.24 L1624.63 1213.24 L1625.22 1213.24 L1625.8 1213.24 L1626.39 1213.24 L1626.97 1213.24 L1627.56 1213.24 L1628.15 1213.24 L1628.73 1213.24 L1629.32 1213.24 L1629.91 1213.24 L1630.49 1213.24 L1631.08 1213.24 L1631.67 1213.24 L1632.25 1213.24 L1632.84 1213.24 L1633.42 1213.24 L1634.01 1213.24 L1634.6 1213.24 L1635.18 1213.24 L1635.77 1213.24 L1636.36 1213.24 L1636.94 1213.24 L1637.53 1213.24 L1638.12 1213.24 L1638.7 1213.24 L1639.29 1213.24 L1639.88 1213.24 L1640.46 1213.24 L1641.05 1213.24 L1641.63 1213.24 L1642.22 1213.24 L1642.81 1213.24 L1643.39 1213.24 L1643.98 1213.24 L1644.57 1213.24 L1645.15 1213.24 L1645.74 1213.24 L1646.33 1213.24 L1646.91 1213.24 L1647.5 1213.24 L1648.09 1213.24 L1648.67 1213.24 L1649.26 1213.24 L1649.84 1213.24 L1650.43 1213.24 L1651.02 1213.24 L1651.6 1213.24 L1652.19 1213.24 L1652.78 1213.24 L1653.36 1213.24 L1653.95 1213.24 L1654.54 1213.24 L1655.12 1213.24 L1655.71 1213.24 L1656.29 1213.24 L1656.88 1213.24 L1657.47 1213.24 L1658.05 1213.24 L1658.64 1213.24 L1659.23 1213.24 L1659.81 1213.24 L1660.4 1213.24 L1660.99 1213.24 L1661.57 1213.24 L1662.16 1213.24 L1662.75 1213.24 L1663.33 1213.24 L1663.92 1213.24 L1664.5 1213.24 L1665.09 1213.24 L1665.68 1213.24 L1666.26 1213.24 L1666.85 1213.24 L1667.44 1213.24 L1668.02 1213.24 L1668.61 1213.24 L1669.2 1213.24 L1669.78 1213.24 L1670.37 1213.24 L1670.96 1213.24 L1671.54 1213.24 L1672.13 1213.24 L1672.71 1213.24 L1673.3 1213.24 L1673.89 1213.24 L1674.47 1213.24 L1675.06 1213.24 L1675.65 1213.24 L1676.23 1213.24 L1676.82 1213.24 L1677.41 1213.24 L1677.99 1213.24 L1678.58 1213.24 L1679.17 1213.24 L1679.75 1213.24 L1680.34 1213.24 L1680.92 1213.24 L1681.51 1213.24 L1682.1 1213.24 L1682.68 1213.24 L1683.27 1213.24 L1683.86 1213.24 L1684.44 1213.24 L1685.03 1213.24 L1685.62 1213.24 L1686.2 1213.24 L1686.79 1213.24 L1687.37 1213.24 L1687.96 1213.24 L1688.55 1213.24 L1689.13 1213.24 L1689.72 1213.24 L1690.31 1213.24 L1690.89 1213.24 L1691.48 1213.24 L1692.07 1213.24 L1692.65 1213.24 L1693.24 1213.24 L1693.83 1213.24 L1694.41 1213.24 L1695 1213.24 L1695.58 1213.24 L1696.17 1213.24 L1696.76 1213.24 L1697.34 1213.24 L1697.93 1213.24 L1698.52 1213.24 L1699.1 1213.24 L1699.69 1213.24 L1700.28 1213.24 L1700.86 1213.24 L1701.45 1213.24 L1702.04 1213.24 L1702.62 1213.24 L1703.21 1213.24 L1703.79 1213.24 L1704.38 1213.24 L1704.97 1213.24 L1705.55 1213.24 L1706.14 1213.24 L1706.73 1213.24 L1707.31 1213.24 L1707.9 1213.24 L1708.49 1213.24 L1709.07 1213.24 L1709.66 1213.24 L1710.24 1213.24 L1710.83 1213.24 L1711.42 1213.24 L1712 1213.24 L1712.59 1213.24 L1713.18 1213.24 L1713.76 1213.24 L1714.35 1213.24 L1714.94 1213.24 L1715.52 1213.24 L1716.11 1213.24 L1716.7 1213.24 L1717.28 1213.24 L1717.87 1213.24 L1718.45 1213.24 L1719.04 1213.24 L1719.63 1213.24 L1720.21 1213.24 L1720.8 1213.24 L1721.39 1213.24 L1721.97 1213.24 L1722.56 1213.24 L1723.15 1213.24 L1723.73 1213.24 L1724.32 1213.24 L1724.91 1213.24 L1725.49 1213.24 L1726.08 1213.24 L1726.66 1213.24 L1727.25 1213.24 L1727.84 1213.24 L1728.42 1213.24 L1729.01 1213.24 L1729.6 1213.24 L1730.18 1213.24 L1730.77 1213.24 L1731.36 1213.24 L1731.94 1213.24 L1732.53 1213.24 L1733.11 1213.24 L1733.7 1213.24 L1734.29 1213.24 L1734.87 1213.24 L1735.46 1213.24 L1736.05 1213.24 L1736.63 1213.24 L1737.22 1213.24 L1737.81 1213.24 L1738.39 1213.24 L1738.98 1213.24 L1739.57 1213.24 L1740.15 1213.24 L1740.74 1213.24 L1741.32 1213.24 L1741.91 1213.24 L1742.5 1213.24 L1743.08 1213.24 L1743.67 1213.24 L1744.26 1213.24 L1744.84 1213.24 L1745.43 1213.24 L1746.02 1213.24 L1746.6 1213.24 L1747.19 1213.24 L1747.78 1213.24 L1748.36 1213.24 L1748.95 1213.24 L1749.53 1213.24 L1750.12 1213.24 L1750.71 1213.24 L1751.29 1213.24 L1751.88 1213.24 L1752.47 1213.24 L1753.05 1213.24 L1753.64 1213.24 L1754.23 1213.24 L1754.81 1213.24 L1755.4 1213.24 L1755.99 1213.24 L1756.57 1213.24 L1757.16 1213.24 L1757.74 1213.24 L1758.33 1213.24 L1758.92 1213.24 L1759.5 1213.24 L1760.09 1213.24 L1760.68 1213.24 L1761.26 1213.24 L1761.85 1213.24 L1762.44 1213.24 L1763.02 1213.24 L1763.61 1213.24 L1764.19 1213.24 L1764.78 1213.24 L1765.37 1213.24 L1765.95 1213.24 L1766.54 1213.24 L1767.13 1213.24 L1767.71 1213.24 L1768.3 1213.24 L1768.89 1213.24 L1769.47 1213.24 L1770.06 1213.24 L1770.65 1213.24 L1771.23 1213.24 L1771.82 1213.24 L1772.4 1213.24 L1772.99 1213.24 L1773.58 1213.24 L1774.16 1213.24 L1774.75 1213.24 L1775.34 1213.24 L1775.92 1213.24 L1776.51 1213.24 L1777.1 1213.24 L1777.68 1213.24 L1778.27 1213.24 L1778.86 1213.24 L1779.44 1213.24 L1780.03 1213.24 L1780.61 1213.24 L1781.2 1213.24 L1781.79 1213.24 L1782.37 1213.24 L1782.96 1213.24 L1783.55 1213.24 L1784.13 1213.24 L1784.72 1213.24 L1785.31 1213.24 L1785.89 1213.24 L1786.48 1213.24 L1787.06 1213.24 L1787.65 1213.24 L1788.24 1213.24 L1788.82 1213.24 L1789.41 1213.24 L1790 1213.24 L1790.58 1213.24 L1791.17 1213.24 L1791.76 1213.24 L1792.34 1213.24 L1792.93 1213.24 L1793.52 1213.24 L1794.1 1213.24 L1794.69 1213.24 L1795.27 1213.24 L1795.86 1213.24 L1796.45 1213.24 L1797.03 1213.24 L1797.62 1213.24 L1798.21 1213.24 L1798.79 1213.24 L1799.38 1213.24 L1799.97 1213.24 L1800.55 1213.24 L1801.14 1213.24 L1801.73 1213.24 L1802.31 1213.24 L1802.9 1213.24 L1803.48 1213.24 L1804.07 1213.24 L1804.66 1213.24 L1805.24 1213.24 L1805.83 1213.24 L1806.42 1213.24 L1807 1213.24 L1807.59 1213.24 L1808.18 1213.24 L1808.76 1213.24 L1809.35 1213.24 L1809.94 1213.24 L1810.52 1213.24 L1811.11 1213.24 L1811.69 1213.24 L1812.28 1213.24 L1812.87 1213.24 L1813.45 1213.24 L1814.04 1213.24 L1814.63 1213.24 L1815.21 1213.24 L1815.8 1213.24 L1816.39 1213.24 L1816.97 1213.24 L1817.56 1213.24 L1818.14 1213.24 L1818.73 1213.24 L1819.32 1213.24 L1819.9 1213.24 L1820.49 1213.24 L1821.08 1213.24 L1821.66 1213.24 L1822.25 1213.24 L1822.84 1213.24 L1823.42 1213.24 L1824.01 1213.24 L1824.6 1213.24 L1825.18 1213.24 L1825.77 1213.24 L1826.35 1213.24 L1826.94 1213.24 L1827.53 1213.24 L1828.11 1213.24 L1828.7 1213.24 L1829.29 1213.24 L1829.87 1213.24 L1830.46 1213.24 L1831.05 1213.24 L1831.63 1213.24 L1832.22 1213.24 L1832.81 1213.24 L1833.39 1213.24 L1833.98 1213.24 L1834.56 1213.24 L1835.15 1213.24 L1835.74 1213.24 L1836.32 1213.24 L1836.91 1213.24 L1837.5 1213.24 L1838.08 1213.24 L1838.67 1213.24 L1839.26 1213.24 L1839.84 1213.24 L1840.43 1213.24 L1841.01 1213.24 L1841.6 1213.24 L1842.19 1213.24 L1842.77 1213.24 L1843.36 1213.24 L1843.95 1213.24 L1844.53 1213.24 L1845.12 1213.24 L1845.71 1213.24 L1846.29 1213.24 L1846.88 1213.24 L1847.47 1213.24 L1848.05 1213.24 L1848.64 1213.24 L1849.22 1213.24 L1849.81 1213.24 L1850.4 1213.24 L1850.98 1213.24 L1851.57 1213.24 L1852.16 1213.24 L1852.74 1213.24 L1853.33 1213.24 L1853.92 1213.24 L1854.5 1213.24 L1855.09 1213.24 L1855.68 1213.24 L1856.26 1213.24 L1856.85 1213.24 L1857.43 1213.24 L1858.02 1213.24 L1858.61 1213.24 L1859.19 1213.24 L1859.78 1213.24 L1860.37 1213.24 L1860.95 1213.24 L1861.54 1213.24 L1862.13 1213.24 L1862.71 1213.24 L1863.3 1213.24 L1863.88 1213.24 L1864.47 1213.24 L1865.06 1213.24 L1865.64 1213.24 L1866.23 1213.24 L1866.82 1213.24 L1867.4 1213.24 L1867.99 1213.24 L1868.58 1213.24 L1869.16 1213.24 L1869.75 1213.24 L1870.34 1213.24 L1870.92 1213.24 L1871.51 1213.24 L1872.09 1213.24 L1872.68 1213.24 L1873.27 1213.24 L1873.85 1213.24 L1874.44 1213.24 L1875.03 1213.24 L1875.61 1213.24 L1876.2 1213.24 L1876.79 1213.24 L1877.37 1213.24 L1877.96 1213.24 L1878.55 1213.24 L1879.13 1213.24 L1879.72 1213.24 L1880.3 1213.24 L1880.89 1213.24 L1881.48 1213.24 L1882.06 1213.24 L1882.65 1213.24 L1883.24 1213.24 L1883.82 1213.24 L1884.41 1213.24 L1885 1213.24 L1885.58 1213.24 L1886.17 1213.24 L1886.76 1213.24 L1887.34 1213.24 L1887.93 1213.24 L1888.51 1213.24 L1889.1 1213.24 L1889.69 1213.24 L1890.27 1213.24 L1890.86 1213.24 L1891.45 1213.24 L1892.03 1213.24 L1892.62 1213.24 L1893.21 1213.24 L1893.79 1213.24 L1894.38 1213.24 L1894.96 1213.24 L1895.55 1213.24 L1896.14 1213.24 L1896.72 1213.24 L1897.31 1213.24 L1897.9 1213.24 L1898.48 1213.24 L1899.07 1213.24 L1899.66 1213.24 L1900.24 1213.24 L1900.83 1213.24 L1901.42 1213.24 L1902 1213.24 L1902.59 1213.24 L1903.17 1213.24 L1903.76 1213.24 L1904.35 1213.24 L1904.93 1213.24 L1905.52 1213.24 L1906.11 1213.24 L1906.69 1213.24 L1907.28 1213.24 L1907.87 1213.24 L1908.45 1213.24 L1909.04 1213.24 L1909.63 1213.24 L1910.21 1213.24 L1910.8 1213.24 L1911.38 1213.24 L1911.97 1213.24 L1912.56 1213.24 L1913.14 1213.24 L1913.73 1213.24 L1914.32 1213.24 L1914.9 1213.24 L1915.49 1213.24 L1916.08 1213.24 L1916.66 1213.24 L1917.25 1213.24 L1917.83 1213.24 L1918.42 1213.24 L1919.01 1213.24 L1919.59 1213.24 L1920.18 1213.24 L1920.77 1213.24 L1921.35 1213.24 L1921.94 1213.24 L1922.53 1213.24 L1923.11 1213.24 L1923.7 1213.24 L1924.29 1213.24 L1924.87 1213.24 L1925.46 1213.24 L1926.04 1213.24 L1926.63 1213.24 L1927.22 1213.24 L1927.8 1213.24 L1928.39 1213.24 L1928.98 1213.24 L1929.56 1213.24 L1930.15 1213.24 L1930.74 1213.24 L1931.32 1213.24 L1931.91 1213.24 L1932.5 1213.24 L1933.08 1213.24 L1933.67 1213.24 L1934.25 1213.24 L1934.84 1213.24 L1935.43 1213.24 L1936.01 1213.24 L1936.6 1213.24 L1937.19 1213.24 L1937.77 1213.24 L1938.36 1213.24 L1938.95 1213.24 L1939.53 1213.24 L1940.12 1213.24 L1940.71 1213.24 L1941.29 1213.24 L1941.88 1213.24 L1942.46 1213.24 L1943.05 1213.24 L1943.64 1213.24 L1944.22 1213.24 L1944.81 1213.24 L1945.4 1213.24 L1945.98 1213.24 L1946.57 1213.24 L1947.16 1213.24 L1947.74 1213.24 L1948.33 1213.24 L1948.91 1213.24 L1949.5 1213.24 L1950.09 1213.24 L1950.67 1213.24 L1951.26 1213.24 L1951.85 1213.24 L1952.43 1213.24 L1953.02 1213.24 L1953.61 1213.24 L1954.19 1213.24 L1954.78 1213.24 L1955.37 1213.24 L1955.95 1213.24 L1956.54 1213.24 L1957.12 1213.24 L1957.71 1213.24 L1958.3 1213.24 L1958.88 1213.24 L1959.47 1213.24 L1960.06 1213.24 L1960.64 1213.24 L1961.23 1213.24 L1961.82 1213.24 L1962.4 1213.24 L1962.99 1213.24 L1963.58 1213.24 L1964.16 1213.24 L1964.75 1213.24 L1965.33 1213.24 L1965.92 1213.24 L1966.51 1213.24 L1967.09 1213.24 L1967.68 1213.24 L1968.27 1213.24 L1968.85 1213.24 L1969.44 1213.24 L1970.03 1213.24 L1970.61 1213.24 L1971.2 1213.24 L1971.78 1213.24 L1972.37 1213.24 L1972.96 1213.24 L1973.54 1213.24 L1974.13 1213.24 L1974.72 1213.24 L1975.3 1213.24 L1975.89 1213.24 L1976.48 1213.24 L1977.06 1213.24 L1977.65 1213.24 L1978.24 1213.24 L1978.82 1213.24 L1979.41 1213.24 L1979.99 1213.24 L1980.58 1213.24 L1981.17 1213.24 L1981.75 1213.24 L1982.34 1213.24 L1982.93 1213.24 L1983.51 1213.24 L1984.1 1213.24 L1984.69 1213.24 L1985.27 1213.24 L1985.86 1213.24 L1986.45 1213.24 L1987.03 1213.24 L1987.62 1213.24 L1988.2 1213.24 L1988.79 1213.24 L1989.38 1213.24 L1989.96 1213.24 L1990.55 1213.24 L1991.14 1213.24 L1991.72 1213.24 L1992.31 1213.24 L1992.9 1213.24 L1993.48 1213.24 L1994.07 1213.24 L1994.65 1213.24 L1995.24 1213.24 L1995.83 1213.24 L1996.41 1213.24 L1997 1213.24 L1997.59 1213.24 L1998.17 1213.24 L1998.76 1213.24 L1999.35 1213.24 L1999.93 1213.24 L2000.52 1213.24 L2001.11 1213.24 L2001.69 1213.24 L2002.28 1213.24 L2002.86 1213.24 L2003.45 1213.24 L2004.04 1213.24 L2004.62 1213.24 L2005.21 1213.24 L2005.8 1213.24 L2006.38 1213.24 L2006.97 1213.24 L2007.56 1213.24 L2008.14 1213.24 L2008.73 1213.24 L2009.32 1213.24 L2009.9 1213.24 L2010.49 1213.24 L2011.07 1213.24 L2011.66 1213.24 L2012.25 1213.24 L2012.83 1213.24 L2013.42 1213.24 L2014.01 1213.24 L2014.59 1213.24 L2015.18 1213.24 L2015.77 1213.24 L2016.35 1213.24 L2016.94 1213.24 L2017.53 1213.24 L2018.11 1213.24 L2018.7 1213.24 L2019.28 1213.24 L2019.87 1213.24 L2020.46 1213.24 L2021.04 1213.24 L2021.63 1213.24 L2022.22 1213.24 L2022.8 1213.24 L2023.39 1213.24 L2023.98 1213.24 L2024.56 1213.24 L2025.15 1213.24 L2025.73 1213.24 L2026.32 1213.24 L2026.91 1213.24 L2027.49 1213.24 L2028.08 1213.24 L2028.67 1213.24 L2029.25 1213.24 L2029.84 1213.24 L2030.43 1213.24 L2031.01 1213.24 L2031.6 1213.24 L2032.19 1213.24 L2032.77 1213.24 L2033.36 1213.24 L2033.94 1213.24 L2034.53 1213.24 L2035.12 1213.24 L2035.7 1213.24 L2036.29 1213.24 L2036.88 1213.24 L2037.46 1213.24 L2038.05 1213.24 L2038.64 1213.24 L2039.22 1213.24 L2039.81 1213.24 L2040.4 1213.24 L2040.98 1213.24 L2041.57 1213.24 L2042.15 1213.24 L2042.74 1213.24 L2043.33 1213.24 L2043.91 1213.24 L2044.5 1213.24 L2045.09 1213.24 L2045.67 1213.24 L2046.26 1213.24 L2046.85 1213.24 L2047.43 1213.24 L2048.02 1213.24 L2048.6 1213.24 L2049.19 1213.24 L2049.78 1213.24 L2050.36 1213.24 L2050.95 1213.24 L2051.54 1213.24 L2052.12 1213.24 L2052.71 1213.24 L2053.3 1213.24 L2053.88 1213.24 L2054.47 1213.24 L2055.06 1213.24 L2055.64 1213.24 L2056.23 1213.24 L2056.81 1213.24 L2057.4 1213.24 L2057.99 1213.24 L2058.57 1213.24 L2059.16 1213.24 L2059.75 1213.24 L2060.33 1213.24 L2060.92 1213.24 L2061.51 1213.24 L2062.09 1213.24 L2062.68 1213.24 L2063.27 1213.24 L2063.85 1213.24 L2064.44 1213.24 L2065.02 1213.24 L2065.61 1213.24 L2066.2 1213.24 L2066.78 1213.24 L2067.37 1213.24 L2067.96 1213.24 L2068.54 1213.24 L2069.13 1213.24 L2069.72 1213.24 L2070.3 1213.24 L2070.89 1213.24 L2071.48 1213.24 L2072.06 1213.24 L2072.65 1213.24 L2073.23 1213.24 L2073.82 1213.24 L2074.41 1213.24 L2074.99 1213.24 L2075.58 1213.24 L2076.17 1213.24 L2076.75 1213.24 L2077.34 1213.24 L2077.93 1213.24 L2078.51 1213.24 L2079.1 1213.24 L2079.68 1213.24 L2080.27 1213.24 L2080.86 1213.24 L2081.44 1213.24 L2082.03 1213.24 L2082.62 1213.24 L2083.2 1213.24 L2083.79 1213.24 L2084.38 1213.24 L2084.96 1213.24 L2085.55 1213.24 L2086.14 1213.24 L2086.72 1213.24 L2087.31 1213.24 L2087.89 1213.24 L2088.48 1213.24 L2089.07 1213.24 L2089.65 1213.24 L2090.24 1213.24 L2090.83 1213.24 L2091.41 1213.24 L2092 1213.24 L2092.59 1213.24 L2093.17 1213.24 L2093.76 1213.24 L2094.35 1213.24 L2094.93 1213.24 L2095.52 1213.24 L2096.1 1213.24 L2096.69 1213.24 L2097.28 1213.24 L2097.86 1213.24 L2098.45 1213.24 L2099.04 1213.24 L2099.62 1213.24 L2100.21 1213.24 L2100.8 1213.24 L2101.38 1213.24 L2101.97 1213.24 L2102.55 1213.24 L2103.14 1213.24 L2103.73 1213.24 L2104.31 1213.24 L2104.9 1213.24 L2105.49 1213.24 L2106.07 1213.24 L2106.66 1213.24 L2107.25 1213.24 L2107.83 1213.24 L2108.42 1213.24 L2109.01 1213.24 L2109.59 1213.24 L2110.18 1213.24 L2110.76 1213.24 L2111.35 1213.24 L2111.94 1213.24 L2112.52 1213.24 L2113.11 1213.24 L2113.7 1213.24 L2114.28 1213.24 L2114.87 1213.24 L2115.46 1213.24 L2116.04 1213.24 L2116.63 1213.24 L2117.22 1213.24 L2117.8 1213.24 L2118.39 1213.24 L2118.97 1213.24 L2119.56 1213.24 L2120.15 1213.24 L2120.73 1213.24 L2121.32 1213.24 L2121.91 1213.24 L2122.49 1213.24 L2123.08 1213.24 L2123.67 1213.24 L2124.25 1213.24 L2124.84 1213.24 L2125.42 1213.24 L2126.01 1213.24 L2126.6 1213.24 L2127.18 1213.24 L2127.77 1213.24 L2128.36 1213.24 L2128.94 1213.24 L2129.53 1213.24 L2130.12 1213.24 L2130.7 1213.24 L2131.29 1213.24 L2131.88 1213.24 L2132.46 1213.24 L2133.05 1213.24 L2133.63 1213.24 L2134.22 1213.24 L2134.81 1213.24 L2135.39 1213.24 L2135.98 1213.24 L2136.57 1213.24 L2137.15 1213.24 L2137.74 1213.24 L2138.33 1213.24 L2138.91 1213.24 L2139.5 1213.24 L2140.09 1213.24 L2140.67 1213.24 L2141.26 1213.24 L2141.84 1213.24 L2142.43 1213.24 L2143.02 1213.24 L2143.6 1213.24 L2144.19 1213.24 L2144.78 1213.24 L2145.36 1213.24 L2145.95 1213.24 L2146.54 1213.24 L2147.12 1213.24 L2147.71 1213.24 L2148.3 1213.24 L2148.88 1213.24 L2149.47 1213.24 L2150.05 1213.24 L2150.64 1213.24 L2151.23 1213.24 L2151.81 1213.24 L2152.4 1213.24 L2152.99 1213.24 L2153.57 1213.24 L2154.16 1213.24 L2154.75 1213.24 L2155.33 1213.24 L2155.92 1213.24 L2156.5 1213.24 L2157.09 1213.24 L2157.68 1213.24 L2158.26 1213.24 L2158.26 1213.07 L2157.68 1213.07 L2157.09 1213.07 L2156.5 1213.07 L2155.92 1213.07 L2155.33 1213.07 L2154.75 1213.07 L2154.16 1213.07 L2153.57 1213.07 L2152.99 1213.07 L2152.4 1213.07 L2151.81 1213.07 L2151.23 1213.07 L2150.64 1213.07 L2150.05 1213.07 L2149.47 1213.07 L2148.88 1213.07 L2148.3 1213.07 L2147.71 1213.07 L2147.12 1213.07 L2146.54 1213.07 L2145.95 1213.07 L2145.36 1213.07 L2144.78 1213.07 L2144.19 1213.07 L2143.6 1213.07 L2143.02 1213.07 L2142.43 1213.07 L2141.84 1213.07 L2141.26 1213.07 L2140.67 1213.07 L2140.09 1213.07 L2139.5 1213.07 L2138.91 1213.07 L2138.33 1213.07 L2137.74 1213.07 L2137.15 1213.07 L2136.57 1213.07 L2135.98 1213.07 L2135.39 1213.07 L2134.81 1213.07 L2134.22 1213.07 L2133.63 1213.07 L2133.05 1213.07 L2132.46 1213.07 L2131.88 1213.07 L2131.29 1213.07 L2130.7 1213.07 L2130.12 1213.07 L2129.53 1213.07 L2128.94 1213.07 L2128.36 1213.07 L2127.77 1213.07 L2127.18 1213.07 L2126.6 1213.07 L2126.01 1213.07 L2125.42 1213.07 L2124.84 1213.07 L2124.25 1213.07 L2123.67 1213.07 L2123.08 1213.07 L2122.49 1213.07 L2121.91 1213.07 L2121.32 1213.07 L2120.73 1213.07 L2120.15 1213.07 L2119.56 1213.07 L2118.97 1213.07 L2118.39 1213.07 L2117.8 1213.07 L2117.22 1213.07 L2116.63 1213.07 L2116.04 1213.07 L2115.46 1213.07 L2114.87 1213.07 L2114.28 1213.07 L2113.7 1213.07 L2113.11 1213.07 L2112.52 1213.07 L2111.94 1213.07 L2111.35 1213.07 L2110.76 1213.07 L2110.18 1213.07 L2109.59 1213.07 L2109.01 1213.07 L2108.42 1213.07 L2107.83 1213.07 L2107.25 1213.07 L2106.66 1213.07 L2106.07 1213.07 L2105.49 1213.07 L2104.9 1213.07 L2104.31 1213.07 L2103.73 1213.07 L2103.14 1213.07 L2102.55 1213.07 L2101.97 1213.07 L2101.38 1213.07 L2100.8 1213.07 L2100.21 1213.07 L2099.62 1213.07 L2099.04 1213.07 L2098.45 1213.07 L2097.86 1213.07 L2097.28 1213.07 L2096.69 1213.07 L2096.1 1213.07 L2095.52 1213.07 L2094.93 1213.07 L2094.35 1213.07 L2093.76 1213.07 L2093.17 1213.07 L2092.59 1213.07 L2092 1213.07 L2091.41 1213.07 L2090.83 1213.07 L2090.24 1213.07 L2089.65 1213.07 L2089.07 1213.07 L2088.48 1213.07 L2087.89 1213.07 L2087.31 1213.07 L2086.72 1213.07 L2086.14 1213.07 L2085.55 1213.07 L2084.96 1213.07 L2084.38 1213.07 L2083.79 1213.07 L2083.2 1213.07 L2082.62 1213.07 L2082.03 1213.07 L2081.44 1213.07 L2080.86 1213.07 L2080.27 1213.07 L2079.68 1213.07 L2079.1 1213.07 L2078.51 1213.07 L2077.93 1213.07 L2077.34 1213.07 L2076.75 1213.07 L2076.17 1213.07 L2075.58 1213.07 L2074.99 1213.07 L2074.41 1213.07 L2073.82 1213.07 L2073.23 1213.07 L2072.65 1213.07 L2072.06 1213.07 L2071.48 1213.07 L2070.89 1213.07 L2070.3 1213.07 L2069.72 1213.07 L2069.13 1213.07 L2068.54 1213.07 L2067.96 1213.07 L2067.37 1213.07 L2066.78 1213.07 L2066.2 1213.07 L2065.61 1213.07 L2065.02 1213.07 L2064.44 1213.07 L2063.85 1213.07 L2063.27 1213.07 L2062.68 1213.07 L2062.09 1213.07 L2061.51 1213.07 L2060.92 1213.07 L2060.33 1213.07 L2059.75 1213.07 L2059.16 1213.07 L2058.57 1213.07 L2057.99 1213.07 L2057.4 1213.07 L2056.81 1213.07 L2056.23 1213.07 L2055.64 1213.07 L2055.06 1213.07 L2054.47 1213.07 L2053.88 1213.07 L2053.3 1213.07 L2052.71 1213.07 L2052.12 1213.07 L2051.54 1213.07 L2050.95 1213.07 L2050.36 1213.07 L2049.78 1213.07 L2049.19 1213.07 L2048.6 1213.07 L2048.02 1213.07 L2047.43 1213.07 L2046.85 1213.07 L2046.26 1213.07 L2045.67 1213.07 L2045.09 1213.07 L2044.5 1213.07 L2043.91 1213.07 L2043.33 1213.07 L2042.74 1213.07 L2042.15 1213.07 L2041.57 1213.07 L2040.98 1213.07 L2040.4 1213.07 L2039.81 1213.07 L2039.22 1213.07 L2038.64 1213.07 L2038.05 1213.07 L2037.46 1213.07 L2036.88 1213.07 L2036.29 1213.07 L2035.7 1213.07 L2035.12 1213.07 L2034.53 1213.07 L2033.94 1213.07 L2033.36 1213.07 L2032.77 1213.07 L2032.19 1213.07 L2031.6 1213.07 L2031.01 1213.07 L2030.43 1213.07 L2029.84 1213.07 L2029.25 1213.07 L2028.67 1213.07 L2028.08 1213.07 L2027.49 1213.07 L2026.91 1213.07 L2026.32 1213.07 L2025.73 1213.07 L2025.15 1213.07 L2024.56 1213.07 L2023.98 1213.07 L2023.39 1213.07 L2022.8 1213.07 L2022.22 1213.07 L2021.63 1213.07 L2021.04 1213.07 L2020.46 1213.07 L2019.87 1213.07 L2019.28 1213.07 L2018.7 1213.07 L2018.11 1213.07 L2017.53 1213.07 L2016.94 1213.07 L2016.35 1213.07 L2015.77 1213.07 L2015.18 1213.07 L2014.59 1213.07 L2014.01 1213.07 L2013.42 1213.07 L2012.83 1213.07 L2012.25 1213.07 L2011.66 1213.07 L2011.07 1213.07 L2010.49 1213.07 L2009.9 1213.07 L2009.32 1213.07 L2008.73 1213.07 L2008.14 1213.07 L2007.56 1213.07 L2006.97 1213.07 L2006.38 1213.07 L2005.8 1213.07 L2005.21 1213.07 L2004.62 1213.07 L2004.04 1213.07 L2003.45 1213.07 L2002.86 1213.07 L2002.28 1213.07 L2001.69 1213.07 L2001.11 1213.07 L2000.52 1213.07 L1999.93 1213.07 L1999.35 1213.07 L1998.76 1213.07 L1998.17 1213.07 L1997.59 1213.07 L1997 1213.07 L1996.41 1213.07 L1995.83 1213.07 L1995.24 1213.07 L1994.65 1213.07 L1994.07 1213.07 L1993.48 1213.07 L1992.9 1213.07 L1992.31 1213.07 L1991.72 1213.07 L1991.14 1213.07 L1990.55 1213.07 L1989.96 1213.07 L1989.38 1213.07 L1988.79 1213.07 L1988.2 1213.07 L1987.62 1213.07 L1987.03 1213.07 L1986.45 1213.07 L1985.86 1213.07 L1985.27 1213.07 L1984.69 1213.07 L1984.1 1213.07 L1983.51 1213.07 L1982.93 1213.07 L1982.34 1213.07 L1981.75 1213.07 L1981.17 1213.07 L1980.58 1213.07 L1979.99 1213.07 L1979.41 1213.07 L1978.82 1213.07 L1978.24 1213.07 L1977.65 1213.07 L1977.06 1213.07 L1976.48 1213.07 L1975.89 1213.07 L1975.3 1213.07 L1974.72 1213.07 L1974.13 1213.07 L1973.54 1213.07 L1972.96 1213.07 L1972.37 1213.07 L1971.78 1213.07 L1971.2 1213.07 L1970.61 1213.07 L1970.03 1213.07 L1969.44 1213.07 L1968.85 1213.07 L1968.27 1213.07 L1967.68 1213.07 L1967.09 1213.07 L1966.51 1213.07 L1965.92 1213.07 L1965.33 1213.07 L1964.75 1213.07 L1964.16 1213.07 L1963.58 1213.07 L1962.99 1213.07 L1962.4 1213.07 L1961.82 1213.07 L1961.23 1213.07 L1960.64 1213.07 L1960.06 1213.07 L1959.47 1213.07 L1958.88 1213.07 L1958.3 1213.07 L1957.71 1213.07 L1957.12 1213.07 L1956.54 1213.07 L1955.95 1213.07 L1955.37 1213.07 L1954.78 1213.07 L1954.19 1213.07 L1953.61 1213.07 L1953.02 1213.07 L1952.43 1213.07 L1951.85 1213.07 L1951.26 1213.07 L1950.67 1213.07 L1950.09 1213.07 L1949.5 1213.07 L1948.91 1213.07 L1948.33 1213.07 L1947.74 1213.07 L1947.16 1213.07 L1946.57 1213.07 L1945.98 1213.07 L1945.4 1213.07 L1944.81 1213.07 L1944.22 1213.07 L1943.64 1213.07 L1943.05 1213.07 L1942.46 1213.07 L1941.88 1213.07 L1941.29 1213.07 L1940.71 1213.07 L1940.12 1213.07 L1939.53 1213.07 L1938.95 1213.07 L1938.36 1213.07 L1937.77 1213.07 L1937.19 1213.07 L1936.6 1213.07 L1936.01 1213.07 L1935.43 1213.07 L1934.84 1213.07 L1934.25 1213.07 L1933.67 1213.07 L1933.08 1213.07 L1932.5 1213.07 L1931.91 1213.07 L1931.32 1213.07 L1930.74 1213.07 L1930.15 1213.07 L1929.56 1213.07 L1928.98 1213.07 L1928.39 1213.07 L1927.8 1213.07 L1927.22 1213.07 L1926.63 1213.07 L1926.04 1213.07 L1925.46 1213.07 L1924.87 1213.07 L1924.29 1213.07 L1923.7 1213.07 L1923.11 1213.07 L1922.53 1213.07 L1921.94 1213.07 L1921.35 1213.07 L1920.77 1213.07 L1920.18 1213.07 L1919.59 1213.07 L1919.01 1213.07 L1918.42 1213.07 L1917.83 1213.07 L1917.25 1213.07 L1916.66 1213.07 L1916.08 1213.07 L1915.49 1213.07 L1914.9 1213.07 L1914.32 1213.07 L1913.73 1213.07 L1913.14 1213.07 L1912.56 1213.07 L1911.97 1213.07 L1911.38 1213.07 L1910.8 1213.07 L1910.21 1213.07 L1909.63 1213.07 L1909.04 1213.07 L1908.45 1213.07 L1907.87 1213.07 L1907.28 1213.07 L1906.69 1213.07 L1906.11 1213.07 L1905.52 1213.07 L1904.93 1213.07 L1904.35 1213.07 L1903.76 1213.07 L1903.17 1213.07 L1902.59 1213.07 L1902 1213.07 L1901.42 1213.07 L1900.83 1213.07 L1900.24 1213.07 L1899.66 1213.07 L1899.07 1213.07 L1898.48 1213.07 L1897.9 1213.07 L1897.31 1213.07 L1896.72 1213.07 L1896.14 1213.07 L1895.55 1213.07 L1894.96 1213.07 L1894.38 1213.07 L1893.79 1213.07 L1893.21 1213.07 L1892.62 1213.07 L1892.03 1213.07 L1891.45 1213.07 L1890.86 1213.07 L1890.27 1213.07 L1889.69 1213.07 L1889.1 1213.07 L1888.51 1213.07 L1887.93 1213.07 L1887.34 1213.07 L1886.76 1213.07 L1886.17 1213.07 L1885.58 1213.07 L1885 1213.07 L1884.41 1213.07 L1883.82 1213.07 L1883.24 1213.07 L1882.65 1213.07 L1882.06 1213.07 L1881.48 1213.07 L1880.89 1213.07 L1880.3 1213.07 L1879.72 1213.07 L1879.13 1213.07 L1878.55 1213.07 L1877.96 1213.07 L1877.37 1213.07 L1876.79 1213.07 L1876.2 1213.07 L1875.61 1213.07 L1875.03 1213.07 L1874.44 1213.07 L1873.85 1213.07 L1873.27 1213.07 L1872.68 1213.07 L1872.09 1213.07 L1871.51 1213.07 L1870.92 1213.07 L1870.34 1213.07 L1869.75 1213.07 L1869.16 1213.07 L1868.58 1213.07 L1867.99 1213.07 L1867.4 1213.07 L1866.82 1213.07 L1866.23 1213.07 L1865.64 1213.07 L1865.06 1213.07 L1864.47 1213.07 L1863.88 1213.07 L1863.3 1213.07 L1862.71 1213.07 L1862.13 1213.07 L1861.54 1213.07 L1860.95 1213.07 L1860.37 1213.07 L1859.78 1213.07 L1859.19 1213.07 L1858.61 1213.07 L1858.02 1213.07 L1857.43 1213.07 L1856.85 1213.07 L1856.26 1213.07 L1855.68 1213.07 L1855.09 1213.07 L1854.5 1213.07 L1853.92 1213.07 L1853.33 1213.07 L1852.74 1213.07 L1852.16 1213.07 L1851.57 1213.07 L1850.98 1213.07 L1850.4 1213.07 L1849.81 1213.07 L1849.22 1213.07 L1848.64 1213.07 L1848.05 1213.07 L1847.47 1213.07 L1846.88 1213.07 L1846.29 1213.07 L1845.71 1213.07 L1845.12 1213.07 L1844.53 1213.07 L1843.95 1213.07 L1843.36 1213.07 L1842.77 1213.07 L1842.19 1213.07 L1841.6 1213.07 L1841.01 1213.07 L1840.43 1213.07 L1839.84 1213.07 L1839.26 1213.07 L1838.67 1213.07 L1838.08 1213.07 L1837.5 1213.07 L1836.91 1213.07 L1836.32 1213.07 L1835.74 1213.07 L1835.15 1213.07 L1834.56 1213.07 L1833.98 1213.07 L1833.39 1213.07 L1832.81 1213.07 L1832.22 1213.07 L1831.63 1213.07 L1831.05 1213.07 L1830.46 1213.07 L1829.87 1213.07 L1829.29 1213.07 L1828.7 1213.07 L1828.11 1213.07 L1827.53 1213.07 L1826.94 1213.07 L1826.35 1213.07 L1825.77 1213.07 L1825.18 1213.07 L1824.6 1213.07 L1824.01 1213.07 L1823.42 1213.07 L1822.84 1213.07 L1822.25 1213.07 L1821.66 1213.07 L1821.08 1213.07 L1820.49 1213.07 L1819.9 1213.07 L1819.32 1213.07 L1818.73 1213.07 L1818.14 1213.07 L1817.56 1213.07 L1816.97 1213.07 L1816.39 1213.07 L1815.8 1213.07 L1815.21 1213.07 L1814.63 1213.07 L1814.04 1213.07 L1813.45 1213.07 L1812.87 1213.07 L1812.28 1213.07 L1811.69 1213.07 L1811.11 1213.07 L1810.52 1213.07 L1809.94 1213.07 L1809.35 1213.07 L1808.76 1213.07 L1808.18 1213.07 L1807.59 1213.07 L1807 1213.07 L1806.42 1213.07 L1805.83 1213.07 L1805.24 1213.07 L1804.66 1213.07 L1804.07 1213.07 L1803.48 1213.07 L1802.9 1213.07 L1802.31 1213.07 L1801.73 1213.07 L1801.14 1213.07 L1800.55 1213.07 L1799.97 1213.07 L1799.38 1213.07 L1798.79 1213.07 L1798.21 1213.07 L1797.62 1213.07 L1797.03 1213.07 L1796.45 1213.07 L1795.86 1213.07 L1795.27 1213.07 L1794.69 1213.07 L1794.1 1213.07 L1793.52 1213.07 L1792.93 1213.07 L1792.34 1213.07 L1791.76 1213.07 L1791.17 1213.07 L1790.58 1213.07 L1790 1213.07 L1789.41 1213.07 L1788.82 1213.07 L1788.24 1213.07 L1787.65 1213.07 L1787.06 1213.07 L1786.48 1213.07 L1785.89 1213.07 L1785.31 1213.07 L1784.72 1213.07 L1784.13 1213.07 L1783.55 1213.07 L1782.96 1213.07 L1782.37 1213.07 L1781.79 1213.07 L1781.2 1213.07 L1780.61 1213.07 L1780.03 1213.07 L1779.44 1213.07 L1778.86 1213.07 L1778.27 1213.07 L1777.68 1213.07 L1777.1 1213.07 L1776.51 1213.07 L1775.92 1213.07 L1775.34 1213.07 L1774.75 1213.07 L1774.16 1213.07 L1773.58 1213.07 L1772.99 1213.07 L1772.4 1213.07 L1771.82 1213.07 L1771.23 1213.07 L1770.65 1213.07 L1770.06 1213.07 L1769.47 1213.07 L1768.89 1213.07 L1768.3 1213.07 L1767.71 1213.07 L1767.13 1213.07 L1766.54 1213.07 L1765.95 1213.07 L1765.37 1213.07 L1764.78 1213.07 L1764.19 1213.07 L1763.61 1213.07 L1763.02 1213.07 L1762.44 1213.07 L1761.85 1213.07 L1761.26 1213.07 L1760.68 1213.07 L1760.09 1213.07 L1759.5 1213.07 L1758.92 1213.07 L1758.33 1213.07 L1757.74 1213.07 L1757.16 1213.07 L1756.57 1213.07 L1755.99 1213.07 L1755.4 1213.07 L1754.81 1213.07 L1754.23 1213.07 L1753.64 1213.07 L1753.05 1213.07 L1752.47 1213.07 L1751.88 1213.07 L1751.29 1213.07 L1750.71 1213.07 L1750.12 1213.07 L1749.53 1213.07 L1748.95 1213.07 L1748.36 1213.07 L1747.78 1213.07 L1747.19 1213.07 L1746.6 1213.07 L1746.02 1213.07 L1745.43 1213.07 L1744.84 1213.07 L1744.26 1213.07 L1743.67 1213.07 L1743.08 1213.07 L1742.5 1213.07 L1741.91 1213.07 L1741.32 1213.07 L1740.74 1213.07 L1740.15 1213.07 L1739.57 1213.07 L1738.98 1213.07 L1738.39 1213.07 L1737.81 1213.07 L1737.22 1213.07 L1736.63 1213.07 L1736.05 1213.07 L1735.46 1213.07 L1734.87 1213.07 L1734.29 1213.07 L1733.7 1213.07 L1733.11 1213.07 L1732.53 1213.07 L1731.94 1213.07 L1731.36 1213.07 L1730.77 1213.07 L1730.18 1213.07 L1729.6 1213.07 L1729.01 1213.07 L1728.42 1213.07 L1727.84 1213.07 L1727.25 1213.07 L1726.66 1213.07 L1726.08 1213.07 L1725.49 1213.07 L1724.91 1213.07 L1724.32 1213.07 L1723.73 1213.07 L1723.15 1213.07 L1722.56 1213.07 L1721.97 1213.07 L1721.39 1213.07 L1720.8 1213.07 L1720.21 1213.07 L1719.63 1213.07 L1719.04 1213.07 L1718.45 1213.07 L1717.87 1213.07 L1717.28 1213.07 L1716.7 1213.07 L1716.11 1213.07 L1715.52 1213.07 L1714.94 1213.07 L1714.35 1213.07 L1713.76 1213.07 L1713.18 1213.07 L1712.59 1213.07 L1712 1213.07 L1711.42 1213.07 L1710.83 1213.07 L1710.24 1213.07 L1709.66 1213.07 L1709.07 1213.07 L1708.49 1213.07 L1707.9 1213.07 L1707.31 1213.07 L1706.73 1213.07 L1706.14 1213.07 L1705.55 1213.07 L1704.97 1213.07 L1704.38 1213.07 L1703.79 1213.07 L1703.21 1213.07 L1702.62 1213.07 L1702.04 1213.07 L1701.45 1213.07 L1700.86 1213.07 L1700.28 1213.07 L1699.69 1213.07 L1699.1 1213.07 L1698.52 1213.07 L1697.93 1213.07 L1697.34 1213.07 L1696.76 1213.07 L1696.17 1213.07 L1695.58 1213.07 L1695 1213.07 L1694.41 1213.07 L1693.83 1213.07 L1693.24 1213.07 L1692.65 1213.07 L1692.07 1213.07 L1691.48 1213.07 L1690.89 1213.07 L1690.31 1213.07 L1689.72 1213.07 L1689.13 1213.07 L1688.55 1213.07 L1687.96 1213.07 L1687.37 1213.07 L1686.79 1213.07 L1686.2 1213.07 L1685.62 1213.07 L1685.03 1213.07 L1684.44 1213.07 L1683.86 1213.07 L1683.27 1213.07 L1682.68 1213.07 L1682.1 1213.07 L1681.51 1213.07 L1680.92 1213.07 L1680.34 1213.07 L1679.75 1213.07 L1679.17 1213.07 L1678.58 1213.07 L1677.99 1213.07 L1677.41 1213.07 L1676.82 1213.07 L1676.23 1213.07 L1675.65 1213.07 L1675.06 1213.07 L1674.47 1213.07 L1673.89 1213.07 L1673.3 1213.07 L1672.71 1213.07 L1672.13 1213.07 L1671.54 1213.07 L1670.96 1213.07 L1670.37 1213.07 L1669.78 1213.07 L1669.2 1213.07 L1668.61 1213.07 L1668.02 1213.07 L1667.44 1213.07 L1666.85 1213.07 L1666.26 1213.07 L1665.68 1213.07 L1665.09 1213.07 L1664.5 1213.07 L1663.92 1213.07 L1663.33 1213.07 L1662.75 1213.07 L1662.16 1213.07 L1661.57 1213.07 L1660.99 1213.07 L1660.4 1213.07 L1659.81 1213.07 L1659.23 1213.07 L1658.64 1213.07 L1658.05 1213.07 L1657.47 1213.07 L1656.88 1213.07 L1656.29 1213.07 L1655.71 1213.07 L1655.12 1213.07 L1654.54 1213.07 L1653.95 1213.07 L1653.36 1213.07 L1652.78 1213.07 L1652.19 1213.07 L1651.6 1213.07 L1651.02 1213.07 L1650.43 1213.07 L1649.84 1213.07 L1649.26 1213.07 L1648.67 1213.07 L1648.09 1213.07 L1647.5 1213.07 L1646.91 1213.07 L1646.33 1213.07 L1645.74 1213.07 L1645.15 1213.07 L1644.57 1213.07 L1643.98 1213.07 L1643.39 1213.07 L1642.81 1213.07 L1642.22 1213.07 L1641.63 1213.07 L1641.05 1213.07 L1640.46 1213.07 L1639.88 1213.07 L1639.29 1213.07 L1638.7 1213.07 L1638.12 1213.07 L1637.53 1213.07 L1636.94 1213.07 L1636.36 1213.07 L1635.77 1213.07 L1635.18 1213.07 L1634.6 1213.07 L1634.01 1213.07 L1633.42 1213.07 L1632.84 1213.07 L1632.25 1213.07 L1631.67 1213.07 L1631.08 1213.07 L1630.49 1213.07 L1629.91 1213.07 L1629.32 1213.07 L1628.73 1213.07 L1628.15 1213.07 L1627.56 1213.07 L1626.97 1213.07 L1626.39 1213.07 L1625.8 1213.07 L1625.22 1213.07 L1624.63 1213.07 L1624.04 1213.07 L1623.46 1213.07 L1622.87 1213.07 L1622.28 1213.07 L1621.7 1213.07 L1621.11 1213.07 L1620.52 1213.07 L1619.94 1213.07 L1619.35 1213.07 L1618.76 1213.07 L1618.18 1213.07 L1617.59 1213.07 L1617.01 1213.07 L1616.42 1213.07 L1615.83 1213.07 L1615.25 1213.07 L1614.66 1213.07 L1614.07 1213.07 L1613.49 1213.07 L1612.9 1213.07 L1612.31 1213.07 L1611.73 1213.07 L1611.14 1213.07 L1610.55 1213.07 L1609.97 1213.07 L1609.38 1213.07 L1608.8 1213.07 L1608.21 1213.07 L1607.62 1213.07 L1607.04 1213.07 L1606.45 1213.07 L1605.86 1213.07 L1605.28 1213.07 L1604.69 1213.07 L1604.1 1213.07 L1603.52 1213.07 L1602.93 1213.07 L1602.34 1213.07 L1601.76 1213.07 L1601.17 1213.07 L1600.59 1213.07 L1600 1213.07 L1599.41 1213.07 L1598.83 1213.07 L1598.24 1213.07 L1597.65 1213.07 L1597.07 1213.07 L1596.48 1213.07 L1595.89 1213.07 L1595.31 1213.07 L1594.72 1213.07 L1594.14 1213.07 L1593.55 1213.07 L1592.96 1213.07 L1592.38 1213.07 L1591.79 1213.07 L1591.2 1213.07 L1590.62 1213.07 L1590.03 1213.07 L1589.44 1213.07 L1588.86 1213.07 L1588.27 1213.07 L1587.68 1213.07 L1587.1 1213.07 L1586.51 1213.07 L1585.93 1213.07 L1585.34 1213.07 L1584.75 1213.07 L1584.17 1213.07 L1583.58 1213.07 L1582.99 1213.07 L1582.41 1213.07 L1581.82 1213.07 L1581.23 1213.07 L1580.65 1213.07 L1580.06 1213.07 L1579.47 1213.07 L1578.89 1213.07 L1578.3 1213.07 L1577.72 1213.07 L1577.13 1213.07 L1576.54 1213.07 L1575.96 1213.07 L1575.37 1213.07 L1574.78 1213.07 L1574.2 1213.07 L1573.61 1213.07 L1573.02 1213.07 L1572.44 1213.07 L1571.85 1213.07 L1571.27 1213.07 L1570.68 1213.07 L1570.09 1213.07 L1569.51 1213.07 L1568.92 1213.07 L1568.33 1213.07 L1567.75 1213.07 L1567.16 1213.07 L1566.57 1213.07 L1565.99 1213.07 L1565.4 1213.07 L1564.81 1213.07 L1564.23 1213.07 L1563.64 1213.07 L1563.06 1213.07 L1562.47 1213.07 L1561.88 1213.07 L1561.3 1213.07 L1560.71 1213.07 L1560.12 1213.07 L1559.54 1213.07 L1558.95 1213.07 L1558.36 1213.07 L1557.78 1213.07 L1557.19 1213.07 L1556.6 1213.07 L1556.02 1213.07 L1555.43 1213.07 L1554.85 1213.07 L1554.26 1213.07 L1553.67 1213.07 L1553.09 1213.07 L1552.5 1213.07 L1551.91 1213.07 L1551.33 1213.07 L1550.74 1213.07 L1550.15 1213.07 L1549.57 1213.07 L1548.98 1213.07 L1548.4 1213.07 L1547.81 1213.07 L1547.22 1213.07 L1546.64 1213.07 L1546.05 1213.07 L1545.46 1213.07 L1544.88 1213.07 L1544.29 1213.07 L1543.7 1213.07 L1543.12 1213.07 L1542.53 1213.07 L1541.94 1213.07 L1541.36 1213.07 L1540.77 1213.07 L1540.19 1213.07 L1539.6 1213.07 L1539.01 1213.07 L1538.43 1213.07 L1537.84 1213.07 L1537.25 1213.07 L1536.67 1213.07 L1536.08 1213.07 L1535.49 1213.07 L1534.91 1213.07 L1534.32 1213.07 L1533.73 1213.07 L1533.15 1213.07 L1532.56 1213.07 L1531.98 1213.07 L1531.39 1213.07 L1530.8 1213.07 L1530.22 1213.07 L1529.63 1213.07 L1529.04 1213.07 L1528.46 1213.07 L1527.87 1213.07 L1527.28 1213.07 L1526.7 1213.07 L1526.11 1213.07 L1525.52 1213.07 L1524.94 1213.07 L1524.35 1213.07 L1523.77 1213.07 L1523.18 1213.07 L1522.59 1213.07 L1522.01 1213.07 L1521.42 1213.07 L1520.83 1213.07 L1520.25 1213.07 L1519.66 1213.07 L1519.07 1213.07 L1518.49 1213.07 L1517.9 1213.07 L1517.32 1213.07 L1516.73 1213.07 L1516.14 1213.07 L1515.56 1213.07 L1514.97 1213.07 L1514.38 1213.07 L1513.8 1213.07 L1513.21 1213.07 L1512.62 1213.07 L1512.04 1213.07 L1511.45 1213.07 L1510.86 1213.07 L1510.28 1213.07 L1509.69 1213.07 L1509.11 1213.07 L1508.52 1213.07 L1507.93 1213.07 L1507.35 1213.07 L1506.76 1213.07 L1506.17 1213.07 L1505.59 1213.07 L1505 1213.07 L1504.41 1213.07 L1503.83 1213.07 L1503.24 1213.07 L1502.65 1213.07 L1502.07 1213.07 L1501.48 1213.07 L1500.9 1213.07 L1500.31 1213.07 L1499.72 1213.07 L1499.14 1213.07 L1498.55 1213.07 L1497.96 1213.07 L1497.38 1213.07 L1496.79 1213.07 L1496.2 1213.07 L1495.62 1213.07 L1495.03 1213.07 L1494.45 1213.07 L1493.86 1213.07 L1493.27 1213.07 L1492.69 1213.07 L1492.1 1213.07 L1491.51 1213.07 L1490.93 1213.07 L1490.34 1213.07 L1489.75 1213.07 L1489.17 1213.07 L1488.58 1213.07 L1487.99 1213.07 L1487.41 1213.07 L1486.82 1213.07 L1486.24 1213.07 L1485.65 1213.07 L1485.06 1213.07 L1484.48 1213.07 L1483.89 1213.07 L1483.3 1213.07 L1482.72 1213.07 L1482.13 1213.07 L1481.54 1213.07 L1480.96 1213.07 L1480.37 1213.07 L1479.78 1213.07 L1479.2 1213.07 L1478.61 1213.07 L1478.03 1213.07 L1477.44 1213.07 L1476.85 1213.07 L1476.27 1213.07 L1475.68 1213.07 L1475.09 1213.07 L1474.51 1213.07 L1473.92 1213.07 L1473.33 1213.07 L1472.75 1213.07 L1472.16 1213.07 L1471.57 1213.07 L1470.99 1213.07 L1470.4 1213.07 L1469.82 1213.07 L1469.23 1213.07 L1468.64 1213.07 L1468.06 1213.07 L1467.47 1213.07 L1466.88 1213.07 L1466.3 1213.07 L1465.71 1213.07 L1465.12 1213.07 L1464.54 1213.07 L1463.95 1213.07 L1463.37 1213.07 L1462.78 1213.07 L1462.19 1213.07 L1461.61 1213.07 L1461.02 1213.07 L1460.43 1213.07 L1459.85 1213.07 L1459.26 1213.07 L1458.67 1213.07 L1458.09 1213.07 L1457.5 1213.07 L1456.91 1213.07 L1456.33 1213.07 L1455.74 1213.07 L1455.16 1213.07 L1454.57 1213.07 L1453.98 1213.07 L1453.4 1213.07 L1452.81 1213.07 L1452.22 1213.07 L1451.64 1213.07 L1451.05 1213.07 L1450.46 1213.07 L1449.88 1213.07 L1449.29 1213.07 L1448.7 1213.07 L1448.12 1213.07 L1447.53 1213.07 L1446.95 1213.07 L1446.36 1213.07 L1445.77 1213.07 L1445.19 1213.07 L1444.6 1213.07 L1444.01 1213.07 L1443.43 1213.07 L1442.84 1213.07 L1442.25 1213.07 L1441.67 1213.07 L1441.08 1213.07 L1440.5 1213.07 L1439.91 1213.07 L1439.32 1213.07 L1438.74 1213.07 L1438.15 1213.07 L1437.56 1213.07 L1436.98 1213.07 L1436.39 1213.07 L1435.8 1213.07 L1435.22 1213.07 L1434.63 1213.07 L1434.04 1213.07 L1433.46 1213.07 L1432.87 1213.07 L1432.29 1213.07 L1431.7 1213.07 L1431.11 1213.07 L1430.53 1213.07 L1429.94 1213.07 L1429.35 1213.07 L1428.77 1213.07 L1428.18 1213.07 L1427.59 1213.07 L1427.01 1213.07 L1426.42 1213.07 L1425.83 1213.07 L1425.25 1213.07 L1424.66 1213.07 L1424.08 1213.07 L1423.49 1213.07 L1422.9 1213.07 L1422.32 1213.07 L1421.73 1213.07 L1421.14 1213.07 L1420.56 1213.07 L1419.97 1213.07 L1419.38 1213.07 L1418.8 1213.07 L1418.21 1213.07 L1417.63 1213.07 L1417.04 1213.07 L1416.45 1213.07 L1415.87 1213.07 L1415.28 1213.07 L1414.69 1213.07 L1414.11 1213.07 L1413.52 1213.07 L1412.93 1213.07 L1412.35 1213.07 L1411.76 1213.07 L1411.17 1213.07 L1410.59 1213.07 L1410 1213.07 L1409.42 1213.07 L1408.83 1213.07 L1408.24 1213.07 L1407.66 1213.07 L1407.07 1213.07 L1406.48 1213.07 L1405.9 1213.07 L1405.31 1213.07 L1404.72 1213.07 L1404.14 1213.07 L1403.55 1213.07 L1402.96 1213.07 L1402.38 1213.07 L1401.79 1213.07 L1401.21 1213.07 L1400.62 1213.07 L1400.03 1213.07 L1399.45 1213.07 L1398.86 1213.07 L1398.27 1213.07 L1397.69 1213.07 L1397.1 1213.07 L1396.51 1213.07 L1395.93 1213.07 L1395.34 1213.07 L1394.75 1213.07 L1394.17 1213.07 L1393.58 1213.07 L1393 1213.07 L1392.41 1213.07 L1391.82 1213.07 L1391.24 1213.07 L1390.65 1213.07 L1390.06 1213.07 L1389.48 1213.07 L1388.89 1213.07 L1388.3 1213.07 L1387.72 1213.07 L1387.13 1213.07 L1386.55 1213.07 L1385.96 1213.07 L1385.37 1213.07 L1384.79 1213.07 L1384.2 1213.07 L1383.61 1213.07 L1383.03 1213.07 L1382.44 1213.07 L1381.85 1213.07 L1381.27 1213.07 L1380.68 1213.07 L1380.09 1213.07 L1379.51 1213.07 L1378.92 1213.07 L1378.34 1213.07 L1377.75 1213.07 L1377.16 1213.07 L1376.58 1213.07 L1375.99 1213.07 L1375.4 1213.07 L1374.82 1213.07 L1374.23 1213.07 L1373.64 1213.07 L1373.06 1213.07 L1372.47 1213.07 L1371.88 1213.07 L1371.3 1213.07 L1370.71 1213.07 L1370.13 1213.07 L1369.54 1213.07 L1368.95 1213.07 L1368.37 1213.07 L1367.78 1213.07 L1367.19 1213.07 L1366.61 1213.07 L1366.02 1213.07 L1365.43 1213.07 L1364.85 1213.07 L1364.26 1213.07 L1363.68 1213.07 L1363.09 1213.07 L1362.5 1213.07 L1361.92 1213.07 L1361.33 1213.07 L1360.74 1213.07 L1360.16 1213.07 L1359.57 1213.07 L1358.98 1213.07 L1358.4 1213.07 L1357.81 1213.07 L1357.22 1213.07 L1356.64 1213.07 L1356.05 1213.07 L1355.47 1213.07 L1354.88 1213.07 L1354.29 1213.07 L1353.71 1213.07 L1353.12 1213.07 L1352.53 1213.07 L1351.95 1213.07 L1351.36 1213.07 L1350.77 1213.07 L1350.19 1213.07 L1349.6 1213.07 L1349.01 1213.07 L1348.43 1213.07 L1347.84 1213.07 L1347.26 1213.07 L1346.67 1213.07 L1346.08 1213.07 L1345.5 1213.07 L1344.91 1213.07 L1344.32 1213.07 L1343.74 1213.07 L1343.15 1213.07 L1342.56 1213.07 L1341.98 1213.07 L1341.39 1213.07 L1340.8 1213.07 L1340.22 1213.07 L1339.63 1213.07 L1339.05 1213.07 L1338.46 1213.07 L1337.87 1213.07 L1337.29 1213.07 L1336.7 1213.07 L1336.11 1213.07 L1335.53 1213.07 L1334.94 1213.07 L1334.35 1213.07 L1333.77 1213.07 L1333.18 1213.07 L1332.6 1213.07 L1332.01 1213.07 L1331.42 1213.07 L1330.84 1213.07 L1330.25 1213.07 L1329.66 1213.07 L1329.08 1213.07 L1328.49 1213.07 L1327.9 1213.07 L1327.32 1213.07 L1326.73 1213.07 L1326.14 1213.07 L1325.56 1213.07 L1324.97 1213.07 L1324.39 1213.07 L1323.8 1213.07 L1323.21 1213.07 L1322.63 1213.07 L1322.04 1213.07 L1321.45 1213.07 L1320.87 1213.07 L1320.28 1213.07 L1319.69 1213.07 L1319.11 1213.07 L1318.52 1213.07 L1317.93 1213.07 L1317.35 1213.07 L1316.76 1213.07 L1316.18 1213.07 L1315.59 1213.07 L1315 1213.07 L1314.42 1213.07 L1313.83 1213.07 L1313.24 1213.07 L1312.66 1213.07 L1312.07 1213.07 L1311.48 1213.07 L1310.9 1213.07 L1310.31 1213.07 L1309.73 1213.07 L1309.14 1213.07 L1308.55 1213.07 L1307.97 1213.07 L1307.38 1213.07 L1306.79 1213.07 L1306.21 1213.07 L1305.62 1213.07 L1305.03 1213.07 L1304.45 1213.07 L1303.86 1213.07 L1303.27 1213.07 L1302.69 1213.07 L1302.1 1213.07 L1301.52 1213.07 L1300.93 1213.07 L1300.34 1213.07 L1299.76 1213.07 L1299.17 1213.07 L1298.58 1213.07 L1298 1213.07 L1297.41 1213.07 L1296.82 1213.07 L1296.24 1213.07 L1295.65 1213.07 L1295.06 1213.07 L1294.48 1213.07 L1293.89 1213.07 L1293.31 1213.07 L1292.72 1213.07 L1292.13 1213.07 L1291.55 1213.07 L1290.96 1213.07 L1290.37 1213.07 L1289.79 1213.07 L1289.2 1213.07 L1288.61 1213.07 L1288.03 1213.07 L1287.44 1213.07 L1286.86 1213.07 L1286.27 1213.07 L1285.68 1213.07 L1285.1 1213.07 L1284.51 1213.07 L1283.92 1213.07 L1283.34 1213.07 L1282.75 1213.07 L1282.16 1213.07 L1281.58 1213.07 L1280.99 1213.07 L1280.4 1213.07 L1279.82 1213.07 L1279.23 1213.07 L1278.65 1213.07 L1278.06 1213.07 L1277.47 1213.07 L1276.89 1213.07 L1276.3 1213.07 L1275.71 1213.07 L1275.13 1213.07 L1274.54 1213.07 L1273.95 1213.07 L1273.37 1213.07 L1272.78 1213.07 L1272.19 1213.07 L1271.61 1213.07 L1271.02 1213.07 L1270.44 1213.07 L1269.85 1213.07 L1269.26 1213.07 L1268.68 1213.07 L1268.09 1213.07 L1267.5 1213.07 L1266.92 1213.07 L1266.33 1213.07 L1265.74 1213.07 L1265.16 1213.07 L1264.57 1213.07 L1263.98 1213.07 L1263.4 1213.07 L1262.81 1213.07 L1262.23 1213.07 L1261.64 1213.07 L1261.05 1213.07 L1260.47 1213.07 L1259.88 1213.07 L1259.29 1213.07 L1258.71 1213.07 L1258.12 1213.07 L1257.53 1213.07 L1256.95 1213.07 L1256.36 1213.07 L1255.78 1213.07 L1255.19 1213.07 L1254.6 1213.07 L1254.02 1213.07 L1253.43 1213.07 L1252.84 1213.07 L1252.26 1213.07 L1251.67 1213.07 L1251.08 1213.07 L1250.5 1213.07 L1249.91 1213.07 L1249.32 1213.07 L1248.74 1213.07 L1248.15 1213.07 L1247.57 1213.07 L1246.98 1213.07 L1246.39 1213.07 L1245.81 1213.07 L1245.22 1213.07 L1244.63 1213.07 L1244.05 1213.07 L1243.46 1213.07 L1242.87 1213.07 L1242.29 1213.07 L1241.7 1213.07 L1241.11 1213.07 L1240.53 1213.07 L1239.94 1213.07 L1239.36 1213.07 L1238.77 1213.07 L1238.18 1213.07 L1237.6 1213.07 L1237.01 1213.07 L1236.42 1213.07 L1235.84 1213.07 L1235.25 1213.07 L1234.66 1213.07 L1234.08 1213.07 L1233.49 1213.07 L1232.91 1213.07 L1232.32 1213.07 L1231.73 1213.07 L1231.15 1213.07 L1230.56 1213.07 L1229.97 1213.07 L1229.39 1213.07 L1228.8 1213.07 L1228.21 1213.07 L1227.63 1213.07 L1227.04 1213.07 L1226.45 1213.07 L1225.87 1213.07 L1225.28 1213.07 L1224.7 1213.07 L1224.11 1213.07 L1223.52 1213.07 L1222.94 1213.07 L1222.35 1213.07 L1221.76 1213.07 L1221.18 1213.07 L1220.59 1213.07 L1220 1213.07 L1219.42 1213.07 L1218.83 1213.07 L1218.24 1213.07 L1217.66 1213.07 L1217.07 1213.07 L1216.49 1213.07 L1215.9 1213.07 L1215.31 1213.07 L1214.73 1213.07 L1214.14 1213.07 L1213.55 1213.07 L1212.97 1213.07 L1212.38 1213.07 L1211.79 1213.07 L1211.21 1213.07 L1210.62 1213.07 L1210.03 1213.07 L1209.45 1213.07 L1208.86 1213.07 L1208.28 1213.07 L1207.69 1213.07 L1207.1 1213.07 L1206.52 1213.07 L1205.93 1213.07 L1205.34 1213.07 L1204.76 1213.07 L1204.17 1213.07 L1203.58 1213.07 L1203 1213.07 L1202.41 1213.07 L1201.83 1213.07 L1201.24 1213.07 L1200.65 1213.07 L1200.07 1213.07 L1199.48 1213.07 L1198.89 1213.07 L1198.31 1213.07 L1197.72 1213.07 L1197.13 1213.07 L1196.55 1213.07 L1195.96 1213.07 L1195.37 1213.07 L1194.79 1213.07 L1194.2 1213.07 L1193.62 1213.07 L1193.03 1213.07 L1192.44 1213.07 L1191.86 1213.07 L1191.27 1213.07 L1190.68 1213.07 L1190.1 1213.07 L1189.51 1213.07 L1188.92 1213.07 L1188.34 1213.07 L1187.75 1213.07 L1187.16 1213.07 L1186.58 1213.07 L1185.99 1213.07 L1185.41 1213.07 L1184.82 1213.07 L1184.23 1213.07 L1183.65 1213.07 L1183.06 1213.07 L1182.47 1213.07 L1181.89 1213.07 L1181.3 1213.07 L1180.71 1213.07 L1180.13 1213.07 L1179.54 1213.07 L1178.96 1213.07 L1178.37 1213.07 L1177.78 1213.07 L1177.2 1213.07 L1176.61 1213.07 L1176.02 1213.07 L1175.44 1213.07 L1174.85 1213.07 L1174.26 1213.07 L1173.68 1213.07 L1173.09 1213.07 L1172.5 1213.07 L1171.92 1213.07 L1171.33 1213.07 L1170.75 1213.07 L1170.16 1213.07 L1169.57 1213.07 L1168.99 1213.07 L1168.4 1213.07 L1167.81 1213.07 L1167.23 1213.07 L1166.64 1213.07 L1166.05 1213.07 L1165.47 1213.07 L1164.88 1213.07 L1164.29 1213.07 L1163.71 1213.07 L1163.12 1213.07 L1162.54 1213.07 L1161.95 1213.07 L1161.36 1213.07 L1160.78 1213.07 L1160.19 1213.07 L1159.6 1213.07 L1159.02 1213.07 L1158.43 1213.07 L1157.84 1213.07 L1157.26 1213.07 L1156.67 1213.07 L1156.09 1213.07 L1155.5 1213.07 L1154.91 1213.07 L1154.33 1213.07 L1153.74 1213.07 L1153.15 1213.07 L1152.57 1213.07 L1151.98 1213.07 L1151.39 1213.07 L1150.81 1213.07 L1150.22 1213.07 L1149.63 1213.07 L1149.05 1213.07 L1148.46 1213.07 L1147.88 1213.07 L1147.29 1213.07 L1146.7 1213.07 L1146.12 1213.07 L1145.53 1213.07 L1144.94 1213.07 L1144.36 1213.07 L1143.77 1213.07 L1143.18 1213.07 L1142.6 1213.07 L1142.01 1213.07 L1141.42 1213.07 L1140.84 1213.07 L1140.25 1213.07 L1139.67 1213.07 L1139.08 1213.07 L1138.49 1213.07 L1137.91 1213.07 L1137.32 1213.07 L1136.73 1213.07 L1136.15 1213.07 L1135.56 1213.07 L1134.97 1213.07 L1134.39 1213.07 L1133.8 1213.07 L1133.21 1213.07 L1132.63 1213.07 L1132.04 1213.07 L1131.46 1213.07 L1130.87 1213.07 L1130.28 1213.07 L1129.7 1213.07 L1129.11 1213.07 L1128.52 1213.07 L1127.94 1213.07 L1127.35 1213.07 L1126.76 1213.07 L1126.18 1213.07 L1125.59 1213.07 L1125.01 1213.07 L1124.42 1213.07 L1123.83 1213.07 L1123.25 1213.07 L1122.66 1213.07 L1122.07 1213.07 L1121.49 1213.07 L1120.9 1213.07 L1120.31 1213.07 L1119.73 1213.07 L1119.14 1213.07 L1118.55 1213.07 L1117.97 1213.07 L1117.38 1213.07 L1116.8 1213.07 L1116.21 1213.07 L1115.62 1213.07 L1115.04 1213.07 L1114.45 1213.07 L1113.86 1213.07 L1113.28 1213.07 L1112.69 1213.07 L1112.1 1213.07 L1111.52 1213.07 L1110.93 1213.07 L1110.34 1213.07 L1109.76 1213.07 L1109.17 1213.07 L1108.59 1213.07 L1108 1213.07 L1107.41 1213.07 L1106.83 1213.07 L1106.24 1213.07 L1105.65 1213.07 L1105.07 1213.07 L1104.48 1213.07 L1103.89 1213.07 L1103.31 1213.07 L1102.72 1213.07 L1102.14 1213.07 L1101.55 1213.07 L1100.96 1213.07 L1100.38 1213.07 L1099.79 1213.07 L1099.2 1213.07 L1098.62 1213.07 L1098.03 1213.07 L1097.44 1213.07 L1096.86 1213.07 L1096.27 1213.07 L1095.68 1213.07 L1095.1 1213.07 L1094.51 1213.07 L1093.93 1213.07 L1093.34 1213.07 L1092.75 1213.07 L1092.17 1213.07 L1091.58 1213.07 L1090.99 1213.07 L1090.41 1213.07 L1089.82 1213.07 L1089.23 1213.07 L1088.65 1213.07 L1088.06 1213.07 L1087.47 1213.07 L1086.89 1213.07 L1086.3 1213.07 L1085.72 1213.07 L1085.13 1213.07 L1084.54 1213.07 L1083.96 1213.07 L1083.37 1213.07 L1082.78 1213.07 L1082.2 1213.07 L1081.61 1213.07 L1081.02 1213.07 L1080.44 1213.07 L1079.85 1213.07 L1079.26 1213.07 L1078.68 1213.07 L1078.09 1213.07 L1077.51 1213.07 L1076.92 1213.07 L1076.33 1213.07 L1075.75 1213.07 L1075.16 1213.07 L1074.57 1213.07 L1073.99 1213.07 L1073.4 1213.07 L1072.81 1213.07 L1072.23 1213.07 L1071.64 1213.07 L1071.06 1213.07 L1070.47 1213.07 L1069.88 1213.07 L1069.3 1213.07 L1068.71 1213.07 L1068.12 1213.07 L1067.54 1213.07 L1066.95 1213.07 L1066.36 1213.07 L1065.78 1213.07 L1065.19 1213.07 L1064.6 1213.07 L1064.02 1213.07 L1063.43 1213.07 L1062.85 1213.07 L1062.26 1213.07 L1061.67 1213.07 L1061.09 1213.07 L1060.5 1213.07 L1059.91 1213.07 L1059.33 1213.07 L1058.74 1213.07 L1058.15 1213.07 L1057.57 1213.07 L1056.98 1213.07 L1056.39 1213.07 L1055.81 1213.07 L1055.22 1213.07 L1054.64 1213.07 L1054.05 1213.07 L1053.46 1213.07 L1052.88 1213.07 L1052.29 1213.07 L1051.7 1213.07 L1051.12 1213.07 L1050.53 1213.07 L1049.94 1213.07 L1049.36 1213.07 L1048.77 1213.07 L1048.19 1213.07 L1047.6 1213.07 L1047.01 1213.07 L1046.43 1213.07 L1045.84 1213.07 L1045.25 1213.07 L1044.67 1213.07 L1044.08 1213.07 L1043.49 1213.07 L1042.91 1213.07 L1042.32 1213.07 L1041.73 1213.07 L1041.15 1213.07 L1040.56 1213.07 L1039.98 1213.07 L1039.39 1213.07 L1038.8 1213.07 L1038.22 1213.07 L1037.63 1213.07 L1037.04 1213.07 L1036.46 1213.07 L1035.87 1213.07 L1035.28 1213.07 L1034.7 1213.07 L1034.11 1213.07 L1033.52 1213.07 L1032.94 1213.07 L1032.35 1213.07 L1031.77 1213.07 L1031.18 1213.07 L1030.59 1213.07 L1030.01 1213.07 L1029.42 1213.07 L1028.83 1213.07 L1028.25 1213.07 L1027.66 1213.07 L1027.07 1213.07 L1026.49 1213.07 L1025.9 1213.07 L1025.32 1213.07 L1024.73 1213.07 L1024.14 1213.07 L1023.56 1213.07 L1022.97 1213.07 L1022.38 1213.07 L1021.8 1213.07 L1021.21 1213.07 L1020.62 1213.07 L1020.04 1213.07 L1019.45 1213.07 L1018.86 1213.07 L1018.28 1213.07 L1017.69 1213.07 L1017.11 1213.07 L1016.52 1213.07 L1015.93 1213.07 L1015.35 1213.07 L1014.76 1213.07 L1014.17 1213.07 L1013.59 1213.07 L1013 1213.07 L1012.41 1213.07 L1011.83 1213.07 L1011.24 1213.07 L1010.65 1213.07 L1010.07 1213.07 L1009.48 1213.07 L1008.9 1213.07 L1008.31 1213.07 L1007.72 1213.07 L1007.14 1213.07 L1006.55 1213.07 L1005.96 1213.07 L1005.38 1213.07 L1004.79 1213.07 L1004.2 1213.07 L1003.62 1213.07 L1003.03 1213.07 L1002.44 1213.07 L1001.86 1213.07 L1001.27 1213.07 L1000.69 1213.07 L1000.1 1213.07 L999.513 1213.07 L998.926 1213.07 L998.34 1213.07 L997.754 1213.07 L997.167 1213.07 L996.581 1213.07 L995.994 1213.07 L995.408 1213.07 L994.822 1213.07 L994.235 1213.07 L993.649 1213.07 L993.062 1213.07 L992.476 1213.07 L991.889 1213.07 L991.303 1213.07 L990.717 1213.07 L990.13 1213.07 L989.544 1213.07 L988.957 1213.07 L988.371 1213.07 L987.785 1213.07 L987.198 1213.07 L986.612 1213.07 L986.025 1213.07  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.15 986.612,1213.15 987.198,1213.15 987.785,1213.15 988.371,1213.15 988.957,1213.15 989.544,1213.15 990.13,1213.15 990.717,1213.15 991.303,1213.15 991.889,1213.15 992.476,1213.15 993.062,1213.15 993.649,1213.15 994.235,1213.15 994.822,1213.15 995.408,1213.15 995.994,1213.15 996.581,1213.15 997.167,1213.15 997.754,1213.15 998.34,1213.15 998.926,1213.15 999.513,1213.15 1000.1,1213.15 1000.69,1213.15 1001.27,1213.15 1001.86,1213.15 1002.44,1213.15 1003.03,1213.15 1003.62,1213.15 1004.2,1213.15 1004.79,1213.15 1005.38,1213.15 1005.96,1213.15 1006.55,1213.15 1007.14,1213.15 1007.72,1213.15 1008.31,1213.15 1008.9,1213.15 1009.48,1213.15 1010.07,1213.15 1010.65,1213.15 1011.24,1213.15 1011.83,1213.15 1012.41,1213.15 1013,1213.15 1013.59,1213.15 1014.17,1213.15 1014.76,1213.15 1015.35,1213.15 1015.93,1213.15 1016.52,1213.15 1017.11,1213.15 1017.69,1213.15 1018.28,1213.15 1018.86,1213.15 1019.45,1213.15 1020.04,1213.15 1020.62,1213.15 1021.21,1213.15 1021.8,1213.15 1022.38,1213.15 1022.97,1213.15 1023.56,1213.15 1024.14,1213.15 1024.73,1213.15 1025.32,1213.15 1025.9,1213.15 1026.49,1213.15 1027.07,1213.15 1027.66,1213.15 1028.25,1213.15 1028.83,1213.15 1029.42,1213.15 1030.01,1213.15 1030.59,1213.15 1031.18,1213.15 1031.77,1213.15 1032.35,1213.15 1032.94,1213.15 1033.52,1213.15 1034.11,1213.15 1034.7,1213.15 1035.28,1213.15 1035.87,1213.15 1036.46,1213.15 1037.04,1213.15 1037.63,1213.15 1038.22,1213.15 1038.8,1213.15 1039.39,1213.15 1039.98,1213.15 1040.56,1213.15 1041.15,1213.15 1041.73,1213.15 1042.32,1213.15 1042.91,1213.15 1043.49,1213.15 1044.08,1213.15 1044.67,1213.15 1045.25,1213.15 1045.84,1213.15 1046.43,1213.15 1047.01,1213.15 1047.6,1213.15 1048.19,1213.15 1048.77,1213.15 1049.36,1213.15 1049.94,1213.15 1050.53,1213.15 1051.12,1213.15 1051.7,1213.15 1052.29,1213.15 1052.88,1213.15 1053.46,1213.15 1054.05,1213.15 1054.64,1213.15 1055.22,1213.15 1055.81,1213.15 1056.39,1213.15 1056.98,1213.15 1057.57,1213.15 1058.15,1213.15 1058.74,1213.15 1059.33,1213.15 1059.91,1213.15 1060.5,1213.15 1061.09,1213.15 1061.67,1213.15 1062.26,1213.15 1062.85,1213.15 1063.43,1213.15 1064.02,1213.15 1064.6,1213.15 1065.19,1213.15 1065.78,1213.15 1066.36,1213.15 1066.95,1213.15 1067.54,1213.15 1068.12,1213.15 1068.71,1213.15 1069.3,1213.15 1069.88,1213.15 1070.47,1213.15 1071.06,1213.15 1071.64,1213.15 1072.23,1213.15 1072.81,1213.15 1073.4,1213.15 1073.99,1213.15 1074.57,1213.15 1075.16,1213.15 1075.75,1213.15 1076.33,1213.15 1076.92,1213.15 1077.51,1213.15 1078.09,1213.15 1078.68,1213.15 1079.26,1213.15 1079.85,1213.15 1080.44,1213.15 1081.02,1213.15 1081.61,1213.15 1082.2,1213.15 1082.78,1213.15 1083.37,1213.15 1083.96,1213.15 1084.54,1213.15 1085.13,1213.15 1085.72,1213.15 1086.3,1213.15 1086.89,1213.15 1087.47,1213.15 1088.06,1213.15 1088.65,1213.15 1089.23,1213.15 1089.82,1213.15 1090.41,1213.15 1090.99,1213.15 1091.58,1213.15 1092.17,1213.15 1092.75,1213.15 1093.34,1213.15 1093.93,1213.15 1094.51,1213.15 1095.1,1213.15 1095.68,1213.15 1096.27,1213.15 1096.86,1213.15 1097.44,1213.15 1098.03,1213.15 1098.62,1213.15 1099.2,1213.15 1099.79,1213.15 1100.38,1213.15 1100.96,1213.15 1101.55,1213.15 1102.14,1213.15 1102.72,1213.15 1103.31,1213.15 1103.89,1213.15 1104.48,1213.15 1105.07,1213.15 1105.65,1213.15 1106.24,1213.15 1106.83,1213.15 1107.41,1213.15 1108,1213.15 1108.59,1213.15 1109.17,1213.15 1109.76,1213.15 1110.34,1213.15 1110.93,1213.15 1111.52,1213.15 1112.1,1213.15 1112.69,1213.15 1113.28,1213.15 1113.86,1213.15 1114.45,1213.15 1115.04,1213.15 1115.62,1213.15 1116.21,1213.15 1116.8,1213.15 1117.38,1213.15 1117.97,1213.15 1118.55,1213.15 1119.14,1213.15 1119.73,1213.15 1120.31,1213.15 1120.9,1213.15 1121.49,1213.15 1122.07,1213.15 1122.66,1213.15 1123.25,1213.15 1123.83,1213.15 1124.42,1213.15 1125.01,1213.15 1125.59,1213.15 1126.18,1213.15 1126.76,1213.15 1127.35,1213.15 1127.94,1213.15 1128.52,1213.15 1129.11,1213.15 1129.7,1213.15 1130.28,1213.15 1130.87,1213.15 1131.46,1213.15 1132.04,1213.15 1132.63,1213.15 1133.21,1213.15 1133.8,1213.15 1134.39,1213.15 1134.97,1213.15 1135.56,1213.15 1136.15,1213.15 1136.73,1213.15 1137.32,1213.15 1137.91,1213.15 1138.49,1213.15 1139.08,1213.15 1139.67,1213.15 1140.25,1213.15 1140.84,1213.15 1141.42,1213.15 1142.01,1213.15 1142.6,1213.15 1143.18,1213.15 1143.77,1213.15 1144.36,1213.15 1144.94,1213.15 1145.53,1213.15 1146.12,1213.15 1146.7,1213.15 1147.29,1213.15 1147.88,1213.15 1148.46,1213.15 1149.05,1213.15 1149.63,1213.15 1150.22,1213.15 1150.81,1213.15 1151.39,1213.15 1151.98,1213.15 1152.57,1213.15 1153.15,1213.15 1153.74,1213.15 1154.33,1213.15 1154.91,1213.15 1155.5,1213.15 1156.09,1213.15 1156.67,1213.15 1157.26,1213.15 1157.84,1213.15 1158.43,1213.15 1159.02,1213.15 1159.6,1213.15 1160.19,1213.15 1160.78,1213.15 1161.36,1213.15 1161.95,1213.15 1162.54,1213.15 1163.12,1213.15 1163.71,1213.15 1164.29,1213.15 1164.88,1213.15 1165.47,1213.15 1166.05,1213.15 1166.64,1213.15 1167.23,1213.15 1167.81,1213.15 1168.4,1213.15 1168.99,1213.15 1169.57,1213.15 1170.16,1213.15 1170.75,1213.15 1171.33,1213.15 1171.92,1213.15 1172.5,1213.15 1173.09,1213.15 1173.68,1213.15 1174.26,1213.15 1174.85,1213.15 1175.44,1213.15 1176.02,1213.15 1176.61,1213.15 1177.2,1213.15 1177.78,1213.15 1178.37,1213.15 1178.96,1213.15 1179.54,1213.15 1180.13,1213.15 1180.71,1213.15 1181.3,1213.15 1181.89,1213.15 1182.47,1213.15 1183.06,1213.15 1183.65,1213.15 1184.23,1213.15 1184.82,1213.15 1185.41,1213.15 1185.99,1213.15 1186.58,1213.15 1187.16,1213.15 1187.75,1213.15 1188.34,1213.15 1188.92,1213.15 1189.51,1213.15 1190.1,1213.15 1190.68,1213.15 1191.27,1213.15 1191.86,1213.15 1192.44,1213.15 1193.03,1213.15 1193.62,1213.15 1194.2,1213.15 1194.79,1213.15 1195.37,1213.15 1195.96,1213.15 1196.55,1213.15 1197.13,1213.15 1197.72,1213.15 1198.31,1213.15 1198.89,1213.15 1199.48,1213.15 1200.07,1213.15 1200.65,1213.15 1201.24,1213.15 1201.83,1213.15 1202.41,1213.15 1203,1213.15 1203.58,1213.15 1204.17,1213.15 1204.76,1213.15 1205.34,1213.15 1205.93,1213.15 1206.52,1213.15 1207.1,1213.15 1207.69,1213.15 1208.28,1213.15 1208.86,1213.15 1209.45,1213.15 1210.03,1213.15 1210.62,1213.15 1211.21,1213.15 1211.79,1213.15 1212.38,1213.15 1212.97,1213.15 1213.55,1213.15 1214.14,1213.15 1214.73,1213.15 1215.31,1213.15 1215.9,1213.15 1216.49,1213.15 1217.07,1213.15 1217.66,1213.15 1218.24,1213.15 1218.83,1213.15 1219.42,1213.15 1220,1213.15 1220.59,1213.15 1221.18,1213.15 1221.76,1213.15 1222.35,1213.15 1222.94,1213.15 1223.52,1213.15 1224.11,1213.15 1224.7,1213.15 1225.28,1213.15 1225.87,1213.15 1226.45,1213.15 1227.04,1213.15 1227.63,1213.15 1228.21,1213.15 1228.8,1213.15 1229.39,1213.15 1229.97,1213.15 1230.56,1213.15 1231.15,1213.15 1231.73,1213.15 1232.32,1213.15 1232.91,1213.15 1233.49,1213.15 1234.08,1213.15 1234.66,1213.15 1235.25,1213.15 1235.84,1213.15 1236.42,1213.15 1237.01,1213.15 1237.6,1213.15 1238.18,1213.15 1238.77,1213.15 1239.36,1213.15 1239.94,1213.15 1240.53,1213.15 1241.11,1213.15 1241.7,1213.15 1242.29,1213.15 1242.87,1213.15 1243.46,1213.15 1244.05,1213.15 1244.63,1213.15 1245.22,1213.15 1245.81,1213.15 1246.39,1213.15 1246.98,1213.15 1247.57,1213.15 1248.15,1213.15 1248.74,1213.15 1249.32,1213.15 1249.91,1213.15 1250.5,1213.15 1251.08,1213.15 1251.67,1213.15 1252.26,1213.15 1252.84,1213.15 1253.43,1213.15 1254.02,1213.15 1254.6,1213.15 1255.19,1213.15 1255.78,1213.15 1256.36,1213.15 1256.95,1213.15 1257.53,1213.15 1258.12,1213.15 1258.71,1213.15 1259.29,1213.15 1259.88,1213.15 1260.47,1213.15 1261.05,1213.15 1261.64,1213.15 1262.23,1213.15 1262.81,1213.15 1263.4,1213.15 1263.98,1213.15 1264.57,1213.15 1265.16,1213.15 1265.74,1213.15 1266.33,1213.15 1266.92,1213.15 1267.5,1213.15 1268.09,1213.15 1268.68,1213.15 1269.26,1213.15 1269.85,1213.15 1270.44,1213.15 1271.02,1213.15 1271.61,1213.15 1272.19,1213.15 1272.78,1213.15 1273.37,1213.15 1273.95,1213.15 1274.54,1213.15 1275.13,1213.15 1275.71,1213.15 1276.3,1213.15 1276.89,1213.15 1277.47,1213.15 1278.06,1213.15 1278.65,1213.15 1279.23,1213.15 1279.82,1213.15 1280.4,1213.15 1280.99,1213.15 1281.58,1213.15 1282.16,1213.15 1282.75,1213.15 1283.34,1213.15 1283.92,1213.15 1284.51,1213.15 1285.1,1213.15 1285.68,1213.15 1286.27,1213.15 1286.86,1213.15 1287.44,1213.15 1288.03,1213.15 1288.61,1213.15 1289.2,1213.15 1289.79,1213.15 1290.37,1213.15 1290.96,1213.15 1291.55,1213.15 1292.13,1213.15 1292.72,1213.15 1293.31,1213.15 1293.89,1213.15 1294.48,1213.15 1295.06,1213.15 1295.65,1213.15 1296.24,1213.15 1296.82,1213.15 1297.41,1213.15 1298,1213.15 1298.58,1213.15 1299.17,1213.15 1299.76,1213.15 1300.34,1213.15 1300.93,1213.15 1301.52,1213.15 1302.1,1213.15 1302.69,1213.15 1303.27,1213.15 1303.86,1213.15 1304.45,1213.15 1305.03,1213.15 1305.62,1213.15 1306.21,1213.15 1306.79,1213.15 1307.38,1213.15 1307.97,1213.15 1308.55,1213.15 1309.14,1213.15 1309.73,1213.15 1310.31,1213.15 1310.9,1213.15 1311.48,1213.15 1312.07,1213.15 1312.66,1213.15 1313.24,1213.15 1313.83,1213.15 1314.42,1213.15 1315,1213.15 1315.59,1213.15 1316.18,1213.15 1316.76,1213.15 1317.35,1213.15 1317.93,1213.15 1318.52,1213.15 1319.11,1213.15 1319.69,1213.15 1320.28,1213.15 1320.87,1213.15 1321.45,1213.15 1322.04,1213.15 1322.63,1213.15 1323.21,1213.15 1323.8,1213.15 1324.39,1213.15 1324.97,1213.15 1325.56,1213.15 1326.14,1213.15 1326.73,1213.15 1327.32,1213.15 1327.9,1213.15 1328.49,1213.15 1329.08,1213.15 1329.66,1213.15 1330.25,1213.15 1330.84,1213.15 1331.42,1213.15 1332.01,1213.15 1332.6,1213.15 1333.18,1213.15 1333.77,1213.15 1334.35,1213.15 1334.94,1213.15 1335.53,1213.15 1336.11,1213.15 1336.7,1213.15 1337.29,1213.15 1337.87,1213.15 1338.46,1213.15 1339.05,1213.15 1339.63,1213.15 1340.22,1213.15 1340.8,1213.15 1341.39,1213.15 1341.98,1213.15 1342.56,1213.15 1343.15,1213.15 1343.74,1213.15 1344.32,1213.15 1344.91,1213.15 1345.5,1213.15 1346.08,1213.15 1346.67,1213.15 1347.26,1213.15 1347.84,1213.15 1348.43,1213.15 1349.01,1213.15 1349.6,1213.15 1350.19,1213.15 1350.77,1213.15 1351.36,1213.15 1351.95,1213.15 1352.53,1213.15 1353.12,1213.15 1353.71,1213.15 1354.29,1213.15 1354.88,1213.15 1355.47,1213.15 1356.05,1213.15 1356.64,1213.15 1357.22,1213.15 1357.81,1213.15 1358.4,1213.15 1358.98,1213.15 1359.57,1213.15 1360.16,1213.15 1360.74,1213.15 1361.33,1213.15 1361.92,1213.15 1362.5,1213.15 1363.09,1213.15 1363.68,1213.15 1364.26,1213.15 1364.85,1213.15 1365.43,1213.15 1366.02,1213.15 1366.61,1213.15 1367.19,1213.15 1367.78,1213.15 1368.37,1213.15 1368.95,1213.15 1369.54,1213.15 1370.13,1213.15 1370.71,1213.15 1371.3,1213.15 1371.88,1213.15 1372.47,1213.15 1373.06,1213.15 1373.64,1213.15 1374.23,1213.15 1374.82,1213.15 1375.4,1213.15 1375.99,1213.15 1376.58,1213.15 1377.16,1213.15 1377.75,1213.15 1378.34,1213.15 1378.92,1213.15 1379.51,1213.15 1380.09,1213.15 1380.68,1213.15 1381.27,1213.15 1381.85,1213.15 1382.44,1213.15 1383.03,1213.15 1383.61,1213.15 1384.2,1213.15 1384.79,1213.15 1385.37,1213.15 1385.96,1213.15 1386.55,1213.15 1387.13,1213.15 1387.72,1213.15 1388.3,1213.15 1388.89,1213.15 1389.48,1213.15 1390.06,1213.15 1390.65,1213.15 1391.24,1213.15 1391.82,1213.15 1392.41,1213.15 1393,1213.15 1393.58,1213.15 1394.17,1213.15 1394.75,1213.15 1395.34,1213.15 1395.93,1213.15 1396.51,1213.15 1397.1,1213.15 1397.69,1213.15 1398.27,1213.15 1398.86,1213.15 1399.45,1213.15 1400.03,1213.15 1400.62,1213.15 1401.21,1213.15 1401.79,1213.15 1402.38,1213.15 1402.96,1213.15 1403.55,1213.15 1404.14,1213.15 1404.72,1213.15 1405.31,1213.15 1405.9,1213.15 1406.48,1213.15 1407.07,1213.15 1407.66,1213.15 1408.24,1213.15 1408.83,1213.15 1409.42,1213.15 1410,1213.15 1410.59,1213.15 1411.17,1213.15 1411.76,1213.15 1412.35,1213.15 1412.93,1213.15 1413.52,1213.15 1414.11,1213.15 1414.69,1213.15 1415.28,1213.15 1415.87,1213.15 1416.45,1213.15 1417.04,1213.15 1417.63,1213.15 1418.21,1213.15 1418.8,1213.15 1419.38,1213.15 1419.97,1213.15 1420.56,1213.15 1421.14,1213.15 1421.73,1213.15 1422.32,1213.15 1422.9,1213.15 1423.49,1213.15 1424.08,1213.15 1424.66,1213.15 1425.25,1213.15 1425.83,1213.15 1426.42,1213.15 1427.01,1213.15 1427.59,1213.15 1428.18,1213.15 1428.77,1213.15 1429.35,1213.15 1429.94,1213.15 1430.53,1213.15 1431.11,1213.15 1431.7,1213.15 1432.29,1213.15 1432.87,1213.15 1433.46,1213.15 1434.04,1213.15 1434.63,1213.15 1435.22,1213.15 1435.8,1213.15 1436.39,1213.15 1436.98,1213.15 1437.56,1213.15 1438.15,1213.15 1438.74,1213.15 1439.32,1213.15 1439.91,1213.15 1440.5,1213.15 1441.08,1213.15 1441.67,1213.15 1442.25,1213.15 1442.84,1213.15 1443.43,1213.15 1444.01,1213.15 1444.6,1213.15 1445.19,1213.15 1445.77,1213.15 1446.36,1213.15 1446.95,1213.15 1447.53,1213.15 1448.12,1213.15 1448.7,1213.15 1449.29,1213.15 1449.88,1213.15 1450.46,1213.15 1451.05,1213.15 1451.64,1213.15 1452.22,1213.15 1452.81,1213.15 1453.4,1213.15 1453.98,1213.15 1454.57,1213.15 1455.16,1213.15 1455.74,1213.15 1456.33,1213.15 1456.91,1213.15 1457.5,1213.15 1458.09,1213.15 1458.67,1213.15 1459.26,1213.15 1459.85,1213.15 1460.43,1213.15 1461.02,1213.15 1461.61,1213.15 1462.19,1213.15 1462.78,1213.15 1463.37,1213.15 1463.95,1213.15 1464.54,1213.15 1465.12,1213.15 1465.71,1213.15 1466.3,1213.15 1466.88,1213.15 1467.47,1213.15 1468.06,1213.15 1468.64,1213.15 1469.23,1213.15 1469.82,1213.15 1470.4,1213.15 1470.99,1213.15 1471.57,1213.15 1472.16,1213.15 1472.75,1213.15 1473.33,1213.15 1473.92,1213.15 1474.51,1213.15 1475.09,1213.15 1475.68,1213.15 1476.27,1213.15 1476.85,1213.15 1477.44,1213.15 1478.03,1213.15 1478.61,1213.15 1479.2,1213.15 1479.78,1213.15 1480.37,1213.15 1480.96,1213.15 1481.54,1213.15 1482.13,1213.15 1482.72,1213.15 1483.3,1213.15 1483.89,1213.15 1484.48,1213.15 1485.06,1213.15 1485.65,1213.15 1486.24,1213.15 1486.82,1213.15 1487.41,1213.15 1487.99,1213.15 1488.58,1213.15 1489.17,1213.15 1489.75,1213.15 1490.34,1213.15 1490.93,1213.15 1491.51,1213.15 1492.1,1213.15 1492.69,1213.15 1493.27,1213.15 1493.86,1213.15 1494.45,1213.15 1495.03,1213.15 1495.62,1213.15 1496.2,1213.15 1496.79,1213.15 1497.38,1213.15 1497.96,1213.15 1498.55,1213.15 1499.14,1213.15 1499.72,1213.15 1500.31,1213.15 1500.9,1213.15 1501.48,1213.15 1502.07,1213.15 1502.65,1213.15 1503.24,1213.15 1503.83,1213.15 1504.41,1213.15 1505,1213.15 1505.59,1213.15 1506.17,1213.15 1506.76,1213.15 1507.35,1213.15 1507.93,1213.15 1508.52,1213.15 1509.11,1213.15 1509.69,1213.15 1510.28,1213.15 1510.86,1213.15 1511.45,1213.15 1512.04,1213.15 1512.62,1213.15 1513.21,1213.15 1513.8,1213.15 1514.38,1213.15 1514.97,1213.15 1515.56,1213.15 1516.14,1213.15 1516.73,1213.15 1517.32,1213.15 1517.9,1213.15 1518.49,1213.15 1519.07,1213.15 1519.66,1213.15 1520.25,1213.15 1520.83,1213.15 1521.42,1213.15 1522.01,1213.15 1522.59,1213.15 1523.18,1213.15 1523.77,1213.15 1524.35,1213.15 1524.94,1213.15 1525.52,1213.15 1526.11,1213.15 1526.7,1213.15 1527.28,1213.15 1527.87,1213.15 1528.46,1213.15 1529.04,1213.15 1529.63,1213.15 1530.22,1213.15 1530.8,1213.15 1531.39,1213.15 1531.98,1213.15 1532.56,1213.15 1533.15,1213.15 1533.73,1213.15 1534.32,1213.15 1534.91,1213.15 1535.49,1213.15 1536.08,1213.15 1536.67,1213.15 1537.25,1213.15 1537.84,1213.15 1538.43,1213.15 1539.01,1213.15 1539.6,1213.15 1540.19,1213.15 1540.77,1213.15 1541.36,1213.15 1541.94,1213.15 1542.53,1213.15 1543.12,1213.15 1543.7,1213.15 1544.29,1213.15 1544.88,1213.15 1545.46,1213.15 1546.05,1213.15 1546.64,1213.15 1547.22,1213.15 1547.81,1213.15 1548.4,1213.15 1548.98,1213.15 1549.57,1213.15 1550.15,1213.15 1550.74,1213.15 1551.33,1213.15 1551.91,1213.15 1552.5,1213.15 1553.09,1213.15 1553.67,1213.15 1554.26,1213.15 1554.85,1213.15 1555.43,1213.15 1556.02,1213.15 1556.6,1213.15 1557.19,1213.15 1557.78,1213.15 1558.36,1213.15 1558.95,1213.15 1559.54,1213.15 1560.12,1213.15 1560.71,1213.15 1561.3,1213.15 1561.88,1213.15 1562.47,1213.15 1563.06,1213.15 1563.64,1213.15 1564.23,1213.15 1564.81,1213.15 1565.4,1213.15 1565.99,1213.15 1566.57,1213.15 1567.16,1213.15 1567.75,1213.15 1568.33,1213.15 1568.92,1213.15 1569.51,1213.15 1570.09,1213.15 1570.68,1213.15 1571.27,1213.15 1571.85,1213.15 1572.44,1213.15 1573.02,1213.15 1573.61,1213.15 1574.2,1213.15 1574.78,1213.15 1575.37,1213.15 1575.96,1213.15 1576.54,1213.15 1577.13,1213.15 1577.72,1213.15 1578.3,1213.15 1578.89,1213.15 1579.47,1213.15 1580.06,1213.15 1580.65,1213.15 1581.23,1213.15 1581.82,1213.15 1582.41,1213.15 1582.99,1213.15 1583.58,1213.15 1584.17,1213.15 1584.75,1213.15 1585.34,1213.15 1585.93,1213.15 1586.51,1213.15 1587.1,1213.15 1587.68,1213.15 1588.27,1213.15 1588.86,1213.15 1589.44,1213.15 1590.03,1213.15 1590.62,1213.15 1591.2,1213.15 1591.79,1213.15 1592.38,1213.15 1592.96,1213.15 1593.55,1213.15 1594.14,1213.15 1594.72,1213.15 1595.31,1213.15 1595.89,1213.15 1596.48,1213.15 1597.07,1213.15 1597.65,1213.15 1598.24,1213.15 1598.83,1213.15 1599.41,1213.15 1600,1213.15 1600.59,1213.15 1601.17,1213.15 1601.76,1213.15 1602.34,1213.15 1602.93,1213.15 1603.52,1213.15 1604.1,1213.15 1604.69,1213.15 1605.28,1213.15 1605.86,1213.15 1606.45,1213.15 1607.04,1213.15 1607.62,1213.15 1608.21,1213.15 1608.8,1213.15 1609.38,1213.15 1609.97,1213.15 1610.55,1213.15 1611.14,1213.15 1611.73,1213.15 1612.31,1213.15 1612.9,1213.15 1613.49,1213.15 1614.07,1213.15 1614.66,1213.15 1615.25,1213.15 1615.83,1213.15 1616.42,1213.15 1617.01,1213.15 1617.59,1213.15 1618.18,1213.15 1618.76,1213.15 1619.35,1213.15 1619.94,1213.15 1620.52,1213.15 1621.11,1213.15 1621.7,1213.15 1622.28,1213.15 1622.87,1213.15 1623.46,1213.15 1624.04,1213.15 1624.63,1213.15 1625.22,1213.15 1625.8,1213.15 1626.39,1213.15 1626.97,1213.15 1627.56,1213.15 1628.15,1213.15 1628.73,1213.15 1629.32,1213.15 1629.91,1213.15 1630.49,1213.15 1631.08,1213.15 1631.67,1213.15 1632.25,1213.15 1632.84,1213.15 1633.42,1213.15 1634.01,1213.15 1634.6,1213.15 1635.18,1213.15 1635.77,1213.15 1636.36,1213.15 1636.94,1213.15 1637.53,1213.15 1638.12,1213.15 1638.7,1213.15 1639.29,1213.15 1639.88,1213.15 1640.46,1213.15 1641.05,1213.15 1641.63,1213.15 1642.22,1213.15 1642.81,1213.15 1643.39,1213.15 1643.98,1213.15 1644.57,1213.15 1645.15,1213.15 1645.74,1213.15 1646.33,1213.15 1646.91,1213.15 1647.5,1213.15 1648.09,1213.15 1648.67,1213.15 1649.26,1213.15 1649.84,1213.15 1650.43,1213.15 1651.02,1213.15 1651.6,1213.15 1652.19,1213.15 1652.78,1213.15 1653.36,1213.15 1653.95,1213.15 1654.54,1213.15 1655.12,1213.15 1655.71,1213.15 1656.29,1213.15 1656.88,1213.15 1657.47,1213.15 1658.05,1213.15 1658.64,1213.15 1659.23,1213.15 1659.81,1213.15 1660.4,1213.15 1660.99,1213.15 1661.57,1213.15 1662.16,1213.15 1662.75,1213.15 1663.33,1213.15 1663.92,1213.15 1664.5,1213.15 1665.09,1213.15 1665.68,1213.15 1666.26,1213.15 1666.85,1213.15 1667.44,1213.15 1668.02,1213.15 1668.61,1213.15 1669.2,1213.15 1669.78,1213.15 1670.37,1213.15 1670.96,1213.15 1671.54,1213.15 1672.13,1213.15 1672.71,1213.15 1673.3,1213.15 1673.89,1213.15 1674.47,1213.15 1675.06,1213.15 1675.65,1213.15 1676.23,1213.15 1676.82,1213.15 1677.41,1213.15 1677.99,1213.15 1678.58,1213.15 1679.17,1213.15 1679.75,1213.15 1680.34,1213.15 1680.92,1213.15 1681.51,1213.15 1682.1,1213.15 1682.68,1213.15 1683.27,1213.15 1683.86,1213.15 1684.44,1213.15 1685.03,1213.15 1685.62,1213.15 1686.2,1213.15 1686.79,1213.15 1687.37,1213.15 1687.96,1213.15 1688.55,1213.15 1689.13,1213.15 1689.72,1213.15 1690.31,1213.15 1690.89,1213.15 1691.48,1213.15 1692.07,1213.15 1692.65,1213.15 1693.24,1213.15 1693.83,1213.15 1694.41,1213.15 1695,1213.15 1695.58,1213.15 1696.17,1213.15 1696.76,1213.15 1697.34,1213.15 1697.93,1213.15 1698.52,1213.15 1699.1,1213.15 1699.69,1213.15 1700.28,1213.15 1700.86,1213.15 1701.45,1213.15 1702.04,1213.15 1702.62,1213.15 1703.21,1213.15 1703.79,1213.15 1704.38,1213.15 1704.97,1213.15 1705.55,1213.15 1706.14,1213.15 1706.73,1213.15 1707.31,1213.15 1707.9,1213.15 1708.49,1213.15 1709.07,1213.15 1709.66,1213.15 1710.24,1213.15 1710.83,1213.15 1711.42,1213.15 1712,1213.15 1712.59,1213.15 1713.18,1213.15 1713.76,1213.15 1714.35,1213.15 1714.94,1213.15 1715.52,1213.15 1716.11,1213.15 1716.7,1213.15 1717.28,1213.15 1717.87,1213.15 1718.45,1213.15 1719.04,1213.15 1719.63,1213.15 1720.21,1213.15 1720.8,1213.15 1721.39,1213.15 1721.97,1213.15 1722.56,1213.15 1723.15,1213.15 1723.73,1213.15 1724.32,1213.15 1724.91,1213.15 1725.49,1213.15 1726.08,1213.15 1726.66,1213.15 1727.25,1213.15 1727.84,1213.15 1728.42,1213.15 1729.01,1213.15 1729.6,1213.15 1730.18,1213.15 1730.77,1213.15 1731.36,1213.15 1731.94,1213.15 1732.53,1213.15 1733.11,1213.15 1733.7,1213.15 1734.29,1213.15 1734.87,1213.15 1735.46,1213.15 1736.05,1213.15 1736.63,1213.15 1737.22,1213.15 1737.81,1213.15 1738.39,1213.15 1738.98,1213.15 1739.57,1213.15 1740.15,1213.15 1740.74,1213.15 1741.32,1213.15 1741.91,1213.15 1742.5,1213.15 1743.08,1213.15 1743.67,1213.15 1744.26,1213.15 1744.84,1213.15 1745.43,1213.15 1746.02,1213.15 1746.6,1213.15 1747.19,1213.15 1747.78,1213.15 1748.36,1213.15 1748.95,1213.15 1749.53,1213.15 1750.12,1213.15 1750.71,1213.15 1751.29,1213.15 1751.88,1213.15 1752.47,1213.15 1753.05,1213.15 1753.64,1213.15 1754.23,1213.15 1754.81,1213.15 1755.4,1213.15 1755.99,1213.15 1756.57,1213.15 1757.16,1213.15 1757.74,1213.15 1758.33,1213.15 1758.92,1213.15 1759.5,1213.15 1760.09,1213.15 1760.68,1213.15 1761.26,1213.15 1761.85,1213.15 1762.44,1213.15 1763.02,1213.15 1763.61,1213.15 1764.19,1213.15 1764.78,1213.15 1765.37,1213.15 1765.95,1213.15 1766.54,1213.15 1767.13,1213.15 1767.71,1213.15 1768.3,1213.15 1768.89,1213.15 1769.47,1213.15 1770.06,1213.15 1770.65,1213.15 1771.23,1213.15 1771.82,1213.15 1772.4,1213.15 1772.99,1213.15 1773.58,1213.15 1774.16,1213.15 1774.75,1213.15 1775.34,1213.15 1775.92,1213.15 1776.51,1213.15 1777.1,1213.15 1777.68,1213.15 1778.27,1213.15 1778.86,1213.15 1779.44,1213.15 1780.03,1213.15 1780.61,1213.15 1781.2,1213.15 1781.79,1213.15 1782.37,1213.15 1782.96,1213.15 1783.55,1213.15 1784.13,1213.15 1784.72,1213.15 1785.31,1213.15 1785.89,1213.15 1786.48,1213.15 1787.06,1213.15 1787.65,1213.15 1788.24,1213.15 1788.82,1213.15 1789.41,1213.15 1790,1213.15 1790.58,1213.15 1791.17,1213.15 1791.76,1213.15 1792.34,1213.15 1792.93,1213.15 1793.52,1213.15 1794.1,1213.15 1794.69,1213.15 1795.27,1213.15 1795.86,1213.15 1796.45,1213.15 1797.03,1213.15 1797.62,1213.15 1798.21,1213.15 1798.79,1213.15 1799.38,1213.15 1799.97,1213.15 1800.55,1213.15 1801.14,1213.15 1801.73,1213.15 1802.31,1213.15 1802.9,1213.15 1803.48,1213.15 1804.07,1213.15 1804.66,1213.15 1805.24,1213.15 1805.83,1213.15 1806.42,1213.15 1807,1213.15 1807.59,1213.15 1808.18,1213.15 1808.76,1213.15 1809.35,1213.15 1809.94,1213.15 1810.52,1213.15 1811.11,1213.15 1811.69,1213.15 1812.28,1213.15 1812.87,1213.15 1813.45,1213.15 1814.04,1213.15 1814.63,1213.15 1815.21,1213.15 1815.8,1213.15 1816.39,1213.15 1816.97,1213.15 1817.56,1213.15 1818.14,1213.15 1818.73,1213.15 1819.32,1213.15 1819.9,1213.15 1820.49,1213.15 1821.08,1213.15 1821.66,1213.15 1822.25,1213.15 1822.84,1213.15 1823.42,1213.15 1824.01,1213.15 1824.6,1213.15 1825.18,1213.15 1825.77,1213.15 1826.35,1213.15 1826.94,1213.15 1827.53,1213.15 1828.11,1213.15 1828.7,1213.15 1829.29,1213.15 1829.87,1213.15 1830.46,1213.15 1831.05,1213.15 1831.63,1213.15 1832.22,1213.15 1832.81,1213.15 1833.39,1213.15 1833.98,1213.15 1834.56,1213.15 1835.15,1213.15 1835.74,1213.15 1836.32,1213.15 1836.91,1213.15 1837.5,1213.15 1838.08,1213.15 1838.67,1213.15 1839.26,1213.15 1839.84,1213.15 1840.43,1213.15 1841.01,1213.15 1841.6,1213.15 1842.19,1213.15 1842.77,1213.15 1843.36,1213.15 1843.95,1213.15 1844.53,1213.15 1845.12,1213.15 1845.71,1213.15 1846.29,1213.15 1846.88,1213.15 1847.47,1213.15 1848.05,1213.15 1848.64,1213.15 1849.22,1213.15 1849.81,1213.15 1850.4,1213.15 1850.98,1213.15 1851.57,1213.15 1852.16,1213.15 1852.74,1213.15 1853.33,1213.15 1853.92,1213.15 1854.5,1213.15 1855.09,1213.15 1855.68,1213.15 1856.26,1213.15 1856.85,1213.15 1857.43,1213.15 1858.02,1213.15 1858.61,1213.15 1859.19,1213.15 1859.78,1213.15 1860.37,1213.15 1860.95,1213.15 1861.54,1213.15 1862.13,1213.15 1862.71,1213.15 1863.3,1213.15 1863.88,1213.15 1864.47,1213.15 1865.06,1213.15 1865.64,1213.15 1866.23,1213.15 1866.82,1213.15 1867.4,1213.15 1867.99,1213.15 1868.58,1213.15 1869.16,1213.15 1869.75,1213.15 1870.34,1213.15 1870.92,1213.15 1871.51,1213.15 1872.09,1213.15 1872.68,1213.15 1873.27,1213.15 1873.85,1213.15 1874.44,1213.15 1875.03,1213.15 1875.61,1213.15 1876.2,1213.15 1876.79,1213.15 1877.37,1213.15 1877.96,1213.15 1878.55,1213.15 1879.13,1213.15 1879.72,1213.15 1880.3,1213.15 1880.89,1213.15 1881.48,1213.15 1882.06,1213.15 1882.65,1213.15 1883.24,1213.15 1883.82,1213.15 1884.41,1213.15 1885,1213.15 1885.58,1213.15 1886.17,1213.15 1886.76,1213.15 1887.34,1213.15 1887.93,1213.15 1888.51,1213.15 1889.1,1213.15 1889.69,1213.15 1890.27,1213.15 1890.86,1213.15 1891.45,1213.15 1892.03,1213.15 1892.62,1213.15 1893.21,1213.15 1893.79,1213.15 1894.38,1213.15 1894.96,1213.15 1895.55,1213.15 1896.14,1213.15 1896.72,1213.15 1897.31,1213.15 1897.9,1213.15 1898.48,1213.15 1899.07,1213.15 1899.66,1213.15 1900.24,1213.15 1900.83,1213.15 1901.42,1213.15 1902,1213.15 1902.59,1213.15 1903.17,1213.15 1903.76,1213.15 1904.35,1213.15 1904.93,1213.15 1905.52,1213.15 1906.11,1213.15 1906.69,1213.15 1907.28,1213.15 1907.87,1213.15 1908.45,1213.15 1909.04,1213.15 1909.63,1213.15 1910.21,1213.15 1910.8,1213.15 1911.38,1213.15 1911.97,1213.15 1912.56,1213.15 1913.14,1213.15 1913.73,1213.15 1914.32,1213.15 1914.9,1213.15 1915.49,1213.15 1916.08,1213.15 1916.66,1213.15 1917.25,1213.15 1917.83,1213.15 1918.42,1213.15 1919.01,1213.15 1919.59,1213.15 1920.18,1213.15 1920.77,1213.15 1921.35,1213.15 1921.94,1213.15 1922.53,1213.15 1923.11,1213.15 1923.7,1213.15 1924.29,1213.15 1924.87,1213.15 1925.46,1213.15 1926.04,1213.15 1926.63,1213.15 1927.22,1213.15 1927.8,1213.15 1928.39,1213.15 1928.98,1213.15 1929.56,1213.15 1930.15,1213.15 1930.74,1213.15 1931.32,1213.15 1931.91,1213.15 1932.5,1213.15 1933.08,1213.15 1933.67,1213.15 1934.25,1213.15 1934.84,1213.15 1935.43,1213.15 1936.01,1213.15 1936.6,1213.15 1937.19,1213.15 1937.77,1213.15 1938.36,1213.15 1938.95,1213.15 1939.53,1213.15 1940.12,1213.15 1940.71,1213.15 1941.29,1213.15 1941.88,1213.15 1942.46,1213.15 1943.05,1213.15 1943.64,1213.15 1944.22,1213.15 1944.81,1213.15 1945.4,1213.15 1945.98,1213.15 1946.57,1213.15 1947.16,1213.15 1947.74,1213.15 1948.33,1213.15 1948.91,1213.15 1949.5,1213.15 1950.09,1213.15 1950.67,1213.15 1951.26,1213.15 1951.85,1213.15 1952.43,1213.15 1953.02,1213.15 1953.61,1213.15 1954.19,1213.15 1954.78,1213.15 1955.37,1213.15 1955.95,1213.15 1956.54,1213.15 1957.12,1213.15 1957.71,1213.15 1958.3,1213.15 1958.88,1213.15 1959.47,1213.15 1960.06,1213.15 1960.64,1213.15 1961.23,1213.15 1961.82,1213.15 1962.4,1213.15 1962.99,1213.15 1963.58,1213.15 1964.16,1213.15 1964.75,1213.15 1965.33,1213.15 1965.92,1213.15 1966.51,1213.15 1967.09,1213.15 1967.68,1213.15 1968.27,1213.15 1968.85,1213.15 1969.44,1213.15 1970.03,1213.15 1970.61,1213.15 1971.2,1213.15 1971.78,1213.15 1972.37,1213.15 1972.96,1213.15 1973.54,1213.15 1974.13,1213.15 1974.72,1213.15 1975.3,1213.15 1975.89,1213.15 1976.48,1213.15 1977.06,1213.15 1977.65,1213.15 1978.24,1213.15 1978.82,1213.15 1979.41,1213.15 1979.99,1213.15 1980.58,1213.15 1981.17,1213.15 1981.75,1213.15 1982.34,1213.15 1982.93,1213.15 1983.51,1213.15 1984.1,1213.15 1984.69,1213.15 1985.27,1213.15 1985.86,1213.15 1986.45,1213.15 1987.03,1213.15 1987.62,1213.15 1988.2,1213.15 1988.79,1213.15 1989.38,1213.15 1989.96,1213.15 1990.55,1213.15 1991.14,1213.15 1991.72,1213.15 1992.31,1213.15 1992.9,1213.15 1993.48,1213.15 1994.07,1213.15 1994.65,1213.15 1995.24,1213.15 1995.83,1213.15 1996.41,1213.15 1997,1213.15 1997.59,1213.15 1998.17,1213.15 1998.76,1213.15 1999.35,1213.15 1999.93,1213.15 2000.52,1213.15 2001.11,1213.15 2001.69,1213.15 2002.28,1213.15 2002.86,1213.15 2003.45,1213.15 2004.04,1213.15 2004.62,1213.15 2005.21,1213.15 2005.8,1213.15 2006.38,1213.15 2006.97,1213.15 2007.56,1213.15 2008.14,1213.15 2008.73,1213.15 2009.32,1213.15 2009.9,1213.15 2010.49,1213.15 2011.07,1213.15 2011.66,1213.15 2012.25,1213.15 2012.83,1213.15 2013.42,1213.15 2014.01,1213.15 2014.59,1213.15 2015.18,1213.15 2015.77,1213.15 2016.35,1213.15 2016.94,1213.15 2017.53,1213.15 2018.11,1213.15 2018.7,1213.15 2019.28,1213.15 2019.87,1213.15 2020.46,1213.15 2021.04,1213.15 2021.63,1213.15 2022.22,1213.15 2022.8,1213.15 2023.39,1213.15 2023.98,1213.15 2024.56,1213.15 2025.15,1213.15 2025.73,1213.15 2026.32,1213.15 2026.91,1213.15 2027.49,1213.15 2028.08,1213.15 2028.67,1213.15 2029.25,1213.15 2029.84,1213.15 2030.43,1213.15 2031.01,1213.15 2031.6,1213.15 2032.19,1213.15 2032.77,1213.15 2033.36,1213.15 2033.94,1213.15 2034.53,1213.15 2035.12,1213.15 2035.7,1213.15 2036.29,1213.15 2036.88,1213.15 2037.46,1213.15 2038.05,1213.15 2038.64,1213.15 2039.22,1213.15 2039.81,1213.15 2040.4,1213.15 2040.98,1213.15 2041.57,1213.15 2042.15,1213.15 2042.74,1213.15 2043.33,1213.15 2043.91,1213.15 2044.5,1213.15 2045.09,1213.15 2045.67,1213.15 2046.26,1213.15 2046.85,1213.15 2047.43,1213.15 2048.02,1213.15 2048.6,1213.15 2049.19,1213.15 2049.78,1213.15 2050.36,1213.15 2050.95,1213.15 2051.54,1213.15 2052.12,1213.15 2052.71,1213.15 2053.3,1213.15 2053.88,1213.15 2054.47,1213.15 2055.06,1213.15 2055.64,1213.15 2056.23,1213.15 2056.81,1213.15 2057.4,1213.15 2057.99,1213.15 2058.57,1213.15 2059.16,1213.15 2059.75,1213.15 2060.33,1213.15 2060.92,1213.15 2061.51,1213.15 2062.09,1213.15 2062.68,1213.15 2063.27,1213.15 2063.85,1213.15 2064.44,1213.15 2065.02,1213.15 2065.61,1213.15 2066.2,1213.15 2066.78,1213.15 2067.37,1213.15 2067.96,1213.15 2068.54,1213.15 2069.13,1213.15 2069.72,1213.15 2070.3,1213.15 2070.89,1213.15 2071.48,1213.15 2072.06,1213.15 2072.65,1213.15 2073.23,1213.15 2073.82,1213.15 2074.41,1213.15 2074.99,1213.15 2075.58,1213.15 2076.17,1213.15 2076.75,1213.15 2077.34,1213.15 2077.93,1213.15 2078.51,1213.15 2079.1,1213.15 2079.68,1213.15 2080.27,1213.15 2080.86,1213.15 2081.44,1213.15 2082.03,1213.15 2082.62,1213.15 2083.2,1213.15 2083.79,1213.15 2084.38,1213.15 2084.96,1213.15 2085.55,1213.15 2086.14,1213.15 2086.72,1213.15 2087.31,1213.15 2087.89,1213.15 2088.48,1213.15 2089.07,1213.15 2089.65,1213.15 2090.24,1213.15 2090.83,1213.15 2091.41,1213.15 2092,1213.15 2092.59,1213.15 2093.17,1213.15 2093.76,1213.15 2094.35,1213.15 2094.93,1213.15 2095.52,1213.15 2096.1,1213.15 2096.69,1213.15 2097.28,1213.15 2097.86,1213.15 2098.45,1213.15 2099.04,1213.15 2099.62,1213.15 2100.21,1213.15 2100.8,1213.15 2101.38,1213.15 2101.97,1213.15 2102.55,1213.15 2103.14,1213.15 2103.73,1213.15 2104.31,1213.15 2104.9,1213.15 2105.49,1213.15 2106.07,1213.15 2106.66,1213.15 2107.25,1213.15 2107.83,1213.15 2108.42,1213.15 2109.01,1213.15 2109.59,1213.15 2110.18,1213.15 2110.76,1213.15 2111.35,1213.15 2111.94,1213.15 2112.52,1213.15 2113.11,1213.15 2113.7,1213.15 2114.28,1213.15 2114.87,1213.15 2115.46,1213.15 2116.04,1213.15 2116.63,1213.15 2117.22,1213.15 2117.8,1213.15 2118.39,1213.15 2118.97,1213.15 2119.56,1213.15 2120.15,1213.15 2120.73,1213.15 2121.32,1213.15 2121.91,1213.15 2122.49,1213.15 2123.08,1213.15 2123.67,1213.15 2124.25,1213.15 2124.84,1213.15 2125.42,1213.15 2126.01,1213.15 2126.6,1213.15 2127.18,1213.15 2127.77,1213.15 2128.36,1213.15 2128.94,1213.15 2129.53,1213.15 2130.12,1213.15 2130.7,1213.15 2131.29,1213.15 2131.88,1213.15 2132.46,1213.15 2133.05,1213.15 2133.63,1213.15 2134.22,1213.15 2134.81,1213.15 2135.39,1213.15 2135.98,1213.15 2136.57,1213.15 2137.15,1213.15 2137.74,1213.15 2138.33,1213.15 2138.91,1213.15 2139.5,1213.15 2140.09,1213.15 2140.67,1213.15 2141.26,1213.15 2141.84,1213.15 2142.43,1213.15 2143.02,1213.15 2143.6,1213.15 2144.19,1213.15 2144.78,1213.15 2145.36,1213.15 2145.95,1213.15 2146.54,1213.15 2147.12,1213.15 2147.71,1213.15 2148.3,1213.15 2148.88,1213.15 2149.47,1213.15 2150.05,1213.15 2150.64,1213.15 2151.23,1213.15 2151.81,1213.15 2152.4,1213.15 2152.99,1213.15 2153.57,1213.15 2154.16,1213.15 2154.75,1213.15 2155.33,1213.15 2155.92,1213.15 2156.5,1213.15 2157.09,1213.15 2157.68,1213.15 2158.26,1213.15 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.03,1195.04 1399.17,899.083 \"/>\n<polyline clip-path=\"url(#clip862)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.75 985.439,1195.04 2158.26,1195.04 2158.26,1230.75 985.439,1230.75 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip860)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip860)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip863\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip860)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip860)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip860)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip863)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2724.3 162.673,-3925.89 163.232,-4977.78 163.792,-5987.84 164.351,-6861.6 164.91,-7728.45 165.469,-7327.57 166.029,-8097.81 166.588,-8779.34 167.147,-9394.77 167.706,-9948.37 168.266,-10444.1 168.825,-10885.8 169.384,-10468 169.943,-10846.8 170.503,-11179.9 171.062,-11470.1 171.621,-10478.5 172.18,-10730.9 172.74,-10439.6 173.299,-10175 173.858,-9922.18 174.417,-10106.7 174.977,-10269 175.536,-10387.8 176.095,-10151.6 176.655,-10222 177.214,-10286.6 177.773,-10044.3 178.332,-10089.1 178.892,-9855.93 179.451,-9863.21 180.01,-9853.27 180.569,-9404.71 181.129,-9196.86 181.688,-9173.82 182.247,-8963.48 182.806,-8926.42 183.366,-8875.57 183.925,-8522.3 184.484,-8326.79 185.043,-8136.99 185.603,-8071.07 186.162,-7882 186.721,-7812.71 187.28,-7740.08 187.84,-7332.06 188.399,-7149.53 188.958,-6877.5 189.517,-6706.46 190.077,-6620.47 190.636,-6365.56 191.195,-6126.8 191.754,-5967.98 192.314,-5880.5 192.873,-5792.64 193.432,-5564.54 193.991,-5480.48 194.551,-5389.89 195.11,-5115.07 195.669,-4980.84 196.228,-4779.55 196.788,-4644.92 197.347,-4568.48 197.906,-4230.38 198.465,-4161.04 199.025,-3986.83 199.584,-3910.34 200.143,-3794.03 200.702,-3583.55 201.262,-3473.93 201.821,-3322.78 202.38,-3171.07 202.939,-2985.77 203.499,-2920.47 204.058,-2784.79 204.617,-2685.32 205.176,-2554.02 205.736,-2465.84 206.295,-2281.19 206.854,-2197.57 207.413,-2143.92 207.973,-2062.96 208.532,-1857.12 209.091,-1749.64 209.65,-1646 210.21,-1572.17 210.769,-1503.57 211.328,-1437.45 211.887,-1396.61 212.447,-1357.98 213.006,-1343.25 213.565,-1272.72 214.124,-1230.99 214.684,-1111.78 215.243,-1071.06 215.802,-956.369 216.361,-842.767 216.921,-737.916 217.48,-710.874 218.039,-662.788 218.598,-634.045 219.158,-554.89 219.717,-528.388 220.276,-499.336 220.835,-475.485 221.395,-379.381 221.954,-328.692 222.513,-236.611 223.072,-214.705 223.632,-147.572 224.191,-83.9154 224.75,-47.6638 225.309,14.6625 225.869,51.0097 226.428,86.7557 226.987,123.46 227.546,159.59 228.106,175.044 228.665,182.619 229.224,216.563 229.783,230.958 230.343,262.247 230.902,292.656 231.461,322.585 232.02,389.089 232.58,395.227 233.139,440.172 233.698,463.708 234.257,467.71 234.817,509.578 235.376,512.969 235.935,537.598 236.494,598.974 237.054,643.063 237.613,677.083 238.172,671.712 238.731,668.722 239.291,665.485 239.85,663.424 240.409,683.237 240.968,686.456 241.528,721.268 242.087,740.307 242.646,758.804 243.205,848.906 243.765,841.072 244.324,835.49 244.883,829.072 245.442,825.456 246.002,859.46 246.561,834.979 247.12,848.476 247.679,913.76 248.239,926.676 248.798,956.876 249.357,912.292 249.916,907.338 250.476,883.966 251.035,934.646 251.594,928.535 252.153,918.728 252.713,966.805 253.272,954.432 253.831,965.241 254.39,973.757 254.95,984.294 255.509,976.135 256.068,952.052 256.627,964.125 257.187,993.719 257.746,1022.33 258.305,1033.02 258.864,1058.25 259.424,1044.58 259.983,1051.28 260.542,1057.22 261.101,1080.31 261.661,1105.33 262.22,1114.62 262.779,1123.51 263.338,1113.15 263.898,1120.1 264.457,1075.44 265.016,1031.07 265.575,1058.43 266.135,1047.64 266.694,1075.48 267.253,1047.01 267.812,1074.58 268.372,1065.56 268.931,1059.61 269.49,1067.87 270.049,1042.66 270.609,1022.36 271.168,1032.57 271.727,1025.89 272.286,1021.23 272.846,1049.37 273.405,1041.21 273.964,1039.14 274.523,1030.76 275.083,1023.41 275.642,1018.17 276.201,1029.42 276.76,1026.29 277.32,1001.78 277.879,981.773 278.438,977.658 278.997,990.649 279.557,953.532 280.116,949.278 280.675,929.889 281.234,945.565 281.794,944.71 282.353,942.923 282.912,924.602 283.471,937.938 284.031,939.592 284.59,923.329 285.149,890.208 285.708,874.364 286.268,876.118 286.827,907.326 287.386,943.151 287.945,970.881 288.505,1022 289.064,1046.42 289.623,1089 290.182,1098.07 290.742,1092.04 291.301,1099.28 291.86,1087.82 292.419,1077.92 292.979,1116.35 293.538,1071.52 294.097,1064.36 294.656,1078.73 295.216,1102.48 295.775,1141.05 296.334,1124.49 296.893,1111.55 297.453,1103.5 298.012,1074.95 298.571,1069.13 299.13,1076.06 299.69,1098.5 300.249,1092.3 300.808,1047.82 301.368,1040.35 301.927,1052.38 302.486,1059.79 303.045,1050.44 303.605,1088.68 304.164,1091.94 304.723,1098.65 305.282,1103.55 305.842,1095.55 306.401,1083.08 306.96,1054.14 307.519,1043.06 308.079,1036.08 308.638,1028.6 309.197,1017.41 309.756,1025.5 310.316,1020.7 310.875,1010.47 311.434,1000.86 311.993,996.699 312.553,992.23 313.112,938.907 313.671,967.32 314.23,960.736 314.79,954.025 315.349,948.16 315.908,912.519 316.467,897.963 317.027,898.797 317.586,880.246 318.145,880.974 318.704,831.441 319.264,915.846 319.823,913.978 320.382,908.757 320.941,913.023 321.501,943.292 322.06,990.526 322.619,983.019 323.178,980.944 323.738,972.862 324.297,982.234 324.856,988.74 325.415,968.41 325.975,979.662 326.534,956.835 327.093,986.353 327.652,998.256 328.212,990.384 328.771,968.013 329.33,927.804 329.889,938.707 330.449,966.565 331.008,961.916 331.567,987.851 332.126,967.141 332.686,946.923 333.245,929.209 333.804,939.891 334.363,934.675 334.923,946.503 335.482,941.776 336.041,923.739 336.6,918.373 337.16,916.17 337.719,911.848 338.278,939.158 338.837,915.957 339.397,896.025 339.956,863.233 340.515,863.156 341.074,882.197 341.634,865.85 342.193,894.533 342.752,926.02 343.311,948.461 343.871,922.885 344.43,948.938 344.989,942.033 345.548,936.656 346.108,963.71 346.667,988.417 347.226,962.577 347.785,924.094 348.345,904.109 348.904,917.115 349.463,911.077 350.022,885.725 350.582,899.367 351.141,880.08 351.7,907.655 352.259,902.303 352.819,896.39 353.378,894.265 353.937,922.595 354.496,928.862 355.056,954.133 355.615,947.01 356.174,908.813 356.733,851.079 357.293,851.782 357.852,815.278 358.411,827.668 358.97,822.173 359.53,819.522 360.089,836.695 360.648,820.314 361.207,772.897 361.767,806.826 362.326,840.823 362.885,839.031 363.444,855.563 364.004,802.941 364.563,836.419 365.122,834.985 365.681,851.424 366.241,835.693 366.8,834.191 367.359,862.952 367.918,891.987 368.478,902.144 369.037,880.228 369.596,877.505 370.155,872.205 370.715,851.675 371.274,852.154 371.833,835.945 372.392,819.639 372.952,869.752 373.511,868.068 374.07,867.792 374.629,877.93 375.189,890.23 375.748,872.578 376.307,855.477 376.866,854.437 377.426,867.374 377.985,847.732 378.544,811.598 379.103,845.657 379.663,822.185 380.222,819.674 380.781,822.747 381.34,841.556 381.9,839.761 382.459,836.378 383.018,835.923 383.577,849.242 384.137,811.989 384.696,795.493 385.255,779.332 385.814,777.841 386.374,759.251 386.933,779.286 387.492,782.667 388.051,781.48 388.611,782.07 389.17,782.931 389.729,783.994 390.288,768.667 390.848,750.823 391.407,736.038 391.966,752.386 392.525,752.893 393.085,738.582 393.644,737.825 394.203,723.209 394.762,741.792 395.322,758.788 395.881,731.229 396.44,735.575 396.999,737.872 397.559,755.258 398.118,773.338 398.677,774.528 399.236,791.497 399.796,794.759 400.355,810.887 400.914,810.862 401.473,828.019 402.033,825.306 402.592,805.946 403.151,806.278 403.71,805.091 404.27,787.995 404.829,786.583 405.388,803.992 405.947,800.599 406.507,814.42 407.066,829.007 407.625,831.157 408.184,847.314 408.744,840.072 409.303,820.151 409.862,834.222 410.421,846.501 410.981,838.923 411.54,869.573 412.099,846.42 412.658,845.264 413.218,872.502 413.777,832.856 414.336,848.323 414.895,844.033 415.455,811.924 416.014,809.626 416.573,791.223 417.132,789.474 417.692,785.003 418.251,785.815 418.81,800.091 419.369,797.945 419.929,827.078 420.488,802.351 421.047,834.014 421.606,860.471 422.166,872.236 422.725,886.363 423.284,914.06 423.843,906.758 424.403,883.36 424.962,860.07 425.521,842.492 426.08,871.05 426.64,818.48 427.199,798.718 427.758,793.478 428.318,807.137 428.877,802.882 429.436,795.849 429.995,810.308 430.555,825.901 431.114,821.711 431.673,771.282 432.232,770.177 432.792,782.753 433.351,763.914 433.91,781.62 434.469,765.842 435.029,751.819 435.588,799.614 436.147,812.89 436.706,815.644 437.266,831.613 437.825,811.082 438.384,839.607 438.943,852.818 439.503,833.769 440.062,860.767 440.621,808.989 441.18,823.596 441.74,787.733 442.299,785.392 442.858,736.385 443.417,740.875 443.977,740.451 444.536,723.712 445.095,723.535 445.654,726.631 446.214,740.445 446.773,740.259 447.332,725.581 447.891,760.329 448.451,764.261 449.01,765.24 449.569,768.772 450.128,833.79 450.688,798.59 451.247,761.494 451.806,763.44 452.365,776.609 452.925,761.385 453.484,760.555 454.043,758.521 454.602,775.171 455.162,758.277 455.721,725.118 456.28,692.559 456.839,676.062 457.399,678.109 457.958,700.773 458.517,734.72 459.076,752.566 459.636,786.671 460.195,765.115 460.754,731.117 461.313,777.036 461.873,759.196 462.432,759.966 462.991,758.39 463.55,760.688 464.11,741.779 464.669,741.304 465.228,724.889 465.787,728.099 466.347,778.876 466.906,760.893 467.465,775.814 468.024,807.152 468.584,785.647 469.143,800.408 469.702,798.035 470.261,791.907 470.821,787.266 471.38,753.901 471.939,749.782 472.498,719.69 473.058,670.998 473.617,674.194 474.176,692.517 474.735,759.01 475.295,742.086 475.854,742.66 476.413,756.766 476.972,738.633 477.532,785.765 478.091,833.268 478.65,810.659 479.209,789.424 479.769,783.7 480.328,751.917 480.887,769.297 481.446,750.525 482.006,766.196 482.565,748.387 483.124,779.855 483.683,779.409 484.243,743.067 484.802,742.475 485.361,773.807 485.92,773.744 486.48,786.499 487.039,830.535 487.598,860.404 488.157,820.296 488.717,799.937 489.276,765.178 489.835,781.63 490.394,811.749 490.954,823.528 491.513,800.262 492.072,811.141 492.631,806.665 493.191,803.651 493.75,764.286 494.309,744.639 494.868,724.72 495.428,725.128 495.987,708.575 496.546,678.764 497.105,729.539 497.665,678.591 498.224,679.817 498.783,715.992 499.342,736.016 499.902,739.514 500.461,739.342 501.02,722.508 501.579,723.676 502.139,711.841 502.698,730.649 503.257,731.782 503.816,735.776 504.376,699.595 504.935,688.644 505.494,724.585 506.053,725.143 506.613,659.487 507.172,661.818 507.731,648.184 508.29,652.91 508.85,643.31 509.409,649.59 509.968,668.997 510.527,676.522 511.087,680.536 511.646,668.444 512.205,700.143 512.764,732.838 513.324,752.658 513.883,769.86 514.442,736.097 515.001,781.369 515.561,747.587 516.12,748.041 516.679,749.752 517.238,749.456 517.798,765.261 518.357,765.757 518.916,750.984 519.475,766.203 520.035,781.105 520.594,780.021 521.153,811.322 521.712,808.663 522.272,821.982 522.831,798.06 523.39,794.936 523.949,822.372 524.509,817.75 525.068,828.211 525.627,840.346 526.186,849.225 526.746,855.647 527.305,832.198 527.864,871.028 528.423,860.69 528.983,852.373 529.542,847.49 530.101,839.711 530.66,831.89 531.22,825.227 531.779,823.247 532.338,835.832 532.897,831.839 533.457,792.089 534.016,817.262 534.575,797.143 535.134,796.616 535.694,804.596 536.253,783.499 536.812,779.167 537.371,804.027 537.931,767.869 538.49,796.812 539.049,791.488 539.608,736.555 540.168,735.127 540.727,719.119 541.286,702.923 541.845,702.773 542.405,683.044 542.964,682.871 543.523,669.857 544.082,722.439 544.642,719.682 545.201,719.868 545.76,723.445 546.319,693.255 546.879,711.11 547.438,726.186 547.997,737.861 548.556,736.091 549.116,738.962 549.675,740.683 550.234,755.741 550.793,736.201 551.353,733.902 551.912,683.901 552.471,697.731 553.031,700.248 553.59,687.984 554.149,689.549 554.708,676.231 555.268,677.496 555.827,696.482 556.386,712.79 556.945,740.526 557.505,719.755 558.064,732.841 558.623,747.286 559.182,760.618 559.742,755.081 560.301,736.654 560.86,731.267 561.419,731.227 561.979,695.852 562.538,711.976 563.097,728.423 563.656,711.236 564.216,695.864 564.775,697.118 565.334,667.189 565.893,651.826 566.453,667.023 567.012,732.319 567.571,682.966 568.13,633.157 568.69,637.208 569.249,657.447 569.808,658.62 570.367,676.038 570.927,676.065 571.486,694.785 572.045,631.212 572.604,652.156 573.164,656.203 573.723,661.372 574.282,681.376 574.841,681.455 575.401,683.616 575.96,681.855 576.519,682.816 577.078,701.412 577.638,717.635 578.197,732.527 578.756,714.763 579.315,713.924 579.875,681.652 580.434,699.201 580.993,699.857 581.552,682.9 582.112,700.707 582.671,719.681 583.23,703.108 583.789,734.039 584.349,723.508 584.908,724.441 585.467,707.735 586.026,772.009 586.586,752.147 587.145,753.559 587.704,718.863 588.263,732.455 588.823,719.164 589.382,673.017 589.941,659.838 590.5,662.517 591.06,665.679 591.619,653.152 592.178,752.612 592.737,764.096 593.297,727.388 593.856,710.288 594.415,706.829 594.974,722.247 595.534,738.241 596.093,737.742 596.652,737.028 597.211,753.385 597.771,731.776 598.33,731.019 598.889,762.358 599.448,739.353 600.008,740.303 600.567,736.264 601.126,716.996 601.685,698.584 602.245,700.757 602.804,715.176 603.363,699.909 603.922,699.994 604.482,686.604 605.041,688.498 605.6,622.09 606.159,658.751 606.719,643.981 607.278,632.431 607.837,636.404 608.396,639.424 608.956,676.577 609.515,694.208 610.074,693.576 610.633,691.955 611.193,695.208 611.752,732.487 612.311,764.089 612.87,811.205 613.43,821.765 613.989,834.303 614.548,830.835 615.107,807.393 615.667,788.669 616.226,757.083 616.785,756.454 617.344,782.859 617.904,778.079 618.463,760.681 619.022,759.116 619.581,757.351 620.141,737.84 620.7,734.376 621.259,753.234 621.818,751.547 622.378,783.064 622.937,809.278 623.496,804.417 624.055,816.344 624.615,811.025 625.174,791.954 625.733,772.541 626.292,734.537 626.852,732.087 627.411,728.615 627.97,726.222 628.529,736.723 629.089,731.832 629.648,698.274 630.207,681.059 630.766,666.705 631.326,653.731 631.885,669.9 632.444,673.416 633.003,671.648 633.563,623.218 634.122,615.457 634.681,634.792 635.24,640.16 635.8,659.286 636.359,674.585 636.918,704.91 637.477,734.115 638.037,762.794 638.596,775.521 639.155,742.763 639.714,758.331 640.274,760.59 640.833,743.796 641.392,728.741 641.951,748.562 642.511,746.677 643.07,763.86 643.629,760.222 644.188,772.981 644.748,768.849 645.307,782.127 645.866,744.676 646.425,707.404 646.985,707.387 647.544,708.802 648.103,724.3 648.662,753.883 649.222,718.418 649.781,705.615 650.34,673.636 650.899,673.493 651.459,676.891 652.018,675.045 652.577,658.763 653.136,646.392 653.696,616.314 654.255,632.41 654.814,572.602 655.373,580.905 655.933,581.833 656.492,621.901 657.051,611.78 657.61,632.645 658.17,634.348 658.729,640.412 659.288,629.257 659.847,680.706 660.407,629.327 660.966,619.048 661.525,588.891 662.084,580.151 662.644,602.273 663.203,625.601 663.762,611.104 664.321,615.474 664.881,615.643 665.44,668.011 665.999,671 666.558,690.189 667.118,722.402 667.677,724.52 668.236,724.02 668.795,754.594 669.355,738.819 669.914,766.841 670.473,762.698 671.032,729.663 671.592,743.735 672.151,727.406 672.71,725.537 673.269,690.245 673.829,725.992 674.388,727.313 674.947,741.677 675.506,741.077 676.066,753.437 676.625,731.061 677.184,715.564 677.743,744.135 678.303,729.376 678.862,743.903 679.421,723.849 679.981,704.859 680.54,707.109 681.099,706.958 681.658,707.573 682.218,674.865 682.777,677.457 683.336,675.257 683.895,661.406 684.455,664.464 685.014,680.268 685.573,647.718 686.132,632.494 686.692,619.288 687.251,656.249 687.81,629.664 688.369,583.051 688.929,576.937 689.488,584.442 690.047,591.733 690.606,631.358 691.166,602.913 691.725,604.577 692.284,591.73 692.843,613.278 693.403,636.68 693.962,642.721 694.521,632.133 695.08,572.257 695.64,623.53 696.199,673.933 696.758,678.089 697.317,648.03 697.877,651.048 698.436,684.752 698.995,718.256 699.554,700.064 700.114,716.262 700.673,762.437 701.232,711.554 701.791,744.204 702.351,694.065 702.91,725.954 703.469,725.042 704.028,674.184 704.588,658.605 705.147,659.858 705.706,676.862 706.265,712.277 706.825,760.291 707.384,805.557 707.943,814.173 708.502,765.302 709.062,714.384 709.621,699.32 710.18,701.962 710.739,686.773 711.299,684.838 711.858,685.265 712.417,686.949 712.976,724.938 713.536,691.477 714.095,703.997 714.654,704.684 715.213,672.913 715.773,642.239 716.332,644.738 716.891,645.239 717.45,647.2 718.01,664.692 718.569,698.38 719.128,699.448 719.687,697.742 720.247,680.861 720.806,697.434 721.365,702.889 721.924,686.808 722.484,655.748 723.043,641.534 723.602,674.241 724.161,688.593 724.721,687.904 725.28,702.852 725.839,706.741 726.398,670.171 726.958,653.151 727.517,656.896 728.076,689.089 728.635,687.765 729.195,704.714 729.754,722.418 730.313,707.103 730.872,722.303 731.432,737.153 731.991,784.501 732.55,768.107 733.109,761.129 733.669,739.987 734.228,719.58 734.787,700.572 735.346,729.606 735.906,728.973 736.465,727.626 737.024,725.684 737.583,741.195 738.143,737.291 738.702,737.384 739.261,703.306 739.82,739.127 740.38,737.778 740.939,752.42 741.498,751.747 742.057,749.981 742.617,761.997 743.176,743.257 743.735,771.271 744.294,782.683 744.854,759.936 745.413,756.5 745.972,767.051 746.531,745.911 747.091,760.364 747.65,756.957 748.209,771.408 748.768,768.422 749.328,751.172 749.887,766.211 750.446,795.63 751.005,789.014 751.565,801.378 752.124,764.021 752.683,789.44 753.242,797.899 753.802,808.743 754.361,817.055 754.92,842.491 755.479,801.325 756.039,795.485 756.598,841.608 757.157,800.77 757.716,813.298 758.276,788.957 758.835,751.16 759.394,730.802 759.953,742.265 760.513,704.328 761.072,717.982 761.631,717.32 762.19,731.803 762.75,711.123 763.309,709.169 763.868,693.682 764.427,677.744 764.987,662.359 765.546,648.393 766.105,647.402 766.664,612.384 767.224,616.93 767.783,638.119 768.342,673.644 768.901,674.981 769.461,675.46 770.02,644.504 770.579,630.028 771.138,667.808 771.698,671.698 772.257,709.417 772.816,690.162 773.375,709.822 773.935,741.13 774.494,721.513 775.053,719.758 775.612,765.582 776.172,760.702 776.731,787.138 777.29,764.821 777.849,712.939 778.409,746.682 778.968,711.933 779.527,761.148 780.086,788.846 780.646,766.971 781.205,744.611 781.764,741.679 782.323,737.57 782.883,766.362 783.442,807.587 784.001,816.281 784.56,776.135 785.12,788.282 785.679,781.186 786.238,810.241 786.797,821.997 787.357,799.524 787.916,795.021 788.475,789.41 789.034,769.903 789.594,729.85 790.153,679.604 790.712,679.654 791.271,694.477 791.831,742.762 792.39,705.503 792.949,702.61 793.508,716.847 794.068,728.978 794.627,726.658 795.186,723.765 795.745,722.599 796.305,719.649 796.864,747.363 797.423,728.273 797.982,689.839 798.542,706.2 799.101,686.925 799.66,685.628 800.219,672.09 800.779,671.111 801.338,643.859 801.897,615.002 802.456,653.986 803.016,657.669 803.575,625.823 804.134,646.101 804.693,632.068 805.253,634.964 805.812,621.362 806.371,624.62 806.931,645.204 807.49,665.519 808.049,650.242 808.608,654.151 809.168,639.228 809.727,641.68 810.286,627.117 810.845,632.063 811.405,617.387 811.964,638.634 812.523,689.815 813.082,673.68 813.642,686.063 814.201,636.51 814.76,627.677 815.319,626.37 815.879,616.601 816.438,623.425 816.997,638.95 817.556,640.959 818.116,624.202 818.675,643.436 819.234,629.685 819.793,615.762 820.353,618.789 820.912,573.11 821.471,641.311 822.03,679.86 822.59,668.685 823.149,652.138 823.708,639.838 824.267,644.3 824.827,659.461 825.386,692.854 825.945,742 826.504,738.585 827.064,670.251 827.623,674.09 828.182,707.245 828.741,690.861 829.301,718.358 829.86,698.524 830.419,728.327 830.978,772.486 831.538,753.601 832.097,719.861 832.656,749.722 833.215,759.115 833.775,742.174 834.334,771.509 834.893,796.771 835.452,774.721 836.012,836.313 836.571,849.146 837.13,825.007 837.689,803.737 838.249,813.169 838.808,759.155 839.367,769.794 839.926,778.507 840.486,756.691 841.045,739.754 841.604,720.862 842.163,719.156 842.723,705.477 843.282,617.7 843.841,637.062 844.4,607.559 844.96,547.343 845.519,570.702 846.078,576.819 846.637,617.57 847.197,670.366 847.756,671.676 848.315,671.143 848.874,656.05 849.434,673.451 849.993,689.284 850.552,690.576 851.111,690.431 851.671,674.401 852.23,621.912 852.789,607.903 853.348,595.827 853.908,586.868 854.467,573.359 855.026,598.383 855.585,569.196 856.145,560 856.704,550.667 857.263,545.57 857.822,538.627 858.382,513.335 858.941,536.748 859.5,540.228 860.059,512.546 860.619,536.615 861.178,543.174 861.737,567.672 862.296,626.365 862.856,615.959 863.415,637.805 863.974,640.133 864.533,644.841 865.093,612.357 865.652,614.714 866.211,604.771 866.77,655.745 867.33,657.964 867.889,656.876 868.448,673.391 869.007,690.862 869.567,689.901 870.126,723.875 870.685,736.462 871.244,749.683 871.804,746.768 872.363,713.989 872.922,693.561 873.481,726.871 874.041,707.085 874.6,703.526 875.159,687.464 875.718,671.401 876.278,672.665 876.837,636.803 877.396,636.145 877.955,608.19 878.515,610.163 879.074,596.551 879.633,587.388 880.192,594.595 880.752,629.941 881.311,616.277 881.87,620.306 882.429,641.432 882.989,660.214 883.548,597.856 884.107,620.765 884.666,590.517 885.226,627.84 885.785,631.935 886.344,619.455 886.903,620.96 887.463,675.425 888.022,708.542 888.581,709.81 889.14,709.256 889.7,692.993 890.259,673.718 890.818,660.489 891.377,678.437 891.937,694.189 892.496,661.349 893.055,644.75 893.614,632.088 894.174,635.693 894.733,640.143 895.292,611.573 895.851,583.538 896.411,623.24 896.97,626.808 897.529,629.789 898.088,635.314 898.648,623.89 899.207,628.827 899.766,663.302 900.325,663.017 900.885,680.178 901.444,697.379 902.003,697.577 902.562,714.207 903.122,711.169 903.681,710.112 904.24,693.888 904.799,707.439 905.359,707.097 905.918,722.982 906.477,721.329 907.036,723.671 907.596,771.359 908.155,753.671 908.714,762.524 909.273,775.557 909.833,770.587 910.392,766.133 910.951,778.171 911.51,773.753 912.07,753.967 912.629,768.367 913.188,748.714 913.747,729.317 914.307,738.503 914.866,718.86 915.425,731.546 915.984,760.995 916.544,742.505 917.103,776.867 917.662,755.673 918.221,733.904 918.781,718.412 919.34,700.163 919.899,699.96 920.458,730.93 921.018,746.647 921.577,746.396 922.136,777.787 922.695,756.042 923.255,735.958 923.814,749.707 924.373,762.735 924.932,730.291 925.492,728.593 926.051,710.1 926.61,690.379 927.169,692.154 927.729,693.349 928.288,691.303 928.847,725.609 929.406,726.335 929.966,768.229 930.525,747.537 931.084,762.269 931.644,745.66 932.203,777.76 932.762,760.695 933.321,756.343 933.881,733.048 934.44,729.572 934.999,727.718 935.558,724.809 936.118,722.095 936.677,716.842 937.236,683.105 937.795,664.831 938.355,695.923 938.914,689.228 939.473,707.282 940.032,688.524 940.592,701.983 941.151,699.799 941.71,717.13 942.269,716.44 942.829,716.616 943.388,717.382 943.947,711.477 944.506,723.223 945.066,720.496 945.625,701.33 946.184,718.395 946.743,701.085 947.303,714.262 947.862,762.21 948.421,761.352 948.98,755.369 949.54,768.265 950.099,731.825 950.658,731.9 951.217,748.434 951.777,727.258 952.336,753.105 952.895,752.136 953.454,747.521 954.014,740.112 954.573,720.142 955.132,718.776 955.691,716.886 956.251,712.79 956.81,711.767 957.369,667.069 957.928,668.042 958.488,684.663 959.047,682.593 959.606,666.102 960.165,618.261 960.725,637.899 961.284,625.438 961.843,628.406 962.402,646.209 962.962,666.568 963.521,670.303 964.08,672.955 964.639,657.503 965.199,673.094 965.758,707.468 966.317,711.325 966.876,711.092 967.436,740.773 967.995,740.716 968.554,721.939 969.113,707.348 969.673,720.305 970.232,752.796 970.791,764.621 971.35,797.232 971.91,776.167 972.469,801.252 973.028,794.909 973.587,753.452 974.147,747.979 974.706,774.21 975.265,673.422 975.824,660.694 976.384,628.85 976.943,647.655 977.502,632.619 978.061,633.701 978.621,635.274 979.18,639.164 979.739,675.161 980.298,642.425 980.858,626.257 981.417,632.075 981.976,633.464 982.535,636.863 983.095,640.184 983.654,661.203 984.213,664.469 984.772,634.786 985.332,652.416 985.891,636.073 986.45,637.22 987.009,627.088 987.569,613.814 988.128,618.904 988.687,621.53 989.246,591.021 989.806,577.892 990.365,615.893 990.924,634.574 991.483,614.958 992.043,604.212 992.602,607.064 993.161,611.431 993.72,615.333 994.28,653.698 994.839,636.738 995.398,624.736 995.957,627.807 996.517,628.732 997.076,681.074 997.635,663.677 998.194,665.066 998.754,682.16 999.313,695.152 999.872,709.923 1000.43,705.807 1000.99,686.509 1001.55,718.488 1002.11,717.192 1002.67,697.598 1003.23,696.037 1003.79,698.606 1004.35,715.073 1004.91,729.357 1005.46,711.704 1006.02,709.809 1006.58,722.772 1007.14,719.247 1007.7,722.176 1008.26,737.205 1008.82,750.238 1009.38,743.807 1009.94,742.734 1010.5,754.286 1011.06,734.956 1011.62,717.149 1012.18,716.489 1012.73,711.536 1013.29,713.839 1013.85,742.848 1014.41,768.321 1014.97,746.891 1015.53,763.083 1016.09,742.6 1016.65,741.996 1017.21,722.721 1017.77,690.264 1018.33,706.899 1018.89,721.621 1019.45,723.598 1020.01,738.007 1020.56,746.41 1021.12,725.926 1021.68,708.081 1022.24,706.921 1022.8,724.953 1023.36,742.96 1023.92,755.985 1024.48,780.764 1025.04,774.052 1025.6,783.144 1026.16,779.52 1026.72,808.911 1027.28,817.73 1027.83,824.403 1028.39,851.714 1028.95,826.898 1029.51,772.438 1030.07,767.565 1030.63,764.855 1031.19,792.666 1031.75,733.2 1032.31,746.311 1032.87,725.433 1033.43,702.941 1033.99,687.943 1034.55,703.551 1035.1,701.64 1035.66,703.288 1036.22,653.094 1036.78,674.094 1037.34,643.943 1037.9,628.721 1038.46,634.832 1039.02,624.007 1039.58,608.329 1040.14,644.247 1040.7,677.617 1041.26,665.168 1041.82,652.186 1042.38,654.314 1042.93,640.438 1043.49,693.225 1044.05,710.515 1044.61,708.393 1045.17,658.194 1045.73,611.44 1046.29,600.775 1046.85,620.964 1047.41,590.677 1047.97,596.695 1048.53,595.817 1049.09,632.728 1049.65,639.051 1050.2,658.522 1050.76,598.094 1051.32,587.761 1051.88,609.806 1052.44,615.246 1053,637.256 1053.56,639.118 1054.12,641.505 1054.68,641.295 1055.24,627.142 1055.8,665.799 1056.36,648.755 1056.92,629.468 1057.48,603.368 1058.03,609.008 1058.59,596.682 1059.15,583.367 1059.71,585.739 1060.27,604.761 1060.83,628.969 1061.39,630.793 1061.95,650.484 1062.51,622.791 1063.07,625.109 1063.63,629.09 1064.19,631.179 1064.75,632.788 1065.3,648.325 1065.86,653.955 1066.42,642.908 1066.98,660.429 1067.54,630.493 1068.1,619.208 1068.66,627.535 1069.22,612.828 1069.78,621.157 1070.34,640.489 1070.9,642.587 1071.46,631.084 1072.02,652.65 1072.57,686.532 1073.13,668.581 1073.69,668.51 1074.25,672.052 1074.81,704.656 1075.37,689.313 1075.93,702.328 1076.49,700.469 1077.05,734.514 1077.61,727.882 1078.17,740.578 1078.73,736.544 1079.29,754.152 1079.85,735.651 1080.4,717.227 1080.96,780.405 1081.52,793.547 1082.08,753.875 1082.64,730.945 1083.2,710.216 1083.76,713.103 1084.32,698.573 1084.88,711.702 1085.44,710.029 1086,688.767 1086.56,717.198 1087.12,745.509 1087.67,746.571 1088.23,709.746 1088.79,645.57 1089.35,599.189 1089.91,572.746 1090.47,596.669 1091.03,583.873 1091.59,574.845 1092.15,545.764 1092.71,555.806 1093.27,562.573 1093.83,551.143 1094.39,559.595 1094.94,566.103 1095.5,571.902 1096.06,590.689 1096.62,612.823 1097.18,621.065 1097.74,610.192 1098.3,634.706 1098.86,638.941 1099.42,647.797 1099.98,700.018 1100.54,697.83 1101.1,731.177 1101.66,747.88 1102.22,775.199 1102.77,742.531 1103.33,737.143 1103.89,749.922 1104.45,843.834 1105.01,821.796 1105.57,801.825 1106.13,781.332 1106.69,761.714 1107.25,711.934 1107.81,708.548 1108.37,709.858 1108.93,677.248 1109.49,675.223 1110.04,644.384 1110.6,631.36 1111.16,654.625 1111.72,673.7 1112.28,718.922 1112.84,701.758 1113.4,719.181 1113.96,700.024 1114.52,733.227 1115.08,735.379 1115.64,698.979 1116.2,711.937 1116.76,709.284 1117.31,711.034 1117.87,739.53 1118.43,736.394 1118.99,732.789 1119.55,723.735 1120.11,737.42 1120.67,749.246 1121.23,713.14 1121.79,744.043 1122.35,759.847 1122.91,754.188 1123.47,750.501 1124.03,728.741 1124.59,695.353 1125.14,695.707 1125.7,710.021 1126.26,706.607 1126.82,705.602 1127.38,686.628 1127.94,653.622 1128.5,624.46 1129.06,600.013 1129.62,653.105 1130.18,667.712 1130.74,699.565 1131.3,680.573 1131.86,678.507 1132.41,679.868 1132.97,618.413 1133.53,606.149 1134.09,608.537 1134.65,616.064 1135.21,616.656 1135.77,604.833 1136.33,626.759 1136.89,598.927 1137.45,618.513 1138.01,655.125 1138.57,673.352 1139.13,672.839 1139.68,688.284 1140.24,667.694 1140.8,652.2 1141.36,654.333 1141.92,656.625 1142.48,641.954 1143.04,643.375 1143.6,629.348 1144.16,632.093 1144.72,635.42 1145.28,639.482 1145.84,656.469 1146.4,683.912 1146.96,698.414 1147.51,744.821 1148.07,708.807 1148.63,661.492 1149.19,661.99 1149.75,650.394 1150.31,681.508 1150.87,682.745 1151.43,682.186 1151.99,661.821 1152.55,664.53 1153.11,648.213 1153.67,670.471 1154.23,639.899 1154.78,628.84 1155.34,648.959 1155.9,649.377 1156.46,646.73 1157.02,650.012 1157.58,601.188 1158.14,606.977 1158.7,611.557 1159.26,630.253 1159.82,630.624 1160.38,587.322 1160.94,590.309 1161.5,613.747 1162.05,600.263 1162.61,588.415 1163.17,580.551 1163.73,583.376 1164.29,643.649 1164.85,698.2 1165.41,683.076 1165.97,666.098 1166.53,688.553 1167.09,689.703 1167.65,690.853 1168.21,672.353 1168.77,674.742 1169.33,696.299 1169.88,681.143 1170.44,699.343 1171,711.116 1171.56,708.392 1172.12,657.964 1172.68,660.847 1173.24,665.944 1173.8,669.537 1174.36,638.523 1174.92,653.593 1175.48,655.665 1176.04,654.83 1176.6,669.742 1177.15,673.33 1177.71,689.04 1178.27,686.147 1178.83,702.965 1179.39,713.895 1179.95,740.308 1180.51,722.588 1181.07,738.487 1181.63,769.094 1182.19,733.502 1182.75,743.659 1183.31,753.931 1183.87,783.244 1184.43,779.882 1184.98,741.78 1185.54,740.444 1186.1,771.181 1186.66,751.512 1187.22,763.632 1187.78,725.994 1188.34,736.479 1188.9,734.507 1189.46,733.021 1190.02,731.396 1190.58,715.736 1191.14,729.294 1191.7,708.064 1192.25,726.093 1192.81,723.92 1193.37,721.289 1193.93,719.904 1194.49,701.851 1195.05,700.311 1195.61,721.344 1196.17,702.287 1196.73,701.967 1197.29,668.139 1197.85,667.219 1198.41,664.082 1198.97,628.561 1199.52,648.551 1200.08,649.949 1200.64,618.535 1201.2,618.113 1201.76,622.522 1202.32,642.623 1202.88,614.556 1203.44,606.876 1204,591.555 1204.56,612.468 1205.12,664.637 1205.68,663.42 1206.24,699.717 1206.8,680.115 1207.35,680.229 1207.91,678.243 1208.47,726.467 1209.03,690.987 1209.59,675.543 1210.15,674.213 1210.71,673.198 1211.27,690.365 1211.83,657.333 1212.39,672.2 1212.95,687.876 1213.51,654.697 1214.07,673.822 1214.62,673.679 1215.18,692.678 1215.74,727.144 1216.3,755.335 1216.86,703.285 1217.42,715.102 1217.98,714.006 1218.54,708.633 1219.1,710.819 1219.66,725.147 1220.22,725.405 1220.78,724.711 1221.34,739.275 1221.89,735.948 1222.45,699.956 1223.01,720.945 1223.57,730.368 1224.13,774.097 1224.69,751.895 1225.25,762.928 1225.81,756.227 1226.37,771.443 1226.93,769.236 1227.49,784.8 1228.05,780.92 1228.61,758.649 1229.17,752.833 1229.72,718.238 1230.28,698.006 1230.84,665.999 1231.4,617.293 1231.96,621.215 1232.52,624.109 1233.08,625.914 1233.64,612.971 1234.2,635.09 1234.76,603.473 1235.32,608.318 1235.88,613.219 1236.44,633.86 1236.99,634.591 1237.55,635.643 1238.11,652.23 1238.67,654.797 1239.23,687.466 1239.79,720.539 1240.35,704.844 1240.91,669.969 1241.47,687.642 1242.03,769.533 1242.59,719.068 1243.15,700.571 1243.71,701.282 1244.26,667.328 1244.82,669.669 1245.38,670.904 1245.94,653.825 1246.5,654.994 1247.06,657.723 1247.62,671.549 1248.18,675.062 1248.74,659.417 1249.3,677.127 1249.86,675.999 1250.42,706.402 1250.98,691.797 1251.54,674.697 1252.09,694.643 1252.65,707.79 1253.21,690.832 1253.77,689.441 1254.33,706.654 1254.89,720.606 1255.45,717.621 1256.01,667 1256.57,664.999 1257.13,646.927 1257.69,678.881 1258.25,659.825 1258.81,662.724 1259.36,649.908 1259.92,669.5 1260.48,671.245 1261.04,688.876 1261.6,686.817 1262.16,704.662 1262.72,704.12 1263.28,653.919 1263.84,640.144 1264.4,642.609 1264.96,662.501 1265.52,667.402 1266.08,658.852 1266.63,625.784 1267.19,645.166 1267.75,679.268 1268.31,698.487 1268.87,698.261 1269.43,664.848 1269.99,679.961 1270.55,712.168 1271.11,708.833 1271.67,708.995 1272.23,695.031 1272.79,697.489 1273.35,682.376 1273.91,699.882 1274.46,699.054 1275.02,681.145 1275.58,669.112 1276.14,683.549 1276.7,688.285 1277.26,686.148 1277.82,701.931 1278.38,668.363 1278.94,667.889 1279.5,698.457 1280.06,665.001 1280.62,666.575 1281.18,697.505 1281.73,697.186 1282.29,696.312 1282.85,729.076 1283.41,741.422 1283.97,739.382 1284.53,751.159 1285.09,728.499 1285.65,726.503 1286.21,737.394 1286.77,718.619 1287.33,739.077 1287.89,708.336 1288.45,693.526 1289,695.485 1289.56,676.037 1290.12,692.968 1290.68,644.976 1291.24,628.171 1291.8,614.874 1292.36,615.162 1292.92,600.65 1293.48,586.934 1294.04,606.549 1294.6,611.436 1295.16,644.545 1295.72,649.476 1296.28,618.455 1296.83,621.807 1297.39,610.48 1297.95,695.238 1298.51,707.249 1299.07,670.281 1299.63,688.409 1300.19,673.371 1300.75,676.542 1301.31,677.926 1301.87,694.993 1302.43,679.75 1302.99,681.054 1303.55,666.207 1304.1,666.887 1304.66,669.098 1305.22,686.212 1305.78,687.142 1306.34,700.087 1306.9,668.159 1307.46,667.754 1308.02,637.037 1308.58,643.749 1309.14,661.769 1309.7,696.662 1310.26,714.823 1310.82,699.406 1311.38,699.539 1311.93,715.59 1312.49,713.494 1313.05,731.844 1313.61,711.9 1314.17,723.59 1314.73,721.68 1315.29,724.517 1315.85,737.57 1316.41,706.034 1316.97,704.183 1317.53,700.796 1318.09,715.674 1318.65,765.025 1319.2,794.375 1319.76,787.451 1320.32,796.568 1320.88,806.411 1321.44,798.937 1322,780.75 1322.56,758.22 1323.12,783.525 1323.68,762.409 1324.24,771.608 1324.8,750.192 1325.36,713.748 1325.92,728.398 1326.47,678.219 1327.03,676.984 1327.59,659.955 1328.15,642.109 1328.71,658.092 1329.27,662.96 1329.83,648.097 1330.39,651.955 1330.95,673.242 1331.51,674.302 1332.07,691.222 1332.63,691.033 1333.19,691.686 1333.75,677.342 1334.3,676.723 1334.86,676.309 1335.42,689.494 1335.98,704.714 1336.54,702.243 1337.1,702.833 1337.66,654.271 1338.22,653.863 1338.78,653.232 1339.34,652.855 1339.9,639.349 1340.46,653.475 1341.02,654.756 1341.57,642.346 1342.13,646.711 1342.69,646.609 1343.25,645.394 1343.81,663.62 1344.37,664.427 1344.93,667.312 1345.49,654.564 1346.05,624.447 1346.61,644.454 1347.17,582.089 1347.73,637.183 1348.29,637.493 1348.84,637.288 1349.4,638.516 1349.96,659.718 1350.52,663.699 1351.08,696.079 1351.64,696.035 1352.2,695.6 1352.76,730.159 1353.32,728.964 1353.88,731.794 1354.44,713.582 1355,728.9 1355.56,689.481 1356.12,684.857 1356.67,734.225 1357.23,745.096 1357.79,771.149 1358.35,719.575 1358.91,700.52 1359.47,733.146 1360.03,711.888 1360.59,724.959 1361.15,728.597 1361.71,726.463 1362.27,690.736 1362.83,705.091 1363.39,735.606 1363.94,731.842 1364.5,743.01 1365.06,705.589 1365.62,688.372 1366.18,673.872 1366.74,706.05 1367.3,721.705 1367.86,750.346 1368.42,730.945 1368.98,744.084 1369.54,739.681 1370.1,752.165 1370.66,812.888 1371.21,758.674 1371.77,754.047 1372.33,704.84 1372.89,720.195 1373.45,685.805 1374.01,702.75 1374.57,701.475 1375.13,700.352 1375.69,735.298 1376.25,733.756 1376.81,762.332 1377.37,744.019 1377.93,755.407 1378.49,753.721 1379.04,719.386 1379.6,702.741 1380.16,718.348 1380.72,749.84 1381.28,761.183 1381.84,789.042 1382.4,800.774 1382.96,758.792 1383.52,754.307 1384.08,736.318 1384.64,716.599 1385.2,683.482 1385.76,669.854 1386.31,668.743 1386.87,666.72 1387.43,685.878 1387.99,689.159 1388.55,703.728 1389.11,704.946 1389.67,735.705 1390.23,685.22 1390.79,667 1391.35,698.164 1391.91,715.997 1392.47,713.961 1393.03,711.342 1393.58,710.212 1394.14,694.198 1394.7,695.24 1395.26,695.32 1395.82,677.75 1396.38,693.367 1396.94,680.787 1397.5,677.895 1398.06,645.39 1398.62,611.742 1399.18,613.085 1399.74,650.795 1400.3,637.489 1400.86,626.848 1401.41,664.889 1401.97,649.467 1402.53,603.012 1403.09,639.929 1403.65,626.309 1404.21,662.398 1404.77,678.15 1405.33,661.703 1405.89,642.088 1406.45,625.39 1407.01,643.421 1407.57,629.067 1408.13,613.98 1408.68,602.653 1409.24,605.919 1409.8,593.859 1410.36,648.663 1410.92,633.351 1411.48,636.988 1412.04,625.763 1412.6,596.512 1413.16,603.392 1413.72,607.839 1414.28,613.116 1414.84,633.817 1415.4,651.743 1415.95,668.09 1416.51,686.424 1417.07,674.101 1417.63,675.185 1418.19,673.983 1418.75,672.845 1419.31,672.68 1419.87,689.018 1420.43,738.35 1420.99,722.548 1421.55,754.363 1422.11,771.808 1422.67,752.88 1423.23,716.365 1423.78,700.488 1424.34,649.618 1424.9,669.117 1425.46,669.742 1426.02,688.429 1426.58,702.11 1427.14,715.072 1427.7,715.288 1428.26,700.182 1428.82,716.642 1429.38,719.218 1429.94,717.557 1430.5,701.2 1431.05,701.134 1431.61,734.025 1432.17,715.957 1432.73,697.48 1433.29,696.471 1433.85,732.273 1434.41,715.188 1434.97,713.035 1435.53,694.594 1436.09,694.273 1436.65,709.64 1437.21,642.209 1437.77,646.731 1438.33,679.266 1438.88,648.587 1439.44,636.847 1440,603.639 1440.56,606.474 1441.12,613.941 1441.68,582.464 1442.24,606.228 1442.8,611.934 1443.36,649.01 1443.92,651.601 1444.48,669.573 1445.04,684.856 1445.6,685.875 1446.15,683.426 1446.71,652.581 1447.27,652.264 1447.83,670.209 1448.39,681.526 1448.95,666.083 1449.51,650.709 1450.07,670.379 1450.63,673.796 1451.19,721.989 1451.75,737.156 1452.31,713.189 1452.87,660.801 1453.42,710.475 1453.98,708.773 1454.54,707.465 1455.1,722.841 1455.66,707.879 1456.22,694.747 1456.78,692.876 1457.34,690.505 1457.9,703.614 1458.46,734.03 1459.02,713.935 1459.58,696.261 1460.14,675.483 1460.7,643.714 1461.25,644.818 1461.81,666.203 1462.37,651.162 1462.93,621.521 1463.49,608.64 1464.05,627.636 1464.61,631.471 1465.17,635.491 1465.73,634.658 1466.29,634.035 1466.85,685.21 1467.41,650.454 1467.97,655.751 1468.52,671.83 1469.08,671.238 1469.64,671.803 1470.2,685.543 1470.76,671.011 1471.32,670.99 1471.88,670.2 1472.44,667.118 1473,649.867 1473.56,652.194 1474.12,684.816 1474.68,683.532 1475.24,681.579 1475.79,713.861 1476.35,711.052 1476.91,740.129 1477.47,737.32 1478.03,750.997 1478.59,782.341 1479.15,776.349 1479.71,756.14 1480.27,750.518 1480.83,716.532 1481.39,713.033 1481.95,710.105 1482.51,727.178 1483.07,676.454 1483.62,695.183 1484.18,661.679 1484.74,630.105 1485.3,616.847 1485.86,637.451 1486.42,640.772 1486.98,623.46 1487.54,624.305 1488.1,661.436 1488.66,693.98 1489.22,678.475 1489.78,679.3 1490.34,680.022 1490.89,629.526 1491.45,618.55 1492.01,636.081 1492.57,654.83 1493.13,670.167 1493.69,658.117 1494.25,674.357 1494.81,657.966 1495.37,655.589 1495.93,670.332 1496.49,638.586 1497.05,643.712 1497.61,644.914 1498.16,632.547 1498.72,667.33 1499.28,667.922 1499.84,653.343 1500.4,686.31 1500.96,702.14 1501.52,671.005 1502.08,657.336 1502.64,655.834 1503.2,627.075 1503.76,644.619 1504.32,634.526 1504.88,683.058 1505.44,665.336 1505.99,652.568 1506.55,650.284 1507.11,654.291 1507.67,689.903 1508.23,734.473 1508.79,713.351 1509.35,724.76 1509.91,736.412 1510.47,730.066 1511.03,729.785 1511.59,743.244 1512.15,705.528 1512.71,689.873 1513.26,690.105 1513.82,706.376 1514.38,705.038 1514.94,701.145 1515.5,731.478 1516.06,729.19 1516.62,729.603 1517.18,758.859 1517.74,772.852 1518.3,800.092 1518.86,759.534 1519.42,722.849 1519.98,718.156 1520.53,747.394 1521.09,727.391 1521.65,691.348 1522.21,658.955 1522.77,662.796 1523.33,682.565 1523.89,636.376 1524.45,642.278 1525.01,639.816 1525.57,641.287 1526.13,657.397 1526.69,675.875 1527.25,644.849 1527.81,612.952 1528.36,630.468 1528.92,634.043 1529.48,622.134 1530.04,620.314 1530.6,637.761 1531.16,621.306 1531.72,620.748 1532.28,624.306 1532.84,656.277 1533.4,646.251 1533.96,651.809 1534.52,686.014 1535.08,733.978 1535.63,732.117 1536.19,780.198 1536.75,761.71 1537.31,787.705 1537.87,734.178 1538.43,729.928 1538.99,759.229 1539.55,753.231 1540.11,762.682 1540.67,789.267 1541.23,750.6 1541.79,717.118 1542.35,730.48 1542.9,712.883 1543.46,709.608 1544.02,740.579 1544.58,752.288 1545.14,750.738 1545.7,761.037 1546.26,772.978 1546.82,718.991 1547.38,688.309 1547.94,687.494 1548.5,684.362 1549.06,779.712 1549.62,774.275 1550.18,739.263 1550.73,703.474 1551.29,703.344 1551.85,687.637 1552.41,689.725 1552.97,687.991 1553.53,688.179 1554.09,690.167 1554.65,689.94 1555.21,689.202 1555.77,654.886 1556.33,623.484 1556.89,610.057 1557.45,612.331 1558,634.746 1558.56,603.313 1559.12,610.099 1559.68,599.558 1560.24,623.647 1560.8,612.245 1561.36,598.135 1561.92,635.449 1562.48,622.526 1563.04,607.465 1563.6,661.317 1564.16,659.718 1564.72,679.732 1565.28,682.218 1565.83,699.435 1566.39,701.444 1566.95,651.149 1567.51,634.375 1568.07,669.933 1568.63,656.785 1569.19,660.118 1569.75,631.485 1570.31,631.714 1570.87,600.909 1571.43,638.924 1571.99,626.488 1572.55,596.975 1573.1,553.435 1573.66,560.59 1574.22,585.032 1574.78,607.946 1575.34,642.331 1575.9,615.235 1576.46,619.559 1577.02,608.416 1577.58,631.355 1578.14,619.332 1578.7,636.563 1579.26,622.812 1579.82,591.994 1580.37,579.4 1580.93,614.5 1581.49,585.012 1582.05,526.389 1582.61,536.224 1583.17,564.943 1583.73,556.001 1584.29,567.129 1584.85,557.743 1585.41,582.941 1585.97,618.92 1586.53,605.615 1587.09,640.439 1587.65,642.579 1588.2,632.412 1588.76,698.481 1589.32,698.253 1589.88,683.011 1590.44,668.917 1591,654.777 1591.56,627.956 1592.12,614.743 1592.68,667.24 1593.24,683.936 1593.8,699.65 1594.36,716.528 1594.92,716.85 1595.47,732.988 1596.03,693.382 1596.59,707.631 1597.15,704.675 1597.71,705.1 1598.27,752.357 1598.83,747.555 1599.39,760.737 1599.95,772.747 1600.51,733.988 1601.07,744.785 1601.63,741.764 1602.19,674.444 1602.74,656.623 1603.3,673.972 1603.86,687.756 1604.42,672.646 1604.98,672.653 1605.54,702.578 1606.1,686.758 1606.66,671.446 1607.22,672.526 1607.78,688.876 1608.34,671.317 1608.9,688.58 1609.46,721.759 1610.02,716.582 1610.57,712.209 1611.13,712.177 1611.69,726.993 1612.25,693.355 1612.81,725.35 1613.37,754.782 1613.93,753.286 1614.49,783.436 1615.05,776.07 1615.61,756.225 1616.17,752.63 1616.73,783.178 1617.29,795.113 1617.84,792.029 1618.4,801.425 1618.96,794.836 1619.52,790.24 1620.08,797.733 1620.64,794.119 1621.2,790.464 1621.76,786.741 1622.32,749.855 1622.88,759.547 1623.44,754.052 1624,756.205 1624.56,765.269 1625.11,743.467 1625.67,724.005 1626.23,753.155 1626.79,765.276 1627.35,726.361 1627.91,705.791 1628.47,688.718 1629.03,687.331 1629.59,687.329 1630.15,703.535 1630.71,713.397 1631.27,726.481 1631.83,722.934 1632.39,689.112 1632.94,657.002 1633.5,664.794 1634.06,678.155 1634.62,660.416 1635.18,673.998 1635.74,626.692 1636.3,615.99 1636.86,650.927 1637.42,652.944 1637.98,618.845 1638.54,624.267 1639.1,610.689 1639.66,567.245 1640.21,575.97 1640.77,597.364 1641.33,634.957 1641.89,620.027 1642.45,622.846 1643.01,654.728 1643.57,656.452 1644.13,645.978 1644.69,647.825 1645.25,602.304 1645.81,642.348 1646.37,676.06 1646.93,676.072 1647.48,691.064 1648.04,673.382 1648.6,644.587 1649.16,664.976 1649.72,635.731 1650.28,620.253 1650.84,640.337 1651.4,674.375 1651.96,673.648 1652.52,676.135 1653.08,674.574 1653.64,674.359 1654.2,675.694 1654.76,688.66 1655.31,687.725 1655.87,723.921 1656.43,754.913 1656.99,719.014 1657.55,686.018 1658.11,687.6 1658.67,668.928 1659.23,657.156 1659.79,661.592 1660.35,696.518 1660.91,681.794 1661.47,699.166 1662.03,683.363 1662.58,686.326 1663.14,690.056 1663.7,705.232 1664.26,720.365 1664.82,718.546 1665.38,731.23 1665.94,715.707 1666.5,717.329 1667.06,714.665 1667.62,715.092 1668.18,729.014 1668.74,729.19 1669.3,741.868 1669.85,738.977 1670.41,736.291 1670.97,733.672 1671.53,716.84 1672.09,714.983 1672.65,729.414 1673.21,728.761 1673.77,712.571 1674.33,696.755 1674.89,698.357 1675.45,716.128 1676.01,714.44 1676.57,695.521 1677.13,741.681 1677.68,738.18 1678.24,765.119 1678.8,713.991 1679.36,712.014 1679.92,727.095 1680.48,720.293 1681.04,703.127 1681.6,702.069 1682.16,699.333 1682.72,714.447 1683.28,646.395 1683.84,664.28 1684.4,633.203 1684.95,666.08 1685.51,716.692 1686.07,734.043 1686.63,729.783 1687.19,676.495 1687.75,674.757 1688.31,707.01 1688.87,719.445 1689.43,684.653 1689.99,706.581 1690.55,704.568 1691.11,672.167 1691.67,656.956 1692.23,659.713 1692.78,658.063 1693.34,640.065 1693.9,628.423 1694.46,616.27 1695.02,652.523 1695.58,638.758 1696.14,623.953 1696.7,626.478 1697.26,628.843 1697.82,633.252 1698.38,619.525 1698.94,578.419 1699.5,569.098 1700.05,557.994 1700.61,580.598 1701.17,573.458 1701.73,598.792 1702.29,588.637 1702.85,578.306 1703.41,570.132 1703.97,609.159 1704.53,641.976 1705.09,641.17 1705.65,644.205 1706.21,664.995 1706.77,670.911 1707.32,671.395 1707.88,688.73 1708.44,671.446 1709,656.899 1709.56,642.153 1710.12,678.431 1710.68,657.632 1711.24,672.546 1711.8,658.284 1712.36,643.889 1712.92,698.769 1713.48,664.222 1714.04,666.832 1714.6,682.947 1715.15,682.261 1715.71,686.267 1716.27,696.468 1716.83,698.519 1717.39,711.876 1717.95,696.184 1718.51,727.846 1719.07,698.202 1719.63,717.751 1720.19,697.672 1720.75,684.809 1721.31,685.754 1721.87,684.593 1722.42,687.129 1722.98,686.818 1723.54,655.597 1724.1,689.918 1724.66,691.515 1725.22,692.716 1725.78,706.292 1726.34,721.102 1726.9,740.07 1727.46,752.647 1728.02,733.177 1728.58,748.094 1729.14,759.143 1729.69,740.195 1730.25,735.001 1730.81,749.911 1731.37,747.503 1731.93,729.543 1732.49,678.904 1733.05,663.487 1733.61,665.435 1734.17,650.026 1734.73,638.887 1735.29,657.204 1735.85,677.517 1736.41,677.28 1736.97,729.15 1737.52,711.337 1738.08,698.37 1738.64,714.112 1739.2,712.698 1739.76,724.111 1740.32,735.32 1740.88,747.779 1741.44,711.651 1742,675.21 1742.56,640.364 1743.12,658.072 1743.68,627.719 1744.24,630.181 1744.79,650.27 1745.35,653.522 1745.91,652.124 1746.47,670.382 1747.03,673.072 1747.59,657.881 1748.15,677.092 1748.71,693.203 1749.27,691.249 1749.83,674.893 1750.39,686.912 1750.95,635.662 1751.51,637.054 1752.06,643.981 1752.62,663.994 1753.18,682.066 1753.74,687.047 1754.3,717.586 1754.86,698.804 1755.42,715.004 1755.98,696.347 1756.54,731.014 1757.1,760.58 1757.66,724.649 1758.22,704.973 1758.78,703.188 1759.34,652.2 1759.89,668.329 1760.45,706.468 1761.01,702.593 1761.57,689.296 1762.13,672.339 1762.69,686.836 1763.25,686.583 1763.81,684.503 1764.37,669.775 1764.93,672.984 1765.49,687.525 1766.05,703.181 1766.61,684.732 1767.16,700.289 1767.72,701.585 1768.28,715.819 1768.84,714.559 1769.4,711.872 1769.96,705.589 1770.52,673.831 1771.08,609.877 1771.64,611.759 1772.2,617.792 1772.76,618.835 1773.32,633.911 1773.88,639.07 1774.43,660.469 1774.99,662.316 1775.55,632.729 1776.11,601.044 1776.67,622.461 1777.23,639.436 1777.79,622.576 1778.35,658.687 1778.91,662.343 1779.47,649.445 1780.03,602.186 1780.59,606.026 1781.15,643.539 1781.71,629.467 1782.26,662.143 1782.82,668.033 1783.38,687.294 1783.94,686.767 1784.5,684.539 1785.06,699.963 1785.62,665.089 1786.18,647.004 1786.74,650.114 1787.3,635.674 1787.86,626.561 1788.42,664.996 1788.98,680.801 1789.53,696.65 1790.09,662.663 1790.65,682.285 1791.21,712.284 1791.77,698.038 1792.33,682.558 1792.89,683.004 1793.45,680.378 1794.01,660.709 1794.57,663.961 1795.13,651.679 1795.69,668.908 1796.25,705.123 1796.8,719.121 1797.36,713.434 1797.92,713 1798.48,693.642 1799.04,708.697 1799.6,724.158 1800.16,705.117 1800.72,704.161 1801.28,700.249 1801.84,715.987 1802.4,730.027 1802.96,709.596 1803.52,722.67 1804.08,685.458 1804.63,705.331 1805.19,735.065 1805.75,713.408 1806.31,727.453 1806.87,708.768 1807.43,709.711 1807.99,722.163 1808.55,706.261 1809.11,734.261 1809.67,698.785 1810.23,700.074 1810.79,699.54 1811.35,715.478 1811.9,730.377 1812.46,757.348 1813.02,755.453 1813.58,749.624 1814.14,729.008 1814.7,759.894 1815.26,759.854 1815.82,774.444 1816.38,787.204 1816.94,827.274 1817.5,820.179 1818.06,844.199 1818.62,830.896 1819.18,791.929 1819.73,801.499 1820.29,779.029 1820.85,777.224 1821.41,756.644 1821.97,753.811 1822.53,717.485 1823.09,733.737 1823.65,715.854 1824.21,731.427 1824.77,727.426 1825.33,723.644 1825.89,721.185 1826.45,703.972 1827,702.866 1827.56,669.949 1828.12,687.851 1828.68,705.625 1829.24,702.619 1829.8,635.7 1830.36,657.307 1830.92,626.49 1831.48,642.617 1832.04,660.432 1832.6,707.971 1833.16,706.013 1833.72,720.704 1834.27,738.911 1834.83,734.699 1835.39,745.967 1835.95,739.303 1836.51,692.893 1837.07,658.3 1837.63,674.809 1838.19,673.152 \"/>\n<path clip-path=\"url(#clip863)\" d=\"M720.247 692.01 L720.806 692.01 L721.365 692.01 L721.924 692.01 L722.484 692.01 L723.043 692.01 L723.602 692.01 L724.161 692.01 L724.721 692.01 L725.28 692.01 L725.839 692.01 L726.398 692.01 L726.958 692.01 L727.517 692.01 L728.076 692.01 L728.635 692.01 L729.195 692.01 L729.754 692.01 L730.313 692.01 L730.872 692.01 L731.432 692.01 L731.991 692.01 L732.55 692.01 L733.109 692.01 L733.669 692.01 L734.228 692.01 L734.787 692.01 L735.346 692.01 L735.906 692.01 L736.465 692.01 L737.024 692.01 L737.583 692.01 L738.143 692.01 L738.702 692.01 L739.261 692.01 L739.82 692.01 L740.38 692.01 L740.939 692.01 L741.498 692.01 L742.057 692.01 L742.617 692.01 L743.176 692.01 L743.735 692.01 L744.294 692.01 L744.854 692.01 L745.413 692.01 L745.972 692.01 L746.531 692.01 L747.091 692.01 L747.65 692.01 L748.209 692.01 L748.768 692.01 L749.328 692.01 L749.887 692.01 L750.446 692.01 L751.005 692.01 L751.565 692.01 L752.124 692.01 L752.683 692.01 L753.242 692.01 L753.802 692.01 L754.361 692.01 L754.92 692.01 L755.479 692.01 L756.039 692.01 L756.598 692.01 L757.157 692.01 L757.716 692.01 L758.276 692.01 L758.835 692.01 L759.394 692.01 L759.953 692.01 L760.513 692.01 L761.072 692.01 L761.631 692.01 L762.19 692.01 L762.75 692.01 L763.309 692.01 L763.868 692.01 L764.427 692.01 L764.987 692.01 L765.546 692.01 L766.105 692.01 L766.664 692.01 L767.224 692.01 L767.783 692.01 L768.342 692.01 L768.901 692.01 L769.461 692.01 L770.02 692.01 L770.579 692.01 L771.138 692.01 L771.698 692.01 L772.257 692.01 L772.816 692.01 L773.375 692.01 L773.935 692.01 L774.494 692.01 L775.053 692.01 L775.612 692.01 L776.172 692.01 L776.731 692.01 L777.29 692.01 L777.849 692.01 L778.409 692.01 L778.968 692.01 L779.527 692.01 L780.086 692.01 L780.646 692.01 L781.205 692.01 L781.764 692.01 L782.323 692.01 L782.883 692.01 L783.442 692.01 L784.001 692.01 L784.56 692.01 L785.12 692.01 L785.679 692.01 L786.238 692.01 L786.797 692.01 L787.357 692.01 L787.916 692.01 L788.475 692.01 L789.034 692.01 L789.594 692.01 L790.153 692.01 L790.712 692.01 L791.271 692.01 L791.831 692.01 L792.39 692.01 L792.949 692.01 L793.508 692.01 L794.068 692.01 L794.627 692.01 L795.186 692.01 L795.745 692.01 L796.305 692.01 L796.864 692.01 L797.423 692.01 L797.982 692.01 L798.542 692.01 L799.101 692.01 L799.66 692.01 L800.219 692.01 L800.779 692.01 L801.338 692.01 L801.897 692.01 L802.456 692.01 L803.016 692.01 L803.575 692.01 L804.134 692.01 L804.693 692.01 L805.253 692.01 L805.812 692.01 L806.371 692.01 L806.931 692.01 L807.49 692.01 L808.049 692.01 L808.608 692.01 L809.168 692.01 L809.727 692.01 L810.286 692.01 L810.845 692.01 L811.405 692.01 L811.964 692.01 L812.523 692.01 L813.082 692.01 L813.642 692.01 L814.201 692.01 L814.76 692.01 L815.319 692.01 L815.879 692.01 L816.438 692.01 L816.997 692.01 L817.556 692.01 L818.116 692.01 L818.675 692.01 L819.234 692.01 L819.793 692.01 L820.353 692.01 L820.912 692.01 L821.471 692.01 L822.03 692.01 L822.59 692.01 L823.149 692.01 L823.708 692.01 L824.267 692.01 L824.827 692.01 L825.386 692.01 L825.945 692.01 L826.504 692.01 L827.064 692.01 L827.623 692.01 L828.182 692.01 L828.741 692.01 L829.301 692.01 L829.86 692.01 L830.419 692.01 L830.978 692.01 L831.538 692.01 L832.097 692.01 L832.656 692.01 L833.215 692.01 L833.775 692.01 L834.334 692.01 L834.893 692.01 L835.452 692.01 L836.012 692.01 L836.571 692.01 L837.13 692.01 L837.689 692.01 L838.249 692.01 L838.808 692.01 L839.367 692.01 L839.926 692.01 L840.486 692.01 L841.045 692.01 L841.604 692.01 L842.163 692.01 L842.723 692.01 L843.282 692.01 L843.841 692.01 L844.4 692.01 L844.96 692.01 L845.519 692.01 L846.078 692.01 L846.637 692.01 L847.197 692.01 L847.756 692.01 L848.315 692.01 L848.874 692.01 L849.434 692.01 L849.993 692.01 L850.552 692.01 L851.111 692.01 L851.671 692.01 L852.23 692.01 L852.789 692.01 L853.348 692.01 L853.908 692.01 L854.467 692.01 L855.026 692.01 L855.585 692.01 L856.145 692.01 L856.704 692.01 L857.263 692.01 L857.822 692.01 L858.382 692.01 L858.941 692.01 L859.5 692.01 L860.059 692.01 L860.619 692.01 L861.178 692.01 L861.737 692.01 L862.296 692.01 L862.856 692.01 L863.415 692.01 L863.974 692.01 L864.533 692.01 L865.093 692.01 L865.652 692.01 L866.211 692.01 L866.77 692.01 L867.33 692.01 L867.889 692.01 L868.448 692.01 L869.007 692.01 L869.567 692.01 L870.126 692.01 L870.685 692.01 L871.244 692.01 L871.804 692.01 L872.363 692.01 L872.922 692.01 L873.481 692.01 L874.041 692.01 L874.6 692.01 L875.159 692.01 L875.718 692.01 L876.278 692.01 L876.837 692.01 L877.396 692.01 L877.955 692.01 L878.515 692.01 L879.074 692.01 L879.633 692.01 L880.192 692.01 L880.752 692.01 L881.311 692.01 L881.87 692.01 L882.429 692.01 L882.989 692.01 L883.548 692.01 L884.107 692.01 L884.666 692.01 L885.226 692.01 L885.785 692.01 L886.344 692.01 L886.903 692.01 L887.463 692.01 L888.022 692.01 L888.581 692.01 L889.14 692.01 L889.7 692.01 L890.259 692.01 L890.818 692.01 L891.377 692.01 L891.937 692.01 L892.496 692.01 L893.055 692.01 L893.614 692.01 L894.174 692.01 L894.733 692.01 L895.292 692.01 L895.851 692.01 L896.411 692.01 L896.97 692.01 L897.529 692.01 L898.088 692.01 L898.648 692.01 L899.207 692.01 L899.766 692.01 L900.325 692.01 L900.885 692.01 L901.444 692.01 L902.003 692.01 L902.562 692.01 L903.122 692.01 L903.681 692.01 L904.24 692.01 L904.799 692.01 L905.359 692.01 L905.918 692.01 L906.477 692.01 L907.036 692.01 L907.596 692.01 L908.155 692.01 L908.714 692.01 L909.273 692.01 L909.833 692.01 L910.392 692.01 L910.951 692.01 L911.51 692.01 L912.07 692.01 L912.629 692.01 L913.188 692.01 L913.747 692.01 L914.307 692.01 L914.866 692.01 L915.425 692.01 L915.984 692.01 L916.544 692.01 L917.103 692.01 L917.662 692.01 L918.221 692.01 L918.781 692.01 L919.34 692.01 L919.899 692.01 L920.458 692.01 L921.018 692.01 L921.577 692.01 L922.136 692.01 L922.695 692.01 L923.255 692.01 L923.814 692.01 L924.373 692.01 L924.932 692.01 L925.492 692.01 L926.051 692.01 L926.61 692.01 L927.169 692.01 L927.729 692.01 L928.288 692.01 L928.847 692.01 L929.406 692.01 L929.966 692.01 L930.525 692.01 L931.084 692.01 L931.644 692.01 L932.203 692.01 L932.762 692.01 L933.321 692.01 L933.881 692.01 L934.44 692.01 L934.999 692.01 L935.558 692.01 L936.118 692.01 L936.677 692.01 L937.236 692.01 L937.795 692.01 L938.355 692.01 L938.914 692.01 L939.473 692.01 L940.032 692.01 L940.592 692.01 L941.151 692.01 L941.71 692.01 L942.269 692.01 L942.829 692.01 L943.388 692.01 L943.947 692.01 L944.506 692.01 L945.066 692.01 L945.625 692.01 L946.184 692.01 L946.743 692.01 L947.303 692.01 L947.862 692.01 L948.421 692.01 L948.98 692.01 L949.54 692.01 L950.099 692.01 L950.658 692.01 L951.217 692.01 L951.777 692.01 L952.336 692.01 L952.895 692.01 L953.454 692.01 L954.014 692.01 L954.573 692.01 L955.132 692.01 L955.691 692.01 L956.251 692.01 L956.81 692.01 L957.369 692.01 L957.928 692.01 L958.488 692.01 L959.047 692.01 L959.606 692.01 L960.165 692.01 L960.725 692.01 L961.284 692.01 L961.843 692.01 L962.402 692.01 L962.962 692.01 L963.521 692.01 L964.08 692.01 L964.639 692.01 L965.199 692.01 L965.758 692.01 L966.317 692.01 L966.876 692.01 L967.436 692.01 L967.995 692.01 L968.554 692.01 L969.113 692.01 L969.673 692.01 L970.232 692.01 L970.791 692.01 L971.35 692.01 L971.91 692.01 L972.469 692.01 L973.028 692.01 L973.587 692.01 L974.147 692.01 L974.706 692.01 L975.265 692.01 L975.824 692.01 L976.384 692.01 L976.943 692.01 L977.502 692.01 L978.061 692.01 L978.621 692.01 L979.18 692.01 L979.739 692.01 L980.298 692.01 L980.858 692.01 L981.417 692.01 L981.976 692.01 L982.535 692.01 L983.095 692.01 L983.654 692.01 L984.213 692.01 L984.772 692.01 L985.332 692.01 L985.891 692.01 L986.45 692.01 L987.009 692.01 L987.569 692.01 L988.128 692.01 L988.687 692.01 L989.246 692.01 L989.806 692.01 L990.365 692.01 L990.924 692.01 L991.483 692.01 L992.043 692.01 L992.602 692.01 L993.161 692.01 L993.72 692.01 L994.28 692.01 L994.839 692.01 L995.398 692.01 L995.957 692.01 L996.517 692.01 L997.076 692.01 L997.635 692.01 L998.194 692.01 L998.754 692.01 L999.313 692.01 L999.872 692.01 L1000.43 692.01 L1000.99 692.01 L1001.55 692.01 L1002.11 692.01 L1002.67 692.01 L1003.23 692.01 L1003.79 692.01 L1004.35 692.01 L1004.91 692.01 L1005.46 692.01 L1006.02 692.01 L1006.58 692.01 L1007.14 692.01 L1007.7 692.01 L1008.26 692.01 L1008.82 692.01 L1009.38 692.01 L1009.94 692.01 L1010.5 692.01 L1011.06 692.01 L1011.62 692.01 L1012.18 692.01 L1012.73 692.01 L1013.29 692.01 L1013.85 692.01 L1014.41 692.01 L1014.97 692.01 L1015.53 692.01 L1016.09 692.01 L1016.65 692.01 L1017.21 692.01 L1017.77 692.01 L1018.33 692.01 L1018.89 692.01 L1019.45 692.01 L1020.01 692.01 L1020.56 692.01 L1021.12 692.01 L1021.68 692.01 L1022.24 692.01 L1022.8 692.01 L1023.36 692.01 L1023.92 692.01 L1024.48 692.01 L1025.04 692.01 L1025.6 692.01 L1026.16 692.01 L1026.72 692.01 L1027.28 692.01 L1027.83 692.01 L1028.39 692.01 L1028.95 692.01 L1029.51 692.01 L1030.07 692.01 L1030.63 692.01 L1031.19 692.01 L1031.75 692.01 L1032.31 692.01 L1032.87 692.01 L1033.43 692.01 L1033.99 692.01 L1034.55 692.01 L1035.1 692.01 L1035.66 692.01 L1036.22 692.01 L1036.78 692.01 L1037.34 692.01 L1037.9 692.01 L1038.46 692.01 L1039.02 692.01 L1039.58 692.01 L1040.14 692.01 L1040.7 692.01 L1041.26 692.01 L1041.82 692.01 L1042.38 692.01 L1042.93 692.01 L1043.49 692.01 L1044.05 692.01 L1044.61 692.01 L1045.17 692.01 L1045.73 692.01 L1046.29 692.01 L1046.85 692.01 L1047.41 692.01 L1047.97 692.01 L1048.53 692.01 L1049.09 692.01 L1049.65 692.01 L1050.2 692.01 L1050.76 692.01 L1051.32 692.01 L1051.88 692.01 L1052.44 692.01 L1053 692.01 L1053.56 692.01 L1054.12 692.01 L1054.68 692.01 L1055.24 692.01 L1055.8 692.01 L1056.36 692.01 L1056.92 692.01 L1057.48 692.01 L1058.03 692.01 L1058.59 692.01 L1059.15 692.01 L1059.71 692.01 L1060.27 692.01 L1060.83 692.01 L1061.39 692.01 L1061.95 692.01 L1062.51 692.01 L1063.07 692.01 L1063.63 692.01 L1064.19 692.01 L1064.75 692.01 L1065.3 692.01 L1065.86 692.01 L1066.42 692.01 L1066.98 692.01 L1067.54 692.01 L1068.1 692.01 L1068.66 692.01 L1069.22 692.01 L1069.78 692.01 L1070.34 692.01 L1070.9 692.01 L1071.46 692.01 L1072.02 692.01 L1072.57 692.01 L1073.13 692.01 L1073.69 692.01 L1074.25 692.01 L1074.81 692.01 L1075.37 692.01 L1075.93 692.01 L1076.49 692.01 L1077.05 692.01 L1077.61 692.01 L1078.17 692.01 L1078.73 692.01 L1079.29 692.01 L1079.85 692.01 L1080.4 692.01 L1080.96 692.01 L1081.52 692.01 L1082.08 692.01 L1082.64 692.01 L1083.2 692.01 L1083.76 692.01 L1084.32 692.01 L1084.88 692.01 L1085.44 692.01 L1086 692.01 L1086.56 692.01 L1087.12 692.01 L1087.67 692.01 L1088.23 692.01 L1088.79 692.01 L1089.35 692.01 L1089.91 692.01 L1090.47 692.01 L1091.03 692.01 L1091.59 692.01 L1092.15 692.01 L1092.71 692.01 L1093.27 692.01 L1093.83 692.01 L1094.39 692.01 L1094.94 692.01 L1095.5 692.01 L1096.06 692.01 L1096.62 692.01 L1097.18 692.01 L1097.74 692.01 L1098.3 692.01 L1098.86 692.01 L1099.42 692.01 L1099.98 692.01 L1100.54 692.01 L1101.1 692.01 L1101.66 692.01 L1102.22 692.01 L1102.77 692.01 L1103.33 692.01 L1103.89 692.01 L1104.45 692.01 L1105.01 692.01 L1105.57 692.01 L1106.13 692.01 L1106.69 692.01 L1107.25 692.01 L1107.81 692.01 L1108.37 692.01 L1108.93 692.01 L1109.49 692.01 L1110.04 692.01 L1110.6 692.01 L1111.16 692.01 L1111.72 692.01 L1112.28 692.01 L1112.84 692.01 L1113.4 692.01 L1113.96 692.01 L1114.52 692.01 L1115.08 692.01 L1115.64 692.01 L1116.2 692.01 L1116.76 692.01 L1117.31 692.01 L1117.87 692.01 L1118.43 692.01 L1118.99 692.01 L1119.55 692.01 L1120.11 692.01 L1120.67 692.01 L1121.23 692.01 L1121.79 692.01 L1122.35 692.01 L1122.91 692.01 L1123.47 692.01 L1124.03 692.01 L1124.59 692.01 L1125.14 692.01 L1125.7 692.01 L1126.26 692.01 L1126.82 692.01 L1127.38 692.01 L1127.94 692.01 L1128.5 692.01 L1129.06 692.01 L1129.62 692.01 L1130.18 692.01 L1130.74 692.01 L1131.3 692.01 L1131.86 692.01 L1132.41 692.01 L1132.97 692.01 L1133.53 692.01 L1134.09 692.01 L1134.65 692.01 L1135.21 692.01 L1135.77 692.01 L1136.33 692.01 L1136.89 692.01 L1137.45 692.01 L1138.01 692.01 L1138.57 692.01 L1139.13 692.01 L1139.68 692.01 L1140.24 692.01 L1140.8 692.01 L1141.36 692.01 L1141.92 692.01 L1142.48 692.01 L1143.04 692.01 L1143.6 692.01 L1144.16 692.01 L1144.72 692.01 L1145.28 692.01 L1145.84 692.01 L1146.4 692.01 L1146.96 692.01 L1147.51 692.01 L1148.07 692.01 L1148.63 692.01 L1149.19 692.01 L1149.75 692.01 L1150.31 692.01 L1150.87 692.01 L1151.43 692.01 L1151.99 692.01 L1152.55 692.01 L1153.11 692.01 L1153.67 692.01 L1154.23 692.01 L1154.78 692.01 L1155.34 692.01 L1155.9 692.01 L1156.46 692.01 L1157.02 692.01 L1157.58 692.01 L1158.14 692.01 L1158.7 692.01 L1159.26 692.01 L1159.82 692.01 L1160.38 692.01 L1160.94 692.01 L1161.5 692.01 L1162.05 692.01 L1162.61 692.01 L1163.17 692.01 L1163.73 692.01 L1164.29 692.01 L1164.85 692.01 L1165.41 692.01 L1165.97 692.01 L1166.53 692.01 L1167.09 692.01 L1167.65 692.01 L1168.21 692.01 L1168.77 692.01 L1169.33 692.01 L1169.88 692.01 L1170.44 692.01 L1171 692.01 L1171.56 692.01 L1172.12 692.01 L1172.68 692.01 L1173.24 692.01 L1173.8 692.01 L1174.36 692.01 L1174.92 692.01 L1175.48 692.01 L1176.04 692.01 L1176.6 692.01 L1177.15 692.01 L1177.71 692.01 L1178.27 692.01 L1178.83 692.01 L1179.39 692.01 L1179.95 692.01 L1180.51 692.01 L1181.07 692.01 L1181.63 692.01 L1182.19 692.01 L1182.75 692.01 L1183.31 692.01 L1183.87 692.01 L1184.43 692.01 L1184.98 692.01 L1185.54 692.01 L1186.1 692.01 L1186.66 692.01 L1187.22 692.01 L1187.78 692.01 L1188.34 692.01 L1188.9 692.01 L1189.46 692.01 L1190.02 692.01 L1190.58 692.01 L1191.14 692.01 L1191.7 692.01 L1192.25 692.01 L1192.81 692.01 L1193.37 692.01 L1193.93 692.01 L1194.49 692.01 L1195.05 692.01 L1195.61 692.01 L1196.17 692.01 L1196.73 692.01 L1197.29 692.01 L1197.85 692.01 L1198.41 692.01 L1198.97 692.01 L1199.52 692.01 L1200.08 692.01 L1200.64 692.01 L1201.2 692.01 L1201.76 692.01 L1202.32 692.01 L1202.88 692.01 L1203.44 692.01 L1204 692.01 L1204.56 692.01 L1205.12 692.01 L1205.68 692.01 L1206.24 692.01 L1206.8 692.01 L1207.35 692.01 L1207.91 692.01 L1208.47 692.01 L1209.03 692.01 L1209.59 692.01 L1210.15 692.01 L1210.71 692.01 L1211.27 692.01 L1211.83 692.01 L1212.39 692.01 L1212.95 692.01 L1213.51 692.01 L1214.07 692.01 L1214.62 692.01 L1215.18 692.01 L1215.74 692.01 L1216.3 692.01 L1216.86 692.01 L1217.42 692.01 L1217.98 692.01 L1218.54 692.01 L1219.1 692.01 L1219.66 692.01 L1220.22 692.01 L1220.78 692.01 L1221.34 692.01 L1221.89 692.01 L1222.45 692.01 L1223.01 692.01 L1223.57 692.01 L1224.13 692.01 L1224.69 692.01 L1225.25 692.01 L1225.81 692.01 L1226.37 692.01 L1226.93 692.01 L1227.49 692.01 L1228.05 692.01 L1228.61 692.01 L1229.17 692.01 L1229.72 692.01 L1230.28 692.01 L1230.84 692.01 L1231.4 692.01 L1231.96 692.01 L1232.52 692.01 L1233.08 692.01 L1233.64 692.01 L1234.2 692.01 L1234.76 692.01 L1235.32 692.01 L1235.88 692.01 L1236.44 692.01 L1236.99 692.01 L1237.55 692.01 L1238.11 692.01 L1238.67 692.01 L1239.23 692.01 L1239.79 692.01 L1240.35 692.01 L1240.91 692.01 L1241.47 692.01 L1242.03 692.01 L1242.59 692.01 L1243.15 692.01 L1243.71 692.01 L1244.26 692.01 L1244.82 692.01 L1245.38 692.01 L1245.94 692.01 L1246.5 692.01 L1247.06 692.01 L1247.62 692.01 L1248.18 692.01 L1248.74 692.01 L1249.3 692.01 L1249.86 692.01 L1250.42 692.01 L1250.98 692.01 L1251.54 692.01 L1252.09 692.01 L1252.65 692.01 L1253.21 692.01 L1253.77 692.01 L1254.33 692.01 L1254.89 692.01 L1255.45 692.01 L1256.01 692.01 L1256.57 692.01 L1257.13 692.01 L1257.69 692.01 L1258.25 692.01 L1258.81 692.01 L1259.36 692.01 L1259.92 692.01 L1260.48 692.01 L1261.04 692.01 L1261.6 692.01 L1262.16 692.01 L1262.72 692.01 L1263.28 692.01 L1263.84 692.01 L1264.4 692.01 L1264.96 692.01 L1265.52 692.01 L1266.08 692.01 L1266.63 692.01 L1267.19 692.01 L1267.75 692.01 L1268.31 692.01 L1268.87 692.01 L1269.43 692.01 L1269.99 692.01 L1270.55 692.01 L1271.11 692.01 L1271.67 692.01 L1272.23 692.01 L1272.79 692.01 L1273.35 692.01 L1273.91 692.01 L1274.46 692.01 L1275.02 692.01 L1275.58 692.01 L1276.14 692.01 L1276.7 692.01 L1277.26 692.01 L1277.82 692.01 L1278.38 692.01 L1278.94 692.01 L1279.5 692.01 L1280.06 692.01 L1280.62 692.01 L1281.18 692.01 L1281.73 692.01 L1282.29 692.01 L1282.85 692.01 L1283.41 692.01 L1283.97 692.01 L1284.53 692.01 L1285.09 692.01 L1285.65 692.01 L1286.21 692.01 L1286.77 692.01 L1287.33 692.01 L1287.89 692.01 L1288.45 692.01 L1289 692.01 L1289.56 692.01 L1290.12 692.01 L1290.68 692.01 L1291.24 692.01 L1291.8 692.01 L1292.36 692.01 L1292.92 692.01 L1293.48 692.01 L1294.04 692.01 L1294.6 692.01 L1295.16 692.01 L1295.72 692.01 L1296.28 692.01 L1296.83 692.01 L1297.39 692.01 L1297.95 692.01 L1298.51 692.01 L1299.07 692.01 L1299.63 692.01 L1300.19 692.01 L1300.75 692.01 L1301.31 692.01 L1301.87 692.01 L1302.43 692.01 L1302.99 692.01 L1303.55 692.01 L1304.1 692.01 L1304.66 692.01 L1305.22 692.01 L1305.78 692.01 L1306.34 692.01 L1306.9 692.01 L1307.46 692.01 L1308.02 692.01 L1308.58 692.01 L1309.14 692.01 L1309.7 692.01 L1310.26 692.01 L1310.82 692.01 L1311.38 692.01 L1311.93 692.01 L1312.49 692.01 L1313.05 692.01 L1313.61 692.01 L1314.17 692.01 L1314.73 692.01 L1315.29 692.01 L1315.85 692.01 L1316.41 692.01 L1316.97 692.01 L1317.53 692.01 L1318.09 692.01 L1318.65 692.01 L1319.2 692.01 L1319.76 692.01 L1320.32 692.01 L1320.88 692.01 L1321.44 692.01 L1322 692.01 L1322.56 692.01 L1323.12 692.01 L1323.68 692.01 L1324.24 692.01 L1324.8 692.01 L1325.36 692.01 L1325.92 692.01 L1326.47 692.01 L1327.03 692.01 L1327.59 692.01 L1328.15 692.01 L1328.71 692.01 L1329.27 692.01 L1329.83 692.01 L1330.39 692.01 L1330.95 692.01 L1331.51 692.01 L1332.07 692.01 L1332.63 692.01 L1333.19 692.01 L1333.75 692.01 L1334.3 692.01 L1334.86 692.01 L1335.42 692.01 L1335.98 692.01 L1336.54 692.01 L1337.1 692.01 L1337.66 692.01 L1338.22 692.01 L1338.78 692.01 L1339.34 692.01 L1339.9 692.01 L1340.46 692.01 L1341.02 692.01 L1341.57 692.01 L1342.13 692.01 L1342.69 692.01 L1343.25 692.01 L1343.81 692.01 L1344.37 692.01 L1344.93 692.01 L1345.49 692.01 L1346.05 692.01 L1346.61 692.01 L1347.17 692.01 L1347.73 692.01 L1348.29 692.01 L1348.84 692.01 L1349.4 692.01 L1349.96 692.01 L1350.52 692.01 L1351.08 692.01 L1351.64 692.01 L1352.2 692.01 L1352.76 692.01 L1353.32 692.01 L1353.88 692.01 L1354.44 692.01 L1355 692.01 L1355.56 692.01 L1356.12 692.01 L1356.67 692.01 L1357.23 692.01 L1357.79 692.01 L1358.35 692.01 L1358.91 692.01 L1359.47 692.01 L1360.03 692.01 L1360.59 692.01 L1361.15 692.01 L1361.71 692.01 L1362.27 692.01 L1362.83 692.01 L1363.39 692.01 L1363.94 692.01 L1364.5 692.01 L1365.06 692.01 L1365.62 692.01 L1366.18 692.01 L1366.74 692.01 L1367.3 692.01 L1367.86 692.01 L1368.42 692.01 L1368.98 692.01 L1369.54 692.01 L1370.1 692.01 L1370.66 692.01 L1371.21 692.01 L1371.77 692.01 L1372.33 692.01 L1372.89 692.01 L1373.45 692.01 L1374.01 692.01 L1374.57 692.01 L1375.13 692.01 L1375.69 692.01 L1376.25 692.01 L1376.81 692.01 L1377.37 692.01 L1377.93 692.01 L1378.49 692.01 L1379.04 692.01 L1379.6 692.01 L1380.16 692.01 L1380.72 692.01 L1381.28 692.01 L1381.84 692.01 L1382.4 692.01 L1382.96 692.01 L1383.52 692.01 L1384.08 692.01 L1384.64 692.01 L1385.2 692.01 L1385.76 692.01 L1386.31 692.01 L1386.87 692.01 L1387.43 692.01 L1387.99 692.01 L1388.55 692.01 L1389.11 692.01 L1389.67 692.01 L1390.23 692.01 L1390.79 692.01 L1391.35 692.01 L1391.91 692.01 L1392.47 692.01 L1393.03 692.01 L1393.58 692.01 L1394.14 692.01 L1394.7 692.01 L1395.26 692.01 L1395.82 692.01 L1396.38 692.01 L1396.94 692.01 L1397.5 692.01 L1398.06 692.01 L1398.62 692.01 L1399.18 692.01 L1399.74 692.01 L1400.3 692.01 L1400.86 692.01 L1401.41 692.01 L1401.97 692.01 L1402.53 692.01 L1403.09 692.01 L1403.65 692.01 L1404.21 692.01 L1404.77 692.01 L1405.33 692.01 L1405.89 692.01 L1406.45 692.01 L1407.01 692.01 L1407.57 692.01 L1408.13 692.01 L1408.68 692.01 L1409.24 692.01 L1409.8 692.01 L1410.36 692.01 L1410.92 692.01 L1411.48 692.01 L1412.04 692.01 L1412.6 692.01 L1413.16 692.01 L1413.72 692.01 L1414.28 692.01 L1414.84 692.01 L1415.4 692.01 L1415.95 692.01 L1416.51 692.01 L1417.07 692.01 L1417.63 692.01 L1418.19 692.01 L1418.75 692.01 L1419.31 692.01 L1419.87 692.01 L1420.43 692.01 L1420.99 692.01 L1421.55 692.01 L1422.11 692.01 L1422.67 692.01 L1423.23 692.01 L1423.78 692.01 L1424.34 692.01 L1424.9 692.01 L1425.46 692.01 L1426.02 692.01 L1426.58 692.01 L1427.14 692.01 L1427.7 692.01 L1428.26 692.01 L1428.82 692.01 L1429.38 692.01 L1429.94 692.01 L1430.5 692.01 L1431.05 692.01 L1431.61 692.01 L1432.17 692.01 L1432.73 692.01 L1433.29 692.01 L1433.85 692.01 L1434.41 692.01 L1434.97 692.01 L1435.53 692.01 L1436.09 692.01 L1436.65 692.01 L1437.21 692.01 L1437.77 692.01 L1438.33 692.01 L1438.88 692.01 L1439.44 692.01 L1440 692.01 L1440.56 692.01 L1441.12 692.01 L1441.68 692.01 L1442.24 692.01 L1442.8 692.01 L1443.36 692.01 L1443.92 692.01 L1444.48 692.01 L1445.04 692.01 L1445.6 692.01 L1446.15 692.01 L1446.71 692.01 L1447.27 692.01 L1447.83 692.01 L1448.39 692.01 L1448.95 692.01 L1449.51 692.01 L1450.07 692.01 L1450.63 692.01 L1451.19 692.01 L1451.75 692.01 L1452.31 692.01 L1452.87 692.01 L1453.42 692.01 L1453.98 692.01 L1454.54 692.01 L1455.1 692.01 L1455.66 692.01 L1456.22 692.01 L1456.78 692.01 L1457.34 692.01 L1457.9 692.01 L1458.46 692.01 L1459.02 692.01 L1459.58 692.01 L1460.14 692.01 L1460.7 692.01 L1461.25 692.01 L1461.81 692.01 L1462.37 692.01 L1462.93 692.01 L1463.49 692.01 L1464.05 692.01 L1464.61 692.01 L1465.17 692.01 L1465.73 692.01 L1466.29 692.01 L1466.85 692.01 L1467.41 692.01 L1467.97 692.01 L1468.52 692.01 L1469.08 692.01 L1469.64 692.01 L1470.2 692.01 L1470.76 692.01 L1471.32 692.01 L1471.88 692.01 L1472.44 692.01 L1473 692.01 L1473.56 692.01 L1474.12 692.01 L1474.68 692.01 L1475.24 692.01 L1475.79 692.01 L1476.35 692.01 L1476.91 692.01 L1477.47 692.01 L1478.03 692.01 L1478.59 692.01 L1479.15 692.01 L1479.71 692.01 L1480.27 692.01 L1480.83 692.01 L1481.39 692.01 L1481.95 692.01 L1482.51 692.01 L1483.07 692.01 L1483.62 692.01 L1484.18 692.01 L1484.74 692.01 L1485.3 692.01 L1485.86 692.01 L1486.42 692.01 L1486.98 692.01 L1487.54 692.01 L1488.1 692.01 L1488.66 692.01 L1489.22 692.01 L1489.78 692.01 L1490.34 692.01 L1490.89 692.01 L1491.45 692.01 L1492.01 692.01 L1492.57 692.01 L1493.13 692.01 L1493.69 692.01 L1494.25 692.01 L1494.81 692.01 L1495.37 692.01 L1495.93 692.01 L1496.49 692.01 L1497.05 692.01 L1497.61 692.01 L1498.16 692.01 L1498.72 692.01 L1499.28 692.01 L1499.84 692.01 L1500.4 692.01 L1500.96 692.01 L1501.52 692.01 L1502.08 692.01 L1502.64 692.01 L1503.2 692.01 L1503.76 692.01 L1504.32 692.01 L1504.88 692.01 L1505.44 692.01 L1505.99 692.01 L1506.55 692.01 L1507.11 692.01 L1507.67 692.01 L1508.23 692.01 L1508.79 692.01 L1509.35 692.01 L1509.91 692.01 L1510.47 692.01 L1511.03 692.01 L1511.59 692.01 L1512.15 692.01 L1512.71 692.01 L1513.26 692.01 L1513.82 692.01 L1514.38 692.01 L1514.94 692.01 L1515.5 692.01 L1516.06 692.01 L1516.62 692.01 L1517.18 692.01 L1517.74 692.01 L1518.3 692.01 L1518.86 692.01 L1519.42 692.01 L1519.98 692.01 L1520.53 692.01 L1521.09 692.01 L1521.65 692.01 L1522.21 692.01 L1522.77 692.01 L1523.33 692.01 L1523.89 692.01 L1524.45 692.01 L1525.01 692.01 L1525.57 692.01 L1526.13 692.01 L1526.69 692.01 L1527.25 692.01 L1527.81 692.01 L1528.36 692.01 L1528.92 692.01 L1529.48 692.01 L1530.04 692.01 L1530.6 692.01 L1531.16 692.01 L1531.72 692.01 L1532.28 692.01 L1532.84 692.01 L1533.4 692.01 L1533.96 692.01 L1534.52 692.01 L1535.08 692.01 L1535.63 692.01 L1536.19 692.01 L1536.75 692.01 L1537.31 692.01 L1537.87 692.01 L1538.43 692.01 L1538.99 692.01 L1539.55 692.01 L1540.11 692.01 L1540.67 692.01 L1541.23 692.01 L1541.79 692.01 L1542.35 692.01 L1542.9 692.01 L1543.46 692.01 L1544.02 692.01 L1544.58 692.01 L1545.14 692.01 L1545.7 692.01 L1546.26 692.01 L1546.82 692.01 L1547.38 692.01 L1547.94 692.01 L1548.5 692.01 L1549.06 692.01 L1549.62 692.01 L1550.18 692.01 L1550.73 692.01 L1551.29 692.01 L1551.85 692.01 L1552.41 692.01 L1552.97 692.01 L1553.53 692.01 L1554.09 692.01 L1554.65 692.01 L1555.21 692.01 L1555.77 692.01 L1556.33 692.01 L1556.89 692.01 L1557.45 692.01 L1558 692.01 L1558.56 692.01 L1559.12 692.01 L1559.68 692.01 L1560.24 692.01 L1560.8 692.01 L1561.36 692.01 L1561.92 692.01 L1562.48 692.01 L1563.04 692.01 L1563.6 692.01 L1564.16 692.01 L1564.72 692.01 L1565.28 692.01 L1565.83 692.01 L1566.39 692.01 L1566.95 692.01 L1567.51 692.01 L1568.07 692.01 L1568.63 692.01 L1569.19 692.01 L1569.75 692.01 L1570.31 692.01 L1570.87 692.01 L1571.43 692.01 L1571.99 692.01 L1572.55 692.01 L1573.1 692.01 L1573.66 692.01 L1574.22 692.01 L1574.78 692.01 L1575.34 692.01 L1575.9 692.01 L1576.46 692.01 L1577.02 692.01 L1577.58 692.01 L1578.14 692.01 L1578.7 692.01 L1579.26 692.01 L1579.82 692.01 L1580.37 692.01 L1580.93 692.01 L1581.49 692.01 L1582.05 692.01 L1582.61 692.01 L1583.17 692.01 L1583.73 692.01 L1584.29 692.01 L1584.85 692.01 L1585.41 692.01 L1585.97 692.01 L1586.53 692.01 L1587.09 692.01 L1587.65 692.01 L1588.2 692.01 L1588.76 692.01 L1589.32 692.01 L1589.88 692.01 L1590.44 692.01 L1591 692.01 L1591.56 692.01 L1592.12 692.01 L1592.68 692.01 L1593.24 692.01 L1593.8 692.01 L1594.36 692.01 L1594.92 692.01 L1595.47 692.01 L1596.03 692.01 L1596.59 692.01 L1597.15 692.01 L1597.71 692.01 L1598.27 692.01 L1598.83 692.01 L1599.39 692.01 L1599.95 692.01 L1600.51 692.01 L1601.07 692.01 L1601.63 692.01 L1602.19 692.01 L1602.74 692.01 L1603.3 692.01 L1603.86 692.01 L1604.42 692.01 L1604.98 692.01 L1605.54 692.01 L1606.1 692.01 L1606.66 692.01 L1607.22 692.01 L1607.78 692.01 L1608.34 692.01 L1608.9 692.01 L1609.46 692.01 L1610.02 692.01 L1610.57 692.01 L1611.13 692.01 L1611.69 692.01 L1612.25 692.01 L1612.81 692.01 L1613.37 692.01 L1613.93 692.01 L1614.49 692.01 L1615.05 692.01 L1615.61 692.01 L1616.17 692.01 L1616.73 692.01 L1617.29 692.01 L1617.84 692.01 L1618.4 692.01 L1618.96 692.01 L1619.52 692.01 L1620.08 692.01 L1620.64 692.01 L1621.2 692.01 L1621.76 692.01 L1622.32 692.01 L1622.88 692.01 L1623.44 692.01 L1624 692.01 L1624.56 692.01 L1625.11 692.01 L1625.67 692.01 L1626.23 692.01 L1626.79 692.01 L1627.35 692.01 L1627.91 692.01 L1628.47 692.01 L1629.03 692.01 L1629.59 692.01 L1630.15 692.01 L1630.71 692.01 L1631.27 692.01 L1631.83 692.01 L1632.39 692.01 L1632.94 692.01 L1633.5 692.01 L1634.06 692.01 L1634.62 692.01 L1635.18 692.01 L1635.74 692.01 L1636.3 692.01 L1636.86 692.01 L1637.42 692.01 L1637.98 692.01 L1638.54 692.01 L1639.1 692.01 L1639.66 692.01 L1640.21 692.01 L1640.77 692.01 L1641.33 692.01 L1641.89 692.01 L1642.45 692.01 L1643.01 692.01 L1643.57 692.01 L1644.13 692.01 L1644.69 692.01 L1645.25 692.01 L1645.81 692.01 L1646.37 692.01 L1646.93 692.01 L1647.48 692.01 L1648.04 692.01 L1648.6 692.01 L1649.16 692.01 L1649.72 692.01 L1650.28 692.01 L1650.84 692.01 L1651.4 692.01 L1651.96 692.01 L1652.52 692.01 L1653.08 692.01 L1653.64 692.01 L1654.2 692.01 L1654.76 692.01 L1655.31 692.01 L1655.87 692.01 L1656.43 692.01 L1656.99 692.01 L1657.55 692.01 L1658.11 692.01 L1658.67 692.01 L1659.23 692.01 L1659.79 692.01 L1660.35 692.01 L1660.91 692.01 L1661.47 692.01 L1662.03 692.01 L1662.58 692.01 L1663.14 692.01 L1663.7 692.01 L1664.26 692.01 L1664.82 692.01 L1665.38 692.01 L1665.94 692.01 L1666.5 692.01 L1667.06 692.01 L1667.62 692.01 L1668.18 692.01 L1668.74 692.01 L1669.3 692.01 L1669.85 692.01 L1670.41 692.01 L1670.97 692.01 L1671.53 692.01 L1672.09 692.01 L1672.65 692.01 L1673.21 692.01 L1673.77 692.01 L1674.33 692.01 L1674.89 692.01 L1675.45 692.01 L1676.01 692.01 L1676.57 692.01 L1677.13 692.01 L1677.68 692.01 L1678.24 692.01 L1678.8 692.01 L1679.36 692.01 L1679.92 692.01 L1680.48 692.01 L1681.04 692.01 L1681.6 692.01 L1682.16 692.01 L1682.72 692.01 L1683.28 692.01 L1683.84 692.01 L1684.4 692.01 L1684.95 692.01 L1685.51 692.01 L1686.07 692.01 L1686.63 692.01 L1687.19 692.01 L1687.75 692.01 L1688.31 692.01 L1688.87 692.01 L1689.43 692.01 L1689.99 692.01 L1690.55 692.01 L1691.11 692.01 L1691.67 692.01 L1692.23 692.01 L1692.78 692.01 L1693.34 692.01 L1693.9 692.01 L1694.46 692.01 L1695.02 692.01 L1695.58 692.01 L1696.14 692.01 L1696.7 692.01 L1697.26 692.01 L1697.82 692.01 L1698.38 692.01 L1698.94 692.01 L1699.5 692.01 L1700.05 692.01 L1700.61 692.01 L1701.17 692.01 L1701.73 692.01 L1702.29 692.01 L1702.85 692.01 L1703.41 692.01 L1703.97 692.01 L1704.53 692.01 L1705.09 692.01 L1705.65 692.01 L1706.21 692.01 L1706.77 692.01 L1707.32 692.01 L1707.88 692.01 L1708.44 692.01 L1709 692.01 L1709.56 692.01 L1710.12 692.01 L1710.68 692.01 L1711.24 692.01 L1711.8 692.01 L1712.36 692.01 L1712.92 692.01 L1713.48 692.01 L1714.04 692.01 L1714.6 692.01 L1715.15 692.01 L1715.71 692.01 L1716.27 692.01 L1716.83 692.01 L1717.39 692.01 L1717.95 692.01 L1718.51 692.01 L1719.07 692.01 L1719.63 692.01 L1720.19 692.01 L1720.75 692.01 L1721.31 692.01 L1721.87 692.01 L1722.42 692.01 L1722.98 692.01 L1723.54 692.01 L1724.1 692.01 L1724.66 692.01 L1725.22 692.01 L1725.78 692.01 L1726.34 692.01 L1726.9 692.01 L1727.46 692.01 L1728.02 692.01 L1728.58 692.01 L1729.14 692.01 L1729.69 692.01 L1730.25 692.01 L1730.81 692.01 L1731.37 692.01 L1731.93 692.01 L1732.49 692.01 L1733.05 692.01 L1733.61 692.01 L1734.17 692.01 L1734.73 692.01 L1735.29 692.01 L1735.85 692.01 L1736.41 692.01 L1736.97 692.01 L1737.52 692.01 L1738.08 692.01 L1738.64 692.01 L1739.2 692.01 L1739.76 692.01 L1740.32 692.01 L1740.88 692.01 L1741.44 692.01 L1742 692.01 L1742.56 692.01 L1743.12 692.01 L1743.68 692.01 L1744.24 692.01 L1744.79 692.01 L1745.35 692.01 L1745.91 692.01 L1746.47 692.01 L1747.03 692.01 L1747.59 692.01 L1748.15 692.01 L1748.71 692.01 L1749.27 692.01 L1749.83 692.01 L1750.39 692.01 L1750.95 692.01 L1751.51 692.01 L1752.06 692.01 L1752.62 692.01 L1753.18 692.01 L1753.74 692.01 L1754.3 692.01 L1754.86 692.01 L1755.42 692.01 L1755.98 692.01 L1756.54 692.01 L1757.1 692.01 L1757.66 692.01 L1758.22 692.01 L1758.78 692.01 L1759.34 692.01 L1759.89 692.01 L1760.45 692.01 L1761.01 692.01 L1761.57 692.01 L1762.13 692.01 L1762.69 692.01 L1763.25 692.01 L1763.81 692.01 L1764.37 692.01 L1764.93 692.01 L1765.49 692.01 L1766.05 692.01 L1766.61 692.01 L1767.16 692.01 L1767.72 692.01 L1768.28 692.01 L1768.84 692.01 L1769.4 692.01 L1769.96 692.01 L1770.52 692.01 L1771.08 692.01 L1771.64 692.01 L1772.2 692.01 L1772.76 692.01 L1773.32 692.01 L1773.88 692.01 L1774.43 692.01 L1774.99 692.01 L1775.55 692.01 L1776.11 692.01 L1776.67 692.01 L1777.23 692.01 L1777.79 692.01 L1778.35 692.01 L1778.91 692.01 L1779.47 692.01 L1780.03 692.01 L1780.59 692.01 L1781.15 692.01 L1781.71 692.01 L1782.26 692.01 L1782.82 692.01 L1783.38 692.01 L1783.94 692.01 L1784.5 692.01 L1785.06 692.01 L1785.62 692.01 L1786.18 692.01 L1786.74 692.01 L1787.3 692.01 L1787.86 692.01 L1788.42 692.01 L1788.98 692.01 L1789.53 692.01 L1790.09 692.01 L1790.65 692.01 L1791.21 692.01 L1791.77 692.01 L1792.33 692.01 L1792.89 692.01 L1793.45 692.01 L1794.01 692.01 L1794.57 692.01 L1795.13 692.01 L1795.69 692.01 L1796.25 692.01 L1796.8 692.01 L1797.36 692.01 L1797.92 692.01 L1798.48 692.01 L1799.04 692.01 L1799.6 692.01 L1800.16 692.01 L1800.72 692.01 L1801.28 692.01 L1801.84 692.01 L1802.4 692.01 L1802.96 692.01 L1803.52 692.01 L1804.08 692.01 L1804.63 692.01 L1805.19 692.01 L1805.75 692.01 L1806.31 692.01 L1806.87 692.01 L1807.43 692.01 L1807.99 692.01 L1808.55 692.01 L1809.11 692.01 L1809.67 692.01 L1810.23 692.01 L1810.79 692.01 L1811.35 692.01 L1811.9 692.01 L1812.46 692.01 L1813.02 692.01 L1813.58 692.01 L1814.14 692.01 L1814.7 692.01 L1815.26 692.01 L1815.82 692.01 L1816.38 692.01 L1816.94 692.01 L1817.5 692.01 L1818.06 692.01 L1818.62 692.01 L1819.18 692.01 L1819.73 692.01 L1820.29 692.01 L1820.85 692.01 L1821.41 692.01 L1821.97 692.01 L1822.53 692.01 L1823.09 692.01 L1823.65 692.01 L1824.21 692.01 L1824.77 692.01 L1825.33 692.01 L1825.89 692.01 L1826.45 692.01 L1827 692.01 L1827.56 692.01 L1828.12 692.01 L1828.68 692.01 L1829.24 692.01 L1829.8 692.01 L1830.36 692.01 L1830.92 692.01 L1831.48 692.01 L1832.04 692.01 L1832.6 692.01 L1833.16 692.01 L1833.72 692.01 L1834.27 692.01 L1834.83 692.01 L1835.39 692.01 L1835.95 692.01 L1836.51 692.01 L1837.07 692.01 L1837.63 692.01 L1838.19 692.01 L1838.19 682.933 L1837.63 682.933 L1837.07 682.933 L1836.51 682.933 L1835.95 682.933 L1835.39 682.933 L1834.83 682.933 L1834.27 682.933 L1833.72 682.933 L1833.16 682.933 L1832.6 682.933 L1832.04 682.933 L1831.48 682.933 L1830.92 682.933 L1830.36 682.933 L1829.8 682.933 L1829.24 682.933 L1828.68 682.933 L1828.12 682.933 L1827.56 682.933 L1827 682.933 L1826.45 682.933 L1825.89 682.933 L1825.33 682.933 L1824.77 682.933 L1824.21 682.933 L1823.65 682.933 L1823.09 682.933 L1822.53 682.933 L1821.97 682.933 L1821.41 682.933 L1820.85 682.933 L1820.29 682.933 L1819.73 682.933 L1819.18 682.933 L1818.62 682.933 L1818.06 682.933 L1817.5 682.933 L1816.94 682.933 L1816.38 682.933 L1815.82 682.933 L1815.26 682.933 L1814.7 682.933 L1814.14 682.933 L1813.58 682.933 L1813.02 682.933 L1812.46 682.933 L1811.9 682.933 L1811.35 682.933 L1810.79 682.933 L1810.23 682.933 L1809.67 682.933 L1809.11 682.933 L1808.55 682.933 L1807.99 682.933 L1807.43 682.933 L1806.87 682.933 L1806.31 682.933 L1805.75 682.933 L1805.19 682.933 L1804.63 682.933 L1804.08 682.933 L1803.52 682.933 L1802.96 682.933 L1802.4 682.933 L1801.84 682.933 L1801.28 682.933 L1800.72 682.933 L1800.16 682.933 L1799.6 682.933 L1799.04 682.933 L1798.48 682.933 L1797.92 682.933 L1797.36 682.933 L1796.8 682.933 L1796.25 682.933 L1795.69 682.933 L1795.13 682.933 L1794.57 682.933 L1794.01 682.933 L1793.45 682.933 L1792.89 682.933 L1792.33 682.933 L1791.77 682.933 L1791.21 682.933 L1790.65 682.933 L1790.09 682.933 L1789.53 682.933 L1788.98 682.933 L1788.42 682.933 L1787.86 682.933 L1787.3 682.933 L1786.74 682.933 L1786.18 682.933 L1785.62 682.933 L1785.06 682.933 L1784.5 682.933 L1783.94 682.933 L1783.38 682.933 L1782.82 682.933 L1782.26 682.933 L1781.71 682.933 L1781.15 682.933 L1780.59 682.933 L1780.03 682.933 L1779.47 682.933 L1778.91 682.933 L1778.35 682.933 L1777.79 682.933 L1777.23 682.933 L1776.67 682.933 L1776.11 682.933 L1775.55 682.933 L1774.99 682.933 L1774.43 682.933 L1773.88 682.933 L1773.32 682.933 L1772.76 682.933 L1772.2 682.933 L1771.64 682.933 L1771.08 682.933 L1770.52 682.933 L1769.96 682.933 L1769.4 682.933 L1768.84 682.933 L1768.28 682.933 L1767.72 682.933 L1767.16 682.933 L1766.61 682.933 L1766.05 682.933 L1765.49 682.933 L1764.93 682.933 L1764.37 682.933 L1763.81 682.933 L1763.25 682.933 L1762.69 682.933 L1762.13 682.933 L1761.57 682.933 L1761.01 682.933 L1760.45 682.933 L1759.89 682.933 L1759.34 682.933 L1758.78 682.933 L1758.22 682.933 L1757.66 682.933 L1757.1 682.933 L1756.54 682.933 L1755.98 682.933 L1755.42 682.933 L1754.86 682.933 L1754.3 682.933 L1753.74 682.933 L1753.18 682.933 L1752.62 682.933 L1752.06 682.933 L1751.51 682.933 L1750.95 682.933 L1750.39 682.933 L1749.83 682.933 L1749.27 682.933 L1748.71 682.933 L1748.15 682.933 L1747.59 682.933 L1747.03 682.933 L1746.47 682.933 L1745.91 682.933 L1745.35 682.933 L1744.79 682.933 L1744.24 682.933 L1743.68 682.933 L1743.12 682.933 L1742.56 682.933 L1742 682.933 L1741.44 682.933 L1740.88 682.933 L1740.32 682.933 L1739.76 682.933 L1739.2 682.933 L1738.64 682.933 L1738.08 682.933 L1737.52 682.933 L1736.97 682.933 L1736.41 682.933 L1735.85 682.933 L1735.29 682.933 L1734.73 682.933 L1734.17 682.933 L1733.61 682.933 L1733.05 682.933 L1732.49 682.933 L1731.93 682.933 L1731.37 682.933 L1730.81 682.933 L1730.25 682.933 L1729.69 682.933 L1729.14 682.933 L1728.58 682.933 L1728.02 682.933 L1727.46 682.933 L1726.9 682.933 L1726.34 682.933 L1725.78 682.933 L1725.22 682.933 L1724.66 682.933 L1724.1 682.933 L1723.54 682.933 L1722.98 682.933 L1722.42 682.933 L1721.87 682.933 L1721.31 682.933 L1720.75 682.933 L1720.19 682.933 L1719.63 682.933 L1719.07 682.933 L1718.51 682.933 L1717.95 682.933 L1717.39 682.933 L1716.83 682.933 L1716.27 682.933 L1715.71 682.933 L1715.15 682.933 L1714.6 682.933 L1714.04 682.933 L1713.48 682.933 L1712.92 682.933 L1712.36 682.933 L1711.8 682.933 L1711.24 682.933 L1710.68 682.933 L1710.12 682.933 L1709.56 682.933 L1709 682.933 L1708.44 682.933 L1707.88 682.933 L1707.32 682.933 L1706.77 682.933 L1706.21 682.933 L1705.65 682.933 L1705.09 682.933 L1704.53 682.933 L1703.97 682.933 L1703.41 682.933 L1702.85 682.933 L1702.29 682.933 L1701.73 682.933 L1701.17 682.933 L1700.61 682.933 L1700.05 682.933 L1699.5 682.933 L1698.94 682.933 L1698.38 682.933 L1697.82 682.933 L1697.26 682.933 L1696.7 682.933 L1696.14 682.933 L1695.58 682.933 L1695.02 682.933 L1694.46 682.933 L1693.9 682.933 L1693.34 682.933 L1692.78 682.933 L1692.23 682.933 L1691.67 682.933 L1691.11 682.933 L1690.55 682.933 L1689.99 682.933 L1689.43 682.933 L1688.87 682.933 L1688.31 682.933 L1687.75 682.933 L1687.19 682.933 L1686.63 682.933 L1686.07 682.933 L1685.51 682.933 L1684.95 682.933 L1684.4 682.933 L1683.84 682.933 L1683.28 682.933 L1682.72 682.933 L1682.16 682.933 L1681.6 682.933 L1681.04 682.933 L1680.48 682.933 L1679.92 682.933 L1679.36 682.933 L1678.8 682.933 L1678.24 682.933 L1677.68 682.933 L1677.13 682.933 L1676.57 682.933 L1676.01 682.933 L1675.45 682.933 L1674.89 682.933 L1674.33 682.933 L1673.77 682.933 L1673.21 682.933 L1672.65 682.933 L1672.09 682.933 L1671.53 682.933 L1670.97 682.933 L1670.41 682.933 L1669.85 682.933 L1669.3 682.933 L1668.74 682.933 L1668.18 682.933 L1667.62 682.933 L1667.06 682.933 L1666.5 682.933 L1665.94 682.933 L1665.38 682.933 L1664.82 682.933 L1664.26 682.933 L1663.7 682.933 L1663.14 682.933 L1662.58 682.933 L1662.03 682.933 L1661.47 682.933 L1660.91 682.933 L1660.35 682.933 L1659.79 682.933 L1659.23 682.933 L1658.67 682.933 L1658.11 682.933 L1657.55 682.933 L1656.99 682.933 L1656.43 682.933 L1655.87 682.933 L1655.31 682.933 L1654.76 682.933 L1654.2 682.933 L1653.64 682.933 L1653.08 682.933 L1652.52 682.933 L1651.96 682.933 L1651.4 682.933 L1650.84 682.933 L1650.28 682.933 L1649.72 682.933 L1649.16 682.933 L1648.6 682.933 L1648.04 682.933 L1647.48 682.933 L1646.93 682.933 L1646.37 682.933 L1645.81 682.933 L1645.25 682.933 L1644.69 682.933 L1644.13 682.933 L1643.57 682.933 L1643.01 682.933 L1642.45 682.933 L1641.89 682.933 L1641.33 682.933 L1640.77 682.933 L1640.21 682.933 L1639.66 682.933 L1639.1 682.933 L1638.54 682.933 L1637.98 682.933 L1637.42 682.933 L1636.86 682.933 L1636.3 682.933 L1635.74 682.933 L1635.18 682.933 L1634.62 682.933 L1634.06 682.933 L1633.5 682.933 L1632.94 682.933 L1632.39 682.933 L1631.83 682.933 L1631.27 682.933 L1630.71 682.933 L1630.15 682.933 L1629.59 682.933 L1629.03 682.933 L1628.47 682.933 L1627.91 682.933 L1627.35 682.933 L1626.79 682.933 L1626.23 682.933 L1625.67 682.933 L1625.11 682.933 L1624.56 682.933 L1624 682.933 L1623.44 682.933 L1622.88 682.933 L1622.32 682.933 L1621.76 682.933 L1621.2 682.933 L1620.64 682.933 L1620.08 682.933 L1619.52 682.933 L1618.96 682.933 L1618.4 682.933 L1617.84 682.933 L1617.29 682.933 L1616.73 682.933 L1616.17 682.933 L1615.61 682.933 L1615.05 682.933 L1614.49 682.933 L1613.93 682.933 L1613.37 682.933 L1612.81 682.933 L1612.25 682.933 L1611.69 682.933 L1611.13 682.933 L1610.57 682.933 L1610.02 682.933 L1609.46 682.933 L1608.9 682.933 L1608.34 682.933 L1607.78 682.933 L1607.22 682.933 L1606.66 682.933 L1606.1 682.933 L1605.54 682.933 L1604.98 682.933 L1604.42 682.933 L1603.86 682.933 L1603.3 682.933 L1602.74 682.933 L1602.19 682.933 L1601.63 682.933 L1601.07 682.933 L1600.51 682.933 L1599.95 682.933 L1599.39 682.933 L1598.83 682.933 L1598.27 682.933 L1597.71 682.933 L1597.15 682.933 L1596.59 682.933 L1596.03 682.933 L1595.47 682.933 L1594.92 682.933 L1594.36 682.933 L1593.8 682.933 L1593.24 682.933 L1592.68 682.933 L1592.12 682.933 L1591.56 682.933 L1591 682.933 L1590.44 682.933 L1589.88 682.933 L1589.32 682.933 L1588.76 682.933 L1588.2 682.933 L1587.65 682.933 L1587.09 682.933 L1586.53 682.933 L1585.97 682.933 L1585.41 682.933 L1584.85 682.933 L1584.29 682.933 L1583.73 682.933 L1583.17 682.933 L1582.61 682.933 L1582.05 682.933 L1581.49 682.933 L1580.93 682.933 L1580.37 682.933 L1579.82 682.933 L1579.26 682.933 L1578.7 682.933 L1578.14 682.933 L1577.58 682.933 L1577.02 682.933 L1576.46 682.933 L1575.9 682.933 L1575.34 682.933 L1574.78 682.933 L1574.22 682.933 L1573.66 682.933 L1573.1 682.933 L1572.55 682.933 L1571.99 682.933 L1571.43 682.933 L1570.87 682.933 L1570.31 682.933 L1569.75 682.933 L1569.19 682.933 L1568.63 682.933 L1568.07 682.933 L1567.51 682.933 L1566.95 682.933 L1566.39 682.933 L1565.83 682.933 L1565.28 682.933 L1564.72 682.933 L1564.16 682.933 L1563.6 682.933 L1563.04 682.933 L1562.48 682.933 L1561.92 682.933 L1561.36 682.933 L1560.8 682.933 L1560.24 682.933 L1559.68 682.933 L1559.12 682.933 L1558.56 682.933 L1558 682.933 L1557.45 682.933 L1556.89 682.933 L1556.33 682.933 L1555.77 682.933 L1555.21 682.933 L1554.65 682.933 L1554.09 682.933 L1553.53 682.933 L1552.97 682.933 L1552.41 682.933 L1551.85 682.933 L1551.29 682.933 L1550.73 682.933 L1550.18 682.933 L1549.62 682.933 L1549.06 682.933 L1548.5 682.933 L1547.94 682.933 L1547.38 682.933 L1546.82 682.933 L1546.26 682.933 L1545.7 682.933 L1545.14 682.933 L1544.58 682.933 L1544.02 682.933 L1543.46 682.933 L1542.9 682.933 L1542.35 682.933 L1541.79 682.933 L1541.23 682.933 L1540.67 682.933 L1540.11 682.933 L1539.55 682.933 L1538.99 682.933 L1538.43 682.933 L1537.87 682.933 L1537.31 682.933 L1536.75 682.933 L1536.19 682.933 L1535.63 682.933 L1535.08 682.933 L1534.52 682.933 L1533.96 682.933 L1533.4 682.933 L1532.84 682.933 L1532.28 682.933 L1531.72 682.933 L1531.16 682.933 L1530.6 682.933 L1530.04 682.933 L1529.48 682.933 L1528.92 682.933 L1528.36 682.933 L1527.81 682.933 L1527.25 682.933 L1526.69 682.933 L1526.13 682.933 L1525.57 682.933 L1525.01 682.933 L1524.45 682.933 L1523.89 682.933 L1523.33 682.933 L1522.77 682.933 L1522.21 682.933 L1521.65 682.933 L1521.09 682.933 L1520.53 682.933 L1519.98 682.933 L1519.42 682.933 L1518.86 682.933 L1518.3 682.933 L1517.74 682.933 L1517.18 682.933 L1516.62 682.933 L1516.06 682.933 L1515.5 682.933 L1514.94 682.933 L1514.38 682.933 L1513.82 682.933 L1513.26 682.933 L1512.71 682.933 L1512.15 682.933 L1511.59 682.933 L1511.03 682.933 L1510.47 682.933 L1509.91 682.933 L1509.35 682.933 L1508.79 682.933 L1508.23 682.933 L1507.67 682.933 L1507.11 682.933 L1506.55 682.933 L1505.99 682.933 L1505.44 682.933 L1504.88 682.933 L1504.32 682.933 L1503.76 682.933 L1503.2 682.933 L1502.64 682.933 L1502.08 682.933 L1501.52 682.933 L1500.96 682.933 L1500.4 682.933 L1499.84 682.933 L1499.28 682.933 L1498.72 682.933 L1498.16 682.933 L1497.61 682.933 L1497.05 682.933 L1496.49 682.933 L1495.93 682.933 L1495.37 682.933 L1494.81 682.933 L1494.25 682.933 L1493.69 682.933 L1493.13 682.933 L1492.57 682.933 L1492.01 682.933 L1491.45 682.933 L1490.89 682.933 L1490.34 682.933 L1489.78 682.933 L1489.22 682.933 L1488.66 682.933 L1488.1 682.933 L1487.54 682.933 L1486.98 682.933 L1486.42 682.933 L1485.86 682.933 L1485.3 682.933 L1484.74 682.933 L1484.18 682.933 L1483.62 682.933 L1483.07 682.933 L1482.51 682.933 L1481.95 682.933 L1481.39 682.933 L1480.83 682.933 L1480.27 682.933 L1479.71 682.933 L1479.15 682.933 L1478.59 682.933 L1478.03 682.933 L1477.47 682.933 L1476.91 682.933 L1476.35 682.933 L1475.79 682.933 L1475.24 682.933 L1474.68 682.933 L1474.12 682.933 L1473.56 682.933 L1473 682.933 L1472.44 682.933 L1471.88 682.933 L1471.32 682.933 L1470.76 682.933 L1470.2 682.933 L1469.64 682.933 L1469.08 682.933 L1468.52 682.933 L1467.97 682.933 L1467.41 682.933 L1466.85 682.933 L1466.29 682.933 L1465.73 682.933 L1465.17 682.933 L1464.61 682.933 L1464.05 682.933 L1463.49 682.933 L1462.93 682.933 L1462.37 682.933 L1461.81 682.933 L1461.25 682.933 L1460.7 682.933 L1460.14 682.933 L1459.58 682.933 L1459.02 682.933 L1458.46 682.933 L1457.9 682.933 L1457.34 682.933 L1456.78 682.933 L1456.22 682.933 L1455.66 682.933 L1455.1 682.933 L1454.54 682.933 L1453.98 682.933 L1453.42 682.933 L1452.87 682.933 L1452.31 682.933 L1451.75 682.933 L1451.19 682.933 L1450.63 682.933 L1450.07 682.933 L1449.51 682.933 L1448.95 682.933 L1448.39 682.933 L1447.83 682.933 L1447.27 682.933 L1446.71 682.933 L1446.15 682.933 L1445.6 682.933 L1445.04 682.933 L1444.48 682.933 L1443.92 682.933 L1443.36 682.933 L1442.8 682.933 L1442.24 682.933 L1441.68 682.933 L1441.12 682.933 L1440.56 682.933 L1440 682.933 L1439.44 682.933 L1438.88 682.933 L1438.33 682.933 L1437.77 682.933 L1437.21 682.933 L1436.65 682.933 L1436.09 682.933 L1435.53 682.933 L1434.97 682.933 L1434.41 682.933 L1433.85 682.933 L1433.29 682.933 L1432.73 682.933 L1432.17 682.933 L1431.61 682.933 L1431.05 682.933 L1430.5 682.933 L1429.94 682.933 L1429.38 682.933 L1428.82 682.933 L1428.26 682.933 L1427.7 682.933 L1427.14 682.933 L1426.58 682.933 L1426.02 682.933 L1425.46 682.933 L1424.9 682.933 L1424.34 682.933 L1423.78 682.933 L1423.23 682.933 L1422.67 682.933 L1422.11 682.933 L1421.55 682.933 L1420.99 682.933 L1420.43 682.933 L1419.87 682.933 L1419.31 682.933 L1418.75 682.933 L1418.19 682.933 L1417.63 682.933 L1417.07 682.933 L1416.51 682.933 L1415.95 682.933 L1415.4 682.933 L1414.84 682.933 L1414.28 682.933 L1413.72 682.933 L1413.16 682.933 L1412.6 682.933 L1412.04 682.933 L1411.48 682.933 L1410.92 682.933 L1410.36 682.933 L1409.8 682.933 L1409.24 682.933 L1408.68 682.933 L1408.13 682.933 L1407.57 682.933 L1407.01 682.933 L1406.45 682.933 L1405.89 682.933 L1405.33 682.933 L1404.77 682.933 L1404.21 682.933 L1403.65 682.933 L1403.09 682.933 L1402.53 682.933 L1401.97 682.933 L1401.41 682.933 L1400.86 682.933 L1400.3 682.933 L1399.74 682.933 L1399.18 682.933 L1398.62 682.933 L1398.06 682.933 L1397.5 682.933 L1396.94 682.933 L1396.38 682.933 L1395.82 682.933 L1395.26 682.933 L1394.7 682.933 L1394.14 682.933 L1393.58 682.933 L1393.03 682.933 L1392.47 682.933 L1391.91 682.933 L1391.35 682.933 L1390.79 682.933 L1390.23 682.933 L1389.67 682.933 L1389.11 682.933 L1388.55 682.933 L1387.99 682.933 L1387.43 682.933 L1386.87 682.933 L1386.31 682.933 L1385.76 682.933 L1385.2 682.933 L1384.64 682.933 L1384.08 682.933 L1383.52 682.933 L1382.96 682.933 L1382.4 682.933 L1381.84 682.933 L1381.28 682.933 L1380.72 682.933 L1380.16 682.933 L1379.6 682.933 L1379.04 682.933 L1378.49 682.933 L1377.93 682.933 L1377.37 682.933 L1376.81 682.933 L1376.25 682.933 L1375.69 682.933 L1375.13 682.933 L1374.57 682.933 L1374.01 682.933 L1373.45 682.933 L1372.89 682.933 L1372.33 682.933 L1371.77 682.933 L1371.21 682.933 L1370.66 682.933 L1370.1 682.933 L1369.54 682.933 L1368.98 682.933 L1368.42 682.933 L1367.86 682.933 L1367.3 682.933 L1366.74 682.933 L1366.18 682.933 L1365.62 682.933 L1365.06 682.933 L1364.5 682.933 L1363.94 682.933 L1363.39 682.933 L1362.83 682.933 L1362.27 682.933 L1361.71 682.933 L1361.15 682.933 L1360.59 682.933 L1360.03 682.933 L1359.47 682.933 L1358.91 682.933 L1358.35 682.933 L1357.79 682.933 L1357.23 682.933 L1356.67 682.933 L1356.12 682.933 L1355.56 682.933 L1355 682.933 L1354.44 682.933 L1353.88 682.933 L1353.32 682.933 L1352.76 682.933 L1352.2 682.933 L1351.64 682.933 L1351.08 682.933 L1350.52 682.933 L1349.96 682.933 L1349.4 682.933 L1348.84 682.933 L1348.29 682.933 L1347.73 682.933 L1347.17 682.933 L1346.61 682.933 L1346.05 682.933 L1345.49 682.933 L1344.93 682.933 L1344.37 682.933 L1343.81 682.933 L1343.25 682.933 L1342.69 682.933 L1342.13 682.933 L1341.57 682.933 L1341.02 682.933 L1340.46 682.933 L1339.9 682.933 L1339.34 682.933 L1338.78 682.933 L1338.22 682.933 L1337.66 682.933 L1337.1 682.933 L1336.54 682.933 L1335.98 682.933 L1335.42 682.933 L1334.86 682.933 L1334.3 682.933 L1333.75 682.933 L1333.19 682.933 L1332.63 682.933 L1332.07 682.933 L1331.51 682.933 L1330.95 682.933 L1330.39 682.933 L1329.83 682.933 L1329.27 682.933 L1328.71 682.933 L1328.15 682.933 L1327.59 682.933 L1327.03 682.933 L1326.47 682.933 L1325.92 682.933 L1325.36 682.933 L1324.8 682.933 L1324.24 682.933 L1323.68 682.933 L1323.12 682.933 L1322.56 682.933 L1322 682.933 L1321.44 682.933 L1320.88 682.933 L1320.32 682.933 L1319.76 682.933 L1319.2 682.933 L1318.65 682.933 L1318.09 682.933 L1317.53 682.933 L1316.97 682.933 L1316.41 682.933 L1315.85 682.933 L1315.29 682.933 L1314.73 682.933 L1314.17 682.933 L1313.61 682.933 L1313.05 682.933 L1312.49 682.933 L1311.93 682.933 L1311.38 682.933 L1310.82 682.933 L1310.26 682.933 L1309.7 682.933 L1309.14 682.933 L1308.58 682.933 L1308.02 682.933 L1307.46 682.933 L1306.9 682.933 L1306.34 682.933 L1305.78 682.933 L1305.22 682.933 L1304.66 682.933 L1304.1 682.933 L1303.55 682.933 L1302.99 682.933 L1302.43 682.933 L1301.87 682.933 L1301.31 682.933 L1300.75 682.933 L1300.19 682.933 L1299.63 682.933 L1299.07 682.933 L1298.51 682.933 L1297.95 682.933 L1297.39 682.933 L1296.83 682.933 L1296.28 682.933 L1295.72 682.933 L1295.16 682.933 L1294.6 682.933 L1294.04 682.933 L1293.48 682.933 L1292.92 682.933 L1292.36 682.933 L1291.8 682.933 L1291.24 682.933 L1290.68 682.933 L1290.12 682.933 L1289.56 682.933 L1289 682.933 L1288.45 682.933 L1287.89 682.933 L1287.33 682.933 L1286.77 682.933 L1286.21 682.933 L1285.65 682.933 L1285.09 682.933 L1284.53 682.933 L1283.97 682.933 L1283.41 682.933 L1282.85 682.933 L1282.29 682.933 L1281.73 682.933 L1281.18 682.933 L1280.62 682.933 L1280.06 682.933 L1279.5 682.933 L1278.94 682.933 L1278.38 682.933 L1277.82 682.933 L1277.26 682.933 L1276.7 682.933 L1276.14 682.933 L1275.58 682.933 L1275.02 682.933 L1274.46 682.933 L1273.91 682.933 L1273.35 682.933 L1272.79 682.933 L1272.23 682.933 L1271.67 682.933 L1271.11 682.933 L1270.55 682.933 L1269.99 682.933 L1269.43 682.933 L1268.87 682.933 L1268.31 682.933 L1267.75 682.933 L1267.19 682.933 L1266.63 682.933 L1266.08 682.933 L1265.52 682.933 L1264.96 682.933 L1264.4 682.933 L1263.84 682.933 L1263.28 682.933 L1262.72 682.933 L1262.16 682.933 L1261.6 682.933 L1261.04 682.933 L1260.48 682.933 L1259.92 682.933 L1259.36 682.933 L1258.81 682.933 L1258.25 682.933 L1257.69 682.933 L1257.13 682.933 L1256.57 682.933 L1256.01 682.933 L1255.45 682.933 L1254.89 682.933 L1254.33 682.933 L1253.77 682.933 L1253.21 682.933 L1252.65 682.933 L1252.09 682.933 L1251.54 682.933 L1250.98 682.933 L1250.42 682.933 L1249.86 682.933 L1249.3 682.933 L1248.74 682.933 L1248.18 682.933 L1247.62 682.933 L1247.06 682.933 L1246.5 682.933 L1245.94 682.933 L1245.38 682.933 L1244.82 682.933 L1244.26 682.933 L1243.71 682.933 L1243.15 682.933 L1242.59 682.933 L1242.03 682.933 L1241.47 682.933 L1240.91 682.933 L1240.35 682.933 L1239.79 682.933 L1239.23 682.933 L1238.67 682.933 L1238.11 682.933 L1237.55 682.933 L1236.99 682.933 L1236.44 682.933 L1235.88 682.933 L1235.32 682.933 L1234.76 682.933 L1234.2 682.933 L1233.64 682.933 L1233.08 682.933 L1232.52 682.933 L1231.96 682.933 L1231.4 682.933 L1230.84 682.933 L1230.28 682.933 L1229.72 682.933 L1229.17 682.933 L1228.61 682.933 L1228.05 682.933 L1227.49 682.933 L1226.93 682.933 L1226.37 682.933 L1225.81 682.933 L1225.25 682.933 L1224.69 682.933 L1224.13 682.933 L1223.57 682.933 L1223.01 682.933 L1222.45 682.933 L1221.89 682.933 L1221.34 682.933 L1220.78 682.933 L1220.22 682.933 L1219.66 682.933 L1219.1 682.933 L1218.54 682.933 L1217.98 682.933 L1217.42 682.933 L1216.86 682.933 L1216.3 682.933 L1215.74 682.933 L1215.18 682.933 L1214.62 682.933 L1214.07 682.933 L1213.51 682.933 L1212.95 682.933 L1212.39 682.933 L1211.83 682.933 L1211.27 682.933 L1210.71 682.933 L1210.15 682.933 L1209.59 682.933 L1209.03 682.933 L1208.47 682.933 L1207.91 682.933 L1207.35 682.933 L1206.8 682.933 L1206.24 682.933 L1205.68 682.933 L1205.12 682.933 L1204.56 682.933 L1204 682.933 L1203.44 682.933 L1202.88 682.933 L1202.32 682.933 L1201.76 682.933 L1201.2 682.933 L1200.64 682.933 L1200.08 682.933 L1199.52 682.933 L1198.97 682.933 L1198.41 682.933 L1197.85 682.933 L1197.29 682.933 L1196.73 682.933 L1196.17 682.933 L1195.61 682.933 L1195.05 682.933 L1194.49 682.933 L1193.93 682.933 L1193.37 682.933 L1192.81 682.933 L1192.25 682.933 L1191.7 682.933 L1191.14 682.933 L1190.58 682.933 L1190.02 682.933 L1189.46 682.933 L1188.9 682.933 L1188.34 682.933 L1187.78 682.933 L1187.22 682.933 L1186.66 682.933 L1186.1 682.933 L1185.54 682.933 L1184.98 682.933 L1184.43 682.933 L1183.87 682.933 L1183.31 682.933 L1182.75 682.933 L1182.19 682.933 L1181.63 682.933 L1181.07 682.933 L1180.51 682.933 L1179.95 682.933 L1179.39 682.933 L1178.83 682.933 L1178.27 682.933 L1177.71 682.933 L1177.15 682.933 L1176.6 682.933 L1176.04 682.933 L1175.48 682.933 L1174.92 682.933 L1174.36 682.933 L1173.8 682.933 L1173.24 682.933 L1172.68 682.933 L1172.12 682.933 L1171.56 682.933 L1171 682.933 L1170.44 682.933 L1169.88 682.933 L1169.33 682.933 L1168.77 682.933 L1168.21 682.933 L1167.65 682.933 L1167.09 682.933 L1166.53 682.933 L1165.97 682.933 L1165.41 682.933 L1164.85 682.933 L1164.29 682.933 L1163.73 682.933 L1163.17 682.933 L1162.61 682.933 L1162.05 682.933 L1161.5 682.933 L1160.94 682.933 L1160.38 682.933 L1159.82 682.933 L1159.26 682.933 L1158.7 682.933 L1158.14 682.933 L1157.58 682.933 L1157.02 682.933 L1156.46 682.933 L1155.9 682.933 L1155.34 682.933 L1154.78 682.933 L1154.23 682.933 L1153.67 682.933 L1153.11 682.933 L1152.55 682.933 L1151.99 682.933 L1151.43 682.933 L1150.87 682.933 L1150.31 682.933 L1149.75 682.933 L1149.19 682.933 L1148.63 682.933 L1148.07 682.933 L1147.51 682.933 L1146.96 682.933 L1146.4 682.933 L1145.84 682.933 L1145.28 682.933 L1144.72 682.933 L1144.16 682.933 L1143.6 682.933 L1143.04 682.933 L1142.48 682.933 L1141.92 682.933 L1141.36 682.933 L1140.8 682.933 L1140.24 682.933 L1139.68 682.933 L1139.13 682.933 L1138.57 682.933 L1138.01 682.933 L1137.45 682.933 L1136.89 682.933 L1136.33 682.933 L1135.77 682.933 L1135.21 682.933 L1134.65 682.933 L1134.09 682.933 L1133.53 682.933 L1132.97 682.933 L1132.41 682.933 L1131.86 682.933 L1131.3 682.933 L1130.74 682.933 L1130.18 682.933 L1129.62 682.933 L1129.06 682.933 L1128.5 682.933 L1127.94 682.933 L1127.38 682.933 L1126.82 682.933 L1126.26 682.933 L1125.7 682.933 L1125.14 682.933 L1124.59 682.933 L1124.03 682.933 L1123.47 682.933 L1122.91 682.933 L1122.35 682.933 L1121.79 682.933 L1121.23 682.933 L1120.67 682.933 L1120.11 682.933 L1119.55 682.933 L1118.99 682.933 L1118.43 682.933 L1117.87 682.933 L1117.31 682.933 L1116.76 682.933 L1116.2 682.933 L1115.64 682.933 L1115.08 682.933 L1114.52 682.933 L1113.96 682.933 L1113.4 682.933 L1112.84 682.933 L1112.28 682.933 L1111.72 682.933 L1111.16 682.933 L1110.6 682.933 L1110.04 682.933 L1109.49 682.933 L1108.93 682.933 L1108.37 682.933 L1107.81 682.933 L1107.25 682.933 L1106.69 682.933 L1106.13 682.933 L1105.57 682.933 L1105.01 682.933 L1104.45 682.933 L1103.89 682.933 L1103.33 682.933 L1102.77 682.933 L1102.22 682.933 L1101.66 682.933 L1101.1 682.933 L1100.54 682.933 L1099.98 682.933 L1099.42 682.933 L1098.86 682.933 L1098.3 682.933 L1097.74 682.933 L1097.18 682.933 L1096.62 682.933 L1096.06 682.933 L1095.5 682.933 L1094.94 682.933 L1094.39 682.933 L1093.83 682.933 L1093.27 682.933 L1092.71 682.933 L1092.15 682.933 L1091.59 682.933 L1091.03 682.933 L1090.47 682.933 L1089.91 682.933 L1089.35 682.933 L1088.79 682.933 L1088.23 682.933 L1087.67 682.933 L1087.12 682.933 L1086.56 682.933 L1086 682.933 L1085.44 682.933 L1084.88 682.933 L1084.32 682.933 L1083.76 682.933 L1083.2 682.933 L1082.64 682.933 L1082.08 682.933 L1081.52 682.933 L1080.96 682.933 L1080.4 682.933 L1079.85 682.933 L1079.29 682.933 L1078.73 682.933 L1078.17 682.933 L1077.61 682.933 L1077.05 682.933 L1076.49 682.933 L1075.93 682.933 L1075.37 682.933 L1074.81 682.933 L1074.25 682.933 L1073.69 682.933 L1073.13 682.933 L1072.57 682.933 L1072.02 682.933 L1071.46 682.933 L1070.9 682.933 L1070.34 682.933 L1069.78 682.933 L1069.22 682.933 L1068.66 682.933 L1068.1 682.933 L1067.54 682.933 L1066.98 682.933 L1066.42 682.933 L1065.86 682.933 L1065.3 682.933 L1064.75 682.933 L1064.19 682.933 L1063.63 682.933 L1063.07 682.933 L1062.51 682.933 L1061.95 682.933 L1061.39 682.933 L1060.83 682.933 L1060.27 682.933 L1059.71 682.933 L1059.15 682.933 L1058.59 682.933 L1058.03 682.933 L1057.48 682.933 L1056.92 682.933 L1056.36 682.933 L1055.8 682.933 L1055.24 682.933 L1054.68 682.933 L1054.12 682.933 L1053.56 682.933 L1053 682.933 L1052.44 682.933 L1051.88 682.933 L1051.32 682.933 L1050.76 682.933 L1050.2 682.933 L1049.65 682.933 L1049.09 682.933 L1048.53 682.933 L1047.97 682.933 L1047.41 682.933 L1046.85 682.933 L1046.29 682.933 L1045.73 682.933 L1045.17 682.933 L1044.61 682.933 L1044.05 682.933 L1043.49 682.933 L1042.93 682.933 L1042.38 682.933 L1041.82 682.933 L1041.26 682.933 L1040.7 682.933 L1040.14 682.933 L1039.58 682.933 L1039.02 682.933 L1038.46 682.933 L1037.9 682.933 L1037.34 682.933 L1036.78 682.933 L1036.22 682.933 L1035.66 682.933 L1035.1 682.933 L1034.55 682.933 L1033.99 682.933 L1033.43 682.933 L1032.87 682.933 L1032.31 682.933 L1031.75 682.933 L1031.19 682.933 L1030.63 682.933 L1030.07 682.933 L1029.51 682.933 L1028.95 682.933 L1028.39 682.933 L1027.83 682.933 L1027.28 682.933 L1026.72 682.933 L1026.16 682.933 L1025.6 682.933 L1025.04 682.933 L1024.48 682.933 L1023.92 682.933 L1023.36 682.933 L1022.8 682.933 L1022.24 682.933 L1021.68 682.933 L1021.12 682.933 L1020.56 682.933 L1020.01 682.933 L1019.45 682.933 L1018.89 682.933 L1018.33 682.933 L1017.77 682.933 L1017.21 682.933 L1016.65 682.933 L1016.09 682.933 L1015.53 682.933 L1014.97 682.933 L1014.41 682.933 L1013.85 682.933 L1013.29 682.933 L1012.73 682.933 L1012.18 682.933 L1011.62 682.933 L1011.06 682.933 L1010.5 682.933 L1009.94 682.933 L1009.38 682.933 L1008.82 682.933 L1008.26 682.933 L1007.7 682.933 L1007.14 682.933 L1006.58 682.933 L1006.02 682.933 L1005.46 682.933 L1004.91 682.933 L1004.35 682.933 L1003.79 682.933 L1003.23 682.933 L1002.67 682.933 L1002.11 682.933 L1001.55 682.933 L1000.99 682.933 L1000.43 682.933 L999.872 682.933 L999.313 682.933 L998.754 682.933 L998.194 682.933 L997.635 682.933 L997.076 682.933 L996.517 682.933 L995.957 682.933 L995.398 682.933 L994.839 682.933 L994.28 682.933 L993.72 682.933 L993.161 682.933 L992.602 682.933 L992.043 682.933 L991.483 682.933 L990.924 682.933 L990.365 682.933 L989.806 682.933 L989.246 682.933 L988.687 682.933 L988.128 682.933 L987.569 682.933 L987.009 682.933 L986.45 682.933 L985.891 682.933 L985.332 682.933 L984.772 682.933 L984.213 682.933 L983.654 682.933 L983.095 682.933 L982.535 682.933 L981.976 682.933 L981.417 682.933 L980.858 682.933 L980.298 682.933 L979.739 682.933 L979.18 682.933 L978.621 682.933 L978.061 682.933 L977.502 682.933 L976.943 682.933 L976.384 682.933 L975.824 682.933 L975.265 682.933 L974.706 682.933 L974.147 682.933 L973.587 682.933 L973.028 682.933 L972.469 682.933 L971.91 682.933 L971.35 682.933 L970.791 682.933 L970.232 682.933 L969.673 682.933 L969.113 682.933 L968.554 682.933 L967.995 682.933 L967.436 682.933 L966.876 682.933 L966.317 682.933 L965.758 682.933 L965.199 682.933 L964.639 682.933 L964.08 682.933 L963.521 682.933 L962.962 682.933 L962.402 682.933 L961.843 682.933 L961.284 682.933 L960.725 682.933 L960.165 682.933 L959.606 682.933 L959.047 682.933 L958.488 682.933 L957.928 682.933 L957.369 682.933 L956.81 682.933 L956.251 682.933 L955.691 682.933 L955.132 682.933 L954.573 682.933 L954.014 682.933 L953.454 682.933 L952.895 682.933 L952.336 682.933 L951.777 682.933 L951.217 682.933 L950.658 682.933 L950.099 682.933 L949.54 682.933 L948.98 682.933 L948.421 682.933 L947.862 682.933 L947.303 682.933 L946.743 682.933 L946.184 682.933 L945.625 682.933 L945.066 682.933 L944.506 682.933 L943.947 682.933 L943.388 682.933 L942.829 682.933 L942.269 682.933 L941.71 682.933 L941.151 682.933 L940.592 682.933 L940.032 682.933 L939.473 682.933 L938.914 682.933 L938.355 682.933 L937.795 682.933 L937.236 682.933 L936.677 682.933 L936.118 682.933 L935.558 682.933 L934.999 682.933 L934.44 682.933 L933.881 682.933 L933.321 682.933 L932.762 682.933 L932.203 682.933 L931.644 682.933 L931.084 682.933 L930.525 682.933 L929.966 682.933 L929.406 682.933 L928.847 682.933 L928.288 682.933 L927.729 682.933 L927.169 682.933 L926.61 682.933 L926.051 682.933 L925.492 682.933 L924.932 682.933 L924.373 682.933 L923.814 682.933 L923.255 682.933 L922.695 682.933 L922.136 682.933 L921.577 682.933 L921.018 682.933 L920.458 682.933 L919.899 682.933 L919.34 682.933 L918.781 682.933 L918.221 682.933 L917.662 682.933 L917.103 682.933 L916.544 682.933 L915.984 682.933 L915.425 682.933 L914.866 682.933 L914.307 682.933 L913.747 682.933 L913.188 682.933 L912.629 682.933 L912.07 682.933 L911.51 682.933 L910.951 682.933 L910.392 682.933 L909.833 682.933 L909.273 682.933 L908.714 682.933 L908.155 682.933 L907.596 682.933 L907.036 682.933 L906.477 682.933 L905.918 682.933 L905.359 682.933 L904.799 682.933 L904.24 682.933 L903.681 682.933 L903.122 682.933 L902.562 682.933 L902.003 682.933 L901.444 682.933 L900.885 682.933 L900.325 682.933 L899.766 682.933 L899.207 682.933 L898.648 682.933 L898.088 682.933 L897.529 682.933 L896.97 682.933 L896.411 682.933 L895.851 682.933 L895.292 682.933 L894.733 682.933 L894.174 682.933 L893.614 682.933 L893.055 682.933 L892.496 682.933 L891.937 682.933 L891.377 682.933 L890.818 682.933 L890.259 682.933 L889.7 682.933 L889.14 682.933 L888.581 682.933 L888.022 682.933 L887.463 682.933 L886.903 682.933 L886.344 682.933 L885.785 682.933 L885.226 682.933 L884.666 682.933 L884.107 682.933 L883.548 682.933 L882.989 682.933 L882.429 682.933 L881.87 682.933 L881.311 682.933 L880.752 682.933 L880.192 682.933 L879.633 682.933 L879.074 682.933 L878.515 682.933 L877.955 682.933 L877.396 682.933 L876.837 682.933 L876.278 682.933 L875.718 682.933 L875.159 682.933 L874.6 682.933 L874.041 682.933 L873.481 682.933 L872.922 682.933 L872.363 682.933 L871.804 682.933 L871.244 682.933 L870.685 682.933 L870.126 682.933 L869.567 682.933 L869.007 682.933 L868.448 682.933 L867.889 682.933 L867.33 682.933 L866.77 682.933 L866.211 682.933 L865.652 682.933 L865.093 682.933 L864.533 682.933 L863.974 682.933 L863.415 682.933 L862.856 682.933 L862.296 682.933 L861.737 682.933 L861.178 682.933 L860.619 682.933 L860.059 682.933 L859.5 682.933 L858.941 682.933 L858.382 682.933 L857.822 682.933 L857.263 682.933 L856.704 682.933 L856.145 682.933 L855.585 682.933 L855.026 682.933 L854.467 682.933 L853.908 682.933 L853.348 682.933 L852.789 682.933 L852.23 682.933 L851.671 682.933 L851.111 682.933 L850.552 682.933 L849.993 682.933 L849.434 682.933 L848.874 682.933 L848.315 682.933 L847.756 682.933 L847.197 682.933 L846.637 682.933 L846.078 682.933 L845.519 682.933 L844.96 682.933 L844.4 682.933 L843.841 682.933 L843.282 682.933 L842.723 682.933 L842.163 682.933 L841.604 682.933 L841.045 682.933 L840.486 682.933 L839.926 682.933 L839.367 682.933 L838.808 682.933 L838.249 682.933 L837.689 682.933 L837.13 682.933 L836.571 682.933 L836.012 682.933 L835.452 682.933 L834.893 682.933 L834.334 682.933 L833.775 682.933 L833.215 682.933 L832.656 682.933 L832.097 682.933 L831.538 682.933 L830.978 682.933 L830.419 682.933 L829.86 682.933 L829.301 682.933 L828.741 682.933 L828.182 682.933 L827.623 682.933 L827.064 682.933 L826.504 682.933 L825.945 682.933 L825.386 682.933 L824.827 682.933 L824.267 682.933 L823.708 682.933 L823.149 682.933 L822.59 682.933 L822.03 682.933 L821.471 682.933 L820.912 682.933 L820.353 682.933 L819.793 682.933 L819.234 682.933 L818.675 682.933 L818.116 682.933 L817.556 682.933 L816.997 682.933 L816.438 682.933 L815.879 682.933 L815.319 682.933 L814.76 682.933 L814.201 682.933 L813.642 682.933 L813.082 682.933 L812.523 682.933 L811.964 682.933 L811.405 682.933 L810.845 682.933 L810.286 682.933 L809.727 682.933 L809.168 682.933 L808.608 682.933 L808.049 682.933 L807.49 682.933 L806.931 682.933 L806.371 682.933 L805.812 682.933 L805.253 682.933 L804.693 682.933 L804.134 682.933 L803.575 682.933 L803.016 682.933 L802.456 682.933 L801.897 682.933 L801.338 682.933 L800.779 682.933 L800.219 682.933 L799.66 682.933 L799.101 682.933 L798.542 682.933 L797.982 682.933 L797.423 682.933 L796.864 682.933 L796.305 682.933 L795.745 682.933 L795.186 682.933 L794.627 682.933 L794.068 682.933 L793.508 682.933 L792.949 682.933 L792.39 682.933 L791.831 682.933 L791.271 682.933 L790.712 682.933 L790.153 682.933 L789.594 682.933 L789.034 682.933 L788.475 682.933 L787.916 682.933 L787.357 682.933 L786.797 682.933 L786.238 682.933 L785.679 682.933 L785.12 682.933 L784.56 682.933 L784.001 682.933 L783.442 682.933 L782.883 682.933 L782.323 682.933 L781.764 682.933 L781.205 682.933 L780.646 682.933 L780.086 682.933 L779.527 682.933 L778.968 682.933 L778.409 682.933 L777.849 682.933 L777.29 682.933 L776.731 682.933 L776.172 682.933 L775.612 682.933 L775.053 682.933 L774.494 682.933 L773.935 682.933 L773.375 682.933 L772.816 682.933 L772.257 682.933 L771.698 682.933 L771.138 682.933 L770.579 682.933 L770.02 682.933 L769.461 682.933 L768.901 682.933 L768.342 682.933 L767.783 682.933 L767.224 682.933 L766.664 682.933 L766.105 682.933 L765.546 682.933 L764.987 682.933 L764.427 682.933 L763.868 682.933 L763.309 682.933 L762.75 682.933 L762.19 682.933 L761.631 682.933 L761.072 682.933 L760.513 682.933 L759.953 682.933 L759.394 682.933 L758.835 682.933 L758.276 682.933 L757.716 682.933 L757.157 682.933 L756.598 682.933 L756.039 682.933 L755.479 682.933 L754.92 682.933 L754.361 682.933 L753.802 682.933 L753.242 682.933 L752.683 682.933 L752.124 682.933 L751.565 682.933 L751.005 682.933 L750.446 682.933 L749.887 682.933 L749.328 682.933 L748.768 682.933 L748.209 682.933 L747.65 682.933 L747.091 682.933 L746.531 682.933 L745.972 682.933 L745.413 682.933 L744.854 682.933 L744.294 682.933 L743.735 682.933 L743.176 682.933 L742.617 682.933 L742.057 682.933 L741.498 682.933 L740.939 682.933 L740.38 682.933 L739.82 682.933 L739.261 682.933 L738.702 682.933 L738.143 682.933 L737.583 682.933 L737.024 682.933 L736.465 682.933 L735.906 682.933 L735.346 682.933 L734.787 682.933 L734.228 682.933 L733.669 682.933 L733.109 682.933 L732.55 682.933 L731.991 682.933 L731.432 682.933 L730.872 682.933 L730.313 682.933 L729.754 682.933 L729.195 682.933 L728.635 682.933 L728.076 682.933 L727.517 682.933 L726.958 682.933 L726.398 682.933 L725.839 682.933 L725.28 682.933 L724.721 682.933 L724.161 682.933 L723.602 682.933 L723.043 682.933 L722.484 682.933 L721.924 682.933 L721.365 682.933 L720.806 682.933 L720.247 682.933  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.472 720.806,687.472 721.365,687.472 721.924,687.472 722.484,687.472 723.043,687.472 723.602,687.472 724.161,687.472 724.721,687.472 725.28,687.472 725.839,687.472 726.398,687.472 726.958,687.472 727.517,687.472 728.076,687.472 728.635,687.472 729.195,687.472 729.754,687.472 730.313,687.472 730.872,687.472 731.432,687.472 731.991,687.472 732.55,687.472 733.109,687.472 733.669,687.472 734.228,687.472 734.787,687.472 735.346,687.472 735.906,687.472 736.465,687.472 737.024,687.472 737.583,687.472 738.143,687.472 738.702,687.472 739.261,687.472 739.82,687.472 740.38,687.472 740.939,687.472 741.498,687.472 742.057,687.472 742.617,687.472 743.176,687.472 743.735,687.472 744.294,687.472 744.854,687.472 745.413,687.472 745.972,687.472 746.531,687.472 747.091,687.472 747.65,687.472 748.209,687.472 748.768,687.472 749.328,687.472 749.887,687.472 750.446,687.472 751.005,687.472 751.565,687.472 752.124,687.472 752.683,687.472 753.242,687.472 753.802,687.472 754.361,687.472 754.92,687.472 755.479,687.472 756.039,687.472 756.598,687.472 757.157,687.472 757.716,687.472 758.276,687.472 758.835,687.472 759.394,687.472 759.953,687.472 760.513,687.472 761.072,687.472 761.631,687.472 762.19,687.472 762.75,687.472 763.309,687.472 763.868,687.472 764.427,687.472 764.987,687.472 765.546,687.472 766.105,687.472 766.664,687.472 767.224,687.472 767.783,687.472 768.342,687.472 768.901,687.472 769.461,687.472 770.02,687.472 770.579,687.472 771.138,687.472 771.698,687.472 772.257,687.472 772.816,687.472 773.375,687.472 773.935,687.472 774.494,687.472 775.053,687.472 775.612,687.472 776.172,687.472 776.731,687.472 777.29,687.472 777.849,687.472 778.409,687.472 778.968,687.472 779.527,687.472 780.086,687.472 780.646,687.472 781.205,687.472 781.764,687.472 782.323,687.472 782.883,687.472 783.442,687.472 784.001,687.472 784.56,687.472 785.12,687.472 785.679,687.472 786.238,687.472 786.797,687.472 787.357,687.472 787.916,687.472 788.475,687.472 789.034,687.472 789.594,687.472 790.153,687.472 790.712,687.472 791.271,687.472 791.831,687.472 792.39,687.472 792.949,687.472 793.508,687.472 794.068,687.472 794.627,687.472 795.186,687.472 795.745,687.472 796.305,687.472 796.864,687.472 797.423,687.472 797.982,687.472 798.542,687.472 799.101,687.472 799.66,687.472 800.219,687.472 800.779,687.472 801.338,687.472 801.897,687.472 802.456,687.472 803.016,687.472 803.575,687.472 804.134,687.472 804.693,687.472 805.253,687.472 805.812,687.472 806.371,687.472 806.931,687.472 807.49,687.472 808.049,687.472 808.608,687.472 809.168,687.472 809.727,687.472 810.286,687.472 810.845,687.472 811.405,687.472 811.964,687.472 812.523,687.472 813.082,687.472 813.642,687.472 814.201,687.472 814.76,687.472 815.319,687.472 815.879,687.472 816.438,687.472 816.997,687.472 817.556,687.472 818.116,687.472 818.675,687.472 819.234,687.472 819.793,687.472 820.353,687.472 820.912,687.472 821.471,687.472 822.03,687.472 822.59,687.472 823.149,687.472 823.708,687.472 824.267,687.472 824.827,687.472 825.386,687.472 825.945,687.472 826.504,687.472 827.064,687.472 827.623,687.472 828.182,687.472 828.741,687.472 829.301,687.472 829.86,687.472 830.419,687.472 830.978,687.472 831.538,687.472 832.097,687.472 832.656,687.472 833.215,687.472 833.775,687.472 834.334,687.472 834.893,687.472 835.452,687.472 836.012,687.472 836.571,687.472 837.13,687.472 837.689,687.472 838.249,687.472 838.808,687.472 839.367,687.472 839.926,687.472 840.486,687.472 841.045,687.472 841.604,687.472 842.163,687.472 842.723,687.472 843.282,687.472 843.841,687.472 844.4,687.472 844.96,687.472 845.519,687.472 846.078,687.472 846.637,687.472 847.197,687.472 847.756,687.472 848.315,687.472 848.874,687.472 849.434,687.472 849.993,687.472 850.552,687.472 851.111,687.472 851.671,687.472 852.23,687.472 852.789,687.472 853.348,687.472 853.908,687.472 854.467,687.472 855.026,687.472 855.585,687.472 856.145,687.472 856.704,687.472 857.263,687.472 857.822,687.472 858.382,687.472 858.941,687.472 859.5,687.472 860.059,687.472 860.619,687.472 861.178,687.472 861.737,687.472 862.296,687.472 862.856,687.472 863.415,687.472 863.974,687.472 864.533,687.472 865.093,687.472 865.652,687.472 866.211,687.472 866.77,687.472 867.33,687.472 867.889,687.472 868.448,687.472 869.007,687.472 869.567,687.472 870.126,687.472 870.685,687.472 871.244,687.472 871.804,687.472 872.363,687.472 872.922,687.472 873.481,687.472 874.041,687.472 874.6,687.472 875.159,687.472 875.718,687.472 876.278,687.472 876.837,687.472 877.396,687.472 877.955,687.472 878.515,687.472 879.074,687.472 879.633,687.472 880.192,687.472 880.752,687.472 881.311,687.472 881.87,687.472 882.429,687.472 882.989,687.472 883.548,687.472 884.107,687.472 884.666,687.472 885.226,687.472 885.785,687.472 886.344,687.472 886.903,687.472 887.463,687.472 888.022,687.472 888.581,687.472 889.14,687.472 889.7,687.472 890.259,687.472 890.818,687.472 891.377,687.472 891.937,687.472 892.496,687.472 893.055,687.472 893.614,687.472 894.174,687.472 894.733,687.472 895.292,687.472 895.851,687.472 896.411,687.472 896.97,687.472 897.529,687.472 898.088,687.472 898.648,687.472 899.207,687.472 899.766,687.472 900.325,687.472 900.885,687.472 901.444,687.472 902.003,687.472 902.562,687.472 903.122,687.472 903.681,687.472 904.24,687.472 904.799,687.472 905.359,687.472 905.918,687.472 906.477,687.472 907.036,687.472 907.596,687.472 908.155,687.472 908.714,687.472 909.273,687.472 909.833,687.472 910.392,687.472 910.951,687.472 911.51,687.472 912.07,687.472 912.629,687.472 913.188,687.472 913.747,687.472 914.307,687.472 914.866,687.472 915.425,687.472 915.984,687.472 916.544,687.472 917.103,687.472 917.662,687.472 918.221,687.472 918.781,687.472 919.34,687.472 919.899,687.472 920.458,687.472 921.018,687.472 921.577,687.472 922.136,687.472 922.695,687.472 923.255,687.472 923.814,687.472 924.373,687.472 924.932,687.472 925.492,687.472 926.051,687.472 926.61,687.472 927.169,687.472 927.729,687.472 928.288,687.472 928.847,687.472 929.406,687.472 929.966,687.472 930.525,687.472 931.084,687.472 931.644,687.472 932.203,687.472 932.762,687.472 933.321,687.472 933.881,687.472 934.44,687.472 934.999,687.472 935.558,687.472 936.118,687.472 936.677,687.472 937.236,687.472 937.795,687.472 938.355,687.472 938.914,687.472 939.473,687.472 940.032,687.472 940.592,687.472 941.151,687.472 941.71,687.472 942.269,687.472 942.829,687.472 943.388,687.472 943.947,687.472 944.506,687.472 945.066,687.472 945.625,687.472 946.184,687.472 946.743,687.472 947.303,687.472 947.862,687.472 948.421,687.472 948.98,687.472 949.54,687.472 950.099,687.472 950.658,687.472 951.217,687.472 951.777,687.472 952.336,687.472 952.895,687.472 953.454,687.472 954.014,687.472 954.573,687.472 955.132,687.472 955.691,687.472 956.251,687.472 956.81,687.472 957.369,687.472 957.928,687.472 958.488,687.472 959.047,687.472 959.606,687.472 960.165,687.472 960.725,687.472 961.284,687.472 961.843,687.472 962.402,687.472 962.962,687.472 963.521,687.472 964.08,687.472 964.639,687.472 965.199,687.472 965.758,687.472 966.317,687.472 966.876,687.472 967.436,687.472 967.995,687.472 968.554,687.472 969.113,687.472 969.673,687.472 970.232,687.472 970.791,687.472 971.35,687.472 971.91,687.472 972.469,687.472 973.028,687.472 973.587,687.472 974.147,687.472 974.706,687.472 975.265,687.472 975.824,687.472 976.384,687.472 976.943,687.472 977.502,687.472 978.061,687.472 978.621,687.472 979.18,687.472 979.739,687.472 980.298,687.472 980.858,687.472 981.417,687.472 981.976,687.472 982.535,687.472 983.095,687.472 983.654,687.472 984.213,687.472 984.772,687.472 985.332,687.472 985.891,687.472 986.45,687.472 987.009,687.472 987.569,687.472 988.128,687.472 988.687,687.472 989.246,687.472 989.806,687.472 990.365,687.472 990.924,687.472 991.483,687.472 992.043,687.472 992.602,687.472 993.161,687.472 993.72,687.472 994.28,687.472 994.839,687.472 995.398,687.472 995.957,687.472 996.517,687.472 997.076,687.472 997.635,687.472 998.194,687.472 998.754,687.472 999.313,687.472 999.872,687.472 1000.43,687.472 1000.99,687.472 1001.55,687.472 1002.11,687.472 1002.67,687.472 1003.23,687.472 1003.79,687.472 1004.35,687.472 1004.91,687.472 1005.46,687.472 1006.02,687.472 1006.58,687.472 1007.14,687.472 1007.7,687.472 1008.26,687.472 1008.82,687.472 1009.38,687.472 1009.94,687.472 1010.5,687.472 1011.06,687.472 1011.62,687.472 1012.18,687.472 1012.73,687.472 1013.29,687.472 1013.85,687.472 1014.41,687.472 1014.97,687.472 1015.53,687.472 1016.09,687.472 1016.65,687.472 1017.21,687.472 1017.77,687.472 1018.33,687.472 1018.89,687.472 1019.45,687.472 1020.01,687.472 1020.56,687.472 1021.12,687.472 1021.68,687.472 1022.24,687.472 1022.8,687.472 1023.36,687.472 1023.92,687.472 1024.48,687.472 1025.04,687.472 1025.6,687.472 1026.16,687.472 1026.72,687.472 1027.28,687.472 1027.83,687.472 1028.39,687.472 1028.95,687.472 1029.51,687.472 1030.07,687.472 1030.63,687.472 1031.19,687.472 1031.75,687.472 1032.31,687.472 1032.87,687.472 1033.43,687.472 1033.99,687.472 1034.55,687.472 1035.1,687.472 1035.66,687.472 1036.22,687.472 1036.78,687.472 1037.34,687.472 1037.9,687.472 1038.46,687.472 1039.02,687.472 1039.58,687.472 1040.14,687.472 1040.7,687.472 1041.26,687.472 1041.82,687.472 1042.38,687.472 1042.93,687.472 1043.49,687.472 1044.05,687.472 1044.61,687.472 1045.17,687.472 1045.73,687.472 1046.29,687.472 1046.85,687.472 1047.41,687.472 1047.97,687.472 1048.53,687.472 1049.09,687.472 1049.65,687.472 1050.2,687.472 1050.76,687.472 1051.32,687.472 1051.88,687.472 1052.44,687.472 1053,687.472 1053.56,687.472 1054.12,687.472 1054.68,687.472 1055.24,687.472 1055.8,687.472 1056.36,687.472 1056.92,687.472 1057.48,687.472 1058.03,687.472 1058.59,687.472 1059.15,687.472 1059.71,687.472 1060.27,687.472 1060.83,687.472 1061.39,687.472 1061.95,687.472 1062.51,687.472 1063.07,687.472 1063.63,687.472 1064.19,687.472 1064.75,687.472 1065.3,687.472 1065.86,687.472 1066.42,687.472 1066.98,687.472 1067.54,687.472 1068.1,687.472 1068.66,687.472 1069.22,687.472 1069.78,687.472 1070.34,687.472 1070.9,687.472 1071.46,687.472 1072.02,687.472 1072.57,687.472 1073.13,687.472 1073.69,687.472 1074.25,687.472 1074.81,687.472 1075.37,687.472 1075.93,687.472 1076.49,687.472 1077.05,687.472 1077.61,687.472 1078.17,687.472 1078.73,687.472 1079.29,687.472 1079.85,687.472 1080.4,687.472 1080.96,687.472 1081.52,687.472 1082.08,687.472 1082.64,687.472 1083.2,687.472 1083.76,687.472 1084.32,687.472 1084.88,687.472 1085.44,687.472 1086,687.472 1086.56,687.472 1087.12,687.472 1087.67,687.472 1088.23,687.472 1088.79,687.472 1089.35,687.472 1089.91,687.472 1090.47,687.472 1091.03,687.472 1091.59,687.472 1092.15,687.472 1092.71,687.472 1093.27,687.472 1093.83,687.472 1094.39,687.472 1094.94,687.472 1095.5,687.472 1096.06,687.472 1096.62,687.472 1097.18,687.472 1097.74,687.472 1098.3,687.472 1098.86,687.472 1099.42,687.472 1099.98,687.472 1100.54,687.472 1101.1,687.472 1101.66,687.472 1102.22,687.472 1102.77,687.472 1103.33,687.472 1103.89,687.472 1104.45,687.472 1105.01,687.472 1105.57,687.472 1106.13,687.472 1106.69,687.472 1107.25,687.472 1107.81,687.472 1108.37,687.472 1108.93,687.472 1109.49,687.472 1110.04,687.472 1110.6,687.472 1111.16,687.472 1111.72,687.472 1112.28,687.472 1112.84,687.472 1113.4,687.472 1113.96,687.472 1114.52,687.472 1115.08,687.472 1115.64,687.472 1116.2,687.472 1116.76,687.472 1117.31,687.472 1117.87,687.472 1118.43,687.472 1118.99,687.472 1119.55,687.472 1120.11,687.472 1120.67,687.472 1121.23,687.472 1121.79,687.472 1122.35,687.472 1122.91,687.472 1123.47,687.472 1124.03,687.472 1124.59,687.472 1125.14,687.472 1125.7,687.472 1126.26,687.472 1126.82,687.472 1127.38,687.472 1127.94,687.472 1128.5,687.472 1129.06,687.472 1129.62,687.472 1130.18,687.472 1130.74,687.472 1131.3,687.472 1131.86,687.472 1132.41,687.472 1132.97,687.472 1133.53,687.472 1134.09,687.472 1134.65,687.472 1135.21,687.472 1135.77,687.472 1136.33,687.472 1136.89,687.472 1137.45,687.472 1138.01,687.472 1138.57,687.472 1139.13,687.472 1139.68,687.472 1140.24,687.472 1140.8,687.472 1141.36,687.472 1141.92,687.472 1142.48,687.472 1143.04,687.472 1143.6,687.472 1144.16,687.472 1144.72,687.472 1145.28,687.472 1145.84,687.472 1146.4,687.472 1146.96,687.472 1147.51,687.472 1148.07,687.472 1148.63,687.472 1149.19,687.472 1149.75,687.472 1150.31,687.472 1150.87,687.472 1151.43,687.472 1151.99,687.472 1152.55,687.472 1153.11,687.472 1153.67,687.472 1154.23,687.472 1154.78,687.472 1155.34,687.472 1155.9,687.472 1156.46,687.472 1157.02,687.472 1157.58,687.472 1158.14,687.472 1158.7,687.472 1159.26,687.472 1159.82,687.472 1160.38,687.472 1160.94,687.472 1161.5,687.472 1162.05,687.472 1162.61,687.472 1163.17,687.472 1163.73,687.472 1164.29,687.472 1164.85,687.472 1165.41,687.472 1165.97,687.472 1166.53,687.472 1167.09,687.472 1167.65,687.472 1168.21,687.472 1168.77,687.472 1169.33,687.472 1169.88,687.472 1170.44,687.472 1171,687.472 1171.56,687.472 1172.12,687.472 1172.68,687.472 1173.24,687.472 1173.8,687.472 1174.36,687.472 1174.92,687.472 1175.48,687.472 1176.04,687.472 1176.6,687.472 1177.15,687.472 1177.71,687.472 1178.27,687.472 1178.83,687.472 1179.39,687.472 1179.95,687.472 1180.51,687.472 1181.07,687.472 1181.63,687.472 1182.19,687.472 1182.75,687.472 1183.31,687.472 1183.87,687.472 1184.43,687.472 1184.98,687.472 1185.54,687.472 1186.1,687.472 1186.66,687.472 1187.22,687.472 1187.78,687.472 1188.34,687.472 1188.9,687.472 1189.46,687.472 1190.02,687.472 1190.58,687.472 1191.14,687.472 1191.7,687.472 1192.25,687.472 1192.81,687.472 1193.37,687.472 1193.93,687.472 1194.49,687.472 1195.05,687.472 1195.61,687.472 1196.17,687.472 1196.73,687.472 1197.29,687.472 1197.85,687.472 1198.41,687.472 1198.97,687.472 1199.52,687.472 1200.08,687.472 1200.64,687.472 1201.2,687.472 1201.76,687.472 1202.32,687.472 1202.88,687.472 1203.44,687.472 1204,687.472 1204.56,687.472 1205.12,687.472 1205.68,687.472 1206.24,687.472 1206.8,687.472 1207.35,687.472 1207.91,687.472 1208.47,687.472 1209.03,687.472 1209.59,687.472 1210.15,687.472 1210.71,687.472 1211.27,687.472 1211.83,687.472 1212.39,687.472 1212.95,687.472 1213.51,687.472 1214.07,687.472 1214.62,687.472 1215.18,687.472 1215.74,687.472 1216.3,687.472 1216.86,687.472 1217.42,687.472 1217.98,687.472 1218.54,687.472 1219.1,687.472 1219.66,687.472 1220.22,687.472 1220.78,687.472 1221.34,687.472 1221.89,687.472 1222.45,687.472 1223.01,687.472 1223.57,687.472 1224.13,687.472 1224.69,687.472 1225.25,687.472 1225.81,687.472 1226.37,687.472 1226.93,687.472 1227.49,687.472 1228.05,687.472 1228.61,687.472 1229.17,687.472 1229.72,687.472 1230.28,687.472 1230.84,687.472 1231.4,687.472 1231.96,687.472 1232.52,687.472 1233.08,687.472 1233.64,687.472 1234.2,687.472 1234.76,687.472 1235.32,687.472 1235.88,687.472 1236.44,687.472 1236.99,687.472 1237.55,687.472 1238.11,687.472 1238.67,687.472 1239.23,687.472 1239.79,687.472 1240.35,687.472 1240.91,687.472 1241.47,687.472 1242.03,687.472 1242.59,687.472 1243.15,687.472 1243.71,687.472 1244.26,687.472 1244.82,687.472 1245.38,687.472 1245.94,687.472 1246.5,687.472 1247.06,687.472 1247.62,687.472 1248.18,687.472 1248.74,687.472 1249.3,687.472 1249.86,687.472 1250.42,687.472 1250.98,687.472 1251.54,687.472 1252.09,687.472 1252.65,687.472 1253.21,687.472 1253.77,687.472 1254.33,687.472 1254.89,687.472 1255.45,687.472 1256.01,687.472 1256.57,687.472 1257.13,687.472 1257.69,687.472 1258.25,687.472 1258.81,687.472 1259.36,687.472 1259.92,687.472 1260.48,687.472 1261.04,687.472 1261.6,687.472 1262.16,687.472 1262.72,687.472 1263.28,687.472 1263.84,687.472 1264.4,687.472 1264.96,687.472 1265.52,687.472 1266.08,687.472 1266.63,687.472 1267.19,687.472 1267.75,687.472 1268.31,687.472 1268.87,687.472 1269.43,687.472 1269.99,687.472 1270.55,687.472 1271.11,687.472 1271.67,687.472 1272.23,687.472 1272.79,687.472 1273.35,687.472 1273.91,687.472 1274.46,687.472 1275.02,687.472 1275.58,687.472 1276.14,687.472 1276.7,687.472 1277.26,687.472 1277.82,687.472 1278.38,687.472 1278.94,687.472 1279.5,687.472 1280.06,687.472 1280.62,687.472 1281.18,687.472 1281.73,687.472 1282.29,687.472 1282.85,687.472 1283.41,687.472 1283.97,687.472 1284.53,687.472 1285.09,687.472 1285.65,687.472 1286.21,687.472 1286.77,687.472 1287.33,687.472 1287.89,687.472 1288.45,687.472 1289,687.472 1289.56,687.472 1290.12,687.472 1290.68,687.472 1291.24,687.472 1291.8,687.472 1292.36,687.472 1292.92,687.472 1293.48,687.472 1294.04,687.472 1294.6,687.472 1295.16,687.472 1295.72,687.472 1296.28,687.472 1296.83,687.472 1297.39,687.472 1297.95,687.472 1298.51,687.472 1299.07,687.472 1299.63,687.472 1300.19,687.472 1300.75,687.472 1301.31,687.472 1301.87,687.472 1302.43,687.472 1302.99,687.472 1303.55,687.472 1304.1,687.472 1304.66,687.472 1305.22,687.472 1305.78,687.472 1306.34,687.472 1306.9,687.472 1307.46,687.472 1308.02,687.472 1308.58,687.472 1309.14,687.472 1309.7,687.472 1310.26,687.472 1310.82,687.472 1311.38,687.472 1311.93,687.472 1312.49,687.472 1313.05,687.472 1313.61,687.472 1314.17,687.472 1314.73,687.472 1315.29,687.472 1315.85,687.472 1316.41,687.472 1316.97,687.472 1317.53,687.472 1318.09,687.472 1318.65,687.472 1319.2,687.472 1319.76,687.472 1320.32,687.472 1320.88,687.472 1321.44,687.472 1322,687.472 1322.56,687.472 1323.12,687.472 1323.68,687.472 1324.24,687.472 1324.8,687.472 1325.36,687.472 1325.92,687.472 1326.47,687.472 1327.03,687.472 1327.59,687.472 1328.15,687.472 1328.71,687.472 1329.27,687.472 1329.83,687.472 1330.39,687.472 1330.95,687.472 1331.51,687.472 1332.07,687.472 1332.63,687.472 1333.19,687.472 1333.75,687.472 1334.3,687.472 1334.86,687.472 1335.42,687.472 1335.98,687.472 1336.54,687.472 1337.1,687.472 1337.66,687.472 1338.22,687.472 1338.78,687.472 1339.34,687.472 1339.9,687.472 1340.46,687.472 1341.02,687.472 1341.57,687.472 1342.13,687.472 1342.69,687.472 1343.25,687.472 1343.81,687.472 1344.37,687.472 1344.93,687.472 1345.49,687.472 1346.05,687.472 1346.61,687.472 1347.17,687.472 1347.73,687.472 1348.29,687.472 1348.84,687.472 1349.4,687.472 1349.96,687.472 1350.52,687.472 1351.08,687.472 1351.64,687.472 1352.2,687.472 1352.76,687.472 1353.32,687.472 1353.88,687.472 1354.44,687.472 1355,687.472 1355.56,687.472 1356.12,687.472 1356.67,687.472 1357.23,687.472 1357.79,687.472 1358.35,687.472 1358.91,687.472 1359.47,687.472 1360.03,687.472 1360.59,687.472 1361.15,687.472 1361.71,687.472 1362.27,687.472 1362.83,687.472 1363.39,687.472 1363.94,687.472 1364.5,687.472 1365.06,687.472 1365.62,687.472 1366.18,687.472 1366.74,687.472 1367.3,687.472 1367.86,687.472 1368.42,687.472 1368.98,687.472 1369.54,687.472 1370.1,687.472 1370.66,687.472 1371.21,687.472 1371.77,687.472 1372.33,687.472 1372.89,687.472 1373.45,687.472 1374.01,687.472 1374.57,687.472 1375.13,687.472 1375.69,687.472 1376.25,687.472 1376.81,687.472 1377.37,687.472 1377.93,687.472 1378.49,687.472 1379.04,687.472 1379.6,687.472 1380.16,687.472 1380.72,687.472 1381.28,687.472 1381.84,687.472 1382.4,687.472 1382.96,687.472 1383.52,687.472 1384.08,687.472 1384.64,687.472 1385.2,687.472 1385.76,687.472 1386.31,687.472 1386.87,687.472 1387.43,687.472 1387.99,687.472 1388.55,687.472 1389.11,687.472 1389.67,687.472 1390.23,687.472 1390.79,687.472 1391.35,687.472 1391.91,687.472 1392.47,687.472 1393.03,687.472 1393.58,687.472 1394.14,687.472 1394.7,687.472 1395.26,687.472 1395.82,687.472 1396.38,687.472 1396.94,687.472 1397.5,687.472 1398.06,687.472 1398.62,687.472 1399.18,687.472 1399.74,687.472 1400.3,687.472 1400.86,687.472 1401.41,687.472 1401.97,687.472 1402.53,687.472 1403.09,687.472 1403.65,687.472 1404.21,687.472 1404.77,687.472 1405.33,687.472 1405.89,687.472 1406.45,687.472 1407.01,687.472 1407.57,687.472 1408.13,687.472 1408.68,687.472 1409.24,687.472 1409.8,687.472 1410.36,687.472 1410.92,687.472 1411.48,687.472 1412.04,687.472 1412.6,687.472 1413.16,687.472 1413.72,687.472 1414.28,687.472 1414.84,687.472 1415.4,687.472 1415.95,687.472 1416.51,687.472 1417.07,687.472 1417.63,687.472 1418.19,687.472 1418.75,687.472 1419.31,687.472 1419.87,687.472 1420.43,687.472 1420.99,687.472 1421.55,687.472 1422.11,687.472 1422.67,687.472 1423.23,687.472 1423.78,687.472 1424.34,687.472 1424.9,687.472 1425.46,687.472 1426.02,687.472 1426.58,687.472 1427.14,687.472 1427.7,687.472 1428.26,687.472 1428.82,687.472 1429.38,687.472 1429.94,687.472 1430.5,687.472 1431.05,687.472 1431.61,687.472 1432.17,687.472 1432.73,687.472 1433.29,687.472 1433.85,687.472 1434.41,687.472 1434.97,687.472 1435.53,687.472 1436.09,687.472 1436.65,687.472 1437.21,687.472 1437.77,687.472 1438.33,687.472 1438.88,687.472 1439.44,687.472 1440,687.472 1440.56,687.472 1441.12,687.472 1441.68,687.472 1442.24,687.472 1442.8,687.472 1443.36,687.472 1443.92,687.472 1444.48,687.472 1445.04,687.472 1445.6,687.472 1446.15,687.472 1446.71,687.472 1447.27,687.472 1447.83,687.472 1448.39,687.472 1448.95,687.472 1449.51,687.472 1450.07,687.472 1450.63,687.472 1451.19,687.472 1451.75,687.472 1452.31,687.472 1452.87,687.472 1453.42,687.472 1453.98,687.472 1454.54,687.472 1455.1,687.472 1455.66,687.472 1456.22,687.472 1456.78,687.472 1457.34,687.472 1457.9,687.472 1458.46,687.472 1459.02,687.472 1459.58,687.472 1460.14,687.472 1460.7,687.472 1461.25,687.472 1461.81,687.472 1462.37,687.472 1462.93,687.472 1463.49,687.472 1464.05,687.472 1464.61,687.472 1465.17,687.472 1465.73,687.472 1466.29,687.472 1466.85,687.472 1467.41,687.472 1467.97,687.472 1468.52,687.472 1469.08,687.472 1469.64,687.472 1470.2,687.472 1470.76,687.472 1471.32,687.472 1471.88,687.472 1472.44,687.472 1473,687.472 1473.56,687.472 1474.12,687.472 1474.68,687.472 1475.24,687.472 1475.79,687.472 1476.35,687.472 1476.91,687.472 1477.47,687.472 1478.03,687.472 1478.59,687.472 1479.15,687.472 1479.71,687.472 1480.27,687.472 1480.83,687.472 1481.39,687.472 1481.95,687.472 1482.51,687.472 1483.07,687.472 1483.62,687.472 1484.18,687.472 1484.74,687.472 1485.3,687.472 1485.86,687.472 1486.42,687.472 1486.98,687.472 1487.54,687.472 1488.1,687.472 1488.66,687.472 1489.22,687.472 1489.78,687.472 1490.34,687.472 1490.89,687.472 1491.45,687.472 1492.01,687.472 1492.57,687.472 1493.13,687.472 1493.69,687.472 1494.25,687.472 1494.81,687.472 1495.37,687.472 1495.93,687.472 1496.49,687.472 1497.05,687.472 1497.61,687.472 1498.16,687.472 1498.72,687.472 1499.28,687.472 1499.84,687.472 1500.4,687.472 1500.96,687.472 1501.52,687.472 1502.08,687.472 1502.64,687.472 1503.2,687.472 1503.76,687.472 1504.32,687.472 1504.88,687.472 1505.44,687.472 1505.99,687.472 1506.55,687.472 1507.11,687.472 1507.67,687.472 1508.23,687.472 1508.79,687.472 1509.35,687.472 1509.91,687.472 1510.47,687.472 1511.03,687.472 1511.59,687.472 1512.15,687.472 1512.71,687.472 1513.26,687.472 1513.82,687.472 1514.38,687.472 1514.94,687.472 1515.5,687.472 1516.06,687.472 1516.62,687.472 1517.18,687.472 1517.74,687.472 1518.3,687.472 1518.86,687.472 1519.42,687.472 1519.98,687.472 1520.53,687.472 1521.09,687.472 1521.65,687.472 1522.21,687.472 1522.77,687.472 1523.33,687.472 1523.89,687.472 1524.45,687.472 1525.01,687.472 1525.57,687.472 1526.13,687.472 1526.69,687.472 1527.25,687.472 1527.81,687.472 1528.36,687.472 1528.92,687.472 1529.48,687.472 1530.04,687.472 1530.6,687.472 1531.16,687.472 1531.72,687.472 1532.28,687.472 1532.84,687.472 1533.4,687.472 1533.96,687.472 1534.52,687.472 1535.08,687.472 1535.63,687.472 1536.19,687.472 1536.75,687.472 1537.31,687.472 1537.87,687.472 1538.43,687.472 1538.99,687.472 1539.55,687.472 1540.11,687.472 1540.67,687.472 1541.23,687.472 1541.79,687.472 1542.35,687.472 1542.9,687.472 1543.46,687.472 1544.02,687.472 1544.58,687.472 1545.14,687.472 1545.7,687.472 1546.26,687.472 1546.82,687.472 1547.38,687.472 1547.94,687.472 1548.5,687.472 1549.06,687.472 1549.62,687.472 1550.18,687.472 1550.73,687.472 1551.29,687.472 1551.85,687.472 1552.41,687.472 1552.97,687.472 1553.53,687.472 1554.09,687.472 1554.65,687.472 1555.21,687.472 1555.77,687.472 1556.33,687.472 1556.89,687.472 1557.45,687.472 1558,687.472 1558.56,687.472 1559.12,687.472 1559.68,687.472 1560.24,687.472 1560.8,687.472 1561.36,687.472 1561.92,687.472 1562.48,687.472 1563.04,687.472 1563.6,687.472 1564.16,687.472 1564.72,687.472 1565.28,687.472 1565.83,687.472 1566.39,687.472 1566.95,687.472 1567.51,687.472 1568.07,687.472 1568.63,687.472 1569.19,687.472 1569.75,687.472 1570.31,687.472 1570.87,687.472 1571.43,687.472 1571.99,687.472 1572.55,687.472 1573.1,687.472 1573.66,687.472 1574.22,687.472 1574.78,687.472 1575.34,687.472 1575.9,687.472 1576.46,687.472 1577.02,687.472 1577.58,687.472 1578.14,687.472 1578.7,687.472 1579.26,687.472 1579.82,687.472 1580.37,687.472 1580.93,687.472 1581.49,687.472 1582.05,687.472 1582.61,687.472 1583.17,687.472 1583.73,687.472 1584.29,687.472 1584.85,687.472 1585.41,687.472 1585.97,687.472 1586.53,687.472 1587.09,687.472 1587.65,687.472 1588.2,687.472 1588.76,687.472 1589.32,687.472 1589.88,687.472 1590.44,687.472 1591,687.472 1591.56,687.472 1592.12,687.472 1592.68,687.472 1593.24,687.472 1593.8,687.472 1594.36,687.472 1594.92,687.472 1595.47,687.472 1596.03,687.472 1596.59,687.472 1597.15,687.472 1597.71,687.472 1598.27,687.472 1598.83,687.472 1599.39,687.472 1599.95,687.472 1600.51,687.472 1601.07,687.472 1601.63,687.472 1602.19,687.472 1602.74,687.472 1603.3,687.472 1603.86,687.472 1604.42,687.472 1604.98,687.472 1605.54,687.472 1606.1,687.472 1606.66,687.472 1607.22,687.472 1607.78,687.472 1608.34,687.472 1608.9,687.472 1609.46,687.472 1610.02,687.472 1610.57,687.472 1611.13,687.472 1611.69,687.472 1612.25,687.472 1612.81,687.472 1613.37,687.472 1613.93,687.472 1614.49,687.472 1615.05,687.472 1615.61,687.472 1616.17,687.472 1616.73,687.472 1617.29,687.472 1617.84,687.472 1618.4,687.472 1618.96,687.472 1619.52,687.472 1620.08,687.472 1620.64,687.472 1621.2,687.472 1621.76,687.472 1622.32,687.472 1622.88,687.472 1623.44,687.472 1624,687.472 1624.56,687.472 1625.11,687.472 1625.67,687.472 1626.23,687.472 1626.79,687.472 1627.35,687.472 1627.91,687.472 1628.47,687.472 1629.03,687.472 1629.59,687.472 1630.15,687.472 1630.71,687.472 1631.27,687.472 1631.83,687.472 1632.39,687.472 1632.94,687.472 1633.5,687.472 1634.06,687.472 1634.62,687.472 1635.18,687.472 1635.74,687.472 1636.3,687.472 1636.86,687.472 1637.42,687.472 1637.98,687.472 1638.54,687.472 1639.1,687.472 1639.66,687.472 1640.21,687.472 1640.77,687.472 1641.33,687.472 1641.89,687.472 1642.45,687.472 1643.01,687.472 1643.57,687.472 1644.13,687.472 1644.69,687.472 1645.25,687.472 1645.81,687.472 1646.37,687.472 1646.93,687.472 1647.48,687.472 1648.04,687.472 1648.6,687.472 1649.16,687.472 1649.72,687.472 1650.28,687.472 1650.84,687.472 1651.4,687.472 1651.96,687.472 1652.52,687.472 1653.08,687.472 1653.64,687.472 1654.2,687.472 1654.76,687.472 1655.31,687.472 1655.87,687.472 1656.43,687.472 1656.99,687.472 1657.55,687.472 1658.11,687.472 1658.67,687.472 1659.23,687.472 1659.79,687.472 1660.35,687.472 1660.91,687.472 1661.47,687.472 1662.03,687.472 1662.58,687.472 1663.14,687.472 1663.7,687.472 1664.26,687.472 1664.82,687.472 1665.38,687.472 1665.94,687.472 1666.5,687.472 1667.06,687.472 1667.62,687.472 1668.18,687.472 1668.74,687.472 1669.3,687.472 1669.85,687.472 1670.41,687.472 1670.97,687.472 1671.53,687.472 1672.09,687.472 1672.65,687.472 1673.21,687.472 1673.77,687.472 1674.33,687.472 1674.89,687.472 1675.45,687.472 1676.01,687.472 1676.57,687.472 1677.13,687.472 1677.68,687.472 1678.24,687.472 1678.8,687.472 1679.36,687.472 1679.92,687.472 1680.48,687.472 1681.04,687.472 1681.6,687.472 1682.16,687.472 1682.72,687.472 1683.28,687.472 1683.84,687.472 1684.4,687.472 1684.95,687.472 1685.51,687.472 1686.07,687.472 1686.63,687.472 1687.19,687.472 1687.75,687.472 1688.31,687.472 1688.87,687.472 1689.43,687.472 1689.99,687.472 1690.55,687.472 1691.11,687.472 1691.67,687.472 1692.23,687.472 1692.78,687.472 1693.34,687.472 1693.9,687.472 1694.46,687.472 1695.02,687.472 1695.58,687.472 1696.14,687.472 1696.7,687.472 1697.26,687.472 1697.82,687.472 1698.38,687.472 1698.94,687.472 1699.5,687.472 1700.05,687.472 1700.61,687.472 1701.17,687.472 1701.73,687.472 1702.29,687.472 1702.85,687.472 1703.41,687.472 1703.97,687.472 1704.53,687.472 1705.09,687.472 1705.65,687.472 1706.21,687.472 1706.77,687.472 1707.32,687.472 1707.88,687.472 1708.44,687.472 1709,687.472 1709.56,687.472 1710.12,687.472 1710.68,687.472 1711.24,687.472 1711.8,687.472 1712.36,687.472 1712.92,687.472 1713.48,687.472 1714.04,687.472 1714.6,687.472 1715.15,687.472 1715.71,687.472 1716.27,687.472 1716.83,687.472 1717.39,687.472 1717.95,687.472 1718.51,687.472 1719.07,687.472 1719.63,687.472 1720.19,687.472 1720.75,687.472 1721.31,687.472 1721.87,687.472 1722.42,687.472 1722.98,687.472 1723.54,687.472 1724.1,687.472 1724.66,687.472 1725.22,687.472 1725.78,687.472 1726.34,687.472 1726.9,687.472 1727.46,687.472 1728.02,687.472 1728.58,687.472 1729.14,687.472 1729.69,687.472 1730.25,687.472 1730.81,687.472 1731.37,687.472 1731.93,687.472 1732.49,687.472 1733.05,687.472 1733.61,687.472 1734.17,687.472 1734.73,687.472 1735.29,687.472 1735.85,687.472 1736.41,687.472 1736.97,687.472 1737.52,687.472 1738.08,687.472 1738.64,687.472 1739.2,687.472 1739.76,687.472 1740.32,687.472 1740.88,687.472 1741.44,687.472 1742,687.472 1742.56,687.472 1743.12,687.472 1743.68,687.472 1744.24,687.472 1744.79,687.472 1745.35,687.472 1745.91,687.472 1746.47,687.472 1747.03,687.472 1747.59,687.472 1748.15,687.472 1748.71,687.472 1749.27,687.472 1749.83,687.472 1750.39,687.472 1750.95,687.472 1751.51,687.472 1752.06,687.472 1752.62,687.472 1753.18,687.472 1753.74,687.472 1754.3,687.472 1754.86,687.472 1755.42,687.472 1755.98,687.472 1756.54,687.472 1757.1,687.472 1757.66,687.472 1758.22,687.472 1758.78,687.472 1759.34,687.472 1759.89,687.472 1760.45,687.472 1761.01,687.472 1761.57,687.472 1762.13,687.472 1762.69,687.472 1763.25,687.472 1763.81,687.472 1764.37,687.472 1764.93,687.472 1765.49,687.472 1766.05,687.472 1766.61,687.472 1767.16,687.472 1767.72,687.472 1768.28,687.472 1768.84,687.472 1769.4,687.472 1769.96,687.472 1770.52,687.472 1771.08,687.472 1771.64,687.472 1772.2,687.472 1772.76,687.472 1773.32,687.472 1773.88,687.472 1774.43,687.472 1774.99,687.472 1775.55,687.472 1776.11,687.472 1776.67,687.472 1777.23,687.472 1777.79,687.472 1778.35,687.472 1778.91,687.472 1779.47,687.472 1780.03,687.472 1780.59,687.472 1781.15,687.472 1781.71,687.472 1782.26,687.472 1782.82,687.472 1783.38,687.472 1783.94,687.472 1784.5,687.472 1785.06,687.472 1785.62,687.472 1786.18,687.472 1786.74,687.472 1787.3,687.472 1787.86,687.472 1788.42,687.472 1788.98,687.472 1789.53,687.472 1790.09,687.472 1790.65,687.472 1791.21,687.472 1791.77,687.472 1792.33,687.472 1792.89,687.472 1793.45,687.472 1794.01,687.472 1794.57,687.472 1795.13,687.472 1795.69,687.472 1796.25,687.472 1796.8,687.472 1797.36,687.472 1797.92,687.472 1798.48,687.472 1799.04,687.472 1799.6,687.472 1800.16,687.472 1800.72,687.472 1801.28,687.472 1801.84,687.472 1802.4,687.472 1802.96,687.472 1803.52,687.472 1804.08,687.472 1804.63,687.472 1805.19,687.472 1805.75,687.472 1806.31,687.472 1806.87,687.472 1807.43,687.472 1807.99,687.472 1808.55,687.472 1809.11,687.472 1809.67,687.472 1810.23,687.472 1810.79,687.472 1811.35,687.472 1811.9,687.472 1812.46,687.472 1813.02,687.472 1813.58,687.472 1814.14,687.472 1814.7,687.472 1815.26,687.472 1815.82,687.472 1816.38,687.472 1816.94,687.472 1817.5,687.472 1818.06,687.472 1818.62,687.472 1819.18,687.472 1819.73,687.472 1820.29,687.472 1820.85,687.472 1821.41,687.472 1821.97,687.472 1822.53,687.472 1823.09,687.472 1823.65,687.472 1824.21,687.472 1824.77,687.472 1825.33,687.472 1825.89,687.472 1826.45,687.472 1827,687.472 1827.56,687.472 1828.12,687.472 1828.68,687.472 1829.24,687.472 1829.8,687.472 1830.36,687.472 1830.92,687.472 1831.48,687.472 1832.04,687.472 1832.6,687.472 1833.16,687.472 1833.72,687.472 1834.27,687.472 1834.83,687.472 1835.39,687.472 1835.95,687.472 1836.51,687.472 1837.07,687.472 1837.63,687.472 1838.19,687.472 \"/>\n<path clip-path=\"url(#clip863)\" d=\"M720.247 684.725 L720.806 684.725 L721.365 684.725 L721.924 684.725 L722.484 684.725 L723.043 684.725 L723.602 684.725 L724.161 684.725 L724.721 684.725 L725.28 684.725 L725.839 684.725 L726.398 684.725 L726.958 684.725 L727.517 684.725 L728.076 684.725 L728.635 684.725 L729.195 684.725 L729.754 684.725 L730.313 684.725 L730.872 684.725 L731.432 684.725 L731.991 684.725 L732.55 684.725 L733.109 684.725 L733.669 684.725 L734.228 684.725 L734.787 684.725 L735.346 684.725 L735.906 684.725 L736.465 684.725 L737.024 684.725 L737.583 684.725 L738.143 684.725 L738.702 684.725 L739.261 684.725 L739.82 684.725 L740.38 684.725 L740.939 684.725 L741.498 684.725 L742.057 684.725 L742.617 684.725 L743.176 684.725 L743.735 684.725 L744.294 684.725 L744.854 684.725 L745.413 684.725 L745.972 684.725 L746.531 684.725 L747.091 684.725 L747.65 684.725 L748.209 684.725 L748.768 684.725 L749.328 684.725 L749.887 684.725 L750.446 684.725 L751.005 684.725 L751.565 684.725 L752.124 684.725 L752.683 684.725 L753.242 684.725 L753.802 684.725 L754.361 684.725 L754.92 684.725 L755.479 684.725 L756.039 684.725 L756.598 684.725 L757.157 684.725 L757.716 684.725 L758.276 684.725 L758.835 684.725 L759.394 684.725 L759.953 684.725 L760.513 684.725 L761.072 684.725 L761.631 684.725 L762.19 684.725 L762.75 684.725 L763.309 684.725 L763.868 684.725 L764.427 684.725 L764.987 684.725 L765.546 684.725 L766.105 684.725 L766.664 684.725 L767.224 684.725 L767.783 684.725 L768.342 684.725 L768.901 684.725 L769.461 684.725 L770.02 684.725 L770.579 684.725 L771.138 684.725 L771.698 684.725 L772.257 684.725 L772.816 684.725 L773.375 684.725 L773.935 684.725 L774.494 684.725 L775.053 684.725 L775.612 684.725 L776.172 684.725 L776.731 684.725 L777.29 684.725 L777.849 684.725 L778.409 684.725 L778.968 684.725 L779.527 684.725 L780.086 684.725 L780.646 684.725 L781.205 684.725 L781.764 684.725 L782.323 684.725 L782.883 684.725 L783.442 684.725 L784.001 684.725 L784.56 684.725 L785.12 684.725 L785.679 684.725 L786.238 684.725 L786.797 684.725 L787.357 684.725 L787.916 684.725 L788.475 684.725 L789.034 684.725 L789.594 684.725 L790.153 684.725 L790.712 684.725 L791.271 684.725 L791.831 684.725 L792.39 684.725 L792.949 684.725 L793.508 684.725 L794.068 684.725 L794.627 684.725 L795.186 684.725 L795.745 684.725 L796.305 684.725 L796.864 684.725 L797.423 684.725 L797.982 684.725 L798.542 684.725 L799.101 684.725 L799.66 684.725 L800.219 684.725 L800.779 684.725 L801.338 684.725 L801.897 684.725 L802.456 684.725 L803.016 684.725 L803.575 684.725 L804.134 684.725 L804.693 684.725 L805.253 684.725 L805.812 684.725 L806.371 684.725 L806.931 684.725 L807.49 684.725 L808.049 684.725 L808.608 684.725 L809.168 684.725 L809.727 684.725 L810.286 684.725 L810.845 684.725 L811.405 684.725 L811.964 684.725 L812.523 684.725 L813.082 684.725 L813.642 684.725 L814.201 684.725 L814.76 684.725 L815.319 684.725 L815.879 684.725 L816.438 684.725 L816.997 684.725 L817.556 684.725 L818.116 684.725 L818.675 684.725 L819.234 684.725 L819.793 684.725 L820.353 684.725 L820.912 684.725 L821.471 684.725 L822.03 684.725 L822.59 684.725 L823.149 684.725 L823.708 684.725 L824.267 684.725 L824.827 684.725 L825.386 684.725 L825.945 684.725 L826.504 684.725 L827.064 684.725 L827.623 684.725 L828.182 684.725 L828.741 684.725 L829.301 684.725 L829.86 684.725 L830.419 684.725 L830.978 684.725 L831.538 684.725 L832.097 684.725 L832.656 684.725 L833.215 684.725 L833.775 684.725 L834.334 684.725 L834.893 684.725 L835.452 684.725 L836.012 684.725 L836.571 684.725 L837.13 684.725 L837.689 684.725 L838.249 684.725 L838.808 684.725 L839.367 684.725 L839.926 684.725 L840.486 684.725 L841.045 684.725 L841.604 684.725 L842.163 684.725 L842.723 684.725 L843.282 684.725 L843.841 684.725 L844.4 684.725 L844.96 684.725 L845.519 684.725 L846.078 684.725 L846.637 684.725 L847.197 684.725 L847.756 684.725 L848.315 684.725 L848.874 684.725 L849.434 684.725 L849.993 684.725 L850.552 684.725 L851.111 684.725 L851.671 684.725 L852.23 684.725 L852.789 684.725 L853.348 684.725 L853.908 684.725 L854.467 684.725 L855.026 684.725 L855.585 684.725 L856.145 684.725 L856.704 684.725 L857.263 684.725 L857.822 684.725 L858.382 684.725 L858.941 684.725 L859.5 684.725 L860.059 684.725 L860.619 684.725 L861.178 684.725 L861.737 684.725 L862.296 684.725 L862.856 684.725 L863.415 684.725 L863.974 684.725 L864.533 684.725 L865.093 684.725 L865.652 684.725 L866.211 684.725 L866.77 684.725 L867.33 684.725 L867.889 684.725 L868.448 684.725 L869.007 684.725 L869.567 684.725 L870.126 684.725 L870.685 684.725 L871.244 684.725 L871.804 684.725 L872.363 684.725 L872.922 684.725 L873.481 684.725 L874.041 684.725 L874.6 684.725 L875.159 684.725 L875.718 684.725 L876.278 684.725 L876.837 684.725 L877.396 684.725 L877.955 684.725 L878.515 684.725 L879.074 684.725 L879.633 684.725 L880.192 684.725 L880.752 684.725 L881.311 684.725 L881.87 684.725 L882.429 684.725 L882.989 684.725 L883.548 684.725 L884.107 684.725 L884.666 684.725 L885.226 684.725 L885.785 684.725 L886.344 684.725 L886.903 684.725 L887.463 684.725 L888.022 684.725 L888.581 684.725 L889.14 684.725 L889.7 684.725 L890.259 684.725 L890.818 684.725 L891.377 684.725 L891.937 684.725 L892.496 684.725 L893.055 684.725 L893.614 684.725 L894.174 684.725 L894.733 684.725 L895.292 684.725 L895.851 684.725 L896.411 684.725 L896.97 684.725 L897.529 684.725 L898.088 684.725 L898.648 684.725 L899.207 684.725 L899.766 684.725 L900.325 684.725 L900.885 684.725 L901.444 684.725 L902.003 684.725 L902.562 684.725 L903.122 684.725 L903.681 684.725 L904.24 684.725 L904.799 684.725 L905.359 684.725 L905.918 684.725 L906.477 684.725 L907.036 684.725 L907.596 684.725 L908.155 684.725 L908.714 684.725 L909.273 684.725 L909.833 684.725 L910.392 684.725 L910.951 684.725 L911.51 684.725 L912.07 684.725 L912.629 684.725 L913.188 684.725 L913.747 684.725 L914.307 684.725 L914.866 684.725 L915.425 684.725 L915.984 684.725 L916.544 684.725 L917.103 684.725 L917.662 684.725 L918.221 684.725 L918.781 684.725 L919.34 684.725 L919.899 684.725 L920.458 684.725 L921.018 684.725 L921.577 684.725 L922.136 684.725 L922.695 684.725 L923.255 684.725 L923.814 684.725 L924.373 684.725 L924.932 684.725 L925.492 684.725 L926.051 684.725 L926.61 684.725 L927.169 684.725 L927.729 684.725 L928.288 684.725 L928.847 684.725 L929.406 684.725 L929.966 684.725 L930.525 684.725 L931.084 684.725 L931.644 684.725 L932.203 684.725 L932.762 684.725 L933.321 684.725 L933.881 684.725 L934.44 684.725 L934.999 684.725 L935.558 684.725 L936.118 684.725 L936.677 684.725 L937.236 684.725 L937.795 684.725 L938.355 684.725 L938.914 684.725 L939.473 684.725 L940.032 684.725 L940.592 684.725 L941.151 684.725 L941.71 684.725 L942.269 684.725 L942.829 684.725 L943.388 684.725 L943.947 684.725 L944.506 684.725 L945.066 684.725 L945.625 684.725 L946.184 684.725 L946.743 684.725 L947.303 684.725 L947.862 684.725 L948.421 684.725 L948.98 684.725 L949.54 684.725 L950.099 684.725 L950.658 684.725 L951.217 684.725 L951.777 684.725 L952.336 684.725 L952.895 684.725 L953.454 684.725 L954.014 684.725 L954.573 684.725 L955.132 684.725 L955.691 684.725 L956.251 684.725 L956.81 684.725 L957.369 684.725 L957.928 684.725 L958.488 684.725 L959.047 684.725 L959.606 684.725 L960.165 684.725 L960.725 684.725 L961.284 684.725 L961.843 684.725 L962.402 684.725 L962.962 684.725 L963.521 684.725 L964.08 684.725 L964.639 684.725 L965.199 684.725 L965.758 684.725 L966.317 684.725 L966.876 684.725 L967.436 684.725 L967.995 684.725 L968.554 684.725 L969.113 684.725 L969.673 684.725 L970.232 684.725 L970.791 684.725 L971.35 684.725 L971.91 684.725 L972.469 684.725 L973.028 684.725 L973.587 684.725 L974.147 684.725 L974.706 684.725 L975.265 684.725 L975.824 684.725 L976.384 684.725 L976.943 684.725 L977.502 684.725 L978.061 684.725 L978.621 684.725 L979.18 684.725 L979.739 684.725 L980.298 684.725 L980.858 684.725 L981.417 684.725 L981.976 684.725 L982.535 684.725 L983.095 684.725 L983.654 684.725 L984.213 684.725 L984.772 684.725 L985.332 684.725 L985.891 684.725 L986.45 684.725 L987.009 684.725 L987.569 684.725 L988.128 684.725 L988.687 684.725 L989.246 684.725 L989.806 684.725 L990.365 684.725 L990.924 684.725 L991.483 684.725 L992.043 684.725 L992.602 684.725 L993.161 684.725 L993.72 684.725 L994.28 684.725 L994.839 684.725 L995.398 684.725 L995.957 684.725 L996.517 684.725 L997.076 684.725 L997.635 684.725 L998.194 684.725 L998.754 684.725 L999.313 684.725 L999.872 684.725 L1000.43 684.725 L1000.99 684.725 L1001.55 684.725 L1002.11 684.725 L1002.67 684.725 L1003.23 684.725 L1003.79 684.725 L1004.35 684.725 L1004.91 684.725 L1005.46 684.725 L1006.02 684.725 L1006.58 684.725 L1007.14 684.725 L1007.7 684.725 L1008.26 684.725 L1008.82 684.725 L1009.38 684.725 L1009.94 684.725 L1010.5 684.725 L1011.06 684.725 L1011.62 684.725 L1012.18 684.725 L1012.73 684.725 L1013.29 684.725 L1013.85 684.725 L1014.41 684.725 L1014.97 684.725 L1015.53 684.725 L1016.09 684.725 L1016.65 684.725 L1017.21 684.725 L1017.77 684.725 L1018.33 684.725 L1018.89 684.725 L1019.45 684.725 L1020.01 684.725 L1020.56 684.725 L1021.12 684.725 L1021.68 684.725 L1022.24 684.725 L1022.8 684.725 L1023.36 684.725 L1023.92 684.725 L1024.48 684.725 L1025.04 684.725 L1025.6 684.725 L1026.16 684.725 L1026.72 684.725 L1027.28 684.725 L1027.83 684.725 L1028.39 684.725 L1028.95 684.725 L1029.51 684.725 L1030.07 684.725 L1030.63 684.725 L1031.19 684.725 L1031.75 684.725 L1032.31 684.725 L1032.87 684.725 L1033.43 684.725 L1033.99 684.725 L1034.55 684.725 L1035.1 684.725 L1035.66 684.725 L1036.22 684.725 L1036.78 684.725 L1037.34 684.725 L1037.9 684.725 L1038.46 684.725 L1039.02 684.725 L1039.58 684.725 L1040.14 684.725 L1040.7 684.725 L1041.26 684.725 L1041.82 684.725 L1042.38 684.725 L1042.93 684.725 L1043.49 684.725 L1044.05 684.725 L1044.61 684.725 L1045.17 684.725 L1045.73 684.725 L1046.29 684.725 L1046.85 684.725 L1047.41 684.725 L1047.97 684.725 L1048.53 684.725 L1049.09 684.725 L1049.65 684.725 L1050.2 684.725 L1050.76 684.725 L1051.32 684.725 L1051.88 684.725 L1052.44 684.725 L1053 684.725 L1053.56 684.725 L1054.12 684.725 L1054.68 684.725 L1055.24 684.725 L1055.8 684.725 L1056.36 684.725 L1056.92 684.725 L1057.48 684.725 L1058.03 684.725 L1058.59 684.725 L1059.15 684.725 L1059.71 684.725 L1060.27 684.725 L1060.83 684.725 L1061.39 684.725 L1061.95 684.725 L1062.51 684.725 L1063.07 684.725 L1063.63 684.725 L1064.19 684.725 L1064.75 684.725 L1065.3 684.725 L1065.86 684.725 L1066.42 684.725 L1066.98 684.725 L1067.54 684.725 L1068.1 684.725 L1068.66 684.725 L1069.22 684.725 L1069.78 684.725 L1070.34 684.725 L1070.9 684.725 L1071.46 684.725 L1072.02 684.725 L1072.57 684.725 L1073.13 684.725 L1073.69 684.725 L1074.25 684.725 L1074.81 684.725 L1075.37 684.725 L1075.93 684.725 L1076.49 684.725 L1077.05 684.725 L1077.61 684.725 L1078.17 684.725 L1078.73 684.725 L1079.29 684.725 L1079.85 684.725 L1080.4 684.725 L1080.96 684.725 L1081.52 684.725 L1082.08 684.725 L1082.64 684.725 L1083.2 684.725 L1083.76 684.725 L1084.32 684.725 L1084.88 684.725 L1085.44 684.725 L1086 684.725 L1086.56 684.725 L1087.12 684.725 L1087.67 684.725 L1088.23 684.725 L1088.79 684.725 L1089.35 684.725 L1089.91 684.725 L1090.47 684.725 L1091.03 684.725 L1091.59 684.725 L1092.15 684.725 L1092.71 684.725 L1093.27 684.725 L1093.83 684.725 L1094.39 684.725 L1094.94 684.725 L1095.5 684.725 L1096.06 684.725 L1096.62 684.725 L1097.18 684.725 L1097.74 684.725 L1098.3 684.725 L1098.86 684.725 L1099.42 684.725 L1099.98 684.725 L1100.54 684.725 L1101.1 684.725 L1101.66 684.725 L1102.22 684.725 L1102.77 684.725 L1103.33 684.725 L1103.89 684.725 L1104.45 684.725 L1105.01 684.725 L1105.57 684.725 L1106.13 684.725 L1106.69 684.725 L1107.25 684.725 L1107.81 684.725 L1108.37 684.725 L1108.93 684.725 L1109.49 684.725 L1110.04 684.725 L1110.6 684.725 L1111.16 684.725 L1111.72 684.725 L1112.28 684.725 L1112.84 684.725 L1113.4 684.725 L1113.96 684.725 L1114.52 684.725 L1115.08 684.725 L1115.64 684.725 L1116.2 684.725 L1116.76 684.725 L1117.31 684.725 L1117.87 684.725 L1118.43 684.725 L1118.99 684.725 L1119.55 684.725 L1120.11 684.725 L1120.67 684.725 L1121.23 684.725 L1121.79 684.725 L1122.35 684.725 L1122.91 684.725 L1123.47 684.725 L1124.03 684.725 L1124.59 684.725 L1125.14 684.725 L1125.7 684.725 L1126.26 684.725 L1126.82 684.725 L1127.38 684.725 L1127.94 684.725 L1128.5 684.725 L1129.06 684.725 L1129.62 684.725 L1130.18 684.725 L1130.74 684.725 L1131.3 684.725 L1131.86 684.725 L1132.41 684.725 L1132.97 684.725 L1133.53 684.725 L1134.09 684.725 L1134.65 684.725 L1135.21 684.725 L1135.77 684.725 L1136.33 684.725 L1136.89 684.725 L1137.45 684.725 L1138.01 684.725 L1138.57 684.725 L1139.13 684.725 L1139.68 684.725 L1140.24 684.725 L1140.8 684.725 L1141.36 684.725 L1141.92 684.725 L1142.48 684.725 L1143.04 684.725 L1143.6 684.725 L1144.16 684.725 L1144.72 684.725 L1145.28 684.725 L1145.84 684.725 L1146.4 684.725 L1146.96 684.725 L1147.51 684.725 L1148.07 684.725 L1148.63 684.725 L1149.19 684.725 L1149.75 684.725 L1150.31 684.725 L1150.87 684.725 L1151.43 684.725 L1151.99 684.725 L1152.55 684.725 L1153.11 684.725 L1153.67 684.725 L1154.23 684.725 L1154.78 684.725 L1155.34 684.725 L1155.9 684.725 L1156.46 684.725 L1157.02 684.725 L1157.58 684.725 L1158.14 684.725 L1158.7 684.725 L1159.26 684.725 L1159.82 684.725 L1160.38 684.725 L1160.94 684.725 L1161.5 684.725 L1162.05 684.725 L1162.61 684.725 L1163.17 684.725 L1163.73 684.725 L1164.29 684.725 L1164.85 684.725 L1165.41 684.725 L1165.97 684.725 L1166.53 684.725 L1167.09 684.725 L1167.65 684.725 L1168.21 684.725 L1168.77 684.725 L1169.33 684.725 L1169.88 684.725 L1170.44 684.725 L1171 684.725 L1171.56 684.725 L1172.12 684.725 L1172.68 684.725 L1173.24 684.725 L1173.8 684.725 L1174.36 684.725 L1174.92 684.725 L1175.48 684.725 L1176.04 684.725 L1176.6 684.725 L1177.15 684.725 L1177.71 684.725 L1178.27 684.725 L1178.83 684.725 L1179.39 684.725 L1179.95 684.725 L1180.51 684.725 L1181.07 684.725 L1181.63 684.725 L1182.19 684.725 L1182.75 684.725 L1183.31 684.725 L1183.87 684.725 L1184.43 684.725 L1184.98 684.725 L1185.54 684.725 L1186.1 684.725 L1186.66 684.725 L1187.22 684.725 L1187.78 684.725 L1188.34 684.725 L1188.9 684.725 L1189.46 684.725 L1190.02 684.725 L1190.58 684.725 L1191.14 684.725 L1191.7 684.725 L1192.25 684.725 L1192.81 684.725 L1193.37 684.725 L1193.93 684.725 L1194.49 684.725 L1195.05 684.725 L1195.61 684.725 L1196.17 684.725 L1196.73 684.725 L1197.29 684.725 L1197.85 684.725 L1198.41 684.725 L1198.97 684.725 L1199.52 684.725 L1200.08 684.725 L1200.64 684.725 L1201.2 684.725 L1201.76 684.725 L1202.32 684.725 L1202.88 684.725 L1203.44 684.725 L1204 684.725 L1204.56 684.725 L1205.12 684.725 L1205.68 684.725 L1206.24 684.725 L1206.8 684.725 L1207.35 684.725 L1207.91 684.725 L1208.47 684.725 L1209.03 684.725 L1209.59 684.725 L1210.15 684.725 L1210.71 684.725 L1211.27 684.725 L1211.83 684.725 L1212.39 684.725 L1212.95 684.725 L1213.51 684.725 L1214.07 684.725 L1214.62 684.725 L1215.18 684.725 L1215.74 684.725 L1216.3 684.725 L1216.86 684.725 L1217.42 684.725 L1217.98 684.725 L1218.54 684.725 L1219.1 684.725 L1219.66 684.725 L1220.22 684.725 L1220.78 684.725 L1221.34 684.725 L1221.89 684.725 L1222.45 684.725 L1223.01 684.725 L1223.57 684.725 L1224.13 684.725 L1224.69 684.725 L1225.25 684.725 L1225.81 684.725 L1226.37 684.725 L1226.93 684.725 L1227.49 684.725 L1228.05 684.725 L1228.61 684.725 L1229.17 684.725 L1229.72 684.725 L1230.28 684.725 L1230.84 684.725 L1231.4 684.725 L1231.96 684.725 L1232.52 684.725 L1233.08 684.725 L1233.64 684.725 L1234.2 684.725 L1234.76 684.725 L1235.32 684.725 L1235.88 684.725 L1236.44 684.725 L1236.99 684.725 L1237.55 684.725 L1238.11 684.725 L1238.67 684.725 L1239.23 684.725 L1239.79 684.725 L1240.35 684.725 L1240.91 684.725 L1241.47 684.725 L1242.03 684.725 L1242.59 684.725 L1243.15 684.725 L1243.71 684.725 L1244.26 684.725 L1244.82 684.725 L1245.38 684.725 L1245.94 684.725 L1246.5 684.725 L1247.06 684.725 L1247.62 684.725 L1248.18 684.725 L1248.74 684.725 L1249.3 684.725 L1249.86 684.725 L1250.42 684.725 L1250.98 684.725 L1251.54 684.725 L1252.09 684.725 L1252.65 684.725 L1253.21 684.725 L1253.77 684.725 L1254.33 684.725 L1254.89 684.725 L1255.45 684.725 L1256.01 684.725 L1256.57 684.725 L1257.13 684.725 L1257.69 684.725 L1258.25 684.725 L1258.81 684.725 L1259.36 684.725 L1259.92 684.725 L1260.48 684.725 L1261.04 684.725 L1261.6 684.725 L1262.16 684.725 L1262.72 684.725 L1263.28 684.725 L1263.84 684.725 L1264.4 684.725 L1264.96 684.725 L1265.52 684.725 L1266.08 684.725 L1266.63 684.725 L1267.19 684.725 L1267.75 684.725 L1268.31 684.725 L1268.87 684.725 L1269.43 684.725 L1269.99 684.725 L1270.55 684.725 L1271.11 684.725 L1271.67 684.725 L1272.23 684.725 L1272.79 684.725 L1273.35 684.725 L1273.91 684.725 L1274.46 684.725 L1275.02 684.725 L1275.58 684.725 L1276.14 684.725 L1276.7 684.725 L1277.26 684.725 L1277.82 684.725 L1278.38 684.725 L1278.94 684.725 L1279.5 684.725 L1280.06 684.725 L1280.62 684.725 L1281.18 684.725 L1281.73 684.725 L1282.29 684.725 L1282.85 684.725 L1283.41 684.725 L1283.97 684.725 L1284.53 684.725 L1285.09 684.725 L1285.65 684.725 L1286.21 684.725 L1286.77 684.725 L1287.33 684.725 L1287.89 684.725 L1288.45 684.725 L1289 684.725 L1289.56 684.725 L1290.12 684.725 L1290.68 684.725 L1291.24 684.725 L1291.8 684.725 L1292.36 684.725 L1292.92 684.725 L1293.48 684.725 L1294.04 684.725 L1294.6 684.725 L1295.16 684.725 L1295.72 684.725 L1296.28 684.725 L1296.83 684.725 L1297.39 684.725 L1297.95 684.725 L1298.51 684.725 L1299.07 684.725 L1299.63 684.725 L1300.19 684.725 L1300.75 684.725 L1301.31 684.725 L1301.87 684.725 L1302.43 684.725 L1302.99 684.725 L1303.55 684.725 L1304.1 684.725 L1304.66 684.725 L1305.22 684.725 L1305.78 684.725 L1306.34 684.725 L1306.9 684.725 L1307.46 684.725 L1308.02 684.725 L1308.58 684.725 L1309.14 684.725 L1309.7 684.725 L1310.26 684.725 L1310.82 684.725 L1311.38 684.725 L1311.93 684.725 L1312.49 684.725 L1313.05 684.725 L1313.61 684.725 L1314.17 684.725 L1314.73 684.725 L1315.29 684.725 L1315.85 684.725 L1316.41 684.725 L1316.97 684.725 L1317.53 684.725 L1318.09 684.725 L1318.65 684.725 L1319.2 684.725 L1319.76 684.725 L1320.32 684.725 L1320.88 684.725 L1321.44 684.725 L1322 684.725 L1322.56 684.725 L1323.12 684.725 L1323.68 684.725 L1324.24 684.725 L1324.8 684.725 L1325.36 684.725 L1325.92 684.725 L1326.47 684.725 L1327.03 684.725 L1327.59 684.725 L1328.15 684.725 L1328.71 684.725 L1329.27 684.725 L1329.83 684.725 L1330.39 684.725 L1330.95 684.725 L1331.51 684.725 L1332.07 684.725 L1332.63 684.725 L1333.19 684.725 L1333.75 684.725 L1334.3 684.725 L1334.86 684.725 L1335.42 684.725 L1335.98 684.725 L1336.54 684.725 L1337.1 684.725 L1337.66 684.725 L1338.22 684.725 L1338.78 684.725 L1339.34 684.725 L1339.9 684.725 L1340.46 684.725 L1341.02 684.725 L1341.57 684.725 L1342.13 684.725 L1342.69 684.725 L1343.25 684.725 L1343.81 684.725 L1344.37 684.725 L1344.93 684.725 L1345.49 684.725 L1346.05 684.725 L1346.61 684.725 L1347.17 684.725 L1347.73 684.725 L1348.29 684.725 L1348.84 684.725 L1349.4 684.725 L1349.96 684.725 L1350.52 684.725 L1351.08 684.725 L1351.64 684.725 L1352.2 684.725 L1352.76 684.725 L1353.32 684.725 L1353.88 684.725 L1354.44 684.725 L1355 684.725 L1355.56 684.725 L1356.12 684.725 L1356.67 684.725 L1357.23 684.725 L1357.79 684.725 L1358.35 684.725 L1358.91 684.725 L1359.47 684.725 L1360.03 684.725 L1360.59 684.725 L1361.15 684.725 L1361.71 684.725 L1362.27 684.725 L1362.83 684.725 L1363.39 684.725 L1363.94 684.725 L1364.5 684.725 L1365.06 684.725 L1365.62 684.725 L1366.18 684.725 L1366.74 684.725 L1367.3 684.725 L1367.86 684.725 L1368.42 684.725 L1368.98 684.725 L1369.54 684.725 L1370.1 684.725 L1370.66 684.725 L1371.21 684.725 L1371.77 684.725 L1372.33 684.725 L1372.89 684.725 L1373.45 684.725 L1374.01 684.725 L1374.57 684.725 L1375.13 684.725 L1375.69 684.725 L1376.25 684.725 L1376.81 684.725 L1377.37 684.725 L1377.93 684.725 L1378.49 684.725 L1379.04 684.725 L1379.6 684.725 L1380.16 684.725 L1380.72 684.725 L1381.28 684.725 L1381.84 684.725 L1382.4 684.725 L1382.96 684.725 L1383.52 684.725 L1384.08 684.725 L1384.64 684.725 L1385.2 684.725 L1385.76 684.725 L1386.31 684.725 L1386.87 684.725 L1387.43 684.725 L1387.99 684.725 L1388.55 684.725 L1389.11 684.725 L1389.67 684.725 L1390.23 684.725 L1390.79 684.725 L1391.35 684.725 L1391.91 684.725 L1392.47 684.725 L1393.03 684.725 L1393.58 684.725 L1394.14 684.725 L1394.7 684.725 L1395.26 684.725 L1395.82 684.725 L1396.38 684.725 L1396.94 684.725 L1397.5 684.725 L1398.06 684.725 L1398.62 684.725 L1399.18 684.725 L1399.74 684.725 L1400.3 684.725 L1400.86 684.725 L1401.41 684.725 L1401.97 684.725 L1402.53 684.725 L1403.09 684.725 L1403.65 684.725 L1404.21 684.725 L1404.77 684.725 L1405.33 684.725 L1405.89 684.725 L1406.45 684.725 L1407.01 684.725 L1407.57 684.725 L1408.13 684.725 L1408.68 684.725 L1409.24 684.725 L1409.8 684.725 L1410.36 684.725 L1410.92 684.725 L1411.48 684.725 L1412.04 684.725 L1412.6 684.725 L1413.16 684.725 L1413.72 684.725 L1414.28 684.725 L1414.84 684.725 L1415.4 684.725 L1415.95 684.725 L1416.51 684.725 L1417.07 684.725 L1417.63 684.725 L1418.19 684.725 L1418.75 684.725 L1419.31 684.725 L1419.87 684.725 L1420.43 684.725 L1420.99 684.725 L1421.55 684.725 L1422.11 684.725 L1422.67 684.725 L1423.23 684.725 L1423.78 684.725 L1424.34 684.725 L1424.9 684.725 L1425.46 684.725 L1426.02 684.725 L1426.58 684.725 L1427.14 684.725 L1427.7 684.725 L1428.26 684.725 L1428.82 684.725 L1429.38 684.725 L1429.94 684.725 L1430.5 684.725 L1431.05 684.725 L1431.61 684.725 L1432.17 684.725 L1432.73 684.725 L1433.29 684.725 L1433.85 684.725 L1434.41 684.725 L1434.97 684.725 L1435.53 684.725 L1436.09 684.725 L1436.65 684.725 L1437.21 684.725 L1437.77 684.725 L1438.33 684.725 L1438.88 684.725 L1439.44 684.725 L1440 684.725 L1440.56 684.725 L1441.12 684.725 L1441.68 684.725 L1442.24 684.725 L1442.8 684.725 L1443.36 684.725 L1443.92 684.725 L1444.48 684.725 L1445.04 684.725 L1445.6 684.725 L1446.15 684.725 L1446.71 684.725 L1447.27 684.725 L1447.83 684.725 L1448.39 684.725 L1448.95 684.725 L1449.51 684.725 L1450.07 684.725 L1450.63 684.725 L1451.19 684.725 L1451.75 684.725 L1452.31 684.725 L1452.87 684.725 L1453.42 684.725 L1453.98 684.725 L1454.54 684.725 L1455.1 684.725 L1455.66 684.725 L1456.22 684.725 L1456.78 684.725 L1457.34 684.725 L1457.9 684.725 L1458.46 684.725 L1459.02 684.725 L1459.58 684.725 L1460.14 684.725 L1460.7 684.725 L1461.25 684.725 L1461.81 684.725 L1462.37 684.725 L1462.93 684.725 L1463.49 684.725 L1464.05 684.725 L1464.61 684.725 L1465.17 684.725 L1465.73 684.725 L1466.29 684.725 L1466.85 684.725 L1467.41 684.725 L1467.97 684.725 L1468.52 684.725 L1469.08 684.725 L1469.64 684.725 L1470.2 684.725 L1470.76 684.725 L1471.32 684.725 L1471.88 684.725 L1472.44 684.725 L1473 684.725 L1473.56 684.725 L1474.12 684.725 L1474.68 684.725 L1475.24 684.725 L1475.79 684.725 L1476.35 684.725 L1476.91 684.725 L1477.47 684.725 L1478.03 684.725 L1478.59 684.725 L1479.15 684.725 L1479.71 684.725 L1480.27 684.725 L1480.83 684.725 L1481.39 684.725 L1481.95 684.725 L1482.51 684.725 L1483.07 684.725 L1483.62 684.725 L1484.18 684.725 L1484.74 684.725 L1485.3 684.725 L1485.86 684.725 L1486.42 684.725 L1486.98 684.725 L1487.54 684.725 L1488.1 684.725 L1488.66 684.725 L1489.22 684.725 L1489.78 684.725 L1490.34 684.725 L1490.89 684.725 L1491.45 684.725 L1492.01 684.725 L1492.57 684.725 L1493.13 684.725 L1493.69 684.725 L1494.25 684.725 L1494.81 684.725 L1495.37 684.725 L1495.93 684.725 L1496.49 684.725 L1497.05 684.725 L1497.61 684.725 L1498.16 684.725 L1498.72 684.725 L1499.28 684.725 L1499.84 684.725 L1500.4 684.725 L1500.96 684.725 L1501.52 684.725 L1502.08 684.725 L1502.64 684.725 L1503.2 684.725 L1503.76 684.725 L1504.32 684.725 L1504.88 684.725 L1505.44 684.725 L1505.99 684.725 L1506.55 684.725 L1507.11 684.725 L1507.67 684.725 L1508.23 684.725 L1508.79 684.725 L1509.35 684.725 L1509.91 684.725 L1510.47 684.725 L1511.03 684.725 L1511.59 684.725 L1512.15 684.725 L1512.71 684.725 L1513.26 684.725 L1513.82 684.725 L1514.38 684.725 L1514.94 684.725 L1515.5 684.725 L1516.06 684.725 L1516.62 684.725 L1517.18 684.725 L1517.74 684.725 L1518.3 684.725 L1518.86 684.725 L1519.42 684.725 L1519.98 684.725 L1520.53 684.725 L1521.09 684.725 L1521.65 684.725 L1522.21 684.725 L1522.77 684.725 L1523.33 684.725 L1523.89 684.725 L1524.45 684.725 L1525.01 684.725 L1525.57 684.725 L1526.13 684.725 L1526.69 684.725 L1527.25 684.725 L1527.81 684.725 L1528.36 684.725 L1528.92 684.725 L1529.48 684.725 L1530.04 684.725 L1530.6 684.725 L1531.16 684.725 L1531.72 684.725 L1532.28 684.725 L1532.84 684.725 L1533.4 684.725 L1533.96 684.725 L1534.52 684.725 L1535.08 684.725 L1535.63 684.725 L1536.19 684.725 L1536.75 684.725 L1537.31 684.725 L1537.87 684.725 L1538.43 684.725 L1538.99 684.725 L1539.55 684.725 L1540.11 684.725 L1540.67 684.725 L1541.23 684.725 L1541.79 684.725 L1542.35 684.725 L1542.9 684.725 L1543.46 684.725 L1544.02 684.725 L1544.58 684.725 L1545.14 684.725 L1545.7 684.725 L1546.26 684.725 L1546.82 684.725 L1547.38 684.725 L1547.94 684.725 L1548.5 684.725 L1549.06 684.725 L1549.62 684.725 L1550.18 684.725 L1550.73 684.725 L1551.29 684.725 L1551.85 684.725 L1552.41 684.725 L1552.97 684.725 L1553.53 684.725 L1554.09 684.725 L1554.65 684.725 L1555.21 684.725 L1555.77 684.725 L1556.33 684.725 L1556.89 684.725 L1557.45 684.725 L1558 684.725 L1558.56 684.725 L1559.12 684.725 L1559.68 684.725 L1560.24 684.725 L1560.8 684.725 L1561.36 684.725 L1561.92 684.725 L1562.48 684.725 L1563.04 684.725 L1563.6 684.725 L1564.16 684.725 L1564.72 684.725 L1565.28 684.725 L1565.83 684.725 L1566.39 684.725 L1566.95 684.725 L1567.51 684.725 L1568.07 684.725 L1568.63 684.725 L1569.19 684.725 L1569.75 684.725 L1570.31 684.725 L1570.87 684.725 L1571.43 684.725 L1571.99 684.725 L1572.55 684.725 L1573.1 684.725 L1573.66 684.725 L1574.22 684.725 L1574.78 684.725 L1575.34 684.725 L1575.9 684.725 L1576.46 684.725 L1577.02 684.725 L1577.58 684.725 L1578.14 684.725 L1578.7 684.725 L1579.26 684.725 L1579.82 684.725 L1580.37 684.725 L1580.93 684.725 L1581.49 684.725 L1582.05 684.725 L1582.61 684.725 L1583.17 684.725 L1583.73 684.725 L1584.29 684.725 L1584.85 684.725 L1585.41 684.725 L1585.97 684.725 L1586.53 684.725 L1587.09 684.725 L1587.65 684.725 L1588.2 684.725 L1588.76 684.725 L1589.32 684.725 L1589.88 684.725 L1590.44 684.725 L1591 684.725 L1591.56 684.725 L1592.12 684.725 L1592.68 684.725 L1593.24 684.725 L1593.8 684.725 L1594.36 684.725 L1594.92 684.725 L1595.47 684.725 L1596.03 684.725 L1596.59 684.725 L1597.15 684.725 L1597.71 684.725 L1598.27 684.725 L1598.83 684.725 L1599.39 684.725 L1599.95 684.725 L1600.51 684.725 L1601.07 684.725 L1601.63 684.725 L1602.19 684.725 L1602.74 684.725 L1603.3 684.725 L1603.86 684.725 L1604.42 684.725 L1604.98 684.725 L1605.54 684.725 L1606.1 684.725 L1606.66 684.725 L1607.22 684.725 L1607.78 684.725 L1608.34 684.725 L1608.9 684.725 L1609.46 684.725 L1610.02 684.725 L1610.57 684.725 L1611.13 684.725 L1611.69 684.725 L1612.25 684.725 L1612.81 684.725 L1613.37 684.725 L1613.93 684.725 L1614.49 684.725 L1615.05 684.725 L1615.61 684.725 L1616.17 684.725 L1616.73 684.725 L1617.29 684.725 L1617.84 684.725 L1618.4 684.725 L1618.96 684.725 L1619.52 684.725 L1620.08 684.725 L1620.64 684.725 L1621.2 684.725 L1621.76 684.725 L1622.32 684.725 L1622.88 684.725 L1623.44 684.725 L1624 684.725 L1624.56 684.725 L1625.11 684.725 L1625.67 684.725 L1626.23 684.725 L1626.79 684.725 L1627.35 684.725 L1627.91 684.725 L1628.47 684.725 L1629.03 684.725 L1629.59 684.725 L1630.15 684.725 L1630.71 684.725 L1631.27 684.725 L1631.83 684.725 L1632.39 684.725 L1632.94 684.725 L1633.5 684.725 L1634.06 684.725 L1634.62 684.725 L1635.18 684.725 L1635.74 684.725 L1636.3 684.725 L1636.86 684.725 L1637.42 684.725 L1637.98 684.725 L1638.54 684.725 L1639.1 684.725 L1639.66 684.725 L1640.21 684.725 L1640.77 684.725 L1641.33 684.725 L1641.89 684.725 L1642.45 684.725 L1643.01 684.725 L1643.57 684.725 L1644.13 684.725 L1644.69 684.725 L1645.25 684.725 L1645.81 684.725 L1646.37 684.725 L1646.93 684.725 L1647.48 684.725 L1648.04 684.725 L1648.6 684.725 L1649.16 684.725 L1649.72 684.725 L1650.28 684.725 L1650.84 684.725 L1651.4 684.725 L1651.96 684.725 L1652.52 684.725 L1653.08 684.725 L1653.64 684.725 L1654.2 684.725 L1654.76 684.725 L1655.31 684.725 L1655.87 684.725 L1656.43 684.725 L1656.99 684.725 L1657.55 684.725 L1658.11 684.725 L1658.67 684.725 L1659.23 684.725 L1659.79 684.725 L1660.35 684.725 L1660.91 684.725 L1661.47 684.725 L1662.03 684.725 L1662.58 684.725 L1663.14 684.725 L1663.7 684.725 L1664.26 684.725 L1664.82 684.725 L1665.38 684.725 L1665.94 684.725 L1666.5 684.725 L1667.06 684.725 L1667.62 684.725 L1668.18 684.725 L1668.74 684.725 L1669.3 684.725 L1669.85 684.725 L1670.41 684.725 L1670.97 684.725 L1671.53 684.725 L1672.09 684.725 L1672.65 684.725 L1673.21 684.725 L1673.77 684.725 L1674.33 684.725 L1674.89 684.725 L1675.45 684.725 L1676.01 684.725 L1676.57 684.725 L1677.13 684.725 L1677.68 684.725 L1678.24 684.725 L1678.8 684.725 L1679.36 684.725 L1679.92 684.725 L1680.48 684.725 L1681.04 684.725 L1681.6 684.725 L1682.16 684.725 L1682.72 684.725 L1683.28 684.725 L1683.84 684.725 L1684.4 684.725 L1684.95 684.725 L1685.51 684.725 L1686.07 684.725 L1686.63 684.725 L1687.19 684.725 L1687.75 684.725 L1688.31 684.725 L1688.87 684.725 L1689.43 684.725 L1689.99 684.725 L1690.55 684.725 L1691.11 684.725 L1691.67 684.725 L1692.23 684.725 L1692.78 684.725 L1693.34 684.725 L1693.9 684.725 L1694.46 684.725 L1695.02 684.725 L1695.58 684.725 L1696.14 684.725 L1696.7 684.725 L1697.26 684.725 L1697.82 684.725 L1698.38 684.725 L1698.94 684.725 L1699.5 684.725 L1700.05 684.725 L1700.61 684.725 L1701.17 684.725 L1701.73 684.725 L1702.29 684.725 L1702.85 684.725 L1703.41 684.725 L1703.97 684.725 L1704.53 684.725 L1705.09 684.725 L1705.65 684.725 L1706.21 684.725 L1706.77 684.725 L1707.32 684.725 L1707.88 684.725 L1708.44 684.725 L1709 684.725 L1709.56 684.725 L1710.12 684.725 L1710.68 684.725 L1711.24 684.725 L1711.8 684.725 L1712.36 684.725 L1712.92 684.725 L1713.48 684.725 L1714.04 684.725 L1714.6 684.725 L1715.15 684.725 L1715.71 684.725 L1716.27 684.725 L1716.83 684.725 L1717.39 684.725 L1717.95 684.725 L1718.51 684.725 L1719.07 684.725 L1719.63 684.725 L1720.19 684.725 L1720.75 684.725 L1721.31 684.725 L1721.87 684.725 L1722.42 684.725 L1722.98 684.725 L1723.54 684.725 L1724.1 684.725 L1724.66 684.725 L1725.22 684.725 L1725.78 684.725 L1726.34 684.725 L1726.9 684.725 L1727.46 684.725 L1728.02 684.725 L1728.58 684.725 L1729.14 684.725 L1729.69 684.725 L1730.25 684.725 L1730.81 684.725 L1731.37 684.725 L1731.93 684.725 L1732.49 684.725 L1733.05 684.725 L1733.61 684.725 L1734.17 684.725 L1734.73 684.725 L1735.29 684.725 L1735.85 684.725 L1736.41 684.725 L1736.97 684.725 L1737.52 684.725 L1738.08 684.725 L1738.64 684.725 L1739.2 684.725 L1739.76 684.725 L1740.32 684.725 L1740.88 684.725 L1741.44 684.725 L1742 684.725 L1742.56 684.725 L1743.12 684.725 L1743.68 684.725 L1744.24 684.725 L1744.79 684.725 L1745.35 684.725 L1745.91 684.725 L1746.47 684.725 L1747.03 684.725 L1747.59 684.725 L1748.15 684.725 L1748.71 684.725 L1749.27 684.725 L1749.83 684.725 L1750.39 684.725 L1750.95 684.725 L1751.51 684.725 L1752.06 684.725 L1752.62 684.725 L1753.18 684.725 L1753.74 684.725 L1754.3 684.725 L1754.86 684.725 L1755.42 684.725 L1755.98 684.725 L1756.54 684.725 L1757.1 684.725 L1757.66 684.725 L1758.22 684.725 L1758.78 684.725 L1759.34 684.725 L1759.89 684.725 L1760.45 684.725 L1761.01 684.725 L1761.57 684.725 L1762.13 684.725 L1762.69 684.725 L1763.25 684.725 L1763.81 684.725 L1764.37 684.725 L1764.93 684.725 L1765.49 684.725 L1766.05 684.725 L1766.61 684.725 L1767.16 684.725 L1767.72 684.725 L1768.28 684.725 L1768.84 684.725 L1769.4 684.725 L1769.96 684.725 L1770.52 684.725 L1771.08 684.725 L1771.64 684.725 L1772.2 684.725 L1772.76 684.725 L1773.32 684.725 L1773.88 684.725 L1774.43 684.725 L1774.99 684.725 L1775.55 684.725 L1776.11 684.725 L1776.67 684.725 L1777.23 684.725 L1777.79 684.725 L1778.35 684.725 L1778.91 684.725 L1779.47 684.725 L1780.03 684.725 L1780.59 684.725 L1781.15 684.725 L1781.71 684.725 L1782.26 684.725 L1782.82 684.725 L1783.38 684.725 L1783.94 684.725 L1784.5 684.725 L1785.06 684.725 L1785.62 684.725 L1786.18 684.725 L1786.74 684.725 L1787.3 684.725 L1787.86 684.725 L1788.42 684.725 L1788.98 684.725 L1789.53 684.725 L1790.09 684.725 L1790.65 684.725 L1791.21 684.725 L1791.77 684.725 L1792.33 684.725 L1792.89 684.725 L1793.45 684.725 L1794.01 684.725 L1794.57 684.725 L1795.13 684.725 L1795.69 684.725 L1796.25 684.725 L1796.8 684.725 L1797.36 684.725 L1797.92 684.725 L1798.48 684.725 L1799.04 684.725 L1799.6 684.725 L1800.16 684.725 L1800.72 684.725 L1801.28 684.725 L1801.84 684.725 L1802.4 684.725 L1802.96 684.725 L1803.52 684.725 L1804.08 684.725 L1804.63 684.725 L1805.19 684.725 L1805.75 684.725 L1806.31 684.725 L1806.87 684.725 L1807.43 684.725 L1807.99 684.725 L1808.55 684.725 L1809.11 684.725 L1809.67 684.725 L1810.23 684.725 L1810.79 684.725 L1811.35 684.725 L1811.9 684.725 L1812.46 684.725 L1813.02 684.725 L1813.58 684.725 L1814.14 684.725 L1814.7 684.725 L1815.26 684.725 L1815.82 684.725 L1816.38 684.725 L1816.94 684.725 L1817.5 684.725 L1818.06 684.725 L1818.62 684.725 L1819.18 684.725 L1819.73 684.725 L1820.29 684.725 L1820.85 684.725 L1821.41 684.725 L1821.97 684.725 L1822.53 684.725 L1823.09 684.725 L1823.65 684.725 L1824.21 684.725 L1824.77 684.725 L1825.33 684.725 L1825.89 684.725 L1826.45 684.725 L1827 684.725 L1827.56 684.725 L1828.12 684.725 L1828.68 684.725 L1829.24 684.725 L1829.8 684.725 L1830.36 684.725 L1830.92 684.725 L1831.48 684.725 L1832.04 684.725 L1832.6 684.725 L1833.16 684.725 L1833.72 684.725 L1834.27 684.725 L1834.83 684.725 L1835.39 684.725 L1835.95 684.725 L1836.51 684.725 L1837.07 684.725 L1837.63 684.725 L1838.19 684.725 L1838.19 682.691 L1837.63 682.691 L1837.07 682.691 L1836.51 682.691 L1835.95 682.691 L1835.39 682.691 L1834.83 682.691 L1834.27 682.691 L1833.72 682.691 L1833.16 682.691 L1832.6 682.691 L1832.04 682.691 L1831.48 682.691 L1830.92 682.691 L1830.36 682.691 L1829.8 682.691 L1829.24 682.691 L1828.68 682.691 L1828.12 682.691 L1827.56 682.691 L1827 682.691 L1826.45 682.691 L1825.89 682.691 L1825.33 682.691 L1824.77 682.691 L1824.21 682.691 L1823.65 682.691 L1823.09 682.691 L1822.53 682.691 L1821.97 682.691 L1821.41 682.691 L1820.85 682.691 L1820.29 682.691 L1819.73 682.691 L1819.18 682.691 L1818.62 682.691 L1818.06 682.691 L1817.5 682.691 L1816.94 682.691 L1816.38 682.691 L1815.82 682.691 L1815.26 682.691 L1814.7 682.691 L1814.14 682.691 L1813.58 682.691 L1813.02 682.691 L1812.46 682.691 L1811.9 682.691 L1811.35 682.691 L1810.79 682.691 L1810.23 682.691 L1809.67 682.691 L1809.11 682.691 L1808.55 682.691 L1807.99 682.691 L1807.43 682.691 L1806.87 682.691 L1806.31 682.691 L1805.75 682.691 L1805.19 682.691 L1804.63 682.691 L1804.08 682.691 L1803.52 682.691 L1802.96 682.691 L1802.4 682.691 L1801.84 682.691 L1801.28 682.691 L1800.72 682.691 L1800.16 682.691 L1799.6 682.691 L1799.04 682.691 L1798.48 682.691 L1797.92 682.691 L1797.36 682.691 L1796.8 682.691 L1796.25 682.691 L1795.69 682.691 L1795.13 682.691 L1794.57 682.691 L1794.01 682.691 L1793.45 682.691 L1792.89 682.691 L1792.33 682.691 L1791.77 682.691 L1791.21 682.691 L1790.65 682.691 L1790.09 682.691 L1789.53 682.691 L1788.98 682.691 L1788.42 682.691 L1787.86 682.691 L1787.3 682.691 L1786.74 682.691 L1786.18 682.691 L1785.62 682.691 L1785.06 682.691 L1784.5 682.691 L1783.94 682.691 L1783.38 682.691 L1782.82 682.691 L1782.26 682.691 L1781.71 682.691 L1781.15 682.691 L1780.59 682.691 L1780.03 682.691 L1779.47 682.691 L1778.91 682.691 L1778.35 682.691 L1777.79 682.691 L1777.23 682.691 L1776.67 682.691 L1776.11 682.691 L1775.55 682.691 L1774.99 682.691 L1774.43 682.691 L1773.88 682.691 L1773.32 682.691 L1772.76 682.691 L1772.2 682.691 L1771.64 682.691 L1771.08 682.691 L1770.52 682.691 L1769.96 682.691 L1769.4 682.691 L1768.84 682.691 L1768.28 682.691 L1767.72 682.691 L1767.16 682.691 L1766.61 682.691 L1766.05 682.691 L1765.49 682.691 L1764.93 682.691 L1764.37 682.691 L1763.81 682.691 L1763.25 682.691 L1762.69 682.691 L1762.13 682.691 L1761.57 682.691 L1761.01 682.691 L1760.45 682.691 L1759.89 682.691 L1759.34 682.691 L1758.78 682.691 L1758.22 682.691 L1757.66 682.691 L1757.1 682.691 L1756.54 682.691 L1755.98 682.691 L1755.42 682.691 L1754.86 682.691 L1754.3 682.691 L1753.74 682.691 L1753.18 682.691 L1752.62 682.691 L1752.06 682.691 L1751.51 682.691 L1750.95 682.691 L1750.39 682.691 L1749.83 682.691 L1749.27 682.691 L1748.71 682.691 L1748.15 682.691 L1747.59 682.691 L1747.03 682.691 L1746.47 682.691 L1745.91 682.691 L1745.35 682.691 L1744.79 682.691 L1744.24 682.691 L1743.68 682.691 L1743.12 682.691 L1742.56 682.691 L1742 682.691 L1741.44 682.691 L1740.88 682.691 L1740.32 682.691 L1739.76 682.691 L1739.2 682.691 L1738.64 682.691 L1738.08 682.691 L1737.52 682.691 L1736.97 682.691 L1736.41 682.691 L1735.85 682.691 L1735.29 682.691 L1734.73 682.691 L1734.17 682.691 L1733.61 682.691 L1733.05 682.691 L1732.49 682.691 L1731.93 682.691 L1731.37 682.691 L1730.81 682.691 L1730.25 682.691 L1729.69 682.691 L1729.14 682.691 L1728.58 682.691 L1728.02 682.691 L1727.46 682.691 L1726.9 682.691 L1726.34 682.691 L1725.78 682.691 L1725.22 682.691 L1724.66 682.691 L1724.1 682.691 L1723.54 682.691 L1722.98 682.691 L1722.42 682.691 L1721.87 682.691 L1721.31 682.691 L1720.75 682.691 L1720.19 682.691 L1719.63 682.691 L1719.07 682.691 L1718.51 682.691 L1717.95 682.691 L1717.39 682.691 L1716.83 682.691 L1716.27 682.691 L1715.71 682.691 L1715.15 682.691 L1714.6 682.691 L1714.04 682.691 L1713.48 682.691 L1712.92 682.691 L1712.36 682.691 L1711.8 682.691 L1711.24 682.691 L1710.68 682.691 L1710.12 682.691 L1709.56 682.691 L1709 682.691 L1708.44 682.691 L1707.88 682.691 L1707.32 682.691 L1706.77 682.691 L1706.21 682.691 L1705.65 682.691 L1705.09 682.691 L1704.53 682.691 L1703.97 682.691 L1703.41 682.691 L1702.85 682.691 L1702.29 682.691 L1701.73 682.691 L1701.17 682.691 L1700.61 682.691 L1700.05 682.691 L1699.5 682.691 L1698.94 682.691 L1698.38 682.691 L1697.82 682.691 L1697.26 682.691 L1696.7 682.691 L1696.14 682.691 L1695.58 682.691 L1695.02 682.691 L1694.46 682.691 L1693.9 682.691 L1693.34 682.691 L1692.78 682.691 L1692.23 682.691 L1691.67 682.691 L1691.11 682.691 L1690.55 682.691 L1689.99 682.691 L1689.43 682.691 L1688.87 682.691 L1688.31 682.691 L1687.75 682.691 L1687.19 682.691 L1686.63 682.691 L1686.07 682.691 L1685.51 682.691 L1684.95 682.691 L1684.4 682.691 L1683.84 682.691 L1683.28 682.691 L1682.72 682.691 L1682.16 682.691 L1681.6 682.691 L1681.04 682.691 L1680.48 682.691 L1679.92 682.691 L1679.36 682.691 L1678.8 682.691 L1678.24 682.691 L1677.68 682.691 L1677.13 682.691 L1676.57 682.691 L1676.01 682.691 L1675.45 682.691 L1674.89 682.691 L1674.33 682.691 L1673.77 682.691 L1673.21 682.691 L1672.65 682.691 L1672.09 682.691 L1671.53 682.691 L1670.97 682.691 L1670.41 682.691 L1669.85 682.691 L1669.3 682.691 L1668.74 682.691 L1668.18 682.691 L1667.62 682.691 L1667.06 682.691 L1666.5 682.691 L1665.94 682.691 L1665.38 682.691 L1664.82 682.691 L1664.26 682.691 L1663.7 682.691 L1663.14 682.691 L1662.58 682.691 L1662.03 682.691 L1661.47 682.691 L1660.91 682.691 L1660.35 682.691 L1659.79 682.691 L1659.23 682.691 L1658.67 682.691 L1658.11 682.691 L1657.55 682.691 L1656.99 682.691 L1656.43 682.691 L1655.87 682.691 L1655.31 682.691 L1654.76 682.691 L1654.2 682.691 L1653.64 682.691 L1653.08 682.691 L1652.52 682.691 L1651.96 682.691 L1651.4 682.691 L1650.84 682.691 L1650.28 682.691 L1649.72 682.691 L1649.16 682.691 L1648.6 682.691 L1648.04 682.691 L1647.48 682.691 L1646.93 682.691 L1646.37 682.691 L1645.81 682.691 L1645.25 682.691 L1644.69 682.691 L1644.13 682.691 L1643.57 682.691 L1643.01 682.691 L1642.45 682.691 L1641.89 682.691 L1641.33 682.691 L1640.77 682.691 L1640.21 682.691 L1639.66 682.691 L1639.1 682.691 L1638.54 682.691 L1637.98 682.691 L1637.42 682.691 L1636.86 682.691 L1636.3 682.691 L1635.74 682.691 L1635.18 682.691 L1634.62 682.691 L1634.06 682.691 L1633.5 682.691 L1632.94 682.691 L1632.39 682.691 L1631.83 682.691 L1631.27 682.691 L1630.71 682.691 L1630.15 682.691 L1629.59 682.691 L1629.03 682.691 L1628.47 682.691 L1627.91 682.691 L1627.35 682.691 L1626.79 682.691 L1626.23 682.691 L1625.67 682.691 L1625.11 682.691 L1624.56 682.691 L1624 682.691 L1623.44 682.691 L1622.88 682.691 L1622.32 682.691 L1621.76 682.691 L1621.2 682.691 L1620.64 682.691 L1620.08 682.691 L1619.52 682.691 L1618.96 682.691 L1618.4 682.691 L1617.84 682.691 L1617.29 682.691 L1616.73 682.691 L1616.17 682.691 L1615.61 682.691 L1615.05 682.691 L1614.49 682.691 L1613.93 682.691 L1613.37 682.691 L1612.81 682.691 L1612.25 682.691 L1611.69 682.691 L1611.13 682.691 L1610.57 682.691 L1610.02 682.691 L1609.46 682.691 L1608.9 682.691 L1608.34 682.691 L1607.78 682.691 L1607.22 682.691 L1606.66 682.691 L1606.1 682.691 L1605.54 682.691 L1604.98 682.691 L1604.42 682.691 L1603.86 682.691 L1603.3 682.691 L1602.74 682.691 L1602.19 682.691 L1601.63 682.691 L1601.07 682.691 L1600.51 682.691 L1599.95 682.691 L1599.39 682.691 L1598.83 682.691 L1598.27 682.691 L1597.71 682.691 L1597.15 682.691 L1596.59 682.691 L1596.03 682.691 L1595.47 682.691 L1594.92 682.691 L1594.36 682.691 L1593.8 682.691 L1593.24 682.691 L1592.68 682.691 L1592.12 682.691 L1591.56 682.691 L1591 682.691 L1590.44 682.691 L1589.88 682.691 L1589.32 682.691 L1588.76 682.691 L1588.2 682.691 L1587.65 682.691 L1587.09 682.691 L1586.53 682.691 L1585.97 682.691 L1585.41 682.691 L1584.85 682.691 L1584.29 682.691 L1583.73 682.691 L1583.17 682.691 L1582.61 682.691 L1582.05 682.691 L1581.49 682.691 L1580.93 682.691 L1580.37 682.691 L1579.82 682.691 L1579.26 682.691 L1578.7 682.691 L1578.14 682.691 L1577.58 682.691 L1577.02 682.691 L1576.46 682.691 L1575.9 682.691 L1575.34 682.691 L1574.78 682.691 L1574.22 682.691 L1573.66 682.691 L1573.1 682.691 L1572.55 682.691 L1571.99 682.691 L1571.43 682.691 L1570.87 682.691 L1570.31 682.691 L1569.75 682.691 L1569.19 682.691 L1568.63 682.691 L1568.07 682.691 L1567.51 682.691 L1566.95 682.691 L1566.39 682.691 L1565.83 682.691 L1565.28 682.691 L1564.72 682.691 L1564.16 682.691 L1563.6 682.691 L1563.04 682.691 L1562.48 682.691 L1561.92 682.691 L1561.36 682.691 L1560.8 682.691 L1560.24 682.691 L1559.68 682.691 L1559.12 682.691 L1558.56 682.691 L1558 682.691 L1557.45 682.691 L1556.89 682.691 L1556.33 682.691 L1555.77 682.691 L1555.21 682.691 L1554.65 682.691 L1554.09 682.691 L1553.53 682.691 L1552.97 682.691 L1552.41 682.691 L1551.85 682.691 L1551.29 682.691 L1550.73 682.691 L1550.18 682.691 L1549.62 682.691 L1549.06 682.691 L1548.5 682.691 L1547.94 682.691 L1547.38 682.691 L1546.82 682.691 L1546.26 682.691 L1545.7 682.691 L1545.14 682.691 L1544.58 682.691 L1544.02 682.691 L1543.46 682.691 L1542.9 682.691 L1542.35 682.691 L1541.79 682.691 L1541.23 682.691 L1540.67 682.691 L1540.11 682.691 L1539.55 682.691 L1538.99 682.691 L1538.43 682.691 L1537.87 682.691 L1537.31 682.691 L1536.75 682.691 L1536.19 682.691 L1535.63 682.691 L1535.08 682.691 L1534.52 682.691 L1533.96 682.691 L1533.4 682.691 L1532.84 682.691 L1532.28 682.691 L1531.72 682.691 L1531.16 682.691 L1530.6 682.691 L1530.04 682.691 L1529.48 682.691 L1528.92 682.691 L1528.36 682.691 L1527.81 682.691 L1527.25 682.691 L1526.69 682.691 L1526.13 682.691 L1525.57 682.691 L1525.01 682.691 L1524.45 682.691 L1523.89 682.691 L1523.33 682.691 L1522.77 682.691 L1522.21 682.691 L1521.65 682.691 L1521.09 682.691 L1520.53 682.691 L1519.98 682.691 L1519.42 682.691 L1518.86 682.691 L1518.3 682.691 L1517.74 682.691 L1517.18 682.691 L1516.62 682.691 L1516.06 682.691 L1515.5 682.691 L1514.94 682.691 L1514.38 682.691 L1513.82 682.691 L1513.26 682.691 L1512.71 682.691 L1512.15 682.691 L1511.59 682.691 L1511.03 682.691 L1510.47 682.691 L1509.91 682.691 L1509.35 682.691 L1508.79 682.691 L1508.23 682.691 L1507.67 682.691 L1507.11 682.691 L1506.55 682.691 L1505.99 682.691 L1505.44 682.691 L1504.88 682.691 L1504.32 682.691 L1503.76 682.691 L1503.2 682.691 L1502.64 682.691 L1502.08 682.691 L1501.52 682.691 L1500.96 682.691 L1500.4 682.691 L1499.84 682.691 L1499.28 682.691 L1498.72 682.691 L1498.16 682.691 L1497.61 682.691 L1497.05 682.691 L1496.49 682.691 L1495.93 682.691 L1495.37 682.691 L1494.81 682.691 L1494.25 682.691 L1493.69 682.691 L1493.13 682.691 L1492.57 682.691 L1492.01 682.691 L1491.45 682.691 L1490.89 682.691 L1490.34 682.691 L1489.78 682.691 L1489.22 682.691 L1488.66 682.691 L1488.1 682.691 L1487.54 682.691 L1486.98 682.691 L1486.42 682.691 L1485.86 682.691 L1485.3 682.691 L1484.74 682.691 L1484.18 682.691 L1483.62 682.691 L1483.07 682.691 L1482.51 682.691 L1481.95 682.691 L1481.39 682.691 L1480.83 682.691 L1480.27 682.691 L1479.71 682.691 L1479.15 682.691 L1478.59 682.691 L1478.03 682.691 L1477.47 682.691 L1476.91 682.691 L1476.35 682.691 L1475.79 682.691 L1475.24 682.691 L1474.68 682.691 L1474.12 682.691 L1473.56 682.691 L1473 682.691 L1472.44 682.691 L1471.88 682.691 L1471.32 682.691 L1470.76 682.691 L1470.2 682.691 L1469.64 682.691 L1469.08 682.691 L1468.52 682.691 L1467.97 682.691 L1467.41 682.691 L1466.85 682.691 L1466.29 682.691 L1465.73 682.691 L1465.17 682.691 L1464.61 682.691 L1464.05 682.691 L1463.49 682.691 L1462.93 682.691 L1462.37 682.691 L1461.81 682.691 L1461.25 682.691 L1460.7 682.691 L1460.14 682.691 L1459.58 682.691 L1459.02 682.691 L1458.46 682.691 L1457.9 682.691 L1457.34 682.691 L1456.78 682.691 L1456.22 682.691 L1455.66 682.691 L1455.1 682.691 L1454.54 682.691 L1453.98 682.691 L1453.42 682.691 L1452.87 682.691 L1452.31 682.691 L1451.75 682.691 L1451.19 682.691 L1450.63 682.691 L1450.07 682.691 L1449.51 682.691 L1448.95 682.691 L1448.39 682.691 L1447.83 682.691 L1447.27 682.691 L1446.71 682.691 L1446.15 682.691 L1445.6 682.691 L1445.04 682.691 L1444.48 682.691 L1443.92 682.691 L1443.36 682.691 L1442.8 682.691 L1442.24 682.691 L1441.68 682.691 L1441.12 682.691 L1440.56 682.691 L1440 682.691 L1439.44 682.691 L1438.88 682.691 L1438.33 682.691 L1437.77 682.691 L1437.21 682.691 L1436.65 682.691 L1436.09 682.691 L1435.53 682.691 L1434.97 682.691 L1434.41 682.691 L1433.85 682.691 L1433.29 682.691 L1432.73 682.691 L1432.17 682.691 L1431.61 682.691 L1431.05 682.691 L1430.5 682.691 L1429.94 682.691 L1429.38 682.691 L1428.82 682.691 L1428.26 682.691 L1427.7 682.691 L1427.14 682.691 L1426.58 682.691 L1426.02 682.691 L1425.46 682.691 L1424.9 682.691 L1424.34 682.691 L1423.78 682.691 L1423.23 682.691 L1422.67 682.691 L1422.11 682.691 L1421.55 682.691 L1420.99 682.691 L1420.43 682.691 L1419.87 682.691 L1419.31 682.691 L1418.75 682.691 L1418.19 682.691 L1417.63 682.691 L1417.07 682.691 L1416.51 682.691 L1415.95 682.691 L1415.4 682.691 L1414.84 682.691 L1414.28 682.691 L1413.72 682.691 L1413.16 682.691 L1412.6 682.691 L1412.04 682.691 L1411.48 682.691 L1410.92 682.691 L1410.36 682.691 L1409.8 682.691 L1409.24 682.691 L1408.68 682.691 L1408.13 682.691 L1407.57 682.691 L1407.01 682.691 L1406.45 682.691 L1405.89 682.691 L1405.33 682.691 L1404.77 682.691 L1404.21 682.691 L1403.65 682.691 L1403.09 682.691 L1402.53 682.691 L1401.97 682.691 L1401.41 682.691 L1400.86 682.691 L1400.3 682.691 L1399.74 682.691 L1399.18 682.691 L1398.62 682.691 L1398.06 682.691 L1397.5 682.691 L1396.94 682.691 L1396.38 682.691 L1395.82 682.691 L1395.26 682.691 L1394.7 682.691 L1394.14 682.691 L1393.58 682.691 L1393.03 682.691 L1392.47 682.691 L1391.91 682.691 L1391.35 682.691 L1390.79 682.691 L1390.23 682.691 L1389.67 682.691 L1389.11 682.691 L1388.55 682.691 L1387.99 682.691 L1387.43 682.691 L1386.87 682.691 L1386.31 682.691 L1385.76 682.691 L1385.2 682.691 L1384.64 682.691 L1384.08 682.691 L1383.52 682.691 L1382.96 682.691 L1382.4 682.691 L1381.84 682.691 L1381.28 682.691 L1380.72 682.691 L1380.16 682.691 L1379.6 682.691 L1379.04 682.691 L1378.49 682.691 L1377.93 682.691 L1377.37 682.691 L1376.81 682.691 L1376.25 682.691 L1375.69 682.691 L1375.13 682.691 L1374.57 682.691 L1374.01 682.691 L1373.45 682.691 L1372.89 682.691 L1372.33 682.691 L1371.77 682.691 L1371.21 682.691 L1370.66 682.691 L1370.1 682.691 L1369.54 682.691 L1368.98 682.691 L1368.42 682.691 L1367.86 682.691 L1367.3 682.691 L1366.74 682.691 L1366.18 682.691 L1365.62 682.691 L1365.06 682.691 L1364.5 682.691 L1363.94 682.691 L1363.39 682.691 L1362.83 682.691 L1362.27 682.691 L1361.71 682.691 L1361.15 682.691 L1360.59 682.691 L1360.03 682.691 L1359.47 682.691 L1358.91 682.691 L1358.35 682.691 L1357.79 682.691 L1357.23 682.691 L1356.67 682.691 L1356.12 682.691 L1355.56 682.691 L1355 682.691 L1354.44 682.691 L1353.88 682.691 L1353.32 682.691 L1352.76 682.691 L1352.2 682.691 L1351.64 682.691 L1351.08 682.691 L1350.52 682.691 L1349.96 682.691 L1349.4 682.691 L1348.84 682.691 L1348.29 682.691 L1347.73 682.691 L1347.17 682.691 L1346.61 682.691 L1346.05 682.691 L1345.49 682.691 L1344.93 682.691 L1344.37 682.691 L1343.81 682.691 L1343.25 682.691 L1342.69 682.691 L1342.13 682.691 L1341.57 682.691 L1341.02 682.691 L1340.46 682.691 L1339.9 682.691 L1339.34 682.691 L1338.78 682.691 L1338.22 682.691 L1337.66 682.691 L1337.1 682.691 L1336.54 682.691 L1335.98 682.691 L1335.42 682.691 L1334.86 682.691 L1334.3 682.691 L1333.75 682.691 L1333.19 682.691 L1332.63 682.691 L1332.07 682.691 L1331.51 682.691 L1330.95 682.691 L1330.39 682.691 L1329.83 682.691 L1329.27 682.691 L1328.71 682.691 L1328.15 682.691 L1327.59 682.691 L1327.03 682.691 L1326.47 682.691 L1325.92 682.691 L1325.36 682.691 L1324.8 682.691 L1324.24 682.691 L1323.68 682.691 L1323.12 682.691 L1322.56 682.691 L1322 682.691 L1321.44 682.691 L1320.88 682.691 L1320.32 682.691 L1319.76 682.691 L1319.2 682.691 L1318.65 682.691 L1318.09 682.691 L1317.53 682.691 L1316.97 682.691 L1316.41 682.691 L1315.85 682.691 L1315.29 682.691 L1314.73 682.691 L1314.17 682.691 L1313.61 682.691 L1313.05 682.691 L1312.49 682.691 L1311.93 682.691 L1311.38 682.691 L1310.82 682.691 L1310.26 682.691 L1309.7 682.691 L1309.14 682.691 L1308.58 682.691 L1308.02 682.691 L1307.46 682.691 L1306.9 682.691 L1306.34 682.691 L1305.78 682.691 L1305.22 682.691 L1304.66 682.691 L1304.1 682.691 L1303.55 682.691 L1302.99 682.691 L1302.43 682.691 L1301.87 682.691 L1301.31 682.691 L1300.75 682.691 L1300.19 682.691 L1299.63 682.691 L1299.07 682.691 L1298.51 682.691 L1297.95 682.691 L1297.39 682.691 L1296.83 682.691 L1296.28 682.691 L1295.72 682.691 L1295.16 682.691 L1294.6 682.691 L1294.04 682.691 L1293.48 682.691 L1292.92 682.691 L1292.36 682.691 L1291.8 682.691 L1291.24 682.691 L1290.68 682.691 L1290.12 682.691 L1289.56 682.691 L1289 682.691 L1288.45 682.691 L1287.89 682.691 L1287.33 682.691 L1286.77 682.691 L1286.21 682.691 L1285.65 682.691 L1285.09 682.691 L1284.53 682.691 L1283.97 682.691 L1283.41 682.691 L1282.85 682.691 L1282.29 682.691 L1281.73 682.691 L1281.18 682.691 L1280.62 682.691 L1280.06 682.691 L1279.5 682.691 L1278.94 682.691 L1278.38 682.691 L1277.82 682.691 L1277.26 682.691 L1276.7 682.691 L1276.14 682.691 L1275.58 682.691 L1275.02 682.691 L1274.46 682.691 L1273.91 682.691 L1273.35 682.691 L1272.79 682.691 L1272.23 682.691 L1271.67 682.691 L1271.11 682.691 L1270.55 682.691 L1269.99 682.691 L1269.43 682.691 L1268.87 682.691 L1268.31 682.691 L1267.75 682.691 L1267.19 682.691 L1266.63 682.691 L1266.08 682.691 L1265.52 682.691 L1264.96 682.691 L1264.4 682.691 L1263.84 682.691 L1263.28 682.691 L1262.72 682.691 L1262.16 682.691 L1261.6 682.691 L1261.04 682.691 L1260.48 682.691 L1259.92 682.691 L1259.36 682.691 L1258.81 682.691 L1258.25 682.691 L1257.69 682.691 L1257.13 682.691 L1256.57 682.691 L1256.01 682.691 L1255.45 682.691 L1254.89 682.691 L1254.33 682.691 L1253.77 682.691 L1253.21 682.691 L1252.65 682.691 L1252.09 682.691 L1251.54 682.691 L1250.98 682.691 L1250.42 682.691 L1249.86 682.691 L1249.3 682.691 L1248.74 682.691 L1248.18 682.691 L1247.62 682.691 L1247.06 682.691 L1246.5 682.691 L1245.94 682.691 L1245.38 682.691 L1244.82 682.691 L1244.26 682.691 L1243.71 682.691 L1243.15 682.691 L1242.59 682.691 L1242.03 682.691 L1241.47 682.691 L1240.91 682.691 L1240.35 682.691 L1239.79 682.691 L1239.23 682.691 L1238.67 682.691 L1238.11 682.691 L1237.55 682.691 L1236.99 682.691 L1236.44 682.691 L1235.88 682.691 L1235.32 682.691 L1234.76 682.691 L1234.2 682.691 L1233.64 682.691 L1233.08 682.691 L1232.52 682.691 L1231.96 682.691 L1231.4 682.691 L1230.84 682.691 L1230.28 682.691 L1229.72 682.691 L1229.17 682.691 L1228.61 682.691 L1228.05 682.691 L1227.49 682.691 L1226.93 682.691 L1226.37 682.691 L1225.81 682.691 L1225.25 682.691 L1224.69 682.691 L1224.13 682.691 L1223.57 682.691 L1223.01 682.691 L1222.45 682.691 L1221.89 682.691 L1221.34 682.691 L1220.78 682.691 L1220.22 682.691 L1219.66 682.691 L1219.1 682.691 L1218.54 682.691 L1217.98 682.691 L1217.42 682.691 L1216.86 682.691 L1216.3 682.691 L1215.74 682.691 L1215.18 682.691 L1214.62 682.691 L1214.07 682.691 L1213.51 682.691 L1212.95 682.691 L1212.39 682.691 L1211.83 682.691 L1211.27 682.691 L1210.71 682.691 L1210.15 682.691 L1209.59 682.691 L1209.03 682.691 L1208.47 682.691 L1207.91 682.691 L1207.35 682.691 L1206.8 682.691 L1206.24 682.691 L1205.68 682.691 L1205.12 682.691 L1204.56 682.691 L1204 682.691 L1203.44 682.691 L1202.88 682.691 L1202.32 682.691 L1201.76 682.691 L1201.2 682.691 L1200.64 682.691 L1200.08 682.691 L1199.52 682.691 L1198.97 682.691 L1198.41 682.691 L1197.85 682.691 L1197.29 682.691 L1196.73 682.691 L1196.17 682.691 L1195.61 682.691 L1195.05 682.691 L1194.49 682.691 L1193.93 682.691 L1193.37 682.691 L1192.81 682.691 L1192.25 682.691 L1191.7 682.691 L1191.14 682.691 L1190.58 682.691 L1190.02 682.691 L1189.46 682.691 L1188.9 682.691 L1188.34 682.691 L1187.78 682.691 L1187.22 682.691 L1186.66 682.691 L1186.1 682.691 L1185.54 682.691 L1184.98 682.691 L1184.43 682.691 L1183.87 682.691 L1183.31 682.691 L1182.75 682.691 L1182.19 682.691 L1181.63 682.691 L1181.07 682.691 L1180.51 682.691 L1179.95 682.691 L1179.39 682.691 L1178.83 682.691 L1178.27 682.691 L1177.71 682.691 L1177.15 682.691 L1176.6 682.691 L1176.04 682.691 L1175.48 682.691 L1174.92 682.691 L1174.36 682.691 L1173.8 682.691 L1173.24 682.691 L1172.68 682.691 L1172.12 682.691 L1171.56 682.691 L1171 682.691 L1170.44 682.691 L1169.88 682.691 L1169.33 682.691 L1168.77 682.691 L1168.21 682.691 L1167.65 682.691 L1167.09 682.691 L1166.53 682.691 L1165.97 682.691 L1165.41 682.691 L1164.85 682.691 L1164.29 682.691 L1163.73 682.691 L1163.17 682.691 L1162.61 682.691 L1162.05 682.691 L1161.5 682.691 L1160.94 682.691 L1160.38 682.691 L1159.82 682.691 L1159.26 682.691 L1158.7 682.691 L1158.14 682.691 L1157.58 682.691 L1157.02 682.691 L1156.46 682.691 L1155.9 682.691 L1155.34 682.691 L1154.78 682.691 L1154.23 682.691 L1153.67 682.691 L1153.11 682.691 L1152.55 682.691 L1151.99 682.691 L1151.43 682.691 L1150.87 682.691 L1150.31 682.691 L1149.75 682.691 L1149.19 682.691 L1148.63 682.691 L1148.07 682.691 L1147.51 682.691 L1146.96 682.691 L1146.4 682.691 L1145.84 682.691 L1145.28 682.691 L1144.72 682.691 L1144.16 682.691 L1143.6 682.691 L1143.04 682.691 L1142.48 682.691 L1141.92 682.691 L1141.36 682.691 L1140.8 682.691 L1140.24 682.691 L1139.68 682.691 L1139.13 682.691 L1138.57 682.691 L1138.01 682.691 L1137.45 682.691 L1136.89 682.691 L1136.33 682.691 L1135.77 682.691 L1135.21 682.691 L1134.65 682.691 L1134.09 682.691 L1133.53 682.691 L1132.97 682.691 L1132.41 682.691 L1131.86 682.691 L1131.3 682.691 L1130.74 682.691 L1130.18 682.691 L1129.62 682.691 L1129.06 682.691 L1128.5 682.691 L1127.94 682.691 L1127.38 682.691 L1126.82 682.691 L1126.26 682.691 L1125.7 682.691 L1125.14 682.691 L1124.59 682.691 L1124.03 682.691 L1123.47 682.691 L1122.91 682.691 L1122.35 682.691 L1121.79 682.691 L1121.23 682.691 L1120.67 682.691 L1120.11 682.691 L1119.55 682.691 L1118.99 682.691 L1118.43 682.691 L1117.87 682.691 L1117.31 682.691 L1116.76 682.691 L1116.2 682.691 L1115.64 682.691 L1115.08 682.691 L1114.52 682.691 L1113.96 682.691 L1113.4 682.691 L1112.84 682.691 L1112.28 682.691 L1111.72 682.691 L1111.16 682.691 L1110.6 682.691 L1110.04 682.691 L1109.49 682.691 L1108.93 682.691 L1108.37 682.691 L1107.81 682.691 L1107.25 682.691 L1106.69 682.691 L1106.13 682.691 L1105.57 682.691 L1105.01 682.691 L1104.45 682.691 L1103.89 682.691 L1103.33 682.691 L1102.77 682.691 L1102.22 682.691 L1101.66 682.691 L1101.1 682.691 L1100.54 682.691 L1099.98 682.691 L1099.42 682.691 L1098.86 682.691 L1098.3 682.691 L1097.74 682.691 L1097.18 682.691 L1096.62 682.691 L1096.06 682.691 L1095.5 682.691 L1094.94 682.691 L1094.39 682.691 L1093.83 682.691 L1093.27 682.691 L1092.71 682.691 L1092.15 682.691 L1091.59 682.691 L1091.03 682.691 L1090.47 682.691 L1089.91 682.691 L1089.35 682.691 L1088.79 682.691 L1088.23 682.691 L1087.67 682.691 L1087.12 682.691 L1086.56 682.691 L1086 682.691 L1085.44 682.691 L1084.88 682.691 L1084.32 682.691 L1083.76 682.691 L1083.2 682.691 L1082.64 682.691 L1082.08 682.691 L1081.52 682.691 L1080.96 682.691 L1080.4 682.691 L1079.85 682.691 L1079.29 682.691 L1078.73 682.691 L1078.17 682.691 L1077.61 682.691 L1077.05 682.691 L1076.49 682.691 L1075.93 682.691 L1075.37 682.691 L1074.81 682.691 L1074.25 682.691 L1073.69 682.691 L1073.13 682.691 L1072.57 682.691 L1072.02 682.691 L1071.46 682.691 L1070.9 682.691 L1070.34 682.691 L1069.78 682.691 L1069.22 682.691 L1068.66 682.691 L1068.1 682.691 L1067.54 682.691 L1066.98 682.691 L1066.42 682.691 L1065.86 682.691 L1065.3 682.691 L1064.75 682.691 L1064.19 682.691 L1063.63 682.691 L1063.07 682.691 L1062.51 682.691 L1061.95 682.691 L1061.39 682.691 L1060.83 682.691 L1060.27 682.691 L1059.71 682.691 L1059.15 682.691 L1058.59 682.691 L1058.03 682.691 L1057.48 682.691 L1056.92 682.691 L1056.36 682.691 L1055.8 682.691 L1055.24 682.691 L1054.68 682.691 L1054.12 682.691 L1053.56 682.691 L1053 682.691 L1052.44 682.691 L1051.88 682.691 L1051.32 682.691 L1050.76 682.691 L1050.2 682.691 L1049.65 682.691 L1049.09 682.691 L1048.53 682.691 L1047.97 682.691 L1047.41 682.691 L1046.85 682.691 L1046.29 682.691 L1045.73 682.691 L1045.17 682.691 L1044.61 682.691 L1044.05 682.691 L1043.49 682.691 L1042.93 682.691 L1042.38 682.691 L1041.82 682.691 L1041.26 682.691 L1040.7 682.691 L1040.14 682.691 L1039.58 682.691 L1039.02 682.691 L1038.46 682.691 L1037.9 682.691 L1037.34 682.691 L1036.78 682.691 L1036.22 682.691 L1035.66 682.691 L1035.1 682.691 L1034.55 682.691 L1033.99 682.691 L1033.43 682.691 L1032.87 682.691 L1032.31 682.691 L1031.75 682.691 L1031.19 682.691 L1030.63 682.691 L1030.07 682.691 L1029.51 682.691 L1028.95 682.691 L1028.39 682.691 L1027.83 682.691 L1027.28 682.691 L1026.72 682.691 L1026.16 682.691 L1025.6 682.691 L1025.04 682.691 L1024.48 682.691 L1023.92 682.691 L1023.36 682.691 L1022.8 682.691 L1022.24 682.691 L1021.68 682.691 L1021.12 682.691 L1020.56 682.691 L1020.01 682.691 L1019.45 682.691 L1018.89 682.691 L1018.33 682.691 L1017.77 682.691 L1017.21 682.691 L1016.65 682.691 L1016.09 682.691 L1015.53 682.691 L1014.97 682.691 L1014.41 682.691 L1013.85 682.691 L1013.29 682.691 L1012.73 682.691 L1012.18 682.691 L1011.62 682.691 L1011.06 682.691 L1010.5 682.691 L1009.94 682.691 L1009.38 682.691 L1008.82 682.691 L1008.26 682.691 L1007.7 682.691 L1007.14 682.691 L1006.58 682.691 L1006.02 682.691 L1005.46 682.691 L1004.91 682.691 L1004.35 682.691 L1003.79 682.691 L1003.23 682.691 L1002.67 682.691 L1002.11 682.691 L1001.55 682.691 L1000.99 682.691 L1000.43 682.691 L999.872 682.691 L999.313 682.691 L998.754 682.691 L998.194 682.691 L997.635 682.691 L997.076 682.691 L996.517 682.691 L995.957 682.691 L995.398 682.691 L994.839 682.691 L994.28 682.691 L993.72 682.691 L993.161 682.691 L992.602 682.691 L992.043 682.691 L991.483 682.691 L990.924 682.691 L990.365 682.691 L989.806 682.691 L989.246 682.691 L988.687 682.691 L988.128 682.691 L987.569 682.691 L987.009 682.691 L986.45 682.691 L985.891 682.691 L985.332 682.691 L984.772 682.691 L984.213 682.691 L983.654 682.691 L983.095 682.691 L982.535 682.691 L981.976 682.691 L981.417 682.691 L980.858 682.691 L980.298 682.691 L979.739 682.691 L979.18 682.691 L978.621 682.691 L978.061 682.691 L977.502 682.691 L976.943 682.691 L976.384 682.691 L975.824 682.691 L975.265 682.691 L974.706 682.691 L974.147 682.691 L973.587 682.691 L973.028 682.691 L972.469 682.691 L971.91 682.691 L971.35 682.691 L970.791 682.691 L970.232 682.691 L969.673 682.691 L969.113 682.691 L968.554 682.691 L967.995 682.691 L967.436 682.691 L966.876 682.691 L966.317 682.691 L965.758 682.691 L965.199 682.691 L964.639 682.691 L964.08 682.691 L963.521 682.691 L962.962 682.691 L962.402 682.691 L961.843 682.691 L961.284 682.691 L960.725 682.691 L960.165 682.691 L959.606 682.691 L959.047 682.691 L958.488 682.691 L957.928 682.691 L957.369 682.691 L956.81 682.691 L956.251 682.691 L955.691 682.691 L955.132 682.691 L954.573 682.691 L954.014 682.691 L953.454 682.691 L952.895 682.691 L952.336 682.691 L951.777 682.691 L951.217 682.691 L950.658 682.691 L950.099 682.691 L949.54 682.691 L948.98 682.691 L948.421 682.691 L947.862 682.691 L947.303 682.691 L946.743 682.691 L946.184 682.691 L945.625 682.691 L945.066 682.691 L944.506 682.691 L943.947 682.691 L943.388 682.691 L942.829 682.691 L942.269 682.691 L941.71 682.691 L941.151 682.691 L940.592 682.691 L940.032 682.691 L939.473 682.691 L938.914 682.691 L938.355 682.691 L937.795 682.691 L937.236 682.691 L936.677 682.691 L936.118 682.691 L935.558 682.691 L934.999 682.691 L934.44 682.691 L933.881 682.691 L933.321 682.691 L932.762 682.691 L932.203 682.691 L931.644 682.691 L931.084 682.691 L930.525 682.691 L929.966 682.691 L929.406 682.691 L928.847 682.691 L928.288 682.691 L927.729 682.691 L927.169 682.691 L926.61 682.691 L926.051 682.691 L925.492 682.691 L924.932 682.691 L924.373 682.691 L923.814 682.691 L923.255 682.691 L922.695 682.691 L922.136 682.691 L921.577 682.691 L921.018 682.691 L920.458 682.691 L919.899 682.691 L919.34 682.691 L918.781 682.691 L918.221 682.691 L917.662 682.691 L917.103 682.691 L916.544 682.691 L915.984 682.691 L915.425 682.691 L914.866 682.691 L914.307 682.691 L913.747 682.691 L913.188 682.691 L912.629 682.691 L912.07 682.691 L911.51 682.691 L910.951 682.691 L910.392 682.691 L909.833 682.691 L909.273 682.691 L908.714 682.691 L908.155 682.691 L907.596 682.691 L907.036 682.691 L906.477 682.691 L905.918 682.691 L905.359 682.691 L904.799 682.691 L904.24 682.691 L903.681 682.691 L903.122 682.691 L902.562 682.691 L902.003 682.691 L901.444 682.691 L900.885 682.691 L900.325 682.691 L899.766 682.691 L899.207 682.691 L898.648 682.691 L898.088 682.691 L897.529 682.691 L896.97 682.691 L896.411 682.691 L895.851 682.691 L895.292 682.691 L894.733 682.691 L894.174 682.691 L893.614 682.691 L893.055 682.691 L892.496 682.691 L891.937 682.691 L891.377 682.691 L890.818 682.691 L890.259 682.691 L889.7 682.691 L889.14 682.691 L888.581 682.691 L888.022 682.691 L887.463 682.691 L886.903 682.691 L886.344 682.691 L885.785 682.691 L885.226 682.691 L884.666 682.691 L884.107 682.691 L883.548 682.691 L882.989 682.691 L882.429 682.691 L881.87 682.691 L881.311 682.691 L880.752 682.691 L880.192 682.691 L879.633 682.691 L879.074 682.691 L878.515 682.691 L877.955 682.691 L877.396 682.691 L876.837 682.691 L876.278 682.691 L875.718 682.691 L875.159 682.691 L874.6 682.691 L874.041 682.691 L873.481 682.691 L872.922 682.691 L872.363 682.691 L871.804 682.691 L871.244 682.691 L870.685 682.691 L870.126 682.691 L869.567 682.691 L869.007 682.691 L868.448 682.691 L867.889 682.691 L867.33 682.691 L866.77 682.691 L866.211 682.691 L865.652 682.691 L865.093 682.691 L864.533 682.691 L863.974 682.691 L863.415 682.691 L862.856 682.691 L862.296 682.691 L861.737 682.691 L861.178 682.691 L860.619 682.691 L860.059 682.691 L859.5 682.691 L858.941 682.691 L858.382 682.691 L857.822 682.691 L857.263 682.691 L856.704 682.691 L856.145 682.691 L855.585 682.691 L855.026 682.691 L854.467 682.691 L853.908 682.691 L853.348 682.691 L852.789 682.691 L852.23 682.691 L851.671 682.691 L851.111 682.691 L850.552 682.691 L849.993 682.691 L849.434 682.691 L848.874 682.691 L848.315 682.691 L847.756 682.691 L847.197 682.691 L846.637 682.691 L846.078 682.691 L845.519 682.691 L844.96 682.691 L844.4 682.691 L843.841 682.691 L843.282 682.691 L842.723 682.691 L842.163 682.691 L841.604 682.691 L841.045 682.691 L840.486 682.691 L839.926 682.691 L839.367 682.691 L838.808 682.691 L838.249 682.691 L837.689 682.691 L837.13 682.691 L836.571 682.691 L836.012 682.691 L835.452 682.691 L834.893 682.691 L834.334 682.691 L833.775 682.691 L833.215 682.691 L832.656 682.691 L832.097 682.691 L831.538 682.691 L830.978 682.691 L830.419 682.691 L829.86 682.691 L829.301 682.691 L828.741 682.691 L828.182 682.691 L827.623 682.691 L827.064 682.691 L826.504 682.691 L825.945 682.691 L825.386 682.691 L824.827 682.691 L824.267 682.691 L823.708 682.691 L823.149 682.691 L822.59 682.691 L822.03 682.691 L821.471 682.691 L820.912 682.691 L820.353 682.691 L819.793 682.691 L819.234 682.691 L818.675 682.691 L818.116 682.691 L817.556 682.691 L816.997 682.691 L816.438 682.691 L815.879 682.691 L815.319 682.691 L814.76 682.691 L814.201 682.691 L813.642 682.691 L813.082 682.691 L812.523 682.691 L811.964 682.691 L811.405 682.691 L810.845 682.691 L810.286 682.691 L809.727 682.691 L809.168 682.691 L808.608 682.691 L808.049 682.691 L807.49 682.691 L806.931 682.691 L806.371 682.691 L805.812 682.691 L805.253 682.691 L804.693 682.691 L804.134 682.691 L803.575 682.691 L803.016 682.691 L802.456 682.691 L801.897 682.691 L801.338 682.691 L800.779 682.691 L800.219 682.691 L799.66 682.691 L799.101 682.691 L798.542 682.691 L797.982 682.691 L797.423 682.691 L796.864 682.691 L796.305 682.691 L795.745 682.691 L795.186 682.691 L794.627 682.691 L794.068 682.691 L793.508 682.691 L792.949 682.691 L792.39 682.691 L791.831 682.691 L791.271 682.691 L790.712 682.691 L790.153 682.691 L789.594 682.691 L789.034 682.691 L788.475 682.691 L787.916 682.691 L787.357 682.691 L786.797 682.691 L786.238 682.691 L785.679 682.691 L785.12 682.691 L784.56 682.691 L784.001 682.691 L783.442 682.691 L782.883 682.691 L782.323 682.691 L781.764 682.691 L781.205 682.691 L780.646 682.691 L780.086 682.691 L779.527 682.691 L778.968 682.691 L778.409 682.691 L777.849 682.691 L777.29 682.691 L776.731 682.691 L776.172 682.691 L775.612 682.691 L775.053 682.691 L774.494 682.691 L773.935 682.691 L773.375 682.691 L772.816 682.691 L772.257 682.691 L771.698 682.691 L771.138 682.691 L770.579 682.691 L770.02 682.691 L769.461 682.691 L768.901 682.691 L768.342 682.691 L767.783 682.691 L767.224 682.691 L766.664 682.691 L766.105 682.691 L765.546 682.691 L764.987 682.691 L764.427 682.691 L763.868 682.691 L763.309 682.691 L762.75 682.691 L762.19 682.691 L761.631 682.691 L761.072 682.691 L760.513 682.691 L759.953 682.691 L759.394 682.691 L758.835 682.691 L758.276 682.691 L757.716 682.691 L757.157 682.691 L756.598 682.691 L756.039 682.691 L755.479 682.691 L754.92 682.691 L754.361 682.691 L753.802 682.691 L753.242 682.691 L752.683 682.691 L752.124 682.691 L751.565 682.691 L751.005 682.691 L750.446 682.691 L749.887 682.691 L749.328 682.691 L748.768 682.691 L748.209 682.691 L747.65 682.691 L747.091 682.691 L746.531 682.691 L745.972 682.691 L745.413 682.691 L744.854 682.691 L744.294 682.691 L743.735 682.691 L743.176 682.691 L742.617 682.691 L742.057 682.691 L741.498 682.691 L740.939 682.691 L740.38 682.691 L739.82 682.691 L739.261 682.691 L738.702 682.691 L738.143 682.691 L737.583 682.691 L737.024 682.691 L736.465 682.691 L735.906 682.691 L735.346 682.691 L734.787 682.691 L734.228 682.691 L733.669 682.691 L733.109 682.691 L732.55 682.691 L731.991 682.691 L731.432 682.691 L730.872 682.691 L730.313 682.691 L729.754 682.691 L729.195 682.691 L728.635 682.691 L728.076 682.691 L727.517 682.691 L726.958 682.691 L726.398 682.691 L725.839 682.691 L725.28 682.691 L724.721 682.691 L724.161 682.691 L723.602 682.691 L723.043 682.691 L722.484 682.691 L721.924 682.691 L721.365 682.691 L720.806 682.691 L720.247 682.691  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip863)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.664 720.806,683.664 721.365,683.664 721.924,683.664 722.484,683.664 723.043,683.664 723.602,683.664 724.161,683.664 724.721,683.664 725.28,683.664 725.839,683.664 726.398,683.664 726.958,683.664 727.517,683.664 728.076,683.664 728.635,683.664 729.195,683.664 729.754,683.664 730.313,683.664 730.872,683.664 731.432,683.664 731.991,683.664 732.55,683.664 733.109,683.664 733.669,683.664 734.228,683.664 734.787,683.664 735.346,683.664 735.906,683.664 736.465,683.664 737.024,683.664 737.583,683.664 738.143,683.664 738.702,683.664 739.261,683.664 739.82,683.664 740.38,683.664 740.939,683.664 741.498,683.664 742.057,683.664 742.617,683.664 743.176,683.664 743.735,683.664 744.294,683.664 744.854,683.664 745.413,683.664 745.972,683.664 746.531,683.664 747.091,683.664 747.65,683.664 748.209,683.664 748.768,683.664 749.328,683.664 749.887,683.664 750.446,683.664 751.005,683.664 751.565,683.664 752.124,683.664 752.683,683.664 753.242,683.664 753.802,683.664 754.361,683.664 754.92,683.664 755.479,683.664 756.039,683.664 756.598,683.664 757.157,683.664 757.716,683.664 758.276,683.664 758.835,683.664 759.394,683.664 759.953,683.664 760.513,683.664 761.072,683.664 761.631,683.664 762.19,683.664 762.75,683.664 763.309,683.664 763.868,683.664 764.427,683.664 764.987,683.664 765.546,683.664 766.105,683.664 766.664,683.664 767.224,683.664 767.783,683.664 768.342,683.664 768.901,683.664 769.461,683.664 770.02,683.664 770.579,683.664 771.138,683.664 771.698,683.664 772.257,683.664 772.816,683.664 773.375,683.664 773.935,683.664 774.494,683.664 775.053,683.664 775.612,683.664 776.172,683.664 776.731,683.664 777.29,683.664 777.849,683.664 778.409,683.664 778.968,683.664 779.527,683.664 780.086,683.664 780.646,683.664 781.205,683.664 781.764,683.664 782.323,683.664 782.883,683.664 783.442,683.664 784.001,683.664 784.56,683.664 785.12,683.664 785.679,683.664 786.238,683.664 786.797,683.664 787.357,683.664 787.916,683.664 788.475,683.664 789.034,683.664 789.594,683.664 790.153,683.664 790.712,683.664 791.271,683.664 791.831,683.664 792.39,683.664 792.949,683.664 793.508,683.664 794.068,683.664 794.627,683.664 795.186,683.664 795.745,683.664 796.305,683.664 796.864,683.664 797.423,683.664 797.982,683.664 798.542,683.664 799.101,683.664 799.66,683.664 800.219,683.664 800.779,683.664 801.338,683.664 801.897,683.664 802.456,683.664 803.016,683.664 803.575,683.664 804.134,683.664 804.693,683.664 805.253,683.664 805.812,683.664 806.371,683.664 806.931,683.664 807.49,683.664 808.049,683.664 808.608,683.664 809.168,683.664 809.727,683.664 810.286,683.664 810.845,683.664 811.405,683.664 811.964,683.664 812.523,683.664 813.082,683.664 813.642,683.664 814.201,683.664 814.76,683.664 815.319,683.664 815.879,683.664 816.438,683.664 816.997,683.664 817.556,683.664 818.116,683.664 818.675,683.664 819.234,683.664 819.793,683.664 820.353,683.664 820.912,683.664 821.471,683.664 822.03,683.664 822.59,683.664 823.149,683.664 823.708,683.664 824.267,683.664 824.827,683.664 825.386,683.664 825.945,683.664 826.504,683.664 827.064,683.664 827.623,683.664 828.182,683.664 828.741,683.664 829.301,683.664 829.86,683.664 830.419,683.664 830.978,683.664 831.538,683.664 832.097,683.664 832.656,683.664 833.215,683.664 833.775,683.664 834.334,683.664 834.893,683.664 835.452,683.664 836.012,683.664 836.571,683.664 837.13,683.664 837.689,683.664 838.249,683.664 838.808,683.664 839.367,683.664 839.926,683.664 840.486,683.664 841.045,683.664 841.604,683.664 842.163,683.664 842.723,683.664 843.282,683.664 843.841,683.664 844.4,683.664 844.96,683.664 845.519,683.664 846.078,683.664 846.637,683.664 847.197,683.664 847.756,683.664 848.315,683.664 848.874,683.664 849.434,683.664 849.993,683.664 850.552,683.664 851.111,683.664 851.671,683.664 852.23,683.664 852.789,683.664 853.348,683.664 853.908,683.664 854.467,683.664 855.026,683.664 855.585,683.664 856.145,683.664 856.704,683.664 857.263,683.664 857.822,683.664 858.382,683.664 858.941,683.664 859.5,683.664 860.059,683.664 860.619,683.664 861.178,683.664 861.737,683.664 862.296,683.664 862.856,683.664 863.415,683.664 863.974,683.664 864.533,683.664 865.093,683.664 865.652,683.664 866.211,683.664 866.77,683.664 867.33,683.664 867.889,683.664 868.448,683.664 869.007,683.664 869.567,683.664 870.126,683.664 870.685,683.664 871.244,683.664 871.804,683.664 872.363,683.664 872.922,683.664 873.481,683.664 874.041,683.664 874.6,683.664 875.159,683.664 875.718,683.664 876.278,683.664 876.837,683.664 877.396,683.664 877.955,683.664 878.515,683.664 879.074,683.664 879.633,683.664 880.192,683.664 880.752,683.664 881.311,683.664 881.87,683.664 882.429,683.664 882.989,683.664 883.548,683.664 884.107,683.664 884.666,683.664 885.226,683.664 885.785,683.664 886.344,683.664 886.903,683.664 887.463,683.664 888.022,683.664 888.581,683.664 889.14,683.664 889.7,683.664 890.259,683.664 890.818,683.664 891.377,683.664 891.937,683.664 892.496,683.664 893.055,683.664 893.614,683.664 894.174,683.664 894.733,683.664 895.292,683.664 895.851,683.664 896.411,683.664 896.97,683.664 897.529,683.664 898.088,683.664 898.648,683.664 899.207,683.664 899.766,683.664 900.325,683.664 900.885,683.664 901.444,683.664 902.003,683.664 902.562,683.664 903.122,683.664 903.681,683.664 904.24,683.664 904.799,683.664 905.359,683.664 905.918,683.664 906.477,683.664 907.036,683.664 907.596,683.664 908.155,683.664 908.714,683.664 909.273,683.664 909.833,683.664 910.392,683.664 910.951,683.664 911.51,683.664 912.07,683.664 912.629,683.664 913.188,683.664 913.747,683.664 914.307,683.664 914.866,683.664 915.425,683.664 915.984,683.664 916.544,683.664 917.103,683.664 917.662,683.664 918.221,683.664 918.781,683.664 919.34,683.664 919.899,683.664 920.458,683.664 921.018,683.664 921.577,683.664 922.136,683.664 922.695,683.664 923.255,683.664 923.814,683.664 924.373,683.664 924.932,683.664 925.492,683.664 926.051,683.664 926.61,683.664 927.169,683.664 927.729,683.664 928.288,683.664 928.847,683.664 929.406,683.664 929.966,683.664 930.525,683.664 931.084,683.664 931.644,683.664 932.203,683.664 932.762,683.664 933.321,683.664 933.881,683.664 934.44,683.664 934.999,683.664 935.558,683.664 936.118,683.664 936.677,683.664 937.236,683.664 937.795,683.664 938.355,683.664 938.914,683.664 939.473,683.664 940.032,683.664 940.592,683.664 941.151,683.664 941.71,683.664 942.269,683.664 942.829,683.664 943.388,683.664 943.947,683.664 944.506,683.664 945.066,683.664 945.625,683.664 946.184,683.664 946.743,683.664 947.303,683.664 947.862,683.664 948.421,683.664 948.98,683.664 949.54,683.664 950.099,683.664 950.658,683.664 951.217,683.664 951.777,683.664 952.336,683.664 952.895,683.664 953.454,683.664 954.014,683.664 954.573,683.664 955.132,683.664 955.691,683.664 956.251,683.664 956.81,683.664 957.369,683.664 957.928,683.664 958.488,683.664 959.047,683.664 959.606,683.664 960.165,683.664 960.725,683.664 961.284,683.664 961.843,683.664 962.402,683.664 962.962,683.664 963.521,683.664 964.08,683.664 964.639,683.664 965.199,683.664 965.758,683.664 966.317,683.664 966.876,683.664 967.436,683.664 967.995,683.664 968.554,683.664 969.113,683.664 969.673,683.664 970.232,683.664 970.791,683.664 971.35,683.664 971.91,683.664 972.469,683.664 973.028,683.664 973.587,683.664 974.147,683.664 974.706,683.664 975.265,683.664 975.824,683.664 976.384,683.664 976.943,683.664 977.502,683.664 978.061,683.664 978.621,683.664 979.18,683.664 979.739,683.664 980.298,683.664 980.858,683.664 981.417,683.664 981.976,683.664 982.535,683.664 983.095,683.664 983.654,683.664 984.213,683.664 984.772,683.664 985.332,683.664 985.891,683.664 986.45,683.664 987.009,683.664 987.569,683.664 988.128,683.664 988.687,683.664 989.246,683.664 989.806,683.664 990.365,683.664 990.924,683.664 991.483,683.664 992.043,683.664 992.602,683.664 993.161,683.664 993.72,683.664 994.28,683.664 994.839,683.664 995.398,683.664 995.957,683.664 996.517,683.664 997.076,683.664 997.635,683.664 998.194,683.664 998.754,683.664 999.313,683.664 999.872,683.664 1000.43,683.664 1000.99,683.664 1001.55,683.664 1002.11,683.664 1002.67,683.664 1003.23,683.664 1003.79,683.664 1004.35,683.664 1004.91,683.664 1005.46,683.664 1006.02,683.664 1006.58,683.664 1007.14,683.664 1007.7,683.664 1008.26,683.664 1008.82,683.664 1009.38,683.664 1009.94,683.664 1010.5,683.664 1011.06,683.664 1011.62,683.664 1012.18,683.664 1012.73,683.664 1013.29,683.664 1013.85,683.664 1014.41,683.664 1014.97,683.664 1015.53,683.664 1016.09,683.664 1016.65,683.664 1017.21,683.664 1017.77,683.664 1018.33,683.664 1018.89,683.664 1019.45,683.664 1020.01,683.664 1020.56,683.664 1021.12,683.664 1021.68,683.664 1022.24,683.664 1022.8,683.664 1023.36,683.664 1023.92,683.664 1024.48,683.664 1025.04,683.664 1025.6,683.664 1026.16,683.664 1026.72,683.664 1027.28,683.664 1027.83,683.664 1028.39,683.664 1028.95,683.664 1029.51,683.664 1030.07,683.664 1030.63,683.664 1031.19,683.664 1031.75,683.664 1032.31,683.664 1032.87,683.664 1033.43,683.664 1033.99,683.664 1034.55,683.664 1035.1,683.664 1035.66,683.664 1036.22,683.664 1036.78,683.664 1037.34,683.664 1037.9,683.664 1038.46,683.664 1039.02,683.664 1039.58,683.664 1040.14,683.664 1040.7,683.664 1041.26,683.664 1041.82,683.664 1042.38,683.664 1042.93,683.664 1043.49,683.664 1044.05,683.664 1044.61,683.664 1045.17,683.664 1045.73,683.664 1046.29,683.664 1046.85,683.664 1047.41,683.664 1047.97,683.664 1048.53,683.664 1049.09,683.664 1049.65,683.664 1050.2,683.664 1050.76,683.664 1051.32,683.664 1051.88,683.664 1052.44,683.664 1053,683.664 1053.56,683.664 1054.12,683.664 1054.68,683.664 1055.24,683.664 1055.8,683.664 1056.36,683.664 1056.92,683.664 1057.48,683.664 1058.03,683.664 1058.59,683.664 1059.15,683.664 1059.71,683.664 1060.27,683.664 1060.83,683.664 1061.39,683.664 1061.95,683.664 1062.51,683.664 1063.07,683.664 1063.63,683.664 1064.19,683.664 1064.75,683.664 1065.3,683.664 1065.86,683.664 1066.42,683.664 1066.98,683.664 1067.54,683.664 1068.1,683.664 1068.66,683.664 1069.22,683.664 1069.78,683.664 1070.34,683.664 1070.9,683.664 1071.46,683.664 1072.02,683.664 1072.57,683.664 1073.13,683.664 1073.69,683.664 1074.25,683.664 1074.81,683.664 1075.37,683.664 1075.93,683.664 1076.49,683.664 1077.05,683.664 1077.61,683.664 1078.17,683.664 1078.73,683.664 1079.29,683.664 1079.85,683.664 1080.4,683.664 1080.96,683.664 1081.52,683.664 1082.08,683.664 1082.64,683.664 1083.2,683.664 1083.76,683.664 1084.32,683.664 1084.88,683.664 1085.44,683.664 1086,683.664 1086.56,683.664 1087.12,683.664 1087.67,683.664 1088.23,683.664 1088.79,683.664 1089.35,683.664 1089.91,683.664 1090.47,683.664 1091.03,683.664 1091.59,683.664 1092.15,683.664 1092.71,683.664 1093.27,683.664 1093.83,683.664 1094.39,683.664 1094.94,683.664 1095.5,683.664 1096.06,683.664 1096.62,683.664 1097.18,683.664 1097.74,683.664 1098.3,683.664 1098.86,683.664 1099.42,683.664 1099.98,683.664 1100.54,683.664 1101.1,683.664 1101.66,683.664 1102.22,683.664 1102.77,683.664 1103.33,683.664 1103.89,683.664 1104.45,683.664 1105.01,683.664 1105.57,683.664 1106.13,683.664 1106.69,683.664 1107.25,683.664 1107.81,683.664 1108.37,683.664 1108.93,683.664 1109.49,683.664 1110.04,683.664 1110.6,683.664 1111.16,683.664 1111.72,683.664 1112.28,683.664 1112.84,683.664 1113.4,683.664 1113.96,683.664 1114.52,683.664 1115.08,683.664 1115.64,683.664 1116.2,683.664 1116.76,683.664 1117.31,683.664 1117.87,683.664 1118.43,683.664 1118.99,683.664 1119.55,683.664 1120.11,683.664 1120.67,683.664 1121.23,683.664 1121.79,683.664 1122.35,683.664 1122.91,683.664 1123.47,683.664 1124.03,683.664 1124.59,683.664 1125.14,683.664 1125.7,683.664 1126.26,683.664 1126.82,683.664 1127.38,683.664 1127.94,683.664 1128.5,683.664 1129.06,683.664 1129.62,683.664 1130.18,683.664 1130.74,683.664 1131.3,683.664 1131.86,683.664 1132.41,683.664 1132.97,683.664 1133.53,683.664 1134.09,683.664 1134.65,683.664 1135.21,683.664 1135.77,683.664 1136.33,683.664 1136.89,683.664 1137.45,683.664 1138.01,683.664 1138.57,683.664 1139.13,683.664 1139.68,683.664 1140.24,683.664 1140.8,683.664 1141.36,683.664 1141.92,683.664 1142.48,683.664 1143.04,683.664 1143.6,683.664 1144.16,683.664 1144.72,683.664 1145.28,683.664 1145.84,683.664 1146.4,683.664 1146.96,683.664 1147.51,683.664 1148.07,683.664 1148.63,683.664 1149.19,683.664 1149.75,683.664 1150.31,683.664 1150.87,683.664 1151.43,683.664 1151.99,683.664 1152.55,683.664 1153.11,683.664 1153.67,683.664 1154.23,683.664 1154.78,683.664 1155.34,683.664 1155.9,683.664 1156.46,683.664 1157.02,683.664 1157.58,683.664 1158.14,683.664 1158.7,683.664 1159.26,683.664 1159.82,683.664 1160.38,683.664 1160.94,683.664 1161.5,683.664 1162.05,683.664 1162.61,683.664 1163.17,683.664 1163.73,683.664 1164.29,683.664 1164.85,683.664 1165.41,683.664 1165.97,683.664 1166.53,683.664 1167.09,683.664 1167.65,683.664 1168.21,683.664 1168.77,683.664 1169.33,683.664 1169.88,683.664 1170.44,683.664 1171,683.664 1171.56,683.664 1172.12,683.664 1172.68,683.664 1173.24,683.664 1173.8,683.664 1174.36,683.664 1174.92,683.664 1175.48,683.664 1176.04,683.664 1176.6,683.664 1177.15,683.664 1177.71,683.664 1178.27,683.664 1178.83,683.664 1179.39,683.664 1179.95,683.664 1180.51,683.664 1181.07,683.664 1181.63,683.664 1182.19,683.664 1182.75,683.664 1183.31,683.664 1183.87,683.664 1184.43,683.664 1184.98,683.664 1185.54,683.664 1186.1,683.664 1186.66,683.664 1187.22,683.664 1187.78,683.664 1188.34,683.664 1188.9,683.664 1189.46,683.664 1190.02,683.664 1190.58,683.664 1191.14,683.664 1191.7,683.664 1192.25,683.664 1192.81,683.664 1193.37,683.664 1193.93,683.664 1194.49,683.664 1195.05,683.664 1195.61,683.664 1196.17,683.664 1196.73,683.664 1197.29,683.664 1197.85,683.664 1198.41,683.664 1198.97,683.664 1199.52,683.664 1200.08,683.664 1200.64,683.664 1201.2,683.664 1201.76,683.664 1202.32,683.664 1202.88,683.664 1203.44,683.664 1204,683.664 1204.56,683.664 1205.12,683.664 1205.68,683.664 1206.24,683.664 1206.8,683.664 1207.35,683.664 1207.91,683.664 1208.47,683.664 1209.03,683.664 1209.59,683.664 1210.15,683.664 1210.71,683.664 1211.27,683.664 1211.83,683.664 1212.39,683.664 1212.95,683.664 1213.51,683.664 1214.07,683.664 1214.62,683.664 1215.18,683.664 1215.74,683.664 1216.3,683.664 1216.86,683.664 1217.42,683.664 1217.98,683.664 1218.54,683.664 1219.1,683.664 1219.66,683.664 1220.22,683.664 1220.78,683.664 1221.34,683.664 1221.89,683.664 1222.45,683.664 1223.01,683.664 1223.57,683.664 1224.13,683.664 1224.69,683.664 1225.25,683.664 1225.81,683.664 1226.37,683.664 1226.93,683.664 1227.49,683.664 1228.05,683.664 1228.61,683.664 1229.17,683.664 1229.72,683.664 1230.28,683.664 1230.84,683.664 1231.4,683.664 1231.96,683.664 1232.52,683.664 1233.08,683.664 1233.64,683.664 1234.2,683.664 1234.76,683.664 1235.32,683.664 1235.88,683.664 1236.44,683.664 1236.99,683.664 1237.55,683.664 1238.11,683.664 1238.67,683.664 1239.23,683.664 1239.79,683.664 1240.35,683.664 1240.91,683.664 1241.47,683.664 1242.03,683.664 1242.59,683.664 1243.15,683.664 1243.71,683.664 1244.26,683.664 1244.82,683.664 1245.38,683.664 1245.94,683.664 1246.5,683.664 1247.06,683.664 1247.62,683.664 1248.18,683.664 1248.74,683.664 1249.3,683.664 1249.86,683.664 1250.42,683.664 1250.98,683.664 1251.54,683.664 1252.09,683.664 1252.65,683.664 1253.21,683.664 1253.77,683.664 1254.33,683.664 1254.89,683.664 1255.45,683.664 1256.01,683.664 1256.57,683.664 1257.13,683.664 1257.69,683.664 1258.25,683.664 1258.81,683.664 1259.36,683.664 1259.92,683.664 1260.48,683.664 1261.04,683.664 1261.6,683.664 1262.16,683.664 1262.72,683.664 1263.28,683.664 1263.84,683.664 1264.4,683.664 1264.96,683.664 1265.52,683.664 1266.08,683.664 1266.63,683.664 1267.19,683.664 1267.75,683.664 1268.31,683.664 1268.87,683.664 1269.43,683.664 1269.99,683.664 1270.55,683.664 1271.11,683.664 1271.67,683.664 1272.23,683.664 1272.79,683.664 1273.35,683.664 1273.91,683.664 1274.46,683.664 1275.02,683.664 1275.58,683.664 1276.14,683.664 1276.7,683.664 1277.26,683.664 1277.82,683.664 1278.38,683.664 1278.94,683.664 1279.5,683.664 1280.06,683.664 1280.62,683.664 1281.18,683.664 1281.73,683.664 1282.29,683.664 1282.85,683.664 1283.41,683.664 1283.97,683.664 1284.53,683.664 1285.09,683.664 1285.65,683.664 1286.21,683.664 1286.77,683.664 1287.33,683.664 1287.89,683.664 1288.45,683.664 1289,683.664 1289.56,683.664 1290.12,683.664 1290.68,683.664 1291.24,683.664 1291.8,683.664 1292.36,683.664 1292.92,683.664 1293.48,683.664 1294.04,683.664 1294.6,683.664 1295.16,683.664 1295.72,683.664 1296.28,683.664 1296.83,683.664 1297.39,683.664 1297.95,683.664 1298.51,683.664 1299.07,683.664 1299.63,683.664 1300.19,683.664 1300.75,683.664 1301.31,683.664 1301.87,683.664 1302.43,683.664 1302.99,683.664 1303.55,683.664 1304.1,683.664 1304.66,683.664 1305.22,683.664 1305.78,683.664 1306.34,683.664 1306.9,683.664 1307.46,683.664 1308.02,683.664 1308.58,683.664 1309.14,683.664 1309.7,683.664 1310.26,683.664 1310.82,683.664 1311.38,683.664 1311.93,683.664 1312.49,683.664 1313.05,683.664 1313.61,683.664 1314.17,683.664 1314.73,683.664 1315.29,683.664 1315.85,683.664 1316.41,683.664 1316.97,683.664 1317.53,683.664 1318.09,683.664 1318.65,683.664 1319.2,683.664 1319.76,683.664 1320.32,683.664 1320.88,683.664 1321.44,683.664 1322,683.664 1322.56,683.664 1323.12,683.664 1323.68,683.664 1324.24,683.664 1324.8,683.664 1325.36,683.664 1325.92,683.664 1326.47,683.664 1327.03,683.664 1327.59,683.664 1328.15,683.664 1328.71,683.664 1329.27,683.664 1329.83,683.664 1330.39,683.664 1330.95,683.664 1331.51,683.664 1332.07,683.664 1332.63,683.664 1333.19,683.664 1333.75,683.664 1334.3,683.664 1334.86,683.664 1335.42,683.664 1335.98,683.664 1336.54,683.664 1337.1,683.664 1337.66,683.664 1338.22,683.664 1338.78,683.664 1339.34,683.664 1339.9,683.664 1340.46,683.664 1341.02,683.664 1341.57,683.664 1342.13,683.664 1342.69,683.664 1343.25,683.664 1343.81,683.664 1344.37,683.664 1344.93,683.664 1345.49,683.664 1346.05,683.664 1346.61,683.664 1347.17,683.664 1347.73,683.664 1348.29,683.664 1348.84,683.664 1349.4,683.664 1349.96,683.664 1350.52,683.664 1351.08,683.664 1351.64,683.664 1352.2,683.664 1352.76,683.664 1353.32,683.664 1353.88,683.664 1354.44,683.664 1355,683.664 1355.56,683.664 1356.12,683.664 1356.67,683.664 1357.23,683.664 1357.79,683.664 1358.35,683.664 1358.91,683.664 1359.47,683.664 1360.03,683.664 1360.59,683.664 1361.15,683.664 1361.71,683.664 1362.27,683.664 1362.83,683.664 1363.39,683.664 1363.94,683.664 1364.5,683.664 1365.06,683.664 1365.62,683.664 1366.18,683.664 1366.74,683.664 1367.3,683.664 1367.86,683.664 1368.42,683.664 1368.98,683.664 1369.54,683.664 1370.1,683.664 1370.66,683.664 1371.21,683.664 1371.77,683.664 1372.33,683.664 1372.89,683.664 1373.45,683.664 1374.01,683.664 1374.57,683.664 1375.13,683.664 1375.69,683.664 1376.25,683.664 1376.81,683.664 1377.37,683.664 1377.93,683.664 1378.49,683.664 1379.04,683.664 1379.6,683.664 1380.16,683.664 1380.72,683.664 1381.28,683.664 1381.84,683.664 1382.4,683.664 1382.96,683.664 1383.52,683.664 1384.08,683.664 1384.64,683.664 1385.2,683.664 1385.76,683.664 1386.31,683.664 1386.87,683.664 1387.43,683.664 1387.99,683.664 1388.55,683.664 1389.11,683.664 1389.67,683.664 1390.23,683.664 1390.79,683.664 1391.35,683.664 1391.91,683.664 1392.47,683.664 1393.03,683.664 1393.58,683.664 1394.14,683.664 1394.7,683.664 1395.26,683.664 1395.82,683.664 1396.38,683.664 1396.94,683.664 1397.5,683.664 1398.06,683.664 1398.62,683.664 1399.18,683.664 1399.74,683.664 1400.3,683.664 1400.86,683.664 1401.41,683.664 1401.97,683.664 1402.53,683.664 1403.09,683.664 1403.65,683.664 1404.21,683.664 1404.77,683.664 1405.33,683.664 1405.89,683.664 1406.45,683.664 1407.01,683.664 1407.57,683.664 1408.13,683.664 1408.68,683.664 1409.24,683.664 1409.8,683.664 1410.36,683.664 1410.92,683.664 1411.48,683.664 1412.04,683.664 1412.6,683.664 1413.16,683.664 1413.72,683.664 1414.28,683.664 1414.84,683.664 1415.4,683.664 1415.95,683.664 1416.51,683.664 1417.07,683.664 1417.63,683.664 1418.19,683.664 1418.75,683.664 1419.31,683.664 1419.87,683.664 1420.43,683.664 1420.99,683.664 1421.55,683.664 1422.11,683.664 1422.67,683.664 1423.23,683.664 1423.78,683.664 1424.34,683.664 1424.9,683.664 1425.46,683.664 1426.02,683.664 1426.58,683.664 1427.14,683.664 1427.7,683.664 1428.26,683.664 1428.82,683.664 1429.38,683.664 1429.94,683.664 1430.5,683.664 1431.05,683.664 1431.61,683.664 1432.17,683.664 1432.73,683.664 1433.29,683.664 1433.85,683.664 1434.41,683.664 1434.97,683.664 1435.53,683.664 1436.09,683.664 1436.65,683.664 1437.21,683.664 1437.77,683.664 1438.33,683.664 1438.88,683.664 1439.44,683.664 1440,683.664 1440.56,683.664 1441.12,683.664 1441.68,683.664 1442.24,683.664 1442.8,683.664 1443.36,683.664 1443.92,683.664 1444.48,683.664 1445.04,683.664 1445.6,683.664 1446.15,683.664 1446.71,683.664 1447.27,683.664 1447.83,683.664 1448.39,683.664 1448.95,683.664 1449.51,683.664 1450.07,683.664 1450.63,683.664 1451.19,683.664 1451.75,683.664 1452.31,683.664 1452.87,683.664 1453.42,683.664 1453.98,683.664 1454.54,683.664 1455.1,683.664 1455.66,683.664 1456.22,683.664 1456.78,683.664 1457.34,683.664 1457.9,683.664 1458.46,683.664 1459.02,683.664 1459.58,683.664 1460.14,683.664 1460.7,683.664 1461.25,683.664 1461.81,683.664 1462.37,683.664 1462.93,683.664 1463.49,683.664 1464.05,683.664 1464.61,683.664 1465.17,683.664 1465.73,683.664 1466.29,683.664 1466.85,683.664 1467.41,683.664 1467.97,683.664 1468.52,683.664 1469.08,683.664 1469.64,683.664 1470.2,683.664 1470.76,683.664 1471.32,683.664 1471.88,683.664 1472.44,683.664 1473,683.664 1473.56,683.664 1474.12,683.664 1474.68,683.664 1475.24,683.664 1475.79,683.664 1476.35,683.664 1476.91,683.664 1477.47,683.664 1478.03,683.664 1478.59,683.664 1479.15,683.664 1479.71,683.664 1480.27,683.664 1480.83,683.664 1481.39,683.664 1481.95,683.664 1482.51,683.664 1483.07,683.664 1483.62,683.664 1484.18,683.664 1484.74,683.664 1485.3,683.664 1485.86,683.664 1486.42,683.664 1486.98,683.664 1487.54,683.664 1488.1,683.664 1488.66,683.664 1489.22,683.664 1489.78,683.664 1490.34,683.664 1490.89,683.664 1491.45,683.664 1492.01,683.664 1492.57,683.664 1493.13,683.664 1493.69,683.664 1494.25,683.664 1494.81,683.664 1495.37,683.664 1495.93,683.664 1496.49,683.664 1497.05,683.664 1497.61,683.664 1498.16,683.664 1498.72,683.664 1499.28,683.664 1499.84,683.664 1500.4,683.664 1500.96,683.664 1501.52,683.664 1502.08,683.664 1502.64,683.664 1503.2,683.664 1503.76,683.664 1504.32,683.664 1504.88,683.664 1505.44,683.664 1505.99,683.664 1506.55,683.664 1507.11,683.664 1507.67,683.664 1508.23,683.664 1508.79,683.664 1509.35,683.664 1509.91,683.664 1510.47,683.664 1511.03,683.664 1511.59,683.664 1512.15,683.664 1512.71,683.664 1513.26,683.664 1513.82,683.664 1514.38,683.664 1514.94,683.664 1515.5,683.664 1516.06,683.664 1516.62,683.664 1517.18,683.664 1517.74,683.664 1518.3,683.664 1518.86,683.664 1519.42,683.664 1519.98,683.664 1520.53,683.664 1521.09,683.664 1521.65,683.664 1522.21,683.664 1522.77,683.664 1523.33,683.664 1523.89,683.664 1524.45,683.664 1525.01,683.664 1525.57,683.664 1526.13,683.664 1526.69,683.664 1527.25,683.664 1527.81,683.664 1528.36,683.664 1528.92,683.664 1529.48,683.664 1530.04,683.664 1530.6,683.664 1531.16,683.664 1531.72,683.664 1532.28,683.664 1532.84,683.664 1533.4,683.664 1533.96,683.664 1534.52,683.664 1535.08,683.664 1535.63,683.664 1536.19,683.664 1536.75,683.664 1537.31,683.664 1537.87,683.664 1538.43,683.664 1538.99,683.664 1539.55,683.664 1540.11,683.664 1540.67,683.664 1541.23,683.664 1541.79,683.664 1542.35,683.664 1542.9,683.664 1543.46,683.664 1544.02,683.664 1544.58,683.664 1545.14,683.664 1545.7,683.664 1546.26,683.664 1546.82,683.664 1547.38,683.664 1547.94,683.664 1548.5,683.664 1549.06,683.664 1549.62,683.664 1550.18,683.664 1550.73,683.664 1551.29,683.664 1551.85,683.664 1552.41,683.664 1552.97,683.664 1553.53,683.664 1554.09,683.664 1554.65,683.664 1555.21,683.664 1555.77,683.664 1556.33,683.664 1556.89,683.664 1557.45,683.664 1558,683.664 1558.56,683.664 1559.12,683.664 1559.68,683.664 1560.24,683.664 1560.8,683.664 1561.36,683.664 1561.92,683.664 1562.48,683.664 1563.04,683.664 1563.6,683.664 1564.16,683.664 1564.72,683.664 1565.28,683.664 1565.83,683.664 1566.39,683.664 1566.95,683.664 1567.51,683.664 1568.07,683.664 1568.63,683.664 1569.19,683.664 1569.75,683.664 1570.31,683.664 1570.87,683.664 1571.43,683.664 1571.99,683.664 1572.55,683.664 1573.1,683.664 1573.66,683.664 1574.22,683.664 1574.78,683.664 1575.34,683.664 1575.9,683.664 1576.46,683.664 1577.02,683.664 1577.58,683.664 1578.14,683.664 1578.7,683.664 1579.26,683.664 1579.82,683.664 1580.37,683.664 1580.93,683.664 1581.49,683.664 1582.05,683.664 1582.61,683.664 1583.17,683.664 1583.73,683.664 1584.29,683.664 1584.85,683.664 1585.41,683.664 1585.97,683.664 1586.53,683.664 1587.09,683.664 1587.65,683.664 1588.2,683.664 1588.76,683.664 1589.32,683.664 1589.88,683.664 1590.44,683.664 1591,683.664 1591.56,683.664 1592.12,683.664 1592.68,683.664 1593.24,683.664 1593.8,683.664 1594.36,683.664 1594.92,683.664 1595.47,683.664 1596.03,683.664 1596.59,683.664 1597.15,683.664 1597.71,683.664 1598.27,683.664 1598.83,683.664 1599.39,683.664 1599.95,683.664 1600.51,683.664 1601.07,683.664 1601.63,683.664 1602.19,683.664 1602.74,683.664 1603.3,683.664 1603.86,683.664 1604.42,683.664 1604.98,683.664 1605.54,683.664 1606.1,683.664 1606.66,683.664 1607.22,683.664 1607.78,683.664 1608.34,683.664 1608.9,683.664 1609.46,683.664 1610.02,683.664 1610.57,683.664 1611.13,683.664 1611.69,683.664 1612.25,683.664 1612.81,683.664 1613.37,683.664 1613.93,683.664 1614.49,683.664 1615.05,683.664 1615.61,683.664 1616.17,683.664 1616.73,683.664 1617.29,683.664 1617.84,683.664 1618.4,683.664 1618.96,683.664 1619.52,683.664 1620.08,683.664 1620.64,683.664 1621.2,683.664 1621.76,683.664 1622.32,683.664 1622.88,683.664 1623.44,683.664 1624,683.664 1624.56,683.664 1625.11,683.664 1625.67,683.664 1626.23,683.664 1626.79,683.664 1627.35,683.664 1627.91,683.664 1628.47,683.664 1629.03,683.664 1629.59,683.664 1630.15,683.664 1630.71,683.664 1631.27,683.664 1631.83,683.664 1632.39,683.664 1632.94,683.664 1633.5,683.664 1634.06,683.664 1634.62,683.664 1635.18,683.664 1635.74,683.664 1636.3,683.664 1636.86,683.664 1637.42,683.664 1637.98,683.664 1638.54,683.664 1639.1,683.664 1639.66,683.664 1640.21,683.664 1640.77,683.664 1641.33,683.664 1641.89,683.664 1642.45,683.664 1643.01,683.664 1643.57,683.664 1644.13,683.664 1644.69,683.664 1645.25,683.664 1645.81,683.664 1646.37,683.664 1646.93,683.664 1647.48,683.664 1648.04,683.664 1648.6,683.664 1649.16,683.664 1649.72,683.664 1650.28,683.664 1650.84,683.664 1651.4,683.664 1651.96,683.664 1652.52,683.664 1653.08,683.664 1653.64,683.664 1654.2,683.664 1654.76,683.664 1655.31,683.664 1655.87,683.664 1656.43,683.664 1656.99,683.664 1657.55,683.664 1658.11,683.664 1658.67,683.664 1659.23,683.664 1659.79,683.664 1660.35,683.664 1660.91,683.664 1661.47,683.664 1662.03,683.664 1662.58,683.664 1663.14,683.664 1663.7,683.664 1664.26,683.664 1664.82,683.664 1665.38,683.664 1665.94,683.664 1666.5,683.664 1667.06,683.664 1667.62,683.664 1668.18,683.664 1668.74,683.664 1669.3,683.664 1669.85,683.664 1670.41,683.664 1670.97,683.664 1671.53,683.664 1672.09,683.664 1672.65,683.664 1673.21,683.664 1673.77,683.664 1674.33,683.664 1674.89,683.664 1675.45,683.664 1676.01,683.664 1676.57,683.664 1677.13,683.664 1677.68,683.664 1678.24,683.664 1678.8,683.664 1679.36,683.664 1679.92,683.664 1680.48,683.664 1681.04,683.664 1681.6,683.664 1682.16,683.664 1682.72,683.664 1683.28,683.664 1683.84,683.664 1684.4,683.664 1684.95,683.664 1685.51,683.664 1686.07,683.664 1686.63,683.664 1687.19,683.664 1687.75,683.664 1688.31,683.664 1688.87,683.664 1689.43,683.664 1689.99,683.664 1690.55,683.664 1691.11,683.664 1691.67,683.664 1692.23,683.664 1692.78,683.664 1693.34,683.664 1693.9,683.664 1694.46,683.664 1695.02,683.664 1695.58,683.664 1696.14,683.664 1696.7,683.664 1697.26,683.664 1697.82,683.664 1698.38,683.664 1698.94,683.664 1699.5,683.664 1700.05,683.664 1700.61,683.664 1701.17,683.664 1701.73,683.664 1702.29,683.664 1702.85,683.664 1703.41,683.664 1703.97,683.664 1704.53,683.664 1705.09,683.664 1705.65,683.664 1706.21,683.664 1706.77,683.664 1707.32,683.664 1707.88,683.664 1708.44,683.664 1709,683.664 1709.56,683.664 1710.12,683.664 1710.68,683.664 1711.24,683.664 1711.8,683.664 1712.36,683.664 1712.92,683.664 1713.48,683.664 1714.04,683.664 1714.6,683.664 1715.15,683.664 1715.71,683.664 1716.27,683.664 1716.83,683.664 1717.39,683.664 1717.95,683.664 1718.51,683.664 1719.07,683.664 1719.63,683.664 1720.19,683.664 1720.75,683.664 1721.31,683.664 1721.87,683.664 1722.42,683.664 1722.98,683.664 1723.54,683.664 1724.1,683.664 1724.66,683.664 1725.22,683.664 1725.78,683.664 1726.34,683.664 1726.9,683.664 1727.46,683.664 1728.02,683.664 1728.58,683.664 1729.14,683.664 1729.69,683.664 1730.25,683.664 1730.81,683.664 1731.37,683.664 1731.93,683.664 1732.49,683.664 1733.05,683.664 1733.61,683.664 1734.17,683.664 1734.73,683.664 1735.29,683.664 1735.85,683.664 1736.41,683.664 1736.97,683.664 1737.52,683.664 1738.08,683.664 1738.64,683.664 1739.2,683.664 1739.76,683.664 1740.32,683.664 1740.88,683.664 1741.44,683.664 1742,683.664 1742.56,683.664 1743.12,683.664 1743.68,683.664 1744.24,683.664 1744.79,683.664 1745.35,683.664 1745.91,683.664 1746.47,683.664 1747.03,683.664 1747.59,683.664 1748.15,683.664 1748.71,683.664 1749.27,683.664 1749.83,683.664 1750.39,683.664 1750.95,683.664 1751.51,683.664 1752.06,683.664 1752.62,683.664 1753.18,683.664 1753.74,683.664 1754.3,683.664 1754.86,683.664 1755.42,683.664 1755.98,683.664 1756.54,683.664 1757.1,683.664 1757.66,683.664 1758.22,683.664 1758.78,683.664 1759.34,683.664 1759.89,683.664 1760.45,683.664 1761.01,683.664 1761.57,683.664 1762.13,683.664 1762.69,683.664 1763.25,683.664 1763.81,683.664 1764.37,683.664 1764.93,683.664 1765.49,683.664 1766.05,683.664 1766.61,683.664 1767.16,683.664 1767.72,683.664 1768.28,683.664 1768.84,683.664 1769.4,683.664 1769.96,683.664 1770.52,683.664 1771.08,683.664 1771.64,683.664 1772.2,683.664 1772.76,683.664 1773.32,683.664 1773.88,683.664 1774.43,683.664 1774.99,683.664 1775.55,683.664 1776.11,683.664 1776.67,683.664 1777.23,683.664 1777.79,683.664 1778.35,683.664 1778.91,683.664 1779.47,683.664 1780.03,683.664 1780.59,683.664 1781.15,683.664 1781.71,683.664 1782.26,683.664 1782.82,683.664 1783.38,683.664 1783.94,683.664 1784.5,683.664 1785.06,683.664 1785.62,683.664 1786.18,683.664 1786.74,683.664 1787.3,683.664 1787.86,683.664 1788.42,683.664 1788.98,683.664 1789.53,683.664 1790.09,683.664 1790.65,683.664 1791.21,683.664 1791.77,683.664 1792.33,683.664 1792.89,683.664 1793.45,683.664 1794.01,683.664 1794.57,683.664 1795.13,683.664 1795.69,683.664 1796.25,683.664 1796.8,683.664 1797.36,683.664 1797.92,683.664 1798.48,683.664 1799.04,683.664 1799.6,683.664 1800.16,683.664 1800.72,683.664 1801.28,683.664 1801.84,683.664 1802.4,683.664 1802.96,683.664 1803.52,683.664 1804.08,683.664 1804.63,683.664 1805.19,683.664 1805.75,683.664 1806.31,683.664 1806.87,683.664 1807.43,683.664 1807.99,683.664 1808.55,683.664 1809.11,683.664 1809.67,683.664 1810.23,683.664 1810.79,683.664 1811.35,683.664 1811.9,683.664 1812.46,683.664 1813.02,683.664 1813.58,683.664 1814.14,683.664 1814.7,683.664 1815.26,683.664 1815.82,683.664 1816.38,683.664 1816.94,683.664 1817.5,683.664 1818.06,683.664 1818.62,683.664 1819.18,683.664 1819.73,683.664 1820.29,683.664 1820.85,683.664 1821.41,683.664 1821.97,683.664 1822.53,683.664 1823.09,683.664 1823.65,683.664 1824.21,683.664 1824.77,683.664 1825.33,683.664 1825.89,683.664 1826.45,683.664 1827,683.664 1827.56,683.664 1828.12,683.664 1828.68,683.664 1829.24,683.664 1829.8,683.664 1830.36,683.664 1830.92,683.664 1831.48,683.664 1832.04,683.664 1832.6,683.664 1833.16,683.664 1833.72,683.664 1834.27,683.664 1834.83,683.664 1835.39,683.664 1835.95,683.664 1836.51,683.664 1837.07,683.664 1837.63,683.664 1838.19,683.664 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.034653987847846 ± 0.02284806299126445\nProjected Energy: -4.0154827874405346 ± (0.005340339726067178, 0.004899122930433819)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.649506</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">2.0848e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.2692e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.078e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.472e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.126e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">1.0069e-5</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.3631242916133655\n -0.759019192277071\n  0.1358418221962303\n  0.15789998694607021\n  0.8767114411781307\n  1.5305929970973358\n  1.5835732611867357\n  3.0728703303258635\n  3.125672653951841\n  4.862107221562172\n  6.260694850380593\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2MomCorrelator\nG2RealSpace\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other-model-Hamiltonaians","page":"Hamiltonians","title":"Other model Hamiltonaians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d. It returns a Complex value.\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\n\nSee also\n\nRimu.G2RealCorrelator\nRimu.G2RealSpace\nRimu.AbstractOperator\nRimu.AllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.14.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"},{"location":"custom_hamiltonians.html#Advanced-operator-usage-and-custom-Hamiltonians","page":"Custom Hamiltonians","title":"Advanced operator usage and custom Hamiltonians","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu can be used to work with custom Hamiltonians and observables that are user-defined and  not part of the Rimu.jl package. To make this possible and reliable, Rimu exposes a number   of interfaces and provides helper functions to test compliance with the interfaces through the   submodule Rimu.InterfaceTests, see Interface tests. This section covers the  relevant interfaces, the interface functions as well as potentially useful helper functions.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"In order to define custom Hamiltonians or observables it is useful to know how the operator   type hierarchy works in Rimu. For an example of how to implement custom Hamiltonians that   are not part of the Rimu.jl package, see   RimuLegacyHamiltonians.jl.","category":"page"},{"location":"custom_hamiltonians.html#Operator-type-hierarchy","page":"Custom Hamiltonians","title":"Operator type hierarchy","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu offers a hierarchy of abstract types that define interfaces with different requirements for operators:","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian <: AbstractOperator <: AbstractObservable","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The different abstract types have different requirements and are meant to be used for different purposes. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonians are fully featured models that define a Hilbert space and a linear operator over a scalar field. They can be passed as a Hamiltonian into ProjectorMonteCarloProblem or ExactDiagonalizationProblem.\nAbstractOperator and AbstractObservable are supertypes of AbstractHamiltonian with less stringent conditions. They are useful for defining observables that can be used in a three-way dot product, or passed as observables into a ReplicaStrategy in a ProjectorMonteCarloProblem.","category":"page"},{"location":"custom_hamiltonians.html#Hamiltonians-interface","page":"Custom Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. A new  model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Custom Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.starting_address","page":"Custom Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Custom Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Custom Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Custom Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Custom Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Base.eltype","page":"Custom Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#VectorInterface.scalartype","page":"Custom Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.mul!","page":"Custom Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"custom_hamiltonians.html#Base.adjoint","page":"Custom Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#LinearAlgebra.dot","page":"Custom Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Operator-and-observable-interface","page":"Custom Hamiltonians","title":"Operator and observable interface","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"AbstractObservable\nAbstractOperator","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Custom Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"custom_hamiltonians.html#Interface-tests","page":"Custom Hamiltonians","title":"Interface tests","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Helper functions that can be used for testing the various interfaces are provided in the  (unexported) submodule Rimu.InterfaceTests. ","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests","text":"The module Rimu.InterfaceTests provides functions to test compliance with the AbstractObservable, AbstractOperator, and AbstractHamiltonian interfaces. Load the module with using Rimu.InterfaceTests.\n\nThe module exports the following functions:\n\ntest_observable_interface\ntest_operator_interface\ntest_hamiltonian_interface\ntest_hamiltonian_structure\n\n\n\n\n\n","category":"module"},{"location":"custom_hamiltonians.html#Testing-functions","page":"Custom Hamiltonians","title":"Testing functions","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Rimu.InterfaceTests.test_hamiltonian_interface\nRimu.InterfaceTests.test_hamiltonian_structure\nRimu.InterfaceTests.test_observable_interface\nRimu.InterfaceTests.test_operator_interface","category":"page"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_interface","text":"test_hamiltonian_interface(h, addr=starting_address(h); test_spawning=true)\n\nThe main purpose of this test function is to check that all required methods of the AbstractHamiltonian interface are defined and work as expected.\n\nSet test_spawning=false to skip tests that require offdiagonals to return an AbstractVector.\n\nThis function also tests the following properties of the Hamiltonian:\n\ndimension(h) ≥ dimension(h, addr)\nscalartype(h) === eltype(h)\nHamiltonian action on a vector <: AbstractDVec\nstarting_address returns an allows_address_type address\nLOStructure is one of IsDiagonal, IsHermitian, AdjointKnown\nthe AbstractOperator interface is tested\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_interface(HubbardRealSpace(BoseFS(2,0,3,1)));\nTest Summary:                          | Pass  Total  Time\nObservable interface: HubbardRealSpace |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                        | Pass  Total  Time\nOperator interface: HubbardRealSpace |    9      9  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                                 | Pass  Total  Time\nHamiltonians-only tests with HubbardRealSpace |    6      6  0.0s\n\nSee also test_operator_interface, test_observable_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_hamiltonian_structure","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_hamiltonian_structure","text":"test_hamiltonian_structure(h::AbstractHamiltonian; sizelim=20)\n\nTest the LOStructure of a small Hamiltonian h by instantiating it as a sparse matrix and checking whether the structure of the matrix is constistent with the result of LOStructure(h) and the eltype is consistent with eltype(h).\n\nThis function is intended to be used in automated test for small Hamiltonians where instantiating the matrix is quick. A warning will print if the dimension of the Hamiltonian is larger than 20.\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_hamiltonian_structure(HubbardRealSpace(BoseFS(2,0,1)));\nTest Summary: | Pass  Total  Time\nstructure     |    4      4  0.0s\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_observable_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_observable_interface","text":"test_observable_interface(obs, addr)\n\nThis function tests compliance with the AbstractObservable interface for an observable obs at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nThe following properties are tested:\n\ndot(v, obs, v) returns a value of the same type as the eltype of the observable\nLOStructure is set consistently\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_observable_interface(ReducedDensityMatrix(2), FermiFS(1,0,1,1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: ReducedDensityMatrix |    4      4  0.0s\n\nSee also AbstractObservable, test_operator_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.InterfaceTests.test_operator_interface","page":"Custom Hamiltonians","title":"Rimu.InterfaceTests.test_operator_interface","text":"test_operator_interface(op, addr; test_spawning=true)\n\nThis function tests compliance with the AbstractOperator interface for an operator op at address addr (typically <: AbstractFockAddress) by checking that all required methods are defined.\n\nIf test_spawning is true, tests are performed that require offdiagonals to return an Hamiltonians.AbstractOffDiagonals, which is a prerequisite for using the spawn! function. Otherwise, the spawning tests are skipped.\n\nThe following properties are tested:\n\ndiagonal_element returns a value of the same type as the eltype of the operator\noffdiagonals behaves like an AbstractVector\nnum_offdiagonals returns the correct number of offdiagonals\nrandom_offdiagonal returns a tuple with the correct types\nmul! and dot work as expected\ndimension returns a consistent value\nthe AbstractObservable interface is tested\n\nExample\n\njulia> using Rimu.InterfaceTests\n\njulia> test_operator_interface(SuperfluidCorrelator(3), BoseFS(1, 2, 3, 1));\nTest Summary:                              | Pass  Total  Time\nObservable interface: SuperfluidCorrelator |    4      4  0.0s\nTest Summary:       | Pass  Total  Time\nallows_address_type |    1      1  0.0s\nTest Summary:                            | Pass  Total  Time\nOperator interface: SuperfluidCorrelator |    9      9  0.0s\n\nSee also AbstractOperator, test_observable_interface, test_hamiltonian_interface.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Utilities-for-harmonic-oscillator-models","page":"Custom Hamiltonians","title":"Utilities for harmonic oscillator models","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim};\n    target_energy = nothing,\n    max_energy = nothing,\n    max_blocks = nothing,\n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns\n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRepresentation\nindices: tuple of mode indices that allow recreation of the generating address   addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when   the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating   tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved   after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.   Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds addr are determined by parity. In this case the blocks are not generated; t_basis will be zero, and block_size will be an estimate. Pass the seed addresses to BasisSetRepresentation with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis indices n_xn_yldots. These indices are bounded by S which is a tuple of the maximum number of states in each dimension. By default the groundstate in each dimension is indexed by 0, but this can be changed by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Custom Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"custom_hamiltonians.html#Index","page":"Custom Hamiltonians","title":"Index","text":"","category":"section"},{"location":"custom_hamiltonians.html","page":"Custom Hamiltonians","title":"Custom Hamiltonians","text":"Pages   = [\"custom_hamiltonians.md\"]","category":"page"}]
}
